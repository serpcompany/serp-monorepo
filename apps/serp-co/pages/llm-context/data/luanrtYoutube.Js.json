[
  {
    "owner": "luanrt",
    "repo": "youtube.js",
    "content": "TITLE: Defining SegmentedLikeDislikeButtonView class - TypeScript\nDESCRIPTION: Defines a TypeScript class SegmentedLikeDislikeButtonView that extends the reusable YTNode base class, for use in parsing YouTube segmented like/dislike button UI components. It includes properties for like/dislike button views, various like count forms, dynamic update mechanisms, and uses strong typing for all fields. The class also implements and overrides methods for type casting, checking, and keyed access, leveraging helpers for node introspection. Dependencies include other YouTube.js parser nodes (e.g., YTNode, LikeButtonView, DislikeButtonView), and it assumes input data of a RawNode type; output is a class instance representing the button view node, with limitations driven by the underlying YouTube data model.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SegmentedLikeDislikeButtonView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SegmentedLikeDislikeButtonView extends YTNode {\n  static type: string = 'SegmentedLikeDislikeButtonView';\n\n  like_button: null | LikeButtonView;\n  dislike_button: null | DislikeButtonView;\n  icon_type: string;\n  like_count_entity: {\n    key: string;\n  };\n  dynamic_like_count_update_data: {\n    placeholder_like_count_values_key: string;\n    update_delay_loop_id: string;\n    update_delay_sec: number;\n    update_status_key: string;\n  };\n  like_count?: number;\n  short_like_count?: string;\n\n  constructor(data: RawNode) {\n    super();\n    // ...implementation parsing data\n  }\n  // ...other methods inherited from YTNode (is, as, hasKey, key)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Extending ShowingResultsFor Node - TypeScript\nDESCRIPTION: Defines the ShowingResultsFor class, extending from YTNode, to encapsulate detailed information about corrected and original search queries on YouTube. Requires the TypeScript environment, with dependencies on YTNode, Text, and NavigationEndpoint class definitions. Constructor requires a single parameter (data) of type RawNode and provides instance properties for corrected and original queries, their endpoints, and helper methods inherited from YTNode for type-checking, casting, and key access. Inputs are search result data nodes; class outputs include properly typed properties for all relevant search/redirection information. Designed for internal use when parsing API responses, not for direct API consumers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowingResultsFor.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/parser/classes/ShowingResultsFor.ts\nimport YTNode from '../../Helpers/classes/YTNode';\nimport Text from '../../Misc/classes/Text';\nimport NavigationEndpoint from './NavigationEndpoint';\n\nclass ShowingResultsFor extends YTNode {\n  static type = 'ShowingResultsFor';\n  corrected_query: Text;\n  original_query: Text;\n  corrected_query_endpoint: NavigationEndpoint;\n  original_query_endpoint: NavigationEndpoint;\n  search_instead_for: Text;\n  showing_results_for: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.corrected_query = new Text(data.correctedQuery);\n    this.original_query = new Text(data.originalQuery);\n    this.corrected_query_endpoint = new NavigationEndpoint(data.correctedQueryEndpoint);\n    this.original_query_endpoint = new NavigationEndpoint(data.originalQueryEndpoint);\n    this.search_instead_for = new Text(data.searchInsteadFor);\n    this.showing_results_for = new Text(data.showingResultsFor);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: FlexibleActionsView Class Definition in TypeScript\nDESCRIPTION: This code snippet shows the TypeScript class definition for FlexibleActionsView, which extends YTNode. It includes properties for actions_rows (array of ActionRow objects) and style (string), as well as type definitions for both instance and static contexts.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FlexibleActionsView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass FlexibleActionsView extends YTNode {\n  static type = 'FlexibleActionsView';\n\n  actions_rows: ActionRow[];\n  style: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.actions_rows = [];\n    for (const action_row of data.actionsRows) {\n      this.actions_rows.push(new ActionRow(action_row));\n    }\n    this.style = data.style;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Cookie-based Authentication in YouTube.js\nDESCRIPTION: Example showing how to authenticate with YouTube.js using cookies instead of OAuth2. This method is noted as being less reliable than OAuth2 since cookies can expire and offer less security.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/auth/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst yt = await Innertube.create({\n  cookie: '...'\n});\n```\n\n----------------------------------------\n\nTITLE: Converting Time String to Seconds in TypeScript\nDESCRIPTION: This function takes a time string in the format 'h:m:s' and converts it to the total number of seconds. It is defined in the Utils module of youtubei.js and is useful for time-based calculations or conversions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/timeToSeconds.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntimeToSeconds(time: string): number\n```\n\n----------------------------------------\n\nTITLE: Extending Endpoint Class for Share Entity Services - TypeScript\nDESCRIPTION: Implements the ShareEntityServiceEndpoint class in TypeScript, extending YTNode and implementing IEndpoint for handling share-related actions within the YouTube.js parser. It defines a constructor receiving raw node data, static and instance type properties, and implements API path and request building methods required by IEndpoint. This class also inherits utility methods for type checking, casting, and key inspection from YTNode. Dependencies include the YTNode base class, IEndpoint interface, and ShareEntityServiceRequest types; usage requires instantiating with a valid RawNode and optionally utilizing cast/type checking methods as documented.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEntityServiceEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/parser/classes/endpoints/ShareEntityServiceEndpoint.ts\nimport YTNode from '../../Helpers/classes/YTNode';\nimport type { ShareEntityServiceRequest } from '../../APIResponseTypes/type-aliases/ShareEntityServiceRequest';\nimport type { RawNode } from '../../APIResponseTypes/type-aliases/RawNode';\n\n/**\n * Represents a ShareEntityServiceEndpoint node.\n * Extended by ShareEndpoint and ShareEntityEndpoint.\n * Implements IEndpoint<ShareEntityServiceRequest>.\n */\nexport default class ShareEntityServiceEndpoint extends YTNode implements IEndpoint<ShareEntityServiceRequest> {\n  static type = 'ShareEntityServiceEndpoint';\n  public type: string;\n\n  constructor(data: RawNode) {\n    super();\n    // constructor implementation\n  }\n\n  getApiPath(): string {\n    // Returns the API path for share entity requests\n  }\n\n  buildRequest(): ShareEntityServiceRequest {\n    // Builds and returns the share entity service request object\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Creation Method in TypeScript\nDESCRIPTION: Static method signature for create() that instantiates a new Session with optional configuration\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Session.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic create(options: SessionOptions = {}): Promise<Session>\n```\n\n----------------------------------------\n\nTITLE: Caching OAuth2 Credentials in YouTube.js\nDESCRIPTION: Example showing how to cache OAuth2 credentials in YouTube.js to avoid repeated sign-in flows. This approach is recommended for development only, not for production environments where credentials should be stored more securely.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/auth/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// If you use this, the next call to signIn won't fire 'auth-pending' instead just 'auth'\nawait yt.session.oauth.cacheCredentials();\n```\n\n----------------------------------------\n\nTITLE: Parse Item with Single Type Constraint\nDESCRIPTION: Parses a YouTube data node with single type parameter T extending YTNode. Takes raw node data and single type constructor as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseItem.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nparseItem<T extends YTNode>(data: undefined | RawNode, validTypes: YTNodeConstructor<T>): T | null\n```\n\n----------------------------------------\n\nTITLE: Accessing Properties with Maybe Type in TypeScript\nDESCRIPTION: This snippet demonstrates various ways to access properties on nodes using the 'Maybe' type, including type assertions, instanceof checks, and special methods for use with the parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/parser/README.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Accessing a property on a node when you aren't sure if it exists.\nconst prop = node.key(\"contents\");\n\n// This returns the value wrapped into a `Maybe` type, which you can use to determine the type of the value.\n// However, this throws an error if the key doesn't exist, so we may want to check for the key before accessing it.\nif (node.hasKey(\"contents\")) {\n  const prop = node.key(\"contents\");\n}\n\n// We can assert the type of the value.\nconst prop = node.key(\"contents\");\nif (prop.isString()) {\n  const value = prop.string();\n}\n\n// We can do more complex assertions, like checking for instanceof.\nconst prop = node.key(\"contents\");\nif (prop.isInstanceOf(Text)) {\n  const text = prop.instanceOf(Text);\n  \n  // Then use the value as the given type.\n  text.runs.forEach(run => {\n    console.log(run.text);\n  });\n}\n\n// There are special methods for use with the parser, such as getting the value as a YTNode.\nconst prop = node.key(\"contents\");\nif (prop.isNode()) {\n  const node = prop.node();\n}\n\n// Like with YTNode, keys can also be checked for YTNode child class types.\nconst prop = node.key(\"contents\");\nif (prop.isNodeOfType(TwoColumnSearchResults)) {\n  const results = prop.nodeOfType(TwoColumnSearchResults);\n}\n\n// Or we can check for multiple types of nodes.\nconst prop = node.key(\"contents\");\nif (prop.isNodeOfType([TwoColumnSearchResults, VideoList])) {\n  const results = prop.nodeOfType<TwoColumnSearchResults | VideoList>([TwoColumnSearchResults, VideoList]);\n}\n\n// Sometimes an ObservedArray is returned when working with parsed data.\n// We also have a helper for this.\nconst prop = node.key(\"contents\");\nif (prop.isObserved()) {\n  const array = prop.observed();\n\n  // Now we can use all the ObservedArray methods as normal, such as finding nodes of a certain type.\n  const results = array.filterType(GridVideo);\n}\n\n// Other times a SuperParsedResult is returned, like when using the `Parser#parse` method.\nconst prop = node.key(\"contents\");\nif (prop.isParsed()) {\n  const result = prop.parsed();\n\n  // SuperParsedResult is another helper for type-safe access to the parsed data.\n  // It is explained above with the `Parser#parse` method.\n  const results = results.array();\n  const videos = results.filterType(Video);\n}\n\n// Sometimes we just want to debug something and are not interested in finding the type.\n// This will, however, warn you when being used.\nconst prop = node.key(\"contents\");\nconst value = prop.any();\n\n// Arrays are a special case, as every element may be of a different type.\n// The `arrayOfMaybe` method will return an array of `Maybe`s.\nconst prop = node.key(\"contents\");\nif (prop.isArray()) {\n  const array = prop.arrayOfMaybe(); \n  // This will return `Maybe[]`.\n}\n\n// Or, if you don't need type safety, you can use the `array` method.\nconst prop = node.key(\"contents\");\nif (prop.isArray()) {\n  const array = prop.array();\n  // This will return any[].\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Array with Single Valid Type in TypeScript\nDESCRIPTION: Parses an array of items with a single valid YTNode type. Takes generic type parameter T extending YTNode. Returns an ObservedArray of instances of the specified type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseArray.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nparseArray<T extends YTNode = YTNode>(data: undefined | RawNode[], validType: YTNodeConstructor<T>): ObservedArray<T>\n```\n\n----------------------------------------\n\nTITLE: Managing Playlists - TypeScript\nDESCRIPTION: Methods for retrieving playlist information and user's playlists.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Innertube.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetPlaylist(id: string): Promise<Playlist>\ngetPlaylists(): Promise<Feed<IBrowseResponse>>\n```\n\n----------------------------------------\n\nTITLE: Accessing Best Thumbnail Method in YouTube.js Video Class\nDESCRIPTION: Method that returns the best quality thumbnail from the video's thumbnail array.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nget best_thumbnail(): undefined | Thumbnail {\n  return this.thumbnails[0];\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Innertube Instance with TypeScript\nDESCRIPTION: Example code showing how to create an instance of the Innertube class using a UniversalCache. This is the entry point to using the YouTubei.js library functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Innertube.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Innertube, UniversalCache } from 'youtubei.js';\nconst innertube = await Innertube.create({ cache: new UniversalCache(true)});\n```\n\n----------------------------------------\n\nTITLE: Video Retrieval from Memo\nDESCRIPTION: Static method to extract all videos from a memo object containing search results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Fetching Videos from YouTube Channel\nDESCRIPTION: This method retrieves videos from the channel. It returns a Promise that resolves to a Channel object containing the video data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetVideos(): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Search Continuation\nDESCRIPTION: Method to retrieve the next batch of search results in a paginated search response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<Search>\n```\n\n----------------------------------------\n\nTITLE: Fetching Videos from Memo in YouTube Channel\nDESCRIPTION: This static method retrieves all videos from a given page using a memo object. It returns an ObservedArray of video-related objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Runtime Classes for YouTube.js Parser in TypeScript\nDESCRIPTION: This function takes a class name, example class data, and a logger, then dynamically generates a new class extending YTNode. It introspects the provided data to implement dependencies and create a class structure that matches the example data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/generateRuntimeClass.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngenerateRuntimeClass(classname: string, classdata: unknown, logger: ParserErrorHandler): YTNodeConstructor<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for YouTube API Response\nDESCRIPTION: Interface definition for YouTube API responses containing three main properties: success (boolean), status_code (number), and data (IRawResponse type). This interface is used to standardize API response handling in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/interfaces/ApiResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ApiResponse {\n    success: boolean;\n    status_code: number;\n    data: IRawResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing InnerTube Response in TypeScript\nDESCRIPTION: Generic function that parses raw YouTube InnerTube API responses into a structured format. Takes a generic type parameter T that extends IParsedResponse, and accepts IRawResponse data as input. Returns the parsed data in the specified format T.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseResponse<T extends IParsedResponse = IParsedResponse>(data: IRawResponse): T\n```\n\n----------------------------------------\n\nTITLE: Defining the ShortsLockupView Class - YouTube.js TypeScript\nDESCRIPTION: This TypeScript snippet documents the ShortsLockupView class, extending the YTNode class, for internal node representation within the YouTube.js project's parser. It breaks down the constructor (accepting a RawNode), properties for video metadata (thumbnails, endpoints, accessibility text, overlays, badges), and methods for type-safe variant management (as, is), key existence checking, and safe key extraction. Usage requires knowledge of TypeScript generics, class inheritance, and YouTube.js types. Inputs and outputs are strictly typed, and all node interactions are encapsulated for extensibility within the parser framework.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShortsLockupView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n# Class: ShortsLockupView\\n\\n## Extends\\n\\n- [`YTNode`](../../Helpers/classes/YTNode.md)\\n\\n## Constructors\\n\\n### new ShortsLockupView()\\n\\n> **new ShortsLockupView**(`data`): [`ShortsLockupView`](ShortsLockupView.md)\\n\\n#### Parameters\\n\\n\\u2022 **data**: [`RawNode`](../../APIResponseTypes/type-aliases/RawNode.md)\\n\\n#### Returns\\n\\n[`ShortsLockupView`](ShortsLockupView.md)\\n\\n#### Overrides\\n\\n[`YTNode`](../../Helpers/classes/YTNode.md).[`constructor`](../../Helpers/classes/YTNode.md#constructors)\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:26](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L26)\\n\\n## Properties\\n\\n### accessibility_text\\n\\n> **accessibility_text**: `string`\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:13](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L13)\\n\\n***\\n\\n### badge?\\n\\n> `optional` **badge**: `null` | [`BadgeView`](BadgeView.md)\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:24](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L24)\\n\\n***\\n\\n### entity_id\\n\\n> **entity_id**: `string`\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:12](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L12)\\n\\n***\\n\\n### index_in_collection\\n\\n> **index_in_collection**: `number`\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:17](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L17)\\n\\n***\\n\\n### inline_player_data?\\n\\n> `optional` **inline_player_data**: [`NavigationEndpoint`](NavigationEndpoint.md)\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:23](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L23)\\n\\n***\\n\\n### menu_on_tap\\n\\n> **menu_on_tap**: [`NavigationEndpoint`](NavigationEndpoint.md)\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:16](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L16)\\n\\n***\\n\\n### menu_on_tap_a11y_label\\n\\n> **menu_on_tap_a11y_label**: `string`\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:18](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L18)\\n\\n***\\n\\n### on_tap_endpoint\\n\\n> **on_tap_endpoint**: [`NavigationEndpoint`](NavigationEndpoint.md)\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:15](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L15)\\n\\n***\\n\\n### overlay_metadata\\n\\n> **overlay_metadata**: `object`\\n\\n#### primary_text?\\n\\n> `optional` **primary_text**: [`Text`](../../Misc/classes/Text.md)\\n\\n#### secondary_text?\\n\\n> `optional` **secondary_text**: [`Text`](../../Misc/classes/Text.md)\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:19](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L19)\\n\\n***\\n\\n### thumbnail\\n\\n> **thumbnail**: [`Thumbnail`](../../Misc/classes/Thumbnail.md)[]\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:14](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L14)\\n\\n***\\n\\n### type\\n\\n> `readonly` **type**: `string`\\n\\n#### Inherited from\\n\\n[`YTNode`](../../Helpers/classes/YTNode.md).[`type`](../../Helpers/classes/YTNode.md#type)\\n\\n#### Defined in\\n\\n[src/parser/helpers.ts:8](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/helpers.ts#L8)\\n\\n***\\n\\n### type\\n\\n> `static` **type**: `string` = 'ShortsLockupView'\\n\\n#### Overrides\\n\\n[`YTNode`](../../Helpers/classes/YTNode.md).[`type`](../../Helpers/classes/YTNode.md#type-1)\\n\\n#### Defined in\\n\\n[src/parser/classes/ShortsLockupView.ts:10](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/classes/ShortsLockupView.ts#L10)\\n\\n## Methods\\n\\n### as()\\n\\n> **as**\\u003c`T`, `K`\\u003e(...`types`): `InstanceType`\\u003c`K`\\u005b`number`\\u005d\\u003e\\n\\nCast to one of the given types.\\n\\n#### Type Parameters\\n\\n\\u2022 **T** *extends* [`YTNode`](../../Helpers/classes/YTNode.md)\\n\\n\\u2022 **K** *extends* [`YTNodeConstructor`](../../Helpers/interfaces/YTNodeConstructor.md)\\u003c`T`\\u003e[]\\n\\n#### Parameters\\n\\n\\u2022 ...**types**: `K`\\n\\nThe types to cast to\\n\\n#### Returns\\n\\n`InstanceType`\\u003c`K`\\u005b`number`\\u005d\\u003e\\n\\nThe node cast to one of the given types\\n\\n#### Throws\\n\\nIf the node is not of the given type\\n\\n#### Inherited from\\n\\n[`YTNode`](../../Helpers/classes/YTNode.md).[`as`](../../Helpers/classes/YTNode.md#as)\\n\\n#### Defined in\\n\\n[src/parser/helpers.ts:38](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/helpers.ts#L38)\\n\\n***\\n\\n### hasKey()\\n\\n> **hasKey**\\u003c`T`, `R`\\u003e(`key`): `this is ShortsLockupView & { [k in string]: R }`\\n\\nCheck for a key without asserting the type.\\n\\n#### Type Parameters\\n\\n\\u2022 **T** *extends* `string`\\n\\n\\u2022 **R** = `any`\\n\\n#### Parameters\\n\\n\\u2022 **key**: `T`\\n\\nThe key to check\\n\\n#### Returns\\n\\n`this is ShortsLockupView & { [k in string]: R }`\\n\\nWhether the node has the key\\n\\n#### Inherited from\\n\\n[`YTNode`](../../Helpers/classes/YTNode.md).[`hasKey`](../../Helpers/classes/YTNode.md#haskey)\\n\\n#### Defined in\\n\\n[src/parser/helpers.ts:50](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/helpers.ts#L50)\\n\\n***\\n\\n### is()\\n\\n> **is**\\u003c`T`, `K`\\u003e(...`types`): `this is InstanceType<K[number]>`\\n\\nCheck if the node is of the given type.\\n\\n#### Type Parameters\\n\\n\\u2022 **T** *extends* [`YTNode`](../../Helpers/classes/YTNode.md)\\n\\n\\u2022 **K** *extends* [`YTNodeConstructor`](../../Helpers/interfaces/YTNodeConstructor.md)\\u003c`T`\\u003e[]\\n\\n#### Parameters\\n\\n\\u2022 ...**types**: `K`\\n\\nThe type to check\\n\\n#### Returns\\n\\n`this is InstanceType<K[number]>`\\n\\nwhether the node is of the given type\\n\\n#### Inherited from\\n\\n[`YTNode`](../../Helpers/classes/YTNode.md).[`is`](../../Helpers/classes/YTNode.md#is)\\n\\n#### Defined in\\n\\n[src/parser/helpers.ts:28](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/helpers.ts#L28)\\n\\n***\\n\\n### key()\\n\\n> **key**\\u003c`T`, `R`\\u003e(`key`): [`Maybe`](../../Helpers/classes/Maybe.md)\\n\\nAssert that the node has the given key and return it.\\n\\n#### Type Parameters\\n\\n\\u2022 **T** *extends* `string`\\n\\n\\u2022 **R** = `any`\\n\\n#### Parameters\\n\\n\\u2022 **key**: `T`\\n\\nThe key to check\\n\\n#### Returns\\n\\n[`Maybe`](../../Helpers/classes/Maybe.md)\\n\\nThe value of the key wrapped in a Maybe\\n\\n#### Throws\\n\\nIf the node does not have the key\\n\\n#### Inherited from\\n\\n[`YTNode`](../../Helpers/classes/YTNode.md).[`key`](../../Helpers/classes/YTNode.md#key)\\n\\n#### Defined in\\n\\n[src/parser/helpers.ts:60](https://github.com/LuanRT/YouTube.js/blob/e54e499ff553dab51e6d9d1aebc090b50fec29ba/src/parser/helpers.ts#L60)\n```\n\n----------------------------------------\n\nTITLE: CompactVideo Constructor Implementation in TypeScript\nDESCRIPTION: The constructor for the CompactVideo class that initializes the instance with data from a RawNode. It inherits from the YTNode base class constructor and sets up all the video metadata properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactVideo.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): CompactVideo\n```\n\n----------------------------------------\n\nTITLE: Sign In Method Definition in TypeScript\nDESCRIPTION: Method signature for signIn() that handles user authentication with optional OAuth2 credentials\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Session.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsignIn(credentials?: OAuth2Tokens): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Parsing InnerTube Commands in TypeScript\nDESCRIPTION: The parseCommands function takes an optional array of raw command nodes and returns an observed array of parsed YTNodes. It is defined in the parser.ts file of the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseCommands.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseCommands(commands?: RawNode[]): ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Button Class Definition in TypeScript\nDESCRIPTION: Class that extends YTNode to implement button functionality with various properties including text, label, style, size, icon type, and navigation endpoint. Used as base class for menu items.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Button.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Button extends YTNode {\n  static type = 'Button';\n\n  text?: string;\n  label?: string;\n  tooltip?: string;\n  style?: string;\n  size?: string;\n  icon_type?: string;\n  is_disabled?: boolean;\n  target_id?: string;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MicroformatData Class Definition in TypeScript\nDESCRIPTION: Class definition for MicroformatData that extends YTNode. Contains properties for storing metadata about YouTube content including titles, descriptions, URLs, and platform-specific information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MicroformatData.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MicroformatData extends YTNode {\n  static type = 'MicroformatData';\n  url_canonical: string;\n  title: string;\n  description: string;\n  thumbnail: Thumbnail[];\n  site_name: string;\n  app_name: string;\n  android_package: string;\n  ios_app_store_id: string;\n  ios_app_arguments: string;\n  og_type: string;\n  url_applinks_web: string;\n  url_applinks_ios: string;\n  url_applinks_android: string;\n  url_twitter_ios: string;\n  url_twitter_android: string;\n  twitter_card_type: string;\n  twitter_site_handle: string;\n  schema_dot_org_type: string;\n  noindex: string;\n  is_unlisted: boolean;\n  is_family_safe: boolean;\n  tags: string[];\n  available_countries: string[];\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching YouTube - TypeScript\nDESCRIPTION: Method to perform a YouTube search with a query and optional filters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Innertube.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsearch(query: string, filters: SearchFilters = {}): Promise<Search>\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Class in TypeScript\nDESCRIPTION: Constructor for the OAuth2 class that takes a Session parameter. It initializes the OAuth2 instance with the provided session.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/OAuth2.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew OAuth2(session: Session): OAuth2\n```\n\n----------------------------------------\n\nTITLE: Parsing Optional Data in TypeScript\nDESCRIPTION: Parses optional data into a SuperParsedResult. Takes optional raw data, doesn't require array output, and accepts optional type validation. Returns a SuperParsedResult containing the parsed data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parse.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nparse<T extends YTNode = YTNode>(data?: RawData, requireArray?: false, validTypes?: YTNodeConstructor<T> | YTNodeConstructor<T>[]): SuperParsedResult<T>\n```\n\n----------------------------------------\n\nTITLE: Implementing PlayerOverlayAutoplay Class in TypeScript\nDESCRIPTION: Class definition for PlayerOverlayAutoplay that extends YTNode. It manages YouTube video autoplay overlay with properties for video metadata, thumbnails, buttons and timing controls.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerOverlayAutoplay.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PlayerOverlayAutoplay extends YTNode {\n  static type = 'PlayerOverlayAutoplay';\n  title: Text;\n  video_id: string;\n  video_title: Text;\n  short_view_count: Text;\n  prefer_immediate_redirect: any;\n  count_down_secs_for_fullscreen: any;\n  published: Text;\n  background: Thumbnail[];\n  thumbnail_overlays: ObservedArray<YTNode>;\n  author: Author;\n  cancel_button: null | Button;\n  next_button: null | Button;\n  close_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unliking a Comment in YouTube.js\nDESCRIPTION: Method to unlike a comment. It returns a Promise that resolves to an ApiResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/CommentView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nunlike(): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Handling YouTube TV OAuth2 Authentication Events in YouTube.js\nDESCRIPTION: Code demonstrating how to handle authentication events in the YouTube.js library when using YouTube TV OAuth2. It shows event listeners for pending authentication, successful authentication, and credential updates, followed by the sign-in method call.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/auth/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Fired when waiting for the user to authorize the sign in attempt.\nyt.session.on('auth-pending', (data) => {\n  // data.verification_url contains the authorization URL.\n  // data.user_code contains the code to enter on the website.\n});\n\n// Fired when authentication is successful.\nyt.session.on('auth', ({ credentials }) => {\n  // Do something with the credentials, eg; save them in a database.\n  console.log('Sign in successful');\n});\n\n// Fired when the access token expires.\nyt.session.on('update-credentials', ({ credentials }) => { /** do something with the updated credentials. */ });\n  \nawait yt.session.signIn(/* credentials */);\n```\n\n----------------------------------------\n\nTITLE: Player Cache Method\nDESCRIPTION: Method to handle caching functionality with optional cache parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Player.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ncache(cache?: ICache): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining SessionOptions Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition for the SessionOptions interface that configures YouTube.js session behavior. It includes options for authentication, caching, client configuration, and various YouTube-specific settings.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/SessionOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SessionOptions = object\n```\n\n----------------------------------------\n\nTITLE: Defining SearchRequest Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition that specifies the structure of a search request object. It includes optional parameters for search query, parameters string, suggestion statistics, and web searchbox stats URL.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/SearchRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SearchRequest = {\n    params?: string;\n    query?: string;\n    suggestStats?: unknown;\n    webSearchboxStatsUrl?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Array with Valid Types in TypeScript\nDESCRIPTION: Parses an array of items with multiple valid YTNode types. Takes generic type parameters T extending YTNode and K extending array of YTNode constructors. Returns an ObservedArray of instances of the valid types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseArray.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseArray<T extends YTNode, K extends YTNodeConstructor<T>[]>(data: undefined | RawNode[], validTypes: K): ObservedArray<InstanceType<K[number]>>\n```\n\n----------------------------------------\n\nTITLE: Type Checking with is() Method in YouTube.js\nDESCRIPTION: This method checks if a node is of a given type. It takes type parameters T (extending YTNode) and K (extending YTNodeConstructor<T>[]), and returns a type predicate for type narrowing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Downloading Media Content in TypeScript\nDESCRIPTION: Asynchronous method to download video content, returning a ReadableStream of Uint8Array. Takes optional download options as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/VideoInfo.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndownload(options: DownloadOptions = {}): Promise<ReadableStream<Uint8Array>>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Videos from Memo in TypeScript\nDESCRIPTION: Static method that takes a Memo object and returns an ObservedArray containing various types of video objects (Video, CompactVideo, GridVideo, etc.). Used to retrieve all video entries from a given YouTube page stored in memory.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/Feed.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Defining the ReelItem Node Class with Inheritance - TypeScript\nDESCRIPTION: Implements the ReelItem class, extending YTNode to represent a YouTube Reel item within the parser system. Dependencies include YTNode and related helper types, with required properties like id, title (as a Text object), thumbnails (array), views, endpoint (NavigationEndpoint), and several methods for type casting, checking, and safe access. Instantiated via a constructor with a RawNode data parameter; expected input is a structured response from YouTube's API. Output is a new ReelItem instance with populated attributes. Class requires the broader YouTube.js type system and presumes usage in a Node/TypeScript environment.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ReelItem extends YTNode {\n  static type: string = 'ReelItem';\n  id: string;\n  title: Text;\n  thumbnails: Thumbnail[];\n  views: Text;\n  endpoint: NavigationEndpoint;\n  accessibility_label?: string;\n  \n  constructor(data: RawNode) {\n    super();\n    // ...parsing logic populating id, title, etc.\n  }\n  \n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n    // ...implementation from YTNode\n  }\n\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n    // ...implementation from YTNode\n  }\n\n  hasKey<T extends string, R = any>(key: T): this is ReelItem & { [k in string]: R } {\n    // ...implementation from YTNode\n  }\n\n  key<T extends string, R = any>(key: T): Maybe {\n    // ...implementation from YTNode\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Shelf Class Extending YTNode - TypeScript\nDESCRIPTION: Defines the Shelf class as a child of YTNode, modeling a section or shelf on a YouTube page. The Shelf class leverages type inheritance to include shared node behavior (type/safe property access/casting) and adds properties specific to shelves, such as title, content, optional menu and play button, and navigation endpoint. Dependencies include the YTNode, RawNode, NavigationEndpoint, Button, and Text classes or types; required parameters include a RawNode data object. Returns an instance representing a Shelf node with well-typed properties, ready to be accessed or transformed within the parser context. The constructor throws if required parameters are missing, and methods allow for safe type-guarded access and flexible type checks.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Shelf.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Shelf extends YTNode {\n  static type: string = 'Shelf';\n  title: Text;\n  endpoint?: NavigationEndpoint;\n  content: null | YTNode;\n  icon_type?: string;\n  menu?: null | YTNode;\n  play_all_button?: null | Button;\n  subtitle?: Text;\n\n  constructor(data: RawNode) {\n    // ...implementation\n  }\n  // ...inherits methods: as(), hasKey(), is(), key()\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing YouTube Response Actions in TypeScript\nDESCRIPTION: The parseRR function takes an array of RawNode actions and returns an ObservedArray of various action and command types. It's defined in the parser.ts file of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseRR.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseRR(actions: RawNode[]): ObservedArray<AppendContinuationItemsAction | OpenPopupAction | NavigateAction | ShowMiniplayerCommand | ReloadContinuationItemsCommand>\n```\n\n----------------------------------------\n\nTITLE: ObservedArray Generic Type Definition in TypeScript\nDESCRIPTION: Defines a generic type ObservedArray<T> that extends Array<T> with additional utility methods for working with YouTube node objects. The type includes methods for finding, filtering, and manipulating array elements with type safety.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/type-aliases/ObservedArray.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nObservedArray<T>: T[] & {\n  first(): T;\n  get(rule: object, del_item?: boolean): T | undefined;\n  getAll(rule: object, del_items?: boolean): T[];\n  matchCondition(condition): T | undefined;\n  remove(index: number): T[];\n  as<R extends YTNode, K extends YTNodeConstructor<R>[]>(...types: K): ObservedArray<InstanceType<K[number]>>;\n  filterType<R extends YTNode, K extends YTNodeConstructor<R>[]>(...types: K): ObservedArray<InstanceType<K[number]>>;\n  firstOfType<R extends YTNode, K extends YTNodeConstructor<R>[]>(...types: K): InstanceType<K[number]> | undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: TwoColumnWatchNextResults Class Definition in TypeScript\nDESCRIPTION: Definition of the TwoColumnWatchNextResults class that extends YTNode. This class handles the structure of YouTube's watch page results, containing properties for primary results, secondary results, conversation bar, playlist information, and autoplay settings.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TwoColumnWatchNextResults.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TwoColumnWatchNextResults extends YTNode {\n  static type: string = 'TwoColumnWatchNextResults';\n\n  results: ObservedArray<YTNode>;\n  secondary_results: ObservedArray<YTNode>;\n  conversation_bar: YTNode;\n  playlist?: {\n    author: Text | Author;\n    contents: YTNode[];\n    current_index: number;\n    id: string;\n    is_infinite: boolean;\n    menu: null | Menu;\n    title: string;\n  };\n  autoplay?: {\n    sets: AutoplaySet[];\n    modified_sets?: AutoplaySet[];\n    count_down_secs?: number;\n  };\n\n  constructor(data: RawNode) {\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PlayerStoryboardSpec Class Definition in TypeScript\nDESCRIPTION: Class definition for PlayerStoryboardSpec that extends YTNode. It includes constructor, properties for boards data, and inherited type checking methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerStoryboardSpec.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlayerStoryboardSpec extends YTNode {\n  static type: string = 'PlayerStoryboardSpec';\n  boards: StoryboardData[];\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Player Decipher Method\nDESCRIPTION: Method to decipher URL signatures with optional parameters for URL, signature cipher, and caching.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Player.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ndecipher(url?: string, signature_cipher?: string, cipher?: string, this_response_nsig_cache?: Map<string, string>): string\n```\n\n----------------------------------------\n\nTITLE: Fetching Channel Home Content\nDESCRIPTION: This method retrieves the home content of the channel. It returns a Promise that resolves to a Channel object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetHome(): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Defining VideoInfo Class in TypeScript\nDESCRIPTION: This code defines the VideoInfo class, which extends MediaInfo. It includes the constructor and various properties related to video information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/VideoInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoInfo extends MediaInfo {\n  constructor(data: [ApiResponse, ApiResponse?], actions: Actions, cpn: string) {\n    super(data, actions, cpn);\n    // Implementation details omitted\n  }\n\n  primary_info?: null | VideoPrimaryInfo;\n  secondary_info?: null | VideoSecondaryInfo;\n  playlist?: {\n    author: Text | Author;\n    contents: YTNode[];\n    current_index: number;\n    id: string;\n    is_infinite: boolean;\n    menu: null | Menu;\n    title: string;\n  };\n  game_info?: {\n    release_year: undefined | Text;\n    title: undefined | Text;\n  };\n  merchandise?: null | MerchandiseShelf;\n  related_chip_cloud?: null | ChipCloud;\n  player_overlays?: null | PlayerOverlay;\n  comments_entry_point_header?: null | CommentsEntryPointHeader;\n  livechat?: null | LiveChat;\n  autoplay?: {\n    count_down_secs?: number;\n    modified_sets?: AutoplaySet[];\n    sets: AutoplaySet[];\n  };\n  // Other properties inherited from MediaInfo\n}\n```\n\n----------------------------------------\n\nTITLE: Event Listener Method Definition in TypeScript\nDESCRIPTION: Method signature for once() event listener that handles auth-pending events in the Session class\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Session.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nonce(type: \"auth-pending\", listener: OAuth2AuthPendingEventHandler): void\n```\n\n----------------------------------------\n\nTITLE: Execute Method Implementation for Parsed Response\nDESCRIPTION: Method to execute an API call with parsing enabled. Takes an endpoint and arguments, returns a ParsedResponse promise.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Actions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexecute<T extends string>(endpoint: T, args: { parse: true, protobuf?: false, serialized_data?: any, skip_auth_check?: boolean }): Promise<ParsedResponse<T>>\n```\n\n----------------------------------------\n\nTITLE: Defining Download Function in TypeScript for YouTube.js FormatUtils\nDESCRIPTION: This function handles downloading operations in YouTube.js. It takes various parameters including download options, actions, playability status, streaming data, player, and CPN. It returns a Promise that resolves to a ReadableStream of Uint8Array.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/FormatUtils/functions/download.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndownload(options: DownloadOptions, actions: Actions, playability_status?: IPlayabilityStatus, streaming_data?: IStreamingData, player?: Player, cpn?: string): Promise<ReadableStream<Uint8Array>>\n```\n\n----------------------------------------\n\nTITLE: Defining CreateCommentRequest Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the CreateCommentRequest type alias as an object with multiple optional properties. It includes nested object definitions for various types of attachments and restrictions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/CreateCommentRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CreateCommentRequest = {\n  accessRestrictions?: {\n    restriction: \"RESTRICTION_TYPE_EVERYONE\" | \"RESTRICTION_TYPE_SPONSORS_ONLY\"\n  };\n  botguardResponse?: string;\n  commentText?: string;\n  createCommentParams?: string;\n  imageAttachment?: {\n    encryptedBlobId: string\n  };\n  pollAttachment?: {\n    choices: string[]\n  };\n  sharedPostAttachment?: {\n    postId: string\n  };\n  videoAttachment?: {\n    videoId: string\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Post Class Structure in TypeScript\nDESCRIPTION: Class definition for Post that extends BackstagePost, implementing YouTube community post functionality with properties for content, author, voting, and interaction elements.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Post.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Post extends BackstagePost {\n    static type: string = 'Post';\n\n    constructor(data: RawNode) {\n        super(data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SingleHeroImage Node Class - YouTube.js - TypeScript\nDESCRIPTION: This snippet shows the class declaration for SingleHeroImage, which extends YTNode and represents a single hero image object parsed from YouTube API responses. Dependencies include YTNode, RawNode, and Thumbnail types, indicating a structured, typed representation. The class defines properties such as style, thumbnails, and type, as well as a constructor requiring a RawNode object for instantiation. The static type property identifies the node type, and several methods (inherited from YTNode) provide type-checking and safe data-access utilities. This snippet is essential for bridging YouTube API responses to strongly-typed JS/TS objects, with inputs including structured YouTube API data and outputs primarily as SingleHeroImage instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleHeroImage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SingleHeroImage extends YTNode {\n  static type: string = 'SingleHeroImage';\n  thumbnails: Thumbnail[];\n  style: string;\n\n  constructor(data: RawNode) {\n    super();\n    // ...initialize properties from data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ContentMetadataView Class in TypeScript\nDESCRIPTION: This code snippet defines the ContentMetadataView class, which extends YTNode. It includes a constructor, properties for delimiter and metadata_rows, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ContentMetadataView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ContentMetadataView extends YTNode {\n  static type = 'ContentMetadataView';\n\n  metadata_rows: MetadataRow[];\n  delimiter: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Commenting on a YouTube Video in TypeScript\nDESCRIPTION: Method to post a comment on a given video. It takes the video ID and comment text as parameters and returns a Promise with the API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncomment(video_id: string, text: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: CompactVideo Class Definition in TypeScript\nDESCRIPTION: A TypeScript class that represents a compact video component from YouTube's interface. It extends the YTNode base class and contains properties for video metadata like ID, title, author, thumbnails, duration, and view counts. It also includes getter methods for determining video states.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactVideo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CompactVideo';\n\nid: string;\nthumbnails: Thumbnail[];\nrich_thumbnail?: YTNode;\ntitle: Text;\nauthor: Author;\nview_count: Text;\nshort_view_count: Text;\npublished: Text;\nbadges: MetadataBadge[];\nduration: {\n  seconds: number;\n  text: string;\n};\nthumbnail_overlays: ObservedArray<YTNode>;\nendpoint: NavigationEndpoint;\nmenu: null | Menu;\n```\n\n----------------------------------------\n\nTITLE: Type Casting Methods - TypeScript\nDESCRIPTION: Methods for safely casting the wrapped value to specific types, including string(), number(), boolean(), etc.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/Maybe.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nclass Maybe {\n  string(): string {\n    // Implementation\n  }\n\n  number(): number {\n    // Implementation\n  }\n\n  boolean(): boolean {\n    // Implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PlaylistHeader Class Definition\nDESCRIPTION: TypeScript class definition extending YTNode to handle YouTube playlist header data. Includes properties for playlist metadata like title, description, stats, author info, and interactive elements like shuffle and save buttons.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PlaylistHeader extends YTNode {\n  static type = 'PlaylistHeader';\n  id: string;\n  title: Text;\n  subtitle: null | Text;\n  stats: Text[];\n  brief_stats: Text[];\n  author: null | Author;\n  description: Text;\n  num_videos: Text;\n  view_count: Text;\n  can_share: boolean;\n  can_delete: boolean;\n  is_editable: boolean;\n  privacy: string;\n  save_button: YTNode;\n  shuffle_play_button: YTNode;\n  menu: YTNode;\n  banner: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to a YouTube Channel in TypeScript\nDESCRIPTION: Method to subscribe to a given channel. It takes the channel ID as a parameter and returns a Promise with the API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsubscribe(channel_id: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Encoding Next Parameters Function in TypeScript\nDESCRIPTION: Function to encode next parameters for pagination or continuation in YouTube requests.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/README.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction encodeNextParams(params: NextParams): string {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Feed Class in TypeScript\nDESCRIPTION: Defines the Feed class with generic type parameter T extending IParsedResponse. The class includes a constructor, accessors for various feed elements, and methods for retrieving continuation data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/Feed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Feed<T extends IParsedResponse = IParsedResponse> {\n  constructor(actions: Actions, response: ApiResponse | IParsedResponse, already_parsed: boolean = false) {\n    // Constructor implementation\n  }\n\n  // Accessors\n  get videos(): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo> {\n    // Implementation\n  }\n\n  get posts(): ObservedArray<BackstagePost | Post | SharedPost> {\n    // Implementation\n  }\n\n  get channels(): ObservedArray<Channel | GridChannel> {\n    // Implementation\n  }\n\n  get playlists(): ObservedArray<GridPlaylist | LockupView | Playlist> {\n    // Implementation\n  }\n\n  // Methods\n  getContinuation(): Promise<Feed<T>> {\n    // Implementation\n  }\n\n  getContinuationData(): Promise<T | undefined> {\n    // Implementation\n  }\n\n  // Other methods and accessors...\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Video Description in YouTube.js Video Class\nDESCRIPTION: Accessor method that returns the video description as a string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget description(): string {\n  return this.description_snippet?.text || '';\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Sort to YouTube Comments in TypeScript\nDESCRIPTION: Method to apply a sorting option to the comments. It takes a sort parameter of either 'TOP_COMMENTS' or 'NEWEST_FIRST' and returns a Promise resolving to a Comments object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Comments.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napplySort(sort: \"TOP_COMMENTS\" | \"NEWEST_FIRST\"): Promise<Comments>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shorts from YouTube Channel\nDESCRIPTION: This method fetches shorts from the channel. It returns a Promise that resolves to a Channel object containing the shorts data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetShorts(): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Fetching Releases from YouTube Channel\nDESCRIPTION: This method retrieves releases from the channel. It returns a Promise that resolves to a Channel object containing the release data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetReleases(): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Defining PlatformShim Interface in TypeScript\nDESCRIPTION: This code snippet defines the PlatformShim interface with various properties and methods for platform-specific operations. It includes definitions for caching, fetch API, cryptographic functions, and web platform APIs like FormData and Headers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/interfaces/PlatformShim.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PlatformShim {\n  runtime: Runtime;\n  info: {\n    version: string;\n    repo_url: string;\n    bugs_url: string;\n  };\n  server: boolean;\n  Cache: ICacheConstructor;\n  sha1Hash(data: string): Promise<string>;\n  uuidv4(): string;\n  eval(code: string, env: Record<string, VMPrimative>): unknown;\n  fetch: (input: RequestInfo | URL, init?: RequestInit) => Promise<Response>;\n  Request: (input: RequestInfo | URL, init?: RequestInit) => Request;\n  Response: (body?: BodyInit | null, init?: ResponseInit) => Response;\n  Headers: (init?: HeadersInit) => Headers;\n  FormData: (form?: HTMLFormElement, submitter?: HTMLElement | null) => FormData;\n  File: (fileBits: BlobPart[], fileName: string, options?: FilePropertyBag) => File;\n  ReadableStream: {\n    <R = any>(underlyingSource?: UnderlyingSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\n    <R = any>(underlyingSource: UnderlyingDefaultSource<R>, strategy?: QueuingStrategy<R>): ReadableStream<R>;\n    (underlyingSource: UnderlyingByteSource, strategy?: { highWaterMark?: number }): ReadableStream<Uint8Array>;\n  };\n  CustomEvent: {\n    <T>(type: string, eventInitDict?: CustomEventInit<T>): CustomEvent<T>;\n    prototype: CustomEvent<any>;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Extending YTNode to Define a Boolean Setting - TypeScript\nDESCRIPTION: Defines the SettingBoolean TypeScript class, extending from YTNode to encapsulate a boolean setting retrievable from the YouTube internal API. It includes optional enabling/disabling endpoints, item identifiers, and metadata, as well as inherited methods for type checking, casting, and key assertion. Relies on related classes like NavigationEndpoint and Text, and is intended to be used as part of the parser infrastructure in YouTube.js. The class manages toggle actions and supports type safety through advanced generic methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingBoolean.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SettingBoolean extends YTNode {\n  // Optional endpoint for disabling the setting\n  disable_endpoint?: NavigationEndpoint;\n\n  // Optional endpoint for enabling the setting\n  enable_endpoint?: NavigationEndpoint;\n\n  // The unique item id\n  item_id: string;\n\n  // Optional summary (display text)\n  summary?: Text;\n\n  // Optional title (display text)\n  title?: Text;\n\n  // Static type identifier\n  static type: string = 'SettingBoolean';\n\n  // Set by YTNode base class\n  readonly type: string;\n\n  constructor(data: RawNode) {\n    super();\n    // ... property assignment logic\n  }\n\n  // --- Inherited utility methods ---\n  // Type checking, casting, and key assertion methods are available from YTNode:\n  // as<T, K>(...types: K): InstanceType<K[number]>\n  // is<T, K>(...types: K): this is InstanceType<K[number]>\n  // hasKey<T, R>(key: T): this is SettingBoolean & { [k in string]: R }\n  // key<T, R>(key: T): Maybe\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the ThumbnailOverlayEndorsement Class in TypeScript\nDESCRIPTION: The ThumbnailOverlayEndorsement class implementation that extends YTNode. It contains a constructor that takes a RawNode data parameter, a text property, and static type identifier. The class inherits various methods from YTNode such as as(), is(), hasKey(), and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayEndorsement.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ThumbnailOverlayEndorsement extends YTNode {\n  static type = 'ThumbnailOverlayEndorsement';\n\n  text: string;\n\n  constructor(data: RawNode) {\n    super(data);\n    // Implementation details not shown in the documentation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AddToPlaylistCommand Class Definition\nDESCRIPTION: TypeScript class definition for handling YouTube playlist addition commands. Includes properties for video IDs, playlist type, miniplayer settings, and navigation endpoints. Extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddToPlaylistCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AddToPlaylistCommand extends YTNode {\n  static type: string = 'AddToPlaylistCommand';\n  open_miniplayer: boolean;\n  video_id: string;\n  list_type: string;\n  endpoint: NavigationEndpoint;\n  video_ids: string[];\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IPlayerResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that picks specific properties from IParsedResponse interface including captions, cards, endscreen, microformat, annotations, playability status, streaming data, player config, playback tracking, storyboards, and video details.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/IPlayerResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IPlayerResponse = Pick<IParsedResponse, \"captions\" | \"cards\" | \"endscreen\" | \"microformat\" | \"annotations\" | \"playability_status\" | \"streaming_data\" | \"player_config\" | \"playback_tracking\" | \"storyboards\" | \"video_details\">\n```\n\n----------------------------------------\n\nTITLE: Building a Watch Request in TypeScript\nDESCRIPTION: Implementation of the buildRequest method in the WatchEndpoint class that creates a WatchRequest object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRequest(): [`WatchRequest`](../../APIResponseTypes/type-aliases/WatchRequest.md) {\n  return {};\n}\n```\n\n----------------------------------------\n\nTITLE: TranscriptSegmentList Class Definition in TypeScript\nDESCRIPTION: This code defines the TranscriptSegmentList class which extends YTNode. It contains properties for managing transcript segments including initial_segments, labels for no results and retry options, and a flag for touch captions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSegmentList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TranscriptSegmentList'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ninitial_segments: ObservedArray<TranscriptSectionHeader | TranscriptSegment>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nno_result_label: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nretry_label: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntouch_captions_enabled: boolean\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew TranscriptSegmentList(data: RawNode): TranscriptSegmentList\n```\n\n----------------------------------------\n\nTITLE: Checking for Continuation in YouTube Comments in TypeScript\nDESCRIPTION: Getter method that returns a boolean indicating whether there are more comments to load.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Comments.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget has_continuation(): boolean\n```\n\n----------------------------------------\n\nTITLE: Disliking a YouTube Comment in TypeScript/JavaScript\nDESCRIPTION: This method dislikes a YouTube comment. It returns a Promise with information about the success of the operation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/Comment.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndislike() ⇒ Promise.<{ success: boolean, status_code: number, data: object }>\n```\n\n----------------------------------------\n\nTITLE: VideoMetadataCarouselView Class Properties Definition in TypeScript\nDESCRIPTION: Defines the static and instance properties of the VideoMetadataCarouselView class including carousel_titles and carousel_items which store arrays of CarouselTitleView and CarouselItemView objects respectively.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoMetadataCarouselView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncarousel_titles: null | ObservedArray<CarouselTitleView>\n\ncarousel_items: null | ObservedArray<CarouselItemView>\n\nstatic type: string = 'VideoMetadataCarouselView'\n```\n\n----------------------------------------\n\nTITLE: Liking a YouTube Comment in TypeScript/JavaScript\nDESCRIPTION: This method likes a YouTube comment. It returns a Promise with information about the success of the operation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/Comment.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlike() ⇒ Promise.<{ success: boolean, status_code: number, data: object }>\n```\n\n----------------------------------------\n\nTITLE: Getting Videos from Feed\nDESCRIPTION: Method to retrieve all videos from a YouTube feed, supporting multiple video types including standard videos, shorts, and compact views.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget videos(): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Notifications - TypeScript\nDESCRIPTION: Methods for working with YouTube notifications including getting notification menu and unseen count.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Innertube.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetNotifications(): Promise<NotificationsMenu>\ngetUnseenNotificationsCount(): Promise<number>\n```\n\n----------------------------------------\n\nTITLE: NavigationEndpoint Path Resolution - TypeScript\nDESCRIPTION: Legacy method for resolving API paths based on payload object names when InnerTube doesn't provide a URL directly. Marked as deprecated.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/NavigationEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPath(name: string): undefined | \"/player\" | \"/search\" | \"/browse\" | \"/next\" | \"/live_chat/get_item_context_menu\"\n```\n\n----------------------------------------\n\nTITLE: Caching OAuth2 Credentials in TypeScript\nDESCRIPTION: Method to cache the current OAuth2 credentials. This allows for persisting the authentication state between sessions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/OAuth2.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ncacheCredentials(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Maybe Class Constructor and Accessor - TypeScript\nDESCRIPTION: Constructor initializes the Maybe wrapper with a value. The typeof accessor returns the type of the wrapped value.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/Maybe.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Maybe {\n  constructor(value: any) {\n    // Constructor implementation\n  }\n\n  get typeof(): \"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"object\" | \"function\" {\n    // Implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PlayerMicroformat Class Definition in TypeScript\nDESCRIPTION: Class definition for PlayerMicroformat that extends YTNode. It contains properties for video metadata including title, description, thumbnails, embed options, channel info, and various video attributes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerMicroformat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlayerMicroformat extends YTNode {\n  static type = 'PlayerMicroformat';\n  title: Text;\n  description: Text;\n  thumbnails: Thumbnail[];\n  embed?: {\n    iframe_url: string;\n    flash_url: string;\n    flash_secure_url: string;\n    width: any;\n    height: any;\n  };\n  length_seconds: number;\n  channel: {\n    id: string;\n    name: string;\n    url: string;\n  };\n  is_family_safe: boolean;\n  is_unlisted: boolean;\n  has_ypc_metadata: boolean;\n  view_count: number;\n  category: string;\n  publish_date: string;\n  upload_date: string;\n  available_countries: string[];\n  start_timestamp: null | Date;\n  end_timestamp: null | Date;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Replying to a YouTube Comment in TypeScript\nDESCRIPTION: Asynchronous method to reply to a YouTube comment. It takes the reply text as a parameter and returns a Promise that resolves to an ApiResponse. Throws an error if the Actions instance is not set or if the reply command is not found.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nreply(comment_text: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: GridMovie Class Structure and Properties in TypeScript\nDESCRIPTION: Definition of the GridMovie class showing its properties including id, title, thumbnails, duration, endpoint, badges, metadata, and thumbnail overlays. The class extends YTNode and includes static type information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridMovie.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'GridMovie'\n\nid: string\ntitle: Text\nthumbnails: Thumbnail[]\nduration: null | Text\nendpoint: NavigationEndpoint\nbadges: ObservedArray<MetadataBadge>\nmetadata: Text\nthumbnail_overlays: ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Checking Captions Availability in YouTube.js Video Class\nDESCRIPTION: Accessor that determines if a video has captions by examining its accessibility data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nget has_captions(): boolean {\n  return this.badges.some((badge) => badge.label === 'CC');\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Array Data with Single Valid Type in TypeScript\nDESCRIPTION: Parses an array of items with a single allowed type. Takes raw data, requires array output, and accepts optional type validation. Returns an ObservedArray of parsed instances or null.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parse.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nparse<T extends YTNode, K extends YTNodeConstructor<T>>(data: RawData, requireArray: true, validTypes?: K): ObservedArray<InstanceType<K>> | null\n```\n\n----------------------------------------\n\nTITLE: Defining the SharePanelTitleV15 Node Class - TypeScript\nDESCRIPTION: Establishes the SharePanelTitleV15 class by extending the YTNode base, introducing a title property and static type identifier for differentiation during parsing. The constructor requires a RawNode object for initialization, while providing strong typing and linking to the broader node system. This snippet relies on types and classes from the internal helpers and the YouTube.js data model, requiring dependencies like YTNode, RawNode, and Text, and is only functional within the internal parser context.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelTitleV15.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SharePanelTitleV15 extends YTNode {\n  static type = 'SharePanelTitleV15';\n  title: Text;\n\n  constructor(data: RawNode) {\n    super();\n    // Initialization logic for title, etc.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClipCreationScrubber Class in TypeScript\nDESCRIPTION: This code snippet defines the ClipCreationScrubber class, which extends YTNode. It includes various properties related to clip creation settings and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipCreationScrubber.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ClipCreationScrubber extends YTNode {\n  static type = 'ClipCreationScrubber';\n\n  length_template: string;\n  max_length_ms: number;\n  min_length_ms: number;\n  default_length_ms: number;\n  window_size_ms: number;\n  start_label?: string;\n  end_label?: string;\n  duration_label?: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.length_template = data.lengthTemplate;\n    this.max_length_ms = data.maxLengthMs;\n    this.min_length_ms = data.minLengthMs;\n    this.default_length_ms = data.defaultLengthMs;\n    this.window_size_ms = data.windowSizeMs;\n    this.start_label = data.startLabel;\n    this.end_label = data.endLabel;\n    this.duration_label = data.durationLabel;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InferenceType Type Alias in TypeScript\nDESCRIPTION: A type alias that combines multiple inference type interfaces for handling different data types and structures in the YouTube.js parser. The type combines renderer, misc, object, primitive, and array inference types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/type-aliases/InferenceType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype InferenceType = RendererInferenceType | MiscInferenceType | ObjectInferenceType | PrimitiveInferenceType | ArrayInferenceType\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelMetadata Class in TypeScript\nDESCRIPTION: This code snippet defines the ChannelMetadata class, which extends YTNode. It includes a constructor and various properties representing channel metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelMetadata extends YTNode {\n  static type = 'ChannelMetadata';\n\n  title: string;\n  description: string;\n  url: string;\n  rss_url: string;\n  vanity_channel_url: string;\n  external_id: string;\n  is_family_safe: boolean;\n  keywords: string[];\n  avatar: Thumbnail[];\n  music_artist_name?: string;\n  available_countries: string[];\n  android_deep_link: string;\n  android_appindexing_link: string;\n  ios_appindexing_link: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ChannelTagline Class Definition in TypeScript\nDESCRIPTION: Defines a ChannelTagline class that extends YTNode to handle YouTube channel tagline data. Includes properties for content, max lines, navigation endpoints, and display settings.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelTagline.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelTagline extends YTNode {\n  static type = 'ChannelTagline';\n  content: string;\n  max_lines: number;\n  more_endpoint: NavigationEndpoint | object;\n  more_icon_type: string;\n  more_label: string;\n  target_id: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Playlist Continuation Check\nDESCRIPTION: Getter method that checks if the playlist feed has more items to load via continuation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget has_continuation(): boolean\n```\n\n----------------------------------------\n\nTITLE: Decompressing Data Using LZW Algorithm in TypeScript\nDESCRIPTION: Function that decompresses data previously compressed using the LZW compression algorithm. Takes a string input parameter containing the compressed data and returns the decompressed string result. Located in src/utils/LZW.ts file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/LZW/functions/decompress.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndecompress(input: string): string\n```\n\n----------------------------------------\n\nTITLE: Defining ClipCreation Class in TypeScript\nDESCRIPTION: This snippet defines the ClipCreation class, which extends YTNode. It includes various properties related to clip creation functionality, such as title input, scrubber, save button, and user avatar.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipCreation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClipCreation extends YTNode {\n  static type = 'ClipCreation';\n\n  user_avatar: Thumbnail[];\n  title_input: null | ClipCreationTextInput;\n  scrubber: null | ClipCreationScrubber;\n  save_button: null | Button;\n  display_name: Text;\n  publicity_label: string;\n  cancel_button: null | Button;\n  ad_state_overlay: null | ClipAdState;\n  external_video_id: string;\n  publicity_label_icon: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Random User Agent in TypeScript for YouTube.js\nDESCRIPTION: This function returns a random user agent string based on the specified device category (mobile or desktop). It is defined in the Utils module of YouTube.js and is used to simulate different client devices when making requests.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/getRandomUserAgent.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRandomUserAgent(type: DeviceCategory): string\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Class for YouTube Kids API in TypeScript\nDESCRIPTION: This code defines a Channel class that extends the Feed class, specifically for handling YouTube Kids channel data. It includes a constructor, properties for header and contents, and methods for checking continuations and retrieving additional data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Channel.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Channel extends Feed<IBrowseResponse> {\n  header?: C4TabbedHeader;\n  contents?: ItemSectionContinuation | ItemSection;\n\n  constructor(actions: Actions, data: ApiResponse | IBrowseResponse, already_parsed = false) {\n    super(actions, data, already_parsed);\n  }\n\n  async getContinuation(): Promise<Channel> {\n    const response = await this.actions.execute(\n      this.page.continuation_contents?.continuation_endpoint_type === 'CONTINUATION_TYPE_BROWSE'\n        ? 'BrowseEndpoint'\n        : 'channelTab',\n      this.page.continuation_contents?.continuation\n    );\n\n    return new Channel(this.actions, response, false);\n  }\n\n  get has_continuation(): boolean {\n    return this.page.continuation_contents?.continuation !== undefined;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Continuation Method\nDESCRIPTION: Method to retrieve search continuation data for filtered searches and shelf continuations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Search.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<SearchContinuation>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatItemList Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatItemList class, which extends YTNode. It includes properties for max_items_to_display and more_comments_below_button, as well as a constructor and type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatItemList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatItemList extends YTNode {\n  static type = 'LiveChatItemList';\n\n  max_items_to_display: string;\n  more_comments_below_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n    this.max_items_to_display = data.max_items_to_display;\n    this.more_comments_below_button = parser.parseItem(data.more_comments_below_button, Button);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoInfo Class Properties in TypeScript\nDESCRIPTION: Defines optional properties for streaming_data and watch_next_feed in the VideoInfo class, which extends MediaInfo.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/VideoInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass VideoInfo extends MediaInfo {\n  streaming_data?: IStreamingData;\n  watch_next_feed?: null | ObservedArray<YTNode>;\n  // ... other properties and methods\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Premiere Status in YouTube.js Video Class\nDESCRIPTION: Accessor that identifies if a video is a premiere by examining its thumbnail overlays.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nget is_premiere(): boolean {\n  return this.thumbnail_overlays.some((overlay) => overlay.type === 'PremiumFeaturedBadge');\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SearchType Union Type in TypeScript\nDESCRIPTION: Defines a union type for YouTube search filtering that includes all possible search type values: all, video, channel, playlist, and movie.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/SearchType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SearchType = \"all\" | \"video\" | \"channel\" | \"playlist\" | \"movie\"\n```\n\n----------------------------------------\n\nTITLE: Implementing buildRequest method in SubscribeEndpoint class in TypeScript\nDESCRIPTION: Method implementation that builds a subscription request object. This method is required by the IEndpoint interface and constructs the necessary payload for a channel subscription request.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SubscribeEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRequest(): SubscribeRequest {\n  return {\n    channelIds: this.payload.channelIds,\n    params: this.payload.params\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching with HTTPClient in TypeScript\nDESCRIPTION: Performs a fetch operation using the HTTPClient. It takes input (string, URL, or Request) and an optional init object as parameters. Returns a Promise that resolves to a Response object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/HTTPClient.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nfetch(input: string | URL | Request, init?: RequestInit & HTTPClientInit): Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: GetContinuation Method Implementation - TypeScript\nDESCRIPTION: Method to retrieve additional home feed content through continuation tokens. Returns a Promise resolving to a new HomeFeed instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/HomeFeed.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<HomeFeed>\n```\n\n----------------------------------------\n\nTITLE: Translating a YouTube Comment in TypeScript/JavaScript\nDESCRIPTION: This method translates a YouTube comment to the specified target language. It returns a Promise with the translated content and information about the success of the operation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/Comment.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntranslate(target_language) ⇒ Promise.<{ success: boolean, status_code: number, data: object, content: string }>\n```\n\n----------------------------------------\n\nTITLE: Library Class Accessors Implementation - TypeScript\nDESCRIPTION: Getter methods for accessing various sections of the library including history, liked videos, playlists and clips.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget history(): undefined | object\nget liked_videos(): undefined | object\nget playlists_section(): undefined | object\nget clips(): undefined | object\n```\n\n----------------------------------------\n\nTITLE: Getting YouTube Kids Video Information\nDESCRIPTION: Method to fetch detailed information about a specific video using its ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Kids.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo(video_id: string): Promise<VideoInfo>\n```\n\n----------------------------------------\n\nTITLE: PlaylistVideoList Class Definition in TypeScript\nDESCRIPTION: Defines a PlaylistVideoList class that extends YTNode to manage playlist video data. Contains properties for playlist ID, editability, reordering capability, and an array of video nodes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistVideoList.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistVideoList extends YTNode {\n    static type: string = 'PlaylistVideoList';\n    id: string;\n    is_editable: boolean;\n    can_reorder: boolean;\n    videos: ObservedArray<YTNode>;\n\n    constructor(data: RawNode) {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Shelf by Title in YouTube.js Feed Class\nDESCRIPTION: This method finds a shelf by its title. It takes a string parameter 'title' and returns either undefined or a ReelShelf, RichShelf, or Shelf object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Search.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Updating Video Metadata with YouTube Studio API in TypeScript\nDESCRIPTION: This method updates the metadata of a YouTube video. It takes a video ID and a metadata object as parameters, allowing users to modify various attributes of the video such as tags, title, description, category, license, and thumbnail.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Studio.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst videoId = 'abcdefg';\nconst thumbnail = fs.readFileSync('./my_awesome_thumbnail.jpg');\n\nconst response = await yt.studio.updateVideoMetadata(videoId, {\n  tags: [ 'astronomy', 'NASA', 'APOD' ],\n  title: 'Artemis Mission',\n  description: 'A nicely written description...',\n  category: 27,\n  license: 'creative_commons',\n  thumbnail,\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Event Emission Method Implementation\nDESCRIPTION: Method to emit events with custom arguments to all registered listeners.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/EventEmitter.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nemit(type: string, ...args: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining YTNode Constructor in TypeScript\nDESCRIPTION: Constructor for the YTNode class, which is the base class for YouTube data structures in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/YTNode.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew YTNode(): YTNode\n```\n\n----------------------------------------\n\nTITLE: Searching within YouTube Channel\nDESCRIPTION: This method performs a search within the channel using the provided query. It returns a Promise that resolves to a Channel object containing the search results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nsearch(query: string): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Generating Nodes at Runtime in TypeScript\nDESCRIPTION: This snippet demonstrates how to generate and use nodes at runtime, including checking for existing parsers and creating custom nodes ahead of time using the Generator class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/parser/README.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Parser } from \"youtubei.js\";\n\n// We may check if we have a parser for a node.\nif (Parser.hasParser('Example')) {\n  // Then retrieve it.\n  const Example = Parser.getParserByName('Example');\n  // We may then use the parser as normal.\n  const example = new Example(data);\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Generator } from \"youtubei.js\";\n\n// Provided you have an example of the node `Example`\nconst example_data = {\n  \"title\": {\n    \"runs\": [\n      {\n        \"text\": \"Example\"\n      }\n    ]\n  }\n}\n\n// The first argument is the name of the class, the second is the data you have for the node.\n// It will return a class that extends YTNode.\nconst Example = Generator.generateRuntimeClass('Example', example_data);\n\n// You may now use this class as you would any other node.\nconst example = new Example(example_data);\n\nconst title = example.key('title').instanceof(Text).toString();\n```\n\n----------------------------------------\n\nTITLE: Type Introspection and Safe Casting Methods in YTNode Base Class (TypeScript)\nDESCRIPTION: This snippet outlines inherited utility methods used by SectionList and other YTNode-derived classes for runtime type checking, casting, and key assertion. Methods such as as(), is(), hasKey(), and key() allow developers to safely transform or verify nodes against specific constructor types, check for property existence, and retrieve optional properties with proper type safety. These generic, TypeScript-centric utilities enable flexible and type-safe manipulation of complex parser node trees typical of the YouTube.js project. Dependencies include definitions for YTNode, YTNodeConstructor, and the Maybe wrapper for optional values.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SectionList.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Cast to one of the given types. Throws if node is not of the given type(s).\n */\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\n/**\n * Check if the node is of the given type.\n */\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\n/**\n * Check for a key without asserting the type.\n */\nhasKey<T extends string, R = any>(key: T): this is SectionList & { [k in string]: R };\n\n/**\n * Assert that the node has the given key and return it, wrapped in a Maybe.\n */\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining the ReelWatchEndpoint Class - TypeScript\nDESCRIPTION: This snippet defines the ReelWatchEndpoint class, which extends YTNode and implements IEndpoint for ReelWatchRequest. It initializes the node with raw data, provides static and instance type fields, and implements the buildRequest and getApiPath methods to interface with the YouTube Reels API. Dependencies include the YTNode base class, IEndpoint interface, and relevant type definitions (RawNode, ReelWatchRequest). Key properties include type checking and API interaction capabilities. The class expects well-formed RawNode input and outputs structured requests and endpoint behaviors specific to YouTube Reels.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelWatchEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Pseudocode based on documentation (original source not fully provided)\nimport YTNode from '../../Helpers/classes/YTNode';\nimport type { RawNode } from '../../APIResponseTypes/type-aliases/RawNode';\nimport type { ReelWatchRequest } from '../../APIResponseTypes/type-aliases/ReelWatchRequest';\nimport type { IEndpoint } from '../../APIResponseTypes/interfaces/IEndpoint';\n\nexport default class ReelWatchEndpoint extends YTNode implements IEndpoint<ReelWatchRequest> {\n  static type: string = 'ReelWatchEndpoint';\n  readonly type: string;\n  constructor(data: RawNode) {\n    super();\n    // ... initialization logic for ReelWatchEndpoint\n  }\n  getApiPath(): string {\n    // ... implementation returning endpoint path as a string\n  }\n  buildRequest(): ReelWatchRequest {\n    // ... implementation building and returning a ReelWatchRequest\n  }\n  // Inherited type and helper methods (is, as, hasKey, key) from YTNode\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining BackstageImage Class in TypeScript\nDESCRIPTION: This code defines the BackstageImage class, which extends YTNode. It includes properties for image thumbnails and a navigation endpoint, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BackstageImage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BackstageImage extends YTNode {\n  static type = 'BackstageImage';\n\n  image: Thumbnail[];\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    this.image = Thumbnail.fromResponse(data.image);\n    this.endpoint = new NavigationEndpoint(data.backstageImageRenderer.tapAction);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YTNodeConstructor Interface in TypeScript\nDESCRIPTION: Interface definition for YTNodeConstructor that extends YTNode class. Takes a generic type parameter T that must extend YTNode. Includes a constructor that accepts data parameter and returns type T, along with a readonly type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/interfaces/YTNodeConstructor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface YTNodeConstructor<T extends YTNode = YTNode> {\n    new (data: any): T;\n    readonly type: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChipBarView Class in TypeScript\nDESCRIPTION: Defines the ChipBarView class which extends YTNode. It has a constructor that takes a RawNode parameter and initializes the chips property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChipBarView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ChipBarView extends YTNode {\n  static type = 'ChipBarView';\n\n  chips: null | ObservedArray<ChipView>;\n\n  constructor(data: RawNode) {\n    super();\n    this.chips = parser.parseArray(data.chips, ChipView);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ItemSectionTab Class Definition in TypeScript\nDESCRIPTION: Class definition for ItemSectionTab that extends YTNode. It handles tab functionality with properties for title, selected state, and navigation endpoint. The constructor takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ItemSectionTab.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ItemSectionTab extends YTNode {\n  static type = 'Tab';\n  title: Text;\n  selected: boolean;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Accessor in Artist Class\nDESCRIPTION: Implements a getter for the page property, which returns an IBrowseResponse object representing the artist's page data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Artist.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget page(): IBrowseResponse\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Class in TypeScript\nDESCRIPTION: This code snippet defines the Channel class, which extends YTNode. It includes properties for channel metadata such as author, subscriber count, and description.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Channel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Channel extends YTNode {\n  static type = 'Channel';\n\n  id: string;\n  author: Author;\n  subscriber_count: Text;\n  video_count: Text;\n  long_byline: Text;\n  short_byline: Text;\n  endpoint: NavigationEndpoint;\n  subscribe_button: null | Button | SubscribeButton;\n  description_snippet: Text;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted for brevity\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Podcasts from YouTube Channel\nDESCRIPTION: This method fetches podcasts from the channel. It returns a Promise that resolves to a Channel object containing the podcast data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPodcasts(): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Replies in CommentThread Class in TypeScript\nDESCRIPTION: Method for retrieving replies to a comment thread. It checks if the thread has replies, then returns a promise that resolves to a CommentThread object containing the replies.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentThread.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetReplies(): Promise<CommentThread> {\n  if (!this.has_replies || !this.comment?.key('comment').key('comment_id').string())\n    throw new Error('Cannot retrieve replies for this thread, they do not exist.');\n\n  if (!this.comment_replies_data)\n    throw new Error('Cannot retrieve replies for this thread without required data.');\n\n  return this.comment_replies_data.getContinuation();\n}\n```\n\n----------------------------------------\n\nTITLE: Liking a YouTube Comment in TypeScript\nDESCRIPTION: Asynchronous method to like a YouTube comment. It returns a Promise that resolves to an ApiResponse. Throws an error if the Actions instance is not set or if the like command is not found.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nlike(): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Comments in YouTube.js\nDESCRIPTION: Demonstrates how to obtain a Comments instance to access YouTube video comments. This method requires a video ID parameter and returns a Comments object that provides access to the comment threads.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst comments = await yt.getComments(VIDEO_ID);\n```\n\n----------------------------------------\n\nTITLE: Defining YouTube Client Name IDs in TypeScript\nDESCRIPTION: A TypeScript constant object that maps YouTube client platform names to their respective ID strings. These IDs are used to identify different YouTube client applications like Android, iOS, Web, TV, etc. when interacting with YouTube's internal APIs.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Constants/variables/CLIENT_NAME_IDS.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst CLIENT_NAME_IDS: object = {\n  ANDROID: '3',\n  ANDROID_CREATOR: '14',\n  ANDROID_MUSIC: '21',\n  iOS: '5',\n  MWEB: '2',\n  TVHTML5: '7',\n  TVHTML5_SIMPLY_EMBEDDED_PLAYER: '85',\n  WEB: '1',\n  WEB_CREATOR: '62',\n  WEB_EMBEDDED_PLAYER: '56',\n  WEB_KIDS: '76',\n  WEB_REMIX: '67'\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Transcript in MediaInfo Class\nDESCRIPTION: This inherited method retrieves the video's transcript. It returns a Promise that resolves to a TranscriptInfo object containing the transcript data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTranscript(): Promise<TranscriptInfo>\n```\n\n----------------------------------------\n\nTITLE: Getting Playlist Suggestions in TypeScript\nDESCRIPTION: Method to fetch suggested items for the playlist. Takes a boolean parameter to determine if the suggestions should be refreshed. Returns a Promise resolving to an array of MusicResponsiveListItem.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Playlist.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetSuggestions(refresh: boolean = true): Promise<ObservedArray<MusicResponsiveListItem>>\n```\n\n----------------------------------------\n\nTITLE: Fetching Up Next Tracks in YouTube Music\nDESCRIPTION: This method retrieves the up next playlist for a track. It takes an optional automix parameter and returns a promise resolving to a PlaylistPanel object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/TrackInfo.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetUpNext(automix: boolean = true): Promise<PlaylistPanel>\n```\n\n----------------------------------------\n\nTITLE: VideoPrimaryInfo Class Definition in TypeScript\nDESCRIPTION: Definition of the VideoPrimaryInfo class which extends YTNode. This class stores the primary information displayed on a YouTube video page, including title, view count, publication date, and badges.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoPrimaryInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'VideoPrimaryInfo'\n```\n\n----------------------------------------\n\nTITLE: Sign Out Method Definition in TypeScript\nDESCRIPTION: Method signature for signOut() that handles user sign out and credential revocation\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Session.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsignOut(): Promise<undefined | Response>\n```\n\n----------------------------------------\n\nTITLE: Playlist Items Accessor\nDESCRIPTION: Getter method that returns an array of playlist items including PlaylistVideo, ReelItem and ShortsLockupView types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget items(): ObservedArray<PlaylistVideo | ReelItem | ShortsLockupView>\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration for Youtube.js in React Native\nDESCRIPTION: Babel configuration required to support import attributes and namespace exports used by Youtube.js, while maintaining React Native's standard presets.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/platform/react-native.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  plugins: [\n    ['@babel/plugin-syntax-import-attributes', {deprecatedAssertSyntax: true}],\n    '@babel/plugin-transform-export-namespace-from',\n  ],\n  presets: ['module:@react-native/babel-preset'],\n};\n```\n\n----------------------------------------\n\nTITLE: Parsing Data with Inference Types in TypeScript\nDESCRIPTION: Function that parses values from a data structure using a specified key, inference type, and key path. Takes a key string, inference type, unknown data, and optional key path array as parameters. Returns the parsed value of any type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/parse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparse(key: string, inference_type: InferenceType, data: unknown, key_path: string[] = ...): any\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to HomeFeed in TypeScript\nDESCRIPTION: This method applies a given filter to the home feed and returns a Promise resolving to a new HomeFeed instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napplyFilter(filter: string | ChipCloudChip): Promise<HomeFeed>\n```\n\n----------------------------------------\n\nTITLE: Checking Continuation Availability for Watch Next Feed in TypeScript\nDESCRIPTION: A getter method that checks if continuation is available for the watch next feed in a YouTube Short. Returns a boolean indicating whether continuation exists.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget wn_has_continuation(): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining MediaInfo Class Properties in TypeScript\nDESCRIPTION: This code snippet defines various properties of the MediaInfo class, including basic_info, annotations, storyboards, endscreen, captions, cards, streaming_data, playability_status, and player_config.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/MediaInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbasic_info: object;\nannotations?: [`ObservedArray`]<[`PlayerAnnotationsExpanded`]>;\nstoryboards?: [`PlayerStoryboardSpec`] | [`PlayerLiveStoryboardSpec`];\nendscreen?: [`Endscreen`];\ncaptions?: [`PlayerCaptionsTracklist`];\ncards?: [`CardCollection`];\nstreaming_data?: [`IStreamingData`];\nplayability_status?: [`IPlayabilityStatus`];\nplayer_config?: [`IPlayerConfig`];\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistSidebarPrimaryInfo Class Properties in TypeScript\nDESCRIPTION: Defines the core properties of the PlaylistSidebarPrimaryInfo class including stats, thumbnail renderer, title, menu, endpoint and description. The class extends YTNode and includes both instance and static type declarations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistSidebarPrimaryInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistSidebarPrimaryInfo extends YTNode {\n  static type = 'PlaylistSidebarPrimaryInfo';\n\n  stats: Text[];\n  thumbnail_renderer: YTNode;\n  title: Text;\n  menu: YTNode;\n  endpoint: NavigationEndpoint;\n  description: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Safe Property Access with key() Method in YouTube.js\nDESCRIPTION: This method safely accesses a property on a node, returning the value wrapped in a Maybe class. It throws an error if the node doesn't have the specified key.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Get More Content Method\nDESCRIPTION: Method to load additional items for a given music shelf, returning a promise with updated search results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Search.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetMore(shelf: undefined | MusicShelf): Promise<Search>\n```\n\n----------------------------------------\n\nTITLE: Type Guard Function Declaration - hasKeys\nDESCRIPTION: A generic type guard function that checks if an object has all specified keys. Takes a params object and variable number of keys, returns a type predicate ensuring the required properties exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/hasKeys.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhasKeys<T extends object, R extends keyof T[]>(params: T, ...keys: R): params is Exclude<T, R[number]> & Required<Pick<T, R[number]>>\n```\n\n----------------------------------------\n\nTITLE: Defining BrowseFeedActions Class in TypeScript\nDESCRIPTION: Class definition for BrowseFeedActions that extends YTNode. Includes constructor, properties for content management, and inherited utility methods for type checking and key assertions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BrowseFeedActions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowseFeedActions extends YTNode {\n  static type = 'BrowseFeedActions';\n  contents: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CarouselHeader Class in TypeScript\nDESCRIPTION: This snippet defines the CarouselHeader class, which extends YTNode. It includes a constructor, properties for contents and type, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CarouselHeader extends YTNode {\n  static type = 'CarouselHeader';\n\n  contents: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.contents = parser.parseArray(data.contents);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Array Type in TypeScript\nDESCRIPTION: The isArrayType function takes an unknown value as input and determines if it's an array. If it is, it returns the ArrayInferenceType; otherwise, it returns false. This function is defined in the generator.ts file of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/isArrayType.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nisArrayType(value: unknown): false | ArrayInferenceType\n```\n\n----------------------------------------\n\nTITLE: Alert Class Definition in TypeScript\nDESCRIPTION: Defines the Alert class that extends YTNode with properties for alert_type and text. Includes constructor, type definitions, and inherited methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Alert.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Alert extends YTNode {\n  static type = 'Alert';\n  text: Text;\n  alert_type: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PlayerControlsOverlay Class Definition in TypeScript\nDESCRIPTION: Class definition for PlayerControlsOverlay that extends YTNode. Includes constructor, properties for overflow and type, and inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerControlsOverlay.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlayerControlsOverlay extends YTNode {\n  static type = 'PlayerControlsOverlay';\n  overflow: null | PlayerOverflow;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  // Inherited methods\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is PlayerControlsOverlay & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data in YouTube.js Feed Class\nDESCRIPTION: This method retrieves continuation data for the feed. It returns a Promise that resolves to either undefined or an IBrowseResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Channel.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining StructuredDescriptionContent Class - TypeScript\nDESCRIPTION: Implements the StructuredDescriptionContent node by extending the YTNode base class. It provides an items property holding an ObservedArray of various description section node types, as well as static and instance type identifiers. Requires the YTNode base class, ObservedArray type alias, and all child node types for sections. Intended for instantiation with raw data to model rich YouTube video descriptions. Inputs: RawNode data structure. Outputs: StructuredDescriptionContent instance representing parsed description content.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/StructuredDescriptionContent.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass StructuredDescriptionContent extends YTNode {\n  static type: string = 'StructuredDescriptionContent';\n\n  items: ObservedArray<\n    ExpandableVideoDescriptionBody |\n    HorizontalCardList |\n    VideoDescriptionHeader |\n    VideoDescriptionInfocardsSection |\n    VideoDescriptionMusicSection |\n    VideoDescriptionTranscriptSection |\n    VideoDescriptionCourseSection |\n    VideoAttributesSectionView |\n    HowThisWasMadeSectionView |\n    ReelShelf\n  >;\n\n  constructor(data: RawNode) {\n    super();\n    // ... initialization logic\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of YouTube.js\nDESCRIPTION: Demonstrates how to import and initialize the Innertube class, which is the main entry point for using the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// const { Innertube } = require('youtubei.js');\nimport { Innertube } from 'youtubei.js';\nconst innertube = await Innertube.create(/* options */);\n```\n\n----------------------------------------\n\nTITLE: Implementing CommentThread Methods in TypeScript\nDESCRIPTION: Implements the methods of the CommentThread class for retrieving replies and continuations. These methods return Promises resolving to CommentThread objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/CommentThread.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass CommentThread {\n  getReplies(): Promise<CommentThread> {\n    // Implementation to retrieve replies\n  }\n\n  getContinuation(): Promise<CommentThread> {\n    // Implementation to retrieve next batch of replies\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveChatItemContextMenuEndpoint Class in TypeScript\nDESCRIPTION: Class definition that extends YTNode and implements IEndpoint interface for handling live chat item context menu functionality. Includes constructor, property definitions, and method implementations for API path retrieval and request building.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatItemContextMenuEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatItemContextMenuEndpoint extends YTNode implements IEndpoint<LiveChatItemContextMenuRequest> {\n  static type = 'LiveChatItemContextMenuEndpoint';\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n\n  getApiPath(): string {\n    return '/live_chat/live_chat_item_context_menu';\n  }\n\n  buildRequest(): LiveChatItemContextMenuRequest {\n    return {\n      params: this.key('params').string()\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Liking a YouTube Video in TypeScript\nDESCRIPTION: Method to like a given video. It takes the video ID as a parameter and returns a Promise with the API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nlike(video_id: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: NavigationEndpoint URL Generation - TypeScript\nDESCRIPTION: Method for converting the navigation endpoint data into a URL string if possible.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/NavigationEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoURL(): undefined | string\n```\n\n----------------------------------------\n\nTITLE: Accessing Channel Content in TypeScript\nDESCRIPTION: This snippet shows various getter methods available in the Channel class for accessing different types of content such as videos, playlists, and posts.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nget videos(): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\nget playlists(): ObservedArray<GridPlaylist | LockupView | Playlist>\nget posts(): ObservedArray<BackstagePost | Post | SharedPost>\nget page_contents(): ReloadContinuationItemsCommand | SectionList | MusicQueue | RichGrid\nget secondary_contents(): undefined | SuperParsedResult<YTNode>\nget shelves(): ObservedArray<ReelShelf | RichShelf | Shelf>\n```\n\n----------------------------------------\n\nTITLE: Format Class Properties - TypeScript Class Definition\nDESCRIPTION: Comprehensive set of properties defining media format characteristics including bitrate, quality, dimensions, audio/video specifications, and DRM details.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Format.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Format {\n  itag: number;\n  height?: number;\n  last_modified: Date;\n  last_modified_ms: string;\n  content_length?: number;\n  drm_families?: string[];\n  fps?: number;\n  projection_type?: ProjectionType;\n  average_bitrate?: number;\n  bitrate: number;\n  audio_quality?: string;\n  approx_duration_ms: number;\n  audio_sample_rate?: number;\n  audio_channels?: number;\n  loudness_db?: number;\n  is_drc?: boolean;\n  drm_track_type?: string;\n  distinct_params?: string;\n  mime_type: string;\n  is_type_otf: boolean;\n  init_range?: Range;\n  index_range?: Range;\n  cipher?: string;\n  audio_track?: AudioTrack;\n  has_audio: boolean;\n  has_video: boolean;\n  has_text: boolean;\n  language?: null | string;\n  is_dubbed?: boolean;\n  is_auto_dubbed?: boolean;\n  is_descriptive?: boolean;\n  is_secondary?: boolean;\n  is_original?: boolean;\n  color_info?: ColorInfo;\n  caption_track?: CaptionTrack;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Continuation for Comments in CommentThread Class in TypeScript\nDESCRIPTION: Method for retrieving the next batch of replies. It checks if continuation exists, then returns a promise that resolves to a CommentThread containing the next set of replies.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentThread.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<CommentThread> {\n  if (!this.has_continuation)\n    throw new Error('This thread has no continuation.');\n\n  if (!this.comment_replies_data)\n    throw new Error('Cannot retrieve replies for this thread without required data.');\n\n  return this.comment_replies_data.getContinuation();\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Playlist Metadata in TypeScript\nDESCRIPTION: Methods for updating playlist metadata like name and description.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/PlaylistManager.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetName(playlist_id: string, name: string): Promise<object>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nsetDescription(playlist_id: string, description: string): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: Configuring Parser Error Handler in YouTube.js\nDESCRIPTION: The setParserErrorHandler function sets a custom error handler for the parser. It takes a ParserErrorHandler as an argument and returns void. This function is defined in the parser.ts file of the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/setParserErrorHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetParserErrorHandler(handler: ParserErrorHandler): void\n```\n\n----------------------------------------\n\nTITLE: Retrieving Additional Video Information in TypeScript\nDESCRIPTION: Implements methods for getting live chat, trailer info, and applying filters to the watch next feed in the VideoInfo class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/VideoInfo.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass VideoInfo extends MediaInfo {\n  // ... other properties and methods\n\n  getLiveChat(): LiveChat {\n    // Implementation for retrieving live chat\n  }\n\n  getTrailerInfo(): null | VideoInfo {\n    // Implementation for getting trailer info\n  }\n\n  async selectFilter(target_filter: undefined | string | ChipCloudChip): Promise<VideoInfo> {\n    // Implementation for applying filter to watch next feed\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationEndpoint Constructor - TypeScript\nDESCRIPTION: Constructor for creating a new NavigationEndpoint instance. Takes raw node data as input and initializes the navigation endpoint properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/NavigationEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew NavigationEndpoint(data: RawNode): NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Retrieving Active Channel Info in TypeScript\nDESCRIPTION: Method to retrieve the active channel info for the signed-in account. It throws an error if 'on_behalf_of_user' was used to create the Innertube instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/AccountManager.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo(all?: false): Promise<AccountInfo>\n```\n\n----------------------------------------\n\nTITLE: GridMix Class Definition in TypeScript\nDESCRIPTION: Defines the GridMix class which extends YTNode. It contains properties for mix identification, title, author, thumbnails, video counts, endpoints, and thumbnail overlays.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridMix.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass GridMix extends YTNode {\n  static type = 'GridMix';\n\n  id: string;\n  title: Text;\n  author: null | Text;\n  thumbnails: Thumbnail[];\n  video_count: Text;\n  video_count_short: Text;\n  endpoint: NavigationEndpoint;\n  secondary_endpoint: NavigationEndpoint;\n  thumbnail_overlays: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceAndUserCode Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias named DeviceAndUserCode. It represents an object with properties for device code, user code, verification URL, expiration time, interval, and an optional error code.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/DeviceAndUserCode.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DeviceAndUserCode = {\n  device_code: string;\n  user_code: string;\n  verification_url: string;\n  expires_in: number;\n  interval: number;\n  error_code?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistInfoCardContent Class in TypeScript\nDESCRIPTION: Class definition for PlaylistInfoCardContent that extends YTNode. It handles playlist information card content with properties for title, thumbnails, video count, channel name, and navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistInfoCardContent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistInfoCardContent extends YTNode {\n  static type = 'PlaylistInfoCardContent';\n\n  title: Text;\n  thumbnails: Thumbnail[];\n  video_count: Text;\n  channel_name: Text;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MediaInfo Class Methods in TypeScript\nDESCRIPTION: This code snippet shows the implementation of various methods in the MediaInfo class, including chooseFormat, download, getTranscript, addToWatchHistory, and toDash.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/MediaInfo.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nchooseFormat(options: [`FormatOptions`]): [`Format`]\ndownload(options: [`DownloadOptions`] = {}): Promise<ReadableStream<Uint8Array>>\ngetTranscript(): Promise<[`TranscriptInfo`]>\naddToWatchHistory(client_name: string = Constants.CLIENTS.WEB.NAME, client_version: string = Constants.CLIENTS.WEB.VERSION, replacement: string = 'https://www.'): Promise<Response>\ntoDash(url_transformer?: [`URLTransformer`], format_filter?: [`FormatFilter`], options?: DashOptions = ...): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Getting Playlists from Memo in TypeScript\nDESCRIPTION: Static method to retrieve all playlists from a given page using memo. Returns an ObservedArray of various playlist types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/HomeFeed.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Initializing Comments Class in TypeScript\nDESCRIPTION: Constructor for the Comments class. It takes Actions, data, and an optional already_parsed flag as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Comments.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Comments(actions: Actions, data: any, already_parsed: boolean = false): Comments\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonView Class Constructor - TypeScript\nDESCRIPTION: Constructor for the ButtonView class that takes a RawNode data parameter and initializes button properties like icon, title, style, and navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ButtonView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ButtonView(`data`): [`ButtonView`](ButtonView.md)\n```\n\n----------------------------------------\n\nTITLE: Defining AnchoredSection Class in TypeScript\nDESCRIPTION: This code defines the AnchoredSection class, which extends YTNode. It includes properties for title, content, endpoint, category assets, and category type. The constructor takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AnchoredSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AnchoredSection extends YTNode {\n  static type = 'AnchoredSection';\n\n  title: string;\n  content: null | SectionList;\n  endpoint: NavigationEndpoint;\n  category_assets: {\n    asset_key: string;\n    background_color: string;\n  };\n  category_type: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Response Data in TypeScript\nDESCRIPTION: Shows how to handle parsed responses using SuperParsedResponse to check response types and extract data safely.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/parser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = Parser.parse(data);\n\nif (response.is_item) {\n  const node = response.item();\n}\n\nif (response.is_array) {\n  const nodes = response.array();\n}\n\nconst is_null = response.is_null;\n```\n\n----------------------------------------\n\nTITLE: CompactPlaylist Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the CompactPlaylist class which extends the base Playlist class. It takes a RawNode data parameter and initializes a new CompactPlaylist instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactPlaylist.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**new CompactPlaylist**(`data`): [`CompactPlaylist`](CompactPlaylist.md)\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatTickerPaidMessageItem Class in TypeScript\nDESCRIPTION: This class represents a paid message item in a live chat ticker. It includes properties for the message author, amount, colors, duration, and related commands.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatTickerPaidMessageItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatTickerPaidMessageItem extends YTNode {\n  static type = 'LiveChatTickerPaidMessageItem';\n\n  id: string;\n  author: Author;\n  amount?: Text;\n  amount_text_color: number;\n  start_background_color: number;\n  end_background_color: number;\n  duration_sec: number;\n  full_duration_sec: number;\n  show_item: YTNode;\n  show_item_endpoint: NavigationEndpoint;\n  animation_origin: string;\n  open_engagement_panel_command: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining getCookie Function in TypeScript\nDESCRIPTION: This function takes a string of cookies, a cookie name, and an optional flag to match the whole name. It returns the value of the specified cookie if found, or undefined otherwise. The function is defined in the Utils.ts file of the youtubei.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/getCookie.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetCookie(cookies: string, name: string, matchWholeName: boolean = false): string | undefined\n```\n\n----------------------------------------\n\nTITLE: Initializing Guide Class in TypeScript\nDESCRIPTION: Defines the Guide class constructor that takes raw response data and initializes the guide contents. It also includes a property for guide contents and an accessor for the full guide response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Guide.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Guide {\n  contents?: ObservedArray<GuideSection | GuideSubscriptionsSection>;\n\n  constructor(data: IRawResponse) {\n    // Implementation not shown\n  }\n\n  get page(): IGuideResponse {\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disliking a Comment in TypeScript\nDESCRIPTION: Method to dislike a comment, which returns a promise resolving to the API response. Throws an error if the Actions instance is not set or if the dislike command is not found.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **dislike**(): `Promise`\\<[`ApiResponse`](../../../interfaces/ApiResponse.md)\\>\n```\n\n----------------------------------------\n\nTITLE: Poll Class Properties Definition in TypeScript\nDESCRIPTION: Definition of Poll class properties including choices array, poll type, total votes, and live chat poll ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Poll.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchoices: object[]\nlive_chat_poll_id?: string\npoll_type?: string\ntotal_votes?: Text\ntype: string\nstatic type: string = 'Poll'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Setting Option in TypeScript\nDESCRIPTION: Method to find and return a specific setting option by name. It returns a SettingsSwitch object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Settings.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetSettingOption(name: string): SettingsSwitch\n```\n\n----------------------------------------\n\nTITLE: Finding Shelf by Title in HomeFeed in TypeScript\nDESCRIPTION: This inherited method finds a shelf in the feed by its title, returning various shelf types or undefined.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Replying to a YouTube Comment in TypeScript/JavaScript\nDESCRIPTION: This method creates a reply to a YouTube comment. It takes the reply text as an argument and returns a Promise with information about the success of the operation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/Comment.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreply(text) ⇒ Promise.<{ success: boolean, status_code: number, data: object }>\n```\n\n----------------------------------------\n\nTITLE: Set Cache Method Definition\nDESCRIPTION: Defines an asynchronous method to store data in the cache, taking a key and an ArrayBuffer value as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/interfaces/ICache.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nset(key: string, value: ArrayBuffer): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining SearchFilters Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition for YouTube search filters. Includes optional properties for duration, features array, sort_by option, content type, and upload date filters. Each property references other custom type definitions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/SearchFilters.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SearchFilters = {\n  duration?: Duration;\n  features?: Feature[];\n  sort_by?: SortBy;\n  type?: SearchType;\n  upload_date?: UploadDate;\n}\n```\n\n----------------------------------------\n\nTITLE: ActiveAccountHeader Class Definition in TypeScript\nDESCRIPTION: Class definition for ActiveAccountHeader that extends YTNode. Contains properties for managing active YouTube account header information including account name, photo, handle, and navigation endpoints.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ActiveAccountHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ActiveAccountHeader extends YTNode {\n  static type = 'ActiveAccountHeader';\n\n  account_name: Text;\n  account_photo: Thumbnail[];\n  endpoint: NavigationEndpoint;\n  manage_account_title: Text;\n  channel_handle: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping LiveChat\nDESCRIPTION: Stops the LiveChat functionality. This method doesn't take any parameters and doesn't return anything.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nstop(): void\n```\n\n----------------------------------------\n\nTITLE: Implementing the VerticalList Class Constructor in TypeScript\nDESCRIPTION: Constructor for the VerticalList class that takes raw node data and initializes the object. It extends the YTNode base class and sets up properties for items, collapsed item count, and button text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew VerticalList(data): VerticalList\n```\n\n----------------------------------------\n\nTITLE: Defining FetchFunction Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named FetchFunction that is equivalent to the type of the built-in fetch function. This allows for type-safe usage of fetch-like functions in the codebase.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/FetchFunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FetchFunction = typeof fetch;\n```\n\n----------------------------------------\n\nTITLE: Defining getParserByName Function in TypeScript\nDESCRIPTION: This function takes a classname as a string parameter and returns a YTNodeConstructor for a YTNode. It is defined in the parser.ts file of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/getParserByName.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetParserByName(classname: string): YTNodeConstructor<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Defining CommentThread Properties in TypeScript\nDESCRIPTION: Defines the properties of the CommentThread class, including the top-level comment, replies array, and boolean flags for continuation and replies existence.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/CommentThread.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CommentThread {\n  comment: Comment | CommentView;\n  replies: (Comment | CommentView)[];\n  has_continuation: boolean;\n  has_replies: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Node Type with is<T, K>() Method in TypeScript\nDESCRIPTION: The is<T, K>() method checks if the node matches any of the provided constructor types, enabling safe type checking in TypeScript. Utilizes generics for extensibility. Input: one or more YTNodeConstructor types; Output: boolean type guard. This supports dynamic inspection of node types without casting, aiding in correct API usage and code safety.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchEndpoint.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Declaration for DASH Manifest Generation\nDESCRIPTION: Function signature for toDash that converts streaming data into a DASH manifest format. Takes optional parameters including streaming data, post-live DVR status, URL transformer, format filter, and various player-related options. Returns a Promise resolving to a string containing the DASH manifest.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/FormatUtils/functions/toDash.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoDash(\n  streaming_data?: IStreamingData,\n  is_post_live_dvr?: boolean = false,\n  url_transformer?: URLTransformer,\n  format_filter?: FormatFilter,\n  cpn?: string,\n  player?: Player,\n  actions?: Actions,\n  storyboards?: PlayerStoryboardSpec | PlayerLiveStoryboardSpec,\n  caption_tracks?: CaptionTrackData[],\n  options?: StreamingInfoOptions\n): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining Grid Class Properties in TypeScript\nDESCRIPTION: This snippet shows the static and instance properties of the Grid class, including items array, visibility options, targeting, and continuation data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Grid.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'Grid';\n\nitems: ObservedArray<YTNode>;\nis_collapsible?: boolean;\nvisible_row_count?: string;\ntarget_id?: string;\ncontinuation: null | string;\nheader?: YTNode;\n```\n\n----------------------------------------\n\nTITLE: Defining SingleColumnBrowseResults Class extending YTNode in TypeScript\nDESCRIPTION: This snippet defines the SingleColumnBrowseResults class, which extends YTNode and represents a single-column set of browse results from YouTube. The class adds a tabs property holding an ObservedArray of Tab objects and sets a static type property for identification. It overrides the YTNode constructor to accept and parse a RawNode, and inherits all base class functionality for node type validation and property inspection. Intended for internal representation of YouTube API browse results within the YouTube.js framework; depends on YTNode, Tab, ObservedArray, and correct type aliases.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleColumnBrowseResults.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SingleColumnBrowseResults extends YTNode {\n  static type: string = 'SingleColumnBrowseResults';\n\n  tabs: ObservedArray<Tab>;\n\n  constructor(data: RawNode) {\n    super();  // Calls the base class constructor\n    // Additional data parsing logic to populate 'tabs' from data\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Format Class - TypeScript Class Constructor\nDESCRIPTION: Constructor for the Format class that takes format data and optional nsig cache parameters. Used to create new Format instances for handling media format information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Format.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Format(data: RawNode, this_response_nsig_cache?: Map<string, string>): Format\n```\n\n----------------------------------------\n\nTITLE: MusicCarouselShelf Class Definition in TypeScript\nDESCRIPTION: Class definition for MusicCarouselShelf that extends YTNode. It handles music carousel shelf data with properties for contents, header, and number of items per column.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicCarouselShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicCarouselShelf extends YTNode {\n  static type = 'MusicCarouselShelf';\n  header: null | MusicCarouselShelfBasicHeader;\n  contents: ObservedArray<MusicMultiRowListItem | MusicNavigationButton | MusicResponsiveListItem | MusicTwoRowItem>;\n  num_items_per_column?: number;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Items in ItemMenu by Icon Type in TypeScript\nDESCRIPTION: The selectItem method allows selection of an item by its icon type, returning a Promise that resolves to an IParsedResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ItemMenu.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nselectItem(icon_type: string): Promise<IParsedResponse>\n```\n\n----------------------------------------\n\nTITLE: MusicQueue Property Definitions\nDESCRIPTION: Static and instance property definitions for the MusicQueue class including content storage and type identification.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicQueue.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontent: null | PlaylistPanel;\ntype: string;\nstatic type: string = 'MusicQueue';\n```\n\n----------------------------------------\n\nTITLE: PlaylistPanelVideo Class Definition in TypeScript\nDESCRIPTION: Class that extends YTNode to represent a video item in a YouTube playlist panel. Contains properties for video metadata like title, thumbnail, duration, author and navigation endpoints.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistPanelVideo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistPanelVideo extends YTNode {\n  static type = 'PlaylistPanelVideo';\n\n  title: Text;\n  thumbnail: Thumbnail[];\n  endpoint: NavigationEndpoint;\n  selected: boolean;\n  video_id: string;\n  duration: {\n    seconds: number;\n    text: string;\n  };\n  author: string;\n  album?: {\n    endpoint?: NavigationEndpoint;\n    id?: string;\n    name: string;\n    year?: string;\n  };\n  artists?: object[];\n  badges: ObservedArray<YTNode>;\n  menu: YTNode;\n  set_video_id?: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel Feature Checks in TypeScript\nDESCRIPTION: This code snippet shows the implementation of various getter methods to check for channel features like home, videos, shorts, live streams, etc.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget has_home(): boolean {\n  return this.memo.getType('has_home', () => {\n    return this.page.contents?.twoColumnBrowseResultsRenderer?.tabs?.some((tab) => tab.tabRenderer?.endpoint?.commandMetadata?.webCommandMetadata?.url === '/channel/UC-lHJZR3Gqxm24_Vd_AJ5Yw') ?? false;\n  });\n}\n\nget has_videos(): boolean {\n  return this.memo.getType('has_videos', () => {\n    return this.page.contents?.twoColumnBrowseResultsRenderer?.tabs?.some((tab) => tab.tabRenderer?.endpoint?.commandMetadata?.webCommandMetadata?.url?.includes('/videos')) ?? false;\n  });\n}\n\n// ... other feature check methods\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistAddToOption Class Properties - TypeScript\nDESCRIPTION: Class definition showing the properties of PlaylistAddToOption including navigation endpoints, playlist metadata, and privacy settings. The class extends YTNode and handles playlist-related operations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistAddToOption.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistAddToOption extends YTNode {\n  static type = 'PlaylistAddToOption';\n  \n  add_to_playlist_service_endpoint: NavigationEndpoint;\n  contains_selected_videos: \"ALL\" | \"NONE\";\n  playlist_id: string;\n  privacy: string;\n  privacy_icon: PrivacyIcon;\n  remove_from_playlist_service_endpoint: NavigationEndpoint;\n  title: Text;\n  \n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OAuth2 Tokens in TypeScript\nDESCRIPTION: Method to initialize OAuth2 tokens. It can optionally take existing tokens as a parameter. This method sets up the OAuth2 instance with the provided or cached tokens.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/OAuth2.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninit(tokens?: OAuth2Tokens): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Streaming Information in TypeScript\nDESCRIPTION: Method to get cleaned up representation of adaptive formats with optional URL transformer and format filter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/VideoInfo.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetStreamingInfo(url_transformer?: URLTransformer, format_filter?: FormatFilter): StreamingInfo\n```\n\n----------------------------------------\n\nTITLE: ApplyFilter Method Implementation - TypeScript\nDESCRIPTION: Method to apply filtering to the home feed content based on a target filter parameter. Takes either a string or ChipCloudChip object as filter criteria.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/HomeFeed.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\napplyFilter(target_filter: string | ChipCloudChip): Promise<HomeFeed>\n```\n\n----------------------------------------\n\nTITLE: Transforming Raw InnerTube Response in JavaScript\nDESCRIPTION: This snippet illustrates the transformation of a raw InnerTube response into a cleaner, structured format using the YouTube.js parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/parser/README.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// Raw InnerTube Response:\n{\n  sidebar: {\n    playlistSidebarRenderer: {\n      items: [\n        {\n          playlistSidebarPrimaryInfoRenderer: {\n            title: {\n              simpleText: '..'\n            },\n            description: {\n              runs: [\n                {\n                  text: '..'\n                },\n                //....\n              ]\n            },\n            stats: [\n              {\n                simpleText: '..'\n              },\n              {\n                runs: [\n                  {\n                    text: '..'\n                  }\n                ]\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n}\n\n// Clean Parsed Response:\n{\n  sidebar: {\n    type: 'PlaylistSidebar',\n    contents: [\n      {\n        type: 'PlaylistSidebarPrimaryInfo',\n        title: { text: '..', runs: [ { text: '..' } ] },\n        description: { text: '..', runs: [ { text: '..' } ] },\n        stats: [\n          {\n            text: '..',\n            runs: [\n              {\n                text: '..'\n              }\n            ]\n          },\n          {\n            text: '..',\n            runs: [\n              {\n                text: '..'\n              }\n            ]\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YouTube API and Service URLs in TypeScript\nDESCRIPTION: This code snippet defines a constant object URLS containing various URL definitions for YouTube API endpoints, base URLs, and specific service URLs for different environments. It includes URLs for production, staging, testing, and other specialized services.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Constants/variables/URLS.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst URLS: object = {\n  API: {\n    BASE: 'https://youtubei.googleapis.com',\n    CAMI: 'http://cami-youtubei.sandbox.googleapis.com/youtubei/',\n    PRODUCTION_1: 'https://www.youtube.com/youtubei/',\n    PRODUCTION_2: 'https://youtubei.googleapis.com/youtubei/',\n    RELEASE: 'https://release-youtubei.sandbox.googleapis.com/youtubei/',\n    STAGING: 'https://green-youtubei.sandbox.googleapis.com/youtubei/',\n    TEST: 'https://test-youtubei.sandbox.googleapis.com/youtubei/',\n    UYTFE: 'https://uytfe.sandbox.google.com/youtubei/'\n  },\n  GOOGLE_SEARCH_BASE: 'https://www.google.com/',\n  YT_BASE: 'https://www.youtube.com',\n  YT_MUSIC_BASE: 'https://music.youtube.com',\n  YT_SUGGESTIONS: 'https://suggestqueries-clients6.youtube.com',\n  YT_UPLOAD: 'https://upload.youtube.com/'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyChannelNotificationPreferenceEndpoint Class in TypeScript\nDESCRIPTION: This code snippet defines the ModifyChannelNotificationPreferenceEndpoint class, extending YTNode and implementing IEndpoint. It includes a constructor, properties, and methods for handling channel notification preference modifications.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ModifyChannelNotificationPreferenceEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ModifyChannelNotificationPreferenceEndpoint extends YTNode implements IEndpoint<ModifyChannelNotificationPreferenceRequest> {\n  static type = 'ModifyChannelNotificationPreferenceEndpoint';\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  getApiPath(): string {\n    // Implementation not shown\n  }\n\n  buildRequest(): ModifyChannelNotificationPreferenceRequest {\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoInfoCardContent Class in TypeScript\nDESCRIPTION: This code defines a VideoInfoCardContent class that extends YTNode. It represents video information displayed in info cards with properties like title, channel name, view count, thumbnails, duration, and navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoInfoCardContent.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'VideoInfoCardContent';\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Headers Constants in TypeScript\nDESCRIPTION: Defines a constant object containing HTTP headers used for YouTube streaming operations. Includes accept header for all content types, DNT (Do Not Track) setting, and YouTube-specific origin and referer headers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Constants/variables/STREAM_HEADERS.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst STREAM_HEADERS: object = {\n  accept: '*/*',\n  DNT: '?1',\n  origin: 'https://www.youtube.com',\n  referer: 'https://www.youtube.com'\n}\n```\n\n----------------------------------------\n\nTITLE: FormFooterView Class Definition in TypeScript\nDESCRIPTION: The FormFooterView class extends YTNode and represents a form footer component in YouTube's interface. It includes properties for panel_footer, form_id, and container_type, along with inherited methods from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FormFooterView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass FormFooterView extends YTNode {\n  static type = 'FormFooterView';\n\n  panel_footer: null | PanelFooterView;\n  form_id: string;\n  container_type: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.panel_footer = YTNodeParser.parseItem(data.panelFooter, PanelFooterView);\n    this.form_id = data.formId;\n    this.container_type = data.containerType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Grid Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the Grid class that processes raw node data to initialize grid properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Grid.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): Grid {\n  super();\n  this.items = new ObservedArray(data.items?.map((item) => Parser.parseItem(item)) || []);\n  this.is_collapsible = data.isCollapsible;\n  this.visible_row_count = data.visibleRowCount;\n  this.target_id = data.targetId;\n  this.continuation = data.continuation || null;\n\n  if (data.header) {\n    this.header = Parser.parseItem(data.header);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Declaration for String Extraction\nDESCRIPTION: Function signature that takes a data string and two delimiter strings (start and end), returning either the extracted string between them or undefined. Part of the Utils module in the youtubei.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/getStringBetweenStrings.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetStringBetweenStrings(data: string, start_string: string, end_string: string): string | undefined\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateViewershipAction Class in TypeScript\nDESCRIPTION: This code defines the UpdateViewershipAction class which extends the YTNode class. It captures various properties related to livestream viewership including view count, is_live status, and different text representations of the view count.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateViewershipAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'UpdateViewershipAction'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Additional YouTube Comments in TypeScript\nDESCRIPTION: Method to retrieve the next batch of comments. It returns a Promise resolving to a Comments object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Comments.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<Comments>\n```\n\n----------------------------------------\n\nTITLE: Creating YouTube Playlist in TypeScript\nDESCRIPTION: Method to create a new YouTube playlist with a title and optional initial video IDs. Returns a promise with the playlist creation result.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/PlaylistManager.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncreate(title: string, video_ids: string[]): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: Defining PageIntroduction Class in TypeScript\nDESCRIPTION: This code defines the PageIntroduction class which extends YTNode. It includes properties for header text, body text, page title, and header icon type. The constructor takes a RawNode data parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PageIntroduction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PageIntroduction extends YTNode {\n  static type = 'PageIntroduction';\n\n  header_text: string;\n  body_text: string;\n  page_title: string;\n  header_icon_type: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details not provided in the snippet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube Comments Page Data in TypeScript\nDESCRIPTION: Getter method that returns the INextResponse object representing the current page of comments.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Comments.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nget page(): INextResponse\n```\n\n----------------------------------------\n\nTITLE: Finding Shelf by Title in TypeScript\nDESCRIPTION: This method finds a shelf by its title. It returns either undefined or a ReelShelf, RichShelf, or Shelf object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HashtagFeed.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Signing Out and Managing Credentials in YouTube.js\nDESCRIPTION: Code snippet demonstrating how to sign out of a YouTube.js session and revoke credentials. It also shows how to delete cached credentials without signing out of the current session.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/auth/README.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait yt.session.signOut();\n\n// if you don't want to sign out of the current session\n// and only want to delete the cached credentials, use:\nawait yt.session.oauth.removeCache();\n```\n\n----------------------------------------\n\nTITLE: Defining CommentsHeader Class in TypeScript\nDESCRIPTION: Class definition for CommentsHeader which extends YTNode. This class represents the header section of YouTube comments and includes properties for title, count, sort options, and custom emojis.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CommentsHeader'\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to LiveChat in TypeScript\nDESCRIPTION: Method to apply a filter to the live chat. It takes a filter parameter of type 'TOP_CHAT' or 'LIVE_CHAT'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\napplyFilter(filter: \"TOP_CHAT\" | \"LIVE_CHAT\"): void\n```\n\n----------------------------------------\n\nTITLE: Generating DASH Manifest in TypeScript (YouTube.js MediaInfo Mixin)\nDESCRIPTION: The toDash() method generates a DASH manifest from streaming data. It accepts optional parameters for URL transformation, format filtering, and additional options. The method returns a Promise that resolves to a string containing the DASH manifest.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/VideoInfo.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoDash(url_transformer?: URLTransformer, format_filter?: FormatFilter, options?: DashOptions = ...): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Sending Message in LiveChat\nDESCRIPTION: Sends a message in the live chat. It takes a string parameter for the message text and returns a Promise resolving to an ObservedArray of RunAttestationCommand or AddChatItemAction.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nsendMessage(text: string): Promise<ObservedArray<RunAttestationCommand | AddChatItemAction>>\n```\n\n----------------------------------------\n\nTITLE: Execute Method Implementation for API Response\nDESCRIPTION: Overloaded execute method for raw API responses. Takes an endpoint and optional arguments, returns an ApiResponse promise.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Actions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexecute<T extends string>(endpoint: T, args?: { parse?: false, protobuf?: true, serialized_data?: any, skip_auth_check?: boolean }): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Setting Notification Preferences for a YouTube Channel in TypeScript\nDESCRIPTION: Method to change notification preferences for a given channel. It takes the channel ID and notification type as parameters and returns a Promise with the API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsetNotificationPreferences(channel_id: string, type: \"PERSONALIZED\" | \"ALL\" | \"NONE\"): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Class Definition for UpdateToggleButtonTextAction in TypeScript\nDESCRIPTION: Declaration of the UpdateToggleButtonTextAction class that extends YTNode. This class manages toggle button text states with properties for default and toggled text values, as well as button identification.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateToggleButtonTextAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'UpdateToggleButtonTextAction'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault_text: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoggled_text: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nbutton_id: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode) { super(data); }\n```\n\n----------------------------------------\n\nTITLE: Stats Method Implementation\nDESCRIPTION: Method for making calls to the playback tracking API. Takes a URL, client information, and parameters, returns a Response promise.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Actions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstats(url: string, client: { client_name: string, client_version: string }, params: any): Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Playlists in TypeScript\nDESCRIPTION: Method to retrieve playlists related to the current one. Returns a Promise resolving to a MusicCarouselShelf containing related playlist information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Playlist.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRelated(): Promise<MusicCarouselShelf>\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'contents' Property for RichShelf in TypeScript\nDESCRIPTION: Declares the `contents` property for the `RichShelf` class. It holds an `ObservedArray` containing instances of `YTNode`, representing the items within the shelf.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Adding Runtime Parser in TypeScript\nDESCRIPTION: Function signature for dynamically adding a parser to the YouTube.js framework. Takes a classname string and a ParserConstructor that extends YTNode, and returns void.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/addRuntimeParser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naddRuntimeParser(classname: string, ParserConstructor: YTNodeConstructor<YTNode>): void\n```\n\n----------------------------------------\n\nTITLE: VideoOwner Class Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the VideoOwner class that extends YTNode. It initializes a new VideoOwner instance with data from YouTube's API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoOwner.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew VideoOwner(`data`): [`VideoOwner`](VideoOwner.md)\n```\n\n----------------------------------------\n\nTITLE: Defining parseActions Function in TypeScript\nDESCRIPTION: This snippet defines the parseActions function, which takes a RawData parameter and returns a SuperParsedResult containing YTNode objects. The function is defined in the parser.ts file of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseActions.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction parseActions(data: RawData): SuperParsedResult<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Selecting Media Format in TypeScript\nDESCRIPTION: Method to select the best matching format based on provided options. Inherits from MediaInfo class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/VideoInfo.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nchooseFormat(options: FormatOptions): Format\n```\n\n----------------------------------------\n\nTITLE: Defining PerformCommentActionEndpoint Class in TypeScript\nDESCRIPTION: Defines the PerformCommentActionEndpoint class with constructor, properties, and methods for handling comment actions. It extends YTNode and implements IEndpoint interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PerformCommentActionEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PerformCommentActionEndpoint extends YTNode implements IEndpoint<PerformCommentActionRequest> {\n  static type = 'PerformCommentActionEndpoint';\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  getApiPath(): string {\n    return '/youtubei/v1/comment/perform_comment_action';\n  }\n\n  buildRequest(): PerformCommentActionRequest {\n    return {\n      client: 'ANDROID',\n      actions: []\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring YTNode Properties in TypeScript\nDESCRIPTION: Declaration of readonly properties for the YTNode class, including an instance property 'type' and a static property 'type'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/YTNode.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string;\nstatic readonly type: string = 'YTNode';\n```\n\n----------------------------------------\n\nTITLE: Implementing getAllSongs Method in Artist Class\nDESCRIPTION: Implements the getAllSongs method, which returns a Promise that resolves to either undefined or a MusicPlaylistShelf object containing all songs for the artist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Artist.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetAllSongs(): Promise<undefined | MusicPlaylistShelf>\n```\n\n----------------------------------------\n\nTITLE: Type Casting YTNodes in TypeScript\nDESCRIPTION: Demonstrates type casting techniques for YouTube nodes including single and multiple type casting, with type safety checks.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/parser/README.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst results = node.as(TwoColumnSearchResults);\n\nif (node.is(TwoColumnSearchResults)) {\n  const results = node;\n}\n\nconst results = node.as(TwoColumnSearchResults, VideoList);\n\nif (node.is(TwoColumnSearchResults, VideoList)) {\n  const results = node;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data in TypeScript\nDESCRIPTION: Method to retrieve continuation data from a YouTube feed. Returns a Promise that resolves to either undefined or an IBrowseResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ChannelListContinuation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: LiveChatParticipant Class Definition in TypeScript\nDESCRIPTION: Class definition for LiveChatParticipant that extends YTNode. Contains properties for participant details including name, photo, and badges. Includes constructor and inherited methods for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatParticipant.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatParticipant extends YTNode {\n  static type = 'LiveChatParticipant';\n  name: Text;\n  photo: Thumbnail[];\n  badges: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Handling for LiveChat in TypeScript\nDESCRIPTION: Methods for adding event listeners to the LiveChat instance. Supports events such as 'start', 'chat-update', 'metadata-update', 'error', and 'end'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\non(type: \"start\" | \"chat-update\" | \"metadata-update\" | \"error\" | \"end\", listener: Function): void\n\nonce(type: \"start\" | \"chat-update\" | \"metadata-update\" | \"error\" | \"end\", listener: Function): void\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatMembershipItem Class in TypeScript\nDESCRIPTION: Class definition for LiveChatMembershipItem that extends YTNode. It includes properties for handling membership messages in YouTube live chat with timestamps, author information, messages and menu endpoints.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatMembershipItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatMembershipItem extends YTNode {\n  static type = 'LiveChatMembershipItem';\n  id: string;\n  timestamp: number;\n  timestamp_usec: string;\n  timestamp_text?: Text;\n  header_primary_text?: Text;\n  header_subtext: Text;\n  message?: Text;\n  author: Author;\n  menu_endpoint: NavigationEndpoint;\n  context_menu_accessibility_label: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building the SearchRequest Object from SearchEndpoint (TypeScript)\nDESCRIPTION: Implements the buildRequest() method to produce a SearchRequest object, preparing the payload for a YouTube API search call in a type-safe manner. Dependencies: SearchRequest type, and IEndpoint interface. No input parameters; Output: a SearchRequest object representing the API request. This supports safe construction of API requests and is invoked in client code for search operations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRequest(): SearchRequest\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Class from Key Info in YouTube.js\nDESCRIPTION: This function generates a TypeScript class based on provided class name and key information. It takes 'classname' as a string and 'key_info' of type KeyInfo as parameters, and returns a string containing the generated TypeScript class file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/generateTypescriptClass.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngenerateTypescriptClass(classname: string, key_info: KeyInfo): string\n```\n\n----------------------------------------\n\nTITLE: SubscribeButton Class Definition in TypeScript\nDESCRIPTION: This code shows the class definition for the SubscribeButton component in YouTube.js. It extends the YTNode base class and implements various properties related to YouTube's subscription functionality like button text, subscription state, channel ID, and associated endpoints.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SubscribeButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'SubscribeButton'\n```\n\n----------------------------------------\n\nTITLE: Getting Video Info - TypeScript\nDESCRIPTION: Method to retrieve streaming data for a video with formatting options.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Innertube.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetStreamingData(video_id: string, options: FormatOptions = {}): Promise<Format>\n```\n\n----------------------------------------\n\nTITLE: Constructor Definition for Actions Class\nDESCRIPTION: Constructor that initializes an Actions instance with a session parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Actions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Actions(session): Actions\n```\n\n----------------------------------------\n\nTITLE: Defining AddToPlaylist Class in TypeScript\nDESCRIPTION: This code defines the AddToPlaylist class, which extends YTNode. It includes properties for actions and playlists, and a constructor that takes RawNode data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddToPlaylist.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AddToPlaylist extends YTNode {\n  static type = 'AddToPlaylist';\n\n  actions: ObservedArray<Button | MenuTitle>;\n  playlists: ObservedArray<PlaylistAddToOption>;\n\n  constructor(data: RawNode) {\n    super();\n    this.actions = observe(parser.parseArray(data.actions, [ Button, MenuTitle ]));\n    this.playlists = observe(parser.parseArray(data.playlists, PlaylistAddToOption));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decompressing LZW-Compressed Data in JavaScript\nDESCRIPTION: The decompress function implements the LZW decompression algorithm. It takes LZW-compressed data and returns the original uncompressed data. This function is used to restore compressed data to its original form in the youtubei.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/LZW/README.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ndecompress()\n```\n\n----------------------------------------\n\nTITLE: Defining PanelFooterView Class in TypeScript\nDESCRIPTION: Defines the PanelFooterView class extending YTNode. It includes properties for primary and secondary buttons (ButtonView type), a boolean flag to hide dividers, and a constructor that takes RawNode data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PanelFooterView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PanelFooterView extends YTNode {\n  static type = 'PanelFooterView';\n\n  primary_button: null | ButtonView;\n  secondary_button: null | ButtonView;\n  should_hide_divider: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    this.primary_button = Reflect.has(data, 'primaryButton') ? new ButtonView(data.primaryButton) : null;\n    this.secondary_button = Reflect.has(data, 'secondaryButton') ? new ButtonView(data.secondaryButton) : null;\n    this.should_hide_divider = data.shouldHideDivider;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Storing Data in UniversalCache\nDESCRIPTION: Method for storing data in the cache. Takes a string key and an ArrayBuffer value to cache. This method implements the set method from the ICache interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/UniversalCache.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nset(key, value): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatSponsorshipsGiftRedemptionAnnouncement Class in TypeScript\nDESCRIPTION: This code snippet defines the LiveChatSponsorshipsGiftRedemptionAnnouncement class, which extends YTNode. It includes properties for author, message, timestamp, and other relevant information for a gift redemption announcement in a live chat.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatSponsorshipsGiftRedemptionAnnouncement.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatSponsorshipsGiftRedemptionAnnouncement extends YTNode {\n  static type = 'LiveChatSponsorshipsGiftRedemptionAnnouncement';\n\n  id: string;\n  timestamp_usec: string;\n  timestamp_text: Text;\n  author: Author;\n  message: Text;\n  menu_endpoint: NavigationEndpoint;\n  context_menu_accessibility_label: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data in YouTube Channel\nDESCRIPTION: This method retrieves continuation data for the channel feed. It returns a Promise that resolves to either undefined or an IBrowseResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Videos from HomeFeed in TypeScript\nDESCRIPTION: This getter method returns an ObservedArray of various video types from the home feed. It's inherited from the FilterableFeed class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget videos(): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Defining ClipCreationTextInput Class in TypeScript\nDESCRIPTION: This code defines the ClipCreationTextInput class, which extends YTNode. It includes properties for placeholder text and maximum character limit, and a constructor that initializes these properties from raw data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipCreationTextInput.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClipCreationTextInput extends YTNode {\n  static type = 'ClipCreationTextInput';\n\n  placeholder_text: Text;\n  max_character_limit: number;\n\n  constructor(data: RawNode) {\n    super();\n    this.placeholder_text = new Text(data.placeholderText);\n    this.max_character_limit = data.maxCharacterLimit;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Authentication Token from SID in TypeScript\nDESCRIPTION: TypeScript function declaration for generateSidAuth that takes a session ID (SID) cookie value and returns a Promise resolving to an authentication token string. This utility function is used for YouTube API authentication.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/generateSidAuth.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateSidAuth(sid: string): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining YouTube Client Constants in TypeScript\nDESCRIPTION: Declares a constant object CLIENTS with nested objects for various YouTube client types. Each client object contains properties such as NAME, VERSION, USER_AGENT, and other client-specific details. This constant is likely used for identifying and interacting with different YouTube client types in the application.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Constants/variables/CLIENTS.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst CLIENTS: object = {\n  ANDROID: {\n    NAME: 'ANDROID',\n    SDK_VERSION: 33,\n    USER_AGENT: 'com.google.android.youtube/19.35.36(Linux; U; Android 13; en_US; SM-S908E Build/TP1A.220624.014) gzip',\n    VERSION: '19.35.36'\n  },\n  IOS: {\n    DEVICE_MODEL: 'iPhone10,6',\n    NAME: 'iOS',\n    USER_AGENT: 'com.google.ios.youtube/18.06.35 (iPhone; CPU iPhone OS 14_4 like Mac OS X; en_US)',\n    VERSION: '18.06.35'\n  },\n  MWEB: {\n    API_VERSION: 'v1',\n    NAME: 'MWEB',\n    VERSION: '2.20241205.01.00'\n  },\n  TV: {\n    NAME: 'TVHTML5',\n    USER_AGENT: 'Mozilla/5.0 (ChromiumStylePlatform) Cobalt/Version',\n    VERSION: '7.20241016.15.00'\n  },\n  TV_EMBEDDED: {\n    NAME: 'TVHTML5_SIMPLY_EMBEDDED_PLAYER',\n    VERSION: '2.0'\n  },\n  WEB: {\n    API_KEY: 'AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8',\n    API_VERSION: 'v1',\n    NAME: 'WEB',\n    STATIC_VISITOR_ID: '6zpwvWUNAco',\n    SUGG_EXP_ID: 'ytzpb5_e2,ytpo.bo.lqp.elu=1,ytpo.bo.lqp.ecsc=1,ytpo.bo.lqp.mcsc=3,ytpo.bo.lqp.mec=1,ytpo.bo.lqp.rw=0.8,ytpo.bo.lqp.fw=0.2,ytpo.bo.lqp.szp=1,ytpo.bo.lqp.mz=3,ytpo.bo.lqp.al=en_us,ytpo.bo.lqp.zrm=1,ytpo.bo.lqp.er=1,ytpo.bo.ro.erl=1,ytpo.bo.ro.mlus=3,ytpo.bo.ro.erls=3,ytpo.bo.qfo.mlus=3,ytzprp.ppp.e=1,ytzprp.ppp.st=772,ytzprp.ppp.p=5',\n    VERSION: '2.20241121.01.00'\n  },\n  WEB_CREATOR: {\n    API_KEY: 'AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8',\n    API_VERSION: 'v1',\n    NAME: 'WEB_CREATOR',\n    STATIC_VISITOR_ID: '6zpwvWUNAco',\n    VERSION: '1.20240918.03.00'\n  },\n  WEB_EMBEDDED: {\n    API_KEY: 'AIzaSyAO_FJ2SlqU8Q4STEHLGCilw_Y9_11qcW8',\n    API_VERSION: 'v1',\n    NAME: 'WEB_EMBEDDED_PLAYER',\n    STATIC_VISITOR_ID: '6zpwvWUNAco',\n    VERSION: '2.20240111.09.00'\n  },\n  WEB_KIDS: {\n    NAME: 'WEB_KIDS',\n    VERSION: '2.20230111.00.00'\n  },\n  YTMUSIC: {\n    NAME: 'WEB_REMIX',\n    VERSION: '1.20211213.00.00'\n  },\n  YTMUSIC_ANDROID: {\n    NAME: 'ANDROID_MUSIC',\n    VERSION: '5.34.51'\n  },\n  YTSTUDIO_ANDROID: {\n    NAME: 'ANDROID_CREATOR',\n    VERSION: '22.43.101'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Playlists from Memo in TypeScript\nDESCRIPTION: This static method gets all playlists on a given page via memo. It returns an ObservedArray of GridPlaylist, LockupView, or Playlist objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HashtagFeed.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining RichGrid Class - TypeScript\nDESCRIPTION: Implements the RichGrid class as an extension of the YTNode base class, providing properties for contents as an ObservedArray of YTNode instances, an optional target_id string, and a header of YTNode type. There are no external modules required beyond the base YTNode and associated type definitions. This class is intended for representing grid-like UI layouts and integrates with YouTube.js's node parsing framework.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichGrid.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass RichGrid extends YTNode {\n  /**\n   * @param data RawNode instance with node data\n   */\n  constructor(data: RawNode) {\n    super();\n    // Implementation goes here\n  }\n\n  /**\n   * contents: ObservedArray<YTNode>\n   */\n  contents: ObservedArray<YTNode>;\n\n  /**\n   * header: YTNode\n   */\n  header: YTNode;\n\n  /**\n   * target_id?: string\n   */\n  target_id?: string;\n\n  /**\n   * static type: string = 'RichGrid'\n   */\n  static type: string = 'RichGrid';\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Array Types in TypeScript\nDESCRIPTION: Demonstrates usage of ObservedArray to filter and access specific types of YouTube nodes from a feed array.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/parser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst feed = new ObservedArray<YTNode>([...feed.contents]);\n\nconst videos = feed.filterType(GridVideo);\n\nconst firstVideo = feed.firstOfType(GridVideo);\n\nconst allVideos = feed.as(GridVideo);\n```\n\n----------------------------------------\n\nTITLE: Translating YouTube Comments in TypeScript\nDESCRIPTION: Method to translate text using YouTube's comment translation feature. It takes the text, target language, and optional arguments as parameters and returns a Promise with the translation results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntranslate(text: string, target_language: string, args: { comment_id?: string, video_id?: string } = {}): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: Fetching Search Suggestions in TypeScript\nDESCRIPTION: Method to get search suggestions based on user input.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ngetSearchSuggestions(input: string): Promise<ObservedArray<SearchSuggestionsSection>>\n```\n\n----------------------------------------\n\nTITLE: Applying Filters to Channel Content in TypeScript\nDESCRIPTION: These methods allow applying various filters to the channel content, including content type filters, sort filters, and general filters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\napplyFilter(filter: string | ChipCloudChip): Promise<FilteredChannelList>\napplySort(sort: string): Promise<Channel>\napplyContentTypeFilter(content_type_filter: string): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Defining the ReelShelf Class with Properties and Inheritance - TypeScript\nDESCRIPTION: This TypeScript class defines ReelShelf as an extension of YTNode, representing a shelf of YouTube reels in the parser system. The class includes strong-typed properties like items (an ObservedArray of YTNode), title (Text), endpoint (optional NavigationEndpoint), and static/readonly type definitions. Provides standard functionality for node casting, type checking, and property assertion, and is used within the YouTube.js extensible node parser. No explicit dependencies outside the type system except for referenced types and classes from the broader codebase.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * ReelShelf node definition for YouTube.js API (TypeScript)\n * Based on documentation references and inheritance structure.\n */\n\nimport { YTNode } from \"../../Helpers/classes/YTNode\";\nimport { RawNode } from \"../../APIResponseTypes/type-aliases/RawNode\";\nimport { ObservedArray } from \"../../Helpers/type-aliases/ObservedArray\";\nimport { NavigationEndpoint } from \"./NavigationEndpoint\";\nimport { Text } from \"../../Misc/classes/Text\";\n\nexport class ReelShelf extends YTNode {\n  static type: string = 'ReelShelf';\n  readonly type: string;\n  title: Text;\n  items: ObservedArray<YTNode>;\n  endpoint?: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    // initialization logic assigning properties from data\n  }\n\n  get contents(): ObservedArray<YTNode> {\n    return this.items;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Verifying Node Type with is Method - TypeScript\nDESCRIPTION: The is<T, K>() method is a runtime type checker for YTNode-based classes, enabling conditional logic by verifying whether a node instance matches any provided types. It utilizes TypeScript's generic constraints and expects a variadic list of constructors; it returns true if the type matches, false otherwise. It is dependent on proper type registration with constructors and runtime type analysis.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerOverlay.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Check if the node is of the given type.\n */\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // returns true if instance matches one of the provided types\n}\n```\n\n----------------------------------------\n\nTITLE: Extending YTNode with SearchHeader Definition - TypeScript\nDESCRIPTION: Defines the SearchHeader class that models a YouTube search result header by extending the generic YTNode parser node. The class constructor takes a RawNode from API response data and exposes properties chip_bar and search_filter_button, which represent UI elements if available. This class relies on other parsed node types like ChipCloud and Button, expects integration in the YouTube.js parsing hierarchy, and provides static typing and runtime type-safe methods from YTNode, including property access and type casting. Inputs are API response objects; outputs are structured parser nodes usable in further processing or UI rendering.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/parser/classes/SearchHeader.ts\nimport YTNode from '../../Helpers/classes/YTNode';\nimport ChipCloud from './ChipCloud';\nimport Button from './Button';\nimport type { RawNode } from '../../APIResponseTypes/type-aliases/RawNode';\n\nclass SearchHeader extends YTNode {\n  static type = 'SearchHeader';\n\n  chip_bar: ChipCloud | null;\n  search_filter_button: Button | null;\n\n  constructor(data: RawNode) {\n    super();\n    // Parse chip_bar and search_filter_button from raw data\n    this.chip_bar = data.chipBar ? new ChipCloud(data.chipBar) : null;\n    this.search_filter_button = data.searchFilterButton ? new Button(data.searchFilterButton) : null;\n  }\n}\n\nexport default SearchHeader;\n\n```\n\n----------------------------------------\n\nTITLE: Updating Parser Map in Bash\nDESCRIPTION: Command to update the parser map after adding a new renderer parser. This step is necessary to incorporate the new renderer into the YouTube.js parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/updating-the-parser.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm run build:parser-map\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelVideoPlayer Class in TypeScript\nDESCRIPTION: This code defines the ChannelVideoPlayer class, which extends YTNode. It includes properties for video information and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelVideoPlayer.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ChannelVideoPlayer extends YTNode {\n  static type = 'ChannelVideoPlayer';\n\n  id: string;\n  title: Text;\n  description: Text;\n  view_count: Text;\n  published_time: Text;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Inference Function Definition in TypeScript\nDESCRIPTION: A function that infers the type of a key based on its corresponding value. Takes a string key and an unknown value as parameters and returns an InferenceType.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/inferType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninferType(key: string, value: unknown): InferenceType\n```\n\n----------------------------------------\n\nTITLE: Converting Base64 to Uint8Array in TypeScript\nDESCRIPTION: Function signature for converting a base64 encoded string to a Uint8Array. Takes a base64 string parameter and returns a Uint8Array. Located in Utils.ts at line 237.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/base64ToU8.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nbase64ToU8(base64: string): Uint8Array\n```\n\n----------------------------------------\n\nTITLE: Polling for OAuth2 Access Token in TypeScript\nDESCRIPTION: Method to poll for an access token using the device and user code. This is part of the device code flow authentication process.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/OAuth2.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\npollForAccessToken(device_and_user_code: DeviceAndUserCode): void\n```\n\n----------------------------------------\n\nTITLE: HorizontalList Contents Accessor Implementation\nDESCRIPTION: Implements a getter method that provides access to the items in the horizontal list. This accessor returns the items as an ObservedArray of YTNode objects for compatibility with other components.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HorizontalList.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget contents() {\n  return this.items;\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Items in ItemMenu by Button in TypeScript\nDESCRIPTION: An overloaded version of selectItem that takes a Button object as a parameter, returning a Promise that resolves to an IParsedResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ItemMenu.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nselectItem(button: Button): Promise<IParsedResponse>\n```\n\n----------------------------------------\n\nTITLE: Implementing Contents Accessor in VerticalList Class\nDESCRIPTION: Getter method that provides access to the contents of the vertical list, returning an ObservedArray of YTNode objects. This serves as an alias for the items property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalList.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nget contents(): ObservedArray<YTNode> {\n  return this.items;\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Related Content for YouTube Music Track\nDESCRIPTION: This method retrieves related content for the current track. It returns a promise resolving to an ObservedArray of MusicCarouselShelf or MusicDescriptionShelf objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/TrackInfo.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetRelated(): Promise<ObservedArray<MusicCarouselShelf | MusicDescriptionShelf>>\n```\n\n----------------------------------------\n\nTITLE: Defining CommentDialog Class Properties in TypeScript\nDESCRIPTION: Declaration of CommentDialog class properties including author_thumbnail, editable_text, cancel_button, submit_button, placeholder, emoji_button, and emoji_picker. These properties represent the different UI components of a YouTube comment dialog.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentDialog.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\neditable_text: Text\nauthor_thumbnail: Thumbnail[]\ncancel_button: null | Button\nsubmit_button: null | Button\nplaceholder: Text\nemoji_button: null | Button\nemoji_picker: null | EmojiPicker\n```\n\n----------------------------------------\n\nTITLE: Defining ShowCustomThumbnail Node - TypeScript Class Extension\nDESCRIPTION: Implements the ShowCustomThumbnail class as an extension of the YTNode base class, representing a parser node for handling custom thumbnail arrays in YouTube API responses. Construction of an instance requires a RawNode input, and the node exposes a typed thumbnail property alongside an overwritable static type string. Dependencies include the YTNode and Thumbnail classes, with injection of API response nodes. This pattern enables polymorphic treatment of various node types within the parser framework, with the ability to inherit and override base properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowCustomThumbnail.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ShowCustomThumbnail extends YTNode {\n  static type: string = 'ShowCustomThumbnail';\n\n  thumbnail: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation for extracting thumbnails from data\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving the API Path with getApiPath() in TypeScript\nDESCRIPTION: Implements the getApiPath() method as part of the IEndpoint interface, returning the string path for YouTube’s search endpoint (e.g., '/youtubei/v1/search'). Supports API routing and request construction. Input: none. Output: string path. Called during endpoint resolution to determine correct backend API routing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetApiPath(): string\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerCaptionsTracklist Class in TypeScript\nDESCRIPTION: This code defines the PlayerCaptionsTracklist class, which extends YTNode. It includes properties for caption tracks, audio tracks, default audio track index, and translation languages. The class also includes a constructor and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerCaptionsTracklist.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PlayerCaptionsTracklist extends YTNode {\n  static type = 'PlayerCaptionsTracklist';\n\n  caption_tracks?: CaptionTrackData[];\n  audio_tracks?: object[];\n  default_audio_track_index?: number;\n  translation_languages?: object[];\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n\n  // Inherited methods: as(), hasKey(), is(), key()\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Camel Case to Snake Case in TypeScript\nDESCRIPTION: This function takes a string in camel case format and converts it to snake case. It uses a regular expression to identify capital letters and inserts an underscore before them, then converts the entire string to lowercase.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/camelToSnake.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncamelToSnake(str: string): string\n```\n\n----------------------------------------\n\nTITLE: Extending YTNode with the SharedPost Class in TypeScript\nDESCRIPTION: This snippet conceptualizes the SharedPost class extending the base YTNode to represent a shared post node within YouTube.js's parsing system. It defines a constructor that initializes the class using data conforming to the RawNode type alias, and it documents numerous strongly typed properties (such as author, content, endpoint, thumbnail, etc.). Key dependencies include YTNode base class and related typings like Author, Text, Button, and others. The class is designed to be instantiated with structured YouTube API data, and the expected output is an object providing convenient, type-safe access to shared post fields and metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharedPost.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Class: SharedPost\n\n// Extends YTNode base class.\nclass SharedPost extends YTNode {\n  static type = 'SharedPost';\n  thumbnail: Thumbnail[];\n  content: Text;\n  published: Text;\n  menu: Menu | null;\n  original_post: BackstagePost | Post | null;\n  id: string;\n  endpoint: NavigationEndpoint;\n  expand_button: Button | null;\n  author: Author;\n\n  constructor(data: RawNode) {\n    super(); // Call YTNode constructor\n    // Initialization logic ...\n  }\n\n  // Inherited methods from YTNode include:\n  // as<T, K>(...types: K): InstanceType<K[number]>\n  // hasKey<T extends string, R = any>(key: T): this is SharedPost & { [k in string]: R }\n  // is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n  // key<T extends string, R = any>(key: T): Maybe\n}\n\n// Usage example (not shown in original doc):\n// const post = new SharedPost(apiData);\n// if (post.is(SomeOtherPostType)) { ... }\n```\n\n----------------------------------------\n\nTITLE: Defining ConfirmDialog Class Properties in TypeScript\nDESCRIPTION: Definition of the ConfirmDialog class properties including title, confirm button, cancel button, and dialog messages. These properties represent the various elements of a confirmation dialog in the YouTube interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ConfirmDialog.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ConfirmDialog';\n\ntitle: Text;\nconfirm_button: null | Button;\ncancel_button: null | Button;\ndialog_messages: Text[];\n```\n\n----------------------------------------\n\nTITLE: Compressing Strings with LZW Algorithm in TypeScript\nDESCRIPTION: Implementation of the compress() function that takes a string input and returns a compressed string using the LZW compression algorithm. The function is defined in the LZW.ts utility file and is part of the youtube.js project's core functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/LZW/functions/compress.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncompress(input: string): string\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for ToggleButtonView Class in TypeScript\nDESCRIPTION: Constructor for the ToggleButtonView class that accepts a RawNode data parameter and initializes the toggle button component. It extends the YTNode base class constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ToggleButtonView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ToggleButtonView(data): ToggleButtonView\n```\n\n----------------------------------------\n\nTITLE: YTNode Method Implementation: 'key' Property Access Method\nDESCRIPTION: Method that asserts a node has the given key and returns it wrapped in a Maybe monad. This is an inherited method from the base YTNode class for safe property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactPlaylist.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n**key**\\<`T`, `R`\\>(`key`): [`Maybe`](../../Helpers/classes/Maybe.md)\n```\n\n----------------------------------------\n\nTITLE: Continuing Up Next Playlist in YouTube Music\nDESCRIPTION: This method retrieves the continuation of the up next playlist. It takes a PlaylistPanel or PlaylistPanelContinuation object as input and returns a promise resolving to a PlaylistPanelContinuation object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/TrackInfo.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetUpNextContinuation(playlistPanel: PlaylistPanelContinuation | PlaylistPanel): Promise<PlaylistPanelContinuation>\n```\n\n----------------------------------------\n\nTITLE: Selecting Media Format in TypeScript using YouTube.js\nDESCRIPTION: Function declaration for selecting the best matching format from YouTube streaming data based on provided options. Takes FormatOptions and optional IStreamingData parameters, returns a Format object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/FormatUtils/functions/chooseFormat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nchooseFormat(options: FormatOptions, streaming_data?: IStreamingData): Format\n```\n\n----------------------------------------\n\nTITLE: Get Playlists From Memo - Static TypeScript Method\nDESCRIPTION: Static method to retrieve all playlists from a given page memo. Returns an ObservedArray containing various playlist type nodes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/TabbedFeed.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: ToggleButtonView Property Definitions in TypeScript\nDESCRIPTION: Defines the properties of the ToggleButtonView class including default_button, toggled_button, is_toggling_disabled, identifier, and is_toggled properties that represent the state and behavior of a toggle button component.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ToggleButtonView.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ndefault_button: null | ButtonView\ntoggled_button: null | ButtonView\nis_toggling_disabled: boolean\nidentifier?: string\nis_toggled?: boolean\n```\n\n----------------------------------------\n\nTITLE: Player Class Constructor Definition\nDESCRIPTION: Constructor for the Player class that takes player_id, signature_timestamp, and optional signature-related parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Player.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Player(player_id: string, signature_timestamp: number, sig_sc?: string, nsig_sc?: string): Player\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to HashtagFeed in TypeScript\nDESCRIPTION: This method applies a given filter and returns a new HashtagFeed object. It takes a string or ChipCloudChip as a parameter and returns a Promise resolving to a HashtagFeed.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HashtagFeed.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napplyFilter(filter: string | ChipCloudChip): Promise<HashtagFeed>\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods for PremiereTrailerBadge\nDESCRIPTION: Inherited helper methods from YTNode including type checking (is), type casting (as), and property access (hasKey, key) functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PremiereTrailerBadge.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is PremiereTrailerBadge & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: CreatorHeart Class Definition in TypeScript\nDESCRIPTION: The CreatorHeart class represents a creator's heart interaction on a YouTube comment. It stores information like creator thumbnail, heart color, hearted status, and tooltip information. The class extends the base YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreatorHeart.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CreatorHeart extends YTNode {\n  static type = 'CreatorHeart';\n\n  creator_thumbnail: Thumbnail[];\n  heart_icon_type?: string;\n  heart_color: {\n    basic_color_palette_data: {\n      foreground_title_color: string;\n    }\n  };\n  hearted_tooltip: string;\n  is_hearted: boolean;\n  is_enabled: boolean;\n  kennedy_heart_color_string: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ButtonView Class Properties - TypeScript\nDESCRIPTION: Class properties definition including icon_name, title, accessibility_text, style, is_full_width, button_type, button_size, and on_tap navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ButtonView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nicon_name: string;\ntitle: string;\naccessibility_text: string;\nstyle: string;\nis_full_width: boolean;\nbutton_type: string;\nbutton_size: string;\non_tap: NavigationEndpoint;\n```\n\n----------------------------------------\n\nTITLE: ItemSection Class Definition in TypeScript\nDESCRIPTION: The ItemSection class extends YTNode and manages collections of YouTube interface elements. It has properties for contents, headers, target_id, and continuation information, along with inherited methods for type casting and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ItemSection.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ItemSection extends YTNode {\n  static type: string = 'ItemSection';\n  \n  header: null | ItemSectionHeader | ItemSectionTabbedHeader | CommentsHeader | SortFilterHeader | FeedFilterChipBar;\n  contents: ObservedArray<YTNode>;\n  target_id?: string;\n  continuation?: string;\n  \n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Required Polyfills and Dependencies for Youtube.js in React Native\nDESCRIPTION: Lists the necessary polyfill packages needed to make Youtube.js work in React Native, along with the required development dependencies for proper compilation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/platform/react-native.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n\"base-64\": \"^1.0.0\",\n\"event-target-polyfill\": \"^0.0.4\",\n\"react-native-mmkv\": \"^2.11.0\",\n\"react-native-url-polyfill\": \"^2.0.0\",\n\"text-encoding-polyfill\": \"^0.6.7\",\n\"web-streams-polyfill\": \"^3.3.2\"\n```\n\n----------------------------------------\n\nTITLE: Undisliking a YouTube Comment in TypeScript\nDESCRIPTION: Asynchronous method to undislike a YouTube comment. It returns a Promise that resolves to an ApiResponse. Throws an error if the Actions instance is not set or if the undislike command is not found.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nundislike(): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Getting Videos from Memo\nDESCRIPTION: Static method that extracts all videos from a given memo object. Returns an ObservedArray of various video-type objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Defining FeedNudge Class Properties in TypeScript\nDESCRIPTION: Declaration of the FeedNudge class properties including title, subtitle, endpoint, styling parameters and static type identifier. These properties describe the structure and appearance of a feed nudge component.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FeedNudge.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'FeedNudge'\n\ntitle: Text\nsubtitle: Text\nendpoint: NavigationEndpoint\napply_modernized_style: boolean\ntrim_style: string\nbackground_style: string\n```\n\n----------------------------------------\n\nTITLE: Defining the ReelPlayerOverlay Class - TypeScript\nDESCRIPTION: This snippet defines the ReelPlayerOverlay class, which extends YTNode to represent an overlay element for YouTube Reel player UI components. The class aggregates button and panel objects (e.g., info_panel, like_button, menu) and utilizes a flexible construction via a generic raw data node. It requires the YouTube.js Core Helpers (YTNode, various subcomponents), and returns an instance with type-safe access to overlay controls; expected input is a RawNode object, with various nullable component properties. Constraints include dependency on related rendered classes (Button, Menu, InfoPanelContainer, etc.) and inheritance from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerOverlay.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ReelPlayerOverlay extends YTNode {\n  static type = 'ReelPlayerOverlay';\n  info_panel: null | InfoPanelContainer;\n  like_button: null | LikeButton;\n  menu: null | Menu;\n  next_item_button: null | Button;\n  pivot_button: null | PivotButton;\n  prev_item_button: null | Button;\n  reel_player_header_supported_renderers: null | ReelPlayerHeader;\n  share_button: null | Button;\n  style: string;\n  subscribe_button_renderer: null | Button | SubscribeButton;\n  view_comments_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n    // ...construction logic mapping data fields to component properties\n  }\n\n  // Utility methods inherited from YTNode or locally defined may follow\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Mutations to CommentView in TypeScript\nDESCRIPTION: Method to apply mutations to a CommentView instance, allowing updates to comment data, toolbar state, and toolbar surface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **applyMutations**(`comment`?, `toolbar_state`?, `toolbar_surface`?): `void`\n```\n\n----------------------------------------\n\nTITLE: Validating OAuth2 Tokens in TypeScript\nDESCRIPTION: Method to validate the structure and presence of required fields in OAuth2 tokens. This ensures the tokens meet the expected format.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/OAuth2.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nvalidateTokens(tokens: OAuth2Tokens): boolean\n```\n\n----------------------------------------\n\nTITLE: Method Implementation - ContinuationCommand Class\nDESCRIPTION: Implementation of core methods including buildRequest(), getApiPath(), hasKey(), is(), and key() for handling continuation requests and type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ContinuationCommand.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuildRequest(): ContinuationRequest;\ngetApiPath(): string;\nhasKey<T extends string, R = any>(key: T): this is ContinuationCommand & { [k in string]: R };\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Asserting and Retrieving a Key Using Maybe Wrapper in TypeScript\nDESCRIPTION: The key<T, R>(key) method asserts that the current node possesses a given string key and returns its value wrapped in a Maybe class. It leverages TypeScript generics for both key and return type, with any as the fallback type parameter. Requires Maybe and YTNode from the helpers module. Accepts a string key, returns a Maybe instance containing the value, and throws if the key does not exist. The output type improves runtime safety while enabling null-safety patterns.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItem.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining ReloadContinuationItemsCommand Class in TypeScript\nDESCRIPTION: This code defines the ReloadContinuationItemsCommand class, which extends YTNode. It includes a constructor and several properties specific to handling YouTube continuation items.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/ReloadContinuationItemsCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ReloadContinuationItemsCommand extends YTNode {\n  static type = 'reloadContinuationItemsCommand';\n\n  target_id: string;\n  contents: null | ObservedArray<YTNode>;\n  slot?: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details not provided in the snippet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Tab with URL in YouTube Channel\nDESCRIPTION: This method checks if a tab with the given URL exists in the channel. It returns a boolean indicating the presence of the tab.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasTabWithURL(url: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining VideoSecondaryInfo Class in TypeScript\nDESCRIPTION: Class definition for VideoSecondaryInfo which extends YTNode. It represents the secondary information section of a YouTube video including owner info, description, subscribe button, metadata, and show more/less functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoSecondaryInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass VideoSecondaryInfo extends YTNode {\n  static type = 'VideoSecondaryInfo';\n\n  owner: null | VideoOwner;\n  description: Text;\n  subscribe_button: null | Button | SubscribeButton;\n  metadata: null | MetadataRowContainer;\n  show_more_text: Text;\n  show_less_text: Text;\n  default_expanded: string;\n  description_collapsed_lines: string;\n\n  constructor(data: RawNode) {\n    // Constructor implementation not shown in the documentation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Disliking a YouTube Video in TypeScript\nDESCRIPTION: Method to dislike a given video. It takes the video ID as a parameter and returns a Promise with the API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndislike(video_id: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Filter Application\nDESCRIPTION: Method to apply a specified filter to the search results, accepting either a string or ChipCloudChip parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Search.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\napplyFilter(target_filter: string | ChipCloudChip): Promise<Search>\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for YouTube.js v13.3.0\nDESCRIPTION: Shows the changelog entry for version 13.3.0 of YouTube.js, including new features and bug fixes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n## [13.3.0](https://github.com/LuanRT/YouTube.js/compare/v13.2.0...v13.3.0) (2025-03-25)\n\n\n### Features\n\n* **MusicImmersiveHeader:** Parse buttons and menu ([cbb2535](https://github.com/LuanRT/YouTube.js/commit/cbb2535b2492777b0045be5fcf9bece03fe4f84e))\n\n\n### Bug Fixes\n\n* **Player:** Parse global variable used by nsig/sig ([#935](https://github.com/LuanRT/YouTube.js/issues/935)) ([edfd65f](https://github.com/LuanRT/YouTube.js/commit/edfd65f5e08a9155b8c31d8127a4e309313b39de))\n```\n\n----------------------------------------\n\nTITLE: Defining MediaInfo Class Constructor in TypeScript\nDESCRIPTION: This code snippet defines the constructor for the MediaInfo class. It takes data, actions, and cpn as parameters and returns a new MediaInfo instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/MediaInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MediaInfo(data: [[`ApiResponse`, `ApiResponse?`]], actions: [`Actions`], cpn: string): [`MediaInfo`]\n```\n\n----------------------------------------\n\nTITLE: Implementing IncludingResultsFor Class in TypeScript\nDESCRIPTION: Class definition for IncludingResultsFor that extends YTNode. It handles YouTube search result corrections, including properties for corrected queries, original queries, and search refinements.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/IncludingResultsFor.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass IncludingResultsFor extends YTNode {\n  static type = 'IncludingResultsFor';\n\n  including_results_for: Text;\n  corrected_query: Text;\n  corrected_query_endpoint: NavigationEndpoint;\n  search_only_for?: Text;\n  original_query?: Text;\n  original_query_endpoint?: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building YouTube.js Project\nDESCRIPTION: Series of commands to build different components and versions of the YouTube.js project, including Protobuf, parser map, Deno, ES Module, Node, and Browser versions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Build all\nnpm run build\n\n# Protobuf\nnpm run build:proto\n\n# Parser map\nnpm run build:parser-map\n\n# Deno\nnpm run build:deno\n\n# ES Module\nnpm run build:esm\n\n# Node\nnpm run bundle:node\n\n# Browser\nnpm run bundle:browser\nnpm run bundle:browser:prod\n```\n\n----------------------------------------\n\nTITLE: Initializing TranscriptInfo Class Constructor - TypeScript\nDESCRIPTION: Constructor for the TranscriptInfo class that takes actions and response parameters to initialize a new instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/TranscriptInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew TranscriptInfo(actions: Actions, response: ApiResponse): TranscriptInfo\n```\n\n----------------------------------------\n\nTITLE: Defining PivotBarItem Class in TypeScript\nDESCRIPTION: This code defines the PivotBarItem class, which extends YTNode. It includes properties for pivot_identifier, endpoint, title, and optional accessibility_label and icon_type. The class has a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PivotBarItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PivotBarItem extends YTNode {\n  static type = 'PivotBarItem';\n\n  pivot_identifier: string;\n  endpoint: NavigationEndpoint;\n  title: Text;\n  accessibility_label?: string;\n  icon_type?: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.pivot_identifier = data.pivotIdentifier;\n    this.endpoint = new NavigationEndpoint(data.endpoint);\n    this.title = new Text(data.title);\n    this.accessibility_label = data.accessibilityLabel;\n    this.icon_type = data.iconType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: NavigationEndpoint Call Method - TypeScript\nDESCRIPTION: Method for making API calls using the navigation endpoint. Supports both parsed and unparsed responses via a generic type parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/NavigationEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ncall<T extends IParsedResponse>(actions: Actions, args: { parse: true }): Promise<T>\ncall(actions: Actions, args?: { parse?: false }): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining MusicShelfContinuation Class in TypeScript\nDESCRIPTION: This snippet defines the MusicShelfContinuation class, which extends YTNode. It includes a constructor, properties for contents and continuation, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/MusicShelfContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicShelfContinuation extends YTNode {\n  static type: 'musicShelfContinuation' = 'musicShelfContinuation';\n\n  continuation: string;\n  contents: null | ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SubscribeButton Constructor Implementation\nDESCRIPTION: The constructor for the SubscribeButton class that takes a RawNode data parameter and initializes a new SubscribeButton instance. It extends the constructor from the parent YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SubscribeButton.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew SubscribeButton(data): SubscribeButton\n```\n\n----------------------------------------\n\nTITLE: Event Listener Removal\nDESCRIPTION: Method to remove a previously registered event listener for a specific event type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/EventEmitter.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noff(type: string, listener): void\n```\n\n----------------------------------------\n\nTITLE: MenuTitle Class Definition and Constructor - TypeScript\nDESCRIPTION: Defines the MenuTitle class that extends YTNode. The constructor takes a RawNode data parameter and initializes a title property of type Text. Contains inherited methods for type checking and key assertions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MenuTitle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MenuTitle extends YTNode {\n  static type = 'MenuTitle';\n  title: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data);\n  }\n\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is MenuTitle & { [k in string]: R };\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: YTMusic Class Structure Documentation\nDESCRIPTION: Index of available classes in the YTMusic module, including functionality for Albums, Artists, Playlists, Search, Library management and other core features.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Classes\n\n- [Album](classes/Album.md)\n- [Artist](classes/Artist.md)\n- [Explore](classes/Explore.md)\n- [HomeFeed](classes/HomeFeed.md)\n- [Library](classes/Library.md)\n- [LibraryContinuation](classes/LibraryContinuation.md)\n- [Playlist](classes/Playlist.md)\n- [Recap](classes/Recap.md)\n- [Search](classes/Search.md)\n- [TrackInfo](classes/TrackInfo.md)\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Property with 'key' Method in TypeScript\nDESCRIPTION: Inherited from `YTNode`, this method asserts that the node instance has the specified property key and returns its value wrapped in a `Maybe` object (which handles potential null or undefined values). It takes the key name as a string argument. It throws an error if the key does not exist on the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveBannerForLiveChatCommand.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T, R>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Liking a Comment in YouTube.js\nDESCRIPTION: Method to like a comment. It returns a Promise that resolves to an ApiResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/CommentView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nlike(): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Live Streams from YouTube Channel\nDESCRIPTION: This method fetches live streams from the channel. It returns a Promise that resolves to a Channel object containing the live stream data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetLiveStreams(): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Implementing blockChannel Method in KidsBlocklistPickerItem Class\nDESCRIPTION: Method to block a YouTube channel in Kids mode. It returns a Promise resolving to an ApiResponse object when complete.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsBlocklistPickerItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nblockChannel(): Promise<ApiResponse> {\n  return this.actions?.execute(\n    'blockChannelEndpoint',\n    {\n      params: JSON.stringify({\n        clientActionToken: this.blocked_entity_key\n      })\n    }\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Playlist Videos in TypeScript\nDESCRIPTION: Methods for adding, removing, and moving videos within a playlist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/PlaylistManager.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\naddVideos(playlist_id: string, video_ids: string[]): Promise<object>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nremoveVideos(playlist_id: string, video_ids: string[], use_set_video_ids: boolean = false): Promise<object>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmoveVideo(playlist_id: string, moved_video_id: string, predecessor_video_id: string): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: PlaylistMetadata Class Definition in TypeScript\nDESCRIPTION: Class definition for PlaylistMetadata that extends YTNode. Contains properties for playlist title and description, along with inherited methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistMetadata extends YTNode {\n  static type = 'PlaylistMetadata';\n\n  title: string;\n  description: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = data.title;\n    this.description = data.description;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VideoDetails Class Constructor Definition\nDESCRIPTION: Constructor that initializes a new VideoDetails instance from raw node data. Takes a RawNode parameter and returns a VideoDetails instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/VideoDetails.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew VideoDetails(data: RawNode): VideoDetails\n```\n\n----------------------------------------\n\nTITLE: CommentReplyDialog Class Definition in TypeScript\nDESCRIPTION: Class declaration for CommentReplyDialog which extends YTNode. It handles the UI components of YouTube comment reply dialogs including buttons, thumbnails, and text fields.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentReplyDialog.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CommentReplyDialog'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nreply_button: null | Button\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ncancel_button: null | Button\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nauthor_thumbnail: Thumbnail[]\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nplaceholder: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nerror_message: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): CommentReplyDialog\n```\n\n----------------------------------------\n\nTITLE: LiveChatActionPanel Class Definition in TypeScript\nDESCRIPTION: Class definition for LiveChatActionPanel that extends YTNode. Contains properties for managing live chat action panels including id, contents, and target_id. Includes constructor and inherited utility methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatActionPanel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatActionPanel extends YTNode {\n  static type = 'LiveChatActionPanel';\n  id: string;\n  contents: SuperParsedResult<YTNode>;\n  target_id: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.id = data.id;\n    this.contents = parser.parseArray(data.contents);\n    this.target_id = data.targetId;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Live Status in YouTube.js Video Class\nDESCRIPTION: Accessor that determines if a video is currently live streaming by examining its badges.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nget is_live(): boolean {\n  return this.badges.some((badge) => badge.style === 'BADGE_STYLE_TYPE_LIVE_NOW');\n}\n```\n\n----------------------------------------\n\nTITLE: Checking 4K Resolution Status in YouTube.js Video Class\nDESCRIPTION: Accessor that determines if a video is available in 4K resolution by examining its badges.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nget is_4k(): boolean {\n  return this.badges.some((badge) => badge.label === '4K');\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lyrics for YouTube Music Track\nDESCRIPTION: This method fetches the lyrics for the current track. It returns a promise that resolves to either undefined or a MusicDescriptionShelf object containing the lyrics.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/TrackInfo.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetLyrics(): Promise<undefined | MusicDescriptionShelf>\n```\n\n----------------------------------------\n\nTITLE: YTNode Type Property Implementation in TypeScript\nDESCRIPTION: This snippet shows the implementation of the readonly type property inherited from the YTNode class. This property is used to identify the type of YouTube node in the parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ToggleMenuServiceItem.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string;\n```\n\n----------------------------------------\n\nTITLE: Converting Text to HTML in TypeScript\nDESCRIPTION: Method to convert the text content to HTML, returning either undefined or a string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Text.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoHTML(): undefined | string\n```\n\n----------------------------------------\n\nTITLE: Event Listener Registration\nDESCRIPTION: Method to register an event listener for a specific event type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/EventEmitter.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\non(type: string, listener): void\n```\n\n----------------------------------------\n\nTITLE: SuperParsedResult Accessor Methods Implementation\nDESCRIPTION: Getter methods for checking the state of the parsed result - whether it's null, an array, or a single node.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/SuperParsedResult.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget is_null(): boolean\nget is_array(): boolean\nget is_node(): boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing buildRequest Method in TypeScript\nDESCRIPTION: Method implementation that constructs and returns a BrowseRequest object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BrowseEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuildRequest(): BrowseRequest\n```\n\n----------------------------------------\n\nTITLE: Setting up YouTube.js Web Application Example in Browser\nDESCRIPTION: Commands to install dependencies and start the web application example for YouTube.js in browser environment.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/browser/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/browser/web\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: LikeEndpoint Request Builder\nDESCRIPTION: Method that constructs the LikeRequest object for API calls\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuildRequest(): LikeRequest\n```\n\n----------------------------------------\n\nTITLE: Type-Checking and Data-Access Methods for YTNode - YouTube.js - TypeScript\nDESCRIPTION: This snippet covers the utility methods inherited by SingleHeroImage from YTNode, such as is, as, hasKey, and key. These methods facilitate safe type assertions and data retrieval within the YouTube parser architecture. The methods are generic, leveraging TypeScript's type system for type-safe casting and property existence checks, ensuring robust and predictable access to node properties. These APIs require prior understanding of the YouTube.js node types, and their input parameters are types or property keys; outputs are cast node instances or property values, and errors are thrown if accesses are invalid.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleHeroImage.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Implementation checks if this node matches any type in types\n}\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Implementation casts this node to one of the provided types\n}\n\nhasKey<T extends string, R = any>(key: T): this is this & { [k in string]: R } {\n  // Implementation checks if key exists on this\n}\n\nkey<T extends string, R = any>(key: T): Maybe<R> {\n  // Implementation returns the value of key wrapped in a Maybe, throwing on missing keys\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InnertubeEndpoint Type Alias in TypeScript\nDESCRIPTION: Type alias that defines the possible endpoint strings for YouTube's Innertube API. It includes specific endpoint paths like '/player', '/search', '/browse', etc., while also allowing for any arbitrary string to be used.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/InnertubeEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype InnertubeEndpoint = \"/player\" | \"/search\" | \"/browse\" | \"/next\" | \"/reel\" | \"/updated_metadata\" | \"/notification/get_notification_menu\" | \"/att/get\" | string\n```\n\n----------------------------------------\n\nTITLE: BuildRequest Implementation\nDESCRIPTION: Implementation of IEndpoint interface's buildRequest method that constructs a PlaylistEditRequest\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistEditEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuildRequest(): PlaylistEditRequest\n```\n\n----------------------------------------\n\nTITLE: Generating Runtime Classes for YouTube API Parsing in TypeScript\nDESCRIPTION: This function creates a new class dynamically based on provided class name and key information. It's used for parsing YouTube API responses, extending the YTNode class. The function takes the class name, resolved key info, and a logger for error handling.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/createRuntimeClass.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ncreateRuntimeClass(classname: string, key_info: KeyInfo, logger: ParserErrorHandler): YTNodeConstructor\n```\n\n----------------------------------------\n\nTITLE: Defining HashtagFeed Class in TypeScript\nDESCRIPTION: This code snippet defines the HashtagFeed class, which extends FilterableFeed. It includes a constructor and properties for the feed's contents and header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HashtagFeed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HashtagFeed extends FilterableFeed<IBrowseResponse> {\n  header?: PageHeader | HashtagHeader;\n  contents: RichGrid;\n\n  constructor(actions: Actions, response: ApiResponse | IBrowseResponse) {\n    super(actions, response);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClientType Enumeration in TypeScript for YouTube.js\nDESCRIPTION: An enumeration that defines various client types for the YouTube API, including web, mobile, TV, and embedded platforms. Each value corresponds to a specific client identifier string used in API requests.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/enumerations/ClientType.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nenum ClientType {\n  WEB = \"WEB\",\n  MWEB = \"MWEB\",\n  KIDS = \"WEB_KIDS\",\n  MUSIC = \"WEB_REMIX\",\n  IOS = \"iOS\",\n  ANDROID = \"ANDROID\",\n  ANDROID_MUSIC = \"ANDROID_MUSIC\",\n  ANDROID_CREATOR = \"ANDROID_CREATOR\",\n  TV = \"TVHTML5\",\n  TV_EMBEDDED = \"TVHTML5_SIMPLY_EMBEDDED_PLAYER\",\n  WEB_EMBEDDED = \"WEB_EMBEDDED_PLAYER\",\n  WEB_CREATOR = \"WEB_CREATOR\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running the Deno Proxy Server for YouTube.js Browser Usage\nDESCRIPTION: Command to run the Deno-based proxy server that handles requests from the YouTube.js browser client to bypass CORS restrictions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/browser/README.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ndeno run --allow-net --allow-read examples/browser/proxy/deno.ts\n```\n\n----------------------------------------\n\nTITLE: Inherited is Method in RichListHeader (TypeScript)\nDESCRIPTION: Inherited method `is` from `YTNode`. It functions as a type guard, checking if the current node instance is of one of the specified `YTNode` subtypes (passed as constructor arguments). Returns `true` if it matches any of the provided types, `false` otherwise. Uses generics `T` (base type) and `K` (array of constructors).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: PlayerOverlay Class Properties Definition\nDESCRIPTION: Type definitions for various properties of the PlayerOverlay class including end_screen, autoplay, share_button, and other player overlay features.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerOverlay.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype = 'PlayerOverlay'\nend_screen: null | WatchNextEndScreen\nautoplay: null | PlayerOverlayAutoplay\nshare_button: null | Button\nadd_to_menu: null | Menu\nfullscreen_engagement: null | YTNode\nactions: ObservedArray<YTNode>\nbrowser_media_session: null | YTNode\ndecorated_player_bar: null | DecoratedPlayerBar\nvideo_details: null | PlayerOverlayVideoDetails\n```\n\n----------------------------------------\n\nTITLE: Playlist Class Constructor\nDESCRIPTION: Constructor for the Playlist class that takes Actions object, API response data, and parsing flag as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Playlist(actions: Actions, data: ApiResponse | IBrowseResponse, already_parsed: boolean = false): Playlist\n```\n\n----------------------------------------\n\nTITLE: LiveChatContinuation Class Definition in TypeScript\nDESCRIPTION: Class definition for LiveChatContinuation that extends YTNode. Contains properties for managing live chat data including actions, items, participants, emojis and continuation data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/LiveChatContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatContinuation extends YTNode {\n  static readonly type: \"liveChatContinuation\" = 'liveChatContinuation';\n  actions: ObservedArray<YTNode>;\n  action_panel: null | YTNode;\n  item_list: null | LiveChatItemList;\n  header: null | LiveChatHeader;\n  participants_list: null | LiveChatParticipantsList;\n  popout_message: null | Message;\n  emojis: object[];\n  continuation: Continuation;\n  viewer_name: string;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SignalServiceEndpoint Constructor in TypeScript\nDESCRIPTION: Defines the constructor for the `SignalServiceEndpoint` class. It takes raw node data (`RawNode`) as input and initializes a new instance of `SignalServiceEndpoint`. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SignalServiceEndpoint(data: RawNode): SignalServiceEndpoint\n```\n\n----------------------------------------\n\nTITLE: Defining CollageHeroImage Class in TypeScript\nDESCRIPTION: Class definition for CollageHeroImage which extends YTNode. It contains properties for different sections of the collage (left, top_right, bottom_right) and a navigation endpoint. The constructor accepts a RawNode parameter and initializes the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CollageHeroImage.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CollageHeroImage extends YTNode {\n  static type = 'CollageHeroImage';\n\n  left: Thumbnail[];\n  top_right: Thumbnail[];\n  bottom_right: Thumbnail[];\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: UpsellDialog Constructor Implementation\nDESCRIPTION: Constructor for UpsellDialog class that accepts a RawNode data parameter and initializes the class properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpsellDialog.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew UpsellDialog(data): UpsellDialog\n```\n\n----------------------------------------\n\nTITLE: Encoding Comment Action Parameters Function in TypeScript\nDESCRIPTION: Function to encode comment action parameters into YouTube's proto format.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/README.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction encodeCommentActionParams(args: CommentActionParamsArgs): string {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for ImageBannerView Class in TypeScript\nDESCRIPTION: Constructor for the ImageBannerView class that initializes an instance with data from a RawNode. It extends the YTNode class and sets up image and style properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ImageBannerView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ImageBannerView(`data`): [`ImageBannerView`](ImageBannerView.md)\n```\n\n----------------------------------------\n\nTITLE: Defining HorizontalMovieList Class Properties - TypeScript\nDESCRIPTION: Class property definitions including items array and navigation buttons. The class extends YTNode and includes static type identifier.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HorizontalMovieList.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HorizontalMovieList extends YTNode {\n  static type = 'HorizontalMovieList';\n  items: ObservedArray<YTNode>;\n  previous_button: null | Button;\n  next_button: null | Button;\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing fetch_function in HTTPClient\nDESCRIPTION: Getter for the fetch_function property. Returns a function that matches the signature of the global fetch function.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/HTTPClient.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget fetch_function(): (input: URL | RequestInfo, init?: RequestInit) => Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Defining Optional SearchFilterGroup Array Property in TypeScript\nDESCRIPTION: Declares an optional property `groups` within the `SearchSubMenu` class. This property is an `ObservedArray` (a specialized array type) that can contain instances of `SearchFilterGroup`, representing the different sections or groups of filters available in the sub-menu.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional groups: ObservedArray<SearchFilterGroup>\n```\n\n----------------------------------------\n\nTITLE: Defining DownloadOptions TypeScript Interface\nDESCRIPTION: TypeScript interface that extends FormatOptions to specify download configuration options for YouTube content. Includes properties for client configuration, format selection, language preference, quality settings, byte range, and content type selection.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/interfaces/DownloadOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface DownloadOptions extends FormatOptions {\n    client?: InnerTubeClient;\n    format?: string;\n    language?: string;\n    quality?: string;\n    range?: {\n        start: number;\n        end: number;\n    };\n    type?: \"video\" | \"audio\" | \"video+audio\";\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Kids API Client Constructor\nDESCRIPTION: Constructor for the Kids API client class that takes a session parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Kids.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Kids(session): Kids\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tab by URL in YouTube Channel\nDESCRIPTION: This method fetches a tab by its URL. It returns a Promise that resolves to a TabbedFeed object containing the tab data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTabByURL(url: string): Promise<TabbedFeed<IBrowseResponse>>\n```\n\n----------------------------------------\n\nTITLE: Defining AvatarView Class in TypeScript\nDESCRIPTION: This snippet defines the AvatarView class, which extends YTNode. It includes properties for image thumbnails, image processing, and avatar size. The constructor takes a RawNode parameter to initialize the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AvatarView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AvatarView extends YTNode {\n  static type = 'AvatarView';\n\n  image: Thumbnail[];\n  image_processor: undefined | object;\n  avatar_image_size: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.image = Thumbnail.fromResponse(data.image);\n    this.image_processor = data.imageProcessor;\n    this.avatar_image_size = data.avatarImageSize;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Poll Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the Poll class that extends YTNode. Takes RawNode data as parameter and initializes poll properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Poll.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Poll(data: RawNode): Poll\n```\n\n----------------------------------------\n\nTITLE: Unliking a YouTube Comment in TypeScript\nDESCRIPTION: Asynchronous method to unlike a YouTube comment. It returns a Promise that resolves to an ApiResponse. Throws an error if the Actions instance is not set or if the unlike command is not found.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nunlike(): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining SubscribeRequest Type Alias in TypeScript for YouTube API\nDESCRIPTION: This code snippet defines a TypeScript type alias called SubscribeRequest. It represents an object with optional properties used in YouTube API subscription requests. The type includes fields for bot guard response, channel IDs, client feature, parameters, and silo name.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/SubscribeRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype SubscribeRequest = {\n  botguardResponse?: string;\n  channelIds?: string[];\n  clientFeature?: string;\n  params?: string;\n  siloName?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Encoding Video IDs for YouTube API Parameters - TypeScript\nDESCRIPTION: Function that takes an array of video IDs and converts them into an encoded string format suitable for YouTube API requests. This function is defined in the ProtoUtils module and is used for parameter encoding.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/functions/encodeNextParams.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nencodeNextParams(video_ids: string[]): string\n```\n\n----------------------------------------\n\nTITLE: Downloading Video in MediaInfo Class\nDESCRIPTION: This inherited method downloads the video with the specified options. It returns a Promise that resolves to a ReadableStream of Uint8Array containing the video data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ndownload(options: DownloadOptions = {}): Promise<ReadableStream<Uint8Array>>\n```\n\n----------------------------------------\n\nTITLE: Checking for Continuation in CommentThread Class in TypeScript\nDESCRIPTION: Accessor method that determines whether the comment thread has a continuation. Returns a boolean indicating if more replies can be loaded.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentThread.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget has_continuation(): boolean {\n  return !!this.comment_replies_data?.has_continuation;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Channel Sections in TypeScript\nDESCRIPTION: These methods allow fetching specific sections of a YouTube channel, such as the About page or Community tab.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetAbout(): Promise<ChannelAboutFullMetadata | AboutChannel>\ngetCommunity(): Promise<Channel>\ngetContinuation(): Promise<ChannelListContinuation>\n```\n\n----------------------------------------\n\nTITLE: Defining ChipCloudChip Class in TypeScript\nDESCRIPTION: Class definition for ChipCloudChip that extends YTNode. It represents a clickable chip component with properties for selection state, navigation endpoint, and display text. The constructor takes a RawNode parameter and initializes the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChipCloudChip.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChipCloudChip extends YTNode {\n  static type = 'ChipCloudChip';\n  is_selected: boolean;\n  endpoint?: NavigationEndpoint;\n  text: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GuideSubscriptionsSection Class in TypeScript\nDESCRIPTION: Class definition for GuideSubscriptionsSection that extends GuideSection. Contains properties for items, title, and type along with inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GuideSubscriptionsSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GuideSubscriptionsSection extends GuideSection {\n    static type: string = 'GuideSubscriptionsSection';\n    \n    constructor(data: RawNode): GuideSubscriptionsSection;\n    \n    items: ObservedArray<YTNode>;\n    title?: Text;\n    readonly type: string;\n    \n    as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n    is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n    hasKey<T extends string, R = any>(key: T): this is GuideSubscriptionsSection & { [k in string]: R };\n    key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro for Youtube.js in React Native\nDESCRIPTION: Metro configuration that enables package exports support required by Youtube.js and adds necessary source extensions for proper module resolution.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/platform/react-native.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst {getDefaultConfig, mergeConfig} = require('@react-native/metro-config');\n\nconst config = {\n  resolver: {\n    sourceExts: ['jsx', 'js', 'ts', 'tsx', 'cjs', 'json', 'd.ts'],\n    unstable_enablePackageExports: true,\n  },\n};\n\nmodule.exports = mergeConfig(getDefaultConfig(__dirname), config);\n```\n\n----------------------------------------\n\nTITLE: BuildRequest Method Implementation\nDESCRIPTION: Method that builds and returns a WatchRequest object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PrefetchWatchCommand.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuildRequest(): WatchRequest\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface Properties - IRawResponse\nDESCRIPTION: TypeScript interface definition for IRawResponse with properties representing different aspects of a YouTube API response including playback status, content, metadata, and UI elements.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IRawResponse {\n  [key: string]: any;\n  actions?: RawNode[];\n  alerts?: RawNode[];\n  annotations?: RawNode[];\n  background?: RawNode;\n  bgChallenge?: IRawBotguardChallenge;\n  captions?: RawNode;\n  cards?: RawNode;\n  challenge?: string;\n  contents?: RawData;\n  continuation?: RawNode;\n  continuationContents?: RawNode;\n  cpnInfo?: {\n    cpn: string;\n    cpnSource: CpnSource;\n  };\n  currentVideoEndpoint?: RawNode;\n  endpoint?: RawNode;\n  endscreen?: RawNode;\n  engagementPanels?: RawNode[];\n  entries?: RawNode[];\n  estimatedResults?: string;\n  frameworkUpdates?: any;\n  header?: RawNode;\n  items?: RawNode[];\n  metadata?: RawNode;\n  microformat?: RawNode;\n  playabilityStatus?: {\n    audioOnlyPlayability?: RawNode;\n    errorScreen?: RawNode;\n    playableInEmbed?: boolean;\n    reason?: string;\n    status: string;\n  };\n  playerConfig?: IRawPlayerConfig;\n  playerOverlays?: RawNode;\n  playerResponse?: IRawResponse;\n  playlistId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: GridMovie Class Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the GridMovie class that initializes a grid movie item with the provided raw node data. It extends the YTNode class and sets up properties like id, title, thumbnails, and metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridMovie.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew GridMovie(data): GridMovie\n```\n\n----------------------------------------\n\nTITLE: Implementing Contents Accessor in Grid Class\nDESCRIPTION: Getter method for accessing the contents of the Grid, providing backward compatibility with older API versions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Grid.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nget contents(): ObservedArray<YTNode> {\n  return this.items;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SettingsOptions Class with YTNode Inheritance in TypeScript\nDESCRIPTION: The snippet defines the SettingsOptions class, which extends the YTNode base class to encapsulate YouTube settings option nodes. It manages typed properties such as options (an array of various option node types), text, title, and static type discrimination. The class provides a constructor for initialization from raw data and supports dynamic typing of options for extensibility; dependencies are other node classes such as Dropdown, ChannelOptions, CopyLink, SettingsCheckbox, and SettingsSwitch, and TypeScript's tooling for type assertions. Inputs include a RawNode object and outputs are type-safe instance properties. Limitations include the need to match property types exactly and reliance on subclassing the YTNode infrastructure.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Class: SettingsOptions\n * Extends: YTNode\n * \n * Represents a group of options for user settings in the YouTube.js parser.\n */\nclass SettingsOptions extends YTNode {\n  /**\n   * Optional text description for the settings group.\n   */\n  text?: string;\n\n  /**\n   * The title of the settings group.\n   */\n  title: Text;\n\n  /**\n   * Array of option nodes: Dropdown, ChannelOptions, CopyLink, SettingsCheckbox, SettingsSwitch.\n   */\n  options?: ObservedArray<Dropdown | ChannelOptions | CopyLink | SettingsCheckbox | SettingsSwitch>;\n\n  /**\n   * Static node type discriminator.\n   */\n  static type: string = 'SettingsOptions';\n\n  constructor(data: RawNode) {\n    super(); // handle base YTNode initialization\n    // ...parse and assign text, title, options from data\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing getContinuation Method for LibraryContinuation Class in TypeScript\nDESCRIPTION: Asynchronous method that fetches and returns the next continuation of library data as a Promise resolving to a new LibraryContinuation instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/LibraryContinuation.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<[`LibraryContinuation`](LibraryContinuation.md)>\n```\n\n----------------------------------------\n\nTITLE: VideoDetails Class Properties Definition\nDESCRIPTION: Defines the properties of a YouTube video including basic metadata (id, title, duration), channel information, viewership stats, and various boolean flags for video status.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/VideoDetails.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoDetails {\n  id: string;\n  channel_id: string;\n  title: string;\n  duration: number;\n  keywords: string[];\n  is_owner_viewing: boolean;\n  short_description: string;\n  thumbnail: Thumbnail[];\n  allow_ratings: boolean;\n  view_count: number;\n  author: string;\n  is_private: boolean;\n  is_live: boolean;\n  is_live_content: boolean;\n  is_live_dvr_enabled: boolean;\n  is_upcoming: boolean;\n  is_crawlable: boolean;\n  is_post_live_dvr: boolean;\n  is_low_latency_live_stream: boolean;\n  live_chunk_readahead?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Innertube Instance - TypeScript\nDESCRIPTION: Static method to create a new Innertube instance with optional configuration options.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Innertube.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic create(config: SessionOptions = {}): Promise<Innertube>\n```\n\n----------------------------------------\n\nTITLE: Defining SettingsSwitch Node Class in TypeScript for YouTube.js\nDESCRIPTION: This snippet outlines the declaration of the SettingsSwitch class in TypeScript, which extends the YTNode class and models a switchable setting for the YouTube.js library. It includes properties for title, subtitle, enabled status, and endpoints to enable or disable the feature, leveraging dependencies such as NavigationEndpoint and Text types. The constructor requires a RawNode datatype, and the class includes inherited and overridden methods supporting type checking, downcasting, and property assertions. Inputs and outputs depend on YouTube's data API structure and the node system within YouTube.js. Consumers must ensure related types (YTNode, NavigationEndpoint, Text, RawNode) are available and imported.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsSwitch.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SettingsSwitch extends YTNode {\n  static type: string = 'SettingsSwitch';\n  title: Text;\n  subtitle: Text;\n  enabled: boolean;\n  enable_endpoint: NavigationEndpoint;\n  disable_endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    // Initialization code here...\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveListItem Class in TypeScript\nDESCRIPTION: This code snippet defines the MusicResponsiveListItem class, which extends YTNode. It includes the class constructor, properties, and static type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicResponsiveListItem extends YTNode {\n  static type = 'MusicResponsiveListItem';\n\n  flex_columns: ObservedArray<MusicResponsiveListItemFlexColumn>;\n  fixed_columns: ObservedArray<MusicResponsiveListItemFixedColumn>;\n  endpoint?: NavigationEndpoint;\n  item_type: undefined | 'unknown' | 'endpoint' | 'playlist' | 'album' | 'artist' | 'library_artist' | 'non_music_track' | 'video' | 'song' | 'podcast_show';\n  index?: Text;\n  thumbnail?: null | MusicThumbnail;\n  badges: undefined | ObservedArray<YTNode>;\n  menu?: null | Menu;\n  overlay?: null | MusicItemThumbnailOverlay;\n  id?: string;\n  title?: string;\n  duration?: {\n    seconds: number;\n    text: string;\n  };\n  album?: {\n    id?: string;\n    name: string;\n    endpoint?: NavigationEndpoint;\n  };\n  artists?: object[];\n  views?: string;\n  authors?: object[];\n  name?: string;\n  subtitle?: Text;\n  subscribers?: string;\n  song_count?: string;\n  author?: {\n    name: string;\n    channel_id?: string;\n    endpoint?: NavigationEndpoint;\n  };\n  item_count?: string;\n  year?: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n\n  // Other methods and accessors\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited is Method in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `is` method, inherited from `YTNode`. This type predicate checks if the current node instance is of one of the specified `YTNode` subtypes. It accepts a variable number of `YTNodeConstructor` types and returns `true` if the instance matches any of them, refining the object's type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Installing YouTube.js via Package Managers\nDESCRIPTION: Installation commands for different package managers including NPM, Yarn, and Git. Also includes Deno installation options.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# NPM\nnpm install youtubei.js@latest\n\n# Yarn\nyarn add youtubei.js@latest\n\n# Git (edge version)\nnpm install github:LuanRT/YouTube.js\n\n# Deno\ndeno add npm:youtubei.js@latest\n```\n\n----------------------------------------\n\nTITLE: Defining MusicTwoRowItem Class in TypeScript\nDESCRIPTION: This snippet defines the MusicTwoRowItem class, which extends YTNode. It includes properties such as title, endpoint, subtitle, badges, and various optional fields like artists, author, and menu. The class also includes a constructor and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicTwoRowItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicTwoRowItem extends YTNode {\n  static type = 'MusicTwoRowItem';\n\n  title: Text;\n  endpoint: NavigationEndpoint;\n  id?: string;\n  subtitle: Text;\n  badges: null | SuperParsedResult<YTNode>;\n  item_type: string;\n  subscribers?: string;\n  item_count?: null | string;\n  year?: string;\n  views?: string;\n  artists?: object[];\n  author?: {\n    channel_id: undefined | string;\n    endpoint: undefined | NavigationEndpoint;\n    name: string;\n  };\n  thumbnail: Thumbnail[];\n  thumbnail_overlay: null | MusicItemThumbnailOverlay;\n  menu: null | Menu;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Track Information in TypeScript\nDESCRIPTION: Method to retrieve track info. It can accept various input types and automatically starts a radio for certain types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo(target: string | NavigationEndpoint | MusicResponsiveListItem | MusicTwoRowItem): Promise<TrackInfo>\n```\n\n----------------------------------------\n\nTITLE: Initializing LiveChat Class in TypeScript\nDESCRIPTION: Constructor for the LiveChat class that takes a VideoInfo object as a parameter. It initializes properties such as smoothed_queue, initial_info, metadata, running, and is_replay.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew LiveChat(video_info: VideoInfo): LiveChat\n```\n\n----------------------------------------\n\nTITLE: Removing Rating from a YouTube Video in TypeScript\nDESCRIPTION: Method to remove a like or dislike from a video. It takes the video ID as a parameter and returns a Promise with the API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nremoveRating(video_id: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: SubscriptionNotificationToggleButton Class Definition in TypeScript\nDESCRIPTION: Defines a class for handling YouTube subscription notification toggle functionality. It manages state information, transition IDs, and provides methods for type checking and property access inherited from the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SubscriptionNotificationToggleButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SubscriptionNotificationToggleButton extends YTNode {\n  static type = 'SubscriptionNotificationToggleButton';\n\n  states: {\n    id: string;\n    next_id: string;\n    state: SuperParsedResult<YTNode>;\n  };\n\n  current_state_id: string;\n  target_id: string;\n\n  constructor(data: any) {\n    super();\n    // Implementation not shown in the documentation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatSponsorshipsGiftPurchaseAnnouncement Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatSponsorshipsGiftPurchaseAnnouncement class, which extends YTNode. It includes properties for id, timestamp, author channel ID, and a header. The constructor takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatSponsorshipsGiftPurchaseAnnouncement.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatSponsorshipsGiftPurchaseAnnouncement extends YTNode {\n  static type = 'LiveChatSponsorshipsGiftPurchaseAnnouncement';\n\n  id: string;\n  timestamp_usec: string;\n  author_external_channel_id: string;\n  header: null | LiveChatSponsorshipsHeader;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing SharePanelHeader Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `SharePanelHeader` class. It takes raw node data (`RawNode`) conforming to the expected structure for a share panel header and initializes a new `SharePanelHeader` instance. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SharePanelHeader(data: RawNode): SharePanelHeader\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateEngagementPanelAction Class Constructor in TypeScript\nDESCRIPTION: Constructor for the UpdateEngagementPanelAction class that takes RawNode data as a parameter and initializes an instance of the class. It extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateEngagementPanelAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew UpdateEngagementPanelAction(`data`): [`UpdateEngagementPanelAction`](UpdateEngagementPanelAction.md)\n```\n\n----------------------------------------\n\nTITLE: Defining replacement_item Property in ReplaceChatItemAction TypeScript\nDESCRIPTION: Declares the `replacement_item` property for the `ReplaceChatItemAction` class. This property holds the actual chat item node (an instance of `YTNode`) that will replace the target item.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplaceChatItemAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreplacement_item: YTNode\n```\n\n----------------------------------------\n\nTITLE: Defining MultiMarkersPlayerBar Class Constructor\nDESCRIPTION: Constructor for MultiMarkersPlayerBar class that takes a RawNode data parameter and returns a new MultiMarkersPlayerBar instance\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiMarkersPlayerBar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MultiMarkersPlayerBar(data: RawNode): MultiMarkersPlayerBar\n```\n\n----------------------------------------\n\nTITLE: Constructing AccountManager in TypeScript\nDESCRIPTION: Constructor for the AccountManager class. It takes an Actions object as a parameter and returns an AccountManager instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/AccountManager.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AccountManager(actions: Actions): AccountManager\n```\n\n----------------------------------------\n\nTITLE: Defining FormatUtils Module Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the FormatUtils module, listing its main functions: chooseFormat, download, and toDash. Each function is linked to its respective documentation page.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/FormatUtils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# FormatUtils\n\n## Index\n\n### Functions\n\n- [chooseFormat](functions/chooseFormat.md)\n- [download](functions/download.md)\n- [toDash](functions/toDash.md)\n```\n\n----------------------------------------\n\nTITLE: Defining BackstagePost Class in TypeScript\nDESCRIPTION: This snippet defines the BackstagePost class, which extends YTNode. It includes properties for post content, author, publication date, votes, and various UI elements. The class constructor takes a RawNode parameter to initialize these properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BackstagePost.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BackstagePost extends YTNode {\n  static type = 'BackstagePost';\n\n  id: string;\n  author: Author;\n  content: Text;\n  published: Text;\n  poll_status?: string;\n  vote_status?: string;\n  vote_count?: Text;\n  menu?: null | Menu;\n  action_buttons?: null | CommentActionButtons;\n  vote_button?: null | Button;\n  surface: string;\n  endpoint?: NavigationEndpoint;\n  attachment: undefined | YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Definition - NotificationsMenu Class\nDESCRIPTION: Constructor that initializes a new NotificationsMenu instance with actions and response parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/NotificationsMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew NotificationsMenu(actions: Actions, response: ApiResponse): NotificationsMenu\n```\n\n----------------------------------------\n\nTITLE: Type Definition for applyCommentsMutations Function\nDESCRIPTION: Function signature for applyCommentsMutations that processes YouTube comment mutations. Takes a Memo object and an array of RawNode mutations as parameters and returns void.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/applyCommentsMutations.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\napplyCommentsMutations(memo: Memo, mutations: RawNode[]): void\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of utility methods for type checking and validation inherited from YTNode class. Includes methods for type assertion, key checking, and safe key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BrowseFeedActions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is BrowseFeedActions & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Videos from FilteredChannelList in TypeScript\nDESCRIPTION: This method retrieves all videos in the feed. It returns an ObservedArray of various video types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/FilteredChannelList.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget videos(): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Defining MerchandiseShelf Class in TypeScript\nDESCRIPTION: This code defines the MerchandiseShelf class, which extends YTNode. It includes a constructor, properties for title, menu, and items, and a getter for contents.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MerchandiseShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MerchandiseShelf extends YTNode {\n  static type = 'MerchandiseShelf';\n\n  title: string;\n  menu: YTNode;\n  items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n\n  get contents() {\n    return this.items;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining INextResponse Type Alias in TypeScript\nDESCRIPTION: Type alias that picks specific properties from IParsedResponse interface including contents, continuation data, video endpoints, player overlays, and engagement panels. Used for typing YouTube API response data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/INextResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype INextResponse = Pick<IParsedResponse, \"contents\" | \"contents_memo\" | \"continuation_contents\" | \"continuation_contents_memo\" | \"current_video_endpoint\" | \"on_response_received_endpoints\" | \"on_response_received_endpoints_memo\" | \"player_overlays\" | \"engagement_panels\">\n```\n\n----------------------------------------\n\nTITLE: CompactMovie Class Definition in TypeScript\nDESCRIPTION: The CompactMovie class extends YTNode to represent compact movie entries from YouTube. It contains properties for movie identification, metadata, thumbnails, and navigation endpoints. The constructor accepts a RawNode parameter to initialize the class instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactMovie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'CompactMovie'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nid: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntop_metadata_items: Text\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthumbnails: Thumbnail[]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nthumbnail_overlays: ObservedArray<YTNode>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nauthor: Author\n```\n\nLANGUAGE: typescript\nCODE:\n```\nduration: object\n```\n\nLANGUAGE: typescript\nCODE:\n```\nendpoint: NavigationEndpoint\n```\n\nLANGUAGE: typescript\nCODE:\n```\nbadges: ObservedArray<YTNode>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nuse_vertical_poster: boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\nmenu: null | Menu\n```\n\n----------------------------------------\n\nTITLE: Defining FormatOptions Interface in TypeScript\nDESCRIPTION: This code snippet defines the FormatOptions interface with optional properties for configuring video/audio format options. It includes quality, type, language, format, and client specifications.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/interfaces/FormatOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface FormatOptions {\n    quality?: string;\n    type?: \"video\" | \"audio\" | \"video+audio\";\n    language?: string;\n    format?: string;\n    client?: InnerTubeClient;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Videos from Memo in HomeFeed in TypeScript\nDESCRIPTION: This static method retrieves all videos from a given Memo object, returning an ObservedArray of various video types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Getting Explore Page Data in TypeScript\nDESCRIPTION: Method to fetch the explore page content from YouTube Music.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetExplore(): Promise<Explore>\n```\n\n----------------------------------------\n\nTITLE: Constructing SlimVideoMetadata Instances in TypeScript\nDESCRIPTION: Defines the constructor for the `SlimVideoMetadata` class. It takes a `data` object of type `RawNode` as input and returns a new instance of `SlimVideoMetadata`. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SlimVideoMetadata(data: RawNode): SlimVideoMetadata\n```\n\n----------------------------------------\n\nTITLE: Defining CompactStation Class in TypeScript\nDESCRIPTION: This code defines the CompactStation class, which extends YTNode. It includes properties for title, description, video count, endpoint, and thumbnail. The class also includes a constructor and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactStation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CompactStation extends YTNode {\n  static type = 'CompactStation';\n\n  title: Text;\n  description: Text;\n  video_count: Text;\n  endpoint: NavigationEndpoint;\n  thumbnail: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n    this.description = new Text(data.description);\n    this.video_count = new Text(data.videoCountText);\n    this.endpoint = new NavigationEndpoint(data.navigationEndpoint);\n    this.thumbnail = Thumbnail.fromResponse(data.thumbnail);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicHeader Class in TypeScript\nDESCRIPTION: This code defines the MusicHeader class, which extends YTNode. It includes properties for the header and title, and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicHeader extends YTNode {\n  static type = 'MusicHeader';\n\n  header?: YTNode;\n  title?: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.header = parser.parseItem(data.header);\n    this.title = new Text(data.title);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Actions in CommentThread Class in TypeScript\nDESCRIPTION: Method for setting Actions object on the CommentThread. This allows the thread to perform YouTube API operations like retrieving replies.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentThread.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsetActions(actions: Actions): void {\n  if (this.comment_replies_data)\n    this.comment_replies_data.actions = actions;\n\n  if (this.comment)\n    this.comment.actions = actions;\n\n  if (this.replies) {\n    for (const reply of this.replies)\n      reply.actions = actions;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from a YouTube Channel in TypeScript\nDESCRIPTION: Method to unsubscribe from a given channel. It takes the channel ID as a parameter and returns a Promise with the API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nunsubscribe(channel_id: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Class Definition for DescriptionPreviewView in TypeScript\nDESCRIPTION: Defines the DescriptionPreviewView class that extends YTNode, containing properties for displaying truncated video descriptions with options to expand via engagement panels. The class includes various properties like description text, max lines, truncation text, and endpoints for showing more content.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DescriptionPreviewView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DescriptionPreviewView extends YTNode {\n  static type: string = 'DescriptionPreviewView';\n\n  description?: Text;\n  max_lines?: number;\n  truncation_text?: Text;\n  always_show_truncation_text: boolean;\n  more_endpoint?: {\n    show_engagement_panel_endpoint: {\n      engagement_panel: null | EngagementPanelSectionList;\n      engagement_panel_popup_type: string;\n      identifier: {\n        surface: string;\n        tag: string;\n      };\n    };\n  };\n  renderer_context: RendererContext;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor for SimpleCardContent Class (TypeScript)\nDESCRIPTION: Initializes a new instance of the `SimpleCardContent` class. It takes raw node data as input and constructs the object, overriding the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SimpleCardContent(data: RawNode): SimpleCardContent\n```\n\n----------------------------------------\n\nTITLE: Defining IStreamingData Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition for YouTube streaming data including adaptive formats, streaming URLs, and expiration time. The interface describes the structure of streaming-related data returned by YouTube's API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IStreamingData.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IStreamingData {\n    adaptive_formats: Format[];\n    dash_manifest_url?: string;\n    expires: Date;\n    formats: Format[];\n    hls_manifest_url?: string;\n    server_abr_streaming_url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Generating DASH Manifest in MediaInfo Class\nDESCRIPTION: This inherited method generates a DASH manifest from the streaming data. It accepts optional URL transformer, format filter, and additional options to customize the manifest generation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoDash(url_transformer?: URLTransformer, format_filter?: FormatFilter, options?: DashOptions = ...): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelFeaturedContent Class - TypeScript\nDESCRIPTION: Class definition for ChannelFeaturedContent that extends YTNode. It contains properties for managing featured content on YouTube channels including title and items array.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelFeaturedContent.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelFeaturedContent extends YTNode {\n  static type = 'ChannelFeaturedContent';\n  title: Text;\n  items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddBannerToLiveChatCommand Class in TypeScript\nDESCRIPTION: This code defines the AddBannerToLiveChatCommand class, which extends YTNode. It has a constructor that takes a RawNode parameter and a 'banner' property of type LiveChatBanner or null.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddBannerToLiveChatCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AddBannerToLiveChatCommand extends YTNode {\n  static type = 'AddBannerToLiveChatCommand';\n\n  banner: null | LiveChatBanner;\n\n  constructor(data: RawNode) {\n    super();\n    this.banner = Parser.parseItem(data.banner, LiveChatBanner);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Player Properties Definition\nDESCRIPTION: Class properties including player_id, sts (signature timestamp), signature codes, and po_token.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Player.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nplayer_id: string;\nsts: number;\nnsig_sc?: string;\nsig_sc?: string;\npo_token?: string;\n```\n\n----------------------------------------\n\nTITLE: Performing Music Search in TypeScript\nDESCRIPTION: Method to search YouTube Music with a query and optional filters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nsearch(query: string, filters: MusicSearchFilters = {}): Promise<Search>\n```\n\n----------------------------------------\n\nTITLE: Translating a Comment in YouTube.js\nDESCRIPTION: Method to translate a comment to a specified language. It takes a string parameter for the target language and returns a Promise that resolves to an ApiResponse with an optional content property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/CommentView.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntranslate(target_language: string): Promise<ApiResponse & { content?: string }>\n```\n\n----------------------------------------\n\nTITLE: Defining Album Class Properties in TypeScript\nDESCRIPTION: This snippet defines the properties of the Album class, including optional header, contents array, sections array, optional background, and optional URL.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Album.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Album {\n  header?: MusicDetailHeader | MusicResponsiveHeader;\n  contents: ObservedArray<MusicResponsiveListItem>;\n  sections: ObservedArray<MusicCarouselShelf>;\n  background?: MusicThumbnail;\n  url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a YouTube Comment in TypeScript\nDESCRIPTION: Method to create a top-level comment. It takes a text parameter for the comment content and returns a Promise resolving to an ApiResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Comments.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ncreateComment(text: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Declaring MusicSortFilterButton Class Extending YTNode - TypeScript\nDESCRIPTION: This snippet documents the MusicSortFilterButton class, which extends YTNode and is used to represent a UI button for sorting/filtering music results. The class includes properties such as title (string), icon_type (string, optional), menu (nullable MusicMultiSelectMenu), and static type. It offers a constructor taking a data object of type RawNode. Required dependencies include the base YTNode class, RawNode type, and MusicMultiSelectMenu. Inputs are instance constructions with RawNode; outputs are instances of MusicSortFilterButton supporting inherited node utilities and polymorphic casting, with some methods throwing on type or key mismatches.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicSortFilterButton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicSortFilterButton extends YTNode {\n  static type: string = 'MusicSortFilterButton';\n  title: string;\n  icon_type?: string;\n  menu: null | MusicMultiSelectMenu;\n  constructor(data: RawNode)\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the ReplayChatItemAction Class and Constructor in TypeScript\nDESCRIPTION: This snippet shows the definition of the `ReplayChatItemAction` class, which extends the base `YTNode` class. It includes the constructor that initializes the class instance with raw data (`RawNode`) representing a replay chat item action from the YouTube API response. The static `type` property uniquely identifies this node type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplayChatItemAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport YTNode from '../../helpers';\nimport { RawNode } from '../../i';\nimport { ObservedArray } from '../../helpers';\n\nexport default class ReplayChatItemAction extends YTNode {\n  static type = 'ReplayChatItemAction';\n\n  actions: ObservedArray<YTNode>;\n  video_offset_time_msec: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation likely involves parsing 'data.actions' and 'data.videoOffsetTimeMsec'\n    this.actions = YTNode.parseArray(data.actions);\n    this.video_offset_time_msec = data.videoOffsetTimeMsec;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VideoInfo Class Constructor Definition\nDESCRIPTION: Constructor for VideoInfo class that takes API response data, actions, and content playback nonce (cpn) as parameters. It extends the MediaInfo class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/VideoInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew VideoInfo(data: [ApiResponse, ApiResponse?], actions: Actions, cpn: string): VideoInfo\n```\n\n----------------------------------------\n\nTITLE: Constructing ReelPlayerHeader Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `ReelPlayerHeader` class. It accepts raw node data (`RawNode`) likely parsed from a YouTube API response and initializes a new `ReelPlayerHeader` object. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ReelPlayerHeader(data): ReelPlayerHeader\n```\n\n----------------------------------------\n\nTITLE: Inherited 'is' Method for Type Checking in YTNode (TypeScript)\nDESCRIPTION: Explains the `is` method inherited from the `YTNode` base class. It performs a runtime check to determine if the current `SendFeedbackAction` instance is of one of the specified `YTNode` subtypes (`K`). It returns a boolean type predicate (`this is InstanceType<K[number]>`) useful for conditional logic based on node type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SendFeedbackAction.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for ContinuationItem Class in TypeScript\nDESCRIPTION: Implementation of the ContinuationItem constructor that takes a RawNode data parameter and returns a new ContinuationItem instance. It overrides the constructor from the parent YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ContinuationItem.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ContinuationItem(data): ContinuationItem\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data in TypeScript\nDESCRIPTION: This method retrieves the next batch of contents and returns a new Feed object. It returns a Promise resolving to a Feed of IBrowseResponse type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HashtagFeed.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<Feed<IBrowseResponse>>\n```\n\n----------------------------------------\n\nTITLE: Initializing Explore Class Constructor\nDESCRIPTION: Constructor for the Explore class that takes an ApiResponse parameter and initializes the instance. Used to create a new Explore object for handling YouTube Music explore page data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Explore.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Explore(response: ApiResponse): Explore\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedResponse Interface Properties in TypeScript\nDESCRIPTION: This snippet defines various optional properties of the ParsedResponse interface, including metadata, actions, playback information, and video details. It uses types from other parts of the project such as YTNode, ObservedArray, and custom interfaces.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IParsedResponse.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ParsedResponse {\n  contents?: YTNode;\n  contents_memo?: Memo;\n  header?: YTNode;\n  header_memo?: Memo;\n  sidebar?: YTNode;\n  sidebar_memo?: Memo;\n  on_response_received_actions?: ObservedArray<AppendContinuationItemsAction | OpenPopupAction | NavigateAction | ShowMiniplayerCommand | ReloadContinuationItemsCommand>;\n  on_response_received_actions_memo?: Memo;\n  on_response_received_endpoints?: ObservedArray<AppendContinuationItemsAction | OpenPopupAction | NavigateAction | ShowMiniplayerCommand | ReloadContinuationItemsCommand>;\n  on_response_received_endpoints_memo?: Memo;\n  on_response_received_commands?: ObservedArray<AppendContinuationItemsAction | OpenPopupAction | NavigateAction | ShowMiniplayerCommand | ReloadContinuationItemsCommand>;\n  on_response_received_commands_memo?: Memo;\n  continuation?: YTNode;\n  continuation_memo?: Memo;\n  continuation_contents?: YTNode;\n  continuation_contents_memo?: Memo;\n  microformat?: YTNode;\n  overlay?: YTNode;\n  alerts?: Alerts[];\n  refinements?: string[];\n  estimated_results?: string;\n  player_overlays?: SuperParsedResult<YTNode>;\n  playback_tracking?: IPlaybackTracking;\n  playability_status?: IPlayabilityStatus;\n  streaming_data?: IStreamingData;\n  player_config?: IPlayerConfig;\n  response_metadata?: ResponseMetadata;\n  storyboards?: PlayerStoryboardSpec | PlayerLiveStoryboardSpec;\n  video_details?: VideoDetails;\n  annotations?: ObservedArray<AnnotationBox>;\n  endscreen?: EndScreen;\n  captions?: CaptionsTrack[];\n  cards?: CardCollection;\n  engagement_panels?: EngagementPanelSection[];\n  frameworkUpdates?: IFrameworkUpdates;\n  items?: ObservedArray<YTNode>;\n  playerResponse?: IPlayerResponse;\n  watch_next_response?: INextResponse;\n}\n```\n\n----------------------------------------\n\nTITLE: EmojiRun toHTML Method - TypeScript\nDESCRIPTION: Implementation of the toHTML method from the Run interface that converts the emoji run to an HTML representation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/EmojiRun.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoHTML(): string\n```\n\n----------------------------------------\n\nTITLE: Defining parseLC Function in TypeScript for YouTube.js Parser\nDESCRIPTION: This function parseLC takes a RawNode data input and returns various continuation types or null. It is defined in the parser.ts file of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseLC.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction parseLC(data: RawNode): null | ItemSectionContinuation | SectionListContinuation | LiveChatContinuation | MusicPlaylistShelfContinuation | MusicShelfContinuation | GridContinuation | PlaylistPanelContinuation | ContinuationCommand\n```\n\n----------------------------------------\n\nTITLE: LiveChatMessageInput Class Definition\nDESCRIPTION: Defines a LiveChatMessageInput class that extends YTNode to handle live chat message input. Contains properties for author name, photo, send button and target ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatMessageInput.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatMessageInput extends YTNode {\n    static type = 'LiveChatMessageInput';\n    \n    author_name: Text;\n    author_photo: Thumbnail[];\n    send_button: null | Button;\n    target_id: string;\n    \n    constructor(data: RawNode) {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Library Playlists in TypeScript\nDESCRIPTION: Methods to add or remove playlists from a user's library using playlist IDs.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/PlaylistManager.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\naddToLibrary(playlist_id: string): Promise<ApiResponse>\n```\n\nLANGUAGE: typescript\nCODE:\n```\nremoveFromLibrary(playlist_id: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: PollHeader Class Definition and Properties - TypeScript\nDESCRIPTION: Defines the PollHeader class that extends YTNode for handling YouTube live chat poll headers. The class includes properties for poll questions, thumbnails, metadata, live chat poll type and context menu buttons.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PollHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PollHeader extends YTNode {\n  static type = 'PollHeader';\n  poll_question: Text;\n  thumbnails: Thumbnail[];\n  metadata: Text;\n  live_chat_poll_type: string;\n  context_menu_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MenuPopup Class in TypeScript\nDESCRIPTION: This code defines the MenuPopup class, which extends YTNode. It includes a constructor, properties for menu items, and inherited methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MenuPopup.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MenuPopup extends YTNode {\n  static type = 'MenuPopup';\n\n  items: ObservedArray<MenuServiceItem | MenuNavigationItem>;\n\n  constructor(data: RawNode) {\n    super();\n    this.items = observe(Parser.parseArray(data.items, [\n      MenuServiceItem,\n      MenuNavigationItem\n    ]));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HorizontalCardList Class Definition in TypeScript\nDESCRIPTION: The HorizontalCardList class definition extends YTNode and includes properties for managing a collection of cards, header, and navigation buttons. It also inherits methods for type checking and property access from the parent class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HorizontalCardList.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HorizontalCardList extends YTNode {\n  static type = 'HorizontalCardList';\n\n  cards: ObservedArray<MacroMarkersListItem | SearchRefinementCard | GameCard | VideoCard | VideoAttributeView>;\n  header: YTNode;\n  previous_button: null | Button;\n  next_button: null | Button;\n\n  constructor(data: RawNode): HorizontalCardList {\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Movie Class Definition in TypeScript\nDESCRIPTION: Class definition for Movie that extends YTNode. Contains properties for movie metadata including title, thumbnails, author, duration, and navigation endpoints. Includes inherited methods for type checking and key assertions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Movie.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Movie extends YTNode {\n  static type = 'Movie';\n  id: string;\n  title: Text;\n  description_snippet?: Text;\n  top_metadata_items: Text;\n  thumbnails: Thumbnail[];\n  thumbnail_overlays: ObservedArray<YTNode>;\n  author: Author;\n  duration: {\n    seconds: number;\n    text: string;\n  };\n  endpoint: NavigationEndpoint;\n  badges: ObservedArray<YTNode>;\n  use_vertical_poster: boolean;\n  show_action_menu: boolean;\n  menu: null | Menu;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Class Constructor Implementation - TypeScript\nDESCRIPTION: Constructor for the Search class that initializes a new search results object. Takes actions, data response and a parsing flag as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Search(actions: Actions, data: ApiResponse | ISearchResponse, already_parsed: boolean = false): Search\n```\n\n----------------------------------------\n\nTITLE: Implementing has_continuation Getter in TypeScript\nDESCRIPTION: Getter method that returns a boolean indicating whether there is a continuation available for the library data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/LibraryContinuation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget has_continuation(): boolean\n```\n\n----------------------------------------\n\nTITLE: Fetching YouTube Kids Home Feed\nDESCRIPTION: Method to retrieve the home feed content from YouTube Kids.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Kids.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetHomeFeed(): Promise<HomeFeed>\n```\n\n----------------------------------------\n\nTITLE: EndscreenElement Class Definition in TypeScript\nDESCRIPTION: Class definition for EndscreenElement that extends YTNode. Contains properties for handling YouTube video endscreen elements including style, title, endpoints, thumbnails, positioning and timing information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EndscreenElement.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass EndscreenElement extends YTNode {\n  static type = 'EndscreenElement';\n  style: string;\n  title: Text;\n  endpoint: NavigationEndpoint;\n  image?: Thumbnail[];\n  icon?: Thumbnail[];\n  metadata?: Text;\n  call_to_action?: Text;\n  hovercard_button?: YTNode;\n  is_subscribe?: boolean;\n  playlist_length?: Text;\n  thumbnail_overlays?: ObservedArray<YTNode>;\n  left: number;\n  top: number;\n  width: number;\n  aspect_ratio: number;\n  start_ms: number;\n  end_ms: number;\n  id: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistVideoThumbnail Class in TypeScript\nDESCRIPTION: Class definition for PlaylistVideoThumbnail that extends YTNode. Includes constructor, properties for thumbnail and type, and inherited methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistVideoThumbnail.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistVideoThumbnail extends YTNode {\n  static type = 'PlaylistVideoThumbnail';\n  thumbnail: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    this.thumbnail = [];\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Extending the SettingsSidebar Node Class - YouTube.js - TypeScript\nDESCRIPTION: The code snippet defines the SettingsSidebar class extending from YTNode, providing constructors and structured properties for representing a sidebar node in the parser. It leverages TypeScript's type system, type aliases, and generics. Required dependencies include YTNode, RawNode, ObservedArray, CompactLink, and internal helpers. Key parameters like 'data' are used for instantiation, and properties such as 'items', 'title', and static 'type' facilitate standardized data access; methods inherited from YTNode enable advanced type assertions and introspection.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsSidebar.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SettingsSidebar extends YTNode {\n  static type: string = 'SettingsSidebar';\n  title: Text;\n  items: ObservedArray<CompactLink>;\n\n  constructor(data: RawNode) {\n    super(data);\n    // ...initialization logic\n  }\n  \n  get contents(): ObservedArray<CompactLink> {\n    // ...access logic\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining CarouselItem Class Properties in TypeScript\nDESCRIPTION: Defines the core properties of the CarouselItem class including items array, background color, layout style, pagination thumbnails and paginator alignment.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CarouselItem extends YTNode {\n  static type = 'CarouselItem';\n  items: ObservedArray<YTNode>;\n  background_color: string;\n  layout_style: string;\n  pagination_thumbnails: Thumbnail[];\n  paginator_alignment: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EngagementPanelTitleHeader Class in TypeScript\nDESCRIPTION: This snippet defines the EngagementPanelTitleHeader class, which extends YTNode. It includes a constructor, properties for title components, and static type declaration.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EngagementPanelTitleHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass EngagementPanelTitleHeader extends YTNode {\n  static type = 'EngagementPanelTitleHeader';\n\n  title: Text;\n  visibility_button: null | Button;\n  contextual_info?: Text;\n  menu: null | YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ChipCloud Class Definition in TypeScript\nDESCRIPTION: Defines a ChipCloud class with properties for chips, navigation buttons, and horizontal scrolling. The class extends YTNode and handles chip cloud data structures.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChipCloud.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChipCloud extends YTNode {\n  static type = 'ChipCloud';\n\n  chips: ObservedArray<ChipCloudChip>;\n  next_button: null | Button;\n  previous_button: null | Button;\n  horizontal_scrollable: boolean;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicCardShelf Class in TypeScript\nDESCRIPTION: This code snippet defines the MusicCardShelf class, which extends YTNode. It includes various properties related to music card shelves in YouTube's interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicCardShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicCardShelf extends YTNode {\n  static type = 'MusicCardShelf';\n\n  thumbnail: null | MusicThumbnail;\n  title: Text;\n  subtitle: Text;\n  buttons: ObservedArray<Button>;\n  menu: null | Menu;\n  on_tap: NavigationEndpoint;\n  header: null | MusicCardShelfHeaderBasic;\n  end_icon_type?: string;\n  subtitle_badges: ObservedArray<MusicInlineBadge>;\n  thumbnail_overlay: null | MusicItemThumbnailOverlay;\n  contents?: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Continuation Class in TypeScript\nDESCRIPTION: This code snippet defines the Continuation class, which extends YTNode. It includes properties for continuation_type, token, and optional timeout values. The class constructor takes a RawNode data parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Continuation.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Continuation extends YTNode {\n  static type = 'continuation' as const;\n\n  continuation_type: string;\n  timeout_ms?: number;\n  time_until_last_message_ms?: number;\n  token: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details not provided in the snippet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking and Casting Methods in TypeScript\nDESCRIPTION: Methods inherited from YTNode for type checking (is) and casting (as) that allow verifying and converting nodes to specific types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **is**\\<`T`, `K`\\>(...`types`): `this is InstanceType<K[number]>`\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **as**\\<`T`, `K`\\>(...`types`): `InstanceType`\\<`K`\\[`number`\\]\\>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **hasKey**\\<`T`, `R`\\>(`key`): `this is CommentView & { [k in string]: R }`\n```\n\n----------------------------------------\n\nTITLE: Defining TrackInfo Class in TypeScript\nDESCRIPTION: Defines the TrackInfo class that extends MediaInfo, including constructor, properties, and methods specific to YouTube Music tracks.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/TrackInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TrackInfo extends MediaInfo {\n  constructor(data: [ApiResponse, ApiResponse?], actions: Actions, cpn: string) {\n    super(data, actions, cpn);\n  }\n\n  tabs?: ObservedArray<Tab>;\n  current_video_endpoint?: NavigationEndpoint;\n  player_overlays?: PlayerOverlay;\n\n  get available_tabs(): string[] {\n    return this.tabs?.map((tab) => tab.title) || [];\n  }\n\n  addToWatchHistory(): Promise<Response> {\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Home Feed in TypeScript\nDESCRIPTION: Method to get the home feed content from YouTube Music.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetHomeFeed(): Promise<HomeFeed>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Videos from Memo in TypeScript\nDESCRIPTION: This static method gets all videos on a given page via memo. It returns an ObservedArray of various video types including Video, CompactVideo, GridVideo, and others.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HashtagFeed.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatTextMessage Class in TypeScript\nDESCRIPTION: This code snippet defines the LiveChatTextMessage class, which extends YTNode. It includes properties for the message content, author, timestamp, and various UI elements related to live chat messages.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatTextMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatTextMessage extends YTNode {\n  static type = 'LiveChatTextMessage';\n\n  id: string;\n  message: Text;\n  inline_action_buttons: ObservedArray<Button>;\n  timestamp: number;\n  timestamp_usec: number;\n  timestamp_text?: string;\n  author: Author;\n  menu_endpoint?: NavigationEndpoint;\n  context_menu_accessibility_label?: string;\n  before_content_buttons: ObservedArray<ButtonView>;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThumbnailOverlayLoadingPreview Class in TypeScript\nDESCRIPTION: Class definition for ThumbnailOverlayLoadingPreview which extends YTNode. It contains a constructor that takes a RawNode data parameter, a text property of type Text, and a static type property set to 'ThumbnailOverlayLoadingPreview'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayLoadingPreview.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ThumbnailOverlayLoadingPreview extends YTNode {\n  static type = 'ThumbnailOverlayLoadingPreview';\n  \n  text: Text;\n  \n  constructor(data: RawNode) {\n    super(data);\n    // Implementation details not shown in the documentation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Property Access Method 'key' in YTNode TypeScript\nDESCRIPTION: Details the inherited `key` method from the base `YTNode` class. This method asserts that the node instance has a property with the specified `key` and returns its value wrapped in a `Maybe` container for safe access. It throws an error if the key does not exist on the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T, R>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Deleting YouTube Playlist in TypeScript\nDESCRIPTION: Method to delete an existing YouTube playlist by its ID. Returns a promise with the deletion operation result.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/PlaylistManager.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndelete(playlist_id: string): Promise<object>\n```\n\n----------------------------------------\n\nTITLE: Finding Shelf by Title\nDESCRIPTION: Method to find a specific shelf in the feed by its title. Returns either undefined or a ReelShelf, RichShelf, or Shelf object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: VideoInfo Class Properties Declaration\nDESCRIPTION: Class properties including video metadata, player overlays, watch next feed and other YouTube Kids specific information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/VideoInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nslim_video_metadata?: SlimVideoMetadata\nwatch_next_feed?: ObservedArray<YTNode>\ncurrent_video_endpoint?: NavigationEndpoint\nplayer_overlays?: PlayerOverlay\n```\n\n----------------------------------------\n\nTITLE: Accessing Video Transcript in TypeScript\nDESCRIPTION: Asynchronous method to retrieve video transcript information, returning TranscriptInfo object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/VideoInfo.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetTranscript(): Promise<TranscriptInfo>\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataRowHeader Class in TypeScript\nDESCRIPTION: This code defines the MetadataRowHeader class, which extends YTNode. It includes properties for content and a divider line flag, and a constructor that takes RawNode data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataRowHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MetadataRowHeader extends YTNode {\n  static type = 'MetadataRowHeader';\n\n  content: Text;\n  has_divider_line: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    this.content = new Text(data.content);\n    this.has_divider_line = data.hasDividerLine;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VideoDescriptionHeader Class Definition in TypeScript\nDESCRIPTION: Defines the VideoDescriptionHeader class which extends YTNode. It contains properties related to video metadata such as channel information, thumbnails, factoids, publish date, title, and view count.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'VideoDescriptionHeader'\n```\n\n----------------------------------------\n\nTITLE: Defining ButtonCardView Class in TypeScript\nDESCRIPTION: This code defines the ButtonCardView class, which extends YTNode. It includes properties for title, icon_name, and renderer_context, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ButtonCardView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ButtonCardView extends YTNode {\n  static type = 'ButtonCardView';\n\n  title: string;\n  icon_name: string;\n  renderer_context: RendererContext;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = data.title;\n    this.icon_name = data.iconName;\n    this.renderer_context = new RendererContext(data.rendererContext);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing RemoveBannerForLiveChatCommand Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `RemoveBannerForLiveChatCommand` class. It takes raw node data (`RawNode`) as input and returns an instance of the class. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveBannerForLiveChatCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew RemoveBannerForLiveChatCommand(data: RawNode): RemoveBannerForLiveChatCommand\n```\n\n----------------------------------------\n\nTITLE: Defining FeedbackRequest Type Alias in TypeScript\nDESCRIPTION: Defines a type alias for FeedbackRequest with optional properties including feedbackContext, feedbackTokens, isFeedbackTokenUnencrypted, and shouldMerge. This type is used in the YouTube.js project for handling feedback-related API requests.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/FeedbackRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype FeedbackRequest = {\n  feedbackContext?: FeedbackContext;\n  feedbackTokens?: string[];\n  isFeedbackTokenUnencrypted?: boolean;\n  shouldMerge?: boolean;\n};\n```\n\n----------------------------------------\n\nTITLE: Inheriting Methods from YTNode in TypeScript\nDESCRIPTION: This snippet shows the inherited methods from YTNode class, including as(), is(), hasKey(), and key(). These methods provide type checking and assertion functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicShelf.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is MusicShelf & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining MusicPlaylistShelf Class in TypeScript\nDESCRIPTION: This code defines the MusicPlaylistShelf class, which extends YTNode. It includes properties for playlist_id, contents, collapsed_item_count, and continuation. The class also has a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicPlaylistShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicPlaylistShelf extends YTNode {\n  static type = 'MusicPlaylistShelf';\n\n  playlist_id: string;\n  contents: ObservedArray<MusicResponsiveListItem>;\n  collapsed_item_count: number;\n  continuation: null | string;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Class in TypeScript\nDESCRIPTION: This code snippet defines the Channel class, which extends TabbedFeed and represents a YouTube channel. It includes the constructor and various properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Channel extends TabbedFeed<IBrowseResponse> {\n  header?: C4TabbedHeader | CarouselHeader | InteractiveTabbedHeader | PageHeader;\n  metadata: object;\n  subscribe_button?: SubscribeButton;\n  current_tab?: Tab | ExpandableTab;\n\n  constructor(actions: Actions, data: ApiResponse | IBrowseResponse, already_parsed: boolean = false) {\n    super(actions, data, already_parsed);\n    // ... constructor implementation\n  }\n\n  // ... other methods and accessors\n}\n```\n\n----------------------------------------\n\nTITLE: LikeButtonView Constructor Implementation\nDESCRIPTION: Constructor for the LikeButtonView class that takes a RawNode data parameter and initializes the class. It extends the constructor from the parent YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeButtonView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew LikeButtonView(data): LikeButtonView\n```\n\n----------------------------------------\n\nTITLE: Selecting Category Tab in TypeScript\nDESCRIPTION: Method to retrieve contents of a specified category tab. Takes either a string or KidsCategoryTab as input and returns a Promise resolving to HomeFeed.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/HomeFeed.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nselectCategoryTab(tab: string | KidsCategoryTab): Promise<HomeFeed>\n```\n\n----------------------------------------\n\nTITLE: Defining ShowLiveChatTooltipCommand Node - TypeScript\nDESCRIPTION: This TypeScript class implements the ShowLiveChatTooltipCommand node, used for displaying tooltips in the YouTube live chat UI. It extends YTNode, accepting a RawNode object in its constructor to initialize the tooltip property and configure the node type. Dependencies include the base YTNode class and related typing interfaces such as RawNode and YTNodeConstructor. The class exposes a readonly type, static type identifier, and tooltip property, with inherited methods for advanced type checking (is, as) and key handling (key, hasKey). Expected input is a RawNode, and output is a constructed ShowLiveChatTooltipCommand instance. The implementation assumes compatibility with YouTube.js parsing conventions and may throw errors if node types or keys are incorrect.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatTooltipCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// src/parser/classes/livechat/ShowLiveChatTooltipCommand.ts\nimport YTNode from \"../../Helpers/classes/YTNode\";\nimport type { RawNode } from \"../../APIResponseTypes\";\n\nclass ShowLiveChatTooltipCommand extends YTNode {\n  static type = 'ShowLiveChatTooltipCommand';\n  tooltip: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    this.tooltip = YTNode(data.tooltip);\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation for HomeFeed in TypeScript\nDESCRIPTION: This method retrieves the next batch of content for the home feed, returning a Promise resolving to a new HomeFeed instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<HomeFeed>\n```\n\n----------------------------------------\n\nTITLE: Implementing ClipSection Helper Methods in TypeScript\nDESCRIPTION: Helper methods inherited from YTNode for type checking and property access, including as(), is(), hasKey() and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipSection.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is ClipSection & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining MusicPlaylistShelfContinuation Class in TypeScript\nDESCRIPTION: Class definition for MusicPlaylistShelfContinuation which extends YTNode. It has properties for continuation tokens and playlist content arrays, with a constructor that takes raw node data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/MusicPlaylistShelfContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicPlaylistShelfContinuation extends YTNode {\n  static readonly type = 'musicPlaylistShelfContinuation';\n\n  continuation: string;\n  contents: null | ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    // Constructor implementation would be here\n  }\n\n  // Inherited methods from YTNode not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Filter and Retrieving Feed in TypeScript\nDESCRIPTION: This method applies a given filter and returns a new Feed object. It takes a string or ChipCloudChip as a parameter and returns a Promise resolving to a Feed of IBrowseResponse type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HashtagFeed.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetFilteredFeed(filter: string | ChipCloudChip): Promise<Feed<IBrowseResponse>>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data in TypeScript\nDESCRIPTION: Method to retrieve continuation data from YouTube feed. Returns a Promise that resolves to either undefined or an IBrowseResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/HomeFeed.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining Tabbed Class in TypeScript (youtube.js)\nDESCRIPTION: Definition of the Tabbed class that extends YTNode to handle tabbed content structures from YouTube API responses. It includes a constructor to initialize with raw node data and a contents property to store parsed results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Tabbed.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Tabbed extends YTNode {\n  static type = 'Tabbed';\n\n  contents: SuperParsedResult<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.contents = Parser.parseArray(data.content);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VideoViewCount Class Definition in TypeScript\nDESCRIPTION: This class extends YTNode and provides properties for storing different representations of a YouTube video's view count. It includes original, short, extra-short, and standard view count formats, all typically used in different UI contexts.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoViewCount.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass VideoViewCount extends YTNode {\n  static type = 'VideoViewCount';\n\n  original_view_count: string;\n  short_view_count: Text;\n  extra_short_view_count: Text;\n  view_count: Text;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation details not shown in the documentation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking YouTube Renderer in TypeScript\nDESCRIPTION: Function that checks if a given value is a YouTube renderer. Returns the renderer class name as a string if true, otherwise returns false. Takes an unknown value parameter and performs type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/isRenderer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisRenderer(value: unknown): string | false\n```\n\n----------------------------------------\n\nTITLE: Implementing CreatePlaylistDialog Class in TypeScript\nDESCRIPTION: Class definition for CreatePlaylistDialog that extends YTNode. It handles the dialog interface for creating YouTube playlists with properties for title, privacy options, and action buttons.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreatePlaylistDialog.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CreatePlaylistDialog extends YTNode {\n  static type = 'CreatePlaylistDialog';\n  title: string;\n  title_placeholder: string;\n  privacy_option: null | Dropdown;\n  cancel_button: null | Button;\n  create_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Cached Data in UniversalCache\nDESCRIPTION: Method for retrieving data from the cache using a string key. Returns a Promise that resolves to either the cached ArrayBuffer or undefined if the key doesn't exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/UniversalCache.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nget(key): Promise<undefined | ArrayBuffer>\n```\n\n----------------------------------------\n\nTITLE: Defining ThumbnailOverlayToggleButton Class in TypeScript\nDESCRIPTION: Declaration of the ThumbnailOverlayToggleButton class which extends YTNode. It defines various properties like icon types, tooltips, toggled states, and endpoints for toggle buttons that appear as overlays on YouTube thumbnails.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayToggleButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ThumbnailOverlayToggleButton'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nis_toggled?: boolean\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nicon_type: object\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntooltip: object\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoggled_endpoint?: NavigationEndpoint\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nuntoggled_endpoint?: NavigationEndpoint\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThumbnailOverlayToggleButton(data: RawNode): ThumbnailOverlayToggleButton\n```\n\n----------------------------------------\n\nTITLE: Initializing PlaylistPanelContinuation Class in TypeScript\nDESCRIPTION: Class definition for PlaylistPanelContinuation that extends YTNode. Contains properties for contents and continuation data, and inherits type checking methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/PlaylistPanelContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistPanelContinuation extends YTNode {\n  static readonly type: string = 'playlistPanelContinuation';\n  continuation: string;\n  contents: null | ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using inherited as method for type casting in YTNode (TypeScript)\nDESCRIPTION: Inherited method `as` from the base `YTNode` class. It attempts to cast the current node instance to one of the provided `YTNode` subtypes (passed as `YTNodeConstructor` arguments). It returns the cast instance or throws an error if the cast is not possible.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterHeader.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nas<T, K>(...types): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing EmojiPickerUpsellCategory Class in TypeScript\nDESCRIPTION: Class definition for EmojiPickerUpsellCategory that extends YTNode. Contains properties for managing emoji picker upsell categories including category ID, titles, tooltips, endpoints and emoji IDs.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EmojiPickerUpsellCategory.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EmojiPickerUpsellCategory extends YTNode {\n  static type: string = 'EmojiPickerUpsellCategory';\n  category_id: string;\n  title: Text;\n  upsell: Text;\n  emoji_tooltip: string;\n  endpoint: NavigationEndpoint;\n  emoji_ids: string[];\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Class in TypeScript\nDESCRIPTION: This code defines the Message class which extends YTNode. It has a 'text' property of type Text and a static 'type' property set to 'Message'. The constructor takes a RawNode data parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Message.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Message extends YTNode {\n  static type = 'Message';\n\n  text: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.text = new Text(data.text);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TranscriptSegment Class Definition in TypeScript\nDESCRIPTION: The TranscriptSegment class extends YTNode to represent a segment of a YouTube video transcript. It includes properties for segment timing (start_ms, end_ms), the actual transcript text (snippet), timing display text (start_time_text), and segment identification (target_id).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSegment.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TranscriptSegment'\n```\n\n----------------------------------------\n\nTITLE: Defining SearchFilterOptionsDialog Class Extending YTNode in TypeScript\nDESCRIPTION: Defines the SearchFilterOptionsDialog class which extends the YTNode base class to represent a dialog for search filter options in the YouTube.js parser. It specifies a constructor which takes in a RawNode object and defines properties like groups (an ObservedArray of SearchFilterGroups) and title (as a Text node), as well as methods for type checking and safe access. Dependencies include the ObservedArray, SearchFilterGroup, Text types, and the YTNode base class. Inputs include the data parameter (of type RawNode) for instantiation, with outputs being an initialized SearchFilterOptionsDialog object. The class ensures type safety and allows integration with other parser components.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterOptionsDialog.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SearchFilterOptionsDialog extends YTNode {\n  static type = 'SearchFilterOptionsDialog';\n  title: Text;\n  groups: ObservedArray<SearchFilterGroup>;\n\n  constructor(data: RawNode) {\n    super();\n    // ...implementation details\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parse Item with Generic Type Constraints\nDESCRIPTION: Parses a YouTube data node with type parameters T extending YTNode and K extending array of YTNode constructors. Returns instance of valid type or null.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseItem<T extends YTNode, K extends YTNodeConstructor<T>[]>(data: undefined | RawNode, validTypes: K): InstanceType<K[number]> | null\n```\n\n----------------------------------------\n\nTITLE: LiveChatProductItem Class Definition in TypeScript\nDESCRIPTION: Class definition for LiveChatProductItem that extends YTNode. Used to represent product items in YouTube live chat with various properties including title, price, vendor information, and creator details.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatProductItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatProductItem extends YTNode {\n  static type = 'LiveChatProductItem';\n\n  title: string;\n  accessibility_title: string;\n  thumbnail: Thumbnail[];\n  price: string;\n  vendor_name: string;\n  from_vendor_text: string;\n  information_button: YTNode;\n  endpoint: NavigationEndpoint;\n  creator_message: string;\n  creator_name: string;\n  author_photo: Thumbnail[];\n  information_dialog: YTNode;\n  is_verified: boolean;\n  creator_custom_message: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining History Class in TypeScript\nDESCRIPTION: Defines the History class which extends the Feed class. It includes properties for sections and feed actions, and methods for retrieving continuation data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/History.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass History extends Feed<IBrowseResponse> {\n  sections: ItemSection[];\n  feed_actions: BrowseFeedActions;\n\n  constructor(actions: Actions, data: ApiResponse | IBrowseResponse, already_parsed = false) {\n    super(actions, data, already_parsed);\n  }\n\n  getContinuation(): Promise<History> {\n    return super.getContinuation(History);\n  }\n\n  getContinuationData(): Promise<IBrowseResponse | undefined> {\n    return super.getContinuationData();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing KidsBlocklistPicker Class in TypeScript\nDESCRIPTION: Defines a class for handling YouTube Kids blocklist picker functionality. The class extends YTNode and includes properties for managing child rows, done button, toast messages and title. Contains methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsBlocklistPicker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass KidsBlocklistPicker extends YTNode {\n  static type = 'KidsBlocklistPicker';\n\n  title: Text;\n  child_rows: null | KidsBlocklistPickerItem[];\n  done_button: null | Button;\n  successful_toast_action_message: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HighlightsCarousel Class Constructor in TypeScript\nDESCRIPTION: Constructor for the HighlightsCarousel class that accepts a RawNode data parameter and returns a new HighlightsCarousel instance. It extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HighlightsCarousel.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew HighlightsCarousel(`data`): [`HighlightsCarousel`](HighlightsCarousel.md)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Playlists from Memo in FilteredChannelList\nDESCRIPTION: This static method retrieves all playlists on a given page via memo. It returns an ObservedArray of playlist types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/FilteredChannelList.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Implementing UniversalCache Constructor in TypeScript\nDESCRIPTION: Constructor for the UniversalCache class that accepts parameters for persistent caching configuration. It takes a boolean flag to enable persistent caching and an optional directory path for storing the cache.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/UniversalCache.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew UniversalCache(persistent, persistent_directory?): UniversalCache\n```\n\n----------------------------------------\n\nTITLE: Searching YouTube Kids Content\nDESCRIPTION: Method to search for content on YouTube Kids using a query string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Kids.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nsearch(query: string): Promise<Search>\n```\n\n----------------------------------------\n\nTITLE: CarouselLockup Class Properties\nDESCRIPTION: Definition of class properties including info_rows array of InfoRow objects, video_lockup optional property, and static type identifier.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselLockup.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CarouselLockup';\ninfo_rows: ObservedArray<InfoRow>;\nvideo_lockup?: null | CompactVideo;\n```\n\n----------------------------------------\n\nTITLE: Static Thumbnail Parser Method\nDESCRIPTION: Static method that parses thumbnail data from YouTube API response objects and returns an array of Thumbnail instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Thumbnail.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic fromResponse(data: any): Thumbnail[]\n```\n\n----------------------------------------\n\nTITLE: Defining MusicMultiSelectMenu Class Constructor\nDESCRIPTION: Constructor implementation for MusicMultiSelectMenu class that takes a RawNode data parameter and initializes a new instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicMultiSelectMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MusicMultiSelectMenu(data: RawNode): MusicMultiSelectMenu\n```\n\n----------------------------------------\n\nTITLE: Utility Methods Implementation for ActiveAccountHeader\nDESCRIPTION: Implementation of utility methods inherited from YTNode including type checking (is), type casting (as), and property access methods (hasKey, key).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ActiveAccountHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ActiveAccountHeader & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: ClipCreation Constructor in TypeScript\nDESCRIPTION: This snippet shows the constructor for the ClipCreation class. It takes a RawNode parameter and calls the parent constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipCreation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(data: RawNode): ClipCreation {\n  // Constructor implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InnertubeError Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the InnertubeError class that extends the Error class. Takes a message string and optional info parameter to create customized error instances for YouTube API related errors.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/InnertubeError.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew InnertubeError(message: string, info?: any): InnertubeError\n```\n\n----------------------------------------\n\nTITLE: Defining MusicMultiSelectMenuItem Class in TypeScript\nDESCRIPTION: This code defines the MusicMultiSelectMenuItem class, which extends YTNode. It includes properties for title, form item entity key, selected icon type, endpoint, and selected status.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicMultiSelectMenuItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicMultiSelectMenuItem extends YTNode {\n  static type = 'MusicMultiSelectMenuItem';\n\n  title: string;\n  form_item_entity_key: string;\n  selected_icon_type?: string;\n  endpoint?: NavigationEndpoint;\n  selected: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation in TypeScript\nDESCRIPTION: Implementation of inherited type checking and key access methods from YTNode including is(), as(), hasKey(), and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/PlaylistPanelContinuation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is PlaylistPanelContinuation & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Static CaptureStackTrace Method Implementation\nDESCRIPTION: Static utility method to create a .stack property on a target object, with an optional constructor parameter for stack trace customization.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/InnertubeError.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic captureStackTrace(targetObject: object, constructorOpt?: Function): void\n```\n\n----------------------------------------\n\nTITLE: Decoding Visitor Data in TypeScript\nDESCRIPTION: This function decodes a YouTube visitor data string into a VisitorData object. It takes a string parameter 'visitor_data' and returns a VisitorData object. The function is defined in the ProtoUtils.ts file of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/functions/decodeVisitorData.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndecodeVisitorData(visitor_data: string): VisitorData\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Casting Method 'as' in YTNode (TypeScript)\nDESCRIPTION: Defines the generic `as` method inherited from `YTNode`. This utility method allows casting the current node instance to one or more specified `YTNode` derived types (`K`), throwing an error if the instance's type doesn't match any of the provided types. It requires `YTNode` and `YTNodeConstructor` types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: LiveChatModeChangeMessage Class Definition in TypeScript\nDESCRIPTION: Class definition for handling YouTube live chat mode change messages with properties for message identification, content, and timing. Extends the base YTNode class and includes type checking and key access methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatModeChangeMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatModeChangeMessage extends YTNode {\n  static type = 'LiveChatModeChangeMessage';\n  id: string;\n  icon_type: string;\n  text: Text;\n  subtext: Text;\n  timestamp: number;\n  timestamp_usec: string;\n  timestamp_text: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FeedTabbedHeader Class Constructor - TypeScript\nDESCRIPTION: Constructor for the FeedTabbedHeader class that extends YTNode. Takes RawNode data as a parameter and returns a new FeedTabbedHeader instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FeedTabbedHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew FeedTabbedHeader(data: RawNode): FeedTabbedHeader\n```\n\n----------------------------------------\n\nTITLE: Implementing hasKey Method for Property Existence in RemoveChatItemAction in TypeScript\nDESCRIPTION: The hasKey<T, R>(key) method checks if the RemoveChatItemAction node has a specified property, without asserting its type. It returns a type guard indicating whether the key exists, enhancing dynamic property checks during runtime parsing logic. The method is generic with T for key and R for the expected type, and relies on basic JavaScript object property checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemAction.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is RemoveChatItemAction & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Lyrics in TypeScript\nDESCRIPTION: Method to fetch lyrics for a song using its video ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ngetLyrics(video_id: string): Promise<undefined | MusicDescriptionShelf>\n```\n\n----------------------------------------\n\nTITLE: Defining WatchNextEndScreen Class in TypeScript\nDESCRIPTION: This code snippet defines the WatchNextEndScreen class, which extends YTNode. It includes a constructor, properties for results and title, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchNextEndScreen.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WatchNextEndScreen extends YTNode {\n  static type = 'WatchNextEndScreen';\n\n  results: ObservedArray<EndScreenPlaylist | EndScreenVideo>;\n  title: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.results = observe(data.results.map((result: any) => parseItem(result)));\n    this.title = data.title;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining InteractiveTabbedHeader Class in TypeScript\nDESCRIPTION: Class definition for InteractiveTabbedHeader that extends YTNode. Contains properties for header type, title, description, metadata, badges, thumbnails, buttons and auto-generated text. Includes constructor and inherited utility methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/InteractiveTabbedHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass InteractiveTabbedHeader extends YTNode {\n  static type = 'InteractiveTabbedHeader';\n  header_type: string;\n  title: Text;\n  description: Text;\n  metadata: Text;\n  badges: MetadataBadge[];\n  box_art: Thumbnail[];\n  banner: Thumbnail[];\n  buttons: ObservedArray<Button | SubscribeButton>;\n  auto_generated: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommentActionParamsArgs Type Alias in TypeScript\nDESCRIPTION: Defines a type alias 'CommentActionParamsArgs' as an object with optional string properties for comment_id, target_language, text, and video_id. This type is likely used for handling YouTube comment-related actions in the youtubei.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/type-aliases/CommentActionParamsArgs.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CommentActionParamsArgs = {\n  comment_id?: string;\n  target_language?: string;\n  text?: string;\n  video_id?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MusicDescriptionShelf Class in TypeScript\nDESCRIPTION: Class definition for MusicDescriptionShelf that extends YTNode. Contains properties for description, footer, and collapsible content settings. Includes constructor and inherited utility methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicDescriptionShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicDescriptionShelf extends YTNode {\n  static type = 'MusicDescriptionShelf';\n  \n  description: Text;\n  max_collapsed_lines?: string;\n  max_expanded_lines?: string;\n  footer: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CreateCommentEndpoint buildRequest Implementation\nDESCRIPTION: Implementation of the IEndpoint interface's buildRequest method that constructs and returns a CreateCommentRequest object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreateCommentEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuildRequest(): CreateCommentRequest\n```\n\n----------------------------------------\n\nTITLE: Defining MerchandiseItem Class Properties - TypeScript\nDESCRIPTION: Class definition with properties for a YouTube merchandise item including title, description, price, thumbnails, vendor details and navigation endpoints.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MerchandiseItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MerchandiseItem extends YTNode {\n  static type = 'MerchandiseItem';\n  title: string;\n  description: string;\n  thumbnails: Thumbnail[];\n  price: string;\n  vendor_name: string;\n  button_text: string;\n  button_accessibility_text: string;\n  from_vendor_text: string;\n  additional_fees_text: string;\n  region_format: string;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SectionListContinuation Class in TypeScript\nDESCRIPTION: This code snippet defines the SectionListContinuation class, which extends YTNode. It includes the constructor, properties, and static type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/SectionListContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SectionListContinuation extends YTNode {\n  static type = 'sectionListContinuation';\n\n  continuation: string;\n  contents: null | ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation not shown in the provided snippet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining filter_menu property in SortFilterHeader (TypeScript)\nDESCRIPTION: Declares the `filter_menu` property within the SortFilterHeader class. This property can hold either `null` or an instance of `SortFilterSubMenu`, representing the associated filter menu data, if present.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfilter_menu: null | SortFilterSubMenu\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties of UpdateEngagementPanelAction in TypeScript\nDESCRIPTION: Declaration of the class properties including target_id (string) and content (null or Transcript), along with the static and readonly type property that identifies this node type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateEngagementPanelAction.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntarget_id: string\ncontent: null | Transcript\nstatic type: string = 'UpdateEngagementPanelAction'\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: EmergencyOnebox Class Definition in TypeScript\nDESCRIPTION: The EmergencyOnebox class extends YTNode and provides structure for emergency information boxes that appear on YouTube. It contains properties for title, first_option, and menu, as well as inherited methods from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EmergencyOnebox.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass EmergencyOnebox extends YTNode {\n  static type = 'EmergencyOnebox';\n\n  title: Text;\n  first_option: YTNode;\n  menu: null | Menu;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n    this.first_option = Parser.parseItem(data.firstOption);\n    this.menu = Parser.parseItem(data.menu);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Class for PlayerAnnotationsExpanded\nDESCRIPTION: Class definition for PlayerAnnotationsExpanded that extends YTNode. Includes properties for annotation control and featured channel information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerAnnotationsExpanded.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlayerAnnotationsExpanded extends YTNode {\n  static type: string = 'PlayerAnnotationsExpanded';\n\n  featured_channel?: {\n    channel_name: string;\n    end_time_ms: number;\n    endpoint: NavigationEndpoint;\n    start_time_ms: number;\n    subscribe_button: null | YTNode;\n    watermark: Thumbnail[];\n  };\n\n  allow_swipe_dismiss: boolean;\n  annotation_id: string;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tooltip Class Definition in TypeScript\nDESCRIPTION: This code snippet shows the Tooltip class definition including its properties and constructor. The Tooltip class extends YTNode and contains properties for target ID, details, positioning, dismissal strategy, and promotional configuration.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Tooltip.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'Tooltip';\n\npromo_config: {\n  promo_id: string;\n  impression_endpoints: NavigationEndpoint[];\n  accept: NavigationEndpoint;\n  dismiss: NavigationEndpoint;\n};\n\ntarget_id: string;\ndetails: Text;\nsuggested_position: string;\ndismiss_stratedy: string;\ndwell_time_ms: number;\n\nconstructor(data: RawNode): Tooltip {\n  super(data);\n}\n```\n\n----------------------------------------\n\nTITLE: InfoRow Class Definition in TypeScript\nDESCRIPTION: The InfoRow class extends YTNode and represents an information row with title and metadata. The class contains properties for title, default metadata, expanded metadata, and an expand status key. It includes a constructor that takes a RawNode data object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/InfoRow.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'InfoRow'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text;\ndefault_metadata?: Text;\nexpanded_metadata?: Text;\ninfo_row_expand_status_key?: string;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): InfoRow\n```\n\n----------------------------------------\n\nTITLE: Implementing GuideEntry Class in TypeScript\nDESCRIPTION: Class definition for handling YouTube guide entry elements. Extends YTNode and includes properties for navigation endpoints, thumbnails, badges and other guide entry attributes. Contains constructor and inherited utility methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GuideEntry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GuideEntry extends YTNode {\n    static type = 'GuideEntry';\n\n    title: Text;\n    endpoint: NavigationEndpoint;\n    icon_type?: string;\n    thumbnails?: Thumbnail[];\n    badges?: any;\n    is_primary: boolean;\n\n    constructor(data: RawNode) {\n        super(data);\n    }\n\n    as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n    hasKey<T extends string, R = any>(key: T): this is GuideEntry & { [k in string]: R };\n    is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n    key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing YouTube Video Formats in TypeScript\nDESCRIPTION: This function parses raw format data from YouTube's API response into an array of Format objects. It takes in an array of RawNode objects representing the formats and a Map for caching signatures.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseFormats.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nparseFormats(formats: RawNode[], this_response_nsig_cache: Map<string, string>): Format[]\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateVideoMetadataOptions Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition that specifies all possible options for updating YouTube video metadata. Includes properties for age restrictions, category, description, license, privacy settings, tags, thumbnail, and title.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/UpdateVideoMetadataOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UpdateVideoMetadataOptions = Partial<{\n  age_restricted: boolean;\n  category: number;\n  description: string;\n  license: string;\n  made_for_kids: boolean;\n  privacy: \"PUBLIC\" | \"PRIVATE\" | \"UNLISTED\";\n  tags: string[];\n  thumbnail: Uint8Array;\n  title: string;\n}>\n```\n\n----------------------------------------\n\nTITLE: Library Class Constructor - TypeScript\nDESCRIPTION: Constructor for the Library class that accepts API response and actions parameters. Initializes the library instance with header and contents properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Library.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Library(response: ApiResponse, actions: Actions): Library\n```\n\n----------------------------------------\n\nTITLE: TwoColumnBrowseResults Class Definition in TypeScript\nDESCRIPTION: The TwoColumnBrowseResults class extends YTNode and contains properties for tabs and secondary contents. It has a constructor that takes RawNode data and initializes the class properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TwoColumnBrowseResults.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TwoColumnBrowseResults'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntabs: SuperParsedResult<YTNode>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsecondary_contents: SuperParsedResult<YTNode>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): TwoColumnBrowseResults\n```\n\n----------------------------------------\n\nTITLE: Defining GuideSection Class in TypeScript\nDESCRIPTION: Defines the GuideSection class which extends YTNode. It has properties for title and items, and a constructor that takes RawNode data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GuideSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GuideSection extends YTNode {\n  static type = 'GuideSection';\n\n  title?: Text;\n  items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = Reflect.has(data, 'title') ? new Text(data.title) : undefined;\n    this.items = Parser.parseArray(data.items);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoDescriptionMusicSection Class in TypeScript\nDESCRIPTION: This code defines the VideoDescriptionMusicSection class, which extends YTNode. It includes properties for carousel lockups and section title, as well as a constructor and inherited methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionMusicSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoDescriptionMusicSection extends YTNode {\n  static type = 'VideoDescriptionMusicSection';\n\n  carousel_lockups: ObservedArray<CarouselLockup>;\n  section_title: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.carousel_lockups = Parser.parseArray(data.carouselLockups, CarouselLockup);\n    this.section_title = new Text(data.sectionTitle);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Account Channels in TypeScript\nDESCRIPTION: Method to retrieve a list of channels belonging to the signed-in account. This is only useful when signed in through a cookie. If signed in through OAuth, it will return only the active channel.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/AccountManager.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetInfo(all: true): Promise<AccountItem[]>\n```\n\n----------------------------------------\n\nTITLE: Converting ReadableStream to AsyncGenerator in TypeScript\nDESCRIPTION: The streamToIterable function takes a ReadableStream of Uint8Array as input and returns an AsyncGenerator that yields Uint8Array chunks. This function is useful for converting stream data into an iterable format for easier processing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/streamToIterable.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstreamToIterable(stream: ReadableStream<Uint8Array>): AsyncGenerator<Uint8Array, void, unknown>\n```\n\n----------------------------------------\n\nTITLE: One-time Event Listener Registration\nDESCRIPTION: Method to register a one-time event listener that will be automatically removed after execution.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/EventEmitter.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nonce(type: string, listener): void\n```\n\n----------------------------------------\n\nTITLE: Merging Key Info in TypeScript for YouTube.js Generator\nDESCRIPTION: This function merges two KeyInfo objects, resolving conflicts and returning a new object with changed keys and resolved key info. It takes two parameters of type KeyInfo and returns an object with changed_keys and resolved_key_info arrays.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/mergeKeyInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmergeKeyInfo(key_info: KeyInfo, new_key_info: KeyInfo): object\n```\n\n----------------------------------------\n\nTITLE: Search Refinement Selection\nDESCRIPTION: Method to apply a refinement card to search results and return updated results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nselectRefinementCard(card: string | SearchRefinementCard): Promise<Search>\n```\n\n----------------------------------------\n\nTITLE: Defining RemoveChatItemAction Constructor in TypeScript\nDESCRIPTION: Implements the constructor for RemoveChatItemAction, allowing instantiation with a RawNode data object. This sets up the object based on the data provided according to YTNode inheritance. The constructor enforces type structure and ensures the class is composable within the wider parsing framework.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(data: RawNode): RemoveChatItemAction\n```\n\n----------------------------------------\n\nTITLE: Implementing the as Method for Type Casting - TypeScript\nDESCRIPTION: The as<T, K>() method allows dynamic type casting for YTNode-based classes, letting you cast the current node to one of the specified constructor types, throwing an error if the cast fails. Dependencies include TypeScript generics, YTNodeConstructor, and proper runtime type metadata. The method expects a variadic list of type constructors and returns an instance of the appropriate casted type on success. The major limitation is that improper type use or runtime type mismatches will result in errors.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerOverlay.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Cast to one of the given types.\n * @throws If the node is not of the given type\n */\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // implementation to cast to one of the provided types\n  // throws if casting fails\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RelatedChipCloud Class Extending YTNode - TypeScript\nDESCRIPTION: This code snippet defines the RelatedChipCloud class, which extends the base YTNode class in TypeScript, as part of a parser for YouTube.js. It implements a constructor that accepts a RawNode type parameter and exposes properties like content and static/read-only type to identify node kind. Common reusable methods such as as(), is(), hasKey(), and key() are inherited from YTNode to provide runtime type assertion and safe property access. The snippet requires YouTube.js internal modules such as YTNode, RawNode, and possibly other node constructors. Inputs include a RawNode instance, and outputs are RelatedChipCloud instances supporting rich type-style meta-operations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RelatedChipCloud.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RelatedChipCloud extends YTNode {\n  static type: string = 'RelatedChipCloud';\n  content: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    // ... actual property initialization omitted in this snippet\n  }\n\n  // Inherits methods: as(), is(), hasKey(), key() from YTNode\n}\n```\n\n----------------------------------------\n\nTITLE: Deciphering URL in Format Class (TypeScript)\nDESCRIPTION: This method deciphers the URL using the provided player instance. It takes an optional Player object as a parameter and returns the deciphered URL as a string. If no player is provided, it returns the original URL or an empty string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Format.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ndecipher(player?: Player): string {\n  // Method implementation not shown in the provided snippet\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Contents Property for SingleColumnMusicWatchNextResults (TypeScript)\nDESCRIPTION: Declares the `contents` property for the `SingleColumnMusicWatchNextResults` class. This property holds a `SuperParsedResult` containing an array of parsed `YTNode` objects, representing the individual items (like video suggestions) within the 'watch next' section.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleColumnMusicWatchNextResults.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: SuperParsedResult<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Using inherited hasKey method for property checking in YTNode (TypeScript)\nDESCRIPTION: Inherited method `hasKey` from the base `YTNode` class. Checks if the current node instance has a specific property key without asserting the type of the property's value. Returns a type predicate confirming the key's existence and refining the object's type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterHeader.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T, R>(key): this is SortFilterHeader & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Constructing a CommentView instance in TypeScript\nDESCRIPTION: Constructor for the CommentView class that takes raw node data and initializes a new comment view instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **new CommentView**(`data`): [`CommentView`](CommentView.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Duration Type Alias in TypeScript for YouTube Video Filtering\nDESCRIPTION: This code snippet defines a custom type alias named 'Duration' for use in YouTube video filtering. It represents the possible duration categories a video can fall into: 'all', 'short', 'medium', or 'long'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/Duration.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Duration = \"all\" | \"short\" | \"medium\" | \"long\";\n```\n\n----------------------------------------\n\nTITLE: Getting Videos from Memo in TypeScript\nDESCRIPTION: Static method to extract all videos from a given memo page. Returns an ObservedArray containing various video types including standard videos, shorts, and playlist videos.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ChannelListContinuation.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: VideoPrimaryInfo Constructor in TypeScript\nDESCRIPTION: Constructor for the VideoPrimaryInfo class which takes a RawNode data parameter and initializes the class instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoPrimaryInfo.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew VideoPrimaryInfo(data: RawNode): VideoPrimaryInfo\n```\n\n----------------------------------------\n\nTITLE: Inherited 'hasKey' Method for Property Existence Check in YTNode (TypeScript)\nDESCRIPTION: Details the `hasKey` method inherited from `YTNode`. This method checks if the `SendFeedbackAction` instance possesses a property with the specified `key` (string `T`). It returns a boolean type predicate (`this is SendFeedbackAction & { [k in string]: R }`) which narrows the type if the key exists, without asserting the value's specific type (`R` defaults to `any`).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SendFeedbackAction.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SendFeedbackAction & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Defining ThumbnailOverlayPlaybackStatus Class in TypeScript\nDESCRIPTION: Class definition for ThumbnailOverlayPlaybackStatus which extends YTNode. The class has a static type property, a texts property to store Text objects, and inherits methods from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayPlaybackStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ThumbnailOverlayPlaybackStatus'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntexts: Text[]\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThumbnailOverlayPlaybackStatus(data: RawNode): ThumbnailOverlayPlaybackStatus\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2Error Class in TypeScript\nDESCRIPTION: This code snippet defines the OAuth2Error class, which extends InnertubeError. It includes the constructor and inherited properties. The class is designed to handle OAuth2-specific errors in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/OAuth2Error.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass OAuth2Error extends InnertubeError {\n  constructor(message: string, info?: any): OAuth2Error {\n    super(message, info);\n  }\n\n  // Inherited properties\n  cause?: unknown;\n  date: Date;\n  info?: any;\n  message: string;\n  name: string;\n  stack?: string;\n  version: string;\n\n  // Static members\n  static prepareStackTrace?: (err: Error, stackTraces: CallSite[]) => any;\n  static stackTraceLimit: number;\n\n  // Static method\n  static captureStackTrace(targetObject: object, constructorOpt?: Function): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Select Language Method - TypeScript\nDESCRIPTION: Asynchronous method to select a specific language for the transcript and return updated transcript information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/TranscriptInfo.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nselectLanguage(language: string): Promise<TranscriptInfo>\n```\n\n----------------------------------------\n\nTITLE: Building Delete Playlist Request in TypeScript\nDESCRIPTION: Implementation of the buildRequest method that constructs a DeletePlaylistServiceRequest object for the YouTube API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DeletePlaylistEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRequest(): [`DeletePlaylistServiceRequest`](../../APIResponseTypes/type-aliases/DeletePlaylistServiceRequest.md)\n```\n\n----------------------------------------\n\nTITLE: Fetching Playlists from YouTube Channel\nDESCRIPTION: This method retrieves the playlists of the channel. It returns a Promise that resolves to a Channel object containing the playlist data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPlaylists(): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Defining the SearchSuggestion Class Constructor in TypeScript\nDESCRIPTION: This constructor initializes a new instance of the `SearchSuggestion` class. It takes raw node data (`RawNode`) typically received from the YouTube API as input and sets up the properties of the `SearchSuggestion` object. It overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSuggestion.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SearchSuggestion(data: RawNode): SearchSuggestion\n```\n\n----------------------------------------\n\nTITLE: Defining CommentActionButtons Class in TypeScript\nDESCRIPTION: This class represents the action buttons for a YouTube comment. It includes properties for like, dislike, reply buttons, and creator heart. The class extends YTNode and is initialized with raw node data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentActionButtons.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CommentActionButtons extends YTNode {\n  static type = 'CommentActionButtons';\n\n  like_button: null | ToggleButton;\n  dislike_button: null | ToggleButton;\n  reply_button: null | Button;\n  creator_heart: null | CreatorHeart;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details not provided in the snippet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Blocking YouTube Kids Channel\nDESCRIPTION: Method to block a YouTube Kids channel across all supervised accounts. Takes a channel ID and returns an array of API responses.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Kids.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nblockChannel(channel_id: string): Promise<ApiResponse[]>\n```\n\n----------------------------------------\n\nTITLE: LiveChat Class Definition in TypeScript\nDESCRIPTION: TypeScript class definition for LiveChat that extends YTNode. Handles live chat functionality with properties for managing chat state, client messages, continuation tokens, and replay status.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChat.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChat extends YTNode {\n  static type = 'LiveChat';\n  header: YTNode;\n  initial_display_state: string;\n  continuation: string;\n  client_messages: {\n    fatal_error: Text;\n    generic_error: Text;\n    reconnect_message: Text;\n    reconnected_message: Text;\n    unable_to_reconnect_message: Text;\n  };\n  is_replay: boolean;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileColumnUserInfo YTNode Class - TypeScript\nDESCRIPTION: This snippet details the ProfileColumnUserInfo class, which extends from the YTNode base class within the YouTube.js codebase. It provides a constructor that receives a RawNode object, interprets profile column data, and sets properties such as 'thumbnails' and 'title'. Common functionalities, such as type assertion and property checking, are inherited from YTNode. Dependencies include YTNode, RawNode, and utility types; expected to work inside the YouTube.js parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProfileColumnUserInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Class: ProfileColumnUserInfo\n * Extends: YTNode\n * Description: Represents a column displaying user info on a YouTube profile.\n */\n\nclass ProfileColumnUserInfo extends YTNode {\n  static type: string = 'ProfileColumnUserInfo';\n\n  /**\n   * The display title for the profile column user info.\n   * @type {Text}\n   */\n  title: Text;\n  \n  /**\n   * Array of thumbnails for the profile column.\n   * @type {Thumbnail[]}\n   */\n  thumbnails: Thumbnail[];\n\n  /**\n   * Constructs a ProfileColumnUserInfo node.\n   * @param {RawNode} data The raw data node from YouTube API response.\n   */\n  constructor(data: RawNode) {\n    super();\n    // ... implementation to parse title and thumbnails from data\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining MusicThumbnail Class in TypeScript\nDESCRIPTION: This code snippet defines the MusicThumbnail class, which extends YTNode. It includes a constructor, properties for thumbnail contents, and inherited methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicThumbnail.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicThumbnail extends YTNode {\n  static type = 'MusicThumbnail';\n\n  contents: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    this.contents = Thumbnail.fromResponse(data.thumbnail);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the ShareEntityEndpoint Class - TypeScript\nDESCRIPTION: Defines the ShareEntityEndpoint class as a subclass of ShareEntityServiceEndpoint, including inheritance hierarchies and basic TypeScript class structure. It establishes a new endpoint for sharing entities in the YouTube.js parser ecosystem and introduces static and instance properties such as \"type\" for class identification. This organization enables extension and polymorphism in consuming code based on the YouTube.js API model.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEntityEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ShareEntityEndpoint extends ShareEntityServiceEndpoint {\n  static type: string = 'ShareEntityEndpoint';\n  readonly type: string;\n  constructor(data: RawNode) {\n    super(data);\n  }\n  // ... additional inherited and class-specific methods\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelOwnerEmptyState Class in TypeScript\nDESCRIPTION: This code defines the ChannelOwnerEmptyState class, which extends YTNode. It includes properties for illustration (an array of Thumbnail objects) and description (a Text object), and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelOwnerEmptyState.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ChannelOwnerEmptyState extends YTNode {\n  static type = 'ChannelOwnerEmptyState';\n\n  illustration: Thumbnail[];\n  description: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.illustration = data.illustration.image.thumbnails;\n    this.description = new Text(data.description);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: SuperParsedResult Data Access Methods Implementation\nDESCRIPTION: Methods for retrieving the parsed data in the correct type format - either as an array or single item.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/SuperParsedResult.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\narray(): ObservedArray<T>\nitem(): T\n```\n\n----------------------------------------\n\nTITLE: Class Definition for CommentsSimplebox in TypeScript\nDESCRIPTION: The class definition for CommentsSimplebox which extends YTNode. It includes properties for simplebox_avatar (array of Thumbnail objects) and simplebox_placeholder (Text object), representing a comment input box in YouTube's interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsSimplebox.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CommentsSimplebox extends YTNode {\n  static type = 'CommentsSimplebox';\n\n  simplebox_avatar: Thumbnail[];\n  simplebox_placeholder: Text;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatPaidSticker Class Constructor in TypeScript\nDESCRIPTION: Constructor for LiveChatPaidSticker class that takes a RawNode data parameter and extends YTNode base class. Used to initialize a paid sticker message instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatPaidSticker.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew LiveChatPaidSticker(`data`): [`LiveChatPaidSticker`](LiveChatPaidSticker.md)\n```\n\n----------------------------------------\n\nTITLE: Defining InfoPanelContent Class in TypeScript\nDESCRIPTION: This snippet defines the InfoPanelContent class with its properties and constructor. It extends the YTNode class and includes various properties for title, source, paragraphs, and other elements of an information panel.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/InfoPanelContent.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass InfoPanelContent extends YTNode {\n  static type = 'InfoPanelContent';\n\n  title: Text;\n  source: Text;\n  paragraphs?: Text[];\n  attributed_paragraphs?: Text[];\n  thumbnail: Thumbnail[];\n  source_endpoint: NavigationEndpoint;\n  truncate_paragraphs: boolean;\n  background: string;\n  inline_link_icon_type?: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting API Path in TypeScript\nDESCRIPTION: Implementation of the getApiPath method in the WatchEndpoint class that returns the API path string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetApiPath(): string {\n  return '/next';\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring and Documenting the Quiz Class - TypeScript\nDESCRIPTION: This snippet demonstrates the declaration and documentation of the Quiz class, which extends the YTNode base class used in YouTube.js for parsing API responses. The Quiz class constructor accepts a RawNode data parameter, initializes core properties such as choices (an array of answer options) and total_votes (representing the total votes as a Text node), and overrides the type property to specify 'Quiz'. Inherited methods provide type-checking, safe property access, and casting, enabling robust API node manipulation. The code depends on proper definitions of YTNode, RawNode, and Text classes/types, and expects data matching the YouTube API structure.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Quiz.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Class: Quiz\n * Extends YTNode to represent a Quiz node within the YouTube.js data model.\n */\nclass Quiz extends YTNode {\n  /**\n   * choices: object[]\n   * List of possible choices in the quiz.\n   */\n  choices: object[];\n\n  /**\n   * total_votes: Text\n   * Represents the total number of votes for the quiz question.\n   */\n  total_votes: Text;\n\n  /**\n   * type: string\n   * (readonly) Node type as defined by YTNode.\n   */\n  readonly type: string;\n\n  /**\n   * type: string = 'Quiz' (static)\n   * Static node type identifier.\n   */\n  static type: string = 'Quiz';\n\n  /**\n   * Constructor for Quiz class.\n   * @param data - The raw node data to initialize this Quiz instance, expected to follow the RawNode type.\n   */\n  constructor(data: RawNode) {\n    super();\n    // (Initialization logic would go here)\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining AccountSectionList Class in TypeScript\nDESCRIPTION: Class definition for AccountSectionList that extends YTNode. It contains properties for contents and footers arrays, along with inherited methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AccountSectionList.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AccountSectionList extends YTNode {\n  static type = 'AccountSectionList';\n\n  contents: ObservedArray<AccountItemSection>;\n  footers: ObservedArray<AccountChannel>;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is AccountSectionList & { [k in string]: R };\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatSponsorshipsHeader Class in TypeScript\nDESCRIPTION: This code snippet defines the LiveChatSponsorshipsHeader class, which extends YTNode. It includes the class constructor and various properties related to live chat sponsorship headers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatSponsorshipsHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatSponsorshipsHeader extends YTNode {\n  static type = 'LiveChatSponsorshipsHeader';\n\n  author_name: Text;\n  author_photo: Thumbnail[];\n  author_badges: null | ObservedArray<LiveChatAuthorBadge>;\n  primary_text: Text;\n  menu_endpoint: NavigationEndpoint;\n  context_menu_accessibility_label: string;\n  image: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting hasKey Method in RichMetadata (TypeScript)\nDESCRIPTION: Inherits the `hasKey` method from the `YTNode` base class. This method checks if the node instance possesses a property with the specified key, returning a boolean type guard (`this is RichMetadata & { [k in string]: R }`) without asserting the type of the property's value.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is RichMetadata & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Item Menu from LiveChat in TypeScript\nDESCRIPTION: Asynchronous method to retrieve the menu for a given chat item. It returns a Promise that resolves to an ItemMenu object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetItemMenu(item: ChatItemWithMenu): Promise<ItemMenu>\n```\n\n----------------------------------------\n\nTITLE: Get Available Languages Method - TypeScript\nDESCRIPTION: Accessor method that returns an array of available languages for the transcript.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/TranscriptInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget languages(): string[]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Videos from Feed\nDESCRIPTION: Getter method that returns an ObservedArray containing various types of video objects from the feed. Inherits from the base Feed class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget videos(): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data in FilteredChannelList\nDESCRIPTION: This method retrieves the next batch of contents and returns a Promise of a new FilteredChannelList object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/FilteredChannelList.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<FilteredChannelList>\n```\n\n----------------------------------------\n\nTITLE: CreateCommentEndpoint Class Constructor\nDESCRIPTION: Constructor for the CreateCommentEndpoint class that takes a RawNode data parameter and returns a new CreateCommentEndpoint instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreateCommentEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew CreateCommentEndpoint(data: RawNode): CreateCommentEndpoint\n```\n\n----------------------------------------\n\nTITLE: Constructing ShowLiveChatDialogAction Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `ShowLiveChatDialogAction` class. It accepts raw node data (`RawNode`) conforming to the YouTube InnerTube API response structure for this action and initializes a new instance. This class extends `YTNode`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatDialogAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ShowLiveChatDialogAction(data: RawNode): ShowLiveChatDialogAction\n```\n\n----------------------------------------\n\nTITLE: Class Properties Definition - ChipView TypeScript\nDESCRIPTION: Core property definitions for the ChipView class including text, display_type, endpoint, chip_entity_key and type. These properties store the component's display and navigation data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChipView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntext: string;\ndisplay_type: string;\nendpoint: NavigationEndpoint;\nchip_entity_key: string;\nstatic type: string = 'ChipView';\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Class Constructor Implementation\nDESCRIPTION: Constructor implementation that initializes a new Thumbnail instance from raw node data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Thumbnail.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew Thumbnail(data: RawNode): Thumbnail\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Text Property for Title in TypeScript\nDESCRIPTION: Declares an optional property `title` within the `SearchSubMenu` class. This property holds an instance of the `Text` class (likely representing formatted text) and corresponds to the title displayed for the search sub-menu.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional title: Text\n```\n\n----------------------------------------\n\nTITLE: Inherited Method: Checking for Key Existence on YTNode in TypeScript\nDESCRIPTION: Inherited from `YTNode`. This method checks if the `SimpleMenuHeader` instance possesses a property with the specified `key`. It acts as a type guard, narrowing the type of the instance if the key exists, without asserting the value's type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleMenuHeader.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SimpleMenuHeader & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Initializing YouTube Music Search Class Constructor\nDESCRIPTION: Constructor for the Search class that takes API response, actions, and optional filter flag as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Search.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Search(response: ApiResponse, actions: Actions, is_filtered?: boolean): Search\n```\n\n----------------------------------------\n\nTITLE: Get Videos From Memo - Static TypeScript Method\nDESCRIPTION: Static method to retrieve all videos from a given page memo. Returns an ObservedArray containing various video type nodes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/TabbedFeed.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: PlaylistVideo Class Definition in TypeScript\nDESCRIPTION: Class definition for PlaylistVideo that extends YTNode. Contains properties for video metadata and methods for checking video status.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistVideo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistVideo extends YTNode {\n  static type: string = 'PlaylistVideo';\n  id: string;\n  index: Text;\n  title: Text;\n  author: Author;\n  thumbnails: Thumbnail[];\n  thumbnail_overlays: ObservedArray<YTNode>;\n  set_video_id: undefined | string;\n  endpoint: NavigationEndpoint;\n  is_playable: boolean;\n  menu: null | Menu;\n  upcoming?: Date;\n  video_info: Text;\n  accessibility_label?: string;\n  style?: string;\n  duration: {\n    seconds: number;\n    text: string;\n  };\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  get is_live(): boolean {\n    return false;\n  }\n\n  get is_upcoming(): boolean {\n    return !!this.upcoming;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YTNode Type Checking Method in TypeScript\nDESCRIPTION: Implementation of the is() method inherited from YTNode that checks if the node is of one of the given types, using TypeScript generics for type safety.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSectionHeader.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: UpdateDateTextAction Class Definition in TypeScript\nDESCRIPTION: This code snippet defines the UpdateDateTextAction class that extends YTNode and is used to handle date text update actions in YouTube live chat. It includes a constructor that takes a RawNode parameter, properties for storing date text, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateDateTextAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass UpdateDateTextAction extends YTNode {\n  static type = 'UpdateDateTextAction';\n\n  date_text: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.date_text = data.dateText;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Choosing Format in MediaInfo Class\nDESCRIPTION: This inherited method selects the format that best matches the given options. It takes FormatOptions as input and returns a Format object that meets the specified criteria.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nchooseFormat(options: FormatOptions): Format\n```\n\n----------------------------------------\n\nTITLE: Defining ContentPreviewImageView Class in TypeScript\nDESCRIPTION: Class definition for ContentPreviewImageView that extends YTNode. It includes properties for storing image thumbnails and style information along with inherited functionality for type casting and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ContentPreviewImageView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ContentPreviewImageView'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimage: Thumbnail[]\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstyle: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): ContentPreviewImageView\n```\n\n----------------------------------------\n\nTITLE: Defining UploadDate Type Alias in TypeScript for YouTube.js\nDESCRIPTION: This code snippet defines the UploadDate type alias, which is a union type of string literals representing different time periods for content upload filtering. It includes options like 'all', 'hour', 'today', 'week', 'month', and 'year'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/UploadDate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UploadDate = \"all\" | \"hour\" | \"today\" | \"week\" | \"month\" | \"year\"\n```\n\n----------------------------------------\n\nTITLE: MetadataRowContainer Class Definition in TypeScript\nDESCRIPTION: Class definition for MetadataRowContainer that extends YTNode. Contains properties for rows array and collapsed item count, along with constructor and inherited methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataRowContainer.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MetadataRowContainer extends YTNode {\n  static type = 'MetadataRowContainer';\n  rows: ObservedArray<YTNode>;\n  collapsed_item_count: number;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  // Inherited methods\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is MetadataRowContainer & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Get Shelf Method Type Definition\nDESCRIPTION: Type definition for getShelf method that finds and returns a shelf by title. Can return ReelShelf, RichShelf, Shelf or undefined.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/History.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Defining DropdownItem Class in TypeScript\nDESCRIPTION: This snippet defines the DropdownItem class, which extends YTNode. It includes properties for label, selected state, value, icon type, description, and navigation endpoint. The class also includes a constructor and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DropdownItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DropdownItem extends YTNode {\n  static type = 'DropdownItem';\n\n  label: string;\n  selected: boolean;\n  value?: string | number;\n  icon_type?: string;\n  description?: Text;\n  endpoint?: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddChatItemAction Class in TypeScript\nDESCRIPTION: This code defines the AddChatItemAction class, which extends YTNode. It includes a constructor, properties for the chat item and client ID, and inherits methods from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddChatItemAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AddChatItemAction extends YTNode {\n  static type = 'AddChatItemAction';\n\n  item: YTNode;\n  client_id?: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.item = Parser.parseItem(data.item);\n    this.client_id = data.clientId;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SegmentedLikeDislikeButton Class in TypeScript\nDESCRIPTION: Implements a TypeScript class SegmentedLikeDislikeButton extending YTNode to represent the segmented like/dislike button typically used in YouTube UI. The class takes a RawNode as construction input, assigning like_button and dislike_button properties (which may be null, Button, or ToggleButton instances), and exposes static and instance type indicators. Requires dependencies on YTNode, Button, ToggleButton, and RawNode typings, enforcing strong typing throughout. Expected to be constructed with parsed API data, providing structured access to like/dislike UI actions, but does not itself implement rendering.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SegmentedLikeDislikeButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SegmentedLikeDislikeButton extends YTNode {\n  /**\n   * like_button: null | Button | ToggleButton\n   * dislike_button: null | Button | ToggleButton\n   * type: string\n   * static type: string = 'SegmentedLikeDislikeButton'\n   */\n  constructor(data: RawNode) {\n    // Implementation details omitted\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: CommentSimplebox Class Definition in TypeScript\nDESCRIPTION: Class definition for CommentSimplebox that extends YTNode. It handles the comment input box UI component with properties for buttons, author thumbnails, and placeholder text. The class includes constructor, type definitions, and inherited utility methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentSimplebox.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CommentSimplebox extends YTNode {\n  static type = 'CommentSimplebox';\n\n  submit_button: null | Button;\n  cancel_button: null | Button;\n  author_thumbnail: Thumbnail[];\n  placeholder: Text;\n  avatar_size: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is CommentSimplebox & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: GameCard Class Definition in TypeScript\nDESCRIPTION: Defines the GameCard class that extends YTNode with properties and methods for handling game card data. The class includes a constructor that takes RawNode data, and properties for game data and type information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GameCard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GameCard extends YTNode {\n    static type = 'GameCard';\n    game: YTNode;\n\n    constructor(data: RawNode) {\n        super();\n        this.game = data;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GuideCollapsibleSectionEntry Class in TypeScript\nDESCRIPTION: This code snippet defines the GuideCollapsibleSectionEntry class, which extends YTNode. It includes properties for header_entry, expander_icon, collapser_icon, and section_items. The constructor takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GuideCollapsibleSectionEntry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GuideCollapsibleSectionEntry extends YTNode {\n  static type = 'GuideCollapsibleSectionEntry';\n\n  header_entry: YTNode;\n  expander_icon: string;\n  collapser_icon: string;\n  section_items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details not provided in the snippet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SlimOwner Class Extending YTNode - TypeScript\nDESCRIPTION: This TypeScript snippet defines the SlimOwner class, inheriting from YTNode, intended to represent the owner entity (e.g., creator/channel) within the YouTube.js internal parser structure. The constructor expects a RawNode object, initializing properties such as endpoint, subscribe_button (which may be null), thumbnail (an array), and title (a Text instance). The class also overrides the static type property and implements inherited methods for type interrogation and property inspection. Dependencies include NavigationEndpoint, SubscribeButton, Thumbnail, Text, and YTNode. Input to the constructor should conform to the expected RawNode schema, and the class functions as part of a larger parsing system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimOwner.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Represents the owner of a YouTube resource (video/channel) in YouTube.js.\n * Extends YTNode and exposes endpoint, subscribe_button, thumbnail, and title properties.\n */\nclass SlimOwner extends YTNode {\n  static type: string = 'SlimOwner';\n  \n  /** Array of thumbnails for the owner. */\n  thumbnail: Thumbnail[];\n  \n  /** Title of the owner (e.g., channel name). */\n  title: Text;\n  \n  /** Navigation endpoint for the owner. */\n  endpoint: NavigationEndpoint;\n  \n  /** Subscribe button if present; otherwise null. */\n  subscribe_button: null | SubscribeButton;\n\n  constructor(data: RawNode) {\n    super();\n    // Initialization logic for each property would go here\n    // Example:\n    // this.thumbnail = ...;\n    // this.title = ...;\n    // this.endpoint = ...;\n    // this.subscribe_button = ...;\n  }\n\n  // Inherited and utility methods such as as(), is(), hasKey(), key() would also be available\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dropdown Properties in TypeScript\nDESCRIPTION: Declaration of the main properties of the Dropdown class including entries (an ObservedArray of DropdownItem objects) and label (a string).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Dropdown.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nentries: [`ObservedArray`](../../Helpers/type-aliases/ObservedArray.md)\\<[`DropdownItem`](DropdownItem.md)\\>\nlabel: string\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Methods in TypeScript\nDESCRIPTION: Helper methods for type checking and key access including as(), is(), hasKey(), and key() implementations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BrowseEndpoint.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is BrowseEndpoint & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining ContinuationCommand Class in TypeScript\nDESCRIPTION: This code snippet defines the ContinuationCommand class, which extends YTNode. It includes a constructor, properties for request and token, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/ContinuationCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ContinuationCommand extends YTNode {\n  static type = 'ContinuationCommand';\n\n  request: string;\n  token: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.request = data.request;\n    this.token = data.token;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chapter Class in TypeScript\nDESCRIPTION: This code defines the Chapter class, which extends YTNode. It includes properties for the chapter's title, start time, and thumbnail, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Chapter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Chapter extends YTNode {\n  static type = 'Chapter';\n\n  title: Text;\n  time_range_start_millis: number;\n  thumbnail: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n    this.time_range_start_millis = data.timeRangeStartMillis;\n    this.thumbnail = Thumbnail.fromResponse(data.thumbnail);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HeatMarker Class Definition in TypeScript\nDESCRIPTION: Definition of the HeatMarker class extending YTNode, representing heat markers in YouTube videos. Contains properties for start time, duration, and intensity score of a heat marker.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HeatMarker.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'HeatMarker'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntime_range_start_millis: number\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nmarker_duration_millis: number\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nheat_marker_intensity_score_normalized: number\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): HeatMarker\n```\n\n----------------------------------------\n\nTITLE: Inheriting YTNode Methods in TypeScript\nDESCRIPTION: Type checking and casting methods inherited from YTNode. These include as() for casting to other node types, is() for type checking, hasKey() for property existence checking, and key() for safe property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailBadgeView.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is ThumbnailBadgeView & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining the RichSection Parser Node - TypeScript\nDESCRIPTION: This TypeScript class snippet defines RichSection, extending the YTNode base class to represent a specialized section in a parsing AST. It includes a constructor accepting a RawNode parameter, a content property of type YTNode, and static and instance type strings for identification purposes. Dependencies include the surrounding parser infrastructure in the YouTube.js library, specifically types like RawNode and the YTNode class. Inputs include a data object conforming to RawNode, and output is an initialized RichSection node. Class is intended for internal parsing and manipulation of complex node sections.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RichSection extends YTNode {\n  static type = 'RichSection';\n  content: YTNode;\n  constructor(data: RawNode) {\n    super(); // Call to YTNode constructor\n    // Initialization logic using the data parameter\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UploadedVideoMetadataOptions Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias UploadedVideoMetadataOptions as a partial object with properties for video metadata. It includes fields for description, draft status, privacy setting, and title.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/UploadedVideoMetadataOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype UploadedVideoMetadataOptions = Partial<object>\n\nType declaration:\n\ndescription: string\n\nis_draft: boolean\n\nprivacy: \"PUBLIC\" | \"PRIVATE\" | \"UNLISTED\"\n\ntitle: string\n```\n\n----------------------------------------\n\nTITLE: Defining BrowseEndpoint Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for BrowseEndpoint class that accepts RawNode data parameter and returns a BrowseEndpoint instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BrowseEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew BrowseEndpoint(data: RawNode): BrowseEndpoint\n```\n\n----------------------------------------\n\nTITLE: Constructing a SignalAction Instance in TypeScript\nDESCRIPTION: Defines the constructor for the SignalAction class. It takes raw node data (`RawNode`) as input and initializes a new SignalAction instance. This constructor overrides the base YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SignalAction(data: RawNode): SignalAction\n```\n\n----------------------------------------\n\nTITLE: Providing Type-Safe Helper Methods for Dynamic Node Manipulation in TypeScript\nDESCRIPTION: These method snippets document generic helpers as, is, hasKey, and key, which enable type-safe casting, type checking, key presence checking, and key retrieval on YTNode and its subclasses. They utilize TypeScript generics and advanced type inference. Required dependencies include the YTNode base class hierarchy and Maybe class. Key parameters are types (for as/is), key (for key/hasKey). Inputs are type constructors or key names, with outputs being types or Maybe-wrapped values and type assertions. Limitations: type parameters must map to implemented node types and callers are responsible for error handling if assertions fail.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsOptions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * as<T, K>(...types: K): InstanceType<K[number]>\n * Casts the node to one of the requested types, throws if not matching.\n */\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // ...implementation ensures node matches one of types, otherwise throws\n}\n\n/**\n * is<T, K>(...types: K): this is InstanceType<K[number]>\n * Checks if the node is of one of the given types.\n */\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // ...returns true if node matches one of types\n}\n\n/**\n * hasKey<T, R>(key: T): this is SettingsOptions & { [k in string]: R }\n * Checks if the node has a specified key.\n */\nhasKey<T extends string, R = any>(key: T): this is SettingsOptions & { [k in string]: R } {\n  // ...true if key exists\n}\n\n/**\n * key<T, R>(key: T): Maybe\n * Returns the value for a key wrapped in a Maybe, throws if missing.\n */\nkey<T extends string, R = any>(key: T): Maybe {\n  // ...returns Maybe-wrapped value for key\n}\n\n```\n\n----------------------------------------\n\nTITLE: Inherited Method: Accessing a Key's Value on YTNode in TypeScript\nDESCRIPTION: Inherited from `YTNode`. This method asserts that the `SimpleMenuHeader` instance has the specified `key` and returns its value wrapped in a `Maybe` container. It throws an error if the key does not exist on the instance. The `Maybe` wrapper handles potential null or undefined values.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleMenuHeader.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Fetching Artist Data in TypeScript\nDESCRIPTION: Method to retrieve artist information using an artist ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetArtist(artist_id: string): Promise<Artist>\n```\n\n----------------------------------------\n\nTITLE: Implementing key Method for Safe Property Access in RemoveChatItemAction in TypeScript\nDESCRIPTION: Offers a key<T, R>(key) method to assert that the node has a particular key and to return its value, wrapped in a Maybe type for null safety. Throws if the node lacks the specified key, enforcing tighter property guarantees during parsing. The method is generic for key and value types and depends on the Maybe helper class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemAction.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Getting Feed Continuation\nDESCRIPTION: Async method that retrieves the next batch of feed contents and returns a new Playlist object. Overrides the base Feed class implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nasync getContinuation(): Promise<Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Interface for YouTube Botguard Challenge\nDESCRIPTION: Defines a TypeScript interface IRawBotguardChallenge that specifies the structure of YouTube's botguard challenge response. Contains properties for interpreter URL, hash, program, global name, and client experiments state.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawBotguardChallenge.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IRawBotguardChallenge {\n    interpreterUrl: IRawTrustedResource;\n    interpreterHash: string;\n    program: string;\n    globalName: string;\n    clientExperimentsStateBlob: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing EomSettingsDisclaimer Constructor in TypeScript\nDESCRIPTION: The constructor for the EomSettingsDisclaimer class that takes raw node data as input and returns a new instance of EomSettingsDisclaimer.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EomSettingsDisclaimer.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew EomSettingsDisclaimer(data): EomSettingsDisclaimer\n```\n\n----------------------------------------\n\nTITLE: Defining VideoAttributesSectionView Class in TypeScript\nDESCRIPTION: This code defines the VideoAttributesSectionView class, which extends YTNode. It includes properties for header title and subtitle, navigation buttons, and an array of video attributes. The class also includes a constructor and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoAttributesSectionView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoAttributesSectionView extends YTNode {\n  static type = 'VideoAttributesSectionView';\n\n  header_title: string;\n  header_subtitle: string;\n  video_attributes: ObservedArray<VideoAttributeView>;\n  previous_button: null | ButtonView;\n  next_button: null | ButtonView;\n\n  constructor(data: RawNode) {\n    super();\n    this.header_title = data.headerTitle;\n    this.header_subtitle = data.headerSubtitle;\n    this.video_attributes = parse(data.videoAttributesContainer?.videoAttributes) || [];\n    this.previous_button = parser.parseItem(data.previousButton, ButtonView);\n    this.next_button = parser.parseItem(data.nextButton, ButtonView);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Memo Class for Memoization in TypeScript\nDESCRIPTION: This snippet shows how to use the Memo class to memoize values and quickly access nodes after parsing the response, such as obtaining all videos from a search result.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/parser/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = Parser.parseResponse(data);\nconst videos = response.contents_memo.getType(Video);\n// This returns the nodes as an `ObservedArray<Video>`.\n```\n\n----------------------------------------\n\nTITLE: RendererContext Constructor Definition in TypeScript\nDESCRIPTION: Constructor for the RendererContext class that accepts an optional data parameter of type RawNode. The constructor returns a new instance of RendererContext.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/RendererContext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RendererContext(data?: RawNode): RendererContext\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for InfoPanelContainer in TypeScript\nDESCRIPTION: Constructor for the InfoPanelContainer class that takes raw node data and initializes the class instance. It extends the YTNode class constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/InfoPanelContainer.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew InfoPanelContainer(`data`): [`InfoPanelContainer`](InfoPanelContainer.md)\n```\n\n----------------------------------------\n\nTITLE: Type Property Definition in TypeScript\nDESCRIPTION: Readonly type property inherited from YTNode class, used for type identification.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ItemSectionHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string;\n```\n\n----------------------------------------\n\nTITLE: Defining AboutChannelView Class in TypeScript\nDESCRIPTION: This snippet defines the AboutChannelView class, which extends YTNode. It includes various properties related to channel information such as description, subscriber count, and external links.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AboutChannelView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AboutChannelView extends YTNode {\n  static type = 'AboutChannelView';\n\n  description?: string;\n  description_label?: Text;\n  country?: string;\n  custom_links_label?: Text;\n  subscriber_count?: string;\n  view_count?: string;\n  joined_date?: Text;\n  canonical_channel_url?: string;\n  channel_id?: string;\n  additional_info_label?: Text;\n  custom_url_on_tap?: NavigationEndpoint;\n  video_count?: string;\n  sign_in_for_business_email?: Text;\n  links: ObservedArray<ChannelExternalLinkView>;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YTNode Type Property Declaration in TypeScript\nDESCRIPTION: Declaration of the readonly type property inherited from the YTNode base class, which stores the node type as a string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSectionHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Parsing InnerTube Commands in TypeScript\nDESCRIPTION: Function signature for parseCommand that takes raw node data and returns either a YTNode instance or undefined. Used for parsing InnerTube commands from YouTube's API into structured node objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseCommand(data: RawNode): YTNode | undefined\n```\n\n----------------------------------------\n\nTITLE: Implementing GetContinuationData Method\nDESCRIPTION: Method that retrieves raw continuation data, returning either undefined or an IBrowseResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: Implementing Thumbnails Accessor in TypeScript\nDESCRIPTION: This code snippet shows the implementation of the thumbnails accessor in the MusicResponsiveListItem class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItem.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget thumbnails(): Thumbnail[] {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GridPlaylist Class in TypeScript\nDESCRIPTION: Class definition for GridPlaylist that extends YTNode. Implements properties for playlist information including title, author, thumbnails, video counts and navigation endpoints.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridPlaylist.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GridPlaylist extends YTNode {\n  static type = 'GridPlaylist';\n  id: string;\n  title: Text;\n  author?: Author;\n  badges: ObservedArray<YTNode>;\n  endpoint: NavigationEndpoint;\n  view_playlist: Text;\n  thumbnails: Thumbnail[];\n  thumbnail_renderer: YTNode;\n  sidebar_thumbnails: null | Thumbnail[];\n  video_count: Text;\n  video_count_short: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ThumbnailOverlayInlineUnplayable Static Properties in TypeScript\nDESCRIPTION: Static type property that identifies the class as 'ThumbnailOverlayInlineUnplayable' for type checking and identification purposes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayInlineUnplayable.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ThumbnailOverlayInlineUnplayable'\n```\n\n----------------------------------------\n\nTITLE: Defining EomSettingsDisclaimer Class Properties in TypeScript\nDESCRIPTION: This snippet shows the property definitions for the EomSettingsDisclaimer class, including disclaimer text, info_icon, usage_scenario, and type properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EomSettingsDisclaimer.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndisclaimer: Text\n\ninfo_icon: object\n\nicon_type: string\n\nusage_scenario: string\n\nstatic type: string = 'EomSettingsDisclaimer'\n```\n\n----------------------------------------\n\nTITLE: Inherited 'is' Method for Type Checking (TypeScript)\nDESCRIPTION: Inherited method `is` from `YTNode`. It checks if the current node instance is of one of the provided `YTNodeConstructor` types, returning a boolean.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining DeletePlaylistServiceRequest Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias for DeletePlaylistServiceRequest as an object with an optional playlistId property of type string. It's part of the APIResponseTypes namespace in the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/DeletePlaylistServiceRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype DeletePlaylistServiceRequest = {\n  playlistId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: PostMultiImage Class Definition in TypeScript\nDESCRIPTION: Class definition for PostMultiImage which extends YTNode and handles multiple images in posts. Contains constructor, properties for images array, and inherited utility methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PostMultiImage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PostMultiImage extends YTNode {\n  static type: string = 'PostMultiImage';\n  images: BackstageImage[];\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing ItemMenu in TypeScript\nDESCRIPTION: Creates a new ItemMenu instance with data and actions parameters. The data parameter is of type IParsedResponse, and actions is of type Actions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ItemMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ItemMenu(data: IParsedResponse, actions: Actions): ItemMenu\n```\n\n----------------------------------------\n\nTITLE: Encoding Visitor Data in TypeScript\nDESCRIPTION: Function signature for encoding visitor data using an ID string and timestamp. Takes a string ID and numeric timestamp as parameters and returns an encoded string representation of the visitor data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/functions/encodeVisitorData.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nencodeVisitorData(id: string, timestamp: number): string\n```\n\n----------------------------------------\n\nTITLE: Defining Error Logging Function in TypeScript for YouTube.js\nDESCRIPTION: This function, named 'error', is used for logging error messages. It accepts an optional tag parameter of type string and a variable number of additional arguments. The function doesn't return any value (void). It's defined in the Log.ts file within the utils directory of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Log/functions/error.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nerror(tag?: string, ...args?: any[]): void\n```\n\n----------------------------------------\n\nTITLE: AlertWithButton Class Definition in TypeScript\nDESCRIPTION: Class definition for AlertWithButton with properties for alert text, type, and dismiss button. Extends YTNode base class and includes type checking methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AlertWithButton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AlertWithButton extends YTNode {\n  static type = 'AlertWithButton';\n  text: Text;\n  alert_type: string;\n  dismiss_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TimedMarkerDecoration Class Definition in TypeScript\nDESCRIPTION: This code defines the TimedMarkerDecoration class which extends YTNode. It includes properties for time ranges, decoration timing, labels, and icons that appear at specific timestamps in YouTube videos.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TimedMarkerDecoration.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TimedMarkerDecoration'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nvisible_time_range_start_millis: number\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nvisible_time_range_end_millis: number\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ndecoration_time_millis: number\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nlabel: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nicon: string\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistPanel Class Constructor in TypeScript\nDESCRIPTION: Constructor for PlaylistPanel class that takes a RawNode data parameter and returns a PlaylistPanel instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistPanel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PlaylistPanel(data: RawNode): PlaylistPanel\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatViewerEngagementMessage Class in TypeScript\nDESCRIPTION: This code snippet defines the LiveChatViewerEngagementMessage class, which extends YTNode. It includes properties for message content, timestamps, and UI elements, as well as a constructor and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatViewerEngagementMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatViewerEngagementMessage extends YTNode {\n  static type = 'LiveChatViewerEngagementMessage';\n\n  id: string;\n  timestamp?: number;\n  timestamp_usec?: string;\n  icon_type?: string;\n  message: Text;\n  action_button: null | YTNode;\n  menu_endpoint?: NavigationEndpoint;\n  context_menu_accessibility_label?: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SimpleCardTeaser Class with Inherited Node Behavior - TypeScript\nDESCRIPTION: This snippet defines the SimpleCardTeaser class, which extends YTNode, in TypeScript. It details the class constructor that accepts a RawNode data parameter and establishes properties such as message, prominent, and (static and instance) type fields. The snippet depends on YTNode, Text, and RawNode types provided elsewhere in the codebase. Inputs include a RawNode object used to instantiate the class, and it outputs a fully constructed SimpleCardTeaser instance. The structure illustrates inheritance and type overwriting common to parsers for YouTube's internal data representation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardTeaser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SimpleCardTeaser extends YTNode {\n  static type: string = 'SimpleCardTeaser';\n  message: Text;\n  prominent: boolean;\n  constructor(data: RawNode) {\n    // ...implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MarkChatItemsByAuthorAsDeletedAction Class in TypeScript\nDESCRIPTION: This code defines the MarkChatItemsByAuthorAsDeletedAction class, which extends YTNode. It includes properties for deleted state message and external channel ID, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MarkChatItemsByAuthorAsDeletedAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MarkChatItemsByAuthorAsDeletedAction extends YTNode {\n  static type = 'MarkChatItemsByAuthorAsDeletedAction';\n\n  deleted_state_message: Text;\n  external_channel_id: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.deleted_state_message = new Text(data.deletedStateMessage);\n    this.external_channel_id = data.externalChannelId;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader Optional 'description' Property in TypeScript\nDESCRIPTION: Declares the optional `description` property for the `MusicResponsiveHeader` class. It can hold either `null` or an instance of `MusicDescriptionShelf`, representing the description section associated with the music header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndescription?: null | MusicDescriptionShelf\n```\n\n----------------------------------------\n\nTITLE: Defining MacroMarkersList Class in TypeScript\nDESCRIPTION: This code defines the MacroMarkersList class, which extends YTNode. It includes a constructor, properties for contents and sync_button_label, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MacroMarkersList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MacroMarkersList extends YTNode {\n  static type = 'MacroMarkersList';\n\n  contents: ObservedArray<MacroMarkersInfoItem | MacroMarkersListItem>;\n  sync_button_label: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.contents = observe(data.contents.map((item: RawNode) => parseItem(item)));\n    this.sync_button_label = new Text(data.syncButtonLabel);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreatorHeartView Class in TypeScript\nDESCRIPTION: This code defines the CreatorHeartView class, which extends YTNode. It includes properties for creator thumbnails, icon names, accessibility labels, and other related information for the creator heart feature in YouTube live chat.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreatorHeartView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CreatorHeartView extends YTNode {\n  static type = 'CreatorHeartView';\n\n  creator_thumbnail: Thumbnail[];\n  hearted_icon_name: string;\n  unhearted_icon_name: string;\n  unhearted_icon_processor: {\n    border_image_processor: {\n      image_tint: {\n        color: number;\n      };\n    };\n  };\n  hearted_hover_text: string;\n  hearted_accessibility_label: string;\n  unhearted_accessibility_label: string;\n  engagement_state_key: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HashtagHeader Class Definition in TypeScript\nDESCRIPTION: Defines the HashtagHeader class which extends YTNode. This class represents a hashtag header in YouTube's interface with properties for the hashtag and hashtag information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HashtagHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'HashtagHeader';\n\nhashtag: Text;\nhashtag_info: Text;\n\nconstructor(data: RawNode) {\n  super();\n  this.hashtag = new Text(data.hashtag);\n  this.hashtag_info = new Text(data.hashtagInfo);\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods from YTNode in TypeScript\nDESCRIPTION: Methods inherited from the YTNode base class including as(), is(), hasKey(), and key() for type checking and property access, providing utility functions for handling node types and properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EmojiPickerCategory.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is EmojiPickerCategory & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Decoding Visitor Data Function in TypeScript\nDESCRIPTION: Function to decode visitor data from YouTube's proto format.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/README.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction decodeVisitorData(visitorData: string): VisitorData {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IParsedResponse Interface in TypeScript\nDESCRIPTION: This code snippet defines the IParsedResponse interface with numerous optional properties representing different parts of a parsed YouTube API response. It includes references to other custom types and classes used in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IParsedResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IParsedResponse {\n  actions?: SuperParsedResult<YTNode>;\n  actions_memo?: Memo;\n  alerts?: ObservedArray<Alert | AlertWithButton>;\n  annotations?: ObservedArray<PlayerAnnotationsExpanded>;\n  background?: MusicThumbnail;\n  bg_challenge?: IBotguardChallenge;\n  captions?: PlayerCaptionsTracklist;\n  cards?: CardCollection;\n  challenge?: string;\n  contents?: SuperParsedResult<YTNode>;\n  contents_memo?: Memo;\n  continuation?: Continuation;\n  continuation_contents?: ItemSectionContinuation | SectionListContinuation | LiveChatContinuation | MusicPlaylistShelfContinuation | MusicShelfContinuation | GridContinuation | PlaylistPanelContinuation | ContinuationCommand;\n  continuation_contents_memo?: Memo;\n  continuation_endpoint?: YTNode;\n  cpn_info?: {\n    cpn: string;\n    cpn_source: CpnSource;\n  };\n  current_video_endpoint?: NavigationEndpoint;\n  endpoint?: NavigationEndpoint;\n  endscreen?: Endscreen;\n  engagement_panels?: ObservedArray<EngagementPanelSectionList>;\n  entries?: NavigationEndpoint[];\n  entries_memo?: Memo;\n  estimated_results?: number;\n  header?: SuperParsedResult<YTNode>;\n  header_memo?: Memo;\n  items?: SuperParsedResult<YTNode>;\n  items_memo?: Memo;\n  live_chat_item_context_menu_supported_renderers?: YTNode;\n  live_chat_item_context_menu_supported_renderers_memo?: Memo;\n  metadata?: SuperParsedResult<YTNode>;\n  // ... (other properties omitted for brevity)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommentsEntryPointTeaser Class in TypeScript\nDESCRIPTION: Class definition for CommentsEntryPointTeaser that extends YTNode. Includes constructor and properties for handling comment teaser data including avatar thumbnails and content.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsEntryPointTeaser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CommentsEntryPointTeaser extends YTNode {\n  static type = 'CommentsEntryPointTeaser';\n  teaser_avatar?: Thumbnail[];\n  teaser_content?: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing contents accessor in VerticalWatchCardList (TypeScript)\nDESCRIPTION: Implements a getter method named contents that returns the items property of the VerticalWatchCardList as an ObservedArray of YTNode objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalWatchCardList.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nget contents(): ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelThumbnailWithLink Class Properties\nDESCRIPTION: Class properties definition including thumbnails array, navigation endpoint, and optional label.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelThumbnailWithLink.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'ChannelThumbnailWithLink'\n\nthumbnails: Thumbnail[]\nendpoint: NavigationEndpoint\nlabel?: string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Livestream Information\nDESCRIPTION: Demonstrates how to fetch basic information about a YouTube livestream using video ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/livechat/README.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst info = await yt.getInfo('video_id');\n```\n\n----------------------------------------\n\nTITLE: Defining AboutChannel Class in TypeScript\nDESCRIPTION: Defines the AboutChannel class which extends YTNode. It includes properties for metadata and a share channel button, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AboutChannel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AboutChannel extends YTNode {\n  static type = 'AboutChannel';\n\n  metadata: null | AboutChannelView;\n  share_channel: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n    this.metadata = Reflect.has(data, 'metadata') ? new AboutChannelView(data.metadata) : null;\n    this.share_channel = Reflect.has(data, 'shareChannel') ? new Button(data.shareChannel) : null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Playlists from Memo in HomeFeed in TypeScript\nDESCRIPTION: This static method retrieves all playlists from a given Memo object, returning an ObservedArray of playlist types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining IBrowseResponse Type Alias in TypeScript\nDESCRIPTION: Defines the IBrowseResponse type as a Pick type that selects specific properties from the IParsedResponse interface. This type includes only the essential properties needed for handling YouTube browse responses.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/IBrowseResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nIBrowseResponse: Pick<IParsedResponse, \"background\" | \"continuation_contents\" | \"continuation_contents_memo\" | \"on_response_received_actions\" | \"on_response_received_actions_memo\" | \"on_response_received_endpoints\" | \"on_response_received_endpoints_memo\" | \"contents\" | \"contents_memo\" | \"header\" | \"header_memo\" | \"metadata\" | \"microformat\" | \"alerts\" | \"sidebar\" | \"sidebar_memo\">\n```\n\n----------------------------------------\n\nTITLE: TranscriptSearchBox Constructor Implementation\nDESCRIPTION: Constructor implementation for the TranscriptSearchBox class that takes a RawNode data parameter and returns a new TranscriptSearchBox instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSearchBox.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew TranscriptSearchBox(data: RawNode): TranscriptSearchBox\n```\n\n----------------------------------------\n\nTITLE: VideoPrimaryInfo Properties Definition in TypeScript\nDESCRIPTION: Property definitions for the VideoPrimaryInfo class including title, super_title_link, view_count, badges, published date, relative date, and menu data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoPrimaryInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text\nsuper_title_link?: Text\nview_count: null | VideoViewCount\nbadges: ObservedArray<MetadataBadge>\npublished: Text\nrelative_date: Text\nmenu: null | Menu\n```\n\n----------------------------------------\n\nTITLE: AttributionView Class Method Implementations\nDESCRIPTION: Implementation of inherited utility methods including as(), hasKey(), is(), and key() for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AttributionView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is AttributionView & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Checking Parser Existence in TypeScript\nDESCRIPTION: Function that validates whether a parser exists for a given classname. Takes a string parameter and returns a boolean indicating if the parser exists.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/hasParser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nhasParser(classname: string): boolean\n```\n\n----------------------------------------\n\nTITLE: GameDetails Class Constructor in TypeScript\nDESCRIPTION: Constructor for the GameDetails class that takes a RawNode data parameter and returns a GameDetails instance. This class is used to represent game information in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GameDetails.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew GameDetails(`data`): [`GameDetails`](GameDetails.md)\n```\n\n----------------------------------------\n\nTITLE: Constructor for SponsorCommentBadge Class in TypeScript\nDESCRIPTION: Defines the constructor for the `SponsorCommentBadge` class. It takes raw node data (`RawNode`) as input and initializes a new instance of `SponsorCommentBadge`. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SponsorCommentBadge.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SponsorCommentBadge(data): SponsorCommentBadge\n```\n\n----------------------------------------\n\nTITLE: Alert Class Method Implementations\nDESCRIPTION: Implementation of inherited utility methods from YTNode including type checking, key assertions, and type casting functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Alert.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is Alert & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader 'strapline_thumbnail' Property in TypeScript\nDESCRIPTION: Declares the `strapline_thumbnail` property for the `MusicResponsiveHeader` class. It can hold either `null` or a `MusicThumbnail` object, representing the thumbnail image associated with the strapline text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstrapline_thumbnail: null | MusicThumbnail\n```\n\n----------------------------------------\n\nTITLE: Implementing the key() Method for Optional Value Assertion - TypeScript\nDESCRIPTION: Implements the key() method, enabling assertion and retrieval of a required key from a node via TypeScript generics and an associated Maybe wrapper. Throws if the key does not exist, ensuring safe property access. This pattern is commonly used to extract validated, possibly undefined properties from dynamic node objects within the parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEntityEndpoint.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe {\n  // Implementation: return the value of the key wrapped in Maybe; throw if not present\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Playlist Class in TypeScript\nDESCRIPTION: Constructor for the Playlist class that takes an API response and Actions object as parameters. It initializes the playlist data and provides methods for interaction.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Playlist.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew Playlist(response: ApiResponse, actions: Actions): Playlist\n```\n\n----------------------------------------\n\nTITLE: Defining Thumbnail Class Properties in TypeScript\nDESCRIPTION: Class properties definition for the Thumbnail class, including url, width, and height properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Thumbnail.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nurl: string;\nwidth: number;\nheight: number;\n```\n\n----------------------------------------\n\nTITLE: Defining MusicPlayButton Class Properties in TypeScript\nDESCRIPTION: TypeScript class definition for MusicPlayButton that extends YTNode. Includes properties for endpoint, icon types, labels, and colors related to music playback controls.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicPlayButton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicPlayButton extends YTNode {\n  static type: string = 'MusicPlayButton';\n  endpoint: NavigationEndpoint;\n  play_icon_type: string;\n  pause_icon_type: string;\n  play_label?: string;\n  pause_label?: string;\n  icon_color: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistSidebarSecondaryInfo Class in TypeScript\nDESCRIPTION: Class definition for PlaylistSidebarSecondaryInfo that extends YTNode. Contains properties for playlist owner and button information, along with inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistSidebarSecondaryInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistSidebarSecondaryInfo extends YTNode {\n  static type = 'PlaylistSidebarSecondaryInfo';\n  owner: YTNode;\n  button: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Categories Getter Implementation\nDESCRIPTION: Getter method that returns an array of category strings from the home feed.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/HomeFeed.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget categories(): string[]\n```\n\n----------------------------------------\n\nTITLE: Getting OAuth2 Client ID in TypeScript\nDESCRIPTION: Method to retrieve the OAuth2 client ID. This is used for identifying the application in the authentication process.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/OAuth2.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetClientID(): Promise<OAuth2ClientID>\n```\n\n----------------------------------------\n\nTITLE: HomeFeed Class Constructor Implementation - TypeScript\nDESCRIPTION: Constructor for HomeFeed class that takes an API response and actions objects. Initializes the home feed instance with header and sections properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/HomeFeed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew HomeFeed(response: ApiResponse, actions: Actions): HomeFeed\n```\n\n----------------------------------------\n\nTITLE: TextCarouselItemView Class Definition in TypeScript\nDESCRIPTION: The TextCarouselItemView class definition extends YTNode, handling YouTube carousel items with text. It contains properties for icon_name, text, on_tap_endpoint, and button, with methods inherited from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TextCarouselItemView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TextCarouselItemView'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nicon_name: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntext: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\non_tap_endpoint: NavigationEndpoint\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nbutton: null | ButtonView\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): TextCarouselItemView\n```\n\n----------------------------------------\n\nTITLE: Declaring MusicMultiSelectMenu Properties\nDESCRIPTION: Property declarations for the MusicMultiSelectMenu class including options array and optional title.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicMultiSelectMenu.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptions: ObservedArray<MusicMultiSelectMenuItem | MusicMenuItemDivider>\ntitle?: Text\ntype: string\nstatic type: string = 'MusicMultiSelectMenu'\n```\n\n----------------------------------------\n\nTITLE: VideoDescriptionHeader Properties in TypeScript\nDESCRIPTION: Defines the properties of the VideoDescriptionHeader class including channel information, navigation endpoint, thumbnails, factoids, publish date, title, and view count.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nchannel: Text;\nchannel_navigation_endpoint?: NavigationEndpoint;\nchannel_thumbnail: Thumbnail[];\nfactoids: ObservedArray<Factoid | UploadTimeFactoid | ViewCountFactoid>;\npublish_date: Text;\ntitle: Text;\nviews: Text;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Up Next Content in TypeScript\nDESCRIPTION: Method to get the up next content for a video, with an option for automix.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ngetUpNext(video_id: string, automix: boolean = true): Promise<PlaylistPanel>\n```\n\n----------------------------------------\n\nTITLE: Defining ViewCountFactoid Class in TypeScript\nDESCRIPTION: This snippet defines the ViewCountFactoid class, extending YTNode. It includes a constructor, static type property, and instance properties for view count information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ViewCountFactoid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ViewCountFactoid extends YTNode {\n  static type = 'ViewCountFactoid';\n\n  view_count_entity_key: string;\n  factoid: null | Factoid;\n  view_count_type: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.view_count_entity_key = data.viewCountEntityKey;\n    this.factoid = data.factoid ? new Factoid(data.factoid) : null;\n    this.view_count_type = data.viewCountType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the KidsCategoryTab Class in TypeScript for YouTube.js\nDESCRIPTION: This code defines the KidsCategoryTab class which extends YTNode. It implements a category tab component for YouTube Kids interface, with properties for title, category assets, category type, and navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsCategoryTab.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'KidsCategoryTab'\n```\n\n----------------------------------------\n\nTITLE: DecoratedAvatarView Class Properties in TypeScript\nDESCRIPTION: Definition of the properties for the DecoratedAvatarView class, including avatar (nullable AvatarView), a11y_label (string), and renderer_context (RendererContext). Also includes the type property inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DecoratedAvatarView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\navatar: null | AvatarView\na11y_label: string\nrenderer_context: RendererContext\ntype: string  // readonly, inherited\nstatic type: string = 'DecoratedAvatarView'  // overrides YTNode.type\n```\n\n----------------------------------------\n\nTITLE: Static Method Implementation for Stack Trace Handling\nDESCRIPTION: Static method for creating and formatting stack traces. Used for customizing error stack trace output.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/ChannelError.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic prepareStackTrace?(err: Error, stackTraces: CallSite[]): any\n```\n\n----------------------------------------\n\nTITLE: FancyDismissibleDialog Class Definition in TypeScript\nDESCRIPTION: Class definition for FancyDismissibleDialog which extends YTNode. It contains properties for dialog_message and confirm_label, both of Text type. The class includes a constructor that takes RawNode data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FancyDismissibleDialog.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'FancyDismissibleDialog'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ndialog_message: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconfirm_label: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): FancyDismissibleDialog\n```\n\n----------------------------------------\n\nTITLE: Defining DialogHeaderView Class in TypeScript\nDESCRIPTION: This code snippet defines the DialogHeaderView class, which extends YTNode. It includes a constructor, properties for headline and type, and inherits methods from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DialogHeaderView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DialogHeaderView extends YTNode {\n  static type = 'DialogHeaderView';\n\n  headline: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.headline = new Text(data.headline);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining EmojiPickerCategory Class in TypeScript\nDESCRIPTION: Implementation of the EmojiPickerCategory class that extends YTNode. It handles emoji picker category data with properties like category_id, title, emoji_ids, image_loading_lazy, and category_type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EmojiPickerCategory.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'EmojiPickerCategory'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ncategory_id: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nemoji_ids: string[]\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimage_loading_lazy: boolean\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ncategory_type: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode)\n```\n\n----------------------------------------\n\nTITLE: Defining the StartAt Class with YTNode Inheritance - TypeScript\nDESCRIPTION: This snippet represents the TypeScript class StartAt, which extends the generic YTNode class to define a specialized node structure used in parsing YouTube API responses. It leverages TypeScript's inheritance, strongly-typed constructors, and provides specific properties like start_at_option_label while overriding static and instance type definitions. Dependencies include the YTNode base class, the RawNode data type, and the Text class from the parsing framework. Inputs include parsed raw data that adheres to the RawNode interface, and outputs are StartAt instances with accessible properties and type checks. This class is designed for extensibility with utility methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/StartAt.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass StartAt extends YTNode {\n  static type: string = 'StartAt';\n  start_at_option_label: Text;\n  constructor(data: RawNode) {\n    super();\n    this.start_at_option_label = new Text(data.startAtOptionLabel);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Tab by URL - TypeScript Method\nDESCRIPTION: Method to retrieve a tab from a TabbedFeed using its URL. Returns a Promise resolving to a TabbedFeed instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/TabbedFeed.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetTabByURL(url: string): Promise<TabbedFeed<T>>\n```\n\n----------------------------------------\n\nTITLE: Defining ParsedResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a generic type alias called ParsedResponse. It uses conditional types to map different API endpoint strings to their corresponding response interfaces from the APIResponseTypes namespace.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/ParsedResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ParsedResponse<T> = T extends \"/player\" ? IPlayerResponse :\n  T extends \"/search\" ? ISearchResponse :\n  T extends \"/browse\" ? IBrowseResponse :\n  T extends \"/next\" ? INextResponse :\n  T extends \"/updated_metadata\" ? IUpdatedMetadataResponse :\n  T extends \"/navigation/resolve_url\" ? IResolveURLResponse :\n  T extends \"/notification/get_notification_menu\" ? IGetNotificationsMenuResponse :\n  T extends \"/att/get\" ? IGetChallengeResponse :\n  IParsedResponse;\n```\n\n----------------------------------------\n\nTITLE: Constructing HTTPClient in TypeScript\nDESCRIPTION: Creates a new instance of HTTPClient. It takes a session object, an optional cookie string, and an optional fetch function as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/HTTPClient.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew HTTPClient(session: Session, cookie?: string, fetch?): HTTPClient\n```\n\n----------------------------------------\n\nTITLE: Defining AddToPlaylistServiceEndpoint Class in TypeScript\nDESCRIPTION: Class constructor and static type definition for AddToPlaylistServiceEndpoint that handles playlist operations in YouTube.js\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddToPlaylistServiceEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'AddToPlaylistServiceEndpoint';\n\nconstructor(data: RawNode): AddToPlaylistServiceEndpoint {\n  super(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the Optional 'endpoint' Property for RichShelf in TypeScript\nDESCRIPTION: Declares the optional `endpoint` property for the `RichShelf` class. If present, it holds a `NavigationEndpoint` object, likely defining navigation behavior associated with the shelf.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional endpoint: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Implementing hasKey() Method in TypeScript\nDESCRIPTION: This code snippet shows the implementation of the hasKey() method in the MusicResponsiveListItem class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItem.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is MusicResponsiveListItem & { [k in string]: R } {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Tab Class Definition in TypeScript for YouTubei.js Parser\nDESCRIPTION: Defines the Tab class that represents a YouTube tab component. The class extends YTNode and contains properties for tab title, selection state, navigation endpoint, and content which can be SectionList, MusicQueue, or RichGrid.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Tab.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Tab extends YTNode {\n  static type = 'Tab';\n\n  title: string;\n  selected: boolean;\n  endpoint: NavigationEndpoint;\n  content: null | SectionList | MusicQueue | RichGrid;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = data.title;\n    this.selected = data.selected;\n    this.endpoint = new NavigationEndpoint(data.endpoint);\n    this.content = data.content ? Parser.parseItem(data.content) : null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the buildRequest() Method - TypeScript\nDESCRIPTION: Provides a buildRequest() method that returns a ShareEntityServiceRequest object, encapsulating the parameters necessary for making a share entity API call in YouTube.js. The returned value follows the ShareEntityServiceRequest type alias, ensuring proper request shape. Method relies on correct construction of the endpoint class and often includes serializing state or configuration into an API payload.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEntityEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRequest(): ShareEntityServiceRequest {\n  // Implementation: assemble and return an API request object for sharing entity actions\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatHeader Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatHeader class, which extends YTNode. It includes a constructor and properties for collapse_button, overflow_menu, and view_selector.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatHeader extends YTNode {\n  static type = 'LiveChatHeader';\n\n  overflow_menu: null | Menu;\n  collapse_button: null | Button;\n  view_selector: null | SortFilterSubMenu;\n\n  constructor(data: RawNode) {\n    super();\n    this.overflow_menu = parser.parseItem(data.overflowMenu, Menu);\n    this.collapse_button = parser.parseItem(data.collapseButton, Button);\n    this.view_selector = parser.parseItem(data.viewSelector, SortFilterSubMenu);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Playlists from Memo\nDESCRIPTION: Static method that extracts all playlists from a given memo object. Returns an ObservedArray of playlist-related objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatAutoModMessage Class in TypeScript\nDESCRIPTION: Class definition for LiveChatAutoModMessage that extends YTNode. Contains properties for handling auto-moderated messages in YouTube live chat including moderation buttons, timestamps, and message content. Constructor takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatAutoModMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatAutoModMessage extends YTNode {\n  static type = 'LiveChatAutoModMessage';\n  menu_endpoint?: NavigationEndpoint;\n  moderation_buttons: ObservedArray<Button>;\n  auto_moderated_item: YTNode;\n  header_text: Text;\n  timestamp: number;\n  id: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CommentDialog Constructor Implementation\nDESCRIPTION: Constructor for the CommentDialog class that takes a RawNode data object and passes it to the parent YTNode constructor. This constructor initializes a new CommentDialog instance with the provided data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentDialog.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew CommentDialog(data: RawNode): CommentDialog\n```\n\n----------------------------------------\n\nTITLE: PlaylistPanel Class Type Definition in TypeScript\nDESCRIPTION: Static type property and class properties defining the structure of a YouTube playlist panel including contents, metadata and state.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistPanel.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'PlaylistPanel';\n\ntitle: string;\ntitle_text: Text;\ncontents: ObservedArray<PlaylistPanelVideo | AutomixPreviewVideo | PlaylistPanelVideoWrapper>;\nplaylist_id: string;\nis_infinite: boolean;\ncontinuation: string;\nis_editable: boolean;\npreview_description: string;\nnum_items_to_show: string;\n```\n\n----------------------------------------\n\nTITLE: Implementing Video Interaction Methods in TypeScript\nDESCRIPTION: Defines methods for liking, disliking, and removing ratings from a YouTube video using the VideoInfo class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/VideoInfo.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass VideoInfo extends MediaInfo {\n  // ... other properties and methods\n\n  async like(): Promise<ApiResponse> {\n    // Implementation for liking the video\n  }\n\n  async dislike(): Promise<ApiResponse> {\n    // Implementation for disliking the video\n  }\n\n  async removeRating(): Promise<ApiResponse> {\n    // Implementation for removing like/dislike\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Array without Type Validation in TypeScript\nDESCRIPTION: Parses an array of items without type validation. Returns an ObservedArray of generic YTNode instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseArray.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nparseArray(data: undefined | RawNode[]): ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: ChildElement Class Definition in TypeScript\nDESCRIPTION: Defines a ChildElement class that extends YTNode. The class contains properties for handling text content, generic properties, and nested child elements. It includes type checking methods and key assertion functionality inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/ChildElement.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChildElement extends YTNode {\n    static type = 'ChildElement';\n    text?: string;\n    properties: any;\n    child_elements?: ChildElement[];\n\n    constructor(data: RawNode) {\n        super(data);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional 'icon_type' Property in SearchSuggestion Class (TypeScript)\nDESCRIPTION: Declares the optional `icon_type` property for the `SearchSuggestion` class. This string property represents the type of icon associated with the search suggestion, if any (e.g., 'SEARCH_HISTORY').\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSuggestion.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` icon_type: string\n```\n\n----------------------------------------\n\nTITLE: Implementing Class Properties - TypeScript\nDESCRIPTION: Defines the static and instance properties for the FeedTabbedHeader class, including the title and type fields.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FeedTabbedHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text;\nreadonly type: string;\nstatic type: string = 'FeedTabbedHeader';\n```\n\n----------------------------------------\n\nTITLE: Defining static type property in SortFilterHeader (TypeScript)\nDESCRIPTION: Defines the static `type` property specific to the `SortFilterHeader` class, overriding the base class property. It's assigned the string literal 'SortFilterHeader' to identify nodes of this type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SortFilterHeader'\n```\n\n----------------------------------------\n\nTITLE: Defining the Enabled State Property for SettingsCheckbox in TypeScript\nDESCRIPTION: Declares the `enabled` property for the `SettingsCheckbox` class. This boolean property represents the checked state of the checkbox setting, indicating whether the associated feature is active.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nenabled: boolean\n```\n\n----------------------------------------\n\nTITLE: Declaring collapsed_subtitle Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `collapsed_subtitle` property for the `SlimVideoMetadata` class. It is of type `Text`, likely representing a shorter or summarized version of the video's subtitle or description.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncollapsed_subtitle: Text\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods - TypeScript\nDESCRIPTION: Implementation of helper methods including as(), hasKey(), is(), and key() for type checking and property access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelHeaderLinksView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is ChannelHeaderLinksView & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: CompactVideo Accessor Methods in TypeScript\nDESCRIPTION: Getter methods for the CompactVideo class that provide convenient access to derived properties like the best quality thumbnail and boolean flags for different video states like livestreams, fundraisers, premieres, and new videos.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactVideo.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nget best_thumbnail(): Thumbnail\nget is_fundraiser(): boolean\nget is_live(): boolean\nget is_new(): boolean\nget is_premiere(): boolean\n```\n\n----------------------------------------\n\nTITLE: parseC Function Type Definition - TypeScript\nDESCRIPTION: Type definition for the parseC function that processes raw node data and returns either a Continuation object or null. This function is part of the parser module in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseC.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparseC(data: RawNode): null | Continuation\n```\n\n----------------------------------------\n\nTITLE: Defining EmojiPickerCategoryButton Class in TypeScript\nDESCRIPTION: The complete TypeScript implementation of the EmojiPickerCategoryButton class that extends YTNode. It contains properties for emoji category identification and display, and inherits methods from the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EmojiPickerCategoryButton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EmojiPickerCategoryButton extends YTNode {\n  static type = 'EmojiPickerCategoryButton';\n\n  category_id: string;\n  icon_type?: string;\n  tooltip: string;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatBannerHeader Class in TypeScript\nDESCRIPTION: Class definition for LiveChatBannerHeader that extends YTNode. It handles banner headers in YouTube live chat with properties for text, icon type, and context menu button. The constructor takes a RawNode parameter and initializes the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatBannerHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatBannerHeader extends YTNode {\n  static type = 'LiveChatBannerHeader';\n  text: Text;\n  icon_type?: string;\n  context_menu_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VideoDescriptionTranscriptSection Class Definition in TypeScript\nDESCRIPTION: This code defines the VideoDescriptionTranscriptSection class which extends the YTNode base class. It includes properties for section title, sub-header text, and a primary button. The class is used to represent transcript sections in YouTube video descriptions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionTranscriptSection.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'VideoDescriptionTranscriptSection';\n\nsection_title: Text;\nsub_header_text: Text;\nprimary_button: null | Button;\n\nconstructor(data: RawNode) {\n  super(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MenuFlexibleItem Class in TypeScript\nDESCRIPTION: This snippet defines the MenuFlexibleItem class, extending YTNode. It includes a constructor, properties for menu_item and top_level_button, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MenuFlexibleItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MenuFlexibleItem extends YTNode {\n  static type = 'MenuFlexibleItem';\n\n  menu_item: null | MenuServiceItem | MenuServiceItemDownload;\n  top_level_button: null | Button | ButtonView | DownloadButton;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n\n  // Inherited methods from YTNode\n  // as(), hasKey(), is(), key()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThumbnailView Class Properties in TypeScript\nDESCRIPTION: Definition of the ThumbnailView class properties including image, overlays, and background_color. The class extends YTNode and is used to represent thumbnail views in YouTube's interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ThumbnailView'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nimage: Thumbnail[]\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\noverlays: (ThumbnailHoverOverlayView | ThumbnailOverlayBadgeView)[]\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nbackground_color?: {\n    dark_theme: number;\n    light_theme: number;\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Method Implementation for Type Checking\nDESCRIPTION: Implementation of type checking methods including is(), as(), hasKey() and key() for runtime type verification and safe type casting.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChangeEngagementPanelVisibilityAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ChangeEngagementPanelVisibilityAction & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining Factoid Class in TypeScript\nDESCRIPTION: This code defines the Factoid class, which extends YTNode. It includes properties for label, value, and accessibility text, as well as a constructor and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Factoid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Factoid extends YTNode {\n  static type = 'Factoid';\n\n  label: Text;\n  value: Text;\n  accessibility_text: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.label = new Text(data.label);\n    this.value = new Text(data.value);\n    this.accessibility_text = data.accessibilityText;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining TranscriptSearchPanel Properties in TypeScript\nDESCRIPTION: Definition of the TranscriptSearchPanel class properties including header, body, footer, and target_id. These properties manage different parts of the YouTube transcript search interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSearchPanel.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nheader: null | TranscriptSearchBox\nbody: null | TranscriptSegmentList\nfooter: null | TranscriptFooter\ntarget_id: string\n```\n\n----------------------------------------\n\nTITLE: Defining the ShowEngagementPanelEndpoint Class - TypeScript\nDESCRIPTION: Defines the ShowEngagementPanelEndpoint class as a subclass of YTNode representing an endpoint for engagement panels within YouTube.js. The constructor accepts a RawNode object as its parameter, requiring initialization data from the API response. Key properties include panel_identifier (string), optional source_panel_identifier, and a static type property used for class identification. The class inherits utility methods as, hasKey, is, and key for working with children and keys in a type-safe manner. Inputs are API-provided node data; outputs are typed instances with helper methods. This class depends on the YTNode base class and uses types like RawNode from the broader codebase.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowEngagementPanelEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ShowEngagementPanelEndpoint extends YTNode {\n  static type: string = 'ShowEngagementPanelEndpoint';\n\n  panel_identifier: string;\n  source_panel_identifier?: string;\n\n  constructor(data: RawNode) {\n    super();\n    // ...assign properties from data\n  }\n\n  // Inherited methods from YTNode:\n  // as<T, K>(...types: K): InstanceType<K[number]>\n  // is<T, K>(...types: K): this is InstanceType<K[number]>\n  // hasKey<T extends string, R = any>(key: T): this is ShowEngagementPanelEndpoint & { [k in string]: R }\n  // key<T extends string, R = any>(key: T): Maybe\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining PrimitiveInferenceType Interface in TypeScript\nDESCRIPTION: This code snippet defines the PrimitiveInferenceType interface with three properties: type, typeof, and optional. It is used for primitive type inference in the YouTube.js parser/generator.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/interfaces/PrimitiveInferenceType.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface PrimitiveInferenceType {\n    type: \"primitive\";\n    typeof: (\"string\" | \"number\" | \"bigint\" | \"boolean\" | \"symbol\" | \"undefined\" | \"function\" | \"unknown\" | \"never\")[];\n    optional: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DecoratedPlayerBar Class in TypeScript\nDESCRIPTION: Class declaration for DecoratedPlayerBar which extends YTNode. It includes properties for player_bar and player_bar_action_button, and implements the constructor that accepts raw node data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DecoratedPlayerBar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew DecoratedPlayerBar(`data`): [`DecoratedPlayerBar`](DecoratedPlayerBar.md)\n```\n\n----------------------------------------\n\nTITLE: Defining DynamicTextView Class in TypeScript\nDESCRIPTION: This code snippet defines the DynamicTextView class, which extends YTNode. It includes a constructor, properties for text and max_lines, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DynamicTextView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DynamicTextView extends YTNode {\n  static type = 'DynamicTextView';\n\n  text: Text;\n  max_lines: number;\n\n  constructor(data: RawNode) {\n    super();\n    this.text = new Text(data.text);\n    this.max_lines = data.maxLines;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PlaylistMetadata Constructor Implementation\nDESCRIPTION: Constructor implementation that takes a RawNode parameter to initialize the title and description properties\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistMetadata.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(data: RawNode): PlaylistMetadata {\n  super();\n  this.title = data.title;\n  this.description = data.description;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LockupView Class Properties in TypeScript\nDESCRIPTION: Class properties definition for LockupView including content image, metadata, content ID, content type and renderer context. The class extends YTNode and defines various content types for YouTube items.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LockupView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LockupView extends YTNode {\n  static type = 'LockupView';\n  content_image: null | CollectionThumbnailView;\n  metadata: null | LockupMetadataView;\n  content_id: string;\n  content_type: \"VIDEO\" | \"MOVIE\" | \"CHANNEL\" | \"CLIP\" | \"SOURCE\" | \"PLAYLIST\" | \"ALBUM\" | \"PODCAST\" | \"SHOPPING_COLLECTION\" | \"SHORT\" | \"GAME\" | \"PRODUCT\";\n  renderer_context: RendererContext;\n}\n```\n\n----------------------------------------\n\nTITLE: Session Class Constructor in TypeScript\nDESCRIPTION: Constructor for the Session class which initializes an InnerTube session with required parameters including context, API key, API version, and account index.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Session.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew Session(context, api_key, api_version, account_index, player?, cookie?, fetch?, cache?, po_token?): Session\n```\n\n----------------------------------------\n\nTITLE: Check Tab URL Existence - TypeScript Method\nDESCRIPTION: Method to check if a tab with a specific URL exists in the TabbedFeed. Returns a boolean indicating presence.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/TabbedFeed.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nhasTabWithURL(url: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Implementing AddToPlaylistEndpoint Methods in TypeScript\nDESCRIPTION: This code snippet shows the inherited methods from AddToPlaylistServiceEndpoint, including buildRequest() and getApiPath(). These methods are not explicitly defined in the AddToPlaylistEndpoint class but are available through inheritance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddToPlaylistEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRequest(): AddToPlaylistServiceRequest {\n  // Implementation inherited from AddToPlaylistServiceEndpoint\n}\n\ngetApiPath(): string {\n  // Implementation inherited from AddToPlaylistServiceEndpoint\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'dialog' Property in ShowLiveChatDialogAction (TypeScript)\nDESCRIPTION: Declares the `dialog` property within the `ShowLiveChatDialogAction` class. This property holds the actual dialog content node (e.g., a confirmation dialog, message input dialog) parsed as a `YTNode`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatDialogAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ndialog: YTNode\n```\n\n----------------------------------------\n\nTITLE: Getter Method - NotificationsMenu Page\nDESCRIPTION: Getter method that returns the notifications menu response interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/NotificationsMenu.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget page(): IGetNotificationsMenuResponse\n```\n\n----------------------------------------\n\nTITLE: Defining CommentsEntryPointHeader Class in TypeScript\nDESCRIPTION: Class definition for CommentsEntryPointHeader which extends YTNode. This class handles the header section of YouTube comments, containing properties for comment count, header text, teaser avatars, and content renderers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsEntryPointHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CommentsEntryPointHeader'\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelSubMenu Class in TypeScript\nDESCRIPTION: This code defines the ChannelSubMenu class, which extends YTNode. It includes properties for content type sub-menu items and sort settings, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelSubMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelSubMenu extends YTNode {\n  static type = 'ChannelSubMenu';\n\n  content_type_sub_menu_items: object[];\n  sort_setting: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    this.content_type_sub_menu_items = data.contentTypeSubMenuItems;\n    this.sort_setting = Parser.parseItem(data.sortSetting);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Static GetPlaylistsFromMemo Method\nDESCRIPTION: Static method to retrieve all playlists from a memo object, returning an ObservedArray of playlist types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining MarkChatItemAsDeletedAction Class in TypeScript\nDESCRIPTION: TypeScript class definition for handling YouTube live chat message deletion actions. Contains properties for deleted state message and target item ID, extending the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MarkChatItemAsDeletedAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MarkChatItemAsDeletedAction extends YTNode {\n    static type = 'MarkChatItemAsDeletedAction';\n    deleted_state_message: Text;\n    target_item_id: string;\n\n    constructor(data: RawNode) {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing SendFeedbackAction Instances in TypeScript\nDESCRIPTION: Defines the constructor for the `SendFeedbackAction` class. It accepts raw node data (`RawNode`) conforming to YouTube's internal API structure and initializes a new instance of `SendFeedbackAction`. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SendFeedbackAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SendFeedbackAction(data: RawNode): SendFeedbackAction\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of type checking and key management methods inherited from YTNode, including is(), as(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsEntryPointTeaser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is CommentsEntryPointTeaser & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Library Methods - TypeScript\nDESCRIPTION: Core methods for library manipulation including applying filters and sorts, and retrieving continuations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Library.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nasync applyFilter(filter: string | ChipCloudChip): Promise<Library>\nasync applySort(sort_by: string | MusicMultiSelectMenuItem): Promise<Library>\nasync getContinuation(): Promise<LibraryContinuation>\n```\n\n----------------------------------------\n\nTITLE: Defining Static and Instance Properties for VerticalList Class\nDESCRIPTION: Declaration of the static and instance properties for the VerticalList class including the type identifier, items collection, collapsed item count, and collapsed state button text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalList.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'VerticalList'\n\nitems: ObservedArray<YTNode>\ncollapsed_item_count: string\ncollapsed_state_button_text: Text\n```\n\n----------------------------------------\n\nTITLE: Using Inherited 'as' Method for Type Casting in TypeScript\nDESCRIPTION: Inherited from YTNode, the 'as' method performs a type cast on the RemoveChatItemByAuthorAction instance. It accepts one or more YTNode constructor types (K) and attempts to cast the instance, returning the cast instance or throwing an error if the type doesn't match.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemByAuthorAction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nas<T, K>(...types): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional 'signal' Property in SignalServiceEndpoint (TypeScript)\nDESCRIPTION: Declares an optional string property `signal` within the `SignalServiceEndpoint` class. This property likely holds the specific signal identifier associated with this endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\noptional signal: string\n```\n\n----------------------------------------\n\nTITLE: Static Type Property Definition for DownloadButton Class in TypeScript\nDESCRIPTION: Static property definition that sets the type identifier for the DownloadButton class to 'DownloadButton'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DownloadButton.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'DownloadButton'\n```\n\n----------------------------------------\n\nTITLE: Defining TabbedFeed Class in TypeScript\nDESCRIPTION: This code snippet defines the TabbedFeed class, which extends the Feed class. It includes a constructor, type parameters, and various accessors for feed properties such as tabs and title.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/TabbedFeed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass TabbedFeed<T extends IParsedResponse> extends Feed<T> {\n  constructor(actions: Actions, data: ApiResponse | IParsedResponse, already_parsed: boolean = false) {\n    super(actions, data, already_parsed);\n  }\n\n  get tabs(): string[] {\n    // Implementation not shown\n  }\n\n  get title(): string | undefined {\n    // Implementation not shown\n  }\n\n  // Other methods and accessors\n}\n```\n\n----------------------------------------\n\nTITLE: FilteredChannelList Class Constructor Definition\nDESCRIPTION: Constructor for creating a new FilteredChannelList instance. Takes actions, data response, and parsing flag as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/FilteredChannelList.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew FilteredChannelList(actions: Actions, data: ApiResponse | IBrowseResponse, already_parsed: boolean = false): FilteredChannelList\n```\n\n----------------------------------------\n\nTITLE: Defining ToggleButton Class in TypeScript\nDESCRIPTION: The ToggleButton class definition extending YTNode with properties for managing toggle button state, text, tooltips, and navigation endpoints. It includes the constructor and properties for handling interactions with YouTube toggle buttons.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ToggleButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ToggleButton extends YTNode {\n  static type = 'ToggleButton';\n\n  text: Text;\n  toggled_text: Text;\n  tooltip: string;\n  toggled_tooltip: string;\n  is_toggled: boolean;\n  is_disabled: boolean;\n  icon_type: string;\n  like_count?: number;\n  short_like_count?: string;\n  endpoint: NavigationEndpoint;\n  toggled_endpoint: NavigationEndpoint;\n  button_id?: string;\n  target_id?: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation not shown in the provided code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited 'key' Method for Property Access (TypeScript)\nDESCRIPTION: Inherited method `key` from `YTNode`. It asserts that the node instance has the specified key and returns its value wrapped in a `Maybe` object. Throws an error if the key does not exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: EmojiRun Properties Definition - TypeScript\nDESCRIPTION: Definition of class properties including text string and emoji object containing various emoji-related data like ID, images, search terms, and shortcuts.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/EmojiRun.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntext: string;\nemoji: {\n  emoji_id: string;\n  image: Thumbnail[];\n  is_custom: boolean;\n  search_terms: string[];\n  shortcuts: string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Validating YouTube Renderer Lists in TypeScript\nDESCRIPTION: Function that checks if a given value is an array of YouTube renderers. Returns an object mapping classnames to example instances if valid, or false otherwise. Used in the YouTube.js parser generator.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/isRendererList.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisRendererList(value: unknown): false | object\n```\n\n----------------------------------------\n\nTITLE: Defining applyMutations Function in TypeScript for YouTube.js Parser\nDESCRIPTION: This snippet defines the applyMutations function, which takes a Memo object and an array of RawNode mutations as parameters. The function doesn't return anything (void). It's likely responsible for applying a series of mutations to update the state of the Memo object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/applyMutations.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\napplyMutations(memo: Memo, mutations: RawNode[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining MultiPageMenu Class Properties - TypeScript\nDESCRIPTION: Defines the core properties of the MultiPageMenu class including header, sections, and style. The class extends YTNode and includes type definitions for menu components.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiPageMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MultiPageMenu extends YTNode {\n  static type = 'MultiPageMenu';\n  header: YTNode;\n  sections: ObservedArray<YTNode>;\n  style: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MultiPageMenuNotificationSection Class in TypeScript\nDESCRIPTION: This code snippet defines the MultiPageMenuNotificationSection class, which extends YTNode. It includes a constructor, properties, and an accessor for the contents.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiPageMenuNotificationSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MultiPageMenuNotificationSection extends YTNode {\n  static type = 'MultiPageMenuNotificationSection';\n\n  items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.items = Helpers.parseArray(data.multiPageMenuNotificationSectionRenderer.items);\n  }\n\n  get contents() {\n    return this.items;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the SearchEndpoint Constructor in TypeScript\nDESCRIPTION: Implements the SearchEndpoint constructor, initializing a new instance based on a RawNode parameter and providing type safety, as required by the YTNode inheritance. Dependencies include the RawNode type and the YTNode base class. Inputs: an object of type RawNode; Output: a SearchEndpoint instance. The constructor overrides its counterpart in YTNode and integrates with YouTube.js’s internal parsing system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): SearchEndpoint\n```\n\n----------------------------------------\n\nTITLE: Defining PivotButton Class in TypeScript\nDESCRIPTION: This snippet defines the PivotButton class, which extends YTNode. It includes various properties such as thumbnail, endpoint, content_description, and animation styles.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PivotButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PivotButton extends YTNode {\n  static type = 'PivotButton';\n\n  thumbnail: Thumbnail[];\n  endpoint: NavigationEndpoint;\n  content_description: Text;\n  target_id: string;\n  sound_attribution_title: Text;\n  waveform_animation_style: string;\n  background_animation_style: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DidYouMean Class in TypeScript\nDESCRIPTION: This snippet defines the DidYouMean class, which extends YTNode. It includes properties for text, corrected query, and navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DidYouMean.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DidYouMean extends YTNode {\n  static type = 'DidYouMean';\n\n  text: string;\n  corrected_query: Text;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ModalWithTitleAndButton Class Properties in TypeScript\nDESCRIPTION: Defines the static and instance properties of the ModalWithTitleAndButton class including title, content, and button fields\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ModalWithTitleAndButton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'ModalWithTitleAndButton';\n\ntitle: Text;\ncontent: Text;\nbutton: null | Button;\n```\n\n----------------------------------------\n\nTITLE: Defining Replacement Node Property in ReplaceLiveChatAction (TypeScript)\nDESCRIPTION: Declares the `replacement` property within the `ReplaceLiveChatAction` class. This property holds the parsed `YTNode` representing the content that should replace another item in the live chat feed, or `null` if there is no specific replacement content. It's derived from the `replacementItem` within the input data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplaceLiveChatAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreplacement: null | YTNode\n```\n\n----------------------------------------\n\nTITLE: Defining WatchNextTabbedResults Class in TypeScript\nDESCRIPTION: Defines the WatchNextTabbedResults class which extends TwoColumnBrowseResults. It includes a constructor, static type property, and inherits properties and methods from its parent class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchNextTabbedResults.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass WatchNextTabbedResults extends TwoColumnBrowseResults {\n  static type: string = 'WatchNextTabbedResults';\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoDescriptionInfocardsSection Class in TypeScript\nDESCRIPTION: This code defines the VideoDescriptionInfocardsSection class that extends YTNode. It includes properties for section title, subtitle, creator buttons, channel avatar, and channel endpoint. The class handles video description information cards in the YouTube API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionInfocardsSection.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'VideoDescriptionInfocardsSection'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsection_title: Text;\ncreator_videos_button: null | Button;\ncreator_about_button: null | Button;\nsection_subtitle: Text;\nchannel_avatar: Thumbnail[];\nchannel_endpoint: NavigationEndpoint;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): VideoDescriptionInfocardsSection\n```\n\n----------------------------------------\n\nTITLE: LikeEndpoint Class Constructor Implementation\nDESCRIPTION: Constructor for LikeEndpoint class that takes RawNode data as parameter and extends YTNode base class\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew LikeEndpoint(data: RawNode): LikeEndpoint\n```\n\n----------------------------------------\n\nTITLE: Defining MovingThumbnail Properties in TypeScript\nDESCRIPTION: This code snippet shows the properties of the MovingThumbnail class, including the inherited readonly type property and the static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MovingThumbnail.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MovingThumbnail extends YTNode {\n  readonly type: string;\n  static type: string = 'MovingThumbnail';\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing ReplaceLiveChatAction Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `ReplaceLiveChatAction` class. It accepts raw data (`RawNode`) representing a YouTube live chat action and initializes the instance, overriding the base `YTNode` constructor. It parses the input data to set the `to_replace` (target item ID) and `replacement` (replacement node) properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplaceLiveChatAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ReplaceLiveChatAction(data: RawNode): ReplaceLiveChatAction\n```\n\n----------------------------------------\n\nTITLE: Defining MusicItemThumbnailOverlay Class in TypeScript\nDESCRIPTION: This code snippet defines the MusicItemThumbnailOverlay class, which extends YTNode. It includes a constructor and several properties related to music item thumbnail overlays.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicItemThumbnailOverlay.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicItemThumbnailOverlay extends YTNode {\n  static type = 'MusicItemThumbnailOverlay';\n\n  content: null | MusicPlayButton;\n  content_position: string;\n  display_style: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HeroPlaylistThumbnail Class in TypeScript\nDESCRIPTION: This snippet defines the HeroPlaylistThumbnail class, which extends YTNode. It includes properties for thumbnails and on_tap_endpoint, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HeroPlaylistThumbnail.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass HeroPlaylistThumbnail extends YTNode {\n  static type = 'HeroPlaylistThumbnail';\n\n  thumbnails: Thumbnail[];\n  on_tap_endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    this.thumbnails = Thumbnail.fromResponse(data.thumbnails);\n    this.on_tap_endpoint = new NavigationEndpoint(data.onTapCommand);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TwoColumnSearchResults Class Definition in TypeScript\nDESCRIPTION: Defines the TwoColumnSearchResults class that extends YTNode to represent YouTube search results structure with primary and secondary content containers. It includes constructor, properties, and inherited methods for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TwoColumnSearchResults.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TwoColumnSearchResults'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nprimary_contents: SuperParsedResult<YTNode>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsecondary_contents: SuperParsedResult<YTNode>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew TwoColumnSearchResults(data: RawNode): TwoColumnSearchResults\n```\n\n----------------------------------------\n\nTITLE: Defining CompactChannel Class in TypeScript\nDESCRIPTION: This code snippet defines the CompactChannel class, which extends YTNode. It includes properties for channel details such as title, thumbnail, subscriber count, and navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactChannel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CompactChannel extends YTNode {\n  static type = 'CompactChannel';\n\n  title: Text;\n  channel_id: string;\n  thumbnail: Thumbnail[];\n  display_name: Text;\n  video_count: Text;\n  subscriber_count: Text;\n  endpoint: NavigationEndpoint;\n  tv_banner: Thumbnail[];\n  menu: Menu | null;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetAccountsListInnertubeEndpoint Class in TypeScript\nDESCRIPTION: This code snippet shows the class definition for GetAccountsListInnertubeEndpoint, including its constructor, properties, and methods for building API requests to fetch account lists.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GetAccountsListInnertubeEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'GetAccountsListInnertubeEndpoint'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): GetAccountsListInnertubeEndpoint\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetApiPath(): string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRequest(): GetAccountsListInnertubeRequest\n```\n\n----------------------------------------\n\nTITLE: Class Definition for ExpandableVideoDescriptionBody in TypeScript\nDESCRIPTION: Defines the ExpandableVideoDescriptionBody class that extends YTNode. It contains properties for show_more_text, show_less_text, and attributed_description_body_text, as well as a constructor that accepts RawNode data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ExpandableVideoDescriptionBody.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ExpandableVideoDescriptionBody extends YTNode {\n  static type = 'ExpandableVideoDescriptionBody';\n\n  show_more_text: Text;\n  show_less_text: Text;\n  attributed_description_body_text?: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatBannerChatSummary Class Properties\nDESCRIPTION: Class definition showing the properties of LiveChatBannerChatSummary including id, chat_summary, icon_type, and feedback buttons. Extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatBannerChatSummary.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatBannerChatSummary extends YTNode {\n  static type = 'LiveChatBannerChatSummary';\n  id: string;\n  chat_summary: Text;\n  icon_type: string;\n  like_feedback_button: null | ToggleButtonView;\n  dislike_feedback_button: null | ToggleButtonView;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Playlist Continuation in TypeScript\nDESCRIPTION: Method to fetch additional playlist items when there's a continuation available. Returns a Promise resolving to a new Playlist instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Playlist.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetContinuation(): Promise<Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining VideoCard Class in TypeScript\nDESCRIPTION: This code snippet defines the VideoCard class, which extends the Video class. It includes additional properties for metadata_text and byline_text, and overrides the constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoCard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoCard extends Video {\n  static type = 'VideoCard';\n\n  metadata_text?: Text;\n  byline_text?: Text;\n\n  constructor(data: RawNode) {\n    super(data);\n    this.metadata_text = this.title;\n    this.byline_text = Reflect.get(data, 'bylineText.runs');\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Search Continuation Data Retrieval\nDESCRIPTION: Method to get raw continuation data from a search response without processing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | ISearchResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining CommentReplies Class Properties in TypeScript\nDESCRIPTION: Declaration of the CommentReplies class with its properties including contents (array of replies), view/hide buttons, thumbnails, and a flag for channel owner participation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentReplies.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CommentReplies'\n\ncontents: ObservedArray<YTNode>\nview_replies: null | Button\nhide_replies: null | Button\nview_replies_creator_thumbnail: Thumbnail[]\nhas_channel_owner_replied: boolean\n```\n\n----------------------------------------\n\nTITLE: ShortFormVideoInfo Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the ShortFormVideoInfo class which takes data, actions, cpn, and reel_watch_sequence_response parameters to initialize a new ShortFormVideoInfo instance, extending the MediaInfo class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ShortFormVideoInfo(data, actions, cpn, reel_watch_sequence_response): ShortFormVideoInfo\n```\n\n----------------------------------------\n\nTITLE: Defining Target Item ID Property in ReplaceLiveChatAction (TypeScript)\nDESCRIPTION: Declares the `to_replace` property for the `ReplaceLiveChatAction` class. This string property stores the unique identifier (`targetItemId`) of the live chat item that is targeted for replacement by this action.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplaceLiveChatAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nto_replace: string\n```\n\n----------------------------------------\n\nTITLE: Using YTNode Generic Methods for Type Checking and Key Assertion in TypeScript\nDESCRIPTION: This snippet lists inherited utility methods such as is(), as(), hasKey(), and key() from the YTNode base class, all typed for RunAttestationCommand. These generics enable runtime manipulation, type checks, and safe property access for command node instances. These methods require definitions for YTNode, Maybe, and relevant typing for YTNodeConstructor. Inputs are node types or key strings, with outputs including type assertions, casted instances, or actual property values.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RunAttestationCommand.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\nhasKey<T extends string, R = any>(key: T): this is RunAttestationCommand & { [k in string]: R };\nkey<T extends string, R = any>(key: T): Maybe;\n\n```\n\n----------------------------------------\n\nTITLE: TitleAndButtonListHeader Static Type Property in TypeScript\nDESCRIPTION: This code defines the static type property of the TitleAndButtonListHeader class, which is set to the string 'TitleAndButtonListHeader'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TitleAndButtonListHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> `static` **type**: `string` = `'TitleAndButtonListHeader'`\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 6.4.x\nDESCRIPTION: Markdown formatted changelog entries detailing features and fixes for versions 6.4.0 and 6.4.1\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* Add support for retrieving transcripts ([#500](https://github.com/LuanRT/YouTube.js/issues/500)) ([f94ea6c])\n* **PlaylistManager:** add .setName() and .setDescription() functions ([#498](https://github.com/LuanRT/YouTube.js/issues/498)) ([86fb33e])\n\n### Bug Fixes\n\n* **Feed:** Do not throw when multiple continuations are present ([8e372d5])\n* **Playlist:** Throw a more helpful error when parsing empty responses ([987f506])\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for Type and Key Operations - YTNode Inherited Methods (TypeScript)\nDESCRIPTION: Documents a collection of utility methods inherited from the YTNode base class, offering runtime type assertions, key existence checks, and safe key access for parser node instances. The methods include is, as, hasKey, and key, each using generics for type safety. Inputs are typically node types or property names, with outputs ranging from validation booleans to wrapped property values, and errors thrown if constraints are violated. These dependencies require node structures adhering to YouTube.js framework interfaces and allow robust, type-safe parser traversal.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowCustomThumbnail.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Check if the node is of the given type.\n */\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\n/**\n * Cast to one of the given types. Throws if the node is not of the given type.\n */\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\n/**\n * Check for a key without asserting type.\n */\nhasKey<T extends string, R = any>(key: T): this is ShowCustomThumbnail & { [k in string]: R };\n\n/**\n * Assert node has the key and return it, wrapped in Maybe. Throws if missing.\n */\nkey<T extends string, R = any>(key: T): Maybe;\n\n```\n\n----------------------------------------\n\nTITLE: PlaylistCustomThumbnail Methods - TypeScript\nDESCRIPTION: Inherited utility methods from YTNode for type checking and property access including as(), is(), hasKey() and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistCustomThumbnail.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is PlaylistCustomThumbnail & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Card Class Method Implementations in TypeScript\nDESCRIPTION: Implementation of inherited methods from YTNode including as(), is(), hasKey(), and key() for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Card.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is Card & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: HomeFeed Properties Definition\nDESCRIPTION: Defines optional properties for header and contents using KidsCategoriesHeader and KidsHomeScreen types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/HomeFeed.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nheader?: KidsCategoriesHeader;\ncontents?: KidsHomeScreen;\n```\n\n----------------------------------------\n\nTITLE: Defining ProductList Class in TypeScript\nDESCRIPTION: Class definition for ProductList that extends YTNode. Contains a constructor accepting RawNode data and manages product list contents using ObservedArray.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProductList.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductList extends YTNode {\n  static type = 'ProductList';\n  contents: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation not shown in snippet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining YouTube Video Feature Types in TypeScript\nDESCRIPTION: Type alias that defines possible feature flags for YouTube videos including quality indicators (HD, 4K, HDR), content types (live, creative commons), and viewing modes (360, VR180).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/Feature.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Feature = \"hd\" | \"subtitles\" | \"creative_commons\" | \"3d\" | \"live\" | \"purchased\" | \"4k\" | \"360\" | \"location\" | \"hdr\" | \"vr180\"\n```\n\n----------------------------------------\n\nTITLE: Describing Inherited YTNode Methods for Node Manipulation - TypeScript\nDESCRIPTION: This snippet documents the inherited utility methods from YTNode, enabling type checking (is), casting to alternate types (as), existence checks for properties (hasKey), and safe property retrieval (key) with error throwing when keys are missing. These methods use TypeScript generics to allow safe transformations and assertions when working with nodes of uncertain or multiple possible types. Dependencies include the base YTNode class and potentially the Maybe wrapper type for safe value handling.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Quiz.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Inherited methods from YTNode:\n *\n * is<T, K>(...types: K): this is InstanceType<K[number]>\n *   - Check if the node matches any of the provided types.\n *\n * as<T, K>(...types: K): InstanceType<K[number]>\n *   - Cast the node to one of provided types; throws if none match.\n *\n * hasKey<T extends string, R = any>(key: T): this is Quiz & { [k in string]: R }\n *   - Check for existence of a string key in the node without asserting its type.\n *\n * key<T extends string, R = any>(key: T): Maybe\n *   - Returns the value of the specified key wrapped in Maybe; throws if key does not exist.\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatBannerRedirect Class in TypeScript\nDESCRIPTION: This code snippet defines the LiveChatBannerRedirect class, which extends YTNode. It includes properties for banner message, author photo, and action buttons. The class constructor takes a RawNode data parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatBannerRedirect.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatBannerRedirect extends YTNode {\n  static type = 'LiveChatBannerRedirect';\n\n  banner_message: Text;\n  author_photo: Thumbnail[];\n  inline_action_button: null | Button;\n  context_menu_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n    this.banner_message = new Text(data.bannerMessage);\n    this.author_photo = Thumbnail.fromResponse(data.authorPhoto);\n    this.inline_action_button = data.inlineActionButton ? new Button(data.inlineActionButton) : null;\n    this.context_menu_button = data.contextMenuButton ? new Button(data.contextMenuButton) : null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistPanelVideoWrapper Class Properties\nDESCRIPTION: Defines the static and instance properties of the PlaylistPanelVideoWrapper class, including the primary video and optional counterpart videos.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistPanelVideoWrapper.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'PlaylistPanelVideoWrapper';\n\nprimary: null | PlaylistPanelVideo;\noptional counterpart?: ObservedArray<PlaylistPanelVideo>;\n```\n\n----------------------------------------\n\nTITLE: Constructor Definition for MultiPageMenuSection Class in TypeScript\nDESCRIPTION: Constructor that initializes a new MultiPageMenuSection instance with provided raw node data. Extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiPageMenuSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MultiPageMenuSection(data: RawNode): MultiPageMenuSection\n```\n\n----------------------------------------\n\nTITLE: Defining the TranscriptSectionHeader Class in TypeScript\nDESCRIPTION: The implementation of the TranscriptSectionHeader class that extends YTNode to represent section headers in YouTube video transcripts. It contains properties for start and end timestamps and the text content of the header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSectionHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TranscriptSectionHeader'\n```\n\n----------------------------------------\n\nTITLE: Creating an UpdateDescriptionAction instance in TypeScript\nDESCRIPTION: Constructor implementation for the UpdateDescriptionAction class that accepts raw node data and initializes a new instance. This class handles description updates for YouTube live chat.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateDescriptionAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew UpdateDescriptionAction(`data`): [`UpdateDescriptionAction`](UpdateDescriptionAction.md)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Feed for HomeFeed in TypeScript\nDESCRIPTION: This inherited method applies a filter and returns a new Feed instance with the filtered content.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetFilteredFeed(filter: string | ChipCloudChip): Promise<Feed<IBrowseResponse>>\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Access Methods in TypeScript\nDESCRIPTION: Methods for checking and accessing properties of YTNode instances, including 'hasKey' and 'key' methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/YTNode.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is YTNode & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining GridChannel Class in TypeScript\nDESCRIPTION: This code defines the GridChannel class, which extends YTNode. It includes properties for channel information and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridChannel.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass GridChannel extends YTNode {\n  static type = 'GridChannel';\n\n  id: string;\n  author: Author;\n  subscribers: Text;\n  video_count: Text;\n  endpoint: NavigationEndpoint;\n  subscribe_button: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    this.id = data.id;\n    this.author = new Author(data.title, data.owner_badges, data.endpoint);\n    this.subscribers = new Text(data.subscribers);\n    this.video_count = new Text(data.videos);\n    this.endpoint = new NavigationEndpoint(data.endpoint);\n    this.subscribe_button = Parser.parseItem(data.subscribe_button);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Button Property in RecognitionShelf (TypeScript)\nDESCRIPTION: Declares the `button` property for the RecognitionShelf class. It can hold either a `Button` object or `null`, representing an optional interactive button associated with the shelf.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbutton: null | Button\n```\n\n----------------------------------------\n\nTITLE: Defining MacroMarkersInfoItem Class Properties - TypeScript\nDESCRIPTION: Defines the core properties of the MacroMarkersInfoItem class including info_text, menu, and type. The class extends YTNode and includes static type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MacroMarkersInfoItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'MacroMarkersInfoItem';\n\ninfo_text: Text;\nmenu: null | Menu;\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatBannerPoll Class in TypeScript\nDESCRIPTION: This code snippet defines the LiveChatBannerPoll class, which extends YTNode. It includes properties for poll details such as author photo, choices, and poll question.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatBannerPoll.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatBannerPoll extends YTNode {\n  static type = 'LiveChatBannerPoll';\n\n  poll_question: Text;\n  author_photo: Thumbnail[];\n  choices: object[];\n  collapsed_state_entity_key: string;\n  live_chat_poll_state_entity_key: string;\n  context_menu_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Author Class Properties in TypeScript\nDESCRIPTION: Class property definitions including basic author information, verification status, and metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Author.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbadges: ObservedArray<YTNode>\nendpoint?: NavigationEndpoint\nid: string\nis_moderator?: boolean\nis_verified?: boolean\nis_verified_artist?: boolean\nname: string\nthumbnails: Thumbnail[]\nurl: string\n```\n\n----------------------------------------\n\nTITLE: Defining AudioOnlyPlayability Class in TypeScript\nDESCRIPTION: This code defines the AudioOnlyPlayability class, which extends YTNode. It includes a constructor, a property for audio_only_availability, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AudioOnlyPlayability.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AudioOnlyPlayability extends YTNode {\n  static type = 'AudioOnlyPlayability';\n\n  audio_only_availability: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.audio_only_availability = data.audio_only_availability;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Visitor Data Function in TypeScript\nDESCRIPTION: Function to encode visitor data into YouTube's proto format.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/README.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction encodeVisitorData(visitorData: VisitorData): string {\n  // Implementation details\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClipAdState Class in TypeScript\nDESCRIPTION: Class definition for ClipAdState that extends YTNode. Includes constructor taking RawNode data parameter, properties for title and body text, and inherited methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipAdState.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ClipAdState extends YTNode {\n    static type = 'ClipAdState';\n    \n    title: Text;\n    body: Text;\n\n    constructor(data: RawNode) {\n        super();\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelSwitcherHeader Class Properties - TypeScript\nDESCRIPTION: Defines the core properties of the ChannelSwitcherHeader class including title, button, and type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelSwitcherHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'ChannelSwitcherHeader';\n\ntitle: string;\nbutton?: null | Button;\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveChatBanner Class in TypeScript\nDESCRIPTION: TypeScript class that extends YTNode to handle YouTube live chat banner functionality. It manages banner properties like content, header, action ID, and various banner-specific configurations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatBanner.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatBanner extends YTNode {\n  static type = 'LiveChatBanner';\n\n  header: null | LiveChatBannerHeader;\n  contents: YTNode;\n  action_id: string;\n  viewer_is_creator?: boolean;\n  target_id: string;\n  is_stackable: boolean;\n  background_type?: string;\n  banner_type: string;\n  banner_properties_is_ephemeral?: boolean;\n  banner_properties_auto_collapse_delay_seconds?: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining C4TabbedHeader Class in TypeScript\nDESCRIPTION: This code snippet defines the C4TabbedHeader class, which extends YTNode. It includes various properties related to channel headers such as author, banner, subscribers, and more.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/C4TabbedHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass C4TabbedHeader extends YTNode {\n  static type = 'C4TabbedHeader';\n\n  author: Author;\n  banner?: Thumbnail[];\n  tv_banner?: Thumbnail[];\n  mobile_banner?: Thumbnail[];\n  subscribers?: Text;\n  videos_count?: Text;\n  sponsor_button?: null | Button;\n  subscribe_button?: null | Button | SubscribeButton;\n  header_links?: null | ChannelHeaderLinks | ChannelHeaderLinksView;\n  channel_handle?: Text;\n  channel_id?: string;\n  tagline?: null | ChannelTagline;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Menu Class in TypeScript\nDESCRIPTION: Class definition for Menu that extends YTNode. Includes properties for flexible items, regular items, top level buttons and an optional label. Constructor takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Menu.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Menu extends YTNode {\n    static type = 'Menu';\n\n    items: ObservedArray<YTNode>;\n    flexible_items: ObservedArray<MenuFlexibleItem>;\n    top_level_buttons: ObservedArray<Button | ButtonView | SegmentedLikeDislikeButtonView | LikeButton | ToggleButton | FlexibleActionsView>;\n    label?: string;\n\n    constructor(data: RawNode) {\n        super();\n    }\n\n    get contents(): ObservedArray<YTNode> {\n        return this.items;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ConversationBar TypeScript Class\nDESCRIPTION: Class definition for ConversationBar that extends YTNode. It includes a constructor accepting RawNode data and properties for handling availability messages. The class provides type checking and key management methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ConversationBar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ConversationBar extends YTNode {\n  static type = 'ConversationBar';\n  availability_message: null | Message;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited YTNode Methods for Type Checking in TypeScript\nDESCRIPTION: Methods inherited from YTNode that provide type checking and property access functionality, including as(), is(), hasKey(), and key() methods for working with the node's properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailView.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is ThumbnailView & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: YTNode Method Implementation: 'hasKey' Type Checking Method\nDESCRIPTION: Method that checks for a key's existence without asserting the type. This is an inherited method from the base YTNode class for safely checking property existence.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactPlaylist.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n**hasKey**\\<`T`, `R`\\>(`key`): `this is CompactPlaylist & { [k in string]: R }`\n```\n\n----------------------------------------\n\nTITLE: HorizontalList Class Definition in TypeScript\nDESCRIPTION: Defines the HorizontalList class which extends YTNode. The class represents a horizontal list with visible item count and array of items. It includes constructor implementation and property definitions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HorizontalList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'HorizontalList';\n\nvisible_item_count: string;\nitems: ObservedArray<YTNode>;\n\nconstructor(data: RawNode) {\n  super();\n  this.visible_item_count = data.visibleItemCount;\n  this.items = Parser.parseArray(data.items);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatRestrictedParticipation Class in TypeScript\nDESCRIPTION: This code defines the LiveChatRestrictedParticipation class, which extends YTNode. It includes properties for the message and icon type, as well as a constructor and static type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatRestrictedParticipation.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatRestrictedParticipation extends YTNode {\n  static type = 'LiveChatRestrictedParticipation';\n\n  message: Text;\n  icon_type?: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.message = new Text(data.message);\n    this.icon_type = data.icon?.iconType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Watch Next Continuation in ShortFormVideoInfo Class\nDESCRIPTION: This method retrieves the next short-form video in a sequence. It returns a Promise that resolves to another ShortFormVideoInfo object, enabling continuous playback or navigation through shorts.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetWatchNextContinuation(): Promise<ShortFormVideoInfo>\n```\n\n----------------------------------------\n\nTITLE: Implementing API Path Method in TypeScript\nDESCRIPTION: Method implementation for getting the API path for the playlist service endpoint\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddToPlaylistServiceEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiPath(): string {\n  return '/youtubei/v1/playlist/create';\n}\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods Implementation in TypeScript\nDESCRIPTION: Helper methods inherited from YTNode class including as(), is(), hasKey(), and key(). These methods are used for type checking, casting, and property access in a type-safe manner.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridShow.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is GridShow & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inherited 'as' Method for Type Casting in TypeScript\nDESCRIPTION: Defines the inherited `as` method from `YTNode`. This method allows casting the current node instance to one of the specified `YTNode` types, throwing an error if the instance is not assignable to any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'endpoint' Property in SearchSuggestion Class (TypeScript)\nDESCRIPTION: Declares the `endpoint` property for the `SearchSuggestion` class. This property holds a `NavigationEndpoint` object, which contains information about where the user will be directed if they select this search suggestion.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSuggestion.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nendpoint: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Defining call_to_action Property in RichMetadata (TypeScript)\nDESCRIPTION: Declares the `call_to_action` property within the `RichMetadata` class. This property holds data of type `Text`, representing a call to action associated with the metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncall_to_action: Text\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Type Property in SearchEndpoint (TypeScript)\nDESCRIPTION: Declares and exposes the static type property identifying the class as 'SearchEndpoint', overriding the type property inherited from YTNode. This property is essential for class metadata and runtime type reflection in the library’s parsing system. Input/output: the static string 'SearchEndpoint'. Constraint: must match class naming convention to support dynamic type lookups.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'SearchEndpoint'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Interface Declaration for YouTube API Endpoint\nDESCRIPTION: Defines a generic interface IEndpoint<T> with two required methods: getApiPath() for returning the API endpoint path and buildRequest() for constructing API requests. The interface uses a generic type parameter T defaulting to any.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IEndpoint<T = any> {\n    getApiPath(): string;\n    buildRequest(): T;\n}\n```\n\n----------------------------------------\n\nTITLE: WatchCardHeroVideo Class Definition in TypeScript\nDESCRIPTION: This code defines the WatchCardHeroVideo class that extends YTNode. It includes properties for navigation endpoint, call to action button, hero image, and label text. The class is used to represent hero video components in YouTube's interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchCardHeroVideo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'WatchCardHeroVideo'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nendpoint: NavigationEndpoint;\ncall_to_action_button: YTNode;\nhero_image: YTNode;\nlabel: string;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode) {\n  super();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ITrustedResource Interface in TypeScript\nDESCRIPTION: This code snippet defines the ITrustedResource interface with two optional properties. These properties are likely used for handling trusted resources and safe scripts in the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/ITrustedResource.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface ITrustedResource {\n    private_do_not_access_or_else_trusted_resource_url_wrapped_value?: string;\n    private_do_not_access_or_else_safe_script_wrapped_value?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining thumbnail Property in RichMetadata (TypeScript)\nDESCRIPTION: Declares the `thumbnail` property within the `RichMetadata` class. This property is an array of `Thumbnail` objects, representing the various thumbnail images associated with the metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nthumbnail: Thumbnail[]\n```\n\n----------------------------------------\n\nTITLE: Defining the Avatars Property in RecognitionShelf (TypeScript)\nDESCRIPTION: Declares the `avatars` property for the RecognitionShelf class. It holds an array of `Thumbnail` objects, representing the user avatars displayed in the recognition shelf.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\navatars: Thumbnail[]\n```\n\n----------------------------------------\n\nTITLE: Casting Node Type with as() Method in YTNode (TypeScript)\nDESCRIPTION: Defines the generic `as` method, inherited from `YTNode`. It attempts to cast the current node instance to one of the specified YTNode types. It throws an error if the node is not an instance of any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalAction.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: ChildVideo Class Constructor and Properties Implementation\nDESCRIPTION: Defines a TypeScript class for handling YouTube child video objects with properties for video duration, navigation endpoint, ID, and title. Extends the YTNode base class and implements type checking methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChildVideo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChildVideo extends YTNode {\n  static type = 'ChildVideo';\n\n  id: string;\n  title: Text;\n  duration: {\n    seconds: number;\n    text: string;\n  };\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is ChildVideo & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: LikeButton Helper Methods Implementation\nDESCRIPTION: Implements inherited utility methods from YTNode including type checking (is, as) and property access helpers (hasKey, key). These methods provide type-safe access to the button's properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeButton.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is LikeButton & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Constructing SearchFilterGroup Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `SearchFilterGroup` class, which extends `YTNode`. It accepts raw node data (`RawNode`) as input and initializes a new `SearchFilterGroup` object, overriding the base class constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew SearchFilterGroup(data: RawNode): SearchFilterGroup\n```\n\n----------------------------------------\n\nTITLE: Defining OpenPopupAction Class in TypeScript\nDESCRIPTION: This code defines the OpenPopupAction class, which extends YTNode. It has properties for the popup and popup type, and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/OpenPopupAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass OpenPopupAction extends YTNode {\n  static type = 'OpenPopupAction';\n\n  popup: YTNode;\n  popup_type: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.popup = data.popup;\n    this.popup_type = data.popupType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoAttributeView Class in TypeScript\nDESCRIPTION: This code snippet defines the VideoAttributeView class, which extends YTNode. It includes properties for various video attributes and a constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoAttributeView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoAttributeView extends YTNode {\n  static type = 'VideoAttributeView';\n\n  image: null | Thumbnail[] | ContentPreviewImageView;\n  image_style: string;\n  title: string;\n  subtitle: string;\n  secondary_subtitle?: {\n    content: string;\n  };\n  orientation: string;\n  sizing_rule: string;\n  overflow_menu_on_tap: NavigationEndpoint;\n  overflow_menu_a11y_label: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.image = data.image?.sources ? Thumbnail.fromResponse(data.image.sources) :\n      data.image?.image ? new ContentPreviewImageView(data.image.image) : null;\n    this.image_style = data.imageStyle;\n    this.title = data.title;\n    this.subtitle = data.subtitle;\n    this.secondary_subtitle = data.secondarySubtitle;\n    this.orientation = data.orientation;\n    this.sizing_rule = data.sizingRule;\n    this.overflow_menu_on_tap = new NavigationEndpoint(data.overflowMenuOnTap);\n    this.overflow_menu_a11y_label = data.overflowMenuA11yLabel;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Declaration for debugFetch\nDESCRIPTION: Function signature for debugFetch which accepts a URL or RequestInfo and optional RequestInit parameters. Returns a Promise containing a Response object. This is a wrapper around the standard fetch API with added debugging capabilities.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/debugFetch.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ndebugFetch(input: URL | RequestInfo, init?: RequestInit): Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Defining CompactMix Class in TypeScript\nDESCRIPTION: This code snippet defines the CompactMix class, which extends the Playlist class. It includes a constructor that takes a RawNode parameter and sets the static type property to 'CompactMix'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactMix.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CompactMix extends Playlist {\n  static type = 'CompactMix';\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TopicChannelDetails Class Definition in TypeScript\nDESCRIPTION: The TypeScript class definition for TopicChannelDetails which extends YTNode. It contains properties for channel information like title, avatar, subtitle, subscribe button, and navigation endpoint along with inherited methods for type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TopicChannelDetails.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TopicChannelDetails extends YTNode {\n  static type = 'TopicChannelDetails';\n\n  title: Text;\n  avatar: Thumbnail[];\n  subtitle: Text;\n  subscribe_button: null | SubscribeButton;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation not shown in the documentation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods Implementation - ChipView TypeScript\nDESCRIPTION: Methods inherited from YTNode class including as(), hasKey(), is() and key() for type checking and property access. These provide type safety and property validation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChipView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is ChipView & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataBadge Class Properties in TypeScript\nDESCRIPTION: Defines the static and instance properties of the MetadataBadge class including optional fields for icon_type, style, label, and tooltip.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataBadge.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MetadataBadge extends YTNode {\n  static type = 'MetadataBadge';\n  \n  icon_type?: string;\n  style?: string;\n  label?: string;\n  tooltip?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: HowThisWasMadeSectionView Class Definition in TypeScript\nDESCRIPTION: Class definition for HowThisWasMadeSectionView which extends YTNode. It includes properties for section_title, body_text, and body_header, and includes a static type identifier.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HowThisWasMadeSectionView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'HowThisWasMadeSectionView'\n```\n\n----------------------------------------\n\nTITLE: Defining ChangeEngagementPanelVisibilityAction Class in TypeScript\nDESCRIPTION: Class definition for handling YouTube engagement panel visibility actions. Extends YTNode base class and includes properties for target_id and visibility state management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChangeEngagementPanelVisibilityAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChangeEngagementPanelVisibilityAction extends YTNode {\n  static type = 'ChangeEngagementPanelVisibilityAction';\n  target_id: string;\n  visibility: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ChannelSwitcherHeader Constructor Implementation - TypeScript\nDESCRIPTION: Constructor implementation that takes a RawNode parameter and initializes a new ChannelSwitcherHeader instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelSwitcherHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew ChannelSwitcherHeader(data: RawNode): ChannelSwitcherHeader\n```\n\n----------------------------------------\n\nTITLE: Constructing MusicResponsiveHeader Instances in TypeScript\nDESCRIPTION: Defines the constructor for the `MusicResponsiveHeader` class. It takes raw node data (`RawNode`) as input and initializes a new instance of the class. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MusicResponsiveHeader(data: RawNode): MusicResponsiveHeader\n```\n\n----------------------------------------\n\nTITLE: LiveChatItemBumperView Class Definition\nDESCRIPTION: Class definition for LiveChatItemBumperView that extends YTNode class. Contains constructor and properties for handling live chat bumper views.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatItemBumperView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatItemBumperView extends YTNode {\n  static type = 'LiveChatItemBumperView';\n  content: null | BumperUserEduContentView;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PdgCommentChip Class in TypeScript\nDESCRIPTION: Class definition for PdgCommentChip that extends YTNode. Includes properties for text content, color palette configuration, and icon type. Constructor accepts RawNode data parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PdgCommentChip.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PdgCommentChip extends YTNode {\n  static type = 'PdgCommentChip';\n  \n  text: Text;\n  color_pallette: {\n    background_color?: string;\n    foreground_title_color?: string;\n  };\n  icon_type?: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing FeedFilterChipBar Class in TypeScript\nDESCRIPTION: Definition of the FeedFilterChipBar class that extends YTNode. It contains an array of ChipCloudChip objects and is used to represent a filter chip bar on YouTube feed interfaces.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FeedFilterChipBar.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass FeedFilterChipBar extends YTNode {\n  static type = 'FeedFilterChipBar';\n\n  contents: ObservedArray<ChipCloudChip>;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePlaylistServiceEndpoint Class in TypeScript\nDESCRIPTION: This code defines the CreatePlaylistServiceEndpoint class, which extends YTNode and implements IEndpoint. It includes a constructor, properties, and methods for building requests and getting the API path.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreatePlaylistServiceEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CreatePlaylistServiceEndpoint extends YTNode implements IEndpoint<CreatePlaylistServiceRequest> {\n  static type = 'CreatePlaylistServiceEndpoint';\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  getApiPath(): string {\n    return '/playlist/create';\n  }\n\n  buildRequest(): CreatePlaylistServiceRequest {\n    return {\n      api_path: this.getApiPath()\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelAboutFullMetadata Class in TypeScript\nDESCRIPTION: This snippet defines the ChannelAboutFullMetadata class, which extends YTNode. It includes properties for channel metadata and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelAboutFullMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelAboutFullMetadata extends YTNode {\n  static type = 'ChannelAboutFullMetadata';\n\n  id: string;\n  name: Text;\n  avatar: Thumbnail[];\n  canonical_channel_url: string;\n  primary_links: object[];\n  view_count: Text;\n  joined_date: Text;\n  description: Text;\n  email_reveal: NavigationEndpoint;\n  can_reveal_email: boolean;\n  country: Text;\n  buttons: ObservedArray<Button>;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining WatchNextEndpoint Class in TypeScript\nDESCRIPTION: Defines the WatchNextEndpoint class, extending YTNode and implementing IEndpoint. It includes a constructor, properties, and methods for building watch next requests.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchNextEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass WatchNextEndpoint extends YTNode implements IEndpoint<WatchNextRequest> {\n  static type = 'WatchNextEndpoint';\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  getApiPath(): string {\n    return '/next';\n  }\n\n  buildRequest(): WatchNextRequest {\n    return {};\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicSideAlignedItem Class in TypeScript\nDESCRIPTION: This code snippet defines the MusicSideAlignedItem class, which extends YTNode. It includes properties for start and end items, and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicSideAlignedItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicSideAlignedItem extends YTNode {\n  static type = 'MusicSideAlignedItem';\n\n  start_items?: ObservedArray<YTNode>;\n  end_items?: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.start_items = data.startItems;\n    this.end_items = data.endItems;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence with hasKey() Method in YTNode (TypeScript)\nDESCRIPTION: Defines the generic `hasKey` method, inherited from `YTNode`. It checks if the node instance possesses a property with the specified key, returning a boolean type predicate without asserting the property's type. In the context of SignalAction, the predicate refines the type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalAction.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SignalAction & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Defining the Title Property in RecognitionShelf (TypeScript)\nDESCRIPTION: Declares the `title` property for the RecognitionShelf class. It holds a `Text` object representing the main title displayed within the recognition shelf.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Defining ProductListItem Class in TypeScript\nDESCRIPTION: Class definition for ProductListItem that extends YTNode. It includes properties for product information like title, price, merchant name, and navigation endpoints. The class is used to represent product items in YouTube's interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProductListItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductListItem extends YTNode {\n  static type = 'ProductListItem';\n  title: Text;\n  accessibility_title: string;\n  thumbnail: Thumbnail[];\n  price: string;\n  endpoint: NavigationEndpoint;\n  merchant_name: string;\n  stay_in_app: boolean;\n  view_button: null | Button;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AccountChannel Class in TypeScript\nDESCRIPTION: This code defines the AccountChannel class, which extends YTNode. It has properties for title and endpoint, and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AccountChannel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AccountChannel extends YTNode {\n  static type = 'AccountChannel';\n\n  title: Text;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n    this.endpoint = new NavigationEndpoint(data.navigationEndpoint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerLegacyDesktopYpcOffer Class in TypeScript\nDESCRIPTION: This code defines the PlayerLegacyDesktopYpcOffer class, which extends YTNode. It includes properties for title, thumbnail, offer description, and offer ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerLegacyDesktopYpcOffer.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PlayerLegacyDesktopYpcOffer extends YTNode {\n  static type = 'PlayerLegacyDesktopYpcOffer';\n\n  title: string;\n  thumbnail: string;\n  offer_description: string;\n  offer_id: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Tab Contents in YouTube Music TrackInfo\nDESCRIPTION: This method retrieves the contents of a specific tab in the YouTube Music track interface. It takes a tab title or page type as a parameter and returns a promise resolving to various possible content types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/TrackInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTab(title_or_page_type: string): Promise<ObservedArray<YTNode> | SectionList | MusicQueue | RichGrid | Message>\n```\n\n----------------------------------------\n\nTITLE: Building Service Request in TypeScript\nDESCRIPTION: Method implementation for building the playlist service request object\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddToPlaylistServiceEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbuildRequest(): AddToPlaylistServiceRequest {\n  return {\n    parse: true\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Type Assertion and Key Checking Utilities for Parser Nodes - TypeScript\nDESCRIPTION: This set of TypeScript method signatures showcases inherited utility functions for node type checking, assertion, and key presence validation within nodes extending YTNode (such as RichSection). Methods like is, as, hasKey, and key use TypeScript generics and variadic parameters to support flexible assertions and safe property access, returning instance types, booleans, or Maybe-wrapped values with throwing semantics as appropriate. They are part of a broader AST parsing framework that leverages strong typing for extensibility and safety. Required context includes the rest of the parser helpers and type declarations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichSection.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example inherited utility functions within YTNode and its subclasses like RichSection:\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\nhasKey<T extends string, R = any>(key: T): this is this & { [k in string]: R };\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: YTNode Inheritance Methods in TypeScript\nDESCRIPTION: Methods inherited from the YTNode base class that help with type checking and property access, including as(), is(), hasKey(), and key() methods for safely working with the node's structure.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactVideo.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is CompactVideo & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties for ReplayChatItemAction in TypeScript\nDESCRIPTION: This details the properties of the `ReplayChatItemAction` class. `actions` is an `ObservedArray` containing `YTNode` instances representing the specific actions performed. `video_offset_time_msec` is a string indicating the time offset in the video when this action occurred. The `type` property (both static and inherited instance readonly) identifies the node type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplayChatItemAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class ReplayChatItemAction extends YTNode {\n  static type = 'ReplayChatItemAction';\n\n  actions: ObservedArray<YTNode>;\n  video_offset_time_msec: string;\n\n  // Inherited from YTNode\n  readonly type: string; // Instance type, reflects the static type\n\n  // ... constructor ...\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Instance type Property in RichListHeader (TypeScript)\nDESCRIPTION: Inherited readonly instance property `type` from the base `YTNode` class. It holds the specific type identifier string for the node instance, automatically assigned based on the class's static `type` property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining YTKids Module Structure in Markdown\nDESCRIPTION: This snippet outlines the structure of the YTKids module, listing the main classes available for interacting with YouTube Kids content. It includes links to detailed documentation for each class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[youtubei.js](../../README.md) / YTKids\n\n# YTKids\n\n## Index\n\n### Classes\n\n- [Channel](classes/Channel.md)\n- [HomeFeed](classes/HomeFeed.md)\n- [Search](classes/Search.md)\n- [VideoInfo](classes/VideoInfo.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing Platform Support for YouTube.js\nDESCRIPTION: Example code showing how to create a platform entry point for YouTube.js. It demonstrates implementing the required PlatformShim interface, including the Cache class that implements ICache, and loading the platform configuration using Platform.load().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/platform/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Platform } from '../utils/Utils.js';\nimport { PlatformShim } from \"../types\";\nimport { ICache } from '../types/Cache.js';\n\nclass Cache implements ICache {\n  // ...\n}\n\nPlatform.load({\n    // ... shims\n});\n\nexport * from './lib.js';\nimport Innertube from './lib.js';\nexport default Innertube;\n```\n\n----------------------------------------\n\nTITLE: Using Inherited 'key' Method for Property Access in TypeScript\nDESCRIPTION: Inherited from YTNode, the 'key' method attempts to access the value of a specified property key (T) on the RemoveChatItemByAuthorAction instance. It returns the value wrapped in a Maybe container if the key exists, otherwise it throws an error.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemByAuthorAction.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T, R>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining escapeStringRegexp Function in TypeScript\nDESCRIPTION: This function takes a string input and returns a new string with special regex characters escaped. It's defined in the Utils.ts file of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/escapeStringRegexp.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nescapeStringRegexp(input: string): string\n```\n\n----------------------------------------\n\nTITLE: Parsing Array Data with Multiple Valid Types in TypeScript\nDESCRIPTION: Parses an array of items with multiple allowed types. Takes raw data, requires array output, and accepts optional type validation. Returns an ObservedArray of parsed instances or null.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nparse<T extends YTNode, K extends YTNodeConstructor<T>[]>(data: RawData, requireArray: true, validTypes?: K): ObservedArray<InstanceType<K[number]>> | null\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence with hasKey Method - TypeScript\nDESCRIPTION: The hasKey<T, R>() method checks for the existence of a property's key within the node instance at runtime, without performing a type assertion. It expects a string key and signals via TypeScript guards if the key exists, using generic extensions for flexible value types. The method depends on generic TypeScript typing and can be used on instances of ReelPlayerOverlay or its base classes. If the key does not exist, false is returned.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerOverlay.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Check for a key without asserting the type.\n */\nhasKey<T extends string, R = any>(key: T): this is ReelPlayerOverlay & { [k in string]: R } {\n  // implementation checking if 'key' exists on 'this'\n}\n```\n\n----------------------------------------\n\nTITLE: Defining target_item_id Property for RemoveChatItemAction in TypeScript\nDESCRIPTION: Declares the target_item_id property as a string, specifying which chat item is to be removed in the action. This is a critical field for identifying the target of the removal within chat data. There are no special dependencies or constraints beyond the string type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntarget_item_id: string\n```\n\n----------------------------------------\n\nTITLE: Declaring deepCompare Function in TypeScript\nDESCRIPTION: This snippet defines the deepCompare function signature. It takes two parameters of type 'any' and returns a boolean. The function is designed to compare two objects deeply, but may not work correctly for objects with methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/deepCompare.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeepCompare(obj1: any, obj2: any): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerOverlayVideoDetails Class in TypeScript\nDESCRIPTION: Class definition for PlayerOverlayVideoDetails that extends YTNode. Contains properties for title and subtitle as Text objects, and includes constructor and inherited methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerOverlayVideoDetails.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlayerOverlayVideoDetails extends YTNode {\n  static type = 'PlayerOverlayVideoDetails';\n  \n  title: Text;\n  subtitle: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is PlayerOverlayVideoDetails & { [k in string]: R };\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PageHeaderView Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the PageHeaderView class that takes a RawNode data parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PageHeaderView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PageHeaderView(data: RawNode): PageHeaderView\n```\n\n----------------------------------------\n\nTITLE: Defining optional icon_type Property in RichMetadata (TypeScript)\nDESCRIPTION: Declares the optional `icon_type` property within the `RichMetadata` class. This property is a string that might specify the type of icon associated with the metadata, if present.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nicon_type?: string\n```\n\n----------------------------------------\n\nTITLE: MusicInlineBadge Class Definition in TypeScript\nDESCRIPTION: Class definition for MusicInlineBadge that extends YTNode. Contains properties for icon_type and label, with a constructor that takes raw node data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicInlineBadge.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicInlineBadge extends YTNode {\n  static type = 'MusicInlineBadge';\n  icon_type: string;\n  label: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.icon_type = data.icon_type;\n    this.label = data.label;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Music Client in TypeScript\nDESCRIPTION: Constructor for the Music class that takes a Session object as a parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Music(session: Session): Music\n```\n\n----------------------------------------\n\nTITLE: Building Share Entity Service Request in TypeScript (Inherited)\nDESCRIPTION: Signature for the inherited `buildRequest` method. This method is responsible for constructing the necessary request payload (`ShareEntityServiceRequest`) to interact with the YouTube share entity service API endpoint. Implementation inherited from `ShareEntityServiceEndpoint`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nbuildRequest(): ShareEntityServiceRequest\n```\n\n----------------------------------------\n\nTITLE: CopyLink Class Definition in TypeScript\nDESCRIPTION: Definition of the CopyLink class that extends YTNode, including its properties and constructor. This class represents a copy link component in YouTube's interface with a copy button, short URL, and style information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CopyLink.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CopyLink';\n\ncopy_button: null | Button;\nshort_url: string;\nstyle: string;\n\nconstructor(data: RawNode) {\n    super();\n    this.copy_button = Memo.getNodeByKey<Button>(data, 'copyButton');\n    this.short_url = data.shortUrl;\n    this.style = data.style;\n}\n```\n\n----------------------------------------\n\nTITLE: YTNode Type Checking and Casting Methods\nDESCRIPTION: Methods inherited from the YTNode class for type checking and casting. These methods allow for checking if a node is of a specific type ('is'), casting to a specific type ('as'), checking for property existence ('hasKey'), and safely accessing properties ('key').\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/InfoRow.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is InfoRow & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelMobileHeader Class Constructor - TypeScript\nDESCRIPTION: Constructor for ChannelMobileHeader class that takes a RawNode parameter and initializes the mobile header component for YouTube channels.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelMobileHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ChannelMobileHeader(data: RawNode): ChannelMobileHeader\n```\n\n----------------------------------------\n\nTITLE: Defining LockupMetadataView Class in TypeScript\nDESCRIPTION: This code defines the LockupMetadataView class, which extends YTNode. It includes properties for title, metadata, and image, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LockupMetadataView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LockupMetadataView extends YTNode {\n  static type = 'LockupMetadataView';\n\n  title: Text;\n  metadata: null | ContentMetadataView;\n  image: null | DecoratedAvatarView;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n    this.metadata = Reflect.has(data, 'metadata') ? new ContentMetadataView(data.metadata) : null;\n    this.image = Reflect.has(data, 'image') ? new DecoratedAvatarView(data.image) : null;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking if a Node is a Specific Type Using YTNode Type-Guards in TypeScript\nDESCRIPTION: This snippet defines the generic is() method, which checks whether the current node instance is of any of the provided types using advanced TypeScript type guards. It requires the YTNode base class and YTNodeConstructor interface as dependencies. Accepts an array of constructors (types) as parameters, and returns a boolean based on instanceof checks. Input parameters are constructors, and the output indicates if the node matches any given type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItem.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n```\n\n----------------------------------------\n\nTITLE: Implementing buildRequest Method in GetKidsBlocklistPickerCommand Class\nDESCRIPTION: Method to build a GetKidsBlocklistPickerRequest for the YouTube API. The implementation returns an empty object as the request body.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GetKidsBlocklistPickerCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nbuildRequest(): GetKidsBlocklistPickerRequest {\n  return {};\n}\n```\n\n----------------------------------------\n\nTITLE: EndScreenVideo Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the EndScreenVideo class that takes raw node data as a parameter and returns an EndScreenVideo instance. It extends the YTNode class and initializes the properties with the provided data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EndScreenVideo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew EndScreenVideo(`data`): [`EndScreenVideo`](EndScreenVideo.md)\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'endpoint' Property (TypeScript)\nDESCRIPTION: Defines the `endpoint` property for the `SimpleCardContent` class. This property holds navigation information, typed as `NavigationEndpoint`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nendpoint: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Declaring HighlightsCarousel Properties in TypeScript\nDESCRIPTION: Defines the panels property which is an array of Panel objects, and the static and readonly type properties that identify this node type as 'HighlightsCarousel'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HighlightsCarousel.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\npanels: Panel[]\nreadonly type: string\nstatic type: string = 'HighlightsCarousel'\n```\n\n----------------------------------------\n\nTITLE: LikeButtonView Class Definition in TypeScript\nDESCRIPTION: This code defines the LikeButtonView class that extends YTNode. It includes properties for toggle_button, like_status_entity_key, and like_status_entity, with a static type property set to 'LikeButtonView'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeButtonView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'LikeButtonView'\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntoggle_button: null | ToggleButtonView\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlike_status_entity_key: string\n```\n\nLANGUAGE: typescript\nCODE:\n```\nlike_status_entity: object\n```\n\n----------------------------------------\n\nTITLE: Accessing Recap Page Data in TypeScript\nDESCRIPTION: Getter method to access the page data of the recap.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Recap.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nget page(): IBrowseResponse\n```\n\n----------------------------------------\n\nTITLE: Defining PivotBar Class in TypeScript\nDESCRIPTION: This code snippet defines the PivotBar class, which extends YTNode. It has a constructor that takes a RawNode parameter and initializes an items property as an ObservedArray of YTNode instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PivotBar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PivotBar extends YTNode {\n  static type = 'PivotBar';\n\n  items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.items = Parser.parseArray(data.items);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Library Class Properties Definition - TypeScript\nDESCRIPTION: Core properties of the Library class including header and sections.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nheader: null | PageHeader;\nsections: object[];\n```\n\n----------------------------------------\n\nTITLE: Inheriting 'hasKey' Property Check Method in ReelPlayerHeader (TypeScript)\nDESCRIPTION: Documents the inherited `hasKey` method from the `YTNode` base class. This generic method checks if the `ReelPlayerHeader` instance possesses a property with the specified `key`. It returns a boolean type predicate that narrows the object's type if the key exists.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerHeader.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T, R>(key): this is ReelPlayerHeader & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Using Inherited 'is' Method for Type Checking in TypeScript\nDESCRIPTION: Documents the inherited `is` method from `YTNode`. It checks if the `SingleActionEmergencySupport` instance is of one of the specified YTNode types, returning a boolean type guard. Requires YTNodeConstructor types as input.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleActionEmergencySupport.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing getApiPath method in SubscribeEndpoint class in TypeScript\nDESCRIPTION: Method implementation that returns the API path for subscription endpoint. This method is required by the IEndpoint interface and specifies the API endpoint that handles subscribe operations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SubscribeEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetApiPath(): string {\n  return 'subscription/subscribe';\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Shelf by Title in YouTube.js Feed Class\nDESCRIPTION: This method finds a shelf by its title. It returns either undefined or one of ReelShelf, RichShelf, or Shelf objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Channel.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Defining Endscreen Class in TypeScript for YouTube.js\nDESCRIPTION: TypeScript class definition for Endscreen that extends YTNode. It contains properties for endscreen elements and timing, and inherits methods from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Endscreen.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Endscreen extends YTNode {\n  static type = 'Endscreen';\n\n  elements: ObservedArray<YTNode>;\n  start_ms: string;\n\n  constructor(data: any) {\n    super();\n    this.elements = parse_array(data.elements);\n    this.start_ms = data.start_ms;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting key Method in RichMetadata (TypeScript)\nDESCRIPTION: Inherits the `key` method from the `YTNode` base class. This method asserts that the node instance has a property with the specified key and returns its value wrapped in a `Maybe` object. It throws an error if the key does not exist on the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Selecting Button in LiveChat\nDESCRIPTION: Simulates clicking a button in the live chat. It takes a Button object as a parameter and returns a Promise resolving to an IParsedResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nselectButton(button: Button): Promise<IParsedResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining CarouselLockup Class Constructor\nDESCRIPTION: Constructor implementation for CarouselLockup class that takes raw node data as input and extends YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselLockup.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew CarouselLockup(data: RawNode): CarouselLockup\n```\n\n----------------------------------------\n\nTITLE: Defining Optional title_style Property in RichListHeader (TypeScript)\nDESCRIPTION: Declares an optional string property `title_style` within the `RichListHeader` class. This property probably specifies the styling information for the header's title.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\noptional title_style: string\n```\n\n----------------------------------------\n\nTITLE: HorizontalMovieList Constructor Implementation - TypeScript\nDESCRIPTION: Constructor implementation that takes RawNode data parameter and initializes a new HorizontalMovieList instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HorizontalMovieList.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew HorizontalMovieList(data: RawNode): HorizontalMovieList\n```\n\n----------------------------------------\n\nTITLE: Defining Text Class Constructor in TypeScript\nDESCRIPTION: Constructor for the Text class that takes a RawNode data parameter and returns a new Text instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Text.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew Text(data: RawNode): Text\n```\n\n----------------------------------------\n\nTITLE: Defining MusicShelf Class in TypeScript\nDESCRIPTION: This code snippet defines the MusicShelf class, which extends YTNode. It includes properties for title, contents, endpoint, continuation, bottom_text, bottom_button, and subheaders.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicShelf extends YTNode {\n  static type = 'MusicShelf';\n\n  title: Text;\n  contents: ObservedArray<MusicResponsiveListItem>;\n  endpoint?: NavigationEndpoint;\n  continuation?: string;\n  bottom_text?: Text;\n  bottom_button?: null | Button;\n  subheaders?: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Type Casting Method 'as' from YTNode in TypeScript\nDESCRIPTION: Describes the inherited `as` method from the base `YTNode` class. This generic method allows casting the current node instance to one of the specified `YTNode` subtypes (passed as `types`). It throws an error if the node is not an instance of any of the provided types, otherwise returning the instance cast to the appropriate type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Using Type Assertion and Type Guards on YTNode Instances - TypeScript\nDESCRIPTION: These TypeScript methods provide utility on YTNode instances, common to ReelShelf and other node types: as allows casting to listed types, is checks the node's type, hasKey asserts presence of a key, and key safely fetches a key's value wrapped in Maybe. These utilities enforce robust type-safety when inspecting and working with heterogeneous YTNode collections in the parser, raising errors if types or keys don't match, preventing undefined property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelShelf.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Node utility methods for YTNode and subclasses (TypeScript)\n */\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Checks if the node is an instance of one of the given types\n}\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Casts the node to one of the given types or throws\n}\n\nhasKey<T extends string, R = any>(key: T): this is this & { [k in string]: R } {\n  // Returns true if the node has the key, false otherwise\n}\n\nkey<T extends string, R = any>(key: T): Maybe {\n  // Assert node has key and return value wrapped in a Maybe; throws if missing\n}\n\n```\n\n----------------------------------------\n\nTITLE: AccountItem Class Definition in TypeScript\nDESCRIPTION: Class definition for AccountItem that extends YTNode to handle YouTube account data. Includes properties for account name, photo, navigation endpoints, and various status flags.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AccountItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AccountItem extends YTNode {\n  static type = 'AccountItem';\n  account_name: Text;\n  account_photo: Thumbnail[];\n  is_selected: boolean;\n  is_disabled: boolean;\n  has_channel: boolean;\n  endpoint: NavigationEndpoint;\n  account_byline: Text;\n  channel_handle: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Casting Method 'as()' in TypeScript\nDESCRIPTION: Method inherited from YTNode that casts the current node to one of the given types, throwing an error if the cast is invalid.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Dropdown.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nas\\<T extends [`YTNode`](../../Helpers/classes/YTNode.md), K extends [`YTNodeConstructor`](../../Helpers/interfaces/YTNodeConstructor.md)\\<T\\>[]\\>(...types: K): InstanceType\\<K[number]\\>\n```\n\n----------------------------------------\n\nTITLE: Implementing ClipSection Properties in TypeScript\nDESCRIPTION: Defines core properties of the ClipSection class including contents array for ClipCreation objects and static/readonly type identifiers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipSection.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: null | ObservedArray<ClipCreation>\nreadonly type: string\nstatic type: string = 'ClipSection'\n```\n\n----------------------------------------\n\nTITLE: UpsellDialog Class Definition in TypeScript\nDESCRIPTION: Class definition for UpsellDialog that extends YTNode. It includes properties for message title, message text, action button, dismiss button, and visibility state.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpsellDialog.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'UpsellDialog'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nmessage_title: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nmessage_text: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\naction_button: null | Button\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ndismiss_button: null | Button\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nis_visible: boolean\n```\n\n----------------------------------------\n\nTITLE: Defining MusicImmersiveHeader Class Properties - TypeScript\nDESCRIPTION: Class definition for MusicImmersiveHeader showing its properties including title, description, thumbnail and type. The class extends YTNode and includes static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicImmersiveHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicImmersiveHeader extends YTNode {\n  static type = 'MusicImmersiveHeader';\n  title: Text;\n  description: Text;\n  thumbnail: null | MusicThumbnail;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining title Property in RichMetadata (TypeScript)\nDESCRIPTION: Declares the `title` property within the `RichMetadata` class. This property holds data of type `Text`, representing the main title text associated with the metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Using findFunction to Extract Function Declarations in TypeScript\nDESCRIPTION: Example demonstrating how to use the findFunction utility to locate a specific function named 'bar' within a source string. The function returns metadata about the found function including its position, name, AST node, and actual code.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/findFunction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst source = '(function() {var foo, bar; foo = function() { console.log(\"foo\"); }; bar = function() { console.log(\"bar\"); }; })();';\nconst result = findFunction(source, { name: 'bar' });\nconsole.log(result);\n// Output: { start: 69, end: 110, name: 'bar', node: { ... }, result: 'bar = function() { console.log(\"bar\"); };' }\n```\n\n----------------------------------------\n\nTITLE: TranscriptSegment Constructor Implementation\nDESCRIPTION: Constructor method for the TranscriptSegment class that takes a RawNode parameter and initializes a new TranscriptSegment instance. It extends the YTNode base class constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSegment.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew TranscriptSegment(data): TranscriptSegment\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods Implementation in TypeScript\nDESCRIPTION: These methods are inherited from the YTNode base class and provide type checking and property access functionality. They include is() for type checking, as() for type casting, hasKey() to check if a property exists, and key() to safely access properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ToggleMenuServiceItem.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ToggleMenuServiceItem & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Element Class Constructor in TypeScript\nDESCRIPTION: Constructor for the Element class which takes a RawNode data parameter and passes it to the parent YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Element.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew Element(`data`): [`Element`](Element.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing CarouselItemView Constructor in TypeScript\nDESCRIPTION: Constructor for CarouselItemView class that accepts RawNode data parameter. Extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselItemView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew CarouselItemView(data: RawNode): CarouselItemView\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader 'title' Property in TypeScript\nDESCRIPTION: Declares the `title` property for the `MusicResponsiveHeader` class. It holds a `Text` object representing the main title text displayed in the header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Defining the WatchCardCompactVideo Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the WatchCardCompactVideo class that accepts a RawNode data parameter and initializes the class instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchCardCompactVideo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew WatchCardCompactVideo(`data`): [`WatchCardCompactVideo`](WatchCardCompactVideo.md)\n```\n\n----------------------------------------\n\nTITLE: Initializing SmoothedQueue Constructor\nDESCRIPTION: Constructor for creating a new SmoothedQueue instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/SmoothedQueue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SmoothedQueue(): SmoothedQueue\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'image' Property (TypeScript)\nDESCRIPTION: Defines the `image` property for the `SimpleCardContent` class as an array of `Thumbnail` objects, representing the images associated with the card content.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimage: Thumbnail[]\n```\n\n----------------------------------------\n\nTITLE: Defining ProductListHeader Class in TypeScript\nDESCRIPTION: Class definition for ProductListHeader that extends YTNode. It contains properties for title and padding disclaimer, along with inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProductListHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProductListHeader extends YTNode {\n  static type = 'ProductListHeader';\n  \n  title: Text;\n  suppress_padding_disclaimer: boolean;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ItemSectionTabbedHeader Class Properties and Static Type Definition in TypeScript\nDESCRIPTION: Defines the core properties of the ItemSectionTabbedHeader class including title, tabs array, and optional end_items. Also declares the static type property that identifies this class as 'ItemSectionTabbedHeader'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ItemSectionTabbedHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text\ntabs: ObservedArray<ItemSectionTab>\nend_items?: ObservedArray<YTNode>\n\nstatic type: string = 'ItemSectionTabbedHeader'\n```\n\n----------------------------------------\n\nTITLE: Defining AddToPlaylistServiceRequest Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the AddToPlaylistServiceRequest type alias as an object with optional properties for excluding watch later, params, playlist ID, and an array of video IDs. It's used for structuring requests to add videos to playlists in the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/AddToPlaylistServiceRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype AddToPlaylistServiceRequest = {\n  excludeWatchLater?: boolean;\n  params?: string;\n  playlistId?: string;\n  videoIds?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Defining MusicTastebuilderShelf Class in TypeScript\nDESCRIPTION: This code defines the MusicTastebuilderShelf class, which extends YTNode. It includes properties for thumbnail, primary and secondary text, action button, and visibility status.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicTastebuilderShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicTastebuilderShelf extends YTNode {\n  static type = 'MusicTasteBuilderShelf';\n\n  thumbnail: null | MusicTastebuilderShelfThumbnail;\n  primary_text: Text;\n  secondary_text: Text;\n  action_button: null | Button;\n  is_visible: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Property Definitions for MultiPageMenuSection Class in TypeScript\nDESCRIPTION: Defines the class properties including items array and type identifiers. The items property can hold an array of YTNode objects or null.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiPageMenuSection.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nitems: null | ObservedArray<YTNode>\nreadonly type: string\nstatic type: string = 'MultiPageMenuSection'\n```\n\n----------------------------------------\n\nTITLE: Inherited Type Checking Method 'is' in YTNode TypeScript\nDESCRIPTION: Explains the inherited `is` method from the base `YTNode` class. This generic method checks if the current node instance is of one of the specified `YTNode` derived types (`K`). It returns a boolean type guard (`this is InstanceType<K[number]>`) indicating if the instance matches any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T, K>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader 'subtitle' Property in TypeScript\nDESCRIPTION: Declares the `subtitle` property for the `MusicResponsiveHeader` class. It holds a `Text` object representing the main subtitle text displayed in the header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nsubtitle: Text\n```\n\n----------------------------------------\n\nTITLE: Defining ContinuationItem Class Properties in TypeScript\nDESCRIPTION: This code snippet defines the properties of the ContinuationItem class, including trigger, button, and endpoint. It also sets the static type property to 'ContinuationItem'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ContinuationItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ContinuationItem'\n\ntrigger: string\nbutton?: null | Button\nendpoint: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerOverlay Class Constructor in TypeScript\nDESCRIPTION: Constructor for the PlayerOverlay class that takes a RawNode data parameter and initializes the player overlay instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerOverlay.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PlayerOverlay(data: RawNode): PlayerOverlay\n```\n\n----------------------------------------\n\nTITLE: Generating DASH Manifest in TypeScript\nDESCRIPTION: Asynchronous method to generate DASH manifest from streaming data with optional URL transformer, format filter, and additional options.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/VideoInfo.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntoDash(url_transformer?: URLTransformer, format_filter?: FormatFilter, options?: DashOptions): Promise<string>\n```\n\n----------------------------------------\n\nTITLE: Defining UniversalWatchCard Class in TypeScript\nDESCRIPTION: The UniversalWatchCard class definition extends YTNode and implements properties for YouTube watch card UI elements. It includes constructor, type definition, and properties for header, call to action, sections, and an optional collapsed label.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UniversalWatchCard.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'UniversalWatchCard';\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nheader: YTNode;\ncall_to_action: YTNode;\nsections: ObservedArray<YTNode>;\ncollapsed_label?: Text;\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): UniversalWatchCard\n```\n\n----------------------------------------\n\nTITLE: Type Casting Method in YTNode Class\nDESCRIPTION: Implementation of the 'as' method that casts the node to one of the given types. It throws an error if the node is not of any of the specified types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TabbedSearchResults.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatTickerPaidStickerItem Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatTickerPaidStickerItem class, which extends YTNode. It includes properties for author information, background colors, duration, and other details related to paid sticker items in a live chat ticker.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatTickerPaidStickerItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatTickerPaidStickerItem extends YTNode {\n  static type = 'LiveChatTickerPaidStickerItem';\n\n  id: string;\n  author_external_channel_id: string;\n  author_photo: Thumbnail[];\n  start_background_color: number;\n  end_background_color: number;\n  duration_sec: number;\n  full_duration_sec: number;\n  show_item: YTNode;\n  show_item_endpoint: NavigationEndpoint;\n  ticker_thumbnails: object[];\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted for brevity\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Refinement Card Queries Getter - TypeScript\nDESCRIPTION: Getter method that returns an array of refinement card queries from the search results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget refinement_card_queries(): string[] {\n  // Implementation details not shown in original code\n  return string[];\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited 'is' Method Signature (TypeScript)\nDESCRIPTION: Inherited from `YTNode`. Checks if the current node instance is of one of the provided `YTNode` types using a type predicate.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Linting YouTube.js Code\nDESCRIPTION: Command to run the linter on the YouTube.js codebase using npm.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'show_link_icon' Property (TypeScript)\nDESCRIPTION: Defines the `show_link_icon` property for the `SimpleCardContent` class, a boolean indicating whether a link icon should be displayed.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nshow_link_icon: boolean\n```\n\n----------------------------------------\n\nTITLE: TextFieldView Class Definition in TypeScript\nDESCRIPTION: Defines the TextFieldView class which extends YTNode. It includes properties for display_properties, content_properties, initial_state, and form_field_metadata. The class constructor takes a RawNode parameter and returns a TextFieldView instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TextFieldView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TextFieldView';\n\ndisplay_properties?: DisplayProperties;\ncontent_properties?: ContentProperties;\ninitial_state?: InitialState;\nform_field_metadata?: FormFieldMetadata;\n\nconstructor(data: RawNode): TextFieldView {\n  super(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring video_id Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `video_id` property for the `SlimVideoMetadata` class. It is of type `string`, storing the unique identifier for the YouTube video.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvideo_id: string\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings in TypeScript\nDESCRIPTION: Function signature for generating random strings with a specified length parameter. The function takes a numeric length parameter and returns a string value. Located in the Utils.ts file at line 111.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/generateRandomString.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngenerateRandomString(length: number): string\n```\n\n----------------------------------------\n\nTITLE: AlertWithButton Type Checking Methods\nDESCRIPTION: Implementation of utility methods for type checking and key validation inherited from YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AlertWithButton.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is AlertWithButton & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining AccountItemSection Class in TypeScript\nDESCRIPTION: This code defines the AccountItemSection class, which extends YTNode. It has properties for contents and header, and includes a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AccountItemSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AccountItemSection extends YTNode {\n  static type = 'AccountItemSection';\n\n  contents: ObservedArray<AccountItem | CompactLink>;\n  header: null | AccountItemSectionHeader;\n\n  constructor(data: RawNode) {\n    super();\n    this.contents = observe(parser.parseArray(data.contents));\n    this.header = parser.parseItem(data.header, AccountItemSectionHeader);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining HideEngagementPanelEndpoint Class in TypeScript\nDESCRIPTION: This code snippet shows the definition of the HideEngagementPanelEndpoint class that extends YTNode. It includes the static type property, panel_identifier property, and constructor implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HideEngagementPanelEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'HideEngagementPanelEndpoint'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npanel_identifier: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): HideEngagementPanelEndpoint\n```\n\n----------------------------------------\n\nTITLE: Inherited Property Existence Check Method 'hasKey' in YTNode TypeScript\nDESCRIPTION: Describes the inherited `hasKey` method from the base `YTNode` class. This method checks if the node instance possesses a property with the specified `key` without asserting its type. It returns a boolean type guard (`this is ...`) indicating whether the key exists.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T, R>(key: T): this is SearchFilterGroup & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: AuthorCommentBadge Class Definition\nDESCRIPTION: Class definition for AuthorCommentBadge that extends YTNode, handling badge information for comment authors. Includes properties for icon type, tooltip, and style, along with constructor and accessor methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AuthorCommentBadge.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AuthorCommentBadge extends YTNode {\n  static type: string = 'AuthorCommentBadge';\n  \n  icon_type?: string;\n  tooltip: string;\n  style?: string;\n  \n  constructor(data: RawNode) {\n    super();\n    this.icon_type = data.icon_type;\n    this.tooltip = data.tooltip;\n    this.style = data.style;\n  }\n  \n  get orig_badge(): RawNode {\n    return this;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YpcTrailer Class Definition in TypeScript\nDESCRIPTION: This code snippet defines the YpcTrailer class that extends the YTNode base class. It includes properties for video_message and player_response, as well as inheriting methods from YTNode like as(), is(), hasKey(), and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/YpcTrailer.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'YpcTrailer';\n\nvideo_message: string;\nplayer_response: IRawResponse;\n\nconstructor(data: RawNode) {\n  super(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing a SimpleTextSection Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `SimpleTextSection` class. It takes raw node data (`RawNode`) as input and initializes a new instance of `SimpleTextSection`. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SimpleTextSection(data: RawNode): SimpleTextSection\n```\n\n----------------------------------------\n\nTITLE: Defining MusicDownloadStateBadge Class in TypeScript\nDESCRIPTION: Class definition for MusicDownloadStateBadge that extends YTNode. It includes properties for playlist_id and supported_download_states, along with type definitions and constructor implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicDownloadStateBadge.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicDownloadStateBadge extends YTNode {\n  static type = 'MusicDownloadStateBadge';\n  \n  playlist_id: string;\n  supported_download_states: string[];\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PageHeader Class Methods - TypeScript\nDESCRIPTION: Inherited methods from YTNode providing type checking and key management functionality including as(), is(), hasKey() and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PageHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is PageHeader & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Implementing DidYouMean Constructor in TypeScript\nDESCRIPTION: This snippet shows the constructor definition for the DidYouMean class, which takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DidYouMean.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): DidYouMean\n```\n\n----------------------------------------\n\nTITLE: DecoratedAvatarView Class Constructor in TypeScript\nDESCRIPTION: Constructor for the DecoratedAvatarView class that takes a RawNode data parameter and returns a new DecoratedAvatarView instance. This constructor overrides the base YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DecoratedAvatarView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew DecoratedAvatarView(`data`): [`DecoratedAvatarView`](DecoratedAvatarView.md)\n```\n\n----------------------------------------\n\nTITLE: Declaring MusicMultiRowListItem Class Properties - TypeScript\nDESCRIPTION: TypeScript class definition showing the properties of MusicMultiRowListItem, including thumbnail, overlay, navigation endpoints, and text elements.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicMultiRowListItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicMultiRowListItem extends YTNode {\n  static type = 'MusicMultiRowListItem';\n  thumbnail: null | MusicThumbnail;\n  overlay: null | MusicItemThumbnailOverlay;\n  on_tap: NavigationEndpoint;\n  menu: null | Menu;\n  subtitle: Text;\n  title: Text;\n  second_title?: Text;\n  description?: Text;\n  display_style?: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YTNode Type Casting Method in TypeScript\nDESCRIPTION: Implementation of the as() method inherited from YTNode that casts the node to one of the given types, throwing an error if the node is not of the given type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSectionHeader.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining the Static 'type' Property for RichShelf in TypeScript\nDESCRIPTION: Defines the static `type` property on the `RichShelf` class itself. It is set to the string 'RichShelf', overriding the base `YTNode` static type and serving as a type identifier for the class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'RichShelf'\n```\n\n----------------------------------------\n\nTITLE: Declaring Contents Property for LibraryContinuation Class in TypeScript\nDESCRIPTION: Defines the contents property of the LibraryContinuation class, which can be either a MusicShelfContinuation or GridContinuation object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/LibraryContinuation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: [`MusicShelfContinuation`](../../../classes/MusicShelfContinuation.md) | [`GridContinuation`](../../../classes/GridContinuation.md)\n```\n\n----------------------------------------\n\nTITLE: PlaylistPanelVideoWrapper Constructor Implementation\nDESCRIPTION: Constructor implementation that takes RawNode data as input and initializes a new PlaylistPanelVideoWrapper instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistPanelVideoWrapper.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew PlaylistPanelVideoWrapper(data: RawNode): PlaylistPanelVideoWrapper\n```\n\n----------------------------------------\n\nTITLE: Defining MusicEditablePlaylistDetailHeader Class in TypeScript\nDESCRIPTION: Class definition for MusicEditablePlaylistDetailHeader that extends YTNode. Includes constructor, properties for header management, and static type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicEditablePlaylistDetailHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicEditablePlaylistDetailHeader extends YTNode {\n  static type = 'MusicEditablePlaylistDetailHeader';\n  header: YTNode;\n  edit_header: YTNode;\n  playlist_id: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ContinuationRequest Type Alias in TypeScript\nDESCRIPTION: TypeScript interface definition for ContinuationRequest object type that handles YouTube API continuation requests. Contains optional properties for continuation strings, comment fetching parameters, form data, and notification menu request types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/ContinuationRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ContinuationRequest = {\n    continuation?: string;\n    fetchCommentsParams?: {\n        continuation: string;\n    };\n    formData?: FormData;\n    notificationsMenuRequestType?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: PageHeader Class Definition - TypeScript\nDESCRIPTION: Defines the PageHeader class that extends YTNode with properties for page_title and content. The class constructor accepts a RawNode parameter and includes inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PageHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PageHeader extends YTNode {\n  static type = 'PageHeader';\n\n  page_title: string;\n  content: null | PageHeaderView;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Properties Definition for CompactLink Class in TypeScript\nDESCRIPTION: Defines the properties of the CompactLink class including title, endpoint, style, and type. These properties represent the state and behavior of a compact link in the YouTube interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactLink.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: string\nendpoint: NavigationEndpoint\nstyle: string\ntype: string\nstatic type: string = 'CompactLink'\n```\n\n----------------------------------------\n\nTITLE: Declaring the Optional 'subtitle' Property for RichShelf in TypeScript\nDESCRIPTION: Declares the optional `subtitle` property for the `RichShelf` class. If present, it holds a `Text` object representing the subtitle displayed for the shelf.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\noptional subtitle: Text\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatParticipantsList Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatParticipantsList class, which extends YTNode. It includes a constructor, properties for title and participants, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatParticipantsList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatParticipantsList extends YTNode {\n  static type = 'LiveChatParticipantsList';\n\n  title: Text;\n  participants: ObservedArray<LiveChatParticipant>;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n    this.participants = Parser.parseArray(data.participants, LiveChatParticipant);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VideoInfo Inherited Properties\nDESCRIPTION: Properties inherited from MediaInfo base class including basic info, annotations, captions, and streaming data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/VideoInfo.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nbasic_info: object\nannotations?: ObservedArray<PlayerAnnotationsExpanded>\nstoryboards?: PlayerStoryboardSpec | PlayerLiveStoryboardSpec\nendscreen?: Endscreen\ncaptions?: PlayerCaptionsTracklist\ncards?: CardCollection\nstreaming_data?: IStreamingData\nplayability_status?: IPlayabilityStatus\nplayer_config?: IPlayerConfig\n```\n\n----------------------------------------\n\nTITLE: Checking Upcoming Status in YouTube.js Video Class\nDESCRIPTION: Accessor that determines if a video is scheduled for future release by checking the upcoming property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Video.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nget is_upcoming(): undefined | boolean {\n  return !!this.upcoming;\n}\n```\n\n----------------------------------------\n\nTITLE: TextHeader Class Definition in TypeScript\nDESCRIPTION: Defines the TextHeader class that extends YTNode. The class has properties for title, style, and a constructor that takes RawNode data. It also includes type definitions and inherits several methods from the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TextHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass TextHeader extends YTNode {\n  static type = 'TextHeader';\n\n  title: Text;\n  style: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n    this.style = data.style;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Inherited 'is' Method in YTNode (TypeScript)\nDESCRIPTION: Shows the inherited method `is` from the `YTNode` class. This method functions as a type guard, checking if the current node instance is an instance of one or more specified `YTNode` constructor types. It returns a boolean and narrows the type if true.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nis<T, K>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'title' Property for RichShelf in TypeScript\nDESCRIPTION: Declares the mandatory `title` property for the `RichShelf` class. It holds a `Text` object representing the main title displayed for the shelf.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Implementing hasKey() for Type-safe Property Existence Checks - TypeScript\nDESCRIPTION: Introduces the generic hasKey() method for checking the existence of an arbitrary key on ShareEntityEndpoint instances without type assertion. This method returns a type predicate and supports TypeScript generics for flexible key and result type specification. It facilitates introspection for dynamic node attributes, enhancing code safety during object traversal.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEntityEndpoint.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is ShareEntityEndpoint & { [k in string]: R } {\n  // Implementation: check presence of the given key\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Nodes with as<T, K>() Method in TypeScript\nDESCRIPTION: The as<T, K>() method attempts to cast the current node to one of several possible YTNode subtypes. Input: one or more YTNodeConstructor types as parameters. Output: the node instance as one of the given types. Throws an error if the node does not match the requested type. Useful for narrowing types when working with complex node hierarchies.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchEndpoint.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelHeaderLinks Class in TypeScript\nDESCRIPTION: This code snippet defines the ChannelHeaderLinks class, which extends YTNode. It includes a constructor, properties for primary and secondary links, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelHeaderLinks.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelHeaderLinks extends YTNode {\n  static type = 'ChannelHeaderLinks';\n\n  primary: ObservedArray<HeaderLink>;\n  secondary: ObservedArray<HeaderLink>;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2Tokens Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias definition for OAuth2Tokens, specifying the structure of OAuth2 authentication token objects. This type is defined in the core OAuth2.ts file of the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/OAuth2Tokens.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OAuth2Tokens = object\n\n// Type declaration\n{\n  access_token: string;\n  client?: OAuth2ClientID;\n  expires_in?: number;\n  expiry_date: string;\n  refresh_token: string;\n  scope?: string;\n  token_type?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for Type and Key Handling on YTNode - YouTube.js (TypeScript)\nDESCRIPTION: This TypeScript snippet focuses on utility methods provided either by the YTNode superclass or inherited in SearchSuggestionsSection: as<T, K>(), hasKey<T, R>(), is<T, K>(), and key<T, R>(). These method signatures enable safe casting, type checking, and property access for nodes derived from complex YouTube API responses. Required dependencies include YTNodeConstructor, Maybe, and strong typing via generics. All methods accept node type constructors and/or keys as parameters—inputs are typically node classes and property strings; outputs provide type assertions or retrieved values, sometimes wrapped in Maybe. Limitations include requiring the correct type relationships at compile time, and they may throw if the type or key is incorrect.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSuggestionsSection.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Cast to one of the given types.\n * Throws if the node is not of the given type.\n */\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\n/**\n * Check for a key without asserting the type.\n */\nhasKey<T extends string, R = any>(key: T): this is this & { [k in string]: R };\n\n/**\n * Check if the node is of the given type.\n */\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\n/**\n * Assert that the node has the given key and return it.\n * Throws if the node does not have the key.\n */\nkey<T extends string, R = any>(key: T): Maybe;\n\n```\n\n----------------------------------------\n\nTITLE: Defining Properties of KidsCategoryTab in TypeScript\nDESCRIPTION: This code defines the properties of the KidsCategoryTab class including title, category_assets with nested properties, category_type, and endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsCategoryTab.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text\n\ncategory_assets: object\n\nasset_key: string\n\nbackground_color: string\n\ncategory_type: string\n\nendpoint: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateSubscribeButtonAction Class for YouTube Channel Subscriptions in TypeScript\nDESCRIPTION: This code defines the UpdateSubscribeButtonAction class which handles YouTube channel subscription states. It extends the YTNode base class and includes properties for tracking channel ID and subscription status.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateSubscribeButtonAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass UpdateSubscribeButtonAction extends YTNode {\n  static type = 'UpdateSubscribeButtonAction';\n\n  channel_id: string;\n  subscribed: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    this.channel_id = data.channelId;\n    this.subscribed = data.subscribed;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CarouselTitleView Class in TypeScript\nDESCRIPTION: Class definition for CarouselTitleView that extends YTNode. Contains properties for title, previous and next buttons, and handles carousel title view functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselTitleView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CarouselTitleView extends YTNode {\n  static type = 'CarouselTitleView';\n\n  title: string;\n  previous_button: null | ButtonView;\n  next_button: null | ButtonView;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ButtonView Helper Methods - TypeScript\nDESCRIPTION: Helper methods inherited from YTNode including as(), hasKey(), is(), and key() for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ButtonView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is ButtonView & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerOverflow Class Properties in TypeScript\nDESCRIPTION: Defines the core properties of the PlayerOverflow class including endpoint and enable_listen_first flag\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerOverflow.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlayerOverflow extends YTNode {\n  static type = 'PlayerOverflow';\n  endpoint: NavigationEndpoint;\n  enable_listen_first: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ExpandableTab Class in TypeScript\nDESCRIPTION: This code defines the ExpandableTab class, which extends YTNode. It includes properties for title, endpoint, selected state, and content, as well as a constructor and inherited methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ExpandableTab.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ExpandableTab extends YTNode {\n  static type = 'ExpandableTab';\n\n  title: string;\n  endpoint: NavigationEndpoint;\n  selected: boolean;\n  content: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = data.title;\n    this.endpoint = new NavigationEndpoint(data.endpoint);\n    this.selected = data.selected;\n    this.content = Parser.parseItem(data.content);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing SortFilterHeader instance in TypeScript\nDESCRIPTION: Defines the constructor for the SortFilterHeader class. It accepts raw node data (`RawNode`) and initializes a new `SortFilterHeader` object. This constructor overrides the one inherited from the base `YTNode` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SortFilterHeader(data): SortFilterHeader\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of helper methods for type checking and property access including is(), as(), hasKey() and key() methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistSidebar.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is PlaylistSidebar & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking Methods in YTNode Class\nDESCRIPTION: These inherited methods provide type checking functionality for YTNode instances, allowing for type assertion, type checking, and property access with safety checks.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsCategoryTab.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key): this is KidsCategoryTab & { [k in string]: R }\n\nkey<T extends string, R = any>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Property Definitions\nDESCRIPTION: Defines class properties including markers_map array and static/readonly type properties\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiMarkersPlayerBar.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmarkers_map: ObservedArray<Marker>\nreadonly type: string\nstatic type: string = 'MultiMarkersPlayerBar'\n```\n\n----------------------------------------\n\nTITLE: Defining MusicCarouselShelfBasicHeader Class in TypeScript\nDESCRIPTION: This code snippet defines the MusicCarouselShelfBasicHeader class, which extends YTNode. It includes the class constructor, properties, and static type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicCarouselShelfBasicHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicCarouselShelfBasicHeader extends YTNode {\n  static type = 'MusicCarouselShelfBasicHeader';\n\n  title: Text;\n  strapline?: Text;\n  thumbnail?: null | MusicThumbnail;\n  more_content?: null | Button;\n  end_icons?: ObservedArray<IconLink>;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PdgReplyButtonView Class in TypeScript\nDESCRIPTION: Class definition for PdgReplyButtonView that extends YTNode. Includes constructor, properties for reply button, reply count entity key, and reply count placeholder. Contains inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PdgReplyButtonView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PdgReplyButtonView extends YTNode {\n  static type = 'PdgReplyButtonView';\n\n  reply_button: null | ButtonView;\n  reply_count_entity_key: string;\n  reply_count_placeholder: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ItemSectionTab Helper Methods\nDESCRIPTION: Implementation of inherited helper methods from YTNode including type checking (is), type casting (as), and property access methods (hasKey, key).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ItemSectionTab.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ItemSectionTab & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2ClientID Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the OAuth2ClientID type alias as an object with client_id and client_secret properties, both of type string. It's used for representing OAuth2 client credentials in the application.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/OAuth2ClientID.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OAuth2ClientID = {\n  client_id: string;\n  client_secret: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining the 'suggestion' Property in SearchSuggestion Class (TypeScript)\nDESCRIPTION: Declares the `suggestion` property for the `SearchSuggestion` class. This property holds a `Text` object, representing the actual suggested search query text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSuggestion.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsuggestion: Text\n```\n\n----------------------------------------\n\nTITLE: Defining AutomixPreviewVideo Class Properties in TypeScript\nDESCRIPTION: Property definitions for the AutomixPreviewVideo class including an optional playlist_video object with navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AutomixPreviewVideo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nplaylist_video?: {\n  endpoint: NavigationEndpoint\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicNavigationButton Class in TypeScript\nDESCRIPTION: Defines the MusicNavigationButton class which extends YTNode. It includes properties for button_text and endpoint, and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicNavigationButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicNavigationButton extends YTNode {\n  static type = 'MusicNavigationButton';\n\n  button_text: string;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    this.button_text = data.button_text;\n    this.endpoint = new NavigationEndpoint(data.endpoint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Heatmap Class Definition in TypeScript\nDESCRIPTION: TypeScript class definition for Heatmap which extends YTNode. It provides properties for heat markers, decorations, heights, and animation settings used to display video heatmaps in YouTube's interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Heatmap.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Heatmap extends YTNode {\n  static type: string = 'Heatmap';\n\n  max_height_dp: number;\n  min_height_dp: number;\n  show_hide_animation_duration_millis: number;\n  heat_markers: ObservedArray<HeatMarker>;\n  heat_markers_decorations: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring WatchCardCompactVideo Properties in TypeScript\nDESCRIPTION: Declaration of the primary properties for the WatchCardCompactVideo class, including title, subtitle, duration, and style attributes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchCardCompactVideo.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: [`Text`](../../Misc/classes/Text.md)\nsubtitle: [`Text`](../../Misc/classes/Text.md)\nduration: `object`\nstyle: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining MusicSearchType Union Type in TypeScript\nDESCRIPTION: Defines a union type for YouTube Music search categories including all, song, video, album, playlist, and artist options. This type is used to restrict and validate search type parameters in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/MusicSearchType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MusicSearchType = \"all\" | \"song\" | \"video\" | \"album\" | \"playlist\" | \"artist\"\n```\n\n----------------------------------------\n\nTITLE: Initializing RemoveChatItemByAuthorAction Instance in TypeScript\nDESCRIPTION: The constructor creates a new instance of the RemoveChatItemByAuthorAction class. It takes raw node data (RawNode) as input and returns a new RemoveChatItemByAuthorAction object. This constructor overrides the one from the base YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemByAuthorAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RemoveChatItemByAuthorAction(data): RemoveChatItemByAuthorAction\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Identifier for SettingsCheckbox in TypeScript\nDESCRIPTION: Declares the static `type` property for the `SettingsCheckbox` class, overriding the base `YTNode` definition. It is explicitly set to the string 'SettingsCheckbox', serving as a class-level identifier used for type registration or lookup.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'SettingsCheckbox'\n```\n\n----------------------------------------\n\nTITLE: Loading a Platform Shim in TypeScript\nDESCRIPTION: Static method that loads a platform-specific implementation. Takes a PlatformShim instance as a parameter to configure the platform functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Platform.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic load(platform: PlatformShim): void\n```\n\n----------------------------------------\n\nTITLE: Finding Shelf by Title in TypeScript\nDESCRIPTION: Method to find a shelf by its title in YouTube feed. Returns either undefined or one of several shelf types (ReelShelf, RichShelf, or Shelf).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/HomeFeed.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader Optional 'subtitle_badge' Property in TypeScript\nDESCRIPTION: Declares the optional `subtitle_badge` property for the `MusicResponsiveHeader` class. It can hold either `null` or an `ObservedArray` of `MusicInlineBadge` objects, representing badges displayed alongside the subtitle.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsubtitle_badge?: null | ObservedArray<MusicInlineBadge>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Setting Options in TypeScript\nDESCRIPTION: Getter method that returns an array of strings representing available setting options on the page.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Settings.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget setting_options(): string[]\n```\n\n----------------------------------------\n\nTITLE: Defining CollaboratorInfoCardContent Class in TypeScript\nDESCRIPTION: This code snippet defines the CollaboratorInfoCardContent class that extends YTNode. It includes properties for channel avatar, custom text, channel name, subscriber count, and navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CollaboratorInfoCardContent.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CollaboratorInfoCardContent';\n\nchannel_avatar: Thumbnail[];\ncustom_text: Text;\nchannel_name: Text;\nsubscriber_count: Text;\nendpoint: NavigationEndpoint;\n\nconstructor(data: RawNode) {\n  super();\n  this.channel_avatar = Thumbnail.fromResponse(data.channelAvatar);\n  this.custom_text = new Text(data.customText);\n  this.channel_name = new Text(data.channelName);\n  this.subscriber_count = new Text(data.subscriberCount);\n  this.endpoint = new NavigationEndpoint(data.endpoint);\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited key Method in RichListHeader (TypeScript)\nDESCRIPTION: Inherited method `key` from `YTNode`. It asserts that the node instance has the given property key (`key`) and returns its value wrapped in a `Maybe` object (likely a utility class to handle potential null/undefined values). Throws an error if the key does not exist on the instance. The type `R` for the key's value defaults to `any`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Type Checking ShareEndpoint Instances in TypeScript (Inherited)\nDESCRIPTION: Signature for the inherited `is` method. This utility method checks if the current node instance (ShareEndpoint) is an instance of one of the specified `YTNode` constructor types, returning a boolean type guard. Implementation inherited from `ShareEntityServiceEndpoint` via helpers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEndpoint.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nis<T, K>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Creating Observed Array in TypeScript\nDESCRIPTION: The observe() function creates an observed array that provides additional utility methods for array manipulation and filtering. It takes an array of type T extending YTNode as input and returns an ObservedArray<T>.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/functions/observe.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nobserve<T extends YTNode>(obj: T[]): ObservedArray<T>\n```\n\n----------------------------------------\n\nTITLE: Property Access Method 'key()' in TypeScript\nDESCRIPTION: Method inherited from YTNode that asserts the node has a given key and returns its value wrapped in a Maybe object, throwing an error if the key doesn't exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Dropdown.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkey\\<T extends string, R = any\\>(key: T): [`Maybe`](../../Helpers/classes/Maybe.md)\n```\n\n----------------------------------------\n\nTITLE: Inherited Method: Casting YTNode Instance Type in TypeScript\nDESCRIPTION: Inherited from `YTNode`. This method attempts to cast the current node instance (`SimpleMenuHeader`) to one of the specified `YTNode` constructor types (`K`). It throws an error if the instance is not assignable to any of the provided types. Useful for asserting a node's type within a known set.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleMenuHeader.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Declaring properties in VerticalWatchCardList class (TypeScript)\nDESCRIPTION: Declares the main properties of the VerticalWatchCardList class including items (an ObservedArray of YTNode objects), view_all_text, and view_all_endpoint properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalWatchCardList.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nitems: ObservedArray<YTNode>\nview_all_text: Text\nview_all_endpoint: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Defining FeedbackEndpoint Class in TypeScript\nDESCRIPTION: This code defines the FeedbackEndpoint class, which extends YTNode and implements IEndpoint<FeedbackRequest>. It includes a constructor, static type property, and methods for building requests and getting API paths.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FeedbackEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass FeedbackEndpoint extends YTNode implements IEndpoint<FeedbackRequest> {\n  static type = 'FeedbackEndpoint';\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  getApiPath(): string {\n    return '/feedback';\n  }\n\n  buildRequest(): FeedbackRequest {\n    return {\n      api_path: this.getApiPath()\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for GuideDownloadsEntry in TypeScript\nDESCRIPTION: Constructor that initializes a new GuideDownloadsEntry object with the provided raw node data. The class extends GuideEntry and is used to represent downloads entries in YouTube's guide navigation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GuideDownloadsEntry.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew GuideDownloadsEntry(data): GuideDownloadsEntry\n```\n\n----------------------------------------\n\nTITLE: Defining EngagementType Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the EngagementType type alias, which is a union of string literals representing different types of engagement actions on YouTube. It includes actions like video likes, dislikes, subscriptions, and playback.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/EngagementType.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype EngagementType = \"ENGAGEMENT_TYPE_UNBOUND\" | \"ENGAGEMENT_TYPE_VIDEO_LIKE\" | \"ENGAGEMENT_TYPE_VIDEO_DISLIKE\" | \"ENGAGEMENT_TYPE_SUBSCRIBE\" | \"ENGAGEMENT_TYPE_PLAYBACK\" | \"ENGAGEMENT_TYPE_YPC_GET_PREMIUM_PAGE\" | \"ENGAGEMENT_TYPE_YPC_GET_DOWNLOAD_ACTION\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking Method 'is' in YTNode (TypeScript)\nDESCRIPTION: Defines the generic `is` method inherited from `YTNode`. This type predicate checks if the current node instance is of one or more specified `YTNode` derived types (`K`). It returns a boolean indicating the match and refines the object's type in the `true` case. It requires `YTNode` and `YTNodeConstructor` types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T, K>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing DeletePlaylistEndpoint Constructor in TypeScript\nDESCRIPTION: Constructor for the DeletePlaylistEndpoint class that handles initialization with raw node data from YouTube API responses.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DeletePlaylistEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew DeletePlaylistEndpoint(`data`): [`DeletePlaylistEndpoint`](DeletePlaylistEndpoint.md)\n```\n\n----------------------------------------\n\nTITLE: Defining BadgeView Class in TypeScript\nDESCRIPTION: This code defines the BadgeView class which extends YTNode. It includes properties for text, style, and accessibility label, and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BadgeView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BadgeView extends YTNode {\n  text: string;\n  style: string;\n  accessibility_label: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.text = data.text;\n    this.style = data.style;\n    this.accessibility_label = data.accessibility_label;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Identifier for SortFilterSubMenu in TypeScript\nDESCRIPTION: Defines the static property `type` for the `SortFilterSubMenu` class, overriding the base `YTNode` static property. It is explicitly set to the string 'SortFilterSubMenu', serving as a unique identifier for this class type used internally by the parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterSubMenu.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'SortFilterSubMenu'\n```\n\n----------------------------------------\n\nTITLE: Defining AccountItemSectionHeader Class in TypeScript\nDESCRIPTION: This snippet defines the AccountItemSectionHeader class, which extends YTNode. It includes a constructor, properties for title and type, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AccountItemSectionHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AccountItemSectionHeader extends YTNode {\n  static type = 'AccountItemSectionHeader';\n\n  title: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: TranscriptFooter Class Definition in TypeScript\nDESCRIPTION: Definition of the TranscriptFooter class which extends YTNode. It includes properties for language menu and type information, along with inherited methods for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptFooter.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TranscriptFooter'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nlanguage_menu: null | SortFilterSubMenu\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): TranscriptFooter\n```\n\n----------------------------------------\n\nTITLE: Defining the 'bucket' Property in SendFeedbackAction (TypeScript)\nDESCRIPTION: Declares the public instance property `bucket` of type `string` within the `SendFeedbackAction` class. This property likely stores a category or identifier related to the feedback being sent.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SendFeedbackAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbucket: string\n```\n\n----------------------------------------\n\nTITLE: Inheriting Methods from YTNode Class\nDESCRIPTION: The VerticalList class inherits several utility methods from the YTNode base class including as(), is(), hasKey(), and key() which provide type checking and property access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalList.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is VerticalList & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Helper Methods Implementation in TypeScript\nDESCRIPTION: Implementation of helper methods for type checking and property access, including as(), is(), hasKey(), and key() methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicDownloadStateBadge.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is MusicDownloadStateBadge & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: HorizontalMovieList Contents Accessor - TypeScript\nDESCRIPTION: Getter method that provides access to the ObservedArray of YTNodes containing the list contents.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HorizontalMovieList.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget contents(): ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: ThumbnailOverlayPinking Class Definition in TypeScript\nDESCRIPTION: Definition of the ThumbnailOverlayPinking class that extends YTNode. It includes a constructor that accepts a RawNode parameter, a static type property, and a hack property. The class inherits various methods from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayPinking.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ThumbnailOverlayPinking extends YTNode {\n  static type: string = 'ThumbnailOverlayPinking';\n\n  hack: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    this.hack = true;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnifiedSharePanel Class Constructor in TypeScript\nDESCRIPTION: Constructor for the UnifiedSharePanel class that takes a RawNode data parameter and returns an instance of UnifiedSharePanel. It extends the YTNode class constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UnifiedSharePanel.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew UnifiedSharePanel(data): UnifiedSharePanel\n```\n\n----------------------------------------\n\nTITLE: CarouselItemView Type Checking Methods\nDESCRIPTION: Implementation of type checking and casting methods including as(), hasKey(), is(), and key() inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselItemView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is CarouselItemView & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: MetadataRow Class Properties Definition\nDESCRIPTION: Core property definitions for the MetadataRow class including title, contents array, and type identifier.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataRow.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: Text[]\ntitle: Text\nreadonly type: string\nstatic type: string = 'MetadataRow'\n```\n\n----------------------------------------\n\nTITLE: Initializing Settings Class in TypeScript\nDESCRIPTION: Constructor for the Settings class, taking actions and response parameters. It initializes properties for sidebar, introduction, and sections.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Settings.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Settings(actions: Actions, response: ApiResponse): Settings\n```\n\n----------------------------------------\n\nTITLE: Card Class Constructor Definition in TypeScript\nDESCRIPTION: Constructor implementation for the Card class that takes a RawNode data parameter and initializes a new Card instance. Extends the base YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Card.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Card(data: RawNode): Card\n```\n\n----------------------------------------\n\nTITLE: Declaring NotificationAction Class - TypeScript\nDESCRIPTION: Class definition for NotificationAction that extends YTNode. It includes a constructor taking RawNode data and defines properties for response text and type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/NotificationAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass NotificationAction extends YTNode {\n  static type = 'NotificationAction';\n  response_text: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AvatarStackView Class Definition in TypeScript\nDESCRIPTION: Class definition for AvatarStackView that extends YTNode. It includes properties for managing avatar arrays, text, and renderer context, along with inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AvatarStackView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass AvatarStackView extends YTNode {\n  static type: string = 'AvatarStackView';\n\n  avatars: ObservedArray<AvatarView>;\n  text?: Text;\n  renderer_context: RendererContext;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Videos From Memo Static Method\nDESCRIPTION: Static method type definition for retrieving all videos from a memo object. Returns an ObservedArray of various video types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/History.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Defining WatchCardSectionSequence Class in TypeScript\nDESCRIPTION: This code snippet defines the WatchCardSectionSequence class, which extends YTNode. It includes a constructor, properties, and inherited methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchCardSectionSequence.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass WatchCardSectionSequence extends YTNode {\n  static type = 'WatchCardSectionSequence';\n\n  lists: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.lists = observe(data.lists.map((list: RawNode) => Parser.parseItem(list)));\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: GridContinuation Class Definition in TypeScript\nDESCRIPTION: Defines the GridContinuation class that extends YTNode, providing functionality for handling grid-style continuation data in YouTube.js. The class includes properties for the continuation token and items collection.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/GridContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: 'gridContinuation' = 'gridContinuation';\n\ncontinuation: string;\nitems: null | ObservedArray<YTNode>;\n```\n\n----------------------------------------\n\nTITLE: Continuation Method - NotificationsMenu\nDESCRIPTION: Asynchronous method that fetches the next page of notifications.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/NotificationsMenu.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<NotificationsMenu>\n```\n\n----------------------------------------\n\nTITLE: Implementing KidsCategoriesHeader Constructor in TypeScript\nDESCRIPTION: Constructor for the KidsCategoriesHeader class that takes a RawNode data parameter and returns a new instance of KidsCategoriesHeader. It extends the base YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsCategoriesHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew KidsCategoriesHeader(data: RawNode): KidsCategoriesHeader\n```\n\n----------------------------------------\n\nTITLE: Fetching Sidebar Items in TypeScript\nDESCRIPTION: Getter method that returns an array of strings representing options available in the sidebar.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Settings.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget sidebar_items(): string[]\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileColumnStats Class in TypeScript\nDESCRIPTION: Class definition for ProfileColumnStats that extends YTNode. Includes constructor, properties, and accessor methods for handling profile column statistics.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProfileColumnStats.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProfileColumnStats extends YTNode {\n  static type = 'ProfileColumnStats';\n  items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.items = data;\n  }\n\n  get contents(): ObservedArray<YTNode> {\n    return this.items;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static type Property in RichListHeader (TypeScript)\nDESCRIPTION: Defines a static property `type` for the `RichListHeader` class, overriding the base `YTNode` static type. It is set to the string literal 'RichListHeader', identifying nodes of this specific type for parsing and type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'RichListHeader'\n```\n\n----------------------------------------\n\nTITLE: Smoothed Actions Emission Method\nDESCRIPTION: Method to emit smoothed actions from the queue.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/SmoothedQueue.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nemitSmoothedActions(): void\n```\n\n----------------------------------------\n\nTITLE: Implementing the getApiPath() Method - TypeScript\nDESCRIPTION: Defines the getApiPath() method, which returns the specific API path (as a string) this endpoint interacts with. This utility function is fundamental for routing requests within the YouTube.js infrastructure, ensuring the endpoint directs API calls to the correct backend handler. No parameters are required, and output is a string representing an API route.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEntityEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetApiPath(): string {\n  // Implementation: return the API route/path for the share entity operation\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited 'as' Method for Type Casting (TypeScript)\nDESCRIPTION: Inherited method `as` from `YTNode`. It attempts to cast the current node instance to one of the provided `YTNodeConstructor` types. Throws an error if the cast is not possible.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing EmojiPicker Class in TypeScript\nDESCRIPTION: Class definition for EmojiPicker that extends YTNode. Contains properties for managing emoji categories, search functionality, and skin tone selection options. Constructor accepts RawNode data parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EmojiPicker.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass EmojiPicker extends YTNode {\n  static type = 'EmojiPicker';\n  id: string;\n  categories: ObservedArray<YTNode>;\n  category_buttons: ObservedArray<YTNode>;\n  search_placeholder: Text;\n  search_no_results: Text;\n  pick_skin_tone: Text;\n  clear_search_label: string;\n  skin_tone_generic_label: string;\n  skin_tone_light_label: string;\n  skin_tone_medium_light_label: string;\n  skin_tone_medium_label: string;\n  skin_tone_medium_dark_label: string;\n  skin_tone_dark_label: string;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DefaultPromoPanel Class in TypeScript\nDESCRIPTION: This code snippet defines the DefaultPromoPanel class, which extends YTNode. It includes various properties related to promo panel display and metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DefaultPromoPanel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DefaultPromoPanel extends YTNode {\n  static type = 'DefaultPromoPanel';\n\n  title: Text;\n  description: Text;\n  endpoint: NavigationEndpoint;\n  large_form_factor_background_thumbnail: YTNode;\n  small_form_factor_background_thumbnail: YTNode;\n  scrim_color_values: number[];\n  min_panel_display_duration_ms: number;\n  min_video_play_duration_ms: number;\n  scrim_duration: number;\n  metadata_order: string;\n  panel_layout: string;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Method 'is()' in TypeScript\nDESCRIPTION: Method inherited from YTNode that checks if the node is of the given type, returning a type predicate for type narrowing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Dropdown.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nis\\<T extends [`YTNode`](../../Helpers/classes/YTNode.md), K extends [`YTNodeConstructor`](../../Helpers/interfaces/YTNodeConstructor.md)\\<T\\>[]\\>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for DownloadButton Class in TypeScript\nDESCRIPTION: Constructor method for the DownloadButton class that takes a RawNode data parameter and initializes a new DownloadButton instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DownloadButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew DownloadButton(data): DownloadButton\n```\n\n----------------------------------------\n\nTITLE: Mix Class Definition - TypeScript\nDESCRIPTION: Class definition for Mix that extends the Playlist class. Includes constructor taking a RawNode parameter and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Mix.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Mix extends Playlist {\n  static type: string = 'Mix';\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Helper Methods Implementation - TypeScript\nDESCRIPTION: Implementation of helper methods including as(), hasKey(), is(), and key() inherited from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MacroMarkersInfoItem.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is MacroMarkersInfoItem & { [k in string]: R }\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Constructing RichListHeader Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `RichListHeader` class. It takes raw node data (`RawNode`) as input and initializes a new `RichListHeader` instance, overriding the base `YTNode` constructor. Depends on `RawNode` type alias and `YTNode` base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RichListHeader(data: RawNode): RichListHeader\n```\n\n----------------------------------------\n\nTITLE: Defining CallToActionButton Class Properties in TypeScript\nDESCRIPTION: Class definition showing the properties of CallToActionButton including icon_type, label, style, and type inheritance from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CallToActionButton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CallToActionButton extends YTNode {\n  static type = 'CallToActionButton';\n  label: Text;\n  icon_type: string;\n  style: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ReelPlayerHeader Properties in TypeScript\nDESCRIPTION: Declares the properties specific to the `ReelPlayerHeader` class. `author` holds Author information, `channel_thumbnail` stores an array of Thumbnails for the channel, `channel_title_text` contains the channel's title as Text, `reel_title_text` holds the Reel's title as Text, and `timestamp_text` stores the timestamp information as Text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nauthor: Author\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nchannel_thumbnail: Thumbnail[]\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nchannel_title_text: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nreel_title_text: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntimestamp_text: Text\n```\n\n----------------------------------------\n\nTITLE: Implementing page Getter for LibraryContinuation Class in TypeScript\nDESCRIPTION: Getter method that returns the IBrowseResponse object representing the current page of library data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/LibraryContinuation.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget page(): [`IBrowseResponse`](../../APIResponseTypes/type-aliases/IBrowseResponse.md)\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelListContinuation Class in TypeScript\nDESCRIPTION: This code snippet defines the ChannelListContinuation class, which extends the Feed class. It includes a constructor, properties, and methods for handling channel list continuations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ChannelListContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ChannelListContinuation extends Feed<IBrowseResponse> {\n  contents?: AppendContinuationItemsAction | OpenPopupAction | NavigateAction | ShowMiniplayerCommand | ReloadContinuationItemsCommand;\n\n  constructor(actions: Actions, data: ApiResponse | IBrowseResponse, already_parsed: boolean = false) {\n    super(actions, data, already_parsed);\n  }\n\n  async getContinuation(): Promise<ChannelListContinuation> {\n    // Implementation not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing ProfileColumn Properties in TypeScript\nDESCRIPTION: Defines the core properties of the ProfileColumn class including items array and type definitions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProfileColumn.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nitems: ObservedArray<YTNode>\nreadonly type: string\nstatic type: string = 'ProfileColumn'\n```\n\n----------------------------------------\n\nTITLE: TranscriptSectionHeader Properties Definition in TypeScript\nDESCRIPTION: Declaration of the properties for the TranscriptSectionHeader class including start_ms and end_ms timestamps as strings, and a snippet property of type Text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSectionHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstart_ms: string;\nend_ms: string;\nsnippet: Text;\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerLegacyDesktopYpcTrailer Class in TypeScript\nDESCRIPTION: This code snippet defines the PlayerLegacyDesktopYpcTrailer class, which extends YTNode. It includes properties for video and offer details, as well as a constructor that initializes these properties from raw data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerLegacyDesktopYpcTrailer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlayerLegacyDesktopYpcTrailer extends YTNode {\n  static type = 'PlayerLegacyDesktopYpcTrailer';\n\n  video_id: string;\n  title: string;\n  thumbnail: string;\n  offer_headline: string;\n  offer_description: string;\n  offer_id: string;\n  offer_button_text: string;\n  video_message: string;\n  trailer: null | YpcTrailer;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BrowserMediaSession Class in TypeScript\nDESCRIPTION: This code snippet defines the BrowserMediaSession class, which extends YTNode. It includes a constructor, properties for album and thumbnails, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BrowserMediaSession.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BrowserMediaSession extends YTNode {\n  static type = 'BrowserMediaSession';\n\n  album: Text;\n  thumbnails: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    this.album = new Text(data.album);\n    this.thumbnails = Thumbnail.fromResponse(data.thumbnails);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ExpandableMetadata Properties Definition - TypeScript\nDESCRIPTION: Defines the main properties of the ExpandableMetadata class including buttons for expanding/collapsing, expanded content, and header information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ExpandableMetadata.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExpandableMetadata extends YTNode {\n  static type: string = 'ExpandableMetadata';\n  header?: {\n    collapsed_label: Text;\n    collapsed_thumbnail: Thumbnail[];\n    collapsed_title: Text;\n    expanded_title: Text;\n  };\n  expanded_content: null | HorizontalList | HorizontalCardList;\n  expand_button: null | Button;\n  collapse_button: null | Button;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Assertion and Type Guard Methods for YTNode-derived Classes in TypeScript\nDESCRIPTION: These utility methods are inherited from YTNode and allow for runtime type validation, casting, and key inspection of nodes. The as() method casts the current node to one of the supplied types, is() checks if the node is of a given type, hasKey() checks for the presence of a named property without asserting its type, and key() asserts the key\\'s presence and returns its value wrapped in a Maybe. These methods depend on correct instantiation of the node class hierarchy and leverage TypeScript's generic type system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleColumnBrowseResults.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Inherited utility methods from YTNode:\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Casts node to one of the given YTNode-derived types\n}\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Type-guard: checks if node is one of the given types\n}\n\nhasKey<T extends string, R = any>(key: T): this is this & { [k in string]: R } {\n  // Returns true if node has the specified key, false otherwise\n}\n\nkey<T extends string, R = any>(key: T): Maybe<R> {\n  // Asserts and returns the value of the key, or throws if not present\n}\n```\n\n----------------------------------------\n\nTITLE: PlaylistCustomThumbnail Class Constructor - TypeScript\nDESCRIPTION: Constructor for PlaylistCustomThumbnail class that takes raw node data and initializes a playlist thumbnail object. Extends the base YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistCustomThumbnail.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PlaylistCustomThumbnail(data: RawNode): PlaylistCustomThumbnail\n```\n\n----------------------------------------\n\nTITLE: SubFeedSelector Class Definition in TypeScript\nDESCRIPTION: Defines the SubFeedSelector class that extends YTNode. It contains properties for title and options, as well as inherited methods for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SubFeedSelector.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'SubFeedSelector'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\noptions: ObservedArray<SubFeedOption>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): SubFeedSelector\n```\n\n----------------------------------------\n\nTITLE: Player URL Accessor\nDESCRIPTION: Getter method that returns the player URL as a string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Player.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget url(): string\n```\n\n----------------------------------------\n\nTITLE: LikeEndpoint API Path Method\nDESCRIPTION: Method that returns the API path for like operations\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiPath(): string\n```\n\n----------------------------------------\n\nTITLE: LikeButton Class Definition in TypeScript\nDESCRIPTION: Defines a LikeButton class that extends YTNode. The class handles YouTube video like button data including like status, permissions, and target video information. It includes various utility methods inherited from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeButton.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LikeButton extends YTNode {\n  static type = 'LikeButton';\n\n  target: {\n    video_id: string\n  };\n\n  like_status: string;\n  likes_allowed: string;\n  endpoints?: NavigationEndpoint[];\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for MusicShelfContinuation in TypeScript\nDESCRIPTION: This snippet shows the constructor signature for the MusicShelfContinuation class. It takes a RawNode parameter and returns an instance of MusicShelfContinuation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/MusicShelfContinuation.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): MusicShelfContinuation\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatDialog Class in TypeScript\nDESCRIPTION: This code defines the LiveChatDialog class, which extends YTNode. It includes properties for confirm_button, dialog_messages, and type. The constructor takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatDialog.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatDialog extends YTNode {\n  static type = 'LiveChatDialog';\n\n  confirm_button: null | Button;\n  dialog_messages: Text[];\n\n  constructor(data: RawNode) {\n    super();\n    this.confirm_button = Parser.parseItem(data.confirmButton, Button);\n    this.dialog_messages = Parser.parseArray(data.dialogMessages, Text);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveListItemFlexColumn Class in TypeScript\nDESCRIPTION: Class definition for MusicResponsiveListItemFlexColumn that extends YTNode. Contains properties for title and display priority, along with inherited methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItemFlexColumn.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicResponsiveListItemFlexColumn extends YTNode {\n  static type = 'MusicResponsiveListItemFlexColumn';\n  title: Text;\n  display_priority: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Key Value with key() Method in YTNode (TypeScript)\nDESCRIPTION: Defines the generic `key` method, inherited from `YTNode`. It asserts that the node instance has the specified key and returns its value wrapped in a `Maybe` container. Throws an error if the key does not exist on the node.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalAction.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Selecting Sidebar Item in TypeScript\nDESCRIPTION: Asynchronous method to select an item from the sidebar menu. It takes a string or CompactLink object as a parameter and returns a Promise resolving to a Settings object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Settings.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nselectSidebarItem(target_item: string | CompactLink): Promise<Settings>\n```\n\n----------------------------------------\n\nTITLE: SubFeedOption Class Definition in TypeScript\nDESCRIPTION: This snippet shows the complete TypeScript class definition for SubFeedOption. The class extends YTNode and includes properties for name, is_selected status, and navigation endpoint. It inherits various methods from the YTNode parent class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SubFeedOption.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SubFeedOption extends YTNode {\n  static type = 'SubFeedOption';\n\n  name: Text;\n  is_selected: boolean;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details not shown in the documentation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited 'hasKey' Property Check Method for RichShelf in TypeScript\nDESCRIPTION: Documents the inherited `hasKey` method from `YTNode`. This method checks if a `RichShelf` instance possesses a specific key without asserting the type of the value, returning a boolean type predicate.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T, R>(key: T): this is RichShelf & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Defining the Disabled State Property for SettingsCheckbox in TypeScript\nDESCRIPTION: Declares the `disabled` property for the `SettingsCheckbox` class. This boolean property reflects whether the corresponding setting option is interactive or greyed out in the YouTube interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ndisabled: boolean\n```\n\n----------------------------------------\n\nTITLE: Checking Property Existence with 'hasKey' Method in TypeScript\nDESCRIPTION: Inherited from `YTNode`, this method checks if the node instance possesses a specific property key without asserting the type of the property's value. It takes the key name as a string argument. It returns a boolean type predicate indicating whether the key exists on the instance, refining the type to include the key.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveBannerForLiveChatCommand.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T, R>(key: T): this is RemoveBannerForLiveChatCommand & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Getting Playlists from Memo in TypeScript\nDESCRIPTION: Static method to extract all playlists from a given memo page. Returns an ObservedArray containing various playlist types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ChannelListContinuation.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining HistorySuggestion Class in TypeScript\nDESCRIPTION: Class definition for HistorySuggestion that extends SearchSuggestion. It handles history suggestions in YouTube search and includes a constructor that takes a RawNode data parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HistorySuggestion.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew HistorySuggestion(data): HistorySuggestion\n```\n\n----------------------------------------\n\nTITLE: Accessing a Key Value with key Method - TypeScript\nDESCRIPTION: The key<T, R>() method asserts the presence of a key and returns its value wrapped in a Maybe type for safe access. It accepts a string property name, checks existence, and returns the value or throws if missing. Dependencies are the Maybe utility class and TypeScript generics; expected inputs are property keys, and outputs are Maybe-wrapped property values. Throws an exception when the key is absent.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerOverlay.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Assert that the node has the given key and return it.\n * @throws If the node does not have the key\n */\nkey<T extends string, R = any>(key: T): Maybe {\n  // check key existence and return wrapped value\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatPaidMessage Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatPaidMessage class, which extends YTNode. It includes properties for message content, author details, styling colors, and related UI elements for paid messages in YouTube live chats.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatPaidMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatPaidMessage extends YTNode {\n  static type = 'LiveChatPaidMessage';\n\n  id: string;\n  message: Text;\n  author: Author;\n  author_name_text_color: number;\n  header_background_color: number;\n  header_text_color: number;\n  body_background_color: number;\n  body_text_color: number;\n  purchase_amount: string;\n  menu_endpoint: NavigationEndpoint;\n  context_menu_accessibility_label: string;\n  timestamp: number;\n  timestamp_usec: string;\n  timestamp_text?: string;\n  timestamp_color: number;\n  header_overlay_image?: Thumbnail[];\n  text_input_background_color: number;\n  lower_bumper: null | LiveChatItemBumperView;\n  creator_heart_button: null | CreatorHeartView;\n  is_v2_style: boolean;\n  reply_button: null | PdgReplyButtonView;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted for brevity\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Actions for CommentView in TypeScript\nDESCRIPTION: Method to set the Actions instance for the CommentView. This is likely used to enable various operations on the comment.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetActions(actions: undefined | Actions): void\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Methods in CompactChannel Class\nDESCRIPTION: This snippet shows the inherited methods from YTNode class, including as(), is(), hasKey(), and key(). These methods provide type checking and key access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactChannel.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Implementation...\n}\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Implementation...\n}\n\nhasKey<T extends string, R = any>(key: T): this is CompactChannel & { [k in string]: R } {\n  // Implementation...\n}\n\nkey<T extends string, R = any>(key: T): Maybe {\n  // Implementation...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing isEmpty Method for Text Class in TypeScript\nDESCRIPTION: Method to check if the text is empty, returning a boolean value.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Text.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nisEmpty(): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining PlayerErrorMessage Class in TypeScript\nDESCRIPTION: This code snippet defines the PlayerErrorMessage class, which extends YTNode. It includes properties for error message details and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerErrorMessage.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass PlayerErrorMessage extends YTNode {\n  static type = 'PlayerErrorMessage';\n\n  subreason: Text;\n  reason: Text;\n  proceed_button: null | Button;\n  thumbnails: Thumbnail[];\n  icon_type?: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.subreason = new Text(data.subreason);\n    this.reason = new Text(data.reason);\n    this.proceed_button = data.proceedButton ? new Button(data.proceedButton) : null;\n    this.thumbnails = Thumbnail.fromResponse(data.thumbnail);\n    this.icon_type = data.iconType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelHeaderLinksView Properties - TypeScript\nDESCRIPTION: Class property definitions including optional first_link and more properties of Text type, along with static and readonly type properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelHeaderLinksView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfirst_link?: Text;\nmore?: Text;\nreadonly type: string;\nstatic type: string = 'ChannelHeaderLinksView';\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Helper Methods\nDESCRIPTION: Implementation of inherited utility methods from YTNode including type checking and key access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataBadge.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is MetadataBadge & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: FilteredChannelList Accessors Implementation\nDESCRIPTION: Getter methods for accessing various feed properties like channels, filters, and pagination state.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/FilteredChannelList.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget actions(): Actions\nget channels(): ObservedArray<Channel | GridChannel>\nget filter_chips(): ObservedArray<ChipCloudChip>\nget filters(): string[]\nget has_continuation(): boolean\nget memo(): Memo\nget page(): T\nget page_contents(): ReloadContinuationItemsCommand | SectionList | MusicQueue | RichGrid\nget playlists(): ObservedArray<GridPlaylist | LockupView | Playlist>\nget posts(): ObservedArray<BackstagePost | Post | SharedPost>\nget secondary_contents(): undefined | SuperParsedResult<YTNode>\nget shelves(): ObservedArray<ReelShelf | RichShelf | Shelf>\n```\n\n----------------------------------------\n\nTITLE: Defining Search Class in TypeScript\nDESCRIPTION: Defines the Search class which extends the Feed class, specifically for handling search results in YouTube Kids. It includes properties for estimated results and contents.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Search.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Search extends Feed<ISearchResponse> {\n  estimated_results?: number;\n  contents: null | ObservedArray<YTNode>;\n\n  constructor(actions: Actions, data: ApiResponse | ISearchResponse) {\n    super(actions, data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Methods in TypeScript\nDESCRIPTION: Implementation of inherited utility methods from YTNode including type checking, key validation, and type casting functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicEditablePlaylistDetailHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is MusicEditablePlaylistDetailHeader & { [k in string]: R };\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: String Type Conversion in TypeScript\nDESCRIPTION: Method that converts a value to string type. Defined in the parser helpers file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/Maybe.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstring(): string\n```\n\n----------------------------------------\n\nTITLE: Starting LiveChat\nDESCRIPTION: Starts the LiveChat functionality. This method doesn't take any parameters and doesn't return anything.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nstart(): void\n```\n\n----------------------------------------\n\nTITLE: Playlist Class Property Definitions\nDESCRIPTION: Defines the main properties of the Playlist class including info object with metadata, menu, endpoint and messages.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninfo: {\n  author: Author\n  can_delete: boolean\n  can_share: boolean\n  description?: string\n  is_editable: boolean\n  last_updated: string\n  privacy: string\n  subtitle: null | Text\n  thumbnails: Thumbnail[]\n  title?: string\n  total_items: string\n  type?: string\n  views: string\n}\n\nmenu: YTNode\nendpoint?: NavigationEndpoint\nmessages: ObservedArray<Message>\n```\n\n----------------------------------------\n\nTITLE: DimChatItemAction Class Definition\nDESCRIPTION: Class definition for DimChatItemAction that extends YTNode. Includes constructor, properties, and inherited methods for handling dim chat actions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DimChatItemAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass DimChatItemAction extends YTNode {\n  static type = 'DimChatItemAction';\n  client_assigned_id: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThirdPartyShareTargetSection Constructor in TypeScript\nDESCRIPTION: Constructor for the ThirdPartyShareTargetSection class that takes a RawNode data parameter and initializes the share_targets property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThirdPartyShareTargetSection.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThirdPartyShareTargetSection(`data`): [`ThirdPartyShareTargetSection`](ThirdPartyShareTargetSection.md)\n```\n\n----------------------------------------\n\nTITLE: ChannelMobileHeader Helper Methods - TypeScript\nDESCRIPTION: Implementation of helper methods including type checking (is), type casting (as), and key validation methods (hasKey, key).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelMobileHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is ChannelMobileHeader & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe Key Access in TypeScript\nDESCRIPTION: Generic method for type-safe property access that returns a Maybe monad. Takes a key parameter and checks if the node has that key, throwing an error if it doesn't. Provides type parameters T for key type and R for return value type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatPaidMessage.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe {\n  // Implementation details not shown in documentation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing YTNode Methods in HashtagTile Class\nDESCRIPTION: Methods inherited from the YTNode class for type checking and key validation, including 'as()', 'is()', 'hasKey()', and 'key()' methods for safely accessing properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HashtagTile.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is HashtagTile & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining PremiereTrailerBadge Class Structure in TypeScript\nDESCRIPTION: Class definition for PremiereTrailerBadge that extends YTNode. It includes a constructor that takes RawNode data, implements label property and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PremiereTrailerBadge.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PremiereTrailerBadge extends YTNode {\n  static type = 'PremiereTrailerBadge';\n  label: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MusicImmersiveHeader Constructor Implementation - TypeScript\nDESCRIPTION: Constructor implementation for MusicImmersiveHeader class that takes a RawNode data parameter and returns a new MusicImmersiveHeader instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicImmersiveHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew MusicImmersiveHeader(data: RawNode): MusicImmersiveHeader\n```\n\n----------------------------------------\n\nTITLE: Defining GridHeader Class in TypeScript\nDESCRIPTION: This code defines the GridHeader class which extends YTNode. It includes a constructor, properties for title and type, and inherits methods from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GridHeader extends YTNode {\n  static type = 'GridHeader';\n\n  title: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YTNode Methods Inherited by TranscriptSegmentList\nDESCRIPTION: These methods are inherited from the YTNode class and provide type checking, key assertion, and type casting functionality for the TranscriptSegmentList class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSegmentList.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is TranscriptSegmentList & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining MenuServiceItemDownload Class in TypeScript\nDESCRIPTION: This code defines the MenuServiceItemDownload class, which extends YTNode. It includes properties for has_separator and endpoint, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MenuServiceItemDownload.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MenuServiceItemDownload extends YTNode {\n  static type = 'MenuServiceItemDownload';\n\n  has_separator: boolean;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    this.has_separator = data.hasSeparator;\n    this.endpoint = new NavigationEndpoint(data.endpoint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a TabbedSearchResults Instance in TypeScript\nDESCRIPTION: Constructor for TabbedSearchResults class that takes a RawNode data parameter and returns a new TabbedSearchResults instance. This class handles tabbed search results from YouTube API responses.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TabbedSearchResults.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew TabbedSearchResults(data): TabbedSearchResults\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateTitleAction Class in TypeScript\nDESCRIPTION: Class definition for UpdateTitleAction that extends YTNode. It includes a constructor that accepts RawNode data, static type property, and a title property of Text type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateTitleAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass UpdateTitleAction extends YTNode {\n  static type = 'UpdateTitleAction';\n\n  title: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: PageHeaderView Helper Methods in TypeScript\nDESCRIPTION: Implementation of helper methods for type checking and property access including as(), is(), hasKey() and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PageHeaderView.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nhasKey<T extends string, R = any>(key: T): this is PageHeaderView & { [k in string]: R };\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Accessing Page Data from ItemMenu in TypeScript\nDESCRIPTION: The page() method returns the IParsedResponse object associated with the ItemMenu instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ItemMenu.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\npage(): IParsedResponse\n```\n\n----------------------------------------\n\nTITLE: IconLink Class Definition in TypeScript\nDESCRIPTION: Class definition for IconLink that extends YTNode. It manages icon-based links with properties for icon type, tooltip, and navigation endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/IconLink.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass IconLink extends YTNode {\n  static type = 'IconLink';\n  icon_type: string;\n  tooltip?: string;\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Readonly Type Property in YTNode TypeScript\nDESCRIPTION: Specifies the inherited `type` instance property from the base `YTNode` class. It's a read-only string identifier representing the specific type of the node instance, defined in `src/parser/helpers.ts`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining MacroMarkersListItem Class in TypeScript\nDESCRIPTION: This code defines the MacroMarkersListItem class, which extends YTNode. It includes properties for title, time description, thumbnail, navigation endpoint, layout, and highlight status.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MacroMarkersListItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MacroMarkersListItem extends YTNode {\n  static type = 'MacroMarkersListItem';\n\n  title: Text;\n  time_description: Text;\n  thumbnail: Thumbnail[];\n  on_tap_endpoint: NavigationEndpoint;\n  layout: string;\n  is_highlighted: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details omitted\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting key Method for Property Access in YTNode TypeScript Base Class\nDESCRIPTION: Describes the inherited `key` method from the `YTNode` base class. This method asserts that the node instance has a property with the specified key and returns its value wrapped in a `Maybe` container. It throws a runtime error if the key does not exist on the node.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelHeader.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Playlist Retrieval from Memo\nDESCRIPTION: Static method to extract all playlists from a memo object containing search results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining CardCollection Class in TypeScript\nDESCRIPTION: This code snippet defines the CardCollection class, which extends YTNode. It includes properties for cards, header, and dismissal options, as well as a constructor and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CardCollection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CardCollection extends YTNode {\n  static type = 'CardCollection';\n\n  cards: ObservedArray<YTNode>;\n  header: Text;\n  allow_teaser_dismiss: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    this.cards = parser.parseArray(data.cards);\n    this.header = new Text(data.header);\n    this.allow_teaser_dismiss = data.allowTeaserDismiss;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistEditRequest Type in TypeScript\nDESCRIPTION: Defines a TypeScript type alias called PlaylistEditRequest that contains optional properties for playlist editing operations. It includes an actions array for specific edit operations, a params string, and a playlistId string to identify the target playlist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/PlaylistEditRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype PlaylistEditRequest = object\n\n## Type declaration\n\n### actions?\n\n> `optional` **actions**: `Record`\\<`string`, `any`\\>[]\n\n### params?\n\n> `optional` **params**: `string`\n\n### playlistId?\n\n> `optional` **playlistId**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining AppendContinuationItemsAction Class in TypeScript\nDESCRIPTION: This code snippet defines the AppendContinuationItemsAction class, which extends YTNode. It includes a constructor, properties for contents and target, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AppendContinuationItemsAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AppendContinuationItemsAction extends YTNode {\n  static type = 'AppendContinuationItemsAction';\n\n  contents: null | ObservedArray<YTNode>;\n  target: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.contents = parser.parseArray(data.continuationItems);\n    this.target = data.target;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited 'hasKey' Method for Property Existence Check (TypeScript)\nDESCRIPTION: Inherited method `hasKey` from `YTNode`. It checks if the node instance possesses a specific key, acting as a type guard without asserting the property's type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is RecognitionShelf & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Implementing MetadataBadge Constructor\nDESCRIPTION: Constructor implementation that takes RawNode data parameter and initializes a new MetadataBadge instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataBadge.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew MetadataBadge(data: RawNode): MetadataBadge\n```\n\n----------------------------------------\n\nTITLE: Type Checking Method in YTNode Class\nDESCRIPTION: Implementation of the 'is' method that checks if the node is of the given type(s). It takes type parameters and returns a boolean indicating whether the node matches any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TabbedSearchResults.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining BackstagePostThread Class in TypeScript\nDESCRIPTION: This snippet defines the BackstagePostThread class, which extends YTNode. It includes a constructor that takes a RawNode parameter and initializes a 'post' property of type YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BackstagePostThread.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BackstagePostThread extends YTNode {\n  static type = 'BackstagePostThread';\n\n  post: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    this.post = parser.parseItem(data.post);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Properties in TypeScript\nDESCRIPTION: Static and readonly type property definitions for the AutomixPreviewVideo class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AutomixPreviewVideo.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string;\nstatic type: string = 'AutomixPreviewVideo';\n```\n\n----------------------------------------\n\nTITLE: Constructing a SimpleMenuHeader Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `SimpleMenuHeader` class. It takes raw node data (`RawNode`) parsed from the YouTube API response and initializes a new `SimpleMenuHeader` instance. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleMenuHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SimpleMenuHeader(data: RawNode): SimpleMenuHeader\n```\n\n----------------------------------------\n\nTITLE: Defining EndScreenPlaylist Class in TypeScript\nDESCRIPTION: This code defines the EndScreenPlaylist class, which extends YTNode. It includes properties for playlist details and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EndScreenPlaylist.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass EndScreenPlaylist extends YTNode {\n  static type = 'EndScreenPlaylist';\n\n  id: string;\n  title: Text;\n  author: Text;\n  endpoint: NavigationEndpoint;\n  thumbnails: Thumbnail[];\n  video_count: Text;\n\n  constructor(data: RawNode) {\n    super();\n    this.id = data.playlistId;\n    this.title = new Text(data.title);\n    this.author = new Text(data.longBylineText);\n    this.endpoint = new NavigationEndpoint(data.navigationEndpoint);\n    this.thumbnails = Thumbnail.fromResponse(data.thumbnail);\n    this.video_count = new Text(data.videoCountText);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing MusicMultiSelectMenu Methods\nDESCRIPTION: Method implementations for type checking and property access including as(), hasKey(), is(), and key() methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicMultiSelectMenu.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is MusicMultiSelectMenu & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: ThumbnailOverlayInlineUnplayable Method 'is' in TypeScript\nDESCRIPTION: Method to check if the node is of a given type. Takes type parameters and returns a type predicate indicating if the node matches any of the specified types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayInlineUnplayable.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing Position Property in ThumbnailOverlayBadgeView Class\nDESCRIPTION: Property definition for position in the ThumbnailOverlayBadgeView class. It stores a string value that indicates where the badge is positioned on the thumbnail.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayBadgeView.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nposition: `string`\n```\n\n----------------------------------------\n\nTITLE: Type Definition and Properties\nDESCRIPTION: Type and property definitions for the PlaylistSidebarSecondaryInfo class, including static type property and instance properties for owner and button elements.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistSidebarSecondaryInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string;\nstatic type: string = 'PlaylistSidebarSecondaryInfo';\nowner: YTNode;\nbutton: YTNode;\n```\n\n----------------------------------------\n\nTITLE: PlayerOverlay Helper Methods Implementation\nDESCRIPTION: Implementation of utility methods for type checking and property access including as(), is(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerOverlay.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is PlayerOverlay & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods\nDESCRIPTION: Implementation of inherited helper methods from YTNode including type checking and property access methods like as(), is(), hasKey(), and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatBannerChatSummary.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nhasKey<T extends string, R = any>(key: T): this is LiveChatBannerChatSummary & { [k in string]: R };\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining AccountInfo Class Constructor in TypeScript\nDESCRIPTION: This constructor initializes an AccountInfo instance with a response object. It likely parses the response to extract relevant account information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/AccountInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew AccountInfo(response: ApiResponse): AccountInfo\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Properties for SortFilterSubMenu in TypeScript\nDESCRIPTION: Declares optional properties for the `SortFilterSubMenu` class: `icon_type` (string), `label` (string), `sub_menu_items` (object array), `title` (string), and `tooltip` (string). These properties hold data related to the visual representation and content of the sort/filter submenu, parsed from the raw API data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterSubMenu.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nicon_type?: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nlabel?: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsub_menu_items?: object[]\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle?: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntooltip?: string\n```\n\n----------------------------------------\n\nTITLE: ExpandedShelfContents Class Definition in TypeScript\nDESCRIPTION: Class definition for ExpandedShelfContents that extends YTNode. Includes constructor, properties for items storage, type declarations, and methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ExpandedShelfContents.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ExpandedShelfContents extends YTNode {\n  static type = 'ExpandedShelfContents';\n  items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  get contents(): ObservedArray<YTNode> {\n    return this.items;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods - TypeScript\nDESCRIPTION: Methods for checking the type of the wrapped value, including isString(), isNumber(), isBoolean(), etc.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/Maybe.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Maybe {\n  isString(): boolean {\n    // Implementation\n  }\n\n  isNumber(): boolean {\n    // Implementation\n  }\n\n  isBoolean(): boolean {\n    // Implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DeviceCategory Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that specifies valid device categories for YouTube.js library operations. The type constrains values to either 'mobile' or 'desktop' strings.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/type-aliases/DeviceCategory.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype DeviceCategory = \"mobile\" | \"desktop\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for MusicLargeCardItemCarousel in TypeScript\nDESCRIPTION: This snippet shows the constructor implementation for the MusicLargeCardItemCarousel class. It takes a RawNode parameter and initializes the object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicLargeCardItemCarousel.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): MusicLargeCardItemCarousel {\n  // Constructor implementation\n}\n```\n\n----------------------------------------\n\nTITLE: PageHeaderView Class Properties in TypeScript\nDESCRIPTION: Definition of class properties including title, images, metadata, actions, description and banner properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PageHeaderView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: null | DynamicTextView;\nimage: null | ContentPreviewImageView | DecoratedAvatarView;\nanimated_image: null | ContentPreviewImageView;\nhero_image: null | ContentPreviewImageView;\nmetadata: null | ContentMetadataView;\nactions: null | FlexibleActionsView;\ndescription: null | DescriptionPreviewView;\nattributation: null | AttributionView;\nbanner: null | ImageBannerView;\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods Implementation in TypeScript\nDESCRIPTION: Implementation of helper methods inherited from YTNode class including as() for type casting, is() for type checking, hasKey() for property existence checking, and key() for property access with Maybe type wrapping.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DecoratedAvatarView.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is DecoratedAvatarView & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining CollectionThumbnailView Class in TypeScript\nDESCRIPTION: This code snippet defines the CollectionThumbnailView class, which extends YTNode. It includes a constructor, properties for primary_thumbnail and stack_color, and static type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CollectionThumbnailView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CollectionThumbnailView extends YTNode {\n  static type = 'CollectionThumbnailView';\n\n  primary_thumbnail: null | ThumbnailView;\n  stack_color?: {\n    dark_theme: number;\n    light_theme: number;\n  };\n\n  constructor(data: RawNode) {\n    super();\n    this.primary_thumbnail = data.primaryThumbnail ? new ThumbnailView(data.primaryThumbnail) : null;\n    this.stack_color = data.stackColor;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Presence of a Key on a MusicResponsiveListItem Node in TypeScript\nDESCRIPTION: This code snippet exposes the hasKey<T>(key) function, checking if a node, specifically a MusicResponsiveListItem, has a member with the provided string key using TypeScript type intersections. Relies on correct typing of input key and the YTNode base class. Takes a string key as input and returns true if the key exists, otherwise false. Output reflects type-narrowing behavior for the MusicResponsiveListItem interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItem.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T>(key: T): this is MusicResponsiveListItem & { [k in string]: R };\n```\n\n----------------------------------------\n\nTITLE: Get Transcript Page Method - TypeScript\nDESCRIPTION: Accessor method that returns the transcript response data interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/TranscriptInfo.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget page(): IGetTranscriptResponse\n```\n\n----------------------------------------\n\nTITLE: Defining ThumbnailOverlayHoverText class in TypeScript\nDESCRIPTION: This code defines the ThumbnailOverlayHoverText class that extends YTNode. It includes properties for text content and icon type, with constructor taking a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayHoverText.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ThumbnailOverlayHoverText'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntext: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nicon_type: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThumbnailOverlayHoverText(data: RawNode): ThumbnailOverlayHoverText\n```\n\n----------------------------------------\n\nTITLE: Defining the Buttons Property for SimpleMenuHeader in TypeScript\nDESCRIPTION: Declares the `buttons` property for the `SimpleMenuHeader` class. It holds an `ObservedArray` containing `Button` instances associated with the menu header. The `ObservedArray` likely provides reactive capabilities or tracks changes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleMenuHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuttons: ObservedArray<Button>\n```\n\n----------------------------------------\n\nTITLE: VideoDescriptionHeader Constructor in TypeScript\nDESCRIPTION: Constructor for the VideoDescriptionHeader class that takes a RawNode data parameter and returns a new VideoDescriptionHeader instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew VideoDescriptionHeader(data: RawNode): VideoDescriptionHeader\n```\n\n----------------------------------------\n\nTITLE: Implementing is Method for Runtime Type Checking in YTNode in TypeScript\nDESCRIPTION: Provides an is<T, K>(...types) method that checks if the node matches one of the provided constructors, returning a type predicate for conditional logic. Useful for discriminated unions and dynamic node handling in the parser. This method is generic, variadic, and supports arbitrary node subclass checks at runtime.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemAction.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Action Queue Getter Implementation\nDESCRIPTION: Getter method that returns the array of action arrays.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/SmoothedQueue.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nget action_queue(): YTNode[][]\n```\n\n----------------------------------------\n\nTITLE: YTNode Base Class Methods Implementation\nDESCRIPTION: Implementation of inherited utility methods from YTNode including type checking, key validation, and type casting functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipAdState.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ClipAdState & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Type Alias in TypeScript\nDESCRIPTION: Defines a type alias named Runtime that enumerates the possible runtime environments supported by the YouTube.js library. This includes Deno, Node.js, browser, Cloudflare Workers, React Native, and an unknown fallback option.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/Runtime.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype Runtime = \"deno\" | \"node\" | \"browser\" | \"cf-worker\" | \"unknown\" | \"react-native\"\n```\n\n----------------------------------------\n\nTITLE: Defining FormatFilter Type Alias in TypeScript\nDESCRIPTION: This code defines a type alias for a FormatFilter function. The function takes a Format object as a parameter and returns a boolean value, likely used for filtering video or audio formats in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/FormatFilter.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nFormatFilter: (format: Format) => boolean\n```\n\n----------------------------------------\n\nTITLE: Defining SortBy Type Alias in TypeScript\nDESCRIPTION: Defines a union type of string literals representing different sorting options for YouTube content. Options include relevance, rating, upload date, and view count.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/SortBy.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype SortBy = \"relevance\" | \"rating\" | \"upload_date\" | \"view_count\"\n```\n\n----------------------------------------\n\nTITLE: Defining ShowLiveChatActionPanelAction Class in TypeScript\nDESCRIPTION: This snippet defines the ShowLiveChatActionPanelAction class which extends YTNode. It provides a constructor that initializes the class with raw node data, a panel_to_show property that holds either null or a LiveChatActionPanel, and overrides essential static and instance properties from YTNode. This class enables the encapsulation and parsing of YouTube Live Chat action panel nodes. Requires the YTNode and LiveChatActionPanel classes as dependencies, and expects input in the form of a RawNode. The class is designed for extensibility within a type-safe parsing architecture.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatActionPanelAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ShowLiveChatActionPanelAction extends YTNode {\n  static type = 'ShowLiveChatActionPanelAction';\n  panel_to_show: null | LiveChatActionPanel;\n  constructor(data: RawNode) {\n    super();\n    // initialization code here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CommandExecutorCommand Class in TypeScript\nDESCRIPTION: This snippet defines the CommandExecutorCommand class, which extends YTNode. It includes a constructor, properties, and inherited methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommandExecutorCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass CommandExecutorCommand extends YTNode {\n  static type = 'CommandExecutorCommand';\n\n  commands: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.commands = Parser.parseArray(data.commands);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Log Level Constants in TypeScript\nDESCRIPTION: This code snippet defines a constant object named 'Level' with numeric values assigned to different log levels. These constants can be used to set and compare log levels in a logging system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Log/variables/Level.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst Level: object = {\n  DEBUG: 4,\n  ERROR: 1,\n  INFO: 3,\n  NONE: 0,\n  WARNING: 2\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Parser Keys in TypeScript\nDESCRIPTION: Function that checks if a given key (string or symbol) should be ignored by the YouTube.js parser. Returns a boolean indicating whether the key should be ignored. Used in the parser/generator module at line 400.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/isIgnoredKey.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisIgnoredKey(key: string | symbol): boolean\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Property in TabbedSearchResults Class\nDESCRIPTION: Declaration of the static 'type' property which is set to 'TabbedSearchResults'. This property is used for identifying the node type within the YouTube.js parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TabbedSearchResults.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TabbedSearchResults'\n```\n\n----------------------------------------\n\nTITLE: Getting Playlists from Memo in YouTube.js Feed Class\nDESCRIPTION: This static method retrieves all playlists on a given page via memo. It returns an ObservedArray of GridPlaylist, LockupView, or Playlist objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Channel.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Type Assertion and Instance Checking Methods in YTNode - TypeScript\nDESCRIPTION: Provides core utility methods inherited by StructuredDescriptionContent from YTNode: is (for type checking), as (for type casting), hasKey and key (for safe property access). These methods enable robust and type-safe access to various node subtypes in the YouTube.js parser. Requires YTNode base implementation and correct type parameters. Inputs: variadic node type constructors, property key strings. Outputs: asserted or cast node instances, or wrapped property values.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/StructuredDescriptionContent.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is StructuredDescriptionContent & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelAgeGate Class - TypeScript\nDESCRIPTION: Class definition for ChannelAgeGate that extends YTNode. The class manages age gate functionality for YouTube channels, including properties for avatar, channel title, header text, main text, sign-in button, and secondary text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelAgeGate.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelAgeGate extends YTNode {\n  static type = 'ChannelAgeGate';\n  channel_title: string;\n  avatar: Thumbnail[];\n  header: Text;\n  main_text: Text;\n  sign_in_button: null | Button;\n  secondary_text: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting as Method for Type Casting in YTNode TypeScript Base Class\nDESCRIPTION: Describes the inherited `as` method from the `YTNode` base class. This generic method allows casting the current node instance to one or more specified `YTNode` subtypes. It throws a runtime error if the node is not an instance of any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelHeader.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional 'actions' Property in SignalServiceEndpoint (TypeScript)\nDESCRIPTION: Declares an optional property `actions` within the `SignalServiceEndpoint` class. This property holds an `ObservedArray` of `YTNode` instances, representing actions associated with the signal service endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional actions: ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Inherited Type Property from YTNode in TypeScript\nDESCRIPTION: The readonly type property inherited from YTNode base class, which stores the type identifier of the node.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Dropdown.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n`readonly` type: string\n```\n\n----------------------------------------\n\nTITLE: PlaylistPanel Utility Methods in TypeScript\nDESCRIPTION: Helper methods inherited from YTNode for type checking and property access including as(), is(), hasKey() and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistPanel.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nhasKey<T extends string, R = any>(key: T): this is PlaylistPanel & { [k in string]: R };\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining StreamSelectionConfig Interface Properties in TypeScript\nDESCRIPTION: Defines stream selection configuration properties including maximum bitrate settings.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawPlayerConfig.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstreamSelectionConfig: {\n  maxBitrate: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods for Node Type Checking\nDESCRIPTION: Implementation of utility methods for type checking and key validation inherited from YTNode. These methods provide type-safe access to node properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicCardShelfHeaderBasic.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is MusicCardShelfHeaderBasic & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Methods in UpdateLiveChatPollAction Class\nDESCRIPTION: Methods inherited from the YTNode base class including as(), is(), hasKey(), and key() which provide type checking, casting, and property access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateLiveChatPollAction.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...`types`): `InstanceType`<`K`[`number`]>\n\nis<T, K>(...`types`): `this is InstanceType<K[number]>`\n\nhasKey<T, R>(`key`): `this is UpdateLiveChatPollAction & { [k in string]: R }`\n\nkey<T, R>(`key`): [`Maybe`](../../Helpers/classes/Maybe.md)\n```\n\n----------------------------------------\n\nTITLE: Defining AutomixPreviewVideo Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for AutomixPreviewVideo class that takes a RawNode data parameter and extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AutomixPreviewVideo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AutomixPreviewVideo(data: RawNode): AutomixPreviewVideo\n```\n\n----------------------------------------\n\nTITLE: Retrieving Node Key in TypeScript\nDESCRIPTION: Method to assert that a node has a given key and return its value wrapped in a Maybe object. It's a generic method that can handle different key types and return values.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining IBotguardChallenge TypeScript Interface for YouTube.js API Responses\nDESCRIPTION: TypeScript interface that defines the structure of a Botguard challenge response in YouTube.js. It includes properties for the interpreter URL (as a trusted resource), interpreter hash, program data, global name identifier, and client experiment state information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IBotguardChallenge.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IBotguardChallenge {\n    interpreter_url: ITrustedResource;\n    interpreter_hash: string;\n    program: string;\n    global_name: string;\n    client_experiments_state_blob: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Remove Cache Method Definition\nDESCRIPTION: Defines an asynchronous method to remove data from the cache by key.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/interfaces/ICache.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nremove(key: string): Promise<void>;\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatPlaceholderItem Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatPlaceholderItem class, which extends YTNode. It includes a constructor, properties for id and timestamp, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatPlaceholderItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatPlaceholderItem extends YTNode {\n  static type = 'LiveChatPlaceholderItem';\n\n  id: string;\n  timestamp: number;\n\n  constructor(data: RawNode) {\n    super();\n    this.id = data.id;\n    this.timestamp = data.timestamp;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining FeedbackContext Type Alias in TypeScript\nDESCRIPTION: A TypeScript type alias definition for the FeedbackContext object, which contains a single property 'cpn' of type string. This type is defined within CommandEndpoints.ts in the parser/types directory of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/FeedbackContext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **FeedbackContext**: `object`\n\n## Type declaration\n\n### cpn\n\n> **cpn**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining MusicQueue Class Constructor\nDESCRIPTION: Constructor implementation for MusicQueue class that takes RawNode data as input and extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicQueue.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MusicQueue(data: RawNode): MusicQueue\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods Implementation - TypeScript\nDESCRIPTION: Inherited helper methods from YTNode including type checking and key assertion functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelSwitcherHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is ChannelSwitcherHeader & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Clear Method Implementation\nDESCRIPTION: Method to clear the queue state.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/SmoothedQueue.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclear(): void\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatAuthorBadge Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatAuthorBadge class, which extends MetadataBadge. It includes a constructor, properties, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatAuthorBadge.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass LiveChatAuthorBadge extends MetadataBadge {\n  static type: string = 'LiveChatAuthorBadge';\n\n  custom_thumbnail: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super(data);\n    this.custom_thumbnail = Thumbnail.fromResponse(data.custom_thumbnail);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Definition - shouldIgnore TypeScript Parser Function\nDESCRIPTION: TypeScript function declaration that takes a classname string parameter and returns a boolean indicating if the class should be ignored during parsing. This is part of the Youtube.js parser implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/shouldIgnore.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nshouldIgnore(classname: string): boolean\n```\n\n----------------------------------------\n\nTITLE: Inherited 'hasKey' Property Check Method Signature (TypeScript)\nDESCRIPTION: Signature of the inherited `hasKey` method from `YTNode`. It checks if the `ShowLiveChatDialogAction` instance possesses a specific property key (passed as `key`). It returns a boolean and acts as a type guard, narrowing the type if the key exists.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatDialogAction.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is ShowLiveChatDialogAction & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Replying to a Comment in YouTube.js\nDESCRIPTION: Method to reply to a comment. It takes a string parameter for the reply text and returns a Promise that resolves to an ApiResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/CommentView.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nreply(comment_text: string): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Library Accessors - TypeScript\nDESCRIPTION: Getter methods for accessing library properties like filters, continuation status, sort options and page data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Library.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget filters(): string[]\nget has_continuation(): boolean\nget sort_options(): string[]\nget page(): IBrowseResponse\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'title' Property (TypeScript)\nDESCRIPTION: Defines the `title` property for the `SimpleCardContent` class, holding the main title text, typed as `Text`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods for YTNode in TypeScript\nDESCRIPTION: Methods inherited from the YTNode class including as(), hasKey(), is(), and key(). These methods provide utility functions for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactLink.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...types): InstanceType<K[number]>\nhasKey<T, R>(key): this is CompactLink & { [k in string]: R }\nis<T, K>(...types): this is InstanceType<K[number]>\nkey<T, R>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining PlaylistPrivacyStatus Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias called PlaylistPrivacyStatus. It represents the possible privacy settings for a YouTube playlist: PUBLIC, UNLISTED, or PRIVATE.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/PlaylistPrivacyStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype PlaylistPrivacyStatus = \"PUBLIC\" | \"UNLISTED\" | \"PRIVATE\"\n```\n\n----------------------------------------\n\nTITLE: Extending YTNode for RunAttestationCommand in TypeScript\nDESCRIPTION: This snippet demonstrates how the RunAttestationCommand class extends the YTNode base class, implementing specific properties and the constructor for YouTube command handling. It requires dependencies on the YTNode class, proper type aliases for RawNode and AttIds, and utilizes TypeScript's type system for safety and extensibility. The constructor expects a data parameter of type RawNode, and the class exposes both required and optional properties for engagement type and attestation identifiers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RunAttestationCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RunAttestationCommand extends YTNode {\n  // engagement_type: string;\n  // ids?: AttIds[];\n  // static type: string = 'RunAttestationCommand';\n  // readonly type: string;\n  \n  constructor(data: RawNode) {\n    super(data);\n    // ...initialize properties from data\n  }\n  // ...class methods inherited from YTNode\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining MobileTopbar Class in TypeScript\nDESCRIPTION: This code defines the MobileTopbar class, which extends YTNode. It includes properties for placeholder text, buttons, and an optional logo type. The constructor takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MobileTopbar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MobileTopbar extends YTNode {\n  static type = 'MobileTopbar';\n\n  placeholder_text: Text;\n  buttons: ObservedArray<YTNode>;\n  logo_type?: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.placeholder_text = new Text(data.searchPlaceholderText);\n    this.buttons = Parser.parseArray(data.buttons);\n    this.logo_type = data.logoType;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data for HomeFeed in TypeScript\nDESCRIPTION: This inherited method retrieves the raw continuation data as an IBrowseResponse or undefined.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining TranscriptSearchPanel Constructor in TypeScript\nDESCRIPTION: Constructor for the TranscriptSearchPanel class that takes a RawNode data parameter and returns a new TranscriptSearchPanel instance. It extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSearchPanel.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n**new TranscriptSearchPanel**(`data`): [`TranscriptSearchPanel`](TranscriptSearchPanel.md)\n```\n\n----------------------------------------\n\nTITLE: Library Class Constructor Implementation - TypeScript\nDESCRIPTION: Constructor for the Library class that takes actions and data parameters to initialize a new Library instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Library(actions: Actions, data: ApiResponse | IBrowseResponse): Library\n```\n\n----------------------------------------\n\nTITLE: Helper Methods Implementation in TypeScript\nDESCRIPTION: Implementation of inherited helper methods for type checking and key access, including is(), as(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ExpandedShelfContents.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ExpandedShelfContents & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Setting Static Type Property for CommentDialog Class\nDESCRIPTION: Definition of the static type property for the CommentDialog class, which overrides the type property from the parent YTNode class. This property is used for type identification within the YouTube.js parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentDialog.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'CommentDialog'\n```\n\n----------------------------------------\n\nTITLE: Inherited 'as' Method from YTNode (TypeScript)\nDESCRIPTION: Shows the signature of the `as` method, inherited from the `YTNode` base class. This method allows casting the current node instance to one of the specified `YTNode` subtypes, throwing an error if the cast is invalid. It accepts a variable number of `YTNodeConstructor` types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining SearchFilterGroup Filters Property in TypeScript\nDESCRIPTION: Declares the `filters` property for the `SearchFilterGroup` class. This property holds an `ObservedArray` containing instances of the `SearchFilter` class, representing the individual filters within the group.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nfilters: ObservedArray<SearchFilter>\n```\n\n----------------------------------------\n\nTITLE: Inherited 'key' Property Access Method for RichShelf in TypeScript\nDESCRIPTION: Documents the inherited `key` method from `YTNode`. This method asserts that a `RichShelf` instance has a given key and returns its value wrapped in a `Maybe` object, throwing an error if the key does not exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T, R>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Property for ThumbnailOverlayBadgeView in TypeScript\nDESCRIPTION: Static type property definition for the ThumbnailOverlayBadgeView class that identifies the node type. This property overrides the type property from the parent YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayBadgeView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic **type**: `string` = `'ThumbnailOverlayBadgeView'`\n```\n\n----------------------------------------\n\nTITLE: Inherited 'is' Method for Type Checking in TypeScript\nDESCRIPTION: Defines the inherited `is` method from `YTNode`. This method checks if the current node instance is of one of the specified `YTNode` types, returning a boolean.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Inheriting 'is' Type Checking Method in ReelPlayerHeader (TypeScript)\nDESCRIPTION: Documents the inherited `is` method from the `YTNode` base class. This generic utility method checks if the current `ReelPlayerHeader` instance is of one of the specified `YTNode` constructor types (`K`). It returns a boolean type predicate, useful for type guards.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerHeader.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T, K>(...types): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing YTNode Methods in TypeScript\nDESCRIPTION: This code snippet shows the implementation of inherited methods from YTNode, including as(), hasKey(), is(), and key(). These methods provide type checking and property access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelHeaderLinks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Implementation\n}\n\nhasKey<T extends string, R = any>(key: T): this is ChannelHeaderLinks & { [k in string]: R } {\n  // Implementation\n}\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Implementation\n}\n\nkey<T extends string, R = any>(key: T): Maybe {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Debug Function in TypeScript\nDESCRIPTION: This snippet defines the debug function signature in TypeScript. It accepts an optional tag parameter of type string and a variable number of additional arguments. The function returns void.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Log/functions/debug.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ndebug(tag?: string, ...args?: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining the Title Property for SettingsCheckbox in TypeScript\nDESCRIPTION: Declares the `title` property for the `SettingsCheckbox` class, typed as a `Text` object. This property stores the primary label or title displayed next to the checkbox setting, parsed into a structured `Text` representation. It depends on the `Text` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Implementing Contents Accessor\nDESCRIPTION: Getter method that provides access to the carousel items array as an ObservedArray of YTNodes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselItem.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget contents(): ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader 'second_subtitle' Property in TypeScript\nDESCRIPTION: Declares the `second_subtitle` property for the `MusicResponsiveHeader` class. It holds a `Text` object representing the secondary subtitle text displayed in the header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsecond_subtitle: Text\n```\n\n----------------------------------------\n\nTITLE: Implementing WatchCardRichHeader Class in TypeScript\nDESCRIPTION: The WatchCardRichHeader class extends the YTNode base class and defines properties for YouTube's watch card rich headers. It includes title, subtitle, author, and navigation endpoint properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchCardRichHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass WatchCardRichHeader extends YTNode {\n  static type = 'WatchCardRichHeader';\n\n  title: Text;\n  title_endpoint: NavigationEndpoint;\n  subtitle: Text;\n  author: Author;\n  style: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for ModalWithTitleAndButton\nDESCRIPTION: Constructor that initializes a new ModalWithTitleAndButton instance with provided data parameter\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ModalWithTitleAndButton.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew ModalWithTitleAndButton(data: RawNode): ModalWithTitleAndButton\n```\n\n----------------------------------------\n\nTITLE: Defining BumperUserEduContentView Class in TypeScript\nDESCRIPTION: Class definition for BumperUserEduContentView that extends YTNode. It handles bumper user education content with properties for text, image name, and image color. Includes constructor and inherited methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BumperUserEduContentView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass BumperUserEduContentView extends YTNode {\n  static type = 'BumperUserEduContentView';\n  text: Text;\n  image_name: string;\n  image_color: number;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing SearchSubMenu Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `SearchSubMenu` class. It accepts raw node data (`data` of type `RawNode`) and initializes a new `SearchSubMenu` instance based on that data. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew SearchSubMenu(data: RawNode): SearchSubMenu\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods Implementation in TypeScript\nDESCRIPTION: Helper methods inherited from YTNode class: as() for type casting, is() for type checking, hasKey() for property existence checking, and key() for safe property access with Maybe wrapper.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UnifiedSharePanel.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is UnifiedSharePanel & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Action Group Enqueuing Method\nDESCRIPTION: Method to add a group of YTNode actions to the queue.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/SmoothedQueue.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nenqueueActionGroup(group: YTNode[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining ShowDialogCommand Node - TypeScript\nDESCRIPTION: Defines the ShowDialogCommand class inheriting from YTNode, modeling a dialog command node within the YouTube internal API parser. Dependencies include the YTNode base class and type definitions for RawNode. Main parameters cover the raw node data required for instantiation, with properties supporting inline content and padding options. Outputs are class instances with type casting and property checking methods, intended for internal use within a node parser hierarchy.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowDialogCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ShowDialogCommand extends YTNode {\n  static type = 'ShowDialogCommand';\n  inline_content: YTNode | null;\n  remove_default_padding: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details here\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining MiscInferenceType Union Type in TypeScript\nDESCRIPTION: Type alias declaration for MiscInferenceType that represents a union of four different object types. Located in the parser generator module at line 15.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/type-aliases/MiscInferenceType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MiscInferenceType = object | object | object | object\n```\n\n----------------------------------------\n\nTITLE: Library Properties - TypeScript\nDESCRIPTION: Core properties of the Library class including optional contents array containing MusicShelf or Grid items, and an optional header of type MusicSideAlignedItem.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Library.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents?: ObservedArray<MusicShelf | Grid>\nheader?: MusicSideAlignedItem\n```\n\n----------------------------------------\n\nTITLE: Defining static type Property in SharePanelHeader TypeScript Class\nDESCRIPTION: Defines a static `type` property specifically for the `SharePanelHeader` class, assigning it the constant string value 'SharePanelHeader'. This property is used for identifying nodes of this specific type and overrides the static `type` property from the base `YTNode` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SharePanelHeader'\n```\n\n----------------------------------------\n\nTITLE: Adding Video to Watch History in MediaInfo Class\nDESCRIPTION: This inherited method adds a video to the user's watch history. It accepts client name, version, and URL replacement parameters, and returns a Promise that resolves to a Response object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\naddToWatchHistory(client_name: string = Constants.CLIENTS.WEB.NAME, client_version: string = Constants.CLIENTS.WEB.VERSION, replacement: string = 'https://www.'): Promise<Response>\n```\n\n----------------------------------------\n\nTITLE: Implementing YTNode Methods in UpdateEngagementPanelAction Class\nDESCRIPTION: Implementation of inherited methods from YTNode including as(), is(), hasKey(), and key() for type checking and accessing properties safely within the node structure.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateEngagementPanelAction.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is UpdateEngagementPanelAction & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining Supported Clients Array in TypeScript\nDESCRIPTION: Declares a constant array containing supported client identifiers for YouTube API integration. The constant is defined in the Constants.ts file at line 120.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Constants/variables/SUPPORTED_CLIENTS.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst SUPPORTED_CLIENTS: string[]\n```\n\n----------------------------------------\n\nTITLE: Logging Info Function Definition in TypeScript\nDESCRIPTION: Function signature for an info-level logging utility that accepts an optional tag string and variable arguments. The function returns void and is used for logging information messages within the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Log/functions/info.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninfo(tag?: string, ...args?: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Property Access Utility Methods in YTNode\nDESCRIPTION: Methods inherited from YTNode to safely check for and access properties on node objects, providing a more robust way to interact with YouTube API response data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key): this is CommentsHeader & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataScreen Class in TypeScript\nDESCRIPTION: Defines the MetadataScreen class that extends YTNode. It includes a constructor, a section_list property, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataScreen.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MetadataScreen extends YTNode {\n  static type = 'MetadataScreen';\n\n  section_list: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    this.section_list = Parser.parseItem(data.sectionListRenderer, YTNode);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Dropdown Class Constructor in TypeScript\nDESCRIPTION: Constructor for the Dropdown class that takes RawNode data as input and returns a Dropdown instance. It extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Dropdown.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Dropdown(`data`): [`Dropdown`](Dropdown.md)\n```\n\n----------------------------------------\n\nTITLE: Inherited 'hasKey' Method from YTNode (TypeScript)\nDESCRIPTION: Shows the signature of the `hasKey` method, inherited from the `YTNode` base class. This method checks if the node instance possesses a specific key, returning a boolean type predicate without asserting the type of the key's value. It's useful for safe property checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SimpleTextSection & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data in YouTube.js Feed Class\nDESCRIPTION: This method retrieves continuation data as it is. It returns a Promise that resolves to either undefined or an ISearchResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Search.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | ISearchResponse>\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation - ChipView Class TypeScript\nDESCRIPTION: Constructor for ChipView class that takes a RawNode data parameter and returns a new ChipView instance. Extends the base YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChipView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ChipView(data: RawNode): ChipView\n```\n\n----------------------------------------\n\nTITLE: Getting Tab by Name - TypeScript Method\nDESCRIPTION: Method to retrieve a tab from a TabbedFeed by its title name. Returns a Promise resolving to a TabbedFeed instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/TabbedFeed.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetTabByName(title: string): Promise<TabbedFeed<T>>\n```\n\n----------------------------------------\n\nTITLE: EmojiRun toString Method - TypeScript\nDESCRIPTION: Implementation of the toString method from the Run interface that converts the emoji run to a string representation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/EmojiRun.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel Filters and Content Type Filters in TypeScript\nDESCRIPTION: This code snippet shows the implementation of getter methods for channel filters and content type filters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget filters(): string[] {\n  return this.memo.getType('filters', () => {\n    const filter_chips = this.page.contents?.twoColumnBrowseResultsRenderer?.tabs?.find((tab) => tab.tabRenderer?.selected)?.tabRenderer?.content?.sectionListRenderer?.subMenu?.channelSubMenuRenderer?.filterChipBar?.filterChipBarRenderer?.chips;\n    return filter_chips?.map((chip) => chip.filterChipRenderer?.label?.simpleText) || [];\n  });\n}\n\nget content_type_filters(): string[] {\n  return this.memo.getType('content_type_filters', () => {\n    const filter_chips = this.page.contents?.twoColumnBrowseResultsRenderer?.tabs?.find((tab) => tab.tabRenderer?.selected)?.tabRenderer?.content?.sectionListRenderer?.subMenu?.channelSubMenuRenderer?.contentTypeSubMenuItems;\n    return filter_chips?.map((chip) => chip.title) || [];\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static type Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines a static `type` property on the `SlimVideoMetadata` class, initialized to the string 'SlimVideoMetadata'. This overrides the static `type` property from the base `YTNode` class and serves as a class-level type identifier.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SlimVideoMetadata'\n```\n\n----------------------------------------\n\nTITLE: LikeEndpoint Static Type Definition\nDESCRIPTION: Static type property definition that identifies this endpoint type\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'LikeEndpoint'\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'call_to_action' Property (TypeScript)\nDESCRIPTION: Defines the `call_to_action` property for the `SimpleCardContent` class, which holds text content representing a call to action, typed as `Text`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncall_to_action: Text\n```\n\n----------------------------------------\n\nTITLE: Defining MusicSearchFilters Type in TypeScript\nDESCRIPTION: TypeScript type declaration that specifies an optional 'type' property which references MusicSearchType. Used for filtering music search results in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/MusicSearchFilters.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype MusicSearchFilters = {\n    type?: MusicSearchType;\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods for Node Type Checking in TypeScript\nDESCRIPTION: Methods inherited from YTNode that provide type checking functionality, including as(), is(), hasKey(), and key() methods for working with node types and properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HighlightsCarousel.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...types): InstanceType<K[number]>\nis<T, K>(...types): this is InstanceType<K[number]>\nhasKey<T, R>(key): this is HighlightsCarousel & { [k in string]: R }\nkey<T, R>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: YTNode Base Class Methods Implementation\nDESCRIPTION: Implementation of inherited methods from YTNode base class including type checking and key assertion utilities.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicInlineBadge.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is MusicInlineBadge & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: ChipCloudChip Helper Methods\nDESCRIPTION: Inherited helper methods from YTNode class including type checking (is), type casting (as), and property access (hasKey, key) methods. These utilities help with type safety and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChipCloudChip.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ChipCloudChip & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining CommentActionParamsArgs Type Alias in TypeScript\nDESCRIPTION: This type alias defines the structure for comment action parameters, including fields like videoId, channelId, and commentId.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/README.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CommentActionParamsArgs = {\n  videoId: string;\n  channelId: string;\n  commentId: string;\n  // ... other fields\n};\n```\n\n----------------------------------------\n\nTITLE: Playlist Class Properties Declaration\nDESCRIPTION: TypeScript property declarations for the Playlist class, defining the structure and types of playlist metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Playlist.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nid: string;\ntitle: Text;\nauthor: Text | Author;\nthumbnails: Thumbnail[];\nthumbnail_renderer?: PlaylistCustomThumbnail | PlaylistVideoThumbnail;\nvideo_count: Text;\nvideo_count_short: Text;\nfirst_videos: ObservedArray<YTNode>;\nshare_url: null | string;\nmenu: YTNode;\nbadges: ObservedArray<YTNode>;\nendpoint: NavigationEndpoint;\nthumbnail_overlays: ObservedArray<YTNode>;\nview_playlist?: Text;\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Property in TypeScript\nDESCRIPTION: Static and readonly type property declarations for the BrowseEndpoint class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BrowseEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'BrowseEndpoint';\nreadonly type: string;\n```\n\n----------------------------------------\n\nTITLE: Helper Methods Implementation in TypeScript\nDESCRIPTION: Implementation of helper methods including type checking (is), type casting (as), and property access (hasKey, key) for the MusicCarouselShelf class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicCarouselShelf.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is MusicCarouselShelf & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: TextRun Class Constructor Definition\nDESCRIPTION: Constructor for the TextRun class that accepts a RawNode data parameter and returns a new TextRun instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/TextRun.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew TextRun(data): TextRun\n```\n\n----------------------------------------\n\nTITLE: Removing Cached Data in UniversalCache\nDESCRIPTION: Method for removing data from the cache using a string key. Returns a Promise that resolves when the removal is complete. This method implements the remove method from the ICache interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/UniversalCache.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nremove(key): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateLiveChatPollAction Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the UpdateLiveChatPollAction class that extends YTNode. It accepts a RawNode data parameter and initializes the class instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateLiveChatPollAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew UpdateLiveChatPollAction(`data`): [`UpdateLiveChatPollAction`](UpdateLiveChatPollAction.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods in TypeScript\nDESCRIPTION: Implementation of utility methods for type checking and property access including as(), is(), hasKey(), and key() methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DropdownView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is DropdownView & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Callback Accessor Implementation\nDESCRIPTION: Getter and setter for the callback function that handles actions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/SmoothedQueue.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nget callback(): null | (actions) => void\nset callback(cb: null | (actions) => void): void\n```\n\n----------------------------------------\n\nTITLE: Defining TopbarMenuButton Class Properties in TypeScript\nDESCRIPTION: Declaration of properties for the TopbarMenuButton class, including optional icon_type, menu_renderer, and target_id. The class extends YTNode and has a static type property set to 'TopbarMenuButton'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TopbarMenuButton.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype: static type: string = 'TopbarMenuButton'\n\nicon_type?: optional string\n\nmenu_renderer: null | YTNode\n\ntarget_id: string\n```\n\n----------------------------------------\n\nTITLE: Getting Videos from Memo in YouTube.js Feed Class\nDESCRIPTION: This static method retrieves all videos on a given page via memo. It takes a Memo object as a parameter and returns an ObservedArray of various video-related objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Search.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Defining the Inherited Instance Type Property in YTNode (TypeScript)\nDESCRIPTION: Shows the definition of the readonly instance property `type` inherited from the base `YTNode` class. This property holds the string name of the node's type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string;\n```\n\n----------------------------------------\n\nTITLE: Defining the Inherited Readonly 'type' Property in YTNode (TypeScript)\nDESCRIPTION: Shows the inherited readonly instance property `type` from the base `YTNode` class. This property holds the specific type name of the node instance as a string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Getting Recap Information in TypeScript\nDESCRIPTION: Method to fetch recap data from YouTube Music.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ngetRecap(): Promise<Recap>\n```\n\n----------------------------------------\n\nTITLE: Defining Artist Class Constructor in TypeScript\nDESCRIPTION: Defines the constructor for the Artist class, which takes an API response and actions as parameters. It initializes the class properties including header and sections.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Artist.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Artist(response: ApiResponse, actions: Actions): Artist\n```\n\n----------------------------------------\n\nTITLE: Defining DropdownView Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the DropdownView class that takes a RawNode data parameter and initializes a new DropdownView instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DropdownView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew DropdownView(data: RawNode): DropdownView\n```\n\n----------------------------------------\n\nTITLE: PlaylistEditEndpoint Constructor\nDESCRIPTION: Constructor for PlaylistEditEndpoint class that takes a RawNode data parameter and returns a new instance\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistEditEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PlaylistEditEndpoint(data: RawNode): PlaylistEditEndpoint\n```\n\n----------------------------------------\n\nTITLE: YTNode Inherited Methods in FancyDismissibleDialog\nDESCRIPTION: Methods inherited from the YTNode class including type checking (is), type casting (as), and property access (hasKey, key) methods. These utility methods help in working with YouTube.js node objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FancyDismissibleDialog.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is FancyDismissibleDialog & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing KidsCategoryTab Constructor in TypeScript\nDESCRIPTION: The constructor for KidsCategoryTab that accepts raw node data and passes it to the parent YTNode class. It's defined at line 17 in the KidsCategoryTab.ts file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsCategoryTab.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew KidsCategoryTab(data): KidsCategoryTab\n```\n\n----------------------------------------\n\nTITLE: Initializing Recap Class in TypeScript\nDESCRIPTION: Constructor for the Recap class. It takes response and actions parameters to initialize the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Recap.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew Recap(response: ApiResponse, actions: Actions): Recap\n```\n\n----------------------------------------\n\nTITLE: Implementing getApiPath Method in TypeScript\nDESCRIPTION: Method implementation that returns the API path string for the browse endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BrowseEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiPath(): string\n```\n\n----------------------------------------\n\nTITLE: LockupView Constructor Implementation in TypeScript\nDESCRIPTION: Constructor implementation for the LockupView class that takes a RawNode data parameter and returns a new LockupView instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LockupView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew LockupView(data: RawNode): LockupView\n```\n\n----------------------------------------\n\nTITLE: Finding Shelf by Title in YouTube Channel\nDESCRIPTION: This method finds a shelf by its title in the channel feed. It returns either undefined or a ReelShelf, RichShelf, or Shelf object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for RemoveBannerForLiveChatCommand in TypeScript\nDESCRIPTION: Defines the properties of the `RemoveBannerForLiveChatCommand` class. `target_action_id` is a string identifying the specific action or banner to be removed. The static `type` property serves as a unique identifier for this class type within the parser system, overriding the base class definition. The readonly instance `type` property is inherited from `YTNode`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveBannerForLiveChatCommand.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntarget_action_id: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'RemoveBannerForLiveChatCommand'\n```\n\n----------------------------------------\n\nTITLE: Defining the Static 'type' Property in SearchSuggestion Class (TypeScript)\nDESCRIPTION: Defines a static `type` property for the `SearchSuggestion` class, identifying nodes of this type with the string 'SearchSuggestion'. This overrides the static `type` property inherited from `YTNode`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSuggestion.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SearchSuggestion'\n```\n\n----------------------------------------\n\nTITLE: TypeScript Parameter Validation Function Definition\nDESCRIPTION: Function signature for throwIfMissing that takes an object parameter and returns void. This function is likely used to validate required parameters and throw errors if they're missing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/throwIfMissing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nthrowIfMissing(params: object): void\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of type checking methods including is() and as() for type verification and casting. These methods allow for runtime type checking of ProductList instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProductList.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Methods from YTNode in TypeScript\nDESCRIPTION: Methods inherited from the YTNode base class, including type checking (is), type casting (as), and property access methods (hasKey, key).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchCardCompactVideo.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...`types`): `InstanceType`<`K`[`number`]>\nis<T, K>(...`types`): `this is InstanceType<K[number]>`\nhasKey<T, R>(`key`): `this is WatchCardCompactVideo & { [k in string]: R }`\nkey<T, R>(`key`): [`Maybe`](../../Helpers/classes/Maybe.md)\n```\n\n----------------------------------------\n\nTITLE: Method Implementation - is<T, K>\nDESCRIPTION: Type guard method to check if the node is of specified type(s).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatItemBumperView.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Youtube.js Misc Classes Index\nDESCRIPTION: Index listing of available classes in the miscellaneous section of Youtube.js documentation, including classes for handling authors, child elements, emoji runs, text formatting, rendering contexts, and video details.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Classes\n\n- [Author](classes/Author.md)\n- [ChildElement](classes/ChildElement.md)\n- [EmojiRun](classes/EmojiRun.md)\n- [Format](classes/Format.md)\n- [RendererContext](classes/RendererContext.md)\n- [Text](classes/Text.md)\n- [TextRun](classes/TextRun.md)\n- [Thumbnail](classes/Thumbnail.md)\n- [VideoDetails](classes/VideoDetails.md)\n```\n\n----------------------------------------\n\nTITLE: FilteredChannelList Properties Definition\nDESCRIPTION: Class properties including optional applied filter and contents for managing channel list state.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/FilteredChannelList.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\napplied_filter?: ChipCloudChip;\ncontents?: AppendContinuationItemsAction | OpenPopupAction | NavigateAction | ShowMiniplayerCommand | ReloadContinuationItemsCommand;\n```\n\n----------------------------------------\n\nTITLE: Defining MenuNavigationItem Class in TypeScript\nDESCRIPTION: This code defines the MenuNavigationItem class, which extends the Button class. It includes a constructor that takes a RawNode parameter and sets the static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MenuNavigationItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MenuNavigationItem extends Button {\n  static type = 'MenuNavigationItem';\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: YTNode Inherited Methods in TypeScript\nDESCRIPTION: Methods inherited from the YTNode base class including type checking (is), type casting (as), key checking (hasKey), and value retrieval (key).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is VideoDescriptionHeader & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking Methods in TypeScript\nDESCRIPTION: Methods for type checking and key validation including as(), is(), hasKey(), and key() implementations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProfileColumn.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is ProfileColumn & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining ExpandableMetadata Class Constructor - TypeScript\nDESCRIPTION: Constructor for the ExpandableMetadata class that takes a RawNode data parameter and initializes an instance of ExpandableMetadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ExpandableMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ExpandableMetadata(data: RawNode): ExpandableMetadata\n```\n\n----------------------------------------\n\nTITLE: ThumbnailOverlayInlineUnplayable Method 'as' in TypeScript\nDESCRIPTION: Method for casting the node to one of the given types. It takes type parameters and returns an instance of the specified type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayInlineUnplayable.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing Badges Property in ThumbnailOverlayBadgeView Class\nDESCRIPTION: Property definition for badges in the ThumbnailOverlayBadgeView class. It stores an array of ThumbnailBadgeView objects that represent the badges displayed on a thumbnail.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayBadgeView.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nbadges: [`ThumbnailBadgeView`](ThumbnailBadgeView.md)[]\n```\n\n----------------------------------------\n\nTITLE: Constructing RichMetadata Instance in TypeScript\nDESCRIPTION: Creates a new instance of the `RichMetadata` class. This constructor takes raw node data (`RawNode`) as input and initializes the `RichMetadata` object. It overrides the constructor of the base `YTNode` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RichMetadata(data: RawNode): RichMetadata\n```\n\n----------------------------------------\n\nTITLE: AddToPlaylistCommand Helper Methods\nDESCRIPTION: Implementation of inherited helper methods for type checking and property access including is(), as(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddToPlaylistCommand.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is AddToPlaylistCommand & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Inherited 'is' Type Checking Method Signature (TypeScript)\nDESCRIPTION: Signature of the inherited `is` method from `YTNode`. It checks if the current `ShowLiveChatDialogAction` instance is of one of the specified `YTNode` subtypes (passed as arguments). It returns a boolean and acts as a type guard.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatDialogAction.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing TopbarMenuButton Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the TopbarMenuButton class that takes a RawNode data parameter and calls the parent YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TopbarMenuButton.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew TopbarMenuButton(data: RawNode): TopbarMenuButton\n```\n\n----------------------------------------\n\nTITLE: Applying Filter to FilteredChannelList in TypeScript\nDESCRIPTION: This method applies a given filter to the list and returns a Promise of a new FilteredChannelList.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/FilteredChannelList.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\napplyFilter(filter: string | ChipCloudChip): Promise<FilteredChannelList>\n```\n\n----------------------------------------\n\nTITLE: Defining static type Property in RichMetadata (TypeScript)\nDESCRIPTION: Defines a static `type` property on the `RichMetadata` class itself, set to the string 'RichMetadata'. This overrides the static `type` property from the base `YTNode` class and serves as a type identifier for the class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'RichMetadata'\n```\n\n----------------------------------------\n\nTITLE: Inheriting Readonly Type Property in ReelPlayerHeader (TypeScript)\nDESCRIPTION: Shows the inherited readonly `type` property from the base `YTNode` class. This property holds the specific type name of the node instance, dynamically assigned by the base class or parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Accessing Cache Directory in UniversalCache\nDESCRIPTION: Getter method for retrieving the cache directory path. This method implements the cache_dir property from the ICache interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/UniversalCache.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nget cache_dir(): string\n```\n\n----------------------------------------\n\nTITLE: Type Casting ShareEndpoint Instances in TypeScript (Inherited)\nDESCRIPTION: Signature for the inherited `as` method. This utility method allows casting the current node instance (ShareEndpoint) to one of the specified `YTNode` constructor types. It throws an error if the node is not an instance of any of the provided types. Implementation inherited from `ShareEntityServiceEndpoint` via helpers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEndpoint.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T, K>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining MetadataRow Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the MetadataRow class that extends YTNode. Takes a RawNode data parameter and initializes the metadata row structure.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataRow.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MetadataRow(data): MetadataRow\n```\n\n----------------------------------------\n\nTITLE: Defining the refinements property in RawResponse TypeScript interface\nDESCRIPTION: Optional property definition for 'refinements' in the RawResponse interface. This property is an array of strings and is defined in the RawResponse.ts file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **refinements**: `string`[]\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2AuthErrorEventHandler Type in TypeScript\nDESCRIPTION: This code snippet defines a type alias for OAuth2AuthErrorEventHandler. It's a function type that takes an OAuth2Error object as its parameter and returns void. This type is likely used for handling authentication errors in an OAuth2 implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/OAuth2AuthErrorEventHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OAuth2AuthErrorEventHandler = (err: OAuth2Error) => void;\n```\n\n----------------------------------------\n\nTITLE: Constructing ThumbnailOverlayInlineUnplayable in TypeScript\nDESCRIPTION: Constructor for the ThumbnailOverlayInlineUnplayable class that takes a RawNode data parameter and returns a new instance of the class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayInlineUnplayable.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThumbnailOverlayInlineUnplayable(data): ThumbnailOverlayInlineUnplayable\n```\n\n----------------------------------------\n\nTITLE: Initializing Author Class Constructor in TypeScript\nDESCRIPTION: Constructor for creating new Author instances. Takes required item parameter of type RawNode and optional parameters for badges, thumbnails, and ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Author.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Author(item: RawNode, badges?: any, thumbs?: any, id?: string): Author\n```\n\n----------------------------------------\n\nTITLE: Initializing SortFilterSubMenu Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `SortFilterSubMenu` class, which extends `YTNode`. It accepts raw node data (`RawNode`) representing the submenu structure from the API response and returns an instance of `SortFilterSubMenu`. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterSubMenu.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew SortFilterSubMenu(data: RawNode): SortFilterSubMenu\n```\n\n----------------------------------------\n\nTITLE: Inherited 'key' Method for Property Access in TypeScript\nDESCRIPTION: Defines the inherited `key` method from `YTNode`. This method asserts that the node instance has a specific key and returns its value wrapped in a `Maybe` object, throwing an error if the key does not exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Defining GetMultiPageMenuAction Class in TypeScript\nDESCRIPTION: This code defines the GetMultiPageMenuAction class, which extends YTNode. It includes a constructor, a 'menu' property, and a static 'type' property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GetMultiPageMenuAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass GetMultiPageMenuAction extends YTNode {\n  static type = 'GetMultiPageMenuAction';\n\n  menu: null | MultiPageMenu;\n\n  constructor(data: RawNode) {\n    super();\n    this.menu = Parser.parseItem(data.multiPageMenuRenderer, MultiPageMenu);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring date Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `date` property for the `SlimVideoMetadata` class. It is of type `Text`, presumably holding the publication date or relevant date information associated with the video.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndate: Text\n```\n\n----------------------------------------\n\nTITLE: Defining Properties for SingleActionEmergencySupport in TypeScript\nDESCRIPTION: Declares instance properties for the `SingleActionEmergencySupport` class: `action_text`, `nav_text`, `details` (all of type Text), `icon_type` (string), and `endpoint` (NavigationEndpoint). These properties store parsed data related to the emergency support element.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleActionEmergencySupport.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naction_text: Text;\nnav_text: Text;\ndetails: Text;\nicon_type: string;\nendpoint: NavigationEndpoint;\n```\n\n----------------------------------------\n\nTITLE: Declaring ThumbnailBadgeView Properties in TypeScript\nDESCRIPTION: Definition of the ThumbnailBadgeView class properties, including icon_name, text, badge_style, and background_color with theme variants. These properties store the visual elements of thumbnail badges.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailBadgeView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nicon_name?: string\ntext: string\nbadge_style: string\nbackground_color?: {\n  dark_theme: number\n  light_theme: number\n}\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods for Type Checking and Access in TypeScript\nDESCRIPTION: Inherited methods from YTNode class that provide type checking (is, as), key checking (hasKey), and safe property access (key) functionality for the GridMovie class instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridMovie.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key): this is GridMovie & { [k in string]: R }\n\nkey<T extends string, R = any>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inheriting Methods from YTNode in TypeScript\nDESCRIPTION: Methods inherited from the YTNode class including as(), is(), hasKey(), and key() for type checking and property access within the TranscriptSearchPanel class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSearchPanel.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is TranscriptSearchPanel & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Class Properties Definition in TypeScript\nDESCRIPTION: Definition of class properties including duration_sec and item, along with inherited type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddLiveChatTickerItemAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nduration_sec: string;\nitem: YTNode;\nreadonly type: string;\nstatic type: string = 'AddLiveChatTickerItemAction';\n```\n\n----------------------------------------\n\nTITLE: iOS Client Support Addition\nDESCRIPTION: Added support for iOS client type in Session management and video information retrieval.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nenum ClientType {\n  IOS // New addition\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing PlaylistManager Constructor in TypeScript\nDESCRIPTION: Constructor for the PlaylistManager class that takes an Actions parameter to initialize playlist management functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/PlaylistManager.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PlaylistManager(actions: Actions): PlaylistManager\n```\n\n----------------------------------------\n\nTITLE: Class Properties Definition for InfoPanelContainer in TypeScript\nDESCRIPTION: Property definitions for the InfoPanelContainer class showing its structure including title, menu, content, header_endpoint, background, title_style, icon_type, and inherited type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/InfoPanelContainer.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: [`Text`](../../Misc/classes/Text.md)\n\nmenu: null | [`Menu`](Menu.md)\n\ncontent: null | [`InfoPanelContent`](InfoPanelContent.md)\n\nheader_endpoint?: [`NavigationEndpoint`](NavigationEndpoint.md)\n\nbackground: string\n\ntitle_style?: string\n\nicon_type?: string\n\ntype: readonly string\n\nstatic type: string = 'InfoPanelContainer'\n```\n\n----------------------------------------\n\nTITLE: EngagementPanelSectionList Constructor Implementation in TypeScript\nDESCRIPTION: Constructor method for the EngagementPanelSectionList class that accepts a RawNode data parameter and returns a new instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EngagementPanelSectionList.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew EngagementPanelSectionList(data): EngagementPanelSectionList\n```\n\n----------------------------------------\n\nTITLE: Defining Tabs Property in TabbedSearchResults Class\nDESCRIPTION: Declaration of the 'tabs' property which is an ObservedArray of Tab instances. This property stores the different search result tabs available from a YouTube search.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TabbedSearchResults.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntabs: ObservedArray<Tab>\n```\n\n----------------------------------------\n\nTITLE: PlayerLiveStoryboardSpec Class Definition - TypeScript\nDESCRIPTION: Class definition for PlayerLiveStoryboardSpec that extends YTNode. Contains constructor, properties and inherited methods for handling live storyboard data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerLiveStoryboardSpec.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlayerLiveStoryboardSpec extends YTNode {\n  static type = 'PlayerLiveStoryboardSpec';\n  board: LiveStoryboardData;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  // Inherited methods\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is PlayerLiveStoryboardSpec & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicCardShelfHeaderBasic Class in TypeScript\nDESCRIPTION: Class definition for MusicCardShelfHeaderBasic that extends YTNode. It includes a constructor that takes RawNode data and implements properties for title and type handling.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicCardShelfHeaderBasic.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicCardShelfHeaderBasic extends YTNode {\n  static type = 'MusicCardShelfHeaderBasic';\n  title: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Utility Methods in TypeScript\nDESCRIPTION: Inherited utility methods from YTNode for type checking and property access including as(), is(), hasKey(), and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AutomixPreviewVideo.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is AutomixPreviewVideo & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Checking Node Type with is() Method in YTNode (TypeScript)\nDESCRIPTION: Defines the generic `is` method, inherited from `YTNode`. It checks if the current node instance is of one of the specified YTNode constructor types, returning a boolean type predicate.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalAction.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: GameCard Type Definition and Methods\nDESCRIPTION: Inherited methods and type definitions for the GameCard class including as(), is(), hasKey(), and key() methods for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GameCard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is GameCard & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Fetching Tab by Name in YouTube Channel\nDESCRIPTION: This method retrieves a tab by its name. It returns a Promise that resolves to a TabbedFeed object containing the tab data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetTabByName(title: string): Promise<TabbedFeed<IBrowseResponse>>\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of type checking and assertion methods inherited from YTNode including is(), as(), hasKey() and key() for type safety.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatMessageInput.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is LiveChatMessageInput & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Inheriting readonly type Property in RichMetadata (TypeScript)\nDESCRIPTION: The `RichMetadata` class inherits a readonly `type` property of type `string` from its base class `YTNode`. This property typically holds the specific type name of the node as defined in the base class implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Stack Trace Capture Method Implementation\nDESCRIPTION: Static method to create a stack property on a target object, with an optional constructor parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/ChannelError.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic captureStackTrace(targetObject: object, constructorOpt?: Function): void\n```\n\n----------------------------------------\n\nTITLE: Defining AddToPlaylistEndpoint Class in TypeScript\nDESCRIPTION: This code snippet defines the AddToPlaylistEndpoint class, which extends AddToPlaylistServiceEndpoint. It includes a constructor that takes a RawNode parameter and sets the static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddToPlaylistEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass AddToPlaylistEndpoint extends AddToPlaylistServiceEndpoint {\n  static type = 'AddToPlaylistEndpoint';\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ChipCloud Helper Methods Implementation\nDESCRIPTION: Implementation of inherited helper methods from YTNode including type checking and key access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChipCloud.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ChipCloud & { [k in string]: R };\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Constructing ShareEndpoint Instances in TypeScript\nDESCRIPTION: Defines the constructor for the `ShareEndpoint` class. It accepts raw node data (`RawNode`) and returns a new instance of `ShareEndpoint`. This constructor overrides the constructor from the base class `ShareEntityServiceEndpoint`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEndpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ShareEndpoint(data: RawNode): ShareEndpoint\n```\n\n----------------------------------------\n\nTITLE: ThumbnailOverlayInlineUnplayable Instance Properties in TypeScript\nDESCRIPTION: Instance properties of the ThumbnailOverlayInlineUnplayable class including text and icon_type that represent display information for unplayable video thumbnails.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayInlineUnplayable.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntext: string\nicon_type: string\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateChannelSwitcherPageAction Class in TypeScript\nDESCRIPTION: This snippet defines the UpdateChannelSwitcherPageAction class which extends YTNode. It includes constructor, properties for header and contents, static type definition, and inherits methods like as(), is(), hasKey(), and key() from the parent class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateChannelSwitcherPageAction.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass UpdateChannelSwitcherPageAction extends YTNode {\n  static type = 'UpdateChannelSwitcherPageAction';\n\n  header?: YTNode;\n  contents?: null | ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: MultiPageMenu Helper Methods - TypeScript\nDESCRIPTION: Implementation of utility methods for type checking and property access including as(), hasKey(), is(), and key() methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiPageMenu.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\nhasKey<T extends string, R = any>(key: T): this is MultiPageMenu & { [k in string]: R };\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Finding Shelf by Title in TypeScript\nDESCRIPTION: Method to find a specific shelf by its title. Returns either undefined or one of several shelf types (ReelShelf, RichShelf, or Shelf).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ChannelListContinuation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Inheriting Readonly Type Property from YTNode in TypeScript\nDESCRIPTION: Shows the inherited `type` property from the base `YTNode` class. This is a readonly string property used to identify the type of the node instance at runtime. Its value is determined by the specific class implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Static 'type' Property for ShowLiveChatDialogAction (TypeScript)\nDESCRIPTION: Defines a static `type` property for the `ShowLiveChatDialogAction` class, overriding the base class property. It holds the string identifier 'ShowLiveChatDialogAction', used internally by the parser for identifying and mapping raw data to this class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatDialogAction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'ShowLiveChatDialogAction'\n```\n\n----------------------------------------\n\nTITLE: Defining CpnSource Type Alias in TypeScript for YouTube API\nDESCRIPTION: This code snippet defines a type alias called CpnSource which can be either 'CPN_SOURCE_TYPE_CLIENT' or 'CPN_SOURCE_TYPE_WATCH_SERVER'. This is likely used to indicate the origin of the Client Playback Nonce in YouTube API responses.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/CpnSource.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CpnSource = \"CPN_SOURCE_TYPE_CLIENT\" | \"CPN_SOURCE_TYPE_WATCH_SERVER\";\n```\n\n----------------------------------------\n\nTITLE: Defining Contents Property for RichMetadataRow in TypeScript\nDESCRIPTION: Declares the `contents` property for the `RichMetadataRow` class. This property holds an `ObservedArray` containing instances of `YTNode`, representing the parsed content within the rich metadata row. `ObservedArray` is a specialized array type likely used for tracking changes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadataRow.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Inherited 'type' Instance Property from YTNode (TypeScript)\nDESCRIPTION: Shows the inherited `type` instance property from the base `YTNode` class. It's a read-only string property representing the node's type, defined in the base helper file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Accessing Key Value on ShareEndpoint in TypeScript (Inherited)\nDESCRIPTION: Signature for the inherited `key` method. This utility method asserts that the current node instance (ShareEndpoint) has a specific property key and returns its value wrapped in a `Maybe` container. It throws an error if the key does not exist. Implementation inherited from `ShareEntityServiceEndpoint` via helpers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEndpoint.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inheriting Key Existence Check Method 'hasKey' from YTNode in TypeScript\nDESCRIPTION: Describes the inherited `hasKey` method from the base `YTNode` class. This generic method checks if the node instance possesses a specific property key (`key`) without asserting its type. It returns a boolean type predicate (`this is SearchSubMenu & { [k in string]: R }`) indicating whether the key exists on the object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T, R>(key: T): this is SearchSubMenu & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Property Declarations in GuideDownloadsEntry Class\nDESCRIPTION: Declarations of class properties including the static type identifier, always_show boolean flag, and inherited properties from GuideEntry such as title, endpoint, thumbnails, and badges.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GuideDownloadsEntry.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'GuideDownloadsEntry'\nalways_show: boolean\n```\n\n----------------------------------------\n\nTITLE: Inherited 'hasKey' Method for Property Existence Check in TypeScript\nDESCRIPTION: Defines the inherited `hasKey` method from `YTNode`. This method checks if the node instance possesses a specific key, acting as a type guard to narrow down the type if the key exists.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is MusicResponsiveHeader & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Inherited YTNode Type Methods\nDESCRIPTION: Implementation of inherited type-checking and utility methods from the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistPanelVideoWrapper.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is PlaylistPanelVideoWrapper & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: AttributionView Class Properties Definition\nDESCRIPTION: Definition of core properties including suffix and text of type Text, and static/readonly type properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AttributionView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsuffix: Text;\ntext: Text;\nreadonly type: string;\nstatic type: string = 'AttributionView';\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods - TypeScript\nDESCRIPTION: Implementation of type checking methods (is, as, hasKey, key) inherited from YTNode for runtime type validation and safe property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/NotificationAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is NotificationAction & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Method Implementation - as<T, K>\nDESCRIPTION: Generic method for type casting nodes to specified types. Returns instance of specified type or throws if invalid.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatItemBumperView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Declaring HashtagTile Class Properties in TypeScript\nDESCRIPTION: Definition of the properties available in the HashtagTile class including hashtag text, information text, thumbnails, endpoint, background color, and video/channel counts.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HashtagTile.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nhashtag: Text\nhashtag_info_text: Text\nhashtag_thumbnail: Thumbnail[]\nendpoint: NavigationEndpoint\nhashtag_background_color: number\nhashtag_video_count: Text\nhashtag_channel_count: Text\ntype: string\nstatic type: string = 'HashtagTile'\n```\n\n----------------------------------------\n\nTITLE: Constructing RichMetadataRow Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `RichMetadataRow` class. It takes raw node data (`RawNode`) as input and initializes a new instance of `RichMetadataRow`. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadataRow.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RichMetadataRow(data: RawNode): RichMetadataRow\n```\n\n----------------------------------------\n\nTITLE: LikeEndpoint Parameters Getter\nDESCRIPTION: Method that retrieves optional parameters for the endpoint\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LikeEndpoint.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetParams(): undefined | string\n```\n\n----------------------------------------\n\nTITLE: Defining EngagementPanelSectionList Class Type in TypeScript\nDESCRIPTION: Static type definition for the EngagementPanelSectionList class that identifies it as 'EngagementPanelSectionList'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/EngagementPanelSectionList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'EngagementPanelSectionList'\n```\n\n----------------------------------------\n\nTITLE: Setting Log Levels in TypeScript\nDESCRIPTION: Function signature for setting logging levels in a logging utility. Takes variable number of numeric arguments as logging level parameters and returns void. Located in the Log.ts utility file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Log/functions/setLevel.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsetLevel(...args: number[]): void\n```\n\n----------------------------------------\n\nTITLE: Defining ThumbnailOverlayBadgeView Constructor in TypeScript\nDESCRIPTION: Constructor for the ThumbnailOverlayBadgeView class that initializes a new instance with provided data. It extends the YTNode class and accepts a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayBadgeView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThumbnailOverlayBadgeView(`data`): [`ThumbnailOverlayBadgeView`](ThumbnailOverlayBadgeView.md)\n```\n\n----------------------------------------\n\nTITLE: PageHeaderView Type Definition in TypeScript\nDESCRIPTION: Static and readonly type property definitions for the PageHeaderView class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PageHeaderView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'PageHeaderView';\nreadonly type: string;\n```\n\n----------------------------------------\n\nTITLE: Checking Node Type with 'is' Method in TypeScript\nDESCRIPTION: Inherited from `YTNode`, this method checks if the current node instance is of one of the specified `YTNode` subclass types. It takes one or more `YTNodeConstructor` types as arguments. It returns a boolean type predicate indicating if the instance matches any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveBannerForLiveChatCommand.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T, K>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: TimedMarkerDecoration Constructor Implementation\nDESCRIPTION: The constructor for the TimedMarkerDecoration class that accepts a RawNode parameter and initializes the class instance. It extends the constructor from the parent YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TimedMarkerDecoration.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew TimedMarkerDecoration(data: RawNode): TimedMarkerDecoration\n```\n\n----------------------------------------\n\nTITLE: Fetching Playlist Data in TypeScript\nDESCRIPTION: Method to retrieve playlist information using a playlist ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\ngetPlaylist(playlist_id: string): Promise<Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining SectionList Class Extending YTNode in TypeScript\nDESCRIPTION: This snippet demonstrates the declaration of the SectionList class, which extends the base YTNode class, to model a list of content sections as parsed from YouTube API responses. SectionList defines a typed constructor accepting a RawNode, and its properties include observed arrays for contents and optional attributes such as continuation, header, sub_menu, and target_id. The class leverages inheritance to gain runtime type utilities and standardized key management. Dependencies include the YTNode base class and type definitions (RawNode, ObservedArray). Inputs include raw YouTube API response nodes, and the class outputs structured, strongly-typed section data for further processing in a TypeScript environment.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SectionList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass SectionList extends YTNode {\n  static type: string = 'SectionList';\n  contents: ObservedArray<YTNode>;\n  target_id?: string;\n  continuation?: string;\n  header?: YTNode;\n  sub_menu?: YTNode;\n  constructor(data: RawNode) {\n    // ...implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Identifier for ReplaceLiveChatAction (TypeScript)\nDESCRIPTION: Defines the static `type` property for the `ReplaceLiveChatAction` class, overriding the one inherited from `YTNode`. It's assigned the constant string value 'ReplaceLiveChatAction', serving as a unique identifier for this class type within the parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplaceLiveChatAction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'ReplaceLiveChatAction'\n```\n\n----------------------------------------\n\nTITLE: PlayerError Static Methods Definition\nDESCRIPTION: Static method definitions for stack trace customization and capture, inherited from the Error class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/PlayerError.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic prepareStackTrace?: (err: Error, stackTraces: CallSite[]) => any\nstatic stackTraceLimit: number\nstatic captureStackTrace(targetObject: object, constructorOpt?: Function): void\n```\n\n----------------------------------------\n\nTITLE: Defining MusicDetailHeader Class in TypeScript\nDESCRIPTION: This code defines the MusicDetailHeader class, which extends YTNode. It includes properties for music item details and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicDetailHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicDetailHeader extends YTNode {\n  static type = 'MusicDetailHeader';\n\n  title: Text;\n  description: Text;\n  subtitle: Text;\n  second_subtitle: Text;\n  year: string;\n  song_count: string;\n  total_duration: string;\n  thumbnails: Thumbnail[];\n  badges: ObservedArray<YTNode>;\n  author?: {\n    name: string;\n    channel_id: string | undefined;\n    endpoint: NavigationEndpoint | undefined;\n  };\n  menu: YTNode;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Constructor Definition for ThumbnailOverlayNowPlaying in TypeScript\nDESCRIPTION: Constructor for the ThumbnailOverlayNowPlaying class that takes a RawNode data parameter and initializes a new instance. This class is used to represent the 'Now Playing' overlay on YouTube video thumbnails.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayNowPlaying.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThumbnailOverlayNowPlaying(data): ThumbnailOverlayNowPlaying\n```\n\n----------------------------------------\n\nTITLE: Defining UploadTimeFactoid Class Constructor in TypeScript\nDESCRIPTION: Creates a new instance of UploadTimeFactoid class with provided data. The constructor extends YTNode and initializes the factoid property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UploadTimeFactoid.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew UploadTimeFactoid(`data`): [`UploadTimeFactoid`](UploadTimeFactoid.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Methods from YTNode in TypeScript\nDESCRIPTION: Methods inherited from the YTNode class including as(), hasKey(), is(), and key() that provide type-checking and property access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TopbarMenuButton.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is TopbarMenuButton & { [k in string]: R }\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Retrieving Continuation Data\nDESCRIPTION: Async method that retrieves raw continuation data from the API response. Returns either undefined or an IBrowseResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Playlist.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync getContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: Inheriting as Method in RichMetadata (TypeScript)\nDESCRIPTION: Inherits the `as` method from the `YTNode` base class. This method allows casting the current node instance to one of the specified `YTNode` derived types. It requires the target type constructors as arguments and returns the cast instance or throws an error if the instance is not of the specified types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining Static 'type' Identifier for SendFeedbackAction in TypeScript\nDESCRIPTION: Defines the static `type` property for the `SendFeedbackAction` class, overriding the base `YTNode`'s static `type`. It is set to the string literal 'SendFeedbackAction', serving as a unique identifier for this class type within the parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SendFeedbackAction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SendFeedbackAction'\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatItemContextMenuRequest Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias for LiveChatItemContextMenuRequest as an object with an optional 'params' property of type string. It's part of the CommandEndpoints types in the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/LiveChatItemContextMenuRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LiveChatItemContextMenuRequest = {\n    params?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Methods in NavigateAction\nDESCRIPTION: This code snippet shows the inherited methods from YTNode class, including as(), hasKey(), is(), and key(). These methods provide type checking and property access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/NavigateAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is NavigateAction & { [k in string]: R }\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Key Access Methods Implementation\nDESCRIPTION: Implementation of key access methods hasKey() and key() for safely accessing object properties. These methods provide type-safe access to object properties with optional type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProductList.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is ProductList & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Inherited 'hasKey' Method Signature (TypeScript)\nDESCRIPTION: Inherited from `YTNode`. Checks if the node instance possesses a specific key, returning a boolean type predicate without asserting the type of the key's value.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SimpleCardContent & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Defining the Static type Property in SponsorCommentBadge\nDESCRIPTION: Defines a static property `type` on the `SponsorCommentBadge` class. This property holds the string literal 'SponsorCommentBadge', serving as a type identifier for nodes of this class. It overrides the static `type` property inherited from `YTNode`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SponsorCommentBadge.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SponsorCommentBadge'\n```\n\n----------------------------------------\n\nTITLE: Defining Properties in ThirdPartyShareTargetSection Class\nDESCRIPTION: Declaration of properties for the ThirdPartyShareTargetSection class, including share_targets array and type identifiers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThirdPartyShareTargetSection.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nshare_targets: [`ObservedArray`](../../Helpers/type-aliases/ObservedArray.md)\\<[`ShareTarget`](ShareTarget.md)\\>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n`readonly` type: `string`\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\n`static` type: `string` = `'ThirdPartyShareTargetSection'`\n```\n\n----------------------------------------\n\nTITLE: Defining PerformCommentActionRequest Type Alias in TypeScript\nDESCRIPTION: TypeScript type definition for the PerformCommentActionRequest object used in YouTube.js API. It defines an object with an optional 'actions' property that accepts an array of record objects with string keys and any values.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/PerformCommentActionRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **PerformCommentActionRequest**: `object`\n\n## Type declaration\n\n### actions?\n\n> `optional` **actions**: `Record`\\<`string`, `any`\\>[]\n```\n\n----------------------------------------\n\nTITLE: CommentReplies Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the CommentReplies class that takes a RawNode data parameter and initializes the instance, extending the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentReplies.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew CommentReplies(data: RawNode): CommentReplies\n```\n\n----------------------------------------\n\nTITLE: PlayerOverflow Constructor Implementation\nDESCRIPTION: Constructor implementation that takes RawNode data and initializes a PlayerOverflow instance\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerOverflow.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew PlayerOverflow(data: RawNode): PlayerOverflow\n```\n\n----------------------------------------\n\nTITLE: Overriding type Static Property for RemoveChatItemAction in TypeScript\nDESCRIPTION: Defines a static readonly property named 'type' with the value 'RemoveChatItemAction', uniquely identifying this node kind in the parser. This override is essential for node discrimination and factory functionality elsewhere in the codebase. It requires no dependencies and is a standard pattern for node-type definitions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'RemoveChatItemAction'\n```\n\n----------------------------------------\n\nTITLE: Implementing is() for Type Assertion Against YTNode Types - TypeScript\nDESCRIPTION: Declares the is() method to check if the current node is an instance of any of the provided YTNodeConstructor types, using advanced TypeScript generics and type predicates. It augments node introspection by safely identifying node types at runtime, supporting multiple possible types. Suitable for use in conditional logic scenarios within the parsing framework.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEntityEndpoint.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Implementation: return true if this matches one of the given constructors\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods in TypeScript\nDESCRIPTION: Implementation of helper methods for type checking and key access in the CarouselTitleView class, inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselTitleView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is CarouselTitleView & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining UpdateDescriptionAction class structure in TypeScript\nDESCRIPTION: Class definition showing the static type property, constructor, and description property. This class represents an action to update a description in YouTube's live chat functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateDescriptionAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'UpdateDescriptionAction'\n\ndescription: Text\n\nconstructor(data: RawNode) {\n  // Implementation not shown in the documentation\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods - TypeScript\nDESCRIPTION: Implementation of utility methods inherited from YTNode including type checking (is), type casting (as), and property access methods (hasKey, key).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelAgeGate.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ChannelAgeGate & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: GridShow Class Constructor in TypeScript\nDESCRIPTION: Constructor for the GridShow class that takes a RawNode data parameter and returns a new GridShow instance. The constructor is overriding the parent YTNode class constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridShow.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew GridShow(data): GridShow\n```\n\n----------------------------------------\n\nTITLE: PlaylistCustomThumbnail Properties - TypeScript\nDESCRIPTION: Static and instance properties of the PlaylistCustomThumbnail class including thumbnail array and type definitions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistCustomThumbnail.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthumbnail: Thumbnail[]\nreadonly type: string\nstatic type: string = 'PlaylistCustomThumbnail'\n```\n\n----------------------------------------\n\nTITLE: Implementing as() Method in TypeScript\nDESCRIPTION: This code snippet shows the implementation of the as() method in the MusicResponsiveListItem class, which is inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItem.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Implementation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Property for ReelPlayerHeader in TypeScript\nDESCRIPTION: Defines a static `type` property for the `ReelPlayerHeader` class, overriding the base class property. It is explicitly set to the string 'ReelPlayerHeader', likely used for identifying nodes of this specific type during parsing or type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ReelPlayerHeader'\n```\n\n----------------------------------------\n\nTITLE: Defining ThumbnailBadgeView Constructor in TypeScript\nDESCRIPTION: Constructor for the ThumbnailBadgeView class that takes a RawNode data parameter and returns a new ThumbnailBadgeView instance. This constructor overrides the parent YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailBadgeView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThumbnailBadgeView(data): ThumbnailBadgeView\n```\n\n----------------------------------------\n\nTITLE: Refreshing OAuth2 Access Token in TypeScript\nDESCRIPTION: Method to refresh the OAuth2 access token using the refresh token. This is used to maintain a valid authentication state.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/OAuth2.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nrefreshAccessToken(): Promise<void>\n```\n\n----------------------------------------\n\nTITLE: Constructing a RichShelf Instance in TypeScript\nDESCRIPTION: Defines the constructor for the `RichShelf` class. It accepts raw node data (`RawNode`) as input and initializes a new `RichShelf` instance. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RichShelf(data: RawNode): RichShelf\n```\n\n----------------------------------------\n\nTITLE: YTNode Type Checking Methods\nDESCRIPTION: Methods inherited from YTNode for type checking and property access. These methods allow for safely checking if the node is of a specific type and accessing properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/GridContinuation.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is GridContinuation & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining the watchNextResponse property in RawResponse TypeScript interface\nDESCRIPTION: Optional property definition for 'watchNextResponse' in the RawResponse interface. This property is of type IRawResponse and represents the response for the 'watch next' section.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **watchNextResponse**: [`IRawResponse`](IRawResponse.md)\n```\n\n----------------------------------------\n\nTITLE: Implementing YTNode Methods in ThumbnailOverlayResumePlayback\nDESCRIPTION: Inherited methods from the YTNode class including type checking and property access functionality. These methods provide ways to check the node type, cast to different types, and safely access properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayResumePlayback.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is ThumbnailOverlayResumePlayback & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: ToggleMenuServiceItem Class Definition in TypeScript\nDESCRIPTION: This code defines the ToggleMenuServiceItem class that extends YTNode. It contains properties for text, toggled_text, icon_type, toggled_icon_type, default_endpoint, and toggled_endpoint, allowing for representation of a menu item that can toggle between two states.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ToggleMenuServiceItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ToggleMenuServiceItem';\n\ntext: Text;\ntoggled_text: Text;\nicon_type: string;\ntoggled_icon_type: string;\ndefault_endpoint: NavigationEndpoint;\ntoggled_endpoint: NavigationEndpoint;\n\nconstructor(data: RawNode) {\n  super(data);\n}\n```\n\n----------------------------------------\n\nTITLE: Defining and Initializing MusicVisualHeader Node - TypeScript\nDESCRIPTION: Defines the MusicVisualHeader class as an extension of YTNode, allowing for the structured representation of music-specific visual headers in the YouTube.js parser. This class is constructed with a RawNode data object and exposes properties for title, thumbnails, foreground thumbnails, and menu (optional), plus static identification via the 'type' property. The node leverages superclass methods for advanced type-checking and property assertions; requires YTNode and associated support classes such as Thumbnail, Text, and Menu to work correctly.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicVisualHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicVisualHeader extends YTNode {\n  static type: string = 'MusicVisualHeader';\n\n  title: Text;\n  thumbnail: Thumbnail[];\n  foreground_thumbnail: Thumbnail[];\n  menu: Menu | null;\n\n  constructor(data: RawNode) {\n    super();\n    // Initialization logic for assigning properties from data\n  }\n\n  // Inherited static readonly type property\n  readonly type: string;\n\n  // Inherited methods:\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n    // Cast to one of the given types\n  }\n\n  hasKey<T extends string, R = any>(key: T): this is MusicVisualHeader & { [k in string]: R } {\n    // Check if the key exists\n  }\n\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n    // Check node type\n  }\n\n  key<T extends string, R = any>(key: T): Maybe {\n    // Return the value of the key if present, else Maybe\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining endpoint Property in RichMetadata (TypeScript)\nDESCRIPTION: Declares the `endpoint` property within the `RichMetadata` class. This property is of type `NavigationEndpoint` and likely represents a navigation target or action associated with the metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nendpoint: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Defining BrowseRequestSupportedMetadata Type Structure in TypeScript\nDESCRIPTION: This code snippet defines a TypeScript type alias for BrowseRequestSupportedMetadata, which includes nested objects for downloads browse parameters, including offline feature settings state with an SD enablement flag.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/BrowseRequestSupportedMetadata.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **BrowseRequestSupportedMetadata**: `object`\n\n## Type declaration\n\n### downloadsBrowseParams\n\n> **downloadsBrowseParams**: `object`\n\n### downloadsBrowseParams.offlineFeatureSettingState\n\n> **offlineFeatureSettingState**: `object`\n\n### downloadsBrowseParams.offlineFeatureSettingState.isSdEnabled\n\n> **isSdEnabled**: `boolean`\n```\n\n----------------------------------------\n\nTITLE: KeyInfo Type Definition in TypeScript\nDESCRIPTION: Defines a readonly tuple array type that pairs strings with InferenceType values. This type is used for key information processing in the YouTube.js parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/type-aliases/KeyInfo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype KeyInfo = readonly [string, InferenceType][]\n```\n\n----------------------------------------\n\nTITLE: Inherited 'as' Type Casting Method Signature (TypeScript)\nDESCRIPTION: Signature of the inherited `as` method from `YTNode`. It allows safely casting the current `ShowLiveChatDialogAction` instance to one of the specified `YTNode` subtypes (passed as arguments). It throws an error if the instance is not assignable to any of the target types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatDialogAction.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Declaring Properties for ParsingError Class in TypeScript\nDESCRIPTION: Declares various properties for the ParsingError class, including inherited properties from Error and InnertubeError.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/ParsingError.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ParsingError extends InnertubeError {\n  cause?: unknown;\n  date: Date;\n  info?: any;\n  message: string;\n  name: string;\n  stack?: string;\n  version: string;\n  static prepareStackTrace?: (err: Error, stackTraces: CallSite[]) => any;\n  static stackTraceLimit: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining KidsHomeScreen Class in TypeScript\nDESCRIPTION: The KidsHomeScreen class definition that extends YTNode. It contains an anchors property that holds an ObservedArray of AnchoredSection objects and has a static type property set to 'kidsHomeScreen'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsHomeScreen.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass KidsHomeScreen extends YTNode {\n  static type = 'kidsHomeScreen';\n\n  anchors: ObservedArray<AnchoredSection>;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing SettingsCheckbox from Raw Data in TypeScript\nDESCRIPTION: Defines the constructor for the `SettingsCheckbox` class. It accepts `RawNode` data as input, presumably from a YouTube API response, to instantiate and configure a new `SettingsCheckbox` object. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew SettingsCheckbox(data: RawNode): SettingsCheckbox\n```\n\n----------------------------------------\n\nTITLE: Defining external_channel_id Property in TypeScript\nDESCRIPTION: Declares the 'external_channel_id' property as a string within the RemoveChatItemByAuthorAction class. This property holds the identifier for the channel author whose chat item is targeted for removal.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemByAuthorAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexternal_channel_id: string\n```\n\n----------------------------------------\n\nTITLE: Declaring the 'display_domain' Property (TypeScript)\nDESCRIPTION: Defines the `display_domain` property for the `SimpleCardContent` class, representing the domain text to be displayed, typed as `Text`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndisplay_domain: Text\n```\n\n----------------------------------------\n\nTITLE: YTNode Method Implementation: 'is' Type Checking Method\nDESCRIPTION: Method that checks if the node is of the given type. This is an inherited method from the base YTNode class for type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactPlaylist.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n**is**\\<`T`, `K`\\>(...`types`): `this is InstanceType<K[number]>`\n```\n\n----------------------------------------\n\nTITLE: Implementing YTNode Type Identifier in TypeScript\nDESCRIPTION: Static and readonly type properties that identify the ThumbnailBadgeView class. The static property is used for type checking, while the readonly instance property inherits from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailBadgeView.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\nstatic type: string = 'ThumbnailBadgeView'\n```\n\n----------------------------------------\n\nTITLE: PlaylistThumbnailOverlay Class Definition\nDESCRIPTION: TypeScript class definition for PlaylistThumbnailOverlay that extends YTNode. Includes constructor, properties for icon_type and text, and inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistThumbnailOverlay.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistThumbnailOverlay extends YTNode {\n  static type = 'PlaylistThumbnailOverlay';\n  icon_type?: string;\n  text: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  // Inherited methods\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is PlaylistThumbnailOverlay & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: CarouselItemView Class Properties Definition\nDESCRIPTION: Class property definitions including carousel_item, item_type, and type. The carousel_item can be null or TextCarouselItemView, while item_type and type are strings.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselItemView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncarousel_item: null | TextCarouselItemView;\nitem_type: string;\nstatic type: string = 'CarouselItemView';\nreadonly type: string;\n```\n\n----------------------------------------\n\nTITLE: Declaring the Static 'type' Property (TypeScript)\nDESCRIPTION: Defines a static `type` property on the `SimpleCardContent` class itself, overriding the base class static property. It holds the string identifier 'SimpleCardContent' for this specific node type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SimpleCardContent'\n```\n\n----------------------------------------\n\nTITLE: Type Declaration for ImageBannerView in TypeScript\nDESCRIPTION: Static type property definition for ImageBannerView class. This property is used for type identification in the YouTube.js parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ImageBannerView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic **type**: `string` = `'ImageBannerView'`\n```\n\n----------------------------------------\n\nTITLE: GetApiPath Implementation\nDESCRIPTION: Implementation of IEndpoint interface's getApiPath method that returns the API endpoint path\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistEditEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiPath(): string\n```\n\n----------------------------------------\n\nTITLE: Implementing CarouselItem Constructor\nDESCRIPTION: Constructor implementation that takes RawNode data parameter and initializes a new CarouselItem instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselItem.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew CarouselItem(data: RawNode): CarouselItem\n```\n\n----------------------------------------\n\nTITLE: Defining SearchFilterGroup Title Property in TypeScript\nDESCRIPTION: Declares the `title` property for the `SearchFilterGroup` class. This property holds an instance of the `Text` class, representing the display title or label for the filter group.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Type Declaration Methods in TypeScript\nDESCRIPTION: Implements type-checking and assertion methods including is(), as(), hasKey(), and key() for type safety and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistVideoList.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is PlaylistVideoList & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Implementing FeedNudge Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the FeedNudge class that takes a RawNode data parameter and returns a new FeedNudge instance. The constructor inherits from YTNode parent class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FeedNudge.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew FeedNudge(data: RawNode): FeedNudge\n```\n\n----------------------------------------\n\nTITLE: Defining VideoDescriptionCourseSection Class in TypeScript\nDESCRIPTION: This code snippet defines the VideoDescriptionCourseSection class, which extends YTNode. It includes a constructor, properties for section_title and media_lockups, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionCourseSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass VideoDescriptionCourseSection extends YTNode {\n  static type = 'VideoDescriptionCourseSection';\n\n  section_title: Text;\n  media_lockups: ObservedArray<StructuredDescriptionPlaylistLockup>;\n\n  constructor(data: RawNode) {\n    super();\n    this.section_title = new Text(data.sectionTitle);\n    this.media_lockups = parser.parseArray(data.mediaLockups, StructuredDescriptionPlaylistLockup);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader 'thumbnail' Property in TypeScript\nDESCRIPTION: Declares the `thumbnail` property for the `MusicResponsiveHeader` class. It can hold either `null` or a `MusicThumbnail` object, representing the main thumbnail image associated with the header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nthumbnail: null | MusicThumbnail\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Property in TypeScript\nDESCRIPTION: Static type property definition that identifies this class as a 'DropdownView' component.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DropdownView.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'DropdownView'\n```\n\n----------------------------------------\n\nTITLE: Inheriting 'as' Type Casting Method in ReelPlayerHeader (TypeScript)\nDESCRIPTION: Documents the inherited `as` method from the `YTNode` base class. This generic utility method allows casting the current `ReelPlayerHeader` instance to one of the specified `YTNode` subtypes (`K`). It throws an error if the instance is not assignable to any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerHeader.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...types): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing constructor for VerticalWatchCardList class (TypeScript)\nDESCRIPTION: Implements the constructor for the VerticalWatchCardList class which takes a RawNode data parameter and returns a new VerticalWatchCardList instance, overriding the parent YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalWatchCardList.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew VerticalWatchCardList(data: RawNode): VerticalWatchCardList\n```\n\n----------------------------------------\n\nTITLE: Implementing Continuation Methods in TypeScript\nDESCRIPTION: This code snippet shows the implementation of continuation methods in the Feed class, which TabbedFeed inherits. These methods allow for retrieving additional feed data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/classes/TabbedFeed.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Feed<T extends IParsedResponse> {\n  getContinuationData(): Promise<T | undefined> {\n    // Implementation not shown\n  }\n\n  getContinuation(): Promise<Feed<T>> {\n    // Implementation not shown\n  }\n\n  // Other methods and properties\n}\n```\n\n----------------------------------------\n\nTITLE: Defining DialogView Class in TypeScript\nDESCRIPTION: This snippet defines the DialogView class, which extends YTNode. It includes properties for header, footer, and custom content, as well as a constructor and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DialogView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass DialogView extends YTNode {\n  static type = 'DialogView';\n\n  header: null | DialogHeaderView;\n  footer: null | FormFooterView;\n  custom_content: null | CreatePlaylistDialogFormView;\n\n  constructor(data: RawNode) {\n    super();\n    this.header = parser.parseItem(data.header, DialogHeaderView);\n    this.footer = parser.parseItem(data.footer, FormFooterView);\n    this.custom_content = parser.parseItem(data.custom_content, CreatePlaylistDialogFormView);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Revoking OAuth2 Credentials in TypeScript\nDESCRIPTION: Method to revoke the current OAuth2 credentials. This is used to log out or invalidate the current authentication session.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/OAuth2.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nrevokeCredentials(): Promise<undefined | Response>\n```\n\n----------------------------------------\n\nTITLE: Defining FormData Type Alias with Account Settings in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias called FormData which contains account settings related to accessibility options like captions and audio descriptions, as well as interface preferences like inline previews.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/FormData.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FormData = object;\n\ntype declaration {\n  accountSettingsFormData: object;\n  accountSettingsFormData.flagAudioDescriptionDefaultOn: boolean;\n  accountSettingsFormData.flagAutoCaptionsDefaultOn: boolean;\n  accountSettingsFormData.flagCaptionsDefaultOff: boolean;\n  accountSettingsFormData.flagDisableInlinePreview: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: PlayerError Class Constructor Definition\nDESCRIPTION: Constructor overloads for the PlayerError class. Accepts an optional message string and error options.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/PlayerError.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PlayerError(message?: string): PlayerError\nnew PlayerError(message?: string, options?: ErrorOptions): PlayerError\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of helper methods is(), as(), and hasKey() for type checking and key access, inherited from YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItemFlexColumn.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is MusicResponsiveListItemFlexColumn & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of type checking and validation methods inherited from YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicQueue.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is MusicQueue & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining BackgroundPromo Class Constructor in TypeScript\nDESCRIPTION: Constructor for the BackgroundPromo class that extends YTNode. Takes a RawNode data parameter and initializes a new BackgroundPromo instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BackgroundPromo.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew BackgroundPromo(data: RawNode): BackgroundPromo\n```\n\n----------------------------------------\n\nTITLE: Implementing Constructor for SingleActionEmergencySupport in TypeScript\nDESCRIPTION: Defines the constructor for the `SingleActionEmergencySupport` class. It accepts raw node data (`RawNode`) and initializes the class instance, likely parsing the input data to populate its properties. It overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleActionEmergencySupport.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nnew SingleActionEmergencySupport(data: RawNode): SingleActionEmergencySupport\n```\n\n----------------------------------------\n\nTITLE: YTNode Property Access Method in TypeScript\nDESCRIPTION: Implementation of the key() method inherited from YTNode that safely accesses a property, returning it wrapped in a Maybe monad for safe handling of potentially undefined values.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSectionHeader.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Providing Inherited Helper Methods for YTNodes - TypeScript\nDESCRIPTION: This snippet summarizes representative inherited methods from YTNode, such as is(), as(), hasKey(), and key(), which provide runtime type checking, casting, and safe key-based member access. These generics enable derived node instances to confirm and cast types, check for arbitrary keys, and safely access key values with Maybe wrappers. Dependencies include the base YTNode class and supporting TypeScript type utilities. Inputs vary by method: types or key names, and outputs are booleans, casted objects, or maybe-wrapped values; some methods throw if checks fail.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicSortFilterButton.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\nhasKey<T extends string, R = any>(key: T): this is MusicSortFilterButton & { [k in string]: R };\nkey<T extends string, R = any>(key: T): Maybe;\n\n```\n\n----------------------------------------\n\nTITLE: HomeFeed Class Constructor Definition\nDESCRIPTION: Constructor for HomeFeed class that takes actions, data and already_parsed flag as parameters. Extends the base Feed class constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/HomeFeed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew HomeFeed(actions: Actions, data: ApiResponse | IBrowseResponse, already_parsed: boolean = false): HomeFeed\n```\n\n----------------------------------------\n\nTITLE: CompactPlaylist Static Type Declaration in TypeScript\nDESCRIPTION: Static type property declaration that identifies this node type as 'CompactPlaylist'. This overrides the type property from the parent Playlist class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactPlaylist.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n`static` **type**: `string` = `'CompactPlaylist'`\n```\n\n----------------------------------------\n\nTITLE: MusicResponsiveListItemFixedColumn Class Definition in TypeScript\nDESCRIPTION: Defines a class that represents a fixed column item in YouTube Music's responsive list interface. The class extends YTNode and contains properties for title and display priority.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItemFixedColumn.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicResponsiveListItemFixedColumn extends YTNode {\n  static type = 'musicResponsiveListItemFlexColumnRenderer';\n  title: Text;\n  display_priority: string;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: ThumbnailOverlayInlineUnplayable Method 'key' in TypeScript\nDESCRIPTION: Method to assert that the node has a given key and return it wrapped in a Maybe object. Throws an error if the key doesn't exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayInlineUnplayable.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Method Implementation - key<T, R>\nDESCRIPTION: Method to assert and retrieve a key value from the node, wrapped in a Maybe type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatItemBumperView.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Poll Class Method Implementations in TypeScript\nDESCRIPTION: Implementation of inherited methods from YTNode including type checking and property access methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Poll.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is Poll & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Static Method for ParsingError Class in TypeScript\nDESCRIPTION: Implements the static captureStackTrace method for the ParsingError class, inherited from Error.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/ParsingError.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ParsingError extends InnertubeError {\n  static captureStackTrace(targetObject: object, constructorOpt?: Function): void {\n    // Implementation details\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring title Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `title` property for the `SlimVideoMetadata` class. It is of type `Text`, holding the title of the video.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Inherited 'as' Method Signature (TypeScript)\nDESCRIPTION: Inherited from `YTNode`. This method attempts to cast the current node instance to one of the specified `YTNode` types. It throws an error if the cast is not possible.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: PlayerOverflow Helper Methods Implementation\nDESCRIPTION: Implementation of inherited helper methods including type checking and key access functionality\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerOverflow.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is PlayerOverflow & { [k in string]: R }\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Declaring Artist Class Properties in TypeScript\nDESCRIPTION: Declares the properties of the Artist class, including an optional header of various types and an array of sections containing MusicCarouselShelf or MusicShelf objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Artist.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nheader?: MusicImmersiveHeader | MusicVisualHeader | MusicHeader;\nsections: ObservedArray<MusicCarouselShelf | MusicShelf>;\n```\n\n----------------------------------------\n\nTITLE: Card Class Properties Definition in TypeScript\nDESCRIPTION: Definition of the Card class properties including teaser, content, card_id, feature, and cue_ranges. These properties represent the structure of a YouTube card element.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Card.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nclass Card extends YTNode {\n  static type: string = 'Card';\n  teaser: YTNode;\n  content: YTNode;\n  card_id?: string;\n  feature?: string;\n  cue_ranges: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited 'as' Type Casting Method for RichShelf in TypeScript\nDESCRIPTION: Documents the inherited `as` method from `YTNode`. This method allows casting a `RichShelf` instance to one of the specified `YTNode` subtypes, throwing an error if the instance is not of the target type. It takes variable `YTNodeConstructor` arguments.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nas<T, K>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Property for SearchFilterGroup in TypeScript\nDESCRIPTION: Defines the static `type` property specifically for the `SearchFilterGroup` class, overriding the one inherited from `YTNode`. It provides the string literal 'SearchFilterGroup' as the unique identifier for this class type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'SearchFilterGroup'\n```\n\n----------------------------------------\n\nTITLE: ThumbnailView Constructor Implementation in TypeScript\nDESCRIPTION: Implementation of the ThumbnailView constructor that accepts a RawNode data parameter and returns a new ThumbnailView instance. It overrides the constructor from the parent YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ThumbnailView(data: RawNode): ThumbnailView\n```\n\n----------------------------------------\n\nTITLE: Defining subtitle Property in RichListHeader (TypeScript)\nDESCRIPTION: Declares the `subtitle` property of type `Text` within the `RichListHeader` class. It represents the subtitle text content of the header. Depends on the `Text` class for structured text representation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nsubtitle: Text\n```\n\n----------------------------------------\n\nTITLE: CallToActionButton Helper Methods Implementation\nDESCRIPTION: Implementation of inherited helper methods including as(), hasKey(), is(), and key() for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CallToActionButton.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is CallToActionButton & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inheriting 'key' Property Access Method in ReelPlayerHeader (TypeScript)\nDESCRIPTION: Documents the inherited `key` method from the `YTNode` base class. This generic method asserts that the `ReelPlayerHeader` instance has the specified `key` and returns its value wrapped in a `Maybe` container. It throws an error if the key does not exist on the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReelPlayerHeader.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T, R>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for CompactLink Class in TypeScript\nDESCRIPTION: Constructor for the CompactLink class that initializes an instance from raw node data. This constructor extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactLink.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew CompactLink(`data`): [`CompactLink`](CompactLink.md)\n```\n\n----------------------------------------\n\nTITLE: Remove Video Method Type Definition\nDESCRIPTION: Type definition for removeVideo method that removes a video from watch history given a video ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/History.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nremoveVideo(video_id: string): Promise<boolean>\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2AuthPendingEventHandler Type in TypeScript\nDESCRIPTION: This code snippet defines a type alias for OAuth2AuthPendingEventHandler. It represents a function that takes DeviceAndUserCode data as a parameter and returns void. This type is likely used for handling pending OAuth2 authentication events.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/OAuth2AuthPendingEventHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype OAuth2AuthPendingEventHandler = (data: DeviceAndUserCode) => void;\n```\n\n----------------------------------------\n\nTITLE: Defining title Property in RichListHeader (TypeScript)\nDESCRIPTION: Declares the `title` property of type `Text` within the `RichListHeader` class. It represents the main title text content of the header. Depends on the `Text` class for structured text representation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Defining ModifyChannelNotificationPreferenceRequest Type in TypeScript\nDESCRIPTION: TypeScript type definition for the ModifyChannelNotificationPreferenceRequest object used in YouTube API calls for modifying channel notification preferences. It includes optional string parameters 'params' and 'secondaryParams'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/ModifyChannelNotificationPreferenceRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **ModifyChannelNotificationPreferenceRequest**: `object`\n\n## Type declaration\n\n### params?\n\n> `optional` **params**: `string`\n\n### secondaryParams?\n\n> `optional` **secondaryParams**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining ICache Interface Properties in TypeScript\nDESCRIPTION: Defines the cache_dir property which specifies the directory path for cache storage as a string value.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/interfaces/ICache.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ncache_dir: string;\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelExternalLinkView Class in TypeScript\nDESCRIPTION: Defines the ChannelExternalLinkView class with properties for title, link, and favicon. It extends the YTNode class and includes a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelExternalLinkView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ChannelExternalLinkView extends YTNode {\n  static type = 'ChannelExternalLinkView';\n\n  title: Text;\n  link: Text;\n  favicon: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    this.title = new Text(data.title);\n    this.link = new Text(data.link);\n    this.favicon = Thumbnail.fromResponse(data.favicon);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ShareTarget Class Constructor in TypeScript\nDESCRIPTION: This is the constructor signature for the `ShareTarget` class. It initializes a new instance using raw data (`RawNode`) conforming to YouTube's internal API structure. It overrides the constructor of the base `YTNode` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareTarget.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ShareTarget(data): ShareTarget\n```\n\n----------------------------------------\n\nTITLE: Playlist Class Constructor TypeScript Definition\nDESCRIPTION: Constructor definition for the Playlist class that takes raw node data as input and initializes a new Playlist instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Playlist.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew Playlist(data: RawNode): Playlist\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking Methods\nDESCRIPTION: Method implementations for type checking and validation including is(), as(), hasKey() and key() inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProfileColumnStats.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ProfileColumnStats & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: HowThisWasMadeSectionView Properties Declaration in TypeScript\nDESCRIPTION: Defines optional properties for a YouTube 'How This Was Made' section view, including section_title, body_text, and body_header, all of type Text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HowThisWasMadeSectionView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nsection_title?: Text;\nbody_text?: Text;\nbody_header?: Text;\n```\n\n----------------------------------------\n\nTITLE: Using YTNode Helper Methods for Type Checking and Key Operations - TypeScript\nDESCRIPTION: This set of methods, inherited from YTNode, provides runtime helpers for type casting (as), type checking (is), key existence assertion (hasKey), and safe key retrieval (key) on instance nodes. Dependencies include the InstanceType and YTNodeConstructor typings, and the Maybe wrapper for safe retrieval. Parameters typically include either the target type(s) for casting/checks or the property key to assert or access. These methods support robust, type-safe manipulations and chaining of YTNode-based objects when parsing dynamic or polymorphic API response trees, ensuring safer operation in downstream code.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/StartAt.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Type casting method\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\n// Type checking method\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\n// Key existence assertion method\nhasKey<T extends string, R = any>(key: T): this is StartAt & { [k in string]: R };\n\n// Safe key retrieval method\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited Instance Type Property in YTNode (TypeScript)\nDESCRIPTION: Defines the read-only `type` property inherited from the base `YTNode` class. This property holds a string identifier representing the specific type of the node instance, used for type checking and identification within the parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Using YTNode Type Checking and Assertion Methods - TypeScript\nDESCRIPTION: Demonstrates the inherited methods provided by the YTNode base class for type checking (is), type casting (as), key presence checking (hasKey), and key assertion (key). These generic methods use TypeScript generics for flexibility when handling different YTNode types and are essential for safely manipulating and interrogating node structures within the YouTube.js parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichGrid.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Cast to one of the given types\n}\n\nhasKey<T extends string, R = any>(key: T): this is RichGrid & { [k in string]: R } {\n  // Check for a key without asserting the type\n}\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Check if the node is of the given type\n}\n\nkey<T extends string, R = any>(key: T): Maybe {\n  // Assert that the node has the given key and return it\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited YTNode Methods\nDESCRIPTION: Implementation of inherited helper methods for type checking and key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelThumbnailWithLink.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is ChannelThumbnailWithLink & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining CreatePlaylistServiceRequest Type in TypeScript\nDESCRIPTION: This code snippet defines the CreatePlaylistServiceRequest type alias as an object with optional properties for creating a YouTube playlist. It includes fields for various playlist attributes and references the PlaylistPrivacyStatus type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/CreatePlaylistServiceRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype CreatePlaylistServiceRequest = {\n  description?: string;\n  params?: string;\n  privacyStatus?: PlaylistPrivacyStatus;\n  sourcePlaylistId?: string;\n  title?: string;\n  videoIds?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Creating CreatePlaylistDialogFormView Class in TypeScript\nDESCRIPTION: Class definition for CreatePlaylistDialogFormView that extends YTNode. This class handles the form structure and properties for creating a new YouTube playlist, including collaboration settings, title field, visibility options and video IDs.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreatePlaylistDialogFormView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass CreatePlaylistDialogFormView extends YTNode {\n  static type = 'CreatePlaylistDialogFormView';\n\n  playlist_title: null | TextFieldView;\n  playlist_visibility: null | DropdownView;\n  disable_playlist_collaborate: boolean;\n  create_playlist_params_collaboration_enabled: string;\n  create_playlist_params_collaboration_disabled: string;\n  video_ids: string[];\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SessionError Class in TypeScript\nDESCRIPTION: This snippet defines the SessionError class which extends the Error class. It includes constructors with optional message and options parameters, as well as inherited properties and methods from the Error class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/SessionError.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SessionError extends Error {\n  constructor(message?: string);\n  constructor(message?: string, options?: ErrorOptions);\n\n  // Inherited properties\n  cause?: unknown;\n  message: string;\n  name: string;\n  stack?: string;\n\n  // Static members\n  static prepareStackTrace?: (err: Error, stackTraces: CallSite[]) => any;\n  static stackTraceLimit: number;\n\n  // Static method\n  static captureStackTrace(targetObject: object, constructorOpt?: Function): void;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition and Instance Methods\nDESCRIPTION: Implementation of inherited methods from YTNode including type checking and key access utilities.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MarkChatItemAsDeletedAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is MarkChatItemAsDeletedAction & { [k in string]: R }\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods from YTNode in TypeScript\nDESCRIPTION: This snippet shows the inherited methods from the YTNode base class including as(), is(), hasKey(), and key() methods that provide type checking and property access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HideEngagementPanelEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is HideEngagementPanelEndpoint & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining IResolveURLResponse Type Alias in TypeScript\nDESCRIPTION: Creates a type alias that uses Pick utility type to select only the 'endpoint' property from IParsedResponse interface. This type is used for handling URL resolution responses in the YouTube.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/IResolveURLResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IResolveURLResponse = Pick<IParsedResponse, \"endpoint\">\n```\n\n----------------------------------------\n\nTITLE: Checking Key Existence on ShareEndpoint in TypeScript (Inherited)\nDESCRIPTION: Signature for the inherited `hasKey` method. This utility method checks if the current node instance (ShareEndpoint) has a specific property key without asserting its type, returning a boolean type guard. Implementation inherited from `ShareEntityServiceEndpoint` via helpers.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEndpoint.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is ShareEndpoint & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Inherited 'key' Method Signature (TypeScript)\nDESCRIPTION: Inherited from `YTNode`. Asserts that the node instance has the specified key and returns its value wrapped in a `Maybe` object. Throws an error if the key does not exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Helper Methods Implementation for MultiPageMenuSection Class in TypeScript\nDESCRIPTION: Implements utility methods for type checking and property access, including as(), is(), hasKey(), and key() methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiPageMenuSection.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is MultiPageMenuSection & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Class Properties Definition for UploadTimeFactoid\nDESCRIPTION: Defines the properties of the UploadTimeFactoid class including the factoid property and type identifiers. The class has both instance and static type properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UploadTimeFactoid.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nfactoid: null | Factoid\n\nreadonly type: string\n\nstatic type: string = 'UploadTimeFactoid'\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods from YTNode Class in TypeScript\nDESCRIPTION: This snippet shows the inherited methods from the YTNode parent class, including as(), is(), hasKey(), and key() methods which provide type checking and property access functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ContinuationItem.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is ContinuationItem & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining MovingThumbnail Class in TypeScript\nDESCRIPTION: This code snippet defines the MovingThumbnail class, which extends YTNode. It includes a constructor that takes a RawNode parameter and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MovingThumbnail.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MovingThumbnail extends YTNode {\n  static type = 'MovingThumbnail';\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing VideoInfoCardContent Constructor in TypeScript\nDESCRIPTION: This code shows the constructor for the VideoInfoCardContent class which takes a RawNode data parameter and returns a VideoInfoCardContent instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoInfoCardContent.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew VideoInfoCardContent(data: RawNode): VideoInfoCardContent\n```\n\n----------------------------------------\n\nTITLE: Implementing as Method for YTNode Type Casting in TypeScript\nDESCRIPTION: The as<T, K>(...types) method allows the node to be cast to a specified subtype, enforcing type safety and supporting polymorphism in the parsing system. It expects a list of type constructors and throws if the actual node is not one of the specified types. The method is generic and must be used with caution, with T and K as type parameters and arguments.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemAction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: CommentsEntryPointHeader Constructor Implementation\nDESCRIPTION: Constructor implementation for the CommentsEntryPointHeader class that takes raw node data as a parameter and initializes a new instance of CommentsEntryPointHeader.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsEntryPointHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew CommentsEntryPointHeader(data): CommentsEntryPointHeader\n```\n\n----------------------------------------\n\nTITLE: Using Inherited 'hasKey' Method for Property Check in TypeScript\nDESCRIPTION: Documents the inherited `hasKey` method from `YTNode`. It checks if the `SingleActionEmergencySupport` instance possesses a specific key without asserting its type, returning a boolean type guard. Useful for safe property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleActionEmergencySupport.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SingleActionEmergencySupport & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods from YTNode for DownloadButton Class in TypeScript\nDESCRIPTION: Methods inherited from the YTNode parent class including type checking (is, as) and property access (hasKey, key) methods that facilitate type-safe interactions with node instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DownloadButton.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): this is InstanceType<K[number]>\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key): this is DownloadButton & { [k in string]: R }\nkey<T extends string, R = any>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inherited 'is' Type Checking Method for RichShelf in TypeScript\nDESCRIPTION: Documents the inherited `is` method from `YTNode`. This method checks if a `RichShelf` instance is of one of the specified `YTNode` subtypes, returning a boolean type predicate. It accepts variable `YTNodeConstructor` arguments.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nis<T, K>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileColumn Constructor in TypeScript\nDESCRIPTION: Constructor for ProfileColumn class that accepts raw node data and initializes the profile column instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProfileColumn.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ProfileColumn(data: RawNode): ProfileColumn\n```\n\n----------------------------------------\n\nTITLE: Defining MediaCommonConfig Interface Properties in TypeScript\nDESCRIPTION: Specifies media streaming configuration including dynamic readahead settings and ustreamer request configuration.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawPlayerConfig.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nmediaCommonConfig: {\n  dynamicReadaheadConfig?: {\n    maxReadAheadMediaTimeMs: number;\n    minReadAheadMediaTimeMs: number;\n    readAheadGrowthRateMs: number;\n  };\n  mediaUstreamerRequestConfig?: {\n    videoPlaybackUstreamerConfig: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking and Property Utilities for YouTube Nodes - TypeScript\nDESCRIPTION: Provides generic utility methods on node classes for runtime type assertions and property presence checks in TypeScript. The is(), as(), hasKey(), and key() methods enable defensive programming and support complex node graph traversal by safely asserting or retrieving properties based on type. These utilities require TypeScript generics and depend on base node classes and type aliases defined elsewhere in the parsing framework.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichItem.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * Check if the node is any of the given types\n * @param types\n */\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Implementation checks against the internal type property\n}\n\n/**\n * Cast the node to one of the given types\n * @param types\n * @throws If the node is not of a given type\n */\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Implementation casts after validation\n}\n\n/**\n * Check if node has a given key (property) without asserting the type\n * @param key\n */\nhasKey<T extends string, R = any>(key: T): this is this & { [k in string]: R } {\n  // Returns boolean indicating presence of key\n}\n\n/**\n * Assert presence of key and return its value wrapped in Maybe\n * @param key\n * @throws If the key is missing\n */\nkey<T extends string, R = any>(key: T): Maybe {\n  // Returns value of key wrapped in Maybe type\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Static Type Property in SignalAction (TypeScript)\nDESCRIPTION: Defines the static `type` property specifically for the SignalAction class, overriding the base class property. It is set to the string literal 'SignalAction', identifying nodes of this type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalAction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SignalAction';\n```\n\n----------------------------------------\n\nTITLE: Defining ParserError Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias called ParserError. It's a complex type that combines multiple object types using union and intersection operators. The type includes a 'classname' property of type string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/type-aliases/ParserError.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ParserError = object & object | object | object | object | object | object;\n\ntype ParserError = {\n  classname: string;\n};\n```\n\n----------------------------------------\n\nTITLE: ItemSectionTabbedHeader Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the ItemSectionTabbedHeader class that takes a RawNode data parameter and returns an instance of ItemSectionTabbedHeader. It overrides the constructor from the parent YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ItemSectionTabbedHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ItemSectionTabbedHeader(data: RawNode): ItemSectionTabbedHeader\n```\n\n----------------------------------------\n\nTITLE: Constructing SingleColumnMusicWatchNextResults Instance (TypeScript)\nDESCRIPTION: Defines the constructor for the `SingleColumnMusicWatchNextResults` class. It accepts raw node data (`RawNode`) likely from an API response and initializes a new instance of the class, parsing the relevant data. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleColumnMusicWatchNextResults.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SingleColumnMusicWatchNextResults(data: RawNode): SingleColumnMusicWatchNextResults\n```\n\n----------------------------------------\n\nTITLE: Initializing ReplaceChatItemAction in TypeScript\nDESCRIPTION: Defines the constructor for the `ReplaceChatItemAction` class. It accepts raw node data (`data` of type `RawNode`) and returns a new instance of `ReplaceChatItemAction`. This constructor overrides the base `YTNode` constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplaceChatItemAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ReplaceChatItemAction(data): ReplaceChatItemAction\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods Implementation - TypeScript\nDESCRIPTION: Implementation of inherited helper methods from YTNode including as(), is(), hasKey(), and key() for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicImmersiveHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is MusicImmersiveHeader & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: YTNode Property Existence Check Method in TypeScript\nDESCRIPTION: Implementation of the hasKey() method inherited from YTNode that checks if the node has the specified key, returning a type predicate for TypeScript type narrowing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSectionHeader.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key): this is TranscriptSectionHeader & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Inheriting Type Check Method 'is' from YTNode in TypeScript\nDESCRIPTION: Describes the inherited `is` method from the base `YTNode` class. This generic method checks if the current node instance is of one of the specified `YTNode` constructor types (passed as `types`). It returns a boolean type predicate (`this is InstanceType<K[number]>`) indicating whether the node matches one of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T, K>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining the 'style' Property in SimpleTextSection (TypeScript)\nDESCRIPTION: Declares the `style` property within the `SimpleTextSection` class. This property holds a string indicating the style associated with this text section.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstyle: string\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited as Method in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `as` method, inherited from `YTNode`. This utility method attempts to cast the current node instance to one of the specified `YTNode` subtypes. It takes a variable number of `YTNodeConstructor` types as arguments and returns the instance cast to the first matching type, throwing an error if the instance doesn't match any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining PrefetchWatchCommand Class Constructor\nDESCRIPTION: Constructor for PrefetchWatchCommand class that takes a RawNode data parameter and returns a new PrefetchWatchCommand instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PrefetchWatchCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew PrefetchWatchCommand(data: RawNode): PrefetchWatchCommand\n```\n\n----------------------------------------\n\nTITLE: Retrieving Playlists from Memo in YouTube Channel\nDESCRIPTION: This static method retrieves all playlists from a given page using a memo object. It returns an ObservedArray of playlist-related objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Channel.md#2025-04-22_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining the Signal Property in SignalAction (TypeScript)\nDESCRIPTION: Declares the `signal` property within the SignalAction class. This property holds a string value representing the specific signal associated with the action.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsignal: string;\n```\n\n----------------------------------------\n\nTITLE: Defining URLTransformer Type in TypeScript\nDESCRIPTION: Type alias definition for a function that transforms URL objects. The function takes a URL object as input and returns a modified URL object. This type is defined in the FormatUtils.ts file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/URLTransformer.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype URLTransformer = (url: URL) => URL;\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods for Type Checking in TypeScript\nDESCRIPTION: Inherited helper methods from YTNode for type checking and property access, including is(), as(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentReplies.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is CommentReplies & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods in YTNode\nDESCRIPTION: Methods inherited from YTNode to check if a node is of a specific type and cast it to the desired type, providing type safety for YouTube API responses.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Encoding Comment Action Parameters in TypeScript\nDESCRIPTION: Function signature for encodeCommentActionParams that takes a numeric type parameter and optional CommentActionParamsArgs object to generate an encoded string for YouTube comment actions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/ProtoUtils/functions/encodeCommentActionParams.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nencodeCommentActionParams(type: number, args: CommentActionParamsArgs = {}): string\n```\n\n----------------------------------------\n\nTITLE: Defining static type property in VerticalWatchCardList class (TypeScript)\nDESCRIPTION: Defines the static type property for the VerticalWatchCardList class with the value 'VerticalWatchCardList', which is used for type identification.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalWatchCardList.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'VerticalWatchCardList'\n```\n\n----------------------------------------\n\nTITLE: Retrieving API Path for Share Service in TypeScript (Inherited)\nDESCRIPTION: Signature for the inherited `getApiPath` method. This method returns the specific API endpoint path string required for making requests related to the share entity service. Implementation inherited from `ShareEntityServiceEndpoint`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEndpoint.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiPath(): string\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods Implementation for InfoPanelContainer in TypeScript\nDESCRIPTION: Methods inherited from the YTNode class including as(), is(), hasKey(), and key() for type checking and property access with type safety.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/InfoPanelContainer.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends [`YTNode`](../../Helpers/classes/YTNode.md), K extends [`YTNodeConstructor`](../../Helpers/interfaces/YTNodeConstructor.md)<T>[]>(...types: K): InstanceType<K[number]>\n\nis<T extends [`YTNode`](../../Helpers/classes/YTNode.md), K extends [`YTNodeConstructor`](../../Helpers/interfaces/YTNodeConstructor.md)<T>[]>(...types: K): this is InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is InfoPanelContainer & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): [`Maybe`](../../Helpers/classes/Maybe.md)\n```\n\n----------------------------------------\n\nTITLE: Using inherited key method for property access in YTNode (TypeScript)\nDESCRIPTION: Inherited method `key` from the base `YTNode` class. Asserts that the node instance possesses the specified key and returns its value wrapped in a `Maybe` object for safe access. Throws an error if the key is not found.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterHeader.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T, R>(key): Maybe<Maybe>\n```\n\n----------------------------------------\n\nTITLE: Inherited YTNode Methods in FeedNudge Class\nDESCRIPTION: Methods inherited from the YTNode base class including type checking (is), type casting (as), and property access utilities (hasKey, key). These methods provide type safety and convenience when working with YouTube nodes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FeedNudge.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is FeedNudge & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Accessing inherited type property in YTNode (TypeScript)\nDESCRIPTION: Represents the readonly `type` property inherited from the base `YTNode` class. This instance property holds a string identifying the specific type of the node.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining isTextRun Function in TypeScript\nDESCRIPTION: This function takes a run parameter of type EmojiRun or TextRun and returns a boolean indicating if the run is of type TextRun. It's defined in the Utils.ts file of the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/isTextRun.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n> **isTextRun**(`run`): `run is TextRun`\n```\n\n----------------------------------------\n\nTITLE: Defining MusicElementHeader Class in TypeScript\nDESCRIPTION: This snippet defines the MusicElementHeader class, which extends YTNode. It includes a constructor that takes a RawNode parameter, and defines an 'element' property of type Element or null.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicElementHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicElementHeader extends YTNode {\n  static type = 'MusicElementHeader';\n\n  element: null | Element;\n\n  constructor(data: RawNode) {\n    super();\n    this.element = Parser.parseItem(data.element, Element);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Readonly 'type' Property Signature (TypeScript)\nDESCRIPTION: Signature of the inherited readonly `type` instance property from the base `YTNode` class. This property holds the specific type string identifier for the node instance, which is 'ShowLiveChatDialogAction' in this case.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatDialogAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining the Static 'type' Property in SignalServiceEndpoint (TypeScript)\nDESCRIPTION: Defines a static property `type` on the `SignalServiceEndpoint` class itself, initialized to the string 'SignalServiceEndpoint'. This overrides the static `type` property from the base `YTNode` class and serves as a class identifier.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SignalServiceEndpoint'\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Existence Check Method 'hasKey' in YTNode (TypeScript)\nDESCRIPTION: Defines the generic `hasKey` method inherited from `YTNode`. This type predicate checks if the current node instance has a property named `key` (of type `T`). It returns a boolean indicating presence and refines the object's type in the `true` case.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T, R>(key: T): this is SettingsCheckbox & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: CommentsHeader Constructor in TypeScript\nDESCRIPTION: Constructor for the CommentsHeader class that accepts RawNode data and initializes the properties of the comment header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentsHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew CommentsHeader(data): CommentsHeader\n```\n\n----------------------------------------\n\nTITLE: Retrieving YouTube Kids Channel\nDESCRIPTION: Method to fetch channel information using channel ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Kids.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ngetChannel(channel_id: string): Promise<Channel>\n```\n\n----------------------------------------\n\nTITLE: Type Property Definition - ContinuationCommand Class\nDESCRIPTION: Static and readonly type property definitions for the ContinuationCommand class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ContinuationCommand.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string;\nstatic type: string = 'ContinuationCommand';\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Property for ShareTarget in TypeScript\nDESCRIPTION: Defines a static property `type` on the `ShareTarget` class, setting its value to the string 'ShareTarget'. This is likely used for identifying the node type during parsing, overriding the base `YTNode` static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareTarget.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'ShareTarget'\n```\n\n----------------------------------------\n\nTITLE: Defining Context Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the Context type alias as an object with properties for client information, request details, third-party data, and user settings. It includes various optional and required fields that describe the client environment, user preferences, and request context.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/Context.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Context = {\n  client: {\n    androidSdkVersion?: number;\n    browserName?: string;\n    browserVersion?: string;\n    clientFormFactor: string;\n    clientName: string;\n    clientScreen?: string;\n    clientVersion: string;\n    configInfo?: {\n      appInstallData: string;\n    };\n    deviceMake: string;\n    deviceModel: string;\n    gl: string;\n    hl: string;\n    kidsAppInfo?: {\n      categorySettings: {\n        enabledCategories: string[];\n      };\n      contentSettings: {\n        corpusPreference: string;\n        kidsNoSearchMode: string;\n      };\n    };\n    mainAppWebInfo?: {\n      graftUrl: string;\n      isWebNativeShareAvailable: boolean;\n      pwaInstallabilityStatus: string;\n      webDisplayMode: string;\n    };\n    memoryTotalKbytes?: string;\n    originalUrl?: string;\n    osName: string;\n    osVersion: string;\n    platform: string;\n    remoteHost?: string;\n    screenDensityFloat?: number;\n    screenHeightPoints?: number;\n    screenPixelDensity?: number;\n    screenWidthPoints?: number;\n    timeZone: string;\n    userAgent: string;\n    userInterfaceTheme?: string;\n    utcOffsetMinutes: number;\n    visitorData?: string;\n  };\n  request?: {\n    internalExperimentFlags: any[];\n    useSsl: boolean;\n  };\n  thirdParty?: {\n    embedUrl: string;\n  };\n  user: {\n    enableSafetyMode: boolean;\n    lockedSafetyMode: boolean;\n    onBehalfOfUser?: string;\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Key Value Access Method in YTNode Class\nDESCRIPTION: Implementation of the 'key' method that asserts a key exists on the node and returns its value wrapped in a Maybe class. Provides safe access to node properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TabbedSearchResults.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing Recap Playlist Retrieval in TypeScript\nDESCRIPTION: Method to retrieve the recap playlist asynchronously.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Recap.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetPlaylist(): Promise<Playlist>\n```\n\n----------------------------------------\n\nTITLE: TextRun Class Properties Definition\nDESCRIPTION: Properties definition for the TextRun class including text content, navigation endpoint, and text formatting options.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/TextRun.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntext: string;\nendpoint?: NavigationEndpoint;\nbold: boolean;\nitalics: boolean;\nstrikethrough: boolean;\ndeemphasize: boolean;\nattachment: any;\n```\n\n----------------------------------------\n\nTITLE: ItemSectionHeader Method Implementations in TypeScript\nDESCRIPTION: Implementation of utility methods including as(), hasKey(), is(), and key() inherited from YTNode for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ItemSectionHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is ItemSectionHeader & { [k in string]: R }\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Using Type Guard and Casting Methods for YTNode Derivatives in TypeScript\nDESCRIPTION: Presents type guard and casting utility methods (is, as, hasKey, key) designed for robust runtime type verification and property assertion on YTNode-based classes such as SegmentedLikeDislikeButton. These methods enable runtime checking and safe property access, casting an instance to different known node types or extracting a property in a typed-safe fashion. These require TypeScript’s generic types and may throw errors if assertions fail, ensuring only valid property or type access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SegmentedLikeDislikeButton.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Check if the node is of the given type.\n * is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n *\n * Cast to one of the given types.\n * as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n *\n * Check for a key without asserting the type.\n * hasKey<T extends string, R = any>(key: T): this is SegmentedLikeDislikeButton & { [k in string]: R };\n *\n * Assert that the node has the given key and return it.\n * key<T extends string, R = any>(key: T): Maybe;\n */\n\n```\n\n----------------------------------------\n\nTITLE: Defining Optional NavigationEndpoint Property in TypeScript\nDESCRIPTION: Declares an optional property `endpoint` of type `NavigationEndpoint` within the `ShareTarget` class. This property likely holds navigation details associated with the share target, if available.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareTarget.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nendpoint?: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Declaring Inherited type Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Declares the readonly `type` property inherited from the base `YTNode` class. This property holds the type identifier string for the node instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelHeaderLinksView Class Constructor - TypeScript\nDESCRIPTION: Constructor for ChannelHeaderLinksView class that takes a RawNode data parameter and initializes the instance. Extends YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelHeaderLinksView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ChannelHeaderLinksView(data: RawNode): ChannelHeaderLinksView\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelSwitcherPage Class - TypeScript\nDESCRIPTION: Class definition for ChannelSwitcherPage that extends YTNode. Contains properties for header, contents and type, along with inherited methods for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelSwitcherPage.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelSwitcherPage extends YTNode {\n  static type = 'ChannelSwitcherPage';\n  header: YTNode;\n  contents: null | ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is ChannelSwitcherPage & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: TranscriptSearchBox Class Definition in TypeScript\nDESCRIPTION: The definition of the TranscriptSearchBox class that extends YTNode. It contains properties for the formatted placeholder text, clear button, navigation endpoint, and search button functionality.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSearchBox.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'TranscriptSearchBox'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nformatted_placeholder: Text\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nclear_button: null | Button\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nendpoint: NavigationEndpoint\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nsearch_button: null | Button\n```\n\n----------------------------------------\n\nTITLE: Defining FindFunctionResult Type Alias in TypeScript\nDESCRIPTION: Type declaration for FindFunctionResult object that contains properties for tracking function details including position markers (start/end), function name, associated node record, and result string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/type-aliases/FindFunctionResult.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype FindFunctionResult = {\n  end: number;\n  name: string;\n  node: Record<string, any>;\n  result: string;\n  start: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking and Conversion Methods for YTNode\nDESCRIPTION: Inherited methods from YTNode that provide functionality for type checking (is), type conversion (as), and property access (hasKey, key) with type safety features.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UploadTimeFactoid.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is UploadTimeFactoid & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Helper Methods Implementation - TypeScript\nDESCRIPTION: Implementation of inherited helper methods from YTNode including type checking and property access methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelFeaturedContent.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ChannelFeaturedContent & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining the Duration Object Structure in TypeScript\nDESCRIPTION: Structure of the duration object property in the WatchCardCompactVideo class, containing seconds (number) and text (string) properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/WatchCardCompactVideo.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nduration: `object`\n\n#### seconds\n\n> **seconds**: `number`\n\n#### text\n\n> **text**: `string`\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Instance Property in ThumbnailOverlayBadgeView\nDESCRIPTION: Read-only property definition for the type instance property in ThumbnailOverlayBadgeView. This property is inherited from the YTNode class and identifies the node type at instance level.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayBadgeView.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: `string`\n```\n\n----------------------------------------\n\nTITLE: Checking Existence of Arbitrary Keys with hasKey<T, R>() Method in TypeScript\nDESCRIPTION: The hasKey<T, R>() method checks if a node possesses a property with the given key, optionally inferring its type. Inputs: the property key as a string, with optional output type R. Output: boolean type guard. Useful in situations where node shape is dynamic or partially known, enabling safe dynamic property checks across YTNode trees.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchEndpoint.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SearchEndpoint & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Type Helper Methods Implementation\nDESCRIPTION: Implementation of helper methods for type checking and property access, including as(), is(), hasKey(), and key() methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PdgCommentChip.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is PdgCommentChip & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Type Property Definition\nDESCRIPTION: Static type property defining the endpoint type name\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistEditEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'PlaylistEditEndpoint'\n```\n\n----------------------------------------\n\nTITLE: Defining LibraryContinuation Class Constructor in TypeScript\nDESCRIPTION: Constructor for the LibraryContinuation class that takes an ApiResponse and Actions as parameters. It initializes the class instance with the provided data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/LibraryContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew LibraryContinuation(`response`, `actions`): [`LibraryContinuation`](LibraryContinuation.md)\n```\n\n----------------------------------------\n\nTITLE: ChannelThumbnailWithLink Constructor Implementation\nDESCRIPTION: Constructor that takes RawNode data and initializes the ChannelThumbnailWithLink instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelThumbnailWithLink.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew ChannelThumbnailWithLink(data: RawNode): ChannelThumbnailWithLink\n```\n\n----------------------------------------\n\nTITLE: Defining Service Name Property in TypeScript\nDESCRIPTION: Declares a mandatory property `service_name` of type `string` within the `ShareTarget` class. This property stores the name of the service associated with the share target (e.g., 'FACEBOOK', 'WHATSAPP').\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareTarget.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nservice_name: string\n```\n\n----------------------------------------\n\nTITLE: Inherited Utility Methods from YTNode in TypeScript\nDESCRIPTION: This section outlines utility methods inherited from the base `YTNode` class. `is()` checks if the node instance matches one of the provided types. `as()` attempts to cast the node to one of the given types, throwing an error if it fails. `hasKey()` checks for the presence of a property key without type assertion. `key()` asserts the presence of a key and returns its value wrapped in a `Maybe` object for safe access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplayChatItemAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Methods inherited from YTNode class\n\n/**\n * Check if the node is of the given type.\n */\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\n/**\n * Cast to one of the given types.\n */\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\n/**\n * Check for a key without asserting the type.\n */\nhasKey<T extends string, R = any>(key: T): this is ReplayChatItemAction & { [k in string]: R };\n\n/**\n * Assert that the node has the given key and return it.\n */\nkey<T extends string, R = any>(key: T): Maybe<R>;\n```\n\n----------------------------------------\n\nTITLE: Type Definition and Properties for ThumbnailOverlayNowPlaying in TypeScript\nDESCRIPTION: Static and instance type properties for the ThumbnailOverlayNowPlaying class. The static type property identifies this class as 'ThumbnailOverlayNowPlaying' and the instance contains a text property for the overlay content.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayNowPlaying.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ThumbnailOverlayNowPlaying'\ntext: string\n```\n\n----------------------------------------\n\nTITLE: Initializing RecognitionShelf Instance (TypeScript)\nDESCRIPTION: Defines the constructor for the RecognitionShelf class. It takes raw node data (`RawNode`) as input and initializes a new RecognitionShelf instance. This constructor overrides the base YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew RecognitionShelf(data: RawNode): RecognitionShelf\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Accessor in AccountInfo Class\nDESCRIPTION: This getter method provides access to the parsed response page. It returns an IParsedResponse object, which likely contains structured data from the API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/AccountInfo.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nget page(): IParsedResponse\n```\n\n----------------------------------------\n\nTITLE: Defining the Inherited 'as' Method in YTNode (TypeScript)\nDESCRIPTION: Shows the inherited method `as` from the `YTNode` class. This method allows casting the current node instance to one of the specified `YTNode` constructor types, throwing an error if the instance is not assignable to any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nas<T, K>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Inherited 'key' Property Access Method Signature (TypeScript)\nDESCRIPTION: Signature of the inherited `key` method from `YTNode`. It asserts that the `ShowLiveChatDialogAction` instance has the specified property key (passed as `key`) and returns its value wrapped in a `Maybe` container. It throws an error if the key does not exist on the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatDialogAction.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Defining KidsCategoriesHeader Class Properties in TypeScript\nDESCRIPTION: Declaration of static and instance properties for the KidsCategoriesHeader class, including category_tabs as an ObservedArray of KidsCategoryTab objects and an optional privacy_button.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsCategoriesHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'kidsCategoriesHeader'\n\ncategory_tabs: ObservedArray<KidsCategoryTab>\nprivacy_button: null | Button\n```\n\n----------------------------------------\n\nTITLE: Queue State Accessors\nDESCRIPTION: Various getter methods for queue state including update interval, last update time, and next update ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/SmoothedQueue.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nget estimated_update_interval(): null | number\nget last_update_time(): null | number\nget next_update_id(): any\nget poll_response_delay_queue(): DelayQueue\n```\n\n----------------------------------------\n\nTITLE: Symbol Type Creation in TypeScript\nDESCRIPTION: Method that creates and returns a symbol type. Located in the parser helpers implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/Maybe.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsymbol(): symbol\n```\n\n----------------------------------------\n\nTITLE: Accessing YouTube Settings Page in TypeScript\nDESCRIPTION: Getter method to retrieve the IBrowseResponse object representing the settings page.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Settings.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget page(): IBrowseResponse\n```\n\n----------------------------------------\n\nTITLE: Implementing New Renderer Parser in TypeScript\nDESCRIPTION: Example of how to implement a new renderer parser for 'verticalListRenderer'. This code demonstrates the structure and required elements for adding a new renderer to the YouTube.js parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/updating-the-parser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Parser, RawNode } from '../index.js';\nimport { YTNode } from '../helpers.js';\n\nexport default class VerticalList extends YTNode {\n  static type = 'VerticalList';\n\n  header;\n  contents;\n\n  constructor(data: RawNode) {\n    super();\n    // parse the data here, ex;\n    this.header = Parser.parseItem(data.header);\n    this.contents = Parser.parseArray(data.contents);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ICacheConstructor Interface in TypeScript\nDESCRIPTION: Interface definition for a cache constructor that creates ICache instances. Takes a required persistent boolean flag and an optional persistent_directory string parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/interfaces/ICacheConstructor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ICacheConstructor(persistent: boolean, persistent_directory?: string): ICache\n```\n\n----------------------------------------\n\nTITLE: Defining and Extending RichItem with YTNode - TypeScript\nDESCRIPTION: Defines the RichItem class, which extends the YTNode base class and is used for parsing and representing a YouTube RichItem node. The constructor takes a data object of the RawNode type and initializes the node, while the content property holds the parsed node content. The class and its members rely on TypeScript features such as generics for type checks and enforce a static type property. Dependencies include the YTNode class and related type definitions, with expected inputs as node data from the YouTube API and outputs as strongly typed node instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass RichItem extends YTNode {\n  static type = 'RichItem';\n\n  /**\n   * @param {RawNode} data - Raw node data from YouTube API response\n   */\n  constructor(data: RawNode) {\n    super();\n    // Implementation details are in the actual file\n  }\n\n  /**\n   * Parsed content of the RichItem node\n   */\n  content: YTNode;\n}\n\n```\n\n----------------------------------------\n\nTITLE: Type Checking and Property Access Methods for YTNode - TypeScript\nDESCRIPTION: Implements type-safe utility methods on the YTNode base, including is(), as(), hasKey(), and key(). These methods facilitate runtime type assertions, casting to allowed node variants, checking for property existence, and safely accessing properties with Maybe semantics. The methods use TypeScript generics for robust type safety and throw errors on illegal casts or missing properties, assuming the YouTube.js parser context.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelTitleV15.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Checks if this node matches one of the given constructors\n}\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Casts this node to one of the allowed types or throws\n}\n\nhasKey<T extends string, R = any>(key: T): this is this & { [k in string]: R } {\n  // Tests if the property key exists without asserting the type\n}\n\nkey<T extends string, R = any>(key: T): Maybe {\n  // Returns the value of the property wrapped in Maybe, or throws if not found\n}\n```\n\n----------------------------------------\n\nTITLE: TextRun toString Method Implementation\nDESCRIPTION: Implementation of the toString method that returns the text content as a string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/TextRun.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntoString(): string\n```\n\n----------------------------------------\n\nTITLE: Type Property Definition\nDESCRIPTION: Static type property definition for the PrefetchWatchCommand class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PrefetchWatchCommand.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'PrefetchWatchCommand'\n```\n\n----------------------------------------\n\nTITLE: Creating Text from AttributedText in TypeScript\nDESCRIPTION: Static method to create a Text instance from AttributedText data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Text.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic fromAttributed(data: AttributedText): Text\n```\n\n----------------------------------------\n\nTITLE: Defining Optional icon_type Property in RichListHeader (TypeScript)\nDESCRIPTION: Declares an optional string property `icon_type` within the `RichListHeader` class. This property likely holds the type identifier for an icon associated with the header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\noptional icon_type: string\n```\n\n----------------------------------------\n\nTITLE: Static Type Declaration for Dropdown Class in TypeScript\nDESCRIPTION: Static type property that overrides the YTNode base class's static type, defining this class as 'Dropdown'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Dropdown.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'Dropdown'\n```\n\n----------------------------------------\n\nTITLE: Defining Optional ToggleButton Property in TypeScript\nDESCRIPTION: Declares an optional property `button` within the `SearchSubMenu` class. This property can hold either `null` or an instance of the `ToggleButton` class, representing a toggleable button element within the search sub-menu, possibly for activating/deactivating filters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\noptional button: null | ToggleButton\n```\n\n----------------------------------------\n\nTITLE: Implementing getApiPath Method in GetKidsBlocklistPickerCommand Class\nDESCRIPTION: Method that returns the API path for the GetKidsBlocklistPicker endpoint. The implementation returns 'kids/blocklist_picker'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GetKidsBlocklistPickerCommand.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetApiPath(): string {\n  return 'kids/blocklist_picker';\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AudioConfig Interface Properties in TypeScript\nDESCRIPTION: Defines the audio configuration properties including loudness settings and format-specific controls.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawPlayerConfig.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\naudioConfig: {\n  enablePerFormatLoudness: boolean;\n  loudnessDb?: number;\n  perceptualLoudnessDb?: number;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ObjectInferenceType Interface Properties in TypeScript\nDESCRIPTION: Interface definition for ObjectInferenceType with three properties: type (fixed as 'object'), keys (of type KeyInfo), and optional (boolean flag). This interface is used in the YouTube.js parser for type inference of objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/interfaces/ObjectInferenceType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface ObjectInferenceType {\n    type: \"object\";\n    keys: KeyInfo;\n    optional: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing InteractionManager in TypeScript\nDESCRIPTION: Constructor for the InteractionManager class. It takes an 'actions' parameter of type Actions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/InteractionManager.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew InteractionManager(actions: Actions): InteractionManager\n```\n\n----------------------------------------\n\nTITLE: Defining ReelWatchRequest Type Alias in TypeScript\nDESCRIPTION: This code defines the ReelWatchRequest type alias as an object with various optional properties. It includes fields for disabling player response, specifying input type, params, and a nested playerRequest object with its own set of properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/ReelWatchRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ReelWatchRequest = {\n  disablePlayerResponse?: boolean;\n  inputType?: string;\n  params?: string;\n  playerRequest?: {\n    contentCheckOk?: boolean;\n    params?: string;\n    racyCheckOk?: boolean;\n    videoId: string;\n  };\n};\n```\n\n----------------------------------------\n\nTITLE: Defining HomeFeed Class in TypeScript\nDESCRIPTION: This code snippet defines the HomeFeed class, which extends FilterableFeed. It includes a constructor and properties for contents and header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HomeFeed.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass HomeFeed extends FilterableFeed<IBrowseResponse> {\n  contents?: AppendContinuationItemsAction | ReloadContinuationItemsCommand | RichGrid;\n  header?: FeedTabbedHeader;\n\n  constructor(actions: Actions, data: ApiResponse | IBrowseResponse, already_parsed: boolean = false) {\n    super(actions, data, already_parsed);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Type Casting Method Signature (`as`) in TypeScript\nDESCRIPTION: Presents the signature of the inherited `as` method from `YTNode`. This generic method allows casting the current `SortFilterSubMenu` instance to one of the specified `YTNode` subtypes (`K`), throwing an error if the instance is not assignable to any of the provided types. It accepts a variable number of `YTNodeConstructor` types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterSubMenu.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Static PrepareStackTrace Method Definition\nDESCRIPTION: Optional static method for customizing stack trace formatting. Takes an Error object and array of CallSite objects as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/InnertubeError.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic prepareStackTrace?(err: Error, stackTraces: CallSite[]): any\n```\n\n----------------------------------------\n\nTITLE: MetadataRow Type Checking Methods Implementation\nDESCRIPTION: Implementation of type checking and assertion methods inherited from YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MetadataRow.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is MetadataRow & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: HowThisWasMadeSectionView Constructor Definition in TypeScript\nDESCRIPTION: Constructor for the HowThisWasMadeSectionView class that takes RawNode data as a parameter and overrides the parent YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HowThisWasMadeSectionView.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew HowThisWasMadeSectionView(data): HowThisWasMadeSectionView\n```\n\n----------------------------------------\n\nTITLE: TypeScript Type Declarations for ConversationBar\nDESCRIPTION: Type declarations for the ConversationBar class, including property definitions and method signatures. This includes inherited methods from YTNode for type checking and key management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ConversationBar.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntype ConversationBar = {\n  readonly type: string;\n  availability_message: null | Message;\n  \n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n  hasKey<T extends string, R = any>(key: T): this is ConversationBar & { [k in string]: R };\n  key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Casting Node Type with 'as' Method in TypeScript\nDESCRIPTION: Inherited from `YTNode`, this method allows casting the current node instance to one of the specified `YTNode` subclasses (`types`). It takes one or more `YTNodeConstructor` types as arguments. It returns the instance cast to the specified type or throws an error if the instance is not of one of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveBannerForLiveChatCommand.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: GridContinuation Constructor Implementation\nDESCRIPTION: Constructor for the GridContinuation class that takes a RawNode data parameter. It initializes the GridContinuation instance with the provided data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/GridContinuation.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew GridContinuation(data: RawNode): GridContinuation\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods in TypeScript\nDESCRIPTION: Implementation of utility methods including type checking (is, as) and key-related operations (hasKey, key) inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LockupView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is LockupView & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Using Inherited 'is' Method for Type Checking in TypeScript\nDESCRIPTION: Inherited from YTNode, the 'is' method checks if the RemoveChatItemByAuthorAction instance matches one of the provided YTNode constructor types (K). It returns a type predicate indicating whether the instance is of the specified type(s).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemByAuthorAction.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nis<T, K>(...types): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Inheriting is Method in RichMetadata (TypeScript)\nDESCRIPTION: Inherits the `is` method from the `YTNode` base class. This method checks if the current node instance is of one of the specified `YTNode` derived types. It takes one or more `YTNodeConstructor` types as arguments and returns a boolean type predicate (`this is InstanceType<K[number]>`).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Implementing Best Thumbnail Accessor in TypeScript\nDESCRIPTION: Getter method that returns the highest quality thumbnail available for the author.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Author.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget best_thumbnail(): undefined | Thumbnail\n```\n\n----------------------------------------\n\nTITLE: Undisliking a Comment in YouTube.js\nDESCRIPTION: Method to undislike a comment. It returns a Promise that resolves to an ApiResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/CommentView.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nundislike(): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader 'strapline_text_one' Property in TypeScript\nDESCRIPTION: Declares the `strapline_text_one` property for the `MusicResponsiveHeader` class. It holds a `Text` object representing the primary strapline text displayed in the header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstrapline_text_one: Text\n```\n\n----------------------------------------\n\nTITLE: Getting Streaming Info in MediaInfo Class\nDESCRIPTION: This inherited method returns a cleaned-up representation of adaptive_formats. It optionally accepts URL transformer and format filter functions to customize the output.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTShorts/classes/ShortFormVideoInfo.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetStreamingInfo(url_transformer?: URLTransformer, format_filter?: FormatFilter): StreamingInfo\n```\n\n----------------------------------------\n\nTITLE: Running YouTube.js Example with Deno\nDESCRIPTION: Command to execute the YouTube.js example in the Deno runtime. The command includes permissions for network access (--allow-net) and file writing (--allow-write) which are required for the example to function properly.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/deno/README.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ndeno run --allow-net --allow-write index.ts\n```\n\n----------------------------------------\n\nTITLE: Defining Explore Class Properties\nDESCRIPTION: Property definitions for the Explore class including sections array containing MusicCarouselShelf objects and top_buttons array containing MusicNavigationButton objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Explore.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nsections: ObservedArray<MusicCarouselShelf>\ntop_buttons: MusicNavigationButton[]\n```\n\n----------------------------------------\n\nTITLE: Defining and Constructing SearchSuggestionsSection - YouTube.js (TypeScript)\nDESCRIPTION: This TypeScript snippet defines the SearchSuggestionsSection class, extending from the base YTNode for representing search suggestion results. It includes a constructor that accepts a RawNode object, sets up an observed array of child nodes, and establishes the static and instance type properties used for runtime type checking and parsing consistency. Dependencies include the YTNode superclass and various type aliases/interfaces from the YouTube.js helpers. The main parameter is 'data', which should be a valid RawNode representation of YouTube search suggestions. Inputs are typically raw parsed API data; outputs are SearchSuggestionsSection class instances for use in further processing. All code and comments must be preserved as they appear in the original TypeScript implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSuggestionsSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// src/parser/classes/SearchSuggestionsSection.ts\n\nimport YTNode from \"../../Helpers/classes/YTNode\";\nimport type { RawNode } from \"../../APIResponseTypes/type-aliases/RawNode\";\nimport { ObservedArray } from \"../../Helpers/type-aliases/ObservedArray\";\n\nexport default class SearchSuggestionsSection extends YTNode {\n  static type = 'SearchSuggestionsSection';\n  contents: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    // ... implementation details handled here\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining the Subtitle Property in RecognitionShelf (TypeScript)\nDESCRIPTION: Declares the `subtitle` property for the RecognitionShelf class. It holds a `Text` object representing the subtitle displayed within the recognition shelf.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nsubtitle: Text\n```\n\n----------------------------------------\n\nTITLE: GridShow Class Properties Definition in TypeScript\nDESCRIPTION: Definition of properties for the GridShow class including title, thumbnail_renderer, endpoint, long_byline_text, thumbnail_overlays, and author properties. These properties represent different aspects of a grid-style show display.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridShow.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text\nthumbnail_renderer: null | ShowCustomThumbnail\nendpoint: NavigationEndpoint\nlong_byline_text: Text\nthumbnail_overlays: null | ObservedArray<ThumbnailOverlayBottomPanel>\nauthor: Author\n```\n\n----------------------------------------\n\nTITLE: Instance Properties Definition for DownloadButton Class in TypeScript\nDESCRIPTION: Property definitions for the DownloadButton class including style, size, endpoint, and target_id properties that store button styling and navigation information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DownloadButton.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nstyle: string\nsize: string\nendpoint: NavigationEndpoint\ntarget_id: string\n```\n\n----------------------------------------\n\nTITLE: Defining ArrayInferenceType Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias named ArrayInferenceType. It represents a union type of three different object structures, likely used for type inference in array operations within the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/type-aliases/ArrayInferenceType.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nArrayInferenceType: `object` | `object` | `object`\n```\n\n----------------------------------------\n\nTITLE: Defining MusicResponsiveHeader 'buttons' Property in TypeScript\nDESCRIPTION: Declares the `buttons` property for the `MusicResponsiveHeader` class. It holds an `ObservedArray` containing various button types like `Button`, `DownloadButton`, `ToggleButton`, `Menu`, or `MusicPlayButton` present in the header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbuttons: ObservedArray<Button | DownloadButton | ToggleButton | Menu | MusicPlayButton>\n```\n\n----------------------------------------\n\nTITLE: Type Definition Helper Methods in TypeScript\nDESCRIPTION: Helper methods for type checking and key access in the CreatePlaylistDialog class, including is(), as(), hasKey(), and key() methods inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreatePlaylistDialog.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is CreatePlaylistDialog & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining MusicLargeCardItemCarousel Class in TypeScript\nDESCRIPTION: This snippet defines the MusicLargeCardItemCarousel class, which extends YTNode. It includes a constructor, properties for header and panels, and a static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicLargeCardItemCarousel.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicLargeCardItemCarousel extends YTNode {\n  static type = 'MusicLargeCardItemCarousel';\n\n  panels: Panel[];\n  header: any;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting methods from YTNode class (TypeScript)\nDESCRIPTION: The VerticalWatchCardList class inherits several methods from the YTNode parent class including as(), hasKey(), is(), and key() methods for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VerticalWatchCardList.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is VerticalWatchCardList & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: YouTube.js Class Extensions List\nDESCRIPTION: Markdown list documenting all classes that extend the base functionality of YouTube.js, organized by different categories including UI elements, actions, commands, and service endpoints.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/YTNode.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## Extended by\n\n- [`ChildElement`](../../Misc/classes/ChildElement.md)\n- [`AboutChannel`](../../YTNodes/classes/AboutChannel.md)\n- [`AboutChannelView`](../../YTNodes/classes/AboutChannelView.md)\n[...additional class references...]\n```\n\n----------------------------------------\n\nTITLE: Defining the tooltip Property in SponsorCommentBadge\nDESCRIPTION: Declares the `tooltip` property within the `SponsorCommentBadge` class. This string property holds the text that appears when a user hovers over the sponsor badge.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SponsorCommentBadge.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntooltip: string\n```\n\n----------------------------------------\n\nTITLE: Defining the unseenCount property in RawResponse TypeScript interface\nDESCRIPTION: Optional property definition for 'unseenCount' in the RawResponse interface. This property is a number and typically represents a count of unseen items.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **unseenCount**: `number`\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth2AuthEventHandler Type Alias in TypeScript\nDESCRIPTION: Type definition for a function that handles OAuth2 authentication events. The function accepts an object with credentials property of type OAuth2Tokens and returns void.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/OAuth2AuthEventHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nOAuth2AuthEventHandler: (`data`) => `void`\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking Methods\nDESCRIPTION: Methods for type checking and casting including as(), is(), hasKey() and key() inherited from YTNode\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MultiMarkersPlayerBar.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is MultiMarkersPlayerBar & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Properties Definition for UnifiedSharePanel Class in TypeScript\nDESCRIPTION: Definition of properties for the UnifiedSharePanel class, including third_party_network_section, header, share_panel_version, and show_loading_spinner. These properties store the state and components of the sharing panel.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UnifiedSharePanel.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nthird_party_network_section?: ThirdPartyNetworkSection\nheader: null | SharePanelHeader\nshare_panel_version: number\nshow_loading_spinner?: boolean\nstatic type: string = 'UnifiedSharePanel'\n```\n\n----------------------------------------\n\nTITLE: Inherited Key Existence Check Method Signature (`hasKey`) in TypeScript\nDESCRIPTION: Shows the signature of the inherited `hasKey` method from `YTNode`. This generic method checks if the current `SortFilterSubMenu` instance possesses a property with the given string key (`T`). It returns a type predicate (`this is SortFilterSubMenu & { [k in string]: R }`) to narrow the type if the key exists, useful for safe property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterSubMenu.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T, R>(key: T): this is SortFilterSubMenu & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Defining NextNavendpoint Type in TypeScript for YouTube.js API\nDESCRIPTION: Type declaration for the NextNavendpoint object which contains a urlEndpoint property with a url string. This type is used to represent navigation endpoints in the YouTube.js API response structure.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/NextNavendpoint.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype NextNavendpoint = object\n\ntype declaration\n\nurlEndpoint: object\n\nurlEndpoint.url: string\n```\n\n----------------------------------------\n\nTITLE: Defining the Static Type Property in RecognitionShelf (TypeScript)\nDESCRIPTION: Defines a static `type` property on the RecognitionShelf class itself. It holds the string identifier 'RecognitionShelf', used for identifying nodes of this type. This overrides the static `type` property from the base `YTNode` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'RecognitionShelf'\n```\n\n----------------------------------------\n\nTITLE: Inheriting hasKey Method for Property Check in YTNode TypeScript Base Class\nDESCRIPTION: Describes the inherited `hasKey` method from the `YTNode` base class. This method checks if the node instance possesses a property with the specified key, returning a boolean type predicate without asserting the property's type. It's useful for safe property existence checks.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelHeader.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SharePanelHeader & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Defining FindFunctionArgs Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias called FindFunctionArgs. It is an object type with three optional properties: 'includes' for a string that must be in the function's code, 'name' for the function's name, and 'regexp' for a regular expression the function's code must match.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/type-aliases/FindFunctionArgs.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype FindFunctionArgs = {\n  includes?: string;\n  name?: string;\n  regexp?: RegExp;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ThumbnailOverlayResumePlayback Class in TypeScript\nDESCRIPTION: Class definition for ThumbnailOverlayResumePlayback that extends YTNode. It includes a static type property, a constructor that accepts a RawNode parameter, and a percent_duration_watched property to track video watch progress.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayResumePlayback.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ThumbnailOverlayResumePlayback'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\npercent_duration_watched: number\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): ThumbnailOverlayResumePlayback\n```\n\n----------------------------------------\n\nTITLE: Safely Accessing Keys with key<T, R>() Method in TypeScript\nDESCRIPTION: The key<T, R>() method asserts and accesses a property of the node by key name, returning it wrapped in a Maybe type for safe handling. Inputs: a property key of type string. Output: a Maybe-wrapped property value. Throws if the property does not exist, enforcing type safety when dealing with potentially absent properties in dynamic node structures.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchEndpoint.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inherited 'is' Method from YTNode (TypeScript)\nDESCRIPTION: Shows the signature of the `is` method, inherited from the `YTNode` base class. This method checks if the current node instance is of one of the specified `YTNode` subtypes, returning a boolean type predicate. It accepts a variable number of `YTNodeConstructor` types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: VideoMetadataCarouselView Constructor Implementation in TypeScript\nDESCRIPTION: Implements the constructor for the VideoMetadataCarouselView class which accepts a RawNode data parameter and returns a new instance of VideoMetadataCarouselView.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoMetadataCarouselView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew VideoMetadataCarouselView(data: RawNode): VideoMetadataCarouselView\n```\n\n----------------------------------------\n\nTITLE: Defining the Inherited 'hasKey' Method in YTNode (TypeScript)\nDESCRIPTION: Shows the inherited method `hasKey` from the `YTNode` class. This method acts as a type guard, checking if the current node instance possesses a specific key without asserting the type of the key's value. It returns a boolean indicating presence and narrows the type if true.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T, R>(key: T): this is SignalServiceEndpoint & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Defining OAuth Constants in TypeScript\nDESCRIPTION: Declares a constant object containing regex patterns for OAuth authentication. Includes patterns for client identity validation and TV script matching.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Constants/variables/OAUTH.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst OAUTH: object = {\n  REGEX: {\n    CLIENT_IDENTITY: RegExp,\n    TV_SCRIPT: RegExp\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Class Reference Links\nDESCRIPTION: A markdown-formatted list of class links in the YouTube.js library, providing navigation to individual class documentation pages.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Classes\n\n- [AboutChannel](classes/AboutChannel.md)\n- [AboutChannelView](classes/AboutChannelView.md)\n- [AccountChannel](classes/AccountChannel.md)\n[...additional classes truncated for brevity...]\n```\n\n----------------------------------------\n\nTITLE: RendererContext Properties Definition in TypeScript\nDESCRIPTION: Property declarations for the RendererContext class, defining accessibility_context and command_context properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/RendererContext.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\naccessibility_context: AccessibilityContext;\ncommand_context: CommandContext;\n```\n\n----------------------------------------\n\nTITLE: Defining MissingParamError Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for MissingParamError class that extends InnertubeError. Takes a message string and optional info parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/MissingParamError.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew MissingParamError(message: string, info?: any): MissingParamError\n```\n\n----------------------------------------\n\nTITLE: Getting Playlists from Memo in YouTube.js Feed Class\nDESCRIPTION: This static method retrieves all playlists on a given page via memo. It takes a Memo object as a parameter and returns an ObservedArray of GridPlaylist, LockupView, or Playlist objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Search.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited Readonly Type Property in TypeScript\nDESCRIPTION: Defines the inherited `type` property from the base `YTNode` class. It is a readonly string property, likely indicating the node type. The specific definition is located in the `YTNode` class implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadataRow.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Initializing Live Chat Instance\nDESCRIPTION: Shows how to create a live chat instance from the livestream information object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/livechat/README.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst livechat = await info.getLiveChat();\n```\n\n----------------------------------------\n\nTITLE: Defining Transcript Class in TypeScript\nDESCRIPTION: Declaration of the Transcript class that extends YTNode and handles transcript content. It includes a constructor that takes in raw node data, properties for content storage, and type definitions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Transcript.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Transcript extends YTNode {\n  static type = 'Transcript';\n\n  content: null | TranscriptSearchPanel;\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring owner Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `owner` property for the `SlimVideoMetadata` class. It is of type `YTNode`, representing the channel or user who uploaded the video.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nowner: YTNode\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited Readonly 'type' Property in TypeScript\nDESCRIPTION: Declares the inherited readonly `type` property for `MusicResponsiveHeader` instances, originating from the base `YTNode` class. This property holds the string identifier for the node type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Methods in TypeScript\nDESCRIPTION: Methods inherited from YTNode including type checking and property access utilities like as(), is(), hasKey(), and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BackgroundPromo.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is BackgroundPromo & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining InlineSettingStatus Type Alias in TypeScript\nDESCRIPTION: Defines a TypeScript type alias for InlineSettingStatus that can have one of two possible string values: \"INLINE_SETTING_STATUS_DISABLED\" or \"INLINE_SETTING_STATUS_ON\". This type is used in the YouTube.js library's CommandEndpoints definitions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/InlineSettingStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype InlineSettingStatus = \"INLINE_SETTING_STATUS_DISABLED\" | \"INLINE_SETTING_STATUS_ON\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Accessor\nDESCRIPTION: Getter method that returns the IBrowseResponse object representing the current page data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Explore.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget page(): IBrowseResponse\n```\n\n----------------------------------------\n\nTITLE: YTNode Methods for Type Checking and Property Access\nDESCRIPTION: Inherited methods from YTNode that provide type checking and property access functionality. These methods allow for safe type casting, key existence checks, and property access with a Maybe monad.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DislikeButtonView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is DislikeButtonView & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Converting Inference Types to TypeScript Declarations\nDESCRIPTION: Function that takes an inference type and indentation level as input and generates a properly formatted TypeScript type declaration string. The indentation parameter defaults to 0 and is used for formatting nested object structures.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/toTypeDeclaration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntoTypeDeclaration(inference_type: InferenceType, indentation: number = 0): string\n```\n\n----------------------------------------\n\nTITLE: Using Inherited 'key' Method for Property Access in TypeScript\nDESCRIPTION: Documents the inherited `key` method from `YTNode`. It asserts that the `SingleActionEmergencySupport` instance has a specific key and returns its value wrapped in a `Maybe` object, throwing an error if the key doesn't exist. Used for potentially nullable property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleActionEmergencySupport.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Using Inherited 'as' Method for Type Casting in TypeScript\nDESCRIPTION: Documents the inherited `as` method from `YTNode`. This method allows casting the `SingleActionEmergencySupport` instance to one of the specified YTNode subtypes, throwing an error if the cast is invalid. Requires YTNodeConstructor types as input.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleActionEmergencySupport.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Getting Videos from Memo in YouTube.js Feed Class\nDESCRIPTION: This static method retrieves all videos on a given page via memo. It returns an ObservedArray of various video-related objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/Channel.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Defining ShareEntityServiceRequest Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias for ShareEntityServiceRequest. It's an object type with two optional string properties: clientParams and serializedSharedEntity. This type is likely used for structuring requests to a share entity service in the YouTube API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/ShareEntityServiceRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype ShareEntityServiceRequest = {\n  clientParams?: string;\n  serializedSharedEntity?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining WatchRequest Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the WatchRequest type alias as an object with multiple optional properties. These properties are used to configure various aspects of a watch request, such as content check, player response, playlist information, and video settings.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/WatchRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype WatchRequest = {\n  contentCheckOk?: boolean;\n  disablePlayerResponse?: boolean;\n  overrideMutedAtStart?: boolean;\n  params?: string;\n  playerRequest?: Record<string, any>;\n  playlistId?: string;\n  playlistIndex?: number;\n  racyCheckOk?: boolean;\n  startTimeSecs?: string;\n  videoId?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: PlaylistSidebar Class Definition in TypeScript\nDESCRIPTION: Defines the PlaylistSidebar class that extends YTNode. Contains properties for storing playlist sidebar items and methods for accessing contents and type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistSidebar.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass PlaylistSidebar extends YTNode {\n  static type = 'PlaylistSidebar';\n  items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n  }\n\n  get contents(): ObservedArray<YTNode> {\n    return this.items;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Key Access Method Signature (`key`) in TypeScript\nDESCRIPTION: Outlines the signature of the inherited `key` method from `YTNode`. This generic method attempts to access the value associated with the specified string key (`T`) on the `SortFilterSubMenu` instance. It asserts the key's existence (throwing an error if not found) and returns the value wrapped in a `Maybe` utility class for safe handling of potentially undefined results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterSubMenu.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T, R>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Accessing the Platform Shim in TypeScript\nDESCRIPTION: Static getter method that returns the platform shim interface. This provides access to the platform-specific implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Platform.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nget static shim(): PlatformShim\n```\n\n----------------------------------------\n\nTITLE: Type Checking and Key Validation Methods\nDESCRIPTION: Implementation of utility methods for type checking (is, as) and key validation (hasKey, key) inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CarouselLockup.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is CarouselLockup & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Using Inherited 'hasKey' Method for Property Existence Check in TypeScript\nDESCRIPTION: Inherited from YTNode, the 'hasKey' method checks if the RemoveChatItemByAuthorAction instance contains a property with the specified key (T). It returns a type predicate indicating whether the key exists, useful for safe property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemByAuthorAction.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T, R>(key): this is RemoveChatItemByAuthorAction & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: ChannelMobileHeader Properties Definition - TypeScript\nDESCRIPTION: Class properties definition including title (Text object) and type (readonly string) declarations.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelMobileHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text;\nreadonly type: string;\nstatic type: string = 'ChannelMobileHeader';\n```\n\n----------------------------------------\n\nTITLE: Constructor Implementation for UpdateViewershipAction Class\nDESCRIPTION: Implementation of the constructor for UpdateViewershipAction class that accepts a RawNode parameter and returns an instance of UpdateViewershipAction. It overrides the parent YTNode constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateViewershipAction.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew UpdateViewershipAction(data): UpdateViewershipAction\n```\n\n----------------------------------------\n\nTITLE: Inherited as Method in RichListHeader (TypeScript)\nDESCRIPTION: Inherited method `as` from `YTNode`. It allows casting the current node instance to one of the specified `YTNode` subtypes (passed as constructor arguments). Throws an error if the instance is not assignable to any of the provided types. Uses generics `T` (base type) and `K` (array of constructors) for type safety.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Format Parser Enhancement\nDESCRIPTION: Implementation of audio language extraction from captions in Format class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass Format {\n  extractAudioLanguageFromCaptions() {\n    // New functionality for extracting audio language\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Type Checking and Key Management Methods\nDESCRIPTION: Inherited utility methods from YTNode for type checking and key management, including as(), is(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProductListHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is ProductListHeader & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining RawData Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the RawData type alias as either a single RawNode or an array of RawNodes. It's used in the context of parsing raw API responses in the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/RawData.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype RawData = RawNode | RawNode[];\n```\n\n----------------------------------------\n\nTITLE: Implementing Youtube.js with Polyfills in React Native\nDESCRIPTION: Complete implementation file that imports all necessary polyfills, sets up global MMKV storage for caching, implements missing browser APIs like CustomEvent, and initializes the Innertube instance from Youtube.js.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/platform/react-native.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// === START ===  Making Youtube.js work\nimport 'event-target-polyfill';\nimport 'web-streams-polyfill';\nimport 'text-encoding-polyfill';\nimport 'react-native-url-polyfill/auto';\nimport {decode, encode} from 'base-64';\n\nif (!global.btoa) {\n  global.btoa = encode;\n}\n\nif (!global.atob) {\n  global.atob = decode;\n}\n\nimport {MMKV} from 'react-native-mmkv';\n// @ts-expect-error to avoid typings' fuss\nglobal.mmkvStorage = MMKV as any;\n\n// See https://github.com/nodejs/node/issues/40678#issuecomment-1126944677\nclass CustomEvent extends Event {\n  #detail;\n\n  constructor(type: string, options?: CustomEventInit<any[]>) {\n    super(type, options);\n    this.#detail = options?.detail ?? null;\n  }\n\n  get detail() {\n    return this.#detail;\n  }\n}\n\nglobal.CustomEvent = CustomEvent as any;\n\n// === END === Making Youtube.js work\n\nimport Innertube, {UniversalCache} from 'youtubei.js';\n\nlet innertube: Promise<Innertube> = Innertube.create({\n  cache: new UniversalCache(false),\n  generate_session_locally: true,\n});\n\nexport default innertube;\n```\n\n----------------------------------------\n\nTITLE: Get Continuation Data Method Type Definition\nDESCRIPTION: Type definition for getContinuationData method that returns a Promise resolving to either undefined or an IBrowseResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/History.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: YouTube Shelf Retrieval\nDESCRIPTION: Method to find a specific shelf by its title from search results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Search.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for YouTube.js v13.1.0\nDESCRIPTION: Shows the changelog entry for version 13.1.0 of YouTube.js, including new features, bug fixes, and reverts.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: Markdown\nCODE:\n```\n## [13.1.0](https://github.com/LuanRT/YouTube.js/compare/v13.0.0...v13.1.0) (2025-02-21)\n\n\n### Features\n\n* **Channel:** Add `getCourses` method ([#883](https://github.com/LuanRT/YouTube.js/issues/883)) ([b3a4862](https://github.com/LuanRT/YouTube.js/commit/b3a48621518f09d1ce309071499d9626cc1a8488))\n* **CommentView:** Parse `prepareAccountCommand` ([d0d48bf](https://github.com/LuanRT/YouTube.js/commit/d0d48bf525cc2a95dd3397a3142bea113ea9782e))\n* **CommentView:** Parse some extra tooltips ([32125c7](https://github.com/LuanRT/YouTube.js/commit/32125c704565f425806a0721edd96e01028e3fdd))\n* **CompactLink:** Parse `subtitle`, `iconType`, and `iconType` ([6d57353](https://github.com/LuanRT/YouTube.js/commit/6d57353a8021430a5253e2fb2c974ca98d731791))\n* **FormatUtils:** choose more specific format by itag or codec ([#884](https://github.com/LuanRT/YouTube.js/issues/884)) ([1c1577e](https://github.com/LuanRT/YouTube.js/commit/1c1577e85fd46cbfa15bcee6531d9aafdda787e5))\n* **parser:** `Add AnimatedThumbnailOverlayView` ([#903](https://github.com/LuanRT/YouTube.js/issues/903)) ([0cb92d9](https://github.com/LuanRT/YouTube.js/commit/0cb92d9620c13bf6b719b384f917ad2a658e15b1))\n\n\n### Bug Fixes\n\n* **dependencies:** Update `jintr` to version 3.2.1 ([02dfcae](https://github.com/LuanRT/YouTube.js/commit/02dfcae612dd528ce4f1f3f6c62ceefd02a5c790))\n* **DialogView:** Type mismatch ([#897](https://github.com/LuanRT/YouTube.js/issues/897)) ([b731db8](https://github.com/LuanRT/YouTube.js/commit/b731db86c51ba292c848272f28b5a9aa2e2a6956))\n* **FormatUtils:** itag matching ([#886](https://github.com/LuanRT/YouTube.js/issues/886)) ([774b3a7](https://github.com/LuanRT/YouTube.js/commit/774b3a75244db85ceb7b00f658dc2dfeb2eb4e7e))\n* **innertube:** Allowing `getStreamingData` to use client ([#895](https://github.com/LuanRT/YouTube.js/issues/895)) ([5aecd0a](https://github.com/LuanRT/YouTube.js/commit/5aecd0ace96c371f0b15cdc6e45ef09beb5696af))\n* **Innertube:** Properly encoded params in getPost() ([#882](https://github.com/LuanRT/YouTube.js/issues/882)) ([7d5c972](https://github.com/LuanRT/YouTube.js/commit/7d5c972c98d7c69b0b687b241c652f3098907a9f))\n* **LockupMetadataView:** Parse `menuButton` ([3ffdee9](https://github.com/LuanRT/YouTube.js/commit/3ffdee9554b06db137d93e43b33fac124becf31f))\n* **LockupView:** Add overlay nodes used by `VIDEO` views ([424c653](https://github.com/LuanRT/YouTube.js/commit/424c65356c24d19a921e24aadcbbb3cd03ab103a))\n* **LockupView:** Fix `content_image` parsing ([083aec1](https://github.com/LuanRT/YouTube.js/commit/083aec1c805cce6b04a75e4f017b5cdf0bb6108e))\n* **music#getPlaylist:** Handle `ContinuationItem` nodes ([a3fafe2](https://github.com/LuanRT/YouTube.js/commit/a3fafe2f7979313906dbaf1a7f9779f411266d6b)), closes [#904](https://github.com/LuanRT/YouTube.js/issues/904)\n* **Parser:** Add `UpdateEngagementPanelContentCommand` ([3f960ef](https://github.com/LuanRT/YouTube.js/commit/3f960effa24c3b14fa3c6aadf4c7badf0ac965c9))\n* **Playlist:** is_editable ([#894](https://github.com/LuanRT/YouTube.js/issues/894)) ([2b42199](https://github.com/LuanRT/YouTube.js/commit/2b4219959cbbb27cd80788e66b608fdeed3a1f1e))\n\n\n### Reverts\n\n* \"fix(toDash): Fix default audio stream for dubbed movie trailers ([#858](https://github.com/LuanRT/YouTube.js/issues/858))\" ([#896](https://github.com/LuanRT/YouTube.js/issues/896)) ([4325717](https://github.com/LuanRT/YouTube.js/commit/432571769ebc6634c2c9a4c1b5e53cfbbd2a5f0a))\n```\n\n----------------------------------------\n\nTITLE: Defining Recap Class Properties in TypeScript\nDESCRIPTION: Declaration of optional properties for the Recap class, including header and sections.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Recap.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nheader?: MusicHeader | HighlightsCarousel\nsections?: ObservedArray<ItemSection | Message | MusicCarouselShelf>\n```\n\n----------------------------------------\n\nTITLE: Type Checking Method 'hasKey()' in TypeScript\nDESCRIPTION: Method inherited from YTNode that checks if the node has a specific key without asserting its type, returning a type predicate.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Dropdown.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey\\<T extends string, R = any\\>(key: T): this is Dropdown & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: ItemSectionHeader Class Definition in TypeScript\nDESCRIPTION: Class definition for ItemSectionHeader that extends YTNode. It contains a constructor accepting raw node data, title property of Text type, and static type property set to 'ItemSectionHeader'.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ItemSectionHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ItemSectionHeader extends YTNode {\n  static type = 'ItemSectionHeader';\n  title: Text;\n\n  constructor(data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Readonly 'type' Property on RichShelf Instance (TypeScript)\nDESCRIPTION: Documents the inherited readonly `type` property from the base `YTNode` class. On an instance of `RichShelf`, this property holds a string identifying the node type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichShelf.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods\nDESCRIPTION: Inherited helper methods from YTNode class for type checking and key access, including as(), is(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreateCommentEndpoint.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is CreateCommentEndpoint & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining IGetTranscriptResponse Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the IGetTranscriptResponse type alias using the Pick utility type. It selects the 'actions' and 'actions_memo' properties from the IParsedResponse interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/IGetTranscriptResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype IGetTranscriptResponse = Pick<IParsedResponse, \"actions\" | \"actions_memo\">\n```\n\n----------------------------------------\n\nTITLE: DimChatItemAction Helper Methods\nDESCRIPTION: Inherited helper methods from YTNode class including type checking and key validation functions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DimChatItemAction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is DimChatItemAction & { [k in string]: R }\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining TypeScript Function getDynamicParsers\nDESCRIPTION: Function declaration for getDynamicParsers that returns an object type. This function is located in the parser module of the YouTube.js library at line 221.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/getDynamicParsers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ngetDynamicParsers(): object\n```\n\n----------------------------------------\n\nTITLE: Properties Definition - NotificationsMenu Class\nDESCRIPTION: Defines the main properties of the NotificationsMenu class including contents array and header.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/NotificationsMenu.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncontents: Notification[]\nheader: SimpleMenuHeader\n```\n\n----------------------------------------\n\nTITLE: Getting Videos from Memo in TypeScript\nDESCRIPTION: Static method to retrieve all videos from a given page using memo. Returns an ObservedArray of various video types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTKids/classes/HomeFeed.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Get Cache Method Definition\nDESCRIPTION: Defines an asynchronous method to retrieve cached data by key, returning either undefined or an ArrayBuffer.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/interfaces/ICache.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nget(key: string): Promise<undefined | ArrayBuffer>;\n```\n\n----------------------------------------\n\nTITLE: Declaring AccountInfo Class Properties in TypeScript\nDESCRIPTION: This snippet defines the 'contents' property of the AccountInfo class, which can be null or an AccountItemSection object. It represents the main content of the account information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/AccountInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ncontents: null | AccountItemSection\n```\n\n----------------------------------------\n\nTITLE: Defining GetAccountsListInnertubeRequest Type Interface in TypeScript\nDESCRIPTION: TypeScript type definition that specifies the structure for YouTube account list requests. It includes optional properties for call circumstances, channel switcher queries, content owner configurations, navigation endpoints, and various IDs and flags for account management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/GetAccountsListInnertubeRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype GetAccountsListInnertubeRequest = {\n  callCircumstance?: \"SUPPLEMENTAL_USER\" | \"SWITCHING_USERS_FULL\";\n  channelSwitcherQuery?: string;\n  contentOwnerConfig?: Record<string, any>;\n  nextNavendpoint?: NextNavendpoint;\n  obfuscatedSelectedGaiaId?: string;\n  requestType?: string;\n  selectedSerializedDelegationContext?: string;\n  triggerChannelCreation?: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Event Listener in TypeScript\nDESCRIPTION: Removes an event listener from the target's event listener list. It takes the event type, callback function, and optional options as parameters.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/LiveChat.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nremoveEventListener(type: string, callback: null | EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Property for SingleActionEmergencySupport in TypeScript\nDESCRIPTION: Declares a static `type` property for the `SingleActionEmergencySupport` class, overriding the base class property. This property holds the string identifier 'SingleActionEmergencySupport', used for type identification within the parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleActionEmergencySupport.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SingleActionEmergencySupport';\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of type checking and key access methods inherited from YTNode. Includes methods for type casting, key checking, and safe key access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlaylistVideoThumbnail.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is PlaylistVideoThumbnail & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Declaration for Class Name Sanitization\nDESCRIPTION: Function signature for sanitizeClassName that takes a string input parameter and returns a sanitized string. This function is defined in the parser module of YouTubei.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/sanitizeClassName.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nsanitizeClassName(input: string): string\n```\n\n----------------------------------------\n\nTITLE: Defining IServiceTrackingParams Interface in TypeScript\nDESCRIPTION: The TypeScript interface definition for IServiceTrackingParams, which contains a required 'service' string property and an optional 'params' array of objects. This interface is likely used for tracking service parameters in YouTube API responses.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IServiceTrackingParams.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface IServiceTrackingParams {\n    service: string;\n    params?: object[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MusicPlaylistEditHeader Class in TypeScript\nDESCRIPTION: This code snippet defines the MusicPlaylistEditHeader class, which extends YTNode. It includes properties for editing playlist details and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicPlaylistEditHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicPlaylistEditHeader extends YTNode {\n  static type = 'MusicPlaylistEditHeader';\n\n  title: Text;\n  edit_title: Text;\n  edit_description: Text;\n  privacy: string;\n  playlist_id: string;\n  endpoint: NavigationEndpoint;\n  privacy_dropdown: null | Dropdown;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details not shown\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining GuideCollapsibleEntry Class in TypeScript\nDESCRIPTION: This code defines the GuideCollapsibleEntry class, which extends YTNode. It includes properties for expander_item, collapser_item, and expandable_items, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GuideCollapsibleEntry.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass GuideCollapsibleEntry extends YTNode {\n  static type = 'GuideCollapsibleEntry';\n\n  expander_item: null | GuideEntry;\n  collapser_item: null | GuideEntry;\n  expandable_items: ObservedArray<YTNode>;\n\n  constructor(data: RawNode) {\n    super();\n    this.expander_item = parser.parseItem(data.expanderItem, GuideEntry);\n    this.collapser_item = parser.parseItem(data.collapserItem, GuideEntry);\n    this.expandable_items = parser.parseArray(data.expandableItems);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining LikeRequest Type in TypeScript for YouTube.js API\nDESCRIPTION: TypeScript type definition for the LikeRequest object used in YouTube API interactions. It contains two optional properties: 'params' (string) and 'target' (LikeTarget reference). This type is defined in the CommandEndpoints.ts file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/LikeRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **LikeRequest**: `object`\n\n## Type declaration\n\n### params?\n\n> `optional` **params**: `string`\n\n### target?\n\n> `optional` **target**: [`LikeTarget`](LikeTarget.md)\n```\n\n----------------------------------------\n\nTITLE: Defining SWSessionData Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the SWSessionData type alias as an object with three properties: api_key, api_version, and context_data. It is used to structure session data for interacting with the YouTube API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/type-aliases/SWSessionData.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype SWSessionData = {\n  api_key: string;\n  api_version: string;\n  context_data: ContextData;\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods for Type Checking in YTNode\nDESCRIPTION: Methods inherited from YTNode for type checking and property access, including as(), is(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThirdPartyShareTargetSection.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas()\\<`T`, `K`\\>(...`types`): `InstanceType`\\<`K`\\[`number`\\]\\>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nis()\\<`T`, `K`\\>(...`types`): `this is InstanceType<K[number]>`\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey()\\<`T`, `R`\\>(`key`): `this is ThirdPartyShareTargetSection & { [k in string]: R }`\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey()\\<`T`, `R`\\>(`key`): [`Maybe`](../../Helpers/classes/Maybe.md)\n```\n\n----------------------------------------\n\nTITLE: Defining IGuideResponse Type Alias in TypeScript\nDESCRIPTION: Creates a type alias called IGuideResponse that uses the Pick utility type to select only the 'items' and 'items_memo' properties from the IParsedResponse interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/IGuideResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * IGuideResponse type alias\n */\ntype IGuideResponse = Pick<IParsedResponse, \"items\" | \"items_memo\">\n```\n\n----------------------------------------\n\nTITLE: Retrieving YouTube Settings in TypeScript\nDESCRIPTION: Method to get YouTube settings for the signed-in account.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Managers/classes/AccountManager.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetSettings(): Promise<Settings>\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for YouTube.js v13.0.0\nDESCRIPTION: Shows the changelog entry for version 13.0.0 of YouTube.js, including breaking changes, new features, and bug fixes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n## [13.0.0](https://github.com/LuanRT/YouTube.js/compare/v12.2.0...v13.0.0) (2025-01-20)\n\n\n### ⚠ BREAKING CHANGES\n\n* Remove `web.bundle.min`\n\n### Features\n\n* **ContentMetadataView:** Parse `enableTruncation` ([#863](https://github.com/LuanRT/YouTube.js/issues/863)) ([0a3104b](https://github.com/LuanRT/YouTube.js/commit/0a3104bafc03ccd29420a835b420f628b380991d))\n* **getSearchSuggestions:** Add optional `pq` param for better suggestions ([c61db19](https://github.com/LuanRT/YouTube.js/commit/c61db19f2e3bd44bc5bf2ebdf8de041f169d8fab))\n* **Innertube:** Add `getAttestationChallenge` ([#869](https://github.com/LuanRT/YouTube.js/issues/869)) ([33c27dd](https://github.com/LuanRT/YouTube.js/commit/33c27ddcb5ea96241b2a0bf4ec14ec5937264998))\n* **Innertube:** Add ability to get individual community posts and community post comments ([#861](https://github.com/LuanRT/YouTube.js/issues/861)) ([360b29e](https://github.com/LuanRT/YouTube.js/commit/360b29ee60af2cf803106ca5315c365ddacbe51b))\n* **LiveChatPaidMessage:** Parse `headerOverlayImage` and `lowerBumper` ([#851](https://github.com/LuanRT/YouTube.js/issues/851)) ([ef37aa0](https://github.com/LuanRT/YouTube.js/commit/ef37aa0a5abb573f192f86d1accb88d90d707752))\n* **Music:** Add continuation support for \"Up next\" tab in `TrackInfo` ([#770](https://github.com/LuanRT/YouTube.js/issues/770)) ([2913d5f](https://github.com/LuanRT/YouTube.js/commit/2913d5f43dd28b9146cf05607cbe28d727463d51))\n* **PageHeaderView:** Parse `heroImage` ([a602a31](https://github.com/LuanRT/YouTube.js/commit/a602a317aaaffa575d2b03754f0625a6e5858162))\n* **Parser:** Add `AvatarStackView` ([c631022](https://github.com/LuanRT/YouTube.js/commit/c6310228fee1ed01f93a0e4e0482d09a967ef1be))\n* **Parser:** Add `HowThisWasMadeSectionView` node ([5da8a66](https://github.com/LuanRT/YouTube.js/commit/5da8a66551c85fa45a01713383e6f621db053b46))\n* **parser:** Add `ReplaceLiveChatAction` ([#847](https://github.com/LuanRT/YouTube.js/issues/847)) ([342fdd1](https://github.com/LuanRT/YouTube.js/commit/342fdd1db30bc61de5f19fc4ed35db8931706903))\n* **Parser:** Implement utility class to parse `rendererContext` ([3a11b99](https://github.com/LuanRT/YouTube.js/commit/3a11b99429ff9d8cc9aebc7bbee0b7645e30f7ff))\n* **parser:** Parse `OpenPopupAction` in `onResponseReceivedEndpoints` arrays ([45b7342](https://github.com/LuanRT/YouTube.js/commit/45b734288e070ef5e347cec5bae445d0cf883eba))\n* **Parser:** Parse YpcTrailer in VideoInfo ([#842](https://github.com/LuanRT/YouTube.js/issues/842)) ([c0043d0](https://github.com/LuanRT/YouTube.js/commit/c0043d0194f582c2ed85341291e2eace25dd78d8))\n* **parser:** Update `Button` ([#857](https://github.com/LuanRT/YouTube.js/issues/857)) ([5f899fc](https://github.com/LuanRT/YouTube.js/commit/5f899fcdb30deefc189e8325e4358812c5b05800))\n* **parser:** Update `LiveChatPaidMessage` ([#846](https://github.com/LuanRT/YouTube.js/issues/846)) ([73362c6](https://github.com/LuanRT/YouTube.js/commit/73362c68fbc8b966ff46cc8b145e1e8d9fbe32ee))\n* **parser:** Update `LiveChatPaidSticker` ([#849](https://github.com/LuanRT/YouTube.js/issues/849)) ([3c28c0d](https://github.com/LuanRT/YouTube.js/commit/3c28c0d2c2b583a31fe0e49cce4cdfbfe380874d))\n* **parser:** Update `LiveChatTextMessage` ([#864](https://github.com/LuanRT/YouTube.js/issues/864)) ([9025122](https://github.com/LuanRT/YouTube.js/commit/902512248417ae86e25082d429b13d8c57a5c5b1))\n* **parser:** Update `LiveChatTickerPaidMessageItem` ([#845](https://github.com/LuanRT/YouTube.js/issues/845)) ([29e8d30](https://github.com/LuanRT/YouTube.js/commit/29e8d3015a3d17383a8be4e6f46b389d10f111f3))\n* **parser:** Update `LiveChatTickerPaidStickerItem` ([#848](https://github.com/LuanRT/YouTube.js/issues/848)) ([5f83a74](https://github.com/LuanRT/YouTube.js/commit/5f83a7416d5dc3167e6af2767e9b90f4bf89f3dc))\n* **parser:** Update `LiveChatViewerEngagementMessage` ([#856](https://github.com/LuanRT/YouTube.js/issues/856)) ([b4a947a](https://github.com/LuanRT/YouTube.js/commit/b4a947a9eb9dd1ae6e9d1da1a00083ac1afca03e))\n* **Playlists:** Implement `addToLibrary` and `removeFromLibrary` ([#844](https://github.com/LuanRT/YouTube.js/issues/844)) ([48460e4](https://github.com/LuanRT/YouTube.js/commit/48460e4184bac0f6626550b80696f950f7626beb))\n* **RichGrid:** Parse `targetId` ([e571ee2](https://github.com/LuanRT/YouTube.js/commit/e571ee2426c6003c1bc690cbf98b0ab72ebfaa10))\n* **Session:** Allow using a fixed user agent for InnerTube requests ([#876](https://github.com/LuanRT/YouTube.js/issues/876)) ([4d36655](https://github.com/LuanRT/YouTube.js/commit/4d36655b2dad74aeb74e869ca8259e9d13dfb512))\n* **SubscribeButton:** Add `unsubscribe_text` ([75b8964](https://github.com/LuanRT/YouTube.js/commit/75b89641805abada1498edebac5b72a40860b215))\n* **ToggleButtonView:** Add `is_toggled` ([88af6d8](https://github.com/LuanRT/YouTube.js/commit/88af6d89a56907d6f2263c01fc158400788fb5b4))\n```\n\n----------------------------------------\n\nTITLE: Declaring UpdateLiveChatPollAction Class Properties in TypeScript\nDESCRIPTION: Property declarations for the UpdateLiveChatPollAction class, including poll_to_update which stores a YTNode instance, and type properties that identify this class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UpdateLiveChatPollAction.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\npoll_to_update: [`YTNode`](../../Helpers/classes/YTNode.md)\n\ntype: `readonly` **type**: `string`\n\nstatic type: `string` = `'UpdateLiveChatPollAction'`\n```\n\n----------------------------------------\n\nTITLE: Defining AttributionView Class Constructor in TypeScript\nDESCRIPTION: Constructor definition for AttributionView class that takes a RawNode data parameter and extends YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AttributionView.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AttributionView(data: RawNode): AttributionView\n```\n\n----------------------------------------\n\nTITLE: DislikeButtonView Class Definition in TypeScript\nDESCRIPTION: Declaration of the DislikeButtonView class which extends YTNode. It contains properties for the toggle_button and dislike_entity_key, along with a static type identifier and constructor.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DislikeButtonView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'DislikeButtonView'\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoggle_button: null | ToggleButtonView\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ndislike_entity_key: string\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nconstructor(data: RawNode): DislikeButtonView\n```\n\n----------------------------------------\n\nTITLE: GridShow Class Type Properties in TypeScript\nDESCRIPTION: Static and readonly type properties that identify this class as 'GridShow'. The static property is used for type identification, while the readonly property is inherited from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GridShow.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\nstatic type: string = 'GridShow'\n```\n\n----------------------------------------\n\nTITLE: Defining the Title Property for SimpleMenuHeader in TypeScript\nDESCRIPTION: Declares the `title` property for the `SimpleMenuHeader` class. It holds a `Text` instance, representing the title text of the menu header, likely containing formatted text and potentially navigation information.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleMenuHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods in TypeScript\nDESCRIPTION: Helper methods inherited from the YTNode base class including type checking methods (is, as), key checking methods (hasKey, key). These methods provide utilities for type casting and property access with safety checks.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoDescriptionInfocardsSection.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is VideoDescriptionInfocardsSection & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining InnerTubeConfig Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the InnerTubeConfig type alias as equivalent to SessionOptions. It's located in the Misc.ts file within the types directory of the project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/InnerTubeConfig.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype InnerTubeConfig = SessionOptions;\n```\n\n----------------------------------------\n\nTITLE: ToggleButtonView Static Type Definition in TypeScript\nDESCRIPTION: Defines the static type property for the ToggleButtonView class, setting it to 'ToggleButtonView' to identify this node type in the YouTube.js parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ToggleButtonView.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ToggleButtonView'\n```\n\n----------------------------------------\n\nTITLE: Generating Parser Statements for YouTube.js in TypeScript\nDESCRIPTION: This function generates statements to parse a given inference type. It takes parameters for the key to parse, the inference type, the key path, and indentation level. The function returns a string containing the generated parser statement.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/toParser.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoParser(key: string, inference_type: InferenceType, key_path: string[] = [], indentation: number = 1): string\n```\n\n----------------------------------------\n\nTITLE: Importing YouTube.js in Deno (Deprecated)\nDESCRIPTION: Shows how to import the Innertube class in Deno using the deprecated method.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Innertube } from 'https://deno.land/x/youtubei/deno.ts';\n```\n\n----------------------------------------\n\nTITLE: Inherited Methods from YTNode in TypeScript\nDESCRIPTION: Methods inherited from the YTNode parent class, including type checking (is), type casting (as), and key-related utilities (hasKey, key) that provide type-safe access to node properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayToggleButton.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is ThumbnailOverlayToggleButton & { [k in string]: R }\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Implementing EmojiRun Class Constructor - TypeScript\nDESCRIPTION: Constructor for the EmojiRun class that takes a RawNode data parameter and initializes emoji-related properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/EmojiRun.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew EmojiRun(data): EmojiRun\n```\n\n----------------------------------------\n\nTITLE: Defining the videoDetails property in RawResponse TypeScript interface\nDESCRIPTION: Optional property definition for 'videoDetails' in the RawResponse interface. This property is of type RawNode and contains details about a video.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **videoDetails**: [`RawNode`](../type-aliases/RawNode.md)\n```\n\n----------------------------------------\n\nTITLE: ExpandableMetadata Helper Methods - TypeScript\nDESCRIPTION: Inherited utility methods from YTNode for type checking and property access including as(), is(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ExpandableMetadata.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\nhasKey<T extends string, R = any>(key: T): this is ExpandableMetadata & { [k in string]: R };\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining ParserErrorHandler Type Alias in TypeScript\nDESCRIPTION: Type definition for a parser error handler function that takes a ParserError parameter and returns void. Used for handling parser errors in a YouTube.js implementation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/type-aliases/ParserErrorHandler.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nParserErrorHandler: (error: ParserError) => void\n```\n\n----------------------------------------\n\nTITLE: Implementing BackgroundPromo Properties in TypeScript\nDESCRIPTION: Definition of the class properties including optional body_text, cta_button, icon_type, and title. The class also includes static and readonly type properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/BackgroundPromo.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nbody_text?: Text\ncta_button?: null | Button | ButtonView\nicon_type?: string\ntitle?: Text\nreadonly type: string\nstatic type: string = 'BackgroundPromo'\n```\n\n----------------------------------------\n\nTITLE: PlayerError Class Properties Definition\nDESCRIPTION: TypeScript definitions for the inherited Error class properties including cause, message, name, and stack trace.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/PlayerError.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncause?: unknown\nmessage: string\nname: string\nstack?: string\n```\n\n----------------------------------------\n\nTITLE: Defining IGetNotificationsMenuResponse Type Alias in TypeScript\nDESCRIPTION: TypeScript type alias that picks specific properties ('actions' and 'actions_memo') from the IParsedResponse interface to create a type for notification menu responses.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/IGetNotificationsMenuResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype IGetNotificationsMenuResponse = Pick<IParsedResponse, \"actions\" | \"actions_memo\">\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods Implementation\nDESCRIPTION: Implementation of inherited helper methods from YTNode class including type checking and property access methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveListItemFixedColumn.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is MusicResponsiveListItemFixedColumn & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining RendererInferenceType Interface in TypeScript\nDESCRIPTION: This code snippet defines the RendererInferenceType interface with three properties: type, renderers, and optional. It specifies the structure for renderer inference in the YouTube.js parser generator.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/interfaces/RendererInferenceType.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ninterface RendererInferenceType {\n    type: \"renderer\";\n    renderers: string[];\n    optional: boolean;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Identifier for SingleColumnMusicWatchNextResults (TypeScript)\nDESCRIPTION: Defines the static `type` property for the `SingleColumnMusicWatchNextResults` class. This property provides a unique string identifier ('SingleColumnMusicWatchNextResults') for this node type, used internally for node identification and parsing logic. It overrides the static `type` property from the base `YTNode` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SingleColumnMusicWatchNextResults.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SingleColumnMusicWatchNextResults'\n```\n\n----------------------------------------\n\nTITLE: Get Selected Language Method - TypeScript\nDESCRIPTION: Accessor method that returns the currently selected transcript language.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/TranscriptInfo.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget selectedLanguage(): string\n```\n\n----------------------------------------\n\nTITLE: Defining title Property in SharePanelHeader TypeScript Class\nDESCRIPTION: Declares the `title` property within the `SharePanelHeader` class. This property holds an instance of `YTNode` (or a subclass), representing the text or structure displayed as the title of the share panel.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelHeader.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: YTNode\n```\n\n----------------------------------------\n\nTITLE: Player Version Accessor\nDESCRIPTION: Static getter method that returns the library version number.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Player.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic get LIBRARY_VERSION(): number\n```\n\n----------------------------------------\n\nTITLE: Defining the Static 'type' Property in SimpleTextSection (TypeScript)\nDESCRIPTION: Defines a static `type` property on the `SimpleTextSection` class itself. It is assigned the string value 'SimpleTextSection', overriding the static `type` from `YTNode` and serving as a unique identifier for this class type during parsing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SimpleTextSection'\n```\n\n----------------------------------------\n\nTITLE: Parse Item without Type Constraints\nDESCRIPTION: Basic implementation of parseItem that takes optional raw node data and returns a YTNode instance without type checking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Parser/functions/parseItem.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nparseItem(data?: RawNode): YTNode\n```\n\n----------------------------------------\n\nTITLE: Defining LikeTarget Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the LikeTarget type alias as an object with a videoId property of type string. It's used to represent the target of a like action in the YouTube API, specifically identifying a video by its ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/LikeTarget.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype LikeTarget = {\n  videoId: string\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Items from ItemMenu in TypeScript\nDESCRIPTION: The items() method returns an ObservedArray of YTNode objects, representing the items in the menu.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/ItemMenu.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nitems(): ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Defining HashtagTile Class Constructor in TypeScript\nDESCRIPTION: Constructor for the HashtagTile class that takes a RawNode data parameter and initializes a HashtagTile instance. It extends the YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HashtagTile.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew HashtagTile(data): HashtagTile\n```\n\n----------------------------------------\n\nTITLE: Key Existence Check Method in YTNode Class\nDESCRIPTION: Implementation of the 'hasKey' method that checks if the node has a specified key without asserting its type. Returns a type predicate for TypeScript type narrowing.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TabbedSearchResults.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is TabbedSearchResults & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Get Playlists From Memo Static Method\nDESCRIPTION: Static method type definition for retrieving all playlists from a memo object. Returns an ObservedArray of playlist types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/History.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getPlaylistsFromMemo(memo: Memo): ObservedArray<GridPlaylist | LockupView | Playlist>\n```\n\n----------------------------------------\n\nTITLE: YTNode Helper Methods Implementation\nDESCRIPTION: Methods inherited from the base YTNode class that provide type checking and safe property access, including is(), as(), hasKey(), and key() methods for type casting and property validation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/GuideDownloadsEntry.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): this is InstanceType<K[number]>\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key): this is GuideDownloadsEntry & { [k in string]: R }\nkey<T extends string, R = any>(key): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining Generic Constructor Interface in TypeScript\nDESCRIPTION: Defines a Constructor interface with a type parameter T. Includes a constructor signature that accepts variable arguments and returns an instance of type T.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/interfaces/Constructor.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Constructor<T> {\n    new (...args: any[]): T;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the streamingData property in RawResponse TypeScript interface\nDESCRIPTION: Optional property definition for 'streamingData' in the RawResponse interface. This is a complex object containing various streaming-related properties such as adaptiveFormats, dashManifestUrl, formats, and more.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **streamingData**: `object`\n\n#### adaptiveFormats\n\n> **adaptiveFormats**: [`RawNode`](../type-aliases/RawNode.md)[]\n\n#### dashManifestUrl?\n\n> `optional` **dashManifestUrl**: `string`\n\n#### expiresInSeconds\n\n> **expiresInSeconds**: `string`\n\n#### formats\n\n> **formats**: [`RawNode`](../type-aliases/RawNode.md)[]\n\n#### hlsManifestUrl?\n\n> `optional` **hlsManifestUrl**: `string`\n\n#### serverAbrStreamingUrl?\n\n> `optional` **serverAbrStreamingUrl**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining RawNode Type Alias in TypeScript\nDESCRIPTION: Defines the RawNode type alias as a Record with string keys and any values. This flexible type can represent any object structure returned by the YouTube API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/RawNode.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype RawNode = Record<string, any>\n```\n\n----------------------------------------\n\nTITLE: Defining MenuServiceItem Class in TypeScript\nDESCRIPTION: This code snippet defines the MenuServiceItem class, which extends the Button class. It includes the constructor and type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MenuServiceItem.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MenuServiceItem extends Button {\n  static type: string = 'MenuServiceItem';\n\n  constructor(data: RawNode) {\n    super(data);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the sidebar property in RawResponse TypeScript interface\nDESCRIPTION: Optional property definition for 'sidebar' in the RawResponse interface. This property is of type RawNode and is defined in the RawResponse.ts file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **sidebar**: [`RawNode`](../type-aliases/RawNode.md)\n```\n\n----------------------------------------\n\nTITLE: YTNode Type Property Implementation\nDESCRIPTION: The 'type' property implementation for the YTNode class that InfoRow inherits. It's a readonly string property that identifies the type of the YouTube node.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/InfoRow.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Type Property Inheritance in YTNode Class for TypeScript\nDESCRIPTION: Definition of the readonly type property inherited from the YTNode class, which identifies the type of YouTube node represented by this class instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/UnifiedSharePanel.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Property for RemoveChatItemByAuthorAction in TypeScript\nDESCRIPTION: Defines a static 'type' property for the RemoveChatItemByAuthorAction class, assigning it the string value 'RemoveChatItemByAuthorAction'. This overrides the base YTNode static type and serves as a unique identifier for this action type within the parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RemoveChatItemByAuthorAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'RemoveChatItemByAuthorAction'\n```\n\n----------------------------------------\n\nTITLE: Defining MusicMenuItemDivider Class in TypeScript\nDESCRIPTION: This snippet defines the MusicMenuItemDivider class, which extends YTNode. It includes a constructor and static type property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicMenuItemDivider.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass MusicMenuItemDivider extends YTNode {\n  static type = 'MusicMenuItemDivider';\n\n  constructor(_data: RawNode) {\n    super();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inherited Type Check Method Signature (`is`) in TypeScript\nDESCRIPTION: Displays the signature of the inherited `is` method from `YTNode`. This generic method checks if the current `SortFilterSubMenu` instance is an instance of one of the provided `YTNode` constructor types (`K`). It returns a type predicate (`this is InstanceType<K[number]>`) for type narrowing based on the check.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterSubMenu.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T, K>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Declaring expanded_subtitle Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `expanded_subtitle` property for the `SlimVideoMetadata` class. It is of type `Text`, likely representing the full or expanded version of the video's subtitle or description.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexpanded_subtitle: Text\n```\n\n----------------------------------------\n\nTITLE: Development Dependencies for Youtube.js in React Native\nDESCRIPTION: Development dependencies needed for proper TypeScript type definitions and Babel plugins to support import attributes and namespace exports in Youtube.js.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/src/platform/react-native.md#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n\"@types/base-64\": \"^1.0.2\",\n\"@babel/plugin-syntax-import-attributes\": \"^7.23.3\",\n\"@babel/plugin-transform-export-namespace-from\": \"^7.23.4\",\n```\n\n----------------------------------------\n\nTITLE: Compressing Data Using LZW Algorithm in JavaScript\nDESCRIPTION: The compress function implements the LZW compression algorithm. It takes input data and returns compressed output. This function is likely used to reduce data size for efficient storage or transmission in the youtubei.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/LZW/README.md#2025-04-22_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\ncompress()\n```\n\n----------------------------------------\n\nTITLE: Implementing setActions Method in KidsBlocklistPickerItem Class\nDESCRIPTION: Method to set the Actions object for the KidsBlocklistPickerItem instance, enabling interaction with YouTube API endpoints.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/KidsBlocklistPickerItem.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nsetActions(actions: Actions | undefined): void {\n  actions?.addToQueue(this.actions);\n  this.actions = actions;\n  this.block_button?.setActions(actions);\n}\n```\n\n----------------------------------------\n\nTITLE: EventEmitter Constructor Implementation\nDESCRIPTION: Constructor definition for the EventEmitter class that extends EventTarget.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/EventEmitter.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew EventEmitter(): EventEmitter\n```\n\n----------------------------------------\n\nTITLE: Defining InnerTubeClient Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the InnerTubeClient type alias, which is a union of string literals representing different YouTube client types. It includes various platforms and applications such as iOS, web, Android, YouTube Music, YouTube Studio, TV, and Kids versions.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/InnerTubeClient.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype InnerTubeClient = \"IOS\" | \"WEB\" | \"MWEB\" | \"ANDROID\" | \"YTMUSIC\" | \"YTMUSIC_ANDROID\" | \"YTSTUDIO_ANDROID\" | \"TV\" | \"TV_EMBEDDED\" | \"YTKIDS\" | \"WEB_EMBEDDED\" | \"WEB_CREATOR\";\n```\n\n----------------------------------------\n\nTITLE: GetApiPath Method Implementation\nDESCRIPTION: Method that returns the API path as a string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PrefetchWatchCommand.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiPath(): string\n```\n\n----------------------------------------\n\nTITLE: Static Type Property for HistorySuggestion\nDESCRIPTION: Static type property declaration for HistorySuggestion class that overrides the type property from SearchSuggestion.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/HistorySuggestion.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'HistorySuggestion'\n```\n\n----------------------------------------\n\nTITLE: Auth Error Event Listener Definition in TypeScript\nDESCRIPTION: Method signature for once() event listener that handles auth-error events in the Session class\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Session.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nonce(type: \"auth-error\", listener: OAuth2AuthErrorEventHandler): void\n```\n\n----------------------------------------\n\nTITLE: Defining the responseContext property in RawResponse TypeScript interface\nDESCRIPTION: Optional property definition for 'responseContext' in the RawResponse interface. This property is of type IResponseContext and is defined in the RawResponse.ts file.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **responseContext**: [`IResponseContext`](IResponseContext.md)\n```\n\n----------------------------------------\n\nTITLE: Defining Constructor for SectionListContinuation in TypeScript\nDESCRIPTION: This code snippet shows the constructor definition for the SectionListContinuation class. It takes a RawNode parameter and returns a new SectionListContinuation instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/SectionListContinuation.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew SectionListContinuation(data: RawNode): SectionListContinuation\n```\n\n----------------------------------------\n\nTITLE: TypeScript Function Definition: Introspect Class Analysis\nDESCRIPTION: Function that takes a class data object and returns an analysis containing key information and unimplemented dependencies. The function accepts an unknown type parameter and returns an object with two arrays: key_info containing string and InferenceType pairs, and unimplemented_dependencies containing string and any value pairs.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/introspect.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nintrospect(classdata: unknown): object {\n  return {\n    key_info: [] as readonly [string, InferenceType][],\n    unimplemented_dependencies: [] as [string, any][]\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ParsingError Class in TypeScript\nDESCRIPTION: Defines the ParsingError class that extends InnertubeError. It includes a constructor that takes a message and optional info parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/ParsingError.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ParsingError extends InnertubeError {\n  constructor(message: string, info?: any): ParsingError {\n    super(message, info);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Album Information in TypeScript\nDESCRIPTION: Method to get album information by providing an album ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetAlbum(album_id: string): Promise<Album>\n```\n\n----------------------------------------\n\nTITLE: Defining the Inherited Readonly Type Property (TypeScript)\nDESCRIPTION: Declares the inherited `type` property from the base `YTNode` class. This readonly property holds the specific type identifier string for the node instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Type Checking and Property Access Methods\nDESCRIPTION: Inherited utility methods for type checking and safe property access including is(), as(), hasKey() and key()\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ModalWithTitleAndButton.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is ModalWithTitleAndButton & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited key Method in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `key` method, inherited from `YTNode`. This method asserts that the node instance has a specific key and returns its value wrapped in a `Maybe` container. It throws an error if the key is not found. The type parameter `R` can specify the expected type of the key's value.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<unknown>\n```\n\n----------------------------------------\n\nTITLE: Implementing Inherited Methods in Continuation Class\nDESCRIPTION: This snippet shows the inherited methods from YTNode that are available in the Continuation class. These methods include as(), hasKey(), is(), and key() for type checking and property access.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Continuation.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Continuation extends YTNode {\n  // ... other properties and methods\n\n  as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n    // Implementation inherited from YTNode\n  }\n\n  hasKey<T extends string, R = any>(key: T): this is Continuation & { [k in string]: R } {\n    // Implementation inherited from YTNode\n  }\n\n  is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n    // Implementation inherited from YTNode\n  }\n\n  key<T extends string, R = any>(key: T): Maybe {\n    // Implementation inherited from YTNode\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Class Constructor and Properties Definition for ThumbnailOverlaySidePanel in TypeScript\nDESCRIPTION: This code snippet defines the ThumbnailOverlaySidePanel class which extends YTNode. It includes properties for text and icon_type, along with a static type identifier. The constructor initializes the object with data from a RawNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlaySidePanel.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'ThumbnailOverlaySidePanel';\n\ntext: Text;\nicon_type: string;\n\nconstructor(data: RawNode): ThumbnailOverlaySidePanel {\n  // Implementation details not shown in the documentation\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Target ID Property in TypeScript\nDESCRIPTION: Declares a mandatory property `target_id` of type `string` within the `ShareTarget` class. This likely represents a unique identifier for the specific share target.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareTarget.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntarget_id: string\n```\n\n----------------------------------------\n\nTITLE: Method Implementation for YTNode Type Checking in TypeScript\nDESCRIPTION: Implementation of helper methods inherited from YTNode that enable type checking and casting. These methods include is(), as(), hasKey(), and key() for safely working with node types and properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoSecondaryInfo.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n// Inherited from YTNode\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Implementation not shown in the documentation\n}\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Implementation not shown in the documentation\n}\n\nhasKey<T extends string, R = any>(key: T): this is VideoSecondaryInfo & { [k in string]: R } {\n  // Implementation not shown in the documentation\n}\n\nkey<T extends string, R = any>(key: T): Maybe {\n  // Implementation not shown in the documentation\n}\n```\n\n----------------------------------------\n\nTITLE: Logging Warning Messages in TypeScript\nDESCRIPTION: Function signature for a warning logging utility that takes an optional string tag and variable arguments. The function is used for logging warning messages with an optional contextual tag prefix.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Log/functions/warn.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nwarn(tag?: string, ...args?: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Static Method Implementation for Stack Trace Capture\nDESCRIPTION: Static method implementation for capturing stack traces in error objects. Used for error debugging and tracking.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/MissingParamError.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic captureStackTrace(targetObject: object, constructorOpt?: Function): void\n```\n\n----------------------------------------\n\nTITLE: Defining WatchNextRequest Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the WatchNextRequest type alias as an object with optional properties including contentCheckOk, params, playlistId, playlistIndex, racyCheckOk, and videoId. It's used for handling API responses in the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/WatchNextRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype WatchNextRequest = {\n  contentCheckOk?: boolean;\n  params?: string;\n  playlistId?: string;\n  playlistIndex?: number;\n  racyCheckOk?: boolean;\n  videoId?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Using TypeScript Generics for Type Operations in YTNode Helpers\nDESCRIPTION: These methods (`as`, `is`, `hasKey`, and `key`) use TypeScript generics to enable flexible type checking, assertion, and casting within node instances. The methods allow casting a node to one of several given types, checking if a node is of a certain type, verifying if a key exists, and retrieving key values with type assertion and safety. They throw errors if type mismatches occur. These functions depend on generalized YTNode and Maybe classes/interfaces, and are implemented in the YTNode helper infrastructure to provide runtime type safety and utility when navigating YouTube.js node graphs.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShowLiveChatActionPanelAction.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Cast to one of the given types\n  // Throws if this is not one of the given types\n}\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]> {\n  // Return boolean if this is one of the given types\n}\n\nhasKey<T extends string, R = any>(key: T): this is ShowLiveChatActionPanelAction & { [k in string]: R } {\n  // Check for a key without asserting the type\n}\n\nkey<T extends string, R = any>(key: T): Maybe {\n  // Assert that the node has the given key and return it\n  // Throws if not found\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Inherited Readonly Instance Type Property in TypeScript\nDESCRIPTION: Defines the readonly instance property `type` (string), inherited from the base `YTNode` class. This property holds the specific type identifier for the node instance at runtime, which is determined by the data parsed.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterSubMenu.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Retrieving Related Content in TypeScript\nDESCRIPTION: Method to get related content for a video using its ID.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetRelated(video_id: string): Promise<SectionList | Message>\n```\n\n----------------------------------------\n\nTITLE: CreateCommentEndpoint getApiPath Implementation\nDESCRIPTION: Implementation of the IEndpoint interface's getApiPath method that returns the API endpoint string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CreateCommentEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ngetApiPath(): string\n```\n\n----------------------------------------\n\nTITLE: Defining the Surface Property in RecognitionShelf (TypeScript)\nDESCRIPTION: Declares the `surface` property for the RecognitionShelf class. It holds a string indicating the surface type where the recognition shelf appears.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RecognitionShelf.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsurface: string\n```\n\n----------------------------------------\n\nTITLE: Implementing LiveChatPaidSticker Helper Methods in TypeScript\nDESCRIPTION: Helper methods for type checking and key access including as(), is(), hasKey() and key() functions that are inherited from YTNode base class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatPaidSticker.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is LiveChatPaidSticker & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Using inherited is method for type checking in YTNode (TypeScript)\nDESCRIPTION: Inherited method `is` from the base `YTNode` class. Checks if the current node instance is of one of the specified `YTNode` types (passed as `YTNodeConstructor` arguments). Returns a type predicate indicating if the instance matches any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SortFilterHeader.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nis<T, K>(...types): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining the Optional 'service_endpoint' Property in SearchSuggestion Class (TypeScript)\nDESCRIPTION: Declares the optional `service_endpoint` property for the `SearchSuggestion` class. This property holds a `NavigationEndpoint` object, potentially representing a service action related to the suggestion (like 'delete suggestion').\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSuggestion.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n`optional` service_endpoint: NavigationEndpoint\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 7.0.0\nDESCRIPTION: Markdown formatted changelog entry detailing breaking changes and features for version 7.0.0 release\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n### ⚠ BREAKING CHANGES\n\n* **Library:** Add support for the new layout and remove profile & stats info\n* **Channel:** YouTube removed the \"Channels\" tab on channels\n\n### Features\n\n* add `FeedNudge` ([#533](https://github.com/LuanRT/YouTube.js/issues/533)) ([e021395])\n* add `VideoAttributeView` ([#531](https://github.com/LuanRT/YouTube.js/issues/531)) ([ff4ab16])\n```\n\n----------------------------------------\n\nTITLE: Defining IRawTrustedResource Interface in TypeScript\nDESCRIPTION: This TypeScript interface defines two optional properties that appear to wrap safe script and trusted resource URL values. The interface is part of the parser's raw response types in the YouTube.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawTrustedResource.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IRawTrustedResource {\n    privateDoNotAccessOrElseTrustedResourceUrlWrappedValue?: string;\n    privateDoNotAccessOrElseSafeScriptWrappedValue?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining target_item_id Property in ReplaceChatItemAction TypeScript\nDESCRIPTION: Declares the `target_item_id` property for the `ReplaceChatItemAction` class. This string property stores the unique identifier of the chat item that is intended to be replaced by the `replacement_item`.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplaceChatItemAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntarget_item_id: string\n```\n\n----------------------------------------\n\nTITLE: Helper Methods Implementation in TypeScript\nDESCRIPTION: Implementation of utility methods for type checking and property access including as(), hasKey(), is(), and key().\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddLiveChatTickerItemAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is AddLiveChatTickerItemAction & { [k in string]: R }\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Markdown Index Structure for YouTube Clients\nDESCRIPTION: Markdown formatted index listing three main YouTube client classes - Kids, Music and Studio - with relative links to their detailed documentation files.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[youtubei.js](../../README.md) / Clients\n\n# Clients\n\n## Index\n\n### Classes\n\n- [Kids](classes/Kids.md)\n- [Music](classes/Music.md)\n- [Studio](classes/Studio.md)\n```\n\n----------------------------------------\n\nTITLE: Adding Page Accessor to Album Class in TypeScript\nDESCRIPTION: This snippet adds a getter for the 'page' property, which returns the full IBrowseResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Album.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget page(): IBrowseResponse {\n  // Implementation not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Getting API Path for Delete Playlist Operation in TypeScript\nDESCRIPTION: Implementation of the getApiPath method that returns the API endpoint string for deleting a playlist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/DeletePlaylistEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ngetApiPath(): string\n```\n\n----------------------------------------\n\nTITLE: Defining the Static Type Identifier for SimpleMenuHeader in TypeScript\nDESCRIPTION: Defines a static `type` property for the `SimpleMenuHeader` class, holding the string literal 'SimpleMenuHeader'. This is used to identify nodes of this specific type within the parsing system, overriding the base `YTNode` static type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleMenuHeader.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'SimpleMenuHeader'\n```\n\n----------------------------------------\n\nTITLE: Inherited Type Casting Method 'as' in YTNode TypeScript\nDESCRIPTION: Details the inherited `as` method from the base `YTNode` class. This generic method allows casting the current node instance to one of the specified `YTNode` derived types (`K`). It throws an error if the instance is not assignable to any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchFilterGroup.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T, K>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Inherited Readonly 'type' Property from YTNode (TypeScript)\nDESCRIPTION: Shows the inherited readonly instance property `type` from the base `YTNode` class. This property holds the string identifier ('SendFeedbackAction') for the node type at runtime, derived from the static `type` property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SendFeedbackAction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Displaying Changelog Entry for YouTube.js v13.2.0\nDESCRIPTION: Shows the changelog entry for version 13.2.0 of YouTube.js, including new features and bug fixes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n## [13.2.0](https://github.com/LuanRT/YouTube.js/compare/v13.1.0...v13.2.0) (2025-03-20)\n\n\n### Features\n\n* Add AccessibilityContext and CommandContext classes + improve type definitions and parsing logic across multiple nodes ([923e9c2](https://github.com/LuanRT/YouTube.js/commit/923e9c28e34b00841413824d82d10bf644186edc))\n\n\n### Bug Fixes\n\n* **Constants:** Update the iOS client version ([#924](https://github.com/LuanRT/YouTube.js/issues/924)) ([219d88b](https://github.com/LuanRT/YouTube.js/commit/219d88b2005431c6697f04e1fa2c5e8528a9ce57))\n* **Format:** Parse xtags from protobuf to support SABR-only responses ([#909](https://github.com/LuanRT/YouTube.js/issues/909)) ([00c199a](https://github.com/LuanRT/YouTube.js/commit/00c199ac69bc6d7be19aeae04a245f30b64272c2))\n```\n\n----------------------------------------\n\nTITLE: Defining IPlaybackTracking Interface in TypeScript\nDESCRIPTION: This snippet defines the IPlaybackTracking interface which contains two string properties for tracking video statistics: videostats_watchtime_url and videostats_playback_url.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IPlaybackTracking.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPlaybackTracking {\n  videostats_watchtime_url: string;\n  videostats_playback_url: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests for YouTube.js\nDESCRIPTION: Command to execute the test suite for the YouTube.js project using npm.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm run test\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods in TypeScript\nDESCRIPTION: Implementation of type checking and assertion methods inherited from YTNode class. These methods allow for type checking, casting, and key validation of ChildElement instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/ChildElement.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is ChildElement & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Accessing Library Data in TypeScript\nDESCRIPTION: Method to fetch the user's library content from YouTube Music.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Music.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetLibrary(): Promise<Library>\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 8.0.0\nDESCRIPTION: Markdown formatted changelog entry detailing features and bug fixes for version 8.0.0 release\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### Features\n\n* **generator:** add support for arrays ([#556](https://github.com/LuanRT/YouTube.js/issues/556)) ([e4f2a00])\n* **generator:** Add support for generating view models ([#550](https://github.com/LuanRT/YouTube.js/issues/550)) ([f938c34])\n* **MediaInfo:** Parse player config ([5c9c231])\n* **parser:** Support new like and dislike nodes ([#557](https://github.com/LuanRT/YouTube.js/issues/557)) ([fcd3044])\n* **Thumbnail:** Support `sources` in `Thumbnail.fromResponse` ([#552](https://github.com/LuanRT/YouTube.js/issues/552)) ([48a5d4e])\n* **YouTube:** Add FEchannels feed ([#560](https://github.com/LuanRT/YouTube.js/issues/560)) ([14578ac])\n```\n\n----------------------------------------\n\nTITLE: Inherited Method: Checking YTNode Instance Type in TypeScript\nDESCRIPTION: Inherited from `YTNode`. This method checks if the current node instance (`SimpleMenuHeader`) is an instance of one of the specified `YTNode` constructor types (`K`). It returns a boolean and acts as a type guard.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleMenuHeader.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Inheriting Base Class Methods in ConfirmDialog\nDESCRIPTION: Methods inherited from the YTNode base class including as(), is(), hasKey(), and key(). These utility methods allow for type checking, key existence verification, and value retrieval from the node object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ConfirmDialog.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nhasKey<T extends string, R = any>(key: T): this is ConfirmDialog & { [k in string]: R }\n\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Defining the Help Text Property for SettingsCheckbox in TypeScript\nDESCRIPTION: Declares the `help_text` property for the `SettingsCheckbox` class, typed as a `Text` object. This property stores any descriptive or help text associated with the checkbox setting, parsed into a structured `Text` representation. It depends on the `Text` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nhelp_text: Text\n```\n\n----------------------------------------\n\nTITLE: Defining MusicTastebuilderShelfThumbnail Class in TypeScript\nDESCRIPTION: This code defines the MusicTastebuilderShelfThumbnail class, which extends YTNode. It has a constructor that takes a RawNode parameter and initializes a thumbnail property.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicTastebuilderShelfThumbnail.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass MusicTastebuilderShelfThumbnail extends YTNode {\n  static type = 'MusicTastebuilderShelfThumbnail';\n\n  thumbnail: Thumbnail[];\n\n  constructor(data: RawNode) {\n    super();\n    this.thumbnail = Thumbnail.fromResponse(data.thumbnail);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the as() Method for Node Casting - TypeScript\nDESCRIPTION: Declares a generic as() method, allowing a ShareEntityEndpoint instance to be cast dynamically to a list of specified YTNode-derived types. Utilizes advanced TypeScript type parameters and constraints to ensure type-safe casting, throwing if the node does not match a provided type. This utility requires the existence of YTNode and YTNodeConstructor classes/interfaces and is commonly used in extensible node parsing scenarios.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEntityEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]> {\n  // Implementation: cast this node to one of the given types or throw\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Key Access Method 'key' with Maybe Wrapper in YTNode (TypeScript)\nDESCRIPTION: Defines the generic `key` method inherited from `YTNode`. This method asserts that the specified `key` exists on the node instance (throwing an error otherwise) and returns its value wrapped in a `Maybe` object for safe handling of potentially undefined results. It depends on the `Maybe` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T, R>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes in Version 6.0.0\nDESCRIPTION: Major update replacing unnecessary classes with pure functions for improved performance and maintainability.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Example of breaking change in v6.0.0\nreplace unnecessary classes with pure functions\n```\n\n----------------------------------------\n\nTITLE: Defining VMPrimative Type Alias in TypeScript\nDESCRIPTION: This code snippet defines a type alias called VMPrimative. It represents a union of primitive data types in TypeScript, including string, number, boolean, null, and undefined.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Types/type-aliases/VMPrimative.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype VMPrimative = string | number | boolean | null | undefined\n```\n\n----------------------------------------\n\nTITLE: Defining the 'lines' Property in SimpleTextSection (TypeScript)\nDESCRIPTION: Declares the `lines` property within the `SimpleTextSection` class. This property holds an array of `Text` objects, representing the individual lines of text within the section.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nlines: Text[]\n```\n\n----------------------------------------\n\nTITLE: Defining IResponseContext Interface in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure of YouTube API response context objects. Includes maxAgeSeconds as a number and serviceTrackingParams as an array of IServiceTrackingParams.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IResponseContext.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IResponseContext {\n    maxAgeSeconds: number;\n    serviceTrackingParams: IServiceTrackingParams[];\n}\n```\n\n----------------------------------------\n\nTITLE: Defining IGetChallengeResponse Type Alias in TypeScript\nDESCRIPTION: Creates a type alias that picks only the 'challenge' and 'bg_challenge' properties from the IParsedResponse interface. This is used for handling challenge responses in the YouTube API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/IGetChallengeResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nIGetChallengeResponse**: `Pick`\\<[`IParsedResponse`](../interfaces/IParsedResponse.md), `\"challenge\"` \\| `\"bg_challenge\"`\\>\n```\n\n----------------------------------------\n\nTITLE: Implementing ProfileColumn Contents Accessor in TypeScript\nDESCRIPTION: Getter method that provides access to the profile column contents as an observed array of YTNodes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProfileColumn.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nget contents(): ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Defining HTTPClientInit Interface in TypeScript\nDESCRIPTION: This snippet defines the HTTPClientInit interface with an optional baseURL property of type string. This interface is likely used for configuring HTTP client instances in the YouTubei.js library.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/interfaces/HTTPClientInit.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface HTTPClientInit {\n    baseURL?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding and Utilizing Inherited YTNode Methods - TypeScript\nDESCRIPTION: This snippet describes inherited methods such as as(), is(), hasKey(), and key(), available via YTNode, with generic type parameters enabling flexible assertion and casting of nodes. These methods are essential for safely operating on parsed YouTube nodes by allowing type checks, key presence tests, and controlled casting. Dependencies include the YTNode superclass and TypeScript's advanced generics. Usage requires supplying appropriate node types and/or keys to these methods, and outputs include type guard results or Maybe-wrapped values. These utility patterns encourage safe, robust handling of heterogeneous node collections in the parser.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardTeaser.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Example: using inherited methods\nnode.as<TypeA, [ConstructorA]>(ConstructorA);\nnode.is<TypeB, [ConstructorB]>(ConstructorB);\nnode.hasKey<'someKey', string>('someKey');\nnode.key<'someKey', string>('someKey');\n```\n\n----------------------------------------\n\nTITLE: Generating Dynamic Renderer Class in TypeScript\nDESCRIPTION: Example of a dynamically generated renderer class when an unknown renderer is encountered. This class is created at runtime to handle new YouTube features or UI changes.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/updating-the-parser.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass SomeRenderer extends YTNode {\n  static type = 'SomeRenderer';\n\n  // ...\n\n  constructor(data: RawNode) {\n    super();\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring description Property in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `description` property for the `SlimVideoMetadata` class. It is of type `Text`, containing the video's description text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ndescription: Text\n```\n\n----------------------------------------\n\nTITLE: Defining IUpdatedMetadataResponse Type Alias in TypeScript\nDESCRIPTION: This code defines a TypeScript type alias called IUpdatedMetadataResponse that uses the Pick utility type to select specific properties ('actions', 'actions_memo', and 'continuation') from the IParsedResponse interface.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/IUpdatedMetadataResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype IUpdatedMetadataResponse = Pick<IParsedResponse, 'actions' | 'actions_memo' | 'continuation'>\n```\n\n----------------------------------------\n\nTITLE: Defining the custom_badge Property in SponsorCommentBadge\nDESCRIPTION: Declares the `custom_badge` property within the `SponsorCommentBadge` class. This property holds an array of `Thumbnail` objects, representing the different resolutions or versions of the custom sponsor badge image.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SponsorCommentBadge.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ncustom_badge: Thumbnail[]\n```\n\n----------------------------------------\n\nTITLE: Implementing ChannelError Constructor in TypeScript\nDESCRIPTION: Constructor overloads for the ChannelError class. Accepts an optional message string and error options parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/classes/ChannelError.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ChannelError(message?: string): ChannelError\nnew ChannelError(message?: string, options?: ErrorOptions): ChannelError\n```\n\n----------------------------------------\n\nTITLE: CallToActionButton Constructor Implementation\nDESCRIPTION: Constructor implementation for the CallToActionButton class that takes a RawNode parameter and returns a new CallToActionButton instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CallToActionButton.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew CallToActionButton(data: RawNode): CallToActionButton\n```\n\n----------------------------------------\n\nTITLE: Defining Static 'type' Property for MusicResponsiveHeader in TypeScript\nDESCRIPTION: Defines the static `type` property for the `MusicResponsiveHeader` class. It holds the string literal 'MusicResponsiveHeader', identifying nodes of this specific type. This overrides the static `type` property from the base `YTNode` class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MusicResponsiveHeader.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'MusicResponsiveHeader'\n```\n\n----------------------------------------\n\nTITLE: Defining Watch Later Getter Method\nDESCRIPTION: TypeScript getter method definition that returns either undefined or an object representing watch later content.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nget watch_later(): undefined | object\n```\n\n----------------------------------------\n\nTITLE: Defining ProfileColumnStatsEntry Class in TypeScript\nDESCRIPTION: Class definition for ProfileColumnStatsEntry that extends YTNode. Contains properties for label and value of type Text, along with a static type identifier. Includes constructor and inherited utility methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ProfileColumnStatsEntry.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ProfileColumnStatsEntry extends YTNode {\n    static type = 'ProfileColumnStatsEntry';\n    \n    label: Text;\n    value: Text;\n\n    constructor(data: RawNode) {\n        super();\n    }\n\n    as<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n    hasKey<T extends string, R = any>(key: T): this is ProfileColumnStatsEntry & { [k in string]: R };\n    is<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n    key<T extends string, R = any>(key: T): Maybe;\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting Key Access Method 'key' from YTNode in TypeScript\nDESCRIPTION: Describes the inherited `key` method from the base `YTNode` class. This generic method asserts that the node instance has a specific property key (`key`) and returns its value wrapped in a `Maybe` object (a utility class likely handling potential null/undefined values). It throws an error if the node does not have the specified key.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nkey<T, R>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inherited 'key' Method for Safe Property Access in YTNode (TypeScript)\nDESCRIPTION: Describes the `key` method inherited from `YTNode`. It asserts that the `SendFeedbackAction` instance has a property with the given `key` (string `T`). If the key exists, it returns the property's value wrapped in a `Maybe` container; otherwise, it throws a runtime error. This provides a way to access potentially optional properties.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SendFeedbackAction.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Implementing Static GetVideosFromMemo Method\nDESCRIPTION: Static method to retrieve all videos from a memo object, returning an ObservedArray of various video types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nstatic getVideosFromMemo(memo: Memo): ObservedArray<Video | CompactVideo | GridVideo | PlaylistPanelVideo | PlaylistVideo | ReelItem | ShortsLockupView | WatchCardCompactVideo>\n```\n\n----------------------------------------\n\nTITLE: Inherited 'as' Method for Type Casting in YTNode (TypeScript)\nDESCRIPTION: Describes the `as` method inherited from the base `YTNode` class. It allows casting the current `SendFeedbackAction` instance to one or more specified `YTNode` subtypes (`K`). It throws a runtime error if the instance is not assignable to any of the provided types. This is useful for safely accessing subtype-specific properties or methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SendFeedbackAction.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Defining Title Property in TypeScript\nDESCRIPTION: Declares a mandatory property `title` of type `Text` (another custom class likely handling formatted text) within the `ShareTarget` class. This holds the display title for the share target.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareTarget.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntitle: Text\n```\n\n----------------------------------------\n\nTITLE: Inherited 'key' Method from YTNode (TypeScript)\nDESCRIPTION: Shows the signature of the `key` method, inherited from the `YTNode` base class. This method asserts that the node has the specified key and returns its value wrapped in a `Maybe` object. It throws an error if the key does not exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleTextSection.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: Inherited hasKey Method in RichListHeader (TypeScript)\nDESCRIPTION: Inherited method `hasKey` from `YTNode`. It checks if the node instance possesses a specific property key (`key`). It acts as a type guard, returning `true` and narrowing the instance's type to include the key if present, `false` otherwise. The type `R` for the key's value defaults to `any` but can be specified.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichListHeader.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is RichListHeader & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Defining YouTube API Class Types in TypeScript\nDESCRIPTION: This code snippet defines a namespace 'YT' that contains type definitions for various classes used in the YouTube API wrapper. These classes cover different aspects of YouTube functionality including account info, channels, comments, feeds, playlists, search, and more.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnamespace YT {\n  class AccountInfo {}\n  class Channel {}\n  class ChannelListContinuation {}\n  class Comments {}\n  class FilteredChannelList {}\n  class Guide {}\n  class HashtagFeed {}\n  class History {}\n  class HomeFeed {}\n  class ItemMenu {}\n  class Library {}\n  class LiveChat {}\n  class NotificationsMenu {}\n  class Playlist {}\n  class Search {}\n  class Settings {}\n  class SmoothedQueue {}\n  class TranscriptInfo {}\n  class VideoInfo {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Notification Class in TypeScript\nDESCRIPTION: This code snippet defines the Notification class, which extends YTNode. It includes properties for various notification attributes and a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Notification.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass Notification extends YTNode {\n  static type = 'Notification';\n\n  thumbnails: Thumbnail[];\n  video_thumbnails: Thumbnail[];\n  short_message: Text;\n  sent_time: Text;\n  notification_id: string;\n  endpoint: NavigationEndpoint;\n  record_click_endpoint: NavigationEndpoint;\n  menu: YTNode;\n  read: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    // Constructor implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining ClipSection Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for ClipSection class that takes a RawNode data parameter and extends YTNode base class. Used to initialize clip section instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ClipSection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ClipSection(data: RawNode): ClipSection\n```\n\n----------------------------------------\n\nTITLE: Defining INNERTUBE_HEADERS_BASE Constant in TypeScript\nDESCRIPTION: This snippet defines a constant object INNERTUBE_HEADERS_BASE with three readonly properties: accept, accept-encoding, and content-type. These headers are likely used as default values for making requests to YouTube's InnerTube API.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Constants/variables/INNERTUBE_HEADERS_BASE.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst INNERTUBE_HEADERS_BASE: object = {\n  accept: '*/*' as const,\n  'accept-encoding': 'gzip, deflate' as const,\n  'content-type': 'application/json' as const\n};\n```\n\n----------------------------------------\n\nTITLE: Defining ChannelOptions Class in TypeScript\nDESCRIPTION: This code snippet defines the ChannelOptions class, which extends YTNode. It includes properties for avatar, endpoint, name, and links, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ChannelOptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ChannelOptions extends YTNode {\n  static type = 'ChannelOptions';\n\n  avatar: Thumbnail[];\n  endpoint: NavigationEndpoint;\n  name: string;\n  links: Text[];\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation details not provided in the snippet\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inheriting readonly type Property in YTNode TypeScript Base Class\nDESCRIPTION: Describes the inherited `type` property from the base `YTNode` class. This readonly instance property holds a string identifier representing the specific type of the parsed YouTube node.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Defining Inherited hasKey Method in SlimVideoMetadata (TypeScript)\nDESCRIPTION: Defines the `hasKey` method, inherited from `YTNode`. This type predicate checks if the current node instance possesses a specific key without asserting the type of the key's value. It returns a boolean indicating presence and refines the object's type in the 'true' branch.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SlimVideoMetadata.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is SlimVideoMetadata & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Method Implementation - hasKey<T, R>\nDESCRIPTION: Type guard method to check for existence of a key in the node without asserting the type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatItemBumperView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is LiveChatItemBumperView & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: Inheriting is Method for Type Checking in YTNode TypeScript Base Class\nDESCRIPTION: Describes the inherited `is` method from the `YTNode` base class. This generic method functions as a type guard, checking if the current node instance is of one of the specified `YTNode` subtypes. It returns a boolean indicating whether the node matches any of the provided types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SharePanelHeader.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Type Checking Methods Implementation\nDESCRIPTION: Implementation of utility methods for type checking and key validation inherited from YTNode class.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/PlayerStoryboardSpec.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is PlayerStoryboardSpec & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: Defining ISearchResponse Type Alias in TypeScript\nDESCRIPTION: This code defines the ISearchResponse type alias using TypeScript's Pick utility type to select specific properties from the IParsedResponse interface. It includes properties related to search results such as header, contents, refinements, and estimated results.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/ISearchResponse.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype ISearchResponse = Pick<IParsedResponse, \"header\" | \"header_memo\" | \"contents\" | \"contents_memo\" | \"on_response_received_commands\" | \"continuation_contents\" | \"continuation_contents_memo\" | \"refinements\" | \"estimated_results\">\n```\n\n----------------------------------------\n\nTITLE: Implementing ConfirmDialog Constructor in TypeScript\nDESCRIPTION: Constructor implementation for the ConfirmDialog class that accepts a RawNode data parameter and passes it to the parent YTNode constructor. This initializes the confirmation dialog with data from the YouTube API response.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ConfirmDialog.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew ConfirmDialog(data: RawNode): ConfirmDialog\n```\n\n----------------------------------------\n\nTITLE: Defining GetKidsBlocklistPickerRequest Type Alias in TypeScript\nDESCRIPTION: Type definition for GetKidsBlocklistPickerRequest used in the YouTube.js API. This interface defines the structure for requests related to kids content blocklist picker, including an optional blockedForKidsContent object with an external_channel_id field.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/GetKidsBlocklistPickerRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **GetKidsBlocklistPickerRequest**: `object`\n\n## Type declaration\n\n### blockedForKidsContent?\n\n> `optional` **blockedForKidsContent**: `object`\n\n### blockedForKidsContent.external\\_channel\\_id\n\n> **external\\_channel\\_id**: `string`\n```\n\n----------------------------------------\n\nTITLE: Defining Memo Class in TypeScript\nDESCRIPTION: Defines the Memo class that extends Map<string, YTNode[]>. It includes constructors, inherited properties and methods, and a custom getType method for retrieving specific YTNode types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/Memo.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass Memo extends Map<string, YTNode[]> {\n  constructor(entries?: readonly (readonly [string, YTNode[]])[] | null);\n  constructor(iterable?: Iterable<readonly [string, YTNode[]]> | null);\n\n  getType<T extends YTNode, K extends YTNodeConstructor<T>[]>(types: K): ObservedArray<InstanceType<K[number]>>;\n  getType<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): ObservedArray<InstanceType<K[number]>>;\n\n  // Inherited methods and properties\n  size: number;\n  clear(): void;\n  delete(key: string): boolean;\n  entries(): IterableIterator<[string, YTNode[]]>;\n  forEach(callbackfn: (value: YTNode[], key: string, map: Map<string, YTNode[]>) => void, thisArg?: any): void;\n  get(key: string): YTNode[] | undefined;\n  has(key: string): boolean;\n  keys(): IterableIterator<string>;\n  set(key: string, value: YTNode[]): this;\n  values(): IterableIterator<YTNode[]>;\n  [Symbol.iterator](): IterableIterator<[string, YTNode[]]>;\n  [Symbol.toStringTag]: string;\n\n  static [Symbol.species]: MapConstructor;\n  static groupBy<K, T>(items: Iterable<T>, keySelector: (item: T) => K): Map<K, T[]>;\n}\n```\n\n----------------------------------------\n\nTITLE: GridContinuation Contents Accessor Method\nDESCRIPTION: Accessor method that provides access to the items collection as contents. This getter method returns either null or an ObservedArray of YTNode instances.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/GridContinuation.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nget contents(): null | ObservedArray<YTNode>\n```\n\n----------------------------------------\n\nTITLE: Defining ItemSectionContinuation Class in TypeScript\nDESCRIPTION: This code snippet defines the ItemSectionContinuation class, which extends YTNode. It includes properties for contents and continuation, as well as a constructor and static type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/ItemSectionContinuation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ItemSectionContinuation extends YTNode {\n  static type = 'itemSectionContinuation' as const;\n\n  contents: null | ObservedArray<YTNode>;\n  continuation?: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.contents = Parser.parseArray(data.contents);\n    this.continuation = data.continuations?.[0]?.nextContinuationData?.continuation;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the Static Type for ShareEndpoint in TypeScript\nDESCRIPTION: Declares a static property `type` for the `ShareEndpoint` class, assigning it the string value 'ShareEndpoint'. This overrides the static `type` property from the base class `ShareEntityServiceEndpoint` and serves as a unique identifier for this endpoint type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ShareEndpoint.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'ShareEndpoint'\n```\n\n----------------------------------------\n\nTITLE: LiveChat Method Implementations in TypeScript\nDESCRIPTION: Implementation of inherited methods from YTNode including type checking (is), type casting (as), and property access methods (hasKey, key).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChat.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>;\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>;\n\nhasKey<T extends string, R = any>(key: T): this is LiveChat & { [k in string]: R };\n\nkey<T extends string, R = any>(key: T): Maybe;\n```\n\n----------------------------------------\n\nTITLE: SuperParsedResult Class Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for SuperParsedResult class that takes a result parameter which can be null, a single YTNode, or an ObservedArray of YTNodes. The class provides type checking and helper methods for working with the parsed data.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/SuperParsedResult.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew SuperParsedResult<T>(result): SuperParsedResult<T>\n```\n\n----------------------------------------\n\nTITLE: Translating a YouTube Comment in TypeScript\nDESCRIPTION: Asynchronous method to translate a YouTube comment to a specified target language. It returns a Promise that resolves to an ApiResponse with the translated content. Throws an error if the Actions instance is not set or if the comment content is not found.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CommentView.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\ntranslate(target_language: string): Promise<ApiResponse & object>\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Identifier for ReplaceChatItemAction in TypeScript\nDESCRIPTION: Defines a static `type` property for the `ReplaceChatItemAction` class, overriding the base class property. It serves as a unique string identifier ('ReplaceChatItemAction') for this specific node type within the youtube.js parser system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ReplaceChatItemAction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'ReplaceChatItemAction'\n```\n\n----------------------------------------\n\nTITLE: Defining BrowseRequest Type Alias in TypeScript\nDESCRIPTION: This code snippet defines the BrowseRequest type alias as an object with various optional properties. It includes references to other types such as BrowseRequestSupportedMetadata, FormData, and InlineSettingStatus.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/BrowseRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype BrowseRequest = {\n  browseId?: string;\n  browseRequestSupportedMetadata?: BrowseRequestSupportedMetadata;\n  formData?: FormData;\n  inlineSettingStatus?: InlineSettingStatus;\n  params?: string;\n  query?: string;\n  subscriptionSettingsState?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining AddLiveChatTickerItemAction Class Constructor in TypeScript\nDESCRIPTION: Constructor implementation for AddLiveChatTickerItemAction class that takes raw node data as input and initializes the instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/AddLiveChatTickerItemAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew AddLiveChatTickerItemAction(data: RawNode): AddLiveChatTickerItemAction\n```\n\n----------------------------------------\n\nTITLE: Uploading Video to YouTube using Studio API in TypeScript\nDESCRIPTION: This method uploads a video to YouTube. It takes a file (as BodyInit) and an optional metadata object as parameters. The example demonstrates how to read a video file and upload it with a title.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Clients/classes/Studio.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst file = fs.readFileSync('./my_awesome_video.mp4');\nconst response = await yt.studio.upload(file.buffer, { title: 'Wow!' });\n```\n\n----------------------------------------\n\nTITLE: Defining ShowMiniplayerCommand Class in TypeScript\nDESCRIPTION: This snippet defines the ShowMiniplayerCommand class which extends YTNode. It includes a constructor, properties for miniplayer_command and show_premium_branding, and inherits methods from YTNode.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/ShowMiniplayerCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass ShowMiniplayerCommand extends YTNode {\n  static type = 'showMiniplayerCommand';\n\n  miniplayer_command: NavigationEndpoint;\n  show_premium_branding: boolean;\n\n  constructor(data: RawNode) {\n    super();\n    // Implementation not shown\n  }\n\n  // Inherited methods: as(), hasKey(), is(), key()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining UnsubscribeRequest Type Interface in TypeScript\nDESCRIPTION: TypeScript type alias that defines the structure of an unsubscribe request object. Contains optional properties: channelIds (array of strings), params (string), and siloName (string).\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/type-aliases/UnsubscribeRequest.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ntype UnsubscribeRequest = {\n    channelIds?: string[];\n    params?: string;\n    siloName?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: TranscriptSectionHeader Constructor Implementation in TypeScript\nDESCRIPTION: Constructor for the TranscriptSectionHeader class that accepts a RawNode parameter and initializes a new instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TranscriptSectionHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nnew TranscriptSectionHeader(data): TranscriptSectionHeader\n```\n\n----------------------------------------\n\nTITLE: Type Checking Function - TypeScript\nDESCRIPTION: Function that takes a key and value parameter to determine if the value is of a misc type. Returns a MiscInferenceType if true, or false if not. Used in the YouTube.js parser generator.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Generator/functions/isMiscType.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nisMiscType(key: string, value: unknown): MiscInferenceType | false\n```\n\n----------------------------------------\n\nTITLE: YouTube.js Node Classes Index - Markdown Links\nDESCRIPTION: A markdown formatted list of links to YouTube.js node class documentation files, covering components like music players, playlist controls, search interfaces, and other YouTube features.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/YTNode.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [`MetadataScreen`](../../YTNodes/classes/MetadataScreen.md)\n- [`MicroformatData`](../../YTNodes/classes/MicroformatData.md)\n[...remaining links...]\n```\n\n----------------------------------------\n\nTITLE: TitleAndButtonListHeader Class Definition in TypeScript\nDESCRIPTION: This snippet shows the definition of the TitleAndButtonListHeader class which extends YTNode. It includes the constructor that takes a RawNode data parameter and a title property of type Text.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/TitleAndButtonListHeader.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n> **new TitleAndButtonListHeader**(`data`): [`TitleAndButtonListHeader`](TitleAndButtonListHeader.md)\n```\n\n----------------------------------------\n\nTITLE: Defining concatMemos Function in TypeScript\nDESCRIPTION: Defines the concatMemos function that takes multiple iterables (Memo objects or undefined) as arguments and returns a single Memo object. The function is located in the Utils.ts file of the youtubei.js project.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/concatMemos.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconcatMemos(...iterables: (undefined | Memo)[]): Memo\n```\n\n----------------------------------------\n\nTITLE: Defining subtitle Property in RichMetadata (TypeScript)\nDESCRIPTION: Declares the `subtitle` property within the `RichMetadata` class. This property holds data of type `Text`, representing the subtitle text associated with the metadata.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadata.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nsubtitle: Text\n```\n\n----------------------------------------\n\nTITLE: Defining IPlayabilityStatus Interface Properties in TypeScript\nDESCRIPTION: TypeScript interface definition that specifies the structure of YouTube video playability status. It includes properties for audio-only playability, embeddable status, error screens, status messages and reasons.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IPlayabilityStatus.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\ninterface IPlayabilityStatus {\n    audio_only_playability: null | AudioOnlyPlayability;\n    embeddable: boolean;\n    error_screen: null | YTNode;\n    reason: string;\n    status: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining NavigateAction Class in TypeScript\nDESCRIPTION: This code snippet defines the NavigateAction class, which extends YTNode. It includes a constructor, properties, and static type definition.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/NavigateAction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass NavigateAction extends YTNode {\n  static type = 'navigateAction' as const;\n\n  endpoint: NavigationEndpoint;\n\n  constructor(data: RawNode) {\n    super();\n    this.endpoint = new NavigationEndpoint(data.endpoint);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining the storyboards property in RawResponse TypeScript interface\nDESCRIPTION: Optional property definition for 'storyboards' in the RawResponse interface. This property is of type RawNode and typically contains data for video storyboards/thumbnails.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/APIResponseTypes/interfaces/IRawResponse.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n> `optional` **storyboards**: [`RawNode`](../type-aliases/RawNode.md)\n```\n\n----------------------------------------\n\nTITLE: Constants Index in Markdown\nDESCRIPTION: Markdown listing of constant variable references with links to their respective documentation pages.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Constants/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[youtubei.js](../../README.md) / Constants\n\n# Constants\n\n## Index\n\n### Variables\n\n- [CLIENT_NAME_IDS](variables/CLIENT_NAME_IDS.md)\n- [CLIENTS](variables/CLIENTS.md)\n- [INNERTUBE_HEADERS_BASE](variables/INNERTUBE_HEADERS_BASE.md)\n- [OAUTH](variables/OAUTH.md)\n- [STREAM_HEADERS](variables/STREAM_HEADERS.md)\n- [SUPPORTED_CLIENTS](variables/SUPPORTED_CLIENTS.md)\n- [URLS](variables/URLS.md)\n```\n\n----------------------------------------\n\nTITLE: Logging Module Exports\nDESCRIPTION: Interface documentation showing the exported functions and variables from the logging module. Includes functions for different log levels (debug, info, warn, error) and configuration.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Log/README.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nLevel\n\ndebug()\nerror()\ninfo()\nsetLevel()\nwarn()\nwarnOnce()\n```\n\n----------------------------------------\n\nTITLE: Defining LiveChatTickerSponsorItem Class in TypeScript\nDESCRIPTION: This snippet defines the LiveChatTickerSponsorItem class, which extends YTNode. It includes properties for id, detail, author, and duration_sec, as well as a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/LiveChatTickerSponsorItem.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass LiveChatTickerSponsorItem extends YTNode {\n  static type = 'LiveChatTickerSponsorItem';\n\n  id: string;\n  detail: Text;\n  author: Author;\n  duration_sec: string;\n\n  constructor(data: RawNode) {\n    super();\n    this.id = data.id;\n    this.detail = new Text(data.detailText);\n    this.author = new Author(data.authorPhoto, data.authorExternalChannelId, data.authorName);\n    this.duration_sec = data.durationSec;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Raw Continuation Data in TypeScript\nDESCRIPTION: This method retrieves continuation data as it is, without processing. It returns a Promise that resolves to either undefined or an IBrowseResponse object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/HashtagFeed.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuationData(): Promise<undefined | IBrowseResponse>\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Checking Methods in TypeScript\nDESCRIPTION: Methods for type checking and casting YTNode instances to specific types, including 'is' and 'as' methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/YTNode.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\n\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\n```\n\n----------------------------------------\n\nTITLE: Declaring the Inherited Readonly 'type' Property (TypeScript)\nDESCRIPTION: Defines the inherited `type` property from `YTNode`. This readonly instance property holds the node type as a string.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SimpleCardContent.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nreadonly type: string\n```\n\n----------------------------------------\n\nTITLE: Implementing Album Class Constructor in TypeScript\nDESCRIPTION: This snippet shows the constructor for the Album class, which takes an ApiResponse parameter and initializes the object.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTMusic/classes/Album.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconstructor(response: ApiResponse) {\n  // Implementation not shown\n}\n```\n\n----------------------------------------\n\nTITLE: Defining VideoInfoCardContent Properties in TypeScript\nDESCRIPTION: This code defines the properties of the VideoInfoCardContent class including title, channel_name, view_count, video_thumbnails, duration, and endpoint.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/VideoInfoCardContent.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\ntitle: Text;\nchannel_name: Text;\nview_count: Text;\nvideo_thumbnails: Thumbnail[];\nduration: Text;\nendpoint: NavigationEndpoint;\n```\n\n----------------------------------------\n\nTITLE: Event Listener Removal Method in TypeScript\nDESCRIPTION: Method signature for removeEventListener() that removes event listeners from the target's event listener list\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/classes/Session.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nremoveEventListener(type: string, callback: null | EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Property for RichMetadataRow in TypeScript\nDESCRIPTION: Defines a static `type` property for the `RichMetadataRow` class, explicitly setting its value to the string 'RichMetadataRow'. This static property overrides the one potentially inherited from `YTNode` and serves as a type identifier for the class itself.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/RichMetadataRow.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'RichMetadataRow'\n```\n\n----------------------------------------\n\nTITLE: Markdown Class Index\nDESCRIPTION: Index listing of available classes in the YouTube.js mixins module including links to individual class documentation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Mixins/README.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### Classes\n\n- [Feed](classes/Feed.md)\n- [FilterableFeed](classes/FilterableFeed.md)\n- [MediaInfo](classes/MediaInfo.md)\n- [TabbedFeed](classes/TabbedFeed.md)\n```\n\n----------------------------------------\n\nTITLE: ThumbnailHoverOverlayView Class Definition in TypeScript\nDESCRIPTION: Definition of the ThumbnailHoverOverlayView class that extends YTNode. It includes properties for icon_name, text, and style, with a constructor that takes a RawNode parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailHoverOverlayView.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nclass ThumbnailHoverOverlayView extends YTNode {\n  static type: string = 'ThumbnailHoverOverlayView';\n\n  icon_name: string;\n  text: Text;\n  style: string;\n\n  constructor(data: RawNode): ThumbnailHoverOverlayView {\n    // constructor implementation not shown in the provided code\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Undefined Type Return in TypeScript\nDESCRIPTION: Method that explicitly returns undefined. Part of the parser helper utilities.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Helpers/classes/Maybe.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nundefined(): undefined\n```\n\n----------------------------------------\n\nTITLE: Disliking a Comment in YouTube.js\nDESCRIPTION: Method to dislike a comment. It returns a Promise that resolves to an ApiResponse.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/examples/comments/CommentView.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ndislike(): Promise<ApiResponse>\n```\n\n----------------------------------------\n\nTITLE: Playlist Class Type Definition\nDESCRIPTION: Static type definition for the Playlist class, establishing its identifier in the YouTube.js type system.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/Playlist.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nstatic type: string = 'Playlist'\n```\n\n----------------------------------------\n\nTITLE: Defining the Inherited 'key' Method in YTNode (TypeScript)\nDESCRIPTION: Shows the inherited method `key` from the `YTNode` class. This method asserts that the node instance has a specific key and returns its value wrapped in a `Maybe` helper class. It throws an error if the key does not exist.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SignalServiceEndpoint.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nkey<T, R>(key: T): Maybe<R>\n```\n\n----------------------------------------\n\nTITLE: Converting Text to String in TypeScript\nDESCRIPTION: Method to convert the text content to a string representation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/Text.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\ntoString(): string\n```\n\n----------------------------------------\n\nTITLE: Defining Static Type Identifier for SearchSubMenu in TypeScript\nDESCRIPTION: Defines a static property `type` specifically for the `SearchSubMenu` class, overriding the static `type` from `YTNode`. It assigns the string literal 'SearchSubMenu' as the unique type identifier for this class, used for type checking and identification.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SearchSubMenu.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nstatic type: string = 'SearchSubMenu'\n```\n\n----------------------------------------\n\nTITLE: Converting Uint8Array to Base64 String in TypeScript\nDESCRIPTION: Function signature for converting a Uint8Array buffer to a base64 encoded string. Takes a Uint8Array parameter and returns the base64 string representation. Located in Utils.ts at line 233.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Utils/functions/u8ToBase64.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nu8ToBase64(u8: Uint8Array): string\n```\n\n----------------------------------------\n\nTITLE: Defining warnOnce Function in TypeScript\nDESCRIPTION: This snippet defines the warnOnce function, which takes a string id and variable number of additional arguments. It returns void, indicating it doesn't return a value but likely performs a logging operation.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Log/functions/warnOnce.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nwarnOnce(id: string, ...args: any[]): void\n```\n\n----------------------------------------\n\nTITLE: Implementing GetContinuation Method\nDESCRIPTION: Method to retrieve the next batch of content and return a new Feed object with IBrowseResponse type.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ngetContinuation(): Promise<Feed<IBrowseResponse>>\n```\n\n----------------------------------------\n\nTITLE: Implementing GetShelf Method\nDESCRIPTION: Method to find a shelf by title, returning either undefined or various shelf type objects.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YT/classes/Library.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ngetShelf(title: string): undefined | ReelShelf | RichShelf | Shelf\n```\n\n----------------------------------------\n\nTITLE: MacroMarkersInfoItem Constructor Implementation - TypeScript\nDESCRIPTION: Constructor implementation for MacroMarkersInfoItem class that takes a RawNode data parameter and returns a new instance.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/MacroMarkersInfoItem.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nnew MacroMarkersInfoItem(data: RawNode): MacroMarkersInfoItem\n```\n\n----------------------------------------\n\nTITLE: Defining the ID Property for SettingsCheckbox in TypeScript\nDESCRIPTION: Declares the `id` property for the `SettingsCheckbox` class. This string property holds a unique identifier associated with the specific checkbox setting, likely used internally for referencing or state management.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/SettingsCheckbox.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nid: string\n```\n\n----------------------------------------\n\nTITLE: Implementing Helper Methods - TypeScript\nDESCRIPTION: Collection of inherited helper methods from YTNode for type checking and key management, including as(), is(), hasKey(), and key() methods.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/FeedTabbedHeader.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nas<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): InstanceType<K[number]>\nis<T extends YTNode, K extends YTNodeConstructor<T>[]>(...types: K): this is InstanceType<K[number]>\nhasKey<T extends string, R = any>(key: T): this is FeedTabbedHeader & { [k in string]: R }\nkey<T extends string, R = any>(key: T): Maybe\n```\n\n----------------------------------------\n\nTITLE: YTNode Method Implementation: 'as' Type Casting Method\nDESCRIPTION: Method that allows casting a YTNode to one of the given types. This is an inherited method from the base YTNode class that enables type-safe casting between node types.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/CompactPlaylist.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n**as**\\<`T`, `K`\\>(...`types`): `InstanceType`\\<`K`\\[`number`\\]\\>\n```\n\n----------------------------------------\n\nTITLE: ThumbnailOverlayInlineUnplayable Method 'hasKey' in TypeScript\nDESCRIPTION: Method to check if a key exists on the node without asserting its type. Returns a type predicate indicating whether the node has the specified key.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ThumbnailOverlayInlineUnplayable.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nhasKey<T extends string, R = any>(key: T): this is ThumbnailOverlayInlineUnplayable & { [k in string]: R }\n```\n\n----------------------------------------\n\nTITLE: TextRun toHTML Method Implementation\nDESCRIPTION: Implementation of the toHTML method that converts the text content to HTML format with appropriate formatting.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/Misc/classes/TextRun.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntoHTML(): string\n```\n\n----------------------------------------\n\nTITLE: Constructor Definition - ContinuationCommand Class\nDESCRIPTION: Constructor that creates a new ContinuationCommand instance by accepting raw node data as parameter.\nSOURCE: https://github.com/luanrt/youtube.js/blob/main/docs/api/namespaces/YTNodes/classes/ContinuationCommand.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nnew ContinuationCommand(data: RawNode): ContinuationCommand\n```"
  }
]