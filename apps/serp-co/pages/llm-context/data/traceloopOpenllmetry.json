[
  {
    "owner": "traceloop",
    "repo": "openllmetry",
    "content": "TITLE: Initializing OpenLLMetry in Python\nDESCRIPTION: This snippet demonstrates how to initialize the OpenLLMetry SDK in a Python application. It's the basic setup required to start tracing your code with OpenLLMetry.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom traceloop.sdk import Traceloop\n\nTraceloop.init()\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenLLMetry with Immediate Trace Viewing in Python\nDESCRIPTION: This code shows how to initialize OpenLLMetry with batch sending disabled, allowing immediate viewing of traces. This is useful for local development and testing.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nTraceloop.init(disable_batch=True)\n```\n\n----------------------------------------\n\nTITLE: Initializing Traceloop SDK and Creating an LLM-Generated Joke Workflow in Python\nDESCRIPTION: This snippet demonstrates how to initialize the Traceloop SDK and create a workflow for generating jokes using OpenAI's GPT-3.5-turbo model. It showcases the @workflow decorator and the use of the openai library for chat completion.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/traceloop-sdk/README.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nTraceloop.init(app_name=\"joke_generation_service\")\n\n@workflow(name=\"joke_creation\")\ndef create_joke():\n    completion = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[{\"role\": \"user\", \"content\": \"Tell me a joke about opentelemetry\"}],\n    )\n\n    return completion.choices[0].message.content\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Langchain with OpenTelemetry\nDESCRIPTION: Python code snippet showing how to initialize and apply the Langchain instrumentation to enable tracing in a Langchain application.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-langchain/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.langchain import LangchainInstrumentor\n\nLangchainInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenLLMetry SDK in Python\nDESCRIPTION: This code snippet shows how to install the OpenLLMetry SDK using pip. It's the first step in instrumenting your LLM application for observability.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install traceloop-sdk\n```\n\n----------------------------------------\n\nTITLE: Instrumenting LlamaIndex with OpenTelemetry\nDESCRIPTION: Python code example showing how to import and initialize the LlamaIndex instrumentation for OpenTelemetry to enable tracing in a LlamaIndex application.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-llamaindex/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.llamaindex import LlamaIndexInstrumentor\n\nLlamaIndexInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Mistral AI with OpenTelemetry in Python\nDESCRIPTION: Python code snippet demonstrating how to instrument Mistral AI calls using the OpenTelemetry instrumentation. This enables tracing of Mistral AI API calls.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-mistralai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.mistralai import MistralAiInstrumentor\n\nMistralAiInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Initializing VertexAI OpenTelemetry Instrumentation\nDESCRIPTION: Python code to initialize and instrument VertexAI with OpenTelemetry for tracing prompts and completions.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-vertexai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.vertexai import VertexAIInstrumentor\n\nVertexAIInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Anthropic with OpenTelemetry\nDESCRIPTION: Basic example of how to use the AnthropicInstrumentor to enable OpenTelemetry tracing for Anthropic API calls.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-anthropic/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.anthropic import AnthropicInstrumentor\n\nAnthropicInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting CrewAI with OpenTelemetry in Python\nDESCRIPTION: This code snippet demonstrates how to use the CrewAIInstrumentor to instrument CrewAI with OpenTelemetry for tracing purposes.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-crewai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.crewai import CrewAIInstrumentor\n\nCrewAIInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Implementing Chroma Instrumentation with OpenTelemetry\nDESCRIPTION: Python code example showing how to initialize and instrument Chroma DB with OpenTelemetry for tracing client-side calls.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-chromadb/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.chromadb import ChromaInstrumentor\n\nChromaInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Weaviate with OpenTelemetry in Python\nDESCRIPTION: This code snippet demonstrates how to use the WeaviateInstrumentor to enable tracing for Weaviate client calls in a Python application.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-weaviate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.weaviate import WeaviateInstrumentor\n\nWeaviateInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Milvus with OpenTelemetry\nDESCRIPTION: Python code example showing how to instrument Milvus client calls with OpenTelemetry for tracing. This enables monitoring and observability of Milvus operations.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-milvus/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.milvus import MilvusInstrumentor\n\nMilvusInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Implementing OpenAI Instrumentation in Python\nDESCRIPTION: Example code showing how to initialize and apply the OpenAI instrumentation in a Python application. This enables automatic tracing of OpenAI API calls.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-openai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.openai import OpenAIInstrumentor\n\nOpenAIInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Aleph Alpha Client with OpenTelemetry in Python\nDESCRIPTION: This code snippet demonstrates how to use the AlephAlphaInstrumentor to add OpenTelemetry instrumentation to the Aleph Alpha client. It enables tracing of API calls made to Aleph Alpha endpoints.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-alephalpha/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.alephalpha import AlephAlphaInstrumentor\n\nAlephAlphaInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Together AI with OpenTelemetry in Python\nDESCRIPTION: This code snippet demonstrates how to use the TogetherAiInstrumentor to enable tracing for Together AI calls. It imports the necessary class and calls the instrument method.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-together/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.together import TogetherAiInstrumentor\n\nTogetherAiInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry OpenAI Instrumentation with pip\nDESCRIPTION: Command to install the OpenTelemetry instrumentation for OpenAI using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-openai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-openai\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Langchain Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for Langchain using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-langchain/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-langchain\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Tracing for Privacy\nDESCRIPTION: Environment variable setting to disable the logging of prompts, completions, and embeddings in trace data for privacy reasons.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-langchain/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Instrumenting HuggingFace Transformers with OpenTelemetry\nDESCRIPTION: Python code snippet demonstrating how to instrument the HuggingFace Transformers library using the TransformersInstrumentor.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-transformers/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.transformers import TransformersInstrumentor\n\nTransformersInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Tracing for Privacy\nDESCRIPTION: Environment variable configuration to disable logging of prompts, completions, and embeddings for privacy reasons.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-anthropic/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging for Privacy in Mistral AI Instrumentation\nDESCRIPTION: Bash command to set an environment variable that disables logging of prompts, completions, and embeddings in the OpenTelemetry spans for privacy reasons or to reduce trace size.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-mistralai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging for Privacy in Watsonx Instrumentation\nDESCRIPTION: Bash command to set an environment variable that disables logging of prompts, completions, and embeddings in the Watsonx instrumentation for privacy reasons.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-watsonx/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging in VertexAI Instrumentation\nDESCRIPTION: Environment variable setting to disable logging of prompts, completions, and embeddings for privacy concerns or to reduce trace size.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-vertexai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Tracing for Privacy\nDESCRIPTION: Command showing how to disable the logging of prompts, completions, and embeddings for privacy concerns by setting an environment variable.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-llamaindex/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging for Privacy\nDESCRIPTION: Environment variable setting to disable the logging of prompts, completions, and embeddings for privacy concerns or to reduce trace size.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-ollama/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Settings\nDESCRIPTION: Environment variable setting to disable content logging for privacy concerns.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-haystack/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry LlamaIndex Instrumentation\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for LlamaIndex via pip.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-llamaindex/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-llamaindex\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentation for Watsonx\nDESCRIPTION: Command to install the OpenTelemetry instrumentation for IBM Watsonx using pip. This library allows tracing of IBM Watsonx prompts and completions.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-watsonx/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-watsonx\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Cohere Instrumentation Package\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for Cohere via pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-cohere/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-cohere\n```\n\n----------------------------------------\n\nTITLE: Implementing Cohere Instrumentation in Python\nDESCRIPTION: Code example showing how to initialize and instrument Cohere API calls with OpenTelemetry for tracing purposes.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-cohere/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.cohere import CohereInstrumentor\n\nCohereInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Together AI Instrumentation with pip\nDESCRIPTION: This command installs the OpenTelemetry instrumentation library for Together AI using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-together/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-together\n```\n\n----------------------------------------\n\nTITLE: Initializing Bedrock Instrumentation in Python\nDESCRIPTION: Basic setup code to initialize and instrument Bedrock with OpenTelemetry for tracing. This enables monitoring of prompts, completions, and embeddings from AWS Bedrock models.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-bedrock/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.bedrock import BedrockInstrumentor\n\nBedrockInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Pinecone Instrumentation via pip\nDESCRIPTION: This command installs the OpenTelemetry Pinecone Instrumentation library using pip, the Python package installer.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-pinecone/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-pinecone\n```\n\n----------------------------------------\n\nTITLE: Installing Google Generative AI OpenTelemetry Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for Google Generative AI using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-google-generativeai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-google-generativeai\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Google Generative AI with OpenTelemetry\nDESCRIPTION: Python code example showing how to import and initialize the GoogleGenerativeAiInstrumentor to enable tracing for Google Generative AI operations.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-google-generativeai/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.google_generativeai import GoogleGenerativeAiInstrumentor\n\nGoogleGenerativeAiInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Instrumentation for Transformers\nDESCRIPTION: Command to install the opentelemetry-instrumentation-transformers package using pip.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-transformers/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-transformers\n```\n\n----------------------------------------\n\nTITLE: Implementing Qdrant Instrumentation with OpenTelemetry\nDESCRIPTION: Example code demonstrating how to implement the Qdrant instrumentation for tracing client-side calls to Qdrant vector database using the OpenTelemetry framework.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-qdrant/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.qdrant import QdrantInstrumentor\n\nQdrantInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Implementing Ollama Instrumentation in Python\nDESCRIPTION: Basic Python code example showing how to initialize and apply the OllamaInstrumentor to trace calls to Ollama's endpoints.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-ollama/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.ollama import OllamaInstrumentor\n\nOllamaInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Marqo Client with OpenTelemetry\nDESCRIPTION: Example of how to initialize and apply the Marqo instrumentation to enable automatic tracing of Marqo client operations in your application.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-marqo/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.marqo import MarqoInstrumentor\n\nMarqoInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting LanceDB with OpenTelemetry in Python\nDESCRIPTION: Example showing how to initialize and apply the LanceDB instrumentation in a Python application to enable OpenTelemetry tracing for LanceDB operations.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-lancedb/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.lancedb import LanceInstrumentor\n\nLanceInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Pinecone with OpenTelemetry in Python\nDESCRIPTION: This code snippet demonstrates how to use the PineconeInstrumentor to instrument Pinecone calls for tracing. It imports the necessary class and calls the instrument method.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-pinecone/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.pinecone import PineconeInstrumentor\n\nPineconeInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting SageMaker with OpenTelemetry\nDESCRIPTION: Python code demonstrating how to initialize and instrument SageMaker with OpenTelemetry for tracing capabilities.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-sagemaker/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.sagemaker import SageMakerInstrumentor\n\nSageMakerInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Watsonx with OpenTelemetry in Python\nDESCRIPTION: Python code snippet demonstrating how to instrument IBM Watsonx using the OpenTelemetry instrumentation. This enables tracing of Watsonx operations.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-watsonx/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.watsonx import WatsonxInstrumentor\n\nWatsonxInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Groq with OpenTelemetry in Python\nDESCRIPTION: Python code snippet demonstrating how to use the GroqInstrumentor to instrument Groq operations for tracing.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-groq/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.groq import GroqInstrumentor\n\nGroqInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Instrumenting Replicate with OpenTelemetry in Python\nDESCRIPTION: Python code snippet demonstrating how to initialize and instrument Replicate using the OpenTelemetry Replicate Instrumentation. This enables tracing of Replicate API calls.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-replicate/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.replicate import ReplicateInstrumentor\n\nReplicateInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Initializing Haystack Instrumentation\nDESCRIPTION: Python code to initialize and instrument Haystack with OpenTelemetry for tracing LLM applications.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-haystack/README.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom opentelemetry.instrumentation.haystack import HaystackInstrumentor\n\nHaystackInstrumentor().instrument()\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging for Privacy with Environment Variable\nDESCRIPTION: Command to set an environment variable that disables the logging of prompts, completions, and embeddings in traces for privacy reasons.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-openai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Settings for Trace Content\nDESCRIPTION: Environment variable setting to disable logging of prompts, completions, and embeddings in trace spans for privacy concerns.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-cohere/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Configuring Privacy Settings for Trace Content\nDESCRIPTION: Environment variable setting to disable logging of sensitive content in traces for privacy concerns.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-bedrock/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Tracing for Privacy\nDESCRIPTION: Environment variable configuration to disable logging of request bodies and responses for privacy concerns.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-sagemaker/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling content logging for Together AI instrumentation\nDESCRIPTION: This environment variable setting disables the logging of prompts, completions, and embeddings in the OpenTelemetry spans for privacy reasons or to reduce trace size.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-together/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging for Privacy\nDESCRIPTION: Bash command to set an environment variable that disables logging of prompts, completions, and embeddings for privacy reasons.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-transformers/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging for Privacy in Bash\nDESCRIPTION: Bash command to set an environment variable that disables logging of prompts, completions, and embeddings for privacy reasons.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-groq/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging for Privacy in Bash\nDESCRIPTION: This command sets an environment variable to disable logging of prompts, completions, and embeddings in span attributes. It's used to enhance privacy and reduce the size of traces when using the Aleph Alpha OpenTelemetry instrumentation.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-alephalpha/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling content logging for privacy in bash\nDESCRIPTION: Bash command to set an environment variable that disables logging of prompts, completions, and embeddings in traces for privacy reasons or to reduce trace size.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-replicate/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling Content Logging for Privacy via Environment Variable\nDESCRIPTION: Command to set the TRACELOOP_TRACE_CONTENT environment variable to false, which disables logging of prompts, completions, and embeddings in span attributes for privacy reasons.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-google-generativeai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Disabling content logging for privacy in bash\nDESCRIPTION: This command sets an environment variable to disable logging of prompts, completions, and embeddings for privacy reasons or to reduce trace size.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-crewai/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nTRACELOOP_TRACE_CONTENT=false\n```\n\n----------------------------------------\n\nTITLE: Embedding Contributors Image in Markdown\nDESCRIPTION: This snippet embeds a dynamically generated image of project contributors using the contrib.rocks service. It links to the GitHub contributors page for the OpenLLMetry repository.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: Markdown\nCODE:\n```\n<a href=\"https://github.com/traceloop/openllmetry/graphs/contributors\">\n  <img alt=\"contributors\" src=\"https://contrib.rocks/image?repo=traceloop/openllmetry\"/>\n</a>\n```\n\n----------------------------------------\n\nTITLE: Ignoring SSL Errors in OpenTelemetry Exporter for Watsonx\nDESCRIPTION: Bash command to set an environment variable that instructs the OpenTelemetry exporter to ignore SSL errors when using the Watsonx instrumentation.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-watsonx/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nOTEL_EXPORTER_OTLP_INSECURE=true\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Bedrock Instrumentation Package\nDESCRIPTION: Command to install the OpenTelemetry Bedrock instrumentation package using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-bedrock/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-bedrock\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Anthropic Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry Anthropic instrumentation library using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-anthropic/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-anthropic\n```\n\n----------------------------------------\n\nTITLE: Installing SageMaker Instrumentation Package\nDESCRIPTION: Command to install the OpenTelemetry SageMaker instrumentation package using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-sagemaker/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-sagemaker\n```\n\n----------------------------------------\n\nTITLE: Installing VertexAI OpenTelemetry Instrumentation Package\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for VertexAI using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-vertexai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-vertexai\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Mistral AI Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry instrumentation for Mistral AI using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-mistralai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-mistralai\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Ollama Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry instrumentation for Ollama using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-ollama/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-ollama\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Groq Instrumentation with pip\nDESCRIPTION: Command to install the OpenTelemetry instrumentation for Groq using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-groq/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-groq\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Aleph Alpha Instrumentation with pip\nDESCRIPTION: This command installs the OpenTelemetry instrumentation for Aleph Alpha using pip. It allows users to add tracing capabilities to their Aleph Alpha API calls.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-alephalpha/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-alephalpha\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Replicate Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry Replicate Instrumentation library using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-replicate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-replicate\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Qdrant Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry Qdrant instrumentation library using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-qdrant/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-qdrant\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Chroma Instrumentation\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for Chroma DB via pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-chromadb/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-chromadb\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Marqo Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for Marqo vector DB using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-marqo/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-marqo\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Milvus Instrumentation via pip\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for Milvus using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-milvus/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-milvus\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry Weaviate Instrumentation via pip\nDESCRIPTION: This command installs the OpenTelemetry Weaviate Instrumentation library using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-weaviate/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-weaviate\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry LanceDB Instrumentation using pip\nDESCRIPTION: Command for installing the OpenTelemetry LanceDB instrumentation package using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-lancedb/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-lancedb\n```\n\n----------------------------------------\n\nTITLE: Building Hacker News in Arc Programming Language\nDESCRIPTION: Reference to developing Hacker News (originally Startup News) using a new version of Arc that was compiled into Scheme. The platform was created as a test case for the Arc language and evolved from a startup-focused news aggregator to a general intellectual curiosity platform.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/sample-app/data/paul_graham/paul_graham_essay.txt#2025-04-22_snippet_0\n\nLANGUAGE: Arc\nCODE:\n```\n// No explicit code snippets provided in the text, only mentions of Arc being used to build Hacker News and YC's internal software\n```\n\n----------------------------------------\n\nTITLE: Installing OpenTelemetry CrewAI Instrumentation via pip\nDESCRIPTION: This command installs the OpenTelemetry CrewAI Instrumentation library using pip package manager.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-crewai/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-crewai\n```\n\n----------------------------------------\n\nTITLE: Installing Haystack OpenTelemetry Instrumentation\nDESCRIPTION: Command to install the OpenTelemetry instrumentation package for Haystack via pip.\nSOURCE: https://github.com/traceloop/openllmetry/blob/main/packages/opentelemetry-instrumentation-haystack/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install opentelemetry-instrumentation-haystack\n```"
  }
]