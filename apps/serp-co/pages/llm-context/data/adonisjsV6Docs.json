[
  {
    "owner": "adonisjs",
    "repo": "v6-docs",
    "content": "TITLE: Basic Controller Implementation\nDESCRIPTION: Example of a basic UsersController class with an index method returning user data\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class UsersController {\n  index() {\n    return [\n      {\n        id: 1,\n        username: 'virk',\n      },\n      {\n        id: 2,\n        username: 'romain',\n      },\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Destructuring HTTP Context in Route Handler\nDESCRIPTION: Shows how to destructure properties from the HTTP context in a route handler to access request data (URL, headers, query parameters, body) and send responses.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Destructure properties\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', ({ request, response }) => {\n  console.log(request.url())\n  console.log(request.headers())\n  console.log(request.qs())\n  console.log(request.body())\n  \n  response.send('hello world')\n  response.send({ hello: 'world' })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Routes in AdonisJS\nDESCRIPTION: This snippet demonstrates how to define basic routes in AdonisJS, including static and dynamic routes with route params.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', () => {\n  return 'Hello world from the home page.'\n})\n\nrouter.get('/about', () => {\n  return 'This is the about page.'\n})\n\nrouter.get('/posts/:id', ({ params }) => {\n  return `This is post with id ${params.id}`\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Post Validators\nDESCRIPTION: Defines validation schemas for creating and updating posts using VineJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\n/**\n * Validates the post's creation action\n */\nexport const createPostValidator = vine.compile(\n  vine.object({\n    title: vine.string().trim().minLength(6),\n    slug: vine.string().trim(),\n    description: vine.string().trim().escape()\n  })\n)\n\n/**\n * Validates the post's update action\n */\nexport const updatePostValidator = vine.compile(\n  vine.object({\n    title: vine.string().trim().minLength(6),\n    description: vine.string().trim().escape()\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Specifying Explicit Params in AdonisJS Redirects\nDESCRIPTION: Shows how to specify explicit parameters when redirecting, overriding any parameters from the original request.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\n// Always redirect to /articles/1\nrouter.on('/posts/:id').redirect('/articles/:id', {\n  id: 1\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Validation Schema in AdonisJS\nDESCRIPTION: This snippet demonstrates creating a validation schema and using the `request.validate` method to validate incoming HTTP requests. Dependencies include AdonisJS core services and the validator module. The `registerUserSchema` contains email and password fields with specific rules. Expected inputs are the email and password, and outputs are validated data or exceptions. This code is part of an HTTP POST request handler.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validation.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport { schema, rules } from '@adonisjs/core/validator'\n\nrouter.post('register', async ({ request }) => {\n  const registerUserSchema = schema.create({\n    email: schema.string([\n      rules.email(),\n      rules.unique({ table: 'users' })\n    ]),\n    \n    password: schema.string([\n      rules.minLength(6),\n      rules.maxLength(40)\n    ])\n  })\n  \n  await request.validate({\n    schema: registerUserSchema\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Route Parameters in AdonisJS\nDESCRIPTION: Shows how to access route parameters using params() and param() methods from the request object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('posts/:slug/comments/:id', async ({ request }) => {\n  /*\n   * URL: /posts/hello-world/comments/2\n   * params: { slug: 'hello-world', id: '2' }\n   */\n  request.params()\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Server Middleware in AdonisJS\nDESCRIPTION: This snippet demonstrates how to register server middleware using the server.use method inside the start/kernel.ts file. Server middleware runs on every HTTP request, even if no route is defined for the current request's URL.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport server from '@adonisjs/core/services/server'\n\nserver.use([\n  () => import('@adonisjs/static/static_middleware')\n])\n```\n\n----------------------------------------\n\nTITLE: Extending HTTP Context with Custom Properties\nDESCRIPTION: Shows how to extend the HTTP context class with custom methods and properties using macros and getters, along with the required TypeScript type declarations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\n// insert-start\ndeclare module '@adonisjs/core/http' {\n  export interface HttpContext {\n    aMethod: () => ValueType\n    aProperty: ValueType\n  }\n}\n// insert-end\n\nHttpContext.macro('aMethod', function (this: HttpContext) {\n  return value\n})\n\nHttpContext.getter('aProperty', function (this: HttpContext) {\n  return value\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Different HTTP Methods in AdonisJS\nDESCRIPTION: This snippet demonstrates how to define routes for various HTTP methods in AdonisJS, including GET, POST, PUT, PATCH, and DELETE.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\n// GET method\nrouter.get('users', () => {})\n\n// POST method\nrouter.post('users', () => {})\n\n// PUT method\nrouter.put('users/:id', () => {})\n\n// PATCH method\nrouter.patch('users/:id', () => {})\n\n// DELETE method\nrouter.delete('users/:id', () => {})\n```\n\n----------------------------------------\n\nTITLE: Performing CRUD Operations with Lucid Models\nDESCRIPTION: Examples of basic CRUD operations (Create, Read, Update, Delete) using Lucid ORM models. Shows how to create, find, update and delete records.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport User from '#models/user'\n\n/**\n * Create a new user\n */\nconst user = await User.create({\n  username: 'rlanz',\n  email: 'romain@adonisjs.com',\n})\n\n/**\n * Find a user by primary key\n */\nconst user = await User.find(1)\n\n/**\n * Update a user\n */\n\nconst user = await User.find(1)\nuser.username = 'romain'\nawait user.save()\n\n/**\n * Delete a user\n */\nconst user = await User.find(1)\nawait user.delete()\n```\n\n----------------------------------------\n\nTITLE: Sending Basic Responses in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates various ways to send simple responses including plain text, HTML fragments, JSON objects, and dates using route handlers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async () => {\n  /** Plain string */\n  return 'This is the homepage.'\n\n  /** Html fragment */\n  return '<p> This is the homepage </p>'\n\n  /** JSON response */\n  return { page: 'home' }\n\n  /** Converted to ISO string */\n  return new Date()\n})\n```\n\n----------------------------------------\n\nTITLE: File Validation Using Validator in AdonisJS\nDESCRIPTION: Demonstrates how to use the validator to validate uploaded files as part of the validation pipeline in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nexport const updateAvatarValidator = vine.compile(\n  vine.object({\n    avatar: vine.file({\n      size: '2mb',\n      extnames: ['jpg', 'png', 'pdf']\n    })\n  })\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { updateAvatarValidator } from '#validators/user_validator'\n\nexport default class UserAvatarsController {\n  async update({ request }: HttpContext) {\n    const { avatar } = await request.validateUsing(\n      updateAvatarValidator\n    )\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Route Groups in AdonisJS\nDESCRIPTION: Demonstrates how to apply middleware to routes within a group using the group.use method. The group middleware is executed before individual route middleware.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .group(() => {\n    router\n      .get('posts', () => {})\n      .use((_, next) => {\n        console.log('logging from route middleware')\n        return next()\n      })\n  })\n  .use((_, next) => {\n    console.log('logging from group middleware')\n    return next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Initializing AdonisJS Project with Inertia Starter Kit using Shell\nDESCRIPTION: Creates a new AdonisJS project using the 'inertia' starter kit for building server-driven single-page applications. Flags like `--adapter` (e.g., 'react', 'vue') and `--ssr`/`--no-ssr` can be used to customize the frontend setup and server-side rendering.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest -- -K=inertia\n\n# React with server-side rendering\nnpm init adonisjs@latest -- -K=inertia --adapter=react --ssr\n\n# Vue without server-side rendering\nnpm init adonisjs@latest -- -K=inertia --adapter=vue --no-ssr\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Guard in AdonisJS\nDESCRIPTION: Configuration setup for the session guard in config/auth.ts file. Demonstrates how to define the guard and user provider using the session guard implementation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/auth'\nimport { sessionGuard, sessionUserProvider } from '@adonisjs/auth/session'\n\nconst authConfig = defineConfig({\n  default: 'web',\n  guards: {\n    web: sessionGuard({\n      useRememberMeTokens: false,\n      provider: sessionUserProvider({\n        model: () => import('#models/user'),\n      }),\n    })\n  },\n})\n\nexport default authConfig\n```\n\n----------------------------------------\n\nTITLE: Generating Hash Values with AdonisJS Hash Service\nDESCRIPTION: This example demonstrates how to create a hash from a plain string value (like a user password) using the AdonisJS hash service. The service returns a hashed value in PHC string format.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport hash from '@adonisjs/core/services/hash'\n\nconst hash = await hash.make('user_password')\n// $scrypt$n=16384,r=8,p=1$iILKD1gVSx6bqualYqyLBQ$DNzIISdmTQS6sFdQ1tJ3UCZ7Uun4uGHNjj0x8FHOqB0pf2LYsu9Xaj5MFhHg21qBz8l5q/oxpeV+ZkgTAj+OzQ\n```\n\n----------------------------------------\n\nTITLE: Grouping Routes in AdonisJS\nDESCRIPTION: This example shows how to group routes in AdonisJS using the router.group method, including nested groups.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter.group(() => {\n  router.get('posts', () => {})\n\n  router.group(() => {\n    router.get('users', () => {})\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: CSP Configuration for Vite Development Server\nDESCRIPTION: TypeScript configuration for Content Security Policy that allows loading assets from the Vite development server, necessary when using Vite integration with AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nconst shieldConfig = defineConfig({\n  csp: {\n    directives: {\n      defaultSrc: [`'self'`, '@viteDevUrl'],\n      connectSrc: ['@viteHmrUrl']\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Listing Registered Routes in AdonisJS\nDESCRIPTION: This command shows how to list all registered routes in an AdonisJS application using the CLI.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode ace list:routes\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application for Production using Shell\nDESCRIPTION: Compiles the TypeScript AdonisJS application into JavaScript for production deployment using the Ace command-line tool. The output is placed in the 'build' directory. If Vite is configured, it also compiles frontend assets into 'build/public'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build\n```\n\n----------------------------------------\n\nTITLE: Augmenting AdonisJS Response Type Declarations - TypeScript\nDESCRIPTION: This snippet shows how to inform TypeScript about custom properties or methods added to the AdonisJS Response class at runtime using declaration merging. This ensures that custom macros or getters are recognized by the TypeScript compiler, improving developer experience and type safety. The dependency is the '@adonisjs/core/http' module, and custom property types should be properly specified. Replace 'valueType' with the correct type of the property or method as appropriate.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare module '@adonisjs/core/http' {\n  export interface Response {\n    property: valueType\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Users Table Migration in AdonisJS\nDESCRIPTION: This TypeScript code defines a database migration for creating the users table. It includes common fields like id, full_name, email, password, and timestamps.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class extends BaseSchema {\n  protected tableName = 'users'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id').notNullable()\n      table.string('full_name').nullable()\n      table.string('email', 254).notNullable().unique()\n      table.string('password').notNullable()\n\n      table.timestamp('created_at').notNullable()\n      table.timestamp('updated_at').nullable()\n    })\n  }\n\n  async down() {\n    this.schema.dropTable(this.tableName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling 404 Requests in AdonisJS\nDESCRIPTION: Shows how to handle 404 requests by catching the E_ROUTE_NOT_FOUND exception in the global exception handler and rendering a custom 404 template.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nimport { HttpContext, ExceptionHandler } from '@adonisjs/core/http'\n\nexport default class HttpExceptionHandler extends ExceptionHandler {\n  async handle(error: unknown, ctx: HttpContext) {\n    if (error instanceof errors.E_ROUTE_NOT_FOUND) {\n      return ctx.view.render('errors/404')\n    }\n    \n    return super.handle(error, ctx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Values with AdonisJS Encryption Service in TypeScript\nDESCRIPTION: Demonstrates how to encrypt a string value using the AdonisJS encryption service. This snippet imports the encryption service and calls the encrypt method with a string parameter.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/encryption.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport encryption from '@adonisjs/core/services/encryption'\n\nconst encrypted = encryption.encrypt('hello world')\n```\n\n----------------------------------------\n\nTITLE: Validating HTTP Request with Error Handling in AdonisJS (TypeScript)\nDESCRIPTION: Presents a full example of validating a POST request in an AdonisJS route. It defines a `newUserSchema` with data types and validation rules (`email`, `confirmed`, `minLength`), attempts validation using `request.validate`, and includes a `try...catch` block to handle `ValidationException` by sending a 400 Bad Request response with the error messages. It imports `router`, `schema`, and `rules`.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport router from '@adonisjs/core/services/router'\nimport { schema, rules } from '@adonisjs/core/legacy/validator'\n\nrouter.post('users', async ({ request, response }) => {\n  /**\n   * Step 1 - Define schema\n   */\n  const newUserSchema = schema.create({\n    username: schema.string(),\n    email: schema.string([\n      rules.email()\n    ]),\n    password: schema.string([\n      rules.confirmed(),\n      rules.minLength(4)\n    ])\n  })\n\n  try {\n    /**\n     * Step 2 - Validate request body against\n     *          the schema\n     */\n    const payload = await request.validate({\n      schema: newUserSchema\n    })\n  } catch (error) {\n    /**\n     * Step 3 - Handle errors\n     */\n    response.badRequest(error.messages)\n  }\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Controller Route Binding\nDESCRIPTION: Example of binding a controller to a route using lazy loading\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nconst UsersController = () => import('#controllers/users_controller')\n\nrouter.get('users', [UsersController, 'index'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Provider in AdonisJS\nDESCRIPTION: This snippet shows how to register the auth service provider in the adonisrc.ts file. It's a crucial step in setting up authentication for an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/auth/auth_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Aborting Requests with Errors in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the response.abort method to end a request by raising an exception, with options for custom messages and status codes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('posts/:id/edit', async ({ response, auth, params }) => {\n  const post = await Post.findByOrFail(params.id)\n\n  if (!auth.user.can('editPost', post)) {\n    response.abort({ message: 'Cannot edit post' })\n  }\n\n  // continue with the rest of the logic\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.abort({ message: 'Cannot edit post' }, 403)\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in Route Handler\nDESCRIPTION: Demonstrates how to access the HTTP context in a route handler, which receives the context as the first parameter. This allows you to access request information and respond to the client.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', (ctx) => {\n  console.log(ctx.inspect())\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Hash Values in AdonisJS\nDESCRIPTION: This code demonstrates how to verify if a plain text value matches an existing hash using the hash.verify method. This is commonly used for password verification during authentication.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport hash from '@adonisjs/core/services/hash'\n\nif (await hash.verify(existingHash, plainTextValue)) {\n  // password is correct\n}\n```\n\n----------------------------------------\n\nTITLE: Basic HTTP Test Example\nDESCRIPTION: Example of a basic HTTP test that makes a GET request and asserts the response.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\ntest.group('Users list', () => {\n  test('get a list of users', async ({ client }) => {\n    const response = await client.get('/users')\n\n    response.assertStatus(200)\n    response.assertBody({\n      data: [\n        {\n          id: 1,\n          email: 'foo@bar.com',\n        }\n      ]\n    })\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Resource Controller Implementation\nDESCRIPTION: Complete implementation of a resource controller with CRUD operations\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async index({}: HttpContext) {}\n  async create({}: HttpContext) {}\n  async store({ request }: HttpContext) {}\n  async show({ params }: HttpContext) {}\n  async edit({ params }: HttpContext) {}\n  async update({ params, request }: HttpContext) {}\n  async destroy({ params }: HttpContext) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Multiple Middleware to Routes in AdonisJS\nDESCRIPTION: This snippet shows how to assign multiple middleware to a single route in AdonisJS. Multiple middleware can be applied either as an array or by calling the use method multiple times.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .get('posts', () => {})\n  .use([\n    middleware.userLocation(),\n    middleware.auth()\n  ])\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application for Production\nDESCRIPTION: Command to create a production build of an AdonisJS application using the ace CLI tool.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build\n```\n\n----------------------------------------\n\nTITLE: Assigning Middleware to Route Groups in AdonisJS\nDESCRIPTION: This example demonstrates how to assign middleware to a route group in AdonisJS. The group middleware will be applied to all routes within the group automatically.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport { middleware } from '#start/kernel'\n\nrouter.group(() => {\n\n  router.get('posts', () => {})\n  router.get('users', () => {})\n  router.get('payments', () => {})\n\n}).use(middleware.userLocation())\n```\n\n----------------------------------------\n\nTITLE: Using Config Service in TypeScript\nDESCRIPTION: Demonstrates how to use the config service to read configuration values, including nested properties.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/configuration.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport config from '@adonisjs/core/services/config'\n\nconfig.get('app.appKey')\nconfig.get('app.http.cookie') // read nested values\n```\n\n----------------------------------------\n\nTITLE: Injecting HTTP Context using Dependency Injection in Service Class\nDESCRIPTION: Demonstrates how to inject the HTTP context into a service class using AdonisJS's dependency injection system, requiring the container_bindings_middleware to be registered.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// title: app/services/user_service.ts\nimport { inject } from '@adonisjs/core'\nimport { HttpContext } from '@adonisjs/core/http'\n\n@inject()\nexport default class UserService {\n  constructor(protected ctx: HttpContext) {}\n  \n  all() {\n    // method implementation\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Middleware in AdonisJS\nDESCRIPTION: This example shows how to implement route middleware in AdonisJS using the use() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter\n  .get('posts', () => {\n    console.log('Inside route handler')\n\n    return 'Viewing all posts'\n  })\n  .use((_, next) => {\n    console.log('Inside middleware')\n    return next()\n  })\n```\n\n----------------------------------------\n\nTITLE: Class Constructor Dependency Injection - UserService - AdonisJS TypeScript\nDESCRIPTION: Illustrates dependency injection via the constructor, requiring the 'Disk' service from '@adonisjs/drive'. Enables per-class customization such as contextual dependency injection. Dependencies must be registered in the container and may be contextually overridden.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Disk } from '@adonisjs/drive'\n\nexport default class UserService {\n  constructor(protected disk: Disk) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Controller Binding in AdonisJS\nDESCRIPTION: This snippet demonstrates how to create routes in AdonisJS using the functional API. It shows importing the router service, lazily importing a controller, and binding a controller method to a GET route.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\nconst PostsController = () => import('#controllers/posts_controller')\n\nrouter.get('posts', [PostsController, 'index'])\n```\n\n----------------------------------------\n\nTITLE: Handling OAuth Callback Response\nDESCRIPTION: Implementation of callback handler with error checking and user data retrieval.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/github/callback', async ({ ally }) => {\n  const gh = ally.use('github')\n\n  if (gh.accessDenied()) {\n    return 'You have cancelled the login process'\n  }\n\n  if (gh.stateMisMatch()) {\n    return 'We are unable to verify the request. Please try again'\n  }\n\n  if (gh.hasError()) {\n    return gh.getError()\n  }\n\n  const user = await gh.user()\n  return user\n})\n```\n\n----------------------------------------\n\nTITLE: CSP Directives Configuration\nDESCRIPTION: TypeScript configuration demonstrating how to set up Content Security Policy directives to control which resources can be loaded, specifying trusted sources for scripts, fonts, etc.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nconst shieldConfig = defineConfig({\n  csp: {\n    enabled: true,\n    // highlight-start\n    directives: {\n      defaultSrc: [`'self'`],\n      scriptSrc: [`'self'`, 'https://cdnjs.cloudflare.com'],\n      fontSrc: [`'self'`, 'https://fonts.googleapis.com']\n    },\n    // highlight-end\n    reportOnly: false,\n  },\n})\n\nexport default shieldConfig\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Route Parameter in AdonisJS\nDESCRIPTION: Shows how to access individual route parameters using the param() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('posts/:slug/comments/:id', async ({ request }) => {\n  const slug = request.param('slug')\n  const commentId = request.param('id')\n})\n```\n\n----------------------------------------\n\nTITLE: Secure User Authentication using AuthFinder in AdonisJS\nDESCRIPTION: Demonstrates how to use the verifyCredentials method provided by the AuthFinder mixin for secure user authentication, preventing timing attacks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/verifying_user_credentials.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport User from '#models/user'\n\nexport default class SessionController {\n  async store({ request }: HttpContext) {\n    const { email, password } = request.only(['email', 'password'])\n\n    const user = await User.verifyCredentials(email, password)\n\n    /**\n     * Now login the user or create a token for them\n     */\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AdonisJS Project with Web Starter Kit using Shell\nDESCRIPTION: Creates a new AdonisJS project using the 'web' starter kit, suitable for server-rendered web applications. The `-K=web` flag specifies the kit. An example also shows how to specify the MySQL database dialect using the `--db` flag alongside the kit selection.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest -- -K=web\n\n# Switch database dialect\nnpm init adonisjs@latest -- -K=web --db=mysql\n```\n\n----------------------------------------\n\nTITLE: Running Actions After Response Finishes in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the response.onFinish method to execute cleanup logic after Node.js finishes writing the response to the TCP socket.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('posts', ({ response }) => {\n  response.onFinish(() => {\n    // cleanup logic\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Service Provider Lifecycle Methods\nDESCRIPTION: Complete structure of a service provider showing all available lifecycle methods including register, boot, start, ready, and shutdown.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class AppProvider {\n  register() {\n  }\n  \n  async boot() {\n  }\n  \n  async start() {\n  }\n  \n  async ready() {\n  }\n  \n  async shutdown() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Lucid Model Structure in AdonisJS\nDESCRIPTION: Example of a basic Lucid model with primary key and timestamp columns. This is the default structure generated by the make:model command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n\nexport default class User extends BaseModel {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column.dateTime({ autoCreate: true })\n  declare createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed HTTP Methods in CORS\nDESCRIPTION: Example of specifying which HTTP methods to allow in CORS preflight requests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n{\n  methods: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE']\n}\n```\n\n----------------------------------------\n\nTITLE: Encrypting Values with Expiration Time in AdonisJS\nDESCRIPTION: Shows how to encrypt a value with an expiration time using the AdonisJS encryption service. The second parameter defines a time duration after which the encrypted value will be considered expired and cannot be decrypted.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/encryption.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst encrypted = encryption.encrypt('hello world', '2 hours')\n```\n\n----------------------------------------\n\nTITLE: Registering Auth Middleware in AdonisJS\nDESCRIPTION: This code demonstrates how to register authentication-related middleware in the start/kernel.ts file. It includes the initialize auth middleware and named middleware for auth and guest routes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.use([\n  () => import('@adonisjs/auth/initialize_auth_middleware')\n])\n\nrouter.named({\n  auth: () => import('#middleware/auth_middleware'),\n  // only if using the session guard\n  guest: () => import('#middleware/guest_middleware')\n})\n```\n\n----------------------------------------\n\nTITLE: Advanced Validation Example\nDESCRIPTION: Demonstrates validation of cookies, headers, and route params using VineJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst validator = vine.compile(\n  vine.object({\n    // Fields in request body\n    username: vine.string(),\n    password: vine.string(),\n\n    // Validate cookies\n    cookies: vine.object({\n    }),\n\n    // Validate headers\n    headers: vine.object({\n    }),\n\n    // Validate route params\n    params: vine.object({\n    }),\n  })\n)\n\nawait request.validateUsing(validator)\n```\n\n----------------------------------------\n\nTITLE: Registering Auth Middleware in AdonisJS Kernel\nDESCRIPTION: This snippet shows the registration of the named `auth` middleware in the `start/kernel.ts` file. It uses `router.named` to define a middleware alias 'auth' that dynamically imports the actual authentication middleware implementation from `#middleware/auth_middleware`. This allows routes to easily reference and apply the authentication middleware using its name.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/basic_auth_guard.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport router from '@adonisjs/core/services/router'\n\nexport const middleware = router.named({\n  auth: () => import('#middleware/auth_middleware')\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application for Production\nDESCRIPTION: Creates a production build of an AdonisJS application using the @adonisjs/assembler package. This command compiles TypeScript code and prepares the application for deployment.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build\n```\n\n----------------------------------------\n\nTITLE: Basic Migration Structure in AdonisJS\nDESCRIPTION: Example of a basic migration file with up and down methods to create and drop a table. This is generated by the make:migration command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class extends BaseSchema {\n  protected tableName = 'users'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table.timestamp('created_at')\n      table.timestamp('updated_at')\n    })\n  }\n\n  async down() {\n    this.schema.dropTable(this.tableName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: File Upload Handler Implementation\nDESCRIPTION: Example of handling file uploads using Drive with basic validations and file moving operations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/drive.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cuid } from '@adonisjs/core/helpers'\nimport drive from '@adonisjs/drive/services/main'\nimport router from '@adonisjs/core/services/router'\n\nrouter.put('/me', async ({ request, response }) => {\n  /**\n   * Step 1: Grab the image from the request and perform basic\n   * validations\n   */\n  const image = request.file('avatar', {\n    size: '2mb',\n    extnames: ['jpeg', 'jpg', 'png'],\n  })\n  if (!image) {\n    return response.badRequest({ error: 'Image missing' })\n  }\n\n  /**\n   * Step 2: Move the image with a unique name using Drive\n   */\n  const key = `uploads/${cuid()}.${image.extname}`\n  await image.moveToDisk(key)\n\n  /**\n   * Respond with the file's public URL\n   */\n  return {\n    message: 'Image uploaded',\n    url: image.meta.url,\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing User Login with Session Guard\nDESCRIPTION: Example of a session controller implementing user login functionality using credentials verification and session guard authentication.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class SessionController {\n  async store({ request, auth, response }: HttpContext) {\n    const { email, password } = request.only(['email', 'password'])\n    const user = await User.verifyCredentials(email, password)\n    await auth.use('web').login(user)\n    response.redirect('/dashboard')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Decrypting Values with AdonisJS Encryption Service\nDESCRIPTION: Demonstrates how to decrypt previously encrypted values using the AdonisJS encryption service. This snippet imports the encryption service and uses the decrypt method with the encrypted value as an argument.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/encryption.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport encryption from '@adonisjs/core/services/encryption'\n\nencryption.decrypt(encryptedValue)\n```\n\n----------------------------------------\n\nTITLE: Emitting Events with AdonisJS Emittery in TypeScript\nDESCRIPTION: Demonstrates the process of emitting events using the 'emitter.emit' method. This method triggers the registered event listeners to execute their callbacks. It requires the 'event: registered' and corresponding data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nexport default class UsersController {\n  async store() {\n    const user = await User.create(data)\n    emitter.emit('user:registered', user)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Login and Logout with Access Tokens\nDESCRIPTION: Demonstrates how to implement login and logout functionality using access tokens, including a complete session controller example.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst token = await auth.use('api').createToken(user)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait auth.use('api').invalidateToken()\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: app/controllers/session_controller.ts\nimport User from '#models/user'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class SessionController {\n  async store({ request, auth, response }: HttpContext) {\n    const { email, password } = request.only(['email', 'password'])\n    const user = await User.verifyCredentials(email, password)\n\n    return await auth.use('api').createToken(user)\n  }\n\n  async destroy({ request, auth, response }: HttpContext) {\n    await auth.use('api').invalidateToken()\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\nconst SessionController = () => import('#controllers/session_controller')\n\nrouter.post('session', [SessionController, 'store'])\nrouter.delete('session', [SessionController, 'destroy'])\n  .use(middleware.auth({ guards: ['api'] }))\n```\n\n----------------------------------------\n\nTITLE: Running Migrations in AdonisJS\nDESCRIPTION: Command to execute all pending migrations in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnode ace migration:run\n```\n\n----------------------------------------\n\nTITLE: Implementing Inertia Controller Actions and Redirects\nDESCRIPTION: Examples of controller methods showing how to handle redirects and render pages with Inertia.js in AdonisJS controllers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class UsersController {\n  async store({ response }: HttpContext) {\n    await User.create(request.body())\n\n    return response.redirect().toRoute('users.index')\n  }\n\n  async externalRedirect({ inertia }: HttpContext) {\n    return inertia.location('https://adonisjs.com')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables with AdonisJS env Module - TypeScript\nDESCRIPTION: Shows how to use the AdonisJS env module to read environment variables throughout your application. Requires an existing AdonisJS project and env module setup. Demonstrates usage of env.get() to fetch variables like NODE_ENV, HOST, and PORT, including providing default values when a variable is undefined. Returns values as typed by the environment variable schema or default provided.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport env from '#start/env'\n\nenv.get('NODE_ENV')\nenv.get('HOST')\nenv.get('PORT')\n\n// Returns 3333 when PORT is undefined\nenv.get('PORT', 3333)\n```\n\n----------------------------------------\n\nTITLE: Shield Configuration with CSRF Settings\nDESCRIPTION: TypeScript configuration for the CSRF guard in the shield.ts file, including options for enabling/disabling protection, excepting routes, and setting supported HTTP methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@adonisjs/shield'\n\nconst shieldConfig = defineConfig({\n  csrf: {\n    enabled: true,\n    exceptRoutes: [],\n    enableXsrfCookie: true,\n    methods: ['POST', 'PUT', 'PATCH', 'DELETE'],\n  },\n})\n\nexport default shieldConfig\n```\n\n----------------------------------------\n\nTITLE: Configuring AdonisJS Authentication with Custom User Provider\nDESCRIPTION: This code snippet shows how to configure the AdonisJS authentication module to use a custom user provider, specifically the SessionKyselyUserProvider implemented for Kysely ORM.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst authConfig = defineConfig({\n  default: 'web',\n\n  guards: {\n    web: sessionGuard({\n      useRememberMeTokens: false,\n      provider: sessionUserProvider({\n        model: () => import('#models/user'),\n      }),\n      \n      provider: configProvider.create(async () => {\n        const { SessionKyselyUserProvider } = await import(\n          '../app/auth/session_user_provider.js' // Path to the file\n        )\n\n        return new SessionKyselyUserProvider()\n      }),\n    }),\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Naming Routes in AdonisJS Groups\nDESCRIPTION: Demonstrates how to prefix route names within a group using the group.as method. This example creates a route named api.users.index.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .group(() => {\n    route\n      .get('users', () => {})\n      .as('users.index') // final name - api.users.index\n  })\n  .prefix('api')\n  .as('api')\n```\n\n----------------------------------------\n\nTITLE: Initializing API Project with Access Tokens Auth Guard using Shell\nDESCRIPTION: Creates a new AdonisJS project using the 'api' starter kit and configures it for token-based authentication using the 'access_tokens' guard. This is specified using the `--auth-guard=access_tokens` flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest -- -K=api --auth-guard=access_tokens\n```\n\n----------------------------------------\n\nTITLE: Manually Processing Multipart Streams in AdonisJS Controller\nDESCRIPTION: This code snippet illustrates how to manually process multipart streams in an AdonisJS controller. It uses Node.js stream pipeline to write uploaded files to disk.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createWriteStream } from 'node:fs'\nimport app from '@adonisjs/core/services/app'\nimport { pipeline } from 'node:stream/promises'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class AssetsController {\n  async store({ request }: HttpContext) {\n    /**\n     * Step 1: Define a file listener\n     */\n    request.multipart.onFile('*', {}, async (part, reporter) => {\n      part.pause()\n      part.on('data', reporter)\n\n      const filePath = app.makePath(part.file.clientName)\n      await pipeline(part, createWriteStream(filePath))\n      return { filePath }\n    })\n\n    /**\n     * Step 2: Process the stream\n     */\n    await request.multipart.process()\n\n    /**\n     * Step 3: Access processed files\n     */\n    return request.allFiles()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Rate Limit Error Message in AdonisJS\nDESCRIPTION: This snippet demonstrates how to customize the error message, status, and response headers for rate limiting using the limitExceeded hook in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport limiter from '@adonisjs/limiter/services/main'\n\nexport const throttle = limiter.define('global', () => {\n  return limiter\n    .allowRequests(10)\n    .every('1 minute')\n    .limitExceeded((error) => {\n      error\n        .setStatus(400)\n        .setMessage('Cannot process request. Try again later')\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing CSRF Protection in Edge Templates\nDESCRIPTION: Edge template code showing how to implement CSRF protection in forms using the csrfField() helper, which generates a hidden input field with a secure token.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<form method=\"POST\" action=\"/\">\n  // highlight-start\n  {{ csrfField() }}\n  // highlight-end\n  <input type=\"name\" name=\"name\" placeholder=\"Enter your name\">\n  <button type=\"submit\"> Submit </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Handling ThrottleException in AdonisJS HttpExceptionHandler\nDESCRIPTION: This code snippet shows how to handle the E_TOO_MANY_REQUESTS exception in the global exception handler of an AdonisJS application. It sets appropriate headers and sends a custom response for rate limiting errors.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/limiter'\nimport { HttpContext, ExceptionHandler } from '@adonisjs/core/http'\n\nexport default class HttpExceptionHandler extends ExceptionHandler {\n  protected debug = !app.inProduction\n  protected renderStatusPages = app.inProduction\n\n  async handle(error: unknown, ctx: HttpContext) {\n    if (error instanceof errors.E_TOO_MANY_REQUESTS) {\n      const message = error.getResponseMessage(ctx)\n      const headers = error.getDefaultHeaders()\n\n      Object.keys(headers).forEach((header) => {\n        ctx.response.header(header, headers[header])\n      })\n\n      return ctx.response.status(error.status).send(message)\n    }\n\n    return super.handle(error, ctx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Injected Dependencies in Controllers - AdonisJS TypeScript\nDESCRIPTION: Demonstrates injecting and using a service interface in a controller class via the AdonisJS 'inject' decorator. The controller's constructor receives the dependency, which can then be used in handler methods. Requires decorated classes and configured container bindings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PaymentService } from '#contracts/payment_service'\n\n@inject()\nexport default class PaymentController {\n  constructor(private paymentService: PaymentService) {\n  }\n\n  async charge() {\n    await this.paymentService.charge(100)\n    \n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Magic String Route Binding\nDESCRIPTION: Alternative way to bind controllers using magic strings for lazy loading\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('users', '#controllers/users_controller.index')\n```\n\n----------------------------------------\n\nTITLE: Using Container Resolving Hooks for Extension - AdonisJS Provider - TypeScript\nDESCRIPTION: Utilizes the IoC container's 'resolving' hook within a service provider to extend functionality upon resolving a binding. Commonly used to add database validation rules or perform setup when bindings are made. Requires access to the application and its container during provider boot phase.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { ApplicationService } from '@adonisjs/core/types'\n\nexport default class DatabaseProvider {\n  constructor(protected app: ApplicationService) {\n  }\n\n  async boot() {\n    this.app.container.resolving('validator', (validator) => {\n      validator.rule('unique', implementation)\n      validator.rule('exists', implementation)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Attempt Limiting in AdonisJS\nDESCRIPTION: This snippet shows how to use the limiter to prevent too many login failures by penalizing invalid attempts and blocking the IP address after exhausting all attempts. It allows 5 attempts per minute and blocks for 20 minutes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nimport { HttpContext } from '@adonisjs/core/http'\nimport limiter from '@adonisjs/limiter/services/main'\n\nexport default class SessionController {\n  async store({ request, response, session }: HttpContext) {\n    const { email, password } = request.only(['email', 'passwords'])\n\n    const loginLimiter = limiter.use({\n      requests: 5,\n      duration: '1 min',\n      blockDuration: '20 mins'\n    })\n\n    const key = `login_${request.ip()}_${email}`\n\n    const [error, user] = await loginLimiter.penalize(key, () => {\n      return User.verifyCredentials(email, password)\n    })\n\n    if (error) {\n      session.flashAll()\n      session.flashErrors({\n        E_TOO_MANY_REQUESTS: `Too many login requests. Try again after ${error.response.availableIn} seconds`\n      })\n      return response.redirect().back()\n    }\n\n    // Otherwise, login the user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Cryptographic Application Key\nDESCRIPTION: Generates a secure random key for the application and saves it to the .env file as APP_KEY. This key is used for encryption and other security features.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnode ace generate:key\n```\n\n----------------------------------------\n\nTITLE: Implementing Bouncer Ability with Token Check in TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a Bouncer ability that checks both user permissions and token abilities. It shows how to differentiate between authenticated requests with and without access tokens.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccessToken } from '@adonisjs/auth/access_tokens'\nimport { Bouncer } from '@adonisjs/bouncer'\n\nexport const createProject = Bouncer.ability(\n  (user: User & { currentAccessToken?: AccessToken }) => {\n    if (!user.currentAccessToken) {\n      return user.isAdmin\n    }\n\n    return user.isAdmin && user.currentAccessToken.allows('project:create')\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection in AdonisJS Middleware\nDESCRIPTION: This snippet demonstrates how to use dependency injection in AdonisJS middleware. The GeoIpService is injected into the UserLocationMiddleware using the @inject decorator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport { GeoIpService } from '#services/geoip_service'\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { NextFn } from '@adonisjs/core/types/http'\n\n@inject()\nexport default class UserLocationMiddleware {\n  constructor(protected geoIpService: GeoIpService) {\n  }\n\n  async handle(ctx: HttpContext, next: NextFn) {\n    const ip = ctx.request.ip()\n    ctx.location = await this.geoIpService.lookup(ip)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Emitting Class-based Events with UserRegistered in AdonisJS TypeScript\nDESCRIPTION: Covers emitting class-based events via the 'dispatch' method, transferring event data through constructors, enhancing use-case specific communications.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nimport User from '#models/user'\nimport UserRegistered from '#events/user_registered'\n\nexport default class UsersController {\n  async store() {\n    const user = await User.create(data)\n    \n    /**\n     * Dispatch/emit the event\n     */\n    UserRegistered.dispatch(user)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Auth Middleware\nDESCRIPTION: Examples of implementing route protection using the auth middleware, including both single and multi-guard configurations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nexport const middleware = router.named({\n  auth: () => import('#middleware/auth_middleware')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { middleware } from '#start/kernel'\nimport router from '@adonisjs/core/services/router'\n\nrouter\n .get('dashboard', () => {})\n .use(middleware.auth())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { middleware } from '#start/kernel'\nimport router from '@adonisjs/core/services/router'\n\nrouter\n .get('dashboard', () => {})\n .use(\n   middleware.auth({\n     guards: ['web', 'api']\n   })\n )\n```\n\n----------------------------------------\n\nTITLE: Programmatic Command Execution\nDESCRIPTION: TypeScript example demonstrating how to execute Ace commands programmatically using the ace service\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport ace from '@adonisjs/core/services/ace'\n\nconst command = await ace.exec('make:controller', [\n  'user',\n  '--resource',\n])\n    \nconsole.log(command.exitCode)\nconsole.log(command.result)\nconsole.log(command.error)\n```\n\n----------------------------------------\n\nTITLE: Setting Response Status and Headers in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates various methods for setting response status and headers, including safe methods that don't override existing values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ response }) => {\n  /**\n   * Sets the status to 200\n   */\n  response.safeStatus(200)\n\n  /**\n   * Does not set the status since it\n   * is already set\n   */\n  response.safeStatus(201)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ response }) => {\n  /**\n   * Defines the content-type header\n   */\n  response.safeHeader('Content-type', 'text/html')\n\n  /**\n   * Does not set the content-type header since it\n   * is already set\n   */\n  response.safeHeader('Content-type', 'text/html')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.append('Set-cookie', 'cookie-value')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.removeHeader('Set-cookie')\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in an AdonisJS Lucid Model Getter\nDESCRIPTION: This TypeScript example demonstrates accessing the HTTP context within a Lucid model's getter property (`isLiked`). It uses `HttpContext.getOrFail()` to retrieve the context for the current request and access authenticated user information (`ctx.auth.user.id`) to determine if a post is liked by the current user. This showcases using ALS for convenient context access deep within application logic.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { BaseModel } from '@adonisjs/lucid'\n\nexport default class Post extends BaseModel {\n  get isLiked() {\n    const ctx = HttpContext.getOrFail()\n    const authUserId = ctx.auth.user.id\n    \n    return !!this.likes.find((like) => {\n      return like.userId === authUserId\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Prefixing Routes in AdonisJS\nDESCRIPTION: Demonstrates how to prefix routes within a group using the group.prefix method. This example creates routes for /api/users and /api/payments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .group(() => {\n    router.get('users', () => {})\n    router.get('payments', () => {})\n  })\n  .prefix('/api')\n```\n\n----------------------------------------\n\nTITLE: Using Various Logging Methods in AdonisJS\nDESCRIPTION: Shows examples of using different logging methods provided by the AdonisJS logger, including trace, debug, info, warn, error, and fatal. It also demonstrates how to include additional data in log messages.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport logger from '@adonisjs/core/services/logger'\n\nlogger.trace(config, 'using config')\nlogger.debug('user details: %o', { username: 'virk' })\nlogger.info('hello %s', 'world')\nlogger.warn('Unable to connect to database')\nlogger.error({ err: Error }, 'Something went wrong')\nlogger.fatal({ err: Error }, 'Something went wrong')\n\n// Adding additional data\nlogger.info({ user: user }, 'Fetched user by id %s', user.id)\n\n// Logging errors\nlogger.error({ err: error }, 'Unable to lookup user')\n```\n\n----------------------------------------\n\nTITLE: Generating Signed URLs in AdonisJS\nDESCRIPTION: Demonstrates how to create a signed URL for a route using the builder.makeSigned() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter\n  .builder()\n  .prefixUrl('https://blog.adonisjs.com')\n  .params({ id: 231 })\n  // highlight-start\n  .makeSigned('unsubscribe')\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Validating Multipart Stream Parts in AdonisJS\nDESCRIPTION: This snippet shows how to validate multipart stream parts (files) when processing them manually in AdonisJS. It includes size and file extension validations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nrequest.multipart.onFile('*', {\n  size: '2mb',\n  extnames: ['jpg', 'png', 'jpeg']\n}, async (part, reporter) => {\n  /**\n   * The following two lines are required to perform\n   * the stream validation\n   */\n  part.pause()\n  part.on('data', reporter)\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Optional Route Params in AdonisJS\nDESCRIPTION: This snippet demonstrates how to define optional route parameters in AdonisJS using the question mark syntax.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/posts/:id?', ({ params }) => {\n  if (!params.id) {\n    return 'Showing all posts'\n  }\n\n  return `Showing post with id ${params.id}`\n})\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for AdonisJS Reverse Proxy\nDESCRIPTION: Example Nginx configuration file for setting up a reverse proxy for an AdonisJS application. It handles HTTP traffic and forwards requests to the Node.js server.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n  listen 80;\n  listen [::]:80;\n\n  server_name <APP_DOMAIN.COM>;\n\n  location / {\n    proxy_pass http://localhost:<ADONIS_PORT>;\n    proxy_http_version 1.1;\n    proxy_set_header Upgrade $http_upgrade;\n    proxy_set_header Connection 'upgrade';\n    proxy_set_header Host $host;\n    proxy_set_header X-Real-IP $remote_addr;\n    proxy_set_header X-Forwarded-Proto $scheme;\n    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n    proxy_cache_bypass $http_upgrade;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTML Form Using Edge Template Engine\nDESCRIPTION: This Edge template snippet provides the markup for an HTML form to create articles. It uses AdonisJS route helpers to generate URLs and includes a CSRF token for security.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_2\n\nLANGUAGE: Edge\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title> Create article </title>\n  </head>\n  <body>\n    <form action=\"{{ route('articles.store') }}\" method=\"post\">\n\n      {{ csrfField() }}\n\n      <div>\n        <label for=\"title\">Article title</label>\n\n        <input\n          type=\"text\"\n          name=\"title\"\n          id=\"title\"\n          />\n      </div>\n\n      <div>\n        <label for=\"content\">Article content</label>\n\n        <textarea\n          name=\"content\"\n          id=\"content\"\n          ></textarea>\n      </div>\n\n      <div>\n        <button type=\"submit\"> Create article </button>\n      </div>\n\n    </form>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Initializing AdonisJS Project with Slim Starter Kit using Shell\nDESCRIPTION: Creates a minimal AdonisJS project using the 'slim' starter kit, which includes only the framework core and default folder structure. The `-K=slim` flag selects this kit. An example shows specifying the MySQL database dialect.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest -- -K=slim\n\n# Switch database dialect\nnpm init adonisjs@latest -- -K=slim --db=mysql\n```\n\n----------------------------------------\n\nTITLE: Configuring VineJS Provider\nDESCRIPTION: Registers the VineJS service provider in the AdonisJS configuration file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/core/providers/vinejs_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Multiple Params in AdonisJS\nDESCRIPTION: This example shows how to define a route with multiple parameters in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/posts/:id/comments/:commentId', ({ params }) => {\n  console.log(params.id)\n  console.log(params.commentId)\n})\n```\n\n----------------------------------------\n\nTITLE: CSP (Content Security Policy) Configuration\nDESCRIPTION: TypeScript configuration for Content Security Policy in shield.ts, which protects against XSS attacks by defining trusted sources for loading various resources.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@adonisjs/shield'\n\nconst shieldConfig = defineConfig({\n  csp: {\n    enabled: true,\n    directives: {\n      // policy directives go here\n    },\n    reportOnly: false,\n  },\n})\n\nexport default shieldConfig\n```\n\n----------------------------------------\n\nTITLE: Nested Route Naming in AdonisJS\nDESCRIPTION: Shows how to apply name prefixes in nested route groups. This example creates routes named api.users.index and api.commerce.payments.index.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .group(() => {\n    route\n      .get('users', () => {})\n      .as('users.index') // api.users.index\n\n    router\n      .group(() => {\n        route\n          .get('payments', () => {})\n          .as('payments.index') // api.commerce.payments.index\n      })\n      .as('commerce')\n  })\n  .prefix('api')\n  .as('api')\n```\n\n----------------------------------------\n\nTITLE: Handling validation errors with flash messages in Edge\nDESCRIPTION: Demonstrates how to display form input values and validation error messages using Edge templates. Uses old method to retrieve previous input values and inputError tag for validation errors.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_18\n\nLANGUAGE: edge\nCODE:\n```\n<form method=\"POST\" action=\"/posts\">\n  <div>\n    <label for=\"title\"> Title </label>\n    <input \n      type=\"text\"\n      id=\"title\"\n      name=\"title\"\n      value=\"{{ old('title') || '' }}\"\n    />\n\n    @inputError('title')\n      @each(message in $messages)\n        <p> {{ message }} </p>\n      @end\n    @end\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendering Edge Views in AdonisJS Routes\nDESCRIPTION: Shows how to use the router.on().render() method to render Edge views directly from routes. This shortcut is available when the Edge service provider is configured.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.on('/').render('home')\nrouter.on('about').render('about', { title: 'About us' })\nrouter.on('contact').render('contact', { title: 'Contact us' })\n```\n\n----------------------------------------\n\nTITLE: Handling Streaming Response in AdonisJS Middleware\nDESCRIPTION: This code shows how to work with streaming responses in AdonisJS middleware. It checks for a stream and adds an event listener to log chunks of data as they are streamed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { NextFn } from '@adonisjs/core/types/http'\n\nexport default class {\n  async handle({ response }: HttpContext, next: NextFn) {\n    await next()\n    \n    if (response.hasStream) {\n      response.outgoingStream.on('data', (chunk) => {\n        console.log(chunk)\n      })\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Lucid Commands in AdonisJS\nDESCRIPTION: Code to register Lucid commands in the adonisrc.ts file, allowing the use of Lucid-specific CLI commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\n{\n  commands: [\n    // ...other commands\n    () => import('@adonisjs/lucid/commands'),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining an Abstract Class Interface - AdonisJS/TypeScript\nDESCRIPTION: Defines an abstract class to serve as a runtime-resolvable contract for a service, since TypeScript interfaces are unavailable at runtime. This class declares required methods to be implemented by concrete classes. Used within AdonisJS container injection and resolution patterns.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport abstract class PaymentService {\n  abstract charge(amount: number): Promise<void>\n  abstract refund(amount: number): Promise<void>\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Service Methods Example\nDESCRIPTION: Comprehensive example showing various cache service methods including namespacing, setting, getting, and deleting cache entries.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/cache.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait cache.namespace('users').set({ key: 'username', value: 'jul' })\nawait cache.namespace('users').get({ key: 'username' })\n\nawait cache.get({ key: 'username' })\n\nawait cache.set({key: 'username', value: 'jul' })\nawait cache.setForever({ key: 'username', value:'jul' })\n\nawait cache.getOrSet({\n  key: 'username',\n  factory: async () => fetchUserName(),\n  ttl: '1h',\n})\n\nawait cache.has({ key: 'username' })\nawait cache.missing({ key: 'username' })\n\nawait cache.pull({ key: 'username' })\n\nawait cache.delete({ key: 'username' })\nawait cache.deleteMany({ keys: ['products', 'users'] })\nawait cache.deleteByTags({ tags: ['products', 'users'] })\n\nawait cache.clear()\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Middleware in AdonisJS\nDESCRIPTION: This snippet shows the structure of a custom middleware class in AdonisJS. The middleware is represented as a class with a handle method that receives the HttpContext and a NextFn as arguments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { NextFn } from '@adonisjs/core/types/http'\n\nexport default class UserLocationMiddleware {\n  async handle(ctx: HttpContext, next: NextFn) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Metadata During Validation in AdonisJS Controller (TypeScript)\nDESCRIPTION: Shows how to pass runtime metadata to a validator within an AdonisJS HTTP controller method (`update`). It uses `request.validateUsing` with the predefined `updateUserValidator` and provides a `meta` object containing the logged-in user's ID (`auth.user!.id`). This metadata is then accessible within the validator's rules (e.g., `field.meta.userId`).\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nasync update({ request, auth }: HttpContext) {\n  await request.validateUsing(\n    updateUserValidator,\n    {\n      meta: {\n        userId: auth.user!.id\n      }\n    }\n  )\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Migration for Test Runs in AdonisJS\nDESCRIPTION: This code snippet demonstrates how to configure the test runner to migrate the database before tests and roll it back after all tests are complete. This ensures each test run starts with a fresh database state.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/database.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: tests/bootstrap.ts\nimport testUtils from '@adonisjs/core/services/test_utils'\n\nexport const runnerHooks: Required<Pick<Config, 'setup' | 'teardown'>> = {\n  setup: [\n    () => testUtils.db().migrate(),\n  ],\n  teardown: [],\n}\n```\n\n----------------------------------------\n\nTITLE: Serving Uploaded Files in AdonisJS\nDESCRIPTION: Demonstrates how to create a route to serve user-uploaded files from the filesystem in AdonisJS, including protection against path traversal attacks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sep, normalize } from 'node:path'\nimport app from '@adonisjs/core/services/app'\nimport router from '@adonisjs/core/services/router'\n\nconst PATH_TRAVERSAL_REGEX = /(?:^|[\\\\/])\\.\\.(?:[\\\\/]|$)/\n\nrouter.get('/uploads/*', ({ request, response }) => {\n  const filePath = request.param('*').join(sep)\n  const normalizedPath = normalize(filePath)\n  \n  if (PATH_TRAVERSAL_REGEX.test(normalizedPath)) {\n    return response.badRequest('Malformed path')\n  }\n\n  const absolutePath = app.makePath('uploads', normalizedPath)\n  return response.download(absolutePath)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Dependency Injection for Disk Service in TypeScript\nDESCRIPTION: Example of using dependency injection with the @inject decorator to inject a Disk instance into a service class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/container_services.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Disk } from '@adonisjs/drive'\nimport { inject } from '@adonisjs/core'\n\n@inject()\nexport class PostService {\n  constructor(protected disk: Disk) {\n  }\n\n  async save(post: Post, coverImage: File) {\n    const coverImageName = 'random_name.jpg'\n\n    await this.disk.put(coverImageName, coverImage)\n    \n    post.coverImage = coverImageName\n    await post.save()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AdonisJS Project from Custom Starter Kits using Shell\nDESCRIPTION: Demonstrates how to create a new AdonisJS project using a custom starter kit hosted on Git providers like GitHub, GitLab, or Bitbucket. The `-K` flag accepts the repository path, optionally prefixed with the provider name (e.g., `gitlab:`, `bitbucket:`).\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest -- -K=\"github_user/repo\"\n\n# Download from GitLab\nnpm init adonisjs@latest -- -K=\"gitlab:user/repo\"\n\n# Download from Bitbucket\nnpm init adonisjs@latest -- -K=\"bitbucket:user/repo\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Controller with View Rendering in AdonisJS\nDESCRIPTION: This code snippet shows a basic controller implementation in AdonisJS. It fetches all posts from the database using a model and renders them using a view template, demonstrating the MVC pattern.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: app/controllers/posts_controller.ts\nimport Post from '#models/post'\nimport type { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async index({ view }: HttpContext) {\n    const posts = await Post.all()\n    return view.render('pages/posts/list', { posts })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Hashing in AdonisJS Model Hooks\nDESCRIPTION: This example shows how to hash a user password automatically using a model hook. The beforeSave hook checks if the password has been modified and then hashes it before saving to the database.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel, beforeSave } from '@adonisjs/lucid'\nimport hash from '@adonisjs/core/services/hash'\n\nexport default class User extends BaseModel {\n  @beforeSave()\n  static async hashPassword(user: User) {\n    if (user.$dirty.password) {\n      user.password = await hash.make(user.password)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Regenerating session ID in TypeScript\nDESCRIPTION: Regenerates the session ID to prevent session fixation attacks. This is particularly important when associating an anonymous session with a logged-in user.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n * New session ID will be assigned at\n * the end of the request\n */\nsession.regenerate()\n```\n\n----------------------------------------\n\nTITLE: Moving Uploaded File to Persistent Storage in AdonisJS\nDESCRIPTION: Demonstrates how to move an uploaded file to a persistent storage location using the file.move method in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\nconst avatar = request.file('avatar', {\n  size: '2mb',\n  extnames: ['jpg', 'png', 'jpeg']\n})\n\nawait avatar.move(app.makePath('storage/uploads'))\n```\n\n----------------------------------------\n\nTITLE: Creating Validator Preload File with AdonisJS Ace (Shell)\nDESCRIPTION: Shows the AdonisJS Ace command `node ace make:preload validator` used to generate a preload file named `validator.ts` within the `start` directory. Preload files are executed during application boot, making them suitable for global configurations like setting up VineJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\n```sh\nnode ace make:preload validator\n```\n```\n\n----------------------------------------\n\nTITLE: Using Middleware with Parameters in AdonisJS Routes\nDESCRIPTION: This example demonstrates how to use a middleware with parameters when assigning it to a route. The auth middleware is used with a specified guard option.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport { middleware } from '#start/kernel'\n\nrouter.get('payments', () => {}).use(\n  middleware.auth({ guard: 'web' })\n)\n```\n\n----------------------------------------\n\nTITLE: Registering Router Middleware in AdonisJS\nDESCRIPTION: This snippet shows how to register router middleware using the router.use method inside the start/kernel.ts file. Router middleware, also known as global middleware, is executed on every HTTP request that has a matching route.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.use([\n  () => import('@adonisjs/core/bodyparser_middleware')\n])\n```\n\n----------------------------------------\n\nTITLE: Defining Type-Safe Metadata for VineJS Validators (TypeScript)\nDESCRIPTION: Illustrates using `vine.withMetaData<{ userId: number }>()` before `.compile` to define the expected structure and type of the metadata object for a VineJS validator. This adds TypeScript type checking, ensuring that the required `userId` of type `number` is expected when metadata is passed during validation, enhancing development safety.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport const updateUserValidator = vine\n  // insert-start\n  .withMetaData<{ userId: number }>()\n  // insert-end\n  .compile(\n    vine.object({\n      email: vine.string().unique(async (db, value, field) => {\n        const user = await db\n          .from('users')\n          .whereNot('id', field.meta.userId)\n          .where('email', value)\n          .first()\n        return !user\n      })\n    })\n  )\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Query String in AdonisJS Redirects\nDESCRIPTION: Demonstrates how to add a query string to the redirect URL using the options object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.on('/posts').redirect('/articles', {\n  qs: {\n    limit: 20,\n    page: 1,\n  }  \n})\n```\n\n----------------------------------------\n\nTITLE: Assigning Middleware to Routes in AdonisJS\nDESCRIPTION: This example demonstrates how to assign named middleware to routes in AdonisJS. The middleware collection is imported and then assigned to a specific route using the use method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport { middleware } from '#start/kernel'\n\nrouter\n  .get('posts', () => {})\n  .use(middleware.userLocation())\n```\n\n----------------------------------------\n\nTITLE: Moving Uploaded File with Custom Name in AdonisJS\nDESCRIPTION: Shows how to move an uploaded file to persistent storage with a custom, unique filename using the cuid helper in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cuid } from '@adonisjs/core/helpers'\nimport app from '@adonisjs/core/services/app'\n\nawait avatar.move(app.makePath('storage/uploads'), {\n  name: `${cuid()}.${avatar.extname}`\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Unique Email Validator with Metadata in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates defining an AdonisJS/VineJS validator using `vine.compile` and `vine.object`. The `email` field uses a `unique` rule with a custom callback function to check uniqueness in the 'users' table, specifically excluding the current user's ID by accessing `field.meta.userId`. This requires metadata to be passed during validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nexport const updateUserValidator = vine\n  .compile(\n    vine.object({\n      email: vine.string().unique(async (db, value, field) => {\n        const user = await db\n          .from('users')\n          // highlight-start\n          .whereNot('id', field.meta.userId)\n          // highlight-end\n          .where('email', value)\n          .first()\n        return !user\n      })\n    })\n  )\n```\n```\n\n----------------------------------------\n\nTITLE: Using Auth Middleware with Access Tokens\nDESCRIPTION: Demonstrates how to use the auth middleware to protect routes with access token authentication and access authenticated user information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport { middleware } from '#start/kernel'\n\nrouter\n  .post('projects', async ({ auth }) => {\n    console.log(auth.user) // User\n    console.log(auth.authenticatedViaGuard) // 'api'\n    console.log(auth.user!.currentAccessToken) // AccessToken\n  })\n  .use(middleware.auth({\n    guards: ['api']\n  }))\n```\n\n----------------------------------------\n\nTITLE: Applying Middleware to Resource Routes in AdonisJS\nDESCRIPTION: Shows different approaches to assign middleware to resource routes including specific actions and wildcards.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport { middleware } from '#start/kernel'\n\nrouter\n  .resource('posts')\n  .use(\n    ['create', 'store', 'update', 'destroy'],\n    middleware.auth()\n  )\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .resource('posts')\n  .use('*', middleware.auth())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .resource('posts')\n  .use(\n    ['create', 'store', 'update', 'destroy'],\n    middleware.auth()\n  )\n  .use(\n    ['update', 'destroy'],\n    middleware.someMiddleware()\n  )\n```\n\n----------------------------------------\n\nTITLE: Using URL Builder with Positional Parameters in AdonisJS\nDESCRIPTION: Demonstrates how to use the router.builder() method to generate URLs for a named route with positional parameters.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\nrouter\n  .builder()\n  .params([1])\n  .make('posts.show') // /posts/1\n\nrouter\n .builder()\n .params([20])\n .make('posts.show') // /posts/20\n```\n\n----------------------------------------\n\nTITLE: Manual Multiple File Validation in AdonisJS\nDESCRIPTION: Shows how to manually validate multiple uploaded files using the request.files method with validation rules in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst invoiceDocuments = request.files('documents', {\n  size: '2mb',\n  extnames: ['jpg', 'png', 'pdf']\n})\n\nlet invalidDocuments = invoiceDocuments.filter((document) => {\n  return !document.isValid\n})\n\nif (invalidDocuments.length) {\n  return response.badRequest({\n    errors: invalidDocuments.map((document) => {\n      name: document.clientName,\n      errors: document.errors,\n    })\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generators in AdonisJS\nDESCRIPTION: Shows how to use the generators API to create standardized class names and file names for different entities. The example demonstrates generating a controller file name and class name.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\napp.generators.controllerFileName('user')\n// output - users_controller.ts\n\napp.generators.controllerName('user')\n// output - UsersController\n```\n\n----------------------------------------\n\nTITLE: Using flash messages with form submissions in TypeScript\nDESCRIPTION: Demonstrates how to set up routes for a contact form and use flash messages to provide feedback after form submission. The flash message will be available in the next request after redirection.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.post('/contact', ({ session, request, response }) => {\n  const data = request.all()\n  // Save contact data\n  \n  // highlight-start\n  session.flash('notification', {\n    type: 'success',\n    message: 'Thanks for contacting. We will get back to you'\n  })\n  // highlight-end\n\n  response.redirect().back()\n})\n\nrouter.get('/contact', ({ view }) => {\n  return view.render('contact')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiter with Block Duration\nDESCRIPTION: Example of creating a rate limiter instance with block duration settings to limit requests and automatically block users after exceeding limits.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport limiter from '@adonisjs/limiter/services/main'\n\nconst requestsLimiter = limiter.use({\n  requests: 10,\n  duration: '1 minute',\n  blockDuration: '30 mins'\n})\n\n/**\n * A user can make 10 requests in a minute. However, if\n * they send the 11th request, we will block the key\n * for 30 mins.\n */\nawait requestLimiter.consume('a_unique_key')\n\n/**\n * Same behavior as consume\n */\nawait requestLimiter.attempt('a_unique_key', () => {\n})\n\n/**\n * Allow 10 failures and then block the key for 30 mins.\n */\nawait requestLimiter.penalize('a_unique_key', () => {\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating Requests with Access Tokens\nDESCRIPTION: Shows different methods of authenticating requests using access tokens, including manual authentication and using named guards.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.post('projects', async ({ auth }) => {\n  // Authenticate using the default guard\n  const user = await auth.authenticate()\n\n  // Authenticate using a named guard\n  const user = await auth.authenticateUsing(['api'])\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Standard Response in AdonisJS Middleware\nDESCRIPTION: This snippet demonstrates how to access and modify a standard response within an AdonisJS middleware. It checks if the response has content and logs it before potentially sending a new response.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { NextFn } from '@adonisjs/core/types/http'\n\nexport default class {\n  async handle({ response }: HttpContext, next: NextFn) {\n    await next()\n    \n    if (response.hasContent) {\n      console.log(response.content)\n      console.log(typeof response.content)\n      \n      response.send(newResponse)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Query String Parameters in AdonisJS\nDESCRIPTION: Demonstrates how to access query string parameters from the request object using the qs() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('posts', async ({ request }) => {\n  /*\n   * URL: /?sort_by=id&direction=desc\n   * qs: { sort_by: 'id', direction: 'desc' }\n   */\n  request.qs()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Expiring Access Tokens in TypeScript\nDESCRIPTION: Demonstrates how to create access tokens with expiration using the AdonisJS tokens provider. The token is created with full abilities and expires in 30 days.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.accessTokens.create(\n  user, // for user\n  ['*'], // with all abilities\n  {\n    expiresIn: '30 days' // expires in 30 days\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Environment in TypeScript\nDESCRIPTION: Shows how to access and modify the application environment using the app service. The environment can be 'web', 'console', 'repl', or 'test'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\nconsole.log(app.getEnvironment())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nif (!app.isBooted) {\n\tapp.setEnvironment('repl')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Auth Guard in AdonisJS\nDESCRIPTION: This snippet shows the configuration of the basic authentication guard within the `config/auth.ts` file. It imports `basicAuthGuard` and `basicAuthUserProvider` from `@adonisjs/auth/basic_auth`. A guard named `basicAuth` is defined using `basicAuthGuard`, which uses `basicAuthUserProvider` to specify the Lucid model (`#models/user`) responsible for user lookup and credential verification. This guard is also set as the default authentication method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/basic_auth_guard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { defineConfig } from '@adonisjs/auth'\n// highlight-start\nimport { basicAuthGuard, basicAuthUserProvider } from '@adonisjs/auth/basic_auth'\n// highlight-end\n\nconst authConfig = defineConfig({\n  default: 'basicAuth',\n  guards: {\n    // highlight-start\n    basicAuth: basicAuthGuard({\n      provider: basicAuthUserProvider({\n        model: () => import('#models/user'),\n      }),\n    })\n    // highlight-end\n  },\n})\n\nexport default authConfig\n```\n```\n\n----------------------------------------\n\nTITLE: Validating Form Submission in AdonisJS\nDESCRIPTION: This TypeScript snippet demonstrates using AdonisJS validation schema to validate form submissions. The 'store' method defines a validation schema and utilizes the 'request.validate' method to validate inputs and handle possible validation failures.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { schema, rules } from '@adonisjs/core/validator'\n\nexport default class ArticlesController {\n  async create({ view }: HttpContext) {\n    return view.render('pages/articles/create')\n  }\n\n  async store({ request }: HttpContext) {\n    const createArticleSchema = schema.create({\n      title: schema.string([\n        rules.trim(),\n        rules.minLength(8),\n      ]),\n\n      content: schema.string([\n        rules.trim(),\n        rules.escapeHtml(),\n      ]),      \n    })\n  \n    const payload = await request.validate({\n      schema: createArticleSchema\n    })\n    \n    console.log(payload.title)\n    console.log(payload.content)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CORS Configuration in AdonisJS\nDESCRIPTION: Complete CORS configuration example showing all available options in the config/cors.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@adonisjs/cors'\n\nconst corsConfig = defineConfig({\n  enabled: true,\n  origin: true,\n  methods: ['GET', 'HEAD', 'POST', 'PUT', 'DELETE'],\n  headers: true,\n  exposeHeaders: [],\n  credentials: true,\n  maxAge: 90,\n})\n\nexport default corsConfig\n```\n\n----------------------------------------\n\nTITLE: Unit Testing AdonisJS Middleware with TestUtils\nDESCRIPTION: This code demonstrates how to unit test an AdonisJS middleware using the TestUtils service. It creates a mock HTTP context and invokes the middleware's handle method for testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport testUtils from '@adonisjs/core/services/test_utils'\nimport GeoIpService from '#services/geoip_service'\nimport UserLocationMiddleware from '#middleware/user_location_middleware'\n\nconst middleware = new UserLocationMiddleware(\n  new GeoIpService()\n)\n\nconst ctx = testUtils.createHttpContext()\nawait middleware.handle(ctx, () => {\n  console.log('Next function invoked')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Container.call for Method Injection in TypeScript\nDESCRIPTION: Shows how to use the container.call method to inject dependencies into a specific method of a class instance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nclass EchoService {}\n\nclass SomeService {\n  @inject()\n  run(echo: EchoService) {\n  }\n}\n\nconst service = await app.container.make(SomeService)\n\nawait app.container.call(service, 'run')\n```\n\n----------------------------------------\n\nTITLE: Handling Connection Close Events on Redis - TypeScript\nDESCRIPTION: Registers listeners for 'close' and 'subscriber:close' events on Redis connections to manage cleanup or reconnection logic after a connection is closed. IORedis may attempt automatic reconnection depending on configuration. Uses '@adonisjs/redis/services/main'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_27\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('close', () => {})\\n  connection.on('subscriber:close', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Status Codes in AdonisJS Responses (TypeScript)\nDESCRIPTION: Demonstrates how to set custom status codes for responses using the response.status method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.status(200).send({ page: 'home' })\n\n// Send empty 201 response\nresponse.status(201).send('')\n```\n\n----------------------------------------\n\nTITLE: Registering Session Middleware\nDESCRIPTION: Adds session middleware registration in the start/kernel.ts file to manage session data in HTTP requests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nrouter.use([\n  () => import('@adonisjs/session/session_middleware')\n])\n```\n\n----------------------------------------\n\nTITLE: Accessing Single Uploaded File in AdonisJS Controller\nDESCRIPTION: Demonstrates how to access a single user-uploaded file using the request.file method in an AdonisJS controller.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class UserAvatarsController {\n  update({ request }: HttpContext) {\n    const avatar = request.file('avatar')\n    console.log(avatar)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to set cookies using the response object in an AdonisJS route handler.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.post('cart', async ({ request, response }) => {\n  const id = request.input('product_id')\n  response.cookie('cart_items', [{ id }])\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Remember Me Tokens During User Login\nDESCRIPTION: This TypeScript snippet in the SessionController stores Remember Me tokens during login by checking if the input 'remember_me' is provided, utilizing the auth guard's login method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class SessionController {\n  async store({ request, auth, response }: HttpContext) {\n    const { email, password } = request.only(['email', 'password'])\n    const user = await User.verifyCredentials(email, password)\n\n    await auth.use('web').login(\n      user,\n      // highlight-start\n      /**\n       * Generate token when \"remember_me\" input exists\n       */\n      !!request.input('remember_me')\n      // highlight-end\n    )\n    \n    response.redirect('/dashboard')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redirects in AdonisJS (TypeScript)\nDESCRIPTION: Shows various methods for performing redirects, including redirecting to paths, routes, and back to previous pages, with options for status codes and query strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/posts', async ({ response }) => {\n  response.redirect().toPath('/articles')\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/articles/:id', async () => {}).as('articles.show')\n\nrouter.get('/posts/:id', async ({ response, params }) => {\n  response.redirect().toRoute('articles.show', { id: params.id })\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.redirect().back()\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.redirect().status(301).toRoute('articles.show', { id: params.id })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.redirect().withQs({ page: 1, limit: 20 }).toRoute('articles.index')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Forward current URL query string\nresponse.redirect().withQs().toRoute('articles.index')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// Forward current URL query string\nresponse.redirect().withQs().back()\n```\n\n----------------------------------------\n\nTITLE: Accessing Multiple Uploaded Files in AdonisJS Controller\nDESCRIPTION: Shows how to access multiple user-uploaded files using the request.files method in an AdonisJS controller.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class InvoicesController {\n  update({ request }: HttpContext) {\n    const invoiceDocuments = request.files('documents')\n    \n    for (let document of invoiceDocuments) {\n      console.log(document)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Argon2 Hash Driver in AdonisJS\nDESCRIPTION: Configuration for the argon2 hash driver in AdonisJS, including settings for version, variant, iterations, memory usage, parallelism, salt size, and hash length.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // highlight-start\n  // Make sure to update the default driver to argon\n  default: 'argon',\n  // highlight-end\n\n  list: {\n    argon: drivers.argon2({\n      version: 0x13, // hex code for 19\n      variant: 'id',\n      iterations: 3,\n      memory: 65536,\n      parallelism: 4,\n      saltSize: 16,\n      hashLength: 32,\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Dynamic CSRF Route Exemption Configuration\nDESCRIPTION: TypeScript configuration showing how to dynamically exempt routes from CSRF protection based on URL patterns, useful for API endpoints that need to accept form submissions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n{\n  exceptRoutes: (ctx) => {\n    // exempt all routes starting with /api/\n    return ctx.request.url().includes('/api/')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Passing Data to an Edge Template in AdonisJS\nDESCRIPTION: This code shows how to pass data to an Edge template by providing an object as the second argument to view.render.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nrouter.get('/', async ({ view }) => {\n  return view.render('welcome', { username: 'romainlanz' })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Signed Cookies in AdonisJS (TypeScript)\nDESCRIPTION: Illustrates how to set and read signed cookies in AdonisJS, which are tamper-proof and use the appKey for signing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ request, response }) => {\n  // set signed cookie\n  response.cookie('user_id', 1)\n\n  // read signed cookie\n  request.cookie('user_id')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Routes with Named Route in AdonisJS\nDESCRIPTION: Defines a route with a controller for showing posts by ID and assigns a name ('posts.show') to the route for later reference.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\nconst PostsController = () => import('#controllers/posts_controller')\n\nrouter\n  .get('posts/:id', [PostsController, 'show'])\n  .as('posts.show')\n```\n\n----------------------------------------\n\nTITLE: Validating Request Data with Schema Caching (AdonisJS, TypeScript)\nDESCRIPTION: Demonstrates how to enable schema caching during request validation by utilizing a unique cacheKey, such as the ctx.routeKey. Upon first use, the schema is compiled and cached; subsequent requests with the same cacheKey reuse the compiled schema for improved performance. Requires AdonisJS validation middleware, access to the request context, and an initialized schema object; cacheKey must reflect any variable schema requirements.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_caching.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait request.validate({\n  schema: schema.create({...}),\n  cacheKey: ctx.routeKey,\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Various Data Types as Cookie Values in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates setting different JavaScript data types as cookie values in AdonisJS, including objects, arrays, booleans, numbers, and dates.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Object\nresponse.cookie('user', {\n  id: 1,\n  fullName: 'virk',\n})\n\n// Array\nresponse.cookie('product_ids', [1, 2, 3, 4])\n\n// Boolean\nresponse.cookie('is_logged_in', true)\n\n// Number\nresponse.cookie('visits', 10)\n\n// BigInt\nresponse.cookie('visits', BigInt(10))\n\n// Data objects are converted to ISO string\nresponse.cookie('visits', new Date())\n```\n\n----------------------------------------\n\nTITLE: Using Encrypted Cookies in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to set and read encrypted cookies in AdonisJS, which are used for sensitive information that should not be readable.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ request, response }) => {\n  // set encrypted cookie\n  response.encryptedCookie('user_id', 1)\n\n  // read encrypted cookie\n  request.encryptedCookie('user_id')\n})\n```\n\n----------------------------------------\n\nTITLE: Using URL Builder with Named Parameters in AdonisJS\nDESCRIPTION: Shows how to use the router.builder() method to generate URLs for a named route using key-value pairs for parameters.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter\n .builder()\n .params({ id: 1 })\n .make('posts.show') // /posts/1\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Hash Driver in AdonisJS Config File\nDESCRIPTION: This code snippet shows how to use the custom Pbkdf2 hash driver in the AdonisJS hash configuration file. It imports the pbkdf2Driver factory function and includes it in the hash drivers list.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/hash.ts\nimport { defineConfig } from '@adonisjs/core/hash'\nimport { pbkdf2Driver } from 'my-custom-package'\n\nexport default defineConfig({\n  list: {\n    pbkdf2: pbkdf2Driver({\n      // config goes here\n    }),\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Using Query Builder in Lucid ORM\nDESCRIPTION: Examples of using the Lucid query builder to create database queries. Shows how to initialize a query builder with and without table selection.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n\n/**\n * Creates query builder instance\n */\nconst query = db.query()\n\n/**\n * Creates query builder instance and also selects\n * the table\n */\nconst queryWithTableSelection = db.from('users')\n```\n\n----------------------------------------\n\nTITLE: Custom Exception Handling for Validation Errors\nDESCRIPTION: Example of handling specific validation errors by extending the default handler behavior\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/exception_handling.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@vinejs/vine'\n\nexport default class HttpExceptionHandler extends ExceptionHandler {\n  async handle(error: unknown, ctx: HttpContext) {\n    if (error instanceof errors.E_VALIDATION_ERROR) {\n      ctx.response.status(422).send(error.messages)\n      return\n    }\n\n    return super.handle(error, ctx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing User Logout\nDESCRIPTION: Example of implementing user logout functionality using the session guard's logout method with redirect handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { middleware } from '#start/kernel'\nimport router from '@adonisjs/core/services/router'\n\nrouter\n  .post('logout', async ({ auth, response }) => {\n    await auth.use('web').logout()\n    return response.redirect('/login')\n  })\n  .use(middleware.auth())\n```\n\n----------------------------------------\n\nTITLE: Updating EchoService with HttpContext Dependency in TypeScript\nDESCRIPTION: Demonstrates how to update the EchoService to accept an HttpContext instance and use it in the respond method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport { HttpContext } from '@adonisjs/core/http'\n\n@inject()\nexport default class EchoService {\n  constructor(protected ctx: HttpContext) {\n  }\n\n  respond() {\n    return `Hello from ${this.ctx.request.url()}`\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Downloading Files in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to use the response.download method to stream files from disk, including setting content headers and generating ETags.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/uploads/:file', async ({ response, params }) => {\n  const filePath = app.makePath(`uploads/${params.file}`)\n\n  response.download(filePath)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst filePath = app.makePath(`uploads/${params.file}`)\nconst generateEtag = true\n\nresponse.download(filePath, generateEtag)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst filePath = app.makePath(`uploads/${params.file}`)\nconst generateEtag = true\n\nresponse.download(filePath, generateEtag, (error) => {\n  if (error.code === 'ENOENT') {\n    return ['File does not exists', 404]\n  }\n\n  return ['Cannot download file', 400]\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies with Function\nDESCRIPTION: Custom function implementation for validating trusted proxy IP addresses.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nexport const http = defineConfig({\n  trustProxy: (address) => {\n    return address === '127.0.0.1' || address === '123.123.123.123'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Custom CSRF Exception Handling\nDESCRIPTION: TypeScript code for the global exception handler to custom handle CSRF token errors, allowing for a more tailored user experience when CSRF validation fails.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport { errors } from '@adonisjs/shield'\nimport { HttpContext, ExceptionHandler } from '@adonisjs/core/http'\n\nexport default class HttpExceptionHandler extends ExceptionHandler {\n  async handle(error: unknown, ctx: HttpContext) {\n    // highlight-start\n    if (error instanceof errors.E_BAD_CSRF_TOKEN) {\n      return ctx.response\n        .status(error.status)\n        .send('Page has expired')\n    }\n    // highlight-end\n    return super.handle(error, ctx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Container Directly for Dependency Injection in TypeScript\nDESCRIPTION: Demonstrates how to use the container.make method to manually construct a class instance with resolved dependencies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport app from '@adonisjs/core/services/app'\n\nclass EchoService {}\n\n@inject()\nclass SomeService {\n  constructor(public echo: EchoService) {}\n}\n\nconst service = await app.container.make(SomeService)\n\nconsole.log(service instanceof SomeService)\nconsole.log(service.echo instanceof EchoService)\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis in AdonisJS\nDESCRIPTION: Configuration file for Redis in AdonisJS, defining connections and default settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport env from '#start/env'\nimport { defineConfig } from '@adonisjs/redis'\n\nconst redisConfig = defineConfig({\n  connection: 'main',\n  connections: {\n    main: {\n      host: env.get('REDIS_HOST'),\n      port: env.get('REDIS_PORT'),\n      password: env.get('REDIS_PASSWORD', ''),\n      db: 0,\n      keyPrefix: '',\n    },\n  },\n})\n\nexport default redisConfig\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with Parameters in AdonisJS\nDESCRIPTION: This snippet shows how to create a middleware that accepts additional parameters. The AuthMiddleware example accepts an authentication guard as a configuration option.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntype AuthGuards = 'web' | 'api'\n\nexport default class AuthMiddleware {\n  async handle(ctx, next, options: { guard: AuthGuards }) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suite Setup with HTTP Server\nDESCRIPTION: Configuration for setting up test suites at runtime, including starting the HTTP server for specific test types like functional or end-to-end tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport const configureSuite: Config['configureSuite'] = (suite) => {\n  if (['browser', 'functional', 'e2e'].includes(suite.name)) {\n    return suite.setup(() => testUtils.httpServer().start())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing data to flash messages in TypeScript\nDESCRIPTION: Shows different ways to store data in flash messages. The flash method accepts key-value pairs to be stored in the session for the next request.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nsession.flash('key', value)\nsession.flash({\n  key: value\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Logging in AdonisJS\nDESCRIPTION: Demonstrates how to perform conditional logging based on the configured log level. This is useful for optimizing performance by avoiding unnecessary log computations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport logger from '@adonisjs/core/services/logger'\n\nif (logger.isLevelEnabled('debug')) {\n  const data = await getLogData()\n  logger.debug(data, 'Debug message')\n}\n\n// Using ifLevelEnabled\nlogger.ifLevelEnabled('debug', async () => {\n  const data = await getLogData()\n  logger.debug(data, 'Debug message')\n})\n```\n\n----------------------------------------\n\nTITLE: Authenticating User in AdonisJS v6 API Test\nDESCRIPTION: This snippet demonstrates how to use the loginAs method to authenticate a user when making an HTTP request in an AdonisJS v6 test.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\n\ntest('get payments list', async ({ client }) => {\n  const user = await User.create(payload)\n\n  await client\n    .get('/me/payments')\n    .loginAs(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Cherry-picking Request Data in AdonisJS\nDESCRIPTION: Shows various methods for selectively accessing request data including only(), except(), and input() methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.post('login', async ({ request }) => {\n  const credentials = request.only(['email', 'password'])\n\n  console.log(credentials)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.post('register', async ({ request }) => {\n  const userDetails = request.except(['password_confirmation'])\n\n  console.log(userDetails)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.post('comments', async ({ request }) => {\n  const email = request.input('email')\n  const commentBody = request.input('body')\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Body in AdonisJS\nDESCRIPTION: Demonstrates how to access the request body data using body() and all() methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.post('/', async ({ request }) => {\n  console.log(request.body())\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.post('/', async ({ request }) => {\n  console.log(request.all())\n})\n```\n\n----------------------------------------\n\nTITLE: Getting Authenticated User Safely\nDESCRIPTION: Demonstrates a safer way to get the authenticated user using getUserOrFail method which throws an exception if user is not authenticated.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nclass PostsController {\n  async store({ auth }: HttpContext) {\n    const user = auth.getUserOrFail()\n    await user.related('posts').create(postData)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Authenticating Users in Browser Tests\nDESCRIPTION: Example of how to create and authenticate a user for browser tests, allowing access to protected routes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport User from '#models/user'\n\ntest('get payments list', async ({ browserContext, visit }) => {\n  // highlight-start\n  const user = await User.create(payload)\n  await browserContext.loginAs(user)\n  // highlight-end\n\n  const page = await visit('/dashboard')\n})\n```\n\n----------------------------------------\n\nTITLE: Using flashOnly to selectively save form data\nDESCRIPTION: The flashOnly method allows selectively saving specific fields from the request data to flash messages, useful when you only need certain form inputs preserved.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n// title: flashOnly\n/**\n * Short hand for flashing selected \n * properties from request data\n */\nsession.flashOnly(['username', 'email'])\n\n/**\n * Same as \"flashOnly\"\n */\nsession.flash(request.only(['username', 'email']))\n```\n\n----------------------------------------\n\nTITLE: Using Table Truncation for Test Isolation in AdonisJS\nDESCRIPTION: This snippet shows how to truncate all tables between tests in a test group. This approach is useful when using transactions within the tested code, where global transactions would not work.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/database.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// title: tests/unit/user.spec.ts\nimport { test } from '@japa/runner'\n\ntest.group('User', (group) => {\n  group.each.setup(() => testUtils.db().truncate())\n})\n```\n\n----------------------------------------\n\nTITLE: Creating and Using a Limiter Instance in AdonisJS\nDESCRIPTION: This code demonstrates how to create a limiter instance using the AdonisJS limiter service and apply rate limiting to an action. It allows 1 request per hour and uses a Redis backend.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport limiter from '@adonisjs/limiter/services/main'\n\nconst reportsLimiter = limiter.use('redis', {\n  requests: 1,\n  duration: '1 hour'\n})\n\nconst key = 'user_1_reports'\n\nconst executed = reportsLimiter.attempt(key, async () => {\n  await generateReport()\n  return true\n})\n\nif (!executed) {\n  const availableIn = await reportsLimiter.availableIn(key)\n  return `Too many requests. Try after ${availableIn} seconds`\n}\n\nreturn 'Report generated'\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Pbkdf2 Hash Driver in TypeScript for AdonisJS\nDESCRIPTION: This code snippet demonstrates the implementation of a custom Pbkdf2 hash driver for AdonisJS. It includes the driver class, configuration type, and a factory function. The driver implements the HashDriverContract interface with methods for hash validation, creation, verification, and rehash checking.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HashDriverContract,\n  ManagerDriverFactory\n} from '@adonisjs/core/types/hash'\n\n/**\n * Config accepted by the hash driver\n */\nexport type PbkdfConfig = {\n}\n\n/**\n * Driver implementation\n */\nexport class Pbkdf2Driver implements HashDriverContract {\n  constructor(public config: PbkdfConfig) {\n  }\n\n  /**\n   * Check if the hash value is formatted as per\n   * the hashing algorithm.\n   */\n  isValidHash(value: string): boolean {\n  }\n\n  /**\n   * Convert raw value to Hash\n   */\n  async make(value: string): Promise<string> {\n  }\n\n  /**\n   * Verify if the plain value matches the provided\n   * hash\n   */\n  async verify(\n    hashedValue: string,\n    plainValue: string\n  ): Promise<boolean> {\n  }\n\n  /**\n   * Check if the hash needs to be re-hashed because\n   * the config parameters have changed\n   */\n  needsReHash(value: string): boolean {\n  }\n}\n\n/**\n * Factory function to reference the driver\n * inside the config file.\n */\nexport function pbkdf2Driver (config: PbkdfConfig): ManagerDriverFactory {\n  return () => {\n    return new Pbkdf2Driver(config)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Validation in Controller\nDESCRIPTION: Shows how to use validators in controller actions to validate request data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport {\n  createPostValidator,\n  updatePostValidator\n} from '#validators/post_validator'\n\nexport default class PostsController {\n  async store({ request }: HttpContext) {\n    const data = request.all()\n    const payload = await createPostValidator.validate(data)\n    return payload\n  }\n\n  async update({ request }: HttpContext) {\n    const data = request.all()\n    const payload = await updatePostValidator.validate(data)\n    return payload\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing flash messages in controllers\nDESCRIPTION: Shows how to access flash messages within route handlers or controllers using the session.flashMessages property.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/contact', ({ view, session }) => {\n  // highlight-start\n  console.log(session.flashMessages.all())\n  // highlight-end\n  return view.render('contact')\n})\n```\n\n----------------------------------------\n\nTITLE: Testing AdonisJS Middleware Using Server Pipeline\nDESCRIPTION: This code demonstrates how to test AdonisJS middleware using the server pipeline, which is useful for testing middleware that depends on other middleware in the execution chain.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport testUtils from '@adonisjs/core/services/test_utils'\nimport server from '@adonisjs/core/services/server'\nimport UserLocationMiddleware from '#middleware/user_location_middleware'\n\nconst pipeline = server.pipeline([\n  UserLocationMiddleware\n])\n\nconst ctx = testUtils.createHttpContext()\nawait pipeline.run(ctx)\n```\n\n----------------------------------------\n\nTITLE: Handling Stateless GitHub Callback in TypeScript\nDESCRIPTION: After redirecting, uses stateless mode to handle callback response and fetch user details. No CSRF token check. Provides flexibility in stateless environments. Requires Ally configured for GitHub.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst gh = ally.use('github').stateless()\nawait gh.user()\n```\n\n----------------------------------------\n\nTITLE: Creating Controller using Ace CLI\nDESCRIPTION: Command to generate a new controller file using the AdonisJS CLI tool\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:controller users\n```\n\n----------------------------------------\n\nTITLE: Defining and Validating Environment Variables Schema with AdonisJS Env.create - TypeScript\nDESCRIPTION: Configures the validation schema for all environment variables in AdonisJS using Env.create. Relies on @adonisjs/core/env. Requires specifying a project root for env file location and a schema object mapping variable names to validation rules (built-in and custom). Throws errors at startup for missing/invalid values and infers TypeScript types, ensuring type safety. Input: project root, output: validated, strongly-typed env module.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport Env from '@adonisjs/core/env'\n\n/**\n * App root is used to locate .env files inside\n * the project root.\n */\nconst APP_ROOT = new URL('../', import.meta.url)\n\nexport default await Env.create(APP_ROOT, {\n  HOST: Env.schema.string({ format: 'host' }),\n  PORT: Env.schema.number(),\n  APP_KEY: Env.schema.string(),\n  APP_NAME: Env.schema.string(),\n  CACHE_VIEWS: Env.schema.boolean(),\n  SESSION_DRIVER: Env.schema.string(),\n  NODE_ENV: Env.schema.enum([\n    'development',\n    'production',\n    'test'\n  ] as const),\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Events Once with AdonisJS Emittery in TypeScript\nDESCRIPTION: Shows how to set up listeners for single-time events using 'emitter.once'. Listeners are automatically unsubscribed after being triggered once.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nemitter.once('user:registered', function (user) {\n  console.log(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering an Abstract to Concrete Mapping - AppProvider - AdonisJS TypeScript\nDESCRIPTION: Registers an abstract class with its concrete implementation within the AppProvider's boot method. When 'PaymentService' is requested from the container, it instantiates and returns 'StripePaymentService'. Requires dynamic import and use of the AdonisJS container API inside a service provider.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n// title: providers/app_provider.ts\nimport { PaymentService } from '#contracts/payment_service'\n\nexport default class AppProvider {\n  async boot() {\n    const { StripePaymentService } = await import('#services/stripe_payment_service')\n    \n    this.app.container.bind(PaymentService, () => {\n      return this.app.container.make(StripePaymentService)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of a Generated AdonisJS Validator Class (TypeScript)\nDESCRIPTION: Illustrates the basic structure of an AdonisJS Validator class (`CreateUserValidator`). It imports `schema`, `CustomMessages`, and `HttpContext`, defines a constructor accepting the `HttpContext`, and includes public properties for the validation `schema` and custom error `messages`.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// title: app/Validators/CreateUserValidator.ts\nimport { schema, CustomMessages } from '@adonisjs/core/legacy/validator'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class CreateUserValidator {\n  constructor (protected ctx: HttpContext) {\n  }\n\n  public schema = schema.create({\n  })\n\n  public messages: CustomMessages = {}\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Health Check in TypeScript\nDESCRIPTION: Example of creating a custom health check class implementing the HealthCheckContract interface.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Result, BaseCheck } from '@adonisjs/core/health'\nimport type { HealthCheckResult } from '@adonisjs/core/types/health'\n\nexport class ExampleCheck extends BaseCheck {\n  async run(): Promise<HealthCheckResult> {\n    if (checkPassed) {\n      return Result.ok('Success message to display')\n    }\n    if (checkFailed) {\n      return Result.failed('Error message', errorIfAny)\n    }\n    if (hasWarning) {\n      return Result.warning('Warning message')\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Route Identifiers in AdonisJS\nDESCRIPTION: This snippet demonstrates how to assign unique identifiers to routes in AdonisJS using the as() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter.get('users', () => {}).as('users.index')\n\nrouter.post('users', () => {}).as('users.store')\n\nrouter.delete('users/:id', () => {}).as('users.delete')\n```\n\n----------------------------------------\n\nTITLE: MultipartFile Helper Usage\nDESCRIPTION: Examples of using the MultipartFile helper for moving files to different storage disks with various options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/drive.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = request.file('image')!\n\nconst key = 'user-1-avatar.png'\n\n/**\n * Move file to the default disk\n */\nawait image.moveToDisk(key)\n\n/**\n * Move file to a named disk\n */\nawait image.moveToDisk(key, 's3')\n\n/**\n * Define additional properties during the\n * move operation\n */\nawait image.moveToDisk(key, 's3', {\n  contentType: 'image/png',\n})\n\n/**\n * Write file by first reading it as a buffer. You may use this\n * option when your cloud storage provider results in broken\n * files with the \"stream\" option\n */\nawait image.moveToDisk(key, 's3', {\n  moveAs: 'buffer'\n})\n```\n\n----------------------------------------\n\nTITLE: Manual File Validation in AdonisJS\nDESCRIPTION: Demonstrates manual file validation using the request.file method with inline validation rules in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst avatar = request.file('avatar', {\n  size: '2mb',\n  extnames: ['jpg', 'png', 'jpeg']\n})\n\nif (!avatar.isValid) {\n  return response.badRequest({\n    errors: avatar.errors\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Transmit Routes in AdonisJS\nDESCRIPTION: Code snippet showing how to register Transmit routes in the start/routes.ts file using the registerRoutes method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport transmit from '@adonisjs/transmit/services/main'\n\ntransmit.registerRoutes()\n```\n\n----------------------------------------\n\nTITLE: Single Action Controller\nDESCRIPTION: Implementation of a single action controller with a handle method\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class RegisterNewsletterSubscriptionController {\n  handle() {\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using flashAll to save form data in flash messages\nDESCRIPTION: The flashAll method is a shorthand for saving all request data to flash messages, useful for preserving form inputs after validation failures.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n// title: flashAll\n/**\n * Short hand for flashing request\n * data\n */\nsession.flashAll()\n\n/**\n * Same as \"flashAll\"\n */\nsession.flash(request.all())\n```\n\n----------------------------------------\n\nTITLE: Custom Argument Transformer for Redis Commands - TypeScript\nDESCRIPTION: Defines a custom argument transformer for the 'hmset' Redis command by extending the 'redis.Command' interface. The transformer normalizes the second argument, converting Maps or objects to the expected array format, leveraging IORedis utilities. This affects how command arguments are serialized before being sent to Redis. Dependencies include '@adonisjs/redis/services/main' and internal 'utils' from IORedis.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_21\n\nLANGUAGE: TypeScript\nCODE:\n```\n// title: Argument transformer\\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.Command.setArgumentTransformer('hmset', (args) => {\\n  if (args.length === 2) {\\n    if (args[1] instanceof Map) {\\n      // utils is an internal module of ioredis\\n      return [args[0], ...utils.convertMapToArray(args[1])]\\n    }\\n    if (typeof args[1] === 'object' && args[1] !== null) {\\n      return [args[0], ...utils.convertObjectToArray(args[1])]\\n    }\\n  }\\n  return args\\n})\n```\n\n----------------------------------------\n\nTITLE: Switching Between Hash Drivers in AdonisJS\nDESCRIPTION: This example demonstrates how to switch between different hash drivers using the hash.use method, allowing you to use specific hash algorithms for different purposes within the same application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport hash from '@adonisjs/core/services/hash'\n\n// uses \"list.scrypt\" mapping from the config file\nawait hash.use('scrypt').make('secret')\n\n// uses \"list.bcrypt\" mapping from the config file\nawait hash.use('bcrypt').make('secret')\n\n// uses \"list.argon\" mapping from the config file\nawait hash.use('argon').make('secret')\n```\n\n----------------------------------------\n\nTITLE: Implementing Lifecycle Hooks for Test Groups in Japa\nDESCRIPTION: Using lifecycle hooks like setup and teardown to perform actions before and after tests or test groups, demonstrating both per-test and per-group hooks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\ntest.group('creating user', (group) => {\n  // highlight-start\n  group.each.setup(async () => {\n    console.log('runs before every test')\n  })\n\n  group.each.teardown(async () => {\n    console.log('runs after every test')\n  })\n\n  group.setup(async () => {\n    console.log('runs once before all the tests')\n  })\n\n  group.teardown(async () => {\n    console.log('runs once after all the tests')\n  })\n  // highlight-end\n\n  test('hashes user password', async ({ assert }) => {\n    const user = new User()\n    user.password = 'secret'\n    \n    await user.save()\n    \n    assert.isTrue(hash.isValidHash(user.password))\n    assert.isTrue(await hash.verify(user.password, 'secret'))\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Redis Connection Errors in AdonisJS - TypeScript\nDESCRIPTION: Subscribes to 'error' and 'subscriber:error' events to catch and manage errors that occur during connection attempts. This is useful for logging or custom error handling in AdonisJS applications using Redis. Depends on '@adonisjs/redis/services/main'; event handlers consume connection and error events.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_26\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('error', () => {})\\n  connection.on('subscriber:error', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Redis Lua Commands with AdonisJS - TypeScript\nDESCRIPTION: This snippet illustrates how to register a custom Lua script as a Redis command using the AdonisJS Redis service. The 'defineCommand' method sets up a 'release' command, specifying the number of keys and the Lua script to be executed on the Redis server. Dependencies include the '@adonisjs/redis/services/main' module, and the defined command will be available on all Redis connections within the application. Inputs are the command name, number of keys, and Lua script.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.defineCommand('release', {\\n  numberOfKeys: 2,\\n  lua: `\\n    redis.call('zrem', KEYS[2], ARGV[1])\\n    redis.call('zadd', KEYS[1], ARGV[2], ARGV[1])\\n    return true\\n  `,\\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Error Handler with AdonisJS Server\nDESCRIPTION: Configuration code to register the error handler with the AdonisJS HTTP server in the kernel file\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/exception_handling.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nserver.errorHandler(() => import('#exceptions/handler'))\n```\n\n----------------------------------------\n\nTITLE: Authenticating with a Specific Auth Guard\nDESCRIPTION: Code snippet showing how to authenticate a user with a specific auth guard (e.g., 'admin') in browser tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nconst user = await User.create(payload)\nawait browserContext\n  .withGuard('admin')\n  .loginAs(user)\n```\n\n----------------------------------------\n\nTITLE: Manually Consuming Requests with AdonisJS Limiter\nDESCRIPTION: This code demonstrates how to manually check remaining requests and consume them using the AdonisJS limiter. It uses the remaining and increment methods to control request consumption.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport limiter from '@adonisjs/limiter/services/main'\n\nconst requestsLimiter = limiter.use({\n  requests: 10,\n  duration: '1 minute'\n})\n\nif (await requestsLimiter.remaining('unique_key') > 0) {\n  await requestsLimiter.increment('unique_key')\n  await performAction()\n} else {\n  return 'Too many requests'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Encryption Instance with Custom Secret Key\nDESCRIPTION: Demonstrates how to create a custom instance of the Encryption class with a custom secret key instead of using the default app key. This is useful when you need to use different encryption keys for different purposes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/encryption.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Encryption } from '@adonisjs/core/encryption'\n\nconst encryption = new Encryption({\n  secret: 'alongrandomsecretkey',\n})\n```\n\n----------------------------------------\n\nTITLE: Class Constructor Dependency Injection - PostService - AdonisJS TypeScript\nDESCRIPTION: Another example of dependency injection, this time for 'PostService'. Shows symmetry in how different services can each receive their own disk instance—typically contextually swapped for their specific storage driver. Uses same dependency injection pattern as in 'UserService'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Disk } from '@adonisjs/drive'\n\nexport default class PostService {\n  constructor(protected disk: Disk) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using AdonisJS Logger in TypeScript\nDESCRIPTION: Demonstrates how to import and use the AdonisJS logger service to write logs from anywhere in the application. Logs are written to stdout and appear on the terminal.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport logger from '@adonisjs/core/services/logger'\n\nlogger.info('this is an info message')\nlogger.error({ err: error }, 'Something went wrong')\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport Targets for AdonisJS Logger\nDESCRIPTION: Shows how to configure multiple transport targets for the logger, including file and pretty-print targets. This example demonstrates setting up targets with different log levels.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  loggers: {\n    app: {\n      enabled: true,\n      name: env.get('APP_NAME'),\n      level: env.get('LOG_LEVEL', 'info'),\n      \n      transport: {\n        targets: [\n          {\n            target: 'pino/file',\n            level: 'info',\n            options: {\n              destination: 1\n            }\n          },\n          {\n            target: 'pino-pretty',\n            level: 'info',\n            options: {}\n          },\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Issuing Access Tokens for Users in TypeScript\nDESCRIPTION: This snippet demonstrates how to issue access tokens for users. It includes an example of creating a route to generate tokens for a user and shows how to return the token information in the response.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport User from '#models/user'\n\nrouter.post('users/:id/tokens', async ({ params }) => {\n  const user = await User.findOrFail(params.id)\n  const token = await User.accessTokens.create(user)\n\n  return {\n    type: 'bearer',\n    value: token.value!.release(),\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.post('users/:id/tokens', async ({ params }) => {\n  const user = await User.findOrFail(params.id)\n  const token = await User.accessTokens.create(user)\n\n  return token\n})\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Events with Transmit in AdonisJS\nDESCRIPTION: Examples of broadcasting events to channels using the Transmit package in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport transmit from '@adonisjs/transmit/services/main'\n\ntransmit.broadcast('global', { message: 'Hello' })\ntransmit.broadcast('chats/1/messages', { message: 'Hello' })\ntransmit.broadcast('users/1', { message: 'Hello' })\n```\n\n----------------------------------------\n\nTITLE: Configuring Ally OAuth Providers\nDESCRIPTION: Configuration setup for multiple OAuth providers in config/ally.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, services } from '@adonisjs/ally'\n\ndefineConfig({\n  github: services.github({\n    clientId: env.get('GITHUB_CLIENT_ID')!,\n    clientSecret: env.get('GITHUB_CLIENT_SECRET')!,\n    callbackUrl: '',\n  }),\n  twitter: services.twitter({\n    clientId: env.get('TWITTER_CLIENT_ID')!,\n    clientSecret: env.get('TWITTER_CLIENT_SECRET')!,\n    callbackUrl: '',\n  }),\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Final and Error Handlers in AdonisJS Middleware Pipeline\nDESCRIPTION: This snippet shows how to set up final and error handlers when testing AdonisJS middleware using the server pipeline. It demonstrates the execution flow and error handling in the middleware chain.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nconst ctx = testUtils.createHttpContext()\n\nawait pipeline\n .finalHandler(() => {\n   console.log('all middleware called next')\n   console.log('the upstream logic starts from here')\n })\n .errorHandler((error) => {\n   console.log('an exception was raised')\n   console.log('the upstream logic starts from here')\n })\n .run(ctx)\n \nconsole.log('pipeline executed')\n```\n\n----------------------------------------\n\nTITLE: Constructor Dependency Injection in AdonisJS Listener Classes\nDESCRIPTION: Demonstrates dependency injection into class constructors leveraging the IoC container, facilitating cleaner code and improved testability when depending on external services.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// title: Constructor injection\nimport { inject } from '@adonisjs/core'\nimport TokensService from '#services/tokens_service'\n\n@inject()\nexport default class SendVerificationEmail {\n  constructor(protected tokensService: TokensService) {}\n\n  handle(user: User) {\n    const token = this.tokensService.generate(user.email)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Signed URLs in Route Handler in AdonisJS\nDESCRIPTION: Shows how to verify if a request has a valid signature using the request.hasValidSignature() method in a route handler.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter.get('unsubscribe/:id', ({ request, response }) => {\n  if (!request.hasValidSignature()) {\n    return response.badRequest('Invalid or expired URL')\n  }\n  \n  // Remove subscription\n}).as('unsubscribe')\n```\n\n----------------------------------------\n\nTITLE: Creating Subscription with Transmit using TypeScript\nDESCRIPTION: This example demonstrates how to create a subscription using the Transmit library in TypeScript. The `subscription` method is invoked with a channel name, and the `create` method registers the subscription server-side. The `create` method returns a promise, allowing asynchronous execution.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst subscription = transmit.subscription('chats/1/messages')\nawait subscription.create()\n```\n\n----------------------------------------\n\nTITLE: Implementing Check Method in JwtGuard for AdonisJS\nDESCRIPTION: This snippet shows the implementation of the check method in the JwtGuard class, which is a silent version of the authenticate method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport class JwtGuard<UserProvider extends JwtUserProviderContract<unknown>>\n  implements GuardContract<UserProvider[typeof symbols.PROVIDER_REAL_USER]>\n{\n  async check(): Promise<boolean> {\n    try {\n      await this.authenticate()\n      return true\n    } catch {\n      return false\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Resource Route Parameters in AdonisJS\nDESCRIPTION: Examples of renaming route parameters for both single and nested resources.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .resource('posts', PostsController)\n  .params({ posts: 'post' })\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .resource('posts.comments', PostsController)\n  .params({\n    posts: 'post',\n    comments: 'comment',\n  })\n```\n\n----------------------------------------\n\nTITLE: Registering Authentication Plugin in AdonisJS v6 Tests\nDESCRIPTION: This snippet shows how to register the authApiClient plugin in the tests/bootstrap.ts file for authenticating users in API tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { authApiClient } from '@adonisjs/auth/plugins/api_client'\n\nexport const plugins: Config['plugins'] = [\n  assert(),\n  pluginAdonisJS(app),\n  authApiClient(app)\n]\n```\n\n----------------------------------------\n\nTITLE: Protected Health Check Route\nDESCRIPTION: Example of protecting the health check endpoint with a custom middleware that validates an API secret.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nconst HealthChecksController = () => import('#controllers/health_checks_controller')\n\nrouter\n  .get('/health', [HealthChecksController])\n  .use(({ request, response }, next) => {\n    if (request.header('x-monitoring-secret') === 'some_secret_value') {\n      return next()\n    }\n    response.unauthorized({ message: 'Unauthorized access' })\n  })\n```\n\n----------------------------------------\n\nTITLE: Implementing confirmed Validation Rule in AdonisJS\nDESCRIPTION: This rule ensures that a field is confirmed by checking against another field usually in password confirmation scenarios. Custom confirmation fields can be specified for non-standard field naming conventions. Requires @ioc/Adonis/Core/Validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  password: schema.string([\n    rules.confirmed()\n  ])\n}\n\n/**\n Valid data: {\n    password: 'secret',\n    password_confirmation: 'secret'\n }\n */\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  password: schema.string([\n    rules.confirmed('passwordConfirmation')\n  ])\n}\n\n/**\n Valid data: {\n    password: 'secret',\n    passwordConfirmation: 'secret'\n }\n */\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  'password_confirmation.confirmed': 'Password do not match'\n}\n```\n\n----------------------------------------\n\nTITLE: Using @inputError Tag for Validation Errors\nDESCRIPTION: Using the @inputError tag to display validation errors for specific form fields. This allows iterating through multiple error messages for a single field.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_16\n\nLANGUAGE: edge\nCODE:\n```\n@inputError('title')\n  @each(message in $messages)\n    <p>{{ message }}</p>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Reading Cookies in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to read cookies from the request object in an AdonisJS route handler.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('cart', async ({ request }) => {\n  const cartItems = request.cookie('cart_items', [])\n  console.log(cartItems)\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying flash messages in Edge templates\nDESCRIPTION: Shows how to access and display flash messages in Edge templates using the flashMessage tag. This is useful for showing notifications after form submissions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_16\n\nLANGUAGE: edge\nCODE:\n```\n@flashMessage('notification')\n  <div class=\"notification {{ $message.type }}\">\n    {{ $message.message }}\n  </div>\n@end\n\n<form method=\"POST\" action=\"/contact\">\n  <!-- Rest of the form -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Validating Request Body with Schema in AdonisJS Route (TypeScript)\nDESCRIPTION: Defines a validation schema using `schema.create` for post data (title, body, categories) and validates the incoming request body against this schema within an AdonisJS route handler. It uses `request.validate` which returns the validated payload or throws an exception on failure. Dependencies include `@adonisjs/core/services/router` and `@adonisjs/core/legacy/validator`.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport router from '@adonisjs/core/services/router'\nimport { schema } from '@adonisjs/core/legacy/validator'\n\nrouter.post('posts', async ({ request }) => {\n  /**\n   * Schema definition\n   */\n  const newPostSchema = schema.create({\n    title: schema.string(),\n    body: schema.string(),\n    categories: schema.array().members(schema.number()),\n  })\n\n  /**\n   * Validate request body against the schema\n   */\n  const payload = await request.validate({ schema: newPostSchema })\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Clusters in AdonisJS\nDESCRIPTION: Configuration for Redis clusters in AdonisJS, specifying multiple hosts and cluster options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst redisConfig = defineConfig({\n  connections: {\n    main: {\n      clusters: [\n        { host: '127.0.0.1', port: 6380 },\n        { host: '127.0.0.1', port: 6381 },\n      ],\n      clusterOptions: {\n        scaleReads: 'slave',\n        slotsRefreshTimeout: 10 * 1000,\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Plain Cookies without Encoding in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to set and read plain cookies without encoding in AdonisJS, useful when raw values need to be stored.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.plainCookie('token', tokenValue, {\n  httpOnly: true,\n  encode: false,\n})\n\n// Read plain cookie with encoding off\nrequest.plainCookie('token', {\n  encoded: false\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Manual Processing for Specific Routes in AdonisJS\nDESCRIPTION: This configuration snippet demonstrates how to specify route patterns for which multipart streams should be manually processed in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  multipart: {\n    /**\n     * Define an array of route patterns for which you want\n     * to self process the multipart stream.\n     */\n    processManually: ['/assets']\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring Access Token Types\nDESCRIPTION: Shows different approaches to type the currentAccessToken property, including type merging and model property declaration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccessToken } from '@adonisjs/auth/access_tokens'\n\nBouncer.ability((user: User & { currentAccessToken?: AccessToken }) => {})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { AccessToken } from '@adonisjs/auth/access_tokens'\n\nexport default class User extends BaseModel {\n  currentAccessToken?: AccessToken\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nBouncer.ability((user: User) => {})\n```\n\n----------------------------------------\n\nTITLE: Checking Authentication Status\nDESCRIPTION: Shows how to check if a request is authenticated and access the authenticated user safely within a controller.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nclass PostsController {\n  async store({ auth }: HttpContext) {\n    if (auth.isAuthenticated) {\n      await auth.user!.related('posts').create(postData)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipart Parser Settings - AdonisJS - TypeScript\nDESCRIPTION: Demonstrates a multipart parser configuration in AdonisJS, showing key options for handling file uploads and multipart form data. Settings include automatic processing, specific manual processing for routes, encoding, field and file size limits, permitted content types, and empty string normalization. Inputs are file fields and associated configuration; outputs are parsed multipart data and files.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nmultipart: {\n  autoProcess: true,\n  processManually: [],\n  encoding: 'utf-8',\n  fieldsLimit: '2mb',\n  limit: '20mb',\n  types: ['multipart/form-data'],\n  convertEmptyStringsToNull: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Using a Validator Class in an AdonisJS Route (TypeScript)\nDESCRIPTION: Demonstrates how to use a dedicated Validator class (`CreateUserValidator`) for request validation within an AdonisJS route handler. The class constructor is passed directly to the `request.validate` method instead of an inline schema object. The validator instance receives the current HttpContext in its constructor automatically.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport router from '@adonisjs/core/services/router'\n// highlight-start\nimport CreateUser from 'App/Validators/CreateUserValidator'\n// highlight-end\n\nrouter.post('users', async ({ request, response }) => {\n  // highlight-start\n  const payload = await request.validate(CreateUser)\n  // highlight-end\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Hashing in AdonisJS\nDESCRIPTION: This configuration file sets up the hashing drivers for an AdonisJS application. The default driver is set to scrypt, and includes commented configurations for argon2 and bcrypt which can be enabled as needed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/hash.ts\nimport { defineConfig, drivers } from '@adonisjs/core/hash'\n\nexport default defineConfig({\n  default: 'scrypt',\n\n  list: {\n    scrypt: drivers.scrypt(),\n\n    /**\n     * Uncomment when using argon2\n       argon: drivers.argon2(),\n     */\n\n    /**\n     * Uncomment when using bcrypt\n       bcrypt: drivers.bcrypt(),\n     */\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Forcing File Downloads in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the response.attachment method to force browsers to save files on the user's computer.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/uploads/:file', async ({ response, params }) => {\n  const filePath = app.makePath(`uploads/${params.file}`)\n\n  response.attachment(filePath, 'custom-filename.jpg')\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Edge Provider in AdonisJS Configuration\nDESCRIPTION: This snippet shows how to register the Edge provider in the adonisrc.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/core/providers/edge_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Dynamic API Rate Limiting Middleware\nDESCRIPTION: Creating an API throttle middleware with dynamic rate limits based on user authentication status, applying different limits for authenticated and guest users.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/limiter.ts\nexport const apiThrottle = limiter.define('api', (ctx) => {\n  /**\n   * Allow logged-in users to make 100 requests by\n   * their user ID\n   */\n  if (ctx.auth.user) {\n    return limiter\n      .allowRequests(100)\n      .every('1 minute')\n      .usingKey(`user_${ctx.auth.user.id}`)\n  }\n\n  /**\n   * Allow guest users to make 10 requests by ip address\n   */\n  return limiter\n    .allowRequests(10)\n    .every('1 minute')\n    .usingKey(`ip_${ctx.request.ip()}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Built-in Route Param Matchers in AdonisJS\nDESCRIPTION: This example shows how to use AdonisJS's built-in route param matchers for common data types like numbers, UUIDs, and slugs.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\n// Validate id to be numeric + cast to number data type\nrouter.where('id', router.matchers.number())\n\n// Validate id to be a valid UUID\nrouter.where('id', router.matchers.uuid())\n\n// Validate slug to match a given slug regex: regexr.com/64su0\nrouter.where('slug', router.matchers.slug())\n```\n\n----------------------------------------\n\nTITLE: Using response.send Method in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to use the response.send method to explicitly set the response body with various data types.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ response }) => {\n  /** Plain string */\n  response.send('This is the homepage')\n\n  /** Html fragment */\n  response.send('<p> This is the homepage </p>')\n\n  /** JSON response */\n  response.send({ page: 'home' })\n\n  /** Converted to ISO string */\n  response.send(new Date())\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Current Route in AdonisJS\nDESCRIPTION: Shows how to access the current request's route information using the HttpContext.route property.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('payments', ({ route }) => {\n  console.log(route)\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Lucid ORM in AdonisJS\nDESCRIPTION: Command to install and configure Lucid ORM in an AdonisJS application using the ace CLI tool.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/lucid\n```\n\n----------------------------------------\n\nTITLE: Setting Up Auth Browser Client Plugin\nDESCRIPTION: Configuration for registering the authBrowserClient plugin to handle authentication in browser tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n// title: tests/bootstrap.ts\n// insert-start\nimport { authBrowserClient } from '@adonisjs/auth/plugins/browser_client'\n// insert-end\n\nexport const plugins: Config['plugins'] = [\n  assert(),\n  pluginAdonisJS(app),\n  // insert-start\n  authBrowserClient(app)\n  // insert-end\n]\n```\n\n----------------------------------------\n\nTITLE: Writing HTML Markup with Edge Syntax\nDESCRIPTION: This snippet demonstrates how to write HTML markup using Edge syntax, including dynamic content insertion.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n</head>\n<body>\n  <h1>\n    Hello world from {{ request.url() }} endpoint\n  </h1>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Testing AdonisJS Middleware with HttpContextFactory\nDESCRIPTION: This snippet shows how to test AdonisJS middleware using the HttpContextFactory, which is useful for testing middleware in packages without booting an entire application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  RequestFactory,\n  ResponseFactory,\n  HttpContextFactory\n} from '@adonisjs/core/factories/http'\n\nconst request = new RequestFactory().create()\nconst response = new ResponseFactory().create()\nconst ctx = new HttpContextFactory()\n  .merge({ request, response })\n  .create()\n\nawait middleware.handle(ctx, () => {\n  console.log('Next function invoked')\n})\n```\n\n----------------------------------------\n\nTITLE: Method Dependency Injection in AdonisJS Listener Classes\nDESCRIPTION: Shows how to make use of method-level dependency injection, automatically injecting required service instances for event handling within listener methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// title: Method injection\nimport { inject } from '@adonisjs/core'\nimport TokensService from '#services/tokens_service'\nimport UserRegistered from '#events/user_registered'\n\nexport default class SendVerificationEmail {\n  @inject()\n  handle(event: UserRegistered, tokensService: TokensService) {\n    const token = tokensService.generate(event.user.email)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Expiring Signed URLs in AdonisJS\nDESCRIPTION: Shows how to generate signed URLs with an expiration time using the expiresIn option.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter\n  .builder()\n  .prefixUrl('https://blog.adonisjs.com')\n  .params({ id: 231 })\n  // highlight-start\n  .makeSigned('unsubscribe', {\n    expiresIn: '3 days'\n  })\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Creating Vue Component for User List with Inertia\nDESCRIPTION: Vue component that displays a list of users using Inertia's Link component for navigation. Demonstrates frontend implementation with TypeScript and Vue 3.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Link, Head } from '@inertiajs/vue3'\n\ndefineProps<{\n  users: SerializedUser[]\n}>()\n</script>\n\n<template>\n  <Head title=\"Users\" />\n\n  <div v-for=\"user in users\" :key=\"user.id\">\n    <Link :href=\"`/users/${user.id}`\">\n      {{ user.name }}\n    </Link>\n    <div>{{ user.email }}</div>\n  </div>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Resolving Bindings Within Factory Function - AdonisJS Container - TypeScript\nDESCRIPTION: Demonstrates resolving other bindings from the AdonisJS IoC container within a binding's factory function, specifically by retrieving configuration and passing it to another service. Requires access to the AdonisJS application and its container. The resolver retrieves the 'config' binding before instantiating 'MyFakeCache' with the cache configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.app.container.bind('cache', async (resolver) => {\n  const configService = await resolver.make('config')\n  const cacheConfig = configService.get<any>('cache')\n\n  return new MyFakeCache(cacheConfig)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Auth Guard for Access Tokens\nDESCRIPTION: Configuration setup for the access tokens guard in the auth config file. Defines the default guard and token provider settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/auth.ts\nimport { defineConfig } from '@adonisjs/auth'\nimport { tokensGuard, tokensUserProvider } from '@adonisjs/auth/access_tokens'\n\nconst authConfig = defineConfig({\n  default: 'api',\n  guards: {\n    api: tokensGuard({\n      provider: tokensUserProvider({\n        tokens: 'accessTokens',\n        model: () => import('#models/user'),\n      })\n    }),\n  },\n})\n\nexport default authConfig\n```\n\n----------------------------------------\n\nTITLE: Running AdonisJS Database Migrations in Production\nDESCRIPTION: Command to run database migrations for an AdonisJS application in production using the ace CLI tool.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnode ace migration:run --force\n```\n\n----------------------------------------\n\nTITLE: Listening to HTTP Server Ready Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'http:server_ready' event which is dispatched when the AdonisJS HTTP server is ready to accept incoming requests. The event provides host, port, and boot duration information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('http:server_ready', (event) => {\n  console.log(event.host)\n  console.log(event.port)\n\n  /**\n   * Time it took to boot the app and start\n   * the HTTP server.\n   */\n  console.log(event.duration)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Container Service for Database in TypeScript\nDESCRIPTION: Demonstrates how to use the container service to import the Database instance instead of using container.make directly.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/container_services.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\n```\n\n----------------------------------------\n\nTITLE: Creating a Model with AdonisJS CLI\nDESCRIPTION: Command to generate a new Lucid model using the AdonisJS CLI.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:model User\n```\n\n----------------------------------------\n\nTITLE: Defining Static Types for Events in AdonisJS TypeScript\nDESCRIPTION: Illustrates the implementation of static type definitions for events to ensure type safety. Events and their data types are registered within the 'types/events.ts' file for consistency and error minimization.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport User from '#models/User'\n\ndeclare module '@adonisjs/core/types' {\n  interface EventsList {\n    'user:registered': User\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Form Errors and Old Input Values with Edge\nDESCRIPTION: This Edge template snippet shows how to display form errors and old input values using Edge's 'getError' and 'old' methods. These helpers allow showing validation errors and pre-filling form fields with user input after validation fails.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_4\n\nLANGUAGE: Edge\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title> Create article </title>\n  </head>\n  <body>\n    <form action=\"{{ route('articles.store') }}\" method=\"post\">\n\n      <div>\n        <label for=\"title\">Article title</label>\n\n        <input\n          type=\"text\"\n          name=\"title\"\n          id=\"title\"\n          value=\"{{ old('title', '') }}\"\n        />\n        \n        @if(hasError('title'))\n          <p> {{ getError('title') }} </p>\n        @end\n      </div>\n\n      <div>\n        <label for=\"content\">Article content</label>\n        \n        <textarea\n          name=\"content\"\n          id=\"content\"\n          >{{ old('content', '') }}</textarea>\n\n        @if(hasError('content'))\n          <p> {{ getError('content') }} </p>\n        @end\n      </div>\n\n      <div>\n        <button type=\"submit\"> Create article </button>\n      </div>\n\n    </form>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Accessing IP Addresses in AdonisJS\nDESCRIPTION: Shows how to access client IP addresses using ip() and ips() methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ request }) => {\n  console.log(request.ip())\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ request }) => {\n  console.log(request.ips())\n})\n```\n\n----------------------------------------\n\nTITLE: Redis Pub/Sub Subscription with Error Handling in AdonisJS\nDESCRIPTION: Advanced Redis subscription example in AdonisJS with error handling and subscription count logging.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nredis.subscribe('user:add', (message) => {\n  console.log(message)\n},\n{\n  onError(error) {\n    console.log(error)\n  },\n  onSubscription(count) {\n    console.log(count)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exception Class\nDESCRIPTION: Example of creating a custom exception class with static status and code properties\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/exception_handling.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Exception } from '@adonisjs/core/exceptions'\nexport default class UnAuthorizedException extends Exception {\n  static status = 403\n  static code = 'E_UNAUTHORIZED'\n}\n```\n\n----------------------------------------\n\nTITLE: Disabling MIME Sniffing in AdonisJS Shield (TypeScript)\nDESCRIPTION: This snippet demonstrates how to disable MIME sniffing by configuring the X-Content-Type-Options header in the AdonisJS Shield package. It enables the contentTypeSniffing guard, which sets the header to 'nosniff'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/shield'\n\nconst shieldConfig = defineConfig({\n  contentTypeSniffing: {\n    enabled: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Event Listener Errors with emitter.onError in TypeScript\nDESCRIPTION: Elaborates on managing exceptions in event listeners by implementing 'emitter.onError', mitigating unhandled promise rejections through structured error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.onError((event, error, eventData) => {\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Usage Example\nDESCRIPTION: Example of caching user details with a 5-minute TTL using the cache service.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/cache.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport cache from '@adonisjs/cache/services/main'\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/user/:id', async ({ params }) => {\n  return cache.getOrSet({\n    key: `user:${params.id}`,\n    factory: async () => {\n      const user = await User.find(params.id)\n      return user.toJSON()\n    },\n    ttl: '5m',\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Remember Me Tokens in Auth Configuration\nDESCRIPTION: Sets the 'useRememberTokens' option to true in the AdonisJS auth configuration to enable handling of Remember Me tokens. Adjusts token age settings and links to session user provider.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/auth'\nimport { sessionGuard, sessionUserProvider } from '@adonisjs/auth/session'\n\nconst authConfig = defineConfig({\n  default: 'web',\n  guards: {\n    web: sessionGuard({\n      // highlight-start\n      useRememberMeTokens: true,\n      rememberMeTokensAge: '2 years',\n      // highlight-end\n      provider: sessionUserProvider({\n        model: () => import('#models/user'),\n      }),\n    })\n  },\n})\n\nexport default authConfig\n```\n\n----------------------------------------\n\nTITLE: Using Plain Cookies in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to set and read plain cookies in AdonisJS, which can be accessed by frontend code using document.cookie.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ request, response }) => {\n  // set plain cookie\n  response.plainCookie('user', { id: 1 }, {\n    httpOnly: true\n  })\n\n  // read plain cookie\n  request.plainCookie('user')\n})\n```\n\n----------------------------------------\n\nTITLE: Authorizing Transmit Channels in AdonisJS\nDESCRIPTION: Implementation of channel authorization for Transmit, demonstrating user-specific and chat-specific authorization logic.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport transmit from '@adonisjs/transmit/services/main'\nimport Chat from '#models/chat'\nimport type { HttpContext } from '@adonisjs/core/http'\n\ntransmit.authorize<{ id: string }>('users/:id', (ctx: HttpContext, { id }) => {\n  return ctx.auth.user?.id === +id\n})\n\ntransmit.authorize<{ id: string }>('chats/:id/messages', async (ctx: HttpContext, { id }) => {\n  const chat = await Chat.findOrFail(+id)\n  \n  return ctx.bouncer.allows('accessChat', chat)\n})\n```\n\n----------------------------------------\n\nTITLE: URL Validation and Relaxed Options for Environment Variables - TypeScript\nDESCRIPTION: Demonstrates various ways to validate that an environment variable (e.g., S3_ENDPOINT) is a valid URL using Env.schema.string with format options. This includes relaxing requirements for protocol or top-level domain using protocol: false or tld: false. Useful for services that accept incomplete or internal URLs.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  S3_ENDPOINT: Env.schema.string({ format: 'url' })\n\n  // Allow URLs without protocol\n  S3_ENDPOINT: Env.schema.string({ format: 'url', protocol: false })\n\n  // Allow URLs without tld\n  S3_ENDPOINT: Env.schema.string({ format: 'url', tld: false })\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Inline Lifecycle Callbacks in AdonisJS\nDESCRIPTION: This snippet shows how to register inline lifecycle callbacks on the application instance. It includes examples for 'booted', 'ready', and 'terminating' hooks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application_lifecycle.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst app = new Application(new URL('../', import.meta.url))\n\nnew Ignitor(APP_ROOT, { importer: IMPORTER })\n  .tap((app) => {\n    app.booted(() => {\n      console.log('invoked after the app is booted')\n    })\n    \n    app.ready(() => {\n      console.log('invoked after the app is ready')\n    })\n    \n    app.terminating(() => {\n      console.log('invoked before the termination starts')\n    })\n  })\n```\n\n----------------------------------------\n\nTITLE: Defining a Global Throttle Middleware\nDESCRIPTION: Creating a global throttle middleware that limits requests to 10 per minute based on IP address.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/limiter.ts\nimport limiter from '@adonisjs/limiter/services/main'\n\nexport const throttle = limiter.define('global', () => {\n  return limiter.allowRequests(10).every('1 minute')\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Packages in AdonisJS v6 (TypeScript)\nDESCRIPTION: This snippet shows how to install one or multiple packages using the detected package manager in the user's project. It uses the codemods.installPackages method to install 'vinejs' and 'edge' as regular dependencies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nconst codemods = await command.createCodemods()\n\ntry {\n  await codemods.installPackages([\n    { name: 'vinejs', isDevDependency: false },\n    { name: 'edge', isDevDependency: false }\n  ])\n} catch (error) {\n  console.error('Unable to install packages')\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Extending AdonisJS Response with Macros and Getters - TypeScript\nDESCRIPTION: This code snippet demonstrates how to add custom properties and methods to the AdonisJS Response class using the macro and getter extension points. Macros are used for methods, while getters are used for accessible properties. Dependencies include the AdonisJS core HTTP package, and these extensions enable adding reusable or application-specific behaviors to HTTP responses. To use, import the Response class and define macros/getters as needed. Inputs and outputs depend on the implementation; a sample property method and getter are shown.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Response } from '@adonisjs/core/http'\n\nResponse.macro('property', function (this: Response) {\n  return value\n})\nResponse.getter('property', function (this: Response) {\n  return value\n})\n```\n\n----------------------------------------\n\nTITLE: Using consume Method for Rate Limiting in AdonisJS\nDESCRIPTION: This snippet shows how to use the consume method of the AdonisJS limiter to avoid race conditions when checking and incrementing request counts. It handles the E_TOO_MANY_REQUESTS exception.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/limiter'\n\ntry {\n  await requestsLimiter.consume('unique_key')\n  await performAction()\n} catch (error) {\n  if (error instanceof errors.E_TOO_MANY_REQUESTS) {\n    return 'Too many requests'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Reflashing flash messages in TypeScript\nDESCRIPTION: The reflash methods allow extending the life of flash messages to subsequent requests, either for all flash data or selectively by including or excluding specific keys.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nsession.reflash()\nsession.reflashOnly(['notification', 'errors'])\nsession.reflashExcept(['errors'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Inertia Entry Points for Different Frameworks\nDESCRIPTION: Setup code for initializing Inertia with different frontend frameworks (Vue, React, Svelte, Solid). Shows configuration for app creation, page resolution, and component mounting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createApp, h } from 'vue'\nimport type { DefineComponent } from 'vue'\nimport { createInertiaApp } from '@inertiajs/vue3'\nimport { resolvePageComponent } from '@adonisjs/inertia/helpers'\n\nconst appName = import.meta.env.VITE_APP_NAME || 'AdonisJS'\n\ncreateInertiaApp({\n  title: (title) => {{ `${title} - ${appName}` }},\n  resolve: (name) => {\n    return resolvePageComponent(\n      `../pages/${name}.vue`,\n      import.meta.glob<DefineComponent>('../pages/**/*.vue'),\n    )\n  },\n  setup({ el, App, props, plugin }) {\n    createApp({ render: () => h(App, props) })\n      .use(plugin)\n      .mount(el)\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createRoot } from 'react-dom/client';\nimport { createInertiaApp } from '@inertiajs/react';\nimport { resolvePageComponent } from '@adonisjs/inertia/helpers'\n\nconst appName = import.meta.env.VITE_APP_NAME || 'AdonisJS'\n\ncreateInertiaApp({\n  progress: { color: '#5468FF' },\n\n  title: (title) => `${title} - ${appName}`,\n\n  resolve: (name) => {\n    return resolvePageComponent(\n      `./pages/${name}.tsx`,\n      import.meta.glob('./pages/**/*.tsx'),\n    )\n  },\n\n  setup({ el, App, props }) {\n    const root = createRoot(el);\n    root.render(<App {...props} />);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Basic User Authentication in AdonisJS\nDESCRIPTION: Demonstrates a basic approach to find a user by email and verify their password using the hash service. However, this method is prone to timing attacks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/verifying_user_credentials.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nimport hash from '@adonisjs/core/services/hash'\nimport type { HttpContext } from '@adonisjs/core/http'\n\nexport default class SessionController {\n  async store({ request, response }: HttpContext) {\n    const { email, password } = request.only(['email', 'password'])\n\n    /**\n     * Find a user by email. Return error if a user does\n     * not exists\n     */\n    const user = await User.findBy('email', email)\n\n    if (!user) {\n      return response.abort('Invalid credentials')\n    }\n\n    /**\n     * Verify the password using the hash service\n     */\n    const isPasswordValid = await hash.verify(user.password, password)\n\n    if (!isPasswordValid) {\n      return response.abort('Invalid credentials')\n    }\n\n    /**\n     * Now login the user or create a token for them\n     */\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring JWT Guard in AdonisJS Auth Config\nDESCRIPTION: This code demonstrates how to register and configure the JWT guard in the AdonisJS auth configuration file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/auth'\nimport { sessionUserProvider } from '@adonisjs/auth/session'\nimport env from '#start/env'\nimport { JwtGuard } from '../app/auth/jwt/guard.js'\n\nconst jwtConfig = {\n  secret: env.get('APP_KEY'),\n}\nconst userProvider = sessionUserProvider({\n  model: () => import('#models/user'),\n})\n\nconst authConfig = defineConfig({\n  default: 'jwt',\n  guards: {\n    jwt: (ctx) => {\n      return new JwtGuard(ctx, userProvider, jwtConfig)\n    },\n  },\n})\n\nexport default authConfig\n```\n\n----------------------------------------\n\nTITLE: Dynamic CORS Origin Function\nDESCRIPTION: Example of using a function to dynamically compute the origin value during HTTP requests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n{\n  origin: (requestOrigin, ctx) => {\n    return true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Ready Events on Redis Connections - TypeScript\nDESCRIPTION: Tracks when a Redis connection (or subscriber connection) becomes ready to accept commands via the 'ready' and 'subscriber:ready' events. This allows initialization or monitoring logic to trigger at the appropriate lifecycle stage. Needs '@adonisjs/redis/services/main', with event callbacks receiving connection instances.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('ready', () => {})\\n  connection.on('subscriber:ready', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User in Edge Templates\nDESCRIPTION: Examples of accessing authenticated user information within Edge template files, including conditional rendering based on auth status.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n@if(auth.isAuthenticated)\n  <p> Hello {{ auth.user.email }} </p>\n@end\n```\n\nLANGUAGE: edge\nCODE:\n```\n@eval(await auth.check())\n\n<header>\n  @if(auth.isAuthenticated)\n    <p> Hello {{ auth.user.email }} </p>\n  @end\n</header>\n```\n\n----------------------------------------\n\nTITLE: Registering Shield Service Provider\nDESCRIPTION: TypeScript configuration needed to register the shield service provider in the adonisrc.ts file. This enables the security features provided by the package.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/shield/shield_provider'),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing GetUserOrFail Method in JwtGuard for AdonisJS\nDESCRIPTION: This code implements the getUserOrFail method in the JwtGuard class, which returns the authenticated user or throws an error if the user doesn't exist.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport class JwtGuard<UserProvider extends JwtUserProviderContract<unknown>>\n  implements GuardContract<UserProvider[typeof symbols.PROVIDER_REAL_USER]>\n{\n  getUserOrFail(): UserProvider[typeof symbols.PROVIDER_REAL_USER] {\n    if (!this.user) {\n      throw new errors.E_UNAUTHORIZED_ACCESS('Unauthorized access', {\n        guardDriverName: this.driverName,\n      })\n    }\n\n    return this.user\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple File Validation Using Validator in AdonisJS\nDESCRIPTION: Shows how to validate an array of uploaded files using the validator in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport vine from '@vinejs/vine'\n\nexport const createInvoiceValidator = vine.compile(\n  vine.object({\n    documents: vine.array(\n      vine.file({\n        size: '2mb',\n        extnames: ['jpg', 'png', 'pdf']\n      })\n    )\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Register Method Implementation\nDESCRIPTION: Example of implementing the register method to bind dependencies in the IoC container.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class AppProvider {\n  register() {\n    this.app.container.bind('db', () => {\n      return new Database()\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Session Package Configuration\nDESCRIPTION: Configures the session package with settings such as session duration, store type, and cookie attributes in the config/session.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport env from '#start/env'\nimport app from '@adonisjs/core/services/app'\nimport { defineConfig, stores } from '@adonisjs/session'\n\nexport default defineConfig({\n  age: '2h',\n  enabled: true,\n  cookieName: 'adonis-session',\n  clearWithBrowser: false,\n\n  cookie: {\n    path: '/',\n    httpOnly: true,\n    secure: app.inProduction,\n    sameSite: 'lax',\n  },\n\n  store: env.get('SESSION_DRIVER'),\n  stores: {\n    cookie: stores.cookie(),\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring and Using Multiple Loggers in AdonisJS\nDESCRIPTION: Shows how to configure multiple loggers in the config file and how to access them using the logger.use method. This is useful for separating logs for different parts of the application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  default: 'app',\n  \n  loggers: {\n    app: {\n      enabled: true,\n      name: env.get('APP_NAME'),\n      level: env.get('LOG_LEVEL', 'info')\n    },\n    payments: {\n      enabled: true,\n      name: 'payments',\n      level: env.get('LOG_LEVEL', 'info')\n    },\n  }\n})\n\n// Usage\nimport logger from '@adonisjs/core/services/logger'\n\nlogger.use('payments')\nlogger.use('app')\n\n// Get an instance of the default logger\nlogger.use()\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User via auth.getUserOrFail in AdonisJS Route\nDESCRIPTION: This snippet presents an alternative method to safely access the authenticated user within a protected route. Instead of using `auth.user!` which relies on non-null assertion, it uses `auth.getUserOrFail()`. This method attempts to retrieve the user; if the user is authenticated, it returns the user object, otherwise, it throws an `E_UNAUTHORIZED_ACCESS` exception, preventing potential null pointer errors.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/basic_auth_guard.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { middleware } from '#start/kernel'\nimport router from '@adonisjs/core/services/router'\n\nrouter\n  .get('dashboard', ({ auth }) => {\n    // highlight-start\n    const user = auth.getUserOrFail()\n    return `You are authenticated as ${user.email}`\n    // highlight-end\n  })\n  .use(middleware.auth({\n    guards: ['basicAuth']\n  }))\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache Drivers\nDESCRIPTION: Configuration setup for multiple cache drivers including DynamoDB, database, and Redis with multi-tier caching.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/cache.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig, store, drivers } from '@adonisjs/cache'\n\nconst cacheConfig = defineConfig({\n  default: 'redis',\n  \n  stores: {\n    /**\n     * Cache data only on DynamoDB\n     */\n    dynamodb: store().useL2Layer(drivers.dynamodb({})),\n\n    /**\n     * Cache data using your Lucid-configured database\n     */\n    database: store().useL2Layer(drivers.database({ connectionName: 'default' })),\n\n    /**\n     * Cache data in-memory as the primary store and Redis as the secondary store.\n     * If your application is running on multiple servers, then in-memory caches\n     * need to be synchronized using a bus.\n     */\n    redis: store()\n      .useL1Layer(drivers.memory({ maxSize: '100mb' }))\n      .useL2Layer(drivers.redis({ connectionName: 'main' }))\n      .useBus(drivers.redisBus({ connectionName: 'main' })),\n  },\n})\n\nexport default cacheConfig\n```\n\n----------------------------------------\n\nTITLE: Using Injected Service in Controller\nDESCRIPTION: Shows how to inject a service class into a controller method using the @inject() decorator, where the first argument is the context and subsequent arguments are injected by the IoC container.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport { HttpContext } from '@adonisjs/core/http'\nimport UserService from '#services/user_service'\n\nexport default class UsersController {\n  @inject()\n  index(ctx: HttpContext, userService: UserService) {\n    return userService.all()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Where Constraints to Unique Rule in AdonisJS (TypeScript)\nDESCRIPTION: This snippet shows how to add additional where constraints to the unique rule. It includes examples of single value and array value constraints, along with the resulting SQL queries.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  email: schema.string({}, [\n    rules.unique({\n      table: 'users',\n      column: 'email',\n      where: {\n        tenant_id: 1,\n      },\n    })\n  ])\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT email FROM users WHERE email = ? AND tenant_id = ?\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrules.unique({\n  table: 'users',\n  column: 'email',\n  where: {\n    account_type: ['member', 'vip'],\n  },\n})\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT string FROM users\n  WHERE email = ?\n  AND account_type IN (?, ?)\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Shield Package\nDESCRIPTION: Command to install the @adonisjs/shield package using the ace CLI tool. This package provides security features for AdonisJS applications.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/shield\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Child Loggers in AdonisJS\nDESCRIPTION: Shows how to create and use child loggers, which inherit config and bindings from the parent logger but can have their own isolated instances and log levels.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport logger from '@adonisjs/core/services/logger'\n\nconst requestLogger = logger.child({ requestId: ctx.request.id() })\n\n// Child logger with different log level\nlogger.child({}, { level: 'warn' })\n```\n\n----------------------------------------\n\nTITLE: Creating a New AdonisJS Project via npm\nDESCRIPTION: Initializes a new AdonisJS project named 'hello-world' using the `npm init` command, which downloads and executes the `create-adonisjs` package. This command prompts the user for configuration options if no flags are provided.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n// title: npm\nnpm init adonisjs@latest hello-world\n```\n\n----------------------------------------\n\nTITLE: Implementing User Controller with Inertia in AdonisJS\nDESCRIPTION: Example of a controller method that fetches users and renders them using Inertia. Shows basic integration between AdonisJS backend and Inertia frontend rendering.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\n\nexport default class UsersController {\n  async index({ inertia }: HttpContext) {\n    const users = await User.all()\n\n    return inertia.render('users/index', { users })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring User Model with DbAccessTokensProvider in TypeScript\nDESCRIPTION: This snippet demonstrates how to set up a tokens provider with the User model using the DbAccessTokensProvider from the auth package. It shows the basic configuration and an expanded version with additional options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '@adonisjs/lucid/orm'\nimport { DbAccessTokensProvider } from '@adonisjs/auth/access_tokens'\n\nexport default class User extends BaseModel {\n  // ...rest of the model properties\n\n  static accessTokens = DbAccessTokensProvider.forModel(User)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class User extends BaseModel {\n  // ...rest of the model properties\n\n  static accessTokens = DbAccessTokensProvider.forModel(User, {\n    expiresIn: '30 days',\n    prefix: 'oat_',\n    table: 'auth_access_tokens',\n    type: 'auth_token',\n    tokenSecretLength: 40,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Extending Request Class with Custom Properties\nDESCRIPTION: Demonstrates how to extend the Request class using macros and getters, including TypeScript type definitions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request } from '@adonisjs/core/http'\n\nRequest.macro('property', function (this: Request) {\n  return value\n})\nRequest.getter('property', function (this: Request) {\n  return value\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '@adonisjs/core/http' {\n  export interface Request {\n    property: valueType\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JWT User Provider Interface in TypeScript\nDESCRIPTION: Creates a UserProvider interface for JWT authentication, defining methods to create and find users for the guard.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { symbols } from '@adonisjs/auth'\n\nexport type JwtGuardUser<RealUser> = {\n  getId(): string | number | BigInt\n  getOriginal(): RealUser\n}\n\nexport interface JwtUserProviderContract<RealUser> {\n  [symbols.PROVIDER_REAL_USER]: RealUser\n  createUserForGuard(user: RealUser): Promise<JwtGuardUser<RealUser>>\n  findById(identifier: string | number | BigInt): Promise<JwtGuardUser<RealUser> | null>\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Dynamic API Throttle Middleware\nDESCRIPTION: Applying the API throttle middleware to an API endpoint to implement dynamic rate limiting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport { apiThrottle } from '#start/limiter'\n\nrouter\n  .get('/api/repos/:id/stats', [RepoStatusController])\n  .use(apiThrottle)\n```\n\n----------------------------------------\n\nTITLE: Installing Vite Package in AdonisJS\nDESCRIPTION: Command to install and configure the @adonisjs/vite package and its dependencies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode ace add @adonisjs/vite\n```\n\n----------------------------------------\n\nTITLE: Creating a Fake HTTP Context with HttpContextFactory (TypeScript)\nDESCRIPTION: Demonstrates importing `HttpContextFactory` from `@adonisjs/core/factories/http` and using its `create()` method to instantiate a fake HTTP context object. This is useful for testing scenarios where a real HTTP request/response cycle is not available or desired, such as in unit tests for packages.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport { HttpContextFactory } from '@adonisjs/core/factories/http'\nconst ctx = new HttpContextFactory().create()\n```\n\n----------------------------------------\n\nTITLE: Redirecting in AdonisJS Routes\nDESCRIPTION: Shows how to use router.on().redirect() and router.on().redirectToPath() methods for redirecting requests to other routes or URLs.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\n// Redirect to a route\nrouter.on('/posts').redirect('/articles')\n\n// Redirect to a URL\nrouter.on('/posts').redirectToPath('https://medium.com/my-blog')\n```\n\n----------------------------------------\n\nTITLE: Managing Access Tokens\nDESCRIPTION: Examples of listing and managing access tokens, including rendering token information in templates and deleting tokens.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .get('/tokens', async ({ auth }) => {\n    return User.accessTokens.all(auth.user!)\n  })\n  .use(\n    middleware.auth({\n      guards: ['api'],\n    })\n  )\n```\n\nLANGUAGE: edge\nCODE:\n```\n@each(token in tokens)\n  <h2> {{ token.name }} </h2>\n  @if(token.isExpired())\n    <p> Expired </p>\n  @end\n\n  <p> Abilities: {{ token.abilities.join(',') }} </p>\n@end\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.accessTokens.delete(user, token.identifier)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Service - StripePaymentService - AdonisJS TypeScript\nDESCRIPTION: Implements the 'PaymentService' abstract class, providing concrete logic for 'charge' and 'refund' methods. This implementation uses Stripe for payment operations (details omitted for brevity). Must import the 'PaymentService' contract and is intended for registration in the IoC container.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { PaymentService } from '#contracts/payment_service'\n\nexport class StripePaymentService implements PaymentService {\n  async charge(amount: number) {\n    // Charge the amount using Stripe\n  }\n\n  async refund(amount: number) {\n    // Refund the amount using Stripe\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the JSON Body Parser - AdonisJS - TypeScript\nDESCRIPTION: Shows the structure for JSON parser configuration in AdonisJS: controls encoding, payload size limit, strictness, content types to match, and normalization of empty strings. The snippet assumes use within a BodyParser config file, with no external dependencies aside from optional encoding support via iconv-lite. The types array should enumerate content types parsed by the JSON parser; outputs a config object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\njson: {\n  encoding: 'utf-8',\n  limit: '1mb',\n  strict: true,\n  types: [\n    'application/json',\n    'application/json-patch+json',\n    'application/vnd.api+json',\n    'application/csp-report',\n  ],\n  convertEmptyStringsToNull: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Subdomains in AdonisJS\nDESCRIPTION: Demonstrates how to use dynamic subdomains in routing. This example captures a dynamic 'tenant' subdomain and uses it in the route handler.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n .group(() => {\n   router.get('users', ({ subdomains }) => {\n     return `Listing users for ${subdomains.tenant}`\n   })\n })\n .domain(':tenant.adonisjs.com')\n```\n\n----------------------------------------\n\nTITLE: Encrypting Different Data Types with AdonisJS\nDESCRIPTION: Shows examples of encrypting various JavaScript data types using the AdonisJS encryption service. The encryption service can handle objects, arrays, booleans, numbers, BigInt, and even Date objects which are converted to ISO strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/encryption.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport encryption from '@adonisjs/core/services/encryption'\n\n// Object\nencryption.encrypt({\n  id: 1,\n  fullName: 'virk',\n})\n\n// Array\nencryption.encrypt([1, 2, 3, 4])\n\n// Boolean\nencryption.encrypt(true)\n\n// Number\nencryption.encrypt(10)\n\n// BigInt\nencryption.encrypt(BigInt(10))\n\n// Data objects are converted to ISO string\nencryption.encrypt(new Date())\n```\n\n----------------------------------------\n\nTITLE: Simplifying Event Listening with emitter.listen in AdonisJS TypeScript\nDESCRIPTION: Exemplifies the simplification of binding listeners with 'emitter.listen', allowing attaching multiple listeners simultaneously to class-based events.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\nimport UserRegistered from '#events/user_registered'\n\nemitter.listen(UserRegistered, [\n  () => import('#listeners/send_verification_email'),\n  () => import('#listeners/register_with_payment_provider'),\n  () => import('#listeners/provision_account')\n])\n```\n\n----------------------------------------\n\nTITLE: Handling Nested Objects and Arrays in HTML Forms\nDESCRIPTION: This example demonstrates handling nested objects and arrays in HTML forms by using brackets to denote array items and object properties within form inputs.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n<select name=\"categories[]\">\n  <-- options go here -->\n</select>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"poll_options[0]\" />\n<input type=\"text\" name=\"poll_options[1]\" />\n<input type=\"text\" name=\"poll_options[2]\" />\n<input type=\"text\" name=\"poll_options[3]\" />\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<input type=\"text\" name=\"poll[title]\" />\n\n<input type=\"text\" name=\"poll[options][0]\" />\n<input type=\"text\" name=\"poll[options][1]\" />\n<input type=\"text\" name=\"poll[options][2]\" />\n<input type=\"text\" name=\"poll[options][3]\" />\n```\n\n----------------------------------------\n\nTITLE: Creating Test HTTP Context\nDESCRIPTION: Shows how to create a dummy HTTP context for testing purposes using the testUtils service, which provides a way to simulate a context without an actual HTTP request.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport testUtils from '@adonisjs/core/services/test_utils'\n\nconst ctx = testUtils.createHttpContext()\n```\n\n----------------------------------------\n\nTITLE: Testing Inertia.js Endpoints in AdonisJS with Japa\nDESCRIPTION: Example of a Japa test for an Inertia.js endpoint, verifying the correct HTTP status, component name, and props data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\ntest('returns correct data', async ({ client }) => {\n  const response = await client.get('/home').withInertia()\n\n  response.assertStatus(200)\n  response.assertInertiaComponent('home/main')\n  response.assertInertiaProps({ user: { name: 'julien' } })\n})\n```\n\n----------------------------------------\n\nTITLE: Shutdown Method Implementation\nDESCRIPTION: Example of implementing the shutdown method for cleanup during graceful application shutdown.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class AppProvider {\n  async shutdown() {\n    // perform the cleanup\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Node Environment States in TypeScript\nDESCRIPTION: Demonstrates various methods to check the application's node environment and its states using environment properties.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\n// Is in production\napp.inProduction\napp.nodeEnvironment === 'production'\n\n// Is in development\napp.inDev\napp.nodeEnvironment === 'development'\n\n// Is in the test\napp.inTest\napp.nodeEnvironment === 'test'\n```\n\n----------------------------------------\n\nTITLE: Using AdonisJS Validator Standalone Outside HTTP Requests (TypeScript)\nDESCRIPTION: Shows how to perform validation outside the context of an HTTP request using the `validator.validate` method from `@adonisjs/core/legacy/validator`. It requires explicitly providing the `schema` and the `data` object to be validated. Manual exception handling is necessary for validation failures.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { validator, schema } from '@adonisjs/core/legacy/validator'\n\nawait validator.validate({\n  schema: schema.create({\n    // ... define schema\n  }),\n  data: {\n    email: 'virk@adonisjs.com',\n    password: 'secret'\n  }\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Route URLs with the route Helper\nDESCRIPTION: Using the route helper to generate URLs based on route identifiers. This example demonstrates linking to a post detail page by passing the post ID as a parameter.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_1\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{ route('posts.show', [post.id]) }}\">\n  View post\n</a>\n```\n\n----------------------------------------\n\nTITLE: Controller with Dependency Injection\nDESCRIPTION: Example of using dependency injection in controllers with UserService\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class UserService {\n  all() {\n    // return users from db\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport UserService from '#services/user_service'\n\n@inject()\nexport default class UsersController {\n  constructor(\n    private userService: UserService\n  ) {}\n\n  index() {\n    return this.userService.all()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Static Middleware in AdonisJS Kernel (TypeScript)\nDESCRIPTION: Adds the @adonisjs/static middleware to the HTTP server's middleware stack in the start/kernel.ts file. This registration intercepts HTTP requests to serve static files from the public directory. Middleware must be properly added to the stack, following other server middlewares, and requires the @adonisjs/static package to be installed. No direct inputs/outputs besides altered HTTP request handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nserver.use([\n  () => import('@adonisjs/static/static_middleware')\n])\n```\n\n----------------------------------------\n\nTITLE: Example .env File for AdonisJS Development Setup - dotenv\nDESCRIPTION: Shows a sample .env file containing commonly needed environment variables for development, such as PORT, HOST, NODE_ENV, and secrets like APP_KEY. Parsed automatically by AdonisJS env module. No dependencies beyond AdonisJS core. Required at project root.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_12\n\nLANGUAGE: dotenv\nCODE:\n```\n// title: .env\nPORT=3333\nHOST=0.0.0.0\nNODE_ENV=development\nAPP_KEY=sH2k88gojcp3PdAJiGDxof54kjtTXa3g\nSESSION_DRIVER=cookie\nCACHE_VIEWS=false\n```\n\n----------------------------------------\n\nTITLE: Using Ally Provider Instances\nDESCRIPTION: Examples of using different OAuth provider instances in route handlers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/github/redirect', ({ ally }) => {\n  // GitHub driver instance\n  const gh = ally.use('github')\n})\n\nrouter.get('/twitter/redirect', ({ ally }) => {\n  // Twitter driver instance\n  const twitter = ally.use('twitter')\n})\n\n// You could also dynamically retrieve the driver\nrouter.get('/:provider/redirect', ({ ally, params }) => {\n  const driverInstance = ally.use(params.provider)\n}).where('provider', /github|twitter/)\n```\n\n----------------------------------------\n\nTITLE: Configuring Dot File Handling for Static Files (TypeScript)\nDESCRIPTION: Defines how requests for dot files inside the public directory are handled by the static middleware. Options include allowing access, denying with a 403 status, or pretending the file does not exist (404). This setting helps maintain security and desired visibility of dotfiles. Placed inside config/static.ts for use by @adonisjs/static.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n{\n  dotFiles: 'ignore'\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Redis Reconnection Attempts via Events - TypeScript\nDESCRIPTION: Subscribes to 'reconnecting' and 'subscriber:reconnecting' events, accessing the wait time for each reconnection attempt. Enables monitoring and logging of reconnection strategies in AdonisJS Redis usage. Requires '@adonisjs/redis/services/main', with callbacks receiving a 'waitTime' parameter.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_28\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('reconnecting', ({ waitTime }) => {\\n    console.log(waitTime)\\n  })\\n  connection.on('subscriber:reconnecting', ({ waitTime }) => {\\n    console.log(waitTime)\\n  })\\n})\n```\n\n----------------------------------------\n\nTITLE: Switching Redis Connections in AdonisJS\nDESCRIPTION: Demonstrates how to switch between different Redis connections in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\n\n// Get connection instance\nconst redisMain = redis.connection('main')\n\nawait redisMain.set('username', 'virk')\nconst username = await redisMain.get('username')\n```\n\n----------------------------------------\n\nTITLE: Adding User Provider to JWT Guard in TypeScript\nDESCRIPTION: Updates the JwtGuard class to accept a user provider as a constructor parameter for user lookup during authentication.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport class JwtGuard<UserProvider extends JwtUserProviderContract<unknown>>\n  implements GuardContract<UserProvider[typeof symbols.PROVIDER_REAL_USER]>\n{\n  #userProvider: UserProvider\n\n  constructor(\n    userProvider: UserProvider\n  ) {\n    this.#userProvider = userProvider\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Model-Scoped Query Builder in Lucid ORM\nDESCRIPTION: Example of using the query builder scoped to a specific model to find a user by username.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport User from '#models/user'\n\nconst user = await User.query().where('username', 'rlanz').first()\n```\n\n----------------------------------------\n\nTITLE: Using alphaNum Validation Rule in AdonisJS\nDESCRIPTION: This example ensures that a string field contains only alphanumeric characters, with optional allowance for spaces, dashes, and underscores. It is utilized in fields that have the string schema type. Requires @ioc/Adonis/Core/Validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.alphaNum(),\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.alphaNum({\n      allow: ['space', 'underscore', 'dash']\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class-based Events in AdonisJS TypeScript\nDESCRIPTION: Explains the method of embodying event identifiers and their data within classes, enhancing modularity and reuse, utilized through constructors and instance properties.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n// title: app/events/user_registered.ts\nimport { BaseEvent } from '@adonisjs/core/events'\nimport User from '#models/user'\n\nexport default class UserRegistered extends BaseEvent {\n  constructor(public user: User) {\n    super()\n  } \n}\n```\n\n----------------------------------------\n\nTITLE: Creating Class-based Listeners in AdonisJS TypeScript\nDESCRIPTION: Details the procedure to construct class-based listeners, promoting better code structure and testing. Listener classes are organized within the 'app/listeners' directory.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport User from '#models/user'\n\nexport default class SendVerificationEmail {\n  handle(user: User) {\n    // Send email\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Migration with AdonisJS CLI\nDESCRIPTION: Command to generate a new database migration file using the AdonisJS CLI.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:migration users\n```\n\n----------------------------------------\n\nTITLE: Vite Configuration Setup\nDESCRIPTION: Configuration for Vite bundler including entrypoints and reload patterns.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport adonisjs from '@adonisjs/vite/client'\n\nexport default defineConfig({\n  plugins: [\n    adonisjs({\n      entrypoints: ['resources/js/app.js'],\n      reload: ['resources/views/**/*.edge'],\n    }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Authentication Logic in JwtGuard for AdonisJS\nDESCRIPTION: This code implements the authenticate method in the JwtGuard class. It reads the JWT token from the authorization header, verifies it, and fetches the corresponding user.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  symbols,\n  errors\n} from '@adonisjs/auth'\n\nexport class JwtGuard<UserProvider extends JwtUserProviderContract<unknown>>\n  implements GuardContract<UserProvider[typeof symbols.PROVIDER_REAL_USER]>\n{\n  async authenticate(): Promise<UserProvider[typeof symbols.PROVIDER_REAL_USER]> {\n    if (this.authenticationAttempted) {\n      return this.getUserOrFail()\n    }\n    this.authenticationAttempted = true\n\n    const authHeader = this.#ctx.request.header('authorization')\n    if (!authHeader) {\n      throw new errors.E_UNAUTHORIZED_ACCESS('Unauthorized access', {\n        guardDriverName: this.driverName,\n      })\n    }\n\n    const [, token] = authHeader.split('Bearer ')\n    if (!token) {\n      throw new errors.E_UNAUTHORIZED_ACCESS('Unauthorized access', {\n        guardDriverName: this.driverName,\n      })\n    }\n\n    const payload = jwt.verify(token, this.#options.secret)\n    if (typeof payload !== 'object' || !('userId' in payload)) {\n      throw new errors.E_UNAUTHORIZED_ACCESS('Unauthorized access', {\n        guardDriverName: this.driverName,\n      })\n    }\n\n    const providerUser = await this.#userProvider.findById(payload.userId)\n    if (!providerUser) {\n      throw new errors.E_UNAUTHORIZED_ACCESS('Unauthorized access', {\n        guardDriverName: this.driverName,\n      })\n    }\n\n    this.user = providerUser.getOriginal()\n    return this.getUserOrFail()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Authentication Information\nDESCRIPTION: Using the auth object to check if a user is authenticated and display user information. This example shows a simple authentication check within a template.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_10\n\nLANGUAGE: edge\nCODE:\n```\n@if(auth.isAuthenticated)\n  <p> {{ auth.user.email }} </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard Params in AdonisJS Routes\nDESCRIPTION: This example shows how to use wildcard parameters in AdonisJS routes to capture multiple URI segments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/docs/:category/*', ({ params }) => {\n  console.log(params.category)\n  console.log(params['*'])\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Error Reporter in VineJS (TypeScript)\nDESCRIPTION: Shows how to register a custom error reporter for VineJS within an AdonisJS preload file (`start/validator.ts`). It assigns a factory function `() => new JSONAPIErrorReporter()` to `vine.errorReporter`. This ensures that whenever validation fails, the specified custom reporter (`JSONAPIErrorReporter` in this case, assumed to be defined elsewhere) is used to format the errors.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// title: start/validator.ts\nimport vine, { SimpleMessagesProvider } from '@vinejs/vine'\nimport { JSONAPIErrorReporter } from '../app/validation_reporters.js'\n\nvine.errorReporter = () => new JSONAPIErrorReporter()\n```\n```\n\n----------------------------------------\n\nTITLE: Binding Listener Classes to Events in AdonisJS TypeScript\nDESCRIPTION: Describes binding process of class-based listeners to particular events within the 'start/events.ts' file, enabling efficient event handling within structured classes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n// title: start/events.ts\nimport emitter from '@adonisjs/core/services/emitter'\nimport SendVerificationEmail from '#listeners/send_verification_email'\n\nemitter.on('user:registered', [SendVerificationEmail, 'handle'])\n```\n\n----------------------------------------\n\nTITLE: Specifying Allowed Headers in CORS\nDESCRIPTION: Example of configuring specific headers to allow in CORS preflight requests using an array.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n{\n  headers: [\n    'Content-Type',\n    'Accept',\n    'Cookie'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Authorization Checks with @can Tag\nDESCRIPTION: Using the @can tag to perform authorization checks in templates based on abilities or policies. This example shows checking if a user can edit a post.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_20\n\nLANGUAGE: edge\nCODE:\n```\n@can('editPost', post)\n  {{-- Can edit post --}}\n@end\n\n@can('PostPolicy.edit', post)\n  {{-- Can edit post --}}\n@end\n```\n\n----------------------------------------\n\nTITLE: Restricting Custom Rule Usage to String Schema Types (TypeScript)\nDESCRIPTION: Demonstrates enforcing a custom validation rule ('camelCase') to only apply to string fields by checking the 'subtype' in the compile callback and throwing an error otherwise. Prevents misuse and provides runtime errors if the rule is mistakenly attached to another data type. Dependencies: AdonisJS validator. Key parameters: 'type', 'subtype'. Input: options and schema field type; Output: error thrown for incompatible usage.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nvalidator.rule(\n  'camelCase', // rule name\n  async () => {}, // validation callback\n  (options, type, subtype) => {\n    if (subtype !== 'string') {\n      throw new Error('\"camelCase\" rule can only be used with a string schema type')\n    }\n\n    return {\n      compiledOptions: {},\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Accessing Event Paths in AdonisJS\nDESCRIPTION: Illustrates how to use the eventsPath method to get the path to files in the events directory. It can return the path to a specific file or the directory itself.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\napp.eventsPath('user_created.ts')\n// /project_root/app/events/user_created.ts\n\napp.eventsPath()\n// /project_root/app/events\n```\n\n----------------------------------------\n\nTITLE: Registering Shield Middleware\nDESCRIPTION: TypeScript code to register the shield middleware in the start/kernel.ts file. This middleware applies security protections to all applicable routes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nrouter.use([() => import('@adonisjs/shield/shield_middleware')])\n```\n\n----------------------------------------\n\nTITLE: Using flashExcept to exclude specific form data\nDESCRIPTION: The flashExcept method saves all request data except for the specified fields to flash messages, useful for excluding sensitive data like passwords.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\n// title: flashExcept\n/**\n * Short hand for flashing selected \n * properties from request data\n */\nsession.flashExcept(['password'])\n\n/**\n * Same as \"flashExcept\"\n */\nsession.flash(request.except(['password']))\n```\n\n----------------------------------------\n\nTITLE: Implementing Guest Middleware with AdonisJS Routes\nDESCRIPTION: Defines a route in AdonisJS with guest middleware applied, ensuring only non-authenticated users can access the login page, preventing multiple sessions on one device.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport { middleware } from '#start/kernel'\n\nrouter\n  .get('/login', () => {})\n  .use(middleware.guest())\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection in AdonisJS Custom Commands\nDESCRIPTION: Demonstrate how to use dependency injection in custom Ace commands by injecting a UserService into lifecycle methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/creating_commands.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport { BaseCommand } from '@adonisjs/core/ace'\nimport UserService from '#services/user_service'\n\nexport default class GreetCommand extends BaseCommand {\n  @inject()\n  async prepare(userService: UserService) {\n  }\n\n  @inject()\n  async interact(userService: UserService) {\n  }\n  \n  @inject()\n  async run(userService: UserService) {\n  }\n\n  @inject()\n  async completed(userService: UserService) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Auth Logged Out Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session_auth:logged_out' event which is dispatched after the user has been logged out, providing guard name, session ID, and user information if available.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session_auth:logged_out', (event) => {\n  console.log(event.guardName)\n  console.log(event.sessionId)\n\n  /**\n   * The value of the user will be null when logout is called\n   * during a request where no user was logged in in the first place.\n   */\n  console.log(event.user)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Providers in AdonisRC\nDESCRIPTION: Examples of registering service providers, including environment-specific providers and lazy loading.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    () => import('@adonisjs/core/providers/app_provider'),\n    () => import('@adonisjs/core/providers/http_provider'),\n    () => import('@adonisjs/core/providers/hash_provider'),\n    () => import('./providers/app_provider.js'),\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    {\n      file: () => import('./providers/app_provider.js'),\n      environment: [\n        'web',\n        'console',\n        'test'\n      ]\n    },\n    {\n      file: () => import('@adonisjs/core/providers/http_provider'),\n      environment: [\n        'web'\n      ]\n    },\n    () => import('@adonisjs/core/providers/hash_provider'),\n    () => import('@adonisjs/core/providers/app_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in Controller Method\nDESCRIPTION: Shows how to access the HTTP context in a controller method by receiving it as the first parameter and using TypeScript's type system for proper type hinting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class HomeController {\n  async index({ request, response }: HttpContext) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering and Resolving Container Bindings in TypeScript\nDESCRIPTION: Demonstrates how to register a container binding using container.bind and resolve it using container.make.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\nclass MyFakeCache {\n  get(key: string) {\n    return `${key}!`\n  }\n}\n\napp.container.bind('cache', function () {\n  return new MyCache()\n})\n\nconst cache = await app.container.make('cache')\nconsole.log(cache.get('foo')) // returns foo!\n```\n\n----------------------------------------\n\nTITLE: Applying email Validation Rule in AdonisJS\nDESCRIPTION: Enforces a string field to be a properly formatted email address, with customizable validation options. Additional normalization can be applied using the related normalization rule. Requires @ioc/Adonis/Core/Validator and validatorjs.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  email: schema.string([\n    rules.email()\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  email: schema.string([\n    rules.email({\n      ignoreMaxLength: true,\n      allowIpDomain: true,\n      domainSpecificValidation: true,\n    })\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  email: schema.string([\n    rules.email(),\n    rules.normalizeEmail({\n      allLowercase: true,\n      gmailRemoveDots: true,\n      gmailRemoveSubaddress: true,\n    }),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Length Validation Rules in AdonisJS\nDESCRIPTION: Implements maximum and minimum length validation for strings and arrays.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string({}, [\n    rules.maxLength(40)\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering with Auth in Edge Template\nDESCRIPTION: This Edge template snippet shows how to conditionally render content based on the user's authentication status. It demonstrates accessing the auth object in templates.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n@if(auth.isAuthenticated)\n  <p> Hello {{ auth.user.email }} </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Configuring Status Pages for Error Codes\nDESCRIPTION: Implementation showing how to configure status pages for different HTTP error code ranges\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/exception_handling.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StatusPageRange, StatusPageRenderer } from '@adonisjs/http-server/types'\n\nexport default class HttpExceptionHandler extends ExceptionHandler {\n  protected statusPages: Record<StatusPageRange, StatusPageRenderer> = {\n    '404': (_, { view }) => view.render('errors/not-found'),\n    '500..599': (_, { view }) => view.render('errors/server-error')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Browser Test Implementation for Testing Home Page\nDESCRIPTION: Example test file showing how to use the visit helper to open a page and assert its contents using Japa's browser client assertions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// title: tests/browser/pages/home.spec.ts\nimport { test } from '@japa/runner'\n\ntest.group('Home page', () => {\n  test('see welcome message', async ({ visit }) => {\n    const page = await visit('/')\n    await page.assertTextContains('body', 'It works!')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining BodyParser Configuration - AdonisJS - TypeScript\nDESCRIPTION: Demonstrates the structure for defining the BodyParser middleware configuration in AdonisJS using the defineConfig helper from '@adonisjs/core/bodyparser'. This configuration controls which HTTP methods are parsed and provides initial, commented out configuration sections for each supported parser (form, json, multipart, raw). No external dependencies are required other than AdonisJS core packages. Inputs include optional parser configuration objects and allowed HTTP methods; output is a configuration object to be used by the middleware.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/core/bodyparser'\n\nexport const defineConfig({\n  allowedMethods: ['POST', 'PUT', 'PATCH', 'DELETE'],\n\n  form: {\n    // settings for parsing HTML forms\n  },\n\n  json: {\n    // Settings for parsing JSON body\n  },\n\n  multipart: {\n    // Settings for multipart parser\n  },\n\n  raw: {\n    // Settings for a raw text parser\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Facebook OAuth Configuration in TypeScript\nDESCRIPTION: Illustrates Facebook OAuth settings using services.facebook in config/ally.ts. Inputs clientId, clientSecret, callbackUrl; defines Facebook-specific scopes and user fields. Outputs a configuration object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_16\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  facebook: services.facebook({\n    clientId: '',\n    clientSecret: '',\n    callbackUrl: '',\n\n    // Facebook specific\n    scopes: ['email', 'user_photos'],\n    userFields: ['first_name', 'picture', 'email'],\n    display: '',\n    authType: '',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Headers as Boolean\nDESCRIPTION: Example of using a boolean value to allow or disallow all headers in CORS configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n{\n  headers: true\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Stores\nDESCRIPTION: Defines the configuration for various session stores including cookie, file, redis, and dynamodb to manage sessions in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport { defineConfig, stores } from '@adonisjs/session'\n\nexport default defineConfig({\n  store: env.get('SESSION_DRIVER'),\n\n  stores: {\n    cookie: stores.cookie(),\n\n    file: stores.file({\n      location: app.tmpPath('sessions')\n    }),\n\n    redis: stores.redis({\n      connection: 'main'\n    })\n\n    dynamodb: stores.dynamodb({\n      clientConfig: {}\n    }),\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Bouncer Policies with Codemods in AdonisJS\nDESCRIPTION: Using the codemods API to register Bouncer authorization policies to the policies/main.ts file with error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_24\n\nLANGUAGE: ts\nCODE:\n```\nconst codemods = await command.createCodemods()\n\ntry {\n  await codemods.registerPolicies([\n    {\n      name: 'PostPolicy',\n      path: '#policies/post_policy'\n    }\n  ])\n} catch (error) {\n  console.error('Unable to register policy')\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Redis Usage in AdonisJS\nDESCRIPTION: Example of basic Redis operations (set and get) in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\n\nawait redis.set('username', 'virk')\nconst username = await redis.get('username')\n```\n\n----------------------------------------\n\nTITLE: Testing Avatar Update with Fake Drive Disk - AdonisJS - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to use the fakes API from AdonisJS Drive to simulate interactions with a disk named 'spaces' during a functional user update test. It leverages the '@japa/runner' test runner, the main AdonisJS Drive service, and a file generator to prepare an in-memory PNG file. The snippet demonstrates setting up the test, faking and restoring the disk, generating a test user and file, performing a HTTP PUT request to upload an avatar, and asserting the file's existence in the fake disk. Dependencies include AdonisJS Drive, '@japa/runner', user factories, and '@poppinss/file-generator'. The test expects the system to handle user authentication and avatar management, and cleans up fake files automatically after each test. Expected input is a PUT request updating the user's 'avatar', and the output is a successful replacement of the avatar with the fake disk storing the file. The snippet is constrained to work only in a testing environment and makes no permanent changes to storage.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/drive.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n// title: tests/functional/users/update.spec.ts\nimport { test } from '@japa/runner'\nimport drive from '@adonisjs/drive/services/main'\nimport fileGenerator from '@poppinss/file-generator'\n\ntest.group('Users | update', () => {\n  test('should be able to update my avatar', async ({ client, cleanup }) => {\n    /**\n     * Fake the \"spaces\" disk and restore the fake\n     * after the test finishes\n     */\n    const fakeDisk = drive.fake('spaces')\n    cleanup(() => drive.restore('spaces'))\n\n    /**\n     * Create user to perform the login and update\n     */\n    const user = await UserFactory.create()\n\n    /**\n     * Generate a fake in-memory png file with size of\n     * 1mb\n     */\n    const { contents, mime, name } = await fileGenerator.generatePng('1mb')\n\n    /**\n     * Make put request and send the file\n     */\n    await client\n      .put('me')\n      .file('avatar', contents, {\n        filename: name,\n        contentType: mime,\n      })\n      .loginAs(user)\n\n    /**\n     * Assert the file exists\n     */\n    fakeDisk.assertExists(user.avatar)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Directories in AdonisRC\nDESCRIPTION: Example configuration for specifying custom directory paths in the AdonisJS application structure.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  directories: {\n    config: 'config',\n    commands: 'commands',\n    contracts: 'contracts',\n    public: 'public',\n    providers: 'providers',\n    languageFiles: 'resources/lang',\n    migrations: 'database/migrations',\n    seeders: 'database/seeders',\n    factories: 'database/factories',\n    views: 'resources/views',\n    start: 'start',\n    tmp: 'tmp',\n    tests: 'tests',\n    httpControllers: 'app/controllers',\n    models: 'app/models',\n    services: 'app/services',\n    exceptions: 'app/exceptions',\n    mails: 'app/mails',\n    middleware: 'app/middleware',\n    policies: 'app/policies',\n    validators: 'app/validators',\n    events: 'app/events',\n    listeners: 'app/listeners',\n    stubs: 'stubs',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Request URLs in AdonisJS\nDESCRIPTION: Shows how to access and manipulate request URLs using url() and completeUrl() methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/users', async ({ request }) => {\n  /*\n   * URL: /users?page=1&limit=20\n   * url: /users\n   */\n  request.url()\n\n  /*\n   * URL: /users?page=1&limit=20\n   * url: /users?page=1&limit=20\n   */\n  request.url(true) // returns query string\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/users', async ({ request }) => {\n  request.completeUrl()\n  request.completeUrl(true) // returns query string\n})\n```\n\n----------------------------------------\n\nTITLE: Database Health Check Configuration\nDESCRIPTION: Implementation of database health checks using the DbCheck class from @adonisjs/lucid package.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport { DbCheck } from '@adonisjs/lucid/database'\nimport { HealthChecks, DiskSpaceCheck, MemoryHeapCheck } from '@adonisjs/core/health'\n\nexport const healthChecks = new HealthChecks().register([\n  new DiskSpaceCheck(),\n  new MemoryHeapCheck(),\n  new DbCheck(db.connection()),\n])\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration for Serving Static Assets in AdonisJS\nDESCRIPTION: Nginx configuration block for serving static assets from an AdonisJS application with aggressive caching.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_8\n\nLANGUAGE: nginx\nCODE:\n```\nlocation ~ \\.(jpg|png|css|js|gif|ico|woff|woff2) {\n  root <PATH_TO_ADONISJS_APP_PUBLIC_DIRECTORY>;\n  sendfile on;\n  sendfile_max_chunk 2m;\n  add_header Cache-Control \"public\";\n  expires 365d;\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Database Connection Count Check in TypeScript\nDESCRIPTION: Configuration for monitoring database connection counts with PostgreSQL and MySQL, including threshold settings for warnings and failures.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport db from '@adonisjs/lucid/services/db'\nimport { DbCheck, DbConnectionCountCheck } from '@adonisjs/lucid/database'\nimport { HealthChecks, DiskSpaceCheck, MemoryHeapCheck } from '@adonisjs/core/health'\n\nexport const healthChecks = new HealthChecks().register([\n  new DiskSpaceCheck(),\n  new MemoryHeapCheck(),\n  new DbCheck(db.connection()),\n  new DbConnectionCountCheck(db.connection())\n])\n```\n\n----------------------------------------\n\nTITLE: Binding Values Directly - AdonisJS Container - TypeScript\nDESCRIPTION: Illustrates direct value binding to the IoC container using the 'bindValue' method. This registers a pre-initialized 'MyFakeCache' instance under the 'cache' key. Useful for global single-instance services and testing. Requires initialized class instance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.app.container.bindValue('cache', new MyFakeCache())\n```\n\n----------------------------------------\n\nTITLE: Validating String Environment Variables with Restrictions - TypeScript\nDESCRIPTION: Illustrates different ways to validate string environment variables using AdonisJS Env.schema.string, including required, optional, and conditionally optional variants. Can enforce formatting (e.g., host, url, email), and optional variants depend on environment or custom logic. Accepts raw string input and produces either validated string or undefined/null according to constraints.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  APP_KEY: Env.schema.string()\n}\n\n// Mark it as optional\n{\n  APP_KEY: Env.schema.string.optional()\n}\n\n// Mark it as optional with a condition\n{\n  APP_KEY: Env.schema.string.optionalWhen(process.env.NODE_ENV === 'production')\n}\n```\n\n----------------------------------------\n\nTITLE: Using Edge tags for flash and validation messages\nDESCRIPTION: Shows how to use specialized Edge tags to display flash messages and validation errors in templates. These tags provide convenient access to flash data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_26\n\nLANGUAGE: edge\nCODE:\n```\n{{-- Read any flash message by key --}}\n@flashMessage('key')\n  {{ inspect($message) }}\n@end\n\n{{-- Read generic errors --}}\n@error('key')\n  {{ inspect($message) }}\n@end\n\n{{-- Read validation errors --}}\n@inputError('key')\n  {{ inspect($messages) }}\n@end\n```\n\n----------------------------------------\n\nTITLE: Defining Static Types for Bindings - AdonisJS Container - TypeScript\nDESCRIPTION: Shows how to extend TypeScript typings for container bindings using declaration merging. Associates a binding key ('cache') with its class type on the 'ContainerBindings' interface, enhancing type safety. The code should be placed in globally accessible type definition files, such as service provider files or 'types/container.ts'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\ndeclare module '@adonisjs/core/types' {\n  interface ContainerBindings {\n    cache: MyFakeCache\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Preparing User Model for Basic Authentication in AdonisJS\nDESCRIPTION: This snippet demonstrates how to prepare the Lucid User model for basic authentication. It imports the `withAuthFinder` mixin and the `hash` service. The `withAuthFinder` mixin is applied to the User model using `compose`, configured with the hashing service (`scrypt`), the unique identifier fields (`uids: ['email']`), and the password column name (`passwordColumnName: 'password'`). This enables the model to verify user credentials during the basic authentication process.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/basic_auth_guard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { DateTime } from 'luxon'\nimport { compose } from '@adonisjs/core/helpers'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\n// highlight-start\nimport hash from '@adonisjs/core/services/hash'\nimport { withAuthFinder } from '@adonisjs/auth/mixins/lucid'\n// highlight-end\n\n// highlight-start\nconst AuthFinder = withAuthFinder(() => hash.use('scrypt'), {\n  uids: ['email'],\n  passwordColumnName: 'password',\n})\n// highlight-end\n\n// highlight-start\nexport default class User extends compose(BaseModel, AuthFinder) {\n  // highlight-end\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column()\n  declare fullName: string | null\n\n  @column()\n  declare email: string\n\n  @column()\n  declare password: string\n\n  @column.dateTime({ autoCreate: true })\n  declare createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: DateTime\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Using Typed Props in React Component with Inertia.js and TypeScript\nDESCRIPTION: Example of accessing strongly-typed props in a React component using InferPageProps type from AdonisJS Inertia.js integration, providing IntelliSense for both controller-specific and shared props.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// file: inertia/pages/users/index.tsx\n\nimport type { InferPageProps } from '@adonisjs/inertia/types'\n\nexport function UsersPage(\n  props: InferPageProps<UsersController, 'index'>\n) {\n  props.appName\n  //     ^? string\n  props.propsSharedFromAMiddleware\n  //     ^? number\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies in AdonisJS (TypeScript)\nDESCRIPTION: Illustrates how to clear a specific cookie using the response object in an AdonisJS route handler.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.delete('cart', async ({ request, response }) => {\n  response.clearCookie('cart_items')\n})\n```\n\n----------------------------------------\n\nTITLE: Streaming Content in AdonisJS Responses (TypeScript)\nDESCRIPTION: Shows how to use the response.stream method to pipe a stream to the response, including error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ response }) => {\n  const image = fs.createReadStream('./some-file.jpg')\n  response.stream(image)\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst image = fs.createReadStream('./some-file.jpg')\n\nresponse.stream(image, () => {\n  const message = 'Unable to serve file. Try again'\n  const status = 400\n\n  return [message, status]\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Command with Application Start in AdonisJS\nDESCRIPTION: This snippet shows how to create a command in AdonisJS that starts the application before running. It demonstrates the use of the 'startApp' option.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application_lifecycle.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  static options = {\n    startApp: true\n  }\n  \n  async run() {\n    console.log(this.app.isReady) // true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Edge.js in AdonisJS\nDESCRIPTION: This command installs and configures Edge.js in an AdonisJS project.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add edge\n```\n\n----------------------------------------\n\nTITLE: Redis Pub/Sub Subscription in AdonisJS\nDESCRIPTION: Example of subscribing to a Redis channel in AdonisJS using the @adonisjs/redis package.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\n\nredis.subscribe('user:add', function (message) {\n  console.log(message)\n})\n```\n\n----------------------------------------\n\nTITLE: Using JWT Guard for Authentication in AdonisJS Routes\nDESCRIPTION: This example demonstrates how to use the JWT guard for authentication in AdonisJS routes, including generating and verifying JWT tokens.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nimport router from '@adonisjs/core/services/router'\nimport { middleware } from './kernel.js'\n\nrouter.post('login', async ({ request, auth }) => {\n  const { email, password } = request.all()\n  const user = await User.verifyCredentials(email, password)\n\n  return await auth.use('jwt').generate(user)\n})\n\nrouter\n  .get('/', async ({ auth }) => {\n    return auth.getUserOrFail()\n  })\n  .use(middleware.auth())\n```\n\n----------------------------------------\n\nTITLE: Customizing Guards in Guest Middleware\nDESCRIPTION: Modifies the guest middleware to apply on specific guards such as 'web' and 'admin_web', specifying multiple authentication checks for user login status in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .get('/login', () => {})\n  .use(middleware.guest({\n    guards: ['web', 'admin_web']\n  }))\n```\n\n----------------------------------------\n\nTITLE: Handling E_BAD_CSRF_TOKEN Exception in TypeScript\nDESCRIPTION: Example of importing and checking for CSRF token validation failure exception. This exception is raised when a form using CSRF protection is submitted without the CSRF token or with an invalid token.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as shieldErrors } from '@adonisjs/shield'\nif (error instanceof shieldErrors.E_BAD_CSRF_TOKEN) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Transport for Transmit\nDESCRIPTION: Example configuration for using Redis as a transport layer for syncing events across multiple servers or instances.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport env from '#start/env'\nimport { defineConfig } from '@adonisjs/transmit'\nimport { redis } from '@adonisjs/transmit/transports'\n\nexport default defineConfig({\n  transport: {\n    driver: redis({\n      host: env.get('REDIS_HOST'),\n      port: env.get('REDIS_PORT'),\n      password: env.get('REDIS_PASSWORD'),\n      keyPrefix: 'transmit',\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Auth Exceptions in AdonisJS Global Exception Handler\nDESCRIPTION: Shows how to handle the E_INVALID_CREDENTIALS exception in the global exception handler for custom error responses.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/verifying_user_credentials.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/auth'\nimport { HttpContext, ExceptionHandler } from '@adonisjs/core/http'\n\nexport default class HttpExceptionHandler extends ExceptionHandler {\n  protected debug = !app.inProduction\n  protected renderStatusPages = app.inProduction\n\n  async handle(error: unknown, ctx: HttpContext) {\n    if (error instanceof errors.E_INVALID_CREDENTIALS) {\n      return ctx\n        .response\n        .status(error.status)\n        .send(error.getResponseMessage(error, ctx))\n    }\n\n    return super.handle(error, ctx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors on Redis Cluster Nodes - TypeScript\nDESCRIPTION: Listens for the 'node:error' event, receiving both the error object and the failing node's address when a connection to a cluster node fails. Useful for logging detailed failure information in distributed Redis environments. Dependencies: '@adonisjs/redis/services/main'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_32\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('node:error', ({ error, address }) => {\\n    console.log(error, address)\\n  })\\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Events with Event Faking in TypeScript\nDESCRIPTION: Demonstrates how to test event emissions using the event faking functionality in AdonisJS tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\nimport UserRegistered from '#events/user_registered'\n\ntest.group('User signup', () => {\n  test('create a user account', async ({ client, cleanup }) => {\n    const events = emitter.fake()\n    cleanup(() => {\n      emitter.restore()\n    })\n  \n    await client\n      .post('signup')\n      .form({\n        email: 'foo@bar.com',\n        password: 'secret',\n      })\n  })\n  \n  events.assertEmitted(UserRegistered)\n})\n```\n\n----------------------------------------\n\nTITLE: Attaching Additional Rules to String Validation in AdonisJS (TypeScript)\nDESCRIPTION: This example shows attaching multiple rules to string schema validation, including checking for alphabetic content, minimum and maximum length, trimming, and escaping. Rules are provided in an array as the second argument. Requires schema and rules imports from AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  title: schema.string([\\n    rules.alpha(),\\n    rules.minLength(10),\\n    rules.maxLength(200),\\n    rules.trim(),\\n    rules.escape(),\\n  ])\\n}\n```\n\n----------------------------------------\n\nTITLE: Drive Service Usage Examples\nDESCRIPTION: Examples of using the Drive service for various file operations including disk selection and file management.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/drive.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport drive from '@adonisjs/drive/services/main'\n\ndrive instanceof DriveManager // true\n\n/**\n * Returns instance of the default disk\n */\nconst disk = drive.use()\n\n/**\n * Returns instance of a disk named r2\n */\nconst disk = drive.use('r2')\n\n/**\n * Returns instance of a disk named spaces\n */\nconst disk = drive.use('spaces')\n```\n\n----------------------------------------\n\nTITLE: Configuring HSTS in AdonisJS Shield (TypeScript)\nDESCRIPTION: This snippet demonstrates how to configure the Strict-Transport-Security (HSTS) header in the AdonisJS Shield package. It sets the header to be enabled, with a max age of 180 days and includes subdomains.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/shield'\n\nconst shieldConfig = defineConfig({\n  hsts: {\n    enabled: true,\n    maxAge: '180 days',\n    includeSubDomains: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Making Request with CSRF Token in AdonisJS v6 Test\nDESCRIPTION: This snippet shows how to use the withCsrfToken method to include a CSRF token when making a POST request in an AdonisJS v6 test.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\ntest('create a post', async ({ client }) => {\n  await client\n    .post('/posts')\n    .form(dataGoesHere)\n    .withCsrfToken()\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Named Access Tokens in TypeScript\nDESCRIPTION: Shows how to create named access tokens with expiration. The token name is taken from the request input.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.accessTokens.create(\n  user,\n  ['*'],\n  {\n    name: request.input('token_name'),\n    expiresIn: '30 days'\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Schema in TypeScript\nDESCRIPTION: Example of creating a basic validation schema for a username field using schema.create method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/schema_101.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst registerUserSchema = schema.create({\n  username: schema.string()\n})\n```\n\n----------------------------------------\n\nTITLE: Embedding Images in Emails\nDESCRIPTION: Using the embedImage helper to embed images in email templates. This helper is only available when rendering a template for email sending.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_13\n\nLANGUAGE: edge\nCODE:\n```\n<img src=\"{{\n  embedImage(app.makePath('assets/hero.jpg'))\n}}\" />\n```\n\n----------------------------------------\n\nTITLE: Injecting EchoService into HomeController in TypeScript\nDESCRIPTION: Demonstrates how to inject the EchoService into a HomeController class using constructor injection.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport EchoService from '#services/echo_service'\n\nexport default class HomeController {\n  constructor(protected echo: EchoService) {\n  }\n  \n  handle() {\n    return this.echo.respond()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limiter Configuration File\nDESCRIPTION: Complete configuration for the rate limiter package defining the default store and available storage options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport env from '#start/env'\nimport { defineConfig, stores } from '@adonisjs/limiter'\n\nconst limiterConfig = defineConfig({\n  default: env.get('LIMITER_STORE'),\n\n  stores: {\n    redis: stores.redis({}),\n\n    database: stores.database({\n      tableName: 'rate_limits'\n    }),\n\n    memory: stores.memory({}),\n  },\n})\n\nexport default limiterConfig\n\ndeclare module '@adonisjs/limiter/types' {\n  export interface LimitersList extends InferLimiters<typeof limiterConfig> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Middleware in AdonisJS\nDESCRIPTION: This code demonstrates how to define named middleware using the router.named method inside the start/kernel.ts file. Named middleware is a collection of middleware that are not executed unless explicitly assigned to a route or a group.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.named({\n  auth: () => import('#middleware/auth_middleware')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Route Param Matchers in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use param matchers in AdonisJS to validate and cast route parameters.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n\nrouter\n  .get('/posts/:id', ({ params }) => {\n    console.log(typeof params.id)\n  })\n  .where('id', {\n    match: /^[0-9]+$/,\n    cast: (value) => Number(value),\n  })\n```\n\n----------------------------------------\n\nTITLE: Restoring Service Implementations After Swaps - AdonisJS Container - TypeScript\nDESCRIPTION: Shows how to revert the IoC container to its original service implementations using 'restore' and 'restoreAll'. Restores a specific class, multiple classes, or all swapped bindings. Useful post-testing to ensure service consistency across tests and during application runtime.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\napp.container.restore(UserService)\n\n// Restore UserService and PostService\napp.container.restoreAll([UserService, PostService])\n\n// Restore all\napp.container.restoreAll()\n```\n\n----------------------------------------\n\nTITLE: Masked Input Prompt Examples\nDESCRIPTION: Examples of using masked input prompts for sensitive information with validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.secure('Enter account password')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.secure('Enter account password', {\n  validate(value) {\n    return value.length < 6\n      ? 'Password must be 6 characters long'\n      : true\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Shallow Resource Routes in AdonisJS\nDESCRIPTION: Creates a shallow resource route structure for nested resources, keeping the URL structure flat where possible.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.shallowResource('posts.comments', CommentsController)\n```\n\n----------------------------------------\n\nTITLE: Registering Router Middleware with Codemods in AdonisJS\nDESCRIPTION: Using the codemods API to register middleware to the router middleware stack in the kernel.ts file with error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nconst codemods = await command.createCodemods()\n\ntry {\n  await codemods.registerMiddleware('router', [\n    {\n      path: '@adonisjs/core/bodyparser_middleware'\n    }\n  ])\n} catch (error) {\n  console.error('Unable to register middleware')\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Translation Formatter\nDESCRIPTION: Creates a custom translation formatter implementing the TranslationsFormatterContract interface. Demonstrates how to create a Fluent-based formatter with proper typing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  FormatterFactory,\n  TranslationsLoaderContract,\n} from '@adonisjs/i18n/types'\n\n/**\n * Formatter implementation\n */\nexport class FluentFormatter implements TranslationsFormatterContract {\n  format(\n    message: string,\n    locale: string,\n    data?: Record<string, any>\n  ): string {\n    // return formatted value\n  }\n}\n\n/**\n * Factory function to reference the formatter\n * inside the config file.\n */\nexport function fluentFormatter(): FormatterFactory {\n  return () => {\n    return new FluentFormatter()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translation Missing Event Listener in TypeScript\nDESCRIPTION: Sets up an event listener to handle missing translations in the application. The listener receives event details including the translation identifier, fallback status, and locale information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('i18n:missing:translation', function (event) {\n  console.log(event.identifier)\n  console.log(event.hasFallback)\n  console.log(event.locale)\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to HTTP Request Completed Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'http:request_completed' event which is dispatched after an HTTP request is completed. The event provides the HttpContext instance and request duration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\nimport string from '@adonisjs/core/helpers/string'\n\nemitter.on('http:request_completed', (event) => {\n  const method = event.ctx.request.method()\n  const url = event.ctx.request.url(true)\n  const duration = event.duration\n\n  console.log(`${method} ${url}: ${string.prettyHrTime(duration)}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Date with Standard Format Shorthand in AdonisJS (TypeScript)\nDESCRIPTION: This series of snippets shows how to use common date format shorthands ('rfc2822', 'sql', 'iso') in the 'format' option for strict date validation. Users should select the format best matching their expected input.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  published_at: schema.date({\\n    format: 'rfc2822',\\n  })\\n}\\n\\n// OR\\n{\\n  published_at: schema.date({\\n    format: 'sql',\\n  })\\n}\\n\\n// OR\\n{\\n  published_at: schema.date({\\n    format: 'iso',\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling E_INVALID_CREDENTIALS Exception in TypeScript\nDESCRIPTION: Example of importing and checking for invalid credentials exception. This exception is raised when the auth finder is unable to verify user credentials.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as authErrors } from '@adonisjs/auth'\nif (error instanceof authErrors.E_INVALID_CREDENTIALS) {\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Drive Storage Services\nDESCRIPTION: Complete configuration setup for Drive including local filesystem and Digital Ocean spaces storage services.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/drive.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport env from '#start/env'\nimport app from '@adonisjs/core/services/app'\nimport { defineConfig, services } from '@adonisjs/drive'\n\nconst driveConfig = defineConfig({\n  default: env.get('DRIVE_DISK'),\n\n  services: {\n    /**\n     * Persist files on the local filesystem\n     */\n    fs: services.fs({\n      location: app.makePath('storage'),\n      serveFiles: true,\n      routeBasePath: '/uploads',\n      visibility: 'public',\n    }),\n\n    /**\n     * Persist files on Digital Ocean spaces\n     */\n    spaces: services.s3({\n      credentials: {\n        accessKeyId: env.get('SPACES_KEY'),\n        secretAccessKey: env.get('SPACES_SECRET'),\n      },\n      region: env.get('SPACES_REGION'),\n      bucket: env.get('SPACES_BUCKET'),\n      endpoint: env.get('SPACES_ENDPOINT'),\n      visibility: 'public',\n    }),\n  },\n})\n\nexport default driveConfig\n```\n\n----------------------------------------\n\nTITLE: Using Container Service for Disk Operations in TypeScript\nDESCRIPTION: Demonstrates how to use the drive container service to perform disk operations without dependency injection.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/container_services.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport drive from '@adonisjs/drive/services/main'\n\nexport class PostService {\n  async save(post: Post, coverImage: File) {\n    const coverImageName = 'random_name.jpg'\n\n    const disk = drive.use('s3')\n    await disk.put(coverImageName, coverImage)\n    \n    post.coverImage = coverImageName\n    await post.save()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Spotify OAuth Configuration in TypeScript\nDESCRIPTION: Configures Spotify OAuth within config/ally.ts using services.spotify. Required fields are clientId, clientSecret, callbackUrl, and additional scopes. Generates configuration for Spotify integration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  spotify: services.spotify({\n    clientId: '',\n    clientSecret: '',\n    callbackUrl: '',\n\n    // Spotify specific\n    scopes: ['user-read-email', 'streaming'],\n    showDialog: false\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Conversion of Empty Strings to Null - AdonisJS - TypeScript\nDESCRIPTION: Configures the BodyParser middleware in AdonisJS to convert empty string values in HTML forms, JSON, and multipart payloads to null. This normalization helps prevent storing empty strings in nullable database columns. The configuration objects for each parser include the convertEmptyStringsToNull flag set to true. This flag expects a boolean and works in conjunction with each parser’s other configuration properties.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  form: {\n    // ... rest of the config\n    convertEmptyStringsToNull: true\n  },\n\n  json: {\n    // ... rest of the config\n    convertEmptyStringsToNull: true\n  },\n\n  multipart: {\n    // ... rest of the config\n    convertEmptyStringsToNull: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Data Transfer Objects (DTOs) for Model Serialization in AdonisJS\nDESCRIPTION: Implementation of a DTO pattern to transform AdonisJS models into simple objects with explicit structure before passing them to inertia.render, providing better type safety.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nclass UserDto {\n  constructor(private user: User) {}\n\n  toJson() {\n    return {\n      id: this.user.id,\n      name: this.user.name\n    }\n  }\n}\n\nclass UsersController {\n  async edit({ inertia, params }: HttpContext) {\n    const user = await User.findOrFail(params.id)\n    return inertia.render('user/edit', { user: new UserDto(user).toJson() })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Dependencies via Method Parameter - UsersController - AdonisJS TypeScript\nDESCRIPTION: Defines a controller method that receives an injected service as an argument using the 'inject' decorator. The container resolves and supplies 'UserService' when 'index' is called. Requires AdonisJS controller conventions and service registration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_17\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport UserService from '#services/user_service'\nimport { inject } from '@adonisjs/core'\n\nexport default class UsersController {\n  @inject()\n  index(service: UserService) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Japa Plugins in AdonisJS Tests\nDESCRIPTION: Configuration for registering Japa plugins to extend testing functionality, including the assert plugin and AdonisJS-specific plugin.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport const plugins: Config['plugins'] = [\n  assert(),\n  pluginAdonisJS(app)\n]\n```\n\n----------------------------------------\n\nTITLE: Configuring Static Middleware Options (TypeScript)\nDESCRIPTION: Defines detailed configuration options for the @adonisjs/static middleware in config/static.ts. The settings control features like enabling/disabling the middleware, ETag and Last-Modified headers, and handling of dot files. Requires @adonisjs/static to be installed, and uses defineConfig for type safety. Outputs a default export of the static server configuration object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@adonisjs/static'\n\nconst staticServerConfig = defineConfig({\n  enabled: true,\n  etag: true,\n  lastModified: true,\n  dotFiles: 'ignore',\n})\n\nexport default staticServerConfig\n```\n\n----------------------------------------\n\nTITLE: Attaching Rules to Date Validation in AdonisJS (TypeScript)\nDESCRIPTION: This snippet shows how to add custom validation rules to a date field, such as ensuring the date is after 'today' or within 10 days before. Rules are added in an array as the second argument to 'schema.date'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  published_at: schema.date({}, [\\n    rules.after('today'),\\n    rules.before(10, 'days'),\\n  ])\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Rate Limiter with Blocking in TypeScript\nDESCRIPTION: This snippet demonstrates how to configure a rate limiter with a blocking duration using the AdonisJS limiter service. It allows 10 requests every minute and blocks the user for 30 minutes if they exceed the limit.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nlimiter\n  .allowRequests(10)\n  .every('1 minute')\n  /**\n   * Will be blocked for 30mins, if they send more than\n   * 10 requests under one minute\n   */\n  .blockFor('30 mins')\n```\n\n----------------------------------------\n\nTITLE: Basic Session Example in AdonisJS\nDESCRIPTION: Demonstrates basic session operations such as setting and retrieving a session key using AdonisJS HTTP context for managing themes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/theme/:color', async ({ params, session, response }) => {\n  session.put('theme', params.color)\n  response.redirect('/')\n})\n\nrouter.get('/', async ({ session }) => {\n  const colorTheme = session.get('theme')\n  return `You are using ${colorTheme} color theme`\n})\n```\n\n----------------------------------------\n\nTITLE: Extending AdonisJS TSConfig for Applications - JSONC\nDESCRIPTION: This config extends the AdonisJS tsconfig.app.json preset for application projects, defining source and build directories. It should be placed in tsconfig.json and requires the @adonisjs/tsconfig package installed. The \"rootDir\" and \"outDir\" keys specify source and build paths respectively. Only works in TypeScript projects and expects npm dependencies to be installed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_1\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"@adonisjs/tsconfig/tsconfig.app.json\",\n  \"compilerOptions\": {\n    \"rootDir\": \"./\",\n    \"outDir\": \"./build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an Installed AdonisJS Package\nDESCRIPTION: Shows how to configure a previously installed AdonisJS package. This example configures the Lucid ORM package after it has been installed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure @adonisjs/lucid\n```\n\n----------------------------------------\n\nTITLE: Accessing RCFile Contents in TypeScript\nDESCRIPTION: Example of how to access the parsed RCFile contents using the app service in TypeScript.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\nconsole.log(app.rcFile)\n```\n\n----------------------------------------\n\nTITLE: Configuring Session Service Provider\nDESCRIPTION: Registers the session service provider in the adonisrc.ts file to enable session management capabilities within the application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/session/session_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up Event Listeners with AdonisJS Emittery in TypeScript\nDESCRIPTION: Implements basic event listening functionality using the 'emitter.on' method. The method registers event listeners that respond when the event named 'user:registered' is dispatched. Requires AdonisJS and Emittery.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n// title: start/events.ts\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('user:registered', function (user) {\n  console.log(user)\n})\n```\n\n----------------------------------------\n\nTITLE: Starting AdonisJS Development Server with HMR\nDESCRIPTION: Starts the AdonisJS development server with Hot Module Replacement (HMR) enabled. This uses the @adonisjs/assembler package to watch for file changes and restart the HTTP server automatically.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace serve --hmr\n```\n\n----------------------------------------\n\nTITLE: Implementing OAuth Redirect with Custom Scopes\nDESCRIPTION: Example of implementing OAuth redirect with custom scopes and parameters.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/github/redirect', ({ ally }) => {\n  return ally\n    .use('github')\n    .redirect((request) => {\n      request.scopes(['user:email', 'repo:invite'])\n      request.param('allow_signup', false)\n    })\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Codemods to Generate Source Files Using Stubs - AdonisJS Ace Command - TypeScript\nDESCRIPTION: This snippet demonstrates how to implement a custom Ace command that creates a new API resource file using a stub template via AdonisJS codemods. It initializes the codemods system and invokes makeUsingStub with a stubs directory, specific stub file, and template data. Dependency: @adonisjs/core/ace. Inputs are the command context; outputs are generated files in the appropriate destination. This should be run inside an Ace command context. Expects that the stub template exists within the defined directory.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n// title: Inside a command\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nconst STUBS_ROOT = new URL('./stubs', import.meta.url)\n\nexport default class MakeApiResource extends BaseCommand {\n  async run() {\n    // highlight-start\n    const codemods = await this.createCodemods()\n    await codemods.makeUsingStub(STUBS_ROOT, 'api_resource.stub', {})\n    // highlight-end\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Event Count Assertions in TypeScript\nDESCRIPTION: Examples of asserting event emission counts and checking for no emitted events.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\n// Assert count of a specific event\nevents.assertEmittedCount(OrderUpdated, 1)\n\n// Assert no events were emitted\nevents.assertNoneEmitted()\n```\n\n----------------------------------------\n\nTITLE: Session Configuration for Testing\nDESCRIPTION: Environment configuration for using memory session driver in tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_5\n\nLANGUAGE: dotenv\nCODE:\n```\nSESSION_DRIVER=memory\n```\n\n----------------------------------------\n\nTITLE: Registering Japa Plugin with Codemods in AdonisJS\nDESCRIPTION: Using the codemods API to register a Japa testing plugin to the bootstrap.ts file with imports and error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nconst codemods = await command.createCodemods()\n\nconst imports = [\n  {\n    isNamed: false,\n    module: '@adonisjs/core/services/app',\n    identifier: 'app'\n  },\n  {\n    isNamed: true,\n    module: '@adonisjs/session/plugins/api_client',\n    identifier: 'sessionApiClient'\n  }\n]\nconst pluginUsage = 'sessionApiClient(app)'\n\ntry {\n  await codemods.registerJapaPlugin(pluginUsage, imports)\n} catch (error) {\n  console.error('Unable to register japa plugin')\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: i18n Configuration Setup\nDESCRIPTION: Basic configuration setup for i18n package showing default locale, formatter and loaders configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport { defineConfig, formatters, loaders } from '@adonisjs/i18n'\n\nconst i18nConfig = defineConfig({\n  defaultLocale: 'en',\n  formatter: formatters.icu(),\n\n  loaders: [\n    loaders.fs({\n      location: app.languageFilesPath()\n    })\n  ],\n})\n\nexport default i18nConfig\n```\n\n----------------------------------------\n\nTITLE: Executing Async Functions Concurrently in TypeScript\nDESCRIPTION: This code, appended to `main.js`, calls the previously defined `run` function three times with different user objects (`{ id: 1 }`, `{ id: 2 }`, `{ id: 3 }`). Since `await` is not used, these calls execute concurrently, demonstrating how `AsyncLocalStorage` maintains separate contexts for each asynchronous operation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// title: main.js\nrun({ id: 1 })\nrun({ id: 2 })\nrun({ id: 3 })\n```\n\n----------------------------------------\n\nTITLE: Defining afterField Validation Rule in AdonisJS\nDESCRIPTION: This snippet demonstrates how to use the afterField validation rule to ensure a date field's value is after another field's value. The afterOrEqualToField variant validates that the date is the same or after the specified field. Requires @ioc/Adonis/Core/Validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  checkin_date: schema.date(),\n  checkout_date: schema.date({}, [\n    rules.afterField('checkin_date')\n  ]),\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  drafted_at: schema.date(),\n  published_at: schema.date({}, [\n    rules.afterOrEqualToField('drafted_at')\n  ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Subscription Errors in Redis - TypeScript\nDESCRIPTION: Demonstrates subscribing to 'subscription:error' and 'psubscription:error' events to handle failed attempts to subscribe to Redis channels or patterns. Important for fault-tolerant subscription management in AdonisJS applications. Utilizes '@adonisjs/redis/services/main'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_34\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('subscription:error', () => {})\\n  connection.on('psubscription:error', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Checking for Empty Strings in TypeScript with AdonisJS\nDESCRIPTION: Shows how to use the isEmpty helper to check if a string is empty or consists only of whitespace.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.isEmpty('') // true\nstring.isEmpty('      ') // true\n```\n\n----------------------------------------\n\nTITLE: Registering a Route to Render an Edge Template in AdonisJS\nDESCRIPTION: This code snippet shows how to register a route that renders an Edge template using the view.render method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ view }) => {\n  return view.render('welcome')\n})\n```\n\n----------------------------------------\n\nTITLE: Schema Definition for Remember Me Tokens Table in AdonisJS\nDESCRIPTION: This TypeScript code schema defines a Lucid ORM migration for creating the 'remember_me_tokens' table that includes fields for tokenable_id, hash, and timestamps. It ensures referential integrity and handles table creation and deletion.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class extends BaseSchema {\n  protected tableName = 'remember_me_tokens'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments()\n      table\n        .integer('tokenable_id')\n        .notNullable()\n        .unsigned()\n        .references('id')\n        .inTable('users')\n        .onDelete('CASCADE')\n\n      table.string('hash').notNullable().unique()\n      table.timestamp('created_at').notNullable()\n      table.timestamp('updated_at').notNullable()\n      table.timestamp('expires_at').notNullable()\n    })\n  }\n\n  async down() {\n    this.schema.dropTable(this.tableName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Middleware in AdonisJS\nDESCRIPTION: Shows how to generate middleware classes for HTTP requests in AdonisJS. Middleware are stored in app/middleware directory following specific naming conventions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:middleware bodyparser\n```\n\n----------------------------------------\n\nTITLE: Accessing Node.js Response Object in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates how to access the underlying Node.js response object using the response.response property.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/response.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('posts', ({ response }) => {\n  console.log(response.response)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Base HTTP Exception Handler in TypeScript\nDESCRIPTION: Base implementation of HttpExceptionHandler class that extends ExceptionHandler. Includes debug mode configuration and basic handle/report methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/exception_handling.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport { HttpContext, ExceptionHandler } from '@adonisjs/core/http'\n\nexport default class HttpExceptionHandler extends ExceptionHandler {\n  protected debug = !app.inProduction\n  protected renderStatusPages = app.inProduction\n\n  async handle(error: unknown, ctx: HttpContext) {\n    return super.handle(error, ctx)\n  }\n\n  async report(error: unknown, ctx: HttpContext) {\n    return super.report(error, ctx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Redis Pattern Subscription in AdonisJS\nDESCRIPTION: Demonstrates how to subscribe to Redis patterns and handle incoming messages in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nredis.psubscribe('user:*', (channel, message) => {\n  console.log(channel)\n  console.log(message)\n})\n\nredis.publish(\n  'user:add',\n  JSON.stringify({\n    id: 1,\n    username: 'virk',\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Environment Variables in AdonisJS\nDESCRIPTION: Environment variables required for Redis configuration in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nREDIS_HOST=127.0.0.1\nREDIS_PORT=6379\nREDIS_PASSWORD=\n```\n\n----------------------------------------\n\nTITLE: Creating a Browser Test File with Ace CLI\nDESCRIPTION: Command to generate a new browser test file using the AdonisJS Ace CLI tool, specifying the test suite as 'browser'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:test pages/home --suite=browser\n# DONE:    create tests/browser/pages/home.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Registering CSRF Protection Plugins in AdonisJS v6 Tests\nDESCRIPTION: This snippet demonstrates how to register the shieldApiClient and sessionApiClient plugins for CSRF protection in AdonisJS v6 tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { shieldApiClient } from '@adonisjs/shield/plugins/api_client'\nimport { sessionApiClient } from '@adonisjs/session/plugins/api_client'\n\nexport const plugins: Config['plugins'] = [\n  assert(),\n  pluginAdonisJS(app),\n  sessionApiClient(app),\n  shieldApiClient()\n]\n```\n\n----------------------------------------\n\nTITLE: Lock Configuration Setup\nDESCRIPTION: Configuration file setup for lock stores including Redis, Database, and Memory options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport env from '#start/env'\nimport { defineConfig, stores } from '@adonisjs/lock'\n\nconst lockConfig = defineConfig({\n  default: env.get('LOCK_STORE'),\n  stores: {\n    redis: stores.redis({}),\n\n    database: stores.database({\n      tableName: 'locks',\n    }),\n\n    memory: stores.memory()\n  },\n})\n\nexport default lockConfig\n\ndeclare module '@adonisjs/lock/types' {\n  export interface LockStoresList extends InferLockStores<typeof lockConfig> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing after Validation Rule in AdonisJS\nDESCRIPTION: This code snippet validates a date field to be after a specified duration or date using Luxon DateTime objects for more advanced scenarios. It uses TypeScript intellisense for determining available offsets. Requires @ioc/Adonis/Core/Validator and optionally Luxon for DateTime.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  checkin_date: schema.date({}, [\n    rules.after(2, 'days')\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrules.after(2, 'days')\nrules.after(1, 'month')\nrules.after(4, 'years')\nrules.after(30, 'minutes')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrules.after('today')\nrules.after('tomorrow')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  checkin_date: schema.date({}, [\n    rules.afterOrEqual('today')\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-start\nimport { DateTime } from 'luxon'\n// highlight-end\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\nclass HolidayValidator {\n  // highlight-start\n  public refs = schema.refs({\n    allowedDate: DateTime.local().plus({ days: 2 })\n  })\n  // highlight-end\n\n  public schema = schema.create({\n    joining_date: schema.date({}, [\n      // highlight-start\n      rules.after(this.refs.allowedDate)\n      // highlight-end\n    ])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Matching Routes in AdonisJS\nDESCRIPTION: Demonstrates how to use the request.matchesRoute method to check if the current request matches a specific route pattern or name.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/posts/:id', ({ request }) => {\n  if (request.matchesRoute('/posts/:id')) {\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Extending AdonisJS Validator Rules Interface for TypeScript Autocompletion (TypeScript)\nDESCRIPTION: This code shows how to extend the AdonisJS validator's Rules interface to add a 'camelCase' method using TypeScript's declaration merging feature. This enables strong typing and IDE autocompletion for the new rule when using the 'rules' object. Dependencies: TypeScript (for declaration merging). Inputs: none; Outputs: adds type definition for 'camelCase()' rule. This must be placed in any TypeScript file (suggested location: 'contracts/validator.ts').\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: contracts/validator.ts\ndeclare module '@adonisjs/core/legacy/validator' {\n  interface Rules {\n    camelCase(): Rule\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Listener Paths in AdonisJS\nDESCRIPTION: Demonstrates how to use the listenersPath method to get the path to files in the listeners directory. It can return the path to a specific file or the directory itself.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\napp.listenersPath('send_invoice.ts')\n// /project_root/app/listeners/send_invoice.ts\n\napp.listenersPath()\n// /project_root/app/listeners\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring AdonisJS Packages\nDESCRIPTION: Shows how to install and configure AdonisJS packages in a single command using 'add'. This command combines package installation and configuration steps automatically.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Install and configure the @adonisjs/lucid package\nnode ace add @adonisjs/lucid\n\n# Install the package as a development dependency and configure it\nnode ace add my-dev-package --dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Validation Error Messages in VineJS (TypeScript)\nDESCRIPTION: Demonstrates how to configure custom, global validation error messages for VineJS within an AdonisJS preload file (`start/validator.ts`). It assigns a new instance of `SimpleMessagesProvider` to `vine.messagesProvider`, mapping rule names (e.g., 'required', 'email') and field-specific rules (e.g., 'username.required') to custom message strings. Placeholders like `{{ field }}` are used for dynamic content.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// title: start/validator.ts\nimport vine, { SimpleMessagesProvider } from '@vinejs/vine'\n\nvine.messagesProvider = new SimpleMessagesProvider({\n  // Applicable for all fields\n  'required': 'The {{ field }} field is required',\n  'string': 'The value of {{ field }} field must be a string',\n  'email': 'The value is not a valid email address',\n\n  // Error message for the username field\n  'username.required': 'Please choose a username for your account',\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing Password Rehashing in AdonisJS\nDESCRIPTION: This code demonstrates how to check if a password needs rehashing (due to updated security parameters) and how to perform the rehash during user login. This is important for keeping password security up to date.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport hash from '@adonisjs/core/services/hash'\n\nif (await hash.needsReHash(user.password)) {\n  user.password = await hash.make(plainTextPassword)\n  await user.save()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Health Check in TypeScript\nDESCRIPTION: Implementation of Redis connection monitoring including multiple connection support.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\nimport { RedisCheck } from '@adonisjs/redis'\nimport { HealthChecks, DiskSpaceCheck, MemoryHeapCheck } from '@adonisjs/core/health'\n\nexport const healthChecks = new HealthChecks().register([\n  new DiskSpaceCheck(),\n  new MemoryHeapCheck(),\n  new RedisCheck(redis.connection()),\n])\n```\n\n----------------------------------------\n\nTITLE: Reloading Translations Runtime Method\nDESCRIPTION: Demonstrates how to reload translation files during runtime using the reloadTranslations method. This is useful when translation files are modified while the application is running.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport i18nManager from '@adonisjs/i18n/services/main'\n\nawait i18nManager.reloadTranslations()\n```\n\n----------------------------------------\n\nTITLE: Config Access in Edge Templates\nDESCRIPTION: Shows how to access and check configuration values within Edge template files.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/configuration.md#2025-04-22_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{ config('app.appUrl') }}\"> Home </a>\n```\n\nLANGUAGE: edge\nCODE:\n```\n@if(config.has('app.appUrl'))\n  <a href=\"{{ config('app.appUrl') }}\"> Home </a>\n@else\n  <a href=\"/\"> Home </a>\n@end\n```\n\n----------------------------------------\n\nTITLE: Using Compiled Options to Normalize Rule Parameters in Custom Validator (TypeScript)\nDESCRIPTION: Demonstrates how to normalize rule options like 'maxLength' at the compile phase using the third argument of 'validator.rule'. Returns an object with 'compiledOptions', so the normalized options are only calculated once per schema definition rather than each validation. Dependencies: AdonisJS validator. Inputs: '[maxLength]' array, Output: normalized compiledOptions object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nvalidator.rule(\n  'camelCase', // rule name\n  () => {}, // validation callback\n  // highlight-start\n  ([maxLength]) => {\n    return {\n      compiledOptions: {\n        maxLength: maxLength || 10,\n      },\n    }\n  }\n  // highlight-end\n)\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard for CORS Origin\nDESCRIPTION: Example of using the wildcard expression to allow all origins in CORS configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n{\n  origin: '*'\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Test HTTP Context with Custom Request and Response\nDESCRIPTION: Demonstrates how to create a test HTTP context with custom request and response objects, which can be useful for integration testing with real Node.js HTTP server instances.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createServer } from 'node:http'\nimport testUtils from '@adonisjs/core/services/test_utils'\n\ncreateServer((req, res) => {\n  const ctx = testUtils.createHttpContext({\n    // highlight-start\n    req,\n    res\n    // highlight-end\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Rehashing Passwords with Model Hooks in AdonisJS\nDESCRIPTION: This example shows how to rehash passwords with model hooks, relying on the model's beforeSave hook to handle the actual hashing operation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nif (await hash.needsReHash(user.password)) {\n  // Let the model hook rehash the password\n  user.password = plainTextPassword\n  await user.save()\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Japa API Client Plugin\nDESCRIPTION: Command to install the required Japa API client package from npm.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @japa/api-client\n```\n\n----------------------------------------\n\nTITLE: Using route Helper in Edge Templates for URL Generation\nDESCRIPTION: Shows how to use the route helper in Edge templates to generate URLs for named routes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_39\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{ route('posts.show', [post.id]) }}\">\n  View post\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Request ID Generation in AdonisJS\nDESCRIPTION: Enables request ID generation in the application configuration. Uses cuid2 package to generate unique IDs for HTTP requests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nexport const http = defineConfig({\n  generateRequestId: true\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Command-line Arguments in an Ace Command - AdonisJS Ace - TypeScript\nDESCRIPTION: This TypeScript snippet shows how to accept a required argument (the resource name) in a custom Ace command with @adonisjs/core/ace. The argument is annotated with @args.string and described. The resulting property (this.name) is used to pass runtime data into the codemods makeUsingStub call. This approach enables dynamic stub generation based on user input. Prerequisites: BaseCommand, args from @adonisjs/core/ace.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { BaseCommand, args } from '@adonisjs/core/ace'\n\nexport default class MakeApiResource extends BaseCommand {\n  // insert-start\n  @args.string({\n    description: 'The name of the resource'\n  })\n  declare name: string\n  // insert-end\n\n  async run() {\n    const codemods = await this.createCodemods()\n    await codemods.makeUsingStub(STUBS_ROOT, 'api_resource.stub', {\n      // insert-start\n      name: this.name,\n      // insert-end\n    })\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Using Boolean Flags in AdonisJS Ace Command\nDESCRIPTION: These snippets show how boolean flags are used in the command line, demonstrating positive, undefined, and negated flag values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmake:controller --resource\n\n# this.resource === true\n```\n\nLANGUAGE: sh\nCODE:\n```\nmake:controller\n\n# this.resource === undefined\n```\n\nLANGUAGE: sh\nCODE:\n```\nmake:controller --no-resource\n\n# this.resource === false\n```\n\n----------------------------------------\n\nTITLE: Handling E_ROUTE_NOT_FOUND Exception in TypeScript\nDESCRIPTION: Example of importing and checking for route not found exception from the AdonisJS core. This exception is raised when the HTTP server receives a request for a non-existing route.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_ROUTE_NOT_FOUND) {\n  // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing flash messages in Edge templates\nDESCRIPTION: Shows how to access flash messages directly in Edge templates using the flashMessages object, which provides the same methods as in controllers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_25\n\nLANGUAGE: edge\nCODE:\n```\n{{ flashMessages.all() }}\n{{ flashMessages.get('key') }}\n{{ flashMessages.has('key') }}\n```\n\n----------------------------------------\n\nTITLE: Validating Enum Property with TypeScript Enums in AdonisJS (TypeScript)\nDESCRIPTION: This code shows how to use a TypeScript enum for validation by passing its values to 'schema.enum'. This ensures that only enum-defined values are accepted. Assumes TypeScript enum definition and import of 'schema'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nenum SocialAccounts {\\n  TWITTER = 'twitter',\\n  GITHUB = 'github',\\n  INSTAGRAM = 'instagram',\\n}\\n\\n{\\n  account_type: schema.enum(Object.values(SocialAccounts))\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context Globally in a Service\nDESCRIPTION: Shows how to access the HTTP context from anywhere in the application using Node.js's Async Local Storage, without having to pass the context through dependency injection.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: app/services/user_service.ts\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class UserService {\n  all() {\n    const ctx = HttpContext.getOrFail()\n    console.log(ctx.request.url())\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing all session data in TypeScript\nDESCRIPTION: The clear method removes all data from the session store, effectively resetting the session.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nsession.clear()\n```\n\n----------------------------------------\n\nTITLE: Implementing UUID Validation in AdonisJS (TypeScript)\nDESCRIPTION: This snippet shows how to use the uuid rule in AdonisJS for validating UUID strings. It includes examples of basic usage and specifying a particular UUID version.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  id: schema.string([\n    rules.uuid()\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  id: schema.string([\n    rules.uuid({ version: 4 })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Running a Specific Test with Ace\nDESCRIPTION: Executes tests for a specific file using the Ace CLI with the --files flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode ace test --files=commands/greet\n```\n\n----------------------------------------\n\nTITLE: Specifying Allowed Origins in CORS\nDESCRIPTION: Example of configuring specific origins to allow by providing an array of domain names.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n{\n  origin: ['adonisjs.com']\n}\n```\n\n----------------------------------------\n\nTITLE: Using Method Injection in HomeController with TypeScript\nDESCRIPTION: Shows how to use method injection to inject dependencies into a specific method of the HomeController.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport EchoService from '#services/echo_service'\nimport { inject } from '@adonisjs/core'\n\nexport default class HomeController {\n  @inject()\n  handle(ctx, echo: EchoService) {\n    return echo.respond()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bcrypt Hash Driver in AdonisJS\nDESCRIPTION: Configuration for the bcrypt hash driver in AdonisJS, including settings for rounds (cost factor), salt size, and algorithm version.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // highlight-start\n  // Make sure to update the default driver to bcrypt\n  default: 'bcrypt',\n  // highlight-end\n\n  list: {\n    bcrypt: drivers.bcrypt({\n      rounds: 10,\n      saltSize: 16,\n      version: 98\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with Custom Options in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to set cookies with custom options, overriding the default configuration in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nresponse.cookie('key', value, {\n  domain: '',\n  path: '/',\n  maxAge: '2h',\n  httpOnly: true,\n  secure: true,\n  sameSite: 'lax',\n})\n```\n\n----------------------------------------\n\nTITLE: Hash Configuration with Config Provider\nDESCRIPTION: Proper implementation using config provider pattern for lazy dependency resolution.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/config_providers.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configProvider } from '@adonisjs/core'\nimport { Scrypt } from '@adonisjs/core/hash/drivers/scrypt'\n\nexport default {\n  default: 'scrypt',\n  list: {\n    scrypt: configProvider.create(async (app) => {\n      const emitter = await app.container.make('emitter')\n\n      return () => new Scrypt({\n        cost: 16384,\n        blockSize: 8,\n        parallelization: 1,\n        maxMemory: 33554432,\n      }, emitter)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Node Arguments\nDESCRIPTION: Demonstrates how to pass Node.js arguments to the AdonisJS development server. This example disables warnings and enables the inspector while starting the server with HMR.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace --no-warnings --inspect serve --hmr\n```\n\n----------------------------------------\n\nTITLE: Class-based Event and Listener Combination in AdonisJS TypeScript\nDESCRIPTION: Integrates both class-based events and listeners to offer a refined, object-oriented event-handling solution, utilizing streamlined code for performance and clarity.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nimport UserRegistered from '#events/user_registered'\nconst SendVerificationEmail = () => import('#listeners/send_verification_email')\n\nemitter.on(UserRegistered, [SendVerificationEmail])\n```\n\n----------------------------------------\n\nTITLE: GitHub OAuth Configuration in TypeScript\nDESCRIPTION: Defines OAuth configuration for GitHub in config/ally.ts. Requires services.github method with parameters: clientId, clientSecret, and callbackUrl. Outputs configuration object for GitHub OAuth.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  github: services.github({\n    clientId: '',\n    clientSecret: '',\n    callbackUrl: '',\n\n    // GitHub specific\n    login: 'adonisjs',\n    scopes: ['user', 'gist'],\n    allowSignup: true,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Resolving Database Instance using Container in TypeScript\nDESCRIPTION: Demonstrates how to use the IoC container to resolve a pre-configured Database instance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/container_services.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nconst db = await app.container.make('lucid.db')\n```\n\n----------------------------------------\n\nTITLE: String Manipulation with StringBuilder in TypeScript\nDESCRIPTION: The StringBuilder class provides a fluent API for performing transformations on string values. It offers methods for removing suffixes, pluralizing, changing case, adding suffixes, and more.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nconst value = string\n  .create('userController')\n  .removeSuffix('controller') // user\n  .plural() // users\n  .snakeCase() // users\n  .suffix('_controller') // users_controller\n  .ext('ts') // users_controller.ts\n  .toString()\n```\n\n----------------------------------------\n\nTITLE: LogRequests Middleware Implementation\nDESCRIPTION: Complete implementation of an HTTP middleware class with proper typing and export.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { NextFn } from '@adonisjs/core/types/http'\n\nexport default class LogRequests {\n  async handle(ctx: HttpContext, next: NextFn) {\n    await next()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Redis Commands for Specific Connections on Event - TypeScript\nDESCRIPTION: This example sets up a listener for the 'connection' event, registering the 'release' custom command only for Redis connections with the name 'jobs'. Useful for dynamic or scoped command registration in multi-connection environments. Depends on '@adonisjs/redis/services/main' and expects the connection instance in the callback.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_20\n\nLANGUAGE: TypeScript\nCODE:\n```\nredis.on('connection', (connection) => {\\n  if (connection.connectionName === 'jobs') {\\n    connection.defineCommand('release', {\\n      numberOfKeys: 2,\\n      lua: `\\n        redis.call('zrem', KEYS[2], ARGV[1])\\n        redis.call('zadd', KEYS[1], ARGV[2], ARGV[1])\\n        return true\\n      `,\\n    })\\n  }\\n})\n```\n\n----------------------------------------\n\nTITLE: Throwing E_HTTP_EXCEPTION in TypeScript\nDESCRIPTION: Example of how to throw a generic HTTP exception with custom error data and status code. This is useful for creating customized HTTP error responses.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\n\nthrow errors.E_HTTP_EXCEPTION.invoke(\n  {\n    errors: ['Cannot process request']\n  },\n  422\n)\n```\n\n----------------------------------------\n\nTITLE: Extending 'camelCase' Rule to Accept a 'maxLength' Option (TypeScript)\nDESCRIPTION: Adds a 'maxLength' optional parameter to the custom 'camelCase' validator rule interface for strong typing. This allows consumers to limit the string length when using the rule. Dependencies: TypeScript for interface merging. Inputs: the 'maxLength' parameter. Output: enhanced TypeScript definition for rule usage and autocompletion.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// title: contracts/validator.ts\ndeclare module '@adonisjs/core/legacy/validator' {\n  interface Rules {\n    camelCase(maxLength?: number): Rule\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting and Asserting Flash Messages in Browser Tests\nDESCRIPTION: Example showing how to set flash messages for a browser context and then assert they are properly displayed on the page.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n/**\n * Define flash messages\n */\nawait browserContext.setFlashMessages({\n  success: 'Post created successfully',\n})\n\nconst page = await visit('/posts/1')\n\n/**\n * Assert the post page shows the flash message\n * inside \".alert-success\" div.\n */\nawait page.assertExists(page.locator(\n  'div.alert-success',\n  { hasText: 'Post created successfully' }\n))\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Ready Hook\nDESCRIPTION: Implementation of the ready method with environment-specific logic for web, console, test, and repl environments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class AppProvider {\n  async start() {\n    if (this.app.getEnvironment() === 'web') {\n    }\n\n    if (this.app.getEnvironment() === 'console') {\n    }\n\n    if (this.app.getEnvironment() === 'test') {\n    }\n\n    if (this.app.getEnvironment() === 'repl') {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Database Instance without Container in TypeScript\nDESCRIPTION: Example of creating a Database instance without using the IoC container, which requires manual dependency injection.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/container_services.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Database } from '@adonisjs/lucid'\nexport const db = new Database(\n  // inject config and other dependencies\n)\n```\n\n----------------------------------------\n\nTITLE: Listening to All Events with emitter.onAny in AdonisJS TypeScript\nDESCRIPTION: Enables capturing of all dispatched events within the application through 'emitter.onAny', suitable for logging or global event management tasks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.onAny((name, event) => {\n  console.log(name)\n  console.log(event)\n})\n```\n\n----------------------------------------\n\nTITLE: Sharing Data Configuration for Inertia\nDESCRIPTION: Configuration examples for sharing global data across all Inertia views using both config file and middleware approaches.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/inertia'\n\nexport default defineConfig({\n  sharedData: {\n    appName: 'My App',\n    user: (ctx) => ctx.auth?.user,\n  },\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\nimport type { NextFn } from '@adonisjs/core/types/http'\n\nexport default class MyMiddleware {\n  async handle({ inertia, auth }: HttpContext, next: NextFn) {\n    inertia.share({\n      appName: 'My App',\n      user: (ctx) => ctx.auth?.user\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing TypeScript Server without Compilation\nDESCRIPTION: Command to run TypeScript files directly using ts-node-maintained/register/esm hook for development purposes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode --import=ts-node-maintained/register/esm bin/server.js\n```\n\n----------------------------------------\n\nTITLE: Content Negotiation in AdonisJS\nDESCRIPTION: Shows how to handle content negotiation using types() and accepts() methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ request }) => {\n  console.log(request.types())\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('posts', async ({ request, view }) => {\n  const posts = [\n    {\n      title: 'Adonis 101',\n    },\n  ]\n\n  const bestMatch = request.accepts(['html', 'json'])\n\n  switch (bestMatch) {\n    case 'html':\n      return view.render('posts/index', { posts })\n    case 'json':\n      return posts\n    default:\n      return view.render('posts/index', { posts })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Session Data for Browser Tests\nDESCRIPTION: Example of how to populate session data before visiting a page during browser testing, demonstrating cart items in a checkout flow.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ntest('checkout with cart items', async ({ browserContext, visit }) => {\n  // highlight-start\n  await browserContext.setSession({\n    cartItems: [\n      {\n        id: 1,\n        name: 'South Indian Filter Press Coffee'\n      },\n      {\n        id: 2,\n        name: 'Cold Brew Bags',\n      }\n    ]\n  })\n  // highlight-end\n\n  const page = await visit('/checkout')\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Number Property in AdonisJS (TypeScript)\nDESCRIPTION: This basic example validates that a property ('marks') is a number, casting string representations to numbers as needed. Uses 'schema.number()' with no additional options. Useful for numeric fields in standard schemas.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  marks: schema.number()\\n}\n```\n\n----------------------------------------\n\nTITLE: Process Signal Handling in TypeScript\nDESCRIPTION: Examples of listening to POSIX signals using the Application class methods, including conditional signal handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\n// Listen for a SIGTERM signal\napp.listen('SIGTERM', () => {\n})\n\n// Listen once for a SIGTERM signal\napp.listenOnce('SIGTERM', () => {\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\napp.listenIf(app.managedByPm2, 'SIGTERM', () => {\n})\n\napp.listenOnceIf(app.managedByPm2, 'SIGTERM', () => {\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Request Methods in AdonisJS\nDESCRIPTION: Shows how to access the HTTP method using method() and intended() methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.patch('posts', async ({ request }) => {\n  /**\n   * The method that was used for route matching\n   */\n  console.log(request.method())\n\n  /**\n   * The actual request method\n   */\n  console.log(request.intended())\n})\n```\n\n----------------------------------------\n\nTITLE: Using Redaction to Hide Passwords in Log Output\nDESCRIPTION: Example of how redaction works when logging objects containing sensitive information. The password field is automatically redacted based on the configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport logger from '@adonisjs/core/services/logger'\n\nconst username = request.input('username')\nconst password = request.input('password')\n\nlogger.info({ username, password }, 'user signup')\n// output: {\"username\":\"virk\",\"password\":\"[Redacted]\",\"msg\":\"user signup\"}\n```\n\n----------------------------------------\n\nTITLE: Clearing Rate Limit Storage in Tests\nDESCRIPTION: Examples of clearing rate limit storage between tests for specific stores or all stores.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport limiter from '@adonisjs/limiter/services/main'\n\ntest.group('Reports', (group) => {\n  group.each.setup(() => {\n    return () => limiter.clear(['redis', 'memory'])\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Auth Login Attempted Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session_auth:login_attempted' event which is dispatched by the SessionGuard implementation when the auth.login method is called, providing guard name and user information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session_auth:login_attempted', (event) => {\n  console.log(event.guardName)\n  console.log(event.user)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Ally Service Provider\nDESCRIPTION: Configuration to register the Ally service provider in adonisrc.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/ally/ally_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Redis Service Provider in AdonisJS\nDESCRIPTION: Code snippet showing how to register the Redis service provider in the adonisrc.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/redis/redis_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Prefixing URLs with Base URL in AdonisJS\nDESCRIPTION: Demonstrates how to prefix a base URL to the generated route URL using the builder.prefixUrl() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter\n  .builder()\n  .prefixUrl('https://blog.adonisjs.com')\n  .params({ id: 1 })\n  .make('posts.show')\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Reporters in AdonisJS\nDESCRIPTION: Setting up test reporters to display test progress and results, using the spec reporter as the active reporter.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const reporters: Config['reporters'] = {\n  activated: ['spec']\n}\n```\n\n----------------------------------------\n\nTITLE: Speeding Up Tests with Hash Service Faking in AdonisJS\nDESCRIPTION: This example demonstrates how to fake the hash service during tests to improve test performance. The hash.fake() method is used to disable actual password hashing, and hash.restore() is called afterward to restore normal functionality.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport hash from '@adonisjs/core/services/hash'\n\ntest('get users list', async ({ client }) => {\n  // highlight-start\n  hash.fake()\n  // highlight-end\n  \n  await UserFactory().createMany(20)    \n  const response = await client.get('users')\n\n  // highlight-start\n  hash.restore()\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in Exception Handler\nDESCRIPTION: Shows how to access the HTTP context in an exception handler class, where both handle and report methods receive the context as the second parameter, after the error object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  HttpContext,\n  HttpExceptionHandler\n} from '@adonisjs/core/http'\n\nexport default class ExceptionHandler extends HttpExceptionHandler {\n  async handle(error: unknown, ctx: HttpContext) {\n    return super.handle(error, ctx)\n  }\n\n  async report(error: unknown, ctx: HttpContext) {\n    return super.report(error, ctx)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AddressValidator Using Schema Refs for Dynamic Data (AdonisJS, TypeScript)\nDESCRIPTION: Optimizes dynamic validation by declaring runtime data references (refs) for use in schema definition, enabling schema caching and avoiding unnecessary recompilation. The AddressValidator employs schema.refs to inject the correct city options at runtime according to the user's selected state. Requires AdonisJS validation API with refs support and assumes that rules/types used accept ref values. Inputs for refs should be kept up to date with user input.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_caching.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class AddressValidator {\n  public selectedState = this.ctx.request.input('state')\n\n  // highlight-start\n  public refs = schema.refs({\n    cities: CITIES[this.selectedState] || []\n  })\n  // highlight-end\n\n  public schema = schema.create({\n    state: schema.enum(STATES),\n    // highlight-start\n    city: schema.enum(this.refs.cities)\n    // highlight-end\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Aliases for Bindings - AdonisJS Container - TypeScript\nDESCRIPTION: Demonstrates registering a singleton binding for a class, then assigning an alias to it. The alias allows resolving the binding by a string ('cache') instead of the class constructor. Useful for compatibility or refactoring. Requires AdonisJS container and relevant class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.app.container.singleton(MyFakeCache, async () => {\n  return new MyFakeCache()\n})\n\nthis.app.container.alias('cache', MyFakeCache)\n```\n\n----------------------------------------\n\nTITLE: Accessing Request ID in Route Handler\nDESCRIPTION: Demonstrates how to access the generated request ID within a route handler using the request.id() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/', ({ request }) => {\n  // ckk9oliws0000qt3x9vr5dkx7\n  console.log(request.id())\n})\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing from Redis Channels and Patterns in AdonisJS\nDESCRIPTION: Methods to unsubscribe from Redis channels and patterns in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nawait redis.unsubscribe('user:add')\nawait redis.punsubscribe('user:*add*')\n```\n\n----------------------------------------\n\nTITLE: Google OAuth Configuration in TypeScript\nDESCRIPTION: Configures Google OAuth settings in config/ally.ts using services.google. Inputs include clientId, clientSecret, and callbackUrl, along with Google-specific settings. Outputs a configuration object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  google: services.google({\n    clientId: '',\n    clientSecret: '',\n    callbackUrl: '',\n\n    // Google specific\n    prompt: 'select_account',\n    accessType: 'offline',\n    hostedDomain: 'adonisjs.com',\n    display: 'page',\n    scopes: ['userinfo.email', 'calendar.events'],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validation Messages for File Schema in AdonisJS (TypeScript)\nDESCRIPTION: This snippet provides an example of custom error messages for the file schema validator. Placeholders such as '{{ options.size }}' and '{{ options.extnames }}' are included for more informative message outputs based on the configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  'file.size': 'The file size must be under {{ options.size }}',\\n  'file.extname': 'The file must have one of {{ options.extnames }} extension names',\\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Session and Flash Data in Browser Tests\nDESCRIPTION: Code snippet showing how to retrieve all session data and flash messages from the current browser context.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nconst session = await browserContext.getSession()\nconst flashMessages = await browserContext.getFlashMessages()\n```\n\n----------------------------------------\n\nTITLE: Faking Specific Events in TypeScript\nDESCRIPTION: Shows how to fake specific events for testing, including both single and multiple event faking.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// Fakes only the user:registered event\nemitter.fake('user:registered')\n\n// Fake multiple events\nemitter.fake([UserRegistered, OrderUpdated])\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Rotation with pino-roll in AdonisJS\nDESCRIPTION: Configuration for implementing log rotation using the pino-roll package. This setup rotates logs daily and creates the directory structure if it doesn't exist.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\napp: {\n  enabled: true,\n  name: env.get('APP_NAME'),\n  level: env.get('LOG_LEVEL', 'info')\n\n  transport: {\n    targets: targets()\n      // highlight-start\n      .push({\n        target: 'pino-roll',\n        level: 'info',\n        options: {\n          file: '/var/log/apps/adonisjs.log',\n          frequency: 'daily',\n          mkdir: true\n        }\n      })\n      // highlight-end\n     .toArray()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Inertia Props Assertion in TypeScript\nDESCRIPTION: Shows how to verify exact props returned by the server using assertInertiaProps() method for Inertia responses.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\ntest('returns correct data', async ({ client }) => {\n  const response = await client.get('/home').withInertia()\n\n  response.assertInertiaProps({ user: { name: 'julien' } })\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Lifecycle Hooks in a Service Provider for AdonisJS\nDESCRIPTION: This example demonstrates how to create a service provider class with various lifecycle hook methods including register, boot, start, ready, and shutdown.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application_lifecycle.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationService } from '@adonisjs/core/types'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationService) {}\n  \n  register() {\n  }\n  \n  async boot() {\n  }\n  \n  async start() {\n  }\n  \n  async ready() {\n  }\n  \n  async shutdown() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Origin Options\nDESCRIPTION: Example of configuring the origin property to allow the request's current origin.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  origin: true\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Template Cache Usage\nDESCRIPTION: Example of using the cache service within Edge templates to retrieve cached values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/cache.md#2025-04-22_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n<p>\n  Hello {{ await cache.get('username') }}\n</p>\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation Formatter\nDESCRIPTION: Shows how to configure and integrate a custom translation formatter in the AdonisJS i18n config file using the formatter's factory function.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/i18n'\nimport { fluentFormatter } from 'my-custom-package'\n\nconst i18nConfig = defineConfig({\n  formatter: fluentFormatter()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis with Unix Socket in AdonisJS\nDESCRIPTION: Configuration for Redis using a Unix socket instead of host and port in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport env from '#start/env'\nimport { defineConfig } from '@adonisjs/redis'\n\nconst redisConfig = defineConfig({\n  connection: 'main',\n  connections: {\n    main: {\n      path: env.get('REDIS_SOCKET_PATH'),\n      db: 0,\n      keyPrefix: '',\n    },\n  },\n})\n\nexport default redisConfig\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Validation for Limiter Store\nDESCRIPTION: Schema validation for the LIMITER_STORE environment variable to ensure it's set to one of the supported storage options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  LIMITER_STORE: Env.schema.enum(['redis', 'database', 'memory'] as const),\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Drive Service Provider\nDESCRIPTION: Configuration to register the Drive service provider in the adonisrc.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/drive.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/drive/drive_provider'),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Boot Method Implementation\nDESCRIPTION: Example showing how to implement the boot method to extend container bindings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class AppProvider {\n  async boot() {\n   const validator = await this.app.container.make('validator')\n    \n   // Add custom validation rules\n   validator.rule('foo', () => {})\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting AdonisJS Development Server with HMR using Shell\nDESCRIPTION: Runs the AdonisJS development server using the Ace command-line tool. The `--hmr` flag enables Hot Module Replacement, which updates parts of the application in real-time without a full server restart, improving the development workflow.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnode ace serve --hmr\n```\n\n----------------------------------------\n\nTITLE: Generating Slugs in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates how to use the slug helper to create URL-friendly slugs from strings, including custom replacements for Unicode characters.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nconsole.log(string.slug('hello ♥ world'))\n// hello-love-world\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.slug.extend({ '☢': 'radioactive' })\n\nconsole.log(string.slug('unicode ♥ is ☢'))\n// unicode-love-is-radioactive\n```\n\n----------------------------------------\n\nTITLE: Rendering Inertia Views in AdonisJS Routes\nDESCRIPTION: Demonstrates how to use the router.on().renderInertia() method to render Inertia views directly from routes. This shortcut is available when the Inertia service provider is configured.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.on('/').renderInertia('home')\nrouter.on('about').renderInertia('about', { title: 'About us' })\nrouter.on('contact').renderInertia('contact', { title: 'Contact us' })\n```\n\n----------------------------------------\n\nTITLE: Importing Schema and Rules from AdonisJS Validator (TypeScript)\nDESCRIPTION: Imports the `schema` object for defining data structure and types, and the `rules` object for applying additional validation constraints (like email format, uniqueness) from the `@adonisjs/core/legacy/validator` module.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { schema, rules } from '@adonisjs/core/legacy/validator'\n```\n```\n\n----------------------------------------\n\nTITLE: Executing Custom Redis Commands Across Connections - TypeScript\nDESCRIPTION: Shows how to execute a previously registered Lua command ('release') using the AdonisJS Redis service's 'runCommand' method. Keys and arguments are provided in sequence following the command name. Outputs are returned from the Lua script on the Redis server. No additional dependencies beyond '@adonisjs/redis/services/main'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nredis.runCommand(\\n  'release', // command name\\n  'jobs:completed', // key 1\\n  'jobs:running', // key 2\\n  '11023', // argv 1\\n  100 // argv 2\\n)\n```\n\n----------------------------------------\n\nTITLE: Using @inject Decorator for Dependency Injection in TypeScript\nDESCRIPTION: Shows how to use the @inject decorator to enable automatic dependency resolution for the HomeController.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport EchoService from '#services/echo_service'\nimport { inject } from '@adonisjs/core'\n\n@inject()\nexport default class HomeController {\n  constructor(protected echo: EchoService) {\n  }\n  \n  handle() {\n    return this.echo.respond()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Authorization Finished Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'authorization:finished' event which is dispatched by the @adonisjs/bouncer package after an authorization check has been performed, providing user, response, parameters, and action details.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('authorization:finished', (event) => {\n  console.log(event.user)\n  console.log(event.response)\n  console.log(event.parameters)\n  console.log(event.action) \n})\n```\n\n----------------------------------------\n\nTITLE: Redis Store Configuration Options\nDESCRIPTION: Configuration options for the Redis store, including connection name and error handling settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  redis: stores.redis({\n    connectionName: 'main',\n    rejectIfRedisNotReady: false,\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Resource Routes in AdonisJS\nDESCRIPTION: Shows how to selectively register specific routes using only() and except() methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .resource('posts', PostsController)\n  .only(['index', 'store', 'destroy'])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .resource('posts', PostsController)\n  .except(['destroy'])\n```\n\n----------------------------------------\n\nTITLE: Rendering Tables in Ace Commands (TypeScript)\nDESCRIPTION: Shows how to create and render tables using the ui.table method in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  async run() {\n    const table = this.ui.table()\n    \n    table\n      .head([\n        'Migration',\n        'Duration',\n        'Status',\n      ])\n      .row([\n        '1590591892626_tenants.ts',\n        '2ms',\n        'DONE'\n      ])\n      .row([\n        '1590595949171_entities.ts',\n        '2ms',\n        'DONE'\n      ])\n      .render()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AdonisJS Logger in TypeScript\nDESCRIPTION: Demonstrates the configuration setup for the AdonisJS logger in the config/logger.ts file. It shows how to define the default logger and configure multiple loggers if needed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport env from '#start/env'\nimport { defineConfig } from '@adonisjs/core/logger'\n\nexport default defineConfig({\n  default: 'app',\n  \n  loggers: {\n    app: {\n      enabled: true,\n      name: env.get('APP_NAME'),\n      level: env.get('LOG_LEVEL', 'info')\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Named Middleware with Codemods in AdonisJS\nDESCRIPTION: Using the codemods API to register named middleware to the kernel.ts file with error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nconst codemods = await command.createCodemods()\n\ntry {\n  await codemods.registerMiddleware('named', [\n    {\n      name: 'auth',\n      path: '@adonisjs/auth/auth_middleware'\n    }\n  ])\n} catch (error) {\n  console.error('Unable to register middleware')\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Authenticated User via auth.user in AdonisJS Route\nDESCRIPTION: This snippet shows how to access the authenticated user's data within a route handler protected by the `auth` middleware. The `auth.user` property on the HTTP context (`{ auth }`) holds the instance of the authenticated user model. The non-null assertion operator (`!`) is used on `auth.user!.email` because the middleware guarantees that `auth.user` will be populated if the handler is reached.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/basic_auth_guard.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { middleware } from '#start/kernel'\nimport router from '@adonisjs/core/services/router'\n\nrouter\n  .get('dashboard', ({ auth }) => {\n    return `You are authenticated as ${auth.user!.email}`\n  })\n  .use(middleware.auth({\n    guards: ['basicAuth']\n  }))\n```\n```\n\n----------------------------------------\n\nTITLE: Providing Contextual Dependencies for Specific Classes - AdonisJS Service Provider - TypeScript\nDESCRIPTION: Defines context-specific dependency resolution by binding certain providers ('Disk') differently for different classes ('UserService', 'PostService'). The 'provide' callback configures the disk driver ('gcs' or 's3') contextually. Code is placed in a service provider's 'register' method. Requires AdonisJS app, container, and the '@adonisjs/drive' dependency.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Disk } from '@adonisjs/drive'\nimport UserService from '#services/user_service'\nimport PostService from '#services/post_service'\nimport { ApplicationService } from '@adonisjs/core/types'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationService) {}\n\n  register() {\n    this.app.container\n      .when(UserService)\n      .asksFor(Disk)\n      .provide(async (resolver) => {\n        const driveManager = await resolver.make('drive')\n        return drive.use('gcs')\n      })\n\n    this.app.container\n      .when(PostService)\n      .asksFor(Disk)\n      .provide(async (resolver) => {\n        const driveManager = await resolver.make('drive')\n        return drive.use('s3')\n      })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Organizing Tests with Test Groups in Japa\nDESCRIPTION: Example of grouping related tests using Japa's test.group method to better organize test cases focused on user creation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\nimport User from '#models/User'\nimport hash from '@adonisjs/core/services/hash'\n\n// highlight-start\ntest.group('creating user', () => {\n// highlight-end\n  test('hashes user password', async ({ assert }) => {\n    const user = new User()\n    user.password = 'secret'\n    \n    await user.save()\n    \n    assert.isTrue(hash.isValidHash(user.password))\n    assert.isTrue(await hash.verify(user.password, 'secret'))\n  })\n// highlight-start\n})\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Text Input Prompt Examples\nDESCRIPTION: Various examples of using text input prompts with validation and default values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.ask('Enter the model name')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.ask('Enter the model name', {\n  validate(value) {\n    return value.length > 0\n  }\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.ask('Enter the model name', {\n  default: 'User'\n})\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with HMR in AdonisJS\nDESCRIPTION: Command to start the AdonisJS development server with Hot Module Replacement enabled using the --hmr flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/hmr.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace serve --hmr\n```\n\n----------------------------------------\n\nTITLE: Defining Routes in AdonisJS\nDESCRIPTION: This TypeScript snippet demonstrates how to define routes in AdonisJS to handle GET and POST requests for article creation and storage. It uses the AdonisJS router to map URLs to controller actions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nconst ArticlesController = () => import('#controllers/articles_controller')\n\nrouter\n  .get('articles/create', [ArticlesController, 'create'])\n  .as('articles.create')\n\nrouter\n  .post('articles', [ArticlesController, 'store'])\n  .as('articles.store')\n```\n\n----------------------------------------\n\nTITLE: Decrementing Request Count\nDESCRIPTION: Shows how to decrease the request count after processing a job to free up slots for other workers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport limiter from '@adonisjs/limiter/services/main'\n\nconst jobsLimiter = limiter.use({\n  requests: 2,\n  duration: '5 mins',\n})\n\nawait jobsLimiter.attempt('unique_key', async () => {\n  await processJob()\n\n  /**\n   * Decrement the consumed requests after we are done\n   * processing the job. This will allow other workers\n   * to use the slot.\n   */\n  await jobsLimiter.decrement('unique_key')\n})\n```\n\n----------------------------------------\n\nTITLE: Custom IP Resolution in AdonisJS\nDESCRIPTION: Demonstrates how to implement a custom getIp method for IP address resolution.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport const http = defineConfig({\n  getIp(request) {\n    const ip = request.header('X-Real-Ip')\n    if (ip) {\n      return ip\n    }\n\n    return request.ips()[0]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Token Generation in TypeScript\nDESCRIPTION: Adds token generation functionality to the JwtGuard class using the jsonwebtoken package, including secret key handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport jwt from 'jsonwebtoken'\n\nexport type JwtGuardOptions = {\n  secret: string\n}\n\nexport class JwtGuard<UserProvider extends JwtUserProviderContract<unknown>>\n  implements GuardContract<UserProvider[typeof symbols.PROVIDER_REAL_USER]>\n{\n  #userProvider: UserProvider\n  #options: JwtGuardOptions\n\n  constructor(\n    userProvider: UserProvider,\n    options: JwtGuardOptions\n  ) {\n    this.#userProvider = userProvider\n    this.#options = options\n  }\n\n  async generate(\n    user: UserProvider[typeof symbols.PROVIDER_REAL_USER]\n  ) {\n    const providerUser = await this.#userProvider.createUserForGuard(user)\n    const token = jwt.sign({ userId: providerUser.getId() }, this.#options.secret)\n\n    return {\n      type: 'bearer',\n      token: token\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Redis Commands on a Specific Connection Instance - TypeScript\nDESCRIPTION: Demonstrates running a custom Lua command ('release') on a named Redis connection ('jobs') using 'connection().runCommand'. This allows targeting a specific connection within an AdonisJS application for executing custom commands. Requires '@adonisjs/redis/services/main'; inputs are command name, keys, and arguments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nredis.connection('jobs').runCommand(\\n  'release', // command name\\n  'jobs:completed', // key 1\\n  'jobs:running', // key 2\\n  '11023', // argv 1\\n  100 // argv 2\\n)\n```\n\n----------------------------------------\n\nTITLE: Basic Service Provider Class Structure\nDESCRIPTION: Basic implementation of a service provider class showing the constructor with application service injection.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationService } from '@adonisjs/core/types'\n\nexport default class AppProvider {\n  constructor(protected app: ApplicationService) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing AdonisJS env Module to Edge Templates - TypeScript\nDESCRIPTION: Demonstrates registering the AdonisJS env module as a global in Edge server-side templates for access to environment variables in SSR rendered templates. Requires AdonisJS with Edge template engine installed and configured. Uses edge.global to inject env globally; only available server-side and not exposed to browsers for security.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/view.ts\nimport env from '#start/env'\nimport edge from 'edge.js'\n\nedge.global('env', env)\n```\n\n----------------------------------------\n\nTITLE: Mobile Number Validation in AdonisJS\nDESCRIPTION: Validates phone numbers with optional locale and strict mode support.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  mobile: schema.string([\n    rules.mobile()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Database Migration for Remember Me Tokens\nDESCRIPTION: Create a new database migration using the AdonisJS Ace CLI to set up a table for storing Remember Me tokens.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:migration remember_me_tokens\n```\n\n----------------------------------------\n\nTITLE: Reporting Task Progress in Ace Commands (TypeScript)\nDESCRIPTION: Demonstrates how to report progress for individual tasks in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst sleep = () => new Promise<void>((resolve) => setTimeout(resolve, 50))\nconst tasks = this.ui.tasks()\nawait tasks\n  .add('clone repo', async (task) => {\n    for (let i = 0; i <= 100; i = i + 2) {\n      await sleep()\n      task.update(`Downloaded ${i}%`)\n    }\n\n    return 'Completed'\n  })\n  .run()\n```\n\n----------------------------------------\n\nTITLE: Environment-Specific Provider Configuration\nDESCRIPTION: Example of configuring a service provider to run only in specific environments like web and repl.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    () => import('@adonisjs/core/providers/app_provider'),\n    {\n      file: () => import('./providers/app_provider.js'),\n      environment: ['web', 'repl']\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Flag Aliases in AdonisJS Ace Command\nDESCRIPTION: This snippet shows how to define aliases for flags, allowing shorthand usage with a single hyphen.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n@flags.boolean({\n  alias: ['r']\n})\ndeclare resource: boolean\n\n@flags.boolean({\n  alias: ['s']\n})\ndeclare singular: boolean\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS i18n Package\nDESCRIPTION: Command to install and configure the @adonisjs/i18n package in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/i18n\n```\n\n----------------------------------------\n\nTITLE: Correct: Accessing HTTP Context Inside a Method\nDESCRIPTION: This TypeScript snippet demonstrates the correct way to access the HTTP context using AsyncLocalStorage in AdonisJS. `HttpContext.getOrFail()` is called *inside* the controller method (`index`). This ensures that the context retrieved corresponds to the specific request being handled by that method call, avoiding issues related to module caching.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class UsersController {\n  async index() {\n    const ctx = HttpContext.getOrFail()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Request-Aware Logger in HTTP Context\nDESCRIPTION: Shows how to use the ctx.logger property during HTTP requests, which adds the current request ID to every log statement.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nimport User from '#models/user'\n\nrouter.get('/users/:id', async ({ logger, params }) => {\n  logger.info('Fetching user by id %s', params.id)\n  const user = await User.find(params.id)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Edge to Implement Form Method Spoofing\nDESCRIPTION: This Edge snippet illustrates utilizing 'route.put' and 'route.delete' helpers to create forms that can spoof methods like PUT and DELETE when submitted.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_7\n\nLANGUAGE: Edge\nCODE:\n```\n<form\n  method=\"POST\"\n  action=\"{{ route.put('articles.update', [article.id]) }}\"\n>\n  <!-- Update form -->\n</form>\n```\n\nLANGUAGE: Edge\nCODE:\n```\n<form\n  method=\"POST\"\n  action=\"{{ route.delete('articles.destroy', [article.id]) }}\"\n>\n  <!-- Delete form -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Validating Enum Choices with AdonisJS Schema (TypeScript)\nDESCRIPTION: This snippet demonstrates validating a property as a value from a discrete list of options using the 'schema.enum' method. The input must match one of the specified string constants, and the validated result will be a union of these string values. Requires 'schema' from the AdonisJS validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  account_type: schema.enum(\\n    ['twitter', 'github', 'instagram'] as const\\n  )\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing AdonisJS Helpers in TypeScript\nDESCRIPTION: Shows how to import the helper methods from the AdonisJS core modules. These helpers are bundled with the framework and don't add additional dependencies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport is from '@adonisjs/core/helpers/is'\nimport * as helpers from '@adonisjs/core/helpers'\nimport string from '@adonisjs/core/helpers/string'\n```\n\n----------------------------------------\n\nTITLE: Validating Enum as Optional in AdonisJS (TypeScript)\nDESCRIPTION: This snippet marks an enum property as optional, so the field is removed if undefined or null during validation. Uses the '.optional' method chained to the enum schema definition. Accepts runtime enum values as options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  account_type: schema.enum.optional(Object.values(SocialAccounts))\\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to cache:miss Event in AdonisJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to listen for the 'cache:miss' event, which is dispatched when a cache key is not found in the cache store. The event object contains the key that was not found.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('cache:miss', (event) => {\n  console.log(event.key)\n})\n```\n\n----------------------------------------\n\nTITLE: Quitting Redis Connections in AdonisJS\nDESCRIPTION: Methods to quit or forcefully disconnect Redis connections in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\n\nawait redis.quit('main') // Quit the main connection\nawait redis.disconnect('main') // Force quit the main connection\n```\n\n----------------------------------------\n\nTITLE: Registering Browser Test Suite in AdonisJS Configuration\nDESCRIPTION: Configuration snippet for adding a dedicated browser test suite in the adonisrc.ts file, specifying file patterns, suite name, and timeout settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  tests: {\n    suites: [\n      // highlight-start\n      {\n        files: [\n          'tests/browser/**/*.spec(.ts|.js)'\n        ],\n        name: 'browser',\n        timeout: 300000\n      }\n      // highlight-end\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Array Length Validation in AdonisJS\nDESCRIPTION: Demonstrates array validation with minimum and maximum length constraints.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema\n    .array([\n      rules.minLength(1),\n      rules.maxLength(5)\n    ])\n    .members(schema.number()),  \n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Table Truncation for Test Runs in AdonisJS\nDESCRIPTION: This code snippet shows how to set up table truncation after each test run cycle. This approach is faster than full migrations since it preserves the schema but clears all data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/database.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: tests/bootstrap.ts\nimport testUtils from '@adonisjs/core/services/test_utils'\n\nexport const runnerHooks: Required<Pick<Config, 'setup' | 'teardown'>> = {\n  setup: [\n    () => testUtils.db().truncate(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Swapping a Service with a Fake Implementation for Tests - AdonisJS TypeScript\nDESCRIPTION: Demonstrates swapping an actual service class ('UserService') for a fake implementation during tests by using the 'app.container.swap' method. The fake implementation overrides relevant methods for deterministic test behavior. This enables isolated testing without side effects and can be restored later.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_19\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport UserService from '#services/user_service'\n// insert-start\nimport app from '@adonisjs/core/services/app'\n// insert-end\n\ntest('get all users', async ({ client }) => {\n  // insert-start\n  class FakeService extends UserService {\n    all() {\n      return [{ id: 1, username: 'virk' }]\n    }\n  }\n    \n  app.container.swap(UserService, () => {\n    return new FakeService()\n  })\n  // insert-end\n  \n  const response = await client.get('users')\n  response.assertBody({\n    data: [{ id: 1, username: 'virk' }]\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Codemods API in AdonisJS Commands\nDESCRIPTION: Basic setup for using the codemods API within an AdonisJS configuration command, creating an instance of the Codemods class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nimport type Configure from '@adonisjs/core/commands/configure'\n\nexport async function configure(command: ConfigureCommand) {\n  const codemods = await command.createCodemods()\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Prompt Usage in AdonisJS Command\nDESCRIPTION: Example showing how to use basic text prompt in an AdonisJS command class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  async run() {\n    const modelName = await this.prompt.ask('Enter the model name')\n    \n    console.log(modelName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Initiated Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session:initiated' event which is emitted by the @adonisjs/session package when a session store is initiated during an HTTP request. The event provides the Session class instance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session:initiated', (event) => {\n  console.log(`Initiated store for ${event.session.sessionId}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Event Listener in AdonisJS\nDESCRIPTION: This command creates a new event listener class in the app/listeners directory. It follows specific naming conventions and can optionally generate an associated event class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:listener sendShipmentNotification\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:listener sendShipmentNotification --event=shipment_received\n```\n\n----------------------------------------\n\nTITLE: Dynamic CORS Headers Function\nDESCRIPTION: Example of using a function to dynamically compute which headers to allow during HTTP requests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n{\n  headers: (requestHeaders, ctx) => {\n    return true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Only Shared Props Types in React with Inertia.js\nDESCRIPTION: Example of accessing only the shared props types in a React component using the SharedProps type and the usePage hook from Inertia.js.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { SharedProps } from '@adonisjs/inertia/types'\n\nconst page = usePage<SharedProps>()\n```\n\n----------------------------------------\n\nTITLE: Defining Conditional Transport Targets in AdonisJS Logger\nDESCRIPTION: Demonstrates how to use the targets helper to define conditional transport targets based on the application environment. This approach provides a cleaner and more readable configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { targets, defineConfig } from '@adonisjs/core/logger'\n\nloggers: {\n  app: {\n    transport: {\n      targets: targets()\n       .pushIf(app.inDev, targets.pretty())\n       .pushIf(app.inProduction, targets.file())\n       .toArray()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Rules to Enum Schema in AdonisJS (TypeScript)\nDESCRIPTION: This code attaches validation rules to an enum field by passing a rules array as the second argument to 'schema.enum'. Example uses the 'rules.unique' rule for checking database uniqueness among specified table/column. Requires both 'schema' and 'rules' from AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  account_type: schema.enum(Object.values(SocialAccounts), [\\n    rules.unique({\\n      table: 'user_social_accounts',\\n      column: 'service',\\n    }),\\n  ])\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Form Method Spoofing in AdonisJS\nDESCRIPTION: This TypeScript snippet shows how to enable form method spoofing in AdonisJS by modifying the 'config/app.ts' file. Form method spoofing allows the use of RESTful HTTP methods beyond 'GET' and 'POST' in HTML forms.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n// title: config/app.ts\nexport const http = defineConfig({\n  allowMethodSpoofing: true\n})\n```\n\n----------------------------------------\n\nTITLE: Handling E_HTTP_EXCEPTION in TypeScript\nDESCRIPTION: Example of importing and checking for generic HTTP exception. This exception can be used for handling various HTTP-related errors.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_HTTP_EXCEPTION) {\n  // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Schema with TypeScript Enum\nDESCRIPTION: Example of enum schema validation using TypeScript enum type and additional rules.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/schema_101.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/validator'\n\n{\n  account_type: schema.enum(Object.values(SocialAccounts), [\n    rules.unique({\n      table: 'user_social_accounts',\n      column: 'service',\n    }),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Validating String as Nullable in AdonisJS (TypeScript)\nDESCRIPTION: Here, the string property can be explicitly set to null, with its existence still required in the input. Chains '.nullable' on the string schema for nullable string validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  title: schema.string.nullable()\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Cleanup for AdonisJS Custom Commands\nDESCRIPTION: Set up a cleanup process for a custom Ace command that runs before the application terminates.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/creating_commands.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\nimport { CommandOptions } from '@adonisjs/core/types/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  static options: CommandOptions = {\n    staysAlive: true\n  }\n  \n  prepare() {\n    this.app.terminating(() => {\n      // perform the cleanup\n    })\n  }\n  \n  async run() {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Edge.js Template in AdonisJS\nDESCRIPTION: This command generates a new Edge.js template file in the resources/views directory. Templates should be grouped by resource in subdirectories.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:view posts/create\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:view posts/list\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variable File Path at Runtime with ENV_PATH - sh\nDESCRIPTION: Shows how to control the source of environment variables at runtime using the ENV_PATH variable in shell. The first command runs the application using the default .env in the project root, while the second reads .env from a custom path (/etc/secrets). Useful for production and deployment workflows requiring secrets outside the codebase.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\n# Attempts to read .env file from project root\nnode server.js\n\n# Reads the .env file from the \"/etc/secrets\" directory\nENV_PATH=/etc/secrets node server.js\n```\n\n----------------------------------------\n\nTITLE: Using Secret Class to Handle Sensitive Data in Logs\nDESCRIPTION: Alternative approach to redaction using the Secret class to wrap sensitive values. This automatically handles redaction of the wrapped values when they are logged.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Secret } from '@adonisjs/core/helpers'\n\nconst username = request.input('username')\nconst password = new Secret(request.input('password'))\n\nlogger.info({ username, password }, 'user signup')\n// output: {\"username\":\"virk\",\"password\":\"[redacted]\",\"msg\":\"user signup\"}\n```\n\n----------------------------------------\n\nTITLE: Using the Route Helper in Browser Tests\nDESCRIPTION: Example of using the route helper to generate URLs in tests based on route names, making tests more resilient to route changes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\ntest('see list of users', async ({ visit, route }) => {\n  const page = await visit(\n    // highlight-start\n    route('users.list')\n    // highlight-end\n  )\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Date with Custom Format in AdonisJS (TypeScript)\nDESCRIPTION: This snippet validates a date field with a specific expected string format, as supported by Luxon. By providing the 'format' option, it enforces the format at the validator level, ensuring proper parsing and type safety.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  published_at: schema.date({\\n    format: 'yyyy-MM-dd HH:mm:ss',\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Publishing Redis Messages in AdonisJS\nDESCRIPTION: Example of publishing a message to a Redis channel in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nredis.publish(\n  'user:add',\n  JSON.stringify({\n    id: 1,\n    username: 'virk',\n  })\n)\n```\n\n----------------------------------------\n\nTITLE: Writing Basic Test for User Password Hashing in AdonisJS\nDESCRIPTION: Example of writing a test that verifies user password hashing functionality, using Japa's test function and assert plugin.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { test } from '@japa/runner'\n\nimport User from '#models/User'\nimport hash from '@adonisjs/core/services/hash'\n\ntest('hashes user password when creating a new user', async ({ assert }) => {\n  const user = new User()\n  user.password = 'secret'\n  \n  await user.save()\n  \n  assert.isTrue(hash.isValidHash(user.password))\n  assert.isTrue(await hash.verify(user.password, 'secret'))\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Inertia Response Properties in TypeScript\nDESCRIPTION: Shows how to access the raw component and props data from an Inertia response object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\ntest('returns correct data', async ({ client }) => {\n  const response = await client.get('/home').withInertia()\n\n  // 👇 The component returned by the server\n  console.log(response.inertiaComponent) \n\n  // 👇 The props returned by the server\n  console.log(response.inertiaProps)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring X-Frame Protection in AdonisJS Shield (TypeScript)\nDESCRIPTION: This snippet shows how to configure the X-Frame-Options header in the AdonisJS Shield package. It enables the xFrame guard and sets the action to 'DENY', preventing the page from being displayed in a frame.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/shield'\n\nconst shieldConfig = defineConfig({\n  xFrame: {\n    enabled: true,\n    action: 'DENY'\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing JWT Guard Class in TypeScript\nDESCRIPTION: Creates the JwtGuard class implementing the GuardContract interface, defining core authentication methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { symbols } from '@adonisjs/auth'\nimport { AuthClientResponse, GuardContract } from '@adonisjs/auth/types'\n\nexport class JwtGuard<UserProvider extends JwtUserProviderContract<unknown>>\n  implements GuardContract<UserProvider[typeof symbols.PROVIDER_REAL_USER]>\n{\n  declare [symbols.GUARD_KNOWN_EVENTS]: {}\n  driverName: 'jwt' = 'jwt'\n  authenticationAttempted: boolean = false\n  isAuthenticated: boolean = false\n  user?: UserProvider[typeof symbols.PROVIDER_REAL_USER]\n\n  async generate(user: UserProvider[typeof symbols.PROVIDER_REAL_USER]) {}\n  async authenticate(): Promise<UserProvider[typeof symbols.PROVIDER_REAL_USER]> {}\n  async check(): Promise<boolean> {}\n  getUserOrFail(): UserProvider[typeof symbols.PROVIDER_REAL_USER] {}\n  async authenticateAsClient(\n    user: UserProvider[typeof symbols.PROVIDER_REAL_USER]\n  ): Promise<AuthClientResponse> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Auth Authentication Succeeded Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session_auth:authentication_succeeded' event which is dispatched after the request session has been validated and the user is logged in, providing user details.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session_auth:authentication_succeeded', (event) => {\n  console.log(event.guardName)\n  console.log(event.sessionId)\n\n  console.log(event.user)\n  console.log(event.rememberMeToken) // if authenticated using token\n})\n```\n\n----------------------------------------\n\nTITLE: Asserting Specific Exit Code\nDESCRIPTION: Shows how to assert that a command exited with a specific exit code.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\nawait command.exec()\ncommand.assertExitCode(2)\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection with AdonisJS Logger\nDESCRIPTION: Demonstrates how to use dependency injection to inject the Logger instance into a class. This approach allows for easy testing and decoupling of components.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { inject } from '@adonisjs/core'\nimport { Logger } from '@adonisjs/core/logger'\n\n@inject()\nclass UserService {\n  constructor(protected logger: Logger) {}\n\n  async find(userId: string | number) {\n    this.logger.info('Fetching user by id %s', userId)\n    const user = await User.find(userId)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring SSR Allowlist for Inertia.js in AdonisJS\nDESCRIPTION: Configuration for specifying which pages should be server-side rendered in an Inertia.js application, using either an array of page names or a function for dynamic determination.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/inertia'\n\nexport default defineConfig({\n  ssr: {\n    enabled: true,\n    pages: ['home']\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Domain-Specific Routes in AdonisJS\nDESCRIPTION: Shows how to define routes under a specific domain using the router.group() method with domain constraint.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\nconst PostsController = () => import('#controllers/posts_controller')\n\nrouter.group(() => {\n  router\n    .get('/posts/:id', [PostsController, 'show'])\n    .as('posts.show')\n}).domain('blog.adonisjs.com')\n```\n\n----------------------------------------\n\nTITLE: React SSR Server Entrypoint for Inertia.js in AdonisJS\nDESCRIPTION: Server-side rendering entrypoint configuration for React with Inertia.js, defining the server rendering function and page resolution mechanism.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport ReactDOMServer from 'react-dom/server'\nimport { createInertiaApp } from '@inertiajs/react'\n\nexport default function render(page) {\n  return createInertiaApp({\n    page,\n    render: ReactDOMServer.renderToString,\n    resolve: (name) => {\n      const pages = import.meta.glob('./pages/**/*.tsx', { eager: true })\n      return pages[`./pages/${name}.tsx`]\n    },\n    setup: ({ App, props }) => <App {...props} />,\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Tasks in Ace Commands (TypeScript)\nDESCRIPTION: Shows how to create and manage tasks with progress reporting in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  async run() {\n    const tasks = this.ui.tasks()\n\n    await tasks\n      .add('clone repo', async (task) => {\n        return 'Completed'\n      })\n      .add('update package file', async (task) => {\n        return task.error('Unable to update package file')\n      })\n      .add('install dependencies', async (task) => {\n        return 'Installed'\n      })\n      .run()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to cache:hit Event in AdonisJS (TypeScript)\nDESCRIPTION: This snippet illustrates how to listen for the 'cache:hit' event, which is dispatched when a cache key is found in the cache store. The event object contains both the key and its corresponding value.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('cache:hit', (event) => {\n  console.log(event.key)\n  console.log(event.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Adding getters to framework classes\nDESCRIPTION: Example of adding a getter property to the Request class to check for request IDs. Demonstrates the basic syntax for defining getters that are lazily evaluated properties.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/extending_the_framework.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Request } from '@adonisjs/core/http'\n\nRequest.getter('hasRequestId', function (this: Request) {\n  return this.header('x-request-id')\n})\n\n// you can use the property as follows.\nif (ctx.request.hasRequestId) {\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AdonisJS Project from Specific Git Ref using Shell\nDESCRIPTION: Illustrates how to specify a particular branch, tag, or commit when creating an AdonisJS project from a custom starter kit repository. This is done by appending `#ref` (e.g., `#develop`, `#v2.1.0`) to the repository path in the `-K` flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# Branch\nnpm init adonisjs@latest -- -K=\"user/repo#develop\"\n\n# Tag\nnpm init adonisjs@latest -- -K=\"user/repo#v2.1.0\"\n```\n\n----------------------------------------\n\nTITLE: Blocking Keys Manually\nDESCRIPTION: Demonstrates how to manually block a key for a specific duration using the block method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nconst requestsLimiter = limiter.use({\n  requests: 10,\n  duration: '1 minute',\n})\n\nawait requestsLimiter.block('a_unique_key', '30 mins')\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Credentials Support\nDESCRIPTION: Example of enabling credentials support in CORS configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\n{\n  credentials: true\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Equality with equalTo Rule in AdonisJS\nDESCRIPTION: This snippet shows how to check if a field's value is equal to a specified value, suitable for fields affected by runtime changes using schema caching. Requires @ioc/Adonis/Core/Validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  country: schema.string({}, [\n    rules.equalTo('IN')\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class CreateUserValidator {\n  constructor(protected ctx: HttpContextContract) {}\n\n  // highlight-start\n  public refs = schema.refs({\n    teamsCountry: getTeamCountryFromSomeWhere(),\n  })\n\n  public schema = schema.create({\n    country: schema.string({}, [\n      rules.equalTo(this.refs.teamsCountry)\n    ]),\n  })\n  // highlight-end\n\n  public cacheKey = this.ctx.routeKey\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Preload File with Ace CLI for AdonisJS (Shell)\nDESCRIPTION: This shell command uses AdonisJS's Ace CLI to create a preload file named 'validator'. The preload file is set to initialize during the 'HTTP server' environment, facilitating the registration of custom validator rules globally at application startup. Dependencies: Ace CLI (part of AdonisJS), Node.js installed. Inputs: the command itself; Output: creates a TypeScript preload file at 'start/validator.ts'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:preload validator\n```\n\n----------------------------------------\n\nTITLE: Attaching Custom Rules to File Schema in AdonisJS (TypeScript)\nDESCRIPTION: This code illustrates how to attach custom rules to a file schema property by passing a rules array as the second argument. Although no built-in rules for files currently exist, an example with 'rules.dimensions' is shown for illustration. Assumes dependencies on both 'schema' and 'rules' from AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  cover_image: schema.file(\\n    {\\n      size: '2mb',\\n      extnames: ['jpg', 'gif', 'png'],\\n    },\\n    [\\n      // NOTE: This rule does not exists.\\n      rules.dimensions({ minWidth: 100, minHeight: 200 })\\n    ]\\n  ),\\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Storage Provider Implementation\nDESCRIPTION: Complete implementation of a custom MongoDB storage provider for rate limiting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\nimport { LimiterResponse } from '@adonisjs/limiter'\nimport {\n  LimiterStoreContract,\n  LimiterConsumptionOptions\n} from '@adonisjs/limiter/types'\n\n/**\n * A custom set of options you want to accept.\n */\nexport type MongoDbLimiterConfig = {\n  client: MongoDBConnection\n}\n\nexport class MongoDbLimiterStore implements LimiterStoreContract {\n  readonly name = 'mongodb'\n  declare readonly requests: number\n  declare readonly duration: number\n  declare readonly blockDuration: number\n\n  constructor(public config: MongoDbLimiterConfig & LimiterConsumptionOptions) {\n    this.request = this.config.requests\n    this.duration = string.seconds.parse(this.config.duration)\n    this.blockDuration = string.seconds.parse(this.config.blockDuration)\n  }\n\n  async consume(key: string | number): Promise<LimiterResponse> {}\n  async increment(key: string | number): Promise<LimiterResponse> {}\n  async decrement(key: string | number): Promise<LimiterResponse> {}\n  async block(key: string | number, duration: string | number): Promise<LimiterResponse> {}\n  async set(key: string | number, requests: number, duration?: string | number): Promise<LimiterResponse> {}\n  async delete(key: string | number): Promise<boolean> {}\n  async clear(): Promise<void> {}\n  async get(key: string | number): Promise<LimiterResponse | null> {}\n}\n```\n\n----------------------------------------\n\nTITLE: Using Logger Actions in Ace Commands (TypeScript)\nDESCRIPTION: Shows how to create and manage logger actions for displaying task states with consistent styling in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst createFile = this.logger.action('creating config/auth.ts')\n\ntry {\n  await performTasks()\n  createFile.displayDuration().succeeded()  \n} catch (error) {\n  createFile.failed(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Examples\nDESCRIPTION: Demonstrates date formatting using both native Date and Luxon DateTime objects.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\nimport i18nManager from '@adonisjs/i18n/services/main'\nimport { DateTime } from 'luxon'\n\ni18nManager\n  .locale('en')\n  .formatDate(new Date(), {\n    dateStyle: 'long'\n  })\n\n// Format luxon date time instance\ni18nManager\n  .locale('en')\n  .formatDate(DateTime.local(), {\n    dateStyle: 'long'\n  })\n```\n\n----------------------------------------\n\nTITLE: Handling E_MISSING_ARG Exception in TypeScript\nDESCRIPTION: Example of importing and checking for missing argument exception. This exception is raised when executing a command without defining required arguments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_MISSING_ARG) {\n  console.log(error.commandName)\n}\n```\n\n----------------------------------------\n\nTITLE: Validating File as Nullable and Optional in AdonisJS (TypeScript)\nDESCRIPTION: This snippet applies both 'nullable' and 'optional' modifiers to a file property, allowing the field to be nonexistent (undefined) or null. The object will not contain the field if undefined, and will preserve null or valid values as appropriate. The same file validation options are applied.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  cover_image: schema.file.nullableAndOptional({\\n    size: '2mb',\\n    extnames: ['jpg', 'gif', 'png'],\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Resource Validators in AdonisJS\nDESCRIPTION: Demonstrates creating a validator file with pre-defined validators for create and update actions. This is useful for resources that need validation for CRUD operations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:validator post --resource\n```\n\n----------------------------------------\n\nTITLE: Enum and EnumSet Rule Messages in AdonisJS Validation\nDESCRIPTION: This code provides custom messages for `enum` and `enumSet` validation rules, leveraging the `options.choices` to inform users of valid values within their input fields.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  'enum': 'The value must be one of {{ options.choices }}',\\n  'enumSet': 'The values must be one of {{ options.choices }}',\\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Number as Nullable and Optional in AdonisJS (TypeScript)\nDESCRIPTION: Here, the number schema accepts omitted (undefined) or explicitly null values, providing maximum flexibility for optional and nullable numeric properties. Both '.nullable' and '.optional' are chained.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  marks: schema.number.nullableAndOptional()\\n}\n```\n\n----------------------------------------\n\nTITLE: Translation Files Examples\nDESCRIPTION: Example JSON translation files for English and French languages showing basic message structure.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"greeting\": \"Hello world\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"greeting\": \"Bonjour le monde\"\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Auth Authentication Failed Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session_auth:authentication_failed' event which is dispatched when the authentication check fails and the user is not logged in during the current HTTP request.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session_auth:authentication_failed', (event) => {\n  console.log(event.guardName)\n  console.log(event.sessionId)\n\n  console.log(event.error)\n})\n```\n\n----------------------------------------\n\nTITLE: Discord OAuth Configuration in TypeScript\nDESCRIPTION: Sets up OAuth configuration for Discord in config/ally.ts file via services.discord. Inputs include clientId, clientSecret, and callbackUrl, along with Discord-specific options. Result is a configuration object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_13\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  discord: services.discord({\n    clientId: '',\n    clientSecret: '',\n    callbackUrl: '',\n\n    // Discord specific\n    prompt: 'consent' | 'none',\n    guildId: '',\n    disableGuildSelect: false,\n    permissions: 10,\n    scopes: ['identify', 'email'],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Number as Optional in AdonisJS (TypeScript)\nDESCRIPTION: This snippet marks a number property as optional so that undefined or null values are removed from the validated object. Chaining '.optional' to the number schema is useful for non-mandatory numeric input.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  marks: schema.number.optional()\\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Wildcard Event Listener in TypeScript\nDESCRIPTION: Example of removing a wildcard event listener using the offAny method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nemitter.offAny(callback)\n```\n\n----------------------------------------\n\nTITLE: Configuring File Logging with Pino in AdonisJS\nDESCRIPTION: Configuration for writing logs to a file using Pino's file transport target. This snippet demonstrates how to set up file logging with a specific destination path in the logger configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\napp: {\n  enabled: true,\n  name: env.get('APP_NAME'),\n  level: env.get('LOG_LEVEL', 'info')\n\n  transport: {\n    targets: targets()\n      .push({\n         transport: 'pino/file',\n         level: 'info',\n         options: {\n           destination: '/var/log/apps/adonisjs.log'\n         }\n      })\n      .toArray()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Client Plugin in Japa Bootstrap File\nDESCRIPTION: Code for registering the browserClient plugin in the Japa bootstrap file to enable browser testing capabilities with Playwright integration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { browserClient } from '@japa/browser-client'\n\nexport const plugins: Config['plugins'] = [\n  assert(),\n  apiClient(),\n  // highlight-start\n  browserClient({\n    runInSuites: ['browser']\n  }),\n  // highlight-end\n  pluginAdonisJS(app)\n]\n```\n\n----------------------------------------\n\nTITLE: Listening to Class-based Events in AdonisJS TypeScript\nDESCRIPTION: Displays the listening mechanism specific to class-based events using 'emitter.on'. Listener functions react to event class instances rather than string names.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\nimport UserRegistered from '#events/user_registered'\n\nemitter.on(UserRegistered, function (event) {\n  console.log(event.user)\n})\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing Events using Off Method in TypeScript\nDESCRIPTION: Shows how to remove event listeners using the emitter.off method by providing the event name and listener reference.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nfunction sendEmail () {}\n\n// Listen for event\nemitter.on('user:registered', sendEmail)\n\n// Remove listener\nemitter.off('user:registered', sendEmail)\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Session Package\nDESCRIPTION: The command installs the @adonisjs/session package using the detected package manager and sets up necessary configurations such as service providers and middleware.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/session\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Context in Middleware Class\nDESCRIPTION: Demonstrates how to access the HTTP context in a middleware class, where the handle method receives the context as the first parameter, with TypeScript type annotations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class AuthMiddleware {\n  async handle({ request, response }: HttpContext) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Store Configuration with Client Instance\nDESCRIPTION: Utilizes the DynamoDBClient instance to configure the DynamoDB store for session management, offering flexibility in session data handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { DynamoDBClient } from '@aws-sdk/client-dynamodb'\nconst client = new DynamoDBClient({})\n\nstores.dynamodb({\n  client,\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for Redis Cluster Node Removals - TypeScript\nDESCRIPTION: Sets up an event handler for 'node:removed', which signals when a node is removed from a Redis cluster. Useful for failed node detection and cluster topology management. Requires '@adonisjs/redis/services/main'; relevant for cluster-mode connections.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_31\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('node:removed', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Inertia Root Template Path\nDESCRIPTION: TypeScript configuration for specifying the root template path and implementing dynamic template selection based on request conditions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/inertia'\n\nexport default defineConfig({\n  rootView: 'app_root', \n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/inertia'\nimport type { HttpContext } from '@adonisjs/core/http'\n\nexport default defineConfig({\n  rootView: ({ request }: HttpContext) => {\n    if (request.url().startsWith('/admin')) {\n      return 'admin_root'\n    }\n\n    return 'app_root'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Japa Test Plugins for Inertia.js in AdonisJS\nDESCRIPTION: Bootstrap configuration for Japa tests with Inertia.js, registering the necessary plugins for API testing with Inertia.js endpoints.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\n// title: tests/bootstrap.ts\nimport { assert } from '@japa/assert'\nimport app from '@adonisjs/core/services/app'\nimport { pluginAdonisJS } from '@japa/plugin-adonisjs'\n// highlight-start\nimport { apiClient } from '@japa/api-client'\nimport { inertiaApiClient } from '@adonisjs/inertia/plugins/api_client'\n// highlight-end\n\nexport const plugins: Config['plugins'] = [\n  assert(), \n  pluginAdonisJS(app),\n  // highlight-start\n  apiClient(),\n  inertiaApiClient(app)\n  // highlight-end\n]\n```\n\n----------------------------------------\n\nTITLE: Listening to cache:written Event in AdonisJS (TypeScript)\nDESCRIPTION: This snippet shows how to listen for the 'cache:written' event, which is dispatched after a cache key has been written to the cache store. The event object contains both the key and the value that were written.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('cache:written', (event) => {\n  console.log(event.key)\n  console.log(event.value)\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript declaration merging for macros\nDESCRIPTION: Shows how to use TypeScript declaration merging to add type definitions for custom macros, ensuring proper IDE autocompletion and type checking for the extended method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/extending_the_framework.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: src/extensions.ts\ndeclare module '@adonisjs/core/http' {\n  interface Request {\n    wantsJSON(): boolean\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Object Schema Validation in AdonisJS\nDESCRIPTION: Demonstrates object validation with defined property types using schema.object().members().\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\n\n{\n  profile: schema.object().members({\n    username: schema.string(),\n    avatar_url: schema.string()\n  })\n}\n\n// Valid data: { profile: { username: 'virk', avatar_url: 'somefile.jpg' } }\n```\n\n----------------------------------------\n\nTITLE: Edge Template Translation Usage\nDESCRIPTION: Shows how to use the translation helper in Edge templates with select ordinal formatting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n{{ t('messages.anniversary_greeting', { years: 2 }) }}\n```\n\n----------------------------------------\n\nTITLE: Lazy-loading Event Listeners in AdonisJS TypeScript\nDESCRIPTION: Illustrates the approach of lazy loading listeners to improve boot performance, using dynamic imports for on-demand loading of listener classes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n// delete-start\nimport SendVerificationEmail from '#listeners/send_verification_email'\n// delete-end\n// insert-start\nconst SendVerificationEmail = () => import('#listeners/send_verification_email')\n// insert-end\n\nemitter.on('user:registered', [SendVerificationEmail, 'handle'])\n```\n\n----------------------------------------\n\nTITLE: Listening to Queued Mail Error Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'queued:mail:error' event which is dispatched when the MemoryQueue implementation is unable to send a queued email, providing error details and mailer name.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('queued:mail:error', (event) => {\n  console.log(event.error)\n  console.log(event.mailerName)\n})\n```\n\n----------------------------------------\n\nTITLE: Displaying Log Messages in Ace Commands (TypeScript)\nDESCRIPTION: Demonstrates how to use different logger methods to display various types of log messages in an Ace command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  async run() {\n    this.logger.debug('Something just happened')\n    this.logger.info('This is an info message')\n    this.logger.success('Account created')\n    this.logger.warning('Running out of disk space')\n\n    // Writes to stderr\n    this.logger.error(new Error('Unable to write. Disk full'))\n    this.logger.fatal(new Error('Unable to write. Disk full'))\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables with Codemods in AdonisJS\nDESCRIPTION: Using the codemods API to add new environment variables to .env and .env.example files with error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\nconst codemods = await command.createCodemods()\n\ntry {\n  await codemods.defineEnvVariables({\n    MY_NEW_VARIABLE: 'some-value',\n    MY_OTHER_VARIABLE: 'other-value'\n  })\n} catch (error) {\n  console.error('Unable to define env variables')\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Domain-Specific Routing in AdonisJS\nDESCRIPTION: Shows how to register routes for specific domains using the group.domain method. This example defines routes for a general domain and a specific blog subdomain.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.group(() => {\n  router.get('/users', () => {})\n  router.get('/payments', () => {})\n})\n\nrouter.group(() => {\n  router.get('/articles', () => {})\n  router.get('/articles/:id', () => {})\n}).domain('blog.adonisjs.com')\n```\n\n----------------------------------------\n\nTITLE: VSCode Debug Configuration with Test Support\nDESCRIPTION: Extended VSCode debug configuration that includes both development server and test debugging capabilities.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/debugging.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Dev server\",\n      \"program\": \"${workspaceFolder}/ace.js\",\n      \"args\": [\"serve\", \"--hmr\"],\n      \"skipFiles\": [\"<node_internals>/**\"]\n    },\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Tests\",\n      \"program\": \"${workspaceFolder}/ace.js\",\n      \"args\": [\"test\", \"--watch\"],\n      \"skipFiles\": [\"<node_internals>/**\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using @flashMessage Tag\nDESCRIPTION: Using the @flashMessage tag for a more concise way to check and display flash messages. This example shows the improved syntax compared to manual if-checks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_14\n\nLANGUAGE: edge\nCODE:\n```\n@flashMessage('notification')\n  <div class=\"notification {{ $message.type }}\">\n    {{ $message.message }}\n  </div>\n@end\n```\n\n----------------------------------------\n\nTITLE: Attaching Rules to Number Validation in AdonisJS (TypeScript)\nDESCRIPTION: This example uses the rules array to enforce additional constraints on a number field, such as requiring it to be unsigned and fall within a range. Rules are passed as the first argument to 'schema.number'. Requires importing 'rules' from AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  marks: schema.number([\\n    rules.unsigned(),\\n    rules.range(10, 100),\\n  ])\\n}\n```\n\n----------------------------------------\n\nTITLE: File Validation Rule Messages in AdonisJS\nDESCRIPTION: This snippet illustrates how to define custom messages for file validation rules in AdonisJS, using sub-rule placeholders like `options.size` and `options.extnames` to tailor feedback on file size and extension constraints.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  'file.size': 'The file size must be under {{ options.size }}',\\n  'file.extname': 'The file must have one of {{ options.extnames }} extension names',\\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Traefik to Avoid GZip Interference\nDESCRIPTION: This Traefik configuration snippet demonstrates how to disable GZip compression for Server-Sent Events by excluding `text/event-stream` from compressed content types to prevent connection issues.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_14\n\nLANGUAGE: plaintext\nCODE:\n```\ntraefik.http.middlewares.gzip.compress=true\ntraefik.http.middlewares.gzip.compress.excludedcontenttypes=text/event-stream\ntraefik.http.routers.my-router.middlewares=gzip\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode Debug Launch Settings\nDESCRIPTION: Configuration for VSCode launch.json file to enable debugging of the AdonisJS development server with HMR support.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/debugging.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Dev server\",\n      \"program\": \"${workspaceFolder}/ace.js\",\n      \"args\": [\"serve\", \"--hmr\"],\n      \"skipFiles\": [\"<node_internals>/**\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form Method Spoofing Examples\nDESCRIPTION: Examples of using method spoofing in HTML forms for PUT and DELETE requests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"/articles/1?_method=PUT\">\n  <!-- Update form -->\n</form>\n```\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"/articles/1?_method=DELETE\">\n  <!-- Delete form -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Reading flash messages in controllers\nDESCRIPTION: Shows how to access flash messages in controllers using the session.flashMessages property, which provides methods for retrieving all or specific flash data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(session.flashMessages.all())\nconsole.log(session.flashMessages.get('key'))\nconsole.log(session.flashMessages.has('key'))\n```\n\n----------------------------------------\n\nTITLE: Generating Test File in AdonisJS\nDESCRIPTION: This command creates a new test file in the tests/<suite> directory. It follows specific naming conventions and allows specifying the test suite.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_25\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:test --suite=unit\n```\n\n----------------------------------------\n\nTITLE: Registering Lucid Service Provider in AdonisJS\nDESCRIPTION: Code to register the Lucid service provider in the adonisrc.ts file. This is handled automatically by the installation command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/lucid.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/lucid/database_provider'),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: File Path and URL Generation in TypeScript\nDESCRIPTION: Examples of generating file paths and URLs using various helper methods provided by the Application class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\nconst files = [\n  './tests/welcome.spec.ts',\n  './tests/maths.spec.ts'\n]\n\nawait Promise.all(files.map((file) => {\n  return import(app.makeURL(file).href)\n}))\n```\n\n----------------------------------------\n\nTITLE: Using Flag Aliases in AdonisJS Ace Command\nDESCRIPTION: This snippet demonstrates how to use flag aliases in the command line, combining multiple aliases.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nmake:controller -rs\n\n# Same as\nmake:controller --resource --singular\n```\n\n----------------------------------------\n\nTITLE: Registering Static Provider in AdonisJS (TypeScript)\nDESCRIPTION: Registers the @adonisjs/static service provider in the adonisrc.ts configuration file. This enables the static files middleware and makes its features available across the application. The provider must be referenced in the providers array for effective integration. No parameters are needed, but the project must have @adonisjs/static installed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/static/static_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting up extensions in AppProvider\nDESCRIPTION: Shows how to import extension files inside a service provider's boot method to apply framework extensions when the application starts.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/extending_the_framework.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// title: providers/app_provider.ts\nexport default class AppProvider {\n  async boot() {\n    await import('../src/extensions.js')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Bcrypt Package for AdonisJS\nDESCRIPTION: Command to install the bcrypt npm package, which is required to use the bcrypt hashing algorithm with AdonisJS hash service.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpm i bcrypt\n```\n\n----------------------------------------\n\nTITLE: Nested Route Prefixing in AdonisJS\nDESCRIPTION: Shows how to apply prefixes in nested route groups. This example creates routes for /api/v1/users and /api/v1/payments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .group(() => {\n    router\n      .group(() => {\n        router.get('users', () => {})\n        router.get('payments', () => {})\n      })\n      .prefix('v1')\n  })\n  .prefix('api')\n```\n\n----------------------------------------\n\nTITLE: Configuring Scrypt Hash Driver in AdonisJS\nDESCRIPTION: Configuration for the scrypt hash driver in AdonisJS, including settings for cost, block size, parallelization, salt size, memory limits, and key length.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  // highlight-start\n  // Make sure to update the default driver to scrypt\n  default: 'scrypt',\n  // highlight-end\n\n  list: {\n    scrypt: drivers.scrypt({\n      cost: 16384,\n      blockSize: 8,\n      parallelization: 1,\n      saltSize: 16,\n      maxMemory: 33554432,\n      keyLength: 64\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Hash Configuration with Lazy Loading\nDESCRIPTION: Enhanced config provider implementation with lazy loading of the Scrypt driver.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/config_providers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { configProvider } from '@adonisjs/core'\n\nexport default {\n  default: 'scrypt',\n  list: {\n    scrypt: configProvider.create(async (app) => {\n      const { Scrypt } = await import('@adonisjs/core/hash/drivers/scrypt')\n      const emitter = await app.container.make('emitter')\n\n      return () => new Scrypt({\n        cost: 16384,\n        blockSize: 8,\n        parallelization: 1,\n        maxMemory: 33554432,\n      }, emitter)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing HTTP Request in Edge Templates\nDESCRIPTION: Examples of accessing the current HTTP request instance within Edge templates. The request object is only available when a template is rendered using the ctx.view.render method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_0\n\nLANGUAGE: edge\nCODE:\n```\n{{ request.url() }}\n{{ request.input('signature') }}\n```\n\n----------------------------------------\n\nTITLE: Setting and Using Cookies in Browser Tests\nDESCRIPTION: Example showing how to set cookies in a browser context and how they persist across multiple page visits within the same test.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntest.group('Home page', () => {\n  test('see welcome message', async ({ visit, browserContext }) => {\n    // highlight-start\n    await browserContext.setCookie('username', 'virk')\n    // highlight-end\n    \n    // The \"username\" cookie will be sent during the request\n    const homePage = await visit('/')\n\n    // The \"username\" cookie will also be sent during this request\n    const aboutPage = await visit('/about')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Listening for the 'wait' Event on Redis Connections - TypeScript\nDESCRIPTION: Listens for the 'wait' event emitted when a Redis connection is in lazyConnect mode and hasn't executed a command. Allows developers to handle or log connection-waiting states prior to command execution. Uses '@adonisjs/redis/services/main' and requires the connection object in callback.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_24\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('wait', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Schema Using the Custom 'camelCase' Rule (TypeScript)\nDESCRIPTION: Demonstrates how to use the custom 'camelCase' rule within a validation schema for a field named 'fileName' using AdonisJS's validator. The validator checks the value to ensure it follows camelCase conventions and reports validation errors otherwise. Dependencies: '@adonisjs/core/legacy/validator'. Key parameters: schema ('schema.create({ fileName: ... })'), data. Inputs: object containing 'fileName' property; Output: validation result Promise. Limitation: assumes rule registration and type extension are already done.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-start\nimport { rules, schema, validator } from '@adonisjs/core/legacy/validator'\n// highlight-end\n\nawait validator.validate({\n  schema: schema.create({\n    fileName: schema.string({}, [\n      // highlight-start\n      rules.camelCase()\n      // highlight-end\n    ]),\n  }),\n  data: {},\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Time Travel Helper for AdonisJS Tests\nDESCRIPTION: This snippet defines a timeTravel function that uses the timekeeper package to manipulate time in tests. It's encapsulated in a Japa Test resource for easier use in test suites.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/mocks_and_fakes.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { getActiveTest } from '@japa/runner'\nimport timekeeper from 'timekeeper'\n\nexport function timeTravel(secondsToTravel: number) {\n  const test = getActiveTest()\n  if (!test) {\n    throw new Error('Cannot use \"timeTravel\" outside of a Japa test')\n  }\n\n  timekeeper.reset()\n\n  const date = new Date()\n  date.setSeconds(date.getSeconds() + secondsToTravel)\n  timekeeper.travel(date)\n\n  test.cleanup(() => {\n    timekeeper.reset()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting Directory of Stubs in AdonisJS\nDESCRIPTION: Commands to eject entire directories of stubs, allowing customization of multiple templates at once.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\n# Publish all the make stubs\nnode ace eject make\n\n# Publish all the make:controller stubs\nnode ace eject make/controller\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite for Inertia.js SSR in AdonisJS\nDESCRIPTION: Vite configuration for enabling Inertia.js server-side rendering, registering the inertia plugin with SSR options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport inertia from '@adonisjs/inertia/client'\n\nexport default defineConfig({\n  plugins: [\n    inertia({\n      ssr: {\n        enabled: true,\n        entrypoint: 'inertia/app/ssr.ts'\n      }\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Parent Process Communication in TypeScript\nDESCRIPTION: Shows how to notify the parent process using the app.notify method when running as a child process.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\n\napp.notify('ready')\n\napp.notify({\n  isReady: true,\n  port: 3333,\n  host: 'localhost'\n})\n```\n\n----------------------------------------\n\nTITLE: TypeScript Configuration for Inertia Frontend\nDESCRIPTION: TSConfig setup to exclude Inertia frontend files from server compilation to enable HMR.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_29\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"compilerOptions\": {\n    // ...\n  },\n  \"exclude\": [\"inertia/**/*\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Optional Arguments in AdonisJS Ace Command\nDESCRIPTION: Example of making a command argument optional by setting the required option to false. Optional arguments must be defined after all required arguments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/args.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n@args.string({\n  description: 'Name of the user',\n  required: false,\n})\ndeclare name?: string\n```\n\n----------------------------------------\n\nTITLE: Accessing Request Headers in AdonisJS\nDESCRIPTION: Shows how to access request headers using headers() and header() methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ request }) => {\n  console.log(request.headers())\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ request }) => {\n  request.header('x-request-id')\n\n  // Header name is not case sensitive\n  request.header('X-REQUEST-ID')\n})\n```\n\n----------------------------------------\n\nTITLE: Using the old Helper for Form Values\nDESCRIPTION: Example of using the old helper to retrieve previously submitted form values from flash messages, allowing forms to maintain state after validation errors.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n<input\n  type=\"text\"\n  name=\"email\"\n  value=\"{{ old('name') || '' }}\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Implementing a Command with Table Output\nDESCRIPTION: Implements the run method of a command that renders a table with multiple rows of data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nasync run() {\n  const table = this.ui.table()\n  table.head(['Name', 'Email'])\n\n  table.row(['Harminder Virk', 'virk@adonisjs.com'])\n  table.row(['Romain Lanz', 'romain@adonisjs.com'])\n  table.row(['Julien-R44', 'julien@adonisjs.com'])\n  table.row(['Michaël Zasso', 'targos@adonisjs.com'])\n\n  table.render()\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing the session ID in TypeScript\nDESCRIPTION: Retrieves the unique session ID that identifies a visitor's session. This ID remains constant until the session expires.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconsole.log(session.sessionId)\n```\n\n----------------------------------------\n\nTITLE: JavaScript Entry Point Configuration\nDESCRIPTION: Example of importing CSS in the JavaScript entry point file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nimport '../css/app.css'\n```\n\n----------------------------------------\n\nTITLE: Creating Event Classes in AdonisJS\nDESCRIPTION: Shows how to generate event classes in AdonisJS. Events are stored in app/events directory and represent lifecycle actions in your application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:event orderShipped\n```\n\n----------------------------------------\n\nTITLE: Accessing Configuration Values\nDESCRIPTION: Reading configuration values in Edge templates using the config helper. This example checks if app.appUrl is defined before using it in a link.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n@if(config.has('app.appUrl'))\n  <a href=\"{{ config('app.appUrl') }}\"> Home </a>\n@else\n  <a href=\"/\"> Home </a>\n@end\n```\n\n----------------------------------------\n\nTITLE: Enforcing Distinct Values with AdonisJS\nDESCRIPTION: The distinct rule checks that all values within an array property are unique, ideal for collections of objects with ids. It is compatible with array schema types. Requires @ioc/Adonis/Core/Validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Sample Data\n{\n  \"products\": [\n    {\n      \"id\": 1,\n      \"quantity\": 4,\n    },\n    {\n      \"id\": 3,\n      \"quantity\": 10,\n    },\n    {\n      \"id\": 8,\n      \"quantity\": 1,\n    }\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n// title: Validation rule\n{\n  products: schema\n    // highlight-start\n    .array([\n      rules.distinct('id')\n    ])\n    // highlight-end\n    .members(schema.object().members({\n      id: schema.number(),\n      quantity: schema.number(),\n    }))\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Sample Data\n{\n  \"tags\": [1, 10, 15, 8]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Validation rule\n{\n  tags: schema\n    // highlight-start\n    .array([\n      rules.distinct('*')\n    ])\n    // highlight-end\n    .members(schema.number())\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Preloads in AdonisRC\nDESCRIPTION: Examples of configuring preload files to be imported during application boot, with options for specifying environments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  preloads: [\n    () => import('./start/view.js')\n  ]\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  preloads: [\n    {\n      file: () => import('./start/view.js'),\n      environment: [\n        'web',\n        'console',\n        'test'\n      ]\n    },\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Middleware with Specific Stack\nDESCRIPTION: Demonstrates creating middleware with an explicitly defined stack instead of using the interactive prompt. This allows for non-interactive use in scripts.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:middleware bodyparser --stack=router\n```\n\n----------------------------------------\n\nTITLE: Internationalization Formatting with i18n\nDESCRIPTION: Using the i18n object to format currency values according to the current locale. The i18n object is provided by the @adonisjs/i18n package.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_9\n\nLANGUAGE: edge\nCODE:\n```\n{{ i18n.formatCurrency(200, { currency: 'USD' }) }}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Callback for Custom Messages in AdonisJS\nDESCRIPTION: This code snippet demonstrates how to use a wildcard callback to generate custom validation messages dynamically in AdonisJS, allowing all fields except specified exceptions to use a runtime calculated message upon rule failure.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  messages: {\\n    '*': (field, rule, arrayExpressionPointer, options) => {\\n      return `${rule} validation error on ${field}`\\n    },\\n    'username.required': 'Username is required to sign up',\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Applying AuthFinder Mixin to User Model in AdonisJS\nDESCRIPTION: Shows how to import and apply the AuthFinder mixin to the User model. This mixin adds methods for securely finding and verifying user credentials.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/verifying_user_credentials.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DateTime } from 'luxon'\nimport { compose } from '@adonisjs/core/helpers'\nimport { BaseModel, column } from '@adonisjs/lucid/orm'\nimport hash from '@adonisjs/core/services/hash'\nimport { withAuthFinder } from '@adonisjs/auth/mixins/lucid'\n\nconst AuthFinder = withAuthFinder(() => hash.use('scrypt'), {\n  uids: ['email'],\n  passwordColumnName: 'password',\n})\n\nexport default class User extends compose(BaseModel, AuthFinder) {\n  @column({ isPrimary: true })\n  declare id: number\n\n  @column()\n  declare fullName: string | null\n\n  @column()\n  declare email: string\n\n  @column()\n  declare password: string\n\n  @column.dateTime({ autoCreate: true })\n  declare createdAt: DateTime\n\n  @column.dateTime({ autoCreate: true, autoUpdate: true })\n  declare updatedAt: DateTime\n}\n```\n\n----------------------------------------\n\nTITLE: Creating and Exporting an AsyncLocalStorage Instance in TypeScript\nDESCRIPTION: This TypeScript code snippet creates a file named `storage.js`. It imports the `AsyncLocalStorage` class from Node.js's `async_hooks` module and exports a singleton instance named `storage`. This instance will be used to manage asynchronous state.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: storage.js\nimport { AsyncLocalStorage } from 'async_hooks'\nexport const storage = new AsyncLocalStorage()\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in AdonisJS During Tests - TypeScript\nDESCRIPTION: Demonstrates accessing the correct environment variable value in AdonisJS during tests, where .env.test overrides .env. Shows using env.get to access SESSION_DRIVER (and similar values). Relies on the presence of properly structured .env and .env.test files and AdonisJS env module.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// During tests\nimport env from '#start/env'\n\nenv.get('SESSION_DRIVER') // memory\n```\n\n----------------------------------------\n\nTITLE: Creating Controller with Specific Methods\nDESCRIPTION: Demonstrates creating a controller with specific action methods rather than using the default template. This example creates a controller with index, show, and store methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n# Generates controller with \"index\", \"show\", and \"store\" methods\nnode ace make:controller users index show store\n```\n\n----------------------------------------\n\nTITLE: Base64 Encoding and Decoding in TypeScript\nDESCRIPTION: Demonstrates base64 encoding and decoding with support for URL-safe encoding.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { base64 } from '@adonisjs/core/helpers'\n\nbase64.encode('hello world')\n// aGVsbG8gd29ybGQ=\n```\n\nLANGUAGE: typescript\nCODE:\n```\nbase64.urlEncode('hello world')\n// aGVsbG8gd29ybGQ\n```\n\nLANGUAGE: typescript\nCODE:\n```\nbase64.decode(base64.encode('hello world'))\n// hello world\n\nbase64.urlDecode(base64.urlEncode('hello world'))\n// hello world\n```\n\nLANGUAGE: typescript\nCODE:\n```\nbase64.decode('hello world') // null\nbase64.decode('hello world', 'utf-8', true) // raises exception\n```\n\n----------------------------------------\n\nTITLE: Using i18n in Controllers\nDESCRIPTION: Example of using i18n translations in an AdonisJS controller class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async store({ i18n, session }: HttpContext) {\n    session.flash('success', {\n      message: i18n.t('post.created')\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening for Events on a Subscription using TypeScript\nDESCRIPTION: The snippet shows how to listen for events on a Transmit subscription. The `onMessage` method attaches a callback function to handle incoming data events. Multiple callbacks can be added for different functionalities.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsubscription.onMessage((data) => {\n  console.log(data)\n})\n\nsubscription.onMessageOnce(() => {\n  console.log('I will be called only once')\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Router Class with Custom Properties in AdonisJS\nDESCRIPTION: Shows how to extend the Router class with custom properties using macros and getters, and how to update type definitions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Router } from '@adonisjs/core/http'\n\nRouter.macro('property', function (this: Router) {\n  return value\n})\nRouter.getter('propertyName', function (this: Router) {\n  return value\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: types/http.ts\ndeclare module '@adonisjs/core/http' {\n  export interface Router {\n    property: valueType\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies from Server and Reading in Tests\nDESCRIPTION: Examples showing how to set cookies in a route handler and then access those cookies in a browser test using the browserContext.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.get('/', async ({ response }) => {\n  // highlight-start\n  response.cookie('cartTotal', '100')\n  // highlight-end\n\n  return 'It works!'\n})\n```\n\nLANGUAGE: ts\nCODE:\n```\ntest.group('Home page', () => {\n  test('see welcome message', async ({ visit, browserContext }) => {\n    const page = await visit('/')\n    // highlight-start\n    console.log(await browserContext.getCookie('cartTotal'))\n    // highlight-end\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Redis Connection Events with AdonisJS - TypeScript\nDESCRIPTION: Shows the pattern for subscribing to connection events such as 'connect' and 'subscriber:connect' on AdonisJS Redis connections. The example registers event listeners for both standard and subscriber connection events, enabling custom logic on successful connections. Requires '@adonisjs/redis/services/main'.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_23\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('connect', () => {})\\n  connection.on('subscriber:connect', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Validating File Uploads with Options in AdonisJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to validate an uploaded file using AdonisJS schema validators, specifying constraints on the file's maximum size and permissible extensions. It uses the 'schema.file' method with options for validation. The code imports 'schema' from AdonisJS and expects an object field 'cover_image' that must match the file criteria. Dependencies: '@adonisjs/core/legacy/validator'. Input: multipart file object parsed by bodyparser. Output: validated object with the file field if valid.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  cover_image: schema.file({\\n    size: '2mb',\\n    extnames: ['jpg', 'gif', 'png'],\\n  }),\\n}\n```\n\n----------------------------------------\n\nTITLE: Config Directory Location Update\nDESCRIPTION: Configuration for changing the location of config files in adonisrc.ts and package.json.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/configuration.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ndirectories: {\n  config: './configurations'\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"imports\": {\n    \"#config/*\": \"./configurations/*.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Reporters in AdonisJS\nDESCRIPTION: Commands to activate specific test reporters via command line flags.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n# Activate spec reporter\nnode ace test --reporter=spec\n\n# Activate spec and json reporters\nnode ace test --reporter=spec,json\n```\n\n----------------------------------------\n\nTITLE: Customizing Transmit Route Registration in AdonisJS\nDESCRIPTION: Demonstration of customizing Transmit route registration to add middleware for authentication and rate limiting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport transmit from '@adonisjs/transmit/services/main'\n\ntransmit.registerRoutes((route) => {\n  // Ensure you are authenticated to register your client\n  if (route.getPattern() === '__transmit/events') {\n    route.middleware(middleware.auth())\n    return\n  }\n\n  // Add a throttle middleware to other transmit routes\n  route.use(throttle)\n})\n```\n\n----------------------------------------\n\nTITLE: Rejecting Confirmation Prompts\nDESCRIPTION: Shows how to programmatically reject a confirmation prompt during testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\ncommand.prompt\n  .trap('Want to delete all files?')\n  .reject()\n```\n\n----------------------------------------\n\nTITLE: Initializing a Node.js Project using npm\nDESCRIPTION: This command initializes a new Node.js project in the current directory using npm. The `--yes` flag automatically accepts the default settings, creating a `package.json` file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm init --yes\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for ES Modules\nDESCRIPTION: This JSON configuration within the `package.json` file sets the project type to `module`. This enables the use of ES Module syntax (import/export) in Node.js files.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"module\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Edge with Plugins and Global Helpers in AdonisJS\nDESCRIPTION: This snippet demonstrates how to configure Edge by registering a plugin and defining a global property in a preload file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport edge from 'edge.js'\nimport env from '#start/env'\nimport { edgeIconify } from 'edge-iconify'\n\n/**\n * Register a plugin\n */\nedge.use(edgeIconify)\n\n/**\n * Define a global property\n */\nedge.global('appUrl', env.get('APP_URL'))\n```\n\n----------------------------------------\n\nTITLE: Enabling Last-Modified Headers for Static Files (TypeScript)\nDESCRIPTION: Enables or disables the Last-Modified HTTP header for static file responses using the file's modification time. Useful for client-side or reverse proxy caching strategies. Placed in static middleware configuration, requires @adonisjs/static.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\n{\n  lastModified: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone Emitter Instance Creation\nDESCRIPTION: Creation of a standalone emitter instance in a separate file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/config_providers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Emitter } from '@adonisjs/core/events'\nexport const emitter = new Emitter()\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Table and Key for DynamoDB Store\nDESCRIPTION: Allows customization of the table name and key attribute name in the DynamoDB session store configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nstores.dynamodb({\n  tableName: 'Session'\n  keyAttributName: 'key'\n})\n```\n\n----------------------------------------\n\nTITLE: Hash Configuration with Direct Emitter Instance\nDESCRIPTION: Implementation using direct Emitter class instantiation, showing the isolation problem.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/config_providers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scrypt } from '@adonisjs/core/hash/drivers/scrypt'\nimport { Emitter } from '@adonisjs/core/events'\n\nconst emitter = new Emitter()\n\nexport default {\n  default: 'scrypt',\n  list: {\n    scrypt: () => new Scrypt({\n      cost: 16384,\n      blockSize: 8,\n      parallelization: 1,\n      maxMemory: 33554432,\n    }, emitter)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Number Flags in AdonisJS Ace Command\nDESCRIPTION: This snippet shows how to define a number flag in an AdonisJS Ace command using the @flags.number() decorator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, flags } from '@adonisjs/core/ace'\n\nexport default class MakeUserCommand extends BaseCommands {\n  @flags.number()\n  declare score: number\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Template Drive Helpers\nDESCRIPTION: Helper methods for generating URLs in Edge templates for both public and signed URLs.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/drive.md#2025-04-22_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n<img src=\"{{ await driveUrl(user.avatar) }}\" />\n\n<!-- Generate URL for a named disk -->\n<img src=\"{{ await driveUrl(user.avatar, 's3') }}\" />\n<img src=\"{{ await driveUrl(user.avatar, 'r2') }}\" />\n```\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{ await driveSignedUrl(invoice.key) }}\">\n  Download Invoice\n</a>\n\n<!-- Generate URL for a named disk -->\n<a href=\"{{ await driveSignedUrl(invoice.key, 's3') }}\">\n  Download Invoice\n</a>\n\n<!-- Generate URL with signed options -->\n<a href=\"{{ await driveSignedUrl(invoice.key, {\n  expiresIn: '30 mins',\n}) }}\">\n  Download Invoice\n</a>\n```\n\n----------------------------------------\n\nTITLE: Authenticating User with Custom Guard in AdonisJS v6 API Test\nDESCRIPTION: This snippet shows how to use a custom guard for authentication in an AdonisJS v6 API test using the withGuard method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client\n    .get('/me/payments')\n    .withGuard('api_tokens')\n    .loginAs(user)\n```\n\n----------------------------------------\n\nTITLE: Creating VineJS Validators in AdonisJS\nDESCRIPTION: Shows how to generate validator files using VineJS in AdonisJS. Validators are stored in app/validators directory and can export multiple validators per file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\n# A validator for managing a user\nnode ace make:validator user\n\n# A validator for managing a post\nnode ace make:validator post\n```\n\n----------------------------------------\n\nTITLE: Customizing Redaction Behavior in Logger Configuration\nDESCRIPTION: Examples of customizing the redaction behavior by changing the placeholder text or removing sensitive fields entirely from the log output.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nredact: {\n  paths: ['password', '*.password'],\n  censor: '[PRIVATE]'\n}\n\n// Remove property\nredact: {\n  paths: ['password', '*.password'],\n  remove: true\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Database Translation Loader\nDESCRIPTION: Creates a custom translation loader that implements the TranslationsLoaderContract interface. This example shows how to create a database-based loader with proper typing and configuration options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {\n  LoaderFactory,\n  TranslationsLoaderContract,\n} from '@adonisjs/i18n/types'\n\n/**\n * Type for the configuration\n */\nexport type DbLoaderConfig = {\n  connection: string\n  tableName: string\n}\n\n/**\n * Loader implementation\n */\nexport class DbLoader implements TranslationsLoaderContract {\n  constructor(public config: DbLoaderConfig) {\n  }\n\n  async load() {\n    return {\n      en: {\n        'messages.greeting': 'Hello world',\n      },\n      fr: {\n        'messages.greeting': 'Bonjour le monde',\n      }\n    }\n  }\n}\n\n/**\n * Factory function to reference the loader\n * inside the config file.\n */\nexport function dbLoader(config: DbLoaderConfig): LoaderFactory {\n  return () => {\n    return new DbLoader(config)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Edge Template Debugging\nDESCRIPTION: Example of using debug helpers in Edge templates for dumping template state with and without halting execution.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/debugging.md#2025-04-22_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n{{-- Dump template state and die --}}\n@dd(state)\n\n{{-- Dump template state and continue rendering --}}\n@dump(state)\n```\n\n----------------------------------------\n\nTITLE: Correct: Accessing HTTP Context in Static Methods or Getters\nDESCRIPTION: This TypeScript code shows the correct approach for using HTTP context within static class logic. Instead of a static property, the context access (`HttpContext.getOrFail()`) is moved inside a static method (`query`). This ensures the context is retrieved dynamically when the method is called during a request, providing the correct request-specific state.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { BaseModel } from '@adonisjs/lucid'\n\nexport default class User extends BaseModel {\n  static query() {\n    const ctx = HttpContext.getOrFail()\n    return super.query({ connection: tenant.connection })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Date Fields in AdonisJS (TypeScript)\nDESCRIPTION: This example validates a 'published_at' field as a date, accepting either a date object or a parseable string. It uses 'schema.date()' and will cast strings to a Luxon DateTime instance upon validation. Requires '@adonisjs/core/legacy/validator' and Luxon for date conversion.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  published_at: schema.date()\\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Files Recursively with fsImportAll in TypeScript\nDESCRIPTION: The fsImportAll function imports all files recursively from a given directory, setting the exported values from each module on an object. It accepts a directory path and options for customization.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fsImportAll } from '@adonisjs/core/helpers'\n\nconst collection = await fsImportAll(new URL('./config', import.meta.url))\nconsole.log(collection)\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  ignoreMissingRoot?: boolean\n  filter?: (filePath: string, index: number) => boolean\n  sort?: (current: string, next: string) => number\n  transformKeys? (keys: string[]) => string[]\n}\n\nconst options: Partial<Options> = {}\nawait fsImportAll(location, options)\n```\n\n----------------------------------------\n\nTITLE: Configuring Multipart Auto-Processing in AdonisJS\nDESCRIPTION: This snippet shows how to disable automatic processing of multipart requests in the AdonisJS configuration file. It allows for manual processing of multipart streams.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/file_uploads.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  multipart: {\n    /**\n     * Set to false, if you want to self-process multipart\n     * stream manually for all HTTP requests\n     */\n    autoProcess: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Stopping Event Listener for Transmit using TypeScript\nDESCRIPTION: This code demonstrates how to stop an event listener using the `onMessage` method in Transmit. The method returns a function to stop listening to a specific callback.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst stopListening = subscription.onMessage((data) => {\n  console.log(data)\n})\n\n// Stop listening\nstopListening()\n```\n\n----------------------------------------\n\nTITLE: Forwarding Params in AdonisJS Redirects\nDESCRIPTION: Demonstrates how to forward route parameters when redirecting. This example redirects /posts/:id to /articles/:id, preserving the id parameter.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nrouter.on('/posts/:id').redirect('/articles/:id')\n```\n\n----------------------------------------\n\nTITLE: Using defineIdentifierIfMissing for Non-Overriding Identifier Definition\nDESCRIPTION: This snippet shows how to use the defineIdentifierIfMissing method to define an identifier only if it doesn't already exist. This prevents overriding existing identifiers with the same name.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nEnvParser.defineIdentifierIfMissing('base64', (value) => {\n  return Buffer.from(value, 'base64').toString()\n})\n```\n\n----------------------------------------\n\nTITLE: Container Resolving Hook Implementation\nDESCRIPTION: Example of using the container resolving hook to extend bindings when they are resolved.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nasync boot() {\n  this.app.container.resolving('validator', (validator) => {\n    validator.rule('foo', () => {})\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Using Refs for Dynamic Constraints in AdonisJS Validator (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use refs in AdonisJS validator to handle dynamic constraints when caching validation schemas. It shows how to reference runtime values in the where clause of a unique rule.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@ioc:Adonis/Core/Validator'\nimport { HttpContextContract } from '@ioc:Adonis/Core/HttpContext'\n\nexport default class CreateUserValidator {\n  constructor (protected ctx: HttpContextContract) {\n  }\n\n  public refs = schema.refs({\n    tenantId: this.ctx.auth.user!.tenantId\n  })\n\n  public schema = schema.create({\n    email: schema.string({}, [\n      rules.unique({\n        table: 'users',\n        column: 'email',\n        where: { tenant_id: this.refs.tenantId },\n      })\n    ])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Controller Export Configuration\nDESCRIPTION: JSON configuration for exporting controllers using Node.js subpath exports.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./invoices_controller\": \"./build/controllers/invoices_controller.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Slow Password Hashing in AdonisJS\nDESCRIPTION: This example shows a test that creates multiple users, which can be slow due to password hashing operations being computationally expensive.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport hash from '@adonisjs/core/services/hash'\n\ntest('get users list', async ({ client }) => {\n  await UserFactory().createMany(20)    \n  const response = await client.get('users')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Seeding for Test Runs in AdonisJS\nDESCRIPTION: This snippet demonstrates how to configure the test runner to seed the database before running tests. This is useful when tests require certain data to be present in the database.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/database.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: tests/bootstrap.ts\nimport testUtils from '@adonisjs/core/services/test_utils'\n\nexport const runnerHooks: Required<Pick<Config, 'setup' | 'teardown'>> = {\n  setup: [\n    () => testUtils.db().seed(),\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Vite Plugin in AdonisJS v6 (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register a Vite plugin in the vite.config.ts file using the CodeTransformer. It imports the vue plugin and adds it to the configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst transformer = new CodeTransformer(appRoot)\nconst imports = [\n  {\n    isNamed: false,\n    module: '@vitejs/plugin-vue',\n    identifier: 'vue'\n  },\n]\nconst pluginUsage = 'vue({ jsx: true })'\n\ntry {\n  await transformer.addVitePlugin(pluginUsage, imports)\n} catch (error) {\n  console.error('Unable to register vite plugin')\n  console.error(error)\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Output\nimport { defineConfig } from 'vite'\nimport vue from '@vitejs/plugin-vue'\n\nexport default defineConfig({\n  plugins: [\n    vue({ jsx: true })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Testing Inertia Props Subset in TypeScript\nDESCRIPTION: Demonstrates checking if server response contains specific props using assertInertiaPropsContains() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\ntest('returns correct data', async ({ client }) => {\n  const response = await client.get('/home').withInertia()\n\n  response.assertInertiaPropsContains({ user: { name: 'julien' } })\n})\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Prettier Config - Shell\nDESCRIPTION: This shell snippet shows how to install the Prettier config preset and Prettier itself as development dependencies for code formatting consistency. Execute each command with npm. Prerequisite: Node.js and npm must be installed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @adonisjs/prettier-config\n\n# Make sure also to install prettier\nnpm i -D prettier\n```\n\n----------------------------------------\n\nTITLE: Enum Environment Variable Validation and Optional Rules - TypeScript\nDESCRIPTION: Exemplifies restricting values (e.g., NODE_ENV) to specific options using Env.schema.enum. Supports both array literals and native TypeScript enums. Optional and conditionally-optional variants are demonstrated. Useful for restricting configuration to allowed environment names or other sets.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  NODE_ENV: Env\n    .schema\n    .enum(['development', 'production'] as const)\n}\n\n// Mark it as optional\n{\n  NODE_ENV: Env\n    .schema\n    .enum\n    .optional(['development', 'production'] as const)\n}\n\n// Mark it as optional with a condition\n{\n  NODE_ENV: Env\n    .schema\n    .enum\n    .optionalWhen(\n      process.env.NODE_ENV === 'production',\n      ['development', 'production'] as const\n    )\n}\n\n// Using native enums\nenum NODE_ENV {\n  development = 'development',\n  production = 'production'\n}\n\n{\n  NODE_ENV: Env.schema.enum(NODE_ENV)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Validating CUIDs in TypeScript\nDESCRIPTION: Demonstrates generating secure, collision-resistant IDs and validating CUID strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cuid } from '@adonisjs/core/helpers'\n\nconst id = cuid()\n// tz4a98xxat96iws9zmbrgj3a\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { cuid, isCuid } from '@adonisjs/core/helpers'\n\nconst id = cuid()\nisCuid(id) // true\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation Loader\nDESCRIPTION: Shows how to configure and integrate a custom translation loader in the AdonisJS i18n config file using the loader's factory function.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/i18n'\nimport { dbLoader } from 'my-custom-package'\n\nconst i18nConfig = defineConfig({\n  loaders: [\n    dbLoader({\n      connection: 'pg',\n      tableName: 'translations'\n    })\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Number Schema with Rules\nDESCRIPTION: Example of number schema validation with unsigned and range rules.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/schema_101.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/validator'\n\nschema.create({\n  age: schema.number([\n    rules.unsigned(),\n    rules.range(10, 100),\n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Environment Validations Output Example in AdonisJS\nDESCRIPTION: The resulting env.ts file after applying the defineEnvValidations codemod, showing the generated validation schema.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n// title: Output\nimport { Env } from '@adonisjs/core/env'\n\nexport default await Env.create(new URL('../', import.meta.url), {\n  /**\n   * App environment variables\n   */\n  PORT: Env.schema.number(),\n  HOST: Env.schema.string(),\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Encore Dependencies\nDESCRIPTION: Commands to install Webpack Encore and its required dependencies\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i @adonisjs/encore\nnpm i -D @babel/core @babel/preset-env @symfony/webpack-encore webpack webpack-cli\n```\n\n----------------------------------------\n\nTITLE: Initializing Transmit Client in Browser\nDESCRIPTION: Code snippet showing how to initialize the Transmit client in a browser environment for listening to server-sent events.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport { Transmit } from '@adonisjs/transmit-client'\n\nexport const transmit = new Transmit({\n  baseUrl: window.location.origin\n})\n```\n\n----------------------------------------\n\nTITLE: Database Connection Count Check Report Structure\nDESCRIPTION: JSON structure showing the health check report format for database connection monitoring.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"Connection count health check (postgres)\",\n  \"isCached\": false,\n  \"message\": \"There are 6 active connections, which is under the defined thresholds\",\n  \"status\": \"ok\",\n  \"finishedAt\": \"2024-06-20T07:30:15.840Z\",\n  \"meta\": {\n    \"connection\": {\n      \"name\": \"postgres\",\n      \"dialect\": \"postgres\"\n    },\n    \"connectionsCount\": {\n      \"active\": 6,\n      \"warningThreshold\": 10,\n      \"failureThreshold\": 15\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Route Patterns for Manual Multipart Processing - AdonisJS - TypeScript\nDESCRIPTION: Demonstrates configuration of the processManually property on the multipart parser in AdonisJS. This array specifies route patterns where automatic file processing is disabled, requiring manual handling of file streams in controller code. The property works in conjunction with autoProcess and relies on AdonisJS route definitions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nmultipart: {\n  autoProcess: true,\n  processManually: [\n    '/file_manager',\n    '/projects/:id/assets'\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Using Variable Substitution in .env Files\nDESCRIPTION: This snippet shows how to use variable substitution within dot-env files in AdonisJS. It demonstrates computing the APP_URL value from HOST and PORT environment variables.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_19\n\nLANGUAGE: dotenv\nCODE:\n```\nHOST=localhost\nPORT=3333\n// highlight-start\nURL=$HOST:$PORT\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: DynamoDB Store Configuration with Client Config\nDESCRIPTION: Configures the DynamoDB store by passing client configuration like region and credentials to manage session data using AWS services.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nstores.dynamodb({\n  clientConfig: {\n    region: 'us-east-1',\n    endpoint: '<database-endpoint>',\n    credentials: {\n      accessKeyId: '',\n      secretAccessKey: '',\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Extending Route Class with Custom Properties in AdonisJS\nDESCRIPTION: Demonstrates how to extend the Route class with custom properties using macros and getters, and how to update type definitions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Route } from '@adonisjs/core/http'\n\nRoute.macro('property', function (this: Route) {\n  return value\n})\nRouter.getter('property', function (this: Route) {\n  return value\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: types/http.ts\ndeclare module '@adonisjs/core/http' {\n  export interface Route {\n    property: valueType\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring the URL-Encoded Form Parser - AdonisJS - TypeScript\nDESCRIPTION: Provides an example configuration for the URL-encoded form parser in AdonisJS BodyParser middleware. Configuration includes encoding settings, request size limit, query string parser options (handled by the qs package), content types to accept, and control over empty string normalization. Requires no dependencies beyond AdonisJS and optionally qs for queryString parsing. Inputs are parser options; outputs a configuration object for form request parsing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nform: {\n  encoding: 'utf-8',\n  limit: '1mb',\n  queryString: {},\n  types: ['application/x-www-form-urlencoded'],\n  convertEmptyStringsToNull: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Environment Variables in AdonisJS\nDESCRIPTION: This command adds new environment variables to the .env and .env.example files, and defines validation rules in the start/env.ts file. It supports interactive prompts and command-line arguments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_30\n\nLANGUAGE: sh\nCODE:\n```\nnode ace env:add\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace env:add MY_VARIABLE value --type=string\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace env:add MY_VARIABLE foo --type=enum --enum-values=foo --enum-values=bar\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Accessing HTTP Context Inside Event Listeners\nDESCRIPTION: This TypeScript snippet demonstrates an incorrect pattern: attempting to access the HTTP context (`HttpContext.getOrFail()`) inside an event listener (`emitter.on`). Event listeners often execute *after* the original HTTP request has finished and its context has been destroyed. Accessing the context here will likely fail or retrieve stale/incorrect data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('new:user', () => {\n  const ctx = HttpContext.getOrFail()\n})\n```\n\n----------------------------------------\n\nTITLE: Array Schema with Members\nDESCRIPTION: Example of array schema validation with member type definition and length constraints.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/schema_101.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/validator'\n\n{\n  tags: schema\n    .array([\n      rules.minLength(1)\n    ])\n    .members(\n      schema.number()\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Flash Messages\nDESCRIPTION: Checking and displaying flash messages from the session in Edge templates. The examples show checking for input validation errors and notification messages.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@if(flashMessages.has('inputErrorsBag.title'))\n  <p>{{ flashMessages.get('inputErrorsBag.title') }}</p>\n@end\n\n@if(flashMessages.has('notification'))\n  <div class=\"notification {{ flashMessages.get('notification').type }}\">\n    {{ flashMessages.get('notification').message }}\n  </div>\n@end\n```\n\n----------------------------------------\n\nTITLE: Creating Inertia Root Templates for Different Frameworks\nDESCRIPTION: Edge templates for initializing Inertia.js with different frontend frameworks (Vue, React, Svelte, Solid). These templates serve as the entry point for the application and include necessary meta tags and script loading.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n  <title inertia>AdonisJS x Inertia</title>\n\n  @inertiaHead()\n  @vite(['inertia/app/app.ts', `inertia/pages/${page.component}.vue`])\n</head>\n\n<body>\n  @inertia()\n</body>\n\n</html>\n```\n\n----------------------------------------\n\nTITLE: Configuring Transmit in AdonisJS\nDESCRIPTION: Configuration setup for the Transmit package in the config/transmit.ts file, defining ping interval and transport settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nimport { defineConfig } from '@adonisjs/transmit'\n\nexport default defineConfig({\n  pingInterval: false,\n  transport: null,\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Singleton Bindings - AdonisJS Container - TypeScript\nDESCRIPTION: Shows how to register a singleton binding using AdonisJS's 'container.singleton' method. The factory is called only once; the resulting instance is cached for the application's lifetime. Requires the AdonisJS app and container; uses a configuration service to instantiate 'MyFakeCache' with config data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nthis.app.container.singleton('cache', async (resolver) => {\n  const configService = await resolver.make('config')\n  const cacheConfig = configService.get<any>('cache')\n\n  return new MyFakeCache(cacheConfig)\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables with Node.js process.env - dotenv\nDESCRIPTION: Demonstrates how to read environment variables using Node.js built-in process.env object. No dependencies are needed beyond the Node.js runtime. Keys such as NODE_ENV, HOST, and PORT are accessed directly. Suitable for simple usage and works out of the box for any Node.js environment; outputs string or undefined values depending on whether the environment variable is set.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_0\n\nLANGUAGE: dotenv\nCODE:\n```\nprocess.env.NODE_ENV\nprocess.env.HOST\nprocess.env.PORT\n```\n\n----------------------------------------\n\nTITLE: Manually Registering Transmit Routes in AdonisJS\nDESCRIPTION: Example of manually registering each Transmit route by binding the controllers individually in the routes file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nconst EventStreamController = () => import('@adonisjs/transmit/controllers/event_stream_controller')\nconst SubscribeController = () => import('@adonisjs/transmit/controllers/subscribe_controller')\nconst UnsubscribeController = () => import('@adonisjs/transmit/controllers/unsubscribe_controller')\n\nrouter.get('/__transmit/events', [EventStreamController])\nrouter.post('/__transmit/subscribe', [SubscribeController])\nrouter.post('/__transmit/unsubscribe', [UnsubscribeController])\n```\n\n----------------------------------------\n\nTITLE: Extending RouteResource Class with Custom Properties in AdonisJS\nDESCRIPTION: Demonstrates how to extend the RouteResource class with custom properties using macros and getters, accessing resource routes via this.routes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteResource } from '@adonisjs/core/http'\n\nRouteResource.macro('property', function (this: RouteResource) {\n  return value\n})\nRouteResource.getter('property', function (this: RouteResource) {\n  return value\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: types/http.ts\ndeclare module '@adonisjs/core/http' {\n  export interface RouteResource {\n    property: valueType\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Utilizing Dynamic Placeholders in Custom Messages in AdonisJS\nDESCRIPTION: This snippet outlines the use of dynamic placeholders within custom messages for validation in AdonisJS. These placeholders allow runtime values to be inserted into the message text, providing context-specific feedback during validation without additional dependencies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  messages: {\\n    required: '{{ field }} is required to sign up',\\n    enum: 'The value of {{ field }} must be in {{ options.choices }}'\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Command Aliases\nDESCRIPTION: Example of using a defined command alias to execute a command\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace resource admin\n```\n\n----------------------------------------\n\nTITLE: Formatting Code with Prettier\nDESCRIPTION: This npm command formats the codebase using Prettier. It requires Prettier to be set up in the project. The command will adjust code formatting to comply with predefined style guidelines.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/contribution_guide.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sentinels in AdonisJS\nDESCRIPTION: Configuration for Redis sentinels in AdonisJS, specifying sentinel nodes and master name.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nconst redisConfig = defineConfig({\n  connections: {\n    main: {\n      sentinels: [\n        { host: 'localhost', port: 26379 },\n        { host: 'localhost', port: 26380 },\n      ],\n      name: 'mymaster',\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Right-Aligning Table Columns in Ace Commands (TypeScript)\nDESCRIPTION: Demonstrates how to right-align specific columns in tables rendered by Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ntable\n  .head([\n    'Migration',\n    'Batch'\n    {\n      content: 'Status',\n      hAlign: 'right'\n    },\n  ])\n\ntable.row([\n  '1590595949171_entities.ts',\n  '2',\n  {\n    content: this.colors.green('DONE'),\n    hAlign: 'right'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific Suites in AdonisJS\nDESCRIPTION: Commands to run tests for all suites or specific test suites like functional or unit tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_10\n\nLANGUAGE: shell\nCODE:\n```\nnode ace test\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to PascalCase in TypeScript\nDESCRIPTION: Demonstrates converting strings to Pascal case format using the string helper. Useful for generating JavaScript class names from various string formats.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.pascalCase('user team') // UserTeam\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Validation Messages for Enum and EnumSet in AdonisJS (TypeScript)\nDESCRIPTION: An example of custom error message templates for enum and enumSet schema types. These messages employ the '{{ options.choices }}' placeholder to render the list of valid choices, making error reporting clearer.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  'enum': 'The value must be one of {{ options.choices }}',\\n  'enumSet': 'The values must be one of {{ options.choices }}',\\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Configuration\nDESCRIPTION: Example showing how to configure debug mode for the exception handler\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/exception_handling.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class HttpExceptionHandler extends ExceptionHandler {\n  protected debug = !app.inProduction\n}\n```\n\n----------------------------------------\n\nTITLE: Handling E_MISSING_COMMAND_NAME Exception in TypeScript\nDESCRIPTION: Example of importing and checking for missing command name exception. This exception is raised when a command does not define the commandName property or its value is empty.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_MISSING_COMMAND_NAME) {\n  console.log(error.commandName)\n}\n```\n\n----------------------------------------\n\nTITLE: Silently Checking Authentication Status\nDESCRIPTION: Example of performing a silent authentication check on a public page before displaying user information, using the auth guard explicitly.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_11\n\nLANGUAGE: edge\nCODE:\n```\n{{-- Check if user is logged-in --}}\n@eval(await auth.use('web').check())\n\n@if(auth.use('web').isAuthenticated)\n  <p> {{ auth.use('web').user.email }} </p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Using Route Helper in AdonisJS v6 Test\nDESCRIPTION: This snippet demonstrates how to use the route helper from TestContext to create a URL for a route in an AdonisJS v6 test, ensuring that tests remain valid even if route definitions change.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\ntest('get a list of users', async ({ client, route }) => {\n  const response = await client.get(\n    route('users.list')\n  )\n\n  response.assertStatus(200)\n  response.assertBody({\n    data: [\n      {\n        id: 1,\n        email: 'foo@bar.com',\n      }\n    ]\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Creating singleton getters for framework classes\nDESCRIPTION: Shows how to create singleton getters that compute their value only once per instance and cache the result for subsequent access, which can improve performance for expensive computations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/extending_the_framework.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst isSingleton = true\n\nRequest.getter('hasRequestId', function (this: Request) {\n  return this.header('x-request-id')\n}, isSingleton)\n```\n\n----------------------------------------\n\nTITLE: Including Vite Scripts with @vite Tag\nDESCRIPTION: Using the @vite tag to include scripts processed by Vite in Edge templates. The path provided must match the entry points defined in the Vite configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_17\n\nLANGUAGE: edge\nCODE:\n```\n@vite(['resources/js/app.js'])\n```\n\n----------------------------------------\n\nTITLE: Configuring Memory Session Driver for Testing\nDESCRIPTION: Environment configuration to use an in-memory session driver for testing purposes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_10\n\nLANGUAGE: dotenv\nCODE:\n```\n// title: .env.test\nSESSION_DRIVER=memory\n```\n\n----------------------------------------\n\nTITLE: Using @error Tag for Error Messages\nDESCRIPTION: Using the @error tag to display error messages from the errorsBag in flash messages. This provides a cleaner syntax than manually checking for the presence of error messages.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_15\n\nLANGUAGE: edge\nCODE:\n```\n@error('E_BAD_CSRF_TOKEN')\n  <p>{{ $message }}</p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Protecting Routes with Basic Auth Middleware in AdonisJS\nDESCRIPTION: This snippet demonstrates how to protect a specific route using the previously registered `auth` middleware. It imports the named middleware collection from `#start/kernel`. The `.use()` method is chained to the route definition, applying the `auth` middleware and specifying that it should use the `basicAuth` guard for authentication via the `guards: ['basicAuth']` option. Unauthenticated requests to this route will be challenged.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/basic_auth_guard.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\n// highlight-start\nimport { middleware } from '#start/kernel'\n// highlight-end\nimport router from '@adonisjs/core/services/router'\n\nrouter\n  .get('dashboard', ({ auth }) => {\n    return auth.user\n  })\n  .use(middleware.auth({\n    // highlight-start\n    guards: ['basicAuth']\n    // highlight-end\n  }))\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Command Metadata for AdonisJS Custom Command\nDESCRIPTION: Set up the basic structure of a custom Ace command, including command name, description, and options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/creating_commands.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\nimport { CommandOptions } from '@adonisjs/core/types/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  static commandName = 'greet'\n  static description = 'Greet a user by name'\n\n  static options: CommandOptions = {\n    startApp: false,\n    allowUnknownFlags: false,\n    staysAlive: false,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling ETag Headers for Static Files (TypeScript)\nDESCRIPTION: Configures the static middleware to add ETag headers to all static file responses, which helps caches efficiently validate content. Set within the middleware's configuration file and requires @adonisjs/static to be active. ETags are useful for browser and CDN-level caching and validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n{\n  etag: true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Tests in AdonisRC\nDESCRIPTION: Example of configuring test suites, including timeout settings, force exit option, and file patterns for test files.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tests: {\n    timeout: 2000,\n    forceExit: false,\n    suites: [\n      {\n        name: 'functional',\n        files: [\n          'tests/functional/**/*.spec.ts'\n        ],\n        timeout: 30000\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying a Custom Backend Store for Rate Limiting\nDESCRIPTION: Example of specifying a particular backend store (Redis) for a throttle middleware instead of using the default store.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nlimiter\n  .allowRequests(10)\n  .every('1 minute')\n  // highlight-start\n  .store('redis')\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Configuring Trusted Proxies with IP Ranges\nDESCRIPTION: Configuration for trusted proxy IP addresses using proxy-addr package with IP range notation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport proxyAddr from 'proxy-addr'\n\nexport const http = defineConfig({\n  trustProxy: proxyAddr.compile(['127.0.0.1/8', '::1/128'])\n})\n```\n\n----------------------------------------\n\nTITLE: Boolean Environment Variable Validation and Optional Rules - TypeScript\nDESCRIPTION: Illustrates how to declare, validate, and optionally allow empty boolean environment variables using Env.schema.boolean and its optional variants. String representations ('true', '1', 'false', '0') are automatically coerced. Handles required, always-optional, and conditionally-optional cases for configuration settings like CACHE_VIEWS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  CACHE_VIEWS: Env.schema.boolean()\n}\n\n// Mark it as optional\n{\n  CACHE_VIEWS: Env.schema.boolean.optional()\n}\n\n// Mark it as optional with a condition\n{\n  CACHE_VIEWS: Env.schema.boolean.optionalWhen(process.env.NODE_ENV === 'production')\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Tokens Provider to User Model\nDESCRIPTION: Configures the User model in AdonisJS to use the DbRememberMeTokensProvider for handling Remember Me tokens, enabling automatic token handling functionality.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/session_guard.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseModel } from '@adonisjs/lucid/orm'\n// highlight-start\nimport { DbRememberMeTokensProvider } from '@adonisjs/auth/session'\n// highlight-end\n\nexport default class User extends BaseModel {\n  // ...rest of the model properties\n\n  // highlight-start\n  static rememberMeTokens = DbRememberMeTokensProvider.forModel(User)\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Validator Paths in AdonisJS\nDESCRIPTION: Demonstrates how to use the validatorsPath method to get the path to files in the validators directory. It can return the path to a specific file or the directory itself.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\napp.validatorsPath('create_user.ts')\n// /project_root/app/validators/create_user.ts\n\napp.validatorsPath()\n// /project_root/app/validators/create_user.ts\n```\n\n----------------------------------------\n\nTITLE: AddressValidator with Dynamic Cache Key (AdonisJS, TypeScript)\nDESCRIPTION: Updates AddressValidator by appending the selected state to the cacheKey, ensuring each unique state has an independent cached schema instance. This approach can accommodate per-state variations in schema, at the cost of potentially many cached schema instances. Depends on AdonisJS context and variables; highlights the scalability tradeoffs when using dynamic cache keys.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_caching.md#2025-04-22_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nexport default class AddressValidator {\n  public selectedState = this.ctx.request.input('state')\n\n  public schema = schema.create({\n    state: schema.enum(STATES),\n    city: schema.enum(CITIES[this.selectedState] || [])\n  })\n\n  // highlight-start\n  public cacheKey = `${this.ctx.routeKey}-${selectedState}`\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Messages in AdonisJS Validation\nDESCRIPTION: This snippet demonstrates how to define custom validation messages in AdonisJS. These messages can be specific to validation rules or fields and they allow the inclusion of dynamic placeholders such as `{{ field }}` and `{{ rule }}`. No external dependencies are needed, but this functionality requires a valid AdonisJS setup.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nawait request.validate({\\n  schema: schema.create({\\n    // ...\\n  }),\\n  // highlight-start\\n  messages: {\\n    required: 'The {{ field }} is required to create a new account',\\n    'username.unique': 'Username not available'\\n  }\\n  // highlight-end\\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Vue Dependencies\nDESCRIPTION: Command to install the required npm packages for Vue integration, including Vue itself, vue-loader for webpack integration, and the Vue compiler for single-file components.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\nnpm i vue vue-loader @vue/compiler-sfc\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Retry Strategy in AdonisJS\nDESCRIPTION: Configuration for Redis retry strategy in AdonisJS, defining the number of retries and delay.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n{\n  main: {\n    host: env.get('REDIS_HOST'),\n    port: env.get('REDIS_PORT'),\n    password: env.get('REDIS_PASSWORD', ''),\n    retryStrategy(times) {\n      return times > 10 ? null : times * 50\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Flag Values in AdonisJS Ace Command\nDESCRIPTION: This snippet demonstrates how to process flag values before they are assigned to class properties using the parse method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n@flags.string({\n  parse (value) {\n    return value ? connections[value] : value\n  }\n})\ndeclare connection: string\n```\n\n----------------------------------------\n\nTITLE: Edge Template Asset References - Incorrect\nDESCRIPTION: Example showing incorrect way to reference assets in Edge templates\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <script src=\"/assets/app.js\"></script>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"/assets/app.css\">\n</head>\n<body>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Disabling Migration Rollbacks in AdonisJS Production\nDESCRIPTION: Configuration snippet to disable migration rollbacks in production for an AdonisJS application using Lucid ORM.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{\n  pg: {\n    client: 'pg',\n    migrations: {\n      disableRollbacksInProduction: true,\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Posts Controller\nDESCRIPTION: Command to generate a new controller for handling post operations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:controller post store update\n```\n\n----------------------------------------\n\nTITLE: Using importDefault Helper in AdonisJS REPL\nDESCRIPTION: Example of using the importDefault helper method to import a default export in the AdonisJS REPL.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/repl.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nconst User = await importDefault('#models/user')\n```\n\n----------------------------------------\n\nTITLE: Object with Any Members in AdonisJS\nDESCRIPTION: Shows how to define an object that accepts any properties without specific validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  colors: schema.object().anyMembers()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Backend Vite Settings\nDESCRIPTION: Backend Vite configuration for AdonisJS, specifying build directory and CDN assets URL.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/vite'\n\nconst viteBackendConfig = defineConfig({\n  buildDirectory: 'public/assets',\n  assetsUrl: 'https://cdn.example.com/',\n})\n\nexport default viteBackendConfig\n```\n\n----------------------------------------\n\nTITLE: Validating File as Optional in AdonisJS (TypeScript)\nDESCRIPTION: This snippet shows how to mark a file schema property as optional by chaining the 'optional' method. If 'cover_image' is undefined or null, it will be removed from the validated object. It uses the same validation options as the base file schema and is intended for scenarios where the file upload is not mandatory.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  cover_image: schema.file.optional({\\n    size: '2mb',\\n    extnames: ['jpg', 'gif', 'png'],\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Event Assertion Examples in TypeScript\nDESCRIPTION: Demonstrates various event assertion methods for testing event emissions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst events = emitter.fake()\n\nevents.assertEmitted('user:registered')\nevents.assertNotEmitted(OrderUpdated)\n```\n\n----------------------------------------\n\nTITLE: Currency Formatting Example\nDESCRIPTION: Shows how to format currency values using the i18n manager.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nimport i18nManager from '@adonisjs/i18n/services/main'\n\ni18nManager\n  .locale('en')\n  .formatCurrency(200, {\n    currency: 'USD'\n  })\n```\n\n----------------------------------------\n\nTITLE: Listening to Mail Sending Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'mail:sending' event which is emitted by the @adonisjs/mail package before sending an email, providing mailer name, message, and views information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('mail:sending', (event) => {\n  console.log(event.mailerName)\n  console.log(event.message)\n  console.log(event.views)\n})\n```\n\n----------------------------------------\n\nTITLE: Inverse Authorization Checks with @cannot Tag\nDESCRIPTION: Using the @cannot tag to check if a user is not authorized to perform an action. This is the inverse of the @can tag for more readable template logic.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_21\n\nLANGUAGE: edge\nCODE:\n```\n@cannot('editPost', post)\n  {{-- Cannot edit post --}}\n@end\n\n@cannot('editPost', post)\n  {{-- Cannot edit post --}}\n@end\n```\n\n----------------------------------------\n\nTITLE: Using optional Modifier for Partial Updates in AdonisJS (TypeScript)\nDESCRIPTION: Illustrates validating a payload where a field (`email`) can be a string or absent (`undefined`), but not `null`, using `schema.string.optional()`. The validated payload, potentially missing the 'email' key if it wasn't provided, is then merged with a User model instance. Assumes a `User` model exists and is imported.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst payload = await request.validate({\n  schema: schema.create({\n    email: schema.string.optional(),\n  })\n})\n\nconst user = await User.findOrFail(1)\nuser.merge(payload)\nawait user.save()\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Cache-Control Header for Static Files (TypeScript)\nDESCRIPTION: Shows how to enable the Cache-Control HTTP header for static responses via the static middleware. Placing this snippet in the static configuration makes the middleware return Cache-Control headers with responses, optimizing client and server performance. Dependent on @adonisjs/static and usage within config/static.ts.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  cacheControl: true\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional Boolean Schema in AdonisJS\nDESCRIPTION: Shows boolean field configuration that can be both nullable and optional.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  accepted: schema.boolean.nullableAndOptional()\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Command Lifecycle Methods in AdonisJS\nDESCRIPTION: Define lifecycle methods for a custom Ace command, including prepare, interact, run, and completed stages.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/creating_commands.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, args, flags } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  async prepare() {\n    console.log('preparing')\n  }\n\n  async interact() {\n    console.log('interacting')\n  }\n  \n  async run() {\n    console.log('running')\n  }\n\n  async completed() {\n    console.log('completed')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Boolean Schema in AdonisJS\nDESCRIPTION: Demonstrates nullable boolean validation where field must exist but can contain null values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  accepted: schema.boolean.nullable()\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Validation Flash Errors in AdonisJS Edge Template (Edge)\nDESCRIPTION: Demonstrates how to access and display validation error messages, stored as flash messages in the session, within an AdonisJS Edge template. It uses the `flashMessages` global helper to check for and retrieve errors for a specific field (`username`).\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n```edge\n@if(flashMessages.has('errors.username'))\n  <p> {{ flashMessages.get('errors.username') }} </p>\n@end\n```\n```\n\n----------------------------------------\n\nTITLE: Validate Prompt Input\nDESCRIPTION: Example of validating prompt input using the validate callback function.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  format(value) {\n    return value.length > 6\n    ? true\n    : 'Model name must be 6 characters long'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @adonisjs/redis Package in AdonisJS\nDESCRIPTION: Command to install and configure the @adonisjs/redis package in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/redis\n```\n\n----------------------------------------\n\nTITLE: Nested Object and Array Message Definitions in AdonisJS\nDESCRIPTION: This example shows how to define validation messages for nested objects and arrays in AdonisJS. The messages utilize dot separators to indicate nesting, allowing for detailed and custom messages for complex data structures within the validation schema.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  messages: {\\n    'user.username.required': 'Missing value for username',\\n    'tags.*.number': 'Tags must be an array of numbers',\\n    'products.*.title.required': 'Each product must have a title'\\n  }  \\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Table Output in Commands\nDESCRIPTION: Tests a command's table output by asserting the table rows after execution.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nconst command = await ace.create(Greet, [])\nawait command.exec()\n\ncommand.assertTableRows([\n  ['Harminder Virk', 'virk@adonisjs.com'],\n  ['Romain Lanz', 'romain@adonisjs.com'],\n  ['Julien-R44', 'julien@adonisjs.com'],\n  ['Michaël Zasso', 'targos@adonisjs.com'],\n])\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS ESLint Config - Shell\nDESCRIPTION: Installs the AdonisJS ESLint config preset and ESLint itself for code linting. These commands should be run in your Node.js/TypeScript project to enforce consistent linting standards. Requires Node.js and npm as prerequisites.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @adonisjs/eslint-config\n\n# Make sure also to install eslint\nnpm i -D eslint\n```\n\n----------------------------------------\n\nTITLE: Unsubscribing Events using Return Function in TypeScript\nDESCRIPTION: Demonstrates how to unsubscribe from events using the function returned by emitter.on method in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nconst unsubscribe = emitter.on('user:registered', () => {})\n\n// Remove the listener\nunsubscribe()\n```\n\n----------------------------------------\n\nTITLE: Enum Validation for SESSION_DRIVER Environment Variable\nDESCRIPTION: Configures ENV schema validation for the SESSION_DRIVER environment variable to ensure it matches one of the allowed session stores.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n{\n  SESSION_DRIVER: Env.schema.enum(['cookie', 'redis', 'memory'] as const)\n}\n```\n\n----------------------------------------\n\nTITLE: Using nullableAndOptional Modifier for PATCH Updates in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates validating a request payload where a field (`fullName`) can be a string, `null`, or completely absent (`undefined`) using `schema.string.nullableAndOptional()`. The validated payload is then merged with a User model instance, suitable for handling partial updates in PATCH requests. Assumes a `User` model exists and is imported.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nconst payload = await request.validate({\n  schema: schema.create({\n    fullName: schema.string.nullableAndOptional(),\n  })\n})\n\nconst user = await User.findOrFail(1)\nuser.merge(payload)\nawait user.save()\n```\n```\n\n----------------------------------------\n\nTITLE: Adding Query Parameters to URLs in AdonisJS\nDESCRIPTION: Demonstrates how to add query parameters to generated URLs using the builder.qs() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter\n  .builder()\n  .qs({ page: 1, sort: 'asc' })\n  .make('posts.index') // /posts?page=1&sort=asc\n```\n\n----------------------------------------\n\nTITLE: Handling E_TOO_MANY_REQUESTS Exception in TypeScript\nDESCRIPTION: Example of importing and checking for rate limit exceeded exception. This exception is raised by the @adonisjs/rate-limiter package when a request exhausts all allowed requests during a given duration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as limiterErrors } from '@adonisjs/limiter'\nif (error instanceof limiterErrors.E_TOO_MANY_REQUESTS) {\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Runner Hooks in AdonisJS\nDESCRIPTION: Defining global setup and teardown hooks that run before and after all tests using the runnerHooks configuration in bootstrap.ts.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport const runnerHooks: Required<Pick<Config, 'setup' | 'teardown'>> = {\n  setup: [\n    () => {\n      console.log('running before all the tests')\n    }\n  ],\n  teardown: [\n    () => {\n      console.log('running after all the tests')\n    }\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Dash Casing Strings in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates how to use the dashCase helper to convert strings to dash case format, with an option to capitalize words.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.dashCase('helloWorld') // hello-world\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.dashCase('helloWorld', { capitalize: true }) // Hello-World\n```\n\n----------------------------------------\n\nTITLE: Emitting an Event from an AdonisJS Controller\nDESCRIPTION: This TypeScript code shows an AdonisJS controller method (`index`) that creates a user and then emits a 'new:user' event using the application's event emitter (`emitter`). This is standard practice for decoupling actions, but accessing HTTP context within the corresponding event listener is problematic.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nexport default class UsersController {\n  async index() {\n    const user = await User.create({})\n    emitter.emit('new:user', user)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring API-Only Routes in AdonisJS\nDESCRIPTION: Creates API-focused routes by excluding form-related endpoints using apiOnly() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.resource('posts', PostsController).apiOnly()\n```\n\n----------------------------------------\n\nTITLE: Testing Logger Output in Commands\nDESCRIPTION: Tests a command's logger output by asserting the log message after execution.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\ntest('should greet the user and finish with exit code 1', async () => {\n  /**\n   * Create an instance of the Greet command class\n   */\n  const command = await ace.create(Greet, [])\n\n  /**\n   * Execute command\n   */\n  await command.exec()\n\n  /**\n   * Assert command exited with status code 0\n   */\n  command.assertSucceeded()\n\n  // highlight-start\n  /**\n   * Assert the command printed the following log message\n   */\n  command.assertLog('[ blue(info) ] Hello world from \"Greet\"')\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Registering i18n Provider\nDESCRIPTION: Configuration to register the i18n service provider in adonisrc.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/i18n/i18n_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Cache Service Module\nDESCRIPTION: Module that exports a singleton instance of the DummyCache class as a container service.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport { DummyCache } from '../src/cache.js'\n\nlet cache: DummyCache\n\nawait app.booted(async () => {\n  cache = await app.container.make(DummyCache)\n})\n\nexport { cache as default }\n```\n\n----------------------------------------\n\nTITLE: Structure of Validation Flash Error Messages (JSON)\nDESCRIPTION: Shows the structure of validation errors stored in the session flash messages for server-rendered applications. The errors are nested under an `errors` key, with each field having an array of error strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n```ts\n{\n  errors: {\n    username: ['username is required']\n  }\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Array Schema with Object Members in AdonisJS\nDESCRIPTION: Demonstrates array validation for complex object members with multiple properties.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  users: schema.array().members(\n    schema.object().members({\n      username: schema.string(),\n      email: schema.string(),\n    })\n  ),\n}\n\n// Valid data: [{ username: 'virk', email: 'virk@adonisjs.com' }]\n```\n\n----------------------------------------\n\nTITLE: Accessing AsyncLocalStorage State in a Service Module (TypeScript)\nDESCRIPTION: This TypeScript code defines a `UserService` class in `user_service.js`. It imports the shared `storage` instance. The `get` method retrieves the current asynchronous state using `storage.getStore()` and logs the user ID found within that state. This demonstrates accessing context-specific data without explicit parameter passing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// title: user_service.js\nimport { storage } from './storage.js'\n\nexport class UserService {\n  async get() {\n    const state = storage.getStore()\n    console.log(`The user id is ${state.user.id}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: CSP Report-Only Configuration\nDESCRIPTION: TypeScript configuration for setting up Content Security Policy in report-only mode, which reports violations without blocking resources, useful for testing CSP implementation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nconst shieldConfig = defineConfig({\n  csp: {\n    enabled: true,\n    directives: {\n      defaultSrc: [`'self'`],\n      // highlight-start\n      reportUri: ['/csp-report']\n      // highlight-end\n    },\n    // highlight-start\n    reportOnly: true,\n    // highlight-end\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Pluralizing Words in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates various methods for handling pluralization of words, including checking for plural forms and conditional pluralization based on count.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.plural('test')\n// tests\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.isPlural('tests') // true\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.pluralize('box', 1) // box\nstring.pluralize('box', 2) // boxes\nstring.pluralize('box', 0) // boxes\n\nstring.pluralize('boxes', 1) // box\nstring.pluralize('boxes', 2) // boxes\nstring.pluralize('boxes', 0) // boxes\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.pluralize.addUncountableRule('paper')\nstring.pluralize.addSingularRule(/singles$/i, 'singular')\n```\n\n----------------------------------------\n\nTITLE: Validating Number as Nullable in AdonisJS (TypeScript)\nDESCRIPTION: This snippet enables a number property to accept null values, enforcing presence but allowing explicit null in the payload. It uses the '.nullable' modifier chained to the number schema.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  marks: schema.number.nullable()\\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling React HMR in Edge Template\nDESCRIPTION: Edge template configuration to enable React Hot Module Replacement using the viteReactRefresh tag before including entrypoints.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    @viteReactRefresh()\n    @vite(['resources/js/app.js'])\n</head>\n<body>\n    \n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Using Spread Arguments in AdonisJS Ace Command\nDESCRIPTION: Example of using the @args.spread() decorator to accept multiple values under the same argument name. The spread argument must be the last one defined in the command class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/args.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, args, flags } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  static commandName = 'greet'\n  static description = 'Greet a user by name'\n  \n  // highlight-start\n  @args.spread()\n  declare names: string[]\n  // highlight-start\n\n  run() {\n    console.log(this.names)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Ejecting Stubs for Customization in AdonisJS\nDESCRIPTION: Demonstrates how to eject (copy) stubs from AdonisJS packages to your application for customization. This allows modifying the templates used for scaffolding components.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\n# Copy stub from @adonisjs/core package\nnode ace eject make/controller\n\n# Copy stub from @adonisjs/bouncer package\nnode ace eject make/policy --pkg=@adonisjs/bouncer\n```\n\n----------------------------------------\n\nTITLE: Runtime Config Updates\nDESCRIPTION: Example of updating configuration values at runtime using the config service and environment variables.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/configuration.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport env from '#start/env'\nimport config from '@adonisjs/core/services/config'\n\nconst HOST = env.get('HOST')\nconst PORT = env.get('PORT')\n\nconfig.set('app.appUrl', `http://${HOST}:${PORT}`)\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js Version using Shell\nDESCRIPTION: Checks the installed Node.js version using the command line. AdonisJS v6 requires Node.js version 20 or higher. The example output shows version 22.0.0.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n// title: Verify Node.js version\nnode -v\n# v22.0.0\n```\n\n----------------------------------------\n\nTITLE: Using ts-morph in AdonisJS v6 Codemods (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the getTsMorphProject method to get an instance of ts-morph for custom file transformations. It shows how to access a specific source file using the project instance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nconst project = await codemods.getTsMorphProject()\n\nproject.getSourceFileOrThrow('start/routes.ts')\n```\n\n----------------------------------------\n\nTITLE: Combining Prompt Assertions and Responses\nDESCRIPTION: Shows how to combine validation assertions and reply for a prompt in a single chain.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_15\n\nLANGUAGE: ts\nCODE:\n```\ncommand.prompt\n  .trap('What is your name?')\n  .assertFails('', 'Please enter your name')\n  .assertPasses('Virk')\n  .replyWith('Romain')\n```\n\n----------------------------------------\n\nTITLE: Handling E_ROW_NOT_FOUND Exception in TypeScript\nDESCRIPTION: Example of importing and checking for row not found exception from Lucid ORM. This exception is raised when a database query for finding one item fails, such as when using Model.findOrFail().\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as lucidErrors } from '@adonisjs/lucid'\nif (error instanceof lucidErrors.E_ROW_NOT_FOUND) {\n  // handle error\n  console.log(`${error.model?.name || 'Row'} not found`)\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling AsyncLocalStorage for HTTP Context in AdonisJS\nDESCRIPTION: This TypeScript configuration snippet within `config/app.ts` enables the use of AsyncLocalStorage for managing the HTTP context in an AdonisJS application. Setting `useAsyncLocalStorage` to `true` allows global access to the current request's context via `HttpContext.get()`.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/app.ts\nexport const http = defineConfig({\n  useAsyncLocalStorage: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Reading Files Recursively with fsReadAll in TypeScript\nDESCRIPTION: The fsReadAll function recursively fetches files from a directory and its sub-folders, ignoring dotfiles. It accepts a directory path and options, returning a list of file paths.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { fsReadAll } from '@adonisjs/core/helpers'\n\nconst files = await fsReadAll(new URL('./config', import.meta.url), { pathType: 'url' })\nawait Promise.all(files.map((file) => import(file)))\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntype Options = {\n  ignoreMissingRoot?: boolean\n  filter?: (filePath: string, index: number) => boolean\n  sort?: (current: string, next: string) => number\n  pathType?: 'relative' | 'unixRelative' | 'absolute' | 'unixAbsolute' | 'url'\n}\n\nconst options: Partial<Options> = {}\nawait fsReadAll(location, options)\n```\n\n----------------------------------------\n\nTITLE: Using Dump and Die in Routes\nDESCRIPTION: Example of implementing the dd helper in routes for debugging user data with enhanced output formatting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/debugging.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport User from '#models/user'\nimport router from '@adonisjs/core/services/router'\nimport { dd } from '@adonisjs/core/services/dumper'\n\nrouter.get('/users', async () => {\n  const users = await User.all()\n  dd(users)\n  return users\n})\n```\n\n----------------------------------------\n\nTITLE: Safe String Comparison in TypeScript\nDESCRIPTION: Shows how to safely compare strings to prevent timing attacks using the safeEqual helper.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { safeEqual } from '@adonisjs/core/helpers'\n\n/**\n * The trusted value, it might be saved inside the db\n */\nconst trustedValue = 'hello world'\n\n/**\n * Untrusted user input\n */\nconst userInput = 'hello'\n\nif (safeEqual(trustedValue, userInput)) {\n  // both are the same\n} else {\n  // value mismatch\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for Frontend in AdonisJS\nDESCRIPTION: TypeScript configuration for frontend code in the resources directory, extending the base configuration and adding DOM library support and path aliases.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"../tsconfig.json\",\n  \"compilerOptions\": {\n    \"baseUrl\": \".\",\n    \"lib\": [\"DOM\"],\n    \"jsx\": \"preserve\",\n    \"paths\": {\n      \"@/*\": [\"./js/*\"]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Production Application\nDESCRIPTION: Command to create production build using ace build command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\nnode ace build\n```\n\n----------------------------------------\n\nTITLE: Defining String Flags in AdonisJS Ace Command\nDESCRIPTION: This snippet demonstrates how to define a string flag in an AdonisJS Ace command using the @flags.string() decorator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, flags } from '@adonisjs/core/ace'\n\nexport default class MakeControllerCommand extends BaseCommands {\n  @flags.string()\n  declare model: string\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Import Aliases with package.json (JSON)\nDESCRIPTION: This code snippet demonstrates configuring sub-path import aliases using the imports field in a package.json file for an AdonisJS project. The aliases map custom path prefixes (e.g., #controllers) to corresponding source directory structures, facilitating modular and organized import statements. The input is a JSON object placed in package.json; it has no runtime dependencies but requires Node.js v12.20 or higher for sub-path imports.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/folder_structure.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n// title: package.json\\n{\\n  \"imports\": {\\n    \"#controllers/*\": \"./app/controllers/*.js\",\\n    \"#exceptions/*\": \"./app/exceptions/*.js\",\\n    \"#models/*\": \"./app/models/*.js\",\\n    \"#mails/*\": \"./app/mails/*.js\",\\n    \"#services/*\": \"./app/services/*.js\",\\n    \"#listeners/*\": \"./app/listeners/*.js\",\\n    \"#events/*\": \"./app/events/*.js\",\\n    \"#middleware/*\": \"./app/middleware/*.js\",\\n    \"#validators/*\": \"./app/validators/*.js\",\\n    \"#providers/*\": \"./app/providers/*.js\",\\n    \"#policies/*\": \"./app/policies/*.js\",\\n    \"#abilities/*\": \"./app/abilities/*.js\",\\n    \"#database/*\": \"./database/*.js\",\\n    \"#tests/*\": \"./tests/*.js\",\\n    \"#start/*\": \"./start/*.js\",\\n    \"#config/*\": \"./config/*.js\"\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Up Raw Mode for Logger Output Testing\nDESCRIPTION: Sets up a test group with a hook that switches Ace UI into raw mode before tests and restores normal mode afterward.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\ntest.group('Commands greet', (group) => {\n  // highlight-start\n  group.each.setup(() => {\n    ace.ui.switchMode('raw')\n    return () => ace.ui.switchMode('normal')\n  })\n  // highlight-end\n  \n  // test goes here\n})\n```\n\n----------------------------------------\n\nTITLE: Executing a Node.js Script\nDESCRIPTION: This shell command executes the `main.js` file using the Node.js runtime. This will run the example code, demonstrating the use of `AsyncLocalStorage` to maintain state across concurrent asynchronous operations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnode main.js\n```\n\n----------------------------------------\n\nTITLE: Implementing Theme Switcher in AdonisJS Header Component\nDESCRIPTION: Example of implementing a custom theme switcher button that displays different text based on the dark mode state. Uses Alpine.js conditional rendering to toggle between light and dark mode indicators.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('themeSwitcher')\n    <span x-if=\"store.darkMode.enabled\"> Dark </span>\n    <span x-if=\"!store.darkMode.enabled\"> Light </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Trapping and Responding to Prompts in Tests\nDESCRIPTION: Sets up a trap for a prompt and programmatically provides a response during testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nconst command = await ace.create(Greet, [])\n\n// highlight-start\ncommand.prompt\n  .trap('What is your name?')\n  .replyWith('Virk')\n// highlight-end\n\nawait command.exec()\n\ncommand.assertSucceeded()\n```\n\n----------------------------------------\n\nTITLE: Configuring Vite with React Plugin\nDESCRIPTION: Vite configuration setup with AdonisJS and React plugins for frontend development.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport adonisjs from '@adonisjs/vite/client'\nimport react from '@vitejs/plugin-react'\n\nexport default defineConfig({\n  plugins: [\n    adonisjs({\n      entrypoints: [\"resources/js/app.js\"],\n    }),\n    react(),\n  ],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a Validation Schema for Nested Form Data\nDESCRIPTION: This TypeScript snippet creates validation schemas for nested form data using the AdonisJS schema API. It demonstrates handling arrays and objects within the form data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\nschema.create({\n  poll_options: schema.array().members(\n    schema.string()\n  )\n})\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\nschema.create({\n  poll: schema.object().members({\n    title: schema.string(),\n    options: schema.array().members(\n      schema.string()\n    )\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Edge Template Vite Integration\nDESCRIPTION: Example of including Vite-processed assets in Edge templates using the @vite tag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_4\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    @vite(['resources/js/app.js'])\n</head>\n<body>\n    \n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Validating Date as Optional in AdonisJS (TypeScript)\nDESCRIPTION: This example applies the 'optional' modifier to a date validator, allowing the field to be omitted or set to null. If missing or null, the field is removed from the resulting validated object; otherwise, it is validated as a date with the provided format.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  published_at: schema.date.optional({\\n    format: 'yyyy-MM-dd HH:mm:ss',\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Camel Casing Strings in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates how to use the camelCase helper to convert strings to camel case format.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.camelCase('user_name') // userName\n```\n\n----------------------------------------\n\nTITLE: Defining a String Argument in AdonisJS Ace Command\nDESCRIPTION: Basic example of defining a command with a single string argument using the @args.string() decorator. The argument value will be accessible as a class property with the same name.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/args.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, args, flags } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  static commandName = 'greet'\n  static description = 'Greet a user by name'\n  \n  @args.string()\n  declare name: string\n\n  run() {\n    console.log(this.name)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Long-Running Command in AdonisJS\nDESCRIPTION: This example demonstrates how to create a command that keeps the application alive until explicitly terminated. It uses the 'staysAlive' option and manual termination.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application_lifecycle.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  static options = {\n    startApp: true,\n    staysAlive: true,\n  }\n  \n  async run() {\n    await runSomeProcess()\n    \n    // Terminate the process\n    await this.terminate()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Optional Arguments in AdonisJS\nDESCRIPTION: Example demonstrating how to provide a default value for an optional argument using the default property in the decorator configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/args.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n@args.string({\n  description: 'Name of the user',\n  required: false,\n  default: 'guest'\n})\ndeclare name: string\n```\n\n----------------------------------------\n\nTITLE: Installing Transmit Client Package\nDESCRIPTION: Command to install the Transmit client package for client-side event listening using npm.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @adonisjs/transmit-client\n```\n\n----------------------------------------\n\nTITLE: Generating Random Strings in TypeScript\nDESCRIPTION: Demonstrates generating cryptographically secure random strings using the string helper.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.random(32)\n// 8mejfWWbXbry8Rh7u8MW3o-6dxd80Thk\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Auth Login Succeeded Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session_auth:login_succeeded' event which is dispatched after a user has been logged in successfully, providing guard name, session ID, user, and remember me token information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session_auth:login_succeeded', (event) => {\n  console.log(event.guardName)\n  console.log(event.sessionId)\n  console.log(event.user)\n  console.log(event.rememberMeToken) // (if created one)\n})\n```\n\n----------------------------------------\n\nTITLE: Setting Route Patterns for Multipart Auto-Processing - AdonisJS - TypeScript\nDESCRIPTION: Shows how to specify route patterns for the multipart parser's autoProcess property, enabling automatic file processing only for matched routes. This configuration is applied inside the multipart parser object within BodyParser's config. Pattern values must correspond to AdonisJS route syntax, and the array determines which routes are auto-processed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  autoProcess: [\n    '/uploads',\n    '/post/:id'\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reading Session Data\nDESCRIPTION: Using the session helper to read session data in Edge templates. This example reads a post visit counter from the session.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\nPost views: {{ session.get(`post.${post.id}.visits`) }}\n```\n\n----------------------------------------\n\nTITLE: Setting Vue-Specific Encore Options\nDESCRIPTION: Shows how to configure Vue-specific options in Encore, including specifying the Vue version, whether to use runtime compiler, and enabling JSX support. These options affect how Vue components are compiled.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nEncore.enableVueLoader(() => {}, {\n  version: 3,\n  runtimeCompilerBuild: false,\n  useJsx: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Decrementing values in session storage in TypeScript\nDESCRIPTION: The decrement method decreases the value of a key in the session by a specified amount. If the key doesn't exist, it will be created.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nsession.decrement('visits')\n\n// Decrement by 4\nsession.decrement('visits', 4)\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Test File\nDESCRIPTION: Command to generate a new test file for functional testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:test users/list --suite=functional\n```\n\n----------------------------------------\n\nTITLE: Managing Encrypted and Plain Cookies in Browser Tests\nDESCRIPTION: Code snippet showing methods for setting and getting encrypted and plain cookies during browser testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n// Write\nawait browserContext.setEncryptedCookie('username', 'virk')\nawait browserContext.setPlainCookie('username', 'virk')\n\n// Read\nawait browserContext.getEncryptedCookie('cartTotal')\nawait browserContext.getPlainCookie('cartTotal')\n```\n\n----------------------------------------\n\nTITLE: Fetching OAuth1 User Details from Token and Secret in TypeScript\nDESCRIPTION: Uses .userFromTokenAndSecret to fetch user details for OAuth1 providers like GitHub. Inputs a token and a secret, outputs user details. Requires OAuth1 configuration for Ally.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst user = await ally\n  .use('github')\n  .userFromTokenAndSecret(token, secret)\n```\n\n----------------------------------------\n\nTITLE: Defining Enum Options Using Schema Refs in AdonisJS (TypeScript)\nDESCRIPTION: This extended example shows how to dynamically generate enum options at runtime using schema.refs, suitable for cases where available choices are determined from runtime input or context. Demonstrates using refs for schema caching, a 'getCities' helper, and full class context in a custom validator. Requires 'schema', 'HttpContext', and TypeScript class usage.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\\nimport { HttpContext } from '@adonisjs/core/http'\\n\\n/**\\n * Dummy implementation returning hardcoded list of cities\\n */\\nfunction getCities(_state: string) {\\n  return  ['Mumbai', 'Pune', 'Nagpur']\\n}\\n\\nexport default class CreateUserValidator {\\n  constructor (protected ctx: HttpContext) {\\n  }\\n\\n  // highlight-start\\n  public refs = schema.refs({\\n    cities: getCities(this.ctx.request.input('state'))\\n  })\\n\\n  public schema = schema.create({\\n    city: schema.enum(this.refs.cities)\\n  })\\n  // highlight-end\\n\\n  public cacheKey = this.ctx.routeKey\\n}\n```\n\n----------------------------------------\n\nTITLE: Form Method Spoofing Configuration\nDESCRIPTION: Enables form method spoofing to support RESTful HTTP methods in HTML forms.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nexport const http = defineConfig({\n  allowMethodSpoofing: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Migrated Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session:migrated' event which is emitted by the @adonisjs/session package when a new session ID is generated using the session.regenerate() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session:migrated', (event) => {\n  console.log(`Migrating data to ${event.toSessionId}`)\n  console.log(`Destroying session ${event.fromSessionId}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Service Providers in adonisrc.ts\nDESCRIPTION: Configuration for registering service providers in the adonisrc.ts file. Shows both basic provider registration and environment-specific provider configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/service_providers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    () => import('@adonisjs/core/providers/app_provider'),\n    () => import('./providers/app_provider.js'),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Definition for Rate Limiter\nDESCRIPTION: Environment variable definition for configuring the default limiter store.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nLIMITER_STORE=redis\n```\n\n----------------------------------------\n\nTITLE: Nullable Object Schema in AdonisJS\nDESCRIPTION: Demonstrates nullable object validation with defined property types.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  profile: schema.object\n    .nullable() // 👈\n    .members({\n      username: schema.string(),\n      avatar_url: schema.string()\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Health Check Response\nDESCRIPTION: Example JSON response from the health check endpoint showing status of various checks and system information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"isHealthy\": true,\n  \"status\": \"warning\",\n  \"finishedAt\": \"2024-06-20T07:09:35.275Z\",\n  \"debugInfo\": {\n    \"pid\": 16250,\n    \"ppid\": 16051,\n    \"platform\": \"darwin\",\n    \"uptime\": 16.271809083,\n    \"version\": \"v21.7.3\"\n  },\n  \"checks\": [\n    {\n      \"name\": \"Disk space check\",\n      \"isCached\": false,\n      \"message\": \"Disk usage is 76%, which is above the threshold of 75%\",\n      \"status\": \"warning\",\n      \"finishedAt\": \"2024-06-20T07:09:35.275Z\",\n      \"meta\": {\n        \"sizeInPercentage\": {\n          \"used\": 76,\n          \"failureThreshold\": 80,\n          \"warningThreshold\": 75\n        }\n      }\n    },\n    {\n      \"name\": \"Memory heap check\",\n      \"isCached\": false,\n      \"message\": \"Heap usage is under defined thresholds\",\n      \"status\": \"ok\",\n      \"finishedAt\": \"2024-06-20T07:09:35.265Z\",\n      \"meta\": {\n        \"memoryInBytes\": {\n          \"used\": 41821592,\n          \"failureThreshold\": 314572800,\n          \"warningThreshold\": 262144000\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: LogRequests Middleware Class Definition\nDESCRIPTION: TypeScript class definition for a middleware that logs requests, demonstrating dependency injection pattern in AdonisJS packages.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ApplicationService } from '@adonisjs/core/types'\n\nexport class LogRequests {\n  constructor(\n    config: { ignoreRoutes: string[], logResponseBody: boolean },\n    app: ApplicationService\n  ) {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Mail Sent Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'mail:sent' event which is dispatched by the @adonisjs/mail package after sending an email, providing response and related message details.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('mail:sent', (event) => {\n  console.log(event.response)\n\n  console.log(event.mailerName)\n  console.log(event.message)\n  console.log(event.views)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Aliases in AdonisRC\nDESCRIPTION: Examples of creating command aliases for easier command invocation, including multiple aliases for the same command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  commandsAliases: {\n    migrate: 'migration:run'\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  commandsAliases: {\n    migrate: 'migration:run',\n    up: 'migration:run'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing SessionUserProviderContract with Kysely in TypeScript\nDESCRIPTION: This code snippet demonstrates how to implement the SessionUserProviderContract interface when using Kysely as the ORM in an AdonisJS application. It includes methods for creating a user for the guard and finding a user by ID.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { symbols } from '@adonisjs/auth'\nimport type { SessionGuardUser, SessionUserProviderContract } from '@adonisjs/auth/types/session'\nimport type { Users } from '../../types/db.js' // Specific to Kysely\n\nexport class SessionKyselyUserProvider implements SessionUserProviderContract<Users> {\n  /**\n   * Used by the event emitter to add type information to the events emitted by the session guard.\n   */   \n  declare [symbols.PROVIDER_REAL_USER]: Users\n\n  /**\n   * Bridge between the session guard and your provider.\n   */\n  async createUserForGuard(user: Users): Promise<SessionGuardUser<Users>> {\n    return {\n      getId() {\n        return user.id\n      },\n      getOriginal() {\n        return user\n      },\n    }\n  }\n\n  /**\n   * Find a user using the user id using your custom SQL library or ORM.\n   */\n  async findById(identifier: number): Promise<SessionGuardUser<Users> | null> {\n    const user = await db\n      .selectFrom('users')\n      .selectAll()\n      .where('id', '=', identifier)\n      .executeTakeFirst()\n\n    if (!user) {\n      return null\n    }\n\n    return this.createUserForGuard(user)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to cache:cleared Event in AdonisJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to listen for the 'cache:cleared' event, which is dispatched after the cache has been cleared using the cache.clear method. The event object contains information about the cache store that was cleared.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('cache:cleared', (event) => {\n  console.log(event.store)\n})\n```\n\n----------------------------------------\n\nTITLE: Using Array Flags in AdonisJS Ace Command\nDESCRIPTION: This snippet shows how array flags are used in the command line, allowing multiple values to be passed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nmake:user --groups=admin --groups=moderators --groups=creators\n\n# this.groups = ['admin', 'moderators', 'creators']\n```\n\n----------------------------------------\n\nTITLE: Creating a custom session store in TypeScript\nDESCRIPTION: Implementation example of a custom session store using MongoDB. The store must implement the SessionStoreContract interface with methods for reading, writing, destroying, and refreshing session data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  SessionData,\n  SessionStoreFactory,\n  SessionStoreContract,\n} from '@adonisjs/session/types'\n\n/**\n * The config you want to accept\n */\nexport type MongoDBConfig = {}\n\n/**\n * Driver implementation\n */\nexport class MongoDBStore implements SessionStoreContract {\n  constructor(public config: MongoDBConfig) {\n  }\n\n  /**\n   * Returns the session data for a session ID. The method\n   * must return null or an object of a key-value pair\n   */\n  async read(sessionId: string): Promise<SessionData | null> {\n  }\n\n  /**\n   * Save the session data against the provided session ID\n   */\n  async write(sessionId: string, data: SessionData): Promise<void> {\n  }\n\n  /**\n   * Delete session data for the given session ID\n   */\n  async destroy(sessionId: string): Promise<void> {\n  }\n\n  /**\n   * Reset the session expiry\n   */\n  async touch(sessionId: string): Promise<void> {\n  }\n}\n\n/**\n * Factory function to reference the store\n * inside the config file.\n */\nexport function mongoDbStore (config: MongoDbConfig): SessionStoreFactory {\n  return (ctx, sessionConfig) => {\n    return new MongoDBStore(config)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Boolean Flags in AdonisJS Ace Command\nDESCRIPTION: This snippet demonstrates how to define boolean flags in an AdonisJS Ace command using the @flags.boolean() decorator. It shows the basic structure for creating resource and singular flags.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, flags } from '@adonisjs/core/ace'\n\nexport default class MakeControllerCommand extends BaseCommands {\n  @flags.boolean()\n  declare resource: boolean\n\n  @flags.boolean()\n  declare singular: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Multiple Selection Prompt\nDESCRIPTION: Example of implementing multiple-choice selection prompt with named options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.multiple('Select database drivers', [\n  {\n    name: 'sqlite',\n    message: 'SQLite'\n  },\n  {\n    name: 'mysql',\n    message: 'MySQL'\n  },\n  {\n    name: 'pg',\n    message: 'PostgreSQL'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Auth Authentication Attempted Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session_auth:authentication_attempted' event which is dispatched when an attempt is made to validate the request session and check for a logged-in user.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session_auth:authentication_attempted', (event) => {\n  console.log(event.guardName)\n  console.log(event.sessionId)\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Build Hook in AdonisJS\nDESCRIPTION: Example implementation of a custom build hook that executes before the build process starts. Shows how to create a hook function with logging capability and custom logic execution.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/assembler_hooks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { AssemblerHookHandler } from '@adonisjs/core/types/app'\n\nconst buildHook: AssemblerHookHandler = async ({ logger }) => {\n  logger.info('Generating some files...')\n\n  await myCustomLogic()\n}\n\nexport default buildHook\n```\n\n----------------------------------------\n\nTITLE: IP Address Validation in AdonisJS\nDESCRIPTION: Validates IP addresses with optional version specification (IPv4 or IPv6).\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  ip: schema.string({}, [\n    rules.ip()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Case Insensitive Database Validation\nDESCRIPTION: Demonstrates case insensitive database validation with SQL query example.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string({}, [\n    rules.exists({\n      table: 'users',\n      column: 'username',\n      caseInsensitive: true,\n    })\n  ])\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT username FROM users WHERE LOWER(username) = LOWER(?)\n```\n\n----------------------------------------\n\nTITLE: Deleting Rate Limit Keys\nDESCRIPTION: Example of deleting a rate limit key completely from storage.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport limiter from '@adonisjs/limiter/services/main'\n\nconst requestsLimiter = limiter.use({\n  requests: 2,\n  duration: '5 mins',\n})\n\nawait requestsLimiter.delete('unique_key')\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Suites in AdonisJS\nDESCRIPTION: Configuration for test suites in the adonisrc.ts file, defining functional and unit test locations with their file patterns.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tests: {\n    suites: [\n      {\n        name: 'functional',\n        files: ['tests/functional/**/*.spec.(js|ts)']\n      },\n      {\n        name: 'unit',\n        files: ['tests/unit/**/*.spec.(js|ts)']\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Choice Selection Prompts\nDESCRIPTION: Examples of implementing single-choice selection prompts with simple and complex options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.choice('Select package manager', [\n  'npm',\n  'yarn',\n  'pnpm'\n])\n```\n\nLANGUAGE: typescript\nCODE:\n```\nawait this.prompt.choice('Select database driver', [\n  {\n    name: 'sqlite',\n    message: 'SQLite'\n  },\n  {\n    name: 'mysql',\n    message: 'MySQL'\n  },\n  {\n    name: 'pg',\n    message: 'PostgreSQL'\n  }\n])\n```\n\n----------------------------------------\n\nTITLE: Building AdonisJS Application with Asset Manager Arguments\nDESCRIPTION: Demonstrates building an AdonisJS application while passing additional arguments to the asset manager. This example enables sourcemaps and debug mode for the asset bundler.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace build --assets-args=\"--sourcemap --debug\"\n```\n\n----------------------------------------\n\nTITLE: Using Time Travel Helper in AdonisJS Tests\nDESCRIPTION: This example demonstrates how to use the timeTravel helper function within a test to simulate the passage of time, specifically moving 3 hours into the future.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/mocks_and_fakes.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { timeTravel } from '#test_helpers'\n\ntest('expire token after 2 hours', async ({ assert }) => {\n  /**\n   * Travel 3 hours into the future\n   */\n  timeTravel(60 * 60 * 3)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Commands in AdonisRC\nDESCRIPTION: Example of registering Ace commands from installed packages using lazy imports.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  commands: [\n    () => import('@adonisjs/core/commands'),\n    () => import('@adonisjs/lucid/commands')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Health Checks\nDESCRIPTION: Basic health checks configuration file that registers disk space and memory heap monitoring.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HealthChecks, DiskSpaceCheck, MemoryHeapCheck } from '@adonisjs/core/health'\n\nexport const healthChecks = new HealthChecks().register([\n  new DiskSpaceCheck(),\n  new MemoryHeapCheck(),\n])\n```\n\n----------------------------------------\n\nTITLE: Error Type Narrowing Example\nDESCRIPTION: Example demonstrating how to narrow down error types using instanceof checks\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/exception_handling.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\n\ntry {\n  router.builder().make('articles.index')\n} catch (error: unknown) {\n  if (error instanceof errors.E_CANNOT_LOOKUP_ROUTE) {\n    // handle error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Configuration\nDESCRIPTION: Environment variable configuration for using memory store during testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nLOCK_STORE=memory\n```\n\n----------------------------------------\n\nTITLE: Asserting Table Rows\nDESCRIPTION: Shows how to assert that a command rendered a table with specific rows of data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_22\n\nLANGUAGE: ts\nCODE:\n```\nawait command.exec()\n\ncommand.assertTableRows([\n  ['Harminder Virk', 'virk@adonisjs.com'],\n  ['Romain Lanz', 'romain@adonisjs.com'],\n  ['Julien-R44', 'julien@adonisjs.com'],\n])\n```\n\n----------------------------------------\n\nTITLE: Handling E_CANNOT_LOOKUP_ROUTE Exception in TypeScript\nDESCRIPTION: Example of importing and checking for route lookup exception. This exception is raised when attempting to create a URL for a non-existent route using the URL builder.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_CANNOT_LOOKUP_ROUTE) {\n  // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Transmit Package in AdonisJS\nDESCRIPTION: Command to install and configure the Transmit package in an AdonisJS project using the ace CLI tool.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/transmit\n```\n\n----------------------------------------\n\nTITLE: Validating EnumSet Property in AdonisJS (TypeScript)\nDESCRIPTION: This snippet demonstrates the use of 'schema.enumSet', which validates an array of one or more values selected from a predefined set. It is used when multiple values are allowed (for example, 'skills'). The example marks the valid options and enforces that every entry in the input array belongs to the allowed set.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  skills: schema.enumSet([\\n    'Programming',\\n    'Design',\\n    'Marketing',\\n    'Copy writing',\\n  ] as const)\\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Reply Transformer for Redis Command Results - TypeScript\nDESCRIPTION: Implements a reply transformer for the 'hgetall' command so that array results are mapped into object key-value pairs. Utilizes the 'setReplyTransformer' API to apply this transformation globally for 'hgetall' command results. Depends on '@adonisjs/redis/services/main', and expects arrays from Redis. The output is an object for easier handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_22\n\nLANGUAGE: TypeScript\nCODE:\n```\n// title: Reply transformer\\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.Command.setReplyTransformer('hgetall', (result) => {\\n  if (Array.isArray(result)) {\\n    const obj = {}\\n    for (let i = 0; i < result.length; i += 2) {\\n      obj[result[i]] = result[i + 1]\\n    }\\n    return obj\\n  }\\n  return result\\n})\n```\n\n----------------------------------------\n\nTITLE: Installing Health Checks via AdonisJS CLI\nDESCRIPTION: Command to configure health checks in an AdonisJS application. Creates start/health.ts file with default memory and disk space checks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace configure health_checks\n```\n\n----------------------------------------\n\nTITLE: Listening to Mail Queueing Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'mail:queueing' event which is emitted by the @adonisjs/mail package before queueing an email job, providing mailer name, message, and views information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('mail:queueing', (event) => {\n  console.log(event.mailerName)\n  console.log(event.message)\n  console.log(event.views)\n})\n```\n\n----------------------------------------\n\nTITLE: Twitter OAuth Configuration in TypeScript\nDESCRIPTION: Provides configuration for Twitter OAuth driver in config/ally.ts using services.twitter. Requires clientId, clientSecret, and callbackUrl. Outputs configuration for Twitter integration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  twitter: services.twitter({\n    clientId: '',\n    clientSecret: '',\n    callbackUrl: '',\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Updating package.json Dev Script for HMR\nDESCRIPTION: Modification to the package.json scripts section to automatically use Hot Module Replacement when running the dev command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/hmr.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"dev\": \"node ace serve --hmr\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using String Flags in AdonisJS Ace Command\nDESCRIPTION: These snippets show how string flags are used in the command line, demonstrating single-word and multi-word values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmake:controller --model user\n\n# this.model = 'user'\n```\n\nLANGUAGE: sh\nCODE:\n```\nmake:controller --model blog user\n# this.model = 'blog'\n\nmake:controller --model \"blog user\"\n# this.model = 'blog user'\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Node.js CLI Options\nDESCRIPTION: Command demonstrating how to pass Node.js command line arguments when running tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnode ace --no-warnings --trace-exit test\n```\n\n----------------------------------------\n\nTITLE: Validating File as Nullable in AdonisJS (TypeScript)\nDESCRIPTION: This snippet marks a file upload property as nullable by chaining the 'nullable' method. The field must exist in the input but can be set to null, allowing for explicit null values while preserving the validation options for size and extension.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  cover_image: schema.file.nullable({\\n    size: '2mb',\\n    extnames: ['jpg', 'gif', 'png'],\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to cache:deleted Event in AdonisJS (TypeScript)\nDESCRIPTION: This snippet shows how to listen for the 'cache:deleted' event, which is dispatched after a cache key has been deleted using the cache.delete method. The event object contains the key that was deleted.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('cache:deleted', (event) => {\n  console.log(event.key)\n})\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Build Hook in AdonisJS Configuration\nDESCRIPTION: Example showing how to register a custom build hook in the AdonisJS configuration file using dynamic imports for optimal performance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/assembler_hooks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/core/app'\n\nexport default defineConfig({\n  hooks: {\n    onBuildStarting: [\n      () => import('./hooks/on_build_starting')\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Lock Store - AdonisJS - TypeScript\nDESCRIPTION: This code demonstrates how to register and configure the custom NoopStore using the defineConfig function from @adonisjs/lock. The configuration object assigns the 'noop' driver as default and defines the store using the noopStore factory with an empty options object. To use this snippet, @adonisjs/lock must be installed, and the custom store factory must be available in scope.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/lock'\n\nconst lockConfig = defineConfig({\n  default: 'noop',\n  stores: {\n    noop: noopStore({}),\n  },\n})\n\n```\n\n----------------------------------------\n\nTITLE: Listing Available AdonisJS Commands with Node Ace\nDESCRIPTION: Lists all available commands in AdonisJS framework using the CLI. This command displays a help screen formatted according to the docopt standard.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace list\n```\n\n----------------------------------------\n\nTITLE: Handling E_INVALID_ENV_VARIABLES Exception in TypeScript\nDESCRIPTION: Example of importing and checking for invalid environment variables exception. This exception provides detailed validation errors in the error.help property.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_INVALID_ENV_VARIABLES) {\n  console.log(error.help)\n}\n```\n\n----------------------------------------\n\nTITLE: Running Browser Tests with Ace CLI\nDESCRIPTION: Command to execute browser tests using the AdonisJS Ace CLI, targeting only tests in the 'browser' suite.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnode ace test browser\n```\n\n----------------------------------------\n\nTITLE: Checking Command Existence\nDESCRIPTION: TypeScript example showing how to check if a command exists before executing it programmatically\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport ace from '@adonisjs/core/services/ace'\n\n/**\n * Boot method will load commands (if not already loaded)\n */\nawait ace.boot()\n\nif (ace.hasCommand('make:controller')) {\n  await ace.exec('make:controller', [\n    'user',\n    '--resource',\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Custom REPL Method in AdonisJS\nDESCRIPTION: Example of creating a custom REPL method to load all models from the app/models directory using a preload file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/repl.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport repl from '@adonisjs/core/services/repl'\nimport { fsImportAll } from '@adonisjs/core/helpers'\n\nrepl.addMethod('loadModels', async () => {\n  const models = await fsImportAll(app.makePath('app/models'))\n  repl.server!.context.models = models\n\n  repl.notify('Imported models. You can access them using the \"models\" property')\n  repl.server!.displayPrompt()\n})\n```\n\n----------------------------------------\n\nTITLE: Class Composition with TypeScript Mixins\nDESCRIPTION: Shows how to use the compose helper for cleaner TypeScript class mixin composition.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nclass User extends UserWithAttributes(UserWithAge(UserWithPassword(UserWithEmail(BaseModel)))) {}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { compose } from '@adonisjs/core/helpers'\n\nclass User extends compose(\n  BaseModel,\n  UserWithEmail,\n  UserWithPassword,\n  UserWithAge,\n  UserWithAttributes\n) {}\n```\n\n----------------------------------------\n\nTITLE: Enabling Immutable Cache-Control Directive for Static Files (TypeScript)\nDESCRIPTION: Shows how to enable the immutable directive on Cache-Control headers, instructing browsers and proxies that the file will not change. This setting must be paired with a maxAge value to be effective. Use inside static configuration for fine-grained cache control. Requires appropriate @adonisjs/static version.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\n{\n  immutable: true\n}\n```\n\n----------------------------------------\n\nTITLE: AdonisJS Backend Vite Configuration\nDESCRIPTION: Backend configuration for Vite integration including build directory and asset URL settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/vite'\n\nconst viteBackendConfig = defineConfig({\n  buildDirectory: 'public/assets',\n  assetsUrl: '/assets',\n})\n```\n\n----------------------------------------\n\nTITLE: Using escape Sanitization Rule in AdonisJS\nDESCRIPTION: The escape rule replaces potentially unsafe characters with HTML entities to prevent injection attacks. It is used with string schema types for sanitization. Requires @ioc/Adonis/Core/Validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.escape()\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Accepting Confirmation Prompts\nDESCRIPTION: Shows how to programmatically accept a confirmation prompt during testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\ncommand.prompt\n  .trap('Want to delete all files?')\n  .accept()\n```\n\n----------------------------------------\n\nTITLE: Configuring Webpack Output Paths\nDESCRIPTION: Configuration for customizing Webpack output directory and public path\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nEncore.setOutputPath(\"./public/assets\");\n\nEncore.setPublicPath(\"/assets\");\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Configuration\nDESCRIPTION: Configuration for using memory store during testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_25\n\nLANGUAGE: dotenv\nCODE:\n```\nLIMITER_STORE=memory\n```\n\n----------------------------------------\n\nTITLE: Select Ordinal Format Example in YAML\nDESCRIPTION: Demonstrates how to define ordinal pluralization rules for anniversary greetings using YAML syntax.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nanniversary_greeting:\n  \"It's my {years, selectordinal,\n    one {#st}\n    two {#nd}\n    few {#rd}\n    other {#th}\n  } anniversary\"\n```\n\n----------------------------------------\n\nTITLE: Generating Ace Command in AdonisJS\nDESCRIPTION: This command creates a new Ace command in the commands directory. Commands are automatically imported by AdonisJS and should be named after the action they perform.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:command listRoutes\n```\n\n----------------------------------------\n\nTITLE: Generating Service Provider in AdonisJS\nDESCRIPTION: This command creates a new service provider file in the providers directory. It follows specific naming conventions and can be configured for specific environments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:provider app\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:provider app -e=web -e=console\n```\n\n----------------------------------------\n\nTITLE: Configuring AdonisJS Core Settings\nDESCRIPTION: Configuration settings in adonisrc.ts to enable Vite integration and build hooks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/core/build/standalone'\n\nexport default defineConfig({\n  assetsBundler: false,\n  hooks: {\n    onBuildStarting: [() => import('@adonisjs/vite/build_hook')],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Validating Enum as Nullable and Optional in AdonisJS (TypeScript)\nDESCRIPTION: This example validates an enum field using both '.nullable' and '.optional', allowing the property to be omitted or set to null explicitly. Ensures only the enum values or null/undefined are accepted, based on input.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  account_type: schema.enum.nullableAndOptional(Object.values(SocialAccounts))\\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Case Insensitive Unique Constraint in AdonisJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the caseInsensitive option in the unique rule to perform case insensitive validation on a field. It also shows the resulting SQL query.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  email: schema.string({}, [\n    rules.unique({\n      table: 'users',\n      column: 'email',\n      caseInsensitive: true,\n    })\n  ])\n}\n```\n\nLANGUAGE: sql\nCODE:\n```\nSELECT email FROM users WHERE LOWER(email) = LOWER(?)\n```\n\n----------------------------------------\n\nTITLE: Validating Date as Nullable in AdonisJS (TypeScript)\nDESCRIPTION: This snippet marks a date field as nullable, allowing explicit null values in the payload while enforcing the date format when not null. The validator ensures the property is present in the input.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  published_at: schema.date.nullable({\\n    format: 'yyyy-MM-dd HH:mm:ss',\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Array Flags in AdonisJS Ace Command\nDESCRIPTION: This snippet demonstrates how to define an array flag in an AdonisJS Ace command using the @flags.array() decorator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, flags } from '@adonisjs/core/ace'\n\nexport default class MakeUserCommand extends BaseCommands {\n  @flags.array()\n  declare groups: string[]\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing All Event Listeners in TypeScript\nDESCRIPTION: Shows how to remove all event listeners across all events using clearAllListeners method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nemitter.clearAllListeners()\n```\n\n----------------------------------------\n\nTITLE: Autocomplete Prompt\nDESCRIPTION: Example of implementing an autocomplete prompt with dynamic data source.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst selectedCity = await this.prompt.autocomplete(\n  'Select your city',\n  await getCitiesList()\n)\n```\n\n----------------------------------------\n\nTITLE: Production Deployment Commands\nDESCRIPTION: Commands to deploy and run the production build.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\ncd build\n\n# Install production dependencies\nnpm ci --omit=dev\n\n# Run server\nnode bin/server.js\n```\n\n----------------------------------------\n\nTITLE: Swapping UserService with FakeService in AdonisJS Tests\nDESCRIPTION: This code shows how to create a fake UserService and swap it with the original implementation during testing using the container.swap method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/mocks_and_fakes.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport UserService from '#services/user_service'\nimport app from '@adonisjs/core/services/app'\n\ntest('get all users', async () => {\n  // highlight-start\n  class FakeService extends UserService {\n    all() {\n      return [{ id: 1, username: 'virk' }]\n    }\n  }\n  \n  /**\n   * Swap `UserService` with an instance of\n   * `FakeService`\n   */  \n  app.container.swap(UserService, () => {\n    return new FakeService()\n  })\n  \n  /**\n   * Test logic goes here\n   */\n  // highlight-end\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Validator\nDESCRIPTION: Command to generate a new validator for posts.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:validator post\n```\n\n----------------------------------------\n\nTITLE: Reacting to Ready Subscription Events on Redis - TypeScript\nDESCRIPTION: Handles both 'subscription:ready' and 'psubscription:ready' events to act when channel or pattern subscriptions have been fully established. Event callbacks receive the active subscription count. Prerequisite is '@adonisjs/redis/services/main'. Useful for subscription lifecycle management.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_33\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('subscription:ready', ({ count }) => {\\n    console.log(count)\\n  })\\n  connection.on('psubscription:ready', ({ count }) => {\\n    console.log(count)\\n  })\\n})\n```\n\n----------------------------------------\n\nTITLE: Sample .env and .env.test Files for Test Environment Overrides - dotenv\nDESCRIPTION: Shows how to create and use separate .env and .env.test files for development and testing respectively. .env.test overrides values from .env when running tests, enabling different configurations (such as SESSION_DRIVER and ASSETS_DRIVER) in each environment.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_13\n\nLANGUAGE: dotenv\nCODE:\n```\n// title: .env\nNODE_ENV=development\nSESSION_DRIVER=cookie\nASSETS_DRIVER=vite\n```\n\nLANGUAGE: dotenv\nCODE:\n```\n// title: .env.test\nNODE_ENV=test\nSESSION_DRIVER=memory\nASSETS_DRIVER=fake\n```\n\n----------------------------------------\n\nTITLE: CSP Nonce Configuration\nDESCRIPTION: TypeScript configuration for enabling nonce-based CSP, which allows secure inline scripts and styles by using cryptographically secure tokens.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\nconst shieldConfig = defineConfig({\n  csp: {\n    directives: {\n      defaultSrc: [`'self'`, '@nonce'],\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CORS Max Age\nDESCRIPTION: Example of setting the maxAge property to control the Access-Control-Max-Age response header.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\n{\n  maxAge: 90\n}\n```\n\n----------------------------------------\n\nTITLE: Computing Template Variables with Generators in Stub Templates - Tempura/Handlebars\nDESCRIPTION: This block shows how to assign and compute values for entity, modelName, and modelReference variables within a Handlebars-compatible stub template using generator and string helpers. These inline variables enable dynamic naming and code generation for scaffolded files. Prerequisite: The generators and string helpers are globally available in the stub rendering environment. Inputs and outputs are used within the subsequent resource class template.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_2\n\nLANGUAGE: Handlebars\nCODE:\n```\n// insert-start\n{{#var entity = generators.createEntity('user')}}\n{{#var modelName = generators.modelName(entity.name)}}\n{{#var modelReference = string.toCamelCase(modelName)}}\n// insert-end\n\nexport default class {{ modelName }}Resource {\n  serialize({{ modelReference }}: {{ modelName }}) {\n    return {{ modelReference }}.toJSON()\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Detecting New Redis Cluster Node Connections - TypeScript\nDESCRIPTION: Illustrates how to listen for the 'node:added' event, which is emitted when a new Redis cluster node is connected. This allows cluster-aware applications to manage topology changes in real time. Depends on '@adonisjs/redis/services/main'; only applicable to cluster setups.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_30\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('node:added', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Capital Casing Strings in TypeScript with AdonisJS\nDESCRIPTION: Shows how to use the capitalCase helper to convert strings to capital case format.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.capitalCase('helloWorld') // Hello World\n```\n\n----------------------------------------\n\nTITLE: Defining Rate Limit Error Translation in JSON\nDESCRIPTION: This JSON snippet shows how to define a translation for the E_TOO_MANY_REQUESTS error message in French using the @adonisjs/i18n package.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"E_TOO_MANY_REQUESTS\": \"Trop de demandes\"\n}\n```\n\n----------------------------------------\n\nTITLE: Starting Development Server with Watch Mode\nDESCRIPTION: Command to run AdonisJS development server with file watching enabled.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnode ace serve --watch\n```\n\n----------------------------------------\n\nTITLE: Cache Provider Implementation\nDESCRIPTION: Service provider implementation for registering the DummyCache as a singleton in the container.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DummyCache } from '../src/cache.js'\nimport type { ApplicationService } from '@adonisjs/core/types'\n\nexport default class CacheProvider {\n  constructor(protected app: ApplicationService) {}\n\n  register() {\n    this.app.container.singleton(DummyCache, () => {\n      const config = this.app.config.get<any>('cache', {})\n      return new DummyCache(config)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Option Handling in Custom Validator Callback (TypeScript)\nDESCRIPTION: Shows how the 'maxLength' option can be accessed within the validation callback of a custom validator rule, using array destructuring for rule arguments. Reports a descriptive error if the validated string exceeds the maximum length. Dependencies: AdonisJS validator. Key parameters: 'value' (validated value), 'maxLength' (optional), 'options' (context). Inputs: string value to be validated; Output: error reported via errorReporter if rule fails.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nvalidator.rule('camelCase', (\n  value,\n  // highlight-start\n  [maxLength],\n  // highlight-end\n  options\n) => {\n  // Rest of the validation\n  if (maxLength && value.length > maxLength) {\n    options.errorReporter.report(\n      options.pointer,\n       // highlight-start\n      'camelCase.maxLength', // \\uD83D\\uDC49 Keep an eye on this\n       // highlight-end\n      'camelCase.maxLength validation failed',\n      options.arrayExpressionPointer,\n      { maxLength }\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating a New Command with Ace CLI\nDESCRIPTION: Creates a new command named 'greet' using the AdonisJS Ace CLI.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:command greet\n```\n\n----------------------------------------\n\nTITLE: Converting to Singular Form in TypeScript with AdonisJS\nDESCRIPTION: Shows how to use the singular helper to convert words to their singular form and check if a word is already singular.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.singular('tests')\n// test\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.isSingular('test') // true\n```\n\n----------------------------------------\n\nTITLE: Handling E_MISSING_APP_KEY Exception in TypeScript\nDESCRIPTION: Example of importing and checking for missing app key exception. This exception is raised when the appKey property is not defined in the config/app.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_MISSING_APP_KEY) {\n  // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Mail Queued Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'mail:queued' event which is dispatched by the @adonisjs/mail package after an email has been queued, providing mailer name, message, and views information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('mail:queued', (event) => {\n  console.log(event.mailerName)\n  console.log(event.message)\n  console.log(event.views)\n})\n```\n\n----------------------------------------\n\nTITLE: Database Validation with Additional Constraints\nDESCRIPTION: Shows how to add where and whereNot constraints to database validation rules.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  slug: schema.string({}, [\n    rules.exists({\n      table: 'categories',\n      column: 'slug',\n      where: {\n        tenant_id: 1,\n        status: 'active',\n      },\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Using Feature Flag with Controller Generation Command\nDESCRIPTION: Example of using CLI flags to customize the destination of generated controllers by specifying a feature directory.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:controller invoice --feature=billing\n```\n\n----------------------------------------\n\nTITLE: Policies Registration Output Example in AdonisJS\nDESCRIPTION: The resulting policies/main.ts file after applying the registerPolicies codemod, showing the exported policies object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_25\n\nLANGUAGE: ts\nCODE:\n```\n// title: Output\nexport const policies = {\n  PostPolicy: () => import('#policies/post_policy')\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Signed Route URLs\nDESCRIPTION: Using the signedRoute helper to create URLs with signatures for secure actions like unsubscribing. This example creates a URL that expires in 3 days with a custom domain prefix.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_2\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{\n  signedRoute('unsubscribe', [user.id], {\n    expiresIn: '3 days',\n    prefixUrl: 'https://blog.adonisjs.com'    \n  })\n}}\">\n Unsubscribe\n</a>\n```\n\n----------------------------------------\n\nTITLE: Transform Prompt Result\nDESCRIPTION: Example of transforming prompt result using the result callback function.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  result(value) {\n    return value.toUpperCase()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching to Verbose Renderer in Ace Commands (TypeScript)\nDESCRIPTION: Shows how to switch to verbose renderer for tasks and allow users to toggle it via command flags.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, flags } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  @flags.boolean()\n  declare verbose: boolean\n\n  async run() {\n    const tasks = this.ui.tasks({\n      verbose: this.verbose\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Code within AsyncLocalStorage Context in TypeScript\nDESCRIPTION: This TypeScript snippet defines an async function `run` in `main.js`. It imports the shared `storage` instance and a `UserService`. The `storage.run()` method is used to execute asynchronous operations within a specific context. The first argument to `run()` is the state (`{ user }`) to be stored, and the second is the callback function where this state will be accessible via `storage.getStore()`. A delay is introduced using `setTimeout` before interacting with `UserService`.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: main.js\nimport { storage } from './storage.js'\nimport UserService from './user_service.js'\nimport { setTimeout } from 'node:timers/promises'\n\nasync function run(user) {\n  const state = { user }\n\n  return storage.run(state, async () => {\n    await setTimeout(100)\n    const userService = new UserService()\n    await userService.get()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Condensing Whitespace in Strings using TypeScript\nDESCRIPTION: Demonstrates removing multiple whitespaces from strings using the string helper.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.condenseWhitespace('hello  world')\n// hello world\n\nstring.condenseWhitespace('  hello  world  ')\n// hello world\n```\n\n----------------------------------------\n\nTITLE: Handling E_MISSING_FLAG_VALUE Exception in TypeScript\nDESCRIPTION: Example of importing and checking for missing flag value exception. This exception is raised when executing a command without providing a value for a non-boolean CLI flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_MISSING_FLAG_VALUE) {\n  console.log(error.commandName)\n}\n```\n\n----------------------------------------\n\nTITLE: PM2 Ecosystem Configuration for AdonisJS\nDESCRIPTION: Example PM2 ecosystem configuration file for running an AdonisJS application in cluster mode with automatic restarts.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n  apps: [\n    {\n      name: 'web-app',\n      script: './server.js',\n      instances: 'max',\n      exec_mode: 'cluster',\n      autorestart: true,\n    },\n  ],\n}\n```\n\n----------------------------------------\n\nTITLE: Asset Processing with Vite Glob Imports\nDESCRIPTION: Configuration for processing additional static assets using Vite's Glob imports API.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport.meta.glob(['../images/**'])\n```\n\n----------------------------------------\n\nTITLE: Asserting Log Messages\nDESCRIPTION: Shows how to assert log messages written by a command, optionally specifying the output stream.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nawait command.exec()\n\ncommand.assertLog('Hello world from \"Greet\"')\ncommand.assertLog('Hello world from \"Greet\"', 'stdout')\n```\n\n----------------------------------------\n\nTITLE: Displaying CSRF Error Messages in Edge Templates\nDESCRIPTION: Edge template code demonstrating how to handle and display CSRF token errors using the @error directive in Edge templates.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n// highlight-start\n@error('E_BAD_CSRF_TOKEN')\n  <p> {{ $message }} </p>\n@end\n// highlight-end\n\n<form method=\"POST\" action=\"/\">\n  {{ csrfField() }}\n  <input type=\"name\" name=\"name\" placeholder=\"Enter your name\">\n  <button type=\"submit\"> Submit </button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Adding Description to Command Argument in AdonisJS\nDESCRIPTION: Example showing how to add a description for a command argument, which will be displayed on the help screen to provide context about the argument's purpose.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/args.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n@args.string({\n  argumentName: 'user-name',\n  description: 'Name of the user'\n})\ndeclare name: string\n```\n\n----------------------------------------\n\nTITLE: Creating ArticlesController in AdonisJS\nDESCRIPTION: This TypeScript snippet shows how to create a controller in AdonisJS with methods for rendering a form and handling form submission. The 'create' method renders the form view, while the 'store' method is intended to include validation logic.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class ArticlesController {\n  async create({ view }: HttpContext) {\n    return view.render('pages/articles/create')\n  }\n\n  async store({ request }: HttpContext) {\n    // Validation logic will be written here\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Pretty Printing Process Time in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates how to use the prettyHrTime helper to format the output of Node.js process.hrtime method for human-readable output.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { hrtime } from 'node:process'\nimport string from '@adonisjs/core/helpers/string'\n\nconst startTime = hrtime()\nawait someOperation()\nconst endTime = hrtime(startTime)\n\nconsole.log(string.prettyHrTime(endTime))\n```\n\n----------------------------------------\n\nTITLE: Message Serialization with MessageBuilder in TypeScript\nDESCRIPTION: The MessageBuilder class offers an API to serialize JavaScript data types with an expiry and purpose. It can be used for creating and verifying tokens with expiration dates.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MessageBuilder } from '@adonisjs/core/helpers'\n\nconst builder = new MessageBuilder()\nconst encoded = builder.build(\n  {\n    token: string.random(32),\n  },\n  '1 hour',\n  'email_verification'\n)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MessageBuilder } from '@adonisjs/core/helpers'\n\nconst builder = new MessageBuilder()\nconst decoded = builder.verify(value, 'email_verification')\nif (!decoded) {\n  return 'Invalid payload'\n}\n\nconsole.log(decoded.token)\n```\n\n----------------------------------------\n\nTITLE: Generating Service Class in AdonisJS\nDESCRIPTION: This command creates a new service class in the app/services directory. Services are used to extract business logic and follow specific naming conventions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:service invoice\n```\n\n----------------------------------------\n\nTITLE: Asserting Command Failure\nDESCRIPTION: Shows how to assert that a command failed with a non-zero exit code.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nawait command.exec()\ncommand.assertSucceeded()\n```\n\n----------------------------------------\n\nTITLE: Creating Excerpts from HTML in TypeScript with AdonisJS\nDESCRIPTION: Shows how to use the excerpt helper to create a truncated version of HTML content with tags stripped.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.excerpt('<p>This is a <strong>very long</strong>, maybe not that long title</p>', 12, {\n  completeWords: true,\n})\n// Output: This is a very...\n```\n\n----------------------------------------\n\nTITLE: Importing Configuration Files in TypeScript\nDESCRIPTION: Examples of importing configuration files using JavaScript import statements in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/configuration.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { appKey } from '#config/app'\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport databaseConfig from '#config/database'\n```\n\n----------------------------------------\n\nTITLE: Configuring Cookie Options in AdonisJS (TypeScript)\nDESCRIPTION: Demonstrates the default configuration for setting cookies in AdonisJS, defined in the config/app.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/cookies.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nhttp: {\n  cookie: {\n    domain: '',\n    path: '/',\n    maxAge: '2h',\n    httpOnly: true,\n    secure: true,\n    sameSite: 'lax',\n    /**\n     * Experimental properties\n     * https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie#partitioned\n     */\n    partitioned: false,\n    priority: 'medium',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling E_OAUTH_MISSING_CODE Exception in TypeScript\nDESCRIPTION: Example of importing and checking for OAuth missing code exception. This exception is raised by the @adonisjs/ally package when the OAuth service does not provide the OAuth code during redirect.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as allyErrors } from '@adonisjs/bouncer'\nif (error instanceof allyErrors.E_OAUTH_MISSING_CODE) {\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Missing Translation Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'i18n:missing:translation' event which is dispatched by the @adonisjs/i18n package when a translation for a specific key and locale is missing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('i18n:missing:translation', function (event) {\n  console.log(event.identifier)\n  console.log(event.hasFallback)\n  console.log(event.locale)\n})\n```\n\n----------------------------------------\n\nTITLE: Internationalization with t Helper\nDESCRIPTION: Using the t helper provided by @adonisjs/i18n package to display translated content based on the application's locale settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n<h1> {{ t('messages.greeting') }} </h1>\n```\n\n----------------------------------------\n\nTITLE: Customizing Controller Stub for Feature-based Architecture\nDESCRIPTION: Modified controller stub template that supports organizing controllers by features, showing how to use CLI flags to customize output paths.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_10\n\nLANGUAGE: js\nCODE:\n```\n// title: Controller stub\n{{#var controllerName = generators.controllerName(entity.name)}}\n// insert-start\n{{#var featureDirectoryName = generators.makePath('features', flags.feature)}}\n// insert-end\n{{#var controllerFileName = generators.controllerFileName(entity.name)}}\n{{{ \n  exports({\n    // delete-start\n    to: app.httpControllersPath(entity.path, controllerFileName)\n    // delete-end\n    // insert-start\n    to: app.makePath(featureDirectoryName, entity.path, controllerFileName)\n    // insert-end\n  })\n}}}\n// import type { HttpContext } from '@adonisjs/core/http'\n\nexport default class {{ controllerName }} {\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Sentence Case in TypeScript\nDESCRIPTION: Shows how to convert strings to sentence case format using the string helper.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.sentenceCase('getting_started-with-adonisjs')\n// Getting started with adonisjs\n```\n\n----------------------------------------\n\nTITLE: Validating String as Optional in AdonisJS (TypeScript)\nDESCRIPTION: This snippet marks a string property as optional, allowing undefined or null values to be omitted from the validated result. Uses the '.optional' chained method on the string schema.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  title: schema.string.optional()\\n}\n```\n\n----------------------------------------\n\nTITLE: Email Address Validation for Environment Variables - TypeScript\nDESCRIPTION: Ensures a variable (e.g., SENDER_EMAIL) contains a valid email address by specifying format: 'email' in Env.schema.string. Used for settings that require email addresses such as SMTP sender settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  SENDER_EMAIL: Env.schema.string({ format: 'email' })\n}\n```\n\n----------------------------------------\n\nTITLE: Vue SSR Server Entrypoint for Inertia.js in AdonisJS\nDESCRIPTION: Server-side rendering entrypoint configuration for Vue.js with Inertia.js, defining how pages are resolved and rendered on the server before hydration on the client.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/vue3'\nimport { renderToString } from '@vue/server-renderer'\nimport { createSSRApp, h, type DefineComponent } from 'vue'\n\nexport default function render(page) {\n  return createInertiaApp({\n    page,\n    render: renderToString,\n    resolve: (name) => {\n      const pages = import.meta.glob<DefineComponent>('../pages/**/*.vue')\n      return pages[`../pages/${name}.vue`]()\n    },\n\n    setup({ App, props, plugin }) {\n      return createSSRApp({ render: () => h(App, props) }).use(plugin)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Sensitive Data with Secret Class in TypeScript\nDESCRIPTION: The Secret class allows holding sensitive values within an application without accidentally leaking them in logs and console statements. It provides a safety net for handling sensitive data.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Secret } from '@adonisjs/core/helpers'\nconst value = new Secret('some-secret-value')\n\nconsole.log(value) // [redacted]\nconsole.log(value.release()) // some-secret-value\n```\n\n----------------------------------------\n\nTITLE: Installing hot-hook Package for HMR in AdonisJS\nDESCRIPTION: Command to install the hot-hook npm package as a development dependency, which enables Hot Module Replacement in AdonisJS applications.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/hmr.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D hot-hook\n```\n\n----------------------------------------\n\nTITLE: Configuring Allowed HTTP Methods for Body Parsing - AdonisJS - TypeScript\nDESCRIPTION: Shows how to define the array of HTTP methods on which the BodyParser middleware in AdonisJS should operate. By default, methods like POST, PUT, PATCH, and DELETE are included. This configuration is part of the middleware and ensures that request bodies are only parsed for these specified methods. Requires no external dependencies and expects an array of HTTP method strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  allowedMethods: ['POST', 'PUT', 'PATCH', 'DELETE']\n}\n```\n\n----------------------------------------\n\nTITLE: RC File Update Output Example in AdonisJS\nDESCRIPTION: The resulting adonisrc.ts file after applying the updateRcFile codemod, showing the added providers, commands, and command aliases.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\n// title: Output\nimport { defineConfig } from '@adonisjs/core/app'\n\nexport default defineConfig({\n  commands: [\n    () => import('@adonisjs/lucid/commands')\n  ],\n  providers: [\n    () => import('@adonisjs/lucid/db_provider')\n  ],\n  commandAliases: {\n    migrate: 'migration:run'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: CSP Configuration for Vite in Production\nDESCRIPTION: TypeScript configuration update to allow assets from both development server and CDN when deploying Vite bundled output to a CDN server.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\ndirectives: {\n  // delete-start\n  defaultSrc: [`'self'`, '@viteDevUrl'],\n  // delete-end\n  // insert-start\n  defaultSrc: [`'self'`, '@viteUrl'],\n  // insert-end\n  connectSrc: ['@viteHmrUrl']\n},\n```\n\n----------------------------------------\n\nTITLE: Setting Up Health Check Route\nDESCRIPTION: Route configuration for exposing the health check endpoint using the HealthChecksController.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/health_checks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\nconst HealthChecksController = () => import('#controllers/health_checks_controller')\n\nrouter.get('/health', [HealthChecksController])\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional Object Schema in AdonisJS\nDESCRIPTION: Shows object configuration that can be both nullable and optional with property validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  profile: schema.object\n    .nullableAndOptional() // 👈\n    .members({\n      username: schema.string(),\n      avatar_url: schema.string()\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Bundler in AdonisRC\nDESCRIPTION: Example of configuring a custom asset bundler, specifying commands for development server and production build.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  assetsBundler: {\n    name: 'vite',\n    devServer: {\n      command: 'vite',\n      args: []\n    },\n    build: {\n      command: 'vite',\n      args: [\"build\"]\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Not a Specific Exit Code\nDESCRIPTION: Shows how to assert that a command did not exit with a specific exit code.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_19\n\nLANGUAGE: ts\nCODE:\n```\nawait command.exec()\ncommand.assertNotExitCode(0)\n```\n\n----------------------------------------\n\nTITLE: Database Entry JSON Structure\nDESCRIPTION: Example of a database entry structure used for documentation pages, showing required fields like permalink, title, content path, and category.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permalink\": \"introduction\",\n  \"title\": \"Introduction\",\n  \"contentPath\": \"./http_overview.md\",\n  \"category\": \"Guides\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing All Flags in AdonisJS Ace Command\nDESCRIPTION: This snippet shows how to access all flags mentioned while running the command, including unknown flags not accepted by the command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, flags } from '@adonisjs/core/ace'\n\nexport default class MakeControllerCommand extends BaseCommands {\n  @flags.boolean()\n  declare resource: boolean\n\n  @flags.boolean()\n  declare singular: boolean\n  \n  async run() {\n    console.log(this.parsed.flags)\n    \n    /**\n     * Names of flags mentioned but not\n     * accepted by the command\n     */\n    console.log(this.parsed.unknownFlags)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Access Tokens Auth Authentication Attempted Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'access_tokens_auth:authentication_attempted' event which is dispatched when an attempt is made to validate an access token during an HTTP request.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('access_tokens_auth:authentication_attempted', (event) => {\n  console.log(event.guardName)\n})\n```\n\n----------------------------------------\n\nTITLE: Creating an EchoService Class in TypeScript\nDESCRIPTION: Defines a simple EchoService class with a respond method that returns a string.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class EchoService {\n  respond() {\n    return 'hello'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating AdonisJS Projects with Configuration Flags using Shell\nDESCRIPTION: Demonstrates creating new AdonisJS projects using `npm init` while passing configuration flags directly to the `create-adonisjs` initializer. Flags like `--db` (database dialect) and `--kit` (starter kit) are passed using double dashes (`--`). Examples include setting up MySQL, PostgreSQL with the API kit, and the API kit with access tokens authentication.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n# Create a project and get prompted for all options\nnpm init adonisjs@latest hello-world\n\n# Create a project with MySQL\nnpm init adonisjs@latest hello-world -- --db=mysql\n\n# Create a project with PostgreSQL and API starter kit\nnpm init adonisjs@latest hello-world -- --db=postgres --kit=api\n\n# Create a project with API starter kit and access tokens guard\nnpm init adonisjs@latest hello-world -- --kit=api --auth-guard=access_tokens\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Ace Command in AdonisJS\nDESCRIPTION: Command to execute all tests in an AdonisJS application using the Ace CLI tool.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode ace test\n```\n\n----------------------------------------\n\nTITLE: Defining beforeField Validation Rule in AdonisJS\nDESCRIPTION: The beforeField rule is used to ensure a date field is scheduled before another field's date. The beforeOrEqualToField variant allows the date to be the same or before a specific field. Requires @ioc/Adonis/Core/Validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  checkout_date: schema.date(),\n  checkin_date: schema.date({}, [\n    rules.beforeField('checkout_date')\n  ]),\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  published_on: schema.date(),\n  drafted_on: schema.date({}, [\n    rules.beforeOrEqualToField('published_on')\n  ]),\n}\n```\n\n----------------------------------------\n\nTITLE: Session API Client Setup\nDESCRIPTION: Configuration for registering the session API client plugin for testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { sessionApiClient } from '@adonisjs/session/plugins/api_client'\n\nexport const plugins: Config['plugins'] = [\n  assert(),\n  pluginAdonisJS(app),\n  sessionApiClient(app)\n]\n```\n\n----------------------------------------\n\nTITLE: Creating Mail Class in AdonisJS\nDESCRIPTION: This command generates a new mail class in the app/mails directory. It follows specific naming conventions and allows customizing the intent suffix.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_26\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:mail shipment\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:mail shipment --intent=confirmation\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:mail storage --intent=warning\n```\n\n----------------------------------------\n\nTITLE: Directory Structure Example\nDESCRIPTION: Shows the complete folder structure of the documentation boilerplate project with all key directories and files.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n.\n├── assets\n│  ├── app.css\n│  └── app.js\n├── bin\n│  ├── build.ts\n│  └── serve.ts\n├── content\n│  ├── docs\n│  └── config.json\n├── src\n│  ├── bootstrap.ts\n│  └── collections.ts\n├── templates\n│  ├── elements\n│  ├── layouts\n│  ├── partials\n│  └── docs.edge\n├── vscode_grammars\n│  ├── dotenv.tmLanguage.json\n│  └── main.ts\n├── package-lock.json\n├── package.json\n├── README.md\n├── tsconfig.json\n└── vite.config.js\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Snake Case in TypeScript\nDESCRIPTION: Illustrates converting strings to snake case format using the string helper.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.snakeCase('user team') // user_team\n```\n\n----------------------------------------\n\nTITLE: Deleting a Subscription using Transmit and TypeScript\nDESCRIPTION: Illustrates how to delete a subscription with Transmit using TypeScript. The `delete` method unregisters the subscription from the server, returning a promise for asynchronous operations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/transmit.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nawait subscription.delete()\n```\n\n----------------------------------------\n\nTITLE: Format Prompt Input\nDESCRIPTION: Example of formatting prompt input as user types using the format callback function.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  format(value) {\n    return value.toUpperCase()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CDN Assets in Vite\nDESCRIPTION: Configuration for CDN asset deployment in Vite, setting up assetsUrl for proper asset URL generation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/vite.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from 'vite'\nimport adonisjs from '@adonisjs/vite/client'\n\nexport default defineConfig({\n  plugins: [\n    adonisjs({\n      entrypoints: ['resources/js/app.js'],\n      reloads: ['resources/views/**/*.edge'],\n      assetsUrl: 'https://cdn.example.com/',\n    }),\n  ]\n})\n```\n\n----------------------------------------\n\nTITLE: Renaming Resource Route Prefixes in AdonisJS\nDESCRIPTION: Demonstrates how to customize route name prefixes using the resource.as() method with snake_case transformation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/controllers.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.resource('group-attributes', GroupAttributesController).as('attributes')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.resource('group-attributes', GroupAttributesController).as('groupAttributes', false)\n```\n\n----------------------------------------\n\nTITLE: Extending RouteGroup Class with Custom Properties in AdonisJS\nDESCRIPTION: Shows how to extend the RouteGroup class with custom properties using macros and getters, accessing the group's routes via this.routes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\nimport { RouteGroup } from '@adonisjs/core/http'\n\nRouteGroup.macro('property', function (this: RouteGroup) {\n  return value\n})\nRouteGroup.getter('property', function (this: RouteGroup) {\n  return value\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: types/http.ts\ndeclare module '@adonisjs/core/http' {\n  export interface RouteGroup {\n    property: valueType\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @adonisjs/limiter Package with AdonisJS CLI\nDESCRIPTION: Command to install and configure the rate limiter package in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode ace add @adonisjs/limiter\n```\n\n----------------------------------------\n\nTITLE: Redirecting with Stateless GitHub OAuth in TypeScript\nDESCRIPTION: Demonstrates enabling stateless OAuth authentication by chaining .stateless() with .redirect() for GitHub. No CSRF verification, unique for environments without cookies. Requires Ally and optionally a GitHub configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\nally.use('github').stateless().redirect()\n```\n\n----------------------------------------\n\nTITLE: Custom Function Validation for Environment Variables - TypeScript\nDESCRIPTION: Shows how to use a custom function to validate complex constraints that are not covered by built-in schema methods. The function receives the variable name and value, and must throw descriptive errors for invalid/missing values, returning the processed result otherwise. Example is for validating PORT, but pattern can be applied to other variables.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  PORT: (name, value) => {\n    if (!value) {\n      throw new Error('Value for PORT is required')\n    }\n    \n    if (isNaN(Number(value))) {\n      throw new Error('Value for PORT must be a valid number')\n    }\n\n    return Number(value)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: LinkedIn OpenID Connect Configuration in TypeScript\nDESCRIPTION: Uses services.linkedinOpenidConnect to define LinkedIn OpenID config in config/ally.ts. Requires clientId, clientSecret, callbackUrl and specifies scopes for OpenID, profile, and email.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_15\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  linkedin: services.linkedinOpenidConnect({\n    clientId: '',\n    clientSecret: '',\n    callbackUrl: '',\n\n    // LinkedIn specific\n    scopes: ['openid', 'profile', 'email'],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Watch Mode for Automatic Re-execution\nDESCRIPTION: Command to run tests in watch mode, which automatically re-runs tests when file changes are detected.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnode ace test --watch\n```\n\n----------------------------------------\n\nTITLE: Date Formatting Validation Message in AdonisJS\nDESCRIPTION: This snippet configures a custom message for the `date` validation rule, using the `options.format` to indicate the expected date format for validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  'date.format': '{{ field }} must be formatted as {{ options.format }}',\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Inertia Package in AdonisJS\nDESCRIPTION: Command to install the Inertia package via npm package manager.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @adonisjs/inertia\n```\n\n----------------------------------------\n\nTITLE: Initializing JwtGuard Class with HttpContext in TypeScript\nDESCRIPTION: This snippet shows the initial setup of the JwtGuard class, including importing necessary types and updating the constructor to accept an HttpContext parameter.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { HttpContext } from '@adonisjs/core/http'\n\nexport class JwtGuard<UserProvider extends JwtUserProviderContract<unknown>>\n  implements GuardContract<UserProvider[typeof symbols.PROVIDER_REAL_USER]>\n{\n  #ctx: HttpContext\n  #userProvider: UserProvider\n  #options: JwtGuardOptions\n\n  constructor(\n    ctx: HttpContext,\n    userProvider: UserProvider,\n    options: JwtGuardOptions\n  ) {\n    this.#ctx = ctx\n    this.#userProvider = userProvider\n    this.#options = options\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating HTTP Controllers in AdonisJS\nDESCRIPTION: Shows how to generate HTTP controller classes in AdonisJS. Controllers are created in app/controllers directory following specific naming conventions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:controller users\n```\n\n----------------------------------------\n\nTITLE: Testing Prompt Validations\nDESCRIPTION: Shows how to test validation behavior of a prompt by asserting that certain values pass or fail validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_14\n\nLANGUAGE: ts\nCODE:\n```\ncommand.prompt\n  .trap('What is your name?')\n  // assert the prompt fails when an empty value is provided\n  .assertFails('', 'Please enter your name')\n  \ncommand.prompt\n  .trap('What is your name?')\n  .assertPasses('Virk')\n```\n\n----------------------------------------\n\nTITLE: Using Curly Braces for Special Characters in Variable Names\nDESCRIPTION: This snippet demonstrates how to reference environment variables with special characters by wrapping the variable name in curly braces. Useful when your variable names contain characters like hyphens.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_20\n\nLANGUAGE: dotenv\nCODE:\n```\nREDIS-USER=admin\nREDIS-URL=localhost@${REDIS-USER}\n```\n\n----------------------------------------\n\nTITLE: Handling E_AUTHORIZATION_FAILURE Exception in TypeScript\nDESCRIPTION: Example of importing and checking for authorization failure exception from Bouncer. This exception is raised when a bouncer authorization check fails.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as bouncerErrors } from '@adonisjs/bouncer'\nif (error instanceof bouncerErrors.E_AUTHORIZATION_FAILURE) {\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AdonisJS Project with API Starter Kit using Shell\nDESCRIPTION: Creates a new AdonisJS project using the 'api' starter kit, tailored for building JSON API servers. The `-K=api` flag specifies the kit. An example demonstrates switching the database dialect to MySQL.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest -- -K=api\n\n# Switch database dialect\nnpm init adonisjs@latest -- -K=api --db=mysql\n```\n\n----------------------------------------\n\nTITLE: Utilizing before Validation Rule in AdonisJS\nDESCRIPTION: Illustrates how to validate a date field to occur before a specified date or duration, with options for leveraging Luxon for advanced cases. This rule supports TypeScript intellisense for duration offsets. Requires @ioc/Adonis/Core/Validator and optionally Luxon.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  joining_date: schema.date({}, [\n    rules.before(2, 'days')\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrules.before(2, 'days')\nrules.before(1, 'month')\nrules.before(4, 'years')\nrules.before(30, 'minutes')\n```\n\nLANGUAGE: typescript\nCODE:\n```\nrules.before('today')\nrules.before('yesterday')\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  joining_date: schema.date({}, [\n    rules.beforeOrEqual('today')\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// highlight-start\nimport { DateTime } from 'luxon'\n// highlight-end\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\nclass UserValidator {\n  // highlight-start\n  public refs = schema.refs({\n    allowedDate: DateTime.local().minus({ days: 2 })\n  })\n  // highlight-end\n\n  public schema = schema.create({\n    checkin_date: schema.date({}, [\n      // highlight-start\n      rules.before(this.refs.allowedDate)\n      // highlight-end\n    ])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Output File Destination in a Stub Template - Tempura/Handlebars\nDESCRIPTION: This snippet augments the stub template by dynamically computing the destination file name and path for the generated resource class. It defines resourceFileName using string helpers, and then exports the file output location via the exports function. This allows codemods to create the file in the specified path. Inputs: entity, modelName; Outputs: output file location in app/api_resources.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_3\n\nLANGUAGE: Handlebars\nCODE:\n```\n{{#var entity = generators.createEntity('user')}}\n{{#var modelName = generators.modelName(entity.name)}}\n{{#var modelReference = string.toCamelCase(modelName)}}\n// insert-start\n{{#var resourceFileName = string(modelName).snakeCase().suffix('_resource').ext('.ts').toString()}}\n{{{\n  exports({\n    to: app.makePath('app/api_resources', entity.path, resourceFileName)\n  })\n}}}\n// insert-end\nexport default class {{ modelName }}Resource {\n  serialize({{ modelReference }}: {{ modelName }}) {\n    return {{ modelReference }}.toJSON()\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Manually Instantiating and Using a Validator Class in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to manually create an instance of a Validator class (`CreateUserValidator`), potentially passing custom data (e.g., fetched countries and states) to its constructor, and then passing this instance to `request.validate` for validation within a route handler. This allows injecting dependencies or configuration into the validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nRoute.post('users', async ({ request, response }) => {\n  const payload = await request.validate(\n    new CreateUser({\n      countries: fetchAllowedCountries(),\n      states: fetchAllowedStates()\n    })\n  )\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Installing Packages with Configuration Options\nDESCRIPTION: Demonstrates installing a package while passing configuration options. Unknown flags are passed to the configure command, allowing for more specific setup.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/lucid --db=sqlite\n```\n\n----------------------------------------\n\nTITLE: Updating RC File with Codemods in AdonisJS\nDESCRIPTION: Using the codemods API to modify the adonisrc.ts file, adding providers, commands, and command aliases with error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_20\n\nLANGUAGE: ts\nCODE:\n```\nconst codemods = await command.createCodemods()\n\ntry {\n  await codemods.updateRcFile((rcFile) => {\n    rcFile\n      .addProvider('@adonisjs/lucid/db_provider')\n      .addCommand('@adonisjs/lucid/commands'),\n      .setCommandAlias('migrate', 'migration:run')\n  })\n} catch (error) {\n  console.error('Unable to update adonisrc.ts file')\n  console.error(error)  \n}\n```\n\n----------------------------------------\n\nTITLE: Custom Rules for Boolean Schema in AdonisJS\nDESCRIPTION: Example of applying custom validation rules to boolean schema type.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/legacy/validator'\n\n{\n  title: schema.boolean([\n    rules.myCustomRuleForBooleanType(),\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Router Middleware Registration Output Example in AdonisJS\nDESCRIPTION: The resulting middleware registration in the kernel.ts file after applying the registerMiddleware codemod.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_18\n\nLANGUAGE: ts\nCODE:\n```\n// title: Output\nimport router from '@adonisjs/core/services/router'\n\nrouter.use([\n  () => import('@adonisjs/core/bodyparser_middleware')\n])\n```\n\n----------------------------------------\n\nTITLE: Hash Configuration with Emitter Service\nDESCRIPTION: Failed attempt at hash configuration using container services before application boot.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/config_providers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scrypt } from '@adonisjs/core/hash/drivers/scrypt'\nimport emitter from '@adonisjs/core/services/emitter'\n\nexport default {\n  default: 'scrypt',\n  list: {\n    scrypt: () => new Scrypt({\n      cost: 16384,\n      blockSize: 8,\n      parallelization: 1,\n      maxMemory: 33554432,\n    }, emitter)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: String Schema with Rules\nDESCRIPTION: Example of string schema validation with multiple rules including alpha, length constraints, and string transformations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/schema_101.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@adonisjs/core/validator'\n\nschema.create({\n  username: schema.string([\n    rules.alpha(),\n    rules.minLength(10),\n    rules.maxLength(200),\n    rules.trim(),\n    rules.escape(),    \n  ])\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Exception Class in AdonisJS\nDESCRIPTION: This command generates a new custom exception class in the app/exceptions directory. It follows specific naming conventions for exceptions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:exception commandValidation\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Lock Package\nDESCRIPTION: Command to install and configure the @adonisjs/lock package in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/lock\n```\n\n----------------------------------------\n\nTITLE: Handling Container Binding Resolution Events - AdonisJS TypeScript\nDESCRIPTION: Listens for the 'container_binding:resolved' event via AdonisJS's emitter to inspect which bindings have been resolved and access the resulting instance/value. Useful for debugging, logging, or dynamic enhancements. Requires the '@adonisjs/core/services/emitter' service in scope.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_25\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('container_binding:resolved', (event) => {\n  console.log(event.binding)\n  console.log(event.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Default Export in AdonisJS REPL\nDESCRIPTION: Example of importing a default export from a module in the AdonisJS REPL using dynamic import.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/repl.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst { default: User } = await import('#models/user')\n```\n\n----------------------------------------\n\nTITLE: Starting AdonisJS Production Server with Custom Environment Path\nDESCRIPTION: Command to start the AdonisJS production server with a custom environment file path using the ENV_PATH variable.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nENV_PATH=/etc/secrets node build/bin/server.js\n```\n\n----------------------------------------\n\nTITLE: Implementing a Custom Noop Lock Store - AdonisJS - TypeScript\nDESCRIPTION: This code defines a NoopStore class that implements the AdonisJS LockStore interface with all required methods, providing no-op (non-functional) logic for demonstration or testing purposes. The class outlines method signatures for lock management, including save, delete, forceDelete, exists, and extend, each returning a falsey value or void. Dependencies include the '@adonisjs/lock/types' package, and the key parameters for each method mirror those required by the LockStore interface. This implementation is for instructional use and does not perform any actual storage or locking operations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport type { LockStore } from '@adonisjs/lock/types'\n\nclass NoopStore implements LockStore {\n  /**\n   * Save the lock in the store.\n   * This method should return false if the given key is already locked\n   *\n   * @param key The key to lock\n   * @param owner The owner of the lock\n   * @param ttl The time to live of the lock in milliseconds. Null means no expiration\n   *\n   * @returns True if the lock was acquired, false otherwise\n   */\n  async save(key: string, owner: string, ttl: number | null): Promise<boolean> {\n    return false\n  }\n\n  /**\n   * Delete the lock from the store if it is owned by the given owner\n   * Otherwise should throws a E_LOCK_NOT_OWNED error\n   *\n   * @param key The key to delete\n   * @param owner The owner\n   */\n  async delete(key: string, owner: string): Promise<void> {\n    return false\n  }\n\n  /**\n   * Force delete the lock from the store without checking the owner\n   */\n  async forceDelete(key: string): Promise<Void> {\n    return false\n  }\n\n  /**\n   * Check if the lock exists. Returns true if so, false otherwise\n   */\n  async exists(key: string): Promise<boolean> {\n    return false\n  }\n\n  /**\n   * Extend the lock expiration. Throws an error if the lock is not owned by \n   * the given owner\n   * Duration is in milliseconds\n   */\n  async extend(key: string, owner: string, duration: number): Promise<void> {\n    return false\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing a Basic Greet Command in TypeScript\nDESCRIPTION: Implements a basic 'Greet' command that extends BaseCommand and outputs a greeting message using the logger.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\nimport { CommandOptions } from '@adonisjs/core/types/ace'\n\nexport default class Greet extends BaseCommand {\n  static commandName = 'greet'\n  static description = 'Greet a username by name'\n\n  static options: CommandOptions = {}\n\n  async run() {\n    this.logger.info('Hello world from \"Greet\"')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Vue-Loader Options\nDESCRIPTION: Example of customizing vue-loader options by passing a callback to enableVueLoader. This particular configuration sets up asset URL transformations for various HTML elements.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nEncore.enableVueLoader((options) => {\n  options.transformAssetUrls = {\n    video: [\"src\", \"poster\"],\n    source: \"src\",\n    img: \"src\",\n    image: [\"xlink:href\", \"href\"],\n    use: [\"xlink:href\", \"href\"],\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Dot Casing Strings in TypeScript with AdonisJS\nDESCRIPTION: Shows how to use the dotCase helper to convert strings to dot case format, with an option to convert all words to lowercase.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.dotCase('helloWorld') // hello.World\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.dotCase('helloWorld', { lowerCase: true }) // hello.world\n```\n\n----------------------------------------\n\nTITLE: Casting Models to Objects in AdonisJS Controllers with TypeScript\nDESCRIPTION: Example of casting an AdonisJS model to a simple object with explicit type annotation before passing it to inertia.render, ensuring proper type information in the frontend components.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nclass UsersController {\n  async edit({ inertia, params }: HttpContext) {\n    const user = users.serialize() as {\n        id: number\n        name: string \n    }\n\n    return inertia.render('user/edit', { user })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting UserService into UsersController in TypeScript\nDESCRIPTION: This snippet demonstrates how to use dependency injection to inject a UserService into a UsersController class using the @inject() decorator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/mocks_and_fakes.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport UserService from '#services/user_service'\nimport { inject } from '@adonisjs/core'\n\nexport default class UsersController {\n  @inject()\n  index(service: UserService) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Default Values for Flags in AdonisJS Ace Command\nDESCRIPTION: This snippet shows how to set default values for flags using the default option.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n@flags.boolean({\n  default: true,\n})\ndeclare startServer: boolean\n\n@flags.string({\n  default: 'sqlite',\n})\ndeclare connection: string\n```\n\n----------------------------------------\n\nTITLE: Optional Object Schema in AdonisJS\nDESCRIPTION: Shows how to make an object field optional while maintaining property validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  profile: schema.object\n    .optional() // 👈\n    .members({\n      username: schema.string(),\n      avatar_url: schema.string()\n    })\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Locale Detection Middleware\nDESCRIPTION: Code to register the locale detection middleware in the router configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.use([\n  () => import('#middleware/detect_user_locale_middleware')\n])\n```\n\n----------------------------------------\n\nTITLE: Including Vite Scripts with Attributes\nDESCRIPTION: Using the @vite tag with custom script attributes, allowing control over how scripts are loaded. This example adds the defer attribute to the script tag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_18\n\nLANGUAGE: edge\nCODE:\n```\n@vite(['resources/js/app.js'], {\n  defer: true,\n})\n```\n\n----------------------------------------\n\nTITLE: Boolean Schema Validation in AdonisJS\nDESCRIPTION: Demonstrates basic boolean validation with schema.boolean(). Accepts and casts string/numeric representations of booleans like '1', 'true', 'on' to proper boolean values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\n\n{\n  accepted: schema.boolean()\n}\n```\n\n----------------------------------------\n\nTITLE: Inspecting AdonisRC File Contents\nDESCRIPTION: Command to view the complete contents of the adonisrc.ts file using the Ace CLI.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace inspect:rcfile\n```\n\n----------------------------------------\n\nTITLE: Testing with Container Services in TypeScript\nDESCRIPTION: Shows how to use the drive.fake method to swap drive disks with an in-memory driver for testing purposes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/container_services.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport drive from '@adonisjs/drive/services/main'\nimport { PostService } from '#services/post_service'\n\ntest('save post', async ({ assert }) => {\n  /**\n   * Fake s3 disk\n   */\n  drive.fake('s3')\n \n  const postService = new PostService()\n  await postService.save(post, coverImage)\n  \n  /**\n   * Write assertions\n   */\n  assert.isTrue(await drive.use('s3').exists(coverImage.name))\n  \n  /**\n   * Restore fake\n   */\n  drive.restore('s3')\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Node.js and npm Installation for AdonisJS\nDESCRIPTION: Commands to verify the installed versions of Node.js and npm to ensure compatibility with AdonisJS requirements. AdonisJS requires Node.js version 18 or higher.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/tutorial/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Verify Node.js version\nnode -v\n# v18.11.0\n\n# Verify npm version\nnpm -v\n# 8.19.2\n```\n\n----------------------------------------\n\nTITLE: Implementing alpha Validation Rule in AdonisJS\nDESCRIPTION: This snippet validates a string field to only contain alphabetic characters with optional inclusion of spaces, dashes, and underscores. It works with string schema types. Requires @ioc/Adonis/Core/Validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  username: schema.string([\n    rules.alpha(),\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  username: schema.string([\n    rules.alpha({\n      allow: ['space', 'underscore', 'dash']\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Versioning for Inertia.js in AdonisJS\nDESCRIPTION: Customizing the assets version in the Inertia.js configuration file to control browser caching behavior when deploying new versions of the application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/inertia'\n\nexport default defineConfig({\n  assetsVersion: 'v1'\n})\n```\n\n----------------------------------------\n\nTITLE: Handling E_INSECURE_APP_KEY Exception in TypeScript\nDESCRIPTION: Example of importing and checking for insecure app key exception. This exception is raised when the app key is less than 16 characters long.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_INSECURE_APP_KEY) {\n  // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Converting View-based Controller to JSON API Controller in AdonisJS\nDESCRIPTION: This snippet demonstrates how to modify a controller to return JSON data instead of rendering a view. It shows the seamless transition from a server-rendered application to an API server.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// title: app/controllers/posts_controller.ts\nimport Post from '#models/post'\nimport type { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async index({ view }: HttpContext) {\n    const posts = await Post.all()\n    /**\n     * Posts array will be serialized to JSON\n     * automatically.\n     */\n    return posts\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Service Provider Registration in adonisrc.ts\nDESCRIPTION: Code that registers the limiter service provider in the AdonisJS configuration file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/limiter/limiter_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable and Optional Array Schema in AdonisJS\nDESCRIPTION: Shows array configuration that can be both nullable and optional with length validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema.array\n    .nullableAndOptional([// 👈\n      rules.minLength(1)\n    ])\n    .members(schema.number())\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CORS Package in AdonisJS\nDESCRIPTION: Command to install and configure the @adonisjs/cors package in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/cors\n```\n\n----------------------------------------\n\nTITLE: Creating New Test Files using Ace Command\nDESCRIPTION: Command to generate a new test file for a specific feature in a designated test suite using the make:test Ace command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnode ace make:test posts/create --suite=functional\n```\n\n----------------------------------------\n\nTITLE: Listening to Access Tokens Auth Authentication Failed Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'access_tokens_auth:authentication_failed' event which is dispatched when the access token authentication check fails, providing error details.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('access_tokens_auth:authentication_failed', (event) => {\n  console.log(event.guardName)\n  console.log(event.error)\n})\n```\n\n----------------------------------------\n\nTITLE: Entry Point Configuration\nDESCRIPTION: Example of importing dependencies in an entry point file\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport \"../css/app.css\";\nimport \"normalize.css\";\nimport \"alpinejs\";\n```\n\n----------------------------------------\n\nTITLE: Running Production Build with Node ENV\nDESCRIPTION: Command to properly run the production build with correct environment variable.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\nNODE_ENV=production node build/server.js\n```\n\n----------------------------------------\n\nTITLE: Handling Errors in AdonisJS Custom Commands\nDESCRIPTION: Implement error handling in a custom Ace command using try/catch and setting the exitCode and error properties.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/creating_commands.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  async run() {\n    try {\n      await runSomeOperation()\n    } catch (error) {\n      this.logger.error(error.message)\n      this.error = error\n      this.exitCode = 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Number Formatting Example\nDESCRIPTION: Demonstrates number formatting using the i18n manager with custom options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport i18nManager from '@adonisjs/i18n/services/main'\n\ni18nManager\n  .locale('en')\n  .formatNumber(123456.789, {\n    maximumSignificantDigits: 3\n  })\n```\n\n----------------------------------------\n\nTITLE: Setting Up Session Browser Client Plugin\nDESCRIPTION: Configuration for registering the sessionBrowserClient plugin to handle session data in browser tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n// insert-start\nimport { sessionBrowserClient } from '@adonisjs/session/plugins/browser_client'\n// insert-end\n\nexport const plugins: Config['plugins'] = [\n  assert(),\n  pluginAdonisJS(app),\n  // insert-start\n  sessionBrowserClient(app)\n  // insert-end\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Session\nDESCRIPTION: Defines the SESSION_DRIVER environment variable to specify the session storage mechanism, which could be cookie, redis, or others.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_2\n\nLANGUAGE: dotenv\nCODE:\n```\nSESSION_DRIVER=cookie\n```\n\n----------------------------------------\n\nTITLE: Ejecting Stubs from Other Packages in AdonisJS\nDESCRIPTION: Command demonstrating how to eject stubs from packages other than @adonisjs/core by using the --pkg flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnode ace eject make/migration/main.stub --pkg=@adonisjs/lucid\n```\n\n----------------------------------------\n\nTITLE: Distinct Rule Validation Message in AdonisJS\nDESCRIPTION: Here, a custom message for the `distinct` validation rule in AdonisJS is defined, incorporating the `options.index` to indicate the position of duplicate values in the message.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  'products.distinct': 'The product at {{ options.index + 1 }} position has already been added earlier'\\n}\n```\n\n----------------------------------------\n\nTITLE: Normalizing URLs in AdonisJS Validator (TypeScript)\nDESCRIPTION: This snippet demonstrates how to use the normalizeUrl rule in AdonisJS to normalize URLs during validation. It shows options for ensuring HTTPS protocol and stripping WWW from the URL.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  website: schema.string([\n    rules.url(),\n    rules.normalizeUrl({\n      ensureProtocol: 'https',\n      stripWWW: true,\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Controlling ANSI Colors in Output\nDESCRIPTION: Commands to manually enable or disable colored output in the terminal using ANSI flags\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Disable colors\nnode ace list --no-ansi\n\n# Force enable colors\nnode ace list --ansi\n```\n\n----------------------------------------\n\nTITLE: Defining Routes for Posts Controller\nDESCRIPTION: Sets up routes for post creation and update operations using the PostsController.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport router from '@adonisjs/core/services/router'\n\nconst PostsController = () => import('#controllers/posts_controller')\n\nrouter.post('posts', [PostsController, 'store'])\nrouter.put('posts/:id', [PostsController, 'update'])\n```\n\n----------------------------------------\n\nTITLE: Defining a Nullable String Field in AdonisJS Schema (TypeScript)\nDESCRIPTION: Shows how to define a schema field (`fullName`) that accepts string values but can also be `null`. This uses the `.nullable()` modifier on the `schema.string` type definition. It's typically used for optional form fields where an empty submission results in a `null` value.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nschema: schema.create({\n  fullName: schema.string.nullable(),\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Validating String Property in AdonisJS (TypeScript)\nDESCRIPTION: This code validates that a field ('title') is a string using the AdonisJS schema validator. This is a baseline validator for any string property in incoming data. Requires the schema import.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\\n\\n{\\n  title: schema.string()\\n}\n```\n\n----------------------------------------\n\nTITLE: Using Loading Animation in Ace Commands (TypeScript)\nDESCRIPTION: Demonstrates how to create and manage a loading animation for log messages in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst animation = this.logger.await('installing packages', {\n  suffix: 'npm i'\n})\n\nanimation.start()\n\n// Update the message\nanimation.update('unpacking packages', {\n  suffix: undefined\n})\n\n// Stop animation\nanimation.stop()\n```\n\n----------------------------------------\n\nTITLE: Configuring a custom session store in AdonisJS\nDESCRIPTION: Shows how to configure and use a custom session store in the AdonisJS session configuration file by referencing the store's factory function.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/session.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/session.ts\nimport { defineConfig } from '@adonisjs/session'\nimport { mongDbStore } from 'my-custom-package'\n\nexport default defineConfig({\n  stores: {\n    mongodb: mongoDbStore({\n      // config goes here\n    })\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Token Abilities in TypeScript\nDESCRIPTION: This snippet shows how to define abilities for access tokens when creating them. It demonstrates passing an array of abilities as the second parameter to the create method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nawait User.accessTokens.create(user, ['server:create', 'server:read'])\n```\n\n----------------------------------------\n\nTITLE: Running AdonisJS Serve Command with Asset Manager Arguments\nDESCRIPTION: Shows how to pass command-line arguments to the asset manager child process when serving an AdonisJS application. This example adds CORS and auto-open options to Vite.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnode ace serve --hmr --assets-args=\"--cors --open\"\n```\n\n----------------------------------------\n\nTITLE: Using a Custom Key for Rate Limiting\nDESCRIPTION: Example of using a custom key for rate limiting instead of the default IP address, such as a user ID for authenticated users.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nlimiter\n  .allowRequests(10)\n  .every('1 minute')\n  // highlight-start\n  .usingKey(`user_${ctx.auth.user.id}`)\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Implementing URL Validation in AdonisJS (TypeScript)\nDESCRIPTION: This snippet shows how to use the url rule in AdonisJS for validating URL strings. It includes examples of basic usage, allowed hosts, banned hosts, and various validation options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  website: schema.string([\n    rules.url()\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  twitterProfile: schema.string([\n    rules.url({\n      allowedHosts: ['twitter.com']\n    })\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  website: schema.string([\n    rules.url({\n      bannedHosts: [\n        'acme.com',\n        'example.com'\n      ]\n    })\n  ])\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  website: schema.string([\n    rules.url({\n      protocols: ['http', 'https', 'ftp'],\n      requireTld: true,\n      requireProtocol: false,\n      requireHost: true,\n      allowedHosts: [],\n      bannedHosts: [],\n      validateLength: false\n    })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Scaffolding Posts Controller\nDESCRIPTION: Basic structure of the Posts controller with store and update methods.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class PostsController {\n  async store({}: HttpContext) {}\n\n  async update({}: HttpContext) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Command Paths in AdonisJS\nDESCRIPTION: Shows how to use the commandsPath method to get the path to files in the commands directory. It can return the path to a specific file or the directory itself.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/application.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\napp.commandsPath('greet.ts')\n// /project_root/commands/greet.ts\n\napp.commandsPath()\n// /project_root/commands\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS TypeScript & Related Tooling - Shell\nDESCRIPTION: This snippet demonstrates how to install the AdonisJS TypeScript config preset along with the necessary TypeScript JIT compilation dependencies. It uses npm to add @adonisjs/tsconfig, typescript, ts-node-maintained, and @swc/core as development dependencies. Ensure Node.js and npm are available as prerequisites.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D @adonisjs/tsconfig\n\n# Make sure also to install the following packages\nnpm i -D typescript ts-node-maintained @swc/core\n```\n\n----------------------------------------\n\nTITLE: Project Setup Commands\nDESCRIPTION: Shell commands for cloning the boilerplate repository, installing dependencies, and starting the development server.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit dimerapp/docs-boilerplate <my-website>\ncd <my-website>\nnpm i\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Range Validation Rule Message in AdonisJS\nDESCRIPTION: This AdonisJS snippet creates a custom message for the `range` validation rule, highlighting the `options.start` and `options.stop` parameters to define acceptable value limits.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_9\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  'range': 'Candidate age must be between {{ options.start }} and {{ options.stop }} years',\\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Metadata Runtime in VineJS (TypeScript)\nDESCRIPTION: Provides a conceptual example of passing a callback function to `vine.withMetaData`. This callback receives the metadata object at runtime, allowing for custom validation logic beyond static type checking, although VineJS itself doesn't perform this runtime validation by default.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nvine.withMetaData<{ userId: number }>((meta) => {\n  // validate metadata\n})\n```\n```\n\n----------------------------------------\n\nTITLE: Listening to Session Committed Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'session:committed' event which is emitted by the @adonisjs/session package when session data is written to the session store during an HTTP request.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('session:committed', (event) => {\n  console.log(`Persisted data for ${event.session.sessionId}`)\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling Async Validation for Custom Rules in AdonisJS (TypeScript)\nDESCRIPTION: Shows how to declare a custom validator rule as asynchronous by setting 'async: true' in the compile callback return, so the validation callback can use 'async/await'. This optimizes performance for IO-bound or database-dependent rules. Dependencies: AdonisJS validator. Key parameter: 'async' boolean property. Inputs: validator arguments. Outputs: allows asynchronous validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nvalidator.rule(\n  'camelCase', // rule name\n  // highlight-start\n  async () => {}, // validation callback\n  // highlight-end\n  () => {\n    return {\n      // highlight-start\n      async: true,\n      // highlight-end\n      compiledOptions: {},\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Escaping HTML Entities in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates how to use the escapeHTML helper to escape HTML entities in a string. It also shows an option to encode non-ASCII symbols.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.escapeHTML('<p> foo © bar </p>')\n// &lt;p&gt; foo © bar &lt;/p&gt;\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.escapeHTML('<p> foo © bar </p>', {\n  encodeSymbols: true,\n})\n// &lt;p&gt; foo &#xA9; bar &lt;/p&gt;\n```\n\n----------------------------------------\n\nTITLE: Terminating Long-Running AdonisJS Commands\nDESCRIPTION: Demonstrate how to properly terminate a long-running Ace command that uses the 'staysAlive' option.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/creating_commands.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\nimport { CommandOptions } from '@adonisjs/core/types/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  static options: CommandOptions = {\n    staysAlive: true\n  }\n  \n  async run() {\n    const redis = createRedisConnection()\n    \n    redis.on('error', (error) => {\n      this.logger.error(error)\n      this.terminate()\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Number Environment Variable Validation and Optional Rules - TypeScript\nDESCRIPTION: Shows validating numeric environment variables such as PORT using Env.schema.number, including optional and conditionally-optional variants. String inputs are coerced to numbers. Used for port numbers and numeric config values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  PORT: Env.schema.number()\n}\n\n// Mark it as optional\n{\n  PORT: Env.schema.number.optional()\n}\n\n// Mark it as optional with a condition\n{\n  PORT: Env.schema.number.optionalWhen(process.env.NODE_ENV === 'production')\n}\n```\n\n----------------------------------------\n\nTITLE: Converting Numbers to Ordinal Strings in TypeScript\nDESCRIPTION: Demonstrates converting numbers to their ordinal string representations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.ordinal(1) // 1st\nstring.ordinal(2) // '2nd'\nstring.ordinal(3) // '3rd'\nstring.ordinal(4) // '4th'\n\nstring.ordinal(23) // '23rd'\nstring.ordinal(24) // '24th'\n```\n\n----------------------------------------\n\nTITLE: Validating Enum as Nullable in AdonisJS (TypeScript)\nDESCRIPTION: This snippet allows the enum property to be nullable, enabling the field to be explicitly set to null in the payload, while still requiring its presence. Applies '.nullable' to the enum validator.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  account_type: schema.enum.nullable(Object.values(SocialAccounts))\\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Argon2 Package for AdonisJS\nDESCRIPTION: Command to install the argon2 npm package, which is required to use the argon2 hashing algorithm with AdonisJS hash service.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/hashing.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i argon2\n```\n\n----------------------------------------\n\nTITLE: Extending BriskRoute Class with Custom Properties in AdonisJS\nDESCRIPTION: Shows how to extend the BriskRoute class with custom properties using macros and getters, with the ability to set handlers via this.setHandler.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BriskRoute } from '@adonisjs/core/http'\n\nBriskRoute.macro('property', function (this: BriskRoute) {\n  return value\n})\nBriskRouter.getter('property', function (this: BriskRoute) {\n  return value\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: types/http.ts\ndeclare module '@adonisjs/core/http' {\n  export interface BriskRoute {\n    property: valueType\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Query String Parser Configuration\nDESCRIPTION: Configuration for the qs module used to parse URL query strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nexport const http = defineConfig({\n  qs: {\n    parse: {\n    },\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Time String Parsing to Seconds in TypeScript\nDESCRIPTION: Shows how to parse time expressions into seconds and format seconds back to time strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.seconds.parse('10h') // 36000\nstring.seconds.parse('1 day') // 86400\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.seconds.parse(180) // 180\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.seconds.format(36000) // 10h\nstring.seconds.format(36000, true) // 10 hours\n```\n\n----------------------------------------\n\nTITLE: Adding Reference Directive for Inertia.js Type Definitions\nDESCRIPTION: Adding a TypeScript reference directive to the Inertia app file to ensure shared props types are accessible throughout the application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"../../config/inertia.ts\" />\n```\n\n----------------------------------------\n\nTITLE: Installing pino-roll for Log Rotation\nDESCRIPTION: Command to install the pino-roll package, which provides log rotation functionality for Pino since it doesn't have built-in rotation support.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_12\n\nLANGUAGE: shell\nCODE:\n```\nnpm i pino-roll\n```\n\n----------------------------------------\n\nTITLE: Disabling Route Lookup for External URLs in AdonisJS\nDESCRIPTION: Demonstrates how to disable route lookup when creating URLs for routes outside your AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter\n  .builder()\n  .prefixUrl('https://your-app.com')\n  .disableRouteLookup()\n  .params({ token: 'foobar' })\n  .make('/email/verify/:token') // /email/verify/foobar\n```\n\n----------------------------------------\n\nTITLE: Configuring Loopback Trusted Proxies\nDESCRIPTION: Configuration for trusting loopback IP addresses when running Nginx on the same server.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport proxyAddr from 'proxy-addr'\n\nexport const http = defineConfig({\n  trustProxy: proxyAddr.compile('loopback')\n})\n```\n\n----------------------------------------\n\nTITLE: Registering API Client Plugin\nDESCRIPTION: Configuration for registering the API client plugin in the bootstrap file with optional baseURL setting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { apiClient } from '@japa/api-client'\n\nexport const plugins: Config['plugins'] = [\n  assert(),\n  apiClient(),\n  pluginAdonisJS(app),\n]\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport env from '#start/env'\n\nexport const plugins: Config['plugins'] = [\n  apiClient({\n    baseURL: `http://${env.get('HOST')}:${env.get('PORT')}`\n  })\n]\n```\n\n----------------------------------------\n\nTITLE: Generating Bouncer Policy in AdonisJS\nDESCRIPTION: This command creates a new Bouncer policy class in the app/policies directory. It follows specific naming conventions for policies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_27\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:policy post\n```\n\n----------------------------------------\n\nTITLE: Array Schema with Number Members in AdonisJS\nDESCRIPTION: Shows array validation with number type members using schema.array().members().\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_37\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/legacy/validator'\n\n{\n  tags: schema.array().members(schema.number())\n}\n\n// Valid data: [1, 3, 8, 11, 22]\n```\n\n----------------------------------------\n\nTITLE: Array Length Validation Rule Messages in AdonisJS\nDESCRIPTION: The snippet customizes messages for `minLength` and `maxLength` array validation rules in AdonisJS, using `options.minLength` and `options.maxLength` to set specific boundary requirements for arrays.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_8\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  'minLength': 'The array must have minimum of {{ options.minLength }} items',\\n  'maxLength': 'The array can contain maximum of {{ options.maxLength }} items',\\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Container Binding Resolved Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'container_binding:resolved' event which is dispatched after the IoC container resolves a binding or constructs a class instance. The event provides the binding name/constructor and resolved value.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('container_binding:resolved', (event) => {\n  console.log(event.binding)\n  console.log(event.value)\n})\n```\n\n----------------------------------------\n\nTITLE: Using a Service with Global Context Access\nDESCRIPTION: Demonstrates how to use a service class that accesses the HTTP context globally inside a controller, without explicitly passing the context to the service.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/http_context.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport UserService from '#services/user_service'\n\nexport default class UsersController {\n  index(ctx: HttpContext) {\n    const userService = new UserService()\n    return userService.all()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: RequiredWhen Rule Message in AdonisJS Validation\nDESCRIPTION: This snippet configures a custom message for the `requiredWhen` rule in AdonisJS, using parameters `options.otherField`, `options.operator`, and `options.values` to tailor dynamic conditional validation messages.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_11\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  'requiredWhen': '{{ field }} is required when {{ otherField }}{{ operator }}{{ values }}'\\n}\n```\n\n----------------------------------------\n\nTITLE: Handling E_UNKNOWN_FLAG Exception in TypeScript\nDESCRIPTION: Example of importing and checking for unknown flag exception. This exception is raised when executing a command with an unknown CLI flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_UNKNOWN_FLAG) {\n  console.log(error.commandName)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Meta Files in AdonisRC\nDESCRIPTION: Example of specifying meta files to be copied to the build folder during production build, including glob patterns and server reload options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/adonisrc_file.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  metaFiles: [\n    {\n      pattern: 'public/**',\n      reloadServer: false\n    },\n    {\n      pattern: 'resources/views/**/*.edge',\n      reloadServer: false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Escaping Dollar Signs in .env Values\nDESCRIPTION: This snippet shows how to escape dollar signs ($) in environment variable values to prevent them from being interpreted as variable substitution markers. Uses backslash (\\) as the escape character.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_21\n\nLANGUAGE: dotenv\nCODE:\n```\nPASSWORD=pa\\$\\$word\n```\n\n----------------------------------------\n\nTITLE: Specifying Prettier Ignore Paths - .prettierignore\nDESCRIPTION: An example .prettierignore file to exclude build artifacts and node_modules from formatting. Place this in your project root to ensure Prettier skips these directories, preventing unnecessary formatting overhead. No dependencies are required; Prettier will automatically use this file if present.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\nbuild\nnode_modules\n```\n\n----------------------------------------\n\nTITLE: Creating a Preload File for Edge Configuration in AdonisJS\nDESCRIPTION: This command creates a preload file for configuring Edge in the start directory.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:preload view\n```\n\n----------------------------------------\n\nTITLE: Automatic Lock Implementation\nDESCRIPTION: Example of automatically managing locks using the runImmediately method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/lock'\nimport locks from '@adonisjs/lock/services/main'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class OrderController {\n  async process({ response, request }: HttpContext) {\n    const orderId = request.input('order_id')\n\n    /**\n     * Will run the function only if lock is available\n     * Lock will also be automatically released once the function\n     * has been executed\n     */\n    const [executed, result] = await locks\n      .createLock(`order.processing.${orderId}`)\n      .runImmediately(async (lock) => {\n        /**\n         * Lock has been acquired. We can process the order\n         */\n        await processOrder()\n        return 'Order processed successfully'\n      })\n\n    /**\n     * Lock could not be acquired and function was not executed\n     */\n    if (!executed) return 'Order is already being processed'\n\n    return result\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Assembler Hooks in AdonisJS\nDESCRIPTION: Configuration example showing how to define various Assembler hooks in the adonisrc.ts file. Demonstrates setup for build completion, build start, dev server start, and file change hooks using dynamic imports.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/assembler_hooks.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/core/app'\n\nexport default defineConfig({\n  hooks: {\n    onBuildCompleted: [\n      () => import('my-package/hooks/on_build_completed')\n    ],\n    onBuildStarting: [\n      () => import('my-package/hooks/on_build_starting')\n    ],\n    onDevServerStarted: [\n      () => import('my-package/hooks/on_dev_server_started')\n    ],\n    onSourceFileChanged: [\n      () => import('my-package/hooks/on_source_file_changed')\n    ],\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Updates Component in Markdown\nDESCRIPTION: A markdown component import statement that includes a template for displaying version updates and changelog information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/resources/updates.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::component{template=\"partials/updates\"}\n```\n\n----------------------------------------\n\nTITLE: Converting Strings to Title Case in TypeScript\nDESCRIPTION: Shows how to convert strings to title case format using the string helper.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.titleCase('small word ends on')\n// Small Word Ends On\n```\n\n----------------------------------------\n\nTITLE: Controller Stub Template in AdonisJS\nDESCRIPTION: The default controller stub template showing variable declarations for controller naming and the exports function that defines the destination path.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_7\n\nLANGUAGE: js\nCODE:\n```\n{{#var controllerName = generators.controllerName(entity.name)}}\n{{#var controllerFileName = generators.controllerFileName(entity.name)}}\n{{{ \n  exports({\n    to: app.httpControllersPath(entity.path, controllerFileName)\n  })\n}}}\n// import type { HttpContext } from '@adonisjs/core/http'\n\nexport default class {{ controllerName }} {\n}\n```\n\n----------------------------------------\n\nTITLE: Object Schema with Members\nDESCRIPTION: Example of object schema validation with nested property definitions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/schema_101.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema } from '@adonisjs/core/validator'\n\n{\n  profile: schema.object().members({\n    username: schema.string(),\n    avatar_url: schema.string()\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Event Preload File with ACE Command in Shell\nDESCRIPTION: Generates a preload file for event listeners using the ‘make:preload’ command. This file is used to define event-listeners that are executed as soon as the application starts.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:preload events\n```\n\n----------------------------------------\n\nTITLE: Registering CORS Middleware\nDESCRIPTION: Code snippet showing how to register the CORS middleware in the start/kernel.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nserver.use([\n  () => import('@adonisjs/cors/cors_middleware')\n])\n```\n\n----------------------------------------\n\nTITLE: Type Detection using @sindresorhus/is in TypeScript\nDESCRIPTION: The @sindresorhus/is module is exported for type detection in AdonisJS applications. It provides various methods to check the type of values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\nimport is from '@adonisjs/core/helpers/is'\n\nis.object({}) // true\nis.object(null) // false\n```\n\n----------------------------------------\n\nTITLE: Optional Boolean Schema in AdonisJS\nDESCRIPTION: Shows how to make a boolean field optional using the optional() method. Undefined and null values are removed from validated object.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  accepted: schema.boolean.optional()\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Props Type Definitions for Inertia.js in AdonisJS\nDESCRIPTION: TypeScript configuration in the inertia config file to define and extend shared props types using module augmentation, enabling type safety for shared data across components.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\n// file: config/inertia.ts\nconst inertiaConfig = defineConfig({\n  sharedData: {\n    appName: 'My App',\n  },\n});\n\nexport default inertiaConfig;\n\ndeclare module '@adonisjs/inertia/types' {\n  export interface SharedProps extends InferSharedProps<typeof inertiaConfig> {\n    // If necessary, you can also manually add some shared props,\n    // such as those shared from a middleware for example\n    propsSharedFromAMiddleware: number;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listening to Access Tokens Auth Authentication Succeeded Event in AdonisJS\nDESCRIPTION: Example of how to listen to the 'access_tokens_auth:authentication_succeeded' event which is dispatched after an access token has been verified, providing user and token details.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/events.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport emitter from '@adonisjs/core/services/emitter'\n\nemitter.on('access_tokens_auth:authentication_succeeded', (event) => {\n  console.log(event.guardName)\n  console.log(event.user)\n  console.log(event.token)\n})\n```\n\n----------------------------------------\n\nTITLE: Conditional Required Rules in AdonisJS\nDESCRIPTION: This example specifies custom messages for conditional requirements in AdonisJS, tailoring output based on the presence of other related fields using `options.otherFields` and `options.otherField`.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_messages.md#2025-04-22_snippet_10\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\\n  'requiredIfExists': '{{ options.otherField }} requires {{ field }}',\\n}\n```\n\n----------------------------------------\n\nTITLE: Defining metaFiles for Static Build Copy (TypeScript)\nDESCRIPTION: Specifies which files should be copied from the public directory to the build directory when executing AdonisJS production builds. Placed in adonisrc.ts under the metaFiles array, this ensures all matched assets are included in the output. The pattern uses glob syntax, and reloadServer enables or disables server reload on asset changes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\n{\n  metaFiles: [\n    {\n      pattern: 'public/**',\n      reloadServer: false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Event Listeners in TypeScript\nDESCRIPTION: Demonstrates clearing all listeners for specific events using clearListeners method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n//String-based event\nemitter.clearListeners('user:registered')\n\n//Class-based event\nemitter.clearListeners(UserRegistered)\n```\n\n----------------------------------------\n\nTITLE: Host Formatting Validation for Environment Variables - TypeScript\nDESCRIPTION: Validates that a variable (e.g., HOST) matches host formatting by passing format: 'host' to Env.schema.string. Ensures that values are valid URLs or IP addresses. Requires that the relevant environment variable (e.g., HOST) is set and follows the host format.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  HOST: Env.schema.string({ format: 'host' })\n}\n```\n\n----------------------------------------\n\nTITLE: Handling E_MULTIPLE_REDIS_SUBSCRIPTIONS Exception in AdonisJS Redis (TypeScript)\nDESCRIPTION: This code checks if an error is an instance of E_MULTIPLE_REDIS_SUBSCRIPTIONS exception from the @adonisjs/redis package. This exception is raised when attempting to subscribe to a pub/sub channel multiple times.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as redisErrors } from '@adonisjs/redis'\nif (error instanceof redisErrors.E_MULTIPLE_REDIS_SUBSCRIPTIONS) {\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Casing from Strings in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates how to use the noCase helper to remove all casing from strings, converting them to a space-separated format.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.noCase('helloWorld') // hello world\n```\n\n----------------------------------------\n\nTITLE: Dockerfile for AdonisJS Application Deployment\nDESCRIPTION: A multi-stage Dockerfile for building and deploying an AdonisJS application. It includes stages for dependencies, build, and production setup.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\nFROM node:20.12.2-alpine3.18 AS base\n\n# All deps stage\nFROM base AS deps\nWORKDIR /app\nADD package.json package-lock.json ./\nRUN npm ci\n\n# Production only deps stage\nFROM base AS production-deps\nWORKDIR /app\nADD package.json package-lock.json ./\nRUN npm ci --omit=dev\n\n# Build stage\nFROM base AS build\nWORKDIR /app\nCOPY --from=deps /app/node_modules /app/node_modules\nADD . .\nRUN node ace build\n\n# Production stage\nFROM base\nENV NODE_ENV=production\nWORKDIR /app\nCOPY --from=production-deps /app/node_modules /app/node_modules\nCOPY --from=build /app/build /app\nEXPOSE 8080\nCMD [\"node\", \"./bin/server.js\"]\n```\n\n----------------------------------------\n\nTITLE: Validating String as Nullable and Optional in AdonisJS (TypeScript)\nDESCRIPTION: This code allows the string property to be either omitted entirely or set to null. Both '.nullable' and '.optional' are chained, providing flexible validation for optional user input.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  title: schema.string.nullableAndOptional()\\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CORS Service Provider\nDESCRIPTION: Code snippet showing how to register the CORS service provider in the adonisrc.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/cors/cors_provider')\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Validation\nDESCRIPTION: Schema validation for the LOCK_STORE environment variable.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  LOCK_STORE: Env.schema.enum(['redis', 'database', 'memory'] as const),\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an Edge View File in AdonisJS\nDESCRIPTION: This command creates a new Edge view file named 'welcome' in the resources/views directory.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:view welcome\n```\n\n----------------------------------------\n\nTITLE: Creating an AdonisJS Validator Class using Ace Command (Shell)\nDESCRIPTION: Displays the `node ace make:validator` command used to generate a new Validator class file (e.g., `app/Validators/CreateUserValidator.ts`) within an AdonisJS project structure.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\n```sh\nnode ace make:validator CreateUser\n\n# CREATE: app/Validators/CreateUserValidator.ts\n```\n```\n\n----------------------------------------\n\nTITLE: Database Store Configuration Options\nDESCRIPTION: Configuration options for the database store, including connection details, table name, and cleanup settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  database: stores.database({\n    connectionName: 'mysql',\n    dbName: 'my_app',\n    tableName: 'rate_limits',\n    schemaName: 'public',\n    clearExpiredByTimeout: false,\n  }),\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Text with ANSI Colors in Ace Commands (TypeScript)\nDESCRIPTION: Demonstrates how to use kleur for formatting text with ANSI colors in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nthis.colors.red('[ERROR]')\nthis.colors.bgGreen().white(' CREATED ')\n```\n\n----------------------------------------\n\nTITLE: Configuring HMR Boundaries in package.json\nDESCRIPTION: Configuration to add to package.json that defines which files should be considered for Hot Module Replacement. The boundaries property accepts glob patterns for files that should use HMR.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/hmr.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"hotHook\": {\n    \"boundaries\": [\n      \"./app/controllers/**/*.ts\",\n      \"./app/middleware/*.ts\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: DummyCache Class Implementation\nDESCRIPTION: Example implementation of a singleton cache service class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nexport class DummyCache {\n  constructor(config: any) {}\n}\n```\n\n----------------------------------------\n\nTITLE: Setting max-age Cache-Control for Static Files (TypeScript)\nDESCRIPTION: Demonstrates how to set a specific max-age duration for the Cache-Control header, either as a string time expression or milliseconds. Helps control client and proxy cache durations efficiently. Should be included in config/static.ts and requires an active @adonisjs/static middleware.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\n{\n  maxAge: '30 mins'\n}\n```\n\n----------------------------------------\n\nTITLE: Handling E_UNAUTHORIZED_ACCESS Exception in TypeScript\nDESCRIPTION: Example of importing and checking for unauthorized access exception. This exception is raised when an authentication guard is unable to authenticate a request.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as authErrors } from '@adonisjs/auth'\nif (error instanceof authErrors.E_UNAUTHORIZED_ACCESS) {\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Prefix and Suffix to Log Messages (TypeScript)\nDESCRIPTION: Shows how to add prefix and suffix to log messages using options object in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nthis.logger.info('installing packages', {\n  suffix: 'npm i --production'\n})\n\nthis.logger.info('installing packages', {\n  prefix: process.pid\n})\n```\n\n----------------------------------------\n\nTITLE: Handling E_MAIL_TRANSPORT_ERROR Exception in AdonisJS Mail (TypeScript)\nDESCRIPTION: This code demonstrates how to check for an E_MAIL_TRANSPORT_ERROR exception from the @adonisjs/mail package. It also shows how to access the underlying cause of the error, which is the error object returned by the 'got' npm package.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as mailErrors } from '@adonisjs/mail'\nif (error instanceof mailErrors.E_MAIL_TRANSPORT_ERROR) {\n  console.log(error.cause)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Query String Parser for Forms - AdonisJS - TypeScript\nDESCRIPTION: Shows how to specify options for the query string parser (qs) used by the form request parser in AdonisJS. The example configures allowDots and allowSparse as true to enhance parsing behavior. This snippet is nested inside the form parser configuration. Dependencies include the qs package as the underlying query string parser.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/body_parser.md#2025-04-22_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\n  form: {\n    queryString: {\n      allowDots: true,\n      allowSparse: true,\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Extending AdonisJS TSConfig for Package Development - JSONC\nDESCRIPTION: This snippet extends the AdonisJS tsconfig.package.json preset which is suited for package (library) development within the AdonisJS ecosystem. It configures TypeScript's root and output directories. Place this configuration in tsconfig.json in your package root after installing @adonisjs/tsconfig with npm.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_2\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"extends\": \"@adonisjs/tsconfig/tsconfig.package.json\",\n  \"compilerOptions\": {\n    \"rootDir\": \"./\",\n    \"outDir\": \"./build\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Registering Cache Provider\nDESCRIPTION: Configuration to register the cache service provider in adonisrc.ts file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/cache.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  providers: [\n    // ...other providers\n    () => import('@adonisjs/cache/cache_provider'),\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Confirmation Prompts\nDESCRIPTION: Examples of implementing confirmation prompts with default and custom options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/prompts.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteFiles = await this.prompt.confirm(\n  'Want to delete all files?'\n)\n\nif (deleteFiles) {\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst deleteFiles = await this.prompt.toggle(\n  'Want to delete all files?',\n  ['Yup', 'Nope']\n)\n\nif (deleteFiles) {\n}\n```\n\n----------------------------------------\n\nTITLE: Creating URLs for Domain-Specific Routes in AdonisJS\nDESCRIPTION: Demonstrates how to generate URLs for routes registered under a specific domain using the router.builderForDomain() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_38\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nrouter\n  .builderForDomain('blog.adonisjs.com')\n  .params({ id: 1 })\n  .make('posts.show')\n```\n\n----------------------------------------\n\nTITLE: Starting AdonisJS Development Server - Shell Command\nDESCRIPTION: Command to start the AdonisJS development server with watch mode enabled for automatic reloading on file changes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/tutorial/creating-new-application.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace serve --watch\n```\n\n----------------------------------------\n\nTITLE: Interpolating Variables in Strings with AdonisJS\nDESCRIPTION: Shows how to use the interpolate helper to replace variables in a string template, including escaping curly braces.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.interpolate('hello {{ user.username }}', {\n  user: {\n    username: 'virk'\n  }\n})\n// hello virk\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.interpolate('hello \\\\{{ users.0 }}', {})\n// hello {{ users.0 }}\n```\n\n----------------------------------------\n\nTITLE: Accessing Application Instance\nDESCRIPTION: Example of accessing the AdonisJS Application instance inside Edge templates using the app global helper.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n{{ app.getEnvironment() }}\n```\n\n----------------------------------------\n\nTITLE: InvoicesController Implementation\nDESCRIPTION: Example implementation of a controller class with standard CRUD operations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class InvoicesController {\n  index() {\n    // return view all invoices\n  }\n\n  store() {\n    // create a new invoice\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a JavaScript Resource Class Using a Handlebars Stub - Tempura Template - Handlebars\nDESCRIPTION: This stub template, written in Handlebars syntax compatible with the Tempura engine, defines a JavaScript class for resource serialization. It leverages variables (modelName, modelReference) to customize the class name and serialized property at runtime. The template expects to receive these variable values from the consuming code or to compute them inline. Inputs: modelName, modelReference; Output: JavaScript class definition.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_1\n\nLANGUAGE: Handlebars\nCODE:\n```\nexport default class {{ modelName }}Resource {\n  serialize({{ modelReference }}: {{ modelName }}) {\n    return {{ modelReference }}.toJSON()\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Drive Package\nDESCRIPTION: Command to install and configure the @adonisjs/drive package using the ace CLI tool.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/drive.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/drive\n```\n\n----------------------------------------\n\nTITLE: Starting AdonisJS REPL Session\nDESCRIPTION: Command to start the AdonisJS REPL session using the ace CLI tool.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/repl.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace repl\n```\n\n----------------------------------------\n\nTITLE: Truncating Strings in TypeScript with AdonisJS\nDESCRIPTION: Demonstrates how to use the truncate helper to limit string length, with options for completing words and custom suffixes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.truncate('This is a very long, maybe not that long title', 12)\n// Output: This is a ve...\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.truncate('This is a very long, maybe not that long title', 12, {\n  completeWords: true,\n})\n// Output: This is a very...\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.truncate('This is a very long, maybe not that long title', 12, {\n  completeWords: true,\n  suffix: '... <a href=\"/1\"> Read more </a>',\n})\n// Output: This is a very... <a href=\"/1\"> Read more </a>\n```\n\n----------------------------------------\n\nTITLE: Displaying CSRF Token Error in Edge Template\nDESCRIPTION: Example of handling the CSRF token validation error in an Edge template using the error directive. This allows displaying a custom message when a CSRF token is invalid.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n@error('E_BAD_CSRF_TOKEN')\n  <p>{{ message }}</p>\n@end\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Identifiers in start/env.ts\nDESCRIPTION: This snippet demonstrates how to define custom identifiers directly in the start/env.ts file of an AdonisJS application. It shows the proper setup for the base64 identifier within the application's environment configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/env.ts\nimport { Env } from '@adonisjs/core/env'\n\nEnv.defineIdentifier('base64', (value) => {\n  return Buffer.from(value, 'base64').toString()\n})\n\nexport default await Env.create(APP_ROOT, {\n  APP_KEY: Env.schema.string()\n})\n```\n\n----------------------------------------\n\nTITLE: Disabling Default Redis Error Logging in AdonisJS\nDESCRIPTION: Code to disable the default Redis error logging and implement custom error handling in AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\n\n/**\n * Disable default error reporter\n */\nredis.doNotLogErrors()\n\nredis.on('connection', (connection) => {\n  /**\n   * Make sure always to have an error listener defined.\n   * Otherwise, the app will crash\n   */\n  connection.on('error', (error) => {\n    console.log(error)\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Resolved Config\nDESCRIPTION: Example showing how to access the resolved configuration from a service.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/config_providers.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport hash from '@adonisjs/core/services/hash'\nconsole.log(hash.config)\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Identifiers for Environment Variable Interpolation in AdonisJS\nDESCRIPTION: This snippet demonstrates how to define custom identifiers for environment variable interpolation in AdonisJS. It shows how to create a 'base64' identifier that decodes base64-encoded values when the environment variable has the 'base64:' prefix.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/environment_variables.md#2025-04-22_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { EnvParser } from '@adonisjs/env'\n\nEnvParser.defineIdentifier('base64', (value) => {\n  return Buffer.from(value, 'base64').toString()\n})\n\nconst envParser = new EnvParser(`\n  APP_KEY=base64:U7dbSKkdb8wjVFOTq2osaDVz4djuA7BRLdoCUJEWxak=\n`)\n\nconsole.log(await envParser.parse())\n```\n\n----------------------------------------\n\nTITLE: Handling E_SESSION_NOT_MUTABLE Exception in AdonisJS Session (TypeScript)\nDESCRIPTION: This snippet shows how to check for an E_SESSION_NOT_MUTABLE exception from the @adonisjs/session package. This exception is raised when the session store is initiated in read-only mode.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as sessionErrors } from '@adonisjs/session'\nif (error instanceof sessionErrors.E_SESSION_NOT_MUTABLE) {\n  console.log(error.message)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Browser Testing Dependencies with npm\nDESCRIPTION: Command to install Playwright and Japa's browser client plugin as development dependencies for browser testing in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/browser_tests.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -D playwright @japa/browser-client\n```\n\n----------------------------------------\n\nTITLE: Choosing Options in Select Prompts\nDESCRIPTION: Shows how to programmatically select an option from a select prompt during testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\ncommand.prompt\n  .trap('Select package manager')\n  .chooseOption(0)\n```\n\n----------------------------------------\n\nTITLE: Choosing Multiple Options in Multi-Select Prompts\nDESCRIPTION: Shows how to programmatically select multiple options from a multi-select prompt during testing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_11\n\nLANGUAGE: ts\nCODE:\n```\ncommand.prompt\n  .trap('Select database manager')\n  .chooseOptions([1, 2])\n```\n\n----------------------------------------\n\nTITLE: Processing Argument Values in AdonisJS Ace Command\nDESCRIPTION: Example showing how to use the parse method to process an argument value before it is assigned to the class property. In this case, converting the string to uppercase if it has a value.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/args.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n@args.string({\n  argumentName: 'user-name',\n  description: 'Name of the user',\n  parse (value) {\n    return value ? value.toUpperCase() : value\n  }\n})\ndeclare name: string\n```\n\n----------------------------------------\n\nTITLE: Executing Ace CLI Basic Command\nDESCRIPTION: Basic command to run the Ace CLI entry point file which handles TypeScript execution through TS Node as an ESM module loader hook\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace\n```\n\n----------------------------------------\n\nTITLE: Receiving Normalized Options in Custom Validator Callback (TypeScript)\nDESCRIPTION: Illustrates how the normalized 'maxLength' compiled option is received as an object in the validation callback, facilitating simpler and more efficient logic. The validator still receives user input as arguments, but always with the normalized/default values. Dependencies: AdonisJS validator. Inputs: validated value and compiled option. Output: proper execution of rule logic with defaulted parameters.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nvalidator.rule(\n  'camelCase', // rule name\n  // highlight-start\n  (value, { maxLength }) => {}, // validation callback\n  // highlight-end\n  ([maxLength]) => {\n    return {\n      compiledOptions: {\n        maxLength: maxLength || 10,\n      },\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Enabling Negated Variant in Help Output for Boolean Flags\nDESCRIPTION: This snippet shows how to enable the display of negated options in the help output for boolean flags using the showNegatedVariantInHelp option.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class MakeControllerCommand extends BaseCommands {\n  @flags.boolean({\n    showNegatedVariantInHelp: true,\n  })\n  declare resource: boolean\n}\n```\n\n----------------------------------------\n\nTITLE: Adding React HMR Support with @viteReactRefresh\nDESCRIPTION: Using the @viteReactRefresh tag to enable React Hot Module Replacement (HMR) when using Vite with the @vitejs/plugin-react package.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_19\n\nLANGUAGE: edge\nCODE:\n```\n@viteReactRefresh()\n```\n\n----------------------------------------\n\nTITLE: Svelte SSR Server Entrypoint for Inertia.js in AdonisJS\nDESCRIPTION: Server-side rendering entrypoint configuration for Svelte with Inertia.js, defining how Svelte components are resolved and rendered on the server.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createInertiaApp } from '@inertiajs/svelte'\nimport createServer from '@inertiajs/svelte/server'\n\nexport default function render(page) {\n  return createInertiaApp({\n    page,\n    resolve: name => {\n      const pages = import.meta.glob('./pages/**/*.svelte', { eager: true })\n      return pages[`./pages/${name}.svelte`]\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Starting AdonisJS Server with PM2\nDESCRIPTION: Command to start the AdonisJS server using PM2 with the ecosystem configuration file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/deployment.md#2025-04-22_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npm2 start ecosystem.config.js\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Accessing HTTP Context in Static Class Properties\nDESCRIPTION: This TypeScript example illustrates incorrect usage of `HttpContext.getOrFail()` within a static class property (`static connection = ...`). Static properties are evaluated when the module is first loaded, similar to top-level access. Therefore, `HttpContext.getOrFail()` will capture the context of the initial request, not the current one, leading to incorrect state.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { BaseModel } from '@adonisjs/lucid'\n\nexport default class User extends BaseModel {\n  static connection = HttpContext.getOrFail().tenant.name\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Routes in AdonisJS\nDESCRIPTION: This command displays a list of routes registered by the application. It supports various options for filtering and formatting the output.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_29\n\nLANGUAGE: sh\nCODE:\n```\nnode ace list:routes\n```\n\n----------------------------------------\n\nTITLE: Initializing AdonisJS Application - Shell Command\nDESCRIPTION: Command to create a new AdonisJS application using the web starter kit via npm init.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/tutorial/creating-new-application.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest\n```\n\n----------------------------------------\n\nTITLE: Validation Error Format for JSON API Responses (JSON)\nDESCRIPTION: Illustrates the JSON structure returned by AdonisJS validation when an error occurs and the client requested `application/json` via the Accept header. The response contains an `errors` array, where each object specifies the `field`, the failed `rule`, and the `message`.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n```ts\n{\n  errors: [\n    {\n      field: 'title',\n      rule: 'required',\n      message: 'required validation failed',\n    },\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Array with Any Members in AdonisJS\nDESCRIPTION: Shows how to define an array that accepts any type of elements without specific validation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  themeOptions: schema.array().anyMembers()\n}\n```\n\n----------------------------------------\n\nTITLE: Nullable Array Schema in AdonisJS\nDESCRIPTION: Demonstrates nullable array validation with minimum length rule.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema.array\n    .nullable([// 👈\n      rules.minLength(1)\n    ])\n    .members(schema.number())\n}\n```\n\n----------------------------------------\n\nTITLE: Using signedRoute Helper in Edge Templates\nDESCRIPTION: Demonstrates how to use the signedRoute helper in Edge templates to generate signed URLs with expiration and base URL.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_40\n\nLANGUAGE: edge\nCODE:\n```\n<a href=\"{{\n  signedRoute('unsubscribe', [user.id], {\n    expiresIn: '3 days',\n    prefixUrl: 'https://blog.adonisjs.com'    \n  })\n}}\">\n  Unsubscribe\n</a>\n```\n\n----------------------------------------\n\nTITLE: Configuring Redaction for Sensitive Data in AdonisJS Logs\nDESCRIPTION: Configuration for hiding sensitive information in logs using Pino's redact option. This example shows how to specify paths for redacting password fields in the logger configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/logger.ts\napp: {\n  enabled: true,\n  name: env.get('APP_NAME'),\n  level: env.get('LOG_LEVEL', 'info')\n\n  // highlight-start\n  redact: {\n    paths: ['password', '*.password']\n  }\n  // highlight-end\n}\n```\n\n----------------------------------------\n\nTITLE: Handling E_HTTP_REQUEST_ABORTED Exception in TypeScript\nDESCRIPTION: Example of importing and checking for HTTP request aborted exception. This exception is raised by the response.abort method to stop request processing.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_HTTP_REQUEST_ABORTED) {\n  // handle error\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Date as Nullable and Optional in AdonisJS (TypeScript)\nDESCRIPTION: This snippet permits the date field to be omitted or set to null. If undefined, the field is removed; if null, it's preserved; otherwise, it is validated against the format, accommodating various optional and nullable user inputs.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\n{\\n  published_at: schema.date.nullableAndOptional({\\n    format: 'yyyy-MM-dd HH:mm:ss',\\n  })\\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Argument Name in AdonisJS Ace Command\nDESCRIPTION: Example showing how to customize the argument name displayed on the help screen using the argumentName option in the decorator configuration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/args.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n@args.string({\n  argumentName: 'user-name'\n})\ndeclare name: string\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Entity Names in a Stub Template - Tempura/Handlebars\nDESCRIPTION: This stub template snippet updates the code to initialize the 'entity' variable using a dynamic name argument (received from command-line input) instead of a hardcoded value. This allows generated resources to be named according to user-provided values. It replaces a deleted line and shows the updated assignment. Inputs: name; Outputs: correctly named resource class.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_5\n\nLANGUAGE: Handlebars\nCODE:\n```\n// delete-start\n{{#var entity = generators.createEntity('user')}}\n// delete-end\n// insert-start\n{{#var entity = generators.createEntity(name)}}\n// insert-end\n{{#var modelName = generators.modelName(entity.name)}}\n{{#var modelReference = string.toCamelCase(modelName)}}\n{{#var resourceFileName = string(modelName).snakeCase().suffix('_resource').ext('.ts').toString()}}\n{{{\n  exports({\n    to: app.makePath('app/api_resources', entity.path, resourceFileName)\n  })\n}}}\nexport default class {{ modelName }}Resource {\n  serialize({{ modelReference }}: {{ modelName }}) {\n    return {{ modelReference }}.toJSON()\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Installing NPM Dependencies\nDESCRIPTION: Use this command to install project dependencies using npm. It assumes npm is installed and the package.json file is configured correctly. This command will download and install all necessary packages for the project.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/contribution_guide.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install\n```\n\n----------------------------------------\n\nTITLE: Alias Command Example\nDESCRIPTION: Example showing how command aliases are expanded when executed with additional parameters\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnode ace resource admin --help\n```\n\n----------------------------------------\n\nTITLE: Validation Error Format for JSON:API Responses (JSON)\nDESCRIPTION: Shows the JSON structure of validation errors conforming to the JSON:API specification, returned when the client requests `application/vnd.api+json` via the Accept header. The `errors` array contains objects with `code`, `source.pointer` (field name), and `title` (error message).\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n```ts\n{\n  errors: [\n    {\n      code: 'required',\n      source: {\n        pointer: 'title',\n      },\n      title: 'required validation failed'\n    }\n  ]\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Implementing AuthenticateAsClient Method in JwtGuard for AdonisJS\nDESCRIPTION: This snippet shows the implementation of the authenticateAsClient method in the JwtGuard class, used for authenticating users during tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/custom_auth_guard.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport class JwtGuard<UserProvider extends JwtUserProviderContract<unknown>>\n  implements GuardContract<UserProvider[typeof symbols.PROVIDER_REAL_USER]>\n{\n  async authenticateAsClient(\n    user: UserProvider[typeof symbols.PROVIDER_REAL_USER]\n  ): Promise<AuthClientResponse> {\n    const token = await this.generate(user)\n    return {\n      headers: {\n        authorization: `Bearer ${token.token}`,\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling E_MULTIPLE_REDIS_PSUBSCRIPTIONS Exception in AdonisJS Redis (TypeScript)\nDESCRIPTION: This snippet shows how to check if an error is an instance of E_MULTIPLE_REDIS_PSUBSCRIPTIONS exception from the @adonisjs/redis package. This exception is raised when attempting to subscribe to a pub/sub pattern multiple times.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as redisErrors } from '@adonisjs/redis'\nif (error instanceof redisErrors.E_MULTIPLE_REDIS_PSUBSCRIPTIONS) {\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Configuration for i18n Ally\nDESCRIPTION: Configuration files for setting up the i18n Ally VSCode extension with AdonisJS.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/i18n.md#2025-04-22_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"i18n-ally.localesPaths\": [\n    \"resources/lang\"\n  ],\n  \"i18n-ally.keystyle\": \"nested\",\n  \"i18n-ally.namespace\": true,\n  \"i18n-ally.editor.preferEditor\": true,\n  \"i18n-ally.refactor.templates\": [\n    {\n      \"templates\": [\n        \"{{ t('{key}'{args}) }}\"\n      ],\n      \"include\": [\n        \"**/*.edge\",\n      ],\n    },\n  ]\n}\n```\n\nLANGUAGE: yaml\nCODE:\n```\nlanguageIds:\n  - edge\nusageMatchRegex:\n  - \"[^\\\\w\\\\d]t\\\\(['\\\"`]({key})['\\\"`]\"\nsortKeys: true\n```\n\n----------------------------------------\n\nTITLE: Logging with Request ID\nDESCRIPTION: Shows how request IDs are automatically included in logs when using the context logger instance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.get('/', ({ logger }) => {\n  // { msg: 'hello world', request_id: 'ckk9oliws0000qt3x9vr5dkx7' }\n  logger.info('hello world')\n})\n```\n\n----------------------------------------\n\nTITLE: Triggering Schema Type Error with Custom Rule in AdonisJS (TypeScript)\nDESCRIPTION: Provides an example schema where the 'camelCase' rule is incorrectly applied to a number-typed field, illustrating that the above restriction will cause a runtime error. Dependencies: AdonisJS validator. Input: schema definition with an invalid rule association. Output: runtime error if used as shown.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nschema: schema.create({\n  fileName: schema.number([\n    rules.camelCase() // will result in an error at runtime\n  ]),\n}),\n```\n\n----------------------------------------\n\nTITLE: Running Tests with NPM\nDESCRIPTION: This command runs the project's test suite using npm. It assumes a test script is defined in the package.json file. The command will execute all tests and provide feedback on the results.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/contribution_guide.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm test\n```\n\n----------------------------------------\n\nTITLE: Adding a macro method to Request class\nDESCRIPTION: Demonstrates how to extend the Request class with a 'wantsJSON' method for checking if the request accepts JSON responses. The method examines the request's content type headers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/extending_the_framework.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: src/extensions.ts\nimport { Request } from '@adonisjs/core/http'\n\nRequest.macro('wantsJSON', function (this: Request) {\n  const firstType = this.types()[0]\n  if (!firstType) {\n    return false\n  }\n  \n  return firstType.includes('/json') || firstType.includes('+json')\n})\n```\n\n----------------------------------------\n\nTITLE: Byte String Parsing and Formatting in TypeScript\nDESCRIPTION: Shows how to parse byte expressions and format byte values to human-readable strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.bytes.parse('1KB') // 1024\nstring.bytes.parse('1MB') // 1048576\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.bytes.parse(1024) // 1024\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.bytes.format(1048576) // 1MB\nstring.bytes.format(1024 * 1024 * 1000) // 1000MB\nstring.bytes.format(1024 * 1024 * 1000, { thousandsSeparator: ',' }) // 1,000MB\n```\n\n----------------------------------------\n\nTITLE: Babel Configuration\nDESCRIPTION: Example of configuring Babel with Encore\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nEncore.configureBabel(\n  (babelConfig) => {\n    babelConfig.plugins.push(\"styled-jsx/babel\");\n    babelConfig.presets.push(\"@babel/preset-flow\");\n  },\n  {\n    exclude: /node_modules/,\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Edge Template Asset References - Correct\nDESCRIPTION: Example showing correct way to reference assets using asset helper in Edge templates\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_3\n\nLANGUAGE: edge\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <script src=\"{{ asset('assets/app.js') }}\"></script>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ asset('assets/app.css') }}\">\n</head>\n<body>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Optional Array Schema in AdonisJS\nDESCRIPTION: Shows how to make an array field optional with additional length validation rules.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_types.md#2025-04-22_snippet_39\n\nLANGUAGE: typescript\nCODE:\n```\n{\n  tags: schema.array\n    .optional([// 👈\n      rules.minLength(1)\n    ])\n    .members(schema.number())\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Container Service for Database in TypeScript\nDESCRIPTION: Shows the implementation of a container service that wraps the container.make call for the Database instance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/container_services.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst db = await app.container.make('lucid.db')\nexport { db as default }\n```\n\n----------------------------------------\n\nTITLE: Schema Types Overview\nDESCRIPTION: List of available schema types in AdonisJS validator with their modifiers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/schema_101.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nschema.boolean()\nschema.string.optional()\nschema.string.nullable()\nschema.string.nullableAndOptional()\n\nschema.number()\nschema.string.optional()\nschema.string.nullable()\nschema.string.nullableAndOptional()\n\nschema.array().members()\nschema.string.optional()\nschema.string.nullable()\nschema.string.nullableAndOptional()\n\nschema.object().members()\nschema.string.optional()\nschema.string.nullable()\nschema.string.nullableAndOptional()\n\nschema.enum()\nschema.string.optional()\nschema.string.nullable()\nschema.string.nullableAndOptional()\n\nschema.enumSet()\nschema.string.optional()\nschema.string.nullable()\nschema.string.nullableAndOptional()\n```\n\n----------------------------------------\n\nTITLE: Handling E_OAUTH_STATE_MISMATCH Exception in TypeScript\nDESCRIPTION: Example of importing and checking for OAuth state mismatch exception. This exception is raised when the CSRF state defined during the redirect is missing in an OAuth flow.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as allyErrors } from '@adonisjs/bouncer'\nif (error instanceof allyErrors.E_OAUTH_STATE_MISMATCH) {\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching User Details with GitHub in TypeScript\nDESCRIPTION: Uses .userFromToken to fetch user details from GitHub using an access token. Requires an instance of Ally configured for GitHub. Inputs an access token and outputs a user object containing user details.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst user = await ally\n  .use('github')\n  .userFromToken(accessToken)\n```\n\n----------------------------------------\n\nTITLE: Custom Static Response Headers Function (TypeScript)\nDESCRIPTION: Defines a headers callback function in the static middleware configuration to set custom response headers based on file path or stats. Supports returning specific content-types, such as for .mc2 files, or empty for none. Should be placed in config/static.ts as part of the @adonisjs/static configuration options. Inputs are the file path and Node.js file stats; outputs an object with HTTP headers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_10\n\nLANGUAGE: ts\nCODE:\n```\n{\n  headers: (path, stats) => {\n    if (path.endsWith('.mc2')) {\n      return {\n        'content-type': 'application/octet-stream'\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Redis Connection End Events - TypeScript\nDESCRIPTION: Registers for 'end' and 'subscriber:end' events, which are emitted when no further reconnections will be made. Useful for detecting the termination of a Redis connection's lifecycle. Depends on '@adonisjs/redis/services/main', and event handlers receive the connection instance.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/database/redis.md#2025-04-22_snippet_29\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport redis from '@adonisjs/redis/services/main'\\n\\nredis.on('connection', (connection) => {\\n  connection.on('end', () => {})\\n  connection.on('subscriber:end', () => {})\\n})\n```\n\n----------------------------------------\n\nTITLE: Handling E_COMMAND_NOT_FOUND Exception in TypeScript\nDESCRIPTION: Example of importing and checking for command not found exception. This exception is raised by Ace when it cannot find a requested command.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_COMMAND_NOT_FOUND) {\n  console.log(error.commandName)\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Log Messages with Regular Expressions\nDESCRIPTION: Shows how to assert that a log message matches a regular expression pattern.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nawait command.exec()\n\ncommand.assertLogMatches(/Hello world/)\n```\n\n----------------------------------------\n\nTITLE: Defining a Store Factory Function - AdonisJS - TypeScript\nDESCRIPTION: This snippet provides a factory function for creating instances of the NoopStore, following AdonisJS conventions for lock store registration. It takes a configuration object as an argument and returns an object with a driver property, whose factory method creates a new NoopStore with the given options. This function is intended for use by the @adonisjs/lock package during store setup.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_7\n\nLANGUAGE: TypeScript\nCODE:\n```\nfunction noopStore(options: MyNoopStoreConfig) {\n  return { driver: { factory: () => new NoopStore(options) } }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Reporters in TypeScript Configuration\nDESCRIPTION: TypeScript configuration to activate multiple test reporters in the config file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_17\n\nLANGUAGE: ts\nCODE:\n```\nexport const reporters: Config['reporters'] = {\n  activated: ['spec', 'json']\n}\n```\n\n----------------------------------------\n\nTITLE: Manifest JSON Structure\nDESCRIPTION: Example of manifest.json file structure generated by Encore\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"assets/app.css\": \"http://localhost:8080/assets/app.css\",\n  \"assets/app.js\": \"http://localhost:8080/assets/app.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Solid.js SSR Server Entrypoint for Inertia.js in AdonisJS\nDESCRIPTION: Server-side rendering entrypoint configuration for Solid.js with Inertia.js, defining the hydration process and component resolution.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nimport { hydrate } from 'solid-js/web'\nimport { createInertiaApp } from 'inertia-adapter-solid'\n\nexport default function render(page: any) {\n  return createInertiaApp({\n    page,\n    resolve: (name) => {\n      const pages = import.meta.glob('./pages/**/*.tsx', { eager: true })\n      return pages[`./pages/${name}.tsx`]\n    },\n    setup({ el, App, props }) {\n      hydrate(() => <App {...props} />, el)\n    },\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Trust All Proxies Configuration\nDESCRIPTION: Configuration to trust all proxy servers by always returning true.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/request.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport const http = defineConfig({\n  trustProxy: () => true\n})\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom 'camelCase' Validator Rule in AdonisJS (TypeScript)\nDESCRIPTION: This snippet demonstrates how to register a custom validator rule called 'camelCase' within 'start/validator.ts' in an AdonisJS project. The rule checks if a string value matches its camelCase transformation using the '@adonisjs/core/helpers/string' package and reports an error if validation fails. Dependencies: '@adonisjs/core/legacy/validator' and '@adonisjs/core/helpers/string'. Key parameters: 'value' (field value), 'options' (validation context). Inputs: the value to validate; Outputs: reports a validation error if the string is not camelCase. Limitation: only processes string values.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/custom_rules.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/validator.ts\nimport string from '@adonisjs/core/helpers/string'\nimport { validator } from '@adonisjs/core/legacy/validator'\n\nvalidator.rule('camelCase', (value, _, options) => {\n  if (typeof value !== 'string') {\n    return\n  }\n\n  if (value !== string.camelCase(value)) {\n    options.errorReporter.report(\n      options.pointer,\n      'camelCase',\n      'camelCase validation failed',\n      options.arrayExpressionPointer\n    )\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Linting Code with ESLint\nDESCRIPTION: Run this command to lint the project's codebase using ESLint. It requires ESLint configuration in the project. The command checks and enforces coding standards by identifying and fixing code issues.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/contribution_guide.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm run lint\n```\n\n----------------------------------------\n\nTITLE: Installing @adonisjs/static via node ace (Shell Script)\nDESCRIPTION: Installs the @adonisjs/static package using the detected JavaScript package manager via the AdonisJS CLI. This command sets up the required dependencies and triggers additional setup such as provider and middleware registration. Requires a working AdonisJS project and CLI. Outputs the installed static package into the project.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/static_file_server.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/static\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Retries in AdonisJS\nDESCRIPTION: Command to execute tests with multiple retry attempts on failure.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nnode ace test --retries=2\n```\n\n----------------------------------------\n\nTITLE: Using CSP Nonce in Edge Templates\nDESCRIPTION: Edge template code showing how to implement nonce-based CSP for inline scripts and styles, which provides a secure way to allow specific inline resources.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_13\n\nLANGUAGE: edge\nCODE:\n```\n<script nonce=\"{{ cspNonce }}\">\n  // Inline JavaScript\n</script>\n<style nonce=\"{{ cspNonce }}\">\n  /* Inline CSS */\n</style>\n```\n\n----------------------------------------\n\nTITLE: Creating a Test File for the Greet Command\nDESCRIPTION: Creates a unit test file for the 'Greet' command using the Ace CLI.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:test commands/greet --suite=unit\n\n# DONE:    create tests/unit/commands/greet.spec.ts\n```\n\n----------------------------------------\n\nTITLE: Resolving Vite Assets\nDESCRIPTION: Using the asset helper to resolve URLs for assets processed by Vite. This simplifies referencing assets that might have hashed filenames in production.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/edge.md#2025-04-22_snippet_12\n\nLANGUAGE: edge\nCODE:\n```\n<img src=\"{{ asset('resources/images/hero.jpg') }}\" />\n```\n\n----------------------------------------\n\nTITLE: Testing Controller with Actual Service Implementation - AdonisJS TypeScript\nDESCRIPTION: Shows a sample test case for an HTTP endpoint that interacts with a controller using the actual service implementation. Performs a GET request and asserts the response body. Assumes routing and controller binding via AdonisJS conventions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/dependency_injection.md#2025-04-22_snippet_18\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport UserService from '#services/user_service'\n\ntest('get all users', async ({ client }) => {\n  const response = await client.get('/users')\n\n  response.assertBody({\n    data: [{ id: 1, username: 'virk' }]\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Basic Hash Configuration without Config Provider\nDESCRIPTION: Basic implementation of hash configuration without using config providers, showing direct driver instantiation.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/config_providers.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Scrypt } from '@adonisjs/core/hash/drivers/scrypt'\n\nexport default {\n  default: 'scrypt',\n  list: {\n    scrypt: () => new Scrypt({\n      cost: 16384,\n      blockSize: 8,\n      parallelization: 1,\n      maxMemory: 33554432,\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Config Access in Service Provider\nDESCRIPTION: Example of accessing configuration in a service provider class within an external package.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/configuration.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ApplicationService } from '@adonisjs/core/types'\n\nexport default class DriveServiceProvider {\n  constructor(protected app: ApplicationService) {}\n  \n  register() {\n    this.app.container.singleton('drive', () => {\n      const driveConfig = this.app.config.get('drive')\n      return new DriveManager(driveConfig)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Packages in package.json - JSON\nDESCRIPTION: Shows an excerpt from package.json for extending the AdonisJS package ESLint config preset, fit for library/package development in the AdonisJS ecosystem. The config prescribes rules suitable for published modules and requires installing @adonisjs/eslint-config.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eslintConfig\": {\n    \"extends\": \"@adonisjs/eslint-config/package\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling SSR in Inertia.js Configuration for AdonisJS\nDESCRIPTION: Configuration for enabling server-side rendering in the Inertia.js config file, including the path to the SSR entrypoint module.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/inertia'\n\nexport default defineConfig({\n  // ...\n  ssr: {\n    enabled: true,\n    entrypoint: 'inertia/app/ssr.ts'\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript for AdonisJS (JSON)\nDESCRIPTION: This snippet shows the minimal required TypeScript configuration in a tsconfig.json file for AdonisJS applications. It specifies compiler options essential for decorators, output directory, and module compatibility. Key options include enabling experimental decorators and esModuleInterop. The input should be a valid JSON object as part of your project's root directory, with no external dependencies beyond TypeScript itself.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/folder_structure.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\\n  \"compilerOptions\": {\\n    \"module\": \"NodeNext\",\\n    \"isolatedModules\": true,\\n    \"declaration\": false,\\n    \"outDir\": \"./build\",\\n    \"esModuleInterop\": true,\\n    \"experimentalDecorators\": true,\\n    \"emitDecoratorMetadata\": true,\\n    \"skipLibCheck\": true\\n  }\\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing All Command Arguments in AdonisJS\nDESCRIPTION: Example demonstrating how to access all arguments passed to the command using the this.parsed.args property, which provides access to the raw arguments array.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/args.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand, args, flags } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  static commandName = 'greet'\n  static description = 'Greet a user by name'\n  \n  @args.string()\n  declare name: string\n\n  run() {\n    console.log(this.parsed.args)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Lucid Debug and Pretty Print Options in AdonisJS (TypeScript)\nDESCRIPTION: This snippet shows how to enable the 'prettyPrintDebugQueries' and 'debug' options when configuring database connections in AdonisJS using Lucid ORM. It modifies the config/database.ts file to set 'prettyPrintDebugQueries: true' at the root and 'debug: true' inside the sqlite connection config. Dependencies include AdonisJS core, Lucid ORM, and the database provider; 'app.tmpPath' should resolve to a valid file path. Inputs include the overall database configuration, and outputs are improved query logs in the terminal. This setup is intended for development and may expose sensitive SQL in outputs if used in production.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/debugging.md#2025-04-22_snippet_6\n\nLANGUAGE: TypeScript\nCODE:\n```\n// title: config/database.ts\nconst dbConfig = defineConfig({\n  connection: 'sqlite',\n  // insert-start\n  prettyPrintDebugQueries: true,\n  // insert-end\n  connections: {\n    sqlite: {\n      client: 'better-sqlite3',\n      connection: {\n        filename: app.tmpPath('db.sqlite3'),\n      },\n      // insert-start\n      debug: true,\n      // insert-end\n      useNullAsDefault: true,\n      migrations: {\n        naturalSort: true,\n        paths: ['database/migrations'],\n      },\n    },\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Customizing Flag Name and Description in AdonisJS Ace Command\nDESCRIPTION: These snippets demonstrate how to customize the flag name and add a description for better clarity in the help screen.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/flags.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n@flags.boolean({\n  flagName: 'server'\n})\ndeclare startServer: boolean\n```\n\nLANGUAGE: typescript\nCODE:\n```\n@flags.boolean({\n  flagName: 'server',\n  description: 'Starts the application server'\n})\ndeclare startServer: boolean\n```\n\n----------------------------------------\n\nTITLE: Test Environment Configuration\nDESCRIPTION: Environment variable configuration for testing, specifying the required session driver setting.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_19\n\nLANGUAGE: dotenv\nCODE:\n```\nSESSION_DRIVER=memory\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Webpack Loaders\nDESCRIPTION: Demonstrates how to add custom webpack loaders using Encore's addLoader method. This example adds support for Handlebars templates using the CSON loader.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nEncore.addLoader({\n  test: /\\.handlebars$/,\n  loader: \"cson\",\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Specific Suites in AdonisJS (Suite Examples)\nDESCRIPTION: Examples of running tests for specific test suites like functional or unit tests using the Ace CLI.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\nnode ace test functional\nnode ace test unit\n```\n\n----------------------------------------\n\nTITLE: OpenAPI Assertions Setup\nDESCRIPTION: Configuration for setting up OpenAPI schema assertions in the bootstrap file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/http_tests.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport app from '@adonisjs/core/services/app'\nimport { openapi } from '@japa/openapi-assertions'\n\nexport const plugins: Config['plugins'] = [\n  assert(),\n  openapi({\n    schemas: [app.makePath('resources/open_api_schema.yaml')]\n  }),\n  apiClient(),\n  pluginAdonisJS(app)\n]\n```\n\n----------------------------------------\n\nTITLE: AddressValidator with Runtime State-dependent Enum (AdonisJS, TypeScript)\nDESCRIPTION: Defines an AddressValidator class that creates an AdonisJS schema with enum options for 'state' and 'city', where 'city' options are dynamically determined by the selectedState user input. This demonstrates issues with caching when runtime values affect schema: the first-request-computed enums are cached and reused, so subsequent requests may use outdated options. Depends on AdonisJS validation API, prepopulated STATES and CITIES variables, and access to request context.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/schema_caching.md#2025-04-22_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n/**\n * Assuming the following variables hold data\n */\nconst STATES = []\nconst CITIES = {}\n\nexport default class AddressValidator {\n  public selectedState = this.ctx.request.input('state') // 👈\n\n  public schema = schema.create({\n    state: schema.enum(STATES),\n    city: schema.enum(CITIES[this.selectedState] || [])\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Package.json Middleware Export Configuration\nDESCRIPTION: JSON configuration for exporting middleware using Node.js subpath exports.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"exports\": {\n    \"./log_requests_middleware\": \"./build/middleware/log_requests.js\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering an Edge Template Using router.on().render in AdonisJS\nDESCRIPTION: This snippet demonstrates an alternative way to render an Edge template without assigning a callback to the route.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/edgejs.md#2025-04-22_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\nrouter.on('/').render('welcome')\n```\n\n----------------------------------------\n\nTITLE: Applying Throttle Middleware to Routes\nDESCRIPTION: Applying the defined throttle middleware to a route to implement rate limiting on that endpoint.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/rate_limiting.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n// title: start/routes.ts\nimport router from '@adonisjs/core/services/router'\n// highlight-start\nimport { throttle } from '#start/limiter'\n// highlight-end\n\nrouter\n  .get('/', () => {})\n  // highlight-start\n  .use(throttle)\n  // highlight-end\n```\n\n----------------------------------------\n\nTITLE: Executing Ace Commands\nDESCRIPTION: Command to run AdonisJS ace commands in TypeScript.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode --import=ts-node-maintained/register/esm bin/console.ts\n```\n\n----------------------------------------\n\nTITLE: Configuring Exposed Headers in CORS\nDESCRIPTION: Example of specifying which headers to expose via the Access-Control-Expose-Headers header.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/cors.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\n{\n  exposeHeaders: [\n    'cache-control',\n    'content-language',\n    'content-type',\n    'expires',\n    'last-modified',\n    'pragma',\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding GitHub Link to AdonisJS Header Component\nDESCRIPTION: Example of customizing the GitHub link slot in the header component to display additional information like star count alongside the link.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('github')\n    <span> GitHub (11K+ Stars) </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Ally Package\nDESCRIPTION: Commands to install and configure the @adonisjs/ally package with specific providers.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace add @adonisjs/ally\n\n# Define providers as CLI flags\nnode ace add @adonisjs/ally --providers=github --providers=google\n```\n\n----------------------------------------\n\nTITLE: Viewing Command Help\nDESCRIPTION: Command to display help information for a specific Ace command using the --help flag\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:controller --help\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Ace Command in AdonisJS\nDESCRIPTION: Use the 'make:command' Ace command to create a new custom command file in the 'commands' directory.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/creating_commands.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:command greet\n```\n\n----------------------------------------\n\nTITLE: Running ESLint and Prettier using npm Scripts\nDESCRIPTION: Shows npm script commands commonly configured in AdonisJS projects to run ESLint for code linting and Prettier for code formatting. Includes commands to check for issues, automatically fix linting errors, and format the codebase.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\n# Run ESLint\nnpm run lint\n\n# Run ESLint and auto-fix issues\nnpm run lint -- --fix\n\n# Run prettier\nnpm run format\n```\n\n----------------------------------------\n\nTITLE: Installing VineJS in AdonisJS\nDESCRIPTION: Command to install and configure VineJS in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/validation.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode ace add vinejs\n```\n\n----------------------------------------\n\nTITLE: Initializing AdonisJS Project from Private Git Repository using Shell\nDESCRIPTION: Shows how to download a starter kit from a private Git repository using Git+SSH authentication. This requires specifying the repository path with the `-K` flag and setting the download mode to 'git' using `--mode=git`.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/getting_started/installation.md#2025-04-22_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest -- -K=\"user/repo\" --mode=git\n```\n\n----------------------------------------\n\nTITLE: Using Form Method Spoofing in HTML\nDESCRIPTION: This HTML snippet demonstrates how to employ form method spoofing by appending a '_method' query string to the action URL of a POST form, allowing methods like PUT and DELETE.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validating_server_rendered_forms.md#2025-04-22_snippet_6\n\nLANGUAGE: HTML\nCODE:\n```\n<form method=\"POST\" action=\"/articles/1?_method=PUT\">\n  <!-- Update form -->\n</form>\n```\n\nLANGUAGE: HTML\nCODE:\n```\n<form method=\"POST\" action=\"/articles/1?_method=DELETE\">\n  <!-- Delete form -->\n</form>\n```\n\n----------------------------------------\n\nTITLE: Using Custom loadModels Method in AdonisJS REPL\nDESCRIPTION: Example of using the custom loadModels method in the AdonisJS REPL session to import all models.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/repl.md#2025-04-22_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnode ace repl\n\n# Type \".ls\" to a view list of available context methods/properties\n> (js) await loadModels()\n```\n\n----------------------------------------\n\nTITLE: Handling E_MISSING_FLAG Exception in TypeScript\nDESCRIPTION: Example of importing and checking for missing flag exception. This exception is raised when executing a command without passing a required CLI flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_MISSING_FLAG) {\n  console.log(error.commandName)\n}\n```\n\n----------------------------------------\n\nTITLE: CSP Report Endpoint Implementation\nDESCRIPTION: TypeScript route handler for collecting CSP violation reports when using report-only mode, allowing developers to monitor policy violations before strict enforcement.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_12\n\nLANGUAGE: ts\nCODE:\n```\nrouter.post('/csp-report', async ({ request }) => {\n  const report = request.input('csp-report')\n})\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variable Validations with Codemods in AdonisJS\nDESCRIPTION: Using the codemods API to define validation rules for environment variables in the start/env.ts file with error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_13\n\nLANGUAGE: ts\nCODE:\n```\nconst codemods = await command.createCodemods()\n\ntry {\n  await codemods.defineEnvValidations({\n    leadingComment: 'App environment variables',\n    variables: {\n      PORT: 'Env.schema.number()',\n      HOST: 'Env.schema.string()',\n    }\n  })\n} catch (error) {\n  console.error('Unable to define env validations')\n  console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Printing Stickers in Ace Commands (TypeScript)\nDESCRIPTION: Demonstrates how to create and render stickers (content inside a box) in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseCommand } from '@adonisjs/core/ace'\n\nexport default class GreetCommand extends BaseCommand {\n  async run() {\n    const sticker = this.ui.sticker()\n\n    sticker\n      .add('Started HTTP server')\n      .add('')\n      .add(`Local address:   ${this.colors.cyan('http://localhost:3333')}`)\n      .add(`Network address: ${this.colors.cyan('http://192.168.1.2:3333')}`)\n      .render()\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generated CSRF Field in HTML\nDESCRIPTION: HTML output showing how the csrfField() helper generates a hidden input field with a CSRF token to protect against cross-site request forgery attacks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/security/securing_ssr_applications.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"POST\" action=\"/\">\n    // highlight-start\n    <input type=\"hidden\" name=\"_csrf\" value=\"Q9ghWSf0-3FD9eCiu5YxvKaxLEZ6F_K4DL8o\"/>\n    // highlight-end\n    <input type=\"name\" name=\"name\" placeholder=\"Enter your name\"/>\n    <button type=\"submit\">Submit</button>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Rendering Full-Width Tables in Ace Commands (TypeScript)\nDESCRIPTION: Shows how to render full-width tables and customize the fluid column in Ace commands.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/tui.md#2025-04-22_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntable.fullWidth().render()\n\ntable\n  .fullWidth()\n  .fluidColumnIndex(1)\n```\n\n----------------------------------------\n\nTITLE: Database Existence Validation in AdonisJS\nDESCRIPTION: Validates if a value exists in a specified database table column. Supports case insensitive queries and additional where constraints.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/validation_rules.md#2025-04-22_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules } from '@ioc:Adonis/Core/Validator'\n\n{\n  slug: schema.string({}, [\n    rules.exists({ table: 'categories', column: 'slug' })\n  ])\n}\n```\n\n----------------------------------------\n\nTITLE: Development Server without Assets\nDESCRIPTION: Command to run development server without Vite assets bundling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnode ace serve --watch --no-assets\n```\n\n----------------------------------------\n\nTITLE: Time String Parsing to Milliseconds in TypeScript\nDESCRIPTION: Demonstrates parsing time expressions into milliseconds and formatting milliseconds back to time strings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.milliseconds.parse('1 h') // 3.6e6\nstring.milliseconds.parse('1 day') // 8.64e7\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.milliseconds.parse(180) // 180\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.milliseconds.format(3.6e6) // 1h\nstring.milliseconds.format(3.6e6, true) // 1 hour\n```\n\n----------------------------------------\n\nTITLE: Development Server with Vite Arguments\nDESCRIPTION: Command to run development server with custom Vite arguments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnode ace serve --watch --assets-args=\"--debug --base=/public\"\n```\n\n----------------------------------------\n\nTITLE: Ejecting Controller Stub in AdonisJS using CLI\nDESCRIPTION: Command to eject the controller stub from @adonisjs/core package to customize scaffolding templates.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnode ace eject make/controller/main.stub\n```\n\n----------------------------------------\n\nTITLE: Event Assertion with Callback in TypeScript\nDESCRIPTION: Shows how to use callback functions for more specific event emission assertions.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/emitter.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nevents.assertEmitted(OrderUpdated, ({ data }) => {\n  return data.order.id === orderId\n})\n```\n\n----------------------------------------\n\nTITLE: Re-running Failed Tests in AdonisJS\nDESCRIPTION: Command to re-execute only the tests that failed in the previous test run.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnode ace test --failed\n```\n\n----------------------------------------\n\nTITLE: Listing Available Ace Commands\nDESCRIPTION: Commands to view the list of available Ace commands, either by running without arguments or using the list command explicitly\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnode ace\n\n# Same as above\nnode ace list\n```\n\n----------------------------------------\n\nTITLE: Complete VSCode Debug Configuration with Attach Mode\nDESCRIPTION: Full VSCode debug configuration including attach mode for debugging any Ace command with inspect flag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/debugging.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"attach\",\n      \"name\": \"Attach Program\",\n      \"port\": 9229,\n      \"autoAttachChildProcesses\": true,\n      \"skipFiles\": [\"<node_internals>/**\"]\n    },\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Dev server\",\n      \"program\": \"${workspaceFolder}/ace.js\",\n      \"args\": [\"serve\", \"--hmr\"],\n      \"skipFiles\": [\"<node_internals>/**\"]\n    },\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Tests\",\n      \"program\": \"${workspaceFolder}/ace.js\",\n      \"args\": [\"test\", \"--watch\"],\n      \"skipFiles\": [\"<node_internals>/**\"]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint for Applications in package.json - JSON\nDESCRIPTION: Demonstrates how to extend the AdonisJS application ESLint config preset within your package.json. This preset is tailored for AdonisJS app development and helps enforce linting rules compatible with the broader ecosystem. Requires @adonisjs/eslint-config to be installed and assumes this snippet goes into package.json.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"eslintConfig\": {\n    \"extends\": \"@adonisjs/eslint-config/app\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Asserting Command Success\nDESCRIPTION: Shows how to assert that a command executed successfully with exit code 0.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nawait command.exec()\ncommand.assertSucceeded()\n```\n\n----------------------------------------\n\nTITLE: Handling E_SESSION_NOT_READY Exception in AdonisJS Session (TypeScript)\nDESCRIPTION: This code demonstrates how to check for an E_SESSION_NOT_READY exception from the @adonisjs/session package. This exception is raised when the session store has not been initiated, typically when the session middleware is not in use.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors as sessionErrors } from '@adonisjs/session'\nif (error instanceof sessionErrors.E_SESSION_NOT_READY) {\n  console.log(error.message)\n}\n```\n\n----------------------------------------\n\nTITLE: TypeScript Import Types for Frontend\nDESCRIPTION: Demonstrates correct way to import types from backend to frontend to avoid compilation issues.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// ✅ Correct\nimport type { User } from '#models/user'\n\n// ❌ Incorrect\nimport { User } from '#models/user'\n```\n\n----------------------------------------\n\nTITLE: Manual Lock Implementation\nDESCRIPTION: Example of manually implementing locks in an OrderController using try-finally pattern.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/locks.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/lock'\nimport locks from '@adonisjs/lock/services/main'\nimport { HttpContext } from '@adonisjs/core/http'\n\nexport default class OrderController {\n  async process({ response, request }: HttpContext) {\n    const orderId = request.input('order_id')\n\n    /**\n     * Try to acquire the lock immediately ( without retrying )\n     */\n    const lock = locks.createLock(`order.processing.${orderId}`)\n    const acquired = await lock.acquireImmediately()\n    if (!acquired) {\n      return 'Order is already being processed'\n    }\n\n    /**\n     * Lock has been acquired. We can process the order\n     */\n    try {\n      await processOrder()\n      return 'Order processed successfully'\n    } finally {\n      /**\n       * Always release the lock using the `finally` block, so that\n       * we are sure that the lock is released even when an exception\n       * is thrown during the processing.\n       */\n      await lock.release()\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Test for Greet Command\nDESCRIPTION: Writes a basic test that creates an instance of the Greet command and asserts that it exits successfully.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/console_tests.md#2025-04-22_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\nimport { test } from '@japa/runner'\nimport Greet from '#commands/greet'\nimport ace from '@adonisjs/core/services/ace'\n\ntest.group('Commands greet', () => {\n  test('should greet the user and finish with exit code 1', async () => {\n    /**\n     * Create an instance of the Greet command class\n     */\n    const command = await ace.create(Greet, [])\n\n    /**\n     * Execute command\n     */\n    await command.exec()\n\n    /**\n     * Assert command exited with status code 0\n     */\n    command.assertSucceeded()\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in AdonisJS Middleware\nDESCRIPTION: This snippet illustrates how to interact with file downloads in AdonisJS middleware. It checks if there's a file to stream and logs information about the file, such as its path and whether it generates an ETag.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nimport { NextFn } from '@adonisjs/core/types/http'\n\nexport default class {\n  async handle({ response }: HttpContext, next: NextFn) {\n    await next()\n    \n    if (response.hasFileToStream) {\n      console.log(response.fileToStream.generateEtag)\n      console.log(response.fileToStream.path)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Prettier in package.json - JSONC\nDESCRIPTION: Adds a configuration entry to package.json to specify using the AdonisJS Prettier preset. This ensures Prettier uses consistent formatting rules as defined by the preset. Requires @adonisjs/prettier-config be installed.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/tooling_config.md#2025-04-22_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"prettier\": \"@adonisjs/prettier-config\"\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Environment Variable Definition in AdonisJS\nDESCRIPTION: Using the omitFromExample option with defineEnvVariables to exclude values from the .env.example file while including them in the .env file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_16\n\nLANGUAGE: ts\nCODE:\n```\nconst codemods = await command.createCodemods()\n\nawait codemods.defineEnvVariables({\n  MY_NEW_VARIABLE: 'SOME_VALUE',\n}, {\n  omitFromExample: ['MY_NEW_VARIABLE']\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning a Repository with Git\nDESCRIPTION: This shell command demonstrates how to clone a repository using Git. It requires the URL of the repository you want to clone. The command will create a local copy of the repository on your machine.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/contribution_guide.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ngit clone <REPO_URL>\n```\n\n----------------------------------------\n\nTITLE: Website Configuration JSON\nDESCRIPTION: Basic configuration structure for the documentation website including navigation links, GitHub edit URLs, and copyright information.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"home\": {\n      \"title\": \"Your project name\",\n      \"href\": \"/\"\n    },\n    \"github\": {\n      \"title\": \"Your project on GitHub\",\n      \"href\": \"https://github.com/dimerapp\"\n    }\n  },\n  \"fileEditBaseUrl\": \"https://github.com/dimerapp/docs-boilerplate/blob/develop\",\n  \"copyright\": \"Your project legal name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Installing AdonisJS Cache Package\nDESCRIPTION: Command to install and configure the @adonisjs/cache package in an AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/cache.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode ace add @adonisjs/cache\n```\n\n----------------------------------------\n\nTITLE: Collection Configuration TypeScript\nDESCRIPTION: TypeScript code showing how to configure multiple documentation collections with their respective database files and URL prefixes.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Docs\nconst docs = new Collection()\n  .db(new URL('../content/docs/db.json', import.meta.url))\n  .useRenderer(renderer)\n  .urlPrefix('/docs')\n\nawait docs.boot()\n\n// API reference\nconst apiReference = new Collection()\n  .db(new URL('../content/api_reference/db.json', import.meta.url))\n  .useRenderer(renderer)\n  .urlPrefix('/api')\n\nawait apiReference.boot()\n\nexport const collections = [docs, apiReference]\n```\n\n----------------------------------------\n\nTITLE: Enabling Vue Loader in Webpack Configuration\nDESCRIPTION: Configures Encore to enable Vue support with version 3 specified. This is the first step in setting up Vue in your AdonisJS application.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nEncore.enableVueLoader(() => {}, {\n  version: 3,\n});\n```\n\n----------------------------------------\n\nTITLE: Dynamic SSR Page Selection for Inertia.js in AdonisJS\nDESCRIPTION: Using a function to dynamically determine which pages should be server-side rendered based on page name or other criteria.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { defineConfig } from '@adonisjs/inertia'\n\nexport default defineConfig({\n  ssr: {\n    enabled: true,\n    pages: (ctx, page) => !page.startsWith('admin')\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling E_INVALID_FLAG Exception in AdonisJS CLI (TypeScript)\nDESCRIPTION: This snippet demonstrates how to check if an error is an instance of E_INVALID_FLAG exception from AdonisJS core. It also shows how to access the commandName property of the error.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_INVALID_FLAG) {\n  console.log(error.commandName)\n}\n```\n\n----------------------------------------\n\nTITLE: Dumper Configuration Settings\nDESCRIPTION: Configuration options for the dd helper including console and HTML output settings.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/debugging.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const dumper = dumperConfig({\n  console: {\n    depth: 10,\n    collapse: ['DateTime', 'Date'],\n    inspectStaticMembers: true,\n  },\n  html: {\n    depth: 10,\n    inspectStaticMembers: true,\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Preload File in AdonisJS\nDESCRIPTION: This command generates a new preload file in the start directory. Preload files can be configured for specific environments.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_24\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:preload view\n```\n\nLANGUAGE: sh\nCODE:\n```\nnode ace make:preload view app -e=web -e=console\n```\n\n----------------------------------------\n\nTITLE: Configuring Query String Serialization in AdonisJS\nDESCRIPTION: Shows how to configure the query string serialization settings in the app configuration file.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/routing.md#2025-04-22_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\n// title: config/app.js\nhttp: defineConfig({\n  qs: {\n    stringify: {\n      // \n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Access Tokens Database Table Migration in TypeScript\nDESCRIPTION: This snippet shows the migration file for creating the auth_access_tokens table. It includes the table schema with columns for token information, user references, and timestamps.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/access_tokens_guard.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { BaseSchema } from '@adonisjs/lucid/schema'\n\nexport default class extends BaseSchema {\n  protected tableName = 'auth_access_tokens'\n\n  async up() {\n    this.schema.createTable(this.tableName, (table) => {\n      table.increments('id')\n      table\n        .integer('tokenable_id')\n        .notNullable()\n        .unsigned()\n        .references('id')\n        .inTable('users')\n        .onDelete('CASCADE')\n\n      table.string('type').notNullable()\n      table.string('name').nullable()\n      table.string('hash').notNullable()\n      table.text('abilities').notNullable()\n      table.timestamp('created_at')\n      table.timestamp('updated_at')\n      table.timestamp('last_used_at').nullable()\n      table.timestamp('expires_at').nullable()\n    })\n  }\n\n  async down() {\n    this.schema.dropTable(this.tableName)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Encoding Non-ASCII Symbols in TypeScript with AdonisJS\nDESCRIPTION: Shows how to use the encodeSymbols helper to encode non-ASCII symbols in a string using the he.encode method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.encodeSymbols('foo © bar ≠ baz 𝌆 qux')\n// 'foo &#xA9; bar &#x2260; baz &#x1D306; qux'\n```\n\n----------------------------------------\n\nTITLE: Force Exiting Tests After Completion\nDESCRIPTION: Command to force exit the Node.js process after tests complete instead of waiting for a graceful shutdown.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/introduction.md#2025-04-22_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnode ace test --force-exit\n```\n\n----------------------------------------\n\nTITLE: Customizing Popup Menu in AdonisJS Header Component\nDESCRIPTION: Example of customizing the popup menu trigger slot in the header component. This slot is only visible in mobile view and allows defining custom markup for the menu trigger.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('popMenu')\n    <span> Open popup menu </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Importing Pino Statics in AdonisJS\nDESCRIPTION: Demonstrates how to import and use Pino static methods and properties in AdonisJS, which can be useful for advanced logging configurations.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/digging_deeper/logger.md#2025-04-22_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { \n  multistream,\n  destination,\n  transport,\n  stdSerializers,\n  stdTimeFunctions,\n  symbols,\n  pinoVersion\n} from '@adonisjs/core/logger'\n```\n\n----------------------------------------\n\nTITLE: Japa Plugin Registration Output Example in AdonisJS\nDESCRIPTION: The resulting bootstrap.ts file after applying the registerJapaPlugin codemod, showing the imported plugins and their registration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/scaffolding.md#2025-04-22_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\n// title: Output\nimport app from '@adonisjs/core/services/app'\nimport { sessionApiClient } from '@adonisjs/session/plugins/api_client'\n\nexport const plugins: Config['plugins'] = [\n  sessionApiClient(app)\n]\n```\n\n----------------------------------------\n\nTITLE: Running Generic TypeScript Files\nDESCRIPTION: Command to execute any TypeScript file using ts-node-maintained hook.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnode --import=ts-node-maintained/register/esm path/to/file.ts\n```\n\n----------------------------------------\n\nTITLE: Service Provider Implementation\nDESCRIPTION: Implementation of a service provider that binds the LogRequests middleware to the container with its dependencies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { LogRequests } from '../middleware/log_requests.js'\nimport type { ApplicationService } from '@adonisjs/core/types'\n\nexport default class MyPackageProvider {\n  constructor(protected app: ApplicationService) {}\n\n  register() {\n    this.app.container.bind(LogRequests, () => {\n      const config = this.app.config.get<any>('log_requests', {})\n      return new LogRequests(config, this.app)\n    })\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sentences from Arrays in TypeScript\nDESCRIPTION: Shows how to convert arrays into grammatically correct sentences with various separator options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/helpers.md#2025-04-22_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport string from '@adonisjs/core/helpers/string'\n\nstring.sentence(['routes', 'controllers', 'middleware'])\n// routes, controllers, and middleware\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.sentence(['routes', 'controllers', 'middleware'], {\n  lastSeparator: ', or ',\n})\n```\n\nLANGUAGE: typescript\nCODE:\n```\nstring.sentence(['routes', 'controllers'], {\n  pairSeparator: ', and ',\n})\n// routes, and controllers\n```\n\n----------------------------------------\n\nTITLE: Testing Inertia Component Assertion in TypeScript\nDESCRIPTION: Demonstrates how to assert the correct Inertia component is returned by the server using the assertInertiaComponent() method.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/views-and-templates/inertia.md#2025-04-22_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\ntest('returns correct data', async ({ client }) => {\n  const response = await client.get('/home').withInertia()\n\n  response.assertInertiaComponent('home/main')\n})\n```\n\n----------------------------------------\n\nTITLE: Incorrect: Accessing HTTP Context at Module Top-Level\nDESCRIPTION: This TypeScript snippet shows an incorrect way to use `HttpContext.getOrFail()`. Accessing the context at the top level of a module (`const ctx = HttpContext.getOrFail();`) is problematic because Node.js caches modules. The `ctx` variable will hold a reference to the HTTP context of the *first* request that caused this module to be loaded, not the context of subsequent requests, leading to incorrect behavior and potential memory leaks.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/async_local_storage.md#2025-04-22_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/core/http'\nconst ctx = HttpContext.getOrFail()\n\nexport default class UsersController {\n  async index() {\n    ctx.request\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running TypeScript Tests\nDESCRIPTION: Command to execute test files using ts-node-maintained hook.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/concepts/typescript_build_process.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnode --import=ts-node-maintained/register/esm bin/test.ts\n```\n\n----------------------------------------\n\nTITLE: Handling E_MISSING_ARG_VALUE Exception in TypeScript\nDESCRIPTION: Example of importing and checking for missing argument value exception. This exception is raised when executing a command without defining a value for a required argument.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/exceptions.md#2025-04-22_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { errors } from '@adonisjs/core'\nif (error instanceof errors.E_MISSING_ARG_VALUE) {\n  console.log(error.commandName)\n}\n```\n\n----------------------------------------\n\nTITLE: Standalone Validation Using AdonisJS Validator\nDESCRIPTION: This snippet illustrates the standalone use of the AdonisJS validator outside an HTTP request context. It manually provides data to the `validate` method. Dependencies include the validator module. The schema defines fields and their rules, while the data object holds the values to be validated. The output is either validated data or an error object containing validation messages. Suitable for scenarios where request context is unavailable.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/forms_and_validation/validation.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { schema, rules, validate } from '@adonisjs/core/validator'\n\nconst registerUserSchema = schema.create({\n  // ... fields and rules\n})\n\ntry {\n  await validate({\n    schema,\n    data: {\n      email: 'virk@adonisjs.com',\n      password: 'secret'\n    }\n  })\n} catch (error) {\n  console.log(error.messages)\n}\n```\n\n----------------------------------------\n\nTITLE: PostCSS Configuration\nDESCRIPTION: Basic PostCSS configuration setup\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nmodule.exports = {\n  plugins: {},\n};\n```\n\n----------------------------------------\n\nTITLE: Using Manually Instantiated Validator Class Standalone (TypeScript)\nDESCRIPTION: Demonstrates using a manually instantiated Validator class (`CreateUserValidator`) with the standalone `validator.validate` method outside of an HTTP request context. This allows passing custom constructor arguments (like fetched countries/states) to the validator instance before validation. Requires manual error handling.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/validator/introduction.md#2025-04-22_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n```ts\nimport { validator } from '@adonisjs/core/legacy/validator'\nimport CreateUser from 'App/Validators/CreateUserValidator'\n\nawait validator.validate(\n  new CreateUser({\n    countries: fetchAllowedCountries(),\n    states: fetchAllowedStates()\n  })\n)\n```\n```\n\n----------------------------------------\n\nTITLE: Using Global Transactions for Test Isolation in AdonisJS\nDESCRIPTION: This code snippet shows how to set up global transactions for each test in a test group. This wraps each test in a transaction that rolls back after the test completes, keeping the database clean between tests.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/testing/database.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// title: tests/unit/user.spec.ts\nimport { test } from '@japa/runner'\nimport testUtils from '@adonisjs/core/services/test_utils'\n\ntest.group('User', (group) => {\n  group.each.setup(() => testUtils.db().withGlobalTransaction())\n})\n```\n\n----------------------------------------\n\nTITLE: LinkedIn OAuth Configuration (Deprecated) in TypeScript\nDESCRIPTION: Details deprecated LinkedIn OAuth config in config/ally.ts using services.linkedin. Consists of clientId, clientSecret, and callbackUrl. Specify scopes for email and profile access. Deprecated due to updated LinkedIn OAuth policies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/authentication/social_authentication.md#2025-04-22_snippet_14\n\nLANGUAGE: TypeScript\nCODE:\n```\n{\n  linkedin: services.linkedin({\n    clientId: '',\n    clientSecret: '',\n    callbackUrl: '',\n\n    // LinkedIn specific\n    scopes: ['r_emailaddress', 'r_liteprofile'],\n  })\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Webpack Plugins\nDESCRIPTION: Shows how to extend webpack configuration with custom plugins using Encore's addPlugin method. The example adds the npm-install-webpack-plugin, which automatically installs missing dependencies.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/http/assets_bundling_encore.md#2025-04-22_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst NpmInstallPlugin = require(\"npm-install-webpack-plugin\");\nEncore.addPlugin(new NpmInstallPlugin());\n```\n\n----------------------------------------\n\nTITLE: Including Release Notes Template in Markdown\nDESCRIPTION: This code snippet uses a custom include directive to embed the AdonisJS release notes content from a template file. The template is located at 'partials/releases' and is included in the current document.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/preface/releases.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n::include{template=\"partials/releases\"}\n```\n\n----------------------------------------\n\nTITLE: Creating Server Instance for AdonisJS Middleware Testing in Packages\nDESCRIPTION: This code shows how to create a server instance for testing AdonisJS middleware in packages without booting an entire application, using the ServerFactory.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/basics/middleware.md#2025-04-22_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ServerFactory } from '@adonisjs/core/factories/http'\n\nconst server = new ServerFactory().create()\nconst pipeline = server.pipeline([\n  UserLocationMiddleware\n])\n```\n\n----------------------------------------\n\nTITLE: Inspecting AdonisRC File in AdonisJS\nDESCRIPTION: This command displays the contents of the adonisrc.ts file after merging the defaults. It's useful for inspecting available configuration options.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/references/commands.md#2025-04-22_snippet_28\n\nLANGUAGE: sh\nCODE:\n```\nnode ace inspect:rcfile\n```\n\n----------------------------------------\n\nTITLE: Defining Command Aliases Configuration\nDESCRIPTION: TypeScript configuration in adonisrc.ts for creating command aliases to simplify commonly used commands\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/ace/introduction.md#2025-04-22_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n{\n  commandsAliases: {\n    resource: 'make:controller --resource --singular'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New AdonisJS Package with NPM\nDESCRIPTION: Command to initialize a new AdonisJS package using the package starter kit.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/fundamentals/package_development.md#2025-04-22_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm init adonisjs@latest my-package -- -K \"adonisjs/pkg-starter-kit\"\n```\n\n----------------------------------------\n\nTITLE: Empty Package Configuration - JSON\nDESCRIPTION: Empty JSON configuration placeholder for package exploration.\nSOURCE: https://github.com/adonisjs/v6-docs/blob/main/content/docs/old/tutorial/creating-new-application.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"\"\n}\n```"
  }
]