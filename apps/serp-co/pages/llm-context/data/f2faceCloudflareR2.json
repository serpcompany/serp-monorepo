[
  {
    "owner": "f2face",
    "repo": "cloudflare-r2",
    "content": "TITLE: Initializing R2 and Bucket Instance in JavaScript\nDESCRIPTION: This JavaScript code snippet initializes the R2 client and creates a bucket instance. It requires the 'node-cloudflare-r2' package. The accountId, accessKeyId, and secretAccessKey are needed for authentication. The bucket name is also needed.  The bucket's public URL can optionally be provided.\nSOURCE: https://github.com/f2face/cloudflare-r2/blob/main/README.md#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { R2 } from 'node-cloudflare-r2';\n\n// Initialize R2\nconst r2 = new R2({\n    accountId: '<YOUR_ACCOUNT_ID>',\n    accessKeyId: '<YOUR_R2_ACCESS_KEY_ID>',\n    secretAccessKey: '<YOUR_R2_SECRET_ACCESS_KEY>',\n});\n\n// Initialize bucket instance\nconst bucket = r2.bucket('<BUCKET_NAME>');\n\n// [Optional] Provide the public URL(s) of your bucket, if its public access is allowed.\nbucket.provideBucketPublicUrl('https://pub-xxxxxxxxxxxxxxxxxxxxxxxxx.r2.dev');\n\n// Check if the bucket exists\nconsole.log(await bucket.exists()); // true\n```\n\n----------------------------------------\n\nTITLE: Uploading a Local File to R2 Bucket\nDESCRIPTION: This JavaScript code snippet uploads a local file to the specified R2 bucket. It uses the `uploadFile` method of the bucket instance. The first argument is the path to the local file, and the second argument is the destination file name in the bucket. The method returns an object containing information about the uploaded file, such as the object key, URI, public URL, ETag, and version ID.\nSOURCE: https://github.com/f2face/cloudflare-r2/blob/main/README.md#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst upload = await bucket.uploadFile('/path/to/file', 'destination_file_name.ext');\nconsole.log(upload);\n/*\n{\n    objectKey: 'destination_file_name.ext',\n    uri: 'destination_file_name.ext',\n    publicUrl: 'https://pub-xxxxxxxxxxxxxxxxxxxxxxxxx.r2.dev/destination_file_name.ext',\n    publicUrls: ['https://pub-xxxxxxxxxxxxxxxxxxxxxxxxx.r2.dev/destination_file_name.ext'],\n    etag: '',\n    versionId: '',\n    }\n*/\n```\n\n----------------------------------------\n\nTITLE: Generating Signed URL for R2 Object\nDESCRIPTION: This JavaScript code snippet generates a signed URL for an object in the R2 bucket. It uses the `getObjectSignedUrl` method of the bucket instance.  It requires the object key and an expiration time in seconds. The method returns a signed URL that can be used to access the object without requiring authentication, but only for the specified duration.\nSOURCE: https://github.com/f2face/cloudflare-r2/blob/main/README.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// Generate signed link that expires after 3600 seconds.\nconst signedUrl = await bucket.getObjectSignedUrl('destination_file_name.ext', 3600);\nconsole.log(signedUrl);\n/*\nhttps://bucket-name.cloudflare-account-id.r2.cloudflarestorage.com/destination_file_name.ext?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Content-Sha256=UNSIGNED-PAYLOAD&X-Amz-Credential=...&X-Amz-Date=...&X-Amz-Expires=60&X-Amz-Signature=...&X-Amz-SignedHeaders=host&x-id=GetObject\n*/\n```\n\n----------------------------------------\n\nTITLE: Uploading String Content to R2 Bucket\nDESCRIPTION: This JavaScript code snippet uploads a string to the R2 bucket. It uses the `upload` method of the bucket instance. The first argument is the string content to upload, and the second argument is the desired object key in the bucket.\nSOURCE: https://github.com/f2face/cloudflare-r2/blob/main/README.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// Upload text content\nconst content = 'Lorem ipsum';\nconst uploadContent = await bucket.upload(content, 'lorem-ipsum.txt');\n```\n\n----------------------------------------\n\nTITLE: Uploading Stream to R2 Bucket\nDESCRIPTION: This JavaScript code snippet uploads a stream to the R2 bucket using `fs.createReadStream`. It requires the 'fs' module. The `upload` method is used to upload the stream data to the specified object key.\nSOURCE: https://github.com/f2face/cloudflare-r2/blob/main/README.md#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nimport { createReadStream } from 'fs';\n\n// Upload from fs.createReadStream()\nconst stream = createReadStream('/path/to/file');\nconst uploadStream = await bucket.upload(stream, 'destination_file_name2.ext');\n```\n\n----------------------------------------\n\nTITLE: Uploading Stream (Advanced) to R2 Bucket\nDESCRIPTION: This JavaScript code snippet demonstrates uploading a stream to R2, specifically piping the output of a live stream processing tool (`streamlink`) directly to the bucket using `uploadStream`. This example requires `child_process` module. Uses multipart upload internally.\nSOURCE: https://github.com/f2face/cloudflare-r2/blob/main/README.md#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// Let's say, you want to record a live stream and pipe it directly to your bucket.\nimport { spawn } from 'child_process';\n\nconst streamlink = spawn('streamlink', ['--stdout', '<LIVE_STREAM_HLS_URL>', 'best']);\nconst uploadLiveStreamVideo = await bucket.uploadStream(streamlink.stdout, 'my_live_stream.ts');\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare R2 Package with npm\nDESCRIPTION: This command installs the node-cloudflare-r2 package using npm. It's recommended to specify a version number to avoid breaking changes in future releases. Dependencies are managed by npm.\nSOURCE: https://github.com/f2face/cloudflare-r2/blob/main/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install node-cloudflare-r2\n```\n\n----------------------------------------\n\nTITLE: Installing Cloudflare R2 Package with pnpm\nDESCRIPTION: This command installs the node-cloudflare-r2 package using pnpm. It is highly recommended to use a specific version number in your installation to anticipate any breaking changes. Dependencies are managed by pnpm.\nSOURCE: https://github.com/f2face/cloudflare-r2/blob/main/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install node-cloudflare-r2\n```"
  }
]