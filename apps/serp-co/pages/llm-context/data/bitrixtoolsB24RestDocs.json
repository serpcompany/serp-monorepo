[
  {
    "owner": "bitrix-tools",
    "repo": "b24-rest-docs",
    "content": "TITLE: Updating a File Field in Bitrix24 CRM (JSON)\nDESCRIPTION: Example of how to update a non-multiple file field in a Bitrix24 CRM item. This replaces the existing file with a new one.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-update.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"fields\": {\n        \"ufCrm1617027453943\": [\n            \"myfile.pdf\",\n            \"...base64_encoded_file_content...\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Batch Requests in JavaScript\nDESCRIPTION: Example of chaining batch requests to perform multiple actions in sequence. This example searches for a user and then creates a lead assigned to that user.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/how-to-call-rest-api/batch.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'batch',\n    {\n        'halt': 1,\n        'cmd': {\n            'user_by_name': 'user.search?NAME=Test2',\n            'user_lead': 'crm.lead.add?fields[TITLE]=Test Assigned&fields[ASSIGNED_BY_ID]=$result[user_by_name][0][ID]'\n        }\n    },\n    function(result)\n    {\n        console.log(result.answer);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Lead with PHP and CRest\nDESCRIPTION: Illustrates creating a new CRM lead using PHP with CRest library, including lead details and social network event registration.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-add.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.lead.add',\n    [\n        'fields' => [\n            'TITLE' => 'ИП Титов',\n            'NAME' => 'Глеб',\n            'SECOND_NAME' => 'Егорович',\n            'LAST_NAME' => 'Титов',\n            'STATUS_ID' => 'NEW',\n            'OPENED' => 'Y',\n            'ASSIGNED_BY_ID' => 1,\n            'CURRENCY_ID' => 'USD',\n            'OPPORTUNITY' => 12500,\n            'PHONE' => [\n                [\n                    'VALUE' => '555888',\n                    'VALUE_TYPE' => 'WORK',\n                ],\n            ],\n            'WEB' => [\n                [\n                    'VALUE' => 'www.mysite.com',\n                    'VALUE_TYPE' => 'WORK',\n                ],\n            ],\n        ],\n        'params' => [\n            'REGISTER_SONET_EVENT' => 'Y',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating a Lead using JavaScript\nDESCRIPTION: This code snippet demonstrates how to update a CRM lead using the `BX24.callMethod` function in JavaScript within the Bitrix24 environment. It calls the `crm.lead.update` method with the lead ID, updated fields, and options. The example also includes error handling and data logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-update.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"crm.lead.update\",\n        {\n            id: 1608,\n            fields:\n            {\n                TITLE: \"ИП Титов\",\n                NAME: \"Глеб\",\n                SECOND_NAME: \"Егорович\",\n                LAST_NAME: \"Титов\",\n                STATUS_ID: \"NEW\",\n                OPENED: \"Y\",\n                ASSIGNED_BY_ID: 1,\n                CURRENCY_ID: \"USD\",\n                OPPORTUNITY: 12500,\n                PHONE: [\n                    {\n                        VALUE: \"555888\",\n                        VALUE_TYPE: \"WORK\",\n                    },\n                ],\n                WEB: [\n                    {\n                        VALUE: \"www.mysite.com\",\n                        VALUE_TYPE: \"WORK\",\n                    }\n                ],\n            },\n            options: {\n                REGISTER_SONET_EVENT: \"Y\",\n            }\n        },\n        (result) => {\n            if (result.error())\n            {\n                console.error(result.error());return;\n            }\n    \n            console.info(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Adding a Product using JavaScript in Bitrix24 REST API\nDESCRIPTION: This snippet shows how to use the BX24.callMethod function to add a new product to the Bitrix24 catalog. It includes various product fields such as name, active status, barcode, dates, pictures, dimensions, and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/catalog-product-add.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.add',\n    {\n        fields: {\n            iblockId: 23,\n            name: 'Товар',\n            active: 'Y',\n            barcodeMulti: 'Y',\n            canBuyZero: 'Y',\n            code: 'Tovar',\n            createdBy: 1,\n            dateActiveFrom: '2024-05-28T10:00:00',\n            dateActiveTo: '2024-05-29T10:00:00',\n            dateCreate: '2024-05-27T10:00:00',\n            detailPicture: {\n                'fileData': [\n                    'detailPicture.png',\n                    'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC'\n                ]\n            },\n            detailText: '',\n            detailTextType: 'text',\n            height: 100,\n            iblockSectionId: 47,\n            length: 100,\n            measure: 5,\n            modifiedBy: 1,\n            previewPicture: {\n                'fileData': [\n                    'previewPicture.png',\n                    'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC'\n                ]\n            },\n            previewText: '',\n            previewTextType: 'text',\n            purchasingCurrency: 'RUB',\n            purchasingPrice: 1000,\n            quantity: 10,\n            quantityReserved: 1,\n            quantityTrace: 'Y',\n            recurSchemeLength: 1,\n            recurSchemeType: 'D',\n            sort: 100,\n            subscribe: 'Y',\n            trialPriceId: 175,\n            vatId: 1,\n            vatIncluded: 'Y',\n            weight: 100,\n            width: 100,\n            withoutOrder: 'Y',\n            xmlId: '',\n            property258: 'test',\n            property259: [\n                'test1',\n                'test2'\n            ],\n        },\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating User Field in Bitrix24 with JavaScript\nDESCRIPTION: This JavaScript snippet uses Bitrix24 API to create a user-defined field of type list. It calls the CRM method with field parameters and handles the result, logging errors or success data accordingly.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBX.rest.callMethod(\n    'crm.contact.userfield.add',\n    {\n        fields: {\n            LABEL: \"Пользовательское поле (список)\",\n            USER_TYPE_ID: \"enumeration\",\n            FIELD_NAME: \"ENUMERATION_EXAMPLE\",\n            MULTIPLE: \"N\",\n            MANDATORY: \"N\",\n            SHOW_FILTER: \"Y\",\n            LIST: [\n                {\n                    VALUE: \"Элемент списка #1\",\n                    DEF: \"Y\",\n                    XML_ID: \"XML_ID_1\",\n                    SORT: 100,\n                },\n                {\n                    VALUE: \"Элемент списка #2\",\n                    XML_ID: \"XML_ID_2\",\n                    SORT: 200,\n                },\n                {\n                    VALUE: \"Элемент списка #3\",\n                    XML_ID: \"XML_ID_3\",\n                    SORT: 300,\n                },\n                {\n                    VALUE: \"Элемент списка #4\",\n                    XML_ID: \"XML_ID_4\",\n                    SORT: 400,\n                },\n            ],\n            SETTINGS: {\n                DISPLAY: \"UI\",\n                LIST_HEIGHT: 2,\n            },\n            SORT: 2000,\n        },\n    },\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Lead with cURL (Webhook)\nDESCRIPTION: Demonstrates creating a new CRM lead using cURL via Webhook authentication, with a sample lead containing personal and contact information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"TITLE\":\"ИП Титов\",\"NAME\":\"Глеб\",\"SECOND_NAME\":\"Егорович\",\"LAST_NAME\":\"Титов\",\"STATUS_ID\":\"NEW\",\"OPENED\":\"Y\",\"ASSIGNED_BY_ID\":1,\"CURRENCY_ID\":\"USD\",\"OPPORTUNITY\":12500,\"PHONE\":[{\"VALUE\":\"555888\",\"VALUE_TYPE\":\"WORK\"}],\"WEB\":[{\"VALUE\":\"www.mysite.com\",\"VALUE_TYPE\":\"WORK\"}]},\"params\":{\"REGISTER_SONET_EVENT\":\"Y\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.lead.add\n```\n\n----------------------------------------\n\nTITLE: Updating Product Catalog Entry - JavaScript\nDESCRIPTION: JavaScript example of updating a product catalog entry using Bitrix24 REST API call. Demonstrates setting various product properties including name, dimensions, prices, images and custom fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/catalog-product-update.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.update',\n    {\n        id: 1267,\n        fields: {\n            name: 'Товар',\n            active: 'Y',\n            barcodeMulti: 'Y',\n            canBuyZero: 'Y',\n            code: 'Tovar',\n            createdBy: 1,\n            dateActiveFrom: '2024-05-28T10:00:00',\n            dateActiveTo: '2024-05-29T10:00:00',\n            dateCreate: '2024-05-27T10:00:00',\n            detailPicture: {\n                'fileData': [\n                    'detailPicture.png',\n                    'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCC'\n                ]\n            },\n            // ... additional fields omitted for brevity\n        }\n    },\n    function(result) {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Leads with B24PhpSdk\nDESCRIPTION: This PHP code snippet demonstrates retrieving a list of leads using the `B24PhpSdk`. It initializes parameters for ordering, filtering, and selecting fields. It then retrieves leads using the SDK, and prints the ID, Title, Name, and Birthdate of each lead. The code includes exception handling for error scenarios.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-list.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n      $order = [];\n      $filter = []; // Define your filter criteria here\n      $select = [\n          'ID', 'TITLE', 'HONORIFIC', 'NAME', 'SECOND_NAME', 'LAST_NAME', \n          'BIRTHDATE', 'COMPANY_TITLE', 'SOURCE_ID', 'SOURCE_DESCRIPTION', \n          'STATUS_ID', 'STATUS_DESCRIPTION', 'STATUS_SEMANTIC_ID', 'POST', \n          'ADDRESS', 'ADDRESS_2', 'ADDRESS_CITY', 'ADDRESS_POSTAL_CODE', \n          'ADDRESS_REGION', 'ADDRESS_PROVINCE', 'ADDRESS_COUNTRY', \n          'ADDRESS_COUNTRY_CODE', 'ADDRESS_LOC_ADDR_ID', 'CURRENCY_ID', \n          'OPPORTUNITY', 'IS_MANUAL_OPPORTUNITY', 'OPENED', 'COMMENTS', \n          'HAS_PHONE', 'HAS_EMAIL', 'HAS_IMOL', 'ASSIGNED_BY_ID', \n          'CREATED_BY_ID', 'MODIFY_BY_ID', 'MOVED_BY_ID', 'DATE_CREATE', \n          'DATE_MODIFY', 'MOVED_TIME', 'COMPANY_ID', 'CONTACT_ID', \n          'CONTACT_IDS', 'IS_RETURN_CUSTOMER', 'DATE_CLOSED', \n          'ORIGINATOR_ID', 'ORIGIN_ID', 'UTM_SOURCE', 'UTM_MEDIUM', \n          'UTM_CAMPAIGN', 'UTM_CONTENT', 'UTM_TERM', 'PHONE', 'EMAIL', \n          'WEB', 'IM', 'LINK'\n      ];\n      $startItem = 0;\n      $leadsResult = $serviceBuilder->getCRMScope()->lead()->list($order, $filter, $select, $startItem);\n      \n      foreach ($leadsResult->getLeads() as $lead) {\n          print(\"ID: {$lead->ID}, TITLE: {$lead->TITLE}, NAME: {$lead->NAME}, BIRTHDATE: \" . \n                ($lead->BIRTHDATE ? $lead->BIRTHDATE->format(DATE_ATOM) : 'N/A') . \"\\n\");\n      }\n  } catch (Throwable $e) {\n      print(\"Error: \" . $e->getMessage());\n  }\n```\n\n----------------------------------------\n\nTITLE: PHP Form Data Processing and Bitrix24 CRM Integration\nDESCRIPTION: Server-side PHP script for sanitizing form input, handling file uploads, mapping form fields to Bitrix24 contact fields, and performing create/update operations via REST API\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-make-contact-edit-card.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$arForm = [];\nforeach ($_POST['form'] as $key => $item)\n{\n    if (is_array($item))\n    {\n        $arForm[$key] = [];\n        foreach ($item as $k => $val)\n        {\n            $arForm[$key][$k] = htmlspecialchars($val);\n        }\n    }\n    else\n    {\n        $arForm[$key] = htmlspecialchars($item);\n    }\n}\n\n// Additional processing for file uploads and CRM field mapping\n$arResult = CRest::get('crm.contact.fields', []);\nif (!empty($arResult['result']))\n{\n    // Field validation and transformation logic\n}\n\n// Determine whether to create or update contact\n$method = $arForm['ID'] > 0 ? 'crm.contact.update' : 'crm.contact.add';\n\n// Execute Bitrix24 REST API call\n$result = CRest::get($method, $arParams);\n\n// Handle and return API response\n```\n\n----------------------------------------\n\nTITLE: Creating Company, Requisite and Deal with Bitrix24 REST API - PHP\nDESCRIPTION: PHP implementation for creating a company with requisites, address details and an associated deal using CRest API calls. Handles form data processing, data validation, and includes error handling.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-add-deal-with-choice-of-requisite.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$iRequisitePresetID = intVal($_POST[\"REQ_TYPE\"]);\n$sTitle = htmlspecialchars($_POST[\"TITLE\"]);\n$sINN = htmlspecialchars($_POST[\"INN\"]);\n$sPhone = htmlspecialchars($_POST[\"PHONE\"]);\n$arAddress = [];\n\nforeach($_POST[\"ADDRESS\"] as $key=>$val){\n    $arAddress[$key] = htmlspecialchars($val);\n}\n$arAddress['TYPE_ID'] = 1;\n$arAddress['ENTITY_TYPE_ID'] = 8;\n\n$arPhone = (!empty($sPhone)) ? array(array('VALUE' => $sPhone, 'VALUE_TYPE' => 'WORK')) : array();\n\n$result = CRest::call(\n    'crm.company.add',\n    [\n        'fields' =>[\n            'TITLE' => $sTitle,\n            'COMPANY_TYPE' => 'CUSTOMER',\n            'PHONE' => $arPhone,\n        ]\n    ]\n);\nif(!empty($result['result'])){\n    $resultRequisite = CRest::call(\n        'crm.requisite.add',\n        [\n            'fields' =>[\n                'ENTITY_TYPE_ID' => 4,\n                'ENTITY_ID' => $result['result'],\n                'PRESET_ID' => $iRequisitePresetID,\n                'TITLE' => $sTitle,\n                'ACTIVE' => 'Y',\n                'NAME' => $sTitle,\n                'RQ_INN' => $sINN,\n            ]\n        ]\n    );\n    $arDealFields = [\n        'TITLE' => $sTitle,\n        'COMPANY_ID' => $result['result']\n    ];\n    if(!empty($resultRequisite['result'])){\n        $arDealFields['REQUISITE_ID'] = $resultRequisite['result'];\n        $arAddress['ENTITY_ID'] = $resultRequisite['result'];\n        $resultAddress = CRest::call(\n            'crm.address.add',\n            [\n                'fields' =>$arAddress\n            ]\n        );\n    }\n    $resultDeal = CRest::call(\n        'crm.deal.add',\n        [\n            'fields' => $arDealFields\n        ]\n    );\n    echo json_encode(['message' => 'add']);\n}elseif(!empty($result['error_description'])){\n    echo json_encode(['message' => 'not added: '.$result['error_description']]);\n}else{\n    echo json_encode(['message' => 'not added']);\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Deal JSON Structure in Bitrix24\nDESCRIPTION: Demonstrates the basic JSON structure for creating a new CRM deal with essential fields. Includes default and optional parameters for deal creation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/crm-deal-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"TITLE\": \"Deal Title\",\n    \"TYPE_ID\": \"SALE\",\n    \"STAGE_ID\": \"NEW\",\n    \"OPPORTUNITY\": 1000.00,\n    \"CURRENCY_ID\": \"USD\",\n    \"ASSIGNED_BY_ID\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Bitrix24 REST API Method Definition for Entity Merge\nDESCRIPTION: HTTP method signature for merging CRM entities with required parameters of entity type ID and list of entity IDs to merge\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/duplicates/crm-entity-merge-batch.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncrm.entity.mergeBatch({params: {entityTypeId: number, entityIds: number[]}})\n```\n\n----------------------------------------\n\nTITLE: Creating Contact with Requisites and Address in Bitrix24 REST API - PHP\nDESCRIPTION: Creates a new contact in Bitrix24 CRM with associated phone numbers, requisites, and address information. The code sanitizes input data, makes multiple REST API calls to create related entities, and handles success/error responses. It uses CRest helper class for API communication and follows Bitrix24's entity type conventions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-add-contact-with-requisite.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$sPhone = htmlspecialchars($_POST[ \"PHONE\" ]);\n$arAddress = [];\nforeach($_POST[ \"ADDRESS\" ] as $key => $val){\n    $arAddress[ $key ] = htmlspecialchars($val);\n}\n$arAddress[ 'TYPE_ID' ] = 1;//1 is actual address in CRest::call('crm.enum.addresstype');\n$arAddress[ 'ENTITY_TYPE_ID' ] = 8;//8 - is requisite in CRest::call('crm.enum.ownertype');\n\n$arPhone = (!empty($sPhone)) ? array(array('VALUE' => $sPhone, 'VALUE_TYPE' => 'WORK')) : array();\n\n$result = CRest::call(\n    'crm.contact.add',\n    [\n        'fields' => [\n            'NAME' => $sName,\n            'LAST_NAME' => $sLastName,\n            'PHONE' => $arPhone,\n        ]\n    ]\n);\nif(!empty($result[ 'result' ])){\n    $resultRequisite = CRest::call(\n        'crm.requisite.add',\n        [\n            'fields' => [\n                'ENTITY_TYPE_ID' => 3,//3 - is contact in CRest::call('crm.enum.ownertype');\n                'ENTITY_ID' => $result[ 'result' ],//contact id\n                'PRESET_ID' => $iRequisitePresetID,\n                'TITLE' => implode(' ', [ $sName, $sLastName ]),\n                'ACTIVE' => 'Y',\n                'NAME' => $sName\n            ]\n        ]\n    );\n\n    if(!empty($resultRequisite[ 'result' ])){\n        $arAddress[ 'ENTITY_ID' ] = $resultRequisite[ 'result' ];//id requisite\n        $resultAddress = CRest::call(\n            'crm.address.add',\n            [\n                'fields' => $arAddress\n            ]\n        );\n    }\n    echo json_encode([ 'message' => 'Contact add' ]);\n}elseif(!empty($result[ 'error_description' ])){\n    echo json_encode([ 'message' => 'Contact not added: '.$result[ 'error_description' ] ]);\n}else{\n    echo json_encode([ 'message' => 'Contact not added' ]);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Company with Requisites using Bitrix24 REST API - PHP\nDESCRIPTION: Creates a company record in Bitrix24 CRM with associated phone numbers, then adds requisite information and address details. Uses CRest::call method to interact with various Bitrix24 REST API endpoints including crm.company.add, crm.requisite.add, and crm.address.add.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-add-company-with-requisite.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$sPhone = htmlspecialchars($_POST[\"PHONE\"]);\n$arAddress = [];\n\nforeach($_POST[\"ADDRESS\"] as $key=>$val){\n    $arAddress[$key] = htmlspecialchars($val);\n}\n$arAddress['TYPE_ID'] = 1;\n$arAddress['ENTITY_TYPE_ID'] = 8;\n\n$arPhone = (!empty($sPhone)) ? array(array('VALUE' => $sPhone, 'VALUE_TYPE' => 'WORK')) : array();\n\n$result = CRest::call(\n    'crm.company.add',\n    [\n        'fields' =>[\n            'TITLE' => $sTitle,\n            'COMPANY_TYPE' => 'CUSTOMER',\n            'PHONE' => $arPhone,\n        ]\n    ]\n);\nif(!empty($result['result'])){\n    $resultRequisite = CRest::call(\n        'crm.requisite.add',\n        [\n            'fields' =>[\n                'ENTITY_TYPE_ID' => 4,\n                'ENTITY_ID' => $result['result'],\n                'PRESET_ID' => $iRequisitePresetID,\n                'TITLE' => $sTitle,\n                'ACTIVE' => 'Y',\n                'NAME' => $sTitle,\n                'RQ_INN' => $sINN,\n            ]\n        ]\n    );\n    if(!empty($resultRequisite['result'])){\n        $arAddress['ENTITY_ID'] = $resultRequisite['result'];\n        $resultAddress = CRest::call(\n            'crm.address.add',\n            [\n                'fields' =>$arAddress\n            ]\n        );\n    }\n    echo json_encode(['message' => 'Company add']);\n}elseif(!empty($result['error_description'])){\n    echo json_encode(['message' => 'Company not added: '.$result['error_description']]);\n}else{\n    echo json_encode(['message' => 'Company not added']);\n}\n```\n\n----------------------------------------\n\nTITLE: CRM Contact Update Example\nDESCRIPTION: This example demonstrates the structure of the `fields` parameter for the `crm.contact.update` method. It showcases how to format the data for updating multiple fields within a contact record, including field names and their corresponding new values. This is a crucial part of updating contact details in Bitrix24 CRM.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/crm-contact-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"field_1\": \"value_1\",\n    \"field_2\": \"value_2\",\n    ...,\n    \"field_n\": \"value_n\",\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Form Submission with jQuery and XMLHttpRequest\nDESCRIPTION: Client-side JavaScript for capturing form submission, preventing default behavior, and sending form data asynchronously to server endpoint\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-make-contact-edit-card.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function () {\n    $('#auto_form').on('submit', function (el) {\n        el.preventDefault();\n        var formData = new FormData(this);\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'auto_form.php');\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4)\n            {\n                if (this.status >= 200 && this.status < 400)\n                {\n                    var resp = this.responseText;\n                    try\n                    {\n                        var json = JSON.parse(resp);\n                        if (typeof json.message !== 'undefined')\n                        {\n                            alert(json.message);\n                        }\n                    } catch (e)\n                    {\n                        return false;\n                    }\n                }\n                else\n                {\n                    alert('error');\n                }\n            }\n        };\n        xhr.send(formData);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Quote with Products in JavaScript (Bitrix24 REST API)\nDESCRIPTION: Demonstrates an asynchronous workflow for creating a company quote with multiple product rows using Bitrix24 JavaScript SDK. The script retrieves a product, creates a company, generates a quote, and adds product rows with different pricing and discount configurations.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-product-binding.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\ndocument.addEventListener('DOMContentLoaded', function() {\n    async function createQuoteWithProducts() {\n        try {\n            let resultProduct = await new Promise((resolve, reject) => {\n                BX24.callMethod(\n                    'crm.product.list',\n                    {\n                        'filter': {\n                            '>PRICE': 0\n                        }\n                    },\n                    function(result) {\n                        if (result.error()) {\n                            reject(result.error());\n                        } else {\n                            resolve(result.data());\n                        }\n                    }\n                );\n            });\n\n            // Remaining code omitted for brevity\n        } catch (error) {\n            console.error(error);\n            alert('An error occurred: ' + error.message);\n        }\n    }\n\n    createQuoteWithProducts();\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing CRM Lead Multifield Example in Bitrix24 API\nDESCRIPTION: This example demonstrates the structure for initializing multifields for a CRM Lead in Bitrix24. It shows how to define phone and email fields with their respective values and types.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nfm: {\n    \"15\": {\n        \"valueType\": \"WORK\",\n        \"value\": \"+79999999\",\n        \"typeId\": \"PHONE\"\n    },\n    \"16\": {\n        \"valueType\": \"WORK\",\n        \"value\": \"bitrix@bitrix.ru\",\n        \"typeId\": \"EMAIL\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Form Input for CRM Deals - PHP\nDESCRIPTION: This snippet processes the submitted form data from the 'auto_form.php' page, sanitizing inputs and preparing them for CRM API submission, including handling file uploads and converting multiple values as needed.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_15\n\nLANGUAGE: php\nCODE:\n```\n<?php\n$arForm = [];\nforeach ($_POST['form'] as $key => $item) {\n    if (is_array($item)) {\n        $arForm[$key] = [];\n        foreach ($item as $k => $val) {\n            $arForm[$key][$k] = htmlspecialchars($val);\n        }\n    } else {\n        $arForm[$key] = htmlspecialchars($item);\n    }\n}\n//make array multiple files for add to custom field\nif (!empty($_FILES['form']['tmp_name']) && is_array($_FILES['form']['tmp_name'])) {\n    foreach ($_FILES['form']['tmp_name'] as $key => $files) {\n        if (is_array($files)) {\n            foreach ($files as $k => $file) {\n                $arForm[$key][$k] = [\n                    \"fileData\" => [\n                        $_FILES['form']['name'][$key][$k],\n                        base64_encode(file_get_contents($file))\n                    ]\n                ];\n            }\n        } else {\n            $arForm[$key] = [\n                \"fileData\" => [\n                    $_FILES['form']['name'][$key],\n                    base64_encode(file_get_contents($files))\n                ]\n            ];\n        }\n    }\n}\n$arResult = CRest::get('crm.deal.fields', []);\nif (!empty($arResult['result'])) {\n    foreach ($arResult['result'] as $key => $prop) {\n        if (!isset($arForm[$key])) {\n            if (!$prop['isReadOnly'] && $prop['type'] != 'file') {\n                if ($prop['type'] == 'enumeration' && $prop['isMultiple']) {\n                    //if type multiple enumeration to clean selected value need send: [false]\n                    $arForm[$key] = [false];\n                } elseif ($prop['isMultiple']) {\n                    $arForm[$key] = [];\n                } else {\n                    $arForm[$key] = '';\n                }\n            }\n            continue;\n        }\n        //here may be any check field example by type\n        if ($prop['type'] == 'crm_multifield') {\n            if (isset($arForm[$key])) {\n                $arForm[$key] = [['VALUE' => $arForm[$key]]];\n            }\n        } elseif ($prop['type'] == 'money') {\n            $arForm[$key] = implode('|', [$arForm[$key], $arForm[$key . '_CURRENCY']]);\n            unset($arForm[$key . '_CURRENCY']);\n        }\n    }\n}\n$arForm['ID'] = intVal($arForm['ID']);\nif ($arForm['ID'] > 0) {\n    $method = 'crm.deal.update';\n    $arParams = [\n        'id' => $arForm['ID'],\n        'fields' => $arForm\n    ];\n    $arMess = [\n        'success' => 'Deal update',\n        'error' => 'Deal not updated',\n    ];\n} else {\n    $method = 'crm.deal.add';\n    $arParams = [\n        'fields' => $arForm\n    ];\n    $arMess = [\n        'success' => 'Deal add',\n        'error' => 'Deal not added',\n    ];\n}\n$result = CRest::get($method, $arParams);\nif (!empty($result['result'])) {\n    echo json_encode(\n        ['message' => $arMess['success'] . (($method == 'crm.deal.add') ? ' ID:' . $result['result'] : '')]\n    );\n} elseif (!empty($result['error_description'])) {\n    echo json_encode(['message' => $arMess['error'] . ': ' . $result['error_description']]);\n} else {\n    echo json_encode(['message' => $arMess['error']]);\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Item Fields with cURL Webhook\nDESCRIPTION: Example of using cURL with a webhook to retrieve field lists for a smart process with entityTypeId 1268. The request passes the required entityTypeId parameter and sets useOriginalUfNames to 'N' to get camelCase field names.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":1268,\"useOriginalUfNames\":\"N\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.item.fields\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Process Elements with JavaScript\nDESCRIPTION: This snippet demonstrates how to create smart process elements with custom fields using JavaScript and the BX24 library. It calls the crm.item.batchImport method with an object containing custom field values and handles the API response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/import/crm-item-batch-import.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst greenPixelInBase64 = \"iVBORw0KGgoAAAANSUhEUgAAAIAAAAAMCAYAAACqTLVoAAAALklEQVR42u3SAQEAAAQDsEsuOj3YMqwy6fBWCSCAAAIgAAIgAAIgAAIgAAJw3QLOrRH1U/gU4gAAAABJRU5ErkJggg==\";\n\nBX24.callMethod(\n    'crm.item.batchImport', \n    {\n        entityTypeId: 1302,\n        data: [\n            {\n                ufCrm44_1721812760630: \"Строка для пользовательского поля типа Строка\",\n                ufCrm44_1721812814433: 81,\n                ufCrm44_1721812853419: (new Date()).toISOString().slice(0, 10),\n                ufCrm44_1721812885588: [\n                    \"example.com\",\n                    \"second-example.com\",\n                ],\n                ufCrm44_1721812898903: [\n                    \"green_pixel.png\",\n                    greenpixelBase64,\n                ],\n                ufCrm44_1721812915476: \"300|RUB\",\n                ufCrm44_1721812935209: \"Y\",\n                ufCrm44_1721812948498: 9999.9,\n            },\n            {\n                ufCrm44_1721812760630: \"Строка для пользовательского поля типа Строка\",\n                ufCrm44_1721812814433: 45,\n                ufCrm44_1721812853419: (new Date()).toISOString().slice(0, 10),\n                ufCrm44_1721812885588: [\n                    \"example.com\",\n                    \"second-example.com\",\n                ],\n                ufCrm44_1721812898903: [\n                    \"green_pixel2.png\",\n                    greenpixelBase64,\n                ],\n                ufCrm44_1721812915476: \"600|RUB\",\n                ufCrm44_1721812935209: \"N\",\n                ufCrm44_1721812948498: 9999.9,\n            }\n        ],\n    },\n    (result) => \n    {\n        result.error() \n            ? console.error(result.error()) \n            : console.info(result.data())\n        ;\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Product using PHP in Bitrix24 REST API\nDESCRIPTION: This snippet demonstrates how to use the CRest::call function to add a new product to the Bitrix24 catalog using PHP. It includes the same product fields as the JavaScript example, such as name, active status, barcode, dates, pictures, dimensions, and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/catalog-product-add.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.add',\n    [\n        'fields' => [\n            'iblockId' => 23,\n            'name' => 'Товар',\n            'active' => 'Y',\n            'barcodeMulti' => 'Y',\n            'canBuyZero' => 'Y',\n            'code' => 'Tovar',\n            'createdBy' => 1,\n            'dateActiveFrom' => '2024-05-28T10:00:00',\n            'dateActiveTo' => '2024-05-29T10:00:00',\n            'dateCreate' => '2024-05-27T10:00:00',\n            'detailPicture' => [\n                'fileData' => [\n                    'detailPicture.png',\n                    'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC'\n                ]\n            ],\n            'detailText' => '',\n            'detailTextType' => 'text',\n            'height' => 100,\n            'iblockSectionId' => 47,\n            'length' => 100,\n            'measure' => 5,\n            'modifiedBy' => 1,\n            'previewPicture' => [\n                'fileData' => [\n                    'previewPicture.png',\n                    'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC'\n                ]\n            ],\n            'previewText' => '',\n            'previewTextType' => 'text',\n            'purchasingCurrency' => 'RUB',\n            'purchasingPrice' => 1000,\n            'quantity' => 10,\n            'quantityReserved' => 1,\n            'quantityTrace' => 'Y',\n            'recurSchemeLength' => 1,\n            'recurSchemeType' => 'D',\n            'sort' => 100,\n            'subscribe' => 'Y',\n            'trialPriceId' => 175,\n            'vatId' => 1,\n            'vatIncluded' => 'Y',\n            'weight' => 100,\n            'width' => 100,\n            'withoutOrder' => 'Y',\n            'xmlId' => '',\n            'property258' => 'test',\n            'property259' => [\n                'test1',\n                'test2'\n            ],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM activities using cURL Webhook request\nDESCRIPTION: Example of using cURL with a webhook to retrieve CRM activities for a specific owner, sorting by ID in descending order and selecting all fields plus communications.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{\"ID\":\"DESC\"},\"filter\":{\"OWNER_TYPE_ID\":3,\"OWNER_ID\":102},\"select\":[\"*\",\"COMMUNICATIONS\"]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.activity.list\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Process Elements with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to create smart process elements with custom fields using cURL and a Bitrix24 webhook. It sends a POST request to the crm.item.batchImport endpoint with JSON data containing custom field values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/import/crm-item-batch-import.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n    \"entityTypeId\": 1302,\n    \"data\": [{\n        \"ufCrm44_1721812760630\": \"Строка для пользовательского поля типа Строка\",\n        \"ufCrm44_1721812814433\": 81,\n        \"ufCrm44_1721812853419\": \"'\"$(date '+%Y-%m-%d')\"'\",\n        \"ufCrm44_1721812885588\": [\n            \"example.com\",\n            \"second-example.com\"\n        ],\n        \"ufCrm44_1721812898903\": [\n            \"green_pixel.png\",\n            \"iVBORw0KGgoAAAANSUhEUgAAAIAAAAAMCAYAAACqTLVoAAAALklEQVR42u3SAQEAAAQDsEsuOj3YMqwy6fBWCSCAAAIgAAIgAAIgAAIgAAJw3QLOrRH1U/gU4gAAAABJRU5ErkJggg==\"\n        ],\n        \"ufCrm44_1721812915476\": \"300|RUB\",\n        \"ufCrm44_1721812935209\": \"Y\",\n        \"ufCrm44_1721812948498\": 9999.9\n    },{\n        \"ufCrm44_1721812760630\": \"Строка для пользовательского поля типа Строка\",\n        \"ufCrm44_1721812814433\": 45,\n        \"ufCrm44_1721812853419\": \"'\"$(date '+%Y-%m-%d')\"'\",\n        \"ufCrm44_1721812885588\": [\n            \"example.com\",\n            \"second-example.com\"\n        ],\n        \"ufCrm44_1721812898903\": [\n            \"green_pixel2.png\",\n            \"iVBORw0KGgoAAAANSUhEUgAAAIAAAAAMCAYAAACqTLVoAAAALklEQVR42u3SAQEAAAQDsEsuOj3YMqwy6fBWCSCAAAIgAAIgAAIgAAIgAAJw3QLOrRH1U/gU4gAAAABJRU5ErkJggg==\"\n        ],\n        \"ufCrm44_1721812915476\": \"600|RUB\",\n        \"ufCrm44_1721812935209\": \"N\",\n        \"ufCrm44_1721812948498\": 9999.9\n    }]\n}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.item.batchImport\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Process Elements with cURL (OAuth)\nDESCRIPTION: This snippet shows how to create smart process elements with custom fields using cURL and OAuth authentication. It sends a POST request to the crm.item.batchImport endpoint with JSON data containing custom field values and an access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/import/crm-item-batch-import.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n    \"entityTypeId\": 1302,\n    \"data\": [{\n        \"ufCrm44_1721812760630\": \"Строка для пользовательского поля типа Строка\",\n        \"ufCrm44_1721812814433\": 81,\n        \"ufCrm44_1721812853419\": \"'\"$(date '+%Y-%m-%d')\"'\",\n        \"ufCrm44_1721812885588\": [\n            \"example.com\",\n            \"second-example.com\"\n        ],\n        \"ufCrm44_1721812898903\": [\n            \"green_pixel.png\",\n            \"iVBORw0KGgoAAAANSUhEUgAAAIAAAAAMCAYAAACqTLVoAAAALklEQVR42u3SAQEAAAQDsEsuOj3YMqwy6fBWCSCAAAIgAAIgAAIgAAIgAAJw3QLOrRH1U/gU4gAAAABJRU5ErkJggg==\"\n        ],\n        \"ufCrm44_1721812915476\": \"300|RUB\",\n        \"ufCrm44_1721812935209\": \"Y\",\n        \"ufCrm44_1721812948498\": 9999.9\n    },{\n        \"ufCrm44_1721812760630\": \"Строка для пользовательского поля типа Строка\",\n        \"ufCrm44_1721812814433\": 45,\n        \"ufCrm44_1721812853419\": \"'\"$(date '+%Y-%m-%d')\"'\",\n        \"ufCrm44_1721812885588\": [\n            \"example.com\",\n            \"second-example.com\"\n        ],\n        \"ufCrm44_1721812898903\": [\n            \"green_pixel2.png\",\n            \"iVBORw0KGgoAAAANSUhEUgAAAIAAAAAMCAYAAACqTLVoAAAALklEQVR42u3SAQEAAAQDsEsuOj3YMqwy6fBWCSCAAAIgAAIgAAIgAAIgAAJw3QLOrRH1U/gU4gAAAABJRU5ErkJggg==\"\n        ],\n        \"ufCrm44_1721812915476\": \"600|RUB\",\n        \"ufCrm44_1721812935209\": \"N\",\n        \"ufCrm44_1721812948498\": 9999.9\n    }],\n    \"auth\": \"**put_access_token_here**\"\n}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.batchImport\n```\n\n----------------------------------------\n\nTITLE: Adding a User Field using JavaScript\nDESCRIPTION: This code snippet shows how to add a user field to a Bitrix24 contact using the `BX24.callMethod` function in JavaScript.  It defines the user field properties within a `fields` object, including labels in multiple languages and settings. A callback function is used to handle the result of the method call, logging errors or data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n        'crm.contact.userfield.add',\n        {\n            fields: {\n                LABEL: \"Поле \\'Привет, мир!\\'\",\n                USER_TYPE_ID: \"string\",\n                FIELD_NAME: \"HELLO_WORLD\",\n                MULTIPLE: \"Y\",\n                MANDATORY: \"Y\",\n                SHOW_FILTER: \"Y\",\n                SETTINGS: {\n                    DEFAULT_VALUE: \"Привет, мир! Значение по умолчанию\",\n                    ROWS: 3,\n                },\n                SORT: 1000,\n                EDIT_IN_LIST: \"Y\",\n                LIST_FILTER_LABEL: \"Привет, мир! Фильтр\",\n                LIST_COLUMN_LABEL: {\n                    \"en\": \"Hello, World! Column\",\n                    \"ru\": \"Привет, мир! Колонка\",\n                    \"de\": \"Hallo, Welt! Spalte\"\n                },\n                EDIT_FORM_LABEL: {\n                    \"en\": \"Hello, World! Edit\",\n                    \"ru\": \"Привет, мир! Редактировать\",\n                    \"de\": \"Hallo, Welt! Bearbeiten\"\n                },\n                ERROR_MESSAGE: {\n                    \"en\": \"Hello, World! Error\",\n                    \"ru\": \"Привет, мир! Ошибка\",\n                    \"de\": \"Hallo, Welt! Fehler\"\n                },\n                HELP_MESSAGE: {\n                    \"en\": \"Hello, World! Help\",\n                    \"ru\": \"Привет, мир! Помощь\",\n                    \"de\": \"Hallo, Welt! Hilfe\"\n                },\n            },\n        },\n        (result) => {\n            result.error()\n                ? console.error(result.error())\n                : console.info(result.data())\n            ;\n        },\n    );\n```\n\n----------------------------------------\n\nTITLE: Adding Product SKU - JavaScript Implementation\nDESCRIPTION: JavaScript example showing how to add a product SKU using catalog.product.sku.add method. Includes handling of product details, images, and custom properties. The code demonstrates error handling and response processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/sku/catalog-product-sku-add.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    detailText: '',\n    detailTextType: 'text',\n    height: 100,\n    iblockSectionId: 47,\n    length: 100,\n    measure: 5,\n    modifiedBy: 1,\n    previewPicture: {\n        'fileData':['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­...']},\n    previewText: '',\n    previewTextType: 'text',\n    purchasingCurrency: 'RUB',\n    purchasingPrice: 1000,\n    quantity: 10,\n    sort: 100,\n    subscribe: 'Y',\n    vatId: 1,\n    vatIncluded: 'Y',\n    weight: 100,\n    width: 100,\n    xmlId: '',\n    property258: 'test',\n    property259: ['test1', 'test2']\n},\nfunction(result) {\n    if(result.error())\n        console.error(result.error());\n    else\n        console.log(result.data());\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Booking Resource Slots using JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24.callMethod function to set time slots for a booking resource. It configures slots for Monday to Friday, 9:00 AM to 6:00 PM, with 30-minute intervals in the Europe/Kaliningrad timezone.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/resource/slots/booking-v1-resource-slots-set.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"booking.v1.resource.slots.set\",\n    {\n        resourceId: 10,\n        slots: [\n            {\n                from: 540,\n                to: 1080,\n                timezone: \"Europe/Kaliningrad\",\n                weekDays: [\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"],\n                slotSize: 30\n            }\n        ]\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Product Offer using Bitrix24 REST API in JavaScript\nDESCRIPTION: This snippet demonstrates how to add a product offer to the Bitrix24 catalog using the JavaScript REST API. It includes setting various product properties such as name, active status, barcode, dimensions, prices, and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/offer/catalog-product-offer-add.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.offer.add',\n    {\n        'fields': {\n            iblockId: 24,\n            name: 'Вариация товара',\n            active: 'Y',\n            barcodeMulti: 'Y',\n            canBuyZero: 'Y',\n            code: 'Tovar',\n            createdBy: 1,\n            dateActiveFrom: '2024-05-28T10:00:00',\n            dateActiveTo: '2024-05-29T10:00:00',\n            dateCreate: '2024-05-27T10:00:00',\n            'detailPicture':  ['detailPicture.png','iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC'],\n            detailText: '',\n            detailTextType: 'text',\n            height: 100,\n            iblockSectionId: 47,\n            length: 100,\n            measure: 5,\n            modifiedBy: 1,\n            previewPicture: {\n                'fileData':['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']},\n            previewText: '',\n            previewTextType: 'text',\n            purchasingCurrency: 'RUB',\n            purchasingPrice: 1000,\n            quantity: 10,\n            quantityReserved: 1,\n            quantityTrace: 'Y',\n            recurSchemeLength: 1,\n            recurSchemeType: 'D',\n            sort: 100,\n            subscribe: 'Y',\n            trialPriceId: 175,\n            vatId: 1,\n            vatIncluded: 'Y',\n            weight: 100,\n            width: 100,\n            withoutOrder: 'Y',\n            xmlId: '',\n            parentId: 1275,\n            property258: 'test',\n            property259: ['test1', 'test2'],\n    },\n    },\n    function(result)\n    {\n    if(result.error())\n    console.error(result.error());\n    else\n    console.log(result.data());\n    }\n    );\n```\n\n----------------------------------------\n\nTITLE: Querying Leads with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of leads using a webhook in Bitrix24. It specifies the select fields (all standard and user fields), the starting record (50), a filter for leads with an opportunity value of 15000, and orders the result by status ID in ascending order. Replace placeholders for Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  -d '{\"select\":[\"*\",\"UF_*\"],\"start\":50,\"filter\":{\"=OPPORTUNITY\":15000},\"order\":{\"STATUS_ID\":\"ASC\"}}' \\\n  https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.lead.list\n```\n\n----------------------------------------\n\nTITLE: Searching Lead by Phone Number (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to search for a lead by phone number using the Bitrix24 JavaScript API. It uses the `crm.lead.list` method with a filter to match a specific phone number. The ID and Title of the matching leads are selected.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-list.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n      \"crm.lead.list\",\n      {\n          filter: { \"PHONE\": \"555888\" },\n          select: [ \"ID\", \"TITLE\" ]\n      },\n      (result) => {\n        if(result.error())\n        {\n          console.error(result.error());\n        }\n        else\n        {\n          console.dir(result.data());\n          if (result.more())\n          {\n            result.next();\n          }\n        }\n      }\n  );\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Calendar Events with JavaScript\nDESCRIPTION: This code example demonstrates how to retrieve user calendar events using the Bitrix24 JavaScript SDK. It calls the calendar.event.get.nearest method with parameters to get events for a specific user for the next 10 days.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'calendar.event.get.nearest',\n    {\n        type: 'user',\n        ownerId: 2,\n        days: 10,\n        forCurrentUser: true,\n        maxEventsCount: 100,\n        detailUrl: '/company/personal/user/#user_id#/calendar/'\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Preserving Existing File in Bitrix24 CRM Update (JSON)\nDESCRIPTION: Demonstrates how to keep an existing file unchanged when updating a CRM item. This is done by passing the file's ID in the update request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-update.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"fields\": {\n        \"ufCrm1617027453943\": {\n            \"id\": 433\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Bitrix24 Company Addition Response in PHP\nDESCRIPTION: Handles the response from a company addition API call by checking for successful result or error conditions. Returns JSON encoded messages indicating the operation status.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-add-company.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nif(!empty($result['result'])) {\n    echo json_encode(['message' => 'Company add']);\n} elseif(!empty($result['error_description'])) {\n    echo json_encode(['message' => 'Company not added: '.$result['error_description']]);\n} else {\n    echo json_encode(['message' => 'Company not added']);\n}\n```\n\n----------------------------------------\n\nTITLE: Get Lead by ID using PHP\nDESCRIPTION: This PHP code retrieves a lead by its ID using the `CRest::call` function.  The `ID` parameter is passed as part of the method call.  It requires the `crest.php` library and prints the result to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.lead.get',\n    [\n        'ID' => 123\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Adding Contact to CRM Deal API Method\nDESCRIPTION: Adds a contact to a specified deal using the crm.deal.contact.add method. Requires deal ID and contact information. Optional parameters include sorting index and primary contact flag.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/contacts/crm-deal-contact-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"id\": \"deal_identifier\",\n  \"fields\": {\n    \"CONTACT_ID\": \"contact_identifier\",\n    \"SORT\": \"optional_sort_index\",\n    \"IS_PRIMARY\": \"optional_primary_flag\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Form Data for Bitrix24 REST API in PHP\nDESCRIPTION: PHP code that processes form data, including handling file uploads with base64 encoding. It sanitizes input, prepares data according to field types, and determines whether to call add or update methods on the Bitrix24 API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_18\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\n$arForm = [];\nforeach ($_POST['form'] as $key => $item) {\n    if (is_array($item)) {\n        $arForm[$key] = [];\n        foreach ($item as $k => $val) {\n            $arForm[$key][$k] = htmlspecialchars($val);\n        }\n    } else {\n        $arForm[$key] = htmlspecialchars($item);\n    }\n}\n//make array multiple files for add to custom field\nif (!empty($_FILES['form']['tmp_name']) && is_array($_FILES['form']['tmp_name'])) {\n    foreach ($_FILES['form']['tmp_name'] as $key => $files) {\n        if (is_array($files)) {\n            foreach ($files as $k => $file) {\n                $arForm[$key][$k] = [\n                    \"fileData\" => [\n                        $_FILES['form']['name'][$key][$k],\n                        base64_encode(file_get_contents($file))\n                    ]\n                ];\n            }\n        } else {\n            $arForm[$key] = [\n                \"fileData\" => [\n                    $_FILES['form']['name'][$key],\n                    base64_encode(file_get_contents($files))\n                ]\n            ];\n        }\n    }\n}\n$arResult = CRest::get('crm.company.fields', []);\nif (!empty($arResult['result'])) {\n    foreach ($arResult['result'] as $key => $prop) {\n        if (!isset($arForm[$key])) {\n            if (!$prop['isReadOnly'] && $prop['type'] != 'file') {\n                if ($prop['type'] == 'enumeration' && $prop['isMultiple']) {\n                    //if type multiple enumeration to clean selected value need send: [false]\n                    $arForm[$key] = [false];\n                } elseif ($prop['isMultiple']) {\n                    $arForm[$key] = [];\n                } else {\n                    $arForm[$key] = '';\n                }\n            }\n            continue;\n        }\n        //here may be any check field example by type\n        if ($prop['type'] == 'crm_multifield') {\n            if (isset($arForm[$key])) {\n                $arForm[$key] = [['VALUE' => $arForm[$key]]];\n            }\n        } elseif ($prop['type'] == 'money') {\n            $arForm[$key] = implode('|', [$arForm[$key], $arForm[$key . '_CURRENCY']]);\n            unset($arForm[$key . '_CURRENCY']);\n        }\n    }\n}\n$arForm['ID'] = intVal($arForm['ID']);\nif ($arForm['ID'] > 0) {\n    $method = 'crm.company.update';\n    $arParams = [\n        'id' => $arForm['ID'],\n        'fields' => $arForm\n    ];\n    $arMess = [\n        'success' => 'Company update',\n        'error' => 'Company not updated',\n    ];\n} else {\n    $method = 'crm.company.add';\n    $arParams = [\n        'fields' => $arForm\n    ];\n    $arMess = [\n        'success' => 'Company add',\n        'error' => 'Company not added',\n    ];\n}\n$result = CRest::get($method, $arParams);\nif (!empty($result['result'])) {\n    echo json_encode(\n        ['message' => $arMess['success'] . (($method == 'crm.company.add') ? ' ID:' . $result['result'] : '')]\n    );\n} elseif (!empty($result['error_description'])) {\n    echo json_encode(['message' => $arMess['error'] . ': ' . $result['error_description']]);\n} else {\n    echo json_encode(['message' => $arMess['error']]);\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Rendering Form Fields in Bitrix24 REST\nDESCRIPTION: A comprehensive switch statement that handles rendering of different form field types using CPrintForm helper. Supports multiple field types including text, file, date, boolean, money and custom fields with UF_ prefix. Each case handles specific field type formatting and validation requirements.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-make-contact-edit-card.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nswitch (strtolower($arField['type'])) {\n    case 'file':\n        $return = CPrintForm::input([\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'file',\n        ]);\n        // ... file handling code\n        break;\n    case 'date':\n        if (!empty($value)) {\n            $value = date('Y-m-d', strtotime($value));\n        }\n        $return = CPrintForm::input([\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'date',\n        ]);\n        break;\n    // ... other field types\n}\n```\n\n----------------------------------------\n\nTITLE: Fetching Deal Userfields with Language Filter\nDESCRIPTION: Demonstrates retrieving custom deal userfields with language-specific filtering, sorting results in ascending order by sort parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/user-defined-fields/crm-deal-userfield-list.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ncrm.deal.userfield.list\n{\n    order: { \"SORT\": \"ASC\" },\n    filter: { LANG: 'ru' }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding a User Field using PHP (crest.php)\nDESCRIPTION: This PHP code snippet demonstrates how to add a user field to a Bitrix24 contact using the `CRest::call` method from the `crest.php` library. It includes necessary parameters for the user field like LABEL, USER_TYPE_ID, FIELD_NAME, MULTIPLE, MANDATORY, SHOW_FILTER and SETTINGS. The code then prints the result of the API call for debugging purposes.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.contact.userfield.add',\n        [\n            'fields' => [\n                'LABEL' => \"Поле 'Привет, мир!'\",\n                'USER_TYPE_ID' => \"string\",\n                'FIELD_NAME' => \"HELLO_WORLD\",\n                'MULTIPLE' => \"Y\",\n                'MANDATORY' => \"Y\",\n                'SHOW_FILTER' => \"Y\",\n                'SETTINGS' => [\n                    'DEFAULT_VALUE' => \"Привет, мир! Значение по умолчанию\",\n                    'ROWS' => 3,\n                ],\n                'SORT' => 1000,\n                'EDIT_IN_LIST' => \"Y\",\n                'LIST_FILTER_LABEL' => \"Привет, мир! Фильтр\",\n                'LIST_COLUMN_LABEL' => [\n                    'en' => \"Hello, World! Column\",\n                    'ru' => \"Привет, мир! Колонка\",\n                    'de' => \"Hallo, Welt! Spalte\"\n                ],\n                'EDIT_FORM_LABEL' => [\n                    'en' => \"Hello, World! Edit\",\n                    'ru' => \"Привет, мир! Редактировать\",\n                    'de' => \"Hallo, Welt! Bearbeiten\"\n                ],\n                'ERROR_MESSAGE' => [\n                    'en' => \"Hello, World! Error\",\n                    'ru' => \"Привет, мир! Ошибка\",\n                    'de' => \"Hallo, Welt! Fehler\"\n                ],\n                'HELP_MESSAGE' => [\n                    'en' => \"Hello, World! Help\",\n                    'ru' => \"Привет, мир! Помощь\",\n                    'de' => \"Hallo, Welt! Hilfe\"\n                ],\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Selecting Leads Created in a Specific Month (PHP)\nDESCRIPTION: This PHP code snippet retrieves a list of leads created within a specific month using the Bitrix24 REST API. The filter specifies a date range for the `DATE_CREATE` field, and the selection includes the ID and creation date of the leads.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-list.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n$result = CRest::call(\n      'crm.lead.list',\n      [\n          'filter' => [\n              '>DATE_CREATE' => '2023-10-01T00:00:00',\n              '<DATE_CREATE' => '2023-10-31T23:59:59',\n          ],\n          'select' => [\n              'ID',\n              'DATE_CREATE',\n          ],\n      ]\n  );\n```\n\n----------------------------------------\n\nTITLE: Submitting Auto Form with AJAX - JavaScript\nDESCRIPTION: This JavaScript snippet sets up an AJAX form submission for the 'auto_form', preventing the default form submission behavior, collecting data using FormData, and handling success and error responses from the server.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n$(document).ready(function () {\n    $('#auto_form').on('submit', function (el) {//event submit form\n        el.preventDefault();//the default action of the event will not be triggered\n        var formData = new FormData(this);\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'auto_form.php');\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4)\n            {\n                if (this.status >= 200 && this.status < 400)\n                {\n                    // Success!\n                    var resp = this.responseText;\n                    try\n                    {\n                        var json = JSON.parse(resp);\n                        if (typeof json.message !== 'undefined')\n                        {\n                            alert(json.message);\n                        }\n                    } catch (e)\n                    {\n                        return false;\n                    }\n                }\n                else\n                {\n                    alert('error');\n                }\n            }\n        };\n        xhr.send(formData);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Example response from crm.activity.list method\nDESCRIPTION: JSON response structure returned by the crm.activity.list method, showing activity details like ID, owner information, type, subject, timestamps, status, and other activity properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n            \"ID\": \"20\",\n            \"OWNER_ID\": \"15\",\n            \"OWNER_TYPE_ID\": \"3\",\n            \"TYPE_ID\": \"2\",\n            \"PROVIDER_ID\": \"VOXIMPLANT_CALL\",\n            \"PROVIDER_TYPE_ID\": \"CALL\",\n            \"PROVIDER_GROUP_ID\": null,\n            \"ASSOCIATED_ENTITY_ID\": \"0\",\n            \"SUBJECT\": \"Исходящий звонок Андрей Николаев\",\n            \"CREATED\": \"2020-09-27T13:26:55+03:00\",\n            \"LAST_UPDATED\": \"2021-03-21T20:28:24+03:00\",\n            \"START_TIME\": \"2020-09-27T13:25:00+03:00\",\n            \"END_TIME\": \"2020-09-27T19:25:00+03:00\",\n            \"DEADLINE\": \"2020-09-27T13:25:00+03:00\",\n            \"COMPLETED\": \"Y\",\n            \"STATUS\": \"2\",\n            \"RESPONSIBLE_ID\": \"505\",\n            \"PRIORITY\": \"2\",\n            \"NOTIFY_TYPE\": \"1\",\n            \"NOTIFY_VALUE\": \"15\",\n            \"DESCRIPTION\": \"\",\n            \"DESCRIPTION_TYPE\": \"1\",\n            \"DIRECTION\": \"2\",\n            \"LOCATION\": \"\",\n            \"SETTINGS\": [],\n            \"ORIGINATOR_ID\": null,\n            \"ORIGIN_ID\": null,\n            \"AUTHOR_ID\": \"505\",\n            \"EDITOR_ID\": \"505\",\n            \"PROVIDER_PARAMS\": [],\n            \"PROVIDER_DATA\": null,\n            \"RESULT_MARK\": \"0\",\n            \"RESULT_VALUE\": null,\n            \"RESULT_SUM\": null,\n            \"RESULT_CURRENCY_ID\": null,\n            \"RESULT_STATUS\": \"0\",\n            \"RESULT_STREAM\": \"0\",\n            \"RESULT_SOURCE_ID\": null,\n            \"AUTOCOMPLETE_RULE\": \"0\"\n        },\n        // .. Еще 49 элементов\n    ],\n    \"next\": 50,\n    \"total\": 123456,\n    \"time\": {\n        \"start\": 1724677896.295857,\n        \"finish\": 1724677897.197243,\n        \"duration\": 0.901386022567749,\n        \"processing\": 0.8762130737304688,\n        \"date_start\": \"2024-08-26T16:11:36+03:00\",\n        \"date_finish\": \"2024-08-26T16:11:37+03:00\",\n        \"operating_reset_at\": \"2024-08-26T16:11:37+03:00\",\n        \"operating\": 0.0162130737304688\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Contact Company using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to add a company to a contact using the BX24.callMethod function.  It calls the 'crm.contact.company.add' method with the contact ID, company ID, and other optional fields, and handles the result using a callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'crm.contact.company.add',\n        {\n            id: 54,\n            fields: {\n                COMPANY_ID: 32,\n                IS_PRIMARY: \"Y\",\n                SORT: 1000,\n            },\n        },\n        (result) => {\n            result.error()\n                ? console.error(result.error())\n                : console.info(result.data())\n            ;\n        },\n    );\n```\n\n----------------------------------------\n\nTITLE: Add Catalog Product to Basket via cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates adding a catalog product to an order basket using OAuth authentication. It sets the content type to JSON, includes the `auth` parameter with the access token, and specifies the necessary fields such as `orderId`, `quantity`, `productId`, and `currency` in the request body. The request is sent to the Bitrix24 REST endpoint for adding catalog products to the basket.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add-catalog-product.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"fields\":{\"orderId\":5147,\"quantity\":1,\"productId\":4347,\"currency\":\"RUB\"},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.basketitem.addCatalogProduct\n```\n\n----------------------------------------\n\nTITLE: Using B24PhpSDK with Webhook\nDESCRIPTION: This snippet shows how to use the B24PhpSDK library with an incoming webhook to interact with the Bitrix24 REST API. It creates a service builder from the webhook, then calls the deal()->add method to create a new deal with the specified title, type, and stage.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/how-to-use-examples.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\n\ndeclare(strict_types=1);\n\n// Подключение базового класса SDK\nuse Bitrix24\\SDK\\Services\\ServiceBuilderFactory;\n\n// следите за правильностью пути к autoload.php. он может быть другим, если\n// вы используете свою структуру папок \nrequire_once 'vendor/autoload.php'; \n\n$B24 = ServiceBuilderFactory::createServiceBuilderFromWebhook(\n    '--сюда надо вставить код вашего вебхука--'\n);\n\n$result = $B24->getCRMScope()->deal()->add([\n    'TITLE' => 'New Deal',\n    'TYPE_ID' => 'SALE',\n    'STAGE_ID' => 'NEW'\n])->getId();\n```\n\n----------------------------------------\n\nTITLE: Adding Product Offer using Bitrix24 REST API in PHP\nDESCRIPTION: This snippet shows how to add a product offer to the Bitrix24 catalog using the PHP REST API. It sets various product properties including images, dimensions, prices, and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/offer/catalog-product-offer-add.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.offer.add',\n    [\n        'fields' => [\n            'iblockId' => 24,\n            'name' => 'Вариация товара',\n            'active' => 'Y',\n            'barcodeMulti' => 'Y',\n            'canBuyZero' => 'Y',\n            'code' => 'Tovar',\n            'createdBy' => 1,\n            'dateActiveFrom' => '2024-05-28T10:00:00',\n            'dateActiveTo' => '2024-05-29T10:00:00',\n            'dateCreate' => '2024-05-27T10:00:00',\n            'detailPicture' => [\n                'fileData' => ['detailPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            ],\n            'detailText' => '',\n            'detailTextType' => 'text',\n            'height' => 100,\n            'iblockSectionId' => 47,\n            'length' => 100,\n            'measure' => 5,\n            'modifiedBy' => 1,\n            'previewPicture' => [\n                'fileData' => ['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            ],\n            'previewText' => '',\n            'previewTextType' => 'text',\n            'purchasingCurrency' => 'RUB',\n            'purchasingPrice' => 1000,\n            'quantity' => 10,\n            'quantityReserved' => 1,\n            'quantityTrace' => 'Y',\n            'recurSchemeLength' => 1,\n            'recurSchemeType' => 'D',\n            'sort' => 100,\n            'subscribe' => 'Y',\n            'trialPriceId' => 175,\n            'vatId' => 1,\n            'vatIncluded' => 'Y',\n            'weight' => 100,\n            'width' => 100,\n            'withoutOrder' => 'Y',\n            'xmlId' => '',\n            'parentId' => 1275,\n            'property258' => 'test',\n            'property259' => ['test1', 'test2'],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating a Bitrix24 CRM Item using PHP (B24PhpSdk)\nDESCRIPTION: PHP example using the B24PhpSdk to update a CRM item. This demonstrates updating fields like title and date modified, with error handling.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-update.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $entityTypeId = 1; // Set your entity type ID\n    $id = 123; // Set the ID of the item to update\n    $fields = [\n        'TITLE' => 'Updated Title',\n        'DATE_MODIFIED' => (new DateTime())->format(DateTime::ATOM), // Example DateTime field\n        // Add other fields as necessary\n    ];\n\n    $itemService = $serviceBuilder->getCRMScope()->item();\n    $updateResult = $itemService->update($entityTypeId, $id, $fields);\n\n    if ($updateResult->isSuccess()) {\n        print(\"Item updated successfully: \" . json_encode($updateResult));\n    } else {\n        print(\"Failed to update item.\");\n    }\n} catch (Throwable $e) {\n    print(\"An error occurred: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Lead using PHP\nDESCRIPTION: This code snippet shows how to update a CRM lead using the `CRest::call` function in PHP.  It prepares an array of fields to be updated, then calls the `crm.lead.update` method with the lead ID, fields, and options. It requires the Bitrix24 REST API library to be included.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-update.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$fields = [\n        'TITLE' => $sTitle,\n        'COMPANY_ID' => 123,\n        'PHONE' => [\n            [\n                'VALUE' => '555888',\n                'VALUE_TYPE' => 'WORK',\n            ],\n        ],\n    ];\n    \n    $result = CRest::call(\n        'crm.lead.update',\n        [\n            'id' => 1608,\n            'fields' => $fields,\n        ],\n        [\n            'REGISTER_SONET_EVENT' => 'Y',\n        ]     \n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Comment with JavaScript\nDESCRIPTION: Example of using the Bitrix24 JavaScript SDK to get CRM timeline comment information. Uses BX24.callMethod with a comment ID parameter and handles the response with a callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.timeline.comment.get\",\n    {\n        id: 999,\n    }, result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Lead with cURL OAuth in Bitrix24\nDESCRIPTION: Example of how to retrieve a CRM lead with ID 250 using cURL with OAuth authentication. The request includes entityTypeId, id, useOriginalUfNames parameters and an access token for authentication.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":1,\"id\":250,\"useOriginalUfNames\":\"N\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.get\n```\n\n----------------------------------------\n\nTITLE: Getting Contacts Associated with a Deal in Bitrix24 via PHP\nDESCRIPTION: This PHP snippet utilizes the `B24PhpSdk` library to retrieve contacts associated with a deal.  It sets a `$dealId`, calls the `itemsGet` method, and then iterates through the returned contact items, printing `CONTACT_ID`, `SORT`, `ROLE_ID`, and `IS_PRIMARY` for each.  Error handling is included to catch any exceptions and print the error message.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/contacts/crm-deal-contact-items-get.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $dealId = 123; // Replace with the actual deal ID\n    $result = $serviceBuilder\n        ->getCRMScope()\n        ->dealContact()\n        ->itemsGet($dealId);\n\n    foreach ($result->getDealContacts() as $item) {\n        print(\"CONTACT_ID: \" . $item->CONTACT_ID . \"\\n\");\n        print(\"SORT: \" . $item->SORT . \"\\n\");\n        print(\"ROLE_ID: \" . $item->ROLE_ID . \"\\n\");\n        print(\"IS_PRIMARY: \" . $item->IS_PRIMARY . \"\\n\");\n    }\n} catch (Throwable $e) {\n    print(\"Error: \" . $e->getMessage());\n}\n\n```\n\n----------------------------------------\n\nTITLE: Form Submission Handler with XMLHttpRequest in JavaScript\nDESCRIPTION: JavaScript code that intercepts the form submission event and submits the form data asynchronously using XMLHttpRequest. It handles the response, parses JSON, and displays messages to the user.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\n$(document).ready(function () {\n    $('#auto_form').on('submit', function (el) {//event submit form\n        el.preventDefault();//the default action of the event will not be triggered\n        var formData = new FormData(this);\n        var xhr = new XMLHttpRequest();\n        xhr.open(\"POST\", 'auto_form.php');\n        xhr.onreadystatechange = function () {\n            if (this.readyState === 4)\n            {\n                if (this.status >= 200 && this.status < 400)\n                {\n                    // Success!\n                    var resp = this.responseText;\n                    try\n                    {\n                        var json = JSON.parse(resp);\n                        if (typeof json.message !== 'undefined')\n                        {\n                            alert(json.message);\n                        }\n                    } catch (e)\n                    {\n                        return false;\n                    }\n                }\n                else\n                {\n                    alert('error');\n                }\n            }\n        };\n        xhr.send(formData);\n    });\n});\n```\n\n----------------------------------------\n\nTITLE: Fetching Quote Statuses with BX24 JavaScript API\nDESCRIPTION: Makes a REST API call to 'crm.status.list' endpoint to retrieve quote statuses and displays them in an HTML table. The code handles status colors and semantic values, requiring the 'crm' scope and administrative CRM access.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-get-lists/quote-statuses-with-semantics.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod('crm.status.list', { filter: { ENTITY_ID: 'QUOTE_STATUS' } }, function(resultQuote) {\n    if (resultQuote.error()) {\n        console.error(resultQuote.error());\n    } else {\n        if (resultQuote.data().length > 0) {\n            var table = document.createElement('table');\n\n            var thead = document.createElement('thead');\n            var trHead = document.createElement('tr');\n            ['STATUS ID', 'NAME', 'SEMANTICS'].forEach(function(text) {\n                var th = document.createElement('th');\n                th.textContent = text;\n                trHead.appendChild(th);\n            });\n            thead.appendChild(trHead);\n            table.appendChild(thead);\n\n            var tbody = document.createElement('tbody');\n            resultQuote.data().forEach(function(item) {\n                var tr = document.createElement('tr');\n                if (item.EXTRA && item.EXTRA.COLOR) {\n                    tr.style.color = item.EXTRA.COLOR;\n                }\n                ['STATUS_ID', 'NAME', 'EXTRA.SEMANTICS'].forEach(function(key) {\n                    var td = document.createElement('td');\n                    td.textContent = key.split('.').reduce(function(acc, k) {\n                        return acc && acc[k];\n                    }, item);\n                    tr.appendChild(td);\n                });\n                tbody.appendChild(tr);\n            });\n            table.appendChild(tbody);\n\n            document.body.appendChild(table);\n        }\n    }\n});\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This is an example of an error response from the `crm.item.payment.add` method. The `error` field contains the error code, and the `error_description` field contains a message explaining the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-add.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":0,\n   \"error_description\":\"Сущность с идентификатором №13123000 не существует\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Handling in Quote Creation - PHP\nDESCRIPTION: This snippet handles errors that may arise during quote creation. It verifies whether a company is created successfully before proceeding with the quote creation. If either step fails, an error message is echoed to signify the failure of the respective operation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-product-binding.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n        else\n        {\n            echo 'Error create quote';\n        }\n    }\n    else\n    {\n        echo 'Error create company';\n    }\n    ?>\n```\n\n----------------------------------------\n\nTITLE: Update CRM Requisite via cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to update a CRM requisite using a webhook.  It sends a POST request with the requisite ID and the fields to be updated in JSON format.  Replace the placeholder values with your Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":27,\"fields\":{\"RQ_OKPO\":\"80715150\",\"RQ_OKTMO\":\"45381000000\",\"UF_CRM_1707997209\":\"78\",\"UF_CRM_1708012333\":\"Категория 3\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.requisite.update\n```\n\n----------------------------------------\n\nTITLE: Searching Unconverted Leads with Opportunity > 0 (JS)\nDESCRIPTION: This JavaScript code snippet demonstrates how to search for leads that are not converted and have an opportunity value greater than zero using the Bitrix24 JavaScript API. It uses the `crm.lead.list` method with specified filtering, ordering, and selection parameters. The result is logged to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-list.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n      \"crm.lead.list\",\n      {\n          order: { \"STATUS_ID\": \"ASC\" },\n          filter: { \">OPPORTUNITY\": 0, \"!STATUS_ID\": \"CONVERTED\" },\n          select: [ \"ID\", \"TITLE\", \"STATUS_ID\", \"OPPORTUNITY\", \"CURRENCY_ID\" ],\n      },\n      (result) => {\n          if(result.error())\n          {\n              console.error(result.error());\n          }\n          else\n          {\n              console.dir(result.data());\n              if (result.more())\n              {\n                  result.next();\n              }\n          }\n      }\n  );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Head Product Data using JavaScript in Bitrix24 REST API\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve head product data using the Bitrix24 JavaScript SDK. It calls the catalog.product.sku.get method with the product ID and handles the response or error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/sku/catalog-product-sku-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.sku.get', {\n        'id': 1289\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Product Properties via REST API in Bitrix24 using PHP\nDESCRIPTION: This PHP code updates product properties using the Bitrix24 REST API via the `CRest` class. It initializes variables for the product ID and various property values, including select, multiselect, and file properties. It encodes file contents to base64 before sending to the Bitrix24 API. It also implements the logic for deleting old files.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-change-product-custom-field-values.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$idProduct = 10339;\n\n    $propertyIDSelect = 106;\n    $propertySelectValueID = 85;\n\n    $propertyIDMultiSelect = 105;\n    $propertyMultiSelectValueID = [79, 80, 82];\n\n    $propertyIDFile = 107;\n    $propertyFilePathToPicture = 'pictures/1.jpg';//relative or full path on server\n\n    $propertyIDMultiFile = 108;\n    $propertyMultiFilePathToPicture = [//relative or full path on server\n        'pictures/2.jpg',\n        'pictures/3.jpg',\n        'pictures/4.jpg',\n    ];\n\n    $standardPreviewPicturePath = 'pictures/5.jpg';//relative or full path on server\n    $standardDetailPicturePath = 'pictures/6.jpg';//relative or full path on server\n\n    $arFields = [\n        'NAME' => 'Example product 2',\n        'CURRENCY_ID' => 'USD',\n        'PRICE' => 4900,\n        'SORT' => 500\n    ];\n\n    $result = CRest::call(\n        'crm.product.get',\n        [\n            'id' => $idProduct\n        ]\n    );\n    if (!empty($result['result']))\n    {\n        $arProduct = $result['result'];\n        if ($propertyIDSelect > 0 && $propertySelectValueID > 0)\n        {\n            $arFields['PROPERTY_' . $propertyIDSelect] = $propertySelectValueID;\n        }\n\n        if ($propertyIDMultiSelect > 0 && is_array($propertyMultiSelectValueID) && count($propertyMultiSelectValueID) > 0)\n        {\n            $arFields['PROPERTY_' . $propertyIDMultiSelect] = $propertyMultiSelectValueID;\n        }\n\n        if ($propertyIDFile > 0 && !empty($propertyFilePathToPicture) && file_exists($propertyFilePathToPicture))\n        {\n            $fileName = end(explode('/', $propertyFilePathToPicture));\n            $arFields['PROPERTY_' . $propertyIDFile] = [\n                \"fileData\" => [\n                    $fileName,\n                    base64_encode(file_get_contents($propertyFilePathToPicture))\n                ]\n            ];\n        }\n        if ($propertyIDMultiFile > 0 &&\n            is_array($propertyMultiFilePathToPicture) &&\n            count($propertyMultiFilePathToPicture) > 0)\n        {\n            foreach ($propertyMultiFilePathToPicture as $path)\n            {\n                if (file_exists($path))\n                {\n                    $fileName = end(explode('/', $path));\n                    $arFields['PROPERTY_' . $propertyIDMultiFile][] = [\n                        \"fileData\" => [\n                            $fileName,\n                            base64_encode(file_get_contents($path))\n                        ]\n                    ];\n                }\n            }\n        }\n        if (!empty($standardPreviewPicturePath) && file_exists($standardPreviewPicturePath))\n        {\n            $fileName = end(explode('/', $standardPreviewPicturePath));\n            $arFields['PREVIEW_PICTURE'] = [\n                \"fileData\" => [\n                    $fileName,\n                    base64_encode(file_get_contents($standardPreviewPicturePath))\n                ]\n            ];\n        }\n        if (!empty($standardDetailPicturePath) && file_exists($standardDetailPicturePath))\n        {\n            $fileName = end(explode('/', $standardDetailPicturePath));\n            $arFields['DETAIL_PICTURE'] = [\n                \"fileData\" => [\n                    $fileName,\n                    base64_encode(file_get_contents($standardDetailPicturePath))\n                ]\n            ];\n        }\n\n        //delete old files\n        $arPropsFile = [\n            'PREVIEW_PICTURE',\n            'DETAIL_PICTURE',\n        ];\n        if ($propertyIDFile > 0)\n        {\n            $arPropsFile[] = 'PROPERTY_' . $propertyIDFile;\n        }\n        if ($propertyIDMultiFile > 0)\n        {\n            $arPropsFile[] = 'PROPERTY_' . $propertyIDMultiFile;\n        }\n        foreach ($arPropsFile as $prop)\n        {\n\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Activities and Timeline Items with Bitrix24 REST API\nDESCRIPTION: This method fetches CRM activities or timeline items based on the entity type and ID. It uses the Bitrix24 REST API methods 'crm.activity.list' for activities and 'crm.timeline.historyitem.list' for timeline items.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nif (!this.validateEntityTypeIdAndEntityId())\n{\n    return;\n}\nif (this.getItemTypeId() === ITEM_ACTIVITY)\n{\n    const data = {\n        select: ['*'],\n        filter: {\n            'OWNER_TYPE_ID': this.getEntityTypeId(),\n            'OWNER_ID': this.getEntityId(),\n        },\n    };\n    const callback = (result) => {\n        if (result.error())\n        {\n            this.renderDangerAlert(result.error());\n            return;\n        }\n        const activities = result.data();\n        this.#itemIdNode.innerHTML = '';\n        activities.forEach((activity) => {\n            const option = document.createElement('option');\n            option.innerText = `[${activity.ID}] ${activity.SUBJECT} | ${activity.PROVIDER_ID}`;\n            option.value = activity.ID;\n            this.#itemIdNode.append(option);\n        });\n    };\n    BX24.callMethod('crm.activity.list', data, callback);\n    return;\n}\nconst data = {\n    select: ['*'],\n    filter: {\n        'bindings': {\n            'entityTypeId': this.getEntityTypeId(),\n            'entityId': this.getEntityId(),\n        },\n    },\n};\nconst callback = (result) => {\n    if (result.error())\n    {\n        this.renderDangerAlert(result.error());\n        return;\n    }\n    const items = result.data().items;\n    items.forEach((item) => {\n        let option = document.createElement('option');\n        const title = item?.layout?.header?.title ?? 'Undefined';\n        const id = item.id;\n        option.value = id;\n        option.innerText = `[${id}] ${title}`;\n        this.#itemIdNode.append(option);\n    });\n};\nBX24.callMethod('crm.timeline.historyitem.list', data, callback);\n```\n\n----------------------------------------\n\nTITLE: Update To-Do Description with JavaScript\nDESCRIPTION: This JavaScript code snippet utilizes the `BX24.callMethod` function to update a to-do activity's description. It passes the activity ID, owner type, owner ID, and the new description as parameters to the `crm.activity.todo.updateDescription` method. The code also includes error handling to log any errors to the console and displays the result data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/todo/crm-activity-todo-update-description.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n        \"crm.activity.todo.updateDescription\",\n        {\n            id: 999,\n            ownerTypeId: 2,\n            ownerId: 1,\n            value: 'Новое описание дела'\n        },\n        result => {\n            if (result.error())\n                console.error(result.error());\n            else\n                console.dir(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Updating Product Offer Using PHP REST API Call\nDESCRIPTION: Makes a REST API call to update a Bitrix24 catalog product offer using PHP. Includes comprehensive product details like images, dimensions, pricing and custom properties. Requires the crest.php library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/offer/catalog-product-offer-update.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.offer.update',\n    [\n        'id' => 1286,\n        'fields' => [\n            'iblockId' => 24,\n            'name' => 'Вариация товара',\n            'active' => 'Y',\n            'barcodeMulti' => 'Y',\n            'canBuyZero' => 'Y',\n            'code' => 'Tovar',\n            // ... additional fields ...\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result); \necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Settings with BX24.userOption.get in JavaScript\nDESCRIPTION: The BX24.userOption.get method returns the value of a setting with the specified name for the current user. It takes a single string parameter 'name' which is the code of the parameter to retrieve.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/options/bx24-user-option-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.userOption.get(string name): mixed;\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Request with BX24.callBatch in JavaScript\nDESCRIPTION: Example of sending a batch request using the BX24.callBatch method in JavaScript. The request includes two commands: getting current user and retrieving department information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/how-to-call-rest-api/batch.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nBX24.callBatch({\n    get_user: ['user.current', {}],\n    get_department: {\n        method: 'department.get',\n        params: {\n            ID: '$result[get_user][UF_DEPARTMENT][0]'\n        }\n    }\n}, function(result) {\n\n    console.log('Raw result: ', result);\n    console.log('get_user result: ', result.get_user.data());\n    console.log('get_department result: ', result.get_department.data());\n});\n```\n\n----------------------------------------\n\nTITLE: Updating a Lead via cURL (OAuth)\nDESCRIPTION: This code snippet shows how to update a CRM lead using cURL with OAuth authentication in Bitrix24. It sends a POST request with the lead ID, updated fields, and the access token to the Bitrix24 REST API endpoint. Replace the placeholder values for Bitrix24 address and access token with your actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-update.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1608,\"fields\":{\"TITLE\":\"ИП Титов\",\"NAME\":\"Глеб\",\"SECOND_NAME\":\"Егорович\",\"LAST_NAME\":\"Титов\",\"STATUS_ID\":\"NEW\",\"OPENED\":\"Y\",\"ASSIGNED_BY_ID\":1,\"CURRENCY_ID\":\"USD\",\"OPPORTUNITY\":12500,\"PHONE\":[{\"VALUE\":\"555888\",\"VALUE_TYPE\":\"WORK\"}],\"WEB\":[{\"VALUE\":\"www.mysite.com\",\"VALUE_TYPE\":\"WORK\"}]},\"options\":{\"REGISTER_SONET_EVENT\":\"Y\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.lead.update\n```\n\n----------------------------------------\n\nTITLE: Using CRest SDK\nDESCRIPTION: This code shows how to use the CRest SDK in PHP to interact with the Bitrix24 REST API. It includes the crest.php file to enable the SDK, then uses the CRest::call function to call the crm.deal.add method, creating a new deal with given fields. The response from Bitrix24 is then processed to either display an error message or print the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/how-to-use-examples.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php'); // подключение CRest PHP SDK\n\n// выполнение запроса к REST API\n$result = CRest::call(\n    'crm.deal.add',\n    [\n        'fields' => [\n            'TITLE' => 'New Deal',\n            'TYPE_ID' => 'SALE',\n            'STAGE_ID' => 'NEW'\n        ]\n    ]\n);\n\n// Обработка ответа от Битрикс24\nif ($result['error']) {\n        echo 'Error: '.$result['error_description'];\n    } else {\n        print_r($result['result']);\n}\n```\n\n----------------------------------------\n\nTITLE: Get User Data Using im.user.list.get in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the `im.user.list.get` method in JavaScript to retrieve user data. It uses the `BX24.callMethod` function to make the API call, passing an array of user IDs. The result is handled within the callback function, logging errors or data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/chats/users/im-user-list-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'im.user.list.get',\n        {ID: [4,5]},\n        function(result){\n            if(result.error())\n            {\n                console.error(result.error().ex);\n            }\n            else\n            {\n                console.log(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Bitrix24 Company Fields Configuration\nDESCRIPTION: Comments showing available company fields in Bitrix24 REST API including UTM parameters, contact references, and multifield types. These are optional fields that can be used when creating or updating company records.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-add-company.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n//\"DATE_MODIFY\" => '',//Modified on[datetime]\n//\"CONTACT_ID\" => '',//Contact[crm_contact]// CRest::call('crm.contact.list');\n//\"LEAD_ID\" => '',//Lead[crm_lead]\n//\"ORIGINATOR_ID\" => '',//External source[string]\n//\"ORIGIN_ID\" => '',//Item ID in data source[string]\n//\"ORIGIN_VERSION\" => '',//Original version[string]\n//\"UTM_SOURCE\" => '',//Ad system[string]\n//\"UTM_MEDIUM\" => '',//Medium[string]\n//\"UTM_CAMPAIGN\" => '',//Ad campaign UTM[string]\n//\"UTM_CONTENT\" => '',//Campaign contents[string]\n//\"UTM_TERM\" => '',//Campaign search term[string]\n//\"WEB\" => '',//Website[crm_multifield]\n//\"IM\" => '',//Messenger[crm_multifield]\n```\n\n----------------------------------------\n\nTITLE: Parameter Structure for crm.item.batchImport Method in Bitrix24 REST API\nDESCRIPTION: Describes the parameters required to execute the crm.item.batchImport method for importing multiple CRM elements. Parameters include entityTypeId for specifying the CRM object type, data array for element field values, and useOriginalUfNames for controlling the format of custom field names.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/import/crm-item-batch-import.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Название**\n`тип`          | **Описание** ||\n|| **entityTypeId***\n[`integer`][1] | Идентификатор системного или [пользовательского типа](../user-defined-object-types/index.md), для которого нужно создать элемент ||\n|| **data***\n[`array`][1] | Массив значений полей элементов. Можно рассматривать его как массив, каждый элемент которого содержит набор полей `fields`, описанный в методе [crm.item.import](crm-item-import.md) ||\n|| **useOriginalUfNames**\n[`boolean`][1] | Параметр для управления форматом имен пользовательских полей в запросе и ответе.   \nВозможные значения:\n\n- `Y` — оригинальные имена пользовательских полей, например UF_CRM_2_1639669411830\n- `N` — имена пользовательских полей в camelCase, например ufCrm_2_1639669411830\n\nПо умолчанию — `N` ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking List with JavaScript in Bitrix24 REST API\nDESCRIPTION: This JavaScript example demonstrates how to call the booking.v1.booking.list method with filters for date range and client entities. The code includes filter parameters for date range and client entities, as well as sorting options.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-list.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBX24.callMethod(\n    \"booking.v1.booking.list\",\n    {\n        filter: {\n            within: {\n                dateFrom: 0,\n                dateTo: 1739262600,\n            },\n            client: {\n                entities: [\n                    {\n                        \"code\": \"CONTACT\",\n                        \"module\": \"crm\",\n                        \"id\": \"1\"\n                    },\n                    {\n                        \"code\": \"COMPANY\",\n                        \"module\": \"crm\",\n                        \"id\": \"1\"\n                    }\n                ]\n            }\n        },\n        order: {\n            id: \"ASC\",\n            dateFrom: \"DESC\",\n            dateTo: \"ASC\",\n        }\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Add Basket Item via cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to add a basket item to a sale order using the `sale.basketitem.add` method with cURL and OAuth. It sends a POST request with JSON data containing the `orderId`, `quantity`, `productId`, `currency`, and the OAuth `auth` token for authentication. Replace the placeholder values with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"fields\":{\"orderId\":5147,\"quantity\":2,\"productId\":6544,\"currency\":\"RUB\"},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.basketitem.add\n```\n\n----------------------------------------\n\nTITLE: Updating a Lead using PHP (B24PhpSdk)\nDESCRIPTION: This code snippet demonstrates how to update a CRM lead using the B24PhpSdk in PHP. It retrieves the CRM scope, prepares the lead ID, fields to be updated, and update options, and then calls the `lead()->update()` method, handling potential exceptions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-update.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\ntry {\n        $id = 123; // Example lead ID\n        $fields = [\n            'TITLE' => 'Updated Lead Title',\n            'NAME' => 'John',\n            'LAST_NAME' => 'Doe',\n            'BIRTHDATE' => (new DateTime('1980-01-01'))->format(DateTime::ATOM),\n            'COMPANY_TITLE' => 'Example Company',\n            'STATUS_ID' => 'NEW',\n            'COMMENTS' => 'Updated comments for the lead.',\n            'PHONE' => '1234567890',\n            'EMAIL' => 'john.doe@example.com',\n        ];\n        $params = [\n            'REGISTER_SONET_EVENT' => 'Y',\n        ];\n        $result = $serviceBuilder->getCRMScope()->lead()->update($id, $fields, $params);\n        if ($result->isSuccess()) {\n            print($result->getCoreResponse()->getResponseData()->getResult()[0]);\n        } else {\n            print(\"Update failed.\");\n        }\n    } catch (Throwable $e) {\n        print(\"Error: \" . $e->getMessage());\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Lead with cURL Webhook in Bitrix24\nDESCRIPTION: Example of how to retrieve a CRM lead with ID 250 using cURL with a webhook. The request includes entityTypeId, id, and useOriginalUfNames parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":1,\"id\":250,\"useOriginalUfNames\":\"N\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.item.get\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Bitrix24 Lead Operations in PHP\nDESCRIPTION: Handles error responses from Bitrix24 REST API lead operations. Checks for lead creation and retrieval errors, schedules a callback activity, and formats error messages into an array.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-add-objects-with-crm-mode.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"END_TIME\" => date(\"Y-m-d H:i:s\",time()+3600),\n\"SUBJECT\" => \"Сall back\",\n\"DESCRIPTION\" => \"Call within an hour\",\n]\n]);\n}\n    \n}else{\n    if(!empty($result['result']['result_error']['add_lead']))\n        $arResult[] = 'error add lead: '.$result['result']['result_error']['add_lead']['error_description'];\n    if(!empty($result['result']['result_error']['get_lead']))\n        $arResult[] = 'error get new lead: '.$result['result']['result_error']['get_lead']['error_description'];\n}\n```\n\n----------------------------------------\n\nTITLE: Using bx24.js for API Call\nDESCRIPTION: This snippet shows how to use the bx24.js library to make an API call to Bitrix24. It calls the crm.deal.add method to create a new deal with the specified fields. The code also includes error handling to log any errors that occur during the API call and logs the response data on success.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/how-to-use-examples.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n<script src=\"//api.bitrix24.com/api/v1/\"></script>\n\n<script>\nBX24.callMethod(\n    \"crm.deal.add\",\n    {\n        fields: {\n        TITLE: \"New Deal\",\n        TYPE_ID: \"SALE\",\n        STAGE_ID: \"NEW\"\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.log(result.data());\n        }\n    }\n);\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Log Message Using cURL with OAuth in Bitrix24 REST API\nDESCRIPTION: This snippet shows how to get timeline log message information using cURL with OAuth authentication. It requires the log message ID and an access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.logmessage.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service List using JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24.callMethod function in JavaScript to call the catalog.product.service.list method. It includes error handling and logging of the result data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/service/catalog-product-service-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"catalog.product.service.list\", {\n        \"select\": [\n            \"id\",\n            \"iblockId\",\n            \"name\",\n            \"active\",\n            \"available\",\n            \"bundle\",\n            \"code\",\n            \"createdBy\",\n            \"dateActiveFrom\",\n            \"dateActiveTo\",\n            \"dateCreate\",\n            \"detailPicture\",\n            \"detailText\",\n            \"detailTextType\",\n            \"iblockSectionId\",\n            \"modifiedBy\",\n            \"previewPicture\",\n            \"previewText\",\n            \"previewTextType\",\n            \"sort\",\n            \"timestampX\",\n            \"type\",\n            \"vatId\",\n            \"vatIncluded\",\n            \"xmlId\",\n            \"property94\",\n            \"property95\",\n        ],\n        \"filter\": {\n            \"iblockId\": 23,\n            \">id\": 10,\n            \"@vatId\": [1, 2],\n        },\n        \"order\": {\n            \"id\": \"desc\",\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using BX24.fitWindow Method in JavaScript\nDESCRIPTION: The BX24.fitWindow method adjusts the application frame size to match the content dimensions. It can only increase the frame size due to browser limitations. An optional callback function can be provided.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/additional-functions/bx24-fit-window.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvoid BX24.fitWindow([Function callback])\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Log Messages with cURL (Webhook)\nDESCRIPTION: Example of retrieving CRM timeline log messages using cURL with webhook authentication. The request includes entity type and ID, ordering by creation date, and pagination parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":1,\"entityId\":1,\"order\":{\"created\":\"desc\"},\"start\":1}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.timeline.logmessage.list\n```\n\n----------------------------------------\n\nTITLE: Get Contact User Field via JavaScript\nDESCRIPTION: This JavaScript code utilizes the BX24.callMethod function to retrieve a contact user field. It calls the 'crm.contact.userfield.get' method with the user field ID. The response is handled within a callback function, logging either the error or the retrieved data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.userfield.get',\n    {\n        id: 399,\n    },\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: BX24.selectAccess Usage Example in JavaScript\nDESCRIPTION: Example demonstrating how to call BX24.selectAccess with a callback function that processes the selected access rights. The callback receives an array of objects with id and name properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/system-dialogues/bx24-select-access.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.selectAccess(\n    function(params)\n    {\n        for (var i in params)\n        {\n            let param = params[i];\n            BX('name' + i).value = param.name;\n            BX('id'  + i).value = param.id;\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Request with cURL using OAuth in Bash\nDESCRIPTION: Example of sending a batch request using cURL with OAuth authentication. The request includes two commands: getting current user and retrieving department information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/how-to-call-rest-api/batch.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n        \"halt\": 0,\n        \"cmd\": {\n            \"get_user\": \"user.current\",\n            \"get_department\": \"department.get?ID=$result[get_user][UF_DEPARTMENT][0]\"\n        },\n        \"auth\":\"**put_access_token_here**\"\n    }' \\\nhttps://**put_your_bitrix24_address**/rest/batch\n```\n\n----------------------------------------\n\nTITLE: Updating a CRM Quote via Javascript\nDESCRIPTION: This Javascript snippet demonstrates how to update a CRM quote's status. It uses the BX24.callMethod to invoke the crm.quote.update method, passing the quote ID and the fields to be updated. It also includes error handling and logging of the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/quote/crm-quote-update.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    var id = prompt(\"Введите ID\");\n    BX24.callMethod(\n        \"crm.quote.update\",\n        {\n            id: id,\n            fields: { \"STATUS_ID\": \"SENT\" }    \n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n                console.info(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Opening Slider in Bitrix24 via Javascript\nDESCRIPTION: This JavaScript code snippet demonstrates how to open a slider in Bitrix24 with a custom interface using the BX24.openApplication method. It passes an 'action' parameter to the application to indicate the desired content for the slider and defines a callback function to be executed when the slider is closed.  The `action` parameter will be sent as POST parameter to the application's URL.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/open-application.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"<script>\n    \n    BX24.openApplication(\n        {\n            'action': 'display_setting' // ваши произвольные данные, передаваемые приложению для отображения в слайдере\n        },\n        function()\n        {\n            // этот обработчик сработает, когда слайдер будет закрыт\n            alert('Application closed!')\n        }\n    );\n   \n</script>\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Smart Process Fields using cURL (OAuth) in Bash\nDESCRIPTION: This snippet shows how to make a POST request to the Bitrix24 REST API using cURL with OAuth authentication to retrieve CRM smart process field information. It requires the Bitrix24 address and access token to be replaced with actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.type.fields?auth=**put_access_token_here**\n```\n\n----------------------------------------\n\nTITLE: Bootstrap Form Structure for Bitrix24 CRM Entity\nDESCRIPTION: HTML form structure using Bootstrap for styling. It displays standard and custom fields separately and includes a submit button. The form supports file uploads and handles both create and update operations.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_17\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"container\">\n        <form id=\"auto_form\" action=\"\" enctype=\"multipart/form-data\" method=\"post\">\n            <?if (!empty($arResult['ITEM']['ID']))://for update entity?>\n                <input type=\"hidden\" name=\"form[ID]\" value=\"<?=$arResult[ 'ITEM' ][ 'ID' ]?>\">\n                <?endif;?>\n            <h2>Standard fields</h2>\n            <div class=\"row\">\n                <?=$sResult?>\n            </div>\n            <h2>Custom fields</h2>\n            <div class=\"row\">\n                <?=$sResultCustom?>\n            </div>\n            <div class=\"row\">\n                <div class=\"col-sm-10 mt-5\">\n                    <input type=\"submit\" class=\"btn btn-primary\" value=\"Submit\">\n                </div>\n            </div>\n        </form>\n    </div>\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM activities using PHP\nDESCRIPTION: Example of using PHP with the CRest library to retrieve CRM activities for a contact with ID 102, sorting by ID in descending order and selecting all fields plus communications.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.activity.list',\n    [\n        'order' => [ 'ID' => 'DESC' ],\n        'filter' => [\n            'OWNER_TYPE_ID' => 3,\n            'OWNER_ID' => 102\n        ],\n        'select' => [ '*', 'COMMUNICATIONS' ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Deleting User Field in CRM Deal - JavaScript\nDESCRIPTION: This snippet demonstrates how to call the crm.deal.userfield.delete method using JavaScript. It prompts the user for the ID of the user field to delete and handles the response from the service, logging any errors or successful responses to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/user-defined-fields/crm-deal-userfield-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.deal.userfield.delete\",\n    {\n        id: id\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Lead Field - JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve a custom user field for leads using the CRM API. It prompts the user for an ID, sends a request to the API, and handles the success and error responses. The 'id' parameter is essential for identifying the user field to be retrieved.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/userfield/crm-lead-userfield-get.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.lead.userfield.get\",\n    {\n        id: id\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This JSON snippet shows a successful response from the crm.contact.details.configuration.set method. It includes a result boolean and time information about the request execution.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-set.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1724677217.639681,\n        \"finish\": 1724677217.986853,\n        \"duration\": 0.3471717834472656,\n        \"processing\": 0.01840806007385254,\n        \"date_start\": \"2024-08-26T15:00:17+02:00\",\n        \"date_finish\": \"2024-08-26T15:00:17+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Catalog Product to Basket using JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to add a catalog product to the basket. It specifies the method name (`sale.basketitem.addCatalogProduct`) and an object containing the `fields` parameter, including `orderId`, `quantity`, `productId`, and `currency`. The code then handles the success or failure of the method call, logging errors or data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add-catalog-product.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n        \"sale.basketitem.addCatalogProduct\",\n        {\n            fields: {\n                orderId: 5147,\n                quantity: 1,\n                productId: 4347,\n                currency: 'RUB',\n            }\n        },\n    )\n        .then(\n            function(result)\n            {\n                if (result.error())\n                {\n                    console.error(result.error());\n                }\n                else\n                {\n                    console.log(result.data());\n                }\n            },\n            function(error)\n            {\n                console.info(error);\n            }\n        );\n```\n\n----------------------------------------\n\nTITLE: Force Common CRM Config via cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to force a common CRM item details configuration for deals in a specific category using OAuth. It sends a POST request to the Bitrix24 REST API endpoint with the `entityTypeId` set to 2 (deal) and the `dealCategoryId` in the `extras` parameter set to 9, and includes an `auth` parameter with the access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/item-details-configuration/crm-item-details-configuration-forceCommonScopeForAll.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":2,\"extras\":{\"dealCategoryId\":9},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.details.configuration.forceCommonScopeForAll\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bank Details with JavaScript Bitrix24 SDK\nDESCRIPTION: Example of using the Bitrix24 JavaScript SDK to retrieve bank details, including error handling and pagination support using the callMethod function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.bankdetail.list\",\n    {\n        order: { \"DATE_CREATE\": \"ASC\" },\n        filter: { \"COUNTRY_ID\": \"1\" },\n        select: [ \"ENTITY_ID\", \"ID\", \"NAME\" ]\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n        {\n            console.dir(result.data());\n            if(result.more())\n                result.next();\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Processing Bitrix24 Contact Creation Response in PHP\nDESCRIPTION: PHP code that handles the response from a Bitrix24 contact creation API call. Includes error handling and JSON response formatting based on different result scenarios.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-add-contact.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n                //\"UTM_TERM\" => '',//Campaign search term[string]\n                //\"WEB\" => '',//Website[crm_multifield]\n                //\"IM\" => '',//Messenger[crm_multifield]\n            ]\n        ]\n    );\n    if(!empty($result['result'])){\n        echo json_encode(['message' => 'Contact add']);\n    }elseif(!empty($result['error_description'])){\n        echo json_encode(['message' => 'Contact not added: '.$result['error_description']]);\n    }else{\n        echo json_encode(['message' => 'Contact not added']);\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Calendar Events with PHP\nDESCRIPTION: This PHP example shows how to retrieve company calendar events using the CRest library. It calls the calendar.event.get method with parameters for the company calendar and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'calendar.event.get',\n    [\n        'type' => 'company_calendar',\n        'ownerId' => '',\n        'forCurrentUser' => false\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Bitrix24 REST API Order Response Example\nDESCRIPTION: This JSON snippet illustrates the structure of the response returned by a Bitrix24 REST API call when fetching order details.  It includes information about the order's properties, items, payments, and shipments. The \"result\" object contains the core order information, nested with details about each aspect of the order.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/order/sale-order-get.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"order\": {\n            \"accountNumber\": \"392\",\n            \"additionalInfo\": \"\",\n            \"affiliateId\": null,\n            \"basketItems\": [\n                {\n                    \"barcodeMulti\": \"N\",\n                    \"basePrice\": 980,\n                    \"canBuy\": \"Y\",\n                    \"catalogXmlId\": \"cbc2957f-09fc-4b2a-b9de-6f925c4c9047\",\n                    \"currency\": \"RUB\",\n                    \"customPrice\": \"N\",\n                    \"dateInsert\": \"2024-02-28T17:35:06+03:00\",\n                    \"dateRefresh\": null,\n                    \"dateUpdate\": \"2024-02-28T17:37:08+03:00\",\n                    \"detailPageUrl\": \"\",\n                    \"dimensions\": \"a:3:{s:5:\\\"WIDTH\\\"\\;N;s:6:\\\"HEIGHT\\\"\\;N;s:6:\\\"LENGTH\\\"\\;N;}\",\n                    \"discountCoupon\": \"\",\n                    \"discountName\": \"\",\n                    \"discountPrice\": 0,\n                    \"discountValue\": \"\",\n                    \"fuserId\": 4,\n                    \"id\": \"255\",\n                    \"lid\": \"s1\",\n                    \"measureCode\": \"796\",\n                    \"measureName\": \"шт\",\n                    \"module\": \"catalog\",\n                    \"name\": \"Футболка Мужской Огонь\",\n                    \"notes\": \"BASE\",\n                    \"orderId\": \"236\",\n                    \"price\": 980,\n                    \"priceTypeId\": 1,\n                    \"productId\": 348,\n                    \"productPriceId\": 112,\n                    \"productProviderClass\": \"\\\\Bitrix\\\\Catalog\\\\Product\\\\CatalogProvider\",\n                    \"productXmlId\": \"1000000386\",\n                    \"properties\": [\n                        {\n                            \"basketId\": 255,\n                            \"code\": \"CATALOG.XML_ID\",\n                            \"id\": 139,\n                            \"name\": \"Catalog XML_ID\",\n                            \"sort\": 100,\n                            \"value\": \"cbc2957f-09fc-4b2a-b9de-6f925c4c9047\",\n                            \"xmlId\": \"bx_65df52a9ac502\"\n                        },\n                        {\n                            \"basketId\": 255,\n                            \"code\": \"PRODUCT.XML_ID\",\n                            \"id\": 140,\n                            \"name\": \"Product XML_ID\",\n                            \"sort\": 100,\n                            \"value\": \"1000000386\",\n                            \"xmlId\": \"bx_65df52a9ace55\"\n                        }\n                    ],\n                    \"quantity\": 1,\n                    \"recommendation\": \"\",\n                    \"reservations\": [\n                        {\n                            \"basketId\": 255,\n                            \"dateReserve\": \"2024-02-28T17:36:51+03:00\",\n                            \"dateReserveEnd\": \"2024-03-01T23:00:00+03:00\",\n                            \"id\": 39,\n                            \"quantity\": 1,\n                            \"reservedBy\": null,\n                            \"storeId\": 1\n                        }\n                    ],\n                    \"setParentId\": \"\",\n                    \"sort\": 100,\n                    \"subscribe\": \"N\",\n                    \"type\": \"\",\n                    \"vatIncluded\": \"Y\",\n                    \"vatRate\": 0.2,\n                    \"weight\": 0,\n                    \"xmlId\": \"bx_65df52a9ab47f\"\n                }\n            ],\n            \"canceled\": \"N\",\n            \"clients\": [\n                {\n                    \"entityId\": 6,\n                    \"entityTypeId\": 3,\n                    \"id\": 901,\n                    \"isPrimary\": \"Y\",\n                    \"orderId\": 236,\n                    \"roleId\": 0,\n                    \"sort\": 0\n                }\n            ],\n            \"comments\": \"\",\n            \"companyId\": 0,\n            \"currency\": \"RUB\",\n            \"dateCanceled\": null,\n            \"dateInsert\": \"2024-02-28T17:36:55+03:00\",\n            \"dateLock\": null,\n            \"dateMarked\": null,\n            \"dateStatus\": \"2024-02-28T17:36:38+03:00\",\n            \"dateUpdate\": \"2024-02-28T17:37:11+03:00\",\n            \"deducted\": \"N\",\n            \"discountValue\": 0,\n            \"empCanceledId\": null,\n            \"empMarkedId\": null,\n            \"empStatusId\": 1,\n            \"externalOrder\": \"N\",\n            \"id\": 236,\n            \"id1c\": \"\",\n            \"lid\": \"s1\",\n            \"lockedBy\": \"\",\n            \"marked\": \"N\",\n            \"orderTopic\": \"\",\n            \"payed\": \"N\",\n            \"payments\": [\n                {\n                    \"accountNumber\": \"392\\/1\",\n                    \"comments\": \"\",\n                    \"companyId\": 0,\n                    \"currency\": \"RUB\",\n                    \"dateBill\": \"2024-02-28T17:36:44+03:00\",\n                    \"dateMarked\": null,\n                    \"datePaid\": null,\n                    \"datePayBefore\": null,\n                    \"dateResponsibleId\": null,\n                    \"empMarkedId\": null,\n                    \"empPaidId\": null,\n                    \"empResponsibleId\": null,\n                    \"empReturnId\": null,\n                    \"externalPayment\": \"N\",\n                    \"id\": 123,\n                    \"id1c\": \"\",\n                    \"isReturn\": \"N\",\n                    \"marked\": \"N\",\n                    \"orderId\": 236,\n                    \"paid\": \"N\",\n                    \"payReturnComment\": \"\",\n                    \"payReturnDate\": null,\n                    \"payReturnNum\": \"\",\n                    \"paySystemId\": 48,\n                    \"paySystemIsCash\": \"N\",\n                    \"paySystemName\": \"Оплата картой\",\n                    \"paySystemXmlId\": \"bx_65df3d512af59\",\n                    \"payVoucherDate\": null,\n                    \"payVoucherNum\": \"\",\n                    \"priceCod\": \"0\",\n                    \"psCurrency\": \"\",\n                    \"psInvoiceId\": 2,\n                    \"psResponseDate\": null,\n                    \"psStatus\": \"\",\n                    \"psStatusCode\": \"\",\n                    \"psStatusDescription\": \"\",\n                    \"psStatusMessage\": \"\",\n                    \"psSum\": null,\n                    \"reasonMarked\": \"\",\n                    \"responsibleId\": null,\n                    \"sum\": 1480,\n                    \"updated1c\": \"N\",\n                    \"version1c\": \"\",\n                    \"xmlId\": \"bx_65df530c472fa\"\n                }\n            ],\n            \"personTypeId\": 3,\n            \"personTypeXmlId\": \"\",\n            \"price\": 1480,\n            \"propertyValues\": [\n                {\n                    \"code\": \"FIO\",\n                    \"id\": 1514,\n                    \"name\": \"Имя Фамилия\",\n                    \"orderPropsId\": 20,\n                    \"orderPropsXmlId\": null,\n                    \"value\": \"Артём Гавриленко\"\n                },\n                {\n                    \"code\": \"EMAIL\",\n                    \"id\": 1515,\n                    \"name\": \"E-Mail1\",\n                    \"orderPropsId\": 21,\n                    \"orderPropsXmlId\": \"bx_63a082af0d250\",\n                    \"value\": \"Artemlxvl@my-mail.ru\"\n                },\n                {\n                    \"code\": \"PHONE\",\n                    \"id\": 1516,\n                    \"name\": \"Телефон1\",\n                    \"orderPropsId\": 22,\n                    \"orderPropsXmlId\": \"bx_63a082a06864d\",\n                    \"value\": \"79814561312\"\n                },\n                {\n                    \"code\": \"CONTACT_ADDRESS\",\n                    \"id\": 1517,\n                    \"name\": \"Адрес\",\n                    \"orderPropsId\": 42,\n                    \"orderPropsXmlId\": null,\n                    \"value\": null\n                },\n                {\n                    \"code\": \"ADDRESS\",\n                    \"id\": 1518,\n                    \"name\": \"Адрес доставки\",\n                    \"orderPropsId\": 26,\n                    \"orderPropsXmlId\": null,\n                    \"value\": \"test\"\n                }\n            ],\n            \"reasonCanceled\": \"\",\n            \"reasonMarked\": \"\",\n            \"recountFlag\": \"Y\",\n            \"recurringId\": \"\",\n            \"requisiteLink\": {\n                \"bankDetailId\": 0,\n                \"mcBankDetailId\": 0,\n                \"mcRequisiteId\": 0,\n                \"requisiteId\": 3\n            },\n            \"responsibleId\": 1,\n            \"shipments\": [\n                {\n                    \"accountNumber\": \"392\\/2\",\n                    \"allowDelivery\": \"N\",\n                    \"basePriceDelivery\": 500,\n                    \"canceled\": \"N\",\n                    \"comments\": \"\",\n                    \"companyId\": 0,\n                    \"currency\": \"RUB\",\n                    \"customPriceDelivery\": \"N\",\n                    \"dateAllowDelivery\": null,\n                    \"dateCanceled\": null,\n                    \"dateDeducted\": null,\n                    \"dateInsert\": \"2024-02-28T17:36:41+03:00\",\n                    \"dateMarked\": null,\n                    \"dateResponsibleId\": null,\n                    \"deducted\": \"N\",\n                    \"deliveryDocDate\": null,\n                    \"deliveryDocNum\": \"\",\n                    \"deliveryId\": 1,\n                    \"deliveryName\": \"Доставка курьером\",\n                    \"deliveryXmlId\": \"\",\n                    \"discountPrice\": 0,\n                    \"empAllowDeliveryId\": null,\n                    \"empCanceledId\": null,\n                    \"empDeductedId\": null,\n                    \"empMarkedId\": null,\n                    \"empResponsibleId\": null,\n                    \"externalDelivery\": \"N\",\n                    \"id\": 338,\n                    \"id1c\": \"\",\n                    \"marked\": \"N\",\n                    \"orderId\": 236,\n                    \"priceDelivery\": 500,\n                    \"reasonMarked\": \"\",\n                    \"reasonUndoDeducted\": \"\",\n                    \"responsibleId\": null,\n                    \"shipmentItems\": [\n                        {\n                            \"basketId\": 255,\n                            \"dateInsert\": \"2024-02-28T17:36:53+03:00\",\n                            \"id\": 320\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Log Messages with cURL (OAuth)\nDESCRIPTION: Example of retrieving CRM timeline log messages using cURL with OAuth authentication. The request includes entity type and ID, ordering by creation date, pagination parameters, and OAuth authentication token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":1,\"entityId\":1,\"order\":{\"created\":\"desc\"},\"start\":1,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.logmessage.list\n```\n\n----------------------------------------\n\nTITLE: Add Basket Item via cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to add a basket item to a sale order using the `sale.basketitem.add` method with cURL and a webhook.  It uses POST request with JSON data containing the `orderId`, `quantity`, `productId`, and `currency` for the new basket item. Replace the placeholder values with your actual Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"fields\":{\"orderId\":5147,\"quantity\":2,\"productId\":6544,\"currency\":\"RUB\"}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.basketitem.add\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Fields using JavaScript\nDESCRIPTION: This JavaScript snippet uses the BX24.callMethod to invoke the `sale.payment.getfields` method and handle the response. It logs errors to the console and displays the data if the call is successful.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\\\n    \"sale.payment.getfields\",\\\n    {},\\\n    function(result) {\\\n        if (result.error()) {\\\n            console.error(result.error());\\\n        } else {\\\n            console.info(result.data());\\\n        }\\\n    }\\\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Chat Bot Responses in PHP\nDESCRIPTION: This function generates responses for the chat bot based on user commands. It currently handles the 'что горит' command to report on overdue tasks.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/chat-bots/index.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nfunction getAnswer($command = '', $user) {\n    switch (strtolower($command)) {\n        case 'что горит':\n            $arResult = b24BadTasks($user);\n            break;\n        default:\n            $arResult = array(\n                'title' => 'Туплю-с',\n                'report'  => 'Не соображу, что вы хотите узнать. А может вообще не умею...',\n            );\n    }\n    return $arResult;\n}\n```\n\n----------------------------------------\n\nTITLE: Binding Application to Calendar using placement.bind in JavaScript\nDESCRIPTION: Demonstrates how to use the placement.bind method to associate an application with the calendar. This code specifies the placement type, handler URL, and title for the custom tab in the calendar interface.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-grid-veiw.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'placement.bind',\n    {\n        PLACEMENT:'CALENDAR_GRIDVIEW',\n        HANDLER: 'http://your_site/handler.php',\n        TITLE: 'Custom tab'\n    },\n    (result) => {console.log(result)}\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Deal Contacts using Bitrix24 JavaScript API\nDESCRIPTION: This JavaScript snippet demonstrates how to call the crm.deal.contact.items.delete method using the BX24 JavaScript API. It prompts the user for a deal ID and then makes an API call to delete the associated contacts.  The result of the operation (success or error) is then logged to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/contacts/crm-deal-contact-items-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.deal.contact.items.delete\",\n    {\n        id: id\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Update CRM Requisite using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to update a CRM requisite using the BX24.callMethod function. It specifies the method name (crm.requisite.update), the requisite ID, and the fields to be updated. The code includes error handling and displays the result in the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.update\",\n    {\n        id: 27,\n        fields:\n        {\n            \"RQ_OKPO\": \"80715150\",\n            \"RQ_OKTMO\": \"45381000000\",\n            \"UF_CRM_1707997209\": \"78\",\n            \"UF_CRM_1708012333\": \"Категория 3\"\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n        {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Payment with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve CRM payment information using the `BX24.callMethod` function. It calls the `crm.item.payment.get` method with the payment ID and handles the success and error responses. The response data is logged to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'crm.item.payment.get', {\n        id: 1036,\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.log(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Booking Resource Slots using PHP in Bitrix24\nDESCRIPTION: This PHP script uses the CRest::call function to set time slots for a booking resource. It configures slots for Monday to Friday, 9:00 AM to 6:00 PM, with 30-minute intervals in the Europe/Kaliningrad timezone.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/resource/slots/booking-v1-resource-slots-set.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'booking.v1.resource.slots.set',\n    [\n        'resourceId' => 10,\n        'slots' => [\n            [\n                'from' => 540,\n                'to' => 1080,\n                'timezone' => 'Europe/Kaliningrad',\n                'weekDays' => ['Mon', 'Tue', 'Wed', 'Thu', 'Fri'],\n                'slotSize' => 30\n            ]\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Product List using cURL OAuth in Bitrix24\nDESCRIPTION: This snippet shows how to use cURL to call the crm.item.payment.product.list method using OAuth authentication in Bitrix24. It includes the necessary headers, payload, and authentication token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/products-in-payment/crm-item-payment-product-list.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"paymentId\":1039,\"filter\":{\">\\u003D=quantity\":2,\"@id\":[1195,1196]},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.payment.product.list\n```\n\n----------------------------------------\n\nTITLE: Get Contact-Company Fields with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to retrieve contact-company fields. It requires the `crest.php` library. The code calls the `crm.contact.company.fields` method with an empty array of parameters, then prints the result to the page within `<PRE>` tags for readability.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.company.fields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Configuring Personal Deal Card Settings in JavaScript\nDESCRIPTION: Sets personal deal card configuration for a specific user, defining sections and elements for the deal details view. Configures main, additional, and products sections with various deal-related fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/custom-form/crm-deal-details-configuration-set.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.deal.details.configuration.set\",\n    {\n        scope: \"P\",\n        userId: 1,\n        data:\n        [\n            {\n                name: \"main\",\n                title: \"О сделке\",\n                type: \"section\",\n                elements:\n                [\n                    { name: \"TITLE\" },\n                    { name: \"OPPORTUNITY_WITH_CURRENCY\" },\n                    { name: \"STAGE_ID\" },\n                    { name: \"BEGINDATE\" },\n                    { name: \"CLOSEDATE\" },\n                    { name: \"CLIENT\" }\n                ]\n            },\n            {\n                name: \"additional\",\n                title: \"Дополнительно\",\n                type: \"section\",\n                elements:\n                [\n                    { name: \"TYPE_ID\" },\n                    { name: \"SOURCE_ID\" },\n                    { name: \"SOURCE_DESCRIPTION\" },\n                    { name: \"OPENED\" },\n                    { name: \"ASSIGNED_BY_ID\" },\n                    { name: \"OBSERVER\" },\n                    { name: \"COMMENTS\" }\n                ]\n            },\n            {\n                name: \"products\",\n                title: \"Товары\",\n                type: \"section\",\n                elements:\n                [\n                    { name: \"PRODUCT_ROW_SUMMARY\" }\n                ]\n            }\n        ]\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Service Product with PHP in Bitrix24\nDESCRIPTION: This snippet demonstrates how to add a service product to the Bitrix24 catalog using PHP. It sets various product fields including name, dates, pictures, and custom properties. The code uses the CRest::call function to make the API request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/service/catalog-product-service-add.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.service.add',\n    [\n        'fields' => [\n            'iblockId' => 23,\n            'name' => 'Услуга',\n            'active' => 'Y',\n            'code' => 'service',\n            'createdBy' => 1,\n            'dateActiveFrom' => '2024-05-28T10:00:00',\n            'dateActiveTo' => '2024-05-29T10:00:00',\n            'dateCreate' => '2024-05-27T10:00:00',\n            'detailPicture' => [\n                'fileData' => ['detailPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            ],\n            'detailText' => '',\n            'detailTextType' => 'text',\n            'iblockSectionId' => 47,\n            'modifiedBy' => 1,\n            'previewPicture' => [\n                'fileData' => ['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            ],\n            'previewText' => '',\n            'previewTextType' => 'text',\n            'sort' => 100,\n            'vatId' => 1,\n            'vatIncluded' => 'Y',\n            'xmlId' => '',\n            'property258' => 'test',\n            'property259' => ['test1', 'test2'],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Type with BX24 API in JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve price type information using the BX24 API in JavaScript. It calls the catalog.priceType.get method with the price type ID as a parameter and handles the response or error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/price-type/catalog-price-type-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.priceType.get',\n    {\n        id: 1\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extra Charge List using PHP in Bitrix24\nDESCRIPTION: This snippet shows how to use the CRest::call function in PHP to call the catalog.extra.list method in Bitrix24. It includes selecting specific fields, filtering, and ordering the results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/extra/catalog-extra-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.extra.list',\n    [\n        'select' => [\n            'id',\n            'percentage'\n        ],\n        'filter' => [\n            '>percentage' => 5\n        ],\n        'order' => [\n            'id' => 'ASC'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: JavaScript Implementation of Bitrix24 CRM Entity Search\nDESCRIPTION: JavaScript code that uses BX24.callMethod to search for duplicate entities and display results in a table. Handles API responses and formats contact/company data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-get-lists/search-by-phone-and-email.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nif (entityIDs.COMPANY.length > 0) {\n    BX24.callMethod('crm.company.list', {\n        'filter': {\n            'ID': entityIDs.COMPANY\n        },\n        'select': ['ID', 'PHONE', 'EMAIL', 'TITLE']\n    }, function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            if (result.data().length > 0) {\n                resultEntity.company = result.data();\n            }\n        }\n    });\n}\n\nsetTimeout(function() {\n    let resultTable = document.getElementById('resultTable');\n    resultTable.innerHTML = '';\n    \n    for (let entity in resultEntity) {\n        resultEntity[entity].forEach(function(item) {\n            let phones = '';\n            if (item.PHONE) {\n                phones = item.PHONE.map(phone => phone.VALUE).join(', ');\n            }\n            let emails = '';\n            if (item.EMAIL) {\n                emails = item.EMAIL.map(email => email.VALUE).join(', ');\n            }\n            let title = item.TITLE ? item.TITLE + (item.NAME || item.LAST_NAME ? ': ' : '') : '';\n            if (item.NAME || item.LAST_NAME) {\n                title += [item.NAME, item.LAST_NAME].join(' ');\n            }\n\n            let row = `<tr>\n                <th scope=\\\"row\\\">${item.ID}</th>\n                <td>${entity}</td>\n                <td>${title}</td>\n                <td>${phones}</td>\n                <td>${emails}</td>\n            </tr>`;\n            resultTable.innerHTML += row;\n        });\n    }\n}, 1000);\n```\n\n----------------------------------------\n\nTITLE: Update delivery request with cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates updating a delivery request using OAuth authentication. It sends a POST request with a JSON payload including the delivery ID, request ID, status, properties, and the OAuth access token.  The request is sent to the `sale.delivery.request.update` REST endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery-request/sale-delivery-request-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"DELIVERY_ID\":225,\"REQUEST_ID\":\"4757aca4931a4f029f49c0db4374d13d\",\"STATUS\":{\"TEXT\":\"Performer found\",\"SEMANTIC\":\"process\"},\"PROPERTIES\":[{\"NAME\":\"Car\",\"VALUE\":\"Gray Skoda Octavia, a777zn\"},{\"NAME\":\"Driver\",\"VALUE\":\"John Smith\"},{\"NAME\":\"Phone Number\",\"VALUE\":\"+11111111111\",\"TAGS\":[\"phone\"]},{\"NAME\":\"Something else\",\"VALUE\":\"Some value\"}],\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.delivery.request.update\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Type with CRest in PHP\nDESCRIPTION: This snippet shows how to retrieve price type information using the CRest library in PHP. It calls the catalog.priceType.get method with the price type ID as a parameter and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/price-type/catalog-price-type-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.priceType.get',\n    [\n        'id' => 1\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Add Delivery Handler with cURL (Webhook)\nDESCRIPTION: This snippet shows how to add a delivery handler to Bitrix24 using cURL with Webhook authentication. It sends a POST request with a JSON payload containing the delivery handler's details, including code, name, description, settings, and profiles. Replace the placeholders with your Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"CODE\":\"uber\",\"NAME\":\"Uber\",\"DESCRIPTION\":\"Uber Description\",\"SORT\":250,\"SETTINGS\":{\"CALCULATE_URL\":\"http://gateway.bx/calculate.php\",\"CREATE_DELIVERY_REQUEST_URL\":\"http://gateway.bx/create_delivery_request.php\",\"CANCEL_DELIVERY_REQUEST_URL\":\"http://gateway.bx/cancel_delivery_request.php\",\"HAS_CALLBACK_TRACKING_SUPPORT\":\"Y\",\"CONFIG\":[{\"TYPE\":\"STRING\",\"CODE\":\"SETTING_1\",\"NAME\":\"String Example\"},{\"TYPE\":\"Y/N\",\"CODE\":\"SETTING_2\",\"NAME\":\"Checkbox Example\"},{\"TYPE\":\"NUMBER\",\"CODE\":\"SETTING_3\",\"NAME\":\"Number Example\"},{\"TYPE\":\"ENUM\",\"CODE\":\"SETTING_4\",\"NAME\":\"Enum Example\",\"OPTIONS\":{\"Option1Code\":\"Option1Value\",\"Option2Code\":\"Option2Value\",\"Option3Code\":\"Option3Value\",\"Option4Code\":\"Option4Value\",\"Option5Code\":\"Option5Value\"}},{\"TYPE\":\"DATE\",\"CODE\":\"SETTING_5\",\"NAME\":\"Date Example\"},{\"TYPE\":\"LOCATION\",\"CODE\":\"SETTING_6\",\"NAME\":\"Location Example\"}]},\"PROFILES\":[{\"NAME\":\"Taxi\",\"CODE\":\"TAXI\",\"DESCRIPTION\":\"Taxi Delivery\"},{\"NAME\":\"Cargo\",\"CODE\":\"CARGO\",\"DESCRIPTION\":\"Cargo Delivery\"}]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.delivery.handler.add\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Calendar Events with JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to retrieve company calendar events using the Bitrix24 JS SDK. It calls the calendar.event.get method with company_calendar type and includes a note about the ownerId parameter for company calendars.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'calendar.event.get',\n    {\n        type: 'company_calendar',\n        ownerId: 0, // ownerId не указывается при выборке событий календаря компании. Он пустой для всех событий такого типа.\n        forCurrentUser: false\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: CRM Activity Fields Documentation\nDESCRIPTION: Detailed documentation of activity-related fields in Bitrix24 CRM, covering metadata for tasks, events, and communications\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/main-entities-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nComprehensive activity field definitions including ID, owner, type, status, responsible user, and communication details\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service List using cURL Webhook in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use cURL with a webhook to call the catalog.product.service.list method. It includes selecting specific fields, applying filters, and sorting the results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/service/catalog-product-service-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"iblockId\",\"name\",\"active\",\"available\",\"bundle\",\"code\",\"createdBy\",\"dateActiveFrom\",\"dateActiveTo\",\"dateCreate\",\"detailPicture\",\"detailText\",\"detailTextType\",\"iblockSectionId\",\"modifiedBy\",\"previewPicture\",\"previewText\",\"previewTextType\",\"sort\",\"timestampX\",\"type\",\"vatId\",\"vatIncluded\",\"xmlId\",\"property94\",\"property95\"],\"filter\":{\"iblockId\":23,\">id\":10,\"@vatId\":[1,2]},\"order\":{\"id\":\"desc\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.product.service.list\n```\n\n----------------------------------------\n\nTITLE: Querying Lead Fields via PHP (B24PhpSdk)\nDESCRIPTION: This snippet demonstrates how to retrieve lead fields using the crm.lead.fields method in PHP, leveraging the B24PhpSdk library.  It fetches and prints field descriptions, and catches any exceptions that might occur during the process.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $fieldsResult = $serviceBuilder\n        ->getCRMScope()\n        ->lead()\n        ->fields();\n    $fieldsDescription = $fieldsResult->getFieldsDescription();\n    // Assuming you want to print the fields description\n    print_r($fieldsDescription);\n} catch (Throwable $e) {\n    print(\"Error: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CRM Payment via cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to create a CRM payment using a cURL request with OAuth authentication. It sets the content type to application/json, accepts json responses, includes the `entityId` and `entityTypeId` in the request body, and includes the `auth` parameter with the access token. Replace the placeholder values for the Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-add.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityId\":13123,\"entityTypeId\":2,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.payment.add\n```\n\n----------------------------------------\n\nTITLE: Delete Lead via cURL (Webhook)\nDESCRIPTION: This cURL example demonstrates how to delete a lead using a webhook. Replace the placeholder values with your actual Bitrix24 address, user ID, and webhook key. The request sends a JSON payload containing the lead ID to be deleted.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":\"123\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.lead.delete\n```\n\n----------------------------------------\n\nTITLE: Creating Bank Requisite with JavaScript\nDESCRIPTION: JavaScript implementation using BX24.callMethod for adding a bank requisite, with error handling and result logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-add.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.bankdetail.add\",\n    {\n        fields:\n        {\n            \"ENTITY_ID\": 27,\n            \"COUNTRY_ID\": 1,\n            \"NAME\": \"Супербанк\",\n            \"RQ_BANK_NAME\": \"ПАО Супербанк\",\n            \"RQ_BANK_ADDR\": \"117312, г. Москва, улица Вавилова, дом 19\",\n            \"RQ_BIK\": \"044525225\",\n            \"RQ_ACC_NUM\": \"40702810938000060473\",\n            \"RQ_ACC_CURRENCY\": \"RUR\",\n            \"RQ_COR_ACC_NUM\": \"30101810400000000225\",\n            \"XML_ID\":\"1e4641fd-2dd9-31e6-b2f2-105056c00008\",\n            \"ACTIVE\":\"Y\",\n            \"SORT\":600\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(\"Создан банковский реквизит с ID \" + result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Item Fields with JavaScript\nDESCRIPTION: Example of using the BX24 JavaScript library to retrieve field lists for a smart process with entityTypeId 1268. The code includes error handling and logs the result data to console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.item.fields',\n    {\n        entityTypeId: 1268,\n        useOriginalUfNames: 'N',\n    },\n    (result) => {\n        if (result.error())\n        {\n            console.error(result.error());\n\n            return;\n        }\n\n        console.info(result.data());\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Sending REST API Requests to Bitrix24 in PHP\nDESCRIPTION: This function sends REST API requests to Bitrix24. It takes the method name, parameters, and authentication data as inputs. It uses cURL to send the request and returns the JSON-decoded response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/chat-bots/index.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nfunction restCommand($method, array $params = array(), array $auth = array()) {\n    $queryUrl  = 'https://' . $auth['domain'] . '/rest/' . $method;\n    $queryData = http_build_query(array_merge($params, array('auth' => $auth['access_token'])));\n    $curl = curl_init();\n    curl_setopt_array($curl, array(\n        CURLOPT_POST           => 1,\n        CURLOPT_HEADER         => 0,\n        CURLOPT_RETURNTRANSFER => 1,\n        CURLOPT_URL            => $queryUrl,\n        CURLOPT_POSTFIELDS     => $queryData,\n    ));\n    $result = curl_exec($curl);\n    curl_close($curl);\n    $result = json_decode($result, 1);\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact from Lead using JavaScript\nDESCRIPTION: This JavaScript code snippet uses the `BX24.callMethod` function to call the `crm.lead.contact.delete` method, disassociating a contact from a lead.  The code includes error handling to log any errors to the console and logs the result data if the operation is successful.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/management-communication/crm-lead-contact-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n            \"crm.lead.contact.delete\",\n            {\n                id: 1,\n                fields:\n                {\n                    \"CONTACT_ID\": 1010,\n                }\n            },\n            result => {\n                if (result.error())\n                    console.error(result.error());\n                else\n                    console.dir(result.data());\n            }\n    );\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Item Fields with PHP\nDESCRIPTION: Example of using the CRest PHP library to retrieve field lists for a smart process with entityTypeId 1268. The code requires the crest.php library and prints the result with formatting.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.fields',\n    [\n        'entityTypeId' => 1268,\n        'useOriginalUfNames' => 'N',\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Setting Base Currency with JavaScript\nDESCRIPTION: JavaScript method to set base currency using BX24.callMethod with error handling and result logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-base-set.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.currency.base.set\",\n    {\n        id: 'RUB'\n    },\n)\n.then(\n    function(result)\n    {\n        if (result.error())\n        {\n            console.error(result.error());\n        }\n        else\n        {\n            console.log(result);\n        }\n    },\n    function(error)\n    {\n        console.info(error);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving a CRM Item with PHP B24PhpSdk in Bitrix24\nDESCRIPTION: Example of how to retrieve a CRM item using the B24PhpSdk library in PHP. The code demonstrates accessing and displaying all properties of the retrieved item, including handling dates and boolean values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-get.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $entityTypeId = 1; // Example entity type ID\n    $id = 123; // Example item ID\n    $itemResult = $serviceBuilder\n        ->getCRMScope()\n        ->item()\n        ->get($entityTypeId, $id);\n    $item = $itemResult->item();\n    print(\"ID: \" . $item->id . PHP_EOL);\n    print(\"XML ID: \" . $item->xmlId . PHP_EOL);\n    print(\"Title: \" . $item->title . PHP_EOL);\n    print(\"Created By: \" . $item->createdBy . PHP_EOL);\n    print(\"Updated By: \" . $item->updatedBy . PHP_EOL);\n    print(\"Moved By: \" . $item->movedBy . PHP_EOL);\n    print(\"Created Time: \" . $item->createdTime->format(DATE_ATOM) . PHP_EOL);\n    print(\"Updated Time: \" . $item->updatedTime->format(DATE_ATOM) . PHP_EOL);\n    print(\"Moved Time: \" . $item->movedTime->format(DATE_ATOM) . PHP_EOL);\n    print(\"Category ID: \" . $item->categoryId . PHP_EOL);\n    print(\"Opened: \" . ($item->opened ? 'true' : 'false') . PHP_EOL);\n    print(\"Previous Stage ID: \" . $item->previousStageId . PHP_EOL);\n    print(\"Begin Date: \" . $item->begindate->format(DATE_ATOM) . PHP_EOL);\n    print(\"Close Date: \" . $item->closedate->format(DATE_ATOM) . PHP_EOL);\n    print(\"Company ID: \" . $item->companyId . PHP_EOL);\n    print(\"Contact ID: \" . $item->contactId . PHP_EOL);\n    print(\"Opportunity: \" . $item->opportunity . PHP_EOL);\n    print(\"Is Manual Opportunity: \" . ($item->isManualOpportunity ? 'true' : 'false') . PHP_EOL);\n    print(\"Tax Value: \" . $item->taxValue . PHP_EOL);\n    print(\"Currency ID: \" . $item->currencyId . PHP_EOL);\n    print(\"Opportunity Account: \" . $item->opportunityAccount . PHP_EOL);\n    print(\"Tax Value Account: \" . $item->taxValueAccount . PHP_EOL);\n    print(\"Account Currency ID: \" . $item->accountCurrencyId . PHP_EOL);\n    print(\"My Company ID: \" . $item->mycompanyId . PHP_EOL);\n    print(\"Source ID: \" . $item->sourceId . PHP_EOL);\n    print(\"Source Description: \" . $item->sourceDescription . PHP_EOL);\n    print(\"Webform ID: \" . $item->webformId . PHP_EOL);\n    print(\"Assigned By ID: \" . $item->assignedById . PHP_EOL);\n    print(\"Last Activity By: \" . $item->lastActivityBy . PHP_EOL);\n    print(\"Last Activity Time: \" . $item->lastActivityTime->format(DATE_ATOM) . PHP_EOL);\n    print(\"UTM Source: \" . $item->utmSource . PHP_EOL);\n    print(\"UTM Medium: \" . $item->utmMedium . PHP_EOL);\n    print(\"UTM Campaign: \" . $item->utmCampaign . PHP_EOL);\n    print(\"UTM Content: \" . $item->utmContent . PHP_EOL);\n    print(\"UTM Term: \" . $item->utmTerm . PHP_EOL);\n    print(\"Observers: \" . json_encode($item->observers) . PHP_EOL);\n    print(\"Contact IDs: \" . json_encode($item->contactIds) . PHP_EOL);\n    print(\"Entity Type ID: \" . $item->entityTypeId . PHP_EOL);\n} catch (Throwable $e) {\n    print(\"Error: \" . $e->getMessage() . PHP_EOL);\n}\n```\n\n----------------------------------------\n\nTITLE: Handling API Response for CRM Requisite Link\nDESCRIPTION: This JSON structure represents a successful response from the API when fetching the requisite link. It includes fields such as result details and time metrics, which help understand the execution duration and results returned by the API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/links/crm-requisite-link-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"ENTITY_TYPE_ID\": 31,\n        \"ENTITY_ID\": 315,\n        \"REQUISITE_ID\": \"60\",\n        \"BANK_DETAIL_ID\": \"24\",\n        \"MC_REQUISITE_ID\": \"2\",\n        \"MC_BANK_DETAIL_ID\": \"2\"\n    },\n    \"time\": {\n        \"start\": 1718378061.651857,\n        \"finish\": 1718378062.098295,\n        \"duration\": 0.4464380741119385,\n        \"processing\": 0.07567882537841797,\n        \"date_start\": \"2024-06-14T17:14:21+02:00\",\n        \"date_finish\": \"2024-06-14T17:14:22+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Sale Status with cURL (Webhook)\nDESCRIPTION: HTTP POST request to update sale status using webhook authentication, with configuration for delivery status type, notification settings, sorting, and color\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-update.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":\"MS\",\"fields\":{\"type\":\"D\",\"notify\":\"N\",\"sort\":100,\"color\":\"#00FF00\",\"xmlId\":\"updatedXmlId\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.status.update\n```\n\n----------------------------------------\n\nTITLE: Force Common CRM Config using JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to force a common CRM item details configuration for deals in a specific category using the `BX24.callMethod` function. It calls the `crm.item.details.configuration.forceCommonScopeForAll` method with the `entityTypeId` set to 2 and the `dealCategoryId` in the `extras` parameter set to 9. The result is handled in a callback function that logs errors or data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/item-details-configuration/crm-item-details-configuration-forceCommonScopeForAll.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'crm.item.details.configuration.forceCommonScopeForAll',\n        {\n            entityTypeId: 2,\n            extras: {\n                dealCategoryId: 9,\n            },\n        },\n        (result) => {\n            if (result.error())\n            {\n                console.error(result.error());\n\n                return;\n            }\n\n            console.info(result.data());\n        },\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Currency List with JavaScript\nDESCRIPTION: JavaScript method for fetching currency list using Bitrix24 API with promise-based error handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.currency.list\",\n    {\n        order: {\n            sort: 'asc',\n            currency: 'asc',\n        },\n    },\n)\n.then(\n    function(result)\n    {\n        if (result.error())\n        {\n            console.error(result.error());\n        }\n        else\n        {\n            console.log(result.data);\n        }\n    },\n    function(error)\n    {\n        console.info(error);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Types with JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24.callMethod function to retrieve price types in JavaScript. It includes error handling and result processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/price-type/catalog-price-type-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.priceType.list',\n    {\n        select:[\n            'id',\n            'name',\n            'xmlId'\n        ],\n        filter:{\n            'modifiedBy': 1\n        },\n        order:{\n            'id': 'ASC'\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n        result.next();\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Sending Group Join Request with JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24.callMethod to send a request to join a social network group with the specified ID. It requires the sonet scope permissions and provides the group ID and an optional message with the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/members/sonet-group-user-request.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Отправляем запрос на вступление в группу с ID=17\nBX24.callMethod('sonet_group.user.request', {\n    'GROUP_ID': 17,\n    'MESSAGE': 'Request'\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Shipment Item via OAuth - cURL\nDESCRIPTION: HTTP POST request to update a shipment item using Bitrix24 OAuth authentication method with access token\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-update.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":7,\"fields\":{\"quantity\":5,\"xmlId\":\"myNewXmlId\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipmentitem.update\n```\n\n----------------------------------------\n\nTITLE: Including B24JsSDK Library\nDESCRIPTION: This snippet shows how to include the B24JsSDK library as a browser-based UMD module. It imports the library from a CDN using a script tag, making the `B24Js` global variable available for use in other scripts. This allows for interaction with the Bitrix24 REST API from browser applications.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/how-to-use-examples.md#2025-04-20_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@bitrix24/b24jssdk@latest/dist/umd/index.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Overdue Tasks from Bitrix24 in PHP\nDESCRIPTION: This function retrieves overdue tasks for a specific user from Bitrix24 using the REST API. It formats the tasks into a report that can be sent as a chat bot response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/chat-bots/index.md#2025-04-20_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\nfunction b24BadTasks ($user) {\n    $tasks = restCommand('task.item.list', \n        array(\n            'ORDER' => array('DEADLINE' => 'desc'),\n            'FILTER' => array('RESPONSIBLE_ID' => $user, '<DEADLINE' => date(\"Y-m-d\")),\n            'PARAMS' => array(),\n            'SELECT' => array()\n        ), \n        $_REQUEST[\"auth\"]);\n    \n    if (count($tasks['result']) > 0) {\n        $arTasks = array();\n        foreach ($tasks['result'] as $id => $arTask) {\n            $arTasks[] = array(\n                'LINK' => array(\n                'NAME' => $arTask['TITLE'],\n                'LINK' => 'https://'.$_REQUEST['auth']['domain'].'/company/personal/user/'.$arTask['RESPONSIBLE_ID'].'/tasks/task/view/'.$arTask['ID'].'/'\n                )\n            );\n            $arTasks[] = array(\n                'DELIMITER' => array(\n                'SIZE' => 400,\n                'COLOR' => '#c6c6c6'\n                )\n            );\n        }\n        $arReport = array(\n            'title' => 'Да, кое-какие задачи уже пролетели, например:',\n            'report'  => '',\n            'attach' => $arTasks\n        );\n    }\n    else {\n        $arReport = array(\n            'title' => 'Шикарно работаете!',\n            'report'  => 'Нечем даже огорчить - ни одной просроченной задачи',\n        );\n    }\n    return $arReport;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Requisites by Preset ID using cURL (OAuth)\nDESCRIPTION: This cURL command retrieves requisites filtered by `PRESET_ID` using OAuth authentication. It demonstrates the inclusion of the `auth` parameter with the access token. Similar to the Webhook example, it defines order, filter, and select parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{\"DATE_CREATE\":\"ASC\"},\"filter\":{\"PRESET_ID\":\"1\"},\"select\":[\"ENTITY_TYPE_ID\",\"ENTITY_ID\",\"ID\",\"NAME\"],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.list\n```\n\n----------------------------------------\n\nTITLE: Recording Business Process Logs Using cURL Webhook in Bitrix24\nDESCRIPTION: This example demonstrates how to send a log message to a Bitrix24 business process using a cURL webhook request. It requires an event token and the message text to be logged.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-activity/bizproc-activity-log.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"event_token\":\"55c1dc1c3f0d75.78875596|A51601_82584_96831_81132|hsyUws1j4XiwqPqN45eH66CcQtEvpUIP.47dd5d888e8e549d2c984713e12a4268e6e87d0208ca1f093ba1075e77f92e90\",\"log_message\":\"Please wait for answer!\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/bizproc.activity.log\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Status using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve a CRM status element by its ID using the `crm.status.get` method. It prompts the user for an ID, makes the API call, and then logs either the error or the retrieved data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/status/crm-status-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.status.get\",\n    { id: id },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment List via Webhook - cURL\nDESCRIPTION: Demonstrates how to fetch payment records using a webhook endpoint with cURL, including complex selection of payment fields, filtering by specific conditions, and ordering results\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"paySystemXmlId\",\"paySystemIsCash\",\"accountNumber\",\"id\",\"orderId\",\"paid\",\"datePaid\",\"empPaidId\",\"paySystemId\",\"psStatus\",\"psStatusCode\",\"psStatusDescription\",\"psStatusMessage\",\"psSum\",\"psCurrency\",\"psResponseDate\",\"payVoucherNum\",\"payVoucherDate\",\"datePayBefore\",\"dateBill\",\"xmlId\",\"sum\",\"currency\",\"paySystemName\",\"companyId\",\"payReturnNum\",\"priceCod\",\"payReturnDate\",\"empReturnId\",\"payReturnComment\",\"responsibleId\",\"empResponsibleId\",\"dateResponsibleId\",\"isReturn\",\"comments\",\"updated1c\",\"id1c\",\"version1c\",\"externalPayment\",\"psInvoiceId\",\"marked\",\"reasonMarked\",\"dateMarked\",\"empMarkedId\"],\"filter\":{\"<id\":10,\"@personTypeId\":[3,4],\"payed\":\"N\"},\"order\":{\"id\":\"desc\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.payment.list\n```\n\n----------------------------------------\n\nTITLE: Defining CRM Activity JSON Schema Structure in Bitrix24 REST API\nDESCRIPTION: This code snippet defines the schema structure for CRM activity fields in Bitrix24 REST API, including field properties like data types, required status, and various attributes for each field.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"title\": \"RESULT_SUM\"\n},\n\"RESULT_CURRENCY_ID\": {\n    \"type\": \"string\",\n    \"isRequired\": false,\n    \"isReadOnly\": false,\n    \"isImmutable\": false,\n    \"isMultiple\": false,\n    \"isDynamic\": false,\n    \"title\": \"RESULT_CURRENCY_ID\"\n},\n\"AUTOCOMPLETE_RULE\": {\n    \"type\": \"integer\",\n    \"isRequired\": false,\n    \"isReadOnly\": false,\n    \"isImmutable\": false,\n    \"isMultiple\": false,\n    \"isDynamic\": false,\n    \"title\": \"Автозаполнение\"\n},\n\"BINDINGS\": {\n    \"type\": \"crm_activity_binding\",\n    \"isRequired\": false,\n    \"isReadOnly\": true,\n    \"isImmutable\": false,\n    \"isMultiple\": true,\n    \"isDynamic\": false,\n    \"title\": \"Привязки\"\n},\n\"COMMUNICATIONS\": {\n    \"type\": \"crm_activity_communication\",\n    \"isRequired\": true,\n    \"isReadOnly\": false,\n    \"isImmutable\": false,\n    \"isMultiple\": true,\n    \"isDynamic\": false,\n    \"title\": \"Канал коммуникации\"\n},\n\"FILES\": {\n    \"type\": \"diskfile\",\n    \"isRequired\": false,\n    \"isReadOnly\": false,\n    \"isImmutable\": false,\n    \"isMultiple\": true,\n    \"isDynamic\": false,\n    \"title\": \"Файлы\"\n},\n\"WEBDAV_ELEMENTS\": {\n    \"type\": \"diskfile\",\n    \"isRequired\": false,\n    \"isReadOnly\": false,\n    \"isImmutable\": false,\n    \"isMultiple\": true,\n    \"isDynamic\": false,\n    \"isDeprecated\": true,\n    \"title\": \"Добавленные файлы\"\n},\n\"IS_INCOMING_CHANNEL\": {\n    \"type\": \"char\",\n    \"isRequired\": false,\n    \"isReadOnly\": true,\n    \"isImmutable\": false,\n    \"isMultiple\": false,\n    \"isDynamic\": false,\n    \"title\": \"IS_INCOMING_CHANNEL\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bank Details with cURL OAuth\nDESCRIPTION: Demonstrate OAuth authentication method for retrieving bank details using cURL, with similar filtering and selection parameters as the webhook example.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{\"DATE_CREATE\":\"ASC\"},\"filter\":{\"COUNTRY_ID\":\"1\"},\"select\":[\"ENTITY_ID\",\"ID\",\"NAME\"],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.bankdetail.list\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flow using JavaScript\nDESCRIPTION: This snippet demonstrates how to create a new flow using the Bitrix24 JavaScript SDK. It includes error handling and logging of the response data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-create.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'tasks.flow.Flow.create',\n    {\n        flowData: {\n            name: 'Unique Flow Name',\n            description: 'Описание потока',\n            plannedCompletionTime: 7200,\n            distributionType: 'manually',\n            responsibleList: [\n                {\n                    'user':'3'\n                }\n            ],\n            taskCreators: [\n                {\n                    'meta-user':'all-users'\n                }\n            ],\n            matchWorkTime: 1,\n            notifyAtHalfTime: 0\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Lead Card Configuration with crm.lead.details.configuration.set in JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to use the `crm.lead.details.configuration.set` method to configure personal lead card settings for a specific user in Bitrix24. It sets the scope to \"P\" (personal), specifies the user ID, and defines the layout of the lead card, including sections and elements. The code then makes a call to the Bitrix24 API and handles the result by logging errors or outputting the data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/custom-form/crm-lead-details-configuration-set.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n//---\n//Установка личных настроек карточки лидов для пользователя с идентификатором 1.\nBX24.callMethod(\n    \"crm.lead.details.configuration.set\",\n    {\n        scope: \"P\",\n        userId: 1,\n        data:\n        [\n            {\n                name: \"main\",\n                title: \"Общие сведения\",\n                type: \"section\",\n                elements:\n                [\n                    { name: \"TITLE\" },\n                    { name: \"STATUS_ID\" },\n                    { name: \"NAME\" },\n                    { name: \"BIRTHDATE\" },\n                    { name: \"POST\" },\n                    { name: \"PHONE\" },\n                    { name: \"EMAIL\" }\n                ]\n            },\n            {\n                name: \"additional\",\n                title: \"Дополнительно\",\n                type: \"section\",\n                elements:\n                [\n                    { name: \"SOURCE_ID\" },\n                    { name: \"SOURCE_DESCRIPTION\" },\n                    { name: \"OPENED\" },\n                    { name: \"ASSIGNED_BY_ID\" },\n                    { name: \"OBSERVER\" },\n                    { name: \"COMMENTS\" }\n                ]\n            }\n        ]\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n//---\n```\n\n----------------------------------------\n\nTITLE: Updating Product Offer Using JavaScript REST API Call\nDESCRIPTION: Makes a REST API call to update a Bitrix24 catalog product offer with detailed properties including images, dimensions, pricing, quantities and custom properties. Uses the catalog.product.offer.update endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/offer/catalog-product-offer-update.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.offer.update',\n    {\n        'id': 1286,\n        'fields': {\n            'iblockId': 24,\n            'name': 'Вариация товара',\n            'active': 'Y',\n            'barcodeMulti': 'Y',\n            'canBuyZero': 'Y',\n            'code': 'Tovar',\n            'createdBy': 1,\n            'dateActiveFrom': '2024-05-28T10:00:00',\n            'dateActiveTo': '2024-05-29T10:00:00',\n            'dateCreate': '2024-05-27T10:00:00',\n            'fileData':  ['detailPicture.png','iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCC']\n            // ... additional fields ...\n        }\n    },\n    function(result) {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Icons using PHP\nDESCRIPTION: This example demonstrates how to call the crm.timeline.icon.list method using PHP with the CRest library to get a list of available icons for CRM timeline log entries. It requires the crest.php file to be included.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.timeline.icon.list',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Request with CRest::callBatch in PHP\nDESCRIPTION: Example of sending a batch request using the CRest::callBatch method in PHP. The request includes two commands: getting current user and retrieving department information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/how-to-call-rest-api/batch.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n$result = \\CRest::callBatch(\n    // Commands\n    [\n        'get_user' => [\n            'method' => 'user.current',\n            'params' => []\n        ],\n        'get_department' => [\n            'method' => 'department.get',\n            'params' => [\n                \"ID\" => '$result[get_user][UF_DEPARTMENT][0]'\n            ]\n        ],\n    ],\n    // Halt\n    false\n);\n\necho \"<pre>\";\nvar_dump($result);\necho \"</pre>\";\n```\n\n----------------------------------------\n\nTITLE: Deleting Catalog Section using cURL (Webhook) in Bitrix24 REST API\nDESCRIPTION: This snippet demonstrates how to delete a catalog section using cURL with a webhook in the Bitrix24 REST API. It sends a POST request with the section ID to be deleted.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/section/catalog-section-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\": 31}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.section.delete\n```\n\n----------------------------------------\n\nTITLE: Get Preset Field via JavaScript\nDESCRIPTION: This JavaScript code uses the BX24.callMethod function to retrieve a custom field of a requisite template. It passes the field ID and preset ID as parameters and handles the result in a callback function, logging errors or displaying the data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.preset.field.get\",\n    {\n        ID: 1,          // Идентификатор настраиваемого поля\n        preset:\n        {\n            \"ID\": 27    // Идентификатор шаблона реквизитов\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Recurring Deal Configuration in Bitrix24 REST API (JavaScript)\nDESCRIPTION: Demonstrates how to create a recurring deal configuration using the crm.deal.recurring.add method. Includes dynamic date generation, setting recurring interval, and handling the API response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/recurring-deals/crm-deal-recurring-add.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar current = new Date();\nvar nextMonth = new Date();\nvar nextYear = new Date();\nnextMonth.setMonth(current.getMonth() + 1);\nnextYear.setYear(current.getFullYear() + 1);\nvar date2str = function(d)\n{\n    return d.getFullYear() + '-' + paddatepart(1 + d.getMonth()) + '-' + paddatepart(d.getDate()) + 'T' + paddatepart(d.getHours()) + ':' + paddatepart(d.getMinutes()) + ':' + paddatepart(d.getSeconds()) + '+03:00';\n};\nvar paddatepart = function(part)\n{\n    return part >= 10 ? part.toString() : '0' + part.toString();\n};\nBX24.callMethod(\n    \"crm.deal.recurring.add\",\n    {\n        fields:\n        {\n            \"DEAL_ID\": \"45\",\n            \"CATEGORY_ID\": \"1\",\n            \"IS_LIMIT\": \"D\",\n            \"LIMIT_DATE\": date2str(nextYear),\n            \"START_DATE\": date2str(nextMonth),\n            \"PARAMS\": {\n                \"MODE\": \"multiple\",\n                \"MULTIPLE_TYPE\": \"month\",\n                \"MULTIPLE_INTERVAL\": 1,\n                \"OFFSET_BEGINDATE_TYPE\": \"day\",\n                \"OFFSET_BEGINDATE_VALUE\": 1,\n                \"OFFSET_CLOSEDATE_TYPE\": \"month\",\n                \"OFFSET_CLOSEDATE_VALUE\": 2,\n            }\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(\"Добавлены настройки регулярной сделки. ID записи - \" + result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Contact Details Configuration via BX24.callMethod (JS)\nDESCRIPTION: This JavaScript snippet sets the contact details configuration for a specific user using the `BX24.callMethod` function. The code defines sections and elements with their respective options and handles the success and error responses. It requires the Bitrix24 JavaScript library to be available in the environment.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-set.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.details.configuration.set',\n    {\n        userId: 1,\n        data: [\n            {\n                name: \"section_1\",\n                title: \"Личные данные\",\n                type: \"section\",\n                elements: [\n                    {\n                        name: \"NAME\",\n                        optionFlags: 1,\n                    },\n                    {\n                        name: \"LAST_NAME\",\n                        optionFlags: 1,\n                    },\n                    {\n                        name: \"SECOND_NAME\",\n                    },\n                    {\n                        name: \"BIRTHDATE\",\n                    },\n                    {\n                        name: \"PHONE\",\n                        optionFlags: 1,\n                        options: {\n                            defaultCountry: \"GB\",\n                        },\n                    },\n                    {\n                        name: \"ADDRESS\",\n                        optionFlags: 1,\n                        options: {\n                            defaultAddressType: 4,\n                        },\n                    },\n                ],\n            },\n            {\n                name: \"section_2\",\n                title: \"Основная информация\",\n                type: \"section\",\n                elements: [\n                    { name: \"TYPE_ID\" },\n                    { name: \"SOURCE_ID\" },\n                    { name: \"POST\" },\n                ],\n            },\n            {\n                name: \"section_3\",\n                title: \"Дополнительная информация\",\n                type: \"section\",\n                elements: [\n                    { name: \"PHOTO\" },\n                    { name: \"COMMENTS\" },\n                    { name: \"UF_CRM_1720697698689\" },\n                ],\n            },\n        ],\n    },\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Successful Response Structure for booking.v1.booking.get\nDESCRIPTION: Example of a successful JSON response from the booking.v1.booking.get method showing the booking details including date period, name, description, and associated resource IDs.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-get.md#2025-04-20_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n\"result\": {\n    \"booking\": {\n     \"datePeriod\": {\n        \"from\": {\n         \"timestamp\": 1723446900,\n         \"timezone\": \"Europe/Kaliningrad\"\n        },\n        \"to\": {\n         \"timestamp\": 1723447800,\n         \"timezone\": \"Europe/Kaliningrad\"\n        }\n     },\n     \"description\": null,\n     \"id\": 15,\n     \"name\": \"бронирование 1\",\n     \"resourceIds\": [\n        1,\n        2\n     ]\n    }\n},\n\"time\": {\n    \"start\": 1741002780.099604,\n    \"finish\": 1741002780.381558,\n    \"duration\": 0.2819540500640869,\n    \"processing\": 0.14896297454833984,\n    \"date_start\": \"2025-03-03T11:53:00+00:00\",\n    \"date_finish\": \"2025-03-03T11:53:00+00:00\",\n    \"operating\": 0.14890098571777344\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a property group with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to create a sale property group using a webhook. It sends a POST request with the required `fields` parameter containing the `personTypeId`, `name`, and `sort` values for the new group to the specified Bitrix24 address.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-add.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"personTypeId\":3,\"name\":\"Новая группа свойств\",\"sort\":100}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.propertygroup.add\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskCommentAdd Event with PHP\nDESCRIPTION: PHP code example that uses the CRest library to subscribe to the OnTaskCommentAdd event. The code registers a handler URL and outputs the response data for debugging purposes.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/comment-item/events-comment/on-task-comment-add.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'event.bind',\n    [\n        'event' => 'OnTaskCommentAdd',\n        'handler' => 'https://example.com/handler.php'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Consuming messages from RabbitMQ queue in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to consume messages from a RabbitMQ queue. It defines a callback function that processes incoming messages by JSON-decoding the message body and then invoking the `processRequest` function. The script then consumes messages from the 'request_queue' until interrupted.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/performance/queue.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n// Обрабатываем сообщения из очереди\n$callback = function($msg) {\n    processRequest(json_decode($msg->body));\n};\n$channel->basic_consume('request_queue', '', false, true, false, false, $callback);\nwhile($channel->is_consuming()) {\n    $channel->wait();\n}\n```\n\n----------------------------------------\n\nTITLE: Handling onCrmDocumentGeneratorDocumentAdd Event Data in PHP\nDESCRIPTION: This code snippet demonstrates the structure of the data received by the event handler when the onCrmDocumentGeneratorDocumentAdd event is triggered. It includes the document ID, entity type ID, and entity ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/document-generator/events/on-crm-document-generator-add.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'FIELDS' => [\n        'ID' => $documentId,\n        'ENTITY_TYPE_ID' => $entityTypeId,\n        'ENTITY_ID' => $entityId,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Delete Lead via PHP (B24PhpSdk)\nDESCRIPTION: This PHP snippet showcases lead deletion utilizing the B24PhpSdk. It sets an example lead ID (123) and attempts to delete the lead using the CRM scope's lead() and delete() methods.  It then outputs success or failure messages based on the result of the deletion attempt and catches any potential exceptions during the process.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php        \ntry {\n    $id = 123; // Example lead ID to delete\n    $result = $serviceBuilder\n        ->getCRMScope()\n        ->lead()\n        ->delete($id);\n    if ($result->isSuccess()) {\n        print(\"Lead with ID $id has been successfully deleted.\");\n    } else {\n        print(\"Failed to delete lead with ID $id.\");\n    }\n} catch (Throwable $e) {\n    print(\"An error occurred: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Cash Register in JavaScript with BX24\nDESCRIPTION: Illustrates deleting a cash register using the Bitrix24 JavaScript SDK, with error handling and result logging\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.cashbox.delete\",\n    {\n        \"ID\": 1,\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Network Ranges with cURL Webhook in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use cURL with a webhook to set network address ranges for the office network in Bitrix24. It sends a POST request with JSON data containing the network ranges.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/timeman/networkrange/timeman-networkrange-set.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ranges\":[{\"ip_range\":\"10.0.0.0-10.255.255.255\",\"name\":\"Офисная сеть 10.x.x.x\"},{\"ip_range\":\"172.16.0.0-172.31.255.255\",\"name\":\"Офисная сеть 172.x.x.x\"},{\"ip_range\":\"192.168.0.0-192.168.255.255\",\"name\":\"Офисная сеть 192.168.x.x\"}]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/timeman.networkrange.set\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Comments using cURL Webhook\nDESCRIPTION: Example of using cURL with a Webhook to fetch CRM timeline comments for a specific deal. This request filters by entity ID and type while selecting specific fields to return.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"ENTITY_ID\":10,\"ENTITY_TYPE\":\"deal\"},\"select\":[\"ID\",\"CREATED\",\"ENTITY_ID\",\"ENTITY_TYPE\",\"AUTHOR_ID\",\"COMMENT\",\"FILES\"]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.timeline.comment.list\n```\n\n----------------------------------------\n\nTITLE: Creating CRM Lead with JavaScript and BX24\nDESCRIPTION: Shows how to create a new CRM lead using Bitrix24's JavaScript SDK (BX24), with error handling and result logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-add.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.lead.add\",\n    {\n        fields:\n        {\n            TITLE: \"ИП Титов\",\n            NAME: \"Глеб\",\n            SECOND_NAME: \"Егорович\",\n            LAST_NAME: \"Титов\",\n            STATUS_ID: \"NEW\",\n            OPENED: \"Y\",\n            ASSIGNED_BY_ID: 1,\n            CURRENCY_ID: \"USD\",\n            OPPORTUNITY: 12500,\n            PHONE: [\n                { \n                    VALUE: \"555888\",\n                    VALUE_TYPE: \"WORK\",\n                },\n            ] ,\n            WEB: [\n                    {\n                    VALUE: \"www.mysite.com\",\n                    VALUE_TYPE: \"WORK\",\n                    }\n            ],\n        },\n        params: {\n            REGISTER_SONET_EVENT: \"Y\",\n        }\n    },\n    (result) => {\n        if (result.error())\n        {\n            console.error(result.error());\n            \n            return;\n        }\n        \n        console.info(`Создан лид с ID ${result.data()}`);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Payment System with JavaScript (BX24)\nDESCRIPTION: Demonstrate how to add a payment system using JavaScript with Bitrix24 library. Includes configuring payment system details and handling response using callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-add.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.paysystem.add\",\n    {\n        'NAME' : 'Оплата картой',\n        'DESCRIPTION': 'Легко оплачивайте покупки картой.',\n        'XML_ID': 'my_ps_id',\n        'PERSON_TYPE_ID' : 1,\n        'BX_REST_HANDLER' : 'resthandlercode',\n        'ACTIVE' : 'Y',\n        'ENTITY_REGISTRY_TYPE': 'ORDER',\n        'LOGOTYPE': '/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0MDgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAASABUDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD73/4Oa/25vEf7CH/BK/XNW8GarrPh/wAZeONcsfCejazpk3k3GkyS+ZdTSh/vKWtbO5jDJhlaVWBBGR4V/wAFMP28vj1/wRc/4I+fs56O3jmLxh+0j4m1Wy0/V5tft11a9v4xDNc30SYJE/kTSWdn52S7o6tne+4fNv7f3/BSHwX8d/2xvjL+y/8A8FBrHxt4R+F+g/EKDxB8NtY8L6WLeTTbG3N5BDLdMqSy3FtdWkynfFFI4aSUDYQvl8r/AMFDv+Cr37P37eP/AAWX/Zz+IHw10/42fGi6+GOp2VlpnhbSrBNL03WLtLw3cF7ZtOzXJlExjWWGW1hEy20YM0aoSwB/RtRRRQBw/wAb/wBmb4b/ALTWk2On/Ej4feB/iDY6ZMbiztvEuhWurQ2khG0vGtwjhGK8EqASOKT4H/swfDX9mTTr+z+G3w78DfD201WRZr2Dw1oNrpMd46ghWkW3jQOwBIBbJAJoooA7miiigD//2Q==',\n        'NEW_WINDOW': 'N',\n        'SETTINGS' : {\n            'REST_SERVICE_ID' : {\n                'TYPE' : 'VALUE',\n                'VALUE' : 'SERVICE ID VALUE'\n            },\n            'REST_SERVICE_KEY' : {\n                'TYPE' : 'VALUE',\n                'VALUE' : 'KEY ID VALUE'\n            },\n            'PAYMENT_ID': {\n                'TYPE': 'PAYMENT',\n                'VALUE': 'ACCOUNT_NUMBER',\n            }\n        }\n    },\n    function(result)\n    {\n        if (result.error())\n        {\n            console.error(result.error());\n        }\n        else\n        {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using B24JsSDK for API Call\nDESCRIPTION: This snippet demonstrates how to use the B24JsSDK library to make an API call to Bitrix24 within a frame application. It initializes the B24Frame, sets up logging, and calls the crm.item.add method to create a new deal. The code includes error handling and logs the API response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/how-to-use-examples.md#2025-04-20_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://unpkg.com/@bitrix24/b24jssdk@latest/dist/umd/index.min.js\"></script>\n<script type=\"module\">\ntry\n{\n    const $logger = B24Js.LoggerBrowser.build('local-app', true);\n    \n    const $b24 = await B24Js.initializeB24Frame();\n    $b24.setLogger(\n        B24Js.LoggerBrowser.build('Core')\n    );\n    \n    $logger.warn('B24Frame.init');\n    \n    const response = await $b24.callMethod(\n        'crm.item.add',\n        {\n            entityTypeId: B24Js.EnumCrmEntityTypeId.deal,\n            fields: {\n                title: `New Deal`,\n                typeId: 'SALE',\n                stageId: 'NEW'\n            }\n        }\n    );\n    \n    const newDeal = response.getData().result.item;\n    \n    $logger.info(\n        `${B24Js.Text.getDateForLog()} crm.item.add >>`,\n        {\n            newId: newDeal.id,\n            createdTime: B24Js.Text.toDateTime(newDeal.createdTime).toFormat('HH:mm:ss'),\n            fields: newDeal\n        }\n    );\n}\ncatch( error )\n{\n    console.error(error);\n}\n</script>\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flow using cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to create a new flow using a cURL request with a webhook. It includes the necessary headers and JSON payload for the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-create.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"flowData\": {\n        \"name\": \"Unique Flow Name\",\n        \"description\": \"Описание потока\",\n        \"plannedCompletionTime\": 7200,\n        \"distributionType\": \"manually\",\n        \"responsibleList\": [{\"user\":\"3\"}],\n        \"taskCreators\": [{\"meta-user\":\"all-users\"}],\n        \"matchWorkTime\": 1,\n        \"notifyAtHalfTime\": 0\n    }\n}' \\\nhttps://your-domain.bitrix24.com/rest/_USER_ID_/_CODE_/tasks.flow.Flow.create\n```\n\n----------------------------------------\n\nTITLE: Adding Payment System with PHP (CRest)\nDESCRIPTION: Demonstrate how to add a payment system using PHP with CRest library. Includes configuring payment system details, making REST API call, and printing the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.paysystem.add',\n    [\n        'NAME' => 'Оплата картой',\n        'DESCRIPTION' => 'Легко оплачивайте покупки картой.',\n        'XML_ID' => 'my_ps_id',\n        'PERSON_TYPE_ID' => 1,\n        'BX_REST_HANDLER' => 'resthandlercode',\n        'ACTIVE' => 'Y',\n        'ENTITY_REGISTRY_TYPE' => 'ORDER',\n        'LOGOTYPE' => '/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0MDgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAASABUDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD73/4Oa/25vEf7CH/BK/XNW8GarrPh/wAZeONcsfCejazpk3k3GkyS+ZdTSh/vKWtbO5jDJhlaVWBBGR4V/wAFMP28vj1/wRc/4I+fs56O3jmLxh+0j4m1Wy0/V5tft11a9v4xDNc30SYJE/kTSWdn52S7o6tne+4fNv7f3/BSHwX8d/2xvjL+y/8A8FBrHxt4R+F+g/EKDxB8NtY8L6WLeTTbG3N5BDLdMqSy3FtdWkynfFFI4aSUDYQvl8r/AMFDv+Cr37P37eP/AAWX/Zz+IHw10/42fGi6+GOp2VlpnhbSrBNL03WLtLw3cF7ZtOzXJlExjWWGW1hEy20YM0aoSwB/RtRRRQBw/wAb/wBmb4b/ALTWk2On/Ej4feB/iDY6ZMbiztvEuhWurQ2khG0vGtwjhGK8EqASOKT4H/swfDX9mTTr+z+G3w78DfD201WRZr2Dw1oNrpMd46ghWkW3jQOwBIBbJAJoooA7miiigD//2Q==',\n        'NEW_WINDOW' => 'N',\n        'SETTINGS' => [\n            'REST_SERVICE_ID' => [\n                'TYPE' => 'VALUE',\n                'VALUE' => 'SERVICE ID VALUE'\n            ],\n            'REST_SERVICE_KEY' => [\n                'TYPE' => 'VALUE',\n                'VALUE' => 'KEY ID VALUE'\n            ],\n            'PAYMENT_ID' => [\n                'TYPE' => 'PAYMENT',\n                'VALUE' => 'ACCOUNT_NUMBER',\n            ]\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Example Fields Object\nDESCRIPTION: This code snippet demonstrates the structure of the `fields` object required by the `crm.lead.update` method. It shows how to format field names and their corresponding values to update specific lead attributes. Only the fields that need to be modified should be included in the `fields` object.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\n{\n    \"field_1\": \"value_1\",\n    \"field_2\": \"value_2\",\n    ...,\n    \"field_n\": \"value_n\"\n}\n\n```\n\n----------------------------------------\n\nTITLE: Defining Fields Parameter Structure in Markdown\nDESCRIPTION: This snippet details the structure of the 'fields' parameter, including various configuration options for the new CRM type such as title, entityTypeId, and feature toggles.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-add.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Название**\n`тип` | **Описание** | **По умолчанию** ||\n|| **title***\n[`string`][1]  | Название смарт-процесса | ||\n|| **entityTypeId**\n[`integer`][1] | Идентификатор создаваемого смарт-процесса. Если не передавать данное поле, то оно будет сгенерировано автоматически.\n\nСтоит учитывать, что:\n1. Данный параметр является уникальны. Не получится создать два смарт-процесса с одинаковыми `entityTypeId`\n2. Значение `entityTypeId` обязано быть в одном из двух диапазонов:\n   - четным целым числом, которое больше или равно 1030\n   - в диапазоне от 128 до 192\n| ||\n|| **relations**\n[`object`][1]  | Объект, содержащий в себе связи к другим сущностям CRM. Структура описана [ниже](#relations) | ||\n|| **isUseInUserfieldEnabled** \n[`boolean`][1] | Включено ли использование смарт-процесса в пользовательском поле | `N` ||\n|| **linkedUserFields** \n[`object`][1]  | Набор пользовательских полей в которых должен отображаться данный смарт-процесс. Структура описана [ниже](#linkedUserFields) | `{}` ||\n|| **isAutomationEnabled**\n[`boolean`][1] | Включены ли роботы и триггеры | `N` ||\n|| **isBeginCloseDatesEnabled**\n[`boolean`][1] | Включены ли поля **Дата начала** и **Дата завершения** | `N` ||\n|| **isBizProcEnabled**\n[`boolean`][1] | Включено ли использование дизайнера бизнес процессов | `N` ||\n|| **isCategoriesEnabled**\n[`boolean`][1] | Включены ли свои воронки и туннели продаж | `N` ||\n|| **isClientEnabled**\n[`boolean`][1] | Включено ли поле **Клиент**. При включенной опции у смарт-процесса появляется предустановленная привязка к **Контактам** и **Компаниям** | `N` ||\n|| **isDocumentsEnabled**\n[`boolean`][1] | Включена ли печать документов | `N` ||\n|| **isLinkWithProductsEnabled**\n[`boolean`][1] | Включена ли привязка товаров каталога | `N` ||\n|| **isMycompanyEnabled**\n[`boolean`][1] | Включено ли поле **Реквизиты вашей компании** | `N` ||\n|| **isObserversEnabled** \n[`boolean`][1] | Включено ли поле **Наблюдатели** | `N` ||\n|| **isRecyclebinEnabled**\n[`boolean`][1] | Включено ли использование корзины | `N` ||\n|| **isSetOpenPermissions** \n[`boolean`][1] | Делать ли новые воронки доступными для всех | `Y` ||\n|| **isSourceEnabled** \n[`boolean`][1] | Включены ли поля **Источник** и **Дополнительно об источнике** | `N` ||\n|| **isStagesEnabled**\n[`boolean`][1] | Включено ли использование своих стадий и канбана | `N` ||\n|| **isExternal**\n[`boolean`][1] | Является ли смарт-процесс вынесенным из CRM (привязанным к цифровому рабочему месту)\n\nПараметр устарел. Для работы с цифровыми рабочими местами используйте методы [`crm.automatedsolution.*`](../../automated-solution/index.md) | `-` ||\n|| **customSectionId**\n[`integer`][1] | Идентификатор цифрового рабочего места\n\nПараметр устарел. Для работы с цифровыми рабочими местами используйте методы [`crm.automatedsolution.*`](../../automated-solution/index.md) | `-` ||\n|| **customSections**\n[`array`][1] | Массив цифровых рабочих мест\n\nПараметр устарел. Для работы с цифровыми рабочими местами используйте методы [`crm.automatedsolution.*`](../../automated-solution/index.md) | `-` ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Log Message Using JavaScript in Bitrix24 REST API\nDESCRIPTION: This JavaScript example demonstrates how to retrieve timeline log message information using the BX24 library. It includes error handling and displaying the result data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.timeline.logmessage.get\",\n    {\n        id: 1,\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Bank Detail using JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to retrieve bank detail information by ID. It calls the `crm.requisite.bankdetail.get` method with the specified ID and handles the response in a callback function. The callback either logs an error to the console or prints the data to the console if the call is successful.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"crm.requisite.bankdetail.get\",\n        { id: 357 },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n                console.dir(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Get Basket Items List using PHP\nDESCRIPTION: This PHP code snippet retrieves a list of basket items using the `sale.basketitem.list` method. It uses the `CRest::call` function from the `crest.php` library to make the API call with specified parameters for selection, filtering, ordering, and pagination. The response is then printed to the console using `print_r` within `<PRE>` tags for better readability.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.basketitem.list',\n        [\n            'select' => [\n                'id',\n                'orderId',\n                'productId',\n                'name',\n                'price',\n                'currency',\n            ],\n            'filter' => [\n                '@orderId' => [5147, 5146],\n            ],\n            'order' => [\n                'id' => 'desc',\n            ],\n            'start' => 0,\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Reset Common Configuration using PHP\nDESCRIPTION: This snippet demonstrates how to reset the common configuration for contact details using the `CRest::call` function in PHP with the Bitrix24 REST API. It calls the `crm.contact.details.configuration.reset` method with the `scope` parameter set to \"C\" and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.details.configuration.reset',\n    [\n        'scope' => 'C'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Reset Common Configuration using cURL Webhook\nDESCRIPTION: This snippet demonstrates how to reset the common configuration for contact details using a cURL request with a Webhook in Bitrix24. It sends a POST request to the specified endpoint with the `scope` parameter set to \"C\", indicating common settings.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"scope\":\"C\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.details.configuration.reset\n```\n\n----------------------------------------\n\nTITLE: Retrieve Delivery Information Using JavaScript in Bitrix24\nDESCRIPTION: Example of how to retrieve delivery information using the BX24 JavaScript API. The method takes a delivery ID and returns delivery details or an error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/delivery/crm-item-delivery-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'crm.item.delivery.get', {\n        id: 4077,\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.log(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Requisites by Preset ID using JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to retrieve requisites from Bitrix24 CRM. It sets the `order`, `filter`, and `select` parameters to define the query. Error handling and pagination are included in the callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n            \"crm.requisite.list\",\n            {\n                order: { \"DATE_CREATE\": \"ASC\" },\n                filter: { \"PRESET_ID\": \"1\"},\n                select: [ \"ENTITY_TYPE_ID\", \"ENTITY_ID\", \"ID\", \"NAME\" ]\n            },\n            function(result)\n            {\n                if(result.error())\n                    console.error(result.error());\n                else\n                {\n                    console.dir(result.data());\n                    if(result.more())\n                        result.next();\n                }\n            }\n        );\n```\n\n----------------------------------------\n\nTITLE: Create Input Field for Address in PHP\nDESCRIPTION: This PHP code snippet generates text input fields for address data in CRM forms, following the template defined by the CPrintForm class. It maintains a simple structure for address input compliance.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'address':\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'text',\n        ]\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Waiting List Records using cURL Webhook in Bitrix24 REST API\nDESCRIPTION: This snippet shows how to use cURL with a webhook to call the booking.v1.waitlist.list method and retrieve waiting list records filtered by creation date.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/waitlist/booking-v1-waitlist-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"createdWithin\":{\"from\":\"01.04.2025\",\"to\":\"16.04.2025\"}}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/booking.v1.waitlist.list\n```\n\n----------------------------------------\n\nTITLE: Получение списка спринтов через cURL (oAuth)\nDESCRIPTION: Пример использования метода tasks.api.scrum.sprint.list с помощью cURL для oAuth аутентификации. Запрос фильтрует спринты по идентификатору группы и дате окончания.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/sprint/tasks-api-scrum-sprint-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"filter\": {\n    \"GROUP_ID\": 1,\n    \">=DATE_END\": \"2024-07-19T15:03:01+00:00\"\n},\n\"auth\": \"YOUR_ACCESS_TOKEN\"\n}' \\\nhttps://your-domain.bitrix24.com/rest/tasks.api.scrum.sprint.list\n```\n\n----------------------------------------\n\nTITLE: Setting Contact Details Configuration via cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to set the contact details configuration for a specific user in Bitrix24 CRM using a cURL request with Webhook authentication. The request defines sections and elements with their respective options. It requires replacing placeholder values with the actual Bitrix24 address, user ID, and Webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-set.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"userId\":1,\"data\":[{\"name\":\"section_1\",\"title\":\"Личные данные\",\"type\":\"section\",\"elements\":[{\"name\":\"NAME\",\"optionFlags\":1},{\"name\":\"LAST_NAME\",\"optionFlags\":1},{\"name\":\"SECOND_NAME\"},{\"name\":\"BIRTHDATE\"},{\"name\":\"PHONE\",\"optionFlags\":1,\"options\":{\"defaultCountry\":\"GB\"}},{\"name\":\"ADDRESS\",\"optionFlags\":1,\"options\":{\"defaultAddressType\":4}}]},{\"name\":\"section_2\",\"title\":\"Основная информация\",\"type\":\"section\",\"elements\":[{\"name\":\"TYPE_ID\"},{\"name\":\"SOURCE_ID\"},{\"name\":\"POST\"}]},{\"name\":\"section_3\",\"title\":\"Дополнительная информация\",\"type\":\"section\",\"elements\":[{\"name\":\"PHOTO\"},{\"name\":\"COMMENTS\"},{\"name\":\"UF_CRM_1720697698689\"}]}]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.details.configuration.set\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment List in JavaScript with BX24\nDESCRIPTION: JavaScript implementation of sale.payment.list using the Bitrix24 JavaScript SDK, showcasing method call with comprehensive field selection, filtering, and result handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.payment.list\",\n    {\n        \"select\": [\n            \"paySystemXmlId\",\n            \"paySystemIsCash\",\n            \"accountNumber\",\n            \"id\",\n            \"orderId\",\n            \"paid\",\n            \"datePaid\",\n            \"empPaidId\",\n            \"paySystemId\",\n            \"psStatus\",\n            \"psStatusCode\",\n            \"psStatusDescription\",\n            \"psStatusMessage\",\n            \"psSum\",\n            \"psCurrency\",\n            \"psResponseDate\",\n            \"payVoucherNum\",\n            \"payVoucherDate\",\n            \"datePayBefore\",\n            \"dateBill\",\n            \"xmlId\",\n            \"sum\",\n            \"currency\",\n            \"paySystemName\",\n            \"companyId\",\n            \"payReturnNum\",\n            \"priceCod\",\n            \"payReturnDate\",\n            \"empReturnId\",\n            \"payReturnComment\",\n            \"responsibleId\",\n            \"empResponsibleId\",\n            \"dateResponsibleId\",\n            \"isReturn\",\n            \"comments\",\n            \"updated1c\",\n            \"id1c\",\n            \"version1c\",\n            \"externalPayment\",\n            \"psInvoiceId\",\n            \"marked\",\n            \"reasonMarked\",\n            \"dateMarked\",\n            \"empMarkedId\",\n        ],\n        \"filter\": {\n            \"<id\": 10,\n            \"@personTypeId\": [3, 4],\n            \"payed\": \"N\",\n        },\n        \"order\": {\n            \"id\": \"desc\",\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieve Delivery Information Using PHP in Bitrix24\nDESCRIPTION: Example of how to retrieve delivery information using PHP with the CRest library. Requires the crest.php file to be included and takes a delivery ID parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/delivery/crm-item-delivery-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.delivery.get',\n    [\n        'id' => 4077\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Trade Catalogs Using JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24.callMethod function to query the catalog.catalog.list endpoint in JavaScript. It includes error handling and result logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/catalog/catalog-catalog-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"catalog.catalog.list\", {\n        \"select\": [\n            \"iblockId\",\n            \"iblockTypeId\",\n            \"id\",\n            \"lid\",\n            \"name\",\n            \"productIblockId\",\n            \"skuPropertyId\",\n            \"subscription\",\n            \"vatId\"\n        ],\n        \"filter\": {\n            \">id\": 10,\n            \"@vatId\": [1, 2],\n            \"skuPropertyId\": 121,\n        },\n        \"order\": {\n            \"id\": \"desc\",\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: PHP Implementation of Bitrix24 CRM Entity Search\nDESCRIPTION: PHP code using CRest class to search for duplicate entities in Bitrix24 CRM by phone and email. Performs API calls to find and retrieve entity details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-get-lists/search-by-phone-and-email.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?\ninclude('crest.php');\n$phone = ($_POST['PHONE'])?htmlspecialchars($_POST['PHONE']):false;\n$email = ($_POST['EMAIL'])?htmlspecialchars($_POST['EMAIL']):false;\n\n$entityIDs = [\n    'LEAD' => [],\n    'CONTACT' => [],\n    'COMPANY' => []\n];\n$resultEntity = [\n    'lead' => [],\n    'contact' => [],\n    'company' => []\n];\nif($phone)\n{\n    $result = CRest::call('crm.duplicate.findbycomm', [\n        'type' => 'PHONE',\n        'values' => [$phone]\n    ]);\n    if(is_array($result['result']['LEAD']))\n    {\n        $entityIDs['LEAD'] = array_merge($entityIDs['LEAD'], $result['result']['LEAD']);\n    }\n    if(is_array($result['result']['CONTACT']))\n    {\n        $entityIDs['CONTACT'] = array_merge($entityIDs['CONTACT'], $result['result']['CONTACT']);\n    }\n    if(is_array($result['result']['COMPANY']))\n    {\n        $entityIDs['COMPANY'] = array_merge($entityIDs['COMPANY'], $result['result']['COMPANY']);\n    }\n}\n// ... More API calls and processing ...\n?>\n```\n\n----------------------------------------\n\nTITLE: Calling tasks.task.mute method using Bitrix24 JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to call the tasks.task.mute method using the Bitrix24 JavaScript SDK. It enables the 'Do Not Disturb' mode for a task with the specified ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/tasks-task-mute.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod('tasks.task.mute', {id: 1223})\n```\n\n----------------------------------------\n\nTITLE: HTML Structure and Chat Logic (index.php)\nDESCRIPTION: This code provides the HTML structure for the chat application, including the chat history display area and the message input form. JavaScript code uses jQuery to handle form submissions, send AJAX requests to `ajax.php`, and update the chat history display periodically. The JavaScript functions `updateChat` and the submit handler handle the interaction.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/openlines/example-connector.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<body>\n    <li nk rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n         crossorigin=\"anonymous\">\n    <sc ript src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></sc ript>\n    <div class=\"container-fluid\">\n        <div class=\" m-5\">\n            <div id=\"chat_history\" class=\"row\">\n                <div class=\"spinner-border m-5 text-success\" role=\"status\">\n                    <span class=\"sr-only\">Loading...</span>\n                </div>\n            </div>\n            <div id=\"chat_form\" class=\" mt-5 mr-auto ml-auto mb-5\">\n                <fo rm id=\"form_message\">\n                    <div class=\"form-group\">\n                        <label for=\"name\">Name</label>\n                        <input type=\"text\" class=\"form-control\" placeholder=\"Name\">\n                    </div>\n                    <div class=\"form-group\">\n                        <label for=\"message\">Message</label>\n                        <textarea class=\"form-control\" name=\"message\" rows=\"3\" placeholder=\"your message here\"></textarea>\n                    </div>\n                    <input class=\"btn btn-primary\" type=\"submit\" name=\"send\" value=\"send\">\n                </form>\n            </div>\n        </div>\n    </div>\n    <sc ript>\n        $(document).ready(function () {\n            function updateChat()\n            {\n                $.ajax({\n                    'method': 'POST',\n                    'dataType': 'html',\n                    'url': 'ajax.php',\n                    'data': 'type=chat_history',\n                    success: function (data) {//success callback\n                        $('#chat_history').text('').html(data);\n                    }\n                });\n            }\n            setInterval(updateChat, 5000);\n            updateChat();\n            $('#form_message').on('submit', function (el) {//event submit form\n                el.preventDefault();//the default action of the event will not be triggered\n                $('#chat_form').addClass('spinner-border');\n                $('#form_message').hide();\n                var formData = $(this).serialize();\n                $.ajax({\n                    'method': 'POST',\n                    'dataType': 'json',\n                    'url': 'ajax.php',\n                    'data': formData + '&type=send_message',\n                    success: function (data) {//success callback\n                        updateChat();\n                        $('#chat_form').removeClass('spinner-border');\n                        $('#form_message textarea[name=message]').val('');\n                        $('#form_message').show();\n                    }\n                });\n            });\n        });\n    </sc ript>\n</body>\n```\n\nLANGUAGE: javascript\nCODE:\n```\n $(document).ready(function () {\n            function updateChat()\n            {\n                $.ajax({\n                    'method': 'POST',\n                    'dataType': 'html',\n                    'url': 'ajax.php',\n                    'data': 'type=chat_history',\n                    success: function (data) {//success callback\n                        $('#chat_history').text('').html(data);\n                    }\n                });\n            }\n            setInterval(updateChat, 5000);\n            updateChat();\n            $('#form_message').on('submit', function (el) {//event submit form\n                el.preventDefault();//the default action of the event will not be triggered\n                $('#chat_form').addClass('spinner-border');\n                $('#form_message').hide();\n                var formData = $(this).serialize();\n                $.ajax({\n                    'method': 'POST',\n                    'dataType': 'json',\n                    'url': 'ajax.php',\n                    'data': formData + '&type=send_message',\n                    success: function (data) {//success callback\n                        updateChat();\n                        $('#chat_form').removeClass('spinner-border');\n                        $('#form_message textarea[name=message]').val('');\n                        $('#form_message').show();\n                    }\n                });\n            });\n        });\n```\n\n----------------------------------------\n\nTITLE: Update CRM Requisite Field via PHP\nDESCRIPTION: This PHP code uses the CRest::call function to update a CRM requisite field. It requires the crest.php file. It calls the 'crm.requisite.preset.field.update' method with the necessary parameters and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.preset.field.update',\n    [\n        'ID' => 1,\n        'preset' => ['ID' => 27],\n        'fields' => [\n            'FIELD_NAME' => 'RQ_NAME',\n            'FIELD_TITLE' => 'Имя',\n            'IN_SHORT_LIST' => 'Y',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Constructing Discounted Product Entries in Quotes - PHP\nDESCRIPTION: This code snippet constructs an array for products with varying discount types and rates. It includes products with a fixed discount rate and those with a real discount calculation based on percentage. Each product entry defines a product ID, price, discount rate, discount type, and quantity. The snippet directly utilizes product information retrieved from an array variable `$arProduct`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-product-binding.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n                            'QUANTITY' => 1\n                        ],\n                        [//product with discount percent\n                            'PRODUCT_ID' => $arProduct['ID'],\n                            'PRICE_EXCLUSIVE' => $arProduct['PRICE'],\n                            'DISCOUNT_RATE' => 10,\n                            'DISCOUNT_TYPE_ID' => 2,//is percent discount type\n                            'QUANTITY' => 1\n                        ],\n                        [//product with real discount percent\n                            'PRODUCT_ID' => $arProduct['ID'],\n                            'PRICE_EXCLUSIVE' => $arProduct['PRICE'] - ($arProduct['PRICE'] * 0.1),\n                            'DISCOUNT_RATE' => 10,\n                            'DISCOUNT_TYPE_ID' => 2,//is percent discount type\n                            'QUANTITY' => 1\n                        ]\n```\n\n----------------------------------------\n\nTITLE: Adding Shipment Item via JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to add a shipment item using the `BX24.callMethod` function. It calls the `sale.shipmentitem.add` method with the required parameters and handles the response, logging errors to the console and successful results to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'sale.shipmentitem.add',\n    {\n        fields: {\n            orderDeliveryId: 33,\n            basketId: 18,\n            quantity: 1\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error().ex);\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Using BX24.resizeWindow Method in JavaScript\nDESCRIPTION: The BX24.resizeWindow method changes the size of the frame containing the application, including embeddings as custom fields. If the frame width exceeds the maximum allowed page width in Bitrix24, part of the frame will be hidden due to layout specifics. The maximum allowed width depends on the user's screen resolution.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/additional-functions/bx24-resize-window.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvoid BX24.resizeWindow(Integer width, Integer height[, Function callback])\n```\n\n----------------------------------------\n\nTITLE: Add Catalog Product to Basket via cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to add a catalog product to an order basket using a webhook. It includes setting the content type to JSON, providing the necessary fields such as `orderId`, `quantity`, `productId`, and `currency` in the request body. The request is sent to the specified Bitrix24 REST endpoint with the user ID and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add-catalog-product.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"fields\":{\"orderId\":5147,\"quantity\":1,\"productId\":4347,\"currency\":\"RUB\"}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.basketitem.addCatalogProduct\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: Illustrates the structure of a successful response when retrieving deals from Bitrix24. The response includes an array of deal objects, total count, and timing information. Each deal object contains properties like ID, TITLE, TYPE_ID, CATEGORY_ID, STAGE_ID, OPPORTUNITY, ASSIGNED_BY_ID, and DATE_CREATE.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/crm-deal-list.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n            \"ID\": \"37\",\n            \"TITLE\": \"[А] Сделка\",\n            \"TYPE_ID\": \"COMPLEX\",\n            \"CATEGORY_ID\": \"1\",\n            \"STAGE_ID\": \"C1:NEW\",\n            \"OPPORTUNITY\": \"19999.99\",\n            \"IS_MANUAL_OPPORTUNITY\": \"Y\",\n            \"ASSIGNED_BY_ID\": \"1\",\n            \"DATE_CREATE\": \"2024-09-02T18:37:18+02:00\"\n        },\n        {\n            \"ID\": \"38\",\n            \"TITLE\": \"[А] Сделка\",\n            \"TYPE_ID\": \"COMPLEX\",\n            \"CATEGORY_ID\": \"1\",\n            \"STAGE_ID\": \"C1:NEW\",\n            \"OPPORTUNITY\": \"20000.00\",\n            \"IS_MANUAL_OPPORTUNITY\": \"Y\",\n            \"ASSIGNED_BY_ID\": \"6\",\n            \"DATE_CREATE\": \"2024-09-02T18:37:38+02:00\"\n        },\n        {\n            \"ID\": \"39\",\n            \"TITLE\": \"[Б] Продажа\",\n            \"TYPE_ID\": \"COMPLEX\",\n            \"CATEGORY_ID\": \"1\",\n            \"STAGE_ID\": \"C1:NEW\",\n            \"OPPORTUNITY\": \"12500.00\",\n            \"IS_MANUAL_OPPORTUNITY\": \"Y\",\n            \"ASSIGNED_BY_ID\": \"1\",\n            \"DATE_CREATE\": \"2024-04-09T23:11:01+02:00\"\n        },\n        {\n            \"ID\": \"40\",\n            \"TITLE\": \"[Б] Сделка\",\n            \"TYPE_ID\": \"COMPLEX\",\n            \"CATEGORY_ID\": \"1\",\n            \"STAGE_ID\": \"C1:NEW\",\n            \"OPPORTUNITY\": \"13500.00\",\n            \"IS_MANUAL_OPPORTUNITY\": \"Y\",\n            \"ASSIGNED_BY_ID\": \"6\",\n            \"DATE_CREATE\": \"2024-08-08T19:00:14+02:00\"\n        },\n        {\n            \"ID\": \"41\",\n            \"TITLE\": \"[В] Сделка\",\n            \"TYPE_ID\": \"COMPLEX\",\n            \"CATEGORY_ID\": \"1\",\n            \"STAGE_ID\": \"C1:NEW\",\n            \"OPPORTUNITY\": \"11500.00\",\n            \"IS_MANUAL_OPPORTUNITY\": \"Y\",\n            \"ASSIGNED_BY_ID\": \"6\",\n            \"DATE_CREATE\": \"2024-05-08T09:38:23+02:00\"\n        },\n        {\n            \"ID\": \"42\",\n            \"TITLE\": \"[С] Сделка\",\n            \"TYPE_ID\": \"COMPLEX\",\n            \"CATEGORY_ID\": \"1\",\n            \"STAGE_ID\": \"C1:NEW\",\n            \"OPPORTUNITY\": \"18500.00\",\n            \"IS_MANUAL_OPPORTUNITY\": \"Y\",\n            \"ASSIGNED_BY_ID\": \"6\",\n            \"DATE_CREATE\": \"2024-07-02T15:38:32+02:00\"\n        }\n    ],\n    \"total\": 6,\n    \"time\": {\n        \"start\": 1725292115.026221,\n        \"finish\": 1725292115.907058,\n        \"duration\": 0.8808369636535645,\n        \"processing\": 0.2484450340270996,\n        \"date_start\": \"2024-09-02T17:48:35+02:00\",\n        \"date_finish\": \"2024-09-02T17:48:35+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Payment with cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to retrieve CRM payment information using OAuth. It sends a POST request with the payment ID and access token to the Bitrix24 REST API endpoint. Replace the placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-get.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1036,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.payment.get\n```\n\n----------------------------------------\n\nTITLE: Add Delivery Handler with cURL (OAuth)\nDESCRIPTION: This snippet shows how to add a delivery handler to Bitrix24 using cURL with OAuth authentication. It sends a POST request with a JSON payload containing the delivery handler's details, including code, name, description, settings, and profiles, along with an authorization token. Replace the placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-add.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"CODE\":\"uber\",\"NAME\":\"Uber\",\"DESCRIPTION\":\"Uber Description\",\"SORT\":250,\"SETTINGS\":{\"CALCULATE_URL\":\"http://gateway.bx/calculate.php\",\"CREATE_DELIVERY_REQUEST_URL\":\"http://gateway.bx/create_delivery_request.php\",\"CANCEL_DELIVERY_REQUEST_URL\":\"http://gateway.bx/cancel_delivery_request.php\",\"HAS_CALLBACK_TRACKING_SUPPORT\":\"Y\",\"CONFIG\":[{\"TYPE\":\"STRING\",\"CODE\":\"SETTING_1\",\"NAME\":\"String Example\"},{\"TYPE\":\"Y/N\",\"CODE\":\"SETTING_2\",\"NAME\":\"Checkbox Example\"},{\"TYPE\":\"NUMBER\",\"CODE\":\"SETTING_3\",\"NAME\":\"Number Example\"},{\"TYPE\":\"ENUM\",\"CODE\":\"SETTING_4\",\"NAME\":\"Enum Example\",\"OPTIONS\":{\"Option1Code\":\"Option1Value\",\"Option2Code\":\"Option2Value\",\"Option3Code\":\"Option3Value\",\"Option4Code\":\"Option4Value\",\"Option5Code\":\"Option5Value\"}},{\"TYPE\":\"DATE\",\"CODE\":\"SETTING_5\",\"NAME\":\"Date Example\"},{\"TYPE\":\"LOCATION\",\"CODE\":\"SETTING_6\",\"NAME\":\"Location Example\"}]},\"PROFILES\":[{\"NAME\":\"Taxi\",\"CODE\":\"TAXI\",\"DESCRIPTION\":\"Taxi Delivery\"},{\"NAME\":\"Cargo\",\"CODE\":\"CARGO\",\"DESCRIPTION\":\"Cargo Delivery\"}],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.delivery.handler.add\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Comment via PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to delete a CRM timeline comment. It requires the `crest.php` library for Bitrix24 REST API interaction and passes the comment's ID, owner type ID, and owner ID as parameters. The result is then printed for inspection.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.timeline.comment.delete',\n        [\n            'id' => 999,\n            'ownerTypeId' => 2,\n            'ownerId' => 10\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Force Common Scope with JavaScript\nDESCRIPTION: This snippet uses the `BX24.callMethod` function to call the `crm.contact.details.configuration.forceCommonScopeForAll` method in JavaScript. It handles the result by logging any errors to the console or displaying the data if successful.  It assumes the Bitrix24 library is already loaded.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-force-common-scope-for-all.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.details.configuration.forceCommonScopeForAll',\n    {},\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Lead via JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to delete a lead using the BX24.callMethod function. It prompts the user for the lead ID, then calls the 'crm.lead.delete' method. The result is handled in a callback function, logging errors or the data returned.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst id = prompt(\"Введите ID\");\nBX24.callMethod(\n  'crm.lead.delete',\n  { id },\n  (result) => {\n    if(result.error())\n    {\n      console.error(result.error());\n\n      return;\n    }\n    \n    console.info(result.data());\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating a Bitrix24 CRM Deal using PHP\nDESCRIPTION: PHP example for updating a CRM deal with ID 351. This uses the CRest class to call the crm.item.update method with various field updates.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-update.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.update',\n    [\n        'entityTypeId' => 2,\n        'id' => 351,\n        'fields' => [\n            'title' => \"REST Сделка #1\",\n            'stageId' => \"C9:UC_NYL06U\",\n            'assignedById' => 6,\n            'observers' => [1, 2, 3],\n            'opened' => \"N\",\n            'typeId' => \"SERVICE\",\n            'opportunity' => 10000,\n            'currencyId' => \"USD\",\n            'additionalInfo' => \"Изменение сделки через REST\",\n            'isManualOpportunity' => \"N\",\n            'utmSource' => \"google\",\n            'ufCrm_1721244707107' => 200.05,\n            'parentId1220' => [2, 1],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating a Bitrix24 CRM Deal using cURL (Webhook)\nDESCRIPTION: Example of updating a CRM deal with ID 351 using cURL and a webhook. This updates various fields of the deal including title, stage, and custom fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-update.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":2,\"id\":351,\"fields\":{\"title\":\"REST Сделка #1\",\"stageId\":\"C9:UC_NYL06U\",\"assignedById\":6,\"observers\":[1,2,3],\"opened\":\"N\",\"typeId\":\"SERVICE\",\"opportunity\":10000,\"currencyId\":\"USD\",\"additionalInfo\":\"Изменение сделки через REST\",\"isManualOpportunity\":\"N\",\"utmSource\":\"google\",\"ufCrm_1721244707107\":200.05,\"parentId1220\":[2,1]}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.item.update\n```\n\n----------------------------------------\n\nTITLE: Initializing Common Deal Card Configuration in Bitrix24 JavaScript\nDESCRIPTION: Demonstrates how to force a common scope for deal details configuration using the BX24 API. The method allows setting a global deal card configuration with optional parameters like dealCategoryId.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/custom-form/crm-deal-details-configuration-force-common-scope-for-all.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.deal.details.configuration.forceCommonScopeForAll\",\n    {},\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling User Input - PHP\nDESCRIPTION: Creates an input for a user ID and retrieves user details, displaying the user's name if available.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-lead.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n$arUser = [];\nif(!empty($value)) \n{\n    $arUser = CRest ::get('user.get', ['filter' => ['ID' => $value]]);\n}\n$return = CPrintForm ::input(\n    [\n        'NAME' => 'form[' . $key . ']',\n        'REQUIRED' => $arField[ 'isRequired' ],\n        'DISABLE' => $arField[ 'isReadOnly' ],\n        'MULTIPLE' => $arField[ 'isMultiple' ],\n        'VALUE' => $value,\n        'TYPE' => 'number'\n    ]);\nif(!empty($arUser[ 'result' ])) \n{\n    $return .= '(';\n    $i = 0;\n    foreach($arUser[ 'result' ] as $val) \n    {\n        $i++;\n        if($i > 1)\n        {\n            $return .= ', ';\n        }\n        $return .= implode(' ', [$val[ 'NAME' ], $val[ 'LAST_NAME' ]]);\n    }\n    $return .= ')';\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Requisite Field via JavaScript\nDESCRIPTION: This JavaScript code uses the BX24.callMethod function to update a CRM requisite field. It passes the method name and an object containing the field ID, preset ID, and the fields to update.  It handles both successful responses and errors.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.preset.field.update\",\n    {\n        ID: 1,          // Идентификатор настраиваемого поля, которое нужно изменить\n        preset:\n        {\n            \"ID\": 27    // Идентификатор шаблона реквизитов\n        },\n        fields:         // Значения полей, которые нужно изменить\n        {\n            \"FIELD_NAME\": \"RQ_NAME\",    // API требует указать значение в этом поле. Если\n                                        // значение менять не нужно, оставляем прежнее.\n            \"FIELD_TITLE\": \"Имя\",\n            \"IN_SHORT_LIST\": \"Y\",\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n        {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Register User Field Type with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to register a new user field type. It requires the `crest.php` library. It passes the user type ID, handler URL, title, description, and options as parameters to the `userfieldtype.add` method, and then prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'userfieldtype.add',\n        [\n            'USER_TYPE_ID' => 'test_type',\n            'HANDLER' => 'https://www.myapplication.com/handler/',\n            'TITLE' => 'Upd ated test type',\n            'DESCRIPTION' => 'Test userfield type for documentation with updated description',\n            'OPTIONS' => [\n                'height' => 60\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Удаление реквизита через OAuth (cURL)\nDESCRIPTION: HTTP POST-запрос для удаления реквизита с использованием OAuth-авторизации, требует токена доступа\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":27,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.delete\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Retrieve Shipment Fields - cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to use cURL to make a POST request to the Bitrix24 API for retrieving shipment fields using a webhook. It requires the shipment ID as a parameter and specifies content type as JSON.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-get.md#2025-04-20_snippet_0\n\nLANGUAGE: HTTP\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":2465}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipment.get\n```\n\n----------------------------------------\n\nTITLE: Parsing REST API Error Response in JSON\nDESCRIPTION: Example of a standard error response structure returned by Bitrix24 REST API when an error occurs. Includes an error code and descriptive error message.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/error-codes.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"ERROR_HANDLER_ALREADY_EXIST\",\n    \"error_description\": \"Handler already exists!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Payment Item Binding with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to update a payment item binding using a Webhook in Bitrix24. It sends a POST request with the item's ID and the fields to be updated (quantity and XML ID) in JSON format. The Webhook URL should include the Bitrix24 address, user ID, and Webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-update.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1186,\"fields\":{\"quantity\":1,\"xmlId\":\"myNewXmlId\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.paymentitembasket.update\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Smart Process Fields using PHP in Bitrix24\nDESCRIPTION: This snippet shows how to use the CRest PHP library to call the 'crm.type.fields' method and retrieve CRM smart process field information. It requires the 'crest.php' file to be included and prints the result using print_r().\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.type.fields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Adding Service Product with JavaScript in Bitrix24\nDESCRIPTION: This snippet shows how to add a service product to the Bitrix24 catalog using JavaScript. It sets various product fields including name, dates, pictures, and custom properties. The code uses the BX24.callMethod function to make the API request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/service/catalog-product-service-add.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.service.add',\n    {\n    'fields':{\n        'iblockId': 23,\n        'name': 'Услуга',\n        'active': 'Y',\n        'code': 'service',\n        'createdBy': 1,\n        'dateActiveFrom': '2024-05-28T10:00:00',\n        'dateActiveTo': '2024-05-29T10:00:00',\n        'dateCreate': '2024-05-27T10:00:00',\n        'detailPicture': {\n            'fileData':['detailPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n        },\n        'detailText': '',\n        'detailTextType': 'text',\n        'iblockSectionId': 47,\n        'modifiedBy': 1,\n        'previewPicture': {\n            'fileData':['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n        },\n        'previewText': '',\n        'previewTextType': 'text',\n        'sort': 100,\n        'vatId': 1,\n        'vatIncluded': 'Y',\n        'xmlId': '',\n        'property258': 'test',\n        'property259': ['test1', 'test2'],\n    },\n    },\n    function(result)\n    {\n    if(result.error())\n    console.error(result.error());\n    else\n    console.log(result.data());\n    }\n    );\n```\n\n----------------------------------------\n\nTITLE: Accessing Group Details via POST Request in PHP\nDESCRIPTION: This PHP code snippet shows the structure of the data received via a POST request when the widget is embedded in the SONET_GROUP_DETAIL_TAB placement. It includes information such as domain, language, application ID, authentication details, member ID, placement, and placement options, specifically the GROUP_ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/workgroups/index.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => en\\n    [APP_SID] => 3c900e588b941b81eef07608e4253159\\n    [AUTH_ID] => 1a55ba6600705a0700005a4b00000001f0f107db29f044c6ff24e984d378967134de83\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 0ad4e16600705a0700005a4b00000001f0f10731fce9fa3219163d545a088b217cc2d4\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => SONET_GROUP_DETAIL_TAB\\n    [PLACEMENT_OPTIONS] => {\\\"GROUP_ID\\\":\\\"10\\\"}\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving property values using the Bitrix24 JavaScript API\nDESCRIPTION: This snippet shows how to retrieve property values using the BX24.callMethod function in JavaScript, specifying the method, selection fields, filters, and order for the request. It includes a callback function to handle the response or any errors.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-value/sale-property-value-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.propertyvalue.list\", {\n        \"select\": [\n            \"code\",\n            \"id\",\n            \"name\",\n            \"orderId\",\n            \"orderPropsId\",\n            \"orderPropsXmlId\",\n            \"value\",\n        ],\n        \"filter\": {\n            \"=code\": \"FIO\",\n            \"%value\": \"Борис\",\n            \">orderId\": 1600,\n        },\n        \"order\": {\n            \"orderId\": \"desc\",\n        },\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Get User Data Using im.user.list.get in PHP\nDESCRIPTION: This PHP code snippet shows how to retrieve user data using the `im.user.list.get` method via the `restCommand` function. It passes an array of user IDs as a parameter to the method.  Authentication information is expected to be present in the `$_REQUEST[\"auth\"]` variable.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/chats/users/im-user-list-get.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$result = restCommand(\n        'im.user.list.get',\n        Array(\n            'ID' => [4,5],\n        ),\n        $_REQUEST[\n            \"auth\"\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: JavaScript Constants and Methods Mapping\nDESCRIPTION: This JavaScript code defines constants for item types (activity and timeline) and a mapping between item types and corresponding Bitrix24 REST API methods for getting, setting, and deleting content blocks. The `METHODS_MAP` object associates each item type with its related API endpoints and item field names.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n<script>\n    const ITEM_ACTIVITY = 1;\n    const ITEM_TIMELINE = 2;\n    const ALLOWED_ITEM_TYPES = [\n        ITEM_ACTIVITY,\n        ITEM_TIMELINE,\n    ];\n    const METHODS_MAP = {\n        [ITEM_ACTIVITY]: {\n            get: 'crm.activity.layout.blocks.get',\n            set: 'crm.activity.layout.blocks.set',\n            delete: 'crm.activity.layout.blocks.delete',\n            itemField: 'activityId',\n        },\n        [ITEM_TIMELINE]: {\n            get: 'crm.timeline.layout.blocks.get',\n            set: 'crm.timeline.layout.blocks.set',\n            delete: 'crm.timeline.layout.blocks.delete',\n            itemField: 'timelineId',\n        },\n    };\n\n```\n\n----------------------------------------\n\nTITLE: Removing Task Dependency using JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to remove a task dependency using the BX24.callMethod function in JavaScript. It includes error handling and result logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/task-dependence-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'task.dependence.delete', {\n        \"taskIdFrom\":100,\n        \"taskIdTo\":101,\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Ejemplo de implementación de BX24.selectUsers en JavaScript\nDESCRIPTION: Ejemplo completo de cómo utilizar el método BX24.selectUsers para seleccionar múltiples usuarios y procesar los resultados. El callback recibe un array de objetos con id y nombre de los usuarios seleccionados.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/system-dialogues/bx24-select-users.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.selectUsers(\n    function(params)\n    {\n        for (var i in params)\n        {\n            let param = params[i];\n            BX('student' + i).value = param.name;\n            BX('student_external_id'  + i).value = param.id;\n        }\n    }\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM activities using JavaScript BX24 API\nDESCRIPTION: Example of using the JavaScript BX24 API to retrieve activities for a contact with ID 102, sorting by ID in descending order and selecting all fields plus communications.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.activity.list\",\n    {\n        order: { \"ID\": \"DESC\" },\n        filter:\n        {\n            \"OWNER_TYPE_ID\": 3,\n            \"OWNER_ID\": 102\n        },\n        select: [ \"*\", \"COMMUNICATIONS\" ]\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n        {\n            console.dir(result.data());\n            if(result.more())\n                result.next();\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calendar Sections using cURL (OAuth)\nDESCRIPTION: This snippet shows how to call the calendar.section.get method using cURL with OAuth authentication. It includes the access token in the request body along with the calendar type and owner ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-section-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"type\":\"user\",\"ownerId\":1,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/calendar.section.get\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskCommentAdd Event with JavaScript\nDESCRIPTION: JavaScript code example that uses the BX24 API to subscribe to the OnTaskCommentAdd event. The code registers a handler URL and processes the response with callbacks for both success and error cases.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/comment-item/events-comment/on-task-comment-add.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'event.bind',\n    {\n        \"event\": \"OnTaskCommentAdd\",\n        \"handler\": \"https://example.com/handler.php\"\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Order Entity Binding with cURL (OAuth)\nDESCRIPTION: Demonstrates how to remove an order's binding to a CRM object using cURL with OAuth authentication\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/order-entity/crm-order-entity-delete-by-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"orderId\":5125,\"ownerId\":6933,\"ownerTypeId\":2},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.orderentity.deletebyfilter\n```\n\n----------------------------------------\n\nTITLE: Setting Base Currency with PHP\nDESCRIPTION: PHP implementation to set base currency using CRest library with result printing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-base-set.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.currency.base.set',\n    [\n        'id' => 'RUB'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Getting Call Status using cURL (Webhook) - Bash\nDESCRIPTION: This snippet demonstrates how to make a POST request using cURL to get the current call status, utilizing webhook authentication. It shows the necessary headers and data format required for the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/get-status.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"PLACEMENT\":\"getStatus\",\"PARAMS\":{}}' \\\n\"https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/placement.call\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Time Records with cURL (OAuth)\nDESCRIPTION: Example of using cURL with OAuth authentication to get a list of time records, filtering by creation date and sorting by ID in descending order.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/elapsed-item/task-elapsed-item-get-list.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{[{\"ID\": \"desc\"},{\">=CREATED_DATE\": \"2024-02-16\"}],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/task.elapseditem.getlist\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a successful response when updating a to-do description. The `result` object contains the ID of the updated to-do activity. The `time` object provides information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/todo/crm-activity-todo-update-description.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"id\": 999\n    },\n    \"time\": {\n       \"start\": 1724068028.331234,\n        \"finish\": 1724068028.726591,\n        \"duration\": 0.3953571319580078,\n        \"processing\": 0.13033390045166016,\n        \"date_start\": \"2025-01-21T13:47:08+02:00\",\n        \"date_finish\": \"2025-01-21T13:47:08+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Requisite via cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates updating a CRM requisite using OAuth authentication. It sends a POST request with the requisite ID, fields to be updated, and an access token.  Ensure to replace the placeholder values with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":27,\"fields\":{\"RQ_OKPO\":\"80715150\",\"RQ_OKTMO\":\"45381000000\",\"UF_CRM_1707997209\":\"78\",\"UF_CRM_1708012333\":\"Категория 3\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.update\n```\n\n----------------------------------------\n\nTITLE: Generating CRM Company Input Field\nDESCRIPTION: This code generates a text input field for a CRM company. It fetches the company details using `CRest::get('crm.company.list')` if the company's information is not already available. The company title is then appended to the input field. The input properties like name, requirement status, disabled status, multiplicity and value are set from the `$arField` array.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'crm_company':\n            $arCompany = [];\n            if (!empty($arResult['VALUE_' . $key]))\n            {\n                $arCompany = $arResult['VALUE_' . $key];\n            }\n            elseif (!empty($value))\n            {\n                $arCompany = CRest::get('crm.company.list', ['filter' => ['ID' => $value]]);\n            }\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'text',\n                ]\n            );\n            if (!empty($arCompany['result']))\n            {\n                $return .= '(';\n                $i = 0;\n                foreach ($arCompany['result'] as $val)\n                {\n                    $i++;\n                    if ($i > 1)\n                    {\n                        $return .= ', ';\n                    }\n                    $return .= $val['TITLE'];\n                }\n                $return .= ')';\n            }\n            break;\n```\n\n----------------------------------------\n\nTITLE: Updating Product Files - JavaScript\nDESCRIPTION: This JavaScript code snippet retrieves product data from the CRM system and modifies file properties to indicate their removal. It handles standard and multiple file properties and utilizes the BX24.callMethod for API interaction. The implementation requires a properly configured BX24 environment.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-change-product-custom-field-values.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet idProduct = 10339;\n\nlet propertyIDFile = 107;\nlet propertyIDMultiFile = 108;\n\nBX24.callMethod(\n    'crm.product.get',\n    {\n        'id': idProduct\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            let arProduct = result.data();\n            let arPropsFile = [\n                'PREVIEW_PICTURE',\n                'DETAIL_PICTURE',\n            ];\n            if (propertyIDFile > 0) {\n                arPropsFile.push('PROPERTY_' + propertyIDFile);\n            }\n            if (propertyIDMultiFile > 0) {\n                arPropsFile.push('PROPERTY_' + propertyIDMultiFile);\n            }\n            let arSaveData = {};\n            arPropsFile.forEach(function(prop) {\n                if (arProduct[prop] && arProduct[prop].id) { // for standard fields PREVIEW_PICTURE and DETAIL_PICTURE\n                    arSaveData[prop] = {\n                        'id': arProduct[prop].id,\n                        'remove': 'Y'\n                    };\n                } else if (arProduct[prop] && arProduct[prop].value && arProduct[prop].value.id) { // for property type file\n                    arSaveData[prop] = {\n                        'valueId': arProduct[prop].valueId,\n                        'value': {\n                            'id': arProduct[prop].value.id,\n                            'remove': 'Y'\n                        }\n                    };\n                } else if (!arProduct[prop].value && Array.isArray(arProduct[prop])) { // for property type multiple file\n                    arProduct[prop].forEach(function(file) {\n                        if (file.value && file.value.id) {\n                            if (!arSaveData[prop]) {\n                                arSaveData[prop] = [];\n                            }\n                            arSaveData[prop].push({\n                                'valueId': file.valueId,\n                                'value': {\n                                    'id': file.value.id,\n                                    'remove': 'Y'\n                                }\n                            });\n                        }\n                    });\n                }\n            });\n\n            BX24.callMethod(\n                'crm.product.update',\n                {\n                    'id': idProduct,\n                    'fields': arSaveData\n                },\n                function(resultSave) {\n                    if (resultSave.error()) {\n                        console.error(resultSave.error());\n                    } else {\n                        console.dir(resultSave.data());\n                    }\n                }\n            );\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Currency List with PHP\nDESCRIPTION: PHP implementation for fetching currency list using CRest library with order parameters\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.currency.list',\n    [\n        'order' => [\n            'sort' => 'asc',\n            'currency' => 'asc',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating Product Files - PHP\nDESCRIPTION: This PHP code snippet demonstrates how to get product details and update file properties to mark them for removal in a CRM system. It uses the CRest class for API calls and handles standard file properties as well as multiple file properties. Required dependencies include the CRest class and the crest.php file.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-change-product-custom-field-values.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n$idProduct = 10339;\n\n$propertyIDFile = 107;\n$propertyIDMultiFile = 108;\n\n$result = CRest::call(\n    'crm.product.get',\n    [\n        'id' => $idProduct\n    ]\n);\n\nif (!empty($result['result']))\n{\n    $arProduct = $result['result'];\n    $arPropsFile = [\n        'PREVIEW_PICTURE',\n        'DETAIL_PICTURE',\n    ];\n    if ($propertyIDFile > 0)\n    {\n        $arPropsFile[] = 'PROPERTY_' . $propertyIDFile;\n    }\n    if ($propertyIDMultiFile > 0)\n    {\n        $arPropsFile[] = 'PROPERTY_' . $propertyIDMultiFile;\n    }\n    $arSaveData = [];\n    foreach ($arPropsFile as $prop)\n    {\n        if (!empty($arProduct[$prop]['id']))//for standard fields PREVIEW_PICTURE and DETAIL_PICTURE\n        {\n            $arSaveData[$prop] = [\n                'id' => $arProduct[$prop]['id'],\n                'remove' => 'Y',\n            ];\n        }\n        elseif (!empty($arProduct[$prop]['value']['id']))//for property type file\n        {\n            $arSaveData[$prop] = [\n                'valueId' => $arProduct[$prop]['valueId'],\n                'value' => [\n                    'id' => $arProduct[$prop]['value']['id'],\n                    'remove' => 'Y',\n                ]\n            ];\n        }\n        elseif (!isset($arProduct[$prop]['value']) && is_array($arProduct[$prop]))//for property type multiple file\n        {\n            foreach ($arProduct[$prop] as $file)\n            {\n                if (!empty($file['value']['id']))\n                {\n                    $arSaveData[$prop][] = [\n                        'valueId' => $file['valueId'],\n                        'value' => [\n                            'id' => $file['value']['id'],\n                            'remove' => 'Y',\n                        ]\n                    ];\n                }\n\n            }\n        }\n    }\n}\n\n$resultSave = CRest::call(\n    'crm.product.update',\n    [\n        'id' => $idProduct,\n        'fields' => $arSaveData\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Call Status using BX24 API - JavaScript\nDESCRIPTION: This snippet illustrates how to use the BX24 JavaScript SDK to invoke the 'getStatus' method for retrieving the current call status. It includes a callback function to handle the response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/get-status.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.call('getStatus', {}, function (result) {\\n    console.log(result);\\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting a CRM Quote User Field with Javascript\nDESCRIPTION: This snippet demonstrates how to delete a CRM quote user field using the `crm.quote.userfield.delete` method in JavaScript. It prompts the user for the ID of the field to be deleted and then uses `BX24.callMethod` to make the API call. The result is handled by a callback function that logs either the error or the returned data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/quote/user-field/crm-quote-user-field-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    var id = prompt(\"Введите ID\");\n    BX24.callMethod(\n        \"crm.quote.userfield.delete\",\n        { id: id },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n                console.info(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Payment with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve CRM payment information using the `CRest::call` function from the `crest.php` library. It calls the `crm.item.payment.get` method with the payment ID and prints the result to the console. Requires `crest.php` library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.payment.get',\n    [\n        'id' => 1036\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calendar Events with getEvents Method\nDESCRIPTION: Demonstrates how to fetch calendar events for a specific date range using the getEvents method. The code calculates a 30-day period and retrieves all events within that timeframe.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-grid-veiw.md#2025-04-20_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nvar dateFrom = new Date();\nvar dateTo = new Date(dateFrom.getTime() + 86400 * 30 * 1000); // Умножаем на 1000, чтобы преобразовать секунды в миллисекунды\ndateFrom.setHours(0, 0, 0, 0);\ndateTo.setHours(0, 0, 0, 0);\n\nBX24.placement.call(\n    'getEvents',\n    {\n        dateFrom: dateFrom,\n        dateTo: dateTo\n    },\n    function(events) {\n        console.log('getEvents response:');\n        console.dir(events);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Удаление реквизита в PHP с использованием CRest\nDESCRIPTION: Вызов метода удаления реквизита с помощью библиотеки CRest и вывод результата\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.delete',\n    [\n        'id' => 27\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating Product Catalog Entry - PHP\nDESCRIPTION: PHP implementation for updating a product catalog entry using Bitrix24 REST API. Shows how to set product attributes including images, pricing, dimensions and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/catalog-product-update.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.update',\n    [\n        'id' => 1267,\n        'fields' => [\n            'name' => 'Товар',\n            'active' => 'Y',\n            'barcodeMulti' => 'Y',\n            'canBuyZero' => 'Y',\n            'code' => 'Tovar',\n            'createdBy' => 1,\n            'dateActiveFrom' => '2024-05-28T10:00:00',\n            'dateActiveTo' => '2024-05-29T10:00:00',\n            'dateCreate' => '2024-05-27T10:00:00',\n            'detailPicture' => [\n                'fileData' => [\n                    'detailPicture.png',\n                    'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCC'\n                ]\n            ],\n            // ... additional fields omitted for brevity\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Get Contact-Company Fields with JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to retrieve contact-company fields. It makes an asynchronous call to the `crm.contact.company.fields` method and logs the result or error to the console. The method takes no parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.company.fields',\n    {},\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Restoring a File from Recycle Bin using Bitrix24 REST API in JavaScript\nDESCRIPTION: This code snippet demonstrates how to use the disk.file.restore method to recover a file from the recycle bin in Bitrix24. It takes the file ID as a parameter and handles both successful and error responses.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/file/disk-file-restore.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.file.restore\",\n    {\n        id: 10\n    },\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Shipment Item via Webhook - cURL\nDESCRIPTION: HTTP POST request to update a shipment item using Bitrix24 webhook authentication method with specified item ID and fields\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-update.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":7,\"fields\":{\"quantity\":5,\"xmlId\":\"myNewXmlId\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipmentitem.update\n```\n\n----------------------------------------\n\nTITLE: Deleting Property Variant with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to delete a property variant. It requires the `crest.php` library and prints the result of the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.propertyvariant.delete',\n    [\n        'id' => 5\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Waiting List Records using cURL OAuth in Bitrix24 REST API\nDESCRIPTION: This snippet demonstrates how to use cURL with OAuth authentication to call the booking.v1.waitlist.list method and retrieve waiting list records filtered by creation date.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/waitlist/booking-v1-waitlist-list.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"createdWithin\":{\"from\":\"01.04.2025\",\"to\":\"16.04.2025\"}},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/booking.v1.waitlist.list\n```\n\n----------------------------------------\n\nTITLE: Using BX24.userOption.get with Various Data Types in JavaScript\nDESCRIPTION: This example demonstrates setting and retrieving user options of different data types (string, number, object) using BX24.userOption.set and BX24.userOption.get methods within the BX24.init callback.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/options/bx24-user-option-get.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.init(() => {\n    BX24.userOption.set('param_str', 'str');\n    BX24.userOption.set('param_numb', 1);\n    BX24.userOption.set('param_obj', {foo: 'bar'});\n\n    console.log(BX24.userOption.get('param_str')); //вернет str\n    console.log(BX24.userOption.get('param_numb')); //вернет 1\n    console.log(BX24.userOption.get('param_obj')); //вернет {foo: 'bar'}\n});\n```\n\n----------------------------------------\n\nTITLE: Get Lead by ID using JavaScript\nDESCRIPTION: This JavaScript code retrieves a lead by its ID using the `BX24.callMethod` function.  The `id` parameter is passed as part of the method call. It includes error handling and displays the lead data in the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n  'crm.lead.get',\n  { id: 123 },\n  (result) => {\n    if(result.error())\n    {\n      console.error(result.error());\n\n      return;\n    }\n    \n    console.info(result.data());\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Lead Product Rows in Bitrix24 using Javascript\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve product rows for a lead using the `crm.lead.productrows.get` method. It prompts the user for a lead ID, then calls the method to fetch the product rows. The result is then logged to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-productrows-get.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.lead.productrows.get\",\n    { id: id },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Querying Address Fields via cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to retrieve address fields using cURL with OAuth authentication in Bitrix24. It sends a POST request with the access token in the JSON body to the crm.address.fields endpoint.  Replace the placeholders with your actual Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/addresses/crm-address-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.address.fields\n```\n\n----------------------------------------\n\nTITLE: Removing Task from Favorites using Bitrix24 REST API in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the tasks.task.favorite.remove method using the Bitrix24 JavaScript SDK. It removes a task with ID 119 from the user's favorites and logs the result to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/tasks-task-favorite-remove.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod('tasks.task.favorite.remove', {taskId: 119}, (res)=>{console.log(res.answer.result);});\n```\n\n----------------------------------------\n\nTITLE: JavaScript Bitrix24 Method Call for Entity Merge\nDESCRIPTION: Example JavaScript implementation using Bitrix24's callMethod to merge CRM entities with specified type and IDs\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/duplicates/crm-entity-merge-batch.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'crm.entity.mergeBatch',\n    {\n        params: {\n            entityTypeId: 3,\n            entityIds: [1, 2, 3],\n        }\n    },\n    (result) => {\n        console.log(result);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bank Details with PHP CRest Library\nDESCRIPTION: Demonstrate how to use the CRest PHP library to retrieve bank details by calling the crm.requisite.bankdetail.list method with order, filter, and select parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.bankdetail.list',\n    [\n        'order' => ['DATE_CREATE' => 'ASC'],\n        'filter' => ['COUNTRY_ID' => '1'],\n        'select' => ['ENTITY_ID', 'ID', 'NAME']\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Adding Business Process Template with cURL in Bitrix24\nDESCRIPTION: This snippet demonstrates how to add a workflow template using cURL with OAuth authentication. It specifies a document type for lists, provides template name and description, sets auto-execution settings, and includes the base64-encoded template data from a .bpt file.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/template/bizproc-workflow-template-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"DOCUMENT_TYPE\":[\"lists\",\"BizprocDocument\",\"iblock_164\"],\"NAME\":\"App template\",\"DESCRIPTION\":\"Template was generated by rest application.\",\"AUTO_EXECUTE\":3,\"TEMPLATE_DATA\":[\"bp-379.bpt\",\"eNrlWNtO41YUfe9XRH5vlTiJhxj1IYkdYTU3Jeb2ZBkwg1UHU9t0BiFLhKk6rTq9aNSHqupF7RcwU1JSIOEXjv+oex/biZ04YWagIKYvcE7Ots9ea9+t8hx/aPOPeGZFbLWlRp1Z1Hl20eYXeEYWa81qURaZRZXP8Ic6n4ZFHsVzcHiwpzEgx3I809Y+29d2HV01Vk3r023DfFLcdPTPdecAJUC4rnaoML5U6+wZqkO3BZ6hgrDdwn2GZ9bp/zTPNC1zT7McXbPxehZvzcPTumPQRzkQIb+TodclF6RHTsmQvCYn3jGsL7wXZOB9Q/5JkVekT87IgPS87ofkyjsC+S9x43VH12hWR7dt3dzFaxbwGtBCwE2aP3TpToztWrFdO7aTY7vl2G41tlsLd65LaSnv6MaWpe3O5xovNDfrmlPTbFt9rM2gmYV1MZ9Oc2llocCxBYUrsByr5Atsnn073qlzZOA8uFDWnjpUMov8vwRGe+TS+z4FRhiSc3Likw/rHp86/Lh9YDtah6+bT6rmpmq4H0SeAMP1YPOa/j2JS4PgnyB27j3zvgajwutPqW2jYgIo7/qqjLSrmFZHpfqBdvQsPzpbtjWrYpmdCMHgRTyj7js7psUsurE3obRszpGN+mIW6CZ/AOgheQUK94CAPukhQnC3jyjQY9IPdRW3dMe0ymanAyEz0nXaC3znQPegZim2ijVRhhgduxGYcaXYkoqlqhj/tdyot+ViXY46JygsNMrLNbEuKxVJrAr0kE2jgVmekajLFwKHCx0pU8CTlPctDbJLhIZmCNwtdEsApftQUNOKbjiapW4gNxt8xo96BB3+lPZ/akHS0C10wNFPtX3D0ffGUkg5+mn0sZJqa9MXQ/4CRuHRp8xindoSo1GqicBDramsJYHLodl+9B0rRRMFBejbDz10PmrQZQt80NEDqt4EeubWoE/cnoi/1hAkMLWglNaT8GM2IT8jwgn0E0BhuQ/hcA8gIzcnAhSgOCnllhjUqCkDsxEDYzQCSEgk74V5QR0f+CzrYugG1o1Cv6Ft03diW8w6pWqj/ImSnJYwciEtgdcOvC8gyR6BFU+gsvcB54CWn7/IEKt/UJVulq8SrJq59XwFjxbLsrSS6MhZECc/QD2EMgIVc4Btj3fsvbjOh2G5YZrG/URuePO070JYlppKc7lUldpLYqKFWQzd36Ble0at2Acr0gYvyYFnQ0zfG8RMaE6l0mrUkhDmC9HqM4DFc2yfcHMyaWnSf9jZqjBiQ24kccHlo1wMqbEHlA8/Vb9/jICi7UZLTnQM7Kx/AqCntAXu+n3kEWLGAQY4OL8e/c1T3O23ZIgReljaVGcnqxW8l/wKdj7zoxwb6P8gQUcYggttx9J3HwfM2abl4OybCUDZmuPA6Xj6xN69vdRYVYqCoFQarVpscsoFh6IgyROn7gRrqBsmCP8XxRnnE58eP0MK2rYK2q+oxr4WmWgm6I6hmE5DEFfNlrgiiatKUyrLy63E8pLnqMed0fkFhjHy92iGASe8wAC8onPbaTBDd8HvhlCAjpIqzrZuaPeTjsObEytOyIMsrskzpwF/6oT88i7AnXA2vnPg4c3TwB/FgSvyetMPwPSkD2Qp/D65StGPKJQFzMZvyQM6pGZom6E+jT1HN3fHUTTB05jx4D07TscIlkt06d45oZMQRpTiJa4f64IoF6XqvKDKLbxRUD3AYMqM4M+KpSw3M5YeYAxxMbyzQyiXvz6E/uehk8NvU0LyjIMJ6Bf6AeKSjnF9aAB7QBd0O/gpF3vCU2ZODb/jRmd+5YXTtVp1xvjKItSX9LP0VzQlUHgX3nfe8wcC0HX/BTDK1SA=\"],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/bizproc.workflow.template.add\n```\n\n----------------------------------------\n\nTITLE: Moving a Checklist Item After Another Item in Bitrix24 Tasks using JavaScript\nDESCRIPTION: This code demonstrates how to call the task.checklistitem.moveafteritem method in Bitrix24 REST API to move a checklist item after another specified item. The method takes three parameters: task ID (13), item ID to move (21), and the ID of the item after which to place it (9).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/checklist-item/task-checklist-item-move-after-item.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'task.checklistitem.moveafteritem',\n    [13, 21, 9],\n    function(result){\n        console.info(result.data());\n        console.log(result);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Shipment List with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to query the shipment list using the `sale.shipment.list` method via cURL with Webhook authentication. It specifies the fields to select, a filter to apply, and the order in which to sort the results. Replace placeholders with your Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-list.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"accountNumber\",\"allowDelivery\",\"basePriceDelivery\",\"canceled\",\"comments\",\"companyId\",\"currency\",\"customPriceDelivery\",\"dateAllowDelivery\",\"dateCanceled\",\"dateDeducted\",\"dateInsert\",\"dateMarked\",\"dateResponsibleId\",\"deducted\",\"deliveryDocDate\",\"deliveryDocNum\",\"deliveryId\",\"deliveryName\",\"deliveryXmlId\",\"discountPrice\",\"empAllowDeliveryId\",\"empCanceledId\",\"empDeductedId\",\"empMarkedId\",\"empResponsibleId\",\"externalDelivery\",\"id1c\",\"marked\",\"orderId\",\"priceDelivery\",\"reasonMarked\",\"reasonUndoDeducted\",\"responsibleId\",\"statusId\",\"statusXmlId\",\"system\",\"trackingDescription\",\"trackingLastCheck\",\"trackingNumber\",\"trackingStatus\",\"updated1c\",\"version1c\",\"xmlId\"],\"filter\":{\"@orderId\":[2069,2070],\">=id\":2464},\"order\":{\"id\":\"desc\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipment.list\n```\n\n----------------------------------------\n\nTITLE: Calling placement.call with disableAutoClose via cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to call the `placement.call` method with the `disableAutoClose` placement using cURL with OAuth authentication. It sends a POST request with the placement name and an empty parameter object in JSON format. Replace placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/disable-auto-close.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"PLACEMENT\":\"disableAutoClose\",\"PARAMS\":{}}' \\\n\"https://**put_your_bitrix24_address**/rest/placement.call?auth=**put_access_token_here**\"\n```\n\n----------------------------------------\n\nTITLE: Adding Product SKU - PHP Implementation\nDESCRIPTION: PHP implementation for adding a product SKU using CRest::call method. Demonstrates complete product configuration including images, dimensions, pricing, and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/sku/catalog-product-sku-add.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.sku.add',\n    [\n        'fields' => [\n            'iblockId' => 23,\n            'name' => 'Головной товар',\n            'active' => 'Y',\n            'canBuyZero' => 'Y',\n            'code' => 'product_sku',\n            'createdBy' => 1,\n            'dateActiveFrom' => '2024-05-28T10:00:00',\n            'dateActiveTo' => '2024-05-29T10:00:00',\n            'dateCreate' => '2024-05-27T10:00:00',\n            'detailPicture' => [\n                'fileData' => ['detailPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­....']\n            ],\n            'detailText' => '',\n            'detailTextType' => 'text',\n            'height' => 100,\n            'iblockSectionId' => 47,\n            'length' => 100,\n            'measure' => 5,\n            'modifiedBy' => 1,\n            'previewPicture' => [\n                'fileData' => ['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­....']\n            ],\n            'previewText' => '',\n            'previewTextType' => 'text',\n            'purchasingCurrency' => 'RUB',\n            'purchasingPrice' => 1000,\n            'quantity' => 10,\n            'sort' => 100,\n            'subscribe' => 'Y',\n            'vatId' => 1,\n            'vatIncluded' => 'Y',\n            'weight' => 100,\n            'width' => 100,\n            'xmlId' => '',\n            'property258' => 'test',\n            'property259' => ['test1', 'test2'],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Calling disk.file.get Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the disk.file.get method using the BX24 JavaScript library. It retrieves file information for a file with ID 10 and logs the result or error to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/file/disk-file-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.file.get\",\n    {\n        id: 10\n    },\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Waiting List Records using PHP in Bitrix24 REST API\nDESCRIPTION: This snippet shows how to use PHP to call the booking.v1.waitlist.list method and retrieve waiting list records filtered by creation date. It uses the CRest library for API interaction.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/waitlist/booking-v1-waitlist-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'booking.v1.waitlist.list',\n    [\n        'filter' => [\n            'createdWithin' => [\n                'from' => '01.04.2025',\n                'to' => '16.04.2025' //не включительно, будут отобраны записи с самой поздней датой 15.04.2025\n            ]\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskUpdate Event in PHP\nDESCRIPTION: PHP code example demonstrating how to subscribe to the onTaskUpdate event using the CRest library. The code registers a handler URL and displays the result of the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-update.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'event.bind',\n    [\n        'event' => 'onTaskUpdate',\n        'handler' => 'https://example.com/handler.php'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Requisite Countries with PHP\nDESCRIPTION: This PHP snippet retrieves the list of countries using the CRest::call function. It requires the crest.php library. It calls the crm.requisite.preset.countries method and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/crm-requisite-preset-countries.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.preset.countries',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Query User Field List with JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to retrieve a list of CRM requisite user fields using the `BX24.callMethod` function, specifying the sorting order and filter criteria. The code defines a callback function to handle the result, logging any errors and displaying the retrieved data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"crm.requisite.userfield.list\",\n        {\n            order: { \"SORT\": \"ASC\" },\n            filter: { \"MANDATORY\": \"N\", \"LANG\": \"ru\" }\n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n            {\n                console.dir(result.data());\n                if(result.more())\n                    result.next();\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Storage Information with disk.storage.get in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the disk.storage.get method using the Bitrix24 JavaScript SDK. It retrieves storage information for a given storage ID and handles the response, including error checking.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/storage/disk-storage-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.storage.get\",\n    {id: 2},\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Item via PHP\nDESCRIPTION: This PHP code snippet uses the `CRest::call` method to retrieve a shipment item from Bitrix24. It requires the `crest.php` library for making REST API calls.  The code passes the method name and item ID and then prints the result array.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.shipmentitem.get',\n        [\n            'id' => 7\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Types with cURL OAuth in Bitrix24\nDESCRIPTION: This snippet shows how to use cURL to call the catalog.priceType.list method using OAuth authentication in Bitrix24. It includes the same parameters as the webhook example.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/price-type/catalog-price-type-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"name\",\"xmlId\"],\"filter\":{\"modifiedBy\":1},\"order\":{\"id\":\"ASC\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.priceType.list\n```\n\n----------------------------------------\n\nTITLE: Creating Shipment Property 'Address From' in Bitrix24 REST API (PHP)\nDESCRIPTION: Adds a new shipment property with type ADDRESS for the 'From' address using PHP CRest library, configured for a specific person type and property group\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipmentproperty.add',\n    [\n        'fields' => [\n            'personTypeId' => 3,\n            'propsGroupId' => 6,\n            'name' => 'Address From',\n            'active' => 'Y',\n            'sort' => '100',\n            'type' => 'ADDRESS',\n            'required' => 'Y',\n            'isAddressFrom' => 'Y'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: PHP Placement Call for Enable Auto Close\nDESCRIPTION: PHP method to enable automatic call card closing using CRest library for Bitrix24\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/enable-auto-close.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'placement.call',\n    [\n        'PLACEMENT' => 'enableAutoClose',\n        'PARAMS' => (object)[]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status Localization Fields with cURL OAuth in Bash\nDESCRIPTION: This code snippet demonstrates how to retrieve available fields for status localizations using a cURL request with OAuth authentication. It sends a POST request to the sale.statuslang.getfields endpoint with an access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status-lang/sale-status-lang-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.statuslang.getfields\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signed Documents using JavaScript in B24 REST API\nDESCRIPTION: This JavaScript example shows how to use the BX24 library to call the sign.b2e.personal.tail method. It retrieves signed documents with pagination parameters and handles the response with appropriate error checking.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sign/sign-b2e-personal-tail.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'sign.b2e.personal.tail',\n    {\n        // Количество записей на странице. Значение от 1 до 50. По умолчанию 20.\n        limit: 2,\n        \n        // Параметр для управления постраничной навигацией.\n        // Используется для указания смещения от начала списка.\n        offset: 0\n    },\n    result => {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.dir(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Filtered Task History with JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to call the tasks.task.history.list method to retrieve the history of a specific task, filtered by the 'NEW' field (when the task was created).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/tasks-task-history-list.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod('tasks.task.history.list', {taskId: 119, filter:{FIELD:'NEW'}}, (res)=>{console.log(res.answer.result);});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Information with PHP in Bitrix24\nDESCRIPTION: PHP code example demonstrating how to call the booking.v1.booking.get method using the CRest library to retrieve booking information by ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-get.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'booking.v1.booking.get',\n    [\n        'id' => 15\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Leads with cURL (OAuth)\nDESCRIPTION: This cURL command shows how to retrieve a list of leads using OAuth authentication in Bitrix24. It includes the same selection, filtering, and ordering criteria as the webhook example, but also adds an 'auth' parameter with the access token.  Replace placeholders for Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Accept: application/json\" \\\n  -d '{\"select\":[\"*\",\"UF_*\"],\"start\":50,\"filter\":{\"=OPPORTUNITY\":15000},\"order\":{\"STATUS_ID\":\"ASC\"},\"auth\":\"**put_access_token_here**\"}' \\\n  https://**put_your_bitrix24_address**/rest/crm.lead.list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Details Response Format in Bitrix24 REST API\nDESCRIPTION: This JSON snippet shows the format of a response from the sale.order.get method, including order details and timing information of the API request execution.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/order/sale-order-get.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"order\": {\n            \"statusId\": \"N\",\n            \"statusXmlId\": \"\",\n            \"taxValue\": 163.33,\n            \"tradeBindings\": [\n                {\n                    \"externalOrderId\": \"236\",\n                    \"id\": 224,\n                    \"orderId\": 236,\n                    \"params\": null,\n                    \"tradingPlatformId\": \"9\",\n                    \"tradingPlatformXmlId\": \"bx_659ff72864c8f\",\n                    \"xmlId\": \"bx_65df53067ac59\"\n                }\n            ],\n            \"updated1c\": \"N\",\n            \"userDescription\": \"\",\n            \"userId\": 1,\n            \"version\": 1,\n            \"version1c\": \"\",\n            \"xmlId\": \"bx_65df53063d56d\"\n        }\n    },\n    \"time\": {\n        \"start\": 1712938174.436428,\n        \"finish\": 1712938175.432068,\n        \"duration\": 0.9956400394439697,\n        \"processing\": 0.5710320472717285,\n        \"date_start\": \"2024-04-12T19:09:34+03:00\",\n        \"date_finish\": \"2024-04-12T19:09:35+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Catalog Product SKU using Bitrix24 REST API in PHP\nDESCRIPTION: This snippet shows how to update a catalog product SKU using the Bitrix24 REST API in PHP. It includes the same product fields as the JavaScript example, demonstrating the structure of the API call in PHP.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/sku/catalog-product-sku-update.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.sku.update',\n    [\n        'id' => 1291,\n        'fields' => [\n            'name' => 'Головной товар',\n            'active' => 'Y',\n            'canBuyZero' => 'Y',\n            'code' => 'product_sku',\n            'createdBy' => 1,\n            'dateActiveFrom' => '2024-05-28T10:00:00',\n            'dateActiveTo' => '2024-05-29T10:00:00',\n            'dateCreate' => '2024-05-27T10:00:00',\n            'detailPicture' => [\n                'fileData' => ['detailPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            ],\n            'detailText' => '',\n            'detailTextType' => 'text',\n            'height' => 100,\n            'iblockSectionId' => 47,\n            'length' => 100,\n            'measure' => 5,\n            'modifiedBy' => 1,\n            'previewPicture' => [\n                'fileData' => ['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            ],\n            'previewText' => '',\n            'previewTextType' => 'text',\n            'purchasingCurrency' => 'RUB',\n            'purchasingPrice' => 1000,\n            'quantity' => 10,\n            'sort' => 100,\n            'subscribe' => 'Y',\n            'vatId' => 1,\n            'vatIncluded' => 'Y',\n            'weight' => 100,\n            'width' => 100,\n            'xmlId' => '1291',\n            'property258' => ['value' => 'test', 'valueId' => 9883],\n            'property259' => [\n                ['value' => 'test1', 'valueId' => 9884],\n                ['value' => 'test2', 'valueId' => 9885]\n            ],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extra Charge List using JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24.callMethod function in JavaScript to call the catalog.extra.list method in Bitrix24. It includes selecting specific fields, filtering, and ordering the results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/extra/catalog-extra-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.extra.list',\n    {\n        select:[\n            'id',\n            'percentage'\n        ],\n        filter:{\n            '>percentage': 5\n        },\n        order:{\n            'id': 'ASC'\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n        result.next();\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Requisites by User Field using cURL (OAuth)\nDESCRIPTION: This cURL command retrieves requisites by filtering based on `ID` and selects a user field `UF_CRM_1707997209` using OAuth. It includes the `auth` parameter with the access token for authentication.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{},\"filter\":{\"ID\":\"51\"},\"select\":[\"UF_CRM_1707997209\"],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.list\n```\n\n----------------------------------------\n\nTITLE: JavaScript ConfigurableTimelineBlocks Class\nDESCRIPTION: This JavaScript class, `ConfigurableTimelineBlocks`, manages the interaction with Bitrix24 content blocks.  It initializes the JSON editor, fetches form properties, binds event handlers to buttons, and loads dynamic types from Bitrix24. It handles actions such as getting, setting, and deleting content blocks, as well as dynamically updating UI elements based on user input.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n    class ConfigurableTimelineBlocks {\n        #jsonEditor;\n        #statusContainer;\n        #contentBlockPresets;\n        #isForceMode = false;\n        // fields\n        #entityTypeIdNode;\n        #entityIdNode;\n        #itemTypeIdNode;\n        #itemIdNode;\n        // buttons\n        #getButton;\n        #setButton;\n        #deleteButton;\n        #getItemsButton\n        constructor(\n            jsonEditor,\n            statusContainer,\n            contentBlockPresets,\n        ) {\n            this.#jsonEditor = jsonEditor;\n            this.#statusContainer = statusContainer;\n            this.#contentBlockPresets = contentBlockPresets;\n            this.renderJSONLayoutActions();\n            this.fetchProperties();\n            this.bindEvents();\n            this.loadDynamicTypes();\n        }\n        fetchProperties() {\n            this.#entityTypeIdNode = document.getElementById('entity_type_id');\n            this.#entityIdNode = document.getElementById('entity_id');\n            this.#itemTypeIdNode = document.getElementById('item_type_id');\n            this.#itemIdNode = document.getElementById('item_id');\n            this.#getButton = document.getElementById('get_button');\n            this.#setButton = document.getElementById('set_button');\n            this.#deleteButton = document.getElementById('delete_button');\n            this.#getItemsButton = !this.#isForceMode ? document.getElementById('get_items_button') : null;\n        }\n        bindEvents() {\n            this.#getButton.onclick = this.getAction.bind(this);\n            this.#setButton.onclick = this.setAction.bind(this);\n            this.#deleteButton.onclick = this.deleteAction.bind(this);\n            if (this.#getItemsButton)\n            {\n                this.#getItemsButton.onclick = this.getItemsAction.bind(this);\n                this.#itemTypeIdNode.onchange = () => {\n                    this.#itemIdNode.innerHTML = '';\n                    const label = document.querySelector(`[for=\"item_id\"]`);\n                    label.textContent = this.getItemTypeId() === ITEM_ACTIVITY ? 'Дело' : 'Запись таймлайна';\n                };\n            }\n        }\n        renderJSONLayoutActions() {\n            const contentBlockPresetsContainer = document.getElementById('content_block_presets');\n            if (!contentBlockPresetsContainer) {\n                return;\n            }\n            contentBlockPresetsContainer.innerHTML = '';\n            this.#contentBlockPresets.forEach((contentBlockPreset) => {\n                const button = document.createElement('button');\n                button.classList = 'btn btn-link btn-sm text-secondary';\n                button.innerText = contentBlockPreset.getTitle();\n                button.type = 'button';\n                button.onclick = () => {\n                    let json = this.#jsonEditor.get();\n                    if (!json.blocks) {\n                        json.blocks = {};\n                    }\n                    const length = Object.keys(json?.blocks).length;\n                    json.blocks[`${length + 1}`] = contentBlockPreset.getValue();\n                    this.#jsonEditor.set(json);\n                    return false;\n                };\n                contentBlockPresetsContainer.append(button);\n            });\n            const clearButton = document.createElement('button');\n            clearButton.innerText = 'Clear';\n            clearButton.classList = 'btn btn-link btn-sm text-danger';\n            clearButton.type = 'button';\n            clearButton.onclick = () => {\n                this.#jsonEditor.set({});\n            };\n            contentBlockPresetsContainer.append(clearButton);\n        }\n        loadDynamicTypes()\n        {\n            BX24.callMethod('crm.type.list', {}, (result) => {\n                const types = result?.answer?.result?.types || [];\n                types.forEach((item) => {\n                    const option = document.createElement(\"option\");\n                    option.value = item.entityTypeId;\n                    option.innerText = `[${item.id}] ${item.title}`;\n                    this.#entityTypeIdNode.append(option);\n                })\n            });\n        }\n        loading()\n        {\n            this.#entityTypeIdNode.disabled = true;\n            this.#entityIdNode.disabled = true;\n            this.#itemTypeIdNode.disabled = true;\n            this.#itemIdNode.disabled = true;\n            this.#getButton.disabled = true;\n            this.#setButton.disabled = true;\n            this.#deleteButton.disabled = true;\n        }\n        stopLoading()\n        {\n            this.#entityTypeIdNode.disabled = false;\n            this.#entityIdNode.disabled = false;\n            this.#itemTypeIdNode.disabled = false;\n            this.#itemIdNode.disabled = false;\n            this.#getButton.disabled = false;\n            this.#setButton.disabled = false;\n            this.#deleteButton.disabled = false;\n        }\n        getItemsAction()\n        {\n            if (this.#isForceMode)\n            {\n                return;\n            }\n\n```\n\n----------------------------------------\n\nTITLE: Creating Sale Status via cURL Webhook\nDESCRIPTION: HTTP POST request to add a new sale status using webhook authentication with predefined status parameters\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-add.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"id\":\"MS\",\"type\":\"O\",\"notify\":\"Y\",\"sort\":500,\"color\":\"#FF0000\",\"xmlId\":\"myStatusXmlId\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.status.add\n```\n\n----------------------------------------\n\nTITLE: Add Contact Company using cURL (OAuth)\nDESCRIPTION: This cURL command adds a company to a contact in Bitrix24 using OAuth authentication. The command sends a POST request to the Bitrix24 REST API, including the contact ID, company ID, other fields, and the OAuth access token.  Replace placeholders for Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-add.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":54,\"fields\":{\"COMPANY_ID\":32,\"IS_PRIMARY\":\"Y\",\"SORT\":1000},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/crm.contact.company.add\n```\n\n----------------------------------------\n\nTITLE: Add Basket Item via PHP\nDESCRIPTION: This PHP snippet demonstrates how to add a basket item to a sale order using the `CRest::call` method and the `sale.basketitem.add` method. The `fields` array contains the required fields such as `orderId`, `quantity`, `productId`, and `currency`. The result of the API call is then printed for inspection.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.basketitem.add',\n        [\n            'fields' =>\n            [\n                'orderId' => 5147,\n                'quantity' => 2,\n                'productId' => 6544,\n                'currency' => 'RUB',\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving property values in PHP\nDESCRIPTION: This snippet illustrates how to use PHP to call the sale.propertyvalue.list method through the CRest API. It sets up the required fields, filters, and order, and then it outputs the results in a readable format.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-value/sale-property-value-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.propertyvalue.list',\n    [\n        'select' => [\n            'code',\n            'id',\n            'name',\n            'orderId',\n            'orderPropsId',\n            'orderPropsXmlId',\n            'value',\n        ],\n        'filter' => [\n            '=code' => 'FIO',\n            '%value' => 'Борис',\n            '>orderId' => 1600,\n        ],\n        'order' => [\n            'orderId' => 'desc',\n        ],\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Userfieldtype in PHP (B24PhpSdk)\nDESCRIPTION: Demonstrates updating a user field type configuration using B24PhpSdk library in PHP. Includes method call with configuration parameters and error handling.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-update.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $result = $serviceBuilder->getPlacementScope()\n        ->userFieldType()\n        ->update(\n            'custom_user_type',  // userTypeId\n            'https://example.com/handler',  // handlerUrl\n            'Custom User Type',  // title\n            'Description of custom user type'  // description\n        );\n    if ($result->isSuccess()) {\n        print(\"Update successful.\");\n    } else {\n        print(\"Update failed.\");\n    }\n} catch (Throwable $e) {\n    print(\"An error occurred: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Bitrix24 CRM Deal using JavaScript\nDESCRIPTION: JavaScript example for updating a CRM deal with ID 351. This uses the BX24 library to call the crm.item.update method with various field updates.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-update.md#2025-04-20_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.item.update',\n    {\n        entityTypeId: 2,\n        id: 351,\n        fields: {\n            title: \"REST Сделка #1\",\n            stageId: \"C9:UC_NYL06U\",\n            assignedById: 6,\n            observers: [1, 2, 3],\n            opened: \"N\",\n            typeId: \"SERVICE\",\n            opportunity: 10000,\n            currencyId: \"USD\",\n            additionalInfo: \"Изменение сделки через REST\",\n            isManualOpportunity: \"N\",\n            utmSource: \"google\",\n            ufCrm_1721244707107: 200.05,\n            parentId1220: [2, 1],\n        },\n    },\n    (result) => {\n        if (result.error())\n        {\n            console.error(result.error());\n\n            return;\n        }\n\n        console.info(result.data());\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Handlers in JavaScript\nDESCRIPTION: This JavaScript code snippet uses the `BX24.callMethod` function to retrieve a list of delivery service handlers.  It takes the method name (`sale.delivery.handler.list`) and a callback function as arguments to handle the result, logging any errors or displaying the returned data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'sale.delivery.handler.list', {},\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Property with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to retrieve a shipment property using a webhook. It sends a POST request with the property ID to the Bitrix24 REST endpoint. Replace placeholders with your Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-get.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":22}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipmentproperty.get\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Item Shipment Fields with PHP\nDESCRIPTION: This snippet demonstrates how to retrieve payment item shipment fields using the PHP CRest library. It calls the 'sale.paymentitemshipment.getfields' method and prints the result.  The crest.php file must be included before calling the CRest::call method.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-shipment/sale-payment-item-shipment-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.paymentitemshipment.getfields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n?>\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for onCrmDynamicItemAdd Event in Bitrix24 REST API\nDESCRIPTION: Example of the JSON payload sent to handlers when a new item is created in a user-defined CRM object type (smart process) with entityTypeId = 1220. The payload includes event metadata, the created item's ID and entity type ID, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/events/on-crm-dynamic-item-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMDYNAMICITEMADD\",\n    \"event_handler_id\": \"4\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"22\",\n            \"ENTITY_TYPE_ID\": \"1220\"\n        }\n    },\n    \"ts\": \"1723534033\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling calendar.user.settings.get via JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to call the calendar.user.settings.get method using the BX24 JavaScript library in Bitrix24. It uses the BX24.callMethod function to make the API request with an empty parameter object.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-user-settings-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'calendar.user.settings.get',\n    {}\n);\n```\n\n----------------------------------------\n\nTITLE: Adding CRM Payment via cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to create a CRM payment using a cURL request with Webhook authentication. It sets the content type to application/json, accepts json responses, and includes the `entityId` and `entityTypeId` in the request body. Replace the placeholder values for the Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-add.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityId\":13123,\"entityTypeId\":2}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.item.payment.add\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Handler with cURL (Webhook)\nDESCRIPTION: This cURL command creates a payment handler using the Bitrix24 REST API with webhook authentication. It sets the handler name, code, sorting, and settings, including currency, client type, and IFrame data (action URI and fields).  It defines the fields for the payment service and their associated properties such as the name, description, and sorting order.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-handler-add.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"NAME\":\"Обработчик.Rest IFrame\",\"CODE\":\"resthandleriframe\",\"SORT\":100,\"SETTINGS\":{\"CURRENCY\":[\"RUB\"],\"CLIENT_TYPE\":\"b2c\",\"IFRAME_DATA\":{\"ACTION_URI\":\"http://example.com/payment_iframe.php\",\"FIELDS\":{\"serviceKey\":{\"CODE\":\"REST_SERVICE_KEY_IFRAME\"},\"serviceid\":{\"CODE\":\"REST_SERVICE_ID_IFRAME\"}}},\"CODES\":{\"REST_SERVICE_ID_IFRAME\":{\"NAME\":\"Номер магазина\",\"DESCRIPTION\":\"Номер магазина\",\"SORT\":\"100\"},\"REST_SERVICE_KEY_IFRAME\":{\"NAME\":\"Секретный ключ\",\"DESCRIPTION\":\"Секретный ключ\",\"SORT\":\"300\"},\"PS_WORK_MODE_IFRAME\":{\"NAME\":\"Режим работы платёжной системы\",\"SORT\":\"1100\",\"INPUT\":{\"TYPE\":\"ENUM\",\"OPTIONS\":{\"TEST\":\"Тестовый\",\"REGULAR\":\"Рабочий\"}}}}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.paysystem.handler.add\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Content Blocks with JavaScript BX24 API\nDESCRIPTION: Example of how to retrieve additional content blocks for a timeline record with ID 8 linked to a deal with ID 4 using the BX24 JavaScript library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/crm-timeline-layout-blocks-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'crm.timeline.layout.blocks.get',\n    {\n        entityTypeId: 2, // Сделка\n        entityId: 4,     // ID Сделки\n        timelineId: 8,   // ID Записи таймлайна привязанного к данной сделке\n    },\n    (result) => {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Handler with JavaScript\nDESCRIPTION: This JavaScript snippet uses the `BX24.callMethod` function to create a payment handler in Bitrix24. The code defines the handler's name, code, sort order, settings (currency, client type, IFrame data), and field configurations for the payment service. It also includes a callback function to handle the result of the API call, displaying errors or data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-handler-add.md#2025-04-20_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"sale.paysystem.handler.add\",\n        {\n            \"NAME\": \"Обработчик.Rest IFrame\",\n            \"CODE\": \"resthandleriframe\",\n            \"SORT\": 100,\n            \"SETTINGS\": {\n                \"CURRENCY\": [\n                    \"RUB\"\n                ],\n                \"CLIENT_TYPE\": \"b2c\",\n                \"IFRAME_DATA\": {\n                    \"ACTION_URI\": \"http://example.com/payment_iframe.php\",\n                    \"FIELDS\": {\n                        \"serviceKey\": {\n                            \"CODE\": \"REST_SERVICE_KEY_IFRAME\",\n                        },\n                        \"serviceid\": {\n                            \"CODE\": \"REST_SERVICE_ID_IFRAME\"\n                        }\n                    }\n                },\n                \"CODES\": {\n                    \"REST_SERVICE_ID_IFRAME\": {\n                        \"NAME\": \"Номер магазина\",\n                        \"DESCRIPTION\": \"Номер магазина\",\n                        \"SORT\": \"100\"\n                    },\n                    \"REST_SERVICE_KEY_IFRAME\": {\n                        \"NAME\": \"Секретный ключ\",\n                        \"DESCRIPTION\": \"Секретный ключ\",\n                        \"SORT\": \"300\"\n                    },\n                    \"PS_WORK_MODE_IFRAME\": {\n                        \"NAME\": \"Режим работы платёжной системы\",\n                        \"SORT\": \"1100\",\n                        \"INPUT\": {\n                            \"TYPE\": \"ENUM\",\n                            \"OPTIONS\": {\n                                \"TEST\": \"Тестовый\",\n                                \"REGULAR\": \"Рабочий\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        ,\n        function (result) {\n            if (result.error())\n            {\n                console.error(result.error());\n            }\n            else\n            {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Update Payment Item Binding with PHP\nDESCRIPTION: This PHP code uses the CRest::call function to update a payment item binding.  It calls the `sale.paymentitembasket.update` method with the item's ID and the fields to be updated (quantity and XML ID). It requires the `crest.php` library and prints the result using `print_r`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.paymentitembasket.update',\n    [\n        'id' => 1186,\n        'fields' =>\n        [\n            'quantity' => 1,\n            'xmlId' => 'myNewXmlId',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Удаление отгрузки через PHP\nDESCRIPTION: Пример использования PHP для удаления отгрузки через библиотеку crest.php. Необходимо указать ID отгрузки в параметрах и вывести результат.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.shipment.delete',\n        [\n            'id' => 2461\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scrum Task Fields using cURL (OAuth) in Bash\nDESCRIPTION: This snippet shows how to retrieve Scrum task fields by ID using a cURL request with OAuth authentication in Bash. It sends a POST request to the Bitrix24 REST API endpoint with the task ID and access token as parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/tasks.api.scrum.task.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Information with Webhook in Bitrix24\nDESCRIPTION: Bash cURL example demonstrating how to call the booking.v1.booking.get method using a Webhook to retrieve booking information by ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-get.md#2025-04-20_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":15}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/booking.v1.booking.get\n```\n\n----------------------------------------\n\nTITLE: Documenting Sale Order Payment Structure\nDESCRIPTION: Defines the comprehensive data model for payment information in Bitrix24 sales system, including payment status, transaction details, and related metadata\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/data-types.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### sale_order_payment\n\n#|\n|| **Значение**\n`тип` | **Описание** ||...\n```\n\n----------------------------------------\n\nTITLE: Retrieving property values with cURL (OAuth)\nDESCRIPTION: This snippet illustrates how to authenticate using OAuth while making a POST request to retrieve property values with the sale.propertyvalue.list method. It includes the necessary headers, payload, and addresses the authentication token requirement.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-value/sale-property-value-list.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"code\",\"id\",\"name\",\"orderId\",\"orderPropsId\",\"orderPropsXmlId\",\"value\"],\"filter\":{\"=code\":\"FIO\",\"%value\":\"Борис\",\">orderId\":1600},\"order\":{\"orderId\":\"desc\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.propertyvalue.list\n```\n\n----------------------------------------\n\nTITLE: Updating Sale Status with JavaScript Bitrix24 Method\nDESCRIPTION: JavaScript method using BX24.callMethod to update sale status with error handling and result processing\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-update.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.status.update', {\n        id: 'MS',\n        fields: {\n            type: 'D',\n            notify: 'N',\n            sort: 100,\n            color: '#00FF00',\n            xmlId: 'updatedXmlId',\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Запрос полей вариации товара с использованием JavaScript\nDESCRIPTION: Пример вызова метода catalog.product.offer.getFieldsByFilter с использованием JavaScript-библиотеки BX24. Запрос включает фильтр по ID инфоблока и обработку результата.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/offer/catalog-product-offer-get-fields-by-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.offer.getFieldsByFilter', \n    {\n        filter: {\n            iblockId: 24,\n        }\n    },\n    function(result) {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: cURL Request (OAuth) for Basket Items List\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of basket items using the `sale.basketitem.list` method with OAuth authentication. It sets the content type to JSON, accepts JSON responses, and includes a JSON payload with select, filter, order, start, and auth parameters. Replace placeholders with actual Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"select\":[\"id\",\"orderId\",\"productId\",\"name\",\"price\",\"currency\"],\"filter\":{\"@orderId\":[5147,5146]},\"order\":{\"id\":\"desc\"},\"start\":0,\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.basketitem.list\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Calendar Events with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to make a webhook request to retrieve events for the current user for the next 10 days using cURL. It includes required headers and request body parameters for the calendar.event.get.nearest method.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"type\":\"user\",\"ownerId\":2,\"days\":10,\"forCurrentUser\":true,\"maxEventsCount\":100,\"detailUrl\":\"/company/personal/user/#user_id#/calendar/\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/calendar.event.get.nearest\n```\n\n----------------------------------------\n\nTITLE: Updating Delivery Service Config via cURL Webhook\nDESCRIPTION: Demonstrates updating delivery service configuration using cURL with Webhook authentication. Requires Bitrix24 address, user ID, and webhook credentials.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery/sale-delivery-config-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":196,\"CONFIG\":[{\"CODE\":\"SETTING_1\",\"VALUE\":\"New SETTING_1 string value\"},{\"CODE\":\"SETTING_2\",\"VALUE\":\"N\"},{\"CODE\":\"SETTING_3\",\"VALUE\":999.99},{\"CODE\":\"SETTING_4\",\"VALUE\":\"Option2Code\"},{\"CODE\":\"SETTING_5\",\"VALUE\":\"25.03.2023\"},{\"CODE\":\"SETTING_6\",\"VALUE\":\"0000144962\"}]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.delivery.config.update\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Property with JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to retrieve a shipment property. It handles both successful responses and errors. The code snippet assumes that the BX24 object is available in the global scope.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.shipmentproperty.get\", {\n        \"id\": 22\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Business Process Template with PHP in Bitrix24\nDESCRIPTION: This snippet demonstrates how to add a business process template using PHP with the CRest helper library. It specifies document type, template name, description, auto-execution settings, and includes the encoded template data from a .bpt file.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/template/bizproc-workflow-template-add.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'bizproc.workflow.template.add',\n    [\n        'DOCUMENT_TYPE' => ['lists', 'BizprocDocument', 'iblock_164'],\n        'NAME' => 'App template',\n        'DESCRIPTION' => 'Template was generated by rest application.',\n        'AUTO_EXECUTE' => 3,\n        'TEMPLATE_DATA' => [\n            \"bp-379.bpt\",\n            \"eNrlWNtO41YUfe9XRH5vlTiJhxj1IYkdYTU3Jeb2ZBkwg1UHU9t0BiFLhKk6rTq9aNSHqupF7RcwU1JSIOEXjv+oex/biZ04YWagIKYvcE7Ots9ea9+t8hx/aPOPeGZFbLWlRp1Z1Hl20eYXeEYWa81qURaZRZXP8Ic6n4ZFHsVzcHiwpzEgx3I809Y+29d2HV01Vk3r023DfFLcdPTPdecAJUC4rnaoML5U6+wZqkO3BZ6hgrDdwn2GZ9bp/zTPNC1zT7McXbPxehZvzcPTumPQRzkQIb+TodclF6RHTsmQvCYn3jGsL7wXZOB9Q/5JkVekT87IgPS87ofkyjsC+S9x43VH12hWR7dt3dzFaxbwGtBCwE2aP3TpToztWrFdO7aTY7vl2G41tlsLd65LaSnv6MaWpe3O5xovNDfrmlPTbFt9rM2gmYV1MZ9Oc2llocCxBYUrsByr5Atsnn073qlzZOA8uFDWnjpUMov8vwRGe+TS+z4FRhiSc3Likw/rHp86/Lh9YDtah6+bT6rmpmq4H0SeAMP1YPOa/j2JS4PgnyB27j3zvgajwutPqW2jYgIo7/qqjLSrmFZHpfqBdvQsPzpbtjWrYpmdCMHgRTyj7js7psUsurE3obRszpGN+mIW6CZ/AOgheQUK94CAPukhQnC3jyjQY9IPdRW3dMe0ymanAyEz0nXaC3znQPegZim2ijVRhhgduxGYcaXYkoqlqhj/tdyot+ViXY46JygsNMrLNbEuKxVJrAr0kE2jgVmekajLFwKHCx0pU8CTlPctDbJLhIZmCNwtdEsApftQUNOKbjiapW4gNxt8xo96BB3+lPZ/akHS0C10wNFPtX3D0ffGUkg5+mn0sZJqa9MXQ/4CRuHRp8xindoSo1GqicBDramsJYHLodl+9B0rRRMFBejbDz10PmrQZQt80NEDqt4EeubWoE/cnoi/1hAkMLWglNaT8GM2IT8jwgn0E0BhuQ/hcA8gIzcnAhSgOCnllhjUqCkDsxEDYzQCSEgk74V5QR0f+CzrYugG1o1Cv6Ft03diW8w6pWqj/ImSnJYwciEtgdcOvC8gyR6BFU+gsvcB54CWn7/IEKt/UJVulq8SrJq59XwFjxbLsrSS6MhZECc/QD2EMgIVc4Btj3fsvbjOh2G5YZrG/URuePO070JYlppKc7lUldpLYqKFWQzd36Ble0at2Acr0gYvyYFnQ0zfG8RMaE6l0mrUkhDmC9HqM4DFc2yfcHMyaWnSf9jZqjBiQ24kccHlo1wMqbEHlA8/Vb9/jICi7UZLTnQM7Kx/AqCntAXu+n3kEWLGAQY4OL8e/c1T3O23ZIgReljaVGcnqxW8l/wKdj7zoxwb6P8gQUcYggttx9J3HwfM2abl4OybCUDZmuPA6Xj6xN69vdRYVYqCoFQarVpscsoFh6IgyROn7gRrqBsmCP8XxRnnE58eP0MK2rYK2q+oxr4WmWgm6I6hmE5DEFfNlrgiiatKUyrLy63E8pLnqMed0fkFhjHy92iGASe8wAC8onPbaTBDd8HvhlCAjpIqzrZuaPeTjsObEytOyIMsrskzpwF/6oT88i7AnXA2vnPg4c3TwB/FgSvyetMPwPSkD2Qp/D65StGPKJQFzMZvyQM6pGZom6E+jT1HN3fHUTTB05jx4D07TscIlkt06d45oZMQRpTiJa4f64IoF6XqvKDKLbxRUD3AYMqM4M+KpSw3M5YeYAxxMbyzQyiXvz6E/uehk8NvU0LyjIMJ6Bf6AeKSjnF9aAB7QBd0O/gpF3vCU2ZODb/jRmd+5YXTtVp1xvjKItSX9LP0VzQlUHgX3nfe8wcC0HX/BTDK1SA=\"\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Add Basket Item via JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add a basket item to a sale order using `BX24.callMethod` and the `sale.basketitem.add` method. It defines the necessary fields (`orderId`, `quantity`, `productId`, and `currency`) within the `fields` object. The code also includes error handling and result processing within the `then` and `catch` blocks.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"sale.basketitem.add\",\n        {\n            fields: { // минимальный набор необходимых полей\n                orderId: 5147,\n                quantity: 2,\n                productId: 6544,\n                currency: 'RUB',\n            }\n        },\n    )\n        .then(\n            function(result)\n            {\n                if (result.error())\n                {\n                    console.error(result.error());\n                }\n                else\n                {\n                    console.log(result.data());\n                }\n            },\n            function(error)\n            {\n                console.info(error);\n            }\n        );\n```\n\n----------------------------------------\n\nTITLE: JSON Error Response Example\nDESCRIPTION: Example of a 400 HTTP status error response for tasks flow API, indicating access denial or flow not found\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-create.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"0\",\n    \"error_description\": \"Доступ запрещен или поток не найден\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a property group with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to call the `sale.propertygroup.add` method. It includes the 'crest.php' library and passes the 'fields' array containing the 'personTypeId', 'name', and 'sort' to the API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-add.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.propertygroup.add',\n    [\n        'fields' => [\n            'personTypeId' => 3,\n            'name' => 'Новая группа свойств',\n            'sort' => 100,\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Closing Call Card in Bitrix24 with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to close a call card using the `CallCardClose` method within a Bitrix24 placement. The code binds an event to the 'BackgroundCallCard::initialized' event and calls the 'CallCardClose' method. After calling this method the further operations with the call card are unavailable.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/page-background-worker/call-card-close.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.bindEvent('BackgroundCallCard::initialized', event => {\n    BX24.placement.call('CallCardClose', {}, () => {\n        // some code\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Vue Reactive Component Example\nDESCRIPTION: Demonstrates Vue.js reactive state management with a simple click counter component using Vue's ref() function and template syntax\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-kit/app-logic.md#2025-04-20_snippet_0\n\nLANGUAGE: vue\nCODE:\n```\n<script setup>\nimport { ref } from 'vue';\n\nconst count = ref(0);\n</script>\n\n<template>\n  <button @click=\"count++\">\n    Нажато not_var{{ count }} раз\n  </button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Product List using JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24.callMethod function to retrieve payment product list in Bitrix24 using JavaScript. It includes error handling and logging of the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/products-in-payment/crm-item-payment-product-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'crm.item.payment.product.list', {\n        paymentId: 1039,\n        filter: {\n            \">=quantity\": 2,\n            \"@id\": [1195, 1196],\n        },\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.log(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Log Message Using PHP in Bitrix24 REST API\nDESCRIPTION: This PHP example shows how to get timeline log message information using the CRest library. It requires the log message ID and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.timeline.logmessage.get',\n    [\n        'id' => 1\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Deleting Cash Register via cURL Webhook\nDESCRIPTION: Demonstrates how to delete a cash register using cURL with Webhook authentication, requiring the cash register ID as a parameter\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":1}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.cashbox.delete\n```\n\n----------------------------------------\n\nTITLE: Deleting Deal Contacts using B24PhpSdk\nDESCRIPTION: This PHP snippet uses the B24PhpSdk to delete contacts associated with a specific deal. It sets the $dealId variable to the deal ID from which contacts will be deleted. The script then makes an API call to delete the contacts and prints a success or failure message based on the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/contacts/crm-deal-contact-items-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $dealId = 123; // Replace with the actual deal ID you want to delete contacts from\n    $result = $serviceBuilder->getCRMScope()->dealContact()->itemsDelete($dealId);\n\n    if ($result->isSuccess()) {\n        print(\"Successfully deleted contacts from deal ID: $dealId\");\n    } else {\n        print(\"Failed to delete contacts. Result: \" . json_encode($result));\n    }\n} catch (Throwable $e) {\n    print(\"An error occurred: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for onCrmDynamicItemDelete Event\nDESCRIPTION: This JSON example demonstrates the payload structure sent to an event handler when a CRM dynamic item with ID 23 from entity type 1220 is deleted. The payload includes event information, handler ID, deleted item data, timestamp, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/events/on-crm-dynamic-item-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMDYNAMICITEMDELETE\",\n    \"event_handler_id\": \"6\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"23\",\n            \"ENTITY_TYPE_ID\": \"1220\"\n        }\n    },\n    \"ts\": \"1723538149\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting Personal Deal Card Settings using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to reset personal deal card settings for a user with a specific ID (in this case, userId: 1).  It utilizes the `BX24.callMethod` to call the `crm.deal.details.configuration.reset` method with the scope set to \"P\" (personal). An error or the resulting data is then logged to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/custom-form/crm-deal-details-configuration-reset.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n    //---\n    //Сброс личных настроек карточки сделок общего направления для пользователя с идентификатором 1.\n    BX24.callMethod(\n        \"crm.deal.details.configuration.reset\",\n        {\n            scope: \"P\",\n            userId: 1\n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n                console.dir(result.data());\n        }\n    );\n    //---\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bank Details with cURL Webhook\nDESCRIPTION: Demonstrate how to use cURL to make a webhook request for retrieving bank details, filtering by country ID and selecting specific fields with ascending date order.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{\"DATE_CREATE\":\"ASC\"},\"filter\":{\"COUNTRY_ID\":\"1\"},\"select\":[\"ENTITY_ID\",\"ID\",\"NAME\"]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.bankdetail.list\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Requisite Countries with JS\nDESCRIPTION: This JavaScript snippet retrieves the list of countries using the BX24.callMethod function.  It calls the crm.requisite.preset.countries method and logs either the error or the result data to the console. No parameters are passed to the method.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/crm-requisite-preset-countries.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.preset.countries\",\n    {},\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Generate Number Input for Double Values in PHP\nDESCRIPTION: This snippet produces a HTML number input field tailored for double numeric values. It establishes the field using CPrintForm, ensuring the number field specifics align with the input's requirements and characteristics.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'double':\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'number'\n        ]\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: Adding Shipment Item via PHP\nDESCRIPTION: This PHP code snippet demonstrates how to add a shipment item using the `CRest::call` function. It requires the `crest.php` library and calls the `sale.shipmentitem.add` method with the necessary parameters, then prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipmentitem.add',\n    [\n        'fields' => [\n            'orderDeliveryId' => 33,\n            'basketId' => 18,\n            'quantity' => 1\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: HTTP Request for Deleting a Social Network Group in Bitrix24 REST API\nDESCRIPTION: This HTTP request example shows how to call the sonet_group.delete method using a direct HTTP request. It includes the authentication token and the GROUP_ID parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/sonet-group-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://mydomain.bitrix24.ru/rest/sonet_group.delete.json?auth=803f65e30340ff39703f8061c8b63a10&GROUP_ID=11\n```\n\n----------------------------------------\n\nTITLE: Add Contact Company using PHP\nDESCRIPTION: This PHP code snippet shows how to add a company to a contact using the CRest::call function. It requires the 'crest.php' library and calls the 'crm.contact.company.add' method with the contact ID, company ID, and other optional fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.contact.company.add',\n        [\n            'id' => 54,\n            'fields' => [\n                'COMPANY_ID' => 32,\n                'IS_PRIMARY' => 'Y',\n                'SORT' => 1000,\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Calling tasks.api.scrum.task.getFields using JavaScript\nDESCRIPTION: This snippet demonstrates how to call the tasks.api.scrum.task.getFields method using JavaScript with the BX24 library. It sends a request to retrieve Scrum task fields and logs the response to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'tasks.api.scrum.task.getFields',\n    {},\n    function(res)\n    {\n        console.log(res);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Calendar Event Using JavaScript\nDESCRIPTION: This snippet demonstrates how to delete a calendar event using the BX24 JavaScript library. It calls the calendar.event.delete method with the event ID as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'calendar.event.delete',\n    {\n        id: 698\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Parsing Bitrix24 REST API Response Schema\nDESCRIPTION: Defines a complex JSON response detailing metadata for various entity fields with type, requiredness, and additional attributes\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"ID\"\n        },\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling crm.status.list via REST API\nDESCRIPTION: This snippet demonstrates how to call the crm.status.list method using BX24.callMethod in JavaScript. It sets the order and filter parameters to retrieve status items and handles both success and error responses. The success case logs the retrieved data and checks for more results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/status/crm-status-list.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"crm.status.list\",\n        {\n            order: { \"SORT\": \"ASC\" },\n            filter: { \"ENTITY_ID\": \"STATUS\" }\n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n            {\n                console.dir(result.data());            \n                if(result.more())\n                    result.next();                        \n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calendar Sections using cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to call the calendar.section.get method using cURL with a webhook. It sets the request headers and sends a POST request with JSON data containing the calendar type and owner ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-section-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"type\":\"user\",\"ownerId\":1}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/calendar.section.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment via OAuth with cURL\nDESCRIPTION: This cURL command demonstrates how to retrieve payment information using the `sale.payment.get` method via OAuth authentication. It sends a POST request with the payment ID and access token in JSON format to the specified Bitrix24 address.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":6,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.payment.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Type with cURL (OAuth) in Bash\nDESCRIPTION: This snippet shows how to retrieve price type information using a cURL request with OAuth authentication in Bash. It sends a POST request to the Bitrix24 REST API endpoint with the price type ID and access token as parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/price-type/catalog-price-type-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.priceType.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Folder Parameters Using disk.folder.get in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the disk.folder.get method using the BX24 JavaScript library. It retrieves folder parameters by providing the folder ID and handles the response or error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/folder/disk-folder-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.folder.get\",\n    {\n        id: 8\n    },\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Payment Binding Using cURL (OAuth)\nDESCRIPTION: This cURL example illustrates how to authenticate using OAuth when binding a shopping cart item to a payment. It demonstrates sending item details in a JSON format and requires a valid access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-add.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"quantity\":3,\"basketId\":2722,\"paymentId\":1025,\"xmlId\":\"myXmlId\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.paymentitembasket.add\n```\n\n----------------------------------------\n\nTITLE: Getting Contacts Associated with a Deal in Bitrix24 via Javascript\nDESCRIPTION: This JavaScript snippet retrieves contacts associated with a specified deal ID using the `crm.deal.contact.items.get` method.  It prompts the user for a deal ID, then calls the method using `BX24.callMethod`. If successful, it prints the returned data to the console; if there's an error, it prints the error message.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/contacts/crm-deal-contact-items-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.deal.contact.items.get\",\n    {\n        id: id\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet illustrates the structure of the response when the `crm.documentgenerator.template.get` method is successfully executed.  It shows the different fields returned, such as the template ID, name, region, code, download links, activity status, module ID, numerator ID, and associated entities and users.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/document-generator/templates/crm-document-generator-template-get.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"template\": {\n    \"id\": 1, // id шаблона\n    \"name\": \"Счет (Россия)\", // название\n    \"region\": \"ru\", // страна\n    \"code\": \"INVOICE_RU\", // код\n    \"download\": '', // ссылка на скачивание для пользователя\n    \"downloadMachine\": '', // ссылка на скачивание для приложения\n    \"active\": \"Y\", // активность\n    \"moduleId\": \"crm\", // ид модуля\n    \"numeratorId\": 1, // ид нумератора\n    \"withStamps\": \"Y\", // ставить печати по умолчанию\n    \"isDeleted\": \"N\", // удален или нет\n    \"entityTypeId\": [ // привязанные сущности\n        \"0\": \"4\",\n        \"1\": \"3\",\n        \"2\": \"2_category_0\",\n        \"3\": \"2_category_1\",\n        \"4\": \"5\",\n        \"5\": \"1\",\n        \"6\": \"14\",\n        \"7\": \"7\"\n    ],\n    \"users\": [ // привязанные пользователи\n        \"0\": \"UA\"\n    ],\n    \"sort\": 500 // индекс сортировки\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Sale Status List using cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to retrieve a list of sale statuses using cURL with OAuth authentication.  It includes the necessary headers and payload for the request.  The `auth` parameter is used to pass the access token. Replace placeholders for Bitrix24 address and access token with actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-list.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"select\":[\"id\",\"type\",\"notify\",\"color\",\"sort\",\"xmlId\"],\"filter\":{\"id\":\"N\"},\"order\":{\"type\":\"asc\"},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.status.list\n```\n\n----------------------------------------\n\nTITLE: Receiving Data for CRM Company List Toolbar\nDESCRIPTION: This code snippet illustrates the data structure received by the handler when a widget is placed in the CRM company list toolbar. It includes information such as domain, protocol, language, application ID, authentication details, member ID, status, and placement code. This data is sent as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/list-toolbar.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => com\\n    [APP_SID] => 179765226ec81db398cc98e4a5e9015e\\n    [AUTH_ID] => 5ff29f6600631fcd00005a4b00000001f0f10706443c53e3994101a662e9b245ee398e\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 4f71c76600631fcd00005a4b00000001f0f10787f7352bf08be012b32c362e6c808f72\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_COMPANY_LIST_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Transform and Generate DateTime Input in PHP\nDESCRIPTION: This code formats datetime strings to ISO 8601 format for 'datetime-local' HTML input. It applies the PHP date and strtotime functions to accommodate potential date transformations, hinging upon the CPrintForm utility for actual input field generation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'datetime':\n    if (!empty($value)) {\n        $value = date('Y-m-d\\TH:i:s', strtotime($value));\n    }\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'datetime-local',\n        ]\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Payment Binding Using PHP\nDESCRIPTION: This PHP code snippet illustrates how to use the CRest class to call the 'sale.paymentitembasket.add' method. It constructs the request including item details and handles the response by printing the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\\\n\\\n$result = CRest::call(\\\n    'sale.paymentitembasket.add',\\\n    [\\\n        'fields' =>\\\n        [\\\n            'quantity' => 3,\\\n            'basketId' => 2722,\\\n            'paymentId' => 1025,\\\n            'xmlId' => 'myXmlId',\\\n        ]\\\n    ]\\\n);\\\n\\\necho '<PRE>';\\\nprint_r($result);\\\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Time Records with PHP\nDESCRIPTION: PHP example using the CRest library to get time records with descending ID sorting, ID filtering, selective field return, and pagination settings.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/elapsed-item/task-elapsed-item-get-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'task.elapseditem.getlist',\n    [\n        \"ORDER\" => [\"ID\" => \"DESC\"],            // Сортировка по ID - по убыванию\n        \"FILTER\" => [\">ID\" => 1],               // Фильтр\n        \"SELECT\" => ['ID', 'TASK_ID'],          // Выборка - только ID записи и задачи\n        \"PARAMS\" => ['NAV_PARAMS' => [          // Постраничка\n                \"nPageSize\" => 2,                   // по 2 элемента на странице\n                'iNumPage' => 2                     // страница номер 2\n            ]\n        ],\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Receiving Data for CRM Quote List Toolbar\nDESCRIPTION: This code snippet illustrates the data structure received by the handler when a widget is placed in the CRM quote list toolbar. It includes information such as domain, protocol, language, application ID, authentication details, member ID, status, and placement code. This data is sent as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/list-toolbar.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => com\\n    [APP_SID] => 5389d2aee1d75061a59be00996972f78\\n    [AUTH_ID] => 8ef29f6600631fcd00005a4b00000001f0f107f56f228b134e9f88dd8088ce08d9de0e\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 7e71c76600631fcd00005a4b00000001f0f107515f3cc004a6876f039fab870a2cbdc2\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_QUOTE_LIST_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Delete Company from Contact via cURL Webhook\nDESCRIPTION: cURL request to remove a company association from a contact using Bitrix24 REST API webhook authentication method\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":54,\"fields\":{\"COMPANY_ID\":32}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.company.delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Currency List with Webhook cURL\nDESCRIPTION: Webhook-based cURL request to fetch currency list with ascending sort order for sort and currency fields\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{\"sort\":\"asc\",\"currency\":\"asc\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.currency.list\n```\n\n----------------------------------------\n\nTITLE: Deleting Calendar Event with deleteEvent Method\nDESCRIPTION: Demonstrates how to delete a calendar event using the deleteEvent method. The code requires the ID of the event to be deleted.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-grid-veiw.md#2025-04-20_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nBX24.placement.call(\n    'deleteEvent',\n    {\n        id: \"1431169\"\n    },\n    function(){}\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extra Charge List using cURL Webhook in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use cURL with a webhook to call the catalog.extra.list method in Bitrix24. It includes selecting specific fields, filtering, and ordering the results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/extra/catalog-extra-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"percentage\"],\"filter\":{\">percentage\":5},\"order\":{\"id\":\"ASC\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.extra.list\n```\n\n----------------------------------------\n\nTITLE: Adding Payment System with cURL (OAuth)\nDESCRIPTION: Demonstrate how to add a payment system using cURL with OAuth authentication in Bitrix24. Includes configuring payment system details, headers, and sending a POST request with access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-add.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"NAME\":\"Оплата картой\",\"DESCRIPTION\":\"Легко оплачивайте покупки картой.\",\"XML_ID\":\"my_ps_id\",\"PERSON_TYPE_ID\":1,\"BX_REST_HANDLER\":\"resthandlercode\",\"ACTIVE\":\"Y\",\"ENTITY_REGISTRY_TYPE\":\"ORDER\",\"LOGOTYPE\":\"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0MDgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAASABUDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD73/4Oa/25vEf7CH/BK/XNW8GarrPh/wAZeONcsfCejazpk3k3GkyS+ZdTSh/vKWtbO5jDJhlaVWBBGR4V/wAFMP28vj1/wRc/4I+fs56O3jmLxh+0j4m1Wy0/V5tft11a9v4xDNc30SYJE/kTSWdn52S7o6tne+4fNv7f3/BSHwX8d/2xvjL+y/8A8FBrHxt4R+F+g/EKDxB8NtY8L6WLeTTbG3N5BDLdMqSy3FtdWkynfFFI4aSUDYQvl8r/AMFDv+Cr37P37eP/AAWX/Zz+IHw10/42fGi6+GOp2VlpnhbSrBNL03WLtLw3cF7ZtOzXJlExjWWGW1hEy20YM0aoSwB/RtRRRQBw/wAb/wBmb4b/ALTWk2On/Ej4feB/iDY6ZMbiztvEuhWurQ2khG0vGtwjhGK8EqASOKT4H/swfDX9mTTr+z+G3w78DfD201WRZr2Dw1oNrpMd46ghWkW3jQOwBIBbJAJoooA7miiigD//2Q==\",\"NEW_WINDOW\":\"N\",\"SETTINGS\":{\"REST_SERVICE_ID\":{\"TYPE\":\"VALUE\",\"VALUE\":\"SERVICE ID VALUE\"},\"REST_SERVICE_KEY\":{\"TYPE\":\"VALUE\",\"VALUE\":\"KEY ID VALUE\"},\"PAYMENT_ID\":{\"TYPE\":\"PAYMENT\",\"VALUE\":\"ACCOUNT_NUMBER\"}},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.paysystem.add\n```\n\n----------------------------------------\n\nTITLE: REST API Request Time Data in JSON\nDESCRIPTION: This JSON snippet represents the time-related data associated with a Bitrix24 REST API request. It provides information about the start time, finish time, duration, processing time, start date, finish date, and operating time of the request. This data can be used for monitoring and optimizing API performance.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/crm-deal-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"time\": {\n        \"start\": 1724857659.824873,\n        \"finish\": 1724857660.790877,\n        \"duration\": 0.9660041332244873,\n        \"processing\": 0.3691408634185791,\n        \"date_start\": \"2024-08-28T17:07:39+02:00\",\n        \"date_finish\": \"2024-08-28T17:07:40+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Head Product Data using PHP in Bitrix24 REST API\nDESCRIPTION: This PHP code snippet shows how to retrieve head product data using the Bitrix24 PHP SDK. It calls the catalog.product.sku.get method with the product ID and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/sku/catalog-product-sku-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.sku.get',\n    [\n        'id' => 1289\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskAdd Event in PHP\nDESCRIPTION: This PHP code example shows how to subscribe to the OnTaskAdd event using the Bitrix24 REST API PHP wrapper. It calls the event.bind method with event name and handler URL parameters and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-add.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'event.bind',\n    [\n        'event' => 'onTaskAdd',\n        'handler' => 'https://example.com/handler.php'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Payment Binding Using cURL (Webhook)\nDESCRIPTION: This cURL snippet demonstrates how to bind a shopping cart item to a payment using webhook authentication in the Bitrix REST API. The request sends a JSON payload containing the item details including quantity, basket ID, payment ID, and external XML ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-add.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"quantity\":3,\"basketId\":2722,\"paymentId\":1025,\"xmlId\":\"myXmlId\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.paymentitembasket.add\n```\n\n----------------------------------------\n\nTITLE: Update CRM Requisite Field via cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to update a CRM requisite field using cURL with a Webhook. It sends a POST request with the field's ID, preset ID, and the fields to be updated in JSON format.  The request includes headers for Content-Type and Accept.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":1,\"preset\":{\"ID\":27},\"fields\":{\"FIELD_NAME\":\"RQ_NAME\",\"FIELD_TITLE\":\"Имя\",\"IN_SHORT_LIST\":\"Y\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.preset.field.update\n```\n\n----------------------------------------\n\nTITLE: Retrieving Waiting List Records using JavaScript in Bitrix24 REST API\nDESCRIPTION: This snippet demonstrates how to call the booking.v1.waitlist.list method using JavaScript to retrieve waiting list records filtered by creation date.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/waitlist/booking-v1-waitlist-list.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"booking.v1.waitlist.list\",\n    {\n        filter: {\n            createdWithin: {\n                from: \"01.04.2025\", \n                to: \"16.04.2025\", //не включительно, будут отобраны записи с самой поздней датой 15.04.2025\n            }\n        }\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Lead by ID using cURL (OAuth)\nDESCRIPTION: This cURL command retrieves a lead by its ID using OAuth authentication.  The `ID` and `auth` parameters are passed in the request body as JSON. It requires replacing placeholders for the Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":123,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.lead.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Icons using cURL Webhook\nDESCRIPTION: This example demonstrates how to call the crm.timeline.icon.list method using cURL with a webhook authentication to get a list of available icons for CRM timeline log entries.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.timeline.icon.list\n```\n\n----------------------------------------\n\nTITLE: Querying Trade Catalogs Using PHP in Bitrix24\nDESCRIPTION: This snippet shows how to use the CRest::call function to query the catalog.catalog.list endpoint in PHP. It includes the same filtering, sorting, and field selection options as the other examples.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/catalog/catalog-catalog-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.catalog.list',\n    [\n        'select' => [\n            'iblockId',\n            'iblockTypeId',\n            'id',\n            'lid',\n            'name',\n            'productIblockId',\n            'skuPropertyId',\n            'subscription',\n            'vatId'\n        ],\n        'filter' => [\n            '>id' => 10,\n            '@vatId' => [1, 2],\n            'skuPropertyId' => 121,\n        ],\n        'order' => [\n            'id' => 'desc',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calendar Sections using JavaScript\nDESCRIPTION: This snippet demonstrates how to call the calendar.section.get method using the BX24 JavaScript library. It passes the calendar type and owner ID as parameters to the callMethod function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-section-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'calendar.section.get',\n    {\n        type: 'user',\n        ownerId: 1\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Order Property Fields with cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to query order property fields using OAuth. It sends a POST request with the property type and access token. Remember to replace the placeholder values with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get-fields-by-type.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"type\":\"NUMBER\",\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.property.getfieldsbytype\n```\n\n----------------------------------------\n\nTITLE: Register User Field Type with cURL (Webhook)\nDESCRIPTION: This cURL command registers a new user field type using a webhook. It sends a POST request with JSON data containing the user type ID, handler URL, title, description, and options. Replace the placeholders with your Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-add.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n        \"USER_TYPE_ID\": \"test_type\",\n        \"HANDLER\": \"https://www.myapplication.com/handler/\",\n        \"TITLE\": \"Updated test type\",\n        \"DESCRIPTION\": \"Test userfield type for documentation with updated description\",\n        \"OPTIONS\": {\n            \"height\": 60\n        }\n    }' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/userfieldtype.add\n```\n\n----------------------------------------\n\nTITLE: Delete Company from Contact in PHP\nDESCRIPTION: PHP implementation of removing a company association from a contact using Bitrix24 REST API and CRest library\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.company.delete',\n    [\n        'id' => 54,\n        'fields' => [\n            'COMPANY_ID' => 32,\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Sale Status List using cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to retrieve a list of sale statuses using cURL with Webhook authentication. It includes the necessary headers and payload for the request. Replace placeholders for Bitrix24 address, user ID, and webhook with actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-list.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"select\":[\"id\",\"type\",\"notify\",\"color\",\"sort\",\"xmlId\"],\"filter\":{\"id\":\"N\"},\"order\":{\"type\":\"asc\"}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.status.list\n```\n\n----------------------------------------\n\nTITLE: Process Money Field with Currency Selection in PHP\nDESCRIPTION: This snippet processes money fields, splitting the value into money amount and currency. It renders both a number input for the amount and a select element for currency selection, dynamically populating it based on available currencies in the CRM data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'money':\n    list($money, $currency) = explode('|', $value);\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $money,\n            'TYPE' => 'number',\n        ]\n    );\n    $arList = array_column($arResult['FIELD_VALUES_CURRENCY'], 'FULL_NAME', 'CURRENCY');\n    $return .= CPrintForm::select(\n        [\n            'NAME' => $key . '_CURRENCY',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $currency\n        ],\n        $arList\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: JavaScript BX24 Method for Setting Contact Company Associations\nDESCRIPTION: Shows how to use the BX24.callMethod to set company associations for a contact in a Bitrix24 JavaScript application, with error handling and result logging\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-items-set.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.company.items.set',\n    {\n        id: 82,\n        items: [\n            {\n                COMPANY_ID: 8,\n                IS_PRIMARY: \"Y\",\n                SORT: 100,\n            },\n            {\n                COMPANY_ID: 9,\n                SORT: 200,\n            },\n            {\n                COMPANY_ID: 10,\n                SORT: 400,\n            }\n        ],\n    },\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Getting CRM Timeline Item Data with Bitrix24 REST API\nDESCRIPTION: This method retrieves data for a specific CRM timeline item using the Bitrix24 REST API. It validates input fields, calls the appropriate API method, and updates the JSON editor with the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetAction()\n{\n    const isValid = this.validateFieldsWithAlerts();\n    if (!isValid)\n    {\n        return;\n    }\n    const method = this.getMethod('get');\n    const data = this.getData();\n    const callback = (result) => {\n        this.stopLoading();\n        if (result.error())\n        {\n            this.renderDangerAlert(result.error());\n            return;\n        }\n        this.#jsonEditor.set(result.data().layout ?? {});\n        this.renderSuccessAlert(\"Готово, результат чуть выше ;)\");\n    };\n    this.loading();\n    BX24.callMethod(method, data, callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Properties in JavaScript\nDESCRIPTION: Example of calling the sale.shipmentproperty.list method using Bitrix24 JavaScript SDK, with detailed field selection, filtering, and error handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.shipmentproperty.list\", {\n        \"select\": [\n            \"id\",\n            \"active\",\n            \"code\",\n            \"defaultValue\",\n            \"description\",\n            \"inputFieldLocation\",\n            \"isAddress\",\n            \"isAddressFrom\",\n            \"isAddressTo\",\n            \"isEmail\",\n            \"isFiltered\",\n            \"isLocation\",\n            \"isLocation4tax\",\n            \"isPayer\",\n            \"isPhone\",\n            \"isProfileName\",\n            \"isZip\",\n            \"multiple\",\n            \"name\",\n            \"personTypeId\",\n            \"propsGroupId\",\n            \"required\",\n            \"settings\",\n            \"sort\",\n            \"type\",\n            \"userProps\",\n            \"util\",\n            \"xmlId\",\n        ],\n        \"filter\": {\n            \"@type\": \"STRING\",\n            \"%code\": \"EMAIL\",\n        },\n        \"order\": {\n            \"id\": \"desc\",\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Calling tasks.api.scrum.task.getFields using cURL with OAuth\nDESCRIPTION: This snippet shows how to call the tasks.api.scrum.task.getFields method using cURL with OAuth authentication. It sends a POST request with the access token in the request body to retrieve Scrum task fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/tasks.api.scrum.task.getFields\n```\n\n----------------------------------------\n\nTITLE: Setting Contact Details Configuration via cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to set the contact details configuration for a specific user in Bitrix24 CRM using a cURL request with OAuth authentication. The request defines sections and elements with their respective options, including an authentication token. It requires replacing placeholder values with the actual Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-set.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"userId\":1,\"data\":[{\"name\":\"section_1\",\"title\":\"Личные данные\",\"type\":\"section\",\"elements\":[{\"name\":\"NAME\",\"optionFlags\":1},{\"name\":\"LAST_NAME\",\"optionFlags\":1},{\"name\":\"SECOND_NAME\"},{\"name\":\"BIRTHDATE\"},{\"name\":\"PHONE\",\"optionFlags\":1,\"options\":{\"defaultCountry\":\"GB\"}},{\"name\":\"ADDRESS\",\"optionFlags\":1,\"options\":{\"defaultAddressType\":4}}]},{\"name\":\"section_2\",\"title\":\"Основная информация\",\"type\":\"section\",\"elements\":[{\"name\":\"TYPE_ID\"},{\"name\":\"SOURCE_ID\"},{\"name\":\"POST\"}]},{\"name\":\"section_3\",\"title\":\"Дополнительная информация\",\"type\":\"section\",\"elements\":[{\"name\":\"PHOTO\"},{\"name\":\"COMMENTS\"},{\"name\":\"UF_CRM_1720697698689\"}]}],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.details.configuration.set\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Calendar Events with PHP\nDESCRIPTION: This PHP code example shows how to retrieve user calendar events using the CRest library. It calls the calendar.event.get.nearest method with parameters for the user calendar and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'calendar.event.get.nearest',\n    [\n        'type' => 'user',\n        'ownerId' => 2,\n        'days' => 10,\n        'forCurrentUser' => true,\n        'maxEventsCount' => 100,\n        'detailUrl' => '/company/personal/user/#user_id#/calendar/'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Defining Basket Item Properties in Bitrix24\nDESCRIPTION: Detailed specification of basket item structure, including product details, pricing, tax information, and external system synchronization fields\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/data-types.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### sale_basket_item\n\n#|\n|| **Значение**\n`тип` | **Описание** ||...\n```\n\n----------------------------------------\n\nTITLE: Delete CRM Requisite User Field with cURL (OAuth)\nDESCRIPTION: This cURL example shows how to delete a CRM requisite user field using OAuth authentication in Bitrix24. It requires an access token. The 'id' parameter specifies the ID of the user field to delete, and 'auth' contains the access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":235,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.userfield.delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Logo Information with PHP\nDESCRIPTION: This snippet demonstrates how to retrieve timeline logo information using PHP with the CRest library. It calls the crm.timeline.logo.get method with the logo code parameter and displays the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.timeline.logo.get',\n    [\n        'code' => 'info'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Content Blocks with PHP\nDESCRIPTION: Example of how to retrieve additional content blocks for a timeline record with ID 8 linked to a deal with ID 4 using PHP with the CRest library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/crm-timeline-layout-blocks-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n$result = CRest::call(\n    'crm.timeline.layout.blocks.get',\n    [\n        'entityTypeId' => 2,\n        'entityId' => 4,\n        'timelineId' => 8,\n    ]\n);\necho '';\nprint_r($result);\necho '';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Extra Charge List using cURL OAuth in Bitrix24\nDESCRIPTION: This snippet shows how to use cURL with OAuth authentication to call the catalog.extra.list method in Bitrix24. It includes selecting specific fields, filtering, and ordering the results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/extra/catalog-extra-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"percentage\"],\"filter\":{\">percentage\":5},\"order\":{\"id\":\"ASC\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.extra.list\n```\n\n----------------------------------------\n\nTITLE: Delete Lead via cURL (OAuth)\nDESCRIPTION: This cURL example illustrates how to delete a lead using OAuth authentication. Substitute the placeholders with your Bitrix24 address and access token. The JSON payload includes the lead ID and the access token for authentication.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":\"123\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.lead.delete\n```\n\n----------------------------------------\n\nTITLE: Adding Shipment Item via cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to add a shipment item using OAuth authentication in Bitrix24. It sends a POST request with the required fields and an authorization token to the specified endpoint. Replace placeholders with your Bitrix24 address and the access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-add.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n\"-X POST \\\n-H \\\"Content-Type: application/json\\\" \\\n-H \\\"Accept: application/json\\\" \\\n-d '{\\\"fields\\\":{\\\"orderDeliveryId\\\":33,\\\"basketId\\\":18,\\\"quantity\\\":1},\\\"auth\\\":\\\"**put_access_token_here**\\\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipmentitem.add\"\n```\n\n----------------------------------------\n\nTITLE: Defining the lang_map object structure\nDESCRIPTION: This snippet shows the structure of the `lang_map` object, which is used to represent localized values for different languages. `lang_n` represents the language identifier, and `value_n` is the value for that language.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/data-types.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n```\n{\n    lang_1: value_1,\n    lang_2: value_2,\n    ..\n    lang_n: value_n,\n}\n```\n```\n\n----------------------------------------\n\nTITLE: Update CRM Requisite Field via cURL (OAuth)\nDESCRIPTION: This snippet shows how to update a CRM requisite field using cURL with OAuth authentication. It includes the access token in the JSON payload. The request sets the Content-Type and Accept headers to application/json.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":1,\"preset\":{\"ID\":27},\"fields\":{\"FIELD_NAME\":\"RQ_NAME\",\"FIELD_TITLE\":\"Имя\",\"IN_SHORT_LIST\":\"Y\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.preset.field.update\n```\n\n----------------------------------------\n\nTITLE: Delete Order Entity Binding in JavaScript (Bitrix24 SDK)\nDESCRIPTION: Shows how to remove an order's binding to a CRM object using the Bitrix24 JavaScript SDK with promise-based error handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/order-entity/crm-order-entity-delete-by-filter.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.orderentity.deletebyfilter\",\n    {\n        fields: {\n            orderId: 5125,\n            ownerId: 6933,\n            ownerTypeId: 2\n        }\n    },\n)\n    .then(\n        function(result)\n        {\n            if (result.error())\n            {\n                console.error(result.error());\n            }\n            else\n            {\n                console.log(result);\n            }\n        },\n        function(error)\n        {\n            console.info(error);\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment with PHP\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve payment information using the `sale.payment.get` method. It uses the `CRest::call` function (from the `crest.php` library) to make the API call and then prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.payment.get',\n    [\n        'id' => 6\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Получение связей бронирования с использованием JS в Bitrix24\nDESCRIPTION: Пример JavaScript кода для вызова метода booking.v1.booking.externalData.list с использованием BX24 API. Метод принимает идентификатор бронирования и возвращает связанные данные.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-list.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"booking.v1.booking.externalData.list\",\n    {\n        bookingId: 123,\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Recording Business Process Logs Using JavaScript in Bitrix24\nDESCRIPTION: This JavaScript example demonstrates how to call the bizproc.activity.log method using the BX24 API. It logs a message to a business process and includes error handling.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-activity/bizproc-activity-log.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'bizproc.activity.log',\n    {\n        event_token: '55c1dc1c3f0d75.78875596|A51601_82584_96831_81132|hsyUws1j4XiwqPqN45eH66CcQtEvpUIP.47dd5d888e8e549d2c984713e12a4268e6e87d0208ca1f093ba1075e77f92e90',\n        log_message: 'Please wait for answer!'\n    },\n    function(result) {\n        if(result.error())\n            alert(\"Error: \" + result.error());\n        else\n            alert(\"Success: \" + result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Icons using JavaScript\nDESCRIPTION: This example demonstrates how to call the crm.timeline.icon.list method using the BX24 JavaScript API to get a list of available icons for CRM timeline log entries. It includes error handling and data processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.timeline.icon.list\", \n    {},\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Update Person Type with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to update a person type in Bitrix24. It requires the `crest.php` library for making REST API calls. It specifies the method name (`sale.persontype.update`), the ID of the person type to update, and the fields to modify. The result of the API call is printed to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.persontype.update',\n    [\n        'id' => 12,\n        'fields' => [\n            'name' => 'Юр. лицо'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Calling calendar.user.settings.get via PHP in Bitrix24\nDESCRIPTION: This snippet shows how to call the calendar.user.settings.get method using PHP with the CRest library in Bitrix24. It uses the CRest::call function to make the API request with an empty parameter array and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-user-settings-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'calendar.user.settings.get',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Logo using JavaScript\nDESCRIPTION: This snippet demonstrates how to delete a timeline logo using the BX24 JavaScript library. It handles both success and error cases with callbacks.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.timeline.logo.delete\",\n    {\n        code: \"info\",\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting a System Status Item with Forced Deletion Using JavaScript - Bitrix24\nDESCRIPTION: This JavaScript snippet showcases the deletion of a system status item in Bitrix24. It allows the user to input an ID and includes a 'FORCED' parameter to bypass the natural deletion constraints for system elements.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/status/crm-status-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID пользовательского или системного элемента\");\nBX24.callMethod(\n    \"crm.status.delete\",\n    { id: id, params:{ FORCED: \"Y\" } },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Копирование файла в папку с использованием disk.file.copyto в Bitrix24 REST API (JavaScript)\nDESCRIPTION: Этот код демонстрирует использование метода disk.file.copyto для копирования файла в указанную папку. Метод принимает идентификатор файла и идентификатор целевой папки. Результат выполнения выводится в консоль.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/file/disk-file-copy-to.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.file.copyto\",\n    {\n        id: 10,\n        targetFolderId: 226\n    },\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Company from Contact in JavaScript\nDESCRIPTION: JavaScript method using Bitrix24 SDK to remove a company association from a contact with error handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.company.delete',\n    {\n        id: 54,\n        fields: {\n            COMPANY_ID: 32,\n        },\n    },\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Setting CRM Timeline Item Data with Bitrix24 REST API\nDESCRIPTION: This method sets data for a specific CRM timeline item using the Bitrix24 REST API. It validates input fields, combines form data with JSON editor content, and calls the appropriate API method to update the item.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nsetAction()\n{\n    const isValid = this.validateFieldsWithAlerts();\n    if (!isValid)\n    {\n        return;\n    }\n    const method = this.getMethod('set');\n    const data = {\n        ...this.getData(),\n        layout: this.#jsonEditor.get(),\n    };\n    const callback = (result) => {\n        this.stopLoading();\n        if (result.error())\n        {\n            this.renderDangerAlert(result.error());\n            return;\n        }\n        this.renderSuccessAlert(\"Дополнительные контентные блоки успешно установлены ;)\");\n    };\n    this.loading();\n    BX24.callMethod(method, data, callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Item Shipment Fields with cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to retrieve payment item shipment fields using cURL with OAuth authentication.  It sends a POST request with the 'auth' parameter in the JSON payload containing the access token to authenticate with the Bitrix24 REST API endpoint. The access token needs to be provided.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-shipment/sale-payment-item-shipment-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.paymentitemshipment.getfields\n```\n\n----------------------------------------\n\nTITLE: JSON Response from sonet_group.delete Bitrix24 REST API Method\nDESCRIPTION: This JSON response example shows the successful result of calling the sonet_group.delete method. The response includes a result field with value true indicating successful deletion.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/sonet-group-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"result\":true}\n```\n\n----------------------------------------\n\nTITLE: Get Basket Items List using Javascript\nDESCRIPTION: This JavaScript code snippet retrieves a list of basket items using the `sale.basketitem.list` method.  It utilizes the `BX24.callMethod` function to make the API call and handles the response using promises. The code configures parameters for selection, filtering, ordering, and pagination, and logs the results or any errors to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"sale.basketitem.list\",\n        {\n            select: [\n                'id',\n                'orderId',\n                'productId',\n                'name',\n                'price',\n                'currency',\n            ],\n            filter: {\n                '@orderId': [5147, 5146],\n            },\n            order: {\n                id: 'desc',\n            },\n            start: 0,\n        },\n    )\n        .then(\n            function(result)\n            {\n                if (result.error())\n                {\n                    console.error(result.error());\n                }\n                else\n                {\n                    console.log(result.data);\n                }\n            },\n            function(error)\n            {\n                console.info(error);\n            }\n        );\n```\n\n----------------------------------------\n\nTITLE: Updating Contact User Field via JavaScript\nDESCRIPTION: This snippet demonstrates updating a contact user field using the `BX24.callMethod` function in JavaScript. It includes setting various field properties such as mandatory, filter, settings, sort, and labels. The function calls the `crm.contact.userfield.update` method in the Bitrix24 REST API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.userfield.update',\n    {\n        id: 536,\n        fields: {\n            MANDATORY: \"N\",\n            SHOW_FILTER: \"N\",\n            SETTINGS: {\n                DEFAULT_VALUE: \"Привет, мир! Значение по умолчанию (изменено)\",\n                ROWS: 10,\n            },\n            SORT: 2000,\n            EDIT_IN_LIST: \"N\",\n            LIST_FILTER_LABEL: \"Привет, мир! Фильтр (изменено)\",\n            LIST_COLUMN_LABEL: {\n                \"en\": \"Hello, World! Column (changed)\",\n                \"ru\": \"Привет, мир! Колонка (изменено)\",\n                \"de\": \"Hallo, Welt! Spalte (geändert)\"\n            },\n            EDIT_FORM_LABEL: {\n                \"en\": \"Hello, World! Edit (changed)\",\n                \"ru\": \"Привет, мир! Редактировать (изменено)\",\n                \"de\": \"Hallo, Welt! Bearbeiten (geändert)\"\n            },\n            ERROR_MESSAGE: {\n                \"en\": \"Hello, World! Error (changed)\",\n                \"ru\": \"Привет, мир! Ошибка (изменено)\",\n                \"de\": \"Hallo, Welt! Fehler (geändert)\"\n            },\n            HELP_MESSAGE: {\n                \"en\": \"Hello, World! Help (changed)\",\n                \"ru\": \"Привет, мир! Помощь (изменено)\",\n                \"de\": \"Hallo, Welt! Hilfe (geändert)\"\n            },\n        },\n    },\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Time Records with JavaScript\nDESCRIPTION: Two JavaScript examples using the BX24 API: one that gets all time records sorted by ID and filtered by ID value, and another that filters records by creation date with pagination.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/elapsed-item/task-elapsed-item-get-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Получить все записи о затраченном времени с сортировкой по ID в нисходящем порядке.\n// Будут отфильтрованы только те записи, ID которых имеет значение меньше 50.\nBX24.callMethod(\n    'task.elapseditem.getlist',\n    [\n        1, \n        {'ID': 'desc'},\n        {'<ID': 50}\n    ],\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n// Получение выборки по затраченному времени на основании общих условий фильтрации. Например, выбрать данные о трудозатратах с указанной даты:\nBX24.callMethod(\n    'task.elapseditem.getlist',\n    [\n        {'ID': 'desc'}, \n        {'>=CREATED_DATE': '2024-02-16'},\n        ['ID', 'TASK_ID'],\n        {\"NAV_PARAMS\":{\n                \"nPageSize\":2\n            }\n        },\n    ],\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Successful Response JSON\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the `sale.basketitem.add` method. It includes details of the created basket item, such as price, quantity, and product ID. The \"time\" element includes statistics about the execution of the query.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"basketItem\": {\n            \"basePrice\": 1000,\n            \"canBuy\": \"Y\",\n            \"catalogXmlId\": \"FUTURE-1C-CATALOG\",\n            \"currency\": \"RUB\",\n            \"customPrice\": \"N\",\n            \"dateInsert\": \"2024-04-23T15:59:37+02:00\",\n            \"dateUpdate\": \"2024-04-23T15:59:37+02:00\",\n            \"dimensions\": \"a:3:{s:5:\\\"WIDTH\\\";N;s:6:\\\"HEIGHT\\\";N;s:6:\\\"LENGTH\\\";N;}\",\n            \"discountPrice\": 100,\n            \"id\": 6790,\n            \"measureCode\": \"163\",\n            \"measureName\": \"г\",\n            \"name\": \"Товар\",\n            \"orderId\": 5147,\n            \"price\": 900,\n            \"productId\": 1245,\n            \"productXmlId\": \"1245\",\n            \"properties\": [],\n            \"quantity\": 1,\n            \"reservations\": [],\n            \"sort\": 100,\n            \"vatIncluded\": \"N\",\n            \"vatRate\": null,\n            \"weight\": 0,\n            \"xmlId\": \"bx_6627bec8c4fdc\"\n        }\n    },\n    \"total\": 1,\n    \"time\": {\n        \"start\": 1713880776.108755,\n        \"finish\": 1713880777.704221,\n        \"duration\": 1.595465898513794,\n        \"processing\": 0.973701000213623,\n        \"date_start\": \"2024-04-23T15:59:36+02:00\",\n        \"date_finish\": \"2024-04-23T15:59:37+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Contact-Company Fields with cURL (OAuth)\nDESCRIPTION: This cURL command uses OAuth to retrieve contact-company fields. Replace `put_your_bitrix24_address` and `put_access_token_here` with your actual Bitrix24 address and access token, respectively.  The command sends a POST request with a JSON payload containing the access token to the specified endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.company.fields\n```\n\n----------------------------------------\n\nTITLE: Adding a User Field using cURL (Webhook)\nDESCRIPTION: This code snippet demonstrates how to add a user field to a Bitrix24 contact using cURL and a webhook. It sends a POST request to the Bitrix24 REST API endpoint with the necessary parameters in JSON format to define the user field's properties such as label, type, name, and settings. The endpoint includes placeholders for the Bitrix24 address, user ID, and webhook key which need to be replaced with actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"fields\":{\"LABEL\":\"Поле \\'Привет, мир!\\'\",\"USER_TYPE_ID\":\"string\",\"FIELD_NAME\":\"HELLO_WORLD\",\"MULTIPLE\":\"Y\",\"MANDATORY\":\"Y\",\"SHOW_FILTER\":\"Y\",\"SETTINGS\":{\"DEFAULT_VALUE\":\"Привет, мир! Значение по умолчанию\",\"ROWS\":3},\"SORT\":1000,\"EDIT_IN_LIST\":\"Y\",\"LIST_FILTER_LABEL\":\"Привет, мир! Фильтр\",\"LIST_COLUMN_LABEL\":{\"en\":\"Hello, World! Column\",\"ru\":\"Привет, мир! Колонка\",\"de\":\"Hallo, Welt! Spalte\"},\"EDIT_FORM_LABEL\":{\"en\":\"Hello, World! Edit\",\"ru\":\"Привет, мир! Редактировать\",\"de\":\"Hallo, Welt! Bearbeiten\"},\"ERROR_MESSAGE\":{\"en\":\"Hello, World! Error\",\"ru\":\"Привет, мир! Ошибка\",\"de\":\"Hallo, Welt! Fehler\"},\"HELP_MESSAGE\":{\"en\":\"Hello, World! Help\",\"ru\":\"Привет, мир! Помощь\",\"de\":\"Hallo, Welt! Hilfe\"}}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.userfield.add\n```\n\n----------------------------------------\n\nTITLE: Updating Sale Status with cURL (OAuth)\nDESCRIPTION: HTTP POST request to update sale status using OAuth authentication, including access token and comprehensive status configuration\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-update.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":\"MS\",\"fields\":{\"type\":\"D\",\"notify\":\"N\",\"sort\":100,\"color\":\"#00FF00\",\"xmlId\":\"updatedXmlId\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.status.update\n```\n\n----------------------------------------\n\nTITLE: Update Sale Property Group with cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates updating a sale property group using OAuth authentication. The `auth` parameter is included in the JSON payload, containing the access token. Replace placeholders for Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-update.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":10,\"fields\":{\"personTypeId\":3,\"name\":\"Обновленная группа свойств\",\"sort\":100},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.propertygroup.update\n```\n\n----------------------------------------\n\nTITLE: Querying Sale Status List using JavaScript\nDESCRIPTION: This JavaScript snippet uses the BX24.callMethod function to retrieve a list of sale statuses. The method takes parameters for selecting, filtering, and ordering the results.  The snippet also includes error handling and data retrieval.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"sale.status.list\", {\n            \"select\": [\n                \"id\",\n                \"type\",\n                \"notify\",\n                \"color\",\n                \"sort\",\n                \"xmlId\",\n            ],\n            \"filter\": {\n                \"id\": \"N\",\n            },\n            \"order\": {\n                \"type\": \"asc\",\n            }\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Sample response in JSON\nDESCRIPTION: This JSON object represents a successful response from the `sale.propertygroup.add` method. It includes the `result` object containing the newly created `propertyGroup` with its `id`, `name`, `personTypeId`, and `sort`. It also contains `time` information about the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-add.md#2025-04-20_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"result\":{\n        \"propertyGroup\":{\n            \"id\":16,\n            \"name\":\"Новая группа свойств\",\n            \"personTypeId\":3,\n            \"sort\":100\n        }\n    },\n    \"time\":{\n        \"start\":1711451989.729911,\n        \"finish\":1711451989.907491,\n        \"duration\":0.1775798797607422,\n        \"processing\":0.008534908294677734,\n        \"date_start\":\"2024-03-26T14:19:49+03:00\",\n        \"date_finish\":\"2024-03-26T14:19:49+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Catalog Section using PHP in Bitrix24 REST API\nDESCRIPTION: This snippet shows how to delete a catalog section using PHP in the Bitrix24 REST API. It uses the CRest::call function to send the request and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/section/catalog-section-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.section.delete',\n    [\n        'id' => 31\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Address Fields via cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to retrieve address fields using cURL with a webhook in Bitrix24. It sends a POST request with an empty JSON body to the crm.address.fields endpoint, authenticating with the user ID and webhook token. Replace placeholders with your actual Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/addresses/crm-address-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.address.fields\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Services with PHP\nDESCRIPTION: This snippet shows how to query delivery services using PHP with the CRest::call method. It calls the sale.delivery.extra.service.get method with the DELIVERY_ID and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/extra-service/sale-delivery-extra-service-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    require_once('crest.php');\n\n    $result = CRest::call(\n        'sale.delivery.extra.service.get',\n        [\n            'DELIVERY_ID' => 198,\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n    ?>\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for CRM Timeline Comment\nDESCRIPTION: Example of a successful JSON response when retrieving a CRM timeline comment. Contains comment details including ID, entity associations, creation time, content, author ID, and file attachments.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"ID\": \"999\",\n        \"ENTITY_ID\": \"2\",\n        \"ENTITY_TYPE\": \"deal\",\n        \"CREATED\": \"2020-03-02T12:00:00+03:00\",\n        \"COMMENT\": \"New comment was added\",\n        \"AUTHOR_ID\": \"1\",\n        \"FILES\": {\n            \"1\": {\n                \"id\": 1,\n                \"date\": \"2020-03-02T12:00:00+03:00\",\n                \"type\": \"image\",\n                \"name\": \"1.gif\",\n                \"size\": 43,\n                \"image\": {\n                    \"width\": 1,\n                    \"height\": 1\n                },\n                \"authorId\": 1,\n                \"authorName\": \"John Dou\",\n                \"urlPreview\": \"https://my.bitrix24.com/disk/showFile/930/?&ncc=1&width=640&height=640&signature=292f450929833cd881070155e05a2c41b5bb265ea8c8c1bc2108dbcbb56f667f&ts=1718366521&filename=1.gif\",\n                \"urlShow\": \"https://my.bitrix24.com/disk/showFile/930/?&ncc=1&ts=1718366521&filename=1.gif\",\n                \"urlDownload\": \"https://my.bitrix24.com/disk/downloadFile/930/?&ncc=1&filename=1.gif\"\n            },\n            \"2\": {\n                \"id\": 2,\n                \"date\": \"2020-03-02T12:00:00+03:00\",\n                \"type\": \"image\",\n                \"name\": \"2.gif\",\n                \"size\": 43,\n                \"image\": {\n                    \"width\": 1,\n                    \"height\": 1\n                },\n                \"authorId\": 1,\n                \"authorName\": \"John Dou\",\n                \"urlPreview\": \"https://my.bitrix24.com/disk/showFile/931/?&ncc=1&width=640&height=640&signature=118de010a40eff06fb9d691ee9235e2ef809a17780e46927bf8b12f8dc3224db&ts=1718366521&filename=2.gif\",\n                \"urlShow\": \"https://my.bitrix24.com/disk/showFile/931/?&ncc=1&ts=1718366521&filename=2.gif\",\n                \"urlDownload\": \"https://my.bitrix24.com/disk/downloadFile/931/?&ncc=1&filename=2.gif\"\n            }\n        }\n    },\n    \"time\": {\n        \"start\": 1715091541.642592,\n        \"finish\": 1715091541.730599,\n        \"duration\": 0.08800697326660156,\n        \"date_start\": \"2024-05-03T17:19:01+03:00\",\n        \"date_finish\": \"2024-05-03T17:19:01+03:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Group Participants with JavaScript\nDESCRIPTION: This snippet demonstrates how to get a list of participants from a social network group with ID 15 using JavaScript. It uses the BX24.callMethod function to call the 'sonet_group.user.get' endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/members/sonet-group-user-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// Получаем список участников группы соцсети с ID=15\nBX24.callMethod('sonet_group.user.get', {\n    'ID': 15\n});\n```\n\n----------------------------------------\n\nTITLE: Querying Landing Page Widgets with JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to call the landing.repowidget.getlist method using JavaScript in Bitrix24. It retrieves widgets with IDs greater than 1, selecting only the ID and NAME fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/vibe/landing-repowidget-get-list.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'landing.repowidget.getlist',\n    {\n        params: {\n            select: [\n                'ID', 'NAME' \n            ],\n            filter: {\n                '>ID': '1'\n            }\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Bookings by Resource Type IDs in Bitrix24 Calendar API\nDESCRIPTION: This example demonstrates how to retrieve resource bookings for a specific date range and list of resource type IDs using the calendar.resource.booking.list method.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/resource/calendar-resource-booking-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"resourceTypeIdList\":[10852,10888,10873,10871,10853],\"from\":\"2024-06-20\",\"to\":\"2024-08-20\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/calendar.resource.booking.list\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'calendar.resource.booking.list',\n    {\n        filter: {\n            resourceTypeIdList: [10852, 10888, 10873, 10871, 10853],\n            from: '2024-06-20',\n            to: '2024-08-20',\n        }\n    }\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'calendar.resource.booking.list',\n    [\n        'filter' => [\n            'resourceTypeIdList' => [10852, 10888, 10873, 10871, 10853],\n            'from' => '2024-06-20',\n            'to' => '2024-08-20'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Deleting a property group via cURL (Webhook)\nDESCRIPTION: This code snippet demonstrates how to delete a sale property group using cURL with Webhook authentication. It sends a POST request to the Bitrix24 REST API endpoint, including the `id` of the property group to be deleted in the JSON payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":15}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.propertygroup.delete\n```\n\n----------------------------------------\n\nTITLE: Calling reloadData in Bitrix24 CRM Card\nDESCRIPTION: Triggers interface data reload in CRM card using BX24.placement.call method. This method updates interface data temporarily without permanent storage until user saves the form.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/crm-card.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.call('reloadData', function(){console.log('reload call')})\n```\n\n----------------------------------------\n\nTITLE: Saving Application Configuration in PHP\nDESCRIPTION: This function saves the application configuration to a PHP file. It takes an array of parameters and writes them to a file named based on the Bitrix24 domain.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/chat-bots/index.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nfunction saveParams($params) {\n    $config = \"<?php\\n\";\n    $config .= \"\\$appsConfig = \" . var_export($params, true) . \";\\n\";\n    $config .= \"?>\";\n    $configFileName = '/config_' . trim(str_replace('.', '_', $_REQUEST['auth']['domain'])) . '.php';\n    file_put_contents(__DIR__ . $configFileName, $config);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Update To-Do Description with cURL (OAuth)\nDESCRIPTION: This cURL command shows how to update a to-do activity's description using OAuth authentication. The command sends a POST request with the activity ID, owner type, owner ID, new description, and access token to the Bitrix24 REST API. The access token and Bitrix24 address are placeholders that need to be updated.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/todo/crm-activity-todo-update-description.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":999,\"ownerTypeId\":2,\"ownerId\":1,\"value\":\"Новое описание дела\",\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/crm.activity.todo.updateDescription\n```\n\n----------------------------------------\n\nTITLE: Querying VAT Rates with JavaScript\nDESCRIPTION: JavaScript example using the BX24 library to call the catalog.vat.list method. It demonstrates how to handle the response and paginate through results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/vat/catalog-vat-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.vat.list',\n    {\n        select: [\n            'id',\n            'name',\n            'rate'\n        ],\n        filter: {\n            '>=sort': 200\n        },\n        order: {\n            'id': \"ASC\"\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n        result.next();\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Update Property Variant with JavaScript\nDESCRIPTION: This JavaScript code updates a property variant using the `BX24.callMethod` function. It calls the `sale.propertyvariant.update` method with the variant's ID and the fields to update.  The code includes error handling and data retrieval.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-update.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.propertyvariant.update\", {\n        \"id\": 5,\n        \"fields\": {\n            \"name\": \"Красный\",\n            \"value\": \"red\",\n            \"sort\": 10,\n            \"description\": \"Новое описание значения для красного цвета\"\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Update Payment Item Binding with cURL (OAuth)\nDESCRIPTION: This cURL command shows how to update a payment item binding using OAuth authentication in Bitrix24. It sends a POST request with the item's ID, the fields to be updated (quantity and XML ID), and the access token. The Bitrix24 address and the endpoint should be correctly specified.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-update.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1186,\"fields\":{\"quantity\":1,\"xmlId\":\"myNewXmlId\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.paymentitembasket.update\n```\n\n----------------------------------------\n\nTITLE: Setting Network Ranges with JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24.callMethod function in JavaScript to set network address ranges for the office network in Bitrix24. It includes error handling and result logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/timeman/networkrange/timeman-networkrange-set.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'timeman.networkrange.set',\n    {\n        ranges: [\n            {\n                \"ip_range\": \"10.0.0.0-10.255.255.255\",\n                \"name\": \"Офисная сеть 10.x.x.x\"\n            },\n            {\n                \"ip_range\": \"172.16.0.0-172.31.255.255\",\n                \"name\": \"Офисная сеть 172.x.x.x\"\n            },\n            {\n                \"ip_range\": \"192.168.0.0-192.168.255.255\",\n                \"name\": \"Офисная сеть 192.168.x.x\"\n            }\n        ]\n    },\n    function(result){\n        if(result.error())\n        {\n            console.error(result.error().ex);\n        }\n        else\n        {\n            console.log(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Datetime Input Field\nDESCRIPTION: This code generates a datetime input field. If a value is provided, it's formatted to 'Y-m-d\\TH:i:s'. The input's attributes are derived from `$arField`, and the input type is specified as 'datetime-local'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'datetime':\n            if (!empty($value))\n            {\n                $value = date('Y-m-d\\TH:i:s', strtotime($value));\n            }\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'datetime-local',\n                ]\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Adding a User Field using PHP (B24PhpSdk)\nDESCRIPTION: This PHP code snippet demonstrates adding a user field using B24PhpSdk. It defines an array `$userfieldItemFields` containing the properties of the user field, such as `FIELD_NAME`, `USER_TYPE_ID`, `XML_ID`, labels, and settings. The code then calls the `add()` method on the contactUserfield scope to create the user field and prints the ID of the newly created field. A try-catch block is used to handle potential exceptions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n        $userfieldItemFields = [\n            'FIELD_NAME' => 'UF_CRM_example',\n            'USER_TYPE_ID' => 'string',\n            'XML_ID' => 'xml_example',\n            'SORT' => '100',\n            'MULTIPLE' => 'N',\n            'MANDATORY' => 'Y',\n            'SHOW_FILTER' => 'Y',\n            'SHOW_IN_LIST' => 'Y',\n            'EDIT_IN_LIST' => 'Y',\n            'IS_SEARCHABLE' => 'Y',\n            'EDIT_FORM_LABEL' => 'Example Field',\n            'LIST_COLUMN_LABEL' => 'Example Column',\n            'LIST_FILTER_LABEL' => 'Example Filter',\n            'ERROR_MESSAGE' => 'Error occurred',\n            'HELP_MESSAGE' => 'Help message',\n            'LIST' => 'list_value',\n            'SETTINGS' => 'settings_value',\n        ];\n\n        $result = $serviceBuilder\n            ->getCRMScope()\n            ->contactUserfield()\n            ->add($userfieldItemFields);\n\n        print($result->getId());\n    } catch (Throwable $e) {\n        print('Error: ' . $e->getMessage());\n    }\n```\n\n----------------------------------------\n\nTITLE: Querying Basket Properties Fields with JavaScript\nDESCRIPTION: This JavaScript code uses the BX24.callMethod function to retrieve basket property fields. It handles both successful responses (logging the data) and error cases (logging the error message). It leverages Bitrix24's JavaScript API to interact with the REST endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-properties/sale-basket-properties-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"sale.basketproperties.getFields\",\n        {},\n    )\n        .then(\n            function(result)\n            {\n                if (result.error())\n                {\n                    console.error(result.error());\n                }\n                else\n                {\n                    console.log(result.data());\n                }\n            },\n            function(error)\n            {\n                console.info(error);\n            }\n        );\n```\n\n----------------------------------------\n\nTITLE: API Response Format\nDESCRIPTION: Sample JSON response from the sonet_group.user.get method. The response contains an array of group participants with their user IDs and roles in the group.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/members/sonet-group-user-get.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\"result\":[{\"USER_ID\":\"1\",\"ROLE\":\"A\"}]}\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Currency Fields via cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to retrieve CRM currency fields using a cURL command with a webhook. It sends a POST request to the specified Bitrix24 endpoint with an empty JSON payload. Replace placeholders for your Bitrix24 address, user ID, and webhook ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.currency.fields\n```\n\n----------------------------------------\n\nTITLE: Update Bank Detail via cURL (Webhook)\nDESCRIPTION: This cURL example demonstrates how to update a bank detail using a webhook. It sets the Content-Type and Accept headers to application/json and sends a JSON payload containing the ID of the bank detail and the fields to be updated. Replace the placeholders for the Bitrix24 address, user ID, and webhook with your actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":357,\"fields\":{\"NAME\":\"ПАО Супербанк (не использовать)\",\"COMMENTS\":\"Устаревший\",\"SORT\":10000,\"ACTIVE\":\"N\"}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.bankdetail.update\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Source Fields using PHP in Bitrix24\nDESCRIPTION: This PHP snippet demonstrates how to call the sale.tradePlatform.getFields method using the CRest library. It prints the entire response for inspection.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/trade-platform/sale-trade-platform-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.tradePlatform.getFields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sale Person Types with PHP\nDESCRIPTION: A PHP example showing how to call the sale.persontype.list method using CRest library, with filtering and ordering options for person types\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.persontype.list',\n    [\n        'select' => [\"id\", \"name\", \"sort\"],\n        'filter' => ['<=sort' => 100],\n        'order' => ['sort' => 'DESC']\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Getting Call Status using cURL (OAuth) - Bash\nDESCRIPTION: This snippet demonstrates how to make a POST request using cURL to get the current call status, utilizing OAuth authentication. It indicates how to format the request with the required access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/get-status.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"PLACEMENT\":\"getStatus\",\"PARAMS\":{}}' \\\n\"https://**put_your_bitrix24_address**/rest/placement.call?auth=**put_access_token_here**\"\n```\n\n----------------------------------------\n\nTITLE: Delete CRM Requisite User Field with Javascript\nDESCRIPTION: This JavaScript example demonstrates deleting a CRM requisite user field using the BX24.callMethod function. It takes the 'id' of the user field as a parameter.  The result is handled in a callback function that logs errors or data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.userfield.delete\",\n    {\n        id: 235\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Установка имени чата через PHP в Bitrix24 REST API\nDESCRIPTION: Пример использования метода imconnector.chat.name.set через PHP. Устанавливает новое имя для указанного чата в коннекторе и выводит результат.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/imconnector/imconnector-chat-name-set.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$params = [\n    'CONNECTOR' => 'connector',\n    'LINE' => '105',\n    'CHAT_ID' => '47e007b1-ee15-43db-bcba-1c26e5884d3f',\n    'NAME' => 'Новое имя диалога'\n];\n\n$result = CRest::call(\n    'imconnector.chat.name.set',\n    $params\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Available Methods for Payer Type Status Management\nDESCRIPTION: Lists the key methods for managing payer type statuses within the sale scope, with administrator-level permissions\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/business-value-person-domain/index.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- sale.businessValuePersonDomain.add\n- sale.businessValuePersonDomain.list\n- sale.businessValuePersonDomain.deleteByFilter\n- sale.businessValuePersonDomain.getFields\n```\n\n----------------------------------------\n\nTITLE: Get Preset Field via PHP\nDESCRIPTION: This PHP code uses the CRest::call function to retrieve a custom field of a requisite template. It passes the field ID and preset ID as parameters, then prints the result using print_r within <PRE> tags for readability. It requires the crest.php library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.preset.field.get',\n    [\n        'ID' => 1,\n        'preset' => ['ID' => 27]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Comments using PHP\nDESCRIPTION: Example of using the Bitrix24 PHP SDK to fetch CRM timeline comments. The code uses the CRest class to make the API call with filtering and field selection parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.timeline.comment.list',\n    [\n        'filter' => [\n            'ENTITY_ID' => 10,\n            'ENTITY_TYPE' => 'deal',\n        ],\n        'select' => [\n            'ID',\n            'CREATED',\n            'ENTITY_ID',\n            'ENTITY_TYPE',\n            'AUTHOR_ID',\n            'COMMENT',\n            'FILES',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Handling OnOpenLineMessageDelete Event Data in PHP\nDESCRIPTION: This code snippet demonstrates the structure of the data received by the event handler when a message is deleted in an Open Line chat. It includes information about the connector, open line, chat, and the deleted message.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/openlines/events/on-open-line-message-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'event' => 'ONOPENLINEMESSAGEDELETE',\n    'eventId' => 1,\n    'data' => [\n        'CONNECTOR' => 'livechat',\n        'LINE' => 128,\n        'DATA' => [\n            [\n                'im' => [\n                    'chat_id' => 1024,\n                    'message_id' => 2056,\n                ],\n                'message' => [\n                    'id' => 2056,\n                ],\n                'chat' => [\n                    'id' => 1024\n                ],\n            ],\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'imopenlines',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/&#39;',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/&#39;',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service List using cURL OAuth in Bitrix24\nDESCRIPTION: This snippet shows how to use cURL with OAuth authentication to call the catalog.product.service.list method. It includes the same parameters as the webhook example but uses an access token for authentication.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/service/catalog-product-service-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"iblockId\",\"name\",\"active\",\"available\",\"bundle\",\"code\",\"createdBy\",\"dateActiveFrom\",\"dateActiveTo\",\"dateCreate\",\"detailPicture\",\"detailText\",\"detailTextType\",\"iblockSectionId\",\"modifiedBy\",\"previewPicture\",\"previewText\",\"previewTextType\",\"sort\",\"timestampX\",\"type\",\"vatId\",\"vatIncluded\",\"xmlId\",\"property94\",\"property95\"],\"filter\":{\"iblockId\":23,\">id\":10,\"@vatId\":[1,2]},\"order\":{\"id\":\"desc\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.product.service.list\n```\n\n----------------------------------------\n\nTITLE: Adding Cashbox Handler with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to add a cashbox handler using the `BX24.callMethod` function. It showcases the structure of the data being passed to the `sale.cashbox.handler.add` method, including handler properties, settings, and configuration options. It also includes an error handling function to log any errors that occur during the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-handler-add.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n        \"sale.cashbox.handler.add\",\n        {\n            \"CODE\": \"restcashbox01\",\n            \"NAME\": \"REST-касса 01\",\n            \"SORT\": 100,\n            \"SUPPORTS_FFD105\": \"Y\",\n            \"SETTINGS\":\n            {\n                \"PRINT_URL\": \"http://example.com/rest_print.php\",\n                \"CHECK_URL\": \"http://example.com/rest_check.php\",\n                \"HTTP_VERSION\": \"1.1\",\n                \"CONFIG\":\n                {\n                    \"AUTH\": {\n                        \"LABEL\": \"Авторизация\",\n                        \"ITEMS\": {\n                            \"KEYWORD\": {\n                                \"TYPE\": \"STRING\",\n                                \"LABEL\": \"Кодовое слово\"\n                            },\n                            \"PREFERENCE\": {\n                                \"TYPE\": \"ENUM\",\n                                \"LABEL\": \"Множественный выбор\",\n                                \"REQUIRED\": \"Y\",\n                                \"OPTIONS\": {\n                                    \"FIRST\": \"Первый\",\n                                    \"SECOND\": \"Второй\",\n                                    \"THIRD\": \"Третий\",\n                                }\n                            }\n                        }\n                    },\n                    \"INTERACTION\": {\n                        \"LABEL\": \"Настройки взаимодействия с кассой\",\n                        \"ITEMS\": {\n                            \"MODE\": {\n                                \"TYPE\": \"ENUM\",\n                                \"LABEL\": \"Режим работы с кассой\",\n                                \"OPTIONS\": {\n                                    \"ACTIVE\": \"боевой\",\n                                    \"TEST\": \"тестовый\"\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n                console.dir(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Querying Order Property Fields with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to retrieve order property fields.  It requires the `crest.php` library for Bitrix24 REST API interaction. The code calls the `sale.property.getfieldsbytype` method, passing the property 'type' parameter as 'NUMBER', and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get-fields-by-type.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.property.getfieldsbytype',\n        [\n            'type' => 'NUMBER'\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Fields in JavaScript with BX24\nDESCRIPTION: A JavaScript method to retrieve shipment fields using the Bitrix24 client-side API with error handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.shipment.getfields\", {},\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Task Results from Comments with JavaScript\nDESCRIPTION: Example of calling the 'tasks.task.result.deleteFromComment' method using the BX24 JavaScript SDK. The method takes a commentId parameter to identify which comment-based task result to delete and handles both success and error responses.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/result/tasks-task-result-delete-from-comment.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'tasks.task.result.deleteFromComment',\n    {\n        \"commentId\" : 2549\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Item Shipment Fields with JavaScript\nDESCRIPTION: This snippet shows how to retrieve payment item shipment fields using the BX24 JavaScript library. It uses the BX24.callMethod function to call the 'sale.paymentitemshipment.getfields' method. The response is handled in a callback function to check for errors and display the result data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-shipment/sale-payment-item-shipment-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.paymentitemshipment.getfields\",\n    {},\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Comments using JavaScript\nDESCRIPTION: Example of using the Bitrix24 JavaScript SDK to fetch CRM timeline comments. The code sets up filtering and field selection for a specific deal and handles the response data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.timeline.comment.list\",\n    {\n        filter: {\n            \"ENTITY_ID\": 10,\n            \"ENTITY_TYPE\": \"deal\",\n        },\n        select: [\n            \"ID\",\n            \"CREATED\",\n            \"ENTITY_ID\",\n            \"ENTITY_TYPE\",\n            \"AUTHOR_ID\",\n            \"COMMENT\", \n            \"FILES\",\n        ],\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Comment Methods with task.commentitem.getmanifest in JavaScript\nDESCRIPTION: This code snippet demonstrates how to call the task.commentitem.getmanifest method using the BX24 JavaScript API. The method returns a list of available task.commentitem.* methods and their descriptions. The example logs the result data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/comment-item/task-comment-item-get-manifest.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'task.commentitem.getmanifest',\n    [],\n    function(result)\n    {\n        console.info(result.data());\n        console.log(result);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Delete CRM Requisite User Field with PHP\nDESCRIPTION: This PHP example deletes a CRM requisite user field using the CRest::call method. It requires the 'crest.php' library. The 'id' parameter specifies the ID of the user field to delete, and the result of the API call is printed.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.userfield.delete',\n    [\n        'id' => 235\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Renaming Disk Storage using Bitrix24 REST API in JavaScript\nDESCRIPTION: This snippet demonstrates how to use the disk.storage.rename method to rename a storage in Bitrix24. It includes error handling and logging of the response data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/storage/disk-storage-rename.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.storage.rename\",\n    {\n        id: 2,\n        newName: 'New name for storage'\n    },\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Date Input Field\nDESCRIPTION: This code generates a date input field. If a value is provided, it is formatted to 'Y-m-d'. The input's attributes are set according to the `$arField` array, and the type of input is specified as 'date'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'date':\n            if (!empty($value))\n            {\n                $value = date('Y-m-d', strtotime($value));\n            }\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'date',\n                ]\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Process Elements with PHP\nDESCRIPTION: This snippet shows how to create smart process elements with custom fields using PHP and the CRest library. It calls the crm.item.batchImport method with an array containing custom field values and prints the API response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/import/crm-item-batch-import.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.batchImport',\n    [\n        'entityTypeId' => 1302,\n        'data' => [\n            [\n                'ufCrm44_1721812760630' => \"Строка для пользовательского поля типа Строка\",\n                'ufCrm44_1721812814433' => 81,\n                'ufCrm44_1721812853419' => date('Y-m-d'),\n                'ufCrm44_1721812885588' => [\n                    \"example.com\",\n                    \"second-example.com\",\n                ],\n                'ufCrm44_1721812898903' => [\n                    \"green_pixel.png\",\n                    \"iVBORw0KGgoAAAANSUhEUgAAAIAAAAAMCAYAAACqTLVoAAAALklEQVR42u3SAQEAAAQDsEsuOj3YMqwy6fBWCSCAAAIgAAIgAAIgAAIgAAJw3QLOrRH1U/gU4gAAAABJRU5ErkJggg==\",\n                ],\n                'ufCrm44_1721812915476' => \"300|RUB\",\n                'ufCrm44_1721812935209' => \"Y\",\n                'ufCrm44_1721812948498' => 9999.9,\n            ],\n            [\n                'ufCrm44_1721812760630' => \"Строка для пользовательского поля типа Строка\",\n                'ufCrm44_1721812814433' => 45,\n                'ufCrm44_1721812853419' => date('Y-m-d'),\n                'ufCrm44_1721812885588' => [\n                    \"example.com\",\n                    \"second-example.com\",\n                ],\n                'ufCrm44_1721812898903' => [\n                    \"green_pixel2.png\",\n                    \"iVBORw0KGgoAAAANSUhEUgAAAIAAAAAMCAYAAACqTLVoAAAALklEQVR42u3SAQEAAAQDsEsuOj3YMqwy6fBWCSCAAAIgAAIgAAIgAAIgAAJw3QLOrRH1U/gU4gAAAABJRU5ErkJggg==\",\n                ],\n                'ufCrm44_1721812915476' => \"600|RUB\",\n                'ufCrm44_1721812935209' => \"N\",\n                'ufCrm44_1721812948498' => 9999.9,\n            ],\n        ],\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Activity Types with JavaScript (BX24)\nDESCRIPTION: JavaScript method to call crm.activity.type.list using BX24 framework, with error handling and result logging\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/types/crm-activity-type-list.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.activity.type.list\",\n    {\n    }, result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Referencing Bitrix24 REST API Methods in Markdown\nDESCRIPTION: This snippet demonstrates how to reference Bitrix24 REST API methods and related resources within a markdown document. It includes links to example bots and SDK documentation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/chats/_includes/rest-command.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% note info %}\n\nВ примере используется функция `restCommand`. Это метод отправки данных в *Битрикс24*. Другой пример использования метода вы найдёте в примере [ЭхоБота](https://dev.1c-bitrix.ru/~b24bots). Вы можете использовать для вызова метода свою функцию, javascript-метод [BX24.callMethod](../../bx24-js-sdk/how-to-call-rest-methods/bx24-call-method.md) или [bitrix24-php-sdk](https://github.com/mesilov/bitrix24-php-sdk).\n\n{% endnote %}\n```\n\n----------------------------------------\n\nTITLE: Get Bank Detail via cURL (Webhook)\nDESCRIPTION: This cURL command uses a webhook to retrieve bank detail information by ID. Replace `put_your_bitrix24_address`, `put_your_user_id_here`, and `put_your_webhook_here` with the appropriate values for your Bitrix24 instance and user. The command sends a POST request with a JSON payload containing the bank detail ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":357}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.bankdetail.get\n```\n\n----------------------------------------\n\nTITLE: Parsing Bank Detail Addition Event in PHP\nDESCRIPTION: Sample event payload structure for onCrmBankDetailAdd webhook, containing event details, data, timestamp, and authorization information\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/events/on-crm-bank-detail-add.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'event' => 'onCrmBankDetailAdd',\n    'data' => [\n        'FIELDS' => [\n            'ID' => 357,\n        ],\n    ],\n    'ts' => '1466439714',\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Calling tasks.api.scrum.task.getFields using cURL with Webhook\nDESCRIPTION: This snippet demonstrates how to call the tasks.api.scrum.task.getFields method using cURL with a Bitrix24 webhook. It sends a POST request with an empty JSON body to retrieve Scrum task fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/tasks.api.scrum.task.getFields\n```\n\n----------------------------------------\n\nTITLE: Получение списка спринтов через JavaScript\nDESCRIPTION: Пример использования метода tasks.api.scrum.sprint.list с помощью JavaScript SDK Bitrix24. Запрос фильтрует спринты по идентификатору группы и текущей дате.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/sprint/tasks-api-scrum-sprint-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst groupId = 1;\nBX24.callMethod(\n    'tasks.api.scrum.sprint.list',\n    {\n        filter: {\n            GROUP_ID: groupId,\n            '>=DATE_END': new Date()\n        }\n    },\n    function(res)\n    {\n        console.log(res);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Bootstrap and jQuery Resources for Form UI\nDESCRIPTION: Includes the necessary CSS and JavaScript libraries (Bootstrap, jQuery, Popper.js) to style and add functionality to the form interface.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_15\n\nLANGUAGE: HTML\nCODE:\n```\n<link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css\"\n        crossorigin=\"anonymous\">\n<script src=\"https://code.jquery.com/jquery-3.3.1.slim.min.js\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js\"\n        crossorigin=\"anonymous\"></script>\n<script src=\"https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js\"\n        crossorigin=\"anonymous\"></script>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Handlers in PHP\nDESCRIPTION: This PHP code snippet uses the `CRest::call` function to retrieve a list of delivery service handlers. It requires the `crest.php` library.  The code defines SELECT, FILTER, and ORDER parameters to specify the data being retrieved.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.delivery.getlist',\n    [\n        'SELECT' => [\n            \"ID\",\n            \"PARENT_ID\",\n            \"NAME\",\n            \"ACTIVE\",\n            \"DESCRIPTION\",\n            \"SORT\",\n            \"LOGOTIP\",\n            \"CURRENCY\",\n        ],\n        'FILTER' => [\n            \"@ID\" => [196, 197, 198],\n        ],\n        'ORDER' => [\n            \"SORT\" => \"ASC\",\n            \"ID\" => \"DESC\",\n        ]\n    ]\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskCommentUpdate Event with PHP\nDESCRIPTION: PHP example demonstrating how to subscribe to the OnTaskCommentUpdate event using the CRest library. This code binds a handler URL to the event which will receive POST requests when task comments are updated.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/comment-item/events-comment/on-task-comment-update.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'event.bind',\n    [\n        'event' => 'OnTaskCommentUpdate',\n        'handler' => 'https://example.com/handler.php'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Activating Task Flow using cURL OAuth in Bash\nDESCRIPTION: This snippet shows how to activate or deactivate a task flow using a cURL command with OAuth authentication in Bash. It sends a POST request to the Bitrix24 REST API endpoint with the flow ID as a parameter and includes an access token in the header.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-activate.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n-d '{\n    \"flowId\": 517\n}' \\\nhttps://your-domain.bitrix24.com/rest/tasks.flow.Flow.activate\n```\n\n----------------------------------------\n\nTITLE: JavaScript Placement Call for Enable Auto Close\nDESCRIPTION: JavaScript method to enable automatic call card closing using Bitrix24 JS SDK\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/enable-auto-close.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.placement.call('enableAutoClose', {}, function (result) {\n    console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Generating User Input Field\nDESCRIPTION: This code generates a number input field representing a user. It fetches user details using `CRest::get('user.get')` based on the provided user ID. It then appends the user's full name to the input field. The input properties like name, requirement status, disabled status, multiplicity and value are set, with the input type set to 'number'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'user':\n            $arUser = [];\n            if (!empty($value))\n            {\n                $arUser = CRest::get('user.get', ['filter' => ['ID' => $value]]);\n            }\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'number'\n                ]\n            );\n            if (!empty($arUser['result']))\n            {\n                $return .= '(';\n                $i = 0;\n                foreach ($arUser['result'] as $val)\n                {\n                    $i++;\n                    if ($i > 1)\n                    {\n                        $return .= ', ';\n                    }\n                    $return .= implode(' ', [$val['NAME'], $val['LAST_NAME']]);\n                }\n                $return .= ')';\n            }\n            break;\n```\n\n----------------------------------------\n\nTITLE: Update To-Do Description with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to update a to-do activity's description. It requires the `crest.php` library and passes the activity ID, owner type, owner ID, and new description as parameters to the `crm.activity.todo.updateDescription` method. The result of the API call is then printed to the console for inspection.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/todo/crm-activity-todo-update-description.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.activity.todo.updateDescription',\n        [\n            'id' => 999,\n            'ownerTypeId' => 2,\n            'ownerId' => 1,\n            'value' => 'Новое описание дела'\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Sale Status List using PHP\nDESCRIPTION: This PHP snippet utilizes the `CRest::call` function to retrieve a list of sale statuses.  It requires the `crest.php` file and specifies parameters for selecting, filtering, and ordering the results. The snippet then prints the result using `print_r`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call('sale.status.list', [\n        'select' => [\n            'id',\n            'type',\n            'notify',\n            'color',\n            'sort',\n            'xmlId',\n        ],\n        'filter' => [\n            'id' => 'N',\n        ],\n        'order' => [\n            'type' => 'asc',\n        ]\n    ]);\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sale Person Types with JavaScript\nDESCRIPTION: A JavaScript example demonstrating how to call the sale.persontype.list method using BX24.callMethod with error handling and result processing\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.persontype.list',\n    {\n        select: [\"id\", \"name\", \"sort\"],\n        filter: {'<=sort': 100},\n        order: {'sort': 'DESC'}\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Property Value Fields with JavaScript\nDESCRIPTION: This snippet shows how to retrieve shipment property value fields using JavaScript and the `BX24.callMethod` function. It calls the `sale.shipmentpropertyvalue.getfields` method and handles the result, logging errors or data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.shipmentpropertyvalue.getfields\", {},\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Sale Status in PHP with CRest Library\nDESCRIPTION: PHP implementation of sale status creation using CRest library with result printing\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call('sale.status.add', [\n    'fields' => [\n        'id' => 'MS',\n        'type' => 'O',\n        'notify' => 'Y',\n        'sort' => 500,\n        'color' => '#FF0000',\n        'xmlId' => 'myStatusXmlId',\n    ]\n]);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Recording Business Process Logs Using PHP CRest in Bitrix24\nDESCRIPTION: This PHP example uses the CRest library to call the bizproc.activity.log method. It logs a message to a business process and displays the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-activity/bizproc-activity-log.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'bizproc.activity.log',\n    [\n        'event_token' => '55c1dc1c3f0d75.78875596|A51601_82584_96831_81132|hsyUws1j4XiwqPqN45eH66CcQtEvpUIP.47dd5d888e8e549d2c984713e12a4268e6e87d0208ca1f093ba1075e77f92e90',\n        'log_message' => 'Please wait for answer!'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Currency Fields in PHP\nDESCRIPTION: This PHP snippet retrieves CRM currency fields using the CRest::call method.  It includes the crest.php library and then calls the crm.currency.fields method. The result is printed to the console using print_r within <PRE> tags for better readability.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.currency.fields'\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Creating Bank Requisite with PHP\nDESCRIPTION: PHP implementation for creating a bank requisite using CRest library, demonstrating method call and result printing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.bankdetail.add',\n    [\n        'fields' => [\n            'ENTITY_ID' => 27,\n            'COUNTRY_ID' => 1,\n            'NAME' => 'Супербанк',\n            'RQ_BANK_NAME' => 'ПАО Супербанк',\n            'RQ_BANK_ADDR' => '117312, г. Москва, улица Вавилова, дом 19',\n            'RQ_BIK' => '044525225',\n            'RQ_ACC_NUM' => '40702810938000060473',\n            'RQ_ACC_CURRENCY' => 'RUR',\n            'RQ_COR_ACC_NUM' => '30101810400000000225',\n            'XML_ID' => '1e4641fd-2dd9-31e6-b2f2-105056c00008',\n            'ACTIVE' => 'Y',\n            'SORT' => 600\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Smart Process Fields using JavaScript in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use the BX24 JavaScript library to call the 'crm.type.fields' method and retrieve CRM smart process field information. It includes error handling and logging of the result data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.type.fields',\n    {},\n    (result) => {\n        if (result.error()) \n        {\n            console.error(result.error());\n\n            return;\n        } \n\n        console.info(result.data());\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Comment with cURL (OAuth)\nDESCRIPTION: Example of using cURL with OAuth authentication to get CRM timeline comment information. Requires a valid Bitrix24 address, access token, and comment ID parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":999,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.comment.get\n```\n\n----------------------------------------\n\nTITLE: Update Bank Detail with PHP\nDESCRIPTION: This PHP example shows how to update a bank detail using the CRest::call function.  It requires the 'crest.php' file and calls the 'crm.requisite.bankdetail.update' method with the ID and fields to update.  The result of the API call is then printed to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.requisite.bankdetail.update',\n        [\n            'id' => 357,\n            'fields' => [\n                'NAME' => 'ПАО Супербанк (не использовать)',\n                'COMMENTS' => 'Устаревший',\n                'SORT' => 10000,\n                'ACTIVE' => 'N'\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: OnLiveFeedPostDelete Event Data Structure\nDESCRIPTION: Example JSON structure showing the data received by the event handler when a post is deleted from the news feed. Includes event details, post ID, authentication tokens and timestamps.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/log/events/on-live-feed-post-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONLIVEFEEDPOSTDELETE\",\n    \"event_handler_id\": \"729\",\n    \"data\": {\n        \"FIELDS\": {\n            \"POST_ID\": \"209\"\n        }\n    },\n    \"ts\": \"1742999814\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"log\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding CRM Payment with PHP\nDESCRIPTION: This snippet demonstrates how to create a CRM payment using the Bitrix24 PHP API. It requires the `crest.php` file, calls the `crm.item.payment.add` method with the `entityId` and `entityTypeId` parameters, and prints the result to the console. The `CRest::call` method is used to execute the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.payment.add',\n    [\n        'entityId' => 13123,\n        'entityTypeId' => 2\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Payment Binding Using JS\nDESCRIPTION: This JavaScript snippet demonstrates the use of the BX24.callMethod function to bind a shopping cart item to a payment in Bitrix. It shows how to handle the response and potential errors from the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-add.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\\\n    'sale.paymentitembasket.add', {\\\n        fields: {\\\n            quantity: 3,\\\n            basketId: 2722,\\\n            paymentId: 1025,\\\n            xmlId: 'myXmlId',\\\n        }\\\n    },\\\n    function(result) {\\\n        if (result.error()) {\\\n            console.error(result.error());\\\n        } else {\\\n            console.info(result.data());\\\n        }\\\n    }\\\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scrum Task Fields using JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve Scrum task fields by ID using JavaScript. It uses the BX24.callMethod function to call the Bitrix24 REST API method tasks.api.scrum.task.get with the task ID as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'tasks.api.scrum.task.get',\n    {\n        id: 1\n    },\n        function(result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Generating Char (Checkbox) Input Field\nDESCRIPTION: This code generates a checkbox input field. If the value is 'Y', the checkbox is marked as checked. The input's attributes like name, required status, disabled status, multiplicity, value (set to 'Y'), and checked status are set appropriately, and the input type is specified as 'checkbox'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_7\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'char':\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => 'Y',\n                    'CHECKED' => ($value == 'Y') ? true : false,\n                    'TYPE' => 'checkbox',\n                ]\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Updating Sale Status with PHP CRest Library\nDESCRIPTION: PHP implementation of sale status update using CRest library, demonstrating method call and result printing\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call('sale.status.update', [\n    'id' => 'MS',\n    'fields' => [\n        'type' => 'D',\n        'notify' => 'N',\n        'sort' => 100,\n        'color' => '#00FF00',\n        'xmlId' => 'updatedXmlId',\n    ]\n]);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Property Variant with cURL (OAuth)\nDESCRIPTION: This snippet shows how to retrieve a property variant using cURL with OAuth in Bitrix24. It sends a POST request to the `sale.propertyvariant.get` method with the `id` and `auth` parameters in the request body.  Replace the placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-get.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":6,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.propertyvariant.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Service List using PHP in Bitrix24\nDESCRIPTION: This snippet shows how to use the CRest::call function in PHP to call the catalog.product.service.list method. It includes the same parameters as the other examples and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/service/catalog-product-service-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.service.list',\n    [\n        'select' => [\n            'id',\n            'iblockId',\n            'name',\n            'active',\n            'available',\n            'bundle',\n            'code',\n            'createdBy',\n            'dateActiveFrom',\n            'dateActiveTo',\n            'dateCreate',\n            'detailPicture',\n            'detailText',\n            'detailTextType',\n            'iblockSectionId',\n            'modifiedBy',\n            'previewPicture',\n            'previewText',\n            'previewTextType',\n            'sort',\n            'timestampX',\n            'type',\n            'vatId',\n            'vatIncluded',\n            'xmlId',\n            'property94',\n            'property95',\n        ],\n        'filter' => [\n            'iblockId' => 23,\n            '>id' => 10,\n            '@vatId' => [1, 2],\n        ],\n        'order' => [\n            'id' => 'desc',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Unregistering Placement Handler in Bitrix24 REST API\nDESCRIPTION: HTTP GET request to remove a specific placement handler or all handlers for a given placement. Requires authentication and placement identifier. Returns the count of removed handlers.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/placement-unbind.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\nGET https://sometestportal.bitrix24.com/rest/placement.unbind?auth=7e623a5a0000cd710000cd5b00000001000000a8b1dbe022e2de93198634e9526b00f7&placement=CRM_LEAD_DETAIL_TAB&handler=https%3A%2F%2Fwww.myapplicationhost.com%2Fplacement%2F HTTP/1.1\n```\n\n----------------------------------------\n\nTITLE: Removing Task Dependency using cURL Webhook in Bitrix24\nDESCRIPTION: This snippet demonstrates how to remove a task dependency using a cURL request with a webhook in Bitrix24. It requires the Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/task-dependence-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"taskIdFrom\":100,\"taskIdTo\":101}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/task.dependence.delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Field Characteristics in PHP/Bitrix24\nDESCRIPTION: Method for obtaining custom field characteristics with type and title information\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/userfield/index.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n[MANDATORY] => Array\\n            (\\n                [type] => char\\n                [title] => Обязательное\\n            )\n```\n\n----------------------------------------\n\nTITLE: Editing Calendar Event with editEvent Method\nDESCRIPTION: Shows how to open an event editing interface using the editEvent method. The code requires a unique identifier of the event in the format 'id|date'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-grid-veiw.md#2025-04-20_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nBX24.placement.call(\n    'editEvent',\n    {\n        uid: \"1431171|19.07.2018\"\n    },\n    function(){}\n);\n```\n\n----------------------------------------\n\nTITLE: Generating URL Input Field\nDESCRIPTION: This code generates a text input field intended for URLs. The input field's attributes, such as name, requirement status, disabled status, multiplicity, and value, are set based on the provided parameters. The input's type is specified as \"text\".\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_11\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'url':\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'text',\n                ]\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Reset Personal Configuration using cURL Webhook\nDESCRIPTION: This snippet demonstrates how to reset the personal configuration for contact details using a cURL request with a Webhook in Bitrix24. It sends a POST request to the specified endpoint with the `scope` parameter set to \"P\" and a specific `userId`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"scope\":\"P\",\"userId\":6}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.details.configuration.reset\n```\n\n----------------------------------------\n\nTITLE: Calling tasks.api.scrum.task.getFields using PHP\nDESCRIPTION: This snippet shows how to call the tasks.api.scrum.task.getFields method using PHP with the CRest library. It sends a request to retrieve Scrum task fields and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'tasks.api.scrum.task.getFields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Shipment Property Value with PHP\nDESCRIPTION: This snippet demonstrates how to retrieve a shipment property value using PHP with the `CRest::call` function. It requires the `crest.php` library for interacting with the Bitrix24 REST API. The shipment property value ID is passed as an argument to the `sale.shipmentpropertyvalue.get` method, and the result is printed using `print_r`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipmentpropertyvalue.get',\n    [\n        'id' => 38164\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Services with JavaScript\nDESCRIPTION: This snippet illustrates how to query delivery services using JavaScript with the BX24.callMethod. It calls the sale.delivery.extra.service.get method with the DELIVERY_ID, handling both success and error responses.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/extra-service/sale-delivery-extra-service-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'sale.delivery.extra.service.get', {\n            DELIVERY_ID: 198,\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Receiving Data for CRM Lead List Toolbar\nDESCRIPTION: This code snippet illustrates the data structure received by the handler when a widget is placed in the CRM lead list toolbar. It includes information such as domain, protocol, language, application ID, authentication details, member ID, status, and placement code. This data is sent as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/list-toolbar.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => com\\n    [APP_SID] => 17621e81b6c5e43e706be4f943719513\\n    [AUTH_ID] => b2f19f6600631fcd00005a4b00000001f0f1071894b660abb19a2fa0362714239a2aaa\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => a270c76600631fcd00005a4b00000001f0f107a47747d2035445dbcaa0886ec97678df\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_LEAD_LIST_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Log Message Using cURL with Webhook in Bitrix24 REST API\nDESCRIPTION: This snippet demonstrates how to get timeline log message information using cURL with a webhook. The request requires the log message ID as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.timeline.logmessage.get\n```\n\n----------------------------------------\n\nTITLE: Получение списка подразделений через JavaScript\nDESCRIPTION: Пример запроса к методу department.get с использованием JavaScript SDK Bitrix24. Запрос выполняется с параметрами сортировки и фильтрации, результат выводится в консоль.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/departments/department-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"department.get\", {\n        \"sort\": \"NAME\",\n        \"order\": \"DESC\",\n        \"PARENT\": 1\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Item Basket with JavaScript\nDESCRIPTION: This JavaScript example demonstrates how to retrieve a payment item basket using the `BX24.callMethod` function. It calls the `sale.paymentitembasket.get` method with the `id` of the item, and handles the result by logging any errors or the retrieved data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'sale.paymentitembasket.get', {\n        id: 1186,\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact from Lead using cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to delete a contact's association with a lead using a Bitrix24 webhook. It sends a POST request to the `crm.lead.contact.delete` method with the lead ID and contact ID within the JSON payload. Replace the placeholders for the Bitrix24 address, user ID, and webhook with your actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/management-communication/crm-lead-contact-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":1,\"fields\":{\"CONTACT_ID\":1010}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.lead.contact.delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Fields - PHP Integration with CRest\nDESCRIPTION: This PHP snippet demonstrates how to call the Bitrix24 API to fetch shipment details using CRest library. It requires the shipment ID and outputs the result in a formatted manner.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-get.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipment.get',\n    [\n        'id' => 2465\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Source Fields using cURL with Webhook in Bitrix24\nDESCRIPTION: This snippet demonstrates how to call the sale.tradePlatform.getFields method using cURL with a webhook. The method returns available fields for order sources and requires no parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/trade-platform/sale-trade-platform-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.tradePlatform.getFields\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Source Fields using cURL with OAuth in Bitrix24\nDESCRIPTION: This snippet shows how to call the sale.tradePlatform.getFields method using cURL with OAuth authentication. It requires an access token to be included in the request body.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/trade-platform/sale-trade-platform-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.tradePlatform.getFields\n```\n\n----------------------------------------\n\nTITLE: Retrieving Custom Deal Userfields with JS\nDESCRIPTION: Fetches custom deal userfields using Bitrix24 JS SDK with sorting and filtering options. Handles potential errors and supports pagination.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/user-defined-fields/crm-deal-userfield-list.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.deal.userfield.list\",\n    {\n        order: { \"SORT\": \"ASC\" },\n        filter: { \"MANDATORY\": \"N\" }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n        {\n            console.dir(result.data());\n            if(result.more())\n                result.next();\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Requisite Link using cURL with Webhook\nDESCRIPTION: This cURL snippet demonstrates how to make a POST request to fetch the relationship between a CRM requisite and an entity using a Webhook in Bitrix24. The request includes the entityTypeId and entityId parameters, which are necessary for the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/links/crm-requisite-link-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":31,\"entityId\":315}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.link.get\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Logo using PHP\nDESCRIPTION: This snippet shows how to delete a timeline logo using PHP with the CRest library. It prints the API response for debugging purposes.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.timeline.logo.delete',\n    [\n        'code' => 'info'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Calculate Delivery Costs Request Example\nDESCRIPTION: This is an example of the JSON request sent to the CALCULATE_URL endpoint. It includes details about the shipment, delivery service, price, currency, weight, property values (addresses), items, extra services, and contact information for both the responsible person and the recipient. This JSON illustrates the expected structure for requesting a delivery cost calculation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/webhooks/calculate.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"SHIPMENT\":{\n        \"ID\":4060,\n        \"DELIVERY_SERVICE\":{\n            \"ID\":225,\n            \"CONFIG\":[\n                {\n                    \"CODE\":\"PROFILE_TYPE\",\n                    \"VALUE\":\"CARGO\"\n                }\n            ],\n            \"PARENT\":{\n                \"ID\":223,\n                \"CONFIG\":[\n                    {\n                        \"CODE\":\"SETTING_1\",\n                        \"VALUE\":\"String Example Value\"\n                    }\n                ]\n            }\n        },\n        \"PRICE\":179998,\n        \"CURRENCY\":\"RUB\",\n        \"WEIGHT\":600,\n        \"PROPERTY_VALUES\":[\n            {\n                \"ID\":100,\n                \"TYPE\":\"ADDRESS\",\n                \"VALUE\":{\n                    \"LATITUDE\":55.726421,\n                    \"LONGITUDE\":37.61187,\n                    \"FIELDS\":{\n                        \"COUNTRY\":\"Россия\",\n                        \"ADM_LEVEL_1\":\"Москва\",\n                        \"ADM_LEVEL_2\":\"Москва\",\n                        \"ADM_LEVEL_3\":\"Якиманка\",\n                        \"LOCALITY\":\"Москва\",\n                        \"SUB_LOCALITY_LEVEL_1\":\"Центральный административный округ\",\n                        \"STREET\":\"улица Шаболовка\",\n                        \"BUILDING\":\"9\",\n                        \"ADDRESS_LINE_1\":\"улица Шаболовка, 9\"\n                    }\n                }\n            },\n            {\n                \"ID\":101,\n                \"TYPE\":\"ADDRESS\",\n                \"VALUE\":{\n                    \"LATITUDE\":55.724779,\n                    \"LONGITUDE\":37.614294,\n                    \"FIELDS\":{\n                        \"POSTAL_CODE\":\"115162\",\n                        \"COUNTRY\":\"Россия\",\n                        \"ADM_LEVEL_1\":\"Москва\",\n                        \"ADM_LEVEL_2\":\"район Якиманка\",\n                        \"LOCALITY\":\"Москва\",\n                        \"STREET\":\"улица Шаболовка\",\n                        \"BUILDING\":\"13 с10\",\n                        \"ADDRESS_LINE_1\":\"улица Шаболовка, 13 с10\"\n                    }\n                }\n            }\n        ],\n        \"ITEMS\":[\n            {\n                \"NAME\":\"iPhone 14\",\n                \"PRICE\":89999,\n                \"WEIGHT\":300,\n                \"CURRENCY\":\"RUB\",\n                \"QUANTITY\":2,\n                \"DIMENSIONS\":{\n                    \"WIDTH\":400,\n                    \"HEIGHT\":80,\n                    \"LENGTH\":500\n                }\n            }\n        ],\n        \"EXTRA_SERVICES_VALUES\":[\n            {\n                \"ID\":138,\n                \"CODE\":\"cargo_type\",\n                \"VALUE\":\"small_package\"\n            },\n            {\n                \"ID\":137,\n                \"CODE\":\"door_delivery\",\n                \"VALUE\":\"Y\"\n            },\n            {\n                \"ID\":139,\n                \"CODE\":\"some_quantity_service\",\n                \"VALUE\":3\n            }\n        ],\n        \"RESPONSIBLE_CONTACT\":{\n            \"NAME\":\"Роман Горшков\",\n            \"PHONES\":[\n                {\n                    \"TYPE\":\"MOBILE\",\n                    \"VALUE\":\"+79097996161\"\n                }\n            ]\n        },\n        \"RECIPIENT_CONTACT\":{\n            \"NAME\":\"Алексей Миронов\",\n            \"PHONES\":[\n                {\n                    \"TYPE\":\"WORK\",\n                    \"VALUE\":\"+79097996161\"\n                }\n            ]\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Task Dependency Using JavaScript in Bitrix24\nDESCRIPTION: This JavaScript snippet demonstrates how to create a task dependency using the BX24 JavaScript library in Bitrix24. It calls the task.dependence.add method with task IDs and link type, then handles the response or error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/task-dependence-add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'task.dependence.add', {\n        \"taskIdFrom\":100,\n        \"taskIdTo\":101,\n        \"linkType\":0\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Force Common CRM Config using PHP\nDESCRIPTION: This PHP code snippet shows how to force a common CRM item details configuration for deals in a specific category using the `CRest::call` function. It calls the `crm.item.details.configuration.forceCommonScopeForAll` method with the `entityTypeId` set to 2 and the `dealCategoryId` in the `extras` parameter set to 9. The result is printed to the page.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/item-details-configuration/crm-item-details-configuration-forceCommonScopeForAll.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.item.details.configuration.forceCommonScopeForAll',\n        [\n            'entityTypeId' => 2,\n            'extras' => [\n                'dealCategoryId' => 9,\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Получение свойства заказа с помощью JavaScript Bitrix24\nDESCRIPTION: Использование метода BX24.callMethod для получения свойства заказа с обработкой результата через callback-функцию\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.property.get\", {\n        \"id\": 22\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Handling CRM Contact Input - PHP\nDESCRIPTION: Generates an input element for a CRM contact with options for required, readonly, and multiple values. It also appends the contact's full name if an ID matches.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-lead.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n$return = CPrintForm ::input(\n    [\n        'NAME' => 'form[' . $key . ']',\n        'REQUIRED' => $arField[ 'isRequired' ],\n        'DISABLE' => $arField[ 'isReadOnly' ],\n        'MULTIPLE' => $arField[ 'isMultiple' ],\n        'VALUE' => $value,\n        'TYPE' => 'text',\n    ]);\n\nif(!empty($arResult[ 'VALUE_CONTACT_ID' ]) && $value == $arResult[ 'VALUE_CONTACT_ID' ][ 'ID' ])\n{\n    $return .= '(' . implode(' ', [$arResult[ 'VALUE_CONTACT_ID' ][ 'NAME' ], $arResult[ 'VALUE_CONTACT_ID' ][ 'LAST_NAME' ]]) . ')';\n}\n```\n\n----------------------------------------\n\nTITLE: Error Example\nDESCRIPTION: This JSON snippet shows an example of an error response when updating a cashbox. It includes the `error` code and `error_description` which provides more details about the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"ERROR_CASHBOX_NOT_FOUND\",\n    \"error_description\": \"Cashbox not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting User Field using PHP\nDESCRIPTION: This PHP snippet shows how to delete a contact user field using the CRest::call method. It requires the 'crest.php' library and specifies the user field to delete using the `id` parameter. It then prints the result of the operation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.contact.userfield.delete',\n        [\n            'id' => 432\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Creating Bank Requisite with cURL Webhook\nDESCRIPTION: Example of adding a bank requisite using cURL with webhook authentication, demonstrating required fields and API endpoint configuration.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"ENTITY_ID\":27,\"COUNTRY_ID\":1,\"NAME\":\"Супербанк\",\"RQ_BANK_NAME\":\"ПАО Супербанк\",\"RQ_BANK_ADDR\":\"117312, г. Москва, улица Вавилова, дом 19\",\"RQ_BIK\":\"044525225\",\"RQ_ACC_NUM\":\"40702810938000060473\",\"RQ_ACC_CURRENCY\":\"RUR\",\"RQ_COR_ACC_NUM\":\"30101810400000000225\",\"XML_ID\":\"1e4641fd-2dd9-31e6-b2f2-105056c00008\",\"ACTIVE\":\"Y\",\"SORT\":600}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.bankdetail.add\n```\n\n----------------------------------------\n\nTITLE: Adding Cashbox Handler with Complex Configuration in Bitrix24\nDESCRIPTION: A comprehensive method to add a new cashbox handler with nested configuration settings, supporting authentication and interaction modes\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/standard-method-info.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.cashbox.handler.add\",\n    {\n        \"CODE\": \"restcashbox01\",\n        \"NAME\": \"REST-касса 01\",\n        \"SORT\": 100,\n        \"SUPPORTS_FFD105\": \"Y\",\n        \"SETTINGS\":\n        {\n            \"PRINT_URL\": \"http://example.com/rest_print.php\",\n            \"CHECK_URL\": \"http://example.com/rest_check.php\",\n            \"HTTP_VERSION\": \"1.1\",\n            \"CONFIG\":\n            {\n                \"AUTH\": {\n                    \"LABEL\": \"Авторизация\",\n                    \"ITEMS\": {\n                        \"KEYWORD\": {\n                            \"TYPE\": \"STRING\",\n                            \"LABEL\": \"Кодовое слово\"\n                        },\n                        \"PREFERENCE\": {\n                            \"TYPE\": \"ENUM\",\n                            \"LABEL\": \"Множественный выбор\",\n                            \"REQUIRED\": \"Y\",\n                            \"OPTIONS\": {\n                                \"FIRST\": \"Первый\",\n                                \"SECOND\": \"Второй\",\n                                \"THIRD\": \"Третий\"\n                            }\n                        }\n                    }\n                },\n                \"INTERACTION\": {\n                    \"LABEL\": \"Настройки взаимодействия с кассой\",\n                    \"ITEMS\": {\n                        \"MODE\": {\n                            \"TYPE\": \"ENUM\",\n                            \"LABEL\": \"Режим работы с кассой\",\n                            \"OPTIONS\": {\n                                \"ACTIVE\": \"боевой\",\n                                \"TEST\": \"тестовый\"\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Cash Register in PHP with CRest\nDESCRIPTION: Demonstrates deleting a cash register using PHP with the CRest library, including method call and result printing\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.cashbox.delete',\n    [\n        'ID' => 1,\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Deleting a property group via JavaScript\nDESCRIPTION: This code snippet demonstrates how to delete a sale property group using JavaScript via the `BX24.callMethod` function. It calls the `sale.propertygroup.delete` method with the `id` of the property group to be deleted as a parameter and handles the result by logging any errors or the returned data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.propertygroup.delete\", {\n        \"id\": 15\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: This JSON snippet shows the structure of an error response. The `error` field contains an error code, and `error_description` contains a description of the error. In this example, \"Access denied\" means the user doesn't have the appropriate administrative rights.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Access denied.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing OnCalendarSectionUpdate Event Payload in JSON\nDESCRIPTION: This code snippet demonstrates the structure of the POST request payload received by the event handler when a calendar section or resource is updated. It includes the event name, handler ID, updated section data, timestamp, and authorization details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/events/on-calendar-section-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCALENDARSECTIONUPDATE\",\n    \"event_handler_id\": \"7\",\n    \"data\": {\n        \"id\": \"202\"\n    },\n    \"ts\": \"1734608543\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"calendar\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Получение свойства заказа с помощью PHP (CRest)\nDESCRIPTION: Вызов REST-метода для получения свойства заказа с использованием библиотеки CRest и вывод результата\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.property.get',\n    [\n        'id' => 22\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Field Types in PHP/Bitrix24\nDESCRIPTION: Method for fetching available custom field types with their ID and title\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/userfield/index.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n(\\n    [ID] => double    \\n    [title] => Число\\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Information with JavaScript in Bitrix24\nDESCRIPTION: JavaScript code example showing how to call the booking.v1.booking.get method to retrieve booking information by ID using the Bitrix24 JavaScript API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-get.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBX24.callMethod(\n    \"booking.v1.booking.get\",\n    {\n        id: 15\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Processing requests from DB queue in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve and process pending requests from a database queue. It selects records with 'pending' status, iterates through them, processes each request, and then updates the status to 'processed'.  This showcases the worker component of the DB-based queue system.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/performance/queue.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n// Выбираем для обработки пакет записей из очереди\n$pendingRequests = $db->query(\"SELECT * FROM requests WHERE status='pending'\");\nforeach ($pendingRequests as $request) {\n    // Обрабатываем запрос\n    processRequest($request);\n    $db->query(\"UPDATE requests SET status='processed' WHERE id=\".$request['id']);\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status Localization Fields with JavaScript BX24 API\nDESCRIPTION: This JavaScript code snippet shows how to retrieve available fields for status localizations using the BX24 JavaScript API. It calls the sale.statuslang.getfields method and handles the response with a callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status-lang/sale-status-lang-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.statuslang.getfields\",\n    {},\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Business Value Person Domain in JavaScript (Bitrix24 API)\nDESCRIPTION: JavaScript example using BX24.callMethod to retrieve business value person domains with error handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/business-value-person-domain/sale-business-value-person-domain-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.businessValuePersonDomain.list',\n    {\n        select: [\"personTypeId\"],\n        filter: {\"=domain\": \"I\"},\n        order: {\"personTypeId\": \"DESC\"}\n    }, \n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Force Common Scope with PHP\nDESCRIPTION: This snippet uses the `CRest::call` function to call the `crm.contact.details.configuration.forceCommonScopeForAll` method in PHP. It requires the `crest.php` library. It prints the result of the API call to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-force-common-scope-for-all.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.details.configuration.forceCommonScopeForAll',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Get Bank Detail via cURL (OAuth)\nDESCRIPTION: This cURL command uses OAuth to retrieve bank detail information by ID.  Replace `put_your_bitrix24_address` and `put_access_token_here` with the appropriate values. The command sends a POST request with a JSON payload containing the bank detail ID and the OAuth access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":357,\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/crm.requisite.bankdetail.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Type with cURL (Webhook) in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve price type information using a cURL request with a webhook in Bash. It sends a POST request to the Bitrix24 REST API endpoint with the price type ID as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/price-type/catalog-price-type-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.priceType.get\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Icon with cURL (Webhook) in Bash\nDESCRIPTION: This code snippet demonstrates how to delete a CRM timeline icon using a webhook with cURL in Bash. It sends a POST request with the icon code as a parameter to the Bitrix24 REST API endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"code\":\"info\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.timeline.icon.delete\n```\n\n----------------------------------------\n\nTITLE: Deleting a Status Item Using JavaScript - Bitrix24\nDESCRIPTION: This JavaScript snippet demonstrates how to delete a custom CRM status item. It prompts the user for the status ID and invokes 'BX24.callMethod' to delete the item, handling errors and logging results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/status/crm-status-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID пользовательского элемента\");\nBX24.callMethod(\n    \"crm.status.delete\",\n    { id: id },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Catalog Product SKU using Bitrix24 REST API in JavaScript\nDESCRIPTION: This snippet demonstrates how to update a catalog product SKU using the Bitrix24 REST API in JavaScript. It includes various product fields such as name, active status, pictures, dimensions, pricing, and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/sku/catalog-product-sku-update.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.sku.update',\n    {\n        id: 1291,\n        fields: {\n            name: 'Головной товар',\n            active: 'Y',\n            canBuyZero: 'Y',\n            code: 'product_sku',\n            createdBy: 1,\n            dateActiveFrom: '2024-05-28T10:00:00',\n            dateActiveTo: '2024-05-29T10:00:00',\n            dateCreate: '2024-05-27T10:00:00',\n            detailPicture: {\n                'fileData':  ['detailPicture.png','iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']},\n            detailText: '',\n            detailTextType: 'text',\n            height: 100,\n            iblockSectionId: 47,\n            length: 100,\n            measure: 5,\n            modifiedBy: 1,\n            previewPicture: {\n                'fileData':['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']},\n            previewText: '',\n            previewTextType: 'text',\n            purchasingCurrency: 'RUB',\n            purchasingPrice: 1000,\n            quantity: 10,\n            sort: 100,\n            subscribe: 'Y',\n            vatId: 1,\n            vatIncluded: 'Y',\n            weight: 100,\n            width: 100,\n            xmlId: '1291',\n            property258: {value: 'test', valueId: 9883},\n            property259: [{value: 'test1', valueId: 9884}, {value: 'test2', valueId: 9885}],\n        },\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Requisite Link using PHP\nDESCRIPTION: This PHP snippet utilizes the CRest wrapper to invoke the 'crm.requisite.link.get' method. It constructs the API call, passing the entityTypeId and entityId as parameters, and then prints the result in a formatted structure.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/links/crm-requisite-link-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.link.get',\n    [\n        'entityTypeId' => 31,\n        'entityId' => 315\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n?>\n```\n\n----------------------------------------\n\nTITLE: Updating Catalog Service Product with PHP in Bitrix24 REST API\nDESCRIPTION: This snippet demonstrates how to update a service product in the Bitrix24 catalog using PHP. It includes setting various product fields such as name, active status, dates, pictures, and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/service/catalog-product-service-update.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.service.update',\n    [\n        'id' => 1265,\n        'fields' => [\n            'name' => 'Услуга',\n            'active' => 'Y',\n            'code' => 'service',\n            'createdBy' => 1,\n            'dateActiveFrom' => '2024-05-28T10:00:00',\n            'dateActiveTo' => '2024-05-29T10:00:00',\n            'dateCreate' => '2024-05-27T10:00:00',\n            'detailPicture' => [\n                'fileData' => ['detailPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            ],\n            'detailText' => '',\n            'detailTextType' => 'text',\n            'iblockSectionId' => 47,\n            'modifiedBy' => 1,\n            'previewPicture' => [\n                'fileData' => ['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            ],\n            'previewText' => '',\n            'previewTextType' => 'text',\n            'sort' => 100,\n            'vatId' => 1,\n            'vatIncluded' => 'Y',\n            'xmlId' => '216',\n            'property258' => ['value' => 'test', 'valueId' => 9809],\n            'property259' => [\n                ['value' => 'test1', 'valueId' => 9810],\n                ['value' => 'test2', 'valueId' => 9811]\n            ],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Defining Shipment Core Properties\nDESCRIPTION: Describes the fundamental properties of a shipment in the Bitrix24 REST API, including unique identifiers, delivery service information, pricing, and associated metadata\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/webhooks/_includes/tables.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### SHIPMENT\n\n#|\n|| **Название**\n`тип` | **Описание** ||\n```\n\n----------------------------------------\n\nTITLE: Deleting a Task Checklist Item using Bitrix24 REST API in JavaScript\nDESCRIPTION: This code example demonstrates how to delete a checklist item from a task using the task.checklistitem.delete method. It requires two parameters: the task ID and the checklist item ID. The method returns the operation result in the callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/checklist-item/task-checklist-item-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'task.checklistitem.delete',\n    [13, 20],\n    function(result){\n        console.info(result.data());\n        console.log(result);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Shipment Property Value with JavaScript\nDESCRIPTION: This snippet shows how to retrieve a shipment property value using JavaScript with the `BX24.callMethod` function. It passes the shipment property value ID as a parameter to the `sale.shipmentpropertyvalue.get` method.  The success and error cases are handled within the callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.shipmentpropertyvalue.get\", {\n        \"id\": 38164\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Client List with JavaScript in Bitrix24 REST API\nDESCRIPTION: JavaScript example showing how to call the booking.v1.booking.client.list method in Bitrix24 REST API. The method requires a bookingId parameter and returns a list of clients associated with the specified booking.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/client/booking-v1-booking-client-list.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBX24.callMethod(\n    \"booking.v1.booking.client.list\",\n    {\n        bookingId: 123,\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet shows an example of an error response.  The `error` field contains an error code, and the `error_description` provides a human-readable description of the error. In this case, the payment item does not exist.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":201240400001,\n    \"error_description\":\"payment item is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Error JSON Response\nDESCRIPTION: This is an example of the JSON response returned by the `sale.propertyvariant.update` method when an error occurs. In this case, the error indicates that the required field `name` is missing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"Required fields: name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bitrix24 CRM Payment Delivery Addition - cURL OAuth\nDESCRIPTION: Demonstrates adding a delivery position to a payment using cURL with OAuth authentication. Includes access token in the request payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/delivery-in-payment/crm-item-payment-delivery-add.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"paymentId\":1039,\"deliveryId\":4072,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.payment.delivery.add\n```\n\n----------------------------------------\n\nTITLE: Data received by TASK_VIEW_TOP_PANEL handler in PHP\nDESCRIPTION: This PHP code snippet demonstrates the data structure received by the handler when the TASK_VIEW_TOP_PANEL placement is used. It includes parameters like DOMAIN, PROTOCOL, LANG, APP_SID, AUTH_ID, REFRESH_ID, member_id, status, PLACEMENT, and PLACEMENT_OPTIONS. The PLACEMENT_OPTIONS contains TASK_ID, which can be used to retrieve more task details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/task/view-top-panel.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n```php\n\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => dac3aa71afd1a1fd8bef05a282dd0b20\n    [AUTH_ID] => 3153ba6600705a0700005a4b00000001f0f107fd2c2625abb62bad95fe9b37a0d1fbb6\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => 21d2e16600705a0700005a4b00000001f0f10707ca46d62b79fcd8d19a8c614e621226\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => TASK_VIEW_TOP_PANEL\n    [PLACEMENT_OPTIONS] => {\"TASK_ID\":\"286\"}\n)\n\n```\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Item via cURL (OAuth)\nDESCRIPTION: This cURL command shows how to fetch a shipment item using OAuth authentication with Bitrix24. The request includes the item's ID and the access token in the JSON payload. Replace the placeholder values with your Bitrix24 address and your OAuth access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-get.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n\"-X POST \\\n-H \\\"Content-Type: application/json\\\" \\\n-H \\\"Accept: application/json\\\" \\\n-d '{\\\"id\\\":7,\\\"auth\\\":\\\"**put_access_token_here**\\\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipmentitem.get\"\n```\n\n----------------------------------------\n\nTITLE: Handling CATALOG.PRICE.ON.ADD Event in Bitrix24 REST API\nDESCRIPTION: This snippet shows the structure of the POST request data sent to the event handler when a new price is added to the catalog. It includes the event name, handler ID, price data, timestamp, and authorization details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-price-on-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    'event' => 'CATALOG.PRICE.ON.ADD',    \n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 1,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'catalog',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Handling onCrmTimelineCommentDelete Event in PHP\nDESCRIPTION: This code snippet shows the structure of the POST data sent to a handler when a comment is deleted from the CRM timeline. It includes the event identifier, the ID of the deleted comment, timestamp, and authorization details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/events/on-Crm-Timeline-Comment-Delete.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray(\n    'event' => 'onCrmTimelineCommentDelete',\n    'data' => array(\n        'ID' => 999,\n    ),\n    'ts' => '1466439714',\n    'auth' => array(\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure in JSON Format for OnTaskAdd Event\nDESCRIPTION: This JSON represents the structure of data that is sent to the event handler when a task is added in Bitrix24. It includes event type, task data fields, timestamp, and authorization details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\narray(\n    'event' => 'ONTASKADD',\n    'data' => array(\n        'FIELDS_BEFORE' => 'undefined',\n        'FIELDS_AFTER' => array('ID' => 123),\n        'IS_ACCESSIBLE_BEFORE' => 'N',\n        'IS_ACCESSIBLE_AFTER' => 'undefined',\n    ),\n    'ts' => '1466439714',\n    'auth' => array(\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n        ),\n)\n```\n\n----------------------------------------\n\nTITLE: Error Response (JSON)\nDESCRIPTION: This JSON snippet represents a sample error response for the `sale.basketitem.list` method. It includes an `error` code and an `error_description` providing information about the error that occurred.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Preset Field via cURL (OAuth)\nDESCRIPTION: This cURL command retrieves a custom field of a requisite template using OAuth. It sends a POST request with the field ID, preset ID, and access token in JSON format to the specified Bitrix24 address. Ensure to replace placeholders for the Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":1,\"preset\":{\"ID\":27},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.preset.field.get\n```\n\n----------------------------------------\n\nTITLE: Calling placement.call with disableAutoClose in JavaScript\nDESCRIPTION: This JavaScript snippet uses the `BX24.placement.call` method to call the `disableAutoClose` placement. It passes an empty object as the parameters and defines a callback function that logs the result to the console. This requires the Bitrix24 JavaScript library to be loaded.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/disable-auto-close.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.call('disableAutoClose', {}, function (result) {\n    console.log(result);\n});\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact from Lead using PHP\nDESCRIPTION: This PHP script uses the `CRest::call` function to delete the link between a contact and a lead.  It utilizes the `crest.php` library for interacting with the Bitrix24 REST API. The result of the API call is printed to the console for inspection.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/management-communication/crm-lead-contact-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.lead.contact.delete',\n        [\n            'id' => 1,\n            'fields' =>\n            [\n                'CONTACT_ID' => 1010,\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Deleting a Status Item via HTTP Request - Bitrix24 REST API\nDESCRIPTION: This HTTP method call deletes a CRM status item based on its ID, with parameters to enforce deletion on system items. The 'id' parameter is mandatory, while 'params' controls forced deletion of system elements.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/status/crm-status-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncrm.status.delete(id, params)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Properties in PHP\nDESCRIPTION: Example of calling the sale.shipmentproperty.list method using PHP with CRest library, with detailed field selection and filtering\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipmentproperty.list',\n    [\n        'select' => [\n            \"id\",\n            \"active\",\n            \"code\",\n            \"defaultValue\",\n            \"description\",\n            \"inputFieldLocation\",\n            \"isAddress\",\n            \"isAddressFrom\",\n            \"isAddressTo\",\n            \"isEmail\",\n            \"isFiltered\",\n            \"isLocation\",\n            \"isLocation4tax\",\n            \"isPayer\",\n            \"isPhone\",\n            \"isProfileName\",\n            \"isZip\",\n            \"multiple\",\n            \"name\",\n            \"personTypeId\",\n            \"propsGroupId\",\n            \"required\",\n            \"settings\",\n            \"sort\",\n            \"type\",\n            \"userProps\",\n            \"util\",\n            \"xmlId\",\n        ],\n        'filter' => [\n            \"@type\" => \"STRING\",\n            \"%code\" => \"EMAIL\",\n        ],\n        'order' => [\n            \"id\" => \"desc\",\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Fields in PHP with CRest\nDESCRIPTION: A PHP implementation to fetch shipment fields using the CRest library with result output\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipment.getfields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Calling tasks.task.counters.get Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the tasks.task.counters.get method using the BX24 JavaScript SDK. It retrieves task counters for a specific user, group, and counter type.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/tasks-task-counters-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod('tasks.task.counters.get', {userId:1, groupId:0, type:'view_all'}, (res)=>{console.log(res.answer.result);});\n```\n\n----------------------------------------\n\nTITLE: Retrieving Business Value Person Domain in PHP\nDESCRIPTION: PHP example using CRest library to retrieve business value person domains with select, filter, and order parameters\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/business-value-person-domain/sale-business-value-person-domain-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.businessValuePersonDomain.list',\n    [\n        'select' => ['personTypeId'],\n        'filter' => ['=domain' => 'I'],\n        'order' => ['personTypeId' => 'DESC']\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Deleting Calendar Event Using cURL OAuth in Bash\nDESCRIPTION: This snippet shows how to delete a calendar event using a cURL command with OAuth authentication. It sends a POST request to the Bitrix24 REST API endpoint with an access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.details.configuration.forceCommonScopeForAll\n```\n\n----------------------------------------\n\nTITLE: Data structure for the onCrmQuoteAdd event\nDESCRIPTION: This JSON snippet shows the data structure that is POSTed to the event handler when a new commercial quote is added. It includes the event name, handler ID, data related to the quote (specifically the FIELDS object containing the ID), a timestamp, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/quote/events/on-crm-quote-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMQUOTEADD\",\n    \"event_handler_id\": \"747\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"71\"\n        }\n    },\n    \"ts\": \"1743678788\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Получение списка подразделений через cURL (Webhook)\nDESCRIPTION: Пример запроса к методу department.get с использованием cURL и вебхука. Запрос отправляется методом POST с параметрами сортировки и фильтрации по родительскому подразделению.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/departments/department-get.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n    \"sort\": \"NAME\",\n    \"order\": \"DESC\",\n    \"PARENT\": 1\n}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/department.get\n```\n\n----------------------------------------\n\nTITLE: Adding Cashbox Handler with PHP\nDESCRIPTION: This PHP snippet demonstrates how to add a cashbox handler to Bitrix24 using the `CRest::call` method. It requires the `crest.php` library.  The code defines the parameters for the `sale.cashbox.handler.add` method, including handler properties, settings, and configuration options, and then prints the result of the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-handler-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.cashbox.handler.add',\n        [\n            'CODE' => 'restcashbox01',\n            'NAME' => 'REST-касса 01',\n            'SORT' => 100,\n            'SUPPORTS_FFD105' => 'Y',\n            'SETTINGS' =>\n            [\n                'PRINT_URL' => 'http://example.com/rest_print.php',\n                'CHECK_URL' => 'http://example.com/rest_check.php',\n                'HTTP_VERSION' => '1.1',\n                'CONFIG' =>\n                [\n                    'AUTH' =>\n                    [\n                        'LABEL' => 'Авторизация',\n                        'ITEMS' =>\n                        [\n                            'KEYWORD' =>\n                            [\n                                'TYPE' => 'STRING',\n                                'LABEL' => 'Кодовое слово'\n                            ],\n                            'PREFERENCE' =>\n                            [\n                                'TYPE' => 'ENUM',\n                                'LABEL' => 'Множественный выбор',\n                                'REQUIRED' => 'Y',\n                                'OPTIONS' =>\n                                [\n                                    'FIRST' => 'Первый',\n                                    'SECOND' => 'Второй',\n                                    'THIRD' => 'Третий',\n                                ]\n                            ]\n                        ]\n                    ],\n                    'INTERACTION' =>\n                    [\n                        'LABEL' => 'Настройки взаимодействия с кассой',\n                        'ITEMS' =>\n                        [\n                            'MODE' =>\n                            [\n                                'TYPE' => 'ENUM',\n                                'LABEL' => 'Режим работы с кассой',\n                                'OPTIONS' =>\n                                [\n                                    'ACTIVE' => 'боевой',\n                                    'TEST' => 'тестовый'\n                                ]\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating Contact User Field via cURL (Webhook)\nDESCRIPTION: This snippet shows how to update a contact user field using a cURL request with a webhook. It includes setting various field properties such as mandatory, filter, settings, sort, and labels. The request is sent to the Bitrix24 REST API endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":536,\"fields\":{\"MANDATORY\":\"N\",\"SHOW_FILTER\":\"N\",\"SETTINGS\":{\"DEFAULT_VALUE\":\"Привет, мир! Значение по умолчанию (изменено)\",\"ROWS\":10},\"SORT\":2000,\"EDIT_IN_LIST\":\"N\",\"LIST_FILTER_LABEL\":\"Привет, мир! Фильтр (изменено)\",\"LIST_COLUMN_LABEL\":{\"en\":\"Hello, World! Column (changed)\",\"ru\":\"Привет, мир! Колонка (изменено)\",\"de\":\"Hallo, Welt! Spalte (geändert)\"},\"EDIT_FORM_LABEL\":{\"en\":\"Hello, World! Edit (changed)\",\"ru\":\"Привет, мир! Редактировать (изменено)\",\"de\":\"Hallo, Welt! Bearbeiten (geändert)\"},\"ERROR_MESSAGE\":{\"en\":\"Hello, World! Error (changed)\",\"ru\":\"Привет, мир! Ошибка (изменено)\",\"de\":\"Hallo, Welt! Fehler (geändert)\"},\"HELP_MESSAGE\":{\"en\":\"Hello, World! Help (changed)\",\"ru\":\"Привет, мир! Помощь (изменено)\",\"de\":\"Hallo, Welt! Hilfe (geändert)\"}}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.userfield.update\n```\n\n----------------------------------------\n\nTITLE: Deleting Catalog Section using JavaScript in Bitrix24 REST API\nDESCRIPTION: This snippet demonstrates how to delete a catalog section using JavaScript in the Bitrix24 REST API. It uses the BX24.callMethod function to send the request and handle the response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/section/catalog-section-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.section.delete', \n    { \n        id: 31 \n     }, \n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON structure represents a successful response from the `sale.delivery.handler.list` method. It includes an array of delivery handler objects with details such as ID, name, code, settings, and profiles.  It also contains timing information about the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"result\":[\n      {\n         \"ID\":\"14\",\n         \"NAME\":\"Uber\",\n         \"CODE\":\"uber\",\n         \"SORT\":\"250\",\n         \"DESCRIPTION\":\"Uber Description\",\n         \"SETTINGS\":{\n            \"CALCULATE_URL\":\"http:\\/\\/gateway.bx\\/calculate.php\",\n            \"CREATE_DELIVERY_REQUEST_URL\":\"http:\\/\\/gateway.bx\\/create_delivery_request.php\",\n            \"CANCEL_DELIVERY_REQUEST_URL\":\"http:\\/\\/gateway.bx\\/cancel_delivery_request.php\",\n            \"HAS_CALLBACK_TRACKING_SUPPORT\":\"Y\",\n            \"CONFIG\":[\n               {\n                  \"TYPE\":\"STRING\",\n                  \"NAME\":\"String Example\",\n                  \"CODE\":\"SETTING_1\"\n               },\n               {\n                  \"TYPE\":\"Y\\/N\",\n                  \"NAME\":\"Checkbox Example\",\n                  \"CODE\":\"SETTING_2\"\n               },\n               {\n                  \"TYPE\":\"NUMBER\",\n                  \"NAME\":\"Number Example\",\n                  \"CODE\":\"SETTING_3\"\n               },\n               {\n                  \"TYPE\":\"ENUM\",\n                  \"NAME\":\"Enum Example\",\n                  \"OPTIONS\":{\n                     \"Option1Code\":\"Option1Value\",\n                     \"Option2Code\":\"Option2Value\",\n                     \"Option3Code\":\"Option3Value\",\n                     \"Option4Code\":\"Option4Value\",\n                     \"Option5Code\":\"Option5Value\"\n                  },\n                  \"CODE\":\"SETTING_4\"\n               },\n               {\n                  \"TYPE\":\"DATE\",\n                  \"NAME\":\"Date Example\",\n                  \"CODE\":\"SETTING_5\"\n               },\n               {\n                  \"TYPE\":\"LOCATION\",\n                  \"NAME\":\"Location Example\",\n                  \"CODE\":\"SETTING_6\"\n               }\n            ]\n         },\n         \"PROFILES\":[\n            {\n               \"NAME\":\"Taxi\",\n               \"DESCRIPTION\":\"Taxi Delivery\",\n               \"CODE\":\"TAXI\"\n            },\n            {\n               \"NAME\":\"Cargo\",\n               \"DESCRIPTION\":\"Cargo Delivery\",\n               \"CODE\":\"CARGO\"\n            }\n         ]\n      }\n   ],\n   \"time\":{\n      \"start\":1713872315.334967,\n      \"finish\":1713872315.655173,\n      \"duration\":0.3202061653137207,\n      \"processing\":0.013887882232666016,\n      \"date_start\":\"2024-04-23T14:38:35+03:00\",\n      \"date_finish\":\"2024-04-23T14:38:35+03:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Offline Events using JavaScript in Bitrix24 REST API\nDESCRIPTION: This JavaScript code snippet uses the BX24.callMethod function to call the event.offline.get method. It includes filter parameters and a callback function to handle the response or error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/events/event-offline-get.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"event.offline.get\",\n    {\n        \"filter\": {\n            \"=MESSAGE_ID\": 1,\n            \"=EVENT_NAME\": \"ONCRMLEADADD\",\n            \">=ID\": 1\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Contact User Field via PHP (B24PhpSdk)\nDESCRIPTION: This snippet demonstrates updating a contact user field using the `B24PhpSdk`. It uses the `update` method of the `contactUserfield` service. The snippet sets example field values and handles potential exceptions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-update.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $contactUserfieldItemId = 123; // Example ID\n    $userfieldFieldsToUpdate = [\n        'FIELD_NAME' => 'New Field Name',\n        'USER_TYPE_ID' => 'string',\n        'SORT' => '100',\n        'MULTIPLE' => 'N',\n        'MANDATORY' => 'N',\n        'SHOW_FILTER' => 'Y',\n        'SHOW_IN_LIST' => 'Y',\n        'EDIT_IN_LIST' => 'Y',\n        'IS_SEARCHABLE' => 'Y',\n        'EDIT_FORM_LABEL' => 'New Label',\n        'LIST_COLUMN_LABEL' => 'Column Label',\n        'LIST_FILTER_LABEL' => 'Filter Label',\n        'ERROR_MESSAGE' => 'Error Message',\n        'HELP_MESSAGE' => 'Help Message',\n        'LIST' => '',\n        'SETTINGS' => '',\n    ];\n\n    $result = $serviceBuilder\n        ->getCRMScope()\n        ->contactUserfield()\n        ->update($contactUserfieldItemId, $userfieldFieldsToUpdate);\n\n    if ($result->isSuccess()) {\n        print($result->getCoreResponse()->getResponseData()->getResult()[0]);\n    } else {\n        print(\"Update failed.\");\n    }\n} catch (Throwable $e) {\n    print(\"Error: \" . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Status with JavaScript\nDESCRIPTION: This JavaScript code uses the BX24.callMethod function to delete a sale status. It takes the status ID as a parameter and handles the success or error response using callbacks. The result.error() and result.data() methods are used to process the response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.status.delete\", {\n        \"id\": \"MS\"\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Error Response\nDESCRIPTION: This JSON snippet represents an error response from the `crm.requisite.list` method, indicating an access denied error. It includes the error code and a description of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": 0,\n    \"error_description\": \"Access denied.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: Example of an error response (HTTP 400) from the `sale.property.getfieldsbytype` method.  The `error_description` provides more context about the reason for the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get-fields-by-type.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":0,\n   \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Network Ranges with PHP in Bitrix24\nDESCRIPTION: This snippet shows how to use the CRest::call function in PHP to set network address ranges for the office network in Bitrix24. It includes the required 'crest.php' file and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/timeman/networkrange/timeman-networkrange-set.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'timeman.networkrange.set',\n    [\n        'ranges' => [\n            [\n                'ip_range' => '10.0.0.0-10.255.255.255',\n                'name' => 'Офисная сеть 10.x.x.x'\n            ],\n            [\n                'ip_range' => '172.16.0.0-172.31.255.255',\n                'name' => 'Офисная сеть 172.x.x.x'\n            ],\n            [\n                'ip_range' => '192.168.0.0-192.168.255.255',\n                'name' => 'Офисная сеть 192.168.x.x'\n            ]\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Removing Task Dependency using cURL OAuth in Bitrix24\nDESCRIPTION: This snippet shows how to remove a task dependency using a cURL request with OAuth authentication in Bitrix24. It requires the Bitrix24 address and an access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/task-dependence-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"taskIdFrom\":100,\"taskIdTo\":101,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/task.dependence.delete\n```\n\n----------------------------------------\n\nTITLE: Successful Response Handling for Cashbox Handler Creation\nDESCRIPTION: Example of a successful response from the API method, including execution time metadata and result identifier\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/standard-method-info.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": 5,\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Handlers with cURL (OAuth)\nDESCRIPTION: This cURL command retrieves delivery service handlers using OAuth authentication. It sends a POST request with SELECT, FILTER, ORDER, and auth parameters in JSON format. The request requires replacing placeholders with the correct Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"SELECT\":[\"ID\",\"PARENT_ID\",\"NAME\",\"ACTIVE\",\"DESCRIPTION\",\"SORT\",\"LOGOTIP\",\"CURRENCY\"],\"FILTER\":{\"@ID\":[196,197,198]},\"ORDER\":{\"SORT\":\"ASC\",\"ID\":\"DESC\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.delivery.getlist\n```\n\n----------------------------------------\n\nTITLE: Handling API Responses for sale.propertyvalue.list\nDESCRIPTION: This JSON snippet represents the expected response format when successfully retrieving property values from the sale.propertyvalue.list API. It includes the result, total count, and time taken for the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-value/sale-property-value-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"propertyValues\":[\n            {\n                \"code\":\"FIO\",\n                \"id\":10774,\n                \"name\":\"Имя Фамилия\",\n                \"orderId\":1650,\n                \"orderPropsId\":20,\n                \"orderPropsXmlId\":null,\n                \"value\":\"Соколов Борис Викторович\"\n            },\n            {\n                \"code\":\"FIO\",\n                \"id\":10763,\n                \"name\":\"Имя Фамилия\",\n                \"orderId\":1649,\n                \"orderPropsId\":20,\n                \"orderPropsXmlId\":null,\n                \"value\":\"Соколов Борис Викторович\"\n            },\n            {\n                \"code\":\"FIO\",\n                \"id\":10723,\n                \"name\":\"Имя Фамилия\",\n                \"orderId\":1641,\n                \"orderPropsId\":20,\n                \"orderPropsXmlId\":null,\n                \"value\":\"Соколов Борис Викторович\"\n            },\n            {\n                \"code\":\"FIO\",\n                \"id\":10718,\n                \"name\":\"Имя Фамилия\",\n                \"orderId\":1640,\n                \"orderPropsId\":20,\n                \"orderPropsXmlId\":null,\n                \"value\":\"Соколов Борис Викторович\"\n            },\n            {\n                \"code\":\"FIO\",\n                \"id\":10713,\n                \"name\":\"Имя Фамилия\",\n                \"orderId\":1639,\n                \"orderPropsId\":20,\n                \"orderPropsXmlId\":null,\n                \"value\":\"Соколов Борис Викторович\"\n            },\n            {\n                \"code\":\"FIO\",\n                \"id\":10708,\n                \"name\":\"Имя Фамилия\",\n                \"orderId\":1638,\n                \"orderPropsId\":20,\n                \"orderPropsXmlId\":null,\n                \"value\":\"Соколов Борис Викторович\"\n            },\n            {\n                \"code\":\"FIO\",\n                \"id\":10687,\n                \"name\":\"Имя Фамилия\",\n                \"orderId\":1634,\n                \"orderPropsId\":20,\n                \"orderPropsXmlId\":null,\n                \"value\":\"Соколов Борис Викторович\"\n            },\n            {\n                \"code\":\"FIO\",\n                \"id\":10517,\n                \"name\":\"Имя Фамилия\",\n                \"orderId\":1603,\n                \"orderPropsId\":20,\n                \"orderPropsXmlId\":null,\n                \"value\":\"Соколов Борис Викторович\"\n            }\n        ]\n    },\n    \"total\":8,\n    \"time\":{\n        \"start\":1712061753.171393,\n        \"finish\":1712061753.431631,\n        \"duration\":0.2602381706237793,\n        \"processing\":0.021820783615112305,\n        \"date_start\":\"2024-04-02T15:42:33+03:00\",\n        \"date_finish\":\"2024-04-02T15:42:33+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Logo using cURL with Webhook\nDESCRIPTION: This snippet shows how to delete a timeline logo using cURL with a Webhook. The code parameter specifies which logo to delete.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"code\":\"info\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.timeline.logo.delete\n```\n\n----------------------------------------\n\nTITLE: Manage URL Input for CRM Fields in PHP\nDESCRIPTION: This snippet generates HTML text input fields designated for URL data types within CRM forms. The CPrintForm utility function facilitates the creation of these input elements, contributing to a standard layout for URL entries.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'url':\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'text',\n        ]\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Comment via JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to delete a CRM timeline comment. It passes the comment's ID, owner type ID, and owner ID as parameters and handles the result through a callback function, logging errors or displaying the result data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"crm.timeline.comment.delete\",\n        {\n            id: 999,\n            ownerTypeId: 2,\n            ownerId: 10,\n        },\n        result => {\n            if (result.error())\n                console.error(result.error());\n            else\n                console.dir(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Sample response for successful disk.folder.getfields API call\nDESCRIPTION: This JSON snippet shows the expected response structure for a successful call to the disk.folder.getfields method. It includes field descriptions with their types and usage flags for filtering and display.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/folder/disk-folder-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"result\": {\n    \"ID\": {\n        \"TYPE\": \"integer\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"NAME\": {\n        \"TYPE\": \"string\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"TYPE\": {\n        \"TYPE\": \"enum\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"CODE\": {\n        \"TYPE\": \"string\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"STORAGE_ID\": {\n        \"TYPE\": \"integer\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"REAL_OBJECT_ID\": {\n        \"TYPE\": \"integer\",\n        \"USE_IN_FILTER\": false,\n        \"USE_IN_SHOW\": true\n    },\n    \"PARENT_ID\": {\n        \"TYPE\": \"integer\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"CREATE_TIME\": {\n        \"TYPE\": \"datetime\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"UPDATE_TIME\": {\n        \"TYPE\": \"datetime\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"DELETE_TIME\": {\n        \"TYPE\": \"datetime\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    },\n    \"CREATED_BY\": {\n        \"TYPE\": \"integer\",\n        \"USE_IN_FILTER\": false,\n        \"USE_IN_SHOW\": true\n    },\n    \"UPDATED_BY\": {\n        \"TYPE\": \"integer\",\n        \"USE_IN_FILTER\": false,\n        \"USE_IN_SHOW\": true\n    },\n    \"DELETED_BY\": {\n        \"TYPE\": \"integer\",\n        \"USE_IN_FILTER\": false,\n        \"USE_IN_SHOW\": true\n    },\n    \"DELETED_TYPE\": {\n        \"TYPE\": \"enum\",\n        \"USE_IN_FILTER\": true,\n        \"USE_IN_SHOW\": true\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Social Network Group Using JavaScript in Bitrix24 REST API\nDESCRIPTION: This JavaScript snippet demonstrates how to call the sonet_group.delete method to delete a social network group with ID 11. The method requires the GROUP_ID parameter and returns true on successful deletion.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/sonet-group-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n// Удаляем группы соцсети с ID=11\n\nBX24.callMethod('sonet_group.delete', {\n    'GROUP_ID': 11\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Shipment Item - PHP REST Call\nDESCRIPTION: PHP implementation of updating a shipment item using CRest library with specified item ID and fields\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipmentitem.update',\n    [\n        'id' => 7,\n        'fields' => [\n            'quantity' => 5,\n            'xmlId' => 'myNewXmlId',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Calling disk.storage.getfields Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the disk.storage.getfields method using the Bitrix24 JavaScript SDK. It includes error handling and logging of the response data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/storage/disk-storage-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.storage.getfields\",\n    {},\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Reset Personal Configuration using JavaScript\nDESCRIPTION: This snippet demonstrates how to reset the personal configuration for contact details using the `BX24.callMethod` function in JavaScript within Bitrix24. It calls the `crm.contact.details.configuration.reset` method with the `scope` parameter set to \"P\", a specific `userId` and handles the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.details.configuration.reset',\n    {\n        scope: \"P\",\n        userId: 6,\n    },\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Client List with PHP in Bitrix24 REST API\nDESCRIPTION: PHP example demonstrating how to call the booking.v1.booking.client.list method using the CRest library in Bitrix24 REST API. The method requires a bookingId parameter and the response is displayed using print_r.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/client/booking-v1-booking-client-list.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'booking.v1.booking.client.list',\n    [\n        'bookingId' => 123\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Удаление отгрузки через JavaScript\nDESCRIPTION: Пример использования JavaScript для удаления отгрузки через метод BX24.callMethod. Необходимо передать ID отгрузки в параметрах и обработать возможные ошибки.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"sale.shipment.delete\", {\n            \"id\": 2461\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Recording Business Process Logs Using B24PhpSdk in Bitrix24\nDESCRIPTION: This PHP example uses the B24PhpSdk library to call the bizproc.activity.log method. It demonstrates error handling and uses a service builder approach to access the business process API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-activity/bizproc-activity-log.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $eventToken = 'your_event_token'; // Replace with actual event token\n    $message = 'Your log message'; // Replace with actual message\n\n    $result = $serviceBuilder\n        ->getBizProcScope()\n        ->activity()\n        ->log($eventToken, $message);\n\n    if ($result->isSuccess()) {\n        print($result->getCoreResponse()->getResponseData()->getResult()[0]);\n    } else {\n        print('Log entry failed.');\n    }\n} catch (Throwable $e) {\n    print('Error: ' . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Currency Fields in JavaScript\nDESCRIPTION: This JavaScript snippet uses the BX24.callMethod function to retrieve CRM currency fields.  It defines success and error callbacks to handle the API response.  The success callback logs the data to the console, while the error callback logs any errors.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.currency.fields\",\n    {},\n)\n.then(\n    function(result)\n    {\n        if (result.error())\n        {\n            console.error(result.error());\n        }\n        else\n        {\n            console.log(result.data());\n        }\n    },\n    function(error)\n    {\n        console.info(error);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating CRM Deal User Field with Bitrix24 REST API in JS\nDESCRIPTION: This JavaScript code snippet demonstrates how to update an existing deal user field using the `crm.deal.userfield.update` method. It prompts the user for the ID of the field to update and a new label. The `BX24.callMethod` function is used to make the API call, and the result is handled in the callback function, logging errors to the console or displaying the data if successful.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/user-defined-fields/crm-deal-userfield-update.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nvar id = prompt(\"Введите ID\");\n    var label = prompt(\"Введите новое название\");\n    BX24.callMethod(\n        \"crm.deal.userfield.update\",\n        {\n            id: id,\n            fields:\n            {\n                \"EDIT_FORM_LABEL\": label,\n                \"LIST_COLUMN_LABEL\": label\n            }\n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n            {\n                console.dir(result.data());             \n                if(result.more())\n                    result.next();                        \n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Deleting a custom field from a preset using cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to delete a custom field from a preset using the Webhook authentication method. It sends a POST request to the Bitrix24 REST API endpoint with the ID of the field and the preset.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":27,\"preset\":{\"ID\":1}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.preset.field.delete\n```\n\n----------------------------------------\n\nTITLE: Add Delivery Handler with Javascript\nDESCRIPTION: This snippet shows how to add a delivery handler to Bitrix24 using Javascript. It uses the `BX24.callMethod` function to call the `sale.delivery.handler.add` method, passing in an object containing the delivery handler's details.  The code also includes a callback function to handle the result, logging any errors or the returned data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'sale.delivery.handler.add', {\n            CODE: \"uber\",\n            NAME: \"Uber\",\n            DESCRIPTION: \"Uber Description\",\n            SORT: 250,\n            SETTINGS: {\n                CALCULATE_URL: \"http://gateway.bx/calculate.php\",\n                CREATE_DELIVERY_REQUEST_URL: \"http://gateway.bx/create_delivery_request.php\",\n                CANCEL_DELIVERY_REQUEST_URL: \"http://gateway.bx/cancel_delivery_request.php\",\n                HAS_CALLBACK_TRACKING_SUPPORT: \"Y\",\n                CONFIG: [{\n                        TYPE: \"STRING\",\n                        CODE: \"SETTING_1\",\n                        NAME: \"String Example\",\n                    },\n                    {\n                        TYPE: \"Y/N\",\n                        CODE: \"SETTING_2\",\n                        NAME: \"Checkbox Example\",\n                    },\n                    {\n                        TYPE: \"NUMBER\",\n                        CODE: \"SETTING_3\",\n                        NAME: \"Number Example\",\n                    },\n                    {\n                        TYPE: \"ENUM\",\n                        CODE: \"SETTING_4\",\n                        NAME: \"Enum Example\",\n                        OPTIONS: {\n                            \"Option1Code\": \"Option1Value\",\n                            \"Option2Code\": \"Option2Value\",\n                            \"Option3Code\": \"Option3Value\",\n                            \"Option4Code\": \"Option4Value\",\n                            \"Option5Code\": \"Option5Value\",\n                        },\n                    },\n                    {\n                        TYPE: \"DATE\",\n                        CODE: \"SETTING_5\",\n                        NAME: \"Date Example\",\n                    },\n                    {\n                        TYPE: \"LOCATION\",\n                        CODE: \"SETTING_6\",\n                        NAME: \"Location Example\",\n                    },\n                ],\n            },\n            PROFILES: [{\n                    NAME: \"Taxi\",\n                    CODE: \"TAXI\",\n                    DESCRIPTION: \"Taxi Delivery\",\n                },\n                {\n                    NAME: \"Cargo\",\n                    CODE: \"CARGO\",\n                    DESCRIPTION: \"Cargo Delivery\",\n                },\n            ],\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: PHP CRest Method for Setting Contact Company Associations\nDESCRIPTION: Demonstrates setting company associations for a contact using the CRest library in PHP, with result printing and basic error handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-items-set.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.company.items.set',\n    [\n        'id' => 82,\n        'items' => [\n            [\n                'COMPANY_ID' => 8,\n                'IS_PRIMARY' => 'Y',\n                'SORT' => 100,\n            ],\n            [\n                'COMPANY_ID' => 9,\n                'SORT' => 200,\n            ],\n            [\n                'COMPANY_ID' => 10,\n                'SORT' => 400,\n            ]\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Bitrix24 CRM Payment Delivery Addition - cURL Webhook\nDESCRIPTION: Demonstrates adding a delivery position to a payment using cURL with Webhook authentication. Requires paymentId and deliveryId as JSON payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/delivery-in-payment/crm-item-payment-delivery-add.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"paymentId\":1039,\"deliveryId\":4072}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.item.payment.delivery.add\n```\n\n----------------------------------------\n\nTITLE: Making Internal Calls with BX24.im.callTo Method in JavaScript\nDESCRIPTION: This method initiates an internal call to another user in Bitrix24. It takes a user ID parameter to identify the call recipient and an optional video parameter that determines whether to make a video call (true) or an audio-only call (false).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/additional-functions/bx24-im-call-to.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvoid BX24.im.callTo(userId[, video=true])\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This is an example of an error response from the `sale.propertyvariant.delete` method. It indicates that the property variant does not exist.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":201540400001,\n    \"error_description\":\"property variant is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Property Variant with cURL (Webhook)\nDESCRIPTION: This cURL example demonstrates how to delete a property variant using a webhook in Bitrix24. It sends a POST request with the variant's ID in JSON format to the specified webhook URL.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":5}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.propertyvariant.delete\n```\n\n----------------------------------------\n\nTITLE: Deleting Catalog Section using cURL (OAuth) in Bitrix24 REST API\nDESCRIPTION: This snippet shows how to delete a catalog section using cURL with OAuth authentication in the Bitrix24 REST API. It sends a POST request with the section ID and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/section/catalog-section-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\": 31, \"auth\": \"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.section.delete\n```\n\n----------------------------------------\n\nTITLE: Bitrix24 CRM Payment Delivery Addition - PHP\nDESCRIPTION: Demonstrates adding a delivery position to a payment using PHP with the CRest library, including basic error handling and result printing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/delivery-in-payment/crm-item-payment-delivery-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.payment.delivery.add',\n    [\n        'paymentId' => 1039,\n        'deliveryId' => 4072\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful Catalog Product Update Response\nDESCRIPTION: This JSON snippet demonstrates the structure of a successful response after updating a product in Bitrix24's catalog via the REST API. It includes details such as product ID, active status, availability, name, description, properties, pricing, quantity, and timestamps.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/catalog-product-update.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"element\": {\n            \"active\": \"Y\",\n            \"available\": \"Y\",\n            \"bundle\": \"N\",\n            \"canBuyZero\": \"Y\",\n            \"code\": \"Tovar\",\n            \"createdBy\": 1,\n            \"dateActiveFrom\": \"2024-05-28T10:00:00+03:00\",\n            \"dateActiveTo\": \"2024-05-29T10:00:00+03:00\",\n            \"dateCreate\": \"2024-05-27T10:00:00+03:00\",\n            \"detailPicture\": {\n                \"id\": \"6509\",\n                \"url\": \"\\/rest\\/catalog.product.download?fields%5BfieldName%5D=detailPicture\\u0026fields%5BfileId%5D=6509\\u0026fields%5BproductId%5D=1267\",\n                \"urlMachine\": \"\\/rest\\/catalog.product.download?fields%5BfieldName%5D=detailPicture\\u0026fields%5BfileId%5D=6509\\u0026fields%5BproductId%5D=1267\"\n            },\n            \"detailText\": null,\n            \"detailTextType\": \"text\",\n            \"height\": 100,\n            \"iblockId\": 23,\n            \"iblockSectionId\": 47,\n            \"id\": 1267,\n            \"length\": 100,\n            \"measure\": 5,\n            \"modifiedBy\": 1,\n            \"name\": \"Товар\",\n            \"previewPicture\": {\n                \"id\": \"6508\",\n                \"url\": \"\\/rest\\/catalog.product.download?fields%5BfieldName%5D=previewPicture\\u0026fields%5BfileId%5D=6508\\u0026fields%5BproductId%5D=1267\",\n                \"urlMachine\": \"\\/rest\\/catalog.product.download?fields%5BfieldName%5D=previewPicture\\u0026fields%5BfileId%5D=6508\\u0026fields%5BproductId%5D=1267\"\n            },\n            \"previewText\": null,\n            \"previewTextType\": \"text\",\n            \"property258\": {\n                \"value\": \"test\",\n                \"valueId\": \"9816\"\n            },\n            \"property259\": [\n                {\n                    \"value\": \"test1\",\n                    \"valueId\": \"9817\"\n                },\n                {\n                    \"value\": \"test2\",\n                    \"valueId\": \"9818\"\n                }\n            ],\n            \"purchasingCurrency\": \"RUB\",\n            \"purchasingPrice\": \"1000.000000\",\n            \"quantity\": 10,\n            \"quantityReserved\": 1,\n            \"quantityTrace\": \"Y\",\n            \"sort\": 100,\n            \"subscribe\": \"Y\",\n            \"timestampX\": \"2024-06-14T14:26:59+03:00\",\n            \"type\": 1,\n            \"vatId\": 1,\n            \"vatIncluded\": \"Y\",\n            \"weight\": 100,\n            \"width\": 100,\n            \"xmlId\": \"1243\"\n        }\n    },\n    \"time\": {\n        \"start\": 1718371618.509701,\n        \"finish\": 1718371619.669789,\n        \"duration\": 1.160088062286377,\n        \"processing\": 0.757836103439331,\n        \"date_start\": \"2024-06-14T16:26:58+03:00\",\n        \"date_finish\": \"2024-06-14T16:26:59+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure for onCrmLeadAdd Event\nDESCRIPTION: This JSON snippet shows the structure of the data sent to the event handler when a new lead is created using the ONCRMLEADADD event. It includes event details, data with lead fields, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/events/on-crm-lead-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMLEADADD\",\n    \"event_handler_id\": \"707\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"1000983\"\n        }\n    },\n    \"ts\": \"1742807175\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for Disk Storage Rename in JSON\nDESCRIPTION: This snippet shows the expected JSON response format when the disk.storage.rename method is successful. It includes details about the renamed storage such as ID, name, entity type, and root object ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/storage/disk-storage-rename.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"result\": {\n    \"ID\": \"2\", //идентификатор\n    \"NAME\": \"Маркетинг и реклама\", //название\n    \"CODE\": null, //символьный код\n    \"MODULE_ID\": \"disk\",\n    \"ENTITY_TYPE\": \"group\", //тип сущности (см. disk.storage.gettypes)\n    \"ENTITY_ID\": \"1\", //идентификатор сущности\n    \"ROOT_OBJECT_ID\": \"2\" //идентификатор корневой папки\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cashbox with cURL (OAuth)\nDESCRIPTION: This snippet shows how to update a cashbox using cURL with OAuth authentication in Bitrix24. The JSON payload includes the cashbox ID, the fields to be updated, and the access token. Replace placeholders with your actual Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":1,\"FIELDS\":{\"NAME\":\"Новое имя\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.cashbox.update\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Comment via cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to delete a CRM timeline comment using a webhook. It sends a POST request with the comment's ID, owner type ID, and owner ID in JSON format to the Bitrix24 REST API endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":999,\"ownerTypeId\":2,\"ownerId\":10}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.timeline.comment.delete\n```\n\n----------------------------------------\n\nTITLE: Register User Field Type with JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to register a new user field type.  It passes the user type ID, handler URL, title, description, and options as parameters to the `userfieldtype.add` method. The code also includes error handling and logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'userfieldtype.add',\n        {\n            USER_TYPE_ID: 'test_type',\n            HANDLER: 'https://www.myapplication.com/handler/',\n            TITLE: 'Updated test type',\n            DESCRIPTION: 'Test userfield type for documentation with updated description',\n            OPTIONS: {\n                height: 60,\n            },\n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n                console.log(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Get Lead by ID using cURL (Webhook)\nDESCRIPTION: This cURL command retrieves a lead by its ID using a webhook.  The `ID` parameter is passed in the request body as JSON.  It requires replacing placeholders for the Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":123}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.lead.get\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Lead User Field with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to delete a custom user field from a CRM lead using the `crm.lead.userfield.delete` method. It prompts the user for the field's ID, calls the method, and handles the result, logging errors or data accordingly.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/userfield/crm-lead-userfield-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.lead.userfield.delete\",\n    {\n        id: id\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Handler with cURL (OAuth)\nDESCRIPTION: This cURL command creates a payment handler using the Bitrix24 REST API with OAuth authentication. It includes the same handler settings as the webhook example (name, code, sorting, currency, client type, and IFrame data). Additionally, it includes an `auth` parameter containing the access token for authentication.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-handler-add.md#2025-04-20_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"NAME\":\"Обработчик.Rest IFrame\",\"CODE\":\"resthandleriframe\",\"SORT\":100,\"SETTINGS\":{\"CURRENCY\":[\"RUB\"],\"CLIENT_TYPE\":\"b2c\",\"IFRAME_DATA\":{\"ACTION_URI\":\"http://example.com/payment_iframe.php\",\"FIELDS\":{\"serviceKey\":{\"CODE\":\"REST_SERVICE_KEY_IFRAME\"},\"serviceid\":{\"CODE\":\"REST_SERVICE_ID_IFRAME\"}}},\"CODES\":{\"REST_SERVICE_ID_IFRAME\":{\"NAME\":\"Номер магазина\",\"DESCRIPTION\":\"Номер магазина\",\"SORT\":\"100\"},\"REST_SERVICE_KEY_IFRAME\":{\"NAME\":\"Секретный ключ\",\"DESCRIPTION\":\"Секретный ключ\",\"SORT\":\"300\"},\"PS_WORK_MODE_IFRAME\":{\"NAME\":\"Режим работы платёжной системы\",\"SORT\":\"1100\",\"INPUT\":{\"TYPE\":\"ENUM\",\"OPTIONS\":{\"TEST\":\"Тестовый\",\"REGULAR\":\"Рабочий\"}}}},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.paysystem.handler.add\n```\n\n----------------------------------------\n\nTITLE: Creating Task Dependency Using cURL (OAuth) in HTTP\nDESCRIPTION: This snippet shows how to create a task dependency using a cURL request with OAuth authentication in Bitrix24. It sends a POST request with JSON data including task IDs, link type, and an access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/task-dependence-add.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"taskIdFrom\":100,\"taskIdTo\":101,\"linkType\":0,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/task.dependence.add\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sale Person Types with cURL (Webhook)\nDESCRIPTION: An example of using cURL to call the sale.persontype.list method via webhook, with filtering and ordering options for person types\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\", \"name\", \"sort\"],\"filter\":{\"<=sort\":100},\"order\":{\"sort\":\"DESC\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.persontype.list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Calendar Events with cURL (OAuth)\nDESCRIPTION: This snippet shows how to retrieve company calendar events using cURL with OAuth authentication. It uses the same parameters as the webhook example with the addition of the auth token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"type\":\"company_calendar\",\"ownerId\":\"\",\"forCurrentUser\":false,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/calendar.event.get\n```\n\n----------------------------------------\n\nTITLE: Deleting User Field using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to delete a contact user field using the BX24.callMethod. It takes the `id` parameter to specify the ID of the user field to delete and handles the result, logging any errors or the successful response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'crm.contact.userfield.delete',\n        {\n            id: 432,\n        },\n        (result) => {\n            result.error()\n                ? console.error(result.error())\n                : console.info(result.data())\n            ;\n        },\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Comment with cURL (Webhook)\nDESCRIPTION: Example of using cURL with a webhook to get CRM timeline comment information. Requires a valid Bitrix24 address, user ID, webhook, and comment ID parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":999}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.timeline.comment.get\n```\n\n----------------------------------------\n\nTITLE: Setting Base Currency with cURL (OAuth)\nDESCRIPTION: OAuth-based API call to set a new base currency using cURL. Requires access token and Bitrix24 address.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-base-set.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":\"RUB\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.currency.base.set\n```\n\n----------------------------------------\n\nTITLE: Delete Order Entity Binding with cURL (Webhook)\nDESCRIPTION: Demonstrates how to remove an order's binding to a CRM object using cURL with webhook authentication\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/order-entity/crm-order-entity-delete-by-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"orderId\":5125,\"ownerId\":6933,\"ownerTypeId\":2}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.orderentity.deletebyfilter\n```\n\n----------------------------------------\n\nTITLE: Querying Shipment List with BX24.callMethod (JavaScript)\nDESCRIPTION: This JavaScript code demonstrates how to use `BX24.callMethod` to query the shipment list using the `sale.shipment.list` method. It defines the `select`, `filter`, and `order` parameters to retrieve specific shipment data.  The code also includes error handling to log any errors and display the retrieved data in the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.shipment.list\", {\n        \"select\": [\n            \"id\",\n            \"accountNumber\",\n            \"allowDelivery\",\n            \"basePriceDelivery\",\n            \"canceled\",\n            \"comments\",\n            \"companyId\",\n            \"currency\",\n            \"customPriceDelivery\",\n            \"dateAllowDelivery\",\n            \"dateCanceled\",\n            \"dateDeducted\",\n            \"dateInsert\",\n            \"dateMarked\",\n            \"dateResponsibleId\",\n            \"deducted\",\n            \"deliveryDocDate\",\n            \"deliveryDocNum\",\n            \"deliveryId\",\n            \"deliveryName\",\n            \"deliveryXmlId\",\n            \"discountPrice\",\n            \"empAllowDeliveryId\",\n            \"empCanceledId\",\n            \"empDeductedId\",\n            \"empMarkedId\",\n            \"empResponsibleId\",\n            \"externalDelivery\",\n            \"id1c\",\n            \"marked\",\n            \"orderId\",\n            \"priceDelivery\",\n            \"reasonMarked\",\n            \"reasonUndoDeducted\",\n            \"responsibleId\",\n            \"statusId\",\n            \"statusXmlId\",\n            \"system\",\n            \"trackingDescription\",\n            \"trackingLastCheck\",\n            \"trackingNumber\",\n            \"trackingStatus\",\n            \"updated1c\",\n            \"version1c\",\n            \"xmlId\",\n        ],\n        \"filter\": {\n            \">=id\": 2464,\n            \"@orderId\": [2069, 2070],\n        },\n        \"order\": {\n            \"id\": \"desc\",\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Product List using PHP in Bitrix24\nDESCRIPTION: This snippet shows how to use the CRest::call function to retrieve payment product list in Bitrix24 using PHP. It includes the necessary parameters and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/products-in-payment/crm-item-payment-product-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.payment.product.list',\n    [\n        'paymentId' => 1039,\n        'filter' => [\n            \">=quantity\" => 2,\n            \"@id\" => [1195, 1196],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Entity Fields with cURL (Webhook)\nDESCRIPTION: Demonstrates how to fetch order entity fields using a Bitrix24 webhook endpoint with cURL. Requires a Bitrix24 address, user ID, and webhook token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/order-entity/crm-order-entity-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.orderentity.getFields\n```\n\n----------------------------------------\n\nTITLE: CRM Deal List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_DEAL_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, placement, and placement options. The PLACEMENT_OPTIONS contains the ID of the deal.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => a50589d05446337105e25d637db82f43\n    [AUTH_ID] => 69e69f6600631fcd00005a4b00000001f0f107b9e6d35725003c1524f001562c374275\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => 5965c76600631fcd00005a4b00000001f0f107fb7f5a0542d97a9f3a31c73bbfde48e2\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => CRM_DEAL_LIST_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"3473\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Error example\nDESCRIPTION: This example shows the structure of an error response returned by the Bitrix24 REST API when querying a property variant that does not exist. The response includes an `error` code and an `error_description`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":201540400001,\n    \"error_description\":\"property variant is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Base Currency with cURL (Webhook)\nDESCRIPTION: Webhook-based API call to set a new base currency using cURL. Requires Bitrix24 address, user ID, and webhook token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-base-set.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":\"RUB\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.currency.base.set\n```\n\n----------------------------------------\n\nTITLE: Запрос полей вариации товара с использованием PHP\nDESCRIPTION: Пример вызова метода catalog.product.offer.getFieldsByFilter с использованием PHP-библиотеки CRest. Запрос включает фильтр по ID инфоблока и вывод результата.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/offer/catalog-product-offer-get-fields-by-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.product.offer.getFieldsByFilter',\n    [\n        'filter' => [\n            'iblockId' => 24,\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: Example of a successful JSON response after updating a payment item binding. The `result` object contains the updated `paymentItemBasket` information, including the basket ID, insertion date, ID, payment ID, quantity, and XML ID. The `time` object provides information about the request's execution time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"paymentItemBasket\":{\n            \"basketId\":2722,\n            \"dateInsert\":\"2024-04-17T09:37:45+03:00\",\n            \"id\":1186,\n            \"paymentId\":1025,\n            \"quantity\":1,\n            \"xmlId\":\"myNewXmlId\"\n        }\n    },\n    \"time\":{\n        \"start\":1713341342.331169,\n        \"finish\":1713341343.013559,\n        \"duration\":0.6823902130126953,\n        \"processing\":0.4167962074279785,\n        \"date_start\":\"2024-04-17T11:09:02+03:00\",\n        \"date_finish\":\"2024-04-17T11:09:03+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Property Variant via cURL (Webhook)\nDESCRIPTION: This cURL command updates a property variant using a webhook.  It sends a POST request with the variant's ID and the fields to update. Replace placeholders with your Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-update.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":5,\"fields\":{\"name\":\"Красный\",\"value\":\"red\",\"sort\":10,\"description\":\"Новое описание значения для красного цвета\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.propertyvariant.update\n```\n\n----------------------------------------\n\nTITLE: Deleting Cash Register via cURL OAuth\nDESCRIPTION: Shows how to delete a cash register using cURL with OAuth authentication, including an access token and cash register ID\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":1,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.cashbox.delete\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet shows an example of a successful response from the `sale.persontype.update` method. It includes information about the updated person type, such as its ID, name, code, and activity status. The response also includes timing information about the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"personType\": {\n        \"active\": \"Y\",\n        \"code\": \"MY_CRM_COMPANY\",\n        \"id\": 68,\n        \"name\": \"Юр. лицо\",\n        \"sort\": \"100\",\n        \"xmlId\": \"1234\"\n        }\n    },\n    \"time\": {\n        \"start\": 1712327086.69665,\n        \"finish\": 1712327086.95303,\n        \"duration\": 0.256376028060913,\n        \"processing\": 0.0112268924713135,\n        \"date_start\": \"2024-04-05T16:24:46+02:00\",\n        \"date_finish\": \"2024-04-05T16:24:46+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking List with PHP in Bitrix24 REST API\nDESCRIPTION: This PHP example uses the CRest library to call the booking.v1.booking.list method. It includes filter parameters for date range and client entities, with sorting instructions for the returned list.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-list.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'booking.v1.booking.list',\n    [\n        'filter' => [\n            'within' => [\n                'dateFrom' => 0,\n                'dateTo' => 1739262600,\n            ],\n            'client' => [\n                'entities' => [\n                    [\n                        'code' => 'CONTACT',\n                        'module' => 'crm',\n                        'id' => '1'\n                    ],\n                    [\n                        'code' => 'COMPANY',\n                        'module' => 'crm',\n                        'id' => '1'\n                    ]\n                ]\n            ]\n        ],\n        'order' => [\n            'id' => 'ASC',\n            'dateFrom' => 'DESC',\n            'dateTo' => 'ASC',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Response Example\nDESCRIPTION: This JSON snippet shows a sample response from the `sale.delivery.extra.service.get` method. It includes an array of delivery services with details such as ID, CODE, NAME, DESCRIPTION, ACTIVE status, SORT order, TYPE, and PRICE. The `time` object provides information about the request execution time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/extra-service/sale-delivery-extra-service-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"result\":[\n      {\n         \"ID\":\"136\",\n         \"CODE\":\"door_delivery\",\n         \"NAME\":\"Door Delivery\",\n         \"DESCRIPTION\":\"Door Delivery Description\",\n         \"ACTIVE\":\"Y\",\n         \"SORT\":\"100\",\n         \"TYPE\":\"checkbox\",\n         \"PRICE\":99.99\n      },\n      {\n         \"ID\":\"129\",\n         \"CODE\":\"cargo_type\",\n         \"NAME\":\"Cargo Type\",\n         \"DESCRIPTION\":\"Cargo Type\",\n         \"ACTIVE\":\"Y\",\n         \"SORT\":\"200\",\n         \"TYPE\":\"enum\",\n         \"ITEMS\":[\n            {\n               \"TITLE\":\"Documents\",\n               \"CODE\":null,\n               \"PRICE\":\"69.99\"\n            },\n            {\n               \"TITLE\":\"Small Package(s)\",\n               \"CODE\":null,\n               \"PRICE\":\"129.99\"\n            },\n            {\n               \"TITLE\":\"Large Package(s)\",\n               \"CODE\":null,\n               \"PRICE\":\"199.99\"\n            }\n         ]\n      }\n   ],\n   \"time\":{\n      \"start\":1714551728.295288,\n      \"finish\":1714551728.519896,\n      \"duration\":0.2246079444885254,\n      \"processing\":0.01918506622314453,\n      \"date_start\":\"2024-05-01T11:22:08+03:00\",\n      \"date_finish\":\"2024-05-01T11:22:08+03:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a property group via PHP\nDESCRIPTION: This code snippet demonstrates how to delete a sale property group using PHP via the `CRest::call` function. It calls the `sale.propertygroup.delete` method with the `id` of the property group to be deleted as a parameter and prints the result to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.propertygroup.delete',\n    [\n        'id' => 15\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Item Basket with PHP\nDESCRIPTION: This PHP example demonstrates how to retrieve a payment item basket using the `CRest::call` function.  It calls the `sale.paymentitembasket.get` method with the `id` and then prints the result to the page.  It depends on the `crest.php` library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.paymentitembasket.get',\n    [\n        'id' => 1186\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Setting Call Card UI State in Bitrix24\nDESCRIPTION: This code snippet demonstrates how to change the UI state of a call card in Bitrix24 using the `CallCardSetUiState` method. It calls the `BX24.placement.call` function with the method name and an object containing the `uiState` property. The callback function is executed after the UI state is set.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/page-background-worker/card.md#2025-04-20_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.call('CallCardSetUiState', { uiState: 'connected'}, () => { //some code });\n```\n\n----------------------------------------\n\nTITLE: Registering WebRTC Placement in Bitrix24\nDESCRIPTION: Registers a background worker placement with specific configuration for WebRTC integration. Includes an error handler URL for managing placement performance and language settings.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/page-background-worker/index.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n'placement.bind',\n[\n    'PLACEMENT' => 'PAGE_BACKGROUND_WORKER',\n    'HANDLER' => 'http://example.com/placement/?ty=1',\n    'OPTIONS' => [\n        'errorHandlerUrl' => 'http://example.com/logg.php?ty=1',\n    ],\n    'LANG_ALL' => [\n        'ru' => [\n            'TITLE' => 'test',\n        ]\n    ]\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Field Settings in PHP/Bitrix24\nDESCRIPTION: Method for getting available settings for a specific field type with type and title details\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/userfield/index.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[DEFAULT_VALUE] => Array\\n        (\\n            [type] => double\\n            [title] => Значение по умолчанию\\n        )\\n[PRECISION] => Array\\n        (\\n            [type] => int\\n            [title] => Точность\\n        )\n```\n\n----------------------------------------\n\nTITLE: cURL Request (Webhook) for Basket Items List\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of basket items using the `sale.basketitem.list` method with a webhook authentication. It sets the content type to JSON, accepts JSON responses, and includes a JSON payload with select, filter, order and start parameters. Replace placeholders with actual Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"select\":[\"id\",\"orderId\",\"productId\",\"name\",\"price\",\"currency\"],\"filter\":{\"@orderId\":[5147,5146]},\"order\":{\"id\":\"desc\"},\"start\":0}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.basketitem.list\n```\n\n----------------------------------------\n\nTITLE: API Error Response\nDESCRIPTION: Example of an HTTP 400 error response from the `crm.item.details.configuration.forceCommonScopeForAll` method.  The `error` field contains the error code, and the `error_description` provides details about the error, such as a missing required parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/item-details-configuration/crm-item-details-configuration-forceCommonScopeForAll.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Parameter 'entityTypeID' is not defined\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signed Documents using PHP in B24 REST API\nDESCRIPTION: This PHP example demonstrates how to use the CRest library to call the sign.b2e.personal.tail method. It retrieves user-signed documents with pagination parameters and displays the results or error messages.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sign/sign-b2e-personal-tail.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sign.b2e.personal.tail',\n    [\n        'limit' => 2, // Количество записей на странице\n        'offset' => 0 // Смещение от начала списка\n    ]\n);\n\nif (isset($result['error'])) {\n    echo 'Ошибка: ' . $result['error_description'];\n} else {\n    echo '<PRE>';\n    print_r($result['result']);\n    echo '</PRE>';\n}\n```\n\n----------------------------------------\n\nTITLE: Querying VAT Rates with cURL (Webhook)\nDESCRIPTION: Example of using cURL to call the catalog.vat.list method via a Bitrix24 webhook. It demonstrates filtering and sorting VAT rates.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/vat/catalog-vat-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"name\",\"rate\"],\"filter\":{\">=sort\":200},\"order\":{\"id\":\"ASC\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.vat.list\n```\n\n----------------------------------------\n\nTITLE: Filtering Document Templates in Bitrix24 CRM\nDESCRIPTION: Demonstrates how to filter document templates using specific criteria like code, numerator ID, region, and active status. The filter allows precise template retrieval based on multiple parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/document-generator/templates/crm-document-generator-template-list.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nfilter: {\n    \"code\": \"%_RU\",\n    \"numeratorId\": \"2\",\n    \"region\": \"by\",\n    \"active\": \"Y\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Payer Type with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates deleting a payer type using the `BX24.callMethod` function. It calls the `sale.persontype.delete` method with the payer type's 'id' and handles the response, logging errors or data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'sale.persontype.delete', \n        { id: 5 }, \n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n                console.log(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Удаление отгрузки через cURL (Webhook)\nDESCRIPTION: Пример запроса cURL для удаления отгрузки через Webhook. Необходимо указать ID отгрузки в теле запроса и передать параметры доступа (ID пользователя и Webhook).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":2461}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipment.delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Activity Types with PHP (CRest)\nDESCRIPTION: PHP implementation of crm.activity.type.list method using CRest library, with result printing\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/types/crm-activity-type-list.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.activity.type.list',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Request Delivery Information Using cURL Webhook in Bitrix24\nDESCRIPTION: Example of how to request delivery information using cURL with a webhook. Requires a valid Bitrix24 address and webhook credentials.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/delivery/crm-item-delivery-get.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":4077}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.item.delivery.get\n```\n\n----------------------------------------\n\nTITLE: Processing onCrmActivityDelete Event Payload in JSON\nDESCRIPTION: Example of the JSON payload structure sent to handlers subscribed to the onCrmActivityDelete event. Contains the event name, activity ID that was deleted, timestamp, and authentication parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/events/on-crm-activity-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"onCrmActivityDelete\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"999\"\n        }\n    },\n    \"ts\": \"1466439714\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet illustrates an error response when the lead ID is not defined or invalid. The 'error' field contains the error code, and the 'error_description' field provides a more detailed explanation of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-delete.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"\",\n  \"error_description\": \"ID is not defined or invalid.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cashbox with JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to update a cashbox using the `BX24.callMethod` function. It includes the cashbox ID and the fields to be updated. The snippet also includes error handling to log any errors that occur during the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.cashbox.update\",\n    {\n        \"ID\": 1,\n        \"FIELDS\": {\n            \"NAME\": \"Новое имя\",\n        }\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting Payer Type with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to delete a payer type using a webhook. It sends a POST request with the 'id' of the payer type to be deleted to the specified Bitrix24 REST endpoint.  Replace placeholders for the Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":5}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.persontype.delete\n```\n\n----------------------------------------\n\nTITLE: Error Response: Access Denied\nDESCRIPTION: This JSON snippet illustrates an error response from the Bitrix24 REST API when attempting to update a catalog product without sufficient permissions. It includes an error code and a description indicating that access is denied.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/catalog-product-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":200040300010,\n    \"error_description\":\"Access denied\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format\nDESCRIPTION: This JSON structure represents a successful response from the `sale.persontype.delete` method. It contains a `result` field indicating success (true) and a `time` object with details about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1712326002.94315,\n        \"finish\": 1712326003.25198,\n        \"duration\": 0.308833837509155,\n        \"processing\": 0.0920200347900391,\n        \"date_start\": \"2024-04-05T16:06:42+02:00\",\n        \"date_finish\": \"2024-04-05T16:06:43+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response (JSON)\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the `crm.requisite.bankdetail.get` method. It includes the bank detail's ID, entity ID, country ID, creation and modification dates, user IDs for creation and modification, name, code, XML ID, active status, sort order, and various bank-related details like bank name, address, BIK, account number, and correspondent account number. It also contains the time taken to execute the method.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"ID\": \"357\",\n        \"ENTITY_ID\": \"27\",\n        \"COUNTRY_ID\": \"1\",\n        \"DATE_CREATE\": \"2024-06-03T17:52:22+02:00\",\n        \"DATE_MODIFY\": \"\",\n        \"CREATED_BY_ID\": \"1\",\n        \"MODIFY_BY_ID\": null,\n        \"NAME\": \"ПАО Супербанк\",\n        \"CODE\": null,\n        \"XML_ID\": \"1e4641fd-2dd9-31e6-b2f2-105056c00008\",\n        \"ORIGINATOR_ID\": null,\n        \"ACTIVE\": \"Y\",\n        \"SORT\": \"600\",\n        \"RQ_BANK_NAME\": \"ПАО Супербанк\",\n        \"RQ_BANK_CODE\": null,\n        \"RQ_BANK_ADDR\": \"117312, г. Москва, улица Вавилова, дом 19\",\n        \"RQ_BANK_ROUTE_NUM\": null,\n        \"RQ_BIK\": \"044525225\",\n        \"RQ_MFO\": null,\n        \"RQ_ACC_NAME\": null,\n        \"RQ_ACC_NUM\": \"40702810938000060473\",\n        \"RQ_ACC_TYPE\": null,\n        \"RQ_IIK\": null,\n        \"RQ_ACC_CURRENCY\": \"RUR\",\n        \"RQ_COR_ACC_NUM\": \"30101810400000000225\",\n        \"RQ_IBAN\": null,\n        \"RQ_SWIFT\": null,\n        \"RQ_BIC\": null,\n        \"RQ_CODEB\": null,\n        \"RQ_CODEG\": null,\n        \"RQ_RIB\": null,\n        \"RQ_AGENCY_NAME\": null,\n        \"COMMENTS\": null\n    },\n    \"time\": {\n        \"start\": 1717495619.077607,\n        \"finish\": 1717495619.708617,\n        \"duration\": 0.6310100555419922,\n        \"processing\": 0.07691788673400879,\n        \"date_start\": \"2024-06-04T12:06:59+02:00\",\n        \"date_finish\": \"2024-06-04T12:06:59+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Обработка ошибки при удалении отгрузки\nDESCRIPTION: Пример ответа об ошибке при попытке удаления уже отгруженной отгрузки. Содержит код ошибки и описание проблемы.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":\"SALE_SHIPMENT_EXIST_SHIPPED\",\n   \"error_description\":\"Отгрузка уже отгружена. Отмените отгрузку\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving property values with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to use cURL to make a POST request to the sale.propertyvalue.list method using a webhook. It includes headers for content type and accepts JSON, and it constructs a JSON body containing selection fields, filters, and ordering for the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-value/sale-property-value-list.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"code\",\"id\",\"name\",\"orderId\",\"orderPropsId\",\"orderPropsXmlId\",\"value\"],\"filter\":{\"=code\":\"FIO\",\"%value\":\"Борис\",\">orderId\":1600},\"order\":{\"orderId\":\"desc\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.propertyvalue.list\n```\n\n----------------------------------------\n\nTITLE: Update delivery request with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to update a delivery request using a Bitrix24 webhook. It sends a POST request with a JSON payload containing the delivery ID, request ID, status, and properties of the delivery request. The webhook URL includes the user ID and webhook ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery-request/sale-delivery-request-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"DELIVERY_ID\":225,\"REQUEST_ID\":\"4757aca4931a4f029f49c0db4374d13d\",\"STATUS\":{\"TEXT\":\"Performer found\",\"SEMANTIC\":\"process\"},\"PROPERTIES\":[{\"NAME\":\"Car\",\"VALUE\":\"Gray Skoda Octavia, a777zn\"},{\"NAME\":\"Driver\",\"VALUE\":\"John Smith\"},{\"NAME\":\"Phone Number\",\"VALUE\":\"+11111111111\",\"TAGS\":[\"phone\"]},{\"NAME\":\"Something else\",\"VALUE\":\"Some value\"}]}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.delivery.request.update\n```\n\n----------------------------------------\n\nTITLE: Data Received by the Widget Handler\nDESCRIPTION: This code snippet shows the array of data passed to the widget handler as a POST request when the widget is invoked in the task list context menu. It includes information like domain, protocol, language, application ID, authentication details, member ID, placement, and placement options. The `PLACEMENT_OPTIONS` contain the ID of the task for which the widget was opened.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/task/index.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => d7092a1d8c53d8be01cbb43a856e21ac\n    [AUTH_ID] => cb50ba6600631fcd00005a4b00000001f0f107523405e8ed8e45f3a87951e6313d42ac\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => bbcfe16600631fcd00005a4b00000001f0f1078b3cbb2ae3909b492b397f73c3966d59\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => TASK_LIST_CONTEXT_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"286\"}\n)\n\n?>\n```\n\n----------------------------------------\n\nTITLE: Deleting Calendar Event Using cURL Webhook in Bash\nDESCRIPTION: This snippet demonstrates how to delete a calendar event using a cURL command with a webhook. It sends a POST request to the Bitrix24 REST API endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.details.configuration.forceCommonScopeForAll\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON snippet illustrates a sample error response from the Bitrix24 REST API. It contains an error code and a description of the error.  Specifically, it shows a generic error response with error code 0 and a placeholder error description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-properties/sale-basket-properties-get-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Update Sale Property Group with PHP\nDESCRIPTION: This PHP code snippet uses the `CRest::call` function to update a sale property group.  It requires the `crest.php` library and passes the method name, ID, and updated fields as an array. The result is then printed for inspection.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.propertygroup.update',\n    [\n        'id' => 10,\n        'fields' => [\n            'personTypeId' => 3,\n            'name' => 'Обновленная группа свойств',\n            'sort' => 100,\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Requisite Link using cURL with OAuth\nDESCRIPTION: This cURL command illustrates how to perform a POST request to fetch the requisite link while utilizing OAuth for authentication. It includes the necessary parameters and the access token for secure access.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/links/crm-requisite-link-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":31,\"entityId\":315,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.link.get\n```\n\n----------------------------------------\n\nTITLE: cURL Webhook Call for Enable Auto Close\nDESCRIPTION: Webhook-based API call to enable automatic call card closing using cURL for Bitrix24\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/enable-auto-close.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"PLACEMENT\":\"enableAutoClose\",\"PARAMS\":{}}' \\\n\"https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/placement.call\"\n```\n\n----------------------------------------\n\nTITLE: Receiving Data for CRM Smart Invoice List Toolbar\nDESCRIPTION: This code snippet illustrates the data structure received by the handler when a widget is placed in the CRM smart invoice list toolbar. It includes information such as domain, protocol, language, application ID, authentication details, member ID, status, and placement code. This data is sent as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/list-toolbar.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => en\\n    [APP_SID] => 1dc4a02fd9c7c094bb78cac8689d23cb\\n    [AUTH_ID] => 6986d4ca670076a4b8006f518000000001201c07456529898882f844c5d744f564bcfafb\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 7653f2670076a4b8006f518000000001201c0710663db8587fccc71874c46996bf6f49\\n    [member_id] => e8857f161a1a8288f312b6cc6ad67995\\n    [status] => L\\n    [PLACEMENT] => CRM_SMART_INVOICE_LIST_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Item Basket with cURL (OAuth)\nDESCRIPTION: This cURL example demonstrates how to retrieve a payment item basket using OAuth. It sends a POST request including the `id` of the item and the access token. Remember to replace placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-get.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1186,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.paymentitembasket.get\n```\n\n----------------------------------------\n\nTITLE: Querying Shipment Property Value with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to retrieve shipment property value using cURL with Webhook authentication. It sends a POST request with the shipment property value ID to the Bitrix24 REST API endpoint. The ID is passed within the JSON payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":38164}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.shipmentpropertyvalue.get\n```\n\n----------------------------------------\n\nTITLE: Deleting a custom field from a preset using PHP\nDESCRIPTION: This PHP code demonstrates how to delete a custom field from a preset using the CRest::call function. It requires the crest.php file and passes the method name and parameters as an array. It then prints the result of the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.requisite.preset.field.delete',\n        [\n            'ID' => 27,\n            'preset' => ['ID' => 1]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Add Delivery Handler with PHP\nDESCRIPTION: This snippet shows how to add a delivery handler to Bitrix24 using PHP. It uses the `CRest::call` function to call the `sale.delivery.handler.add` method, passing in an array containing the delivery handler's details. The code requires the `crest.php` library for making the REST API calls and prints the result of the call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n        'sale.delivery.handler.add',\n        [\n            'CODE' => \"uber\",\n            'NAME' => \"Uber\",\n            'DESCRIPTION' => \"Uber Description\",\n            'SORT' => 250,\n            'SETTINGS' => [\n                'CALCULATE_URL' => \"http://gateway.bx/calculate.php\",\n                'CREATE_DELIVERY_REQUEST_URL' => \"http://gateway.bx/create_delivery_request.php\",\n                'CANCEL_DELIVERY_REQUEST_URL' => \"http://gateway.bx/cancel_delivery_request.php\",\n                'HAS_CALLBACK_TRACKING_SUPPORT' => \"Y\",\n                'CONFIG' => [\n                    ['TYPE' => \"STRING\", 'CODE' => \"SETTING_1\", 'NAME' => \"String Example\"],\n                    ['TYPE' => \"Y/N\", 'CODE' => \"SETTING_2\", 'NAME' => \"Checkbox Example\"],\n                    ['TYPE' => \"NUMBER\", 'CODE' => \"SETTING_3\", 'NAME' => \"Number Example\"],\n                    [\n                        'TYPE' => \"ENUM\",\n                        'CODE' => \"SETTING_4\",\n                        'NAME' => \"Enum Example\",\n                        'OPTIONS' => [\n                            \"Option1Code\" => \"Option1Value\",\n                            \"Option2Code\" => \"Option2Value\",\n                            \"Option3Code\" => \"Option3Value\",\n                            \"Option4Code\" => \"Option4Value\",\n                            \"Option5Code\" => \"Option5Value\",\n                        ],\n                    ],\n                    ['TYPE' => \"DATE\", 'CODE' => \"SETTING_5\", 'NAME' => \"Date Example\"],\n                    ['TYPE' => \"LOCATION\", 'CODE' => \"SETTING_6\", 'NAME' => \"Location Example\"],\n                ],\n            ],\n            'PROFILES' => [\n                ['NAME' => \"Taxi\", 'CODE' => \"TAXI\", 'DESCRIPTION' => \"Taxi Delivery\"],\n                ['NAME' => \"Cargo\", 'CODE' => \"CARGO\", 'DESCRIPTION' => \"Cargo Delivery\"],\n            ],\n        ]\n    );\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskUpdate Event in JavaScript\nDESCRIPTION: JavaScript code example showing how to subscribe to the onTaskUpdate event using the BX24 API. The code registers a handler URL and provides callbacks for success and error handling.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-update.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'event.bind',\n    {\n        \"event\": \"onTaskUpdate\",\n        \"handler\": \"https://example.com/handler.php\"\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Fields with cURL (Webhook)\nDESCRIPTION: A cURL HTTP POST request to retrieve shipment fields using a webhook endpoint\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipment.getfields\n```\n\n----------------------------------------\n\nTITLE: Get Contact User Field via PHP\nDESCRIPTION: This PHP snippet uses the `CRest::call` function to retrieve a contact user field. It calls the 'crm.contact.userfield.get' method with the user field ID and prints the result to the console. Ensure the `crest.php` file is properly included.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.userfield.get',\n    [\n        'id' => 399\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Icons using cURL OAuth\nDESCRIPTION: This example demonstrates how to call the crm.timeline.icon.list method using cURL with OAuth authentication to get a list of available icons for CRM timeline log entries.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.icon.list\n```\n\n----------------------------------------\n\nTITLE: Receiving OnSessionFinish Event Data in PHP\nDESCRIPTION: This code snippet demonstrates the structure of the data received by the event handler when the OnSessionFinish event is triggered. It includes information about the event, chat session, connector, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/openlines/events/on-session-finish.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'event' => 'ONSESSIONFINISH',\n    'eventId' => 1,\n    'data' => [\n        'DATA' => [\n            [\n                'connector' => [\n                    'connector_id' => 'livechat',\n                    'line_id' => 128,\n                    'chat_id' => 10585,\n                    'user_id' => 1984,\n                ],\n                'chat' => [\n                    'id' => 10585\n                ],\n                'user' => [\n                    'id' => 128,\n                    'name' => 'linename'\n                ],\n            ],\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'imopenlines',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/&#39;',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/&#39;',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Successful Response JSON Structure\nDESCRIPTION: This JSON snippet shows the successful response structure when deleting a CRM timeline icon. It returns a result field with a boolean value indicating success, along with timing information about the request execution.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scrum Task Fields using cURL (Webhook) in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve Scrum task fields by ID using a cURL request with a webhook in Bash. It sends a POST request to the Bitrix24 REST API endpoint with the task ID as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/tasks.api.scrum.task.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Bitrix24 Guest Trace Data\nDESCRIPTION: JavaScript code that retrieves a trace value from the b24Tracker guest object and assigns it to a form input value. This is typically used for tracking and analytics purposes in Bitrix24 implementations.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-use-analitycs/use-analitics-for-add-contact.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar trace = b24Tracker.guest.getTrace();\ntraceDom.value = trace;\n```\n\nLANGUAGE: html\nCODE:\n```\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an error response. The `error` field contains the error code, and the `error_description` field provides a description of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Structure of OnTaskCommentUpdate Event Data in JSON\nDESCRIPTION: This JSON structure represents the data payload received by the handler when a task comment is updated. It includes information about the comment before and after the update, timestamps, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/comment-item/events-comment/on-task-comment-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\narray(\n    'event' => 'ONTASKCOMMENUPDATE',\n    'data' => array(\n        'FIELDS_BEFORE' => array('ID' => 123, 'TASK_ID' => 555),\n        'FIELDS_AFTER' => array('ID' => 123, 'TASK_ID' => 555, 'ACTION' => 'EDIT'),\n        'IS_ACCESSIBLE_BEFORE' => 'undefined',\n        'IS_ACCESSIBLE_AFTER' => 'undefined',\n    ),\n    'ts' => '1466439714',\n    'auth' => array(\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n        ),\n)\n```\n\n----------------------------------------\n\nTITLE: Querying VAT Rates with cURL (OAuth)\nDESCRIPTION: Example of using cURL to call the catalog.vat.list method using OAuth authentication. It shows how to include the access token in the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/vat/catalog-vat-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"name\",\"rate\"],\"filter\":{\">=sort\":200},\"order\":{\"id\":\"ASC\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.vat.list\n```\n\n----------------------------------------\n\nTITLE: CRM Activity Update Event Data Structure\nDESCRIPTION: This JSON snippet shows the structure of the data that is sent to the event handler when the `onCrmActivityUpdate` event is triggered. It includes the event name, the updated activity's `ID` within the `FIELDS` array, a timestamp (`ts`), and authentication information (`auth`).  The `auth` section contains access tokens, expiry details, scope, domain, server endpoint, client endpoint, member ID, refresh token, and application token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/events/on-crm-activity-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"onCrmActivityUpdate\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"999\"\n        }\n    },\n    \"ts\": \"1466439714\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Получение настроек службы доставки через PHP с CRest\nDESCRIPTION: PHP-метод для получения конфигурационных настроек службы доставки с использованием библиотеки CRest\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery/sale-delivery-config-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.delivery.config.get',\n    [\n        'ID' => 196\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Response example of crm.address.fields\nDESCRIPTION: This JSON snippet shows an example of the response returned by the crm.address.fields method.  It provides the data types and other properties of the crm address fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/addresses/crm-address-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"TYPE_ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": true,\n            \"isReadOnly\": false,\n            \"isImmutable\": true,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"TYPE_ID\"\n        },\n        \"ENTITY_TYPE_ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": true,\n            \"isReadOnly\": false,\n            \"isImmutable\": true,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"ENTITY_TYPE_ID\"\n        },\n        \"ENTITY_ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": true,\n            \"isReadOnly\": false,\n            \"isImmutable\": true,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"ENTITY_ID\"\n        },\n        \"ADDRESS_1\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Улица, дом, корпус, строение\"\n        },\n        \"ADDRESS_2\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Квартира / офис\"\n        },\n        \"CITY\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Город\"\n        },\n            \"POSTAL_CODE\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Почтовый индекс\"\n        },\n        \"REGION\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Район\"\n        },\n        \"PROVINCE\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Область\"\n        },\n        \"COUNTRY\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Страна\"\n        },\n        \"COUNTRY_CODE\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"COUNTRY_CODE\"\n        },\n        \"LOC_ADDR_ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Идентификатор адреса местоположения\"\n        },\n        \"ANCHOR_TYPE_ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"ANCHOR_TYPE_ID\"\n        },\n        \"ANCHOR_ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"ANCHOR_ID\"\n        }\n    },\n    \"time\": {\n        \"start\": 1712938174.436428,\n        \"finish\": 1712938175.432068,\n        \"duration\": 0.9956400394439697,\n        \"processing\": 0.5710320472717285,\n        \"date_start\": \"2024-04-12T19:09:34+03:00\",\n        \"date_finish\": \"2024-04-12T19:09:35+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Integer (Number) Input Field\nDESCRIPTION: This code generates a number input field specifically for integers. The input properties like name, required status, disabled status, multiplicity, and value are configured according to the `$arField` array. The input type is set as 'number'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_12\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'integer':\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'number',\n                ]\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Update Bank Detail with Javascript\nDESCRIPTION: This JavaScript snippet demonstrates how to update a bank detail using the BX24.callMethod function. It calls the 'crm.requisite.bankdetail.update' method with the ID and fields to be updated. The code also includes error handling and displays the result in the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"crm.requisite.bankdetail.update\",\n        {\n            id: 357,\n            fields:\n            {\n                \"NAME\": \"ПАО Супербанк (не использовать)\",\n                \"COMMENTS\": \"Устаревший\",\n                \"SORT\" : 10000,\n                \"ACTIVE\": \"N\"\n            }\n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n            {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Calling placement.call with disableAutoClose in PHP\nDESCRIPTION: This PHP snippet uses the `CRest::call` method to call the `placement.call` method with the `disableAutoClose` placement. It includes the `crest.php` library for interacting with the Bitrix24 REST API. An empty object is passed as the parameters and the result is printed using `print_r`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/disable-auto-close.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'placement.call',\n    [\n        'PLACEMENT' => 'disableAutoClose',\n        'PARAMS' => (object)[]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Data Received by Widget Handler (POST Request)\nDESCRIPTION: This code snippet shows the data sent to the widget handler via a POST request. The handler receives information such as domain, protocol, language, application ID, authentication tokens, member ID, status, placement, and placement options. This data can be used to customize the widget's behavior and interact with the Bitrix24 REST API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/im/sidebar.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"DOMAIN': 'xxx.bitrix24.com'\n'PROTOCOL': 1\n'LANG': 'en'\n'APP_SID': '99c80eff6378726287350416ee5fef0'\n'AUTH_ID': '6061e72600631fcd00005a4b00000001f0f1076700000000f69dd5fc643d9ce2fdbc1'\n'AUTH_EXPIRES': 3600\n'REFRESH_ID': '50e00aa340631fcd00005a4b00000001f0f1071111116580a5b83c2de639ef28c12'\n'member_id': 'da45a03b265ed12127f8a258d793cc5d'\n'status': 'L'\n'PLACEMENT': 'CRM_DEAL_DETAIL_TAB'\n'PLACEMENT_OPTIONS': '{\"ID\":\"3443\"}'\"\n```\n\n----------------------------------------\n\nTITLE: Getting Call Card UI States in Bitrix24\nDESCRIPTION: This code snippet shows how to retrieve a list of available UI states for a call card in Bitrix24 using the `CallCardGetListUiStates` method. It calls the `BX24.placement.call` function with the method name and a callback function that receives the array of available UI states. The callback logs the data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/page-background-worker/card.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.call('CallCardGetListUiStates', (data) => { console.log(data); });\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Payment with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to retrieve CRM payment information using a webhook. It sends a POST request with the payment ID to the Bitrix24 REST API endpoint. Replace the placeholders with your Bitrix24 address, user ID, and webhook ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-get.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1036}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.item.payment.get\n```\n\n----------------------------------------\n\nTITLE: Update Person Type with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to update a person type using a webhook in Bitrix24. It sends a POST request with a JSON payload containing the ID of the person type to update and the fields to modify. Replace placeholders with your Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":12,\"fields\":{\"name\":\"Юр. лицо\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.persontype.update\n```\n\n----------------------------------------\n\nTITLE: Reset Personal Configuration using PHP\nDESCRIPTION: This snippet demonstrates how to reset the personal configuration for contact details using the `CRest::call` function in PHP with the Bitrix24 REST API. It calls the `crm.contact.details.configuration.reset` method with the `scope` parameter set to \"P\", a specific `userId`, and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.details.configuration.reset',\n    [\n        'scope' => 'P',\n        'userId' => 6\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful Response Structure for im.user.list.get in JSON\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the `im.user.list.get` method. It contains user data such as ID, name, first name, last name, work position, color, avatar, gender, birthday, and other attributes. The `result` object contains key-value pairs, where the key is the user ID and the value is either the user data or `null` if the user is not found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/chats/users/im-user-list-get.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"4\": null,\n        \"5\": {\n            \"id\": 5,\n            \"name\": \"Евгений Шеленков\",\n            \"first_name\": \"Евгений\",\n            \"last_name\": \"Шеленков\",\n            \"work_position\": \"\",\n            \"color\": \"#df532d\",\n            \"avatar\": \"http://192.168.2.232/upload/resize_cache/main/1d3/100_100_2/shelenkov.png\",\n            \"gender\": \"M\",\n            \"birthday\": \"\",\n            \"extranet\": false,\n            \"network\": false,\n            \"bot\": false,\n            \"connector\": false,\n            \"external_auth_id\": \"default\",\n            \"status\": \"online\",\n            \"idle\": false,\n            \"last_activity_date\": \"2018-01-29T17:35:31+03:00\",\n            \"desktop_last_date\": false,\n            \"mobile_last_date\": false,\n            \"departments\": [\n             50\n            ],\n            \"absent\": false,\n            \"phones\": {\n             \"work_phone\": \"\",\n             \"personal_mobile\": \"\",\n             \"personal_phone\": \"\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Query User Field List with cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of CRM requisite user fields using OAuth authentication, specifying the sorting order, filter criteria, and access token in JSON format.  The command sends a POST request with the `order`, `filter` and `auth` parameters to the specified Bitrix24 REST endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"order\":{\"SORT\":\"ASC\"},\"filter\":{\"MANDATORY\":\"N\",\"LANG\":\"ru\"},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/crm.requisite.userfield.list\n```\n\n----------------------------------------\n\nTITLE: Adding Shipment Item via cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to add a shipment item using a webhook in Bitrix24. It sends a POST request with the necessary fields (orderDeliveryId, basketId, quantity) in JSON format to the specified endpoint. Replace placeholders with your actual Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-add.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"-X POST \\\n-H \\\"Content-Type: application/json\\\" \\\n-H \\\"Accept: application/json\\\" \\\n-d '{\\\"fields\\\":{\\\"orderDeliveryId\\\":33,\\\"basketId\\\":18,\\\"quantity\\\":1}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipmentitem.add\"\n```\n\n----------------------------------------\n\nTITLE: Querying Requisites by User Field using PHP\nDESCRIPTION: This PHP code retrieves a requisite and fetches a user-defined field using the `CRest::call` function. It filters by `ID` and selects the `UF_CRM_1707997209` field. The `crest.php` library must be included.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n        $result = CRest::call(\n            'crm.requisite.list',\n            [\n                'order' => [],\n                'filter' => ['ID' => '51'],\n                'select' => ['UF_CRM_1707997209']\n            ]\n        );\n\n        echo '<PRE>';\n        print_r($result);\n        echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Item Fields with cURL OAuth\nDESCRIPTION: Example of using cURL with OAuth authentication to retrieve field lists for a smart process with entityTypeId 1268. This approach uses an access token for authentication rather than a webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":1268,\"useOriginalUfNames\":\"N\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.fields\n```\n\n----------------------------------------\n\nTITLE: Receiving Data from IFrame using JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates how to receive data from an IFrame using the `message` event listener.  It shows how to access the data sent from the IFrame, including system parameters (`BX_SYSTEM_PARAMS`) and styles (`BX_COMPUTED_STYLE`). It also provides example usage for applying the received styles to the document body.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-handler-add.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\twindow.addEventListener(\"message\", function (event) {\n\t\t// получение данных от сайта (от платёжной системы)\n\t\tvar paymentData = event.data;\n\t\t// работа с BX_SYSTEM_PARAMS\n\t\tif (paymentData.BX_SYSTEM_PARAMS)\n\t\t{\n\t\t\t// ...\n\t\t}\n\t\t// использование стилей сайта\n\t\tif (paymentData.BX_COMPUTED_STYLE)\n\t\t{\n\t\t\tdocument.body.style.background = paymentData.BX_COMPUTED_STYLE.background;\n\t\t\tdocument.body.style.color = paymentData.BX_COMPUTED_STYLE.color;\n\t\t}\n\t}, false);\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Payment Handler with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to create a payment handler in Bitrix24. It defines the handler with similar parameters like name, code, sort order, settings (currency, client type, IFrame data), and field configurations. It then prints the result of the API call to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-handler-add.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    require_once('crest.php');\n\n    $result = CRest::call(\n        'sale.paysystem.handler.add',\n        [\n            'NAME' => 'Обработчик.Rest IFrame',\n            'CODE' => 'resthandleriframe',\n            'SORT' => 100,\n            'SETTINGS' => [\n                'CURRENCY' => ['RUB'],\n                'CLIENT_TYPE' => 'b2c',\n                'IFRAME_DATA' => [\n                    'ACTION_URI' => 'http://example.com/payment_iframe.php',\n                    'FIELDS' => [\n                        'serviceKey' => [\n                            'CODE' => 'REST_SERVICE_KEY_IFRAME',\n                        ],\n                        'serviceid' => [\n                            'CODE' => 'REST_SERVICE_ID_IFRAME'\n                        ]\n                    ]\n                ],\n                'CODES' => [\n                    'REST_SERVICE_ID_IFRAME' => [\n                        'NAME' => 'Номер магазина',\n                        'DESCRIPTION' => 'Номер магазина',\n                        'SORT' => '100'\n                    ],\n                    'REST_SERVICE_KEY_IFRAME' => [\n                        'NAME' => 'Секретный ключ',\n                        'DESCRIPTION' => 'Секретный ключ',\n                        'SORT' => '300'\n                    ],\n                    'PS_WORK_MODE_IFRAME' => [\n                        'NAME' => 'Режим работы платёжной системы',\n                        'SORT' => '1100',\n                        'INPUT' => [\n                            'TYPE' => 'ENUM',\n                            'OPTIONS' => [\n                                'TEST' => 'Тестовый',\n                                'REGULAR' => 'Рабочий'\n                            ]\n                        ]\n                    ]\n                ]\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n    \n```\n\n----------------------------------------\n\nTITLE: Register User Field Type with cURL (OAuth)\nDESCRIPTION: This cURL command registers a new user field type using OAuth authentication. It sends a POST request with JSON data, including the access token. Replace the placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-add.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n        \"USER_TYPE_ID\": \"test_type\",\n        \"HANDLER\": \"https://www.myapplication.com/handler/\",\n        \"TITLE\": \"Updated test type\",\n        \"DESCRIPTION\": \"Test userfield type for documentation with updated description\",\n        \"OPTIONS\": {\n            \"height\": 60\n        },\n        \"auth\": \"**put_access_token_here**\"\n    }' \\\n    https://**put_your_bitrix24_address**/rest/userfieldtype.add\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Currency List with OAuth cURL\nDESCRIPTION: OAuth-based cURL request to fetch currency list with ascending sort order and authentication token\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{\"sort\":\"asc\",\"currency\":\"asc\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.currency.list\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_section Data Type in Markdown\nDESCRIPTION: Details the structure and fields of the catalog_section data type, including section ID, infoblock ID, parent section ID, name, external ID, code, sort order, activity status, and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор раздела каталога ||\n|| **iblockId**\n[`catalog_catalog.id`](#catalog_catalog) | Идентификатор инфоблока.\n\nДля получения существующих идентификаторов необходимо использовать [catalog.catalog.list](./catalog/catalog-catalog-list.md) ||\n|| **iblockSectionId**\n[`catalog_section.id`](#catalog_section) | Идентификатор родительского раздела.\n\nДля получения существующих идентификаторов необходимо использовать [catalog.section.list](./section/catalog-section-list.md). \n\nПо умолчанию выбирается верхний уровень ||\n|| **name**\n[`string`](../data-types.md) | Название раздела каталога ||\n|| **xmlId**\n[`string`](../data-types.md) | Внешний идентификатор.\n\nМожно использовать для синхронизации текущего раздела каталога с аналогичной позицией во внешней системе ||\n|| **code**\n[`string`](../data-types.md) | Код раздела каталога ||\n|| **sort**\n[`integer`](../data-types.md) | Сортировка ||\n|| **active**\n[`string`](../data-types.md) | Индикатор активности раздела каталога:\n- `Y` — активен\n- `N` — неактивен ||\n|| **description**\n[`string`](../data-types.md) | Описание ||\n|| **descriptionType**\n[`string`](../data-types.md) | Тип описания. Доступные типы: `text`, `html` ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Parsing Bitrix24 CRM Quote Update Event Payload\nDESCRIPTION: JSON structure representing the event data when a commercial proposal (quote) is updated in Bitrix24 CRM. Contains event details, quote fields, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/quote/events/on-crm-quote-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMQUOTEUPDATE\",\n    \"event_handler_id\": \"749\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"71\"\n        }\n    },\n    \"ts\": \"1743678800\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Удаление отгрузки через cURL (OAuth)\nDESCRIPTION: Пример запроса cURL для удаления отгрузки через OAuth. Необходимо указать ID отгрузки и access token в теле запроса.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":2461,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipment.delete\n```\n\n----------------------------------------\n\nTITLE: Setting Application Options with BX24.appOption.set in JavaScript\nDESCRIPTION: This method sets global settings for the current Bitrix24 application. Only users with application management rights can set application settings. The method accepts a parameter name, value, and an optional callback function that receives current application settings after saving.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/options/bx24-app-option-set.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.appOption.set(string name, mixed value[, Function callback]): void;\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.init(() => {\n    BX24.appOption.set('param_str', 'str1', (params) => console.log(params));\n    BX24.appOption.set('param_numb', 1);\n});\n```\n\n----------------------------------------\n\nTITLE: BX24.selectAccess Method Signatures in JavaScript\nDESCRIPTION: Method signatures for BX24.selectAccess showing the two available calling patterns: with or without the initial value parameter. Both versions require a callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/system-dialogues/bx24-select-access.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nBX24.selectAccess(value: array, callback: callable): void;\nBX24.selectAccess(callback: callable): void;\n```\n\n----------------------------------------\n\nTITLE: Setting Call Card Title in Bitrix24\nDESCRIPTION: This code snippet demonstrates how to set the title of a call card in Bitrix24 using the `CallCardSetCardTitle` method. It calls the `BX24.placement.call` function with the method name and an object containing the `title` property.  The callback function is executed after the title is set.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/page-background-worker/card.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.call('CallCardSetCardTitle', {title: 'Card Title'}, () => { //some code });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Types with cURL Webhook in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use cURL to call the catalog.priceType.list method via a Bitrix24 webhook. It includes filtering, sorting, and field selection.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/price-type/catalog-price-type-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"name\",\"xmlId\"],\"filter\":{\"modifiedBy\":1},\"order\":{\"id\":\"ASC\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.priceType.list\n```\n\n----------------------------------------\n\nTITLE: Updating Userfieldtype in PHP (CRest)\nDESCRIPTION: Demonstrates updating a user field type configuration using CRest library in PHP. Includes method call with configuration parameters and result printing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'userfieldtype.update',\n    [\n        'USER_TYPE_ID' => 'test_type',\n        'HANDLER' => 'https://www.myapplication.com/handler/',\n        'TITLE' => 'Upd ated test type',\n        'DESCRIPTION' => 'Test userfield type for documentation with updated description',\n        'OPTIONS' => [\n            'height' => 60\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: CATALOG.PRICE.ON.UPDATE Event Data Structure in JSON\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when a catalog price is updated. It includes the event name, handler ID, price data, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-price-on-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    'event' => 'CATALOG.PRICE.ON.UPDATE',    \n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 1,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'catalog',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Setting Booking Resource Slots using cURL Webhook in Bitrix24\nDESCRIPTION: This cURL command sets booking resource slots using a webhook. It configures slots for Monday to Friday, 9:00 AM to 6:00 PM, with 30-minute intervals in the Europe/Kaliningrad timezone.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/resource/slots/booking-v1-resource-slots-set.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"resourceId\":10,\"slots\":[{\"from\":540,\"to\":1080,\"timezone\":\"Europe/Kaliningrad\",\"weekDays\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\"],\"slotSize\":30}],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/booking.v1.resource.slots.set\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment List via OAuth - cURL\nDESCRIPTION: Demonstrates authentication and payment list retrieval using OAuth, similar to the webhook approach but with an access token for authorization\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"paySystemXmlId\",\"paySystemIsCash\",\"accountNumber\",\"id\",\"orderId\",\"paid\",\"datePaid\",\"empPaidId\",\"paySystemId\",\"psStatus\",\"psStatusCode\",\"psStatusDescription\",\"psStatusMessage\",\"psSum\",\"psCurrency\",\"psResponseDate\",\"payVoucherNum\",\"payVoucherDate\",\"datePayBefore\",\"dateBill\",\"xmlId\",\"sum\",\"currency\",\"paySystemName\",\"companyId\",\"payReturnNum\",\"priceCod\",\"payReturnDate\",\"empReturnId\",\"payReturnComment\",\"responsibleId\",\"empResponsibleId\",\"dateResponsibleId\",\"isReturn\",\"comments\",\"updated1c\",\"id1c\",\"version1c\",\"externalPayment\",\"psInvoiceId\",\"marked\",\"reasonMarked\",\"dateMarked\",\"empMarkedId\"],\"filter\":{\"<id\":10,\"@personTypeId\":[3,4],\"payed\":\"N\"},\"order\":{\"id\":\"desc\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.payment.list\n```\n\n----------------------------------------\n\nTITLE: Generate File Input Elements in PHP\nDESCRIPTION: This snippet creates HTML file input fields and checks for downloadUrls to append relevant links. It handles both single and multiple file scenarios, enhancing the output with hyperlink elements when needed.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'file':\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'file',\n        ]\n    );\n    if ($arField['isMultiple']) {\n        if (is_array($value)) {\n            foreach ($value as $k => $val) {\n                if (!empty($val['downloadUrl'])) {\n                    $return .= '<br/><a href=\\'' . $val['downloadUrl'] . '\\'>old file ' . $k . '</a>';\n                }\n            }\n        }\n    } else {\n        if (!empty($value['downloadUrl'])) {\n            $return .= '<br/><a href=\\'' . $value['downloadUrl'] . '\\'>old file</a>';\n        }\n    }\n    break;\n```\n\n----------------------------------------\n\nTITLE: Creating Task Dependency Using PHP in Bitrix24\nDESCRIPTION: This PHP snippet shows how to create a task dependency using the CRest library in Bitrix24. It calls the task.dependence.add method with task IDs and link type, then prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/task-dependence-add.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call('task.dependence.add', [\n    'taskIdFrom' => 100,\n    'taskIdTo' => 101,\n    'linkType' => 0,\n]);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Logo Information with JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve timeline logo information using the Bitrix24 JavaScript SDK. It calls the crm.timeline.logo.get method with the logo code parameter and handles the result or error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.timeline.logo.get\",\n    {\n        code: \"info\",\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON block demonstrates an error response from the `sale.shipmentitem.get` method.  It indicates that the requested shipment item does not exist. The `error` field contains the error code, and the `error_description` field provides a human-readable message.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":201240400001,\n    \"error_description\":\"shipment item is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Requisites by User Field using JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to retrieve requisites and display a custom user field. It filters the data by `ID` and selects the `UF_CRM_1707997209` field. Error handling and pagination are included.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n            \"crm.requisite.list\",\n            {\n                order: {},\n                filter: { \"ID\": \"51\"}, // Идентификатор реквизита\n                select: [ \"UF_CRM_1707997209\"] // Идентификатор пользовательского поля\n            },\n            function(result)\n            {\n                if(result.error())\n                    console.error(result.error());\n                else\n                {\n                    console.dir(result.data());    \n                    if(result.more())\n                        result.next();        \n                }\n            }\n        );\n```\n\n----------------------------------------\n\nTITLE: Querying Order Property Fields with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to query order property fields using a webhook. It sends a POST request with the property type specified as 'NUMBER'. Replace the placeholder values with your Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get-fields-by-type.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"type\":\"NUMBER\"}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.property.getfieldsbytype\n```\n\n----------------------------------------\n\nTITLE: Saving request to DB in PHP\nDESCRIPTION: This snippet demonstrates how to save incoming requests into a database table. The request data is stored as a string in the 'data' column, and the initial status is set to 'pending'. This is the first step in implementing a DB-based queue for processing Bitrix24 events.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/performance/queue.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n// Сохраняем запрос в базу данных, больше ничего не делаем!\n$db->query(\"INSERT INTO requests (data, status) VALUES ('$data', 'pending')\");\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON code represents a successful response from the `sale.basketitem.addCatalogProduct` method. It contains details about the created basket item, including its base price, currency, custom price status, and other properties. It also includes overall information about the processing time and the total number of records.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add-catalog-product.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"basketItem\": {\n            \"basePrice\": 1234,\n            \"canBuy\": \"Y\",\n            \"catalogXmlId\": \"FUTURE-1C-CATALOG\",\n            \"currency\": \"RUB\",\n            \"customPrice\": \"N\",\n            \"dateInsert\": \"2024-04-22T16:36:43+02:00\",\n            \"dateUpdate\": \"2024-04-22T16:36:43+02:00\",\n            \"dimensions\": \"a:3:{s:5:\\\"WIDTH\\\";N;s:6:\\\"HEIGHT\\\";N;s:6:\\\"LENGTH\\\";N;}\",\n            \"discountPrice\": 124,\n            \"id\": 6784,\n            \"measureCode\": \"796\",\n            \"measureName\": \"шт\",\n            \"name\": \"Услуга2\",\n            \"orderId\": 5147,\n            \"price\": 1110,\n            \"productId\": 4347,\n            \"productXmlId\": \"4347\",\n            \"properties\": [],\n            \"quantity\": 1,\n            \"reservations\": [],\n            \"sort\": 100,\n            \"type\": 2,\n            \"vatIncluded\": \"N\",\n            \"vatRate\": null,\n            \"weight\": 0,\n            \"xmlId\": \"bx_662675fba6516\"\n        }\n    },\n    \"total\": 1,\n    \"time\": {\n        \"start\": 1713796602.830767,\n        \"finish\": 1713796604.315251,\n        \"duration\": 1.4844841957092285,\n        \"processing\": 0.6749260425567627,\n        \"date_start\": \"2024-04-22T16:36:42+02:00\",\n        \"date_finish\": \"2024-04-22T16:36:44+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for Timeline Log Message Request in Bitrix24 REST API\nDESCRIPTION: This JSON structure shows the successful response format when retrieving a timeline log message. It contains the log message details and execution time information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"logMessage\": {\n            \"id\": 1,\n            \"created\": \"2024-04-03T10:26:32+02:00\",\n            \"authorId\": 1,\n            \"title\": \"Test title\",\n            \"text\": \"Test note\",\n            \"iconCode\": \"info\"\n        }\n    },\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling File Input - PHP\nDESCRIPTION: Creates a file input element and manages multiple file uploads by listing download links if files are provided in an array.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-lead.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$return = CPrintForm ::input(\n    [\n        'NAME' => 'form[' . $key . ']',\n        'REQUIRED' => $arField[ 'isRequired' ],\n        'DISABLE' => $arField[ 'isReadOnly' ],\n        'MULTIPLE' => $arField[ 'isMultiple' ],\n        'VALUE' => $value,\n        'TYPE' => 'file',\n    ]);\nif($arField[ 'isMultiple' ]) \n{\n    if(is_array($value)) \n    {\n        foreach($value as $k => $val) \n        {\n            if(!empty($val[ 'downloadUrl' ])) \n            {\n                $return .= '<br/><a href=\"' . $val[ 'downloadUrl' ] . '\">old file ' . $k . '</a>';\n            }\n        }\n    }\n}\nelse \n{\n    if(!empty($value[ 'downloadUrl' ])) \n    {\n        $return .= '<br/><a href=\"' . $value[ 'downloadUrl' ] . '\">old file</a>';\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update To-Do Description with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates updating a to-do activity's description using a Bitrix24 webhook. It sends a POST request with the activity ID, owner type, owner ID, and the new description in JSON format to the specified webhook URL. The user ID and webhook ID are placeholders that need to be replaced with the actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/todo/crm-activity-todo-update-description.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":999,\"ownerTypeId\":2,\"ownerId\":1,\"value\":\"Новое описание дела\"}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.activity.todo.updateDescription\n```\n\n----------------------------------------\n\nTITLE: Defining Method Parameters for crm.type.add in Markdown\nDESCRIPTION: This snippet defines the main parameter 'fields' for the crm.type.add method, which is used to create a new smart process in Bitrix24 CRM.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-add.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Название**\n`тип`         | **Описание** ||\n|| **fields***\n[`object`][1] | Значения полей (подробное описание приведено [ниже](#parametr-fields)) для добавления нового смарт-процесса ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Удаление AI Engine с использованием Bitrix24 REST API на JavaScript\nDESCRIPTION: Этот код демонстрирует вызов метода ai.engine.unregister для удаления AI engine с кодом 'ivanov_gpt'. Метод требует scope 'ai_admin' и может быть выполнен только администратором. В случае успеха возвращает true.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/ai/ai-engine-unregister.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'ai.engine.unregister',\n    {\n        code: 'ivanov_gpt',\n    },\n    function(result)\n    {\n        if(result.error())\n        {\n            console.error(result.error());\n        }\n        else\n        {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Comment via cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to delete a CRM timeline comment using OAuth authentication. It includes the comment's ID, owner type ID, owner ID, and the OAuth access token in the JSON payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":999,\"ownerTypeId\":2,\"ownerId\":10,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.comment.delete\n```\n\n----------------------------------------\n\nTITLE: Handling OnCalendarEntryAdd Event Data in JSON\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when a calendar entry is added. It includes the event type, handler ID, newly created calendar entry ID, timestamp, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/events/on-calendar-entry-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCALENDARENTRYADD\",\n    \"event_handler_id\": \"3\",\n    \"data\": {\n        \"id\": \"1414\"\n    },\n    \"ts\": \"1734608169\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"calendar\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Sale Property Group with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to update a sale property group's fields using a webhook.  It sets the `Content-Type` and `Accept` headers to `application/json` and includes the group ID and updated fields within the JSON payload.  Replace the placeholder values for the Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-update.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":10,\"fields\":{\"personTypeId\":3,\"name\":\"Обновленная группа свойств\",\"sort\":100}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.propertygroup.update\n```\n\n----------------------------------------\n\nTITLE: Receiving Data for CRM Dynamic List Toolbar\nDESCRIPTION: This code snippet illustrates the data structure received by the handler when a widget is placed in the CRM dynamic list toolbar. It includes information such as domain, protocol, language, application ID, authentication details, member ID, status, and placement code. This data is sent as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/list-toolbar.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => com\\n    [APP_SID] => 30b1cd2ce933551b37c441f8bafc5545\\n    [AUTH_ID] => a9f29f6600631fcd00005a4b00000001f0f107f69952670946852790cb3ec5bd1ab2e9\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 9971c76600631fcd00005a4b00000001f0f1075c07a22a5dc9d29f124040e460ac04b9\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_DYNAMIC_183_LIST_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: CATALOG.PRICE.ON.DELETE Event Data Structure in JSON\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when a price is deleted. It includes event details, price data, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-price-on-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    'event' => 'CATALOG.PRICE.ON.DELETE',    \n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 1,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'catalog',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Using cURL with Webhook to Delete Booking External Data\nDESCRIPTION: Example of a cURL command using a webhook to delete external data connections for a booking. The request requires authentication and the bookingId parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-unset.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"bookingId\":14,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/booking.v1.booking.externalData.unset\n```\n\n----------------------------------------\n\nTITLE: Generate Form Input for CRM Lead ID in PHP\nDESCRIPTION: This snippet checks if a CRM Lead ID value is present and concatenates the lead title to the output string. It assigns the modified output to a variable for further processing. No external libraries are explicitly required, but it depends on the structure of $arResult.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\nif (!empty($arResult['VALUE_LEAD_ID']) && $value == $arResult['VALUE_LEAD_ID']['ID']) {\n    $return .= '(' . $arResult['VALUE_LEAD_ID']['TITLE'] . ')';\n}\nbreak;\n```\n\n----------------------------------------\n\nTITLE: Querying Address Fields with Javascript\nDESCRIPTION: This snippet shows how to retrieve address fields using the BX24 JavaScript library. It calls the crm.address.fields method with an empty parameter object and handles the response in a callback function. The callback checks for errors and logs either the error message or the retrieved data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/addresses/crm-address-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.address.fields\",\n    {},\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Запрос информации об изображении товара через PHP\nDESCRIPTION: Пример использования метода catalog.productImage.get с помощью PHP-библиотеки для работы с REST API Bitrix24. Запрашивает информацию об изображении с id=1 для товара с id=1 и выводит результат.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product-image/catalog-product-image-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.productImage.get',\n    [\n        'productId' => 1,\n        'id' => 1\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Lead Fields via cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to retrieve lead fields using the crm.lead.fields method with OAuth authentication in a cURL request. It sends a JSON payload containing the access token to the Bitrix24 REST API endpoint. Replace placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.lead.fields\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Logo Information with cURL Webhook in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve timeline logo information using a cURL request with a webhook. It requires a Bitrix24 address and webhook credentials, and passes the logo code as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"code\":\"info\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.timeline.logo.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve payment information using the `sale.payment.get` method. It uses the `BX24.callMethod` function to make the API call and handles the response, logging errors or displaying the retrieved data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.payment.get\",\n    {\n        \"id\": 6\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskAdd Event in JavaScript\nDESCRIPTION: This code demonstrates how to subscribe to the OnTaskAdd event using the Bitrix24 JavaScript SDK. It sends a request to event.bind method with the event name and handler URL, then processes the response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-add.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'event.bind',\n    {\n        \"event\": \"onTaskAdd\",\n        \"handler\": \"https://example.com/handler.php\"\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epic Fields with cURL Webhook in Bitrix24 REST API\nDESCRIPTION: This example demonstrates how to call the tasks.api.scrum.epic.getFields method using cURL with a webhook. The method returns all available fields for epics in Bitrix24.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/epic/tasks-api-scrum-epic-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n}' \\\nhttps://your-domain.bitrix24.com/rest/_USER_ID_/_CODE_/tasks.api.scrum.epic.getFields\n```\n\n----------------------------------------\n\nTITLE: Pushing request to Redis queue in PHP\nDESCRIPTION: This snippet demonstrates how to push incoming request data to a Redis queue using the `lPush` command. The request data is JSON-encoded before being added to the 'request_queue' list. This constitutes the handler component for Redis-based queue implementation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/performance/queue.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Сохраняем запрос в базу данных, больше ничего не делаем!\n$redis->lPush('request_queue', json_encode($requestData));\n```\n\n----------------------------------------\n\nTITLE: Deleting Payer Type with cURL (OAuth)\nDESCRIPTION: This cURL command shows how to delete a payer type using OAuth authentication. It sends a POST request to the Bitrix24 REST endpoint including the 'id' of the payer type and the OAuth access token.  Replace placeholders for the Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":5,\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.persontype.delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Fields with cURL (OAuth)\nDESCRIPTION: A cURL HTTP POST request using OAuth authentication to retrieve shipment fields\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipment.getfields\n```\n\n----------------------------------------\n\nTITLE: Initializing Call Card UI States Retrieval in JavaScript\nDESCRIPTION: Demonstrates how to bind an event listener and call the CallCardGetListUiStates method to retrieve available UI states for a call card\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/page-background-worker/call-card-get-list-ui-states.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.bindEvent('BackgroundCallCard::initialized', event => {\n    BX24.placement.call('CallCardGetListUiStates', data => {\n        // some code\n    })\n});\n```\n\n----------------------------------------\n\nTITLE: Example Response JSON Structure for Timeline Content Blocks\nDESCRIPTION: Sample JSON response showing the structure of content blocks returned by the API, including text blocks, large text blocks, links with actions, and blocks with titles.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/crm-timeline-layout-blocks-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"layout\": {\n        \"blocks\": {\n            \"block_1\": {\n                \"type\": \"text\",\n                \"properties\": {\n                    \"value\": \"Здравствуйте!\\nМы начинаем.\",\n                    \"multiline\": true,\n                    \"bold\": true,\n                    \"color\": \"base_90\"\n                }\n            },\n            \"block_2\": {\n                \"type\": \"largeText\",\n                \"properties\": {\n                    \"value\": \"Здравствуйте!\\nМы начинаем.\\nМы продолжаем.\\nМы все еще работаем над этим.\\nМы продолжаем.\\nМы близки к результату.\\nДо свидания.\"\n                }\n            },\n            \"block_3\": {\n                \"type\": \"link\",\n                \"properties\": {\n                    \"text\": \"Открыть сделку\",\n                    \"bold\": true,\n                    \"action\": {\n                        \"type\": \"redirect\",\n                        \"uri\": \"/crm/deal/details/123/\"\n                    }\n                }\n            },\n            \"block_4\": {\n                \"type\": \"withTitle\",\n                \"properties\": {\n                    \"title\": \"Заголовок\",\n                    \"block\": {\n                        \"type\": \"text\",\n                        \"properties\": {\n                            \"value\": \"Какое-то значение\"\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskDelete Event using JavaScript in Bitrix24\nDESCRIPTION: JavaScript example that shows how to subscribe to the onTaskDelete event in Bitrix24. The code uses the BX24.callMethod API to register a handler URL that will be called when tasks are deleted.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'event.bind',\n    {\n        \"event\": \"onTaskDelete\",\n        \"handler\": \"https://example.com/handler.php\"\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Sale Person Types with cURL (OAuth)\nDESCRIPTION: An example of using cURL to call the sale.persontype.list method via OAuth authentication, with filtering and ordering options for person types\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\", \"name\", \"sort\"],\"filter\":{\"<=sort\":100},\"order\":{\"sort\":\"DESC\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.persontype.list\n```\n\n----------------------------------------\n\nTITLE: Структура ответа при успешном создании дочерней папки в Bitrix24 Disk\nDESCRIPTION: Этот JSON представляет структуру ответа при успешном выполнении метода disk.folder.addsubfolder. Ответ содержит информацию о созданной папке, включая ее ID, имя, тип, родительскую папку, время создания и обновления, а также URL для доступа к папке.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/folder/disk-folder-add-subfolder.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"result\":{\n    \"ID\": \"13\",\n    \"NAME\": \"New sub folder\",\n    \"CODE\": null,\n    \"STORAGE_ID\": \"4\",\n    \"TYPE\": \"folder\",\n    \"PARENT_ID\": \"8\",\n    \"DELETED_TYPE\": \"0\",\n    \"CREATE_TIME\": \"2015-04-24T12:39:35+03:00\",\n    \"UPDATE_TIME\": \"2015-04-24T12:39:35+03:00\",\n    \"DELETE_TIME\": null,\n    \"CREATED_BY\": \"1\",\n    \"UPDATED_BY\": \"1\",\n    \"DELETED_BY\": \"0\",\n    \"DETAIL_URL\": \"https://test.bitrix24.ru/workgroups/group/3/disk/path/New/\"\n}\n```\n\n----------------------------------------\n\nTITLE: Utility Methods for Field Validation and Data Retrieval in Bitrix24 Integration\nDESCRIPTION: This set of utility methods handles field validation, data retrieval, and alert rendering for the Bitrix24 REST API integration. It includes functions to validate entity and item IDs, get specific data fields, and display alerts.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nvalidateFieldsWithAlerts()\n{\n    if (!this.validateEntityTypeIdAndEntityId())\n    {\n        return false;\n    }\n    const itemId = this.getItemId();\n    if (!itemId)\n    {\n        alert('Введите ID Дела/Записи таймлайна');\n        this.#itemIdNode.focus();\n        return false;\n    }\n    return true;\n}\n\nvalidateEntityTypeIdAndEntityId()\n{\n    const entityId = this.getEntityId();\n    if (!entityId)\n    {\n        alert('Введите ID Родительской сущности');\n        this.#entityIdNode.focus();\n        return false;\n    }\n    if (!ALLOWED_ITEM_TYPES.includes(this.getItemTypeId()))\n    {\n        alert('Выберите корректное значение для типа сущности к которой будут добавлены конфигурационные блоки');\n        this.#itemTypeIdNode.focus();\n        return false;\n    }\n    return true;\n}\n\ngetData()\n{\n    return {\n        entityTypeId: this.getEntityTypeId(),\n        entityId: this.getEntityId(),\n        [this.getItemFieldName()]: this.getItemId(),\n    };\n}\n\ngetMethod(method)\n{\n    return METHODS_MAP[this.getItemTypeId()][method];\n}\n\ngetEntityTypeId()\n{\n    return Number.parseInt(this.#entityTypeIdNode.value, 10);\n}\n\ngetEntityId()\n{\n    return Number.parseInt(this.#entityIdNode.value, 10);\n}\n\ngetItemTypeId()\n{\n    return Number.parseInt(this.#itemTypeIdNode.value, 10);\n}\n\ngetItemId()\n{\n    return Number.parseInt(this.#itemIdNode.value, 10);\n}\n\ngetItemFieldName()\n{\n    return METHODS_MAP[this.getItemTypeId()].itemField;\n}\n\nrenderAlert(message, classList)\n{\n    const alert = document.createElement('div');\n    alert.className = classList;\n    alert.setAttribute('role', 'alert');\n    const time = (new Date()).toLocaleTimeString();\n    alert.innerText = `[${time}] ${message}`;\n    this.#statusContainer.innerHTML = '';\n    this.#statusContainer.append(alert);\n}\n\nrenderDangerAlert(message)\n{\n    this.renderAlert(message, 'alert alert-danger');\n}\n\nrenderSuccessAlert(message)\n{\n    this.renderAlert(message, 'alert alert-success')\n}\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Requisite Countries with cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to retrieve the list of countries using the crm.requisite.preset.countries method via a cURL request with OAuth authentication.  Replace the placeholders with your actual Bitrix24 address and access token. The access token is passed in the 'auth' parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/crm-requisite-preset-countries.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.preset.countries\n```\n\n----------------------------------------\n\nTITLE: CRM Quote List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_QUOTE_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, placement, and placement options. The PLACEMENT_OPTIONS contains the ID of the quote.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => c1228e789d5052287ceb321fe7b3377a\n    [AUTH_ID] => d3e99f6600631fcd00005a4b00000001f0f1079f90c8cd4e3f2726ab8ea7a40888c844\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => c368c76600631fcd00005a4b00000001f0f107d077746104d8e477278da715f3ea28cf\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => CRM_QUOTE_LIST_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"5\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: PHP Header and Placement Options Parsing\nDESCRIPTION: This PHP snippet sets the Content-Type header to UTF-8 and parses the `PLACEMENT_OPTIONS` from the `$_REQUEST` array to determine if the application is running in force mode.  The force mode flag is used to change the behavior of certain UI elements.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    header('Content-Type: text/html; charset=UTF-8');\n    $placementOptions = json_decode($_REQUEST['PLACEMENT_OPTIONS'] ?? '', true);\n    $forceMode = ($placementOptions['force_mode'] ?? null) === 'Y';\n?>\n```\n\n----------------------------------------\n\nTITLE: Defining Timeline Block Presets\nDESCRIPTION: This code defines an array of ContentBlockPreset objects for use in a timeline editor. It includes a preset for \"boldText\" and \"Deadline\". The boldText preset contains properties for the displayed value and setting the text to bold, while the Deadline preset marks the deadline as readonly.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n presets,\n        );\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Unfiltered Task History with JavaScript in Bitrix24\nDESCRIPTION: This snippet shows how to call the task.planner.getlist method to retrieve the history of a specific task without using any filters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/tasks-task-history-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'task.planner.getlist',\n    [],\n    function(result)\n    {\n        console.info(result.data());\n        console.log(result);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Update delivery request with JavaScript (BX24.callMethod)\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to update a delivery request. It specifies parameters such as delivery ID, request ID, status, and properties. The code also includes a callback function to handle the result, logging any errors or displaying the returned data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery-request/sale-delivery-request-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'sale.delivery.request.update', {\n            DELIVERY_ID: 225,\n            REQUEST_ID: \"4757aca4931a4f029f49c0db4374d13d\",\n            STATUS: {\n                TEXT: \"Performer found\",\n                SEMANTIC: \"process\",\n            },\n            PROPERTIES: [{\n                    NAME: \"Car\",\n                    VALUE: \"Gray Skoda Octavia, a777zn\",\n                },\n                {\n                    NAME: \"Driver\",\n                    VALUE: \"John Smith\",\n                },\n                {\n                    NAME: \"Phone Number\",\n                    VALUE: \"+11111111111\",\n                    TAGS: [\n                        \"phone\"\n                    ],\n                },\n                {\n                    NAME: \"Something else\",\n                    VALUE: \"Some value\",\n                },\n            ],\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Setting Contact Details Configuration via CRest::call (PHP)\nDESCRIPTION: This PHP snippet demonstrates setting the contact details configuration for a specific user using the `CRest::call` function. It defines the sections and elements with their options and prints the result. It depends on the `crest.php` library for interacting with the Bitrix24 REST API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-set.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.details.configuration.set',\n    [\n        'userId' => 1,\n        'data' => [\n            [\n                'name' => 'section_1',\n                'title' => 'Личные данные',\n                'type' => 'section',\n                'elements' => [\n                    [\n                        'name' => 'NAME',\n                        'optionFlags' => 1,\n                    ],\n                    [\n                        'name' => 'LAST_NAME',\n                        'optionFlags' => 1,\n                    ],\n                    [\n                        'name' => 'SECOND_NAME',\n                    ],\n                    [\n                        'name' => 'BIRTHDATE',\n                    ],\n                    [\n                        'name' => 'PHONE',\n                        'optionFlags' => 1,\n                        'options' => [\n                            'defaultCountry' => 'GB',\n                        ],\n                    ],\n                    [\n                        'name' => 'ADDRESS',\n                        'optionFlags' => 1,\n                        'options' => [\n                            'defaultAddressType' => 4,\n                        ],\n                    ],\n                ],\n            ],\n            [\n                'name' => 'section_2',\n                'title' => 'Основная информация',\n                'type' => 'section',\n                'elements' => [\n                    ['name' => 'TYPE_ID'],\n                    ['name' => 'SOURCE_ID'],\n                    ['name' => 'POST'],\n                ],\n            ],\n            [\n                'name' => 'section_3',\n                'title' => 'Дополнительная информация',\n                'type' => 'section',\n                'elements' => [\n                    ['name' => 'PHOTO'],\n                    ['name' => 'COMMENTS'],\n                    ['name' => 'UF_CRM_1720697698689'],\n                ],\n            ],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Property Variant with JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve a property variant using JavaScript with the Bitrix24 API. It uses the `BX24.callMethod` function to call the `sale.propertyvariant.get` method with the `id` parameter. The result is handled within the callback function to check for errors and display the data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.propertyvariant.get\", {\n        \"id\": 6\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment via Webhook with cURL\nDESCRIPTION: This cURL command demonstrates how to retrieve payment information using the `sale.payment.get` method via Webhook authentication. It sends a POST request with the payment ID in JSON format to the specified Bitrix24 address.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":6}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.payment.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Landing Page Widgets with PHP in Bitrix24\nDESCRIPTION: This snippet shows how to use the landing.repowidget.getlist method in PHP for Bitrix24. It fetches widgets with IDs greater than 1, selecting only the ID and NAME fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/vibe/landing-repowidget-get-list.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'landing.repowidget.getList',\n    [\n        'params' => [\n            'select' => ['ID', 'NAME'],\n            'filter' => [\n                '>ID' => '1'\n            ]\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful Response Structure for disk.file.get Method\nDESCRIPTION: This JSON structure represents the successful response from the disk.file.get method. It includes various file properties such as ID, name, storage details, creation and modification timestamps, and download URLs.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/file/disk-file-get.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"result\": {\n    \"ID\": \"10\",\n    \"NAME\": \"2511.jpg\",\n    \"CODE\": null,\n    \"STORAGE_ID\": \"4\",\n    \"TYPE\": \"file\",\n    \"PARENT_ID\": \"8\",\n    \"DELETED_TYPE\": \"0\",\n    \"CREATE_TIME\": \"2015-04-24T10:41:51+03:00\",\n    \"UPDATE_TIME\": \"2015-04-24T15:52:43+03:00\",\n    \"DELETE_TIME\": null,\n    \"CREATED_BY\": \"1\",\n    \"UPDATED_BY\": \"1\",\n    \"DELETED_BY\": \"0\",\n    \"DOWNLOAD_URL\": \"https://test.bitrix24.ru/disk/downloadFile/10/?&ncc=1&filename=2511.jpg&auth=******\",\n    \"DETAIL_URL\": \"https://test.bitrix24.ru/workgroups/group/3/disk/file/2511.jpg\"\n}\n```\n\n----------------------------------------\n\nTITLE: Executing REST API Request with Curl (Webhook)\nDESCRIPTION: This snippet shows how to execute a REST API call to Bitrix24 using curl and an incoming webhook. It sets the Content-Type header to application/json and includes the webhook's user ID and code in the URL.  It adds a new deal with given fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/how-to-use-examples.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"fields\": {\n\"title\": \"New Deal\",\n\"typeId\": \"SALE\",\n\"stageId\": \"NEW\"\n}\n}' \\\nhttps://your-domain.bitrix24.com/rest/_USER_ID_/_CODE_/crm.deal.add.json\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response from CRM Timeline Comments API\nDESCRIPTION: Sample JSON response from the crm.timeline.comment.list method showing the structure of returned data, including comment details, attached files, and metadata.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n            \"ID\": \"999\",\n            \"ENTITY_ID\": \"2\",\n            \"ENTITY_TYPE\": \"deal\",\n            \"CREATED\": \"2020-03-02T12:00:00+03:00\",\n            \"COMMENT\": \"New comment was added\",\n            \"AUTHOR_ID\": \"1\",\n            \"FILES\": {\n                \"1\": {\n                    \"id\": 1,\n                    \"date\": \"2020-03-02T12:00:00+03:00\",\n                    \"type\": \"image\",\n                    \"name\": \"1.gif\",\n                    \"size\": 43,\n                    \"image\": {\n                        \"width\": 1,\n                        \"height\": 1\n                    },\n                    \"authorId\": 1,\n                    \"authorName\": \"John Dou\",\n                    \"urlPreview\": \"https://my.bitrix24.com/disk/showFile/930/?&ncc=1&width=640&height=640&signature=292f450929833cd881070155e05a2c41b5bb265ea8c8c1bc2108dbcbb56f667f&ts=1718366521&filename=1.gif\",\n                    \"urlShow\": \"https://my.bitrix24.com/disk/showFile/930/?&ncc=1&ts=1718366521&filename=1.gif\",\n                    \"urlDownload\": \"https://my.bitrix24.com/disk/downloadFile/930/?&ncc=1&filename=1.gif\"\n                },\n                \"2\": {\n                    \"id\": 2,\n                    \"date\": \"2020-03-02T12:00:00+03:00\",\n                    \"type\": \"image\",\n                    \"name\": \"2.gif\",\n                    \"size\": 43,\n                    \"image\": {\n                        \"width\": 1,\n                        \"height\": 1\n                    },\n                    \"authorId\": 1,\n                    \"authorName\": \"John Dou\",\n                    \"urlPreview\": \"https://my.bitrix24.com/disk/showFile/931/?&ncc=1&width=640&height=640&signature=118de010a40eff06fb9d691ee9235e2ef809a17780e46927bf8b12f8dc3224db&ts=1718366521&filename=2.gif\",\n                    \"urlShow\": \"https://my.bitrix24.com/disk/showFile/931/?&ncc=1&ts=1718366521&filename=2.gif\",\n                    \"urlDownload\": \"https://my.bitrix24.com/disk/downloadFile/931/?&ncc=1&filename=2.gif\"\n                }\n            },\n        },\n        {\n            \"ID\": \"1000\",\n            \"ENTITY_ID\": \"2\",\n            \"ENTITY_TYPE\": \"deal\",\n            \"CREATED\": \"2020-03-02T12:00:00+03:00\",\n            \"COMMENT\": \"Test comment\",\n            \"AUTHOR_ID\": \"1\",\n            \"FILES\": {},\n        }\n    ],\n    \"total\": 2,\n    \"time\": {\n        \"start\": 1715091541.642592,\n        \"finish\": 1715091541.730599,\n        \"duration\": 0.08800697326660156,\n        \"date_start\": \"2024-05-03T17:19:01+03:00\",\n        \"date_finish\": \"2024-05-03T17:19:01+03:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting a custom field from a preset using cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to delete a custom field from a preset using the OAuth authentication method. It sends a POST request to the Bitrix24 REST API endpoint with the ID of the field, the preset, and the access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":27,\"preset\":{\"ID\":1},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.preset.field.delete\n```\n\n----------------------------------------\n\nTITLE: CRM Lead List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_LEAD_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, placement, and placement options. The PLACEMENT_OPTIONS contains the ID of the lead.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => 37430843b6a2ce62aea9be09c34d9e6d\n    [AUTH_ID] => 39e69f6600631fcd00005a4b00000001f0f10738741fe7296291110a2e9788a33216cf\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => 2965c76600631fcd00005a4b00000001f0f107cdf3226bebc47f89d1b0f15608e44b14\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => CRM_LEAD_LIST_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"6591\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskCommentUpdate Event with JavaScript\nDESCRIPTION: JavaScript example showing how to subscribe to the OnTaskCommentUpdate event using the BX24 API. The code registers a handler URL that will be called whenever a comment is updated in a task.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/comment-item/events-comment/on-task-comment-update.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'event.bind',\n    {\n        \"event\": \"OnTaskCommentUpdate\",\n        \"handler\": \"https://example.com/handler.php\"\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Successful API Response for Contact Company Association Setting\nDESCRIPTION: Example of a successful JSON response returned by the Bitrix24 API after setting contact company associations, including time processing details\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-items-set.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1724139480.073569,\n        \"finish\": 1724139481.016709,\n        \"duration\": 0.9431400299072266,\n        \"processing\": 0.4230809211730957,\n        \"date_start\": \"2024-08-20T09:38:00+02:00\",\n        \"date_finish\": \"2024-08-20T09:38:01+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Payer Type with PHP\nDESCRIPTION: This PHP code shows how to delete a payer type using the `CRest::call` function.  It includes the `crest.php` library for interacting with the Bitrix24 REST API, then calls `sale.persontype.delete` with the payer type's 'id' and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.persontype.delete',\n        [\n            'id' => 5\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet shows an example of a successful response after adding a delivery handler. It includes the ID of the created handler in the `result` field and information about the request's execution time in the `time` field.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-add.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"result\":14,\n   \"time\":{\n      \"start\":1713872092.378366,\n      \"finish\":1713872092.691408,\n      \"duration\":0.31304192543029785,\n      \"processing\":0.015096187591552734,\n      \"date_start\":\"2024-04-23T14:34:52+03:00\",\n      \"date_finish\":\"2024-04-23T14:34:52+03:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Item Data with Bitrix24 REST API\nDESCRIPTION: This method deletes data for a specific CRM timeline item using the Bitrix24 REST API. It validates input fields, calls the appropriate API method to delete the item, and clears the JSON editor upon success.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\ndeleteAction()\n{\n    const isValid = this.validateFieldsWithAlerts();\n    if (!isValid)\n    {\n        return;\n    }\n    const method = this.getMethod('delete');\n    const data = this.getData();\n    const callback = (result) => {\n        this.stopLoading();\n        if (result.error())\n        {\n            this.renderDangerAlert(result.error());\n            return;\n        }\n        this.renderSuccessAlert(\"Дополнительные контентные блоки успешно удалены ;)\");\n        this.#jsonEditor.set({});\n    };\n    this.loading();\n    BX24.callMethod(method, data, callback);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flow using cURL (oAuth)\nDESCRIPTION: This snippet shows how to create a new flow using a cURL request with OAuth authentication. It includes the authorization header and JSON payload for the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-create.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Authorization: Bearer YOUR_ACCESS_TOKEN\" \\\n-d '{\n    \"flowData\": {\n        \"name\": \"Unique Flow Name\",\n        \"description\": \"Описание потока\",\n        \"plannedCompletionTime\": 7200,\n        \"distributionType\": \"manually\",\n        \"responsibleList\": [{\"user\":\"3\"}],\n        \"taskCreators\": [{\"meta-user\":\"all-users\"}],\n        \"matchWorkTime\": 1,\n        \"notifyAtHalfTime\": 0\n    }\n}' \\\nhttps://your-domain.bitrix24.com/rest/tasks.flow.Flow.create\n```\n\n----------------------------------------\n\nTITLE: Process CRM Contact Information in PHP\nDESCRIPTION: This code retrieves CRM contact information, either from a pre-existing result set or by making an API call if necessary. It utilizes CPrintForm::input to generate an HTML text field for contact data, concatenating the contact's names to the output string.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'crm_contact':\n    $arContact = [];\n    if (!empty($arResult['VALUE_' . $key])) {\n        $arContact = $arResult['VALUE_' . $key];\n    } elseif (!empty($value)) {\n        $arContact = CRest::get('crm.contact.list', ['filter' => ['ID' => $value]]);\n    }\n\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'text',\n        ]\n    );\n    if (!empty($arContact['result'])) {\n        $return .= '(';\n        $i = 0;\n        foreach ($arContact['result'] as $val) {\n            $i++;\n            if ($i > 1) {\n                $return .= ', ';\n            }\n            $return .= implode(' ', [$val['NAME'], $val['LAST_NAME']]);\n        }\n        $return .= ')';\n    }\n    break;\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This is an example of a successful JSON response from the Bitrix24 REST API after updating a CRM lead. It contains a `result` field indicating success and a `time` field with information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-update.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1705764932.998683,\n        \"finish\": 1705764937.173995,\n        \"duration\": 4.1753120422363281,\n        \"processing\": 3.3076529502868652,\n        \"date_start\": \"2024-01-20T18:35:32+03:00\",\n        \"date_finish\": \"2024-01-20T18:35:37+03:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CRM Activity List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_ACTIVITY_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, placement, and placement options. The PLACEMENT_OPTIONS contains the ID of the activity.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => a29cf633b74509437b3873a57d138f10\n    [AUTH_ID] => 30ea9f6600631fcd00005a4b00000001f0f107450fd57122ecc7d9e58f894b3fb2c57f\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => 2069c76600631fcd00005a4b00000001f0f107bd1492748f20b4a006e2a35f9f7c0b6d\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => CRM_ACTIVITY_LIST_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"1465\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Reset Common Configuration using cURL OAuth\nDESCRIPTION: This snippet demonstrates how to reset the common configuration for contact details using a cURL request with OAuth in Bitrix24. It sends a POST request to the specified endpoint with the `scope` parameter set to \"C\" and includes the OAuth `auth` token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"scope\":\"C\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.details.configuration.reset\n```\n\n----------------------------------------\n\nTITLE: CRM Payment Product Management REST Methods\nDESCRIPTION: REST API methods for adding, listing, deleting, and modifying product items in payments within the Bitrix24 CRM system\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/invoice.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\ncrm.item.payment.product.add\ncrm.item.payment.product.list\ncrm.item.payment.product.delete\ncrm.item.payment.product.setQuantity\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epic Fields with PHP in Bitrix24 REST API\nDESCRIPTION: This PHP example shows how to call the tasks.api.scrum.epic.getFields method using the CRest PHP SDK. The code handles the response to either display errors or print the available epic fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/epic/tasks-api-scrum-epic-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php'); // подключение CRest PHP SDK\n\n// выполнение запроса к REST API\n$result = CRest::call(\n'tasks.api.scrum.epic.getFields',\n[]\n);\n\n// Обработка ответа от Битрикс24\nif ($result['error']) {\n    echo 'Error: '.$result['error_description'];\n}\nelse {\n    print_r($result['result']);\n}\n```\n\n----------------------------------------\n\nTITLE: Subscribing to OnTaskDelete Event using PHP in Bitrix24\nDESCRIPTION: PHP example that demonstrates how to subscribe to the onTaskDelete event in Bitrix24. The code uses the CRest::call method to register a handler URL that will receive notifications when tasks are deleted.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'event.bind',\n    [\n        'event' => 'onTaskDelete',\n        'handler' => 'https://example.com/handler.php'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Offline Events using cURL in Bitrix24 REST API\nDESCRIPTION: This cURL command demonstrates how to call the event.offline.get method to retrieve offline events with specific filter criteria. It includes authentication and specifies the filter parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/events/event-offline-get.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n    \"filter\": {\n        \"=MESSAGE_ID\": 1,\n        \"=EVENT_NAME\": \"ONCRMLEADADD\",\n        \">=ID\": 1\n    },\n    \"auth\": \"**put_access_token_here**\"\n}' \\\nhttps://**put_your_bitrix24_address**/rest/event.offline.get\n```\n\n----------------------------------------\n\nTITLE: Updating Delivery Service Config via cURL OAuth\nDESCRIPTION: Demonstrates updating delivery service configuration using cURL with OAuth authentication. Requires Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery/sale-delivery-config-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":196,\"CONFIG\":[{\"CODE\":\"SETTING_1\",\"VALUE\":\"New SETTING_1 string value\"},{\"CODE\":\"SETTING_2\",\"VALUE\":\"N\"},{\"CODE\":\"SETTING_3\",\"VALUE\":999.99},{\"CODE\":\"SETTING_4\",\"VALUE\":\"Option2Code\"},{\"CODE\":\"SETTING_5\",\"VALUE\":\"25.03.2023\"},{\"CODE\":\"SETTING_6\",\"VALUE\":\"0000144962\"},],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.delivery.config.update\n```\n\n----------------------------------------\n\nTITLE: Получение списка свойств заказа через PHP с использованием CRest\nDESCRIPTION: PHP-метод для получения свойств заказа с фильтрацией по коду EMAIL и сортировкой по идентификатору с использованием библиотеки CRest\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-list.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.property.list',\n    [\n        'select' => [\n            \"id\",\n            \"active\",\n            \"code\",\n            \"defaultValue\",\n            \"description\",\n            \"inputFieldLocation\",\n            \"isAddress\",\n            \"isAddressFrom\",\n            \"isAddressTo\",\n            \"isEmail\",\n            \"isFiltered\",\n            \"isLocation\",\n            \"isLocation4tax\",\n            \"isPayer\",\n            \"isPhone\",\n            \"isProfileName\",\n            \"isZip\",\n            \"multiple\",\n            \"name\",\n            \"personTypeId\",\n            \"propsGroupId\",\n            \"required\",\n            \"settings\",\n            \"sort\",\n            \"type\",\n            \"userProps\",\n            \"util\",\n            \"xmlId\",\n        ],\n        'filter' => [\n            \"@type\" => \"STRING\",\n            \"%code\" => \"EMAIL\",\n        ],\n        'order' => [\n            \"id\" => \"desc\",\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status Localization Fields with PHP REST Client\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve available fields for status localizations using the CRest PHP client. It calls the sale.statuslang.getfields method and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status-lang/sale-status-lang-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.statuslang.getfields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Get Contact User Field via cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to retrieve a contact user field using cURL with OAuth authentication. The request includes the 'auth' parameter with the access token. Ensure to replace placeholders with your Bitrix24 address and the actual access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":399,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.userfield.get\n```\n\n----------------------------------------\n\nTITLE: Querying Shipment List with cURL (OAuth)\nDESCRIPTION: This snippet shows how to query the shipment list using the `sale.shipment.list` method via cURL with OAuth 2.0 authentication.  It includes the selection of fields, filtering, and ordering parameters.  Make sure to replace the placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-list.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"accountNumber\",\"allowDelivery\",\"basePriceDelivery\",\"canceled\",\"comments\",\"companyId\",\"currency\",\"customPriceDelivery\",\"dateAllowDelivery\",\"dateCanceled\",\"dateDeducted\",\"dateInsert\",\"dateMarked\",\"dateResponsibleId\",\"deducted\",\"deliveryDocDate\",\"deliveryDocNum\",\"deliveryId\",\"deliveryName\",\"deliveryXmlId\",\"discountPrice\",\"empAllowDeliveryId\",\"empCanceledId\",\"empDeductedId\",\"empMarkedId\",\"empResponsibleId\",\"externalDelivery\",\"id1c\",\"marked\",\"orderId\",\"priceDelivery\",\"reasonMarked\",\"reasonUndoDeducted\",\"responsibleId\",\"statusId\",\"statusXmlId\",\"system\",\"trackingDescription\",\"trackingLastCheck\",\"trackingNumber\",\"trackingStatus\",\"updated1c\",\"version1c\",\"xmlId\"],\"filter\":{\"@orderId\":[2069,2070],\">=id\":2464},\"order\":{\"id\":\"desc\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipment.list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Business Value Person Domain in cURL (Webhook)\nDESCRIPTION: Example cURL request to retrieve business value person domains using a webhook, with filtering and ordering options\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/business-value-person-domain/sale-business-value-person-domain-list.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"personTypeId\"],\"filter\":{\"=domain\":\"I\"},\"order\":{\"personTypeId\":\"DESC\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.businessValuePersonDomain.list\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: Example of a successful JSON response from the crm.requisite.update method.  The 'result' field indicates success, and the 'time' field provides information about the request execution time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1717163055.335685,\n        \"finish\": 1717163055.892722,\n        \"duration\": 0.5570368766784668,\n        \"processing\": 0.17116189002990723,\n        \"date_start\": \"2024-05-31T15:44:15+02:00\",\n        \"date_finish\": \"2024-05-31T15:44:15+02:00\",\n        \"operating\": 0.17112517356872559\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for CATALOG.PRODUCT.ON.ADD in JSON\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when a product is added to the catalog. It includes event details, product fields, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-product-on-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"event\" => \"CATALOG.PRODUCT.ON.ADD\",    \n    \"event_handler_id\" => 1,\n    \"data\" => [\n        \"FIELDS\" => [\n            \"ID\" => 1,            \n            \"TYPE\" => 1,\n        ],\n    ],\n    \"ts\" => 1714649632,\n    \"auth\" => [\n        \"access_token\" => \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\" => 3600,\n        \"scope\" => \"catalog\",\n        \"domain\" => \"some-domain.bitrix24.com\",\n        \"server_endpoint\" => \"https://oauth.bitrix.info/rest/\",\n        \"status\" => \"F\",\n        \"client_endpoint\" => \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\" => \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\" => \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\" => \"51856fefc120afa4b628cc82d3935cce\",\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Response example\nDESCRIPTION: This is an example of the JSON response returned by the `crm.lead.get` method. It contains lead details such as ID, title, contact information, status, and other related fields. The `time` property includes request processing time details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"result\": {\n    \"ID\": \"123\",\n    \"TITLE\": \"Лид #1591\",\n    \"HONORIFIC\": null,\n    \"NAME\": \"\",\n    \"SECOND_NAME\": null,\n    \"LAST_NAME\": null,\n    \"COMPANY_TITLE\": null,\n    \"COMPANY_ID\": null,\n    \"CONTACT_ID\": null,\n    \"IS_RETURN_CUSTOMER\": \"N\",\n    \"BIRTHDATE\": \"\",\n    \"SOURCE_ID\": \"1\",\n    \"SOURCE_DESCRIPTION\": null,\n    \"STATUS_ID\": \"IN_PROCESS\",\n    \"STATUS_DESCRIPTION\": null,\n    \"POST\": null,\n    \"COMMENTS\": null,\n    \"CURRENCY_ID\": \"RUB\",\n    \"OPPORTUNITY\": \"0.00\",\n    \"IS_MANUAL_OPPORTUNITY\": \"N\",\n    \"HAS_PHONE\": \"N\",\n    \"HAS_EMAIL\": \"N\",\n    \"HAS_IMOL\": \"N\",\n    \"ASSIGNED_BY_ID\": \"1\",\n    \"CREATED_BY_ID\": \"1\",\n    \"MODIFY_BY_ID\": \"1\",\n    \"DATE_CREATE\": \"2024-05-23T18:18:25+03:00\",\n    \"DATE_MODIFY\": \"2024-05-23T18:18:25+03:00\",\n    \"DATE_CLOSED\": \"\",\n    \"STATUS_SEMANTIC_ID\": \"P\",\n    \"OPENED\": \"Y\",\n    \"ORIGINATOR_ID\": null,\n    \"ORIGIN_ID\": null,\n    \"MOVED_BY_ID\": \"1\",\n    \"MOVED_TIME\": \"2024-05-23T18:18:25+03:00\",\n    \"ADDRESS\": null,\n    \"ADDRESS_2\": null,\n    \"ADDRESS_CITY\": null,\n    \"ADDRESS_POSTAL_CODE\": null,\n    \"ADDRESS_REGION\": null,\n    \"ADDRESS_PROVINCE\": null,\n    \"ADDRESS_COUNTRY\": null,\n    \"ADDRESS_COUNTRY_CODE\": null,\n    \"ADDRESS_LOC_ADDR_ID\": null,\n    \"UTM_SOURCE\": null,\n    \"UTM_MEDIUM\": null,\n    \"UTM_CAMPAIGN\": null,\n    \"UTM_CONTENT\": null,\n    \"UTM_TERM\": null,\n    \"LAST_ACTIVITY_BY\": \"1\",\n    \"LAST_ACTIVITY_TIME\": \"2024-05-23T18:18:25+03:00\",\n    \"PHONE\": [\n      {\n        \"ID\": \"11658\",\n        \"VALUE_TYPE\": \"OTHER\",\n        \"VALUE\": \"+5454777777\",\n        \"TYPE_ID\": \"PHONE\"\n      }\n    ],\n    \"IM\": [\n      {\n        \"ID\": \"11660\",\n        \"VALUE_TYPE\": \"OPENLINE\",\n        \"VALUE\": \"imol|livechat|1|67|21\",\n        \"TYPE_ID\": \"IM\"\n      }\n    ]\n  },\n  \"time\": {\n      \"start\": 1705764932.998683,\n      \"finish\": 1705764937.173995,\n      \"duration\": 4.1753120422363281,\n      \"processing\": 3.3076529502868652,\n      \"date_start\": \"2024-01-20T18:35:32+03:00\",\n      \"date_finish\": \"2024-01-20T18:35:37+03:00\",\n      \"operating_reset_at\": 1705765533,\n      \"operating\": 3.3076241016387939\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Debug Logging Function in PHP\nDESCRIPTION: Utility function to write debug information to a log file. Takes data to log and an optional title parameter. Formats the log entry with timestamp and writes to tel.log file in the current working directory.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/telephony/index.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\nfunction writeToLog($data, $title = '') {\n    $log = \"\\n------------------------\\n\";\n    $log .= date(\"Y.m.d G:i:s\") . \"\\n\";\n    $log .= (strlen($title) > 0 ? $title : 'DEBUG') . \"\\n\";\n    $log .= print_r($data, 1);\n    $log .= \"\\n------------------------\\n\";\n    file_put_contents(getcwd() . '/tel.log', $log, FILE_APPEND);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Удаление бизнес-процесса через PHP (B24PhpSdk) в Bitrix24\nDESCRIPTION: Пример использования метода bizproc.workflow.kill с помощью B24PhpSdk. Метод принимает ID бизнес-процесса, выполняет запрос и обрабатывает результат или ошибку.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-workflow-kill.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n    $workflowId = 'your_workflow_id'; // Replace with your actual workflow ID\n    $result = $serviceBuilder->getBizProcScope()\n        ->workflow()\n        ->kill($workflowId);\n    if ($result->isSuccess()) {\n        print_r($result->getCoreResponse()->getResponseData()->getResult());\n    } else {\n        print('Failed to kill workflow: ' . json_encode($result->getCoreResponse()->getResponseData()->getResult()));\n    }\n} catch (Throwable $e) {\n    print('Error occurred: ' . $e->getMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Services with cURL (Webhook)\nDESCRIPTION: This snippet shows how to query extra delivery services using cURL with Webhook authentication. It sends a POST request with the DELIVERY_ID to the specified Bitrix24 REST endpoint using Webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/extra-service/sale-delivery-extra-service-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"DELIVERY_ID\":198}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.delivery.extra.service.get\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_rounding_rule Data Type in Markdown\nDESCRIPTION: Details the structure and fields of the catalog_rounding_rule data type, including rule ID, catalog group ID, minimum price, rounding type and precision, and creation/modification information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор правила округления цен ||\n|| **catalogGroupId**\n[`catalog_price_type.id`](#catalog_price_type) | Тип цены ||\n|| **price**\n[`double`](../data-types.md) | Минимальная цена для округления ||\n|| **roundType**\n[`integer`](../data-types.md) | Тип округления. Возможные значения:\n- `1` — математическое округление\n- `2` — округление вверх (в пользу магазина)\n- `4` — округление вниз (в пользу клиента)\n||\n|| **roundPrecision**\n[`double`](../data-types.md) | Точность округления ||\n|| **createdBy**\n[`user.id`](../data-types.md) | Кем создано ||\n|| **modifiedBy**\n[`user.id`](../data-types.md) | Кем изменено ||\n|| **dateCreate**\n[`datetime`](../data-types.md) | Дата создания ||\n|| **dateModify**\n[`datetime`](../data-types.md) | Дата изменения ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Setting Network Ranges with cURL OAuth in Bitrix24\nDESCRIPTION: This snippet shows how to use cURL with OAuth authentication to set network address ranges for the office network in Bitrix24. It sends a POST request with JSON data containing the network ranges and an access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/timeman/networkrange/timeman-networkrange-set.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ranges\":[{\"ip_range\":\"10.0.0.0-10.255.255.255\",\"name\":\"Офисная сеть 10.x.x.x\"},{\"ip_range\":\"172.16.0.0-172.31.255.255\",\"name\":\"Офисная сеть 172.x.x.x\"},{\"ip_range\":\"192.168.0.0-192.168.255.255\",\"name\":\"Офисная сеть 192.168.x.x\"}],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/timeman.networkrange.set\n```\n\n----------------------------------------\n\nTITLE: Generate Number Input for Integer Values in PHP\nDESCRIPTION: The provided code generates number input fields within CRM forms from integer values, leveraging CPrintForm to execute the creation with the required attributes determined by the input context.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_10\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'integer':\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'number',\n        ]\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: Example Response (Success)\nDESCRIPTION: This JSON snippet shows an example of a successful response from the `sale.status.list` method. It includes the list of statuses, the total number of statuses, and timing information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"statuses\":[\n            {\n                \"color\":\"#BEEDF1\",\n                \"id\":\"N\",\n                \"notify\":\"Y\",\n                \"sort\":10,\n                \"type\":\"O\",\n                \"xmlId\":null\n            }\n        ]\n    },\n    \"total\":1,\n    \"time\":{\n        \"start\":1712655587.593758,\n        \"finish\":1712655587.816158,\n        \"duration\":0.22239995002746582,\n        \"processing\":0.016273975372314453,\n        \"date_start\":\"2024-04-09T12:39:47+03:00\",\n        \"date_finish\":\"2024-04-09T12:39:47+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Checkbox Input for CRM Char Type in PHP\nDESCRIPTION: This snippet generates a checkbox input element specifically for char type fields that integrate with CRM forms. It checks if an associated value is 'Y', and toggles the checked status accordingly using CPrintForm.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_5\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'char':\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => 'Y',\n            'CHECKED' => ($value == 'Y') ? true : false,\n            'TYPE' => 'checkbox',\n        ]\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: REST API Request and Response for sonet_group.user.request\nDESCRIPTION: Example of a direct REST API request URL with authentication token and parameters, followed by the JSON response from the server. The response returns true if the request was successful.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/members/sonet-group-user-request.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nhttps://mydomain.bitrix24.ru/rest/sonet_group.user.request.json?auth=52423d4a5f19f5f964f9b4e96a925cfa&GROUP_ID=17&MESSAGE=Request\n```\n\nLANGUAGE: json\nCODE:\n```\n{\"result\":true}\n```\n\n----------------------------------------\n\nTITLE: Example response of adding delivery service in Bitrix24 using JavaScript\nDESCRIPTION: This JavaScript code snippet is the example response of adding a delivery service to Bitrix24 using the `sale.delivery.extra.service.add` method. The response includes the result, which is the id of the new service, and time processing information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    \"result\": 140,\n    \"time\": {\n        \"start\": 1714739042.228152,\n        \"finish\": 1714739042.50093,\n        \"duration\": 0.2727780342102051,\n        \"processing\": 0.09131193161010742,\n        \"date_start\": \"2024-05-03T15:24:02+03:00\",\n        \"date_finish\": \"2024-05-03T15:24:02+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Получение списка спринтов через PHP\nDESCRIPTION: Пример использования метода tasks.api.scrum.sprint.list с помощью PHP SDK CRest. Запрос фильтрует спринты по идентификатору группы и дате окончания.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/sprint/tasks-api-scrum-sprint-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php'); // подключение CRest PHP SDK\n\n// выполнение запроса к REST API\n$result = CRest::call(\n    'tasks.api.scrum.sprint.list',\n    [\n        'filter' => [\n            'GROUP_ID' => 1,\n            '>=DATE_END' => '2024-07-19T15:03:01+00:00'\n        ]\n    ]\n);\n\n// Обработка ответа от Битрикс24\nif (isset($result['error'])) {\n    echo 'Error: '.$result['error_description'];\n} else {\n    print_r($result['result']);\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Shipment List with CRest::call (PHP)\nDESCRIPTION: This PHP code demonstrates how to use the `CRest::call` method to query the shipment list using `sale.shipment.list`. It sets up the required parameters, including selecting specific fields, filtering based on conditions, and ordering the results. The output is then printed to the console using `print_r` within `<PRE>` tags for readability. Requires the `crest.php` library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipment.list',\n    [\n        'select' => [\n            \"id\",\n            \"accountNumber\",\n            \"allowDelivery\",\n            \"basePriceDelivery\",\n            \"canceled\",\n            \"comments\",\n            \"companyId\",\n            \"currency\",\n            \"customPriceDelivery\",\n            \"dateAllowDelivery\",\n            \"dateCanceled\",\n            \"dateDeducted\",\n            \"dateInsert\",\n            \"dateMarked\",\n            \"dateResponsibleId\",\n            \"deducted\",\n            \"deliveryDocDate\",\n            \"deliveryDocNum\",\n            \"deliveryId\",\n            \"deliveryName\",\n            \"deliveryXmlId\",\n            \"discountPrice\",\n            \"empAllowDeliveryId\",\n            \"empCanceledId\",\n            \"empDeductedId\",\n            \"empMarkedId\",\n            \"empResponsibleId\",\n            \"externalDelivery\",\n            \"id1c\",\n            \"marked\",\n            \"orderId\",\n            \"priceDelivery\",\n            \"reasonMarked\",\n            \"reasonUndoDeducted\",\n            \"responsibleId\",\n            \"statusId\",\n            \"statusXmlId\",\n            \"system\",\n            \"trackingDescription\",\n            \"trackingLastCheck\",\n            \"trackingNumber\",\n            \"trackingStatus\",\n            \"updated1c\",\n            \"version1c\",\n            \"xmlId\",\n        ],\n        'filter' => [\n            \">=id\" => 2464,\n            \"@orderId\" => [2069, 2070],\n        ],\n        'order' => [\n            \"id\" => \"desc\",\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Creating Sale Status via cURL OAuth\nDESCRIPTION: HTTP POST request to add a new sale status using OAuth authentication with access token\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-add.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"id\":\"MS\",\"type\":\"O\",\"notify\":\"Y\",\"sort\":500,\"color\":\"#FF0000\",\"xmlId\":\"myStatusXmlId\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.status.add\n```\n\n----------------------------------------\n\nTITLE: Получение списка свойств заказа через JavaScript в Bitrix24\nDESCRIPTION: Метод для получения свойств заказа с использованием BX24.callMethod с фильтрацией по коду EMAIL и сортировкой по идентификатору\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-list.md#2025-04-20_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.property.list\", {\n        \"select\": [\n            \"id\",\n            \"active\",\n            \"code\",\n            \"defaultValue\",\n            \"description\",\n            \"inputFieldLocation\",\n            \"isAddress\",\n            \"isAddressFrom\",\n            \"isAddressTo\",\n            \"isEmail\",\n            \"isFiltered\",\n            \"isLocation\",\n            \"isLocation4tax\",\n            \"isPayer\",\n            \"isPhone\",\n            \"isProfileName\",\n            \"isZip\",\n            \"multiple\",\n            \"name\",\n            \"personTypeId\",\n            \"propsGroupId\",\n            \"required\",\n            \"settings\",\n            \"sort\",\n            \"type\",\n            \"userProps\",\n            \"util\",\n            \"xmlId\",\n        ],\n        \"filter\": {\n            \"@type\": \"STRING\",\n            \"%code\": \"EMAIL\",\n        },\n        \"order\": {\n            \"id\": \"desc\",\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Contact User Field via cURL (OAuth)\nDESCRIPTION: This snippet shows how to update a contact user field using a cURL request with OAuth authentication.  It includes setting various field properties such as mandatory, filter, settings, sort, and labels. The request is sent to the Bitrix24 REST API endpoint, including the `auth` parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":536,\"fields\":{\"MANDATORY\":\"N\",\"SHOW_FILTER\":\"N\",\"SETTINGS\":{\"DEFAULT_VALUE\":\"Привет, мир! Значение по умолчанию (изменено)\",\"ROWS\":10},\"SORT\":2000,\"EDIT_IN_LIST\":\"N\",\"LIST_FILTER_LABEL\":\"Привет, мир! Фильтр (изменено)\",\"LIST_COLUMN_LABEL\":{\"en\":\"Hello, World! Column (changed)\",\"ru\":\"Привет, мир! Колонка (изменено)\",\"de\":\"Hallo, Welt! Spalte (geändert)\"},\"EDIT_FORM_LABEL\":{\"en\":\"Hello, World! Edit (changed)\",\"ru\":\"Привет, мир! Редактировать (изменено)\",\"de\":\"Hallo, Welt! Bearbeiten (geändert)\"},\"ERROR_MESSAGE\":{\"en\":\"Hello, World! Error (changed)\",\"ru\":\"Привет, мир! Ошибка (изменено)\",\"de\":\"Hallo, Welt! Fehler (geändert)\"},\"HELP_MESSAGE\":{\"en\":\"Hello, World! Help (changed)\",\"ru\":\"Привет, мир! Помощь (изменено)\",\"de\":\"Hallo, Welt! Hilfe (geändert)\"}}, \"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.userfield.update\n```\n\n----------------------------------------\n\nTITLE: Response Structure for CRM Timeline Log Messages\nDESCRIPTION: The JSON response structure when retrieving CRM timeline log messages. It includes an array of log message entries with their properties, total count, and execution time information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n            \"id\": 42074,\n            \"created\": \"2024-04-03T10:26:32+02:00\",\n            \"authorId\": 1,\n            \"title\": \"Test title new\",\n            \"text\": \"Test note new\",\n            \"iconCode\": \"info\"\n        },\n        {\n            \"id\": 42073,\n            \"created\": \"2024-04-03T10:26:32+02:00\",\n            \"authorId\": 1,\n            \"title\": \"Test title\",\n            \"text\": \"Test note\",\n            \"iconCode\": \"info\"\n        }\n    ],\n    \"total\": 2,\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Signed Documents using cURL with OAuth in B24 REST API\nDESCRIPTION: This cURL example demonstrates how to call the sign.b2e.personal.tail method to retrieve a list of user-signed documents with OAuth authentication. It sets a limit of 2 records per page with zero offset.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sign/sign-b2e-personal-tail.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"limit\":2,\"offset\":0,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sign.b2e.personal.tail\n```\n\n----------------------------------------\n\nTITLE: Success Response Format for disk.folder.get Method\nDESCRIPTION: This JSON snippet illustrates the structure of a successful response from the disk.folder.get method. It includes various folder properties such as ID, name, storage ID, creation time, and more.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/folder/disk-folder-get.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"result\": {\n    \"ID\": \"8\", //идентификатор\n    \"NAME\": \"newfolder\", //название папки\n    \"CODE\": null, //символьный код\n    \"STORAGE_ID\": \"4\", //идентификатор хранилища\n    \"TYPE\": \"folder\",\n    \"PARENT_ID\": \"12\", //идентификатор родительской папки\n    \"DELETED_TYPE\": \"0\", //маркер удаления\n    \"CREATE_TIME\": \"2015-04-24T10:41:51+03:00\", //время создания\n    \"UPDATE_TIME\": \"2015-04-24T15:52:43+03:00\", //время изменения\n    \"DELETE_TIME\": null, //время перемещения в корзину\n    \"CREATED_BY\": \"1\", //идентификатор пользователя, который создал файл\n    \"UPDATED_BY\": \"1\", //идентификатор пользователя, который изменил файл\n    \"DELETED_BY\": \"0\", //идентификатор пользователя, который переместил в корзину файл\n    \"DETAIL_URL\": \"https://test.bitrix24.ru/workgroups/group/3/disk/path/newfolder\" //ссылка на просмотр списка файлов папки\n}\n```\n\n----------------------------------------\n\nTITLE: Получение свойства заказа с помощью cURL (Webhook)\nDESCRIPTION: HTTP POST-запрос для получения свойства заказа через webhook с передачей идентификатора свойства\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":22}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.property.get\n```\n\n----------------------------------------\n\nTITLE: Handling OnCalendarEntryUpdate Event in JSON\nDESCRIPTION: Example of the JSON payload received by the event handler when a calendar entry with id 1414 is updated. It includes event details, authentication information, and timestamps.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/events/on-calendar-entry-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCALENDARENTRYUPDATE\",\n    \"event_handler_id\": \"4\",\n    \"data\": {\n        \"id\": \"1414\"\n    },\n    \"ts\": \"1734608349\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"calendar\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Content Block Preset Class for Bitrix24 CRM Timeline\nDESCRIPTION: This class defines a content block preset for Bitrix24 CRM timeline items. It includes a constructor and methods to get the title and value of the preset. The file also includes an array of predefined presets for various content types.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_9\n\nLANGUAGE: JavaScript\nCODE:\n```\nclass ContentBlockPreset\n{\n    #title;\n    #value;\n    constructor(title, value) {\n        this.#title = title;\n        this.#value = value;\n    }\n    getTitle(){ return this.#title; }\n    getValue(){ return this.#value; }\n}\n\nconst presets = [\n    new ContentBlockPreset('Text', {\n        type: \"text\",\n        properties: {\n            value: \"Здравствуйте!\\nМы начинаем.\",\n            multiline: true,\n            bold: true,\n            color: \"base_90\"\n        }\n    }),\n    new ContentBlockPreset('Large text', {\n        type: \"largeText\",\n        properties: {\n            value: \"Здравствуйте!\\nМы начинаем.\\nМы продолжаем.\\nМы все еще работаем над этим.\\nМы продолжаем.\\nМы близки к результату.\\nДо свидания.\"\n        }\n    }),\n    new ContentBlockPreset('Link', {\n        type: \"link\",\n        properties: {\n            text: \"Открыть сделку\",\n            action: {\n                type: \"redirect\",\n                uri: \"/crm/deal/details/123/\"\n            },\n            bold: true\n        }\n    }),\n    new ContentBlockPreset('With title', {\n        type: \"withTitle\",\n        properties: {\n            title: \"Заголовок\",\n            block: {\n                type: \"text\",\n                properties: {\n                    value: \"Какое-то значение\"\n                }\n            }\n        }\n    }),\n    new ContentBlockPreset('With title (inline)', {\n        type: \"withTitle\",\n        properties: {\n            title: \"Заголовок 2\",\n            block: {\n                type: \"link\",\n                properties: {\n                    text: \"Открыть сделку\",\n                    action: {\n                        type: \"redirect\",\n                        uri: \"/crm/deal/details/123/\"\n                    }\n                }\n            },\n            inline: true\n        }\n    }),\n    new ContentBlockPreset('Line of blocks', {\n        type: \"lineOfBlocks\",\n        properties: {\n            blocks: {\n                text: {\n                    type: \"text\",\n                    properties: {\n                        value: \"Какой-то текст\"\n                    }\n                },\n                link: {\n                    type: \"link\",\n                    properties: {\n                        text: \"ссылка\",\n                        action: {\n                            type: \"redirect\",\n                            uri: \"/crm/deal/details/123/\"\n                        }\n                    }\n                },\n            }\n        }\n    })\n];\n```\n\n----------------------------------------\n\nTITLE: Получение связей бронирования с использованием cURL (Webhook) в Bitrix24\nDESCRIPTION: Пример cURL-запроса для вызова метода booking.v1.booking.externalData.list через Webhook. Метод принимает идентификатор бронирования и возвращает связанные данные.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"bookingId\":123}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/booking.v1.booking.externalData.list\n```\n\n----------------------------------------\n\nTITLE: PRINT_URL Data Example\nDESCRIPTION: This JSON snippet shows an example of the data that is sent to the `PRINT_URL` endpoint for printing a receipt. It includes details about the transaction, items, payments, and client information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-handler-add.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"sell\",\n    \"calculated_sign\": \"income\",\n    \"unique_id\": 85,\n    \"items\": [\n        {\n            \"name\": \"Товар\",\n            \"base_price\": 12000.0,\n            \"price\": 9600.0,\n            \"sum\": 9600.0,\n            \"currency\": \"RUB\",\n            \"quantity\": 1,\n            \"measure_code\": \"796\",\n            \"vat\": 3,\n            \"vat_sum\": 1600.0,\n            \"payment_object\": \"commodity_marking\",\n            \"nomenclature_code\": \"DM YߠQ:4H7/3f^7fZ1\",\n            \"marking_code\": \"011390002199781321Q:4H7/3f^7fZ1\",\n            \"barcode\": \"1234567890\",\n            \"discount\": {\n                \"discount\": 2400.0\n            },\n            \"payment_method\": \"full_payment\"\n        }\n    ],\n    \"date_create\": 1712235417,\n    \"payments\": [\n        {\n            \"type\": \"cash\",\n            \"is_cash\": \"Y\",\n            \"sum\": 1000,\n            \"currency\": \"RUB\"\n        }\n    ],\n    \"client_email\": \"client@example.com\",\n    \"client_phone\": \"+123456789\",\n    \"total_sum\": 9600.0,\n    \"uuid\": \"check|example.com|85\",\n    \"operation\": \"income\",\n    \"number_kkm\": \"\",\n    \"service_email\": \"admin@example.com\",\n    \"cashbox_params\": {\n        \"AUTH\": {\n            \"LOGIN\": \"user123\",\n            \"PASSWORD\": \"top_secret!\"\n        },\n        \"COMPANY\": {\n            \"INN\": \"123\"\n        },\n        \"INTERACTION\": {\n            \"MODE\": \"ACTIVE\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_vat Data Type in Markdown\nDESCRIPTION: Specifies the structure and fields of the catalog_vat data type, including VAT rate ID, name, activity status, rate value, sort order, and last modification time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор ставки НДС ||\n|| **name**\n[`string`](../data-types.md) | Название ставки НДС ||\n|| **active**\n[`string`](../data-types.md) | Индикатор активности ставки НДС. Возможные значения:\n- `Y` — активен\n- `N` — неактивен\n||\n|| **rate**\n[`double`](../data-types.md) | Величина ставки НДС ||\n|| **sort**\n[`integer`](../data-types.md) | Сортировка ||\n|| **timestampX**\n[`datetime`](../data-types.md) | Время последнего изменения ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Retrieving Head Product Data using cURL (OAuth) in Bitrix24 REST API\nDESCRIPTION: This cURL command shows how to retrieve head product data using OAuth authentication in the Bitrix24 REST API. It sends a POST request with the product ID and access token to get the field values of the head product.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/sku/catalog-product-sku-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1289,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.product.sku.get\n```\n\n----------------------------------------\n\nTITLE: Generating Address Input Field\nDESCRIPTION: This code snippet initiates the generation of an address input field using the `CPrintForm::input` function. The function is passed an array of parameters that define the properties of the input field, such as its name, requirement status, disabled state, multiplicity, and value. The `TYPE` is likely defined later in the code, but it will eventually configure the specific type for the address input field.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'address':\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the `crm.lead.contact.delete` method. It includes a `result` field indicating the success status and a `time` field providing information about the request's execution time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/management-communication/crm-lead-contact-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1715091541.642592,\n        \"finish\": 1715091541.730599,\n        \"duration\": 0.08800697326660156,\n        \"date_start\": \"2024-05-03T17:19:01+03:00\",\n        \"date_finish\": \"2024-05-03T17:19:01+03:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating CRM Contact Input Field\nDESCRIPTION: This code generates a text input field for a CRM contact. It fetches contact details using `CRest::get('crm.contact.list')` if the contact information isn't readily available. It then appends the contact's full name to the input field.  The input's properties are configured according to the `$arField` array: name, requirement status, disabled status, multiplicity, and value.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'crm_contact':\n            $arContact = [];\n            if (!empty($arResult['VALUE_' . $key]))\n            {\n                $arContact = $arResult['VALUE_' . $key];\n            }\n            elseif (!empty($value))\n            {\n                $arContact = CRest::get('crm.contact.list', ['filter' => ['ID' => $value]]);\n            }\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'text',\n                ]\n            );\n            if (!empty($arContact['result']))\n            {\n                $return .= '(';\n                $i = 0;\n                foreach ($arContact['result'] as $val)\n                {\n                    $i++;\n                    if ($i > 1)\n                    {\n                        $return .= ', ';\n                    }\n                    $return .= implode(' ', [$val['NAME'], $val['LAST_NAME']]);\n                }\n                $return .= ')';\n            }\n            break;\n```\n\n----------------------------------------\n\nTITLE: Запрос полей вариации товара через cURL с использованием OAuth\nDESCRIPTION: Пример выполнения POST-запроса к методу catalog.product.offer.getFieldsByFilter с использованием cURL и OAuth-авторизации. Запрос включает фильтр по ID инфоблока и токен доступа.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/offer/catalog-product-offer-get-fields-by-filter.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"iblockId\":24},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.product.offer.getFieldsByFilter\n```\n\n----------------------------------------\n\nTITLE: onCrmDealAdd Event Data Structure\nDESCRIPTION: This JSON snippet represents the data structure POSTed to the event handler when a new deal is created in Bitrix24. It includes the event name, event handler ID, deal data (including the newly created deal ID), a timestamp, and authentication information for the Bitrix24 portal.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/events/on-crm-deal-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMDEALADD\",\n    \"event_handler_id\": \"185\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"6641\"\n        }\n    },\n    \"ts\": \"1735374081\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling disk.folder.getfields method using Bitrix24 JavaScript SDK\nDESCRIPTION: This snippet demonstrates how to call the disk.folder.getfields method using the Bitrix24 JavaScript SDK. It sends a request without parameters and handles the response, logging either the error or the returned data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/folder/disk-folder-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.folder.getfields\",\n    {},\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Fetching Quote Statuses with PHP CRest\nDESCRIPTION: Implements the same quote status retrieval functionality using PHP CRest class. Requires proper CRest class setup and inclusion of crest.php file. Creates an HTML table to display status information with color formatting.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-get-lists/quote-statuses-with-semantics.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?\n$resultQuote = CRest::call('crm.status.list', ['filter' => ['ENTITY_ID' => 'QUOTE_STATUS']]);\nif (!empty($resultQuote['result'])):\n?>\n    <table>\n        <thead>\n        <tr>\n            <th>STATUS ID</th>\n            <th>NAME</th>\n            <th>SEMANTICS</th>\n        </tr>\n        </thead>\n        <tbody>\n        <? foreach ($resultQuote['result'] as $item): ?>\n        <tr <?=(!empty($item['EXTRA']['COLOR']) ? ' style=\"color:' . $item['EXTRA']['COLOR'] . '\"' : '');?>>\n            <td><?=$item['STATUS_ID']?></td>\n            <td><?=$item['NAME']?></td>\n            <td><?=$item['EXTRA']['SEMANTICS']?></td>\n        <tr>\n            <? endforeach; ?>\n        </tbody>\n    </table>\n<? endif; ?>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Logo Information with cURL OAuth in Bash\nDESCRIPTION: This snippet demonstrates how to retrieve timeline logo information using a cURL request with OAuth authentication. It requires a Bitrix24 address and access token, and passes the logo code as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"code\":\"info\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.logo.get\n```\n\n----------------------------------------\n\nTITLE: Update Property Variant with PHP\nDESCRIPTION: This PHP code updates a property variant using the `CRest::call` function.  It requires the `crest.php` library. The code calls the `sale.propertyvariant.update` method with the variant's ID and the fields to update, and then prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.propertyvariant.update',\n    [\n        'id' => 5,\n        'fields' => [\n            'name' => 'Красный',\n            'value' => 'red',\n            'sort' => 10,\n            'description' => 'Новое описание значения для красного цвета'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Получение списка свойств заказа через cURL (Webhook)\nDESCRIPTION: HTTP-запрос для получения списка свойств заказа с фильтрацией по коду и сортировкой по идентификатору с использованием webhook\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-list.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"active\",\"code\",\"defaultValue\",\"description\",\"inputFieldLocation\",\"isAddress\",\"isAddressFrom\",\"isAddressTo\",\"isEmail\",\"isFiltered\",\"isLocation\",\"isLocation4tax\",\"isPayer\",\"isPhone\",\"isProfileName\",\"isZip\",\"multiple\",\"name\",\"personTypeId\",\"propsGroupId\",\"required\",\"settings\",\"sort\",\"type\",\"userProps\",\"util\",\"xmlId\"],\"filter\":{\"@type\":\"STRING\",\"%code\":\"EMAIL\"},\"order\":{\"id\":\"desc\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.property.list\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Log Messages with PHP\nDESCRIPTION: Example of retrieving CRM timeline log messages using PHP and CRest library. The request includes entity type and ID, ordering by creation date, and pagination parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.timeline.logmessage.list',\n    [\n        'entityTypeId' => 1,\n        'entityId' => 1,\n        'order' => ['created' => 'desc'],\n        'start' => 1\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating Userfieldtype via Webhook cURL\nDESCRIPTION: Demonstrates updating a user field type configuration using a webhook authentication method with cURL. Includes setting USER_TYPE_ID, HANDLER, TITLE, DESCRIPTION, and OPTIONS.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-update.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n    \"USER_TYPE_ID\": \"test_type\",\n    \"HANDLER\": \"https://www.myapplication.com/handler/\",\n    \"TITLE\": \"Updated test type\",\n    \"DESCRIPTION\": \"Test userfield type for documentation with updated description\",\n    \"OPTIONS\": {\n        \"height\": 60\n    }\n}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/userfieldtype.update\n```\n\n----------------------------------------\n\nTITLE: Update Person Type with cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to update a person type using OAuth authentication in Bitrix24. It sends a POST request with a JSON payload containing the ID of the person type to update, the fields to modify, and the access token. Replace the placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":12,\"fields\":{\"name\":\"Юр. лицо\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.persontype.update\n```\n\n----------------------------------------\n\nTITLE: JSON структура события onCrmActivityAdd в Bitrix24\nDESCRIPTION: Пример JSON-структуры, которая передается в обработчик при срабатывании события onCrmActivityAdd. Содержит информацию о созданном деле, временную метку и параметры авторизации.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/events/on-crm-activity-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"onCrmActivityAdd\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"999\"\n        }\n    },\n    \"ts\": \"1466439714\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting User Field using PHP (B24PhpSdk)\nDESCRIPTION: This PHP snippet demonstrates how to delete a user field using the B24PhpSdk.  It shows how to call the method using the service builder and handles potential exceptions. Replace `123` with the actual userfield ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\ntry {\n        $userfieldId = 123; // Replace with the actual userfield ID you want to delete\n        $result = $serviceBuilder\n            ->getCRMScope()\n            ->contactUserfield()\n            ->delete($userfieldId);\n        if ($result->isSuccess()) {\n            print(\"Deleted item successfully.\");\n        } else {\n            print(\"Failed to delete item.\");\n        }\n    } catch (Throwable $e) {\n        print(\"An error occurred: \" . $e->getMessage());\n    }\n```\n\n----------------------------------------\n\nTITLE: HTML Structure with Bootstrap and JSONEditor\nDESCRIPTION: This HTML snippet defines the structure of the application, including links to Bootstrap CSS, JSONEditor CSS and JS, and the Bitrix24 API. It sets up a form with input fields for specifying entity and item details, along with buttons for performing actions on content blocks.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\"/>\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.2.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n    <script src=\"https://cdn.jsdelivr.net/npm/jsoneditor@9.9.2/dist/jsoneditor.min.js\"></script>\n    <link href=\"https://cdn.jsdelivr.net/npm/jsoneditor@9.9.2/dist/jsoneditor.min.css\" rel=\"stylesheet\">\n    <script src=\"//api.bitrix24.com/api/v1/\"></script>\n</head>\n<body>\n    <div class=\"container-fluid\">\n        <form id=\"form\" class=\"mt-3 md-3\">\n            <div class=\"row\">\n                <div class=\"col-8\">\n                    <div class=\"mb-3\">\n                        <div class=\"d-flex flex-row gap-3\">\n                            <label class=\"form-label h3\">Layout JSON</label>\n                            <div id=\"content_block_presets\" class=\"d-flex flex-row gap-2\"></div>\n                        </div>\n                        <div id=\"json_editor\" style=\"height: 510px\"></div>\n                        <input type=\"hidden\" id=\"layout\" value=\"{}\">\n                    </div>\n                </div>\n                <div class=\"col-4\" id=\"parameters\">\n                    <label class=\"form-label h3\">Параметры</label>\n                    <hr class=\"mt-0\">\n                    <div class=\"vstack gap-3\">\n                        <div class=\"form-group\">\n                            <label for=\"entity_type_id\">Родительская сущность</label>\n                            <select id=\"entity_type_id\" name=\"entityTypeId\" class=\"form-select\">\n                                <option value=\"2\" selected>[2] Сделка</option>\n                                <option value=\"1\">[1] Лид</option>\n                                <option value=\"3\">[3] Контакт</option>\n                                <option value=\"4\">[4] Компания</option>\n                                <option value=\"7\">[7] Предложение</option>\n                                <option value=\"31\">[31] Счёт </option>\n                            </select>\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"entity_id\">ID родительской сущности</label>\n                            <input id=\"entity_id\" name=\"entityId\" type=\"text\" class=\"form-control\">\n                        </div>\n                        <div class=\"form-group\">\n                            <label for=\"item_type_id\" class=\"text-truncate\">Добавляем конфигурируемые блоки в:</label>\n                            <select name=\"itemTypeId\" id=\"item_type_id\" class=\"form-select\" required>\n                                <option value=\"1\" selected>Дело</option>\n                                <option value=\"2\">Запись таймлайна</option>\n                            </select>\n                        </div>\n                        <?php if (!$forceMode): ?>\n                            <button id=\"get_items_button\" type=\"button\" class=\"btn btn-outline-dark btn-sm\">Найти</button>\n                        <?php endif; ?>\n                        <div class=\"form-group\">\n                            <label for=\"item_id\">Дело:</label>\n                            <?php if ($forceMode): ?>\n                                <input id=\"item_id\" name=\"itemId\" type=\"text\" class=\"form-control\">\n                            <?php else: ?>\n                                <select name=\"itemId\" id=\"item_id\" class=\"form-select\"></select>\n                            <?php endif; ?>\n                        </div>\n                        <button id=\"get_button\" type=\"button\" class=\"btn btn-outline-dark btn-sm\">Получить</button>\n                        <button id=\"set_button\" type=\"button\" class=\"btn btn-outline-dark btn-sm\">Установить</button>\n                        <button id=\"delete_button\" type=\"button\" class=\"btn btn-outline-danger btn-sm\">Удалить</button>\n                    </div>\n                </div>\n            </div>\n        </form>\n    </div>\n    <div class=\"container-fluid\" id=\"alert_container\"></div>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Payload Structure for OnTaskDelete Event in Bitrix24 REST API\nDESCRIPTION: The JSON structure that is sent to the handler when a task is deleted. Contains event information, task data before deletion, accessibility information, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\narray(\n    'event' => 'ONTASKDELETE',\n    'data' => array(\n        'FIELDS_BEFORE' => array('ID' => 123),\n        'FIELDS_AFTER' => 'undefined',\n        'IS_ACCESSIBLE_BEFORE' => 'undefined',\n        'IS_ACCESSIBLE_AFTER' => 'N',\n    ),\n    'ts' => '1466439714',\n    'auth' => array(\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n        ),\n)\n```\n\n----------------------------------------\n\nTITLE: Example Response Format\nDESCRIPTION: This JSON snippet shows the structure of the response returned by the `crm.requisite.userfield.list` method. It includes an array of user field objects, each containing details like ID, ENTITY_ID, FIELD_NAME, USER_TYPE_ID, and settings, alongside total record count and execution time metrics.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n        \"ID\": \"232\",\n        \"ENTITY_ID\": \"CRM_REQUISITE\",\n        \"FIELD_NAME\": \"UF_CRM_NEWTECH_V1_BOOLEAN\",\n        \"USER_TYPE_ID\": \"boolean\",\n        \"XML_ID\": null,\n        \"SORT\": \"100\",\n        \"MULTIPLE\": \"N\",\n        \"MANDATORY\": \"N\",\n        \"SHOW_FILTER\": \"E\",\n        \"SHOW_IN_LIST\": \"Y\",\n        \"EDIT_IN_LIST\": \"Y\",\n        \"IS_SEARCHABLE\": \"N\",\n        \"SETTINGS\": {\n            \"DEFAULT_VALUE\": 0,\n            \"DISPLAY\": \"CHECKBOX\",\n            \"LABEL\": [\n            \"\",\n            \"\"\n            ],\n            \"LABEL_CHECKBOX\": \"UF - Да/Нет\"\n        },\n        \"EDIT_FORM_LABEL\": \"UF - Да/Нет\",\n        \"LIST_COLUMN_LABEL\": \"UF - Да/Нет\",\n        \"LIST_FILTER_LABEL\": \"UF - Да/Нет\",\n        \"ERROR_MESSAGE\": null,\n        \"HELP_MESSAGE\": null\n        },\n        {\n        \"ID\": \"233\",\n        \"ENTITY_ID\": \"CRM_REQUISITE\",\n        \"FIELD_NAME\": \"UF_CRM_NEWTECH_V1_DATETIME\",\n        \"USER_TYPE_ID\": \"datetime\",\n        \"XML_ID\": null,\n        \"SORT\": \"100\",\n        \"MULTIPLE\": \"N\",\n        \"MANDATORY\": \"N\",\n        \"SHOW_FILTER\": \"E\",\n        \"SHOW_IN_LIST\": \"Y\",\n        \"EDIT_IN_LIST\": \"Y\",\n        \"IS_SEARCHABLE\": \"N\",\n        \"SETTINGS\": {\n            \"DEFAULT_VALUE\": {\n            \"TYPE\": \"NONE\",\n            \"VALUE\": \"\"\n            },\n            \"USE_SECOND\": \"Y\",\n            \"USE_TIMEZONE\": \"N\"\n        },\n        \"EDIT_FORM_LABEL\": \"UF - Дата\",\n        \"LIST_COLUMN_LABEL\": \"UF - Дата\",\n        \"LIST_FILTER_LABEL\": \"UF - Дата\",\n        \"ERROR_MESSAGE\": null,\n        \"HELP_MESSAGE\": null\n        },\n        {\n        \"ID\": \"234\",\n        \"ENTITY_ID\": \"CRM_REQUISITE\",\n        \"FIELD_NAME\": \"UF_CRM_NEWTECH_V1_DOUBLE\",\n        \"USER_TYPE_ID\": \"double\",\n        \"XML_ID\": null,\n        \"SORT\": \"100\",\n        \"MULTIPLE\": \"N\",\n        \"MANDATORY\": \"N\",\n        \"SHOW_FILTER\": \"E\",\n        \"SHOW_IN_LIST\": \"Y\",\n        \"EDIT_IN_LIST\": \"Y\",\n        \"IS_SEARCHABLE\": \"N\",\n        \"SETTINGS\": {\n            \"PRECISION\": 2,\n            \"SIZE\": 20,\n            \"MIN_VALUE\": 0,\n            \"MAX_VALUE\": 0,\n            \"DEFAULT_VALUE\": null\n        },\n        \"EDIT_FORM_LABEL\": \"ПП - Число\",\n        \"LIST_COLUMN_LABEL\": \"ПП - Число\",\n        \"LIST_FILTER_LABEL\": \"ПП - Число\",\n        \"ERROR_MESSAGE\": null,\n        \"HELP_MESSAGE\": null\n        },\n        {\n        \"ID\": \"235\",\n        \"ENTITY_ID\": \"CRM_REQUISITE\",\n        \"FIELD_NAME\": \"UF_CRM_NEWTECH_V1_STRING\",\n        \"USER_TYPE_ID\": \"string\",\n        \"XML_ID\": null,\n        \"SORT\": \"100\",\n        \"MULTIPLE\": \"N\",\n        \"MANDATORY\": \"N\",\n        \"SHOW_FILTER\": \"N\",\n        \"SHOW_IN_LIST\": \"Y\",\n        \"EDIT_IN_LIST\": \"Y\",\n        \"IS_SEARCHABLE\": \"N\",\n        \"SETTINGS\": {\n            \"SIZE\": 20,\n            \"ROWS\": 1,\n            \"REGEXP\": \"\",\n            \"MIN_LENGTH\": 0,\n            \"MAX_LENGTH\": 0,\n            \"DEFAULT_VALUE\": \"\"\n        },\n        \"EDIT_FORM_LABEL\": \"ПП - Строка\",\n        \"LIST_COLUMN_LABEL\": \"ПП - Строка\",\n        \"LIST_FILTER_LABEL\": \"ПП - Строка\",\n        \"ERROR_MESSAGE\": \"UF_CRM_NEWTECH_V1_STRING\",\n        \"HELP_MESSAGE\": \"UF_CRM_NEWTECH_V1_STRING\"\n        }\n    ],\n    \"total\": 4,\n    \"time\": {\n        \"start\": 1717754823.56747,\n        \"finish\": 1717754823.938955,\n        \"duration\": 0.37148499488830566,\n        \"processing\": 0.007915973663330078,\n        \"date_start\": \"2024-06-07T12:07:03+02:00\",\n        \"date_finish\": \"2024-06-07T12:07:03+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for disk.storage.gettypes\nDESCRIPTION: This snippet shows the expected JSON response format when the disk.storage.gettypes method is called successfully. It returns an array of storage type strings including 'user', 'common', and 'group'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/storage/disk-storage-get-types.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"result\": [\n    \"user\", //хранилище пользователей\n    \"common\", //хранилище общих документов\n    \"group\" //хранилище социальных групп\n]\n```\n\n----------------------------------------\n\nTITLE: Receiving Data for CRM Invoice List Toolbar\nDESCRIPTION: This code snippet illustrates the data structure received by the handler when a widget is placed in the CRM invoice list toolbar. It includes information such as domain, protocol, language, application ID, authentication details, member ID, status, and placement code. This data is sent as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/list-toolbar.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => com\\n    [APP_SID] => 611bd605715c4de60c7efe1fc82ce0be\\n    [AUTH_ID] => 79f29f6600631fcd00005a4b00000001f0f107e0bf261552367a5d567964f8862976b1\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 6971c76600631fcd00005a4b00000001f0f107f5b4499d2f41d14ec3142fb9b189b409\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_INVOICE_LIST_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Sample Response for CRM Requisite Countries\nDESCRIPTION: This JSON snippet represents the structure of the response returned by the crm.requisite.preset.countries method. The `result` array contains a list of country objects, each with `ID`, `CODE`, and `TITLE` properties. The `time` object provides information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/crm-requisite-preset-countries.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n            \"ID\": 1,\n            \"CODE\": \"RU\",\n            \"TITLE\": \"Россия\"\n        },\n        {\n            \"ID\": 4,\n            \"CODE\": \"BY\",\n            \"TITLE\": \"Беларусь\"\n        },\n        {\n            \"ID\": 6,\n            \"CODE\": \"KZ\",\n            \"TITLE\": \"Казахстан\"\n        },\n        {\n            \"ID\": 14,\n            \"CODE\": \"UA\",\n            \"TITLE\": \"Украина\"\n        },\n        {\n            \"ID\": 34,\n            \"CODE\": \"BR\",\n            \"TITLE\": \"Бразилия\"\n        },\n        {\n            \"ID\": 46,\n            \"CODE\": \"DE\",\n            \"TITLE\": \"Германия\"\n        },\n        {\n            \"ID\": 77,\n            \"CODE\": \"CO\",\n            \"TITLE\": \"Колумбия\"\n        },\n        {\n            \"ID\": 110,\n            \"CODE\": \"PL\",\n            \"TITLE\": \"Польша\"\n        },\n        {\n            \"ID\": 122,\n            \"CODE\": \"US\",\n            \"TITLE\": \"США\"\n        },\n        {\n            \"ID\": 132,\n            \"CODE\": \"FR\",\n            \"TITLE\": \"Франция\"\n        }\n    ],\n    \"time\": {\n        \"start\": 1716549490.84839,\n        \"finish\": 1716549491.239788,\n        \"duration\": 0.39139795303344727,\n        \"processing\": 0.017835140228271484,\n        \"date_start\": \"2024-05-24T13:18:10+02:00\",\n        \"date_finish\": \"2024-05-24T13:18:11+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Booking External Data with PHP\nDESCRIPTION: PHP example showing how to use the booking.v1.booking.externalData.unset method with the CRest library. The method requires a bookingId parameter to identify which booking's external data to delete.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-unset.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'booking.v1.booking.externalData.unset',\n    [\n        'bookingId' => 14,\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Company Calendar Events with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to make a webhook request to retrieve company calendar events using cURL. It specifies the company_calendar type and sets forCurrentUser to false to get all company events.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"type\":\"company_calendar\",\"ownerId\":\"\",\"forCurrentUser\":false}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/calendar.event.get\n```\n\n----------------------------------------\n\nTITLE: Удаление реквизита через Webhook (cURL)\nDESCRIPTION: HTTP POST-запрос для удаления реквизита с использованием Webhook, требует указания идентификатора реквизита\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":27}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.delete\n```\n\n----------------------------------------\n\nTITLE: cURL Webhook Request for Setting Contact Company Associations\nDESCRIPTION: Demonstrates setting company associations for a contact with ID 82 using a Bitrix24 webhook, specifying company IDs, primary status, and sorting order\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-items-set.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":82,\"items\":[{\"COMPANY_ID\":8,\"IS_PRIMARY\":\"Y\",\"SORT\":100},{\"COMPANY_ID\":9,\"SORT\":200},{\"COMPANY_ID\":10,\"SORT\":400}]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.company.items.set\n```\n\n----------------------------------------\n\nTITLE: Displaying Request Parameters in PHP\nDESCRIPTION: Shows how to output all parameters passed to the application in the request. This is useful for debugging and understanding what data is available to your application.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-grid-veiw.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\necho \"<pre>\";\nprint_r($_REQUEST);\necho \"</pre>\";\n```\n\n----------------------------------------\n\nTITLE: Handling CATALOG.ROUNDING.ON.DELETE Event Data Structure\nDESCRIPTION: Example POST request data structure received by the event handler when a price rounding rule is deleted. Contains event details, handler ID, deleted rule data, timestamp and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-rounding-on-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    'event' => 'CATALOG.ROUNDING.ON.DELETE',    \n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 1,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'catalog',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Chat History and Sending Messages (ajax.php)\nDESCRIPTION: This PHP code snippet handles AJAX requests for retrieving chat history and sending new messages. It uses session data and a `CRest` class to interact with a Bitrix24 REST API. The code saves messages (likely to a database via the `saveMessage` function), and returns a JSON response indicating the result of the operation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/openlines/example-connector.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('function.php');\nsession_start();\n$chatID = 'chat' . md5($_SERVER['HTTP_ORIGIN']) . md5(session_id());\n$type = $_POST['type'];\n$connector_id = getConnectorID();\n$line_id = getLine();\n/*\n    simple example save chat, must lost any data\n    recommend using database\n*/\nif ($type == 'chat_history'):\n    $arChat = getChat($chatID);\n    if (!empty($arChat)):\n        foreach ($arChat as $item): ?>\n            <div class=\"col-12 alert alert-warning text-<?=(!empty($item['im'])) ? 'left' : 'right'?>\"\n                style=\" background-color: <?=(!empty($item['im'])) ? '#fbfbfb' : '#ccf2ff'?>\">\n                <?=convertBB($item['message']['text'])?>\n            </div>\n        <?php endforeach;\n    endif;\nelif ($type == 'send_message'):\n    $arMessage = [\n        'user' => [\n            'id' => $chatID,\n            'name' => htmlspecialchars($_POST['name']),\n        ],\n        'message' => [\n            'id' => false,\n            'date' => time(),\n            'text' => htmlspecialchars($_POST['message']),\n        ],\n        'chat' => [\n            'id' => $chatID,\n            'url' => htmlspecialchars($_SERVER['HTTP_REFERER']),\n        ],\n    ];\n    $id = saveMessage($chatID, $arMessage);\n    $result['error'] = 'error_save';\n    if ($id !== false)\n    {\n        $arMessage['message']['id'] = $id;\n        $result = CRest::call(\n            'imconnector.send.messages',\n            [\n                'CONNECTOR' => $connector_id,\n                'LINE' => $line_id,\n                'MESSAGES' => [$arMessage],\n            ]\n        );\n    }\n    echo json_encode(\n        [\n            'chat' => $chatID,\n            'post' => $_POST,\n            'result' => $result\n        ]\n    );\nendif;\n```\n\n----------------------------------------\n\nTITLE: Querying Requisites by User Field using cURL (Webhook)\nDESCRIPTION: This cURL command retrieves requisites by filtering based on the `ID` and selecting the user field `UF_CRM_1707997209`. It demonstrates how to fetch user-defined field values. The authentication is done using a webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{},\"filter\":{\"ID\":\"51\"},\"select\":[\"UF_CRM_1707997209\"]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.list\n```\n\n----------------------------------------\n\nTITLE: Parsing CRM Contact Delete Event Payload in JSON\nDESCRIPTION: Webhook event payload containing details about a deleted contact, including contact ID, event metadata, and authentication information\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/events/on-crm-contact-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMCONTACTDELETE\",\n    \"event_handler_id\": \"13\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"89\"\n        }\n    },\n    \"ts\": \"1724696255\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Preset Field via cURL (Webhook)\nDESCRIPTION: This cURL command retrieves a custom field of a requisite template using a webhook. It sends a POST request with the field ID and preset ID in JSON format to the specified Bitrix24 address, user ID, and webhook URL. Replace placeholders for the Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":1,\"preset\":{\"ID\":27}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.preset.field.get\n```\n\n----------------------------------------\n\nTITLE: Adding Delivery Service in Bitrix24 using JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to add a delivery service to Bitrix24 using the `sale.delivery.extra.service.add` method. It sets parameters like delivery ID, active status, code, name, and type for the new service. The code includes error handling and displays the result in the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'sale.delivery.extra.service.add', {\n            DELIVERY_ID: 227,\n            ACTIVE: \"Y\",\n            CODE: \"door_delivery\",\n            NAME: \"Door Delivery\",\n            TYPE: \"checkbox\",\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Handling Date Input - PHP\nDESCRIPTION: Generates a date input element with appropriate formatting for the user's input while respecting requirements and properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-lead.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nif(!empty($value))\n{\n    $value = date('Y-m-d', strtotime($value));\n}\n$return = CPrintForm ::input(\n    [\n        'NAME' => 'form[' . $key . ']',\n        'REQUIRED' => $arField[ 'isRequired' ],\n        'DISABLE' => $arField[ 'isReadOnly' ],\n        'MULTIPLE' => $arField[ 'isMultiple' ],\n        'VALUE' => $value,\n        'TYPE' => 'date',\n    ]);\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: Example of a successful response (HTTP 200) from the `sale.property.getfieldsbytype` method. The result contains information about the available property fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get-fields-by-type.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"result\":{\n      \"property\":{\n         \"active\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"char\"\n         },\n         \"code\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"string\"\n         },\n         \"defaultValue\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"string\"\n         },\n         \"description\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"string\"\n         },\n         \"id\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":true,\n            \"isRequired\":false,\n            \"type\":\"integer\"\n         },\n         \"isFiltered\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"char\"\n         },\n         \"multiple\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"char\"\n         },\n         \"name\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":true,\n            \"type\":\"string\"\n         },\n         \"personTypeId\":{\n            \"isImmutable\":true,\n            \"isReadOnly\":false,\n            \"isRequired\":true,\n            \"type\":\"integer\"\n         },\n         \"propsGroupId\":{\n            \"isImmutable\":true,\n            \"isReadOnly\":false,\n            \"isRequired\":true,\n            \"type\":\"integer\"\n         },\n         \"required\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"char\"\n         },\n         \"settings\":{\n            \"fields\":{\n               \"max\":{\n                  \"isImmutable\":false,\n                  \"isReadOnly\":false,\n                  \"isRequired\":false,\n                  \"type\":\"integer\"\n               },\n               \"min\":{\n                  \"isImmutable\":false,\n                  \"isReadOnly\":false,\n                  \"isRequired\":false,\n                  \"type\":\"integer\"\n               },\n               \"step\":{\n                  \"isImmutable\":false,\n                  \"isReadOnly\":false,\n                  \"isRequired\":false,\n                  \"type\":\"integer\"\n               }\n            },\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"datatype\"\n         },\n         \"sort\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"integer\"\n         },\n         \"type\":{\n            \"isImmutable\":true,\n            \"isReadOnly\":false,\n            \"isRequired\":true,\n            \"type\":\"string\"\n         },\n         \"userProps\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"char\"\n         },\n         \"util\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"char\"\n         },\n         \"xmlId\":{\n            \"isImmutable\":false,\n            \"isReadOnly\":false,\n            \"isRequired\":false,\n            \"type\":\"string\"\n         }\n      }\n   },\n   \"time\":{\n      \"start\":1712325081.703631,\n      \"finish\":1712325082.067712,\n      \"duration\":0.36408114433288574,\n      \"processing\":0.023890972137451172,\n      \"date_start\":\"2024-04-05T16:51:21+03:00\",\n      \"date_finish\":\"2024-04-05T16:51:22+03:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating User Field with cURL using Webhook\nDESCRIPTION: This cURL command creates a user-defined field of type list in Bitrix24 using a webhook method for authorization. It requires the endpoint URL and payload in JSON format specifying the field details such as label, user type ID, and list items.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"LABEL\":\"Пользовательское поле (список)\",\"USER_TYPE_ID\":\"enumeration\",\"FIELD_NAME\":\"ENUMERATION_EXAMPLE\",\"MULTIPLE\":\"N\",\"MANDATORY\":\"N\",\"SHOW_FILTER\":\"Y\",\"LIST\":[{\"VALUE\":\"Элемент списка #1\",\"DEF\":\"Y\",\"XML_ID\":\"XML_ID_1\",\"SORT\":100},{\"VALUE\":\"Элемент списка #2\",\"XML_ID\":\"XML_ID_2\",\"SORT\":200},{\"VALUE\":\"Элемент списка #3\",\"XML_ID\":\"XML_ID_3\",\"SORT\":300},{\"VALUE\":\"Элемент списка #4\",\"XML_ID\":\"XML_ID_4\",\"SORT\":400}],\"SETTINGS\":{\"DISPLAY\":\"UI\",\"LIST_HEIGHT\":2},\"SORT\":2000}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.userfield.add\n```\n\n----------------------------------------\n\nTITLE: Universal Item Details Configuration Method\nDESCRIPTION: Alternative method for configuring deal card settings using universal CRM item configuration approach\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/custom-form/index.md#2025-04-20_snippet_2\n\nLANGUAGE: REST API\nCODE:\n```\ncrm.item.details.configuration.* (with entityTypeId: 2)\n```\n\n----------------------------------------\n\nTITLE: Creating Task Dependency Using cURL (Webhook) in HTTP\nDESCRIPTION: This snippet demonstrates how to create a task dependency using a cURL request with a webhook in Bitrix24. It sends a POST request with JSON data containing task IDs and link type.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/task-dependence-add.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"taskIdFrom\":100,\"taskIdTo\":101,\"linkType\":0}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/task.dependence.add\n```\n\n----------------------------------------\n\nTITLE: Order Trade Binding Metadata\nDESCRIPTION: Specification for linking orders across different systems and platforms, including external order identification and trading platform references\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/data-types.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n### sale_order_trade_binding\n#|\n|| **Значение**\n`тип` | **Описание** ||...\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for crm.timeline.logo.get\nDESCRIPTION: This snippet shows the JSON structure of a successful response from the crm.timeline.logo.get method. It includes the logo details (code, isSystem flag, and fileUri) along with timing information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"logo\": {\n            \"code\": \"info\",\n            \"isSystem\": false,\n            \"fileUri\": \"/upload/crm/286/a1k092hygdrzpiz6a01enuymqoo5qzym/ou0akdwnbxalzk9hgfme39nbvtozblew\"\n        }\n    },\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON block shows an example of a successful response from the `sale.shipmentitem.get` method. It includes shipment item details such as basket ID, insertion date, ID, order delivery ID, quantity, reserved quantity, and XML ID. It also includes time related data for the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"shipmentItem\":{\n            \"basketId\":2716,\n            \"dateInsert\":\"2024-04-11T09:10:34+03:00\",\n            \"id\":7,\n            \"orderDeliveryId\":2431,\n            \"quantity\":5,\n            \"reservedQuantity\":0,\n            \"xmlId\":\"myNewXmlId\"\n        }\n    },\n    \"time\":{\n        \"start\":1712819691.140072,\n        \"finish\":1712819691.534972,\n        \"duration\":0.394899845123291,\n        \"processing\":0.21921396255493164,\n        \"date_start\":\"2024-04-11T10:14:51+03:00\",\n        \"date_finish\":\"2024-04-11T10:14:51+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Field Types\nDESCRIPTION: This code snippet demonstrates the structure of the data returned by the `crm.userfield.types` method.  It shows the ID and title of a user field type, in this case, \"Число\" (Number).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/companies/userfields/index.md#2025-04-20_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n\n    (\n        [ID] => double    \n        [title] => Число\n    )\n\n```\n\n----------------------------------------\n\nTITLE: Using cURL with OAuth to Delete Booking External Data\nDESCRIPTION: Example of a cURL command using OAuth authentication to delete external data connections for a booking. The request includes the bookingId parameter and user-specific OAuth credentials.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-unset.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"bookingId\":14}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/booking.v1.booking.externalData.unset\n```\n\n----------------------------------------\n\nTITLE: Popping request from Redis queue in PHP\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve and process requests from a Redis queue using the `rPop` command. It continuously retrieves elements from the 'request_queue' list and processes them until the queue is empty. Each retrieved request is JSON-decoded before being processed.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/performance/queue.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n// Выбираем для обработки пакет записей из очереди\nwhile ($request = $redis->rPop('request_queue')) {\n    processRequest(json_decode($request));\n}\n```\n\n----------------------------------------\n\nTITLE: Удаление реквизита в JavaScript с обработкой результата\nDESCRIPTION: Вызов метода удаления реквизита с использованием BX24 и обработкой результата через callback-функцию\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.delete\",\n    {\n        id: 27\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Calling calendar.user.settings.get via cURL OAuth in Bash\nDESCRIPTION: This snippet shows how to call the calendar.user.settings.get method using a cURL command with OAuth authentication. It sends a POST request with the access token in the JSON body to retrieve user calendar settings.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-user-settings-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/calendar.user.settings.get\n```\n\n----------------------------------------\n\nTITLE: Including bx24.js Library\nDESCRIPTION: This snippet demonstrates how to include the bx24.js library in an HTML page. This library is required to use BX24.js functions within a Bitrix24 application. The script tag imports the library from the Bitrix24 API server.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/how-to-use-examples.md#2025-04-20_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"//api.bitrix24.com/api/v1/\"></script>\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for CRM Timeline Icons Request\nDESCRIPTION: This is an example of a successful response from the crm.timeline.icon.list method. It returns an array of icons with their codes, system status, and file URIs, along with the total count and timing information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"icons\": [\n            {\n                \"code\": \"call\",\n                \"isSystem\": true,\n                \"fileUri\": \"\"\n            },\n            {\n                \"code\": \"arrow-down\",\n                \"isSystem\": true,\n                \"fileUri\": \"\"\n            },\n            {\n                \"code\": \"info\",\n                \"isSystem\": false,\n                \"fileUri\": \"/upload/crm/13f/huhnvzds7ckoy6mk5mdze9pb7jqscpxi/e66fm2cbau9f8u32oe9jzx2qflqhj2vv\"\n            }\n        ]\n    },\n    \"total\": 3,\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response (JSON)\nDESCRIPTION: This JSON snippet shows a sample response structure for the `sale.basketitem.list` method. It includes the `result` object containing an array of `basketItems`, the `total` number of items, and `time` information about the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"basketItems\": [\n            {\n                \"currency\": \"RUB\",\n                \"id\": 6802,\n                \"name\": \"Стул офисный\",\n                \"orderId\": 5147,\n                \"price\": 1100,\n                \"productId\": 4343\n            },\n            \n            {\n                \"currency\": \"RUB\",\n                \"id\": 6791,\n                \"name\": \"Стул из каталога\",\n                \"orderId\": 5146,\n                \"price\": 900,\n                \"productId\": 0\n            },\n            {\n                \"currency\": \"RUB\",\n                \"id\": 6770,\n                \"name\": \"Сборка\",\n                \"orderId\": 5146,\n                \"price\": 1110,\n                \"productId\": 4342\n            }\n        ]\n    },\n    \"total\": 3,\n    \"time\": {\n        \"start\": 1713958546.058793,\n        \"finish\": 1713958548.507179,\n        \"duration\": 2.4483859539031982,\n        \"processing\": 0.2580289840698242,\n        \"date_start\": \"2024-04-24T13:35:46+02:00\",\n        \"date_finish\": \"2024-04-24T13:35:48+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Printing API Result in PHP\nDESCRIPTION: This PHP code snippet is used to display the API response in a readable format.  It uses `<PRE>` tags to preserve formatting and `print_r()` to output the contents of the `$result` variable, which is assumed to contain the API response data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/catalog-product-update.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n    ```\n```\n\n----------------------------------------\n\nTITLE: Data Structure for onCrmRequisiteAdd Event\nDESCRIPTION: This PHP code snippet shows the structure of the POST request data sent to the event handler when the `onCrmRequisiteAdd` event is triggered. It includes details about the event itself, the data associated with the new requisite, a timestamp, and authorization information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/events/on-crm-requisite-add.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n[\n    'event' => 'onCrmRequisiteAdd',\n    'data' => [\n        'FIELDS' => [\n            'ID' => 27,\n        ],\n    ],\n    'ts' => '1466439714',\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n?>\n```\n\n----------------------------------------\n\nTITLE: Adding a Block to a Landing Page with JavaScript\nDESCRIPTION: This JavaScript code snippet demonstrates how to add a new block to a landing page using the `landing.landing.addblock` method. It uses the BX24 library to make a REST API call, passing the landing page ID (`lid`) and the block's code (`CODE`) as parameters.  It includes error handling and displays the result in the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/landing/page/block-methods/landing-landing-add-block.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        'landing.landing.addblock',\n        {\n            lid: 351,\n            fields: {\n                CODE: '15.social'\n            }\n        },\n        function(result)\n        {\n            if(result.error())\n            {\n                console.error(result.error());\n            }\n            else\n            {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Content Blocks with cURL (OAuth) in Bash\nDESCRIPTION: Example of how to retrieve additional content blocks for a timeline record with ID 8 linked to a deal with ID 4 using cURL with OAuth authentication.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/crm-timeline-layout-blocks-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":2,\"entityId\":4,\"timelineId\":8,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.layout.blocks.get\n```\n\n----------------------------------------\n\nTITLE: Adding Delivery Service in Bitrix24 using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to add a delivery service to Bitrix24 using the `sale.delivery.extra.service.add` method via the `CRest` class. It defines parameters such as delivery ID, active status, code, name, and type for the new service. The script includes the `crest.php` file for Bitrix24 REST API interaction and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_7\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.delivery.extra.service.add',\n        [\n            'DELIVERY_ID' => 227,\n            'ACTIVE' => 'Y',\n            'CODE' => 'door_delivery',\n            'NAME' => 'Door Delivery',\n            'TYPE' => 'checkbox',\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Requisite Countries with cURL (Webhook)\nDESCRIPTION: This snippet shows how to retrieve the list of countries using the crm.requisite.preset.countries method via a cURL request with a webhook. Replace the placeholders with your actual Bitrix24 address, user ID, and webhook ID. No parameters are required for this method.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/crm-requisite-preset-countries.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.requisite.preset.countries\n```\n\n----------------------------------------\n\nTITLE: Querying Order Property Fields with JavaScript\nDESCRIPTION: This JavaScript code snippet uses the `BX24.callMethod` function to retrieve order property fields asynchronously. It specifies the property type as 'NUMBER' and handles both successful results and errors using callback functions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get-fields-by-type.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"sale.property.getfieldsbytype\", {\n            \"type\": \"NUMBER\",\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Reset Common Configuration using JavaScript\nDESCRIPTION: This snippet demonstrates how to reset the common configuration for contact details using the `BX24.callMethod` function in JavaScript within Bitrix24. It calls the `crm.contact.details.configuration.reset` method with the `scope` parameter set to \"C\" and handles the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.contact.details.configuration.reset',\n    {\n        scope: \"C\",\n    },\n    (result) => {\n        result.error()\n            ? console.error(result.error())\n            : console.info(result.data())\n        ;\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Status with Webhook cURL\nDESCRIPTION: This code snippet demonstrates how to delete a sale status using the cURL command with a Webhook in Bitrix24. It sends a POST request with the status ID to be deleted. Replace placeholders with actual Bitrix24 address, user ID, and webhook ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":\"MS\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.status.delete\n```\n\n----------------------------------------\n\nTITLE: Querying Property Variant with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to retrieve a property variant using cURL with a webhook in Bitrix24. It sends a POST request to the `sale.propertyvariant.get` method with the `id` parameter in the request body. Replace the placeholders with your Bitrix24 address, user ID, and webhook token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-get.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":6}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.propertyvariant.get\n```\n\n----------------------------------------\n\nTITLE: Adding a User Field using cURL (OAuth)\nDESCRIPTION: This code snippet demonstrates adding a user field to a Bitrix24 contact using cURL and OAuth authentication. It sends a POST request to the Bitrix24 REST API, including the OAuth token in the request body.  The request includes parameters to define the user field's properties. The endpoint includes a placeholder for the Bitrix24 address that needs to be replaced with the actual value.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"fields\":{\"LABEL\":\"Поле \\'Привет, мир!\\'\",\"USER_TYPE_ID\":\"string\",\"FIELD_NAME\":\"HELLO_WORLD\",\"MULTIPLE\":\"Y\",\"MANDATORY\":\"Y\",\"SHOW_FILTER\":\"Y\",\"SETTINGS\":{\"DEFAULT_VALUE\":\"Привет, мир! Значение по умолчанию\",\"ROWS\":3},\"SORT\":1000,\"EDIT_IN_LIST\":\"Y\",\"LIST_FILTER_LABEL\":\"Привет, мир! Фильтр\",\"LIST_COLUMN_LABEL\":{\"en\":\"Hello, World! Column\",\"ru\":\"Привет, мир! Колонка\",\"de\":\"Hallo, Welt! Spalte\"},\"EDIT_FORM_LABEL\":{\"en\":\"Hello, World! Edit\",\"ru\":\"Привет, мир! Редактировать\",\"de\":\"Hallo, Welt! Bearbeiten\"},\"ERROR_MESSAGE\":{\"en\":\"Hello, World! Error\",\"ru\":\"Привет, мир! Ошибка\",\"de\":\"Hallo, Welt! Fehler\"},\"HELP_MESSAGE\":{\"en\":\"Hello, World! Help\",\"ru\":\"Привет, мир! Помощь\",\"de\":\"Hallo, Welt! Hilfe\"}},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/crm.contact.userfield.add\n```\n\n----------------------------------------\n\nTITLE: Retrieving Document Fields REST API Call\nDESCRIPTION: API method to fetch document fields in the Bitrix24 CRM Document Generator. Returns a list of fields with their detailed descriptions. Accessible to all users with appropriate scope.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/document-generator/documents/crm-document-generator-document-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: rest-api\nCODE:\n```\ncrm.documentgenerator.document.getfields\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Field Characteristics\nDESCRIPTION: This code snippet shows the structure of the data returned by the `crm.userfield.fields` method. It illustrates how to access characteristics of a user field, specifically the \"Обязательное\" (Mandatory) property.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/companies/userfields/index.md#2025-04-20_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n    [MANDATORY] => Array\n                (\n                    [type] => char\n                    [title] => Обязательное\n                )\n\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the `crm.item.payment.get` method. It contains the payment details such as ID, account number, paid status, date paid, employee ID, payment system ID, sum, currency and payment system name. The time information about the query is also provided.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"result\":{\n      \"id\":1036,\n      \"accountNumber\":\"3653\\/1\",\n      \"paid\": \"Y\",\n      \"datePaid\":\"2024-05-20T12:32:02+03:00\",\n      \"empPaidId\":1,\n      \"paySystemId\":6,\n      \"sum\":0,\n      \"currency\":\"RUB\",\n      \"paySystemName\":\"Наличные\"\n   },\n   \"time\":{\n      \"start\":1716203536.414886,\n      \"finish\":1716203536.798211,\n      \"duration\":0.38332509994506836,\n      \"processing\":0.052394866943359375,\n      \"date_start\":\"2024-05-20T14:12:16+03:00\",\n      \"date_finish\":\"2024-05-20T14:12:16+03:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for Bank Detail Deletion\nDESCRIPTION: This code snippet illustrates the structure of the POST request data sent to the event handler when a bank detail is deleted. The data includes the event name, the ID of the deleted bank detail within the `FIELDS` array, a timestamp, and authentication parameters. This example demonstrates how the event data is formatted in the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/events/on-crm-bank-detail-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'event' => 'onCrmBankDetailDelete',\n    'data' => [\n        'FIELDS' => [\n            'ID' => 357,\n        ],\n    ],\n    'ts' => '1466439714',\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Calendar Events with cURL (OAuth)\nDESCRIPTION: This snippet shows how to retrieve user calendar events for the next 10 days using cURL with OAuth authentication. It includes the same parameters as the webhook example but adds the auth token parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"type\":\"user\",\"ownerId\":2,\"days\":10,\"forCurrentUser\":true,\"maxEventsCount\":100,\"detailUrl\":\"/company/personal/user/#user_id#/calendar/\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/calendar.event.get.nearest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Timeline Content Blocks with cURL (Webhook) in Bash\nDESCRIPTION: Example of how to retrieve additional content blocks for a timeline record with ID 8 linked to a deal with ID 4 using cURL with a webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/crm-timeline-layout-blocks-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":2,\"entityId\":4,\"timelineId\":8}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.timeline.layout.blocks.get\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This JSON object represents a successful response from the crm.requisite.preset.field.get method. It includes the field's ID, name, title, and sort order, along with timing information for the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"ID\": 1,\n        \"FIELD_NAME\": \"RQ_NAME\",\n        \"FIELD_TITLE\": \"TEST\",\n        \"IN_SHORT_LIST\": \"N\",\n        \"SORT\": 580\n    },\n    \"time\": {\n        \"start\": 1716826213.057061,\n        \"finish\": 1716826213.541336,\n        \"duration\": 0.48427510261535645,\n        \"processing\": 0.025674104690551758,\n        \"date_start\": \"2024-05-27T18:10:13+02:00\",\n        \"date_finish\": \"2024-05-27T18:10:13+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cashbox Handler with OAuth via cURL\nDESCRIPTION: This snippet demonstrates adding a cashbox handler using the `sale.cashbox.handler.add` method with OAuth authentication via cURL. It includes the necessary headers and JSON payload, showcasing handler properties and settings along with the `auth` parameter for the access token. Replace `put_your_bitrix24_address` and `put_access_token_here` with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-handler-add.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n\"-X POST \\\\\n-H \\\"Content-Type: application/json\\\" \\\\\n-H \\\"Accept: application/json\\\" \\\\\n-d '{\\\"CODE\\\":\\\"restcashbox01\\\",\\\"NAME\\\":\\\"REST-касса 01\\\",\\\"SORT\\\":100,\\\"SUPPORTS_FFD105\\\":\\\"Y\\\",\\\"SETTINGS\\\":{\\\"PRINT_URL\\\":\\\"http://example.com/rest_print.php\\\",\\\"CHECK_URL\\\":\\\"http://example.com/rest_check.php\\\",\\\"HTTP_VERSION\\\":\\\"1.1\\\",\\\"CONFIG\\\":{\\\"AUTH\\\":{\\\"LABEL\\\":\\\"Авторизация\\\",\\\"ITEMS\\\":{\\\"KEYWORD\\\":{\\\"TYPE\\\":\\\"STRING\\\",\\\"LABEL\\\":\\\"Кодовое слово\\\"},\\\"PREFERENCE\\\":{\\\"TYPE\\\":\\\"ENUM\\\",\\\"LABEL\\\":\\\"Множественный выбор\\\",\\\"REQUIRED\\\":\\\"Y\\\",\\\"OPTIONS\\\":{\\\"FIRST\\\":\\\"Первый\\\",\\\"SECOND\\\":\\\"Второй\\\",\\\"THIRD\\\":\\\"Третий\\\"}}}},\\\"INTERACTION\\\":{\\\"LABEL\\\":\\\"Настройки взаимодействия с кассой\\\",\\\"ITEMS\\\":{\\\"MODE\\\":{\\\"TYPE\\\":\\\"ENUM\\\",\\\"LABEL\\\":\\\"Режим работы с кассой\\\",\\\"OPTIONS\\\":{\\\"ACTIVE\\\":\\\"боевой\\\",\\\"TEST\\\":\\\"тестовый\\\"}}}}}},\\\"auth\\\":\\\"**put_access_token_here**\\\"}' \\\\\nhttps://**put_your_bitrix24_address**/rest/sale.cashbox.handler.add\"\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_price_type Data Type in Markdown\nDESCRIPTION: Specifies the structure and fields of the catalog_price_type data type, including price type ID, name, base status, sort order, external code, and creation/modification information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор типа цены ||\n|| **name**\n[`string`](../data-types.md) | Код типа цены ||\n|| **base**\n[`string`](../data-types.md) | Является ли тип цены базовым. Возможные значения:\n- `Y` — да\n- `N` — нет\n||\n|| **sort**\n[`integer`](../data-types.md) | Сортировка ||\n|| **xmlId**\n[`string`](../data-types.md) | Внешний код.\n\nМожно использовать для синхронизации текущего типа цены с аналогичной позицией во внешней системе ||\n|| **timestampX**\n[`datetime`](../data-types.md) | Дата изменения ||\n|| **createdBy**\n[`user.id`](../data-types.md) | Кем создан ||\n|| **modifiedBy**\n[`user.id`](../data-types.md) | Кем изменен ||\n|| **dateCreate**\n[`datetime`](../data-types.md) | Дата создания ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Error Response from CRM Timeline Logo Delete Operation\nDESCRIPTION: Example of an error response when trying to delete a non-existent CRM timeline logo. The error code indicates the logo was not found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"NOT_FOUND\",\n    \"error_description\": \"Logo not found for code `info`\"\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure for onCrmDocumentGeneratorDocumentDelete Event in PHP\nDESCRIPTION: This snippet shows the structure of the data array passed to the event handler when a document is deleted. It includes the document ID, entity type ID, and entity ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/document-generator/events/on-crm-document-generator-document-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'FIELDS' => [\n        'ID' => $documentId,\n        'ENTITY_TYPE_ID' => $entityTypeId,\n        'ENTITY_ID' => $entityId,\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Successful Response for Removing Task from Favorites in Bitrix24 REST API\nDESCRIPTION: This JSON snippet shows the structure of a successful response when removing a task from favorites. It includes the result (true for success) and timing information for the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/tasks-task-favorite-remove.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1552382402.930095,\n        \"finish\": 1552382403.055257,\n        \"duration\": 0.12516212463378906,\n        \"processing\": 0.09590816497802734,\n        \"date_start\": \"2019-03-12T11:20:02+02:00\",\n        \"date_finish\": \"2019-03-12T11:20:03+02:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Webhook Payload for CRM Contact User Field Update\nDESCRIPTION: JSON payload structure for the ONCRMCONTACTUSERFIELDUPDATE event, containing event details, user field information, and authentication parameters\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/events/on-crm-contact-user-field-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"event\": \"ONCRMCONTACTUSERFIELDUPDATE\",\n  \"event_handler_id\": \"15\",\n  \"data\": {\n    \"FIELDS\": {\n      \"ID\": \"554\",\n      \"ENTITY_ID\": \"CRM_CONTACT\",\n      \"FIELD_NAME\": \"UF_CRM_1724771514\"\n    }\n  },\n  \"ts\": \"1724775198\",\n  \"auth\": {\n    \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n    \"expires_in\": \"3600\",\n    \"scope\": \"crm\",\n    \"domain\": \"some-domain.bitrix24.com\",\n    \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n    \"status\": \"F\",\n    \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n    \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n    \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n    \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Request Delivery Information Using cURL OAuth in Bitrix24\nDESCRIPTION: Example of how to request delivery information using cURL with OAuth authentication. Requires a valid Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/delivery/crm-item-delivery-get.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":4077,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.item.delivery.get\n```\n\n----------------------------------------\n\nTITLE: Retrieving Business Value Person Domain in cURL (OAuth)\nDESCRIPTION: Example cURL request to retrieve business value person domains using OAuth authentication, with filtering and ordering options\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/business-value-person-domain/sale-business-value-person-domain-list.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"personTypeId\"],\"filter\":{\"=domain\":\"I\"},\"order\":{\"personTypeId\":\"DESC\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.businessValuePersonDomain.list\n```\n\n----------------------------------------\n\nTITLE: Creating a property group with cURL (OAuth)\nDESCRIPTION: This cURL command demonstrates how to create a sale property group using OAuth authentication.  It sends a POST request with the `fields` and `auth` parameters to the Bitrix24 REST API endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-add.md#2025-04-20_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"personTypeId\":3,\"name\":\"Новая группа свойств\",\"sort\":100},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.propertygroup.add\n```\n\n----------------------------------------\n\nTITLE: Query User Field List with PHP\nDESCRIPTION: This PHP code demonstrates how to retrieve a list of CRM requisite user fields using the `CRest::call` function, specifying the sorting order and filter criteria. The code includes the `crest.php` file and then prints the retrieved data using `print_r`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.requisite.userfield.list',\n        [\n            'order' => ['SORT' => 'ASC'],\n            'filter' => ['MANDATORY' => 'N', 'LANG' => 'ru']\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Data for CRM Smart Invoice Robot Designer Toolbar\nDESCRIPTION: This code snippet provides the data structure received when integrating a widget into the CRM Smart Invoice Robot Designer Toolbar. The array includes essential details such as the domain, protocol, language, application ID, authentication credentials, and the placement identifier. This data is delivered to the handler via a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/robot-designer-toolbar.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => en\\n    [APP_SID] => 551f45b6c2344572c396f678b19b9fd2\\n    [AUTH_ID] => 9c44d0670076a4b8006f518000000001201c07653252db32225bf0a643c676de22ba44\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 8cc3f7670076a4b8006f518000000001201c07f2d093e0a9e3af54d1c1bd9f51b39b95\\n    [member_id] => e8857f161a1a8288f312b6cc6ad67995\\n    [status] => L\\n    [PLACEMENT] => CRM_SMART_INVOICE_ROBOT_DESIGNER_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Delete CRM Requisite User Field with cURL (Webhook)\nDESCRIPTION: This cURL example demonstrates how to delete a CRM requisite user field using a webhook in Bitrix24. It requires providing the user ID and webhook key. The 'id' parameter specifies the ID of the user field to delete.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":235}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.requisite.userfield.delete\n```\n\n----------------------------------------\n\nTITLE: Updating Shipment Item - JavaScript Bitrix24 Method\nDESCRIPTION: JavaScript method call to update a shipment item using Bitrix24's BX24.callMethod with quantity and external ID\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-update.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n   'sale.shipmentitem.update', {\n        id: 7,\n        fields: {\n            quantity: 5,\n            xmlId: 'myNewXmlId',\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: CRM Contact List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_CONTACT_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, placement, and placement options. The PLACEMENT_OPTIONS contains the ID of the contact.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => fcd06d800f545d3b6937cdf58cf17ac2\n    [AUTH_ID] => 68e99f6600631fcd00005a4b00000001f0f107343b8243b5a1ad4f168fc8a8d05c182f\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => 5868c76600631fcd00005a4b00000001f0f107b05367c5e576376b33d68414e1b04f18\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => CRM_CONTACT_LIST_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"13037\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Response example\nDESCRIPTION: This example shows the structure of the response returned by the Bitrix24 REST API when querying a property variant. The response contains the `propertyVariant` object with details like `description`, `id`, `name`, `orderPropsId`, `sort`, and `value`, along with timing information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"propertyVariant\":{\n            \"description\":\"Описание значения для красного цвета\",\n            \"id\":6,\n            \"name\":\"Красный\",\n            \"orderPropsId\":49,\n            \"sort\":10,\n            \"value\":\"red\"\n        }\n    },\n    \"time\":{\n        \"start\":1711632097.794569,\n        \"finish\":1711632098.028609,\n        \"duration\":0.2340400218963623,\n        \"processing\":0.009068012237548828,\n        \"date_start\":\"2024-03-28T16:21:37+03:00\",\n        \"date_finish\":\"2024-03-28T16:21:38+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This is an example of an error response in JSON format, indicating an access denied error. The error field provides the error code, and the error_description field describes the error in more detail.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-delete.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Access denied.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Booking List API Response Structure in JSON Format\nDESCRIPTION: This JSON snippet shows the expected response format from the booking.v1.booking.list method. It includes booking details such as date period, description, ID, name, and associated resource IDs.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-list.md#2025-04-20_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"result\": {\n        \"booking\": [\n            {\n                \"datePeriod\": {\n                    \"from\": {\n                        \"timestamp\": 1723446900,\n                        \"timezone\": \"Europe/Kaliningrad\"\n                    },\n                    \"to\": {\n                        \"timestamp\": 1723447800,\n                        \"timezone\": \"Europe/Kaliningrad\"\n                    }\n                },\n                \"description\": null,\n                \"id\": 15,\n                \"name\": \"бронирование 15\",\n                \"resourceIds\": [\n                    1,\n                    2\n                ]\n            }\n        ]\n    },\n    \"time\": {\n        \"start\": 1724068028.331234,\n        \"finish\": 1724068028.726591,\n        \"duration\": 0.3953571319580078,\n        \"processing\": 0.13033390045166016,\n        \"date_start\": \"2025-01-21T13:47:08+02:00\",\n        \"date_finish\": \"2025-01-21T13:47:08+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing JSONEditor and Timeline Blocks\nDESCRIPTION: This snippet initializes a JSONEditor instance within a DOMContentLoaded event listener. It retrieves the HTML elements for the JSON editor and an alert container, and then creates instances of JSONEditor and ConfigurableTimelineBlocks, passing in the editor, alert container and defined presets.  The 'code' mode is enabled for the JSON Editor to allow direct code editing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/content-blocks-test-app.md#2025-04-20_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n document.addEventListener(\"DOMContentLoaded\", () => {\n        const alertContainer = document.getElementById('alert_container');\n        const jsonEditor = new JSONEditor(document.getElementById('json_editor'), {\n            mode: 'code',\n        });\n        new ConfigurableTimelineBlocks(\n            jsonEditor,\n            alertContainer,\n            presets,\n        );\n    });\n</script>\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: Example of an error JSON response from the crm.requisite.update method. The 'error' field contains the error code, and the 'error_description' field provides a detailed message about the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The Requisite with ID '57' is not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: CATALOG.MEASURE.ON.ADD Event Data Structure\nDESCRIPTION: Example of the POST request data structure received by the event handler when a measurement unit is added. Contains event identification, measurement unit data, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-measure-on-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    'event' => 'CATALOG.MEASURE.ON.ADD',    \n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 1,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'catalog',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_language Data Type in Markdown\nDESCRIPTION: Specifies the structure and fields of the catalog_language data type, including language ID, name, and activity status.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **lid**\n[`string`](../data-types.md) | Идентификатор языка ||\n|| **name**\n[`string`](../data-types.md) | Название языка ||\n|| **active**\n[`string`](../data-types.md) | Признак активности. Возможные значения:\n- `Y` — да\n- `N` — нет\n||\n|#\n```\n\n----------------------------------------\n\nTITLE: Successful Response JSON Example\nDESCRIPTION: This JSON structure represents a successful response from the `userfieldtype.add` method. It includes the `result` (boolean indicating success) and `time` (information about the request processing time).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-add.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":true,\n    \"time\":{\n        \"start\":1724421710.397825,\n        \"finish\":1724421711.040353,\n        \"duration\":0.6425280570983887,\n        \"processing\":5.888938903808594e-5,\n        \"date_start\":\"2024-08-23T16:01:50+02:00\",\n        \"date_finish\":\"2024-08-23T16:01:51+02:00\",\"operating\":0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Структура успешного ответа при получении связей бронирования в Bitrix24\nDESCRIPTION: Пример JSON структуры успешного ответа от метода booking.v1.booking.externalData.list. Ответ содержит массив связей (externalData) и информацию о времени выполнения запроса.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-list.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"externalData\": [\n            {\n                \"entityTypeId\": \"DEAL\",\n                \"moduleId\": \"crm\",\n                \"value\": \"1\"\n            },\n            {\n                \"entityTypeId\": \"DEAL\",\n                \"moduleId\": \"crm\",\n                \"value\": \"2\"\n            }\n        ]\n    },\n    \"time\": {\n        \"start\": 1724068028.331234,\n        \"finish\": 1724068028.726591,\n        \"duration\": 0.3953571319580078,\n        \"processing\": 0.13033390045166016,\n        \"date_start\": \"2025-01-21T13:47:08+02:00\",\n        \"date_finish\": \"2025-01-21T13:47:08+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format\nDESCRIPTION: This JSON snippet shows the structure of a successful response when the `crm.contact.details.configuration.reset` method is executed. The `result` field indicates success, and the `time` field provides information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1724682584.069094,\n        \"finish\": 1724682584.38436,\n        \"duration\": 0.31526613235473633,\n        \"processing\": 0.025727033615112305,\n        \"date_start\": \"2024-08-26T16:29:44+02:00\",\n        \"date_finish\": \"2024-08-26T16:29:44+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response (JSON)\nDESCRIPTION: This JSON object represents a successful response from the `sale.shipmentproperty.get` method. It includes details of the requested property and timing information. The 'property' object contains attributes such as active status, code, name, and other relevant metadata.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"property\": {\n            \"active\": \"Y\",\n            \"code\": \"PHONE\",\n            \"defaultValue\": \"\",\n            \"description\": \"\",\n            \"id\": 22,\n            \"inputFieldLocation\": \"0\",\n            \"isAddress\": \"N\",\n            \"isAddressFrom\": \"N\",\n            \"isAddressTo\": \"N\",\n            \"isEmail\": \"N\",\n            \"isFiltered\": \"N\",\n            \"isLocation\": \"N\",\n            \"isLocation4tax\": \"N\",\n            \"isPayer\": \"N\",\n            \"isPhone\": \"Y\",\n            \"isProfileName\": \"N\",\n            \"isZip\": \"N\",\n            \"multiple\": \"N\",\n            \"name\": \"Телефон\",\n            \"personTypeId\": 3,\n            \"propsGroupId\": 5,\n            \"required\": \"Y\",\n            \"settings\": [],\n            \"sort\": 120,\n            \"type\": \"STRING\",\n            \"userProps\": \"Y\",\n            \"util\": \"N\",\n            \"xmlId\": \"\"\n        }\n    },\n    \"time\": {\n        \"start\": 1712818820.026505,\n        \"finish\": 1712818820.232912,\n        \"duration\": 0.2064070701599121,\n        \"processing\": 0.018364906311035156,\n        \"date_start\": \"2024-04-11T10:00:20+03:00\",\n        \"date_finish\": \"2024-04-11T10:00:20+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Catalog Product to Basket using PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to add a catalog product to the basket. It includes the `crest.php` file for Bitrix24 REST API interaction. The code calls the `sale.basketitem.addCatalogProduct` method with an array containing the `fields` parameter, including `orderId`, `quantity`, `productId`, and `currency`. The result of the API call is then printed to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add-catalog-product.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.basketitem.addCatalogProduct',\n        [\n            'fields' => [\n                'orderId' => 5147,\n                'quantity' => 1,\n                'productId' => 4347,\n                'currency' => 'RUB',\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating Userfieldtype via OAuth cURL\nDESCRIPTION: Demonstrates updating a user field type configuration using OAuth authentication method with cURL. Includes access token and similar configuration parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-update.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n    \"USER_TYPE_ID\": \"test_type\",\n    \"HANDLER\": \"https://www.myapplication.com/handler/\",\n    \"TITLE\": \"Updated test type\",\n    \"DESCRIPTION\": \"Test userfield type for documentation with updated description\",\n    \"OPTIONS\": {\n        \"height\": 60\n    },\n    \"auth\": \"**put_access_token_here**\"\n}' \\\nhttps://**put_your_bitrix24_address**/rest/userfieldtype.update\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Item Shipment Fields with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to retrieve payment item shipment fields using cURL with a webhook. It sends a POST request to the Bitrix24 REST API endpoint, including the necessary headers and an empty JSON payload. The user ID and webhook token must be provided.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-shipment/sale-payment-item-shipment-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.paymentitemshipment.getfields\n```\n\n----------------------------------------\n\nTITLE: Querying Basket Properties Fields with cURL (OAuth)\nDESCRIPTION: This snippet shows how to retrieve basket property fields using a cURL request with OAuth authentication.  It specifies the content type as JSON and includes the access token in the request body.  The URL includes the Bitrix24 address and the endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-properties/sale-basket-properties-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.basketproperties.getFields\n```\n\n----------------------------------------\n\nTITLE: Creating a property group with JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to call the `sale.propertygroup.add` method.  It passes the required `fields` parameter, which includes the `personTypeId`, `name`, and `sort` values. The callback function handles the response, logging errors or the returned data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-add.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nBX24.callMethod(\n    \"sale.propertygroup.add\", {\n        \"fields\": {\n            \"personTypeId\": 3,\n            \"name\": \"Новая группа свойств\",\n            \"sort\": 100,\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Property Variant with PHP\nDESCRIPTION: This snippet shows how to retrieve a property variant using PHP with the Bitrix24 REST API. It uses the `CRest::call` function to call the `sale.propertyvariant.get` method with the `id` parameter. The result is then printed to the console using `print_r`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.propertyvariant.get',\n    [\n        'id' => 6\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Logo using cURL with OAuth\nDESCRIPTION: This snippet shows how to delete a timeline logo using cURL with OAuth authentication. The code parameter specifies which logo to delete.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"code\":\"info\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.logo.delete\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet demonstrates an error response from the `sale.cashbox.handler.add` method. It contains an `error` code indicating the type of error, and an `error_description` providing more detail about the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-handler-add.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"ERROR_HANDLER_ALREADY_EXIST\",\n    \"error_description\": \"Handler already exists!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Property with cURL (OAuth)\nDESCRIPTION: This cURL command shows how to retrieve a shipment property using OAuth authentication. It includes the access token in the request body. Replace placeholders for your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-get.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":22,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipmentproperty.get\n```\n\n----------------------------------------\n\nTITLE: Receiving Data for CRM Contact List Toolbar\nDESCRIPTION: This code snippet illustrates the data structure received by the handler when a widget is placed in the CRM contact list toolbar. It includes information such as domain, protocol, language, application ID, authentication details, member ID, status, and placement code. This data is sent as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/list-toolbar.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => com\\n    [APP_SID] => 3aec6e81c200862ebe7ed02c5a0551d9\\n    [AUTH_ID] => 4af29f6600631fcd00005a4b00000001f0f107657b02e0d0eaaaabbe09ea6c8628110d\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 3a71c76600631fcd00005a4b00000001f0f107ec7126f6c7499958546207d42d820184\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_CONTACT_LIST_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Response Format for Epic Fields in Bitrix24 REST API\nDESCRIPTION: This JSON shows the response format for the tasks.api.scrum.epic.getFields method. It returns a fields object containing all available epic fields with their respective data types.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/epic/tasks-api-scrum-epic-get-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"fields\":\n    {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"groupId\": {\n            \"type\": \"integer\"\n        },\n        \"color\": {\n            \"type\": \"string\"\n        },\n        \"files\": {\n            \"type\": \"array\"\n        },\n        \"createdBy\": {\n            \"type\": \"integer\"\n        },\n        \"modifiedBy\": {\n            \"type\": \"integer\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet shows the structure of a successful response when deleting a lead. The 'result' field is set to true, indicating that the operation was successful.  It also includes timing information about the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1705764932.998683,\n        \"finish\": 1705764937.173995,\n        \"duration\": 4.1753120422363281,\n        \"processing\": 3.3076529502868652,\n        \"date_start\": \"2024-01-20T18:35:32+03:00\",\n        \"date_finish\": \"2024-01-20T18:35:37+03:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: This JSON structure represents an error response from the `sale.persontype.delete` method. It contains an `error` code and an `error_description` providing details about the error that occurred.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": 200750000008,\n    \"error_description\": \"В заказах используется тип плательщика с ID=8\",\n}\n```\n\n----------------------------------------\n\nTITLE: Response Format for Booking Client List in Bitrix24 REST API\nDESCRIPTION: JSON response example for the booking.v1.booking.client.list method showing the structure of successful response. The response includes an array of booking clients with their IDs and types, along with execution time information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/client/booking-v1-booking-client-list.md#2025-04-20_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"result\": {\n        \"bookingClient\": [\n            {\n                \"id\": 1,\n                \"type\": {\n                    \"code\": \"COMPANY\",\n                    \"module\": \"crm\"\n                }\n            },\n            {\n                \"id\": 2,\n                \"type\": {\n                    \"code\": \"CONTACT\",\n                    \"module\": \"crm\"\n                }\n            }\n        ]\n    },\n    \"time\": {\n        \"start\": 1724068028.331234,\n        \"finish\": 1724068028.726591,\n        \"duration\": 0.3953571319580078,\n        \"processing\": 0.13033390045166016,\n        \"date_start\": \"2025-01-21T13:47:08+02:00\",\n        \"date_finish\": \"2025-01-21T13:47:08+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CRM Company List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_COMPANY_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, placement, and placement options. The PLACEMENT_OPTIONS contains the ID of the company.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => b61394bd23467de46689899d065e8a0f\n    [AUTH_ID] => 9ce99f6600631fcd00005a4b00000001f0f1073d433234d6fbee7d770aac0b3ba5e23f\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => 8c68c76600631fcd00005a4b00000001f0f107704816219d9d7a765a4038ae79f9a3db\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => CRM_COMPANY_LIST_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"2946\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This is an example of a successful response from the `crm.item.payment.add` method.  It includes the ID of the created payment in the `result` field, and timing information in the `time` field.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-add.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": 1033,\n    \"time\": {\n        \"start\": 1716193064.749158,\n        \"finish\": 1716193065.656833,\n        \"duration\": 0.90767502784729,\n        \"processing\": 0.6450831890106201,\n        \"date_start\": \"2024-05-20T11:17:44+03:00\",\n        \"date_finish\": \"2024-05-20T11:17:45+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Установка имени чата через JavaScript в Bitrix24 REST API\nDESCRIPTION: Пример использования метода imconnector.chat.name.set через JavaScript. Устанавливает новое имя для указанного чата в коннекторе и обрабатывает результат.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/imconnector/imconnector-chat-name-set.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nvar params = {\n    CONNECTOR: 'connector',\n    LINE: '105',\n    CHAT_ID: '47e007b1-ee15-43db-bcba-1c26e5884d3f',\n    NAME: 'Новое имя диалога'\n};\nBX24.callMethod(\n    'imconnector.chat.name.set',\n    params,\n    function(result)\n    {\n        if(result.error())\n            alert(\"Error: \" + result.error());\n        else\n            alert(\"Успешно: \" + result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_store Data Type in Markdown\nDESCRIPTION: Details the structure and fields of the catalog_store data type, including store ID, address, title, activity status, GPS coordinates, image, creation and modification dates, and other store-related information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Название**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор склада ||\n|| **address**\n[`string`](../data-types.md) | Адрес склада ||\n|| **title**\n[`string`](../data-types.md) | Название склада ||\n|| **active**\n[`string`](../data-types.md) | Активность. Возможные значения:\n- `Y` — да\n- `N` — нет ||\n|| **description**\n[`string`](../data-types.md) | Описание ||\n|| **gpsN**\n[`double`](../data-types.md) | GPS-широта ||\n|| **gpsS**\n[`double`](../data-types.md) | GPS-долгота ||\n|| **imageId**\n[`object`](../data-types.md) | Изображение. Объект в формате `{fileData: [value1, value2]}`, где:\n- `value1` – название файла картинки с расширением\n- `value2` – картинка в формате base64\n\nДля удаления картинки используйте объект в формате `{remove: 'Y'}` ||\n|| **dateModify**\n[`datetime`](../data-types.md) | Дата изменения ||\n|| **dateCreate**\n[`datetime`](../data-types.md) | Дата создания ||\n|| **userId**\n[`user.id`](../data-types.md) | Кем создан ||\n|| **modifiedBy**\n[`user.id`](../data-types.md) | Кем изменен ||\n|| **phone**\n[`string`](../data-types.md) | Телефон ||\n|| **schedule**\n[`string`](../data-types.md) | График работы ||\n|| **xmlId**\n[`string`](../data-types.md) | Внешний код.\n\nМожно использовать для синхронизации текущего склада с аналогичной позицией во внешней системе ||\n|| **sort**\n[`integer`](../data-types.md) | Сортировка ||\n|| **email**\n[`string`](../data-types.md) | E-mail ||\n|| **issuingCenter**\n[`string`](../data-types.md) | Является ли пунктом выдачи. Возможные значения:\n- `Y` – да\n- `N` – нет ||\n|| **code**\n[`string`](../data-types.md) | Символьный код ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Example POST Request Data for onCrmDynamicItemUpdate Event in Bitrix24 CRM\nDESCRIPTION: Sample JSON data sent to an event handler when a CRM dynamic item with ID=24 belonging to smart process with entityTypeId=1220 is updated. The data includes event identification, item details, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/events/on-crm-dynamic-item-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMDYNAMICITEMUPDATE\",\n    \"event_handler_id\": \"5\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"24\",\n            \"ENTITY_TYPE_ID\": \"1220\"\n        }\n    },\n    \"ts\": \"1723538517\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet illustrates an error response when adding a delivery handler, specifically a validation error where the `CODE` parameter is missing. It includes the `error` and `error_description` fields to provide details about the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-add.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":\"ERROR_CHECK_FAILURE\",\n   \"error_description\":\"Parameter CODE is not defined\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful response format\nDESCRIPTION: This JSON snippet demonstrates the format of a successful response after deleting a sale property group. It shows the `result` as true and includes timing information about the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":true,\n    \"time\":{\n        \"start\":1711454254.569172,\n        \"finish\":1711454254.795907,\n        \"duration\":0.22673511505126953,\n        \"processing\":0.03125,\n        \"date_start\":\"2024-03-26T14:57:34+03:00\",\n        \"date_finish\":\"2024-03-26T14:57:34+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Success Response from sale.tradePlatform.getFields\nDESCRIPTION: This JSON shows a successful response from the sale.tradePlatform.getFields method. It returns an object containing field descriptions for the tradePlatform entity with metadata about each field.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/trade-platform/sale-trade-platform-get-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{ \n    \"result\": { \n        \"tradePlatform\": { \n            \"catalogSectionTabClassName\": { \n                \"isImmutable\": false,\n                \"isReadOnly\": false, \n                \"isRequired\": false, \n                \"type\": \"string\" \n            }, \n            \"class\": { \n                \"isImmutable\": false, \n                \"isReadOnly\": false, \n                \"isRequired\": false, \n                \"type\": \"string\" \n            } \n            // ... прочие поля \n        } \n    },\n    \"time\": {  \n        \"start\": 1712135957.057659,  \n        \"finish\": 1712135957.407821,  \n        \"duration\": 0.3501620292663574,  \n        \"processing\": 0.011919021606445312,  \n        \"date_start\": \"2024-04-03T11:19:17+02:00\",  \n        \"date_finish\": \"2024-04-03T11:19:17+02:00\",  \n        \"operating_reset_at\": 1705765533,  \n        \"operating\": 3.3076241016387939  \n    }  \n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authorization Validator in PHP\nDESCRIPTION: Custom authorization validator class that extends Bitrix\\Rest\\OAuth\\Auth to handle token validation for the custom authorization flow.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/cloud-and-on-premise/on-premise/custom-auth-provider.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Demo\\AuthProvider;\n\nuse Bitrix\\Rest\\OAuth\\Auth;\n\nclass AuthFull extends Auth\n{\n    protected static function check($accessToken)\n    {\n        if(!AuthProvider::instance()->checkToken($accessToken))\n        {\n            return parent::check($accessToken);\n        }\n\n        $authResult = AuthProvider::instance()->getStorage()->restore($accessToken);\n\n        if($authResult === false)\n        {\n            $authResult = array(\n                'error' => 'invalid_token',\n                'error_description' => 'Token expired or invalid'\n            );\n        }\n\n        return $authResult;\n    }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Multiple File Fields in Bitrix24 CRM (JSON)\nDESCRIPTION: Shows how to partially update a multiple file field in a CRM item. This example keeps two existing files and adds a new one.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-update.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"fields\": {\n        \"ufCrm1617027453943\": [\n            {\n                \"id\": 12\n            },\n            {\n                \"id\": 44\n            },\n            [\n                \"myNewFile.pdf\",\n                \"...base64_encoded_file_content...\"\n            ]\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response (Example 2)\nDESCRIPTION: This JSON snippet represents a successful response from the `crm.requisite.list` method when querying a user field. It shows the value of the custom field `UF_CRM_1707997209` for a specific requisite, along with the total number of records and execution time information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"result\": [\n            {\n                \"UF_CRM_1707997209\": \"45\"\n            }\n        ],\n        \"total\": 1,\n        \"time\": {\n            \"start\": 1717151052.551011,\n            \"finish\": 1717151052.94743,\n            \"duration\": 0.39641880989074707,\n            \"processing\": 0.028468847274780273,\n            \"date_start\": \"2024-05-31T12:24:12+02:00\",\n            \"date_finish\": \"2024-05-31T12:24:12+02:00\",\n            \"operating\": 0\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting a property group via cURL (OAuth)\nDESCRIPTION: This code snippet demonstrates how to delete a sale property group using cURL with OAuth authentication.  It sends a POST request to the Bitrix24 REST API endpoint, including the `id` of the property group to be deleted and the OAuth `auth` token in the JSON payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":15,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.propertygroup.delete\n```\n\n----------------------------------------\n\nTITLE: Query User Field List with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of CRM requisite user fields using a webhook, specifying the sorting order and filter criteria in JSON format. The command sends a POST request with the `order` and `filter` parameters to the specified Bitrix24 REST endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"order\":{\"SORT\":\"ASC\"},\"filter\":{\"MANDATORY\":\"N\",\"LANG\":\"ru\"}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.userfield.list\n```\n\n----------------------------------------\n\nTITLE: Message Data Structure for OnImConnectorMessageUpdate Event in JSON\nDESCRIPTION: This JSON structure represents the format of a message in the DATA array of the OnImConnectorMessageUpdate event. It includes information about the chat, message ID, and the updated message text.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/imconnector/events/on-im-connector-message-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"im\": {\n    \"chat_id\": \"845\",\n    \"message_id\": \"344029\"\n},\n\"message\": {\n    \"id\": [\n     \"99\"\n    ],\n    \"text\": \"Сергей \\\"Покоев\\\":\\n Тестовое сообщение 55\"\n},\n\"chat\": {\n    \"id\": \"2\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Example error response from the API\nDESCRIPTION: JSON error response structure returned when encountering issues with the request, showing error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"INVALID_REQUEST\",\n    \"error_description\": \"Https required\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Scrum Task Fields using PHP\nDESCRIPTION: This snippet shows how to retrieve Scrum task fields by ID using PHP. It uses the CRest::call function to call the Bitrix24 REST API method tasks.api.scrum.task.get with the task ID as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'tasks.api.scrum.task.get',\n    [\n        'id' => 1\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet represents a successful response after deleting a CRM requisite user field. It includes a 'result' field set to true, indicating success, and a 'time' object with information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1717771689.639506,\n        \"finish\": 1717771690.189804,\n        \"duration\": 0.5502979755401611,\n        \"processing\": 0.10051202774047852,\n        \"date_start\": \"2024-06-07T16:48:09+02:00\",\n        \"date_finish\": \"2024-06-07T16:48:10+02:00\",\n        \"operating\": 0.1004788875579834\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful API Response Format\nDESCRIPTION: This JSON structure shows the successful response format from the calendar API. It includes an array of calendar events with their properties such as ID, name, dates, locations, and attendees, along with request processing time information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n            \"ID\": \"1265\",\n            \"PARENT_ID\": \"1265\",\n            \"DELETED\": \"N\",\n            \"CAL_TYPE\": \"user\",\n            \"OWNER_ID\": \"1\",\n            \"NAME\": \"Event Name\",\n            \"DATE_FROM\": \"12/11/2024 05:59:00 pm\",\n            \"DATE_TO\": \"12/11/2024 06:59:00 pm\",\n            \"ORIGINAL_DATE_FROM\": null,\n            \"TZ_FROM\": \"Europe/Riga\",\n            \"TZ_TO\": \"Europe/Riga\",\n            \"TZ_OFFSET_FROM\": \"7200\",\n            \"TZ_OFFSET_TO\": \"7200\",\n            \"DATE_FROM_TS_UTC\": \"1733932740\",\n            \"DATE_TO_TS_UTC\": \"1733936340\",\n            \"DT_SKIP_TIME\": \"N\",\n            \"DT_LENGTH\": 3600,\n            \"EVENT_TYPE\": null,\n            \"CREATED_BY\": \"1\",\n            \"DATE_CREATE\": \"12/05/2024 01:48:41 pm\",\n            \"TIMESTAMP_X\": \"12/05/2024 01:48:41 pm\",\n            \"DESCRIPTION\": \"Description for event\",\n            \"PRIVATE_EVENT\": \"\",\n            \"ACCESSIBILITY\": \"free\",\n            \"IMPORTANCE\": \"normal\",\n            \"IS_MEETING\": true,\n            \"MEETING_STATUS\": \"H\",\n            \"MEETING_HOST\": \"1\",\n            \"MEETING\": {\n                \"HOST_NAME\": \"User Name\",\n                \"NOTIFY\": false,\n                \"REINVITE\": false,\n                \"ALLOW_INVITE\": false,\n                \"HIDE_GUESTS\": false,\n                \"MEETING_CREATOR\": 1,\n                \"LANGUAGE_ID\": \"ru\",\n                \"MAIL_FROM\": \"\"\n            },\n            \"LOCATION\": \"test location\",\n            \"REMIND\": [\n                {\n                    \"type\": \"min\",\n                    \"count\": 50\n                }\n            ],\n            \"COLOR\": \"#9dcf00\",\n            \"RRULE\": {\n                \"FREQ\": \"WEEKLY\",\n                \"BYDAY\": {\n                    \"MO\": \"MO\",\n                    \"WE\": \"WE\"\n                },\n                \"INTERVAL\": 1,\n                \"UNTIL\": \"12/24/2024\",\n                \"~UNTIL\": \"12/24/2024\",\n                \"UNTIL_TS\": 1734998400\n            },\n            \"EXDATE\": \"11/28/2024;12/05/2024;12/12/2024;12/19/2024;12/26/2024\",\n            \"DAV_XML_ID\": \"20241211T155900Z-534185204b362e9be7e261e92ccd9078@b24evo.lan\",\n            \"G_EVENT_ID\": \"\",\n            \"DAV_EXCH_LABEL\": \"\",\n            \"CAL_DAV_LABEL\": \"\",\n            \"VERSION\": \"1\",\n            \"ATTENDEES_CODES\": [\n                \"U1\"\n            ],\n            \"RECURRENCE_ID\": 1272,\n            \"RELATIONS\": {\n                \"ORIGINAL_RECURSION_ID\": 1271,\n                \"COMMENT_XML_ID\": \"EVENT_1271_12/23/2024\"\n            },\n            \"SECTION_ID\": \"4\",\n            \"SYNC_STATUS\": null,\n            \"UF_CRM_CAL_EVENT\": [\n                \"CO_1\",\n                \"L_5\"\n            ],\n            \"UF_WEBDAV_CAL_EVENT\": false,\n            \"SECTION_DAV_XML_ID\": null,\n            \"DATE_FROM_FORMATTED\": \"Wed Dec 11 2024 17:59:00\",\n            \"DATE_TO_FORMATTED\": \"Wed Dec 11 2024 18:59:00\",\n            \"SECT_ID\": \"4\",\n            \"ATTENDEE_LIST\": [\n                {\n                    \"id\": 1,\n                    \"entryId\": \"1265\",\n                    \"status\": \"H\"\n                }\n            ],\n            \"COLLAB_ID\": null,\n            \"~RRULE_DESCRIPTION\": \"каждую неделю по: Пн, Ср, от 12/11/2024 до 12/24/2024\",\n            \"attendeesEntityList\": [\n                {\n                    \"entityId\": \"user\",\n                    \"id\": 1\n                }\n            ],\n            \"~DESCRIPTION\": \"Description for event\",\n            \"~USER_OFFSET_FROM\": 7200,\n            \"~USER_OFFSET_TO\": 7200\n        },\n        {\n            \"ID\": \"1221\",\n            \"...\": \"...\"\n        }\n    ],\n    \"time\": {\n        \"start\": 1733411636.753706,\n        \"finish\": 1733411637.040975,\n        \"duration\": 0.28726911544799805,\n        \"processing\": 0.05995798110961914,\n        \"date_start\": \"2024-12-05T15:13:56+00:00\",\n        \"date_finish\": \"2024-12-05T15:13:57+00:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Definición del método BX24.selectUsers en JavaScript\nDESCRIPTION: Firma del método BX24.selectUsers que permite abrir un diálogo de selección múltiple de usuarios. El método recibe un callback como parámetro requerido.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bx24-js-sdk/system-dialogues/bx24-select-users.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.selectUsers(callback: callable): void;\n```\n\n----------------------------------------\n\nTITLE: Successful API Response\nDESCRIPTION: Example of a successful HTTP 200 response from the `crm.item.details.configuration.forceCommonScopeForAll` method. The `result` field is `true`, indicating success.  The `time` field provides information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/item-details-configuration/crm-item-details-configuration-forceCommonScopeForAll.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1720687903.685834,\n        \"finish\": 1720687904.076471,\n        \"duration\": 0.3906371593475342,\n        \"processing\": 0.02508091926574707,\n        \"date_start\": \"2024-07-11T10:51:43+02:00\",\n        \"date_finish\": \"2024-07-11T10:51:44+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Payer Type Status Codes\nDESCRIPTION: Defines the status codes for different types of payers in the Bitrix24 online store system\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/business-value-person-domain/index.md#2025-04-20_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nI - Individual person\nE - Legal entity\n```\n\n----------------------------------------\n\nTITLE: Basket Item Property Metadata Schema\nDESCRIPTION: Defines the structure for additional properties associated with basket items, including naming, sorting, and external identification\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/data-types.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### sale_basket_item_property\n#|\n|| **Значение**\n`тип` | **Описание** ||...\n```\n\n----------------------------------------\n\nTITLE: OnTaskUpdate Event Data Structure in JSON\nDESCRIPTION: Structure of the data received by the event handler when a task is updated, including before and after task field values, accessibility information, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/events-tasks/on-task-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\narray(\n    'event' => 'ONTASKUPDATE',\n    'data' => array(\n        'FIELDS_BEFORE' => array('ID' => 123),\n        'FIELDS_AFTER' => array('ID' => 123),\n        'IS_ACCESSIBLE_BEFORE' => 'undefined',\n        'IS_ACCESSIBLE_AFTER' => 'undefined',\n    ),\n    'ts' => '1466439714',\n    'auth' => array(\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n        ),\n)\n```\n\n----------------------------------------\n\nTITLE: Error Response for CRM Timeline Comments API\nDESCRIPTION: Example of an error response from the crm.timeline.comment.list method when access is denied due to insufficient permissions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Access denied.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Payment Response Processing in JSON\nDESCRIPTION: Detailed payment response structure with multiple fields describing payment properties, including immutability, read-only status, required status, and data types\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"payment\": {\n            \"accountNumber\": {\n                \"isImmutable\": false,\n                \"isReadOnly\": true,\n                \"isRequired\": false,\n                \"type\": \"string\"\n            },\n            ...\n        }\n    },\n    \"time\": {\n        \"start\": 1713446682.387006,\n        \"finish\": 1713446682.788821,\n        \"duration\": 0.40181493759155273\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Delivery Service Config in JavaScript\nDESCRIPTION: JavaScript method for updating delivery service configuration using BX24.callMethod. Includes configuration parameters and error handling.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery/sale-delivery-config-update.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.delivery.config.update', {\n        ID: 196,\n        CONFIG: [{\n                CODE: \"SETTING_1\",\n                VALUE: \"New SETTING_1 string value\",\n            },\n            {\n                CODE: \"SETTING_2\",\n                VALUE: \"N\",\n            },\n            {\n                CODE: \"SETTING_3\",\n                VALUE: 999.99,\n            },\n            {\n                CODE: \"SETTING_4\",\n                VALUE: \"Option2Code\",\n            },\n            {\n                CODE: \"SETTING_5\",\n                VALUE: \"25.03.2023\",\n            },\n            {\n                CODE: \"SETTING_6\",\n                VALUE: \"0000144962\",\n            },\n        ],\n\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epic Fields with cURL OAuth in Bitrix24 REST API\nDESCRIPTION: This example shows how to call the tasks.api.scrum.epic.getFields method using cURL with OAuth authentication. The method retrieves all available fields for epics without requiring any parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/epic/tasks-api-scrum-epic-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\nauth=YOUR_ACCESS_TOKEN\n}' \\\nhttps://your-domain.bitrix24.com/rest/tasks.api.scrum.epic.getFields\n```\n\n----------------------------------------\n\nTITLE: Basket Properties Fields Response Example (JSON)\nDESCRIPTION: This JSON snippet represents a sample response from the `sale.basketproperties.getFields` method. It includes metadata about basket properties such as `basketId`, `code`, `id`, `name`, `sort`, `value`, and `xmlId`, defining their properties like `isImmutable`, `isReadOnly`, `isRequired`, and `type`. It also includes timing information about the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-properties/sale-basket-properties-get-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"basketProperties\": {\n            \"basketId\": {\n                \"isImmutable\": true,\n                \"isReadOnly\": false,\n                \"isRequired\": true,\n                \"type\": \"integer\"\n            },\n            \"code\": {\n                \"isImmutable\": false,\n                \"isReadOnly\": false,\n                \"isRequired\": true,\n                \"type\": \"string\"\n            },\n            \"id\": {\n                \"isImmutable\": false,\n                \"isReadOnly\": true,\n                \"isRequired\": false,\n                \"type\": \"integer\"\n            },\n            \"name\": {\n                \"isImmutable\": false,\n                \"isReadOnly\": false,\n                \"isRequired\": true,\n                \"type\": \"string\"\n            },\n            \"sort\": {\n                \"isImmutable\": false,\n                \"isReadOnly\": false,\n                \"isRequired\": false,\n                \"type\": \"integer\"\n            },\n            \"value\": {\n                \"isImmutable\": false,\n                \"isReadOnly\": false,\n                \"isRequired\": true,\n                \"type\": \"string\"\n            },\n            \"xmlId\": {\n                \"isImmutable\": false,\n                \"isReadOnly\": false,\n                \"isRequired\": false,\n                \"type\": \"string\"\n            }\n        }\n    },\n    \"time\": {\n        \"start\": 1714036549.130012,\n        \"finish\": 1714036550.38785,\n        \"duration\": 1.2578380107879639,\n        \"processing\": 0.042649030685424805,\n        \"date_start\": \"2024-04-25T11:15:49+02:00\",\n        \"date_finish\": \"2024-04-25T11:15:50+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deal Card Configuration Methods\nDESCRIPTION: Methods for getting, resetting, and setting deal card configurations in Bitrix24 CRM, supporting both common and personal card views\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/custom-form/index.md#2025-04-20_snippet_0\n\nLANGUAGE: REST API\nCODE:\n```\ncrm.deal.details.configuration.get\ncrm.deal.details.configuration.reset\ncrm.deal.details.configuration.set\ncrm.deal.details.configuration.forceCommonScopeForAll\n```\n\n----------------------------------------\n\nTITLE: Error response format\nDESCRIPTION: This JSON snippet demonstrates the format of an error response when deleting a sale property group. It includes an `error` code and an `error_description` indicating the reason for the failure (e.g., property group not found).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":200940400001,\n    \"error_description\":\"property group is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Contact from Lead using cURL (OAuth)\nDESCRIPTION: This cURL command shows how to remove a contact's link to a lead through Bitrix24's OAuth authentication. The `auth` parameter includes the access token.  Ensure to replace the placeholders for the Bitrix24 address and the access token with your specific credentials.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/management-communication/crm-lead-contact-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":1,\"fields\":{\"CONTACT_ID\":1010},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/crm.lead.contact.delete\n```\n\n----------------------------------------\n\nTITLE: Calling placement.call with disableAutoClose via cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to call the `placement.call` method with the `disableAutoClose` placement using cURL with webhook authentication. It sends a POST request with the placement name and an empty parameter object in JSON format. Replace placeholders with your Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/disable-auto-close.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"PLACEMENT\":\"disableAutoClose\",\"PARAMS\":{}}' \\\n\"https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/placement.call\"\n```\n\n----------------------------------------\n\nTITLE: Example of an error API response (JSON)\nDESCRIPTION: This JSON code represents an error response from the crm.requisite.preset.field.delete method. It indicates that the PresetField with ID '27' is not found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The PresetField with ID '27' is not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Head Product Data using cURL (Webhook) in Bitrix24 REST API\nDESCRIPTION: This cURL command demonstrates how to retrieve head product data using a webhook in the Bitrix24 REST API. It sends a POST request with the product ID and returns the field values of the head product.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/sku/catalog-product-sku-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1289}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.product.sku.get\n```\n\n----------------------------------------\n\nTITLE: Data for CRM Dynamic Robot Designer Toolbar\nDESCRIPTION: This code snippet presents the data array delivered when using the widget in a CRM Dynamic Entity Robot Designer Toolbar. It encompasses parameters such as domain, protocol, language, application identifier, authorization specifics, and the placement indicator.  It will be passed to your handler as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/robot-designer-toolbar.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => en\\n    [APP_SID] => c1ec1ec90542fe796fe8868c4da3c482\\n    [AUTH_ID] => 9745d0670076a4b8006f518000000001201c070f6ab1c3c782c839d8c502019162ff5a\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 87c4f7670076a4b8006f518000000001201c078c7f1717892822ebf3ef37611b566015\\n    [member_id] => e8857f161a1a8288f312b6cc6ad67995\\n    [status] => L\\n    [PLACEMENT] => CRM_DYNAMIC_183_ROBOT_DESIGNER_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON represents a successful response after deleting a CRM timeline comment. The result is null, indicating successful deletion. The response includes information about the time taken for the operation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": null,\n    \"time\": {\n        \"start\": 1715091541.642592,\n        \"finish\": 1715091541.730599,\n        \"duration\": 0.08800697326660156,\n        \"date_start\": \"2024-05-03T17:19:01+03:00\",\n        \"date_finish\": \"2024-05-03T17:19:01+03:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This JSON snippet represents a successful response from the `sale.payment.get` method. It includes detailed information about the payment, such as account number, currency, dates, and related IDs.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"payment\": {\n            \"accountNumber\": \"161\\/1\",\n            \"comments\": \"\",\n            \"companyId\": null,\n            \"currency\": \"RUB\",\n            \"dateBill\": \"2022-10-14T16:46:27+03:00\",\n            \"dateMarked\": null,\n            \"datePaid\": null,\n            \"datePayBefore\": null,\n            \"dateResponsibleId\": \"2022-10-14T16:46:27+03:00\",\n            \"empMarkedId\": null,\n            \"empPaidId\": null,\n            \"empResponsibleId\": 1,\n            \"empReturnId\": null,\n            \"externalPayment\": \"N\",\n            \"id\": 6,\n            \"id1c\": \"\",\n            \"isReturn\": \"N\",\n            \"marked\": \"N\",\n            \"orderId\": 5,\n            \"paid\": \"N\",\n            \"payReturnComment\": \"\",\n            \"payReturnDate\": null,\n            \"payReturnNum\": \"\",\n            \"paySystemId\": 6,\n            \"paySystemIsCash\": \"Y\",\n            \"paySystemName\": \"Наличные\",\n            \"paySystemXmlId\": \"bx_64134ba550ffa\",\n            \"payVoucherDate\": null,\n            \"payVoucherNum\": \"\",\n            \"priceCod\": \"0\",\n            \"psCurrency\": \"\",\n            \"psInvoiceId\": null,\n            \"psResponseDate\": null,\n            \"psStatus\": \"\",\n            \"psStatusCode\": \"\",\n            \"psStatusDescription\": \"\",\n            \"psStatusMessage\": \"\",\n            \"psSum\": null,\n            \"reasonMarked\": \"\",\n            \"responsibleId\": 1,\n            \"sum\": 2352,\n            \"updated1c\": \"N\",\n            \"version1c\": \"\",\n            \"xmlId\": \"bx_6349845343355\"\n        }\n    },\n    \"time\": {\n        \"start\": 1713446368.239796,\n        \"finish\": 1713446369.113212,\n        \"duration\": 0.8734161853790283,\n        \"processing\": 0.4978961944580078,\n        \"date_start\": \"2024-04-18T16:19:28+03:00\",\n        \"date_finish\": \"2024-04-18T16:19:29+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: CRM Invoice List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_INVOICE_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, placement, and placement options. The PLACEMENT_OPTIONS contains the ID of the invoice.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => a2734d8a3ee69cc513b26555bc43f44c\n    [AUTH_ID] => fce99f6600631fcd00005a4b00000001f0f10757595d9831ca4f9591c8b5190a12d385\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => ec68c76600631fcd00005a4b00000001f0f107e37ac66ed69aaa16cbc75c7a650e61ef\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => CRM_INVOICE_LIST_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"12\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Setting Booking Resource Slots using cURL OAuth in Bitrix24\nDESCRIPTION: This cURL command sets booking resource slots using OAuth authentication. It configures slots for Monday to Friday, 9:00 AM to 6:00 PM, with 30-minute intervals in the Europe/Kaliningrad timezone.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/resource/slots/booking-v1-resource-slots-set.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"resourceId\":10,\"slots\":[{\"from\":540,\"to\":1080,\"timezone\":\"Europe/Kaliningrad\",\"weekDays\":[\"Mon\",\"Tue\",\"Wed\",\"Thu\",\"Fri\"],\"slotSize\":30}]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/booking.v1.resource.slots.set\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Entity Fields in PHP\nDESCRIPTION: Shows how to fetch order entity fields using PHP with the CRest library, printing the result to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/order-entity/crm-order-entity-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.orderentity.getFields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for CATALOG.MEASURE.ON.DELETE in JSON\nDESCRIPTION: This snippet shows the structure of the data sent to the event handler when a catalog measure unit is deleted. It includes event details, measure ID, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-measure-on-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"event\" => \"CATALOG.MEASURE.ON.DELETE\",    \n    \"event_handler_id\" => 1,\n    \"data\" => [\n        \"FIELDS\" => [\n            \"ID\" => 1,\n        ],\n    ],\n    \"ts\" => 1714649632,\n    \"auth\" => [\n        \"access_token\" => \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\" => 3600,\n        \"scope\" => \"catalog\",\n        \"domain\" => \"some-domain.bitrix24.com\",\n        \"server_endpoint\" => \"https://oauth.bitrix.info/rest/\",\n        \"status\" => \"F\",\n        \"client_endpoint\" => \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\" => \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\" => \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\" => \"51856fefc120afa4b628cc82d3935cce\",\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for CATALOG.PRODUCT.ON.DELETE in JSON\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when a product is deleted. It includes event details, product information, and authentication data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-product-on-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"event\" => \"CATALOG.PRODUCT.ON.DELETE\",    \n    \"event_handler_id\" => 1,\n    \"data\" => [\n        \"FIELDS\" => [\n            \"ID\" => 1,            \n            \"TYPE\" => 1,\n        ],\n    ],\n    \"ts\" => 1714649632,\n    \"auth\" => [\n        \"access_token\" => \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\" => 3600,\n        \"scope\" => \"catalog\",\n        \"domain\" => \"some-domain.bitrix24.com\",\n        \"server_endpoint\" => \"https://oauth.bitrix.info/rest/\",\n        \"status\" => \"F\",\n        \"client_endpoint\" => \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\" => \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\" => \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\" => \"51856fefc120afa4b628cc82d3935cce\",\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Структура данных события onCrmRequisiteUserFieldAdd в PHP\nDESCRIPTION: Полная структура POST-запроса с информацией о добавленном пользовательском поле реквизита, включая идентификаторы, данные поля и параметры авторизации\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/events/on-crm-requisite-user-field-add.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\\n    'event' => 'onCrmRequisiteUserFieldAdd',\\n    'data' => [\\n        'FIELDS' => [\\n            'ID' => 235,\\n            'ENTITY_ID' => 'CRM_REQUISITE',\\n            'FIELD_NAME' => 'NEWTECH_v1_STRING'\\n        ],\\n    ],\\n    'ts' => '1466439714',\\n    'auth' => [\\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\\n        'expires_in' => '3600',\\n        'scope' => 'crm',\\n        'domain' => 'some-domain.bitrix24.com',\\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\\n        'status' => 'F',\\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\\n    ],\\n]\n```\n\n----------------------------------------\n\nTITLE: Получение связей бронирования с использованием cURL (OAuth) в Bitrix24\nDESCRIPTION: Пример cURL-запроса для вызова метода booking.v1.booking.externalData.list через OAuth авторизацию. Метод принимает идентификатор бронирования и токен доступа.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-list.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"bookingId\":123,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/booking.v1.booking.externalData.list\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure for im.user.list.get in JSON\nDESCRIPTION: This JSON snippet illustrates the structure of an error response from the `im.user.list.get` method. It includes an `error` code and an `error_description` that provide details about the encountered issue. This particular example shows the `INVALID_FORMAT` error, indicating that the provided ID field has an incorrect format.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/chats/users/im-user-list-get.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"INVALID_FORMAT\",\n    \"error_description\": \"A wrong format for the ID field is passed\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response Structure\nDESCRIPTION: This JSON snippet illustrates the structure of a successful response from the crm.currency.fields method. It provides a description of each field including its type, requirement status, and other properties.  The \"result\" key contains a map of field names to their descriptions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"CURRENCY\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Валюта\"\n        },\n        \"AMOUNT_CNT\": {\n            \"type\": \"int\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Номинал\"\n        },\n        \"AMOUNT\": {\n            \"type\": \"double\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Курс обмена\"\n        },\n        \"BASE\": {\n            \"type\": \"char\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Базовая валюта\"\n        },\n        \"SORT\": {\n            \"type\": \"int\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Сортировка\"\n        },\n        \"DATE_UPDATE\": {\n            \"type\": \"datetime\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Дата изменения\"\n        },\n        \"LID\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Сайт\"\n        },\n        \"FORMAT_STRING\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Строка формата для вывода валюты\"\n        },\n        \"FULL_NAME\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Название\"\n        },\n        \"DEC_POINT\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Десятичная точка при выводе\"\n        },\n        \"THOUSANDS_SEP\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Свой разделитель тысяч при выводе\"\n        },\n        \"DECIMALS\": {\n            \"type\": \"int\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Количество десятичных знаков\"\n        },\n        \"LANG\": {\n            \"type\": \"currency_localization\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": true,\n            \"isDynamic\": false,\n            \"title\": \"Привязка к языку\"\n        }\n    },\n    \"time\": {\n        \"start\": 1716974732.518201,\n        \"finish\": 1716974733.260832,\n        \"duration\": 0.7426309585571289,\n        \"processing\": 0.018947124481201172,\n        \"date_start\": \"2024-05-29T11:25:32+02:00\",\n        \"date_finish\": \"2024-05-29T11:25:33+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Fields with cURL (OAuth)\nDESCRIPTION: This cURL command uses OAuth for authentication to retrieve available payment fields from the Bitrix24 API. The access token needs to be provided in the JSON payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.payment.getfields\n```\n\n----------------------------------------\n\nTITLE: Получение свойства заказа с помощью cURL (OAuth)\nDESCRIPTION: HTTP POST-запрос для получения свойства заказа через OAuth с передачей токена доступа и идентификатора свойства\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property/sale-property-get.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":22,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.property.get\n```\n\n----------------------------------------\n\nTITLE: Successful Numerator List Response\nDESCRIPTION: Illustrates the structure of the JSON response returned by `crm.documentgenerator.numerator.list` upon successful execution. It contains an array of numerator objects, each with `id`, `name`, `template`, and `settings` properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/document-generator/numerator/crm-document-generator-numerator-list.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"numerators\": [\n    {\n        \"id\": \"202\", // id шаблона\n        \"name\": \"Rest Template\", // название\n        \"template\": \"{NUMBER}\", // шаблон\n        \"settings\": { // настройки генераторов\n            \"Bitrix_Main_Numerator_Generator_SequentNumberGenerator\": {\n                \"start\": 20,\n                \"step\": 5,\n                \"periodicBy\": '',\n                \"timezone\": '',\n                \"isDirectNumeration\": ''\n            }\n        }\n    }\n]\n```\n\n----------------------------------------\n\nTITLE: Example JSON Response\nDESCRIPTION: This is an example of the JSON response returned by the `sale.propertyvariant.update` method after a successful update. It includes information about the updated property variant and the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"propertyVariant\":{\n            \"description\":\"Новое описание значения для красного цвета\",\n            \"id\":5,\n            \"name\":\"Красный\",\n            \"orderPropsId\":49,\n            \"sort\":10,\n            \"value\":\"red\"\n        }\n    },\n    \"time\":{\n        \"start\":1711630589.257634,\n        \"finish\":1711630589.527446,\n        \"duration\":0.26981210708618164,\n        \"processing\":0.010741949081420898,\n        \"date_start\":\"2024-03-28T15:56:29+03:00\",\n        \"date_finish\":\"2024-03-28T15:56:29+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Widget Handler POST Request Parameters in JavaScript\nDESCRIPTION: Sample of POST request parameters received by the widget handler, including domain, protocol, language, authentication, and placement details\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/im/smile-selector.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n'DOMAIN': 'xxx.bitrix24.com'\n'PROTOCOL': 1\n'LANG': 'en'\n'APP_SID': '99c80eff6378726287350416ee5fef0'\n'AUTH_ID': '6061e72600631fcd00005a4b00000001f0f1076700000000f69dd5fc643d9ce2fdbc1'\n'AUTH_EXPIRES': 3600\n'REFRESH_ID': '50e00aa340631fcd00005a4b00000001f0f1071111116580a5b83c2de639ef28c12'\n'member_id': 'da45a03b265ed12127f8a258d793cc5d'\n'status': 'L'\n'PLACEMENT': 'CRM_DEAL_DETAIL_TAB'\n'PLACEMENT_OPTIONS': '{\"ID\":\"3443\"}'\n```\n\n----------------------------------------\n\nTITLE: cURL OAuth Call for Enable Auto Close\nDESCRIPTION: OAuth-based API call to enable automatic call card closing using cURL for Bitrix24\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/enable-auto-close.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"PLACEMENT\":\"enableAutoClose\",\"PARAMS\":{}}' \\\n\"https://**put_your_bitrix24_address**/rest/placement.call?auth=**put_access_token_here**\"\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON represents an error response when the requested CRM timeline comment is not found. The error code is `NOT_FOUND`, and the error description provides more details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"NOT_FOUND\",\n    \"error_description\": \"Not found.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying VAT Rates with PHP\nDESCRIPTION: PHP example using the CRest library to call the catalog.vat.list method. It shows how to set up the request parameters and print the response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/vat/catalog-vat-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.vat.list',\n    [\n        'select' => [\n            'id',\n            'name',\n            'rate'\n        ],\n        'filter' => [\n            '>=sort' => 200\n        ],\n        'order' => [\n            'id' => 'ASC'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Получение настроек службы доставки через Webhook cURL\nDESCRIPTION: HTTP POST-запрос для получения конфигурации службы доставки с идентификатором 196 с использованием Webhook авторизации\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery/sale-delivery-config-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":196}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.delivery.config.get\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: Example of an error JSON response. In this case, the error code 201240400001 indicates that the payment item being updated does not exist. The `error_description` provides more context about the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":201240400001,\n    \"error_description\":\"payment item is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: CRM Smart Invoice List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_SMART_INVOICE_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, placement, and placement options. The PLACEMENT_OPTIONS contains the ID of the smart invoice.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_6\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => adada92053b22a4de3895402a01693cf\n    [AUTH_ID] => 69c7ca670076a4b8006f518000000001201c0720c9c9d78077b5f2c5530f64b061c8a1\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => 5946f2670076a4b8006f518000000001201c07709da4b12d3c7e82e120a20e547b638f\n    [member_id] => e8857f161a1a8288f312b6cc6ad67995\n    [status] => L\n    [PLACEMENT] => CRM_SMART_INVOICE_LIST_MENU\n    [PLACEMENT_OPTIONS] => {\"ID\":\"32\"}\n)\n\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for Booking List API in Bitrix24\nDESCRIPTION: This JSON snippet demonstrates the error response format when an invalid request is made to the booking.v1.booking.list method. The example shows an error for an invalid date period.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-list.md#2025-04-20_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"error\": 422,\n    \"error_description\": \"Invalid date period\"\n}\n```\n\n----------------------------------------\n\nTITLE: Event Payload Structure for CRM Type Update in JSON\nDESCRIPTION: Example of the POST request data structure sent to the handler when a user-defined CRM type is updated. Includes event identification, fields data with the ID of the updated type, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/events/type/on-crm-type-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMTYPEUPDATE\",\n    \"event_handler_id\": \"10\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"42\"\n        }\n    },\n    \"ts\": \"1723548742\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Structure in OnImConnectorMessageAdd Event for Bitrix24 REST API\nDESCRIPTION: This JSON structure represents the format of a message in the MESSAGES array parameter of the OnImConnectorMessageAdd event. It includes details about the chat, message ID, and message content.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/imconnector/events/index.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n\"im\": {\n    \"chat_id\": 845,\n    \"message_id\": 344029\n},\n\"message\": {\n    \"text\": \"Сергей \\\"Покоев\\\":\\n Тестовое сообщение\"\n},\n\"chat\": {\n    \"id\": \"2\"\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Sample CATALOG.ROUNDING.ON.UPDATE Event Data Structure in JSON\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when a price rounding rule is updated. It includes event details, updated fields, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-rounding-on-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"event\" => \"CATALOG.ROUNDING.ON.UPDATE\",    \n    \"event_handler_id\" => 1,\n    \"data\" => [\n        \"FIELDS\" => [\n            \"ID\" => 1,\n        ],\n    ],\n    \"ts\" => 1714649632,\n    \"auth\" => [\n        \"access_token\" => \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\" => 3600,\n        \"scope\" => \"catalog\",\n        \"domain\" => \"some-domain.bitrix24.com\",\n        \"server_endpoint\" => \"https://oauth.bitrix.info/rest/\",\n        \"status\" => \"F\",\n        \"client_endpoint\" => \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\" => \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\" => \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\" => \"51856fefc120afa4b628cc82d3935cce\",\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Querying CRM Currency Fields via cURL (OAuth)\nDESCRIPTION: This snippet shows how to fetch CRM currency fields using cURL with OAuth authentication.  It sends a POST request to the Bitrix24 REST endpoint with an OAuth access token.  Replace the placeholders for your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.currency.fields?auth=**put_access_token_here**\n```\n\n----------------------------------------\n\nTITLE: Referencing BX24.installFinish() Method in JavaScript\nDESCRIPTION: This snippet mentions the BX24.installFinish() method, which should not be called in callback installation handlers. It's typically used in local applications with an installation wizard.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/app-installation/mass-market-apps/installation-callback.md#2025-04-20_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nBX24.installFinish()\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet shows an example error response from the `sale.delivery.extra.service.get` method. It includes the error code and error description. In this case, the error indicates that the specified delivery service was not found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/extra-service/sale-delivery-extra-service-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":\"ERROR_DELIVERY_NOT_FOUND\",\n    \"error_description\":\"Delivery not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON snippet shows an example of an error response from the Bitrix24 REST API. The `error` field contains the error code, and the `error_description` field provides a description of the error.  In this case, it indicates an access denied error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-force-common-scope-for-all.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Access denied.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Sale Status in JavaScript with Bitrix24 SDK\nDESCRIPTION: JavaScript method using BX24.callMethod to create a new sale status with error handling\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-add.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.status.add', {\n        fields: {\n            id: 'MS',\n            type: 'O',\n            notify: 'Y',\n            sort: 500,\n            color: '#FF0000',\n            xmlId: 'myStatusXmlId',\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Activating Task Flow using cURL Webhook in Bash\nDESCRIPTION: This snippet demonstrates how to activate or deactivate a task flow using a cURL command with a webhook in Bash. It sends a POST request to the Bitrix24 REST API endpoint with the flow ID as a parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-activate.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n    \"flowId\": 517\n}' \\\nhttps://your-domain.bitrix24.com/rest/_USER_ID_/_CODE_/tasks.flow.Flow.activate\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for Deal Deletion in Bitrix24 REST API\nDESCRIPTION: This JSON snippet represents the data structure that is sent to the event handler when a deal is deleted. It includes the event name, handler ID, data about the deleted deal (specifically the ID), timestamp, and authorization information. The structure describes a POST request payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/events/on-crm-deal-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMDEALDELETE\",\n    \"event_handler_id\": \"647\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"1765\"\n        }\n    },\n    \"ts\": \"1736405294\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for Delivery Information Query\nDESCRIPTION: Example of a successful response from the crm.item.delivery.get method. The response includes delivery details such as ID, price, currency, and delivery status.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/delivery/crm-item-delivery-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"result\":{\n      \"id\":4077,\n      \"accountNumber\":\"3657\\/2\",\n      \"priceDelivery\":79.99,\n      \"currency\":\"RUB\",\n      \"deducted\":\"N\",\n      \"dateDeducted\":null,\n      \"deliveryId\":228,\n      \"deliveryName\":\"Uber Taxi (Cargo)\"\n   },\n   \"time\":{\n      \"start\":1716369295.614557,\n      \"finish\":1716369296.143089,\n      \"duration\":0.5285320281982422,\n      \"processing\":0.2371680736541748,\n      \"date_start\":\"2024-05-22T12:14:55+03:00\",\n      \"date_finish\":\"2024-05-22T12:14:56+03:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Errors for sale.propertyvalue.list\nDESCRIPTION: This JSON snippet illustrates the error response format for the sale.propertyvalue.list method when a bad request is made, including the error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-value/sale-property-value-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Запрос информации об изображении товара через cURL (OAuth)\nDESCRIPTION: Пример использования метода catalog.productImage.get через cURL с использованием OAuth-авторизации. Запрашивает информацию об изображении с id=1 для товара с id=1.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product-image/catalog-product-image-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"productId\":1,\"id\":1,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.productImage.get\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for Timeline Log Message Request in Bitrix24 REST API\nDESCRIPTION: This JSON structure shows the error response format when a timeline log message cannot be found. It includes an error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"NOT_FOUND\",\n    \"error_description\": \"Timeline logmessage not found for id 1\"\n}\n```\n\n----------------------------------------\n\nTITLE: Delete Order Entity Binding in PHP\nDESCRIPTION: Demonstrates removing an order's binding to a CRM object using PHP with the CRest library\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/order-entity/crm-order-entity-delete-by-filter.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.orderentity.deletebyfilter',\n    [\n        'fields' => [\n            'orderId' => 5125,\n            'ownerId' => 6933,\n            'ownerTypeId' => 2\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Response Example\nDESCRIPTION: This JSON snippet shows an example of a successful response when updating a cashbox. It includes the `result` which indicates the success of the operation and `time` which contains information about the time it took to process the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1712135335.026931,\n        \"finish\": 1712135335.407762,\n        \"duration\": 0.3808310031890869,\n        \"processing\": 0.0336611270904541,\n        \"date_start\": \"2024-04-03T11:08:55+02:00\",\n        \"date_finish\": \"2024-04-03T11:08:55+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an error response from the `crm.item.payment.get` method. It contains the error code and a description of the error, such as insufficient rights. Common error codes include 0 (payment not found or access forbidden) and 100 (missing id parameter).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":0,\n   \"error_description\":\"Недостаточно прав\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for External Data Deletion\nDESCRIPTION: JSON example of a successful response from the booking.v1.booking.externalData.unset method. The response includes a boolean result field and timing information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-unset.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1724068028.331234,\n        \"finish\": 1724068028.726591,\n        \"duration\": 0.3953571319580078,\n        \"processing\": 0.13033390045166016,\n        \"date_start\": \"2025-01-21T13:47:08+02:00\",\n        \"date_finish\": \"2025-01-21T13:47:08+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Deal with Bitrix24 REST API - JavaScript\nDESCRIPTION: JavaScript code snippet showing how to create a deal using BX24.callMethod(). Includes error handling and success confirmation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-add-deal-with-choice-of-requisite.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.deal.add',\n    {\n        'fields': arDealFields\n    },\n    function(resultDeal) {\n        if (resultDeal.error()) {\n            console.error(resultDeal.error());\n            alert('not added: ' + resultDeal.error_description());\n            return;\n        }\n\n        alert('add');\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Icon with JavaScript SDK\nDESCRIPTION: This code snippet demonstrates how to delete a CRM timeline icon using the Bitrix24 JavaScript SDK. It calls the crm.timeline.icon.delete method with the icon code parameter and handles the response with a callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.timeline.icon.delete\",\n    {\n        code: \"info\",\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the `sale.shipmentpropertyvalue.get` method.  It contains information about the shipment property value, including its code, ID, name, shipment properties ID, and value. It also provides time-related data for the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"propertyValue\":{\n            \"code\":null,\n            \"id\":38164,\n            \"name\":\"Comments\",\n            \"shipmentPropsId\":105,\n            \"value\":\"Comments value\"\n        }\n    },\n    \"time\":{\n        \"start\":1718023082.525679,\n        \"finish\":1718023082.798483,\n        \"duration\":0.27280378341674805,\n        \"processing\":0.055876970291137695,\n        \"date_start\":\"2024-06-10T15:38:02+03:00\",\n        \"date_finish\":\"2024-06-10T15:38:02+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data Structure for onCrmRequisiteUserFieldDelete event\nDESCRIPTION: This code snippet shows the data structure passed to the event handler when the `onCrmRequisiteUserFieldDelete` event is triggered. It provides details about the event name, associated data (including the fields of the deleted user field), timestamp, and authorization parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/events/on-crm-requisite-user-field-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n[\n    'event' => 'onCrmRequisiteUserFieldDelete',\n    'data' => [\n        'FIELDS' => [\n            'ID' => 235,\n            'ENTITY_ID' => 'CRM_REQUISITE',\n            'FIELD_NAME' => 'NEWTECH_v1_STRING'\n        ],\n    ],\n    'ts' => '1466439714',\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n?>\n```\n\n----------------------------------------\n\nTITLE: Error response example\nDESCRIPTION: This JSON snippet illustrates an error response when a delivery service is not found. The `error` field indicates the error code, and the `error_description` provides a human-readable explanation of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery-request/sale-delivery-request-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":\"DELIVERY_NOT_FOUND\",\n    \"error_description\":\"Delivery service has not been found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Duplicate Cashbox Handler\nDESCRIPTION: Example of an error response when attempting to create a cashbox handler with an already existing code\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/standard-method-info.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"ERROR_HANDLER_ALREADY_EXIST\",\n    \"error_description\": \"Handler already exists!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for CRM Timeline Icons Request\nDESCRIPTION: This is an example of an error response from the crm.timeline.icon.list method. It shows the format of error responses with an error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"0\",\n    \"error_description\": \"Could not find value\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Payload for onCrmTypeDelete Event in Bitrix24\nDESCRIPTION: This JSON example shows the structure of data sent to a handler when a custom CRM type is deleted. It includes the event name, handler ID, data about the deleted type containing its ID, timestamp, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/events/type/on-crm-type-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMTYPEDELETE\",\n    \"event_handler_id\": \"9\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"45\"\n        }\n    },\n    \"ts\": \"1723546073\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This JSON snippet shows an example of a successful response from the `crm.contact.details.configuration.forceCommonScopeForAll` method.  The `result` field indicates the success status, and the `time` field provides information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-force-common-scope-for-all.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1724671860.18392,\n        \"finish\": 1724671860.843895,\n        \"duration\": 0.6599750518798828,\n        \"processing\": 0.09691596031188965,\n        \"date_start\": \"2024-08-26T13:31:00+02:00\",\n        \"date_finish\": \"2024-08-26T13:31:00+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Person Type with JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to update a person type in Bitrix24. It specifies the method name (`sale.persontype.update`), the ID of the person type to update, and the fields to modify. The code also includes error handling to log any errors that occur during the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'sale.persontype.update', \n    {\n        id: 12,\n        fields: {\n            name: 'Юр. лицо'\n        }\n    }, \n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Запрос информации об изображении товара через cURL (Webhook)\nDESCRIPTION: Пример использования метода catalog.productImage.get через cURL с использованием вебхука. Запрашивает информацию об изображении с id=1 для товара с id=1.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product-image/catalog-product-image-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"productId\":1,\"id\":1}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.productImage.get\n```\n\n----------------------------------------\n\nTITLE: Generating Text Input Field\nDESCRIPTION: This code generates a simple text input field using the CPrintForm::input method. The input field's properties such as name, requirement status, disabled status, multiplicity, and value are set based on provided parameters. The type of the input is set to \"text\".\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_0\n\nLANGUAGE: PHP\nCODE:\n```\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => false,\n                    'VALUE' => $value,\n                    'TYPE' => 'text',\n                ]\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: This JSON structure shows the error response format when an API request fails. It contains an error code and a descriptive message explaining the reason for the failure.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-get-nearest.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"error\": \"\",\n  \"error_description\": \"Доступ запрещен\"\n}\n```\n\n----------------------------------------\n\nTITLE: Создание дочерней папки с использованием Bitrix24 JavaScript SDK\nDESCRIPTION: Этот код демонстрирует вызов метода disk.folder.addsubfolder с использованием Bitrix24 JavaScript SDK. Метод принимает идентификатор родительской папки и данные новой папки, включая обязательное поле NAME.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/folder/disk-folder-add-subfolder.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.folder.addsubfolder\",\n    {\n        id: 8,\n        data: {\n            NAME: 'New sub folder'\n        }\n    },\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Error Response for CRM Timeline Log Messages\nDESCRIPTION: The JSON error response structure when required parameters are missing from the request. It includes an error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"100\",\n    \"error_description\": \"Could not find value for parameter {entityTypeId}\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format (JSON)\nDESCRIPTION: This JSON snippet shows the structure of an error response. The `error` field contains an error code, and the `error_description` field provides a more detailed explanation of the error. In this example, the `NOT_FOUND` error indicates that the specified to-do activity was not found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/todo/crm-activity-todo-update-description.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"NOT_FOUND\",\n    \"error_description\": \"Not found.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Structure for booking.v1.booking.get\nDESCRIPTION: Example of an error JSON response from the booking.v1.booking.get method when the specified booking ID is not found, showing the error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-get.md#2025-04-20_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"error\": 1021,\n    \"error_description\": \"Booking not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Comment with PHP\nDESCRIPTION: Example of using PHP with the CRest library to get CRM timeline comment information. Requires the crest.php library and a comment ID parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.timeline.comment.get',\n    [\n        'id' => 999\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Sample JSON payload for onSonetGroupUpdate event in Bitrix24 REST API\nDESCRIPTION: This example shows the structure of the JSON payload sent to the handler when a workgroup/project is updated. The payload includes event information, handler ID, workgroup data (containing the ID of the modified group), timestamp, and authorization details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/events/on-sonet-group-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONSONETGROUPUPDATE\",\n    \"event_handler_id\": \"655\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"6675\"\n        }\n    },\n    \"ts\": \"1736424182\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"sonet\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Успешный ответ при удалении отгрузки\nDESCRIPTION: Пример успешного ответа от сервера при удалении отгрузки. Содержит информацию об успехе операции и времени выполнения.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"result\":true,\n   \"time\":{\n      \"start\":1712840164.173512,\n      \"finish\":1712840165.403435,\n      \"duration\":1.2299230098724365,\n      \"processing\":1.053415060043335,\n      \"date_start\":\"2024-04-11T15:56:04+03:00\",\n      \"date_finish\":\"2024-04-11T15:56:05+03:00\"\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure Example in JSON\nDESCRIPTION: Sample JSON representation of the data structure passed to the event handler when a new comment is added to a task. The data includes event identifier, task comment data, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/comment-item/events-comment/on-task-comment-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\narray(\n    'event' => 'ONTASKCOMMENTADD',\n    'data' => array(\n        'FIELDS_BEFORE' => 'undefined',\n        'FIELDS_AFTER' => array('ID' => 123, 'TASK_ID' => 555),\n        'IS_ACCESSIBLE_BEFORE' => 'undefined',\n        'IS_ACCESSIBLE_AFTER' => 'undefined',\n    ),\n    'ts' => '1466439714',\n    'auth' => array(\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n        ),\n)\n```\n\n----------------------------------------\n\nTITLE: Получение настроек службы доставки через OAuth cURL\nDESCRIPTION: HTTP POST-запрос для получения конфигурации службы доставки с использованием OAuth токена\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery/sale-delivery-config-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":196,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.delivery.config.get\n```\n\n----------------------------------------\n\nTITLE: Generating CRM Lead Input Field\nDESCRIPTION: This code generates a text input field for a CRM lead. It retrieves the lead's title using `$arResult['VALUE_LEAD_ID']` and appends it to the input field if a lead ID is present.  The input's attributes, such as name, requirement status, disabled status, multiplicity, and value, are configured based on the provided `$arField` array.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'crm_lead':\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'text',\n                ]\n            );\n            if (!empty($arResult['VALUE_LEAD_ID']) && $value == $arResult['VALUE_LEAD_ID']['ID'])\n            {\n                $return .= '(' . $arResult['VALUE_LEAD_ID']['TITLE'] . ')';\n            }\n            break;\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON Structure for Timeline Content Blocks\nDESCRIPTION: Example of error response JSON structure when there's a context error, showing the error code and description format.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/layout-blocks/crm-timeline-layout-blocks-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"ERROR_WRONG_CONTEXT\",\n    \"error_description\": \"Вызов метода возможен только в контексте rest приложения\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Error JSON response\nDESCRIPTION: This snippet shows an example of a JSON response returned by the method call when an error occurs. The 'error' field contains the error code, and the 'error_description' field contains a description of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-shipment/sale-payment-item-shipment-get-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Fields using PHP\nDESCRIPTION: This PHP snippet demonstrates using the CRest class to call the `sale.payment.getfields` method. It prints the result in a readable format after making the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once('crest.php');\\n\\n$result = CRest::call(\\n    'sale.payment.getfields',\\n    []\\n);\\n\\necho '<PRE>';\\nprint_r($result);\\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Exploring CRM Requisite Field Structure in JSON Response\nDESCRIPTION: This JSON snippet demonstrates the structure of different field types in a CRM requisite response, including standard fields and user-defined fields with various data types (string, double, boolean, datetime). Each field contains attributes defining its behavior and settings specific to its type.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"RQ_CPF\"\n        },\n        \"UF_CRM_1694526604\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": true,\n            \"title\": \"UF_CRM_1694526604\",\n            \"listLabel\": \"ПП - Строка\",\n            \"formLabel\": \"ПП - Строка\",\n            \"filterLabel\": \"ПП - Строка\",\n            \"settings\": {\n                \"SIZE\": 20,\n                \"ROWS\": 1,\n                \"REGEXP\": \"\",\n                \"MIN_LENGTH\": 0,\n                \"MAX_LENGTH\": 0,\n                \"DEFAULT_VALUE\": null\n            }\n        },\n        \"UF_CRM_1707997209\": {\n            \"type\": \"double\",\n            \"isRequired\": true,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": true,\n            \"title\": \"UF_CRM_1707997209\",\n            \"listLabel\": \"ПП - Число\",\n            \"formLabel\": \"ПП - Число\",\n            \"filterLabel\": \"ПП - Число\",\n            \"settings\": {\n                \"PRECISION\": 2,\n                \"SIZE\": 20,\n                \"MIN_VALUE\": 0,\n                \"MAX_VALUE\": 0,\n                \"DEFAULT_VALUE\": null\n            }\n        },\n        \"UF_CRM_1707997236\": {\n            \"type\": \"boolean\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": true,\n            \"title\": \"UF_CRM_1707997236\",\n            \"listLabel\": \"ПП - Да/Нет\",\n            \"formLabel\": \"ПП - Да/Нет\",\n            \"filterLabel\": \"ПП - Да/Нет\",\n            \"settings\": {\n                \"DEFAULT_VALUE\": 0,\n                \"DISPLAY\": \"CHECKBOX\",\n                \"LABEL\": [\n                    \"\",\n                    \"\"\n                ],\n                \"LABEL_CHECKBOX\": \"ПП - Да/Нет\"\n            }\n        },\n        \"UF_CRM_1707997253\": {\n            \"type\": \"datetime\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": true,\n            \"title\": \"UF_CRM_1707997253\",\n            \"listLabel\": \"ПП - Дата\",\n            \"formLabel\": \"ПП - Дата\",\n            \"filterLabel\": \"ПП - Дата\",\n            \"settings\": {\n                \"DEFAULT_VALUE\": {\n                    \"TYPE\": \"NONE\",\n                    \"VALUE\": \"\"\n                },\n                \"USE_SECOND\": \"Y\",\n                \"USE_TIMEZONE\": \"N\"\n            }\n        }\n    },\n    \"time\": {\n        \"start\": 1716902185.003805,\n        \"finish\": 1716902185.379388,\n        \"duration\": 0.3755831718444824,\n        \"processing\": 0.016958951950073242,\n        \"date_start\": \"2024-05-28T15:16:25+02:00\",\n        \"date_finish\": \"2024-05-28T15:16:25+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Data structure for the onCrmAddressUnregister event\nDESCRIPTION: This code snippet shows the data structure that's sent within the POST request when the `onCrmAddressUnregister` event is triggered. It includes the event name, data about the deleted address, a timestamp, and authorization information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/events/on-crm-address-unregister.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\n[\n    'event' => 'onCrmAddressUnregister',\n    'data' => [\n        'FIELDS' => [\n            'TYPE_ID' => 1,\n            'ENTITY_TYPE_ID' => 8,\n            'ENTITY_ID' => 1,\n            'ANCHOR_ID' => 17192,\n            'ANCHOR_TYPE_ID' => 3,\n        ],\n    ],\n    'ts' => '1466439714',\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n?>\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet illustrates a successful response from the crm.requisite.bankdetail.update method. The \"result\" field being true indicates successful update. The \"time\" field provides execution time details of the query.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1717509116.239588,\n        \"finish\": 1717509116.78087,\n        \"duration\": 0.5412819385528564,\n        \"processing\": 0.173170804977417,\n        \"date_start\": \"2024-06-04T15:51:56+02:00\",\n        \"date_finish\": \"2024-06-04T15:51:56+02:00\",\n        \"operating\": 0.17314410209655762\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Status Localization Fields with cURL Webhook in Bash\nDESCRIPTION: This code snippet demonstrates how to retrieve available fields for status localizations using a cURL request with a Webhook authentication method. It sends a POST request to the sale.statuslang.getfields endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status-lang/sale-status-lang-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.statuslang.getfields\n```\n\n----------------------------------------\n\nTITLE: Updating Cashbox with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to update a cashbox using cURL with a Webhook in Bitrix24. It includes the cashbox ID and the fields to be updated in JSON format. Replace placeholders with your actual Bitrix24 address, user ID, and Webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-update.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":1,\"FIELDS\":{\"NAME\":\"Новое имя\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.cashbox.update\n```\n\n----------------------------------------\n\nTITLE: Generating File Input Field\nDESCRIPTION: This code generates a file input field. If the field is configured to accept multiple files (`$arField['isMultiple']`), it handles displaying links to previously uploaded files. The file upload is handled via HTML form submission. The input field's attributes are set based on the `$arField` array, including name, requirement status, disabled status, multiplicity, and the input type 'file'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_4\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'file':\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'file',\n                ]\n            );\n            if ($arField['isMultiple'])\n            {\n                if (is_array($value))\n                {\n                    foreach ($value as $k => $val)\n                    {\n                        if (!empty($val['downloadUrl']))\n                        {\n                            $return .= '<br/><a href=\"' . $val['downloadUrl'] . '\">old file ' . $k . '</a>';\n                        }\n                    }\n                }\n            }\n            else\n            {\n                if (!empty($value['downloadUrl']))\n                {\n                    $return .= '<br/><a href=\"' . $value['downloadUrl'] . '\">old file</a>';\n                }\n            }\n            break;\n```\n\n----------------------------------------\n\nTITLE: Структура ответа при ошибке получения связей бронирования в Bitrix24\nDESCRIPTION: Пример JSON структуры ответа с ошибкой от метода booking.v1.booking.externalData.list. Ответ содержит код ошибки и её описание.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": 1021,\n    \"error_description\": \"Booking not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Получение списка подразделений через PHP\nDESCRIPTION: Пример запроса к методу department.get с использованием PHP SDK Bitrix24. Запрос выполняется с параметрами сортировки и фильтрации, результат выводится на экран.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/departments/department-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'department.get',\n    [\n        'sort' => 'NAME',\n        'order' => 'DESC',\n        'PARENT' => 1,\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Property Value Fields with cURL (OAuth)\nDESCRIPTION: This snippet shows how to retrieve shipment property value fields using cURL with OAuth authentication. It sends a POST request to the `sale.shipmentpropertyvalue.getfields` method with the access token in the JSON body. Replace placeholders for your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipmentpropertyvalue.getfields\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet shows an example of an error response.  It indicates a duplicate entry for a key (basketId, orderDeliveryId). The `error` field contains the error code, and the `error_description` provides more information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-add.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":201250000001,\n    \"error_description\":\"Duplicate entry for key [basketId, orderDeliveryId]\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Request URL Format\nDESCRIPTION: Sample REST API request URL for the sonet_group.user.get method. The request includes the auth token and group ID parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/members/sonet-group-user-get.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nhttps://mydomain.bitrix24.ru/rest/sonet_group.user.get.json?auth=67df5afc8ce59732e4a21ed3e336979f&ID=15\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This is an example of an error JSON response from the Bitrix24 REST API. It contains an `error` field with an error code and an `error_description` field with a description of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-update.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"ID is not defined or invalid.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Удаление бизнес-процесса через PHP в Bitrix24\nDESCRIPTION: Пример использования метода bizproc.workflow.kill с помощью PHP. Метод использует библиотеку crest.php для вызова API и принимает ID бизнес-процесса в качестве параметра.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-workflow-kill.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'bizproc.workflow.kill',\n    [\n        'ID' => '65e5a449e8f135.21284909'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful response example\nDESCRIPTION: This JSON snippet is an example of a successful response after updating a delivery request. It shows the `result` as `true` and includes timing information for the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery-request/sale-delivery-request-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":true,\n    \"time\":{\n        \"start\":1714557963.841951,\n        \"finish\":1714557964.052347,\n        \"duration\":0.21039605140686035,\n        \"processing\":0.04059791564941406,\n        \"date_start\":\"2024-05-01T13:06:03+03:00\",\n        \"date_finish\":\"2024-05-01T13:06:04+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_price_type_lang Data Type in Markdown\nDESCRIPTION: Details the structure and fields of the catalog_price_type_lang data type, including translation ID, catalog group ID, translated name, and language ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор перевода названия типа цены ||\n|| **catalogGroupId**\n[`catalog_price_type.id`](#catalog_price_type) | Идентификатор типа цены ||\n|| **name**\n[`string`](../data-types.md) | Перевод названия типа цены ||\n|| **lang**\n[`catalog_language.lid`](#catalog_language) | Идентификатор языка ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON object represents an error response from the crm.requisite.preset.field.get method. It includes an error code and a description of the error, such as the specified preset field not being found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The PresetField with ID '1' is not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Получение списка спринтов через cURL (Webhook)\nDESCRIPTION: Пример использования метода tasks.api.scrum.sprint.list с помощью cURL для Webhook. Запрос фильтрует спринты по идентификатору группы и дате окончания.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/sprint/tasks-api-scrum-sprint-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"filter\": {\n    \"GROUP_ID\": 1,\n    \">=DATE_END\": \"2024-07-19T15:03:01+00:00\"\n}\n}' \\\nhttps://your-domain.bitrix24.com/rest/_USER_ID_/_CODE_/tasks.api.scrum.sprint.list\n```\n\n----------------------------------------\n\nTITLE: CRM Dynamic List Menu Data\nDESCRIPTION: This snippet shows the data structure received by the handler when the placement is CRM_DYNAMIC_XXX_LIST_MENU. It includes information like domain, protocol, language, app SID, authentication details, member ID, and placement. In this case, PLACEMENT_OPTIONS is not present.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/index.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\nArray\n(\n    [DOMAIN] => xxx.bitrix24.com\n    [PROTOCOL] => 1\n    [LANG] => en\n    [APP_SID] => ef961a45216cf6944d118ebd2a44c119\n    [AUTH_ID] => 5cea9f6600631fcd00005a4b00000001f0f107d2ceb3f7eaaaa5cee8960f2572ab96e4\n    [AUTH_EXPIRES] => 3600\n    [REFRESH_ID] => 4c69c76600631fcd00005a4b00000001f0f107e7da55ee918fcdeef4bfa02243184591\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\n    [status] => L\n    [PLACEMENT] => CRM_DYNAMIC_183_LIST_MENU\n)\n\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet represents an error response indicating that the entity with the specified ID was not found. It includes an 'error' field and an 'error_description' field providing details about the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The entity with ID '235' is not found.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Handling in JSON\nDESCRIPTION: Standard error response structure for Bitrix24 REST API, indicating potential error scenarios with error code and description\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling onCrmTimelineCommentUpdate Event Data Structure in PHP\nDESCRIPTION: This code snippet shows the structure of data received by an event handler when a comment is updated in the CRM timeline. It includes the event name, comment ID, timestamp, and authorization details required for processing the event.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/events/on-Crm-Timeline-Comment-Update.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray(\n    'event' => 'onCrmTimelineCommentUpdate',\n    'data' => array(\n        'ID' => 999,\n    ),\n    'ts' => '1466439714',\n    'auth' => array(\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for OnPaymentEntitySaved Event\nDESCRIPTION: This code snippet shows the data structure sent to the event handler for the `OnPaymentEntitySaved` event. It includes information about the event, handler ID, payment data (specifically the payment ID), a timestamp, and authorization details necessary for interacting with the Bitrix24 REST API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/events/on-payment-entity-saved.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\n[\n    'event' => 'ONPAYMENTENTITYSAVED',\n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 300,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'sale',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet represents an error response when the specified RequisiteBankDetail ID is not found. The \"error\" field provides error code and \"error_description\" provides a descriptive message for the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The RequisiteBankDetail with ID '357' is not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON for Status Localization Fields\nDESCRIPTION: This JSON shows the error response format when there's an issue retrieving status localization fields. It includes an error code and description that can be used for troubleshooting.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status-lang/sale-status-lang-get-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":0,\n   \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for disk.storage.get in JSON\nDESCRIPTION: This snippet shows the expected JSON response format for a successful disk.storage.get method call. It includes the storage's ID, name, code, module ID, entity type, entity ID, and root object ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/storage/disk-storage-get.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"result\": {\n    \"ID\": \"2\",\n    \"NAME\": \"Маркетинг и реклама\",\n    \"CODE\": null,\n    \"MODULE_ID\": \"disk\",\n    \"ENTITY_TYPE\": \"group\",\n    \"ENTITY_ID\": \"1\",\n    \"ROOT_OBJECT_ID\": \"2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generate Checkbox for Boolean Fields in PHP\nDESCRIPTION: The code snippet is designed to generate checkboxes for Boolean fields in forms, setting them as checked if the value is 'Y'. The checkbox elements are created through the CPrintForm class, guided by basic Boolean field logic.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_6\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'boolean':\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => '1',\n            'CHECKED' => ($value == 'Y') ? true : false,\n            'TYPE' => 'checkbox',\n        ]\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This is an example of a successful response from the `sale.propertyvariant.delete` method. It includes the result status (true) and timing information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":true,\n    \"time\":{\n        \"start\":1711631569.144029,\n        \"finish\":1711631569.45937,\n        \"duration\":0.3153409957885742,\n        \"processing\":0.010441780090332031,\n        \"date_start\":\"2024-03-28T16:12:49+03:00\",\n        \"date_finish\":\"2024-03-28T16:12:49+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Properties with cURL (Webhook)\nDESCRIPTION: Example of calling the sale.shipmentproperty.list method using cURL webhook authentication, with detailed field selection and filtering\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-list.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"active\",\"code\",\"defaultValue\",\"description\",\"inputFieldLocation\",\"isAddress\",\"isAddressFrom\",\"isAddressTo\",\"isEmail\",\"isFiltered\",\"isLocation\",\"isLocation4tax\",\"isPayer\",\"isPhone\",\"isProfileName\",\"isZip\",\"multiple\",\"name\",\"personTypeId\",\"propsGroupId\",\"required\",\"settings\",\"sort\",\"type\",\"userProps\",\"util\",\"xmlId\"],\"filter\":{\"@type\":\"STRING\",\"%code\":\"EMAIL\"},\"order\":{\"id\":\"desc\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipmentproperty.list\n```\n\n----------------------------------------\n\nTITLE: Order Trade Platform Configuration\nDESCRIPTION: Schema for defining order sources and trading platforms, including activation status, settings, and external system integration\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/data-types.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### sale_order_trade_platform\n#|\n|| **Значение**\n`тип` | **Описание** ||...\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet demonstrates an error response from the API. It includes an 'error' code and an 'error_description' providing details about the error encountered during the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The PresetField with ID '27' is not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON Example\nDESCRIPTION: This JSON structure represents an error response from the `userfieldtype.add` method. It includes an `error` code and a human-readable `error_description`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-add.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":\"ERROR_CORE\",\n    \"error_description\":\"Unable to set placement handler: Handler already binded\"\n}\n```\n\n----------------------------------------\n\nTITLE: Удаление бизнес-процесса через JavaScript в Bitrix24\nDESCRIPTION: Пример использования метода bizproc.workflow.kill с помощью JavaScript SDK Bitrix24. Метод принимает ID бизнес-процесса и выводит результат в консоль или показывает ошибку.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-workflow-kill.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'bizproc.workflow.kill',\n    {\n        ID: '65e5a449e8f135.21284909',\n    },\n    function(result) {\n        console.log('response', result.answer);\n        if(result.error())\n            alert(\"Error: \" + result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Making REST API Calls to Bitrix24 in PHP\nDESCRIPTION: Function to execute REST API calls to Bitrix24 platform. Takes a method name, parameters, auth domain and access token as inputs. Makes a POST request using cURL and returns decoded JSON response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/telephony/index.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nfunction restCommand($method, array $params = array(), $auth_domain, $access_token) {\n    $queryUrl  = 'https://' . $auth_domain . '/rest/' . $method;\n    $queryData = http_build_query(array_merge($params, array('auth' => $access_token)));\n    writeToLog(array('URL' => $queryUrl, 'PARAMS' => array_merge($params, array(\"auth\" => $access_token))), 'telephony send data');\n    $curl = curl_init();\n    curl_setopt_array($curl, array(\n        CURLOPT_SSL_VERIFYPEER => 0,\n        CURLOPT_POST\t\t   => 1,\n        CURLOPT_HEADER\t\t => 0,\n        CURLOPT_RETURNTRANSFER => 1,\n        CURLOPT_URL\t\t\t=> $queryUrl,\n        CURLOPT_POSTFIELDS\t => $queryData,\n        CURLOPT_VERBOSE\t\t => 1\n    ));\n    $result = curl_exec($curl);\n    writeToLog(array('raw' => $result), 'telephony got data');\n    curl_close($curl);\n    $result = json_decode($result, 1);\n    return $result;\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Properties with cURL (OAuth)\nDESCRIPTION: Example of calling the sale.shipmentproperty.list method using cURL OAuth authentication, with detailed field selection and filtering\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-list.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"id\",\"active\",\"code\",\"defaultValue\",\"description\",\"inputFieldLocation\",\"isAddress\",\"isAddressFrom\",\"isAddressTo\",\"isEmail\",\"isFiltered\",\"isLocation\",\"isLocation4tax\",\"isPayer\",\"isPhone\",\"isProfileName\",\"isZip\",\"multiple\",\"name\",\"personTypeId\",\"propsGroupId\",\"required\",\"settings\",\"sort\",\"type\",\"userProps\",\"util\",\"xmlId\"],\"filter\":{\"@type\":\"STRING\",\"%code\":\"EMAIL\"},\"order\":{\"id\":\"desc\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipmentproperty.list\n```\n\n----------------------------------------\n\nTITLE: Example of successful API response (JSON)\nDESCRIPTION: This JSON code represents a successful response from the crm.requisite.preset.field.delete method. It indicates that the custom field was successfully deleted from the preset.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1716819592.314096,\n        \"finish\": 1716819592.798008,\n        \"duration\": 0.48391199111938477,\n        \"processing\": 0.06737184524536133,\n        \"date_start\": \"2024-05-27T16:19:52+02:00\",\n        \"date_finish\": \"2024-05-27T16:19:52+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update Property Variant via cURL (OAuth)\nDESCRIPTION: This cURL command updates a property variant using OAuth. It sends a POST request with the variant's ID, the fields to update, and the access token.  Replace placeholders with your Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-update.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":5,\"fields\":{\"name\":\"Красный\",\"value\":\"red\",\"sort\":10,\"description\":\"Новое описание значения для красного цвета\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.propertyvariant.update\n```\n\n----------------------------------------\n\nTITLE: Handle Unsupported Resource Booking Field in PHP\nDESCRIPTION: This code handles fields related to resource booking, which are not supported in the application context; thus, returning a static text response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'resourcebooking':\n    //some code booking\n    $return = 'field not support';\n    break;\n```\n\n----------------------------------------\n\nTITLE: Error Response for sign.b2e.personal.tail Method\nDESCRIPTION: This JSON example shows the error response structure when the sign.b2e.personal.tail method is called with incorrect authentication. The error indicates that application context is required for this method.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sign/sign-b2e-personal-tail.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"WRONG_AUTH_TYPE\",\n    \"error_description\": \"Current authorization type is denied for this method Application context required\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Lead Fields via PHP\nDESCRIPTION: This snippet demonstrates how to retrieve lead fields using the crm.lead.fields method in PHP using the crest.php library. It calls the crm.lead.fields method with empty parameters and prints the result using print_r within <PRE> tags for better formatting.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.lead.fields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: PHP Event Payload Structure for onCrmRequisiteUserFieldSetEnumValues\nDESCRIPTION: Represents the complete payload received by the event handler when enum values for a custom field are modified in CRM Requisite. Includes event details, field information, and authentication parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/events/on-crm-requisite-user-field-set-enum-values.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\\n    'event' => 'onCrmRequisiteUserFieldSetEnumValues',\\n    'data' => [\\n        'FIELDS' => [\\n            'ID' => 235,\\n            'ENTITY_ID' => 'CRM_REQUISITE',\\n            'FIELD_NAME' => 'NEWTECH_v1_STRING'\\n        ],\\n    ],\\n    'ts' => '1466439714',\\n    'auth' => [\\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\\n        'expires_in' => '3600',\\n        'scope' => 'crm',\\n        'domain' => 'some-domain.bitrix24.com',\\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\\n        'status' => 'F',\\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\\n    ],\\n]\n```\n\n----------------------------------------\n\nTITLE: Successful Response JSON\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the `sale.paysystem.handler.add` method. It includes the ID of the created handler (`result`) and timing information about the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-handler-add.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": 5,\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response JSON\nDESCRIPTION: JSON response structure for a successful base currency setting operation, including execution time details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-base-set.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1718122855.747287,\n        \"finish\": 1718122856.436222,\n        \"duration\": 0.6889350414276123,\n        \"processing\": 0.014606952667236328,\n        \"date_start\": \"2024-06-11T18:20:55+02:00\",\n        \"date_finish\": \"2024-06-11T18:20:56+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: OnOrderEntitySaved Event Data Structure\nDESCRIPTION: This JSON snippet represents the data structure sent to the event handler when the OnOrderEntitySaved event is triggered. It includes information about the event, the handler ID, the order's fields (specifically its ID), a timestamp, and authorization details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/events/on-order-entity-saved.md#2025-04-20_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n[\n    'event' => 'ONORDERENTITYSAVED',\n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 300,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'sale',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Force Common Scope with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to use cURL with a webhook to call the `crm.contact.details.configuration.forceCommonScopeForAll` method.  It sends an empty JSON payload to the specified Bitrix24 REST endpoint. Replace placeholders for Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-force-common-scope-for-all.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.details.configuration.forceCommonScopeForAll\n```\n\n----------------------------------------\n\nTITLE: Копирование папки на диске с использованием Bitrix24 REST API (JavaScript)\nDESCRIPTION: Этот код демонстрирует вызов метода disk.folder.copyto для копирования папки в указанную целевую папку. Метод принимает идентификаторы исходной и целевой папок. Результат выполнения выводится в консоль.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/folder/disk-folder-copy-to.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.folder.copyto\",\n    {\n        id: 8,\n        targetFolderId: 22081990\n    },\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Example successful JSON response\nDESCRIPTION: This snippet shows an example of the JSON response returned by the sale.paymentitemshipment.getfields method when the request is successful. It includes metadata about the fields as well as time information about the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-shipment/sale-payment-item-shipment-get-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"paymentItemShipment\":{\n            \"dateInsert\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":true,\n                \"isRequired\":false,\n                \"type\":\"datetime\"\n            },\n            \"id\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":true,\n                \"isRequired\":false,\n                \"type\":\"integer\"\n            },\n            \"paymentId\":{\n                \"isImmutable\":true,\n                \"isReadOnly\":false,\n                \"isRequired\":true,\n                \"type\":\"integer\"\n            },\n            \"shipmentId\":{\n                \"isImmutable\":true,\n                \"isReadOnly\":false,\n                \"isRequired\":true,\n                \"type\":\"integer\"\n            },\n            \"xmlId\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":false,\n                \"isRequired\":false,\n                \"type\":\"string\"\n            }\n        }\n    },\n    \"time\":{\n        \"start\":1713171556.275477,\n        \"finish\":1713171556.555498,\n        \"duration\":0.28002095222473145,\n        \"processing\":0.008104085922241211,\n        \"date_start\":\"2024-04-15T11:59:16+03:00\",\n        \"date_finish\":\"2024-04-15T11:59:16+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Task Time Records with cURL (Webhook)\nDESCRIPTION: Example of using cURL with a webhook to get a list of time records, filtering by creation date and sorting by ID in descending order.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/elapsed-item/task-elapsed-item-get-list.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '[{\"ID\": \"desc\"},{\">=CREATED_DATE\": \"2024-02-16\"}]' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/task.elapseditem.getlist\n```\n\n----------------------------------------\n\nTITLE: Creating Shipment Property 'Address To' in Bitrix24 REST API (PHP)\nDESCRIPTION: Adds a new shipment property with type ADDRESS for the 'To' address using PHP CRest library, configured for a specific person type and property group\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipmentproperty.add',\n    [\n        'fields' => [\n            'personTypeId' => 3,\n            'propsGroupId' => 6,\n            'name' => 'Address To',\n            'active' => 'Y',\n            'sort' => '100',\n            'type' => 'ADDRESS',\n            'required' => 'Y',\n            'isAddressTo' => 'Y'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Sample Error Response from sale.tradePlatform.getFields\nDESCRIPTION: This JSON shows an error response that might be returned when there are insufficient permissions to access the method. It includes an error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/trade-platform/sale-trade-platform-get-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":200040300010,\n    \"error_description\":\"Access Denied\"\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Money Input Field with Currency Select\nDESCRIPTION: This code generates a number input field for monetary values along with a select dropdown for currency selection. The monetary value and currency are extracted from the input `value` string (assumed format: 'money|currency'). The currency select is generated using `CPrintForm::select` and uses the currency data from `$arResult['FIELD_VALUES_CURRENCY']`. Input's properties, and currency select properties are configured accordingly.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_13\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'money':\n            list($money, $currency) = explode('|', $value);\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $money,\n                    'TYPE' => 'number',\n                ]\n            );\n            $arList = array_column($arResult['FIELD_VALUES_CURRENCY'], 'FULL_NAME', 'CURRENCY');\n            $return .= CPrintForm::select(\n                [\n                    'NAME' => $key . '_CURRENCY',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $currency\n                ],\n                $arList\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for External Data Deletion\nDESCRIPTION: JSON example of an error response when the booking.v1.booking.externalData.unset method fails. This example shows the error code and description when a booking is not found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-unset.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": 1021,\n    \"error_description\": \"Booking not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Client List with cURL OAuth in Bitrix24 REST API\nDESCRIPTION: cURL example using OAuth authentication to call the booking.v1.booking.client.list method in Bitrix24 REST API. The request includes both a bookingId parameter and an auth token in the JSON payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/client/booking-v1-booking-client-list.md#2025-04-20_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"bookingId\":123,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/booking.v1.booking.client.list\n```\n\n----------------------------------------\n\nTITLE: Data for CRM Deal Robot Designer Toolbar\nDESCRIPTION: This code snippet displays the data array passed when the widget is placed in the CRM Deal Robot Designer Toolbar. It contains parameters like domain, authentication tokens, language settings, and the specific placement identifier. The handler endpoint will receive this as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/robot-designer-toolbar.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => en\\n    [APP_SID] => aa01af1bd7f74d944ab61bdc8ed4f011\\n    [AUTH_ID] => ec4fba6600631fcd00005a4b00000001f0f107219e88649824f5ded51f56111616561c\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => dccee16600631fcd00005a4b00000001f0f107021a4718dc94fa53f048dac305baff48\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_DEAL_ROBOT_DESIGNER_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Entity Fields with cURL (OAuth)\nDESCRIPTION: Shows how to fetch order entity fields using OAuth authentication with cURL. Requires a Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/order-entity/crm-order-entity-get-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.orderentity.getFields?auth=**put_access_token_here**\n```\n\n----------------------------------------\n\nTITLE: Example Error Response\nDESCRIPTION: This JSON snippet shows the structure of the error response returned by the Bitrix24 REST API.  It includes the error code and a description of the error, such as \"Access denied.\"\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/user-fields/crm-requisite-userfield-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Access denied.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Placement Unbind Response JSON\nDESCRIPTION: Successful response from placement.unbind method, indicating the number of handlers removed in the operation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/placement-unbind.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"count\": 1\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Format Date Input Field in PHP\nDESCRIPTION: This snippet converts date strings to the format 'Y-m-d' and generates a corresponding HTML date input field. It requires the CPrintForm class and handles optional date values by using PHP's date and strtotime functions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_3\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'date':\n    if (!empty($value)) {\n        $value = date('Y-m-d', strtotime($value));\n    }\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'date',\n        ]\n    );\n    break;\n```\n\n----------------------------------------\n\nTITLE: Example Error Response (JSON)\nDESCRIPTION: This JSON snippet shows an example error response returned by the `crm.requisite.bankdetail.get` method when the specified bank detail ID is not found.  The `error` field contains the error code, and the `error_description` field contains a human-readable description of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The RequisiteBankDetail with ID '357' is not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Money Input - PHP\nDESCRIPTION: Processes and generates input for money values, separating out the currency type and providing a dropdown for currency selection.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-lead.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\nlist($money, $currency) = explode('|', $value);\n$return = CPrintForm ::input(\n    [\n        'NAME' => 'form[' . $key . ']',\n        'REQUIRED' => $arField[ 'isRequired' ],\n        'DISABLE' => $arField[ 'isReadOnly' ],\n        'MULTIPLE' => $arField[ 'isMultiple' ],\n        'VALUE' => $money,\n        'TYPE' => 'number',\n    ]);\n$arList = array_column($arResult[ 'FIELD_VALUES_CURRENCY' ], 'FULL_NAME', 'CURRENCY');\n$return .= CPrintForm ::select(\n    [\n        'NAME' => $key . '_CURRENCY',\n        'REQUIRED' => $arField[ 'isRequired' ],\n        'DISABLE' => $arField[ 'isReadOnly' ],\n        'MULTIPLE' => $arField[ 'isMultiple' ],\n        'VALUE' => $currency\n    ],\n    $arList);\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON\nDESCRIPTION: JSON response structure for an error scenario, typically indicating access denied or insufficient permissions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-base-set.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Access denied.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet illustrates the structure of an error response from the crm.contact.company.add method. It contains an 'error' key indicating the error code and an 'error_description' key providing a detailed explanation of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-add.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The parameter 'ownerEntityID' is invalid or not defined.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Basket Properties Fields with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to retrieve basket property fields using a cURL request with webhook authentication.  It specifies the content type as JSON and includes an empty JSON object as the request body. The URL includes the Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-properties/sale-basket-properties-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.basketproperties.getFields\n```\n\n----------------------------------------\n\nTITLE: JSON Response Structure for sign.b2e.personal.tail Method\nDESCRIPTION: This JSON example shows the response structure when calling the sign.b2e.personal.tail method. The response includes a list of signed documents with their IDs, titles, signing dates, and download URLs.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sign/sign-b2e-personal-tail.md#2025-04-20_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n            \"id\": 59,\n            \"title\": \"test-pdf е\",\n            \"signed_date\": \"2024-06-28T19:34:58+03:00\",\n            \"file_url\": \"https://your-domain.bitrix24.ru/rest/download.json?auth=6348b3670000071b0075444600000001f0f1073855cfba3bff42f043e2c1c26a46cb93&token=sign.b2e%7CaWQ9NTkmXz1udzlucFJBVHUxM2JjcUV2YncyY0tQbTZNSTNzT0Z3MA%3D%3D%7CImRvd25sb2FkfHNpZ24uYjJlfGFXUTlOVGttWHoxdWR6bHVjRkpCVkhVeE0ySmpjVVYyWW5jeVkwdFFiVFpOU1ROelQwWjNNQT09fDYzNDhiMzY3MDAwMDA3MWIwMDc1NDQ0NjAwMDAwMDAxZjBmMTA3Mzg1NWNmYmEzYmZmNDJmMDQzZTJjMWMyNmE0NmNiOTMi.AoYFUXxsuvEjW9ipqBndwej6EvcjBWJTXMh9QQ3O6BU%3D\"\n        },\n        {\n            \"id\": 55,\n            \"title\": \"test-pdf 778484\",\n            \"signed_date\": \"2024-06-28T18:39:47+03:00\",\n            \"file_url\": \"https://your-domain.bitrix24.ru/rest/download.json?auth=6348b3670000071b0075444600000001f0f1073855cfba3bff42f043e2c1c26a46cb93&token=sign.b2e%7CaWQ9NTUmXz04eDU2VkhCUU9hZ0xQQzA3eDJLNWRuYmJ4dTFYOWgzOA%3D%3D%7CImRvd25sb2FkfHNpZ24uYjJlfGFXUTlOVFVtWHowNGVEVTJWa2hDVVU5aFoweFFRekEzZURKTE5XUnVZbUo0ZFRGWU9XZ3pPQT09fDYzNDhiMzY3MDAwMDA3MWIwMDc1NDQ0NjAwMDAwMDAxZjBmMTA3Mzg1NWNmYmEzYmZmNDJmMDQzZTJjMWMyNmE0NmNiOTMi.PYj60eOODc0X4n0pbwMFwIJKV3uZTlSpZBGCmPaj%2F7A%3D\"\n        }\n    ],\n    \"time\": {\n        \"start\": 1739799244.3062601,\n        \"finish\": 1739799244.3473959,\n        \"duration\": 0.04113578796386719,\n        \"processing\": 0.01007699966430664,\n        \"date_start\": \"2025-02-17T16:34:04+03:00\",\n        \"date_finish\": \"2025-02-17T16:34:04+03:00\",\n        \"operating_reset_at\": 1739799844,\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: crm.status.list HTTP Request\nDESCRIPTION: This snippet shows the HTTP endpoint for calling the crm.status.list method in the Bitrix24 REST API. It is used to retrieve a list of elements from the status directory. Note that parameters such as 'select' and 'navigation' are not supported in this implementation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/status/crm-status-list.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncrm.status.list()\n```\n\n----------------------------------------\n\nTITLE: Creating Shipment Property 'Address From' in Bitrix24 REST API (JS)\nDESCRIPTION: Adds a new shipment property with type ADDRESS for the 'From' address, configured for a specific person type and property group\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.shipmentproperty.add', {\n        fields: {\n            personTypeId: 3,\n            propsGroupId: 6,\n            name: \"Address From\",\n            active: \"Y\",\n            sort: \"100\",\n            type: \"ADDRESS\",\n            required: \"Y\",\n            isAddressFrom: \"Y\"\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Calculate Delivery Costs Success Response Example\nDESCRIPTION: This is an example of a successful JSON response from the CALCULATE_URL endpoint. It indicates that the delivery cost was successfully calculated with the `SUCCESS` flag set to `Y`, and provides the calculated `PRICE` for the delivery.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/webhooks/calculate.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"SUCCESS\": \"Y\",\n    \"PRICE\": 79.99,\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response (JSON)\nDESCRIPTION: This JSON object represents an error response from the `sale.shipmentproperty.get` method.  The error_description provides details about the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":200840400001,\n   \"error_description\":\"property is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON object demonstrates an error response after attempting to delete a status. It provides 'error' and 'error_description' properties, giving insights into the reason for the failure, such as a non-existent status.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":201340400001,\n    \"error_description\":\"status is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Address Fields with PHP\nDESCRIPTION: This snippet demonstrates how to retrieve address fields using the CRest PHP library. It calls the crm.address.fields method with an empty array of parameters and prints the result to the console. This script depends on the 'crest.php' file which is part of the Bitrix24 PHP library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/addresses/crm-address-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.address.fields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Data for CRM Lead Robot Designer Toolbar\nDESCRIPTION: This code snippet shows the data array received when the widget is placed in the CRM Lead Robot Designer Toolbar.  It includes information like domain, authentication details, language, and the placement code.  The handler receives this data as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/robot-designer-toolbar.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => en\\n    [APP_SID] => 2ce63de88c4a9f5843e148d6f7b7a6ed\\n    [AUTH_ID] => d54fba6600631fcd00005a4b00000001f0f1073f6f5fc879c485f124cc572c68a6ee17\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => c5cee16600631fcd00005a4b00000001f0f107833fc0c197d37b9b13905b691787bbdb\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_LEAD_ROBOT_DESIGNER_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a successful response when retrieving shipment property value fields. It includes information about the fields like `code`, `id`, `name`, `shipmentId`, `shipmentPropsId`, `shipmentPropsXmlId`, and `value` along with their properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"propertyValue\":{\n            \"code\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":false,\n                \"isRequired\":false,\n                \"type\":\"string\"\n            },\n            \"id\":{\n                \"isImmutable\":true,\n                \"isReadOnly\":true,\n                \"isRequired\":false,\n                \"type\":\"integer\"\n            },\n            \"name\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":false,\n                \"isRequired\":false,\n                \"type\":\"string\"\n            },\n            \"shipmentId\":{\n                \"isImmutable\":true,\n                \"isReadOnly\":false,\n                \"isRequired\":true,\n                \"type\":\"integer\"\n            },\n            \"shipmentPropsId\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":false,\n                \"isRequired\":true,\n                \"type\":\"integer\"\n            },\n            \"shipmentPropsXmlId\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":true,\n                \"isRequired\":false,\n                \"type\":\"string\"\n            },\n            \"value\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":false,\n                \"isRequired\":true,\n                \"type\":\"string\"\n            }\n        }\n    },\n    \"time\":{\n        \"start\":1718024003.807242,\n        \"finish\":1718024003.98344,\n        \"duration\":0.17619800567626953,\n        \"processing\":0.005009889602661133,\n        \"date_start\":\"2024-06-10T15:53:23+03:00\",\n        \"date_finish\":\"2024-06-10T15:53:23+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Запрос информации об изображении товара через JavaScript\nDESCRIPTION: Пример использования метода catalog.productImage.get с помощью JavaScript SDK Bitrix24. Запрашивает информацию об изображении с id=1 для товара с id=1 и выводит результат в консоль.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product-image/catalog-product-image-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.productImage.get', \n    {\n        productId: 1,\n        id: 1,\n    }, \n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Example Error Response\nDESCRIPTION: This JSON snippet illustrates an example of an error response returned by the API.  It includes an error code and a description of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Information with OAuth in Bitrix24\nDESCRIPTION: Bash cURL example showing how to call the booking.v1.booking.get method using OAuth authentication to retrieve booking information by ID.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-get.md#2025-04-20_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":15,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/booking.v1.booking.get\n```\n\n----------------------------------------\n\nTITLE: Available Methods Table in Markdown\nDESCRIPTION: This table lists all available API methods for working with task results in Bitrix24, including methods for adding comments as results, retrieving task results, and removing comments from results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/result/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Метод** | **Описание** ||\n|| [tasks.task.result.addFromComment](./tasks-task-result-add-from-comment.md) | Добавляет комментарий в результат ||\n|| [tasks.task.result.list](./tasks-task-result-list.md) | Получает список результатов задачи ||\n|| [tasks.task.result.deleteFromComment](./tasks-task-result-delete-from-comment.md) | Удаляет комментарий из результата задачи ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON snippet shows an example error response.  It includes the error code and a description explaining the nature of the error.  In this specific example, an element is missing a name within a section of the data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-set.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Element at index 0 in section at index 1 does not have name.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response JSON for Status Localization Fields\nDESCRIPTION: This JSON represents the successful response structure when retrieving available fields for status localizations. It includes field definitions with properties like immutability, read-only status, requirement status, and data type.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status-lang/sale-status-lang-get-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"statusLang\":{\n            \"description\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":false,\n                \"isRequired\":false,\n                \"type\":\"string\"\n            },\n            \"lid\":{\n                \"isImmutable\":true,\n                \"isReadOnly\":false,\n                \"isRequired\":true,\n                \"type\":\"string\"\n            },\n            \"name\":{\n                \"isImmutable\":false,\n                \"isReadOnly\":false,\n                \"isRequired\":true,\n                \"type\":\"string\"\n            },\n            \"statusId\":{\n                \"isImmutable\":true,\n                \"isReadOnly\":false,\n                \"isRequired\":true,\n                \"type\":\"string\"\n            }\n        }\n    },\n    \"time\":{\n        \"start\":1712231062.904967,\n        \"finish\":1712231063.158455,\n        \"duration\":0.25348782539367676,\n        \"processing\":0.005218982696533203,\n        \"date_start\":\"2024-04-04T14:44:22+03:00\",\n        \"date_finish\":\"2024-04-04T14:44:23+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet represents a successful response from the `sale.cashbox.handler.add` method. It contains the ID of the newly created handler in the `result` field, along with timing information about the API call in the `time` field.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-handler-add.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": 5,\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for Delivery Information Query\nDESCRIPTION: Example of an error response from the crm.item.delivery.get method. This shows the format returned when there are insufficient permissions or other errors.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/delivery/crm-item-delivery-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":0,\n   \"error_description\":\"Недостаточно прав\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Calendar Event Using PHP\nDESCRIPTION: This snippet shows how to delete a calendar event using PHP with the CRest library. It calls the crm.contact.details.configuration.forceCommonScopeForAll method and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-event/calendar-event-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.details.configuration.forceCommonScopeForAll',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Authorization Provider in PHP\nDESCRIPTION: Simple authorization provider implementation that uses a basic secret word authentication mechanism.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/cloud-and-on-premise/on-premise/custom-auth-provider.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Demo\\AuthProvider;\nclass AuthSimple\n{\n    const AUTH_TYPE = 'demo_simple';\n    const AUTH_PARAM_NAME = 'secret_word';\n    const AUTH_PARAM_VALUE = 'MySuperSecurePassword123456';\n    public static function onRestCheckAuth(array $query, $scope, &$res)\n    {\n        if(array_key_exists(static::AUTH_PARAM_NAME, $query))\n        {\n            if($query[static::AUTH_PARAM_NAME] === static::AUTH_PARAM_VALUE)\n            {\n                $error = false;\n                $res = array(\n                    'user_id' => 1,\n                    'scope' => implode(',', \\CRestUtil::getScopeList()),\n                    'parameters_clear' => array(static::AUTH_PARAM_NAME),\n                    'auth_type' => static::AUTH_TYPE,\n                );\n                if(!\\CRestUtil::makeAuth($res))\n                {\n                    $res = array(\n                        'error' => 'authorization_error',\n                        'error_description' => 'Unable to authorize user'\n                    );\n                    $error = true;\n                }\n                return !$error;\n            }\n            $res = array(\n                'error' => 'INVALID_CREDENTIALS',\n                'error_description' => 'Invalid request credentials'\n            );\n            return false;\n        }\n        return null;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON snippet shows a possible error response indicating a missing required field (`name`). The `error` field provides a code, and the `error_description` provides a human-readable explanation of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"Required fields: name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON\nDESCRIPTION: This JSON snippet shows an example error response from the Bitrix24 REST API. The `error` field indicates the error code (`ERROR_HANDLER_ALREADY_EXIST`), and the `error_description` field provides a human-readable explanation of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-handler-add.md#2025-04-20_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"ERROR_HANDLER_ALREADY_EXIST\",\n    \"error_description\": \"Handler already exists!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipment Fields - JavaScript using BX24 API\nDESCRIPTION: This JavaScript snippet utilizes the BX24 API to call the sale.shipment.get method and retrieve details of a shipment based on the given ID. It handles the result by logging either an error or the shipment data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-get.md#2025-04-20_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nBX24.callMethod(\n    \"sale.shipment.get\", {\n        \"id\": 2465\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Shipment Property Value Definitions\nDESCRIPTION: Defines the structure for shipment property values, including types, identifiers, and value representations for different data categories\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/webhooks/_includes/tables.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### PROPERTY_VALUES\n\n#|\n|| **Название**\n`тип` | **Описание** ||\n```\n\n----------------------------------------\n\nTITLE: Parameter Table for OnImConnectorLineDelete Event in Markdown\nDESCRIPTION: A markdown table describing the parameters passed to the OnImConnectorLineDelete event handler. It includes the parameter name, description, and version information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/imconnector/events/on-im-connector-line-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Параметр** | **Описание** | **С версии** ||\n|| **LINE_ID** | ID удаляемой открытой линии. | ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Adding Cashbox Handler with Webhook via cURL\nDESCRIPTION: This snippet demonstrates how to add a cashbox handler to Bitrix24 using the `sale.cashbox.handler.add` method with a webhook authentication via cURL. It includes the necessary headers and data payload in JSON format, demonstrating the structure of the handler's properties and settings. Replace `put_your_bitrix24_address`, `put_your_user_id_here`, and `put_your_webbhook_here` with the actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-handler-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n\"-X POST \\\\\n-H \\\"Content-Type: application/json\\\" \\\\\n-H \\\"Accept: application/json\\\" \\\\\n-d '{\\\"CODE\\\":\\\"restcashbox01\\\",\\\"NAME\\\":\\\"REST-касса 01\\\",\\\"SORT\\\":100,\\\"SUPPORTS_FFD105\\\":\\\"Y\\\",\\\"SETTINGS\\\":{\\\"PRINT_URL\\\":\\\"http://example.com/rest_print.php\\\",\\\"CHECK_URL\\\":\\\"http://example.com/rest_check.php\\\",\\\"HTTP_VERSION\\\":\\\"1.1\\\",\\\"CONFIG\\\":{\\\"AUTH\\\":{\\\"LABEL\\\":\\\"Авторизация\\\",\\\"ITEMS\\\":{\\\"KEYWORD\\\":{\\\"TYPE\\\":\\\"STRING\\\",\\\"LABEL\\\":\\\"Кодовое слово\\\"},\\\"PREFERENCE\\\":{\\\"TYPE\\\":\\\"ENUM\\\",\\\"LABEL\\\":\\\"Множественный выбор\\\",\\\"REQUIRED\\\":\\\"Y\\\",\\\"OPTIONS\\\":{\\\"FIRST\\\":\\\"Первый\\\",\\\"SECOND\\\":\\\"Второй\\\",\\\"THIRD\\\":\\\"Третий\\\"}}}},\\\"INTERACTION\\\":{\\\"LABEL\\\":\\\"Настройки взаимодействия с кассой\\\",\\\"ITEMS\\\":{\\\"MODE\\\":{\\\"TYPE\\\":\\\"ENUM\\\",\\\"LABEL\\\":\\\"Режим работы с кассой\\\",\\\"OPTIONS\\\":{\\\"ACTIVE\\\":\\\"боевой\\\",\\\"TEST\\\":\\\"тестовый\\\"}}}}}}}' \\\\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.cashbox.handler.add\"\n```\n\n----------------------------------------\n\nTITLE: Таблица методов для работы с источниками заказов в Битрикс24\nDESCRIPTION: Таблица, содержащая список доступных методов API для работы с источниками заказов, включая sale.tradePlatform.list для получения списка источников и sale.tradePlatform.getFields для получения доступных полей.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/trade-platform/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Метод** | **Описание** ||\n|| [sale.tradePlatform.list](./sale-trade-platform-list.md) | Возвращает список источников заказов ||\n|| [sale.tradePlatform.getFields](./sale-trade-platform-get-fields.md) | Возвращает доступные поля источников заказов ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Badge Definition Example in JSON\nDESCRIPTION: Example JSON structure showing how to define multilingual title and value properties for a badge. The keys are language codes and values are the translated texts.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/configurable/badges/index.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ru\": \"Внимание\",\n    \"en\": \"Alarm\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining CRM Fields in JSON\nDESCRIPTION: This JSON snippet represents the structure and properties of various CRM deal fields, such as location, originator ID, UTM parameters, and last activity timestamps. It specifies the data type, whether the field is required, read-only, immutable, multiple, or dynamic, and includes a title for each field. This is used for defining the structure of data exchanged through the Bitrix24 REST API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/crm-deal-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n            \"isDynamic\": false,\n            \"title\": \"Местоположение\"\n        },\n        \"ORIGINATOR_ID\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Внешний источник\"\n        },\n        \"ORIGIN_ID\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Идентификатор элемента во внешнем источнике\"\n        },\n        \"UTM_SOURCE\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Рекламная система\"\n        },\n        \"UTM_MEDIUM\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Тип трафика\"\n        },\n        \"UTM_CAMPAIGN\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Обозначение рекламной кампании\"\n        },\n        \"UTM_CONTENT\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Содержание кампании\"\n        },\n        \"UTM_TERM\": {\n            \"type\": \"string\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Условие поиска кампании\"\n        },\n        \"LAST_ACTIVITY_TIME\": {\n            \"type\": \"datetime\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"LAST_ACTIVITY_TIME\"\n        },\n        \"LAST_ACTIVITY_BY\": {\n            \"type\": \"user\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"LAST_ACTIVITY_BY\"\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for crm.timeline.logo.get\nDESCRIPTION: This snippet shows the JSON structure of an error response from the crm.timeline.logo.get method. It demonstrates the NOT_FOUND error when a logo with the specified code doesn't exist.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"NOT_FOUND\",\n    \"error_description\": \"Logo not found for code `test`\"\n}\n```\n\n----------------------------------------\n\nTITLE: Requisite Preset External Key Field Documentation\nDESCRIPTION: Defines the external key field used for exchange operations, with recommendations for unique identification across applications\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/main-entities-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nExternal key. Used for exchange operations. Identifier of an external information base object.\n```\n\n----------------------------------------\n\nTITLE: Process User Information for CRM Forms in PHP\nDESCRIPTION: This code snippet is used to handle user information by making a REST API call to retrieve user data, then formats and renders it as number input. It uses CPrintForm to generate fields and concatenates user names to the output if data is available.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\ncase 'user':\n    $arUser = [];\n    if (!empty($value)) {\n        $arUser = CRest::get('user.get', ['filter' => ['ID' => $value]]);\n    }\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'number'\n        ]\n    );\n    if (!empty($arUser['result'])) {\n        $return .= '(';\n        $i = 0;\n        foreach ($arUser['result'] as $val) {\n            $i++;\n            if ($i > 1) {\n                $return .= ', ';\n            }\n            $return .= implode(' ', [$val['NAME'], $val['LAST_NAME']]);\n        }\n        $return .= ')';\n    }\n    break;\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for Booking Client List in Bitrix24 REST API\nDESCRIPTION: JSON error response example for the booking.v1.booking.client.list method. This shows the format of an error response when the specified booking is not found, including error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/client/booking-v1-booking-client-list.md#2025-04-20_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"error\": 1021,\n    \"error_description\": \"Booking not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Event Data Structure for CATALOG.PRODUCT.ON.UPDATE in Bitrix24 REST API\nDESCRIPTION: This JSON structure represents the data sent to the event handler when a product is updated in the Bitrix24 catalog. It includes event details, product fields, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-product-on-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    'event' => 'CATALOG.PRODUCT.ON.UPDATE',    \n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 1,            \n            'TYPE' => 1,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'catalog',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Smart Process Fields using cURL (Webhook) in Bash\nDESCRIPTION: This snippet demonstrates how to make a POST request to the Bitrix24 REST API using cURL with a webhook to retrieve CRM smart process field information. It requires the Bitrix24 address, user ID, and webhook to be replaced with actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.type.fields\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Services with cURL (OAuth)\nDESCRIPTION: This snippet demonstrates querying extra delivery services using cURL with OAuth authentication. It sends a POST request with the DELIVERY_ID and access token to the specified Bitrix24 REST endpoint using OAuth.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/extra-service/sale-delivery-extra-service-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"DELIVERY_ID\":198,\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/sale.delivery.extra.service.get\n```\n\n----------------------------------------\n\nTITLE: Listing Payer Type Methods in Bitrix24\nDESCRIPTION: Comprehensive overview of REST API methods for managing payer types in an online store, including adding, updating, retrieving, and deleting payer type configurations\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Метод** | **Описание** ||\n|| [sale.persontype.add](./sale-person-type-add.md) | Добавляет тип плательщика ||\n|| [sale.persontype.update](./sale-person-type-update.md) | Изменяет тип плательщика ||\n|| [sale.persontype.get](./sale-person-type-get.md) | Возвращает поля типа плательщика по идентификатору ||\n|| [sale.persontype.list](./sale-person-type-list.md) | Возвращает список типов плательщиков ||\n|| [sale.persontype.delete](./sale-person-type-delete.md) | Удаляет тип плательщика ||\n|| [sale.persontype.getFields](./sale-person-type-get-fields.md) | Возвращает поля типа плательщика ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Creating User Field with cURL using OAuth\nDESCRIPTION: This cURL command demonstrates creating a user-defined field using OAuth authentication in Bitrix24. The JSON payload includes the user field configuration, and an access token is required for authorization.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"LABEL\":\"Пользовательское поле (список)\",\"USER_TYPE_ID\":\"enumeration\",\"FIELD_NAME\":\"ENUMERATION_EXAMPLE\",\"MULTIPLE\":\"N\",\"MANDATORY\":\"N\",\"SHOW_FILTER\":\"Y\",\"LIST\":[{\"VALUE\":\"Элемент списка #1\",\"DEF\":\"Y\",\"XML_ID\":\"XML_ID_1\",\"SORT\":100},{\"VALUE\":\"Элемент списка #2\",\"XML_ID\":\"XML_ID_2\",\"SORT\":200},{\"VALUE\":\"Элемент списка #3\",\"XML_ID\":\"XML_ID_3\",\"SORT\":300},{\"VALUE\":\"Элемент списка #4\",\"XML_ID\":\"XML_ID_4\",\"SORT\":400}],\"SETTINGS\":{\"DISPLAY\":\"UI\",\"LIST_HEIGHT\":2},\"SORT\":2000},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.userfield.add\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON structure represents an error response, indicating that the request failed due to insufficient access rights.  The `error` field specifies the error code (`ACCESS_DENIED`), and the `error_description` provides a human-readable explanation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-list.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"error\":\"ACCESS_DENIED\",\n   \"error_description\":\"Access denied!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Single Relation Structure in Markdown\nDESCRIPTION: This snippet details the structure of a single relation object, which is used to define relationships between CRM entities.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-add.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Название**\n`тип` | **Описание** | **По умолчанию** ||\n|| **entityTypeId***\n[`integer`][1] | Идентификатор [системного](../index.md) или [пользовательского типа](./index.md) сущности CRM | `-` ||\n|| **isChildrenListEnabled**\n[`boolean`][1] | Добавлять ли связанный элемент в карточку. \n\nЗначения `Y` и `N` не работают. Необходимо передавать `\"true\"` или `\"false\"` | `\"false\"` ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Smart Process API Error Response Example\nDESCRIPTION: This JSON snippet illustrates a typical error response from the Smart Process API.  It includes an error code and a description of the error. It is returned with HTTP status codes 401, 400, or 403.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/import/crm-item-batch-import.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"NOT_FOUND\",\n    \"error_description\": \"Смарт-процесс не найден\"\n}\n```\n\n----------------------------------------\n\nTITLE: Получение связей бронирования с использованием PHP в Bitrix24\nDESCRIPTION: Пример PHP кода для вызова метода booking.v1.booking.externalData.list с использованием библиотеки CRest. Метод принимает идентификатор бронирования и возвращает связанные данные.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'booking.v1.booking.externalData.list',\n    [\n        'bookingId' => 123\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Adding New Calendar Event with addEvent Method\nDESCRIPTION: Demonstrates how to open a card for adding a new event using the addEvent method. This simple call opens the event creation interface without requiring any parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-grid-veiw.md#2025-04-20_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nBX24.placement.call(\n    'addEvent',\n    function(){}\n);\n```\n\n----------------------------------------\n\nTITLE: Associating Shipment Properties with Delivery Service (PHP)\nDESCRIPTION: Links created shipment properties to specific delivery services using the sale.propertyrelation.add method in PHP\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.propertyrelation.add',\n    [\n        'fields' => [\n            'entityId' => 227,\n            'entityType' => 'D',\n            'propertyId' => 102\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Response Example\nDESCRIPTION: This is an example of the JSON response returned by the `crm.contact.userfield.get` method. It contains details about the user field, including its ID, entity ID, field name, settings, and localized labels. The response also includes information about the time taken to process the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"ID\": \"399\",\n        \"ENTITY_ID\": \"CRM_CONTACT\",\n        \"FIELD_NAME\": \"UF_CRM_HELLO_WORLD\",\n        \"USER_TYPE_ID\": \"string\",\n        \"XML_ID\": null,\n        \"SORT\": \"1000\",\n        \"MULTIPLE\": \"Y\",\n        \"MANDATORY\": \"Y\",\n        \"SHOW_FILTER\": \"E\",\n        \"SHOW_IN_LIST\": \"Y\",\n        \"EDIT_IN_LIST\": \"Y\",\n        \"IS_SEARCHABLE\": \"Y\",\n        \"SETTINGS\": {\n            \"SIZE\": 20,\n            \"ROWS\": 3,\n            \"REGEXP\": \"\",\n            \"MIN_LENGTH\": 0,\n            \"MAX_LENGTH\": 0,\n            \"DEFAULT_VALUE\": \"Привет, мир! Значение по умолчанию\"\n        },\n        \"EDIT_FORM_LABEL\": {\n            \"ar\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"br\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"en\": \"Hello, World! Edit\",\n            \"fr\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"id\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"it\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ja\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"la\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ms\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"pl\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ru\": \"Привет, мир! Редактировать\",\n            \"sc\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"tc\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"th\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"tr\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"vn\": \"Поле \\u0027Привет, мир!\\u0027\"\n        },\n        \"LIST_COLUMN_LABEL\": {\n            \"ar\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"br\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"en\": \"Hello, World! Column\",\n            \"fr\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"id\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"it\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ja\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"la\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ms\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"pl\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ru\": \"Привет, мир! Колонка\",\n            \"sc\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"tc\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"th\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"tr\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"vn\": \"Поле \\u0027Привет, мир!\\u0027\"\n        },\n        \"LIST_FILTER_LABEL\": {\n            \"ar\": \"Привет, мир! Фильтр\",\n            \"br\": \"Привет, мир! Фильтр\",\n            \"en\": \"Привет, мир! Фильтр\",\n            \"fr\": \"Привет, мир! Фильтр\",\n            \"id\": \"Привет, мир! Фильтр\",\n            \"it\": \"Привет, мир! Фильтр\",\n            \"ja\": \"Привет, мир! Фильтр\",\n            \"la\": \"Привет, мир! Фильтр\",\n            \"ms\": \"Привет, мир! Фильтр\",\n            \"pl\": \"Привет, мир! Фильтр\",\n            \"ru\": \"Привет, мир! Фильтр\",\n            \"sc\": \"Привет, мир! Фильтр\",\n            \"tc\": \"Привет, мир! Фильтр\",\n            \"th\": \"Привет, мир! Фильтр\",\n            \"tr\": \"Привет, мир! Фильтр\",\n            \"vn\": \"Привет, мир! Фильтр\"\n        },\n        \"ERROR_MESSAGE\": {\n            \"ar\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"br\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"en\": \"Hello, World! Error\",\n            \"fr\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"id\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"it\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ja\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"la\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ms\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"pl\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ru\": \"Привет, мир! Ошибка\",\n            \"sc\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"tc\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"th\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"tr\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"vn\": \"Поле \\u0027Привет, мир!\\u0027\"\n        },\n        \"HELP_MESSAGE\": {\n            \"ar\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"br\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"en\": \"Hello, World! Help\",\n            \"fr\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"id\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"it\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ja\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"la\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ms\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"pl\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"ru\": \"Привет, мир! Помощь\",\n            \"sc\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"tc\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"th\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"tr\": \"Поле \\u0027Привет, мир!\\u0027\",\n            \"vn\": \"Поле \\u0027Привет, мир!\\u0027\"\n        }\n    },\n    \"time\": {\n        \"start\": 1724318753.341079,\n        \"finish\": 1724318753.621247,\n        \"duration\": 0.2801680564880371,\n        \"processing\": 0.023567914962768555,\n        \"date_start\": \"2024-08-22T11:25:53+02:00\",\n        \"date_finish\": \"2024-08-22T11:25:53+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Invalid API Request\nDESCRIPTION: Example of an error response returned by the Bitrix24 API when the request parameters are invalid, such as incorrect items parameter type\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-items-set.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The parameter items must be array.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response from CRM Timeline Logo Delete Operation\nDESCRIPTION: Example of a successful response when deleting a CRM timeline logo. The result field is true, indicating successful deletion.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/logo/crm-timeline-logo-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1712132792.910734,\n        \"finish\": 1712132793.530359,\n        \"duration\": 0.6196250915527344,\n        \"processing\": 0.032338857650756836,\n        \"date_start\": \"2024-04-03T10:26:32+02:00\",\n        \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n        \"operating_reset_at\": 1705765533,\n        \"operating\": 3.3076241016387939\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Receiving OnSessionStart Event Data in PHP\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when the OnSessionStart event is triggered. It includes information about the event, chat, connector, and authentication details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/openlines/events/on-session-start.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n[\n    'event' => 'ONSESSIONSTART',\n    'eventId' => 1,\n    'data' => [\n        'DATA' => [\n            [\n                'connector' => [\n                    'connector_id' => 'livechat',\n                    'line_id' => 128,\n                    'chat_id' => 10585,\n                    'user_id' => 1984,\n                ],\n                'chat' => [\n                    'id' => 10585\n                ],\n                'user' => [\n                    'id' => 128,\n                    'name' => 'linename'\n                ],\n            ],\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'imopenlines',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/&#39;',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/&#39;',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Making a REST API Call to Delete Booking External Data using JavaScript\nDESCRIPTION: Code example that shows how to call the booking.v1.booking.externalData.unset method with BX24 JavaScript API. The method takes a bookingId parameter and returns a success response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/external-data/booking-v1-booking-externaldata-unset.md#2025-04-20_snippet_0\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"booking.v1.booking.externalData.unset\",\n    {\n        bookingId: 14,\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Trade Catalogs Using cURL with Webhook in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use cURL to make a POST request to the catalog.catalog.list endpoint using a webhook. It includes filtering, sorting, and field selection options.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/catalog/catalog-catalog-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"iblockId\",\"iblockTypeId\",\"id\",\"lid\",\"name\",\"productIblockId\",\"skuPropertyId\",\"subscription\",\"vatId\"],\"filter\":{\">id\":10,\"@vatId\":[1,2],\"skuPropertyId\":121},\"order\":{\"id\":\"desc\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/catalog.catalog.list\n```\n\n----------------------------------------\n\nTITLE: Delete Status with OAuth cURL\nDESCRIPTION: This code snippet demonstrates how to delete a sale status using the cURL command with OAuth authentication in Bitrix24. It sends a POST request with the status ID and access token. Replace placeholders with the correct Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":\"MS\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.status.delete\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet shows the structure of a successful response from the crm.contact.company.add method. It contains a 'result' key indicating success (true) and a 'time' key providing information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-add.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1724068028.331234,\n        \"finish\": 1724068028.726591,\n        \"duration\": 0.3953571319580078,\n        \"processing\": 0.13033390045166016,\n        \"date_start\": \"2024-08-19T13:47:08+02:00\",\n        \"date_finish\": \"2024-08-19T13:47:08+02:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Deal Category IDs\nDESCRIPTION: Method for obtaining deal pipeline/category IDs to configure card views for different sales processes\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/custom-form/index.md#2025-04-20_snippet_1\n\nLANGUAGE: REST API\nCODE:\n```\ncrm.category.list?entityTypeId=2\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for onCrmCurrencyDelete\nDESCRIPTION: This JSON snippet represents the data structure sent to the event handler when the `ONCRMCURRENCYDELETE` event is triggered. It includes the event name, event handler ID, data containing the deleted currency's ID, a timestamp, and authentication details. The `data.FIELDS.ID` parameter contains the identifier of the deleted currency.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/events/on-crm-currency-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMCURRENCYDELETE\",\n    \"event_handler_id\": \"695\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"CHE\"\n        }\n    },\n    \"ts\": \"1742303876\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Offline Events using PHP in Bitrix24 REST API\nDESCRIPTION: This PHP code snippet demonstrates how to use the CRest::call function to invoke the event.offline.get method. It includes filter parameters and prints the result using print_r.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/events/event-offline-get.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'event.offline.get',\n    [\n        'filter' => [\n            '=MESSAGE_ID' => 1,\n            '=EVENT_NAME' => 'ONCRMLEADADD',\n            '>=ID' => 1\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet shows a successful response from the `sale.paymentitembasket.get` method. The `result` contains the `paymentItemBasket` object with details like `basketId`, `dateInsert`, `id`, `paymentId`, `quantity`, and `xmlId`. It also provides timing information about the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-get.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"paymentItemBasket\":{\n            \"basketId\":2722,\n            \"dateInsert\":\"2024-04-17T10:51:03+03:00\",\n            \"id\":1186,\n            \"paymentId\":1025,\n            \"quantity\":3,\n            \"xmlId\":\"myXmlId\"\n        }\n    },\n    \"time\":{\n        \"start\":1713343923.033388,\n        \"finish\":1713343923.350584,\n        \"duration\":0.3171961307525635,\n        \"processing\":0.03599095344543457,\n        \"date_start\":\"2024-04-17T11:52:03+03:00\",\n        \"date_finish\":\"2024-04-17T11:52:03+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-language Text with textWithTranslation in JSON\nDESCRIPTION: This example demonstrates how to configure a textWithTranslation field type to support multiple languages. The field accepts a JSON object where keys are language codes and values are the translated strings. If a translation for the current language is not found, English will be used as fallback.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/configurable/structure/field-types.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"ru\": \"Сохранить\",\n    \"en\": \"Save\"\n}\n```\n\n----------------------------------------\n\nTITLE: CrmDealUserFieldDelete Event Data Structure\nDESCRIPTION: This code snippet illustrates the JSON structure transmitted to the event handler upon the deletion of a custom user field in a Bitrix24 CRM deal. It contains key information such as the event name, handler ID, the deleted field's details (ID, entity, field name), a timestamp, and authentication parameters including access token, domain, and scope.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/user-defined-fields/events/on-crm-deal-user-field-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMDEALUSERFIELDDELETE\",\n    \"event_handler_id\": \"663\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"5227\",\n            \"ENTITY_ID\": \"CRM_DEAL\",\n            \"FIELD_NAME\": \"UF_CRM_1592601331\"\n        }\n    },\n    \"ts\": \"1736943852\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating a Lead via cURL (Webhook)\nDESCRIPTION: This code snippet demonstrates how to update a CRM lead using cURL with Webhook authentication in Bitrix24. It sends a POST request with the lead ID and updated fields to the Bitrix24 REST API endpoint. Replace the placeholder values for Bitrix24 address, user ID, and webhook with your actual values.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1608,\"fields\":{\"TITLE\":\"ИП Титов\",\"NAME\":\"Глеб\",\"SECOND_NAME\":\"Егорович\",\"LAST_NAME\":\"Титов\",\"STATUS_ID\":\"NEW\",\"OPENED\":\"Y\",\"ASSIGNED_BY_ID\":1,\"CURRENCY_ID\":\"USD\",\"OPPORTUNITY\":12500,\"PHONE\":[{\"VALUE\":\"555888\",\"VALUE_TYPE\":\"WORK\"}],\"WEB\":[{\"VALUE\":\"www.mysite.com\",\"VALUE_TYPE\":\"WORK\"}]},\"options\":{\"REGISTER_SONET_EVENT\":\"Y\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.lead.update\n```\n\n----------------------------------------\n\nTITLE: Adding Payment System with cURL (Webhook)\nDESCRIPTION: Demonstrate how to add a payment system using cURL with webhook authentication in Bitrix24. Includes configuring payment system details, headers, and sending a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"NAME\":\"Оплата картой\",\"DESCRIPTION\":\"Легко оплачивайте покупки картой.\",\"XML_ID\":\"my_ps_id\",\"PERSON_TYPE_ID\":1,\"BX_REST_HANDLER\":\"resthandlercode\",\"ACTIVE\":\"Y\",\"ENTITY_REGISTRY_TYPE\":\"ORDER\",\"LOGOTYPE\":\"/9j/4AAQSkZJRgABAQEAYABgAAD/2wBDAAIBAQIBAQICAgICAgICAwUDAwMDAwYEBAMFBwYHBwcGBwcICQsJCAgKCAcHCg0KCgsMDAwMBwkODw0MDgsMDAz/2wBDAQICAgMDAwYDAwYMCAcIDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAz/wAARCAASABUDASIAAhEBAxEB/8QAHwAAAQUBAQEBAQEAAAAAAAAAAAECAwQFBgcICQoL/8QAtRAAAgEDAwIEAwUFBAQAAAF9AQIDAAQRBRIhMUEGE1FhByJxFDKBkaEII0KxwRVS0fAkM2JyggkKFhcYGRolJicoKSo0NTY3ODk6Q0RFRkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqDhIWGh4iJipKTlJWWl5iZmqKjpKWmp6ipqrKztLW2t7i5usLDxMXGx8jJytLT1NXW19jZ2uHi4+Tl5ufo6erx8vP09fb3+Pn6/8QAHwEAAwEBAQEBAQEBAQAAAAAAAAECAwQFBgcICQoL/8QAtREAAgECBAQDBAcFBAQAAQJ3AAECAxEEBSExBhJBUQdhcRMiMoEIFEKRobHBCSMzUvAVYnLRChYkNOEl8RcYGRomJygpKjU2Nzg5OkNERUZHSElKU1RVVldYWVpjZGVmZ2hpanN0dXZ3eHl6goOEhYaHiImKkpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4uPk5ebn6Onq8vP09fb3+Pn6/9oADAMBAAIRAxEAPwD73/4Oa/25vEf7CH/BK/XNW8GarrPh/wAZeONcsfCejazpk3k3GkyS+ZdTSh/vKWtbO5jDJhlaVWBBGR4V/wAFMP28vj1/wRc/4I+fs56O3jmLxh+0j4m1Wy0/V5tft11a9v4xDNc30SYJE/kTSWdn52S7o6tne+4fNv7f3/BSHwX8d/2xvjL+y/8A8FBrHxt4R+F+g/EKDxB8NtY8L6WLeTTbG3N5BDLdMqSy3FtdWkynfFFI4aSUDYQvl8r/AMFDv+Cr37P37eP/AAWX/Zz+IHw10/42fGi6+GOp2VlpnhbSrBNL03WLtLw3cF7ZtOzXJlExjWWGW1hEy20YM0aoSwB/RtRRRQBw/wAb/wBmb4b/ALTWk2On/Ej4feB/iDY6ZMbiztvEuhWurQ2khG0vGtwjhGK8EqASOKT4H/swfDX9mTTr+z+G3w78DfD201WRZr2Dw1oNrpMd46ghWkW3jQOwBIBbJAJoooA7miiigD//2Q==\",\"NEW_WINDOW\":\"N\",\"SETTINGS\":{\"REST_SERVICE_ID\":{\"TYPE\":\"VALUE\",\"VALUE\":\"SERVICE ID VALUE\"},\"REST_SERVICE_KEY\":{\"TYPE\":\"VALUE\",\"VALUE\":\"KEY ID VALUE\"},\"PAYMENT_ID\":{\"TYPE\":\"PAYMENT\",\"VALUE\":\"ACCOUNT_NUMBER\"}}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.paysystem.add\n```\n\n----------------------------------------\n\nTITLE: Delete Status with PHP\nDESCRIPTION: This PHP code snippet uses the CRest::call method to delete a sale status. It requires the crest.php library for interacting with the Bitrix24 REST API. The code calls 'sale.status.delete' with the status ID and prints the result for debugging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call('sale.status.delete', [\n    'id' => 'MS'\n]);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Defining LinkedUserFields Structure in Markdown\nDESCRIPTION: This snippet describes the structure of the 'linkedUserFields' object, which specifies custom fields where the new CRM type should be displayed.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-add.md#2025-04-20_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Название**\n`тип` | **Описание** | **Значение по умолчанию** ||\n|| **CALENDAR_EVENT**|**UF_CRM_CAL_EVENT**\n[`boolean`][1] | Событие в календаре | `\"false\"` ||\n|| **TASKS_TASK**|**UF_CRM_TASK**\n[`boolean`][1] | Задачи | `\"false\"` ||\n|| **TASKS_TASK**|**UF_CRM_TASK**\n[`boolean`][1] | Шаблоны задач | `\"false\"` ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet shows an example of an error response from the `sale.persontype.update` method. It indicates that the required `name` field is missing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/person-type/sale-person-type-update.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"Required fields: name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Event Payload Structure for onCrmTypeAdd Event in Bitrix24 REST API\nDESCRIPTION: JSON structure of the payload sent to the event handler when a custom CRM type is added. The payload includes the event name, handler ID, data about the created type, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/events/type/on-crm-type-add.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMTYPEADD\",\n    \"event_handler_id\": \"7\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"45\"\n        }\n    },\n    \"ts\": \"1723545943\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"F\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet shows the structure of a successful response when adding a shipment item. It contains the details of the newly added item, including its basketId, dateInsert, id, orderDeliveryId, quantity, reservedQuantity, and xmlId, as well as the time taken for the request to execute.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-add.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"shipmentItem\":{\n            \"basketId\":2716,\n            \"dateInsert\":\"2024-04-11T09:10:34+03:00\",\n            \"id\":7,\n            \"orderDeliveryId\":2431,\n            \"quantity\":3,\n            \"reservedQuantity\":0,\n            \"xmlId\":\"myXmlId\"\n        }\n    },\n    \"time\":{\n        \"start\":1712819431.708122,\n        \"finish\":1712819435.985352,\n        \"duration\":4.2772300243377686,\n        \"processing\":4.085968971252441,\n        \"date_start\":\"2024-04-11T10:10:31+03:00\",\n        \"date_finish\":\"2024-04-11T10:10:35+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Example Response\nDESCRIPTION: This JSON object represents a sample response from the `crm.contact.company.fields` method. It contains a `result` object with descriptions of fields like `SORT`, `IS_PRIMARY`, and `COMPANY_ID`, along with a `time` object providing information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"SORT\": {\n            \"type\": \"integer\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Сортировка\"\n        },\n        \"IS_PRIMARY\": {\n            \"type\": \"char\",\n            \"isRequired\": false,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Первичный\"\n        },\n        \"COMPANY_ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": true,\n            \"isReadOnly\": false,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"Компания\"\n        }\n    },\n    \"time\": {\n        \"start\": 1724065480.986461,\n        \"finish\": 1724065481.321185,\n        \"duration\": 0.33472418785095215,\n        \"processing\": 0.01616501808166504,\n        \"date_start\": \"2024-08-19T13:04:40+02:00\",\n        \"date_finish\": \"2024-08-19T13:04:41+02:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Relations Structure in Markdown\nDESCRIPTION: This snippet describes the structure of the 'relations' object, which defines the relationships between the new CRM type and other CRM entities.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/user-defined-object-types/crm-type-add.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Название**\n`тип` | **Описание** ||\n|| **parent**\n[`relation[]`](#relation) | Элементы CRM, которые будут привязаны к данному смарт-процессу ||\n|| **child**\n[`relation[]`](#relation) | Элементы CRM, к котором будет привязан данный смарт-процесс    ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Event Payload Structure for CATALOG.PRICE.TYPE.ON.DELETE in JSON\nDESCRIPTION: This snippet shows the structure of the POST request payload sent to the event handler when a price type is deleted. It includes event details, data fields, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-price-type-on-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"event\" => \"CATALOG.PRICE.TYPE.ON.DELETE\",    \n    \"event_handler_id\" => 1,\n    \"data\" => [\n        \"FIELDS\" => [\n            \"ID\" => 1,\n        ],\n    ],\n    \"ts\" => 1714649632,\n    \"auth\" => [\n        \"access_token\" => \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\" => 3600,\n        \"scope\" => \"catalog\",\n        \"domain\" => \"some-domain.bitrix24.com\",\n        \"server_endpoint\" => \"https://oauth.bitrix.info/rest/\",\n        \"status\" => \"F\",\n        \"client_endpoint\" => \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\" => \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\" => \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\" => \"51856fefc120afa4b628cc82d3935cce\",\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Удаление бизнес-процесса через cURL (Webhook) в Bitrix24\nDESCRIPTION: Пример использования метода bizproc.workflow.kill через cURL с использованием веб-хука. Метод принимает ID бизнес-процесса и удаляет его вместе со всеми данными.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-workflow-kill.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":\"65e5a449e8f135.21284909\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/bizproc.workflow.kill\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for CRM Timeline Comment\nDESCRIPTION: Example of an error JSON response when retrieving a CRM timeline comment. This particular error occurs when the requested comment is not found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Not found.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Template for Document Generator\nDESCRIPTION: Illustrates the structure of a successful response when retrieving document templates, including detailed template metadata such as ID, name, code, region, and associated entity types.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/document-generator/templates/crm-document-generator-template-list.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\ntemplates: {\n    115: {\n        \"id\": \"115\",\n        \"active\": \"Y\",\n        \"name\": \"Акт (Россия)\",\n        \"code\": \"ACT_RU\",\n        \"region\": \"ru\",\n        \"sort\": \"100\",\n        \"createTime\": \"2018-06-05T13:07:12+02:00\",\n        \"updateTime\": \"2018-09-06T14:26:24+02:00\",\n        \"moduleId\": \"crm\",\n        \"numeratorId\": \"29\",\n        \"withStamps\": \"N\",\n        \"isDeleted\": \"N\",\n        \"entityTypeId\": [\n            \"0\": \"4\",\n            \"1\": \"3\",\n            \"2\": \"2_category_0\",\n            \"3\": \"2_category_1\",\n            \"4\": \"5\",\n            \"5\": \"1\",\n            \"6\": \"14\",\n            \"7\": \"7\"\n        ],\n        \"users\": [\n            \"0\": \"UA\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Default Date/Datetime Settings Object\nDESCRIPTION: JSON structure for configuring default values for date and datetime fields with type and value options\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-get.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    TYPE: 'NONE'|'FIXED'|'NONE',\n    VALUE: date\n}\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_measure Data Type in Markdown\nDESCRIPTION: Specifies the structure and fields of the catalog_measure data type, including measurement unit ID, code, default status, title, and symbol information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор единицы измерения ||\n|| **code**\n[`integer`](../data-types.md) | Код единицы измерения ||\n|| **isDefault**\n[`string`](../data-types.md) | Используется ли текущая единица измерения в качестве единицы измерения по умолчанию для новых товаров. Возможные значения:\n- `Y` — да\n- `N` — нет\n\nТолько одна единица измерения из всего справочника может принимать значение `Y`\n||\n|| **measureTitle**\n[`string`](../data-types.md) | Название единицы измерения ||\n|| **symbol**\n[`string`](../data-types.md) | Условное обозначение ||\n|| **symbolIntl**\n[`string`](../data-types.md) | Международное условное обозначение ||\n|| **symbolLetterIntl**\n[`string`](../data-types.md) | Международное кодовое буквенное обозначение ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Event Data Structure for CATALOG.MEASURE.ON.UPDATE in JSON\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when a unit of measurement is updated. It includes event details, measurement ID, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-measure-on-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"event\" => \"CATALOG.MEASURE.ON.UPDATE\",    \n    \"event_handler_id\" => 1,\n    \"data\" => [\n        \"FIELDS\" => [\n            \"ID\" => 1,\n        ],\n    ],\n    \"ts\" => 1714649632,\n    \"auth\" => [\n        \"access_token\" => \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\" => 3600,\n        \"scope\" => \"catalog\",\n        \"domain\" => \"some-domain.bitrix24.com\",\n        \"server_endpoint\" => \"https://oauth.bitrix.info/rest/\",\n        \"status\" => \"F\",\n        \"client_endpoint\" => \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\" => \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\" => \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\" => \"51856fefc120afa4b628cc82d3935cce\",\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Handling Catalog Price Type Update Event in JSON\nDESCRIPTION: This snippet shows the structure of the data received by the event handler when a catalog price type is updated. It includes event details, updated fields, timestamp, and authentication information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/events/catalog-price-type-on-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\n    \"event\" => \"CATALOG.PRICE.TYPE.ON.UPDATE\",    \n    \"event_handler_id\" => 1,\n    \"data\" => [\n        \"FIELDS\" => [\n            \"ID\" => 1,\n        ],\n    ],\n    \"ts\" => 1714649632,\n    \"auth\" => [\n        \"access_token\" => \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\" => 3600,\n        \"scope\" => \"catalog\",\n        \"domain\" => \"some-domain.bitrix24.com\",\n        \"server_endpoint\" => \"https://oauth.bitrix.info/rest/\",\n        \"status\" => \"F\",\n        \"client_endpoint\" => \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\" => \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\" => \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\" => \"51856fefc120afa4b628cc82d3935cce\",\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Handling API Error Responses for CRM Requisite Link\nDESCRIPTION: This JSON structure illustrates what an error response from the API may look like when fetching the requisite link. It includes common error messages that can occur due to invalid parameters or insufficient permissions.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/links/crm-requisite-link-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Not found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Error Response\nDESCRIPTION: This JSON snippet presents an example error response when accessing crm.currency.fields due to insufficient permissions. The \"error\" field contains the error code, and the \"error_description\" provides a human-readable explanation of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/currency/crm-currency-fields.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Access denied.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Удаление бизнес-процесса через cURL (OAuth) в Bitrix24\nDESCRIPTION: Пример использования метода bizproc.workflow.kill через cURL с OAuth авторизацией. Метод принимает ID бизнес-процесса и токен доступа для аутентификации.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-workflow-kill.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"ID\":\"65e5a449e8f135.21284909\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/bizproc.workflow.kill\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: Demonstrates the structure of an error response from the Bitrix24 REST API. The response includes an \"error\" field and an \"error_description\" field, providing details about the error that occurred during the request. This specific example shows an error indicating that the 'filter' parameter must be an array.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/crm-deal-list.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Parameter 'filter' must be array.\"\n}\n```\n\n----------------------------------------\n\nTITLE: CRM Payment Delivery Management REST Methods\nDESCRIPTION: REST API methods for managing delivery items in payments, including adding, listing, deleting, and reassigning delivery positions in the Bitrix24 CRM system\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/invoice.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\ncrm.item.payment.delivery.add\ncrm.item.payment.delivery.list\ncrm.item.payment.delivery.delete\ncrm.item.payment.delivery.setDelivery\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON Structure\nDESCRIPTION: This JSON snippet shows the error response structure when attempting to delete a non-existent CRM timeline icon. It includes an error code and a descriptive message indicating the icon wasn't found for the provided code.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"NOT_FOUND\",\n    \"error_description\": \"Icon not found for code `info`\"\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Templates by Entity Type ID\nDESCRIPTION: Shows how to filter document templates by entity type ID, with the ability to retrieve templates associated with multiple deal directions or using wildcard matching.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/document-generator/templates/crm-document-generator-template-list.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\nfilter: {\n    \"entityTypeId\": \"2%\"\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Leads with Bitrix24 PHP API\nDESCRIPTION: This PHP code snippet demonstrates how to retrieve a list of leads using the Bitrix24 REST API via the `CRest::call` method. It sets the selection, starting position, filtering, and ordering parameters for the query and then prints the result array. Requires the `crest.php` library.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n  $result = CRest::call(\n      'crm.lead.list',\n      [\n          'select' => ['*', 'UF_*'],\n          'start' => 50,\n          'filter' => [\n              '=OPPORTUNITY' => 15000,\n          ],\n          'order' => [\n              'STATUS_ID' => 'ASC',\n          ],\n      ]\n  );\n\n  echo '<PRE>';\n  print_r($result);\n  echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Delivery Handlers with cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to retrieve a list of delivery service handlers using a webhook. It sends a POST request with specified SELECT, FILTER, and ORDER parameters in JSON format.  The request requires replacing placeholders with the correct Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/handler/sale-delivery-handler-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"SELECT\":[\"ID\",\"PARENT_ID\",\"NAME\",\"ACTIVE\",\"DESCRIPTION\",\"SORT\",\"LOGOTIP\",\"CURRENCY\"],\"FILTER\":{\"@ID\":[196,197,198]},\"ORDER\":{\"SORT\":\"ASC\",\"ID\":\"DESC\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.delivery.getlist\n```\n\n----------------------------------------\n\nTITLE: Associating Shipment Properties with Delivery Service (JS)\nDESCRIPTION: Links created shipment properties to specific delivery services using the sale.propertyrelation.add method in JavaScript\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.propertyrelation.add',\n    {\n        fields: {\n            entityId: 227,\n            entityType: 'D',\n            propertyId: 102\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_product_image Data Type in Markdown\nDESCRIPTION: Specifies the structure and fields of the catalog_product_image data type, including image ID, name, product ID, type, creation time, and download URLs.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор изображения ||\n|| **name**\n[`string`](../data-types.md) | Наименование изображения ||\n|| **productId**\n[`integer`](../data-types.md) | Идентификатор товара ||\n|| **type**\n[`string`](../data-types.md) | Тип изображения:\n- `DETAIL_PICTURE` — детальная картинка\n- `PREVIEW_PICTURE` — картинка для анонса\n- `MORE_PHOTO` — картинки товара\n||\n|| **createTime**\n[`datetime`](../data-types.md) | Дата создания изображения ||\n|| **downloadUrl**\n[`string`](../data-types.md) | Ссылка для скачивания, подписанная текущим токеном доступа ||\n|| **detailUrl**\n[`string`](../data-types.md) | Ссылка на изображение ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Publishing message to RabbitMQ queue in PHP\nDESCRIPTION: This snippet demonstrates publishing a message to a RabbitMQ queue using PHP. It establishes a connection to the RabbitMQ server, declares a queue named 'request_queue', and then publishes a message containing the JSON-encoded request data to that queue. This showcases the handler component of a RabbitMQ-based queue system.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/performance/queue.md#2025-04-20_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n// Отправляет сообщение в очередь RabbitMQ, больше ничего не делаем!\n$connection = new AMQPStreamConnection('localhost', 5672, 'user', 'password');\n$channel = $connection->channel();\n$channel->queue_declare('request_queue', false, true, false, false);\n$channel->basic_publish(new AMQPMessage(json_encode($requestData)), '', 'request_queue');\n```\n\n----------------------------------------\n\nTITLE: Force Common CRM Config via cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to force a common CRM item details configuration for deals in a specific category using a webhook. It sends a POST request to the Bitrix24 REST API endpoint with the `entityTypeId` set to 2 (deal) and the `dealCategoryId` in the `extras` parameter set to 9.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/item-details-configuration/crm-item-details-configuration-forceCommonScopeForAll.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"entityTypeId\":2,\"extras\":{\"dealCategoryId\":9}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.item.details.configuration.forceCommonScopeForAll\n```\n\n----------------------------------------\n\nTITLE: Querying Trade Catalogs Using cURL with OAuth in Bitrix24\nDESCRIPTION: This snippet shows how to use cURL to make a POST request to the catalog.catalog.list endpoint using OAuth authentication. It includes the same filtering, sorting, and field selection options as the webhook example.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/catalog/catalog-catalog-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"select\":[\"iblockId\",\"iblockTypeId\",\"id\",\"lid\",\"name\",\"productIblockId\",\"skuPropertyId\",\"subscription\",\"vatId\"],\"filter\":{\">id\":10,\"@vatId\":[1,2],\"skuPropertyId\":121},\"order\":{\"id\":\"desc\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/catalog.catalog.list\n```\n\n----------------------------------------\n\nTITLE: Querying Shipment Property Value with cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to retrieve a shipment property value using cURL with OAuth authentication. It sends a POST request including the shipment property value ID and the OAuth access token to the Bitrix24 REST API endpoint.  The ID and token are passed within the JSON payload.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":38164,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipmentpropertyvalue.get\n```\n\n----------------------------------------\n\nTITLE: Get Bank Detail using PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to retrieve bank detail information by ID. It requires the `crest.php` library for Bitrix24 REST API calls. The code calls the `crm.requisite.bankdetail.get` method with the bank detail ID and then prints the result using `print_r` within `<PRE>` tags for better readability.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'crm.requisite.bankdetail.get',\n        ['id' => 357]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This is an example of a successful response in JSON format after deleting a contact user field. The result field indicates the success status of the operation, and the time field provides information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1724316817.995457,\n        \"finish\": 1724316818.640754,\n        \"duration\": 0.6452970504760742,\n        \"processing\": 0.3215677738189697,\n        \"date_start\": \"2024-08-22T10:53:37+02:00\",\n        \"date_finish\": \"2024-08-22T10:53:38+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Update CRM Requisite using PHP\nDESCRIPTION: This PHP code snippet demonstrates how to update a CRM requisite using the CRest::call function.  It requires the crest.php library and specifies the method name (crm.requisite.update), the requisite ID, and the fields to be updated. The result is then printed to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.requisite.update',\n    [\n        'id' => 27,\n        'fields' => [\n            'RQ_OKPO' => '80715150',\n            'RQ_OKTMO' => '45381000000',\n            'UF_CRM_1707997209' => '78',\n            'UF_CRM_1708012333' => 'Категория 3'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n?>\n```\n\n----------------------------------------\n\nTITLE: Querying Payment Item Basket with cURL (Webhook)\nDESCRIPTION: This cURL example demonstrates how to retrieve a payment item basket using a webhook.  It sends a POST request with the `id` of the item, along with the necessary headers. Replace placeholders with your Bitrix24 address, user ID, and webhook code.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-get.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":1186}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.paymentitembasket.get\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Item via cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to retrieve a shipment item using a Bitrix24 webhook.  It sends a POST request with the item's ID in JSON format to the specified webhook URL. Replace the placeholder values with your Bitrix24 address, user ID, and webhook code.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-get.md#2025-04-20_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\n\"-X POST \\\n-H \\\"Content-Type: application/json\\\" \\\n-H \\\"Accept: application/json\\\" \\\n-d '{\\\"id\\\":7}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.shipmentitem.get\"\n```\n\n----------------------------------------\n\nTITLE: Get Contact-Company Fields with cURL (Webhook)\nDESCRIPTION: This cURL command uses a webhook to retrieve contact-company fields. Replace `put_your_bitrix24_address`, `put_your_user_id_here`, and `put_your_webbhook_here` with your actual Bitrix24 address, user ID, and webhook key, respectively. The command sends a POST request with an empty JSON payload to the specified endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.company.fields\n```\n\n----------------------------------------\n\nTITLE: Deleting User Field in CRM Deal - PHP (B24PhpSdk)\nDESCRIPTION: This PHP snippet illustrates how to delete a user field in the CRM using the B24PhpSdk. It includes exception handling for potential errors during the deletion process, providing feedback on success or failure.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/user-defined-fields/crm-deal-userfield-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: PHP\nCODE:\n```\n<?php\ntry {\n    $userfieldId = 123; // Replace with the actual userfield ID you want to delete\n    $result = $serviceBuilder\n        ->getCRMScope()\n        ->dealUserfield()\n        ->delete($userfieldId);\n\n    if ($result->isSuccess()) {\n        print(\"Userfield deleted successfully.\");\n    } else {\n        print(\"Failed to delete userfield.\");\n    }\n} catch (Throwable $e) {\n    print(\"An error occurred: \" . $e->getMessage());\n}\n?>\n```\n\n----------------------------------------\n\nTITLE: Update Sale Property Group with JavaScript\nDESCRIPTION: This JavaScript code snippet uses the `BX24.callMethod` function to update a sale property group. It passes the method name, ID, and updated fields as parameters, and includes a callback function to handle the result, logging errors or data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"sale.propertygroup.update\", {\n        \"id\": 10,\n        \"fields\": {\n            \"personTypeId\": 3,\n            \"name\": \"Обновленная группа свойств\",\n            \"sort\": 100,\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Querying Lead Fields via cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to retrieve lead fields using the crm.lead.fields method with a webhook-based cURL request. It sends an empty JSON payload to the Bitrix24 REST API endpoint. Replace placeholders with your actual Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.lead.fields\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example (JSON)\nDESCRIPTION: This JSON snippet shows the structure of a successful response after updating a sale property group. It includes the updated property group details and information about the request processing time.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":{\n        \"propertyGroup\":{\n            \"id\":10,\n            \"name\":\"Обновленная группа свойств\",\n            \"personTypeId\":3,\n            \"sort\":100\n        }\n    },\n    \"time\":{\n        \"start\":1711451989.729911,\n        \"finish\":1711451989.907491,\n        \"duration\":0.1775798797607422,\n        \"processing\":0.008534908294677734,\n        \"date_start\":\"2024-03-26T14:19:49+03:00\",\n        \"date_finish\":\"2024-03-26T14:19:49+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Quote with Products in PHP (Bitrix24 REST API)\nDESCRIPTION: Demonstrates a PHP implementation for creating a company quote with multiple product rows using Bitrix24 REST API. The script retrieves a product, creates a company, generates a quote, and adds product rows with various pricing and tax scenarios.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-add-crm-objects/how-to-product-binding.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n$resultProduct = CRest::call(\n    'crm.product.list',\n    [\n        'filter' => [\n            '>PRICE' => 0,\n        ]\n    ]\n);\n\nif (empty($resultProduct['result']))\n{\n    echo 'product error, create product in b24';\n    exit;\n}\nelse\n{\n    $arProduct = $resultProduct['result'][0];\n}\n\n// Remaining code omitted for brevity\n```\n\n----------------------------------------\n\nTITLE: Using cURL Webhook to Fetch Booking List in Bitrix24\nDESCRIPTION: This cURL example shows how to retrieve a booking list using a webhook. The request includes filter parameters for date range and client entities, with sorting options for the resulting list.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-list.md#2025-04-20_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"within\":{\"dateFrom\":0,\"dateTo\":1739262600},\"client\":{\"entities\":[{\"code\":\"CONTACT\",\"module\":\"crm\",\"id\":\"1\"},{\"code\":\"COMPANY\",\"module\":\"crm\",\"id\":\"1\"}]}},\"order\":{\"id\":\"ASC\",\"dateFrom\":\"DESC\",\"dateTo\":\"ASC\"}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/booking.v1.booking.list\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Property Value Fields with cURL (Webhook)\nDESCRIPTION: This snippet shows how to retrieve shipment property value fields using cURL with Webhook authentication. It sends a POST request to the `sale.shipmentpropertyvalue.getfields` method with an empty JSON body. Replace placeholders for your Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/sale.shipmentpropertyvalue.getfields\n```\n\n----------------------------------------\n\nTITLE: Response Time Metrics for Bitrix24 REST API Call\nDESCRIPTION: This snippet shows the time metrics returned with the API response, including start and finish times, duration, and processing information for a Bitrix24 REST API request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"time\": {\n    \"start\": 1712132792.910734,\n    \"finish\": 1712132793.530359,\n    \"duration\": 0.6196250915527344,\n    \"processing\": 0.032338857650756836,\n    \"date_start\": \"2024-04-03T10:26:32+02:00\",\n    \"date_finish\": \"2024-04-03T10:26:33+02:00\",\n    \"operating_reset_at\": 1705765533,\n    \"operating\": 3.3076241016387939\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Bitrix24 REST API JSON Response Schema\nDESCRIPTION: Comprehensive JSON response structure detailing result fields, their types, and metadata for a Bitrix24 entity. Includes standard fields like ID, creation/modification dates, and various bank-related attributes.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"ID\": {\n            \"type\": \"integer\",\n            \"isRequired\": false,\n            \"isReadOnly\": true,\n            \"isImmutable\": false,\n            \"isMultiple\": false,\n            \"isDynamic\": false,\n            \"title\": \"ID\"\n        },\n        // ... additional fields ...\n    },\n    \"time\": {\n        \"start\": 1717409814.796487,\n        \"finish\": 1717409815.225673,\n        \"duration\": 0.4291858673095703\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Call Status using CRest - PHP\nDESCRIPTION: This PHP snippet shows how to use the CRest library to call the 'getStatus' method and retrieve the current call status. It demonstrates the structure for making the API call and how to display the results.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/call-card/get-status.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\\nrequire_once('crest.php');\\n\\n$result = CRest::call(\\n    'placement.call',\\n    [\\n        'PLACEMENT' => 'getStatus',\\n        'PARAMS' => (object)[]\\n    ]\\n);\\n\\necho '<PRE>';\\nprint_r($result);\\necho '</PRE>';\\n?>\n```\n\n----------------------------------------\n\nTITLE: Generate Default Text Input Field in PHP\nDESCRIPTION: The provided snippet represents a default case that creates a text input field using the CPrintForm class, designed for unspecified data types. It acts as a fallback mechanism within the field processing logic.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-company.md#2025-04-20_snippet_14\n\nLANGUAGE: PHP\nCODE:\n```\ndefault:\n    $return = CPrintForm::input(\n        [\n            'NAME' => 'form[' . $key . ']',\n            'REQUIRED' => $arField['isRequired'],\n            'DISABLE' => $arField['isReadOnly'],\n            'MULTIPLE' => $arField['isMultiple'],\n            'VALUE' => $value,\n            'TYPE' => 'text',\n        ]\n    );\n```\n\n----------------------------------------\n\nTITLE: Using cURL with OAuth to Access Booking List in Bitrix24\nDESCRIPTION: This example demonstrates retrieving a booking list using cURL with OAuth authentication. The request includes filtering by date range and client entities, along with sorting parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/booking-v1-booking-list.md#2025-04-20_snippet_2\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"within\":{\"dateFrom\":0,\"dateTo\":1739262600},\"client\":{\"entities\":[{\"code\":\"CONTACT\",\"module\":\"crm\",\"id\":\"1\"},{\"code\":\"COMPANY\",\"module\":\"crm\",\"id\":\"1\"}]}},\"order\":{\"id\":\"ASC\",\"dateFrom\":\"DESC\",\"dateTo\":\"ASC\"},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/booking.v1.booking.list\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_ratio Data Type in Markdown\nDESCRIPTION: Details the structure and fields of the catalog_ratio data type, including ratio ID, product ID, ratio value, and default status.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор коэффициента единицы измерения ||\n|| **productId**\n[`integer`](../data-types.md) | Идентификатор товара ||\n|| **ratio**\n[`double`](../data-types.md) | Коэффициент единицы измерения ||\n|| **isDefault**\n[`string`](../data-types.md) | Является ли данный коэффициент единицы измерения коэффициентом по умолчанию. Возможные значения:\n- `Y` — да\n- `N` — нет\n||\n|#\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Item via JavaScript\nDESCRIPTION: This JavaScript code snippet utilizes the `BX24.callMethod` function to retrieve a shipment item.  It passes the method name `sale.shipmentitem.get` and the item's ID as parameters. The code includes error handling and displays the returned data in the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-item/sale-shipment-item-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"sale.shipmentitem.get\", {\n            \"id\": 7\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.info(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Handling JSON Response from Bitrix24\nDESCRIPTION: This JSON structure represents the typical successful response received when creating a user-defined field in Bitrix24, including the result identifier and timing information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": 399,\n    \"time\": {\n        \"start\": 1724239307.903115,\n        \"finish\": 1724239308.567422,\n        \"duration\": 0.6643068790435791,\n        \"processing\": 0.20090818405151367,\n        \"date_start\": \"2024-08-21T13:21:47+02:00\",\n        \"date_finish\": \"2024-08-21T13:21:48+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Cashbox with PHP\nDESCRIPTION: This PHP snippet demonstrates how to update a cashbox using the `CRest::call` function. It requires the `crest.php` library for Bitrix24 API interaction. The snippet includes the cashbox ID and the fields to be updated and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/cashbox/sale-cashbox-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.cashbox.update',\n    [\n        'ID' => 1,\n        'FIELDS' =>\n        [\n            'NAME' => 'Новое имя',\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Response format for tasks.api.scrum.task.getFields\nDESCRIPTION: This snippet shows the expected JSON response format when calling the tasks.api.scrum.task.getFields method. It includes the available fields for a Scrum task and their corresponding types.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/task/tasks-api-scrum-task-get-fields.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"fields\": \n    {\n        \"entityId\": \n        {\n            \"type\": \"integer\"\n        },\n        \"storyPoints\": \n        {\n            \"type\": \"string\"\n        },\n        \"epicId\": \n        {\n            \"type\": \"integer\"\n        },\n        \"sort\": \n        {\n            \"type\": \"integer\"\n        },\n        \"createdBy\": \n        {\n            \"type\": \"integer\"\n        },\n        \"modifiedBy\": \n        {\n            \"type\": \"integer\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Product List using cURL Webhook in Bitrix24\nDESCRIPTION: This snippet demonstrates how to use cURL to call the crm.item.payment.product.list method via a Bitrix24 webhook. It includes the necessary headers and payload to filter payment products.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/products-in-payment/crm-item-payment-product-list.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"paymentId\":1039,\"filter\":{\">\\u003D=quantity\":2,\"@id\":[1195,1196]}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.item.payment.product.list\n```\n\n----------------------------------------\n\nTITLE: Creating Shipment Property 'Address To' in Bitrix24 REST API (JS)\nDESCRIPTION: Adds a new shipment property with type ADDRESS for the 'To' address, configured for a specific person type and property group\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/sale/delivery-in-crm.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.shipmentproperty.add', {\n        fields: {\n            personTypeId: 3,\n            propsGroupId: 6,\n            name: \"Address To\",\n            active: \"Y\",\n            sort: \"100\",\n            type: \"ADDRESS\",\n            required: \"Y\",\n            isAddressTo: \"Y\"\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Icon with cURL (OAuth) in Bash\nDESCRIPTION: This code snippet demonstrates how to delete a CRM timeline icon using OAuth authentication with cURL in Bash. It sends a POST request with the icon code and auth token as parameters to the Bitrix24 REST API endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"code\":\"info\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.icon.delete\n```\n\n----------------------------------------\n\nTITLE: Calling calendar.user.settings.get via cURL Webhook in Bash\nDESCRIPTION: This snippet demonstrates how to call the calendar.user.settings.get method using a cURL command with a Bitrix24 webhook. It sends a POST request with an empty JSON body to retrieve user calendar settings.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-user-settings-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/calendar.user.settings.get\n```\n\n----------------------------------------\n\nTITLE: Setting Product Rows for CRM Lead in JavaScript\nDESCRIPTION: Uses Bitrix24 JavaScript SDK to add or update product rows for a lead by providing lead ID and an array of product details. Handles success and error scenarios with a callback function.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-productrows-set.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.lead.productrows.set\",\n    {\n        id: id,\n        rows:\n        [\n            { \"PRODUCT_ID\": 689, \"PRICE\": 100.00, \"QUANTITY\": 2 },\n            { \"PRODUCT_ID\": 690, \"PRICE\": 200.00, \"QUANTITY\": 1 }\n        ]\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.info(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON object demonstrates a successful response after deleting a status. It includes a boolean 'result' indicating success and 'time' information related to the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/status/sale-status-delete.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\":true,\n    \"time\":{\n        \"start\":1712144469.892859,\n        \"finish\":1712144470.162582,\n        \"duration\":0.26972293853759766,\n        \"processing\":0.013709068298339844,\n        \"date_start\":\"2024-04-03T14:41:09+03:00\",\n        \"date_finish\":\"2024-04-03T14:41:10+03:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a POST Request to Retrieve Shipment Fields - cURL (OAuth)\nDESCRIPTION: This snippet shows how to use cURL with OAuth for making a POST request to retrieve shipment data from the Bitrix24 API. It includes authentication with an access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment/sale-shipment-get.md#2025-04-20_snippet_1\n\nLANGUAGE: HTTP\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":2465,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.shipment.get\n```\n\n----------------------------------------\n\nTITLE: Deleting User Field with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to delete a user field using cURL with a webhook in Bitrix24. It requires the user ID and webhook key. The `id` parameter specifies the user field to delete.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-delete.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":432}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.userfield.delete\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Request with cURL using Webhook in Bash\nDESCRIPTION: Example of sending a batch request using cURL with a Bitrix24 webhook. The request includes two commands: getting current user and retrieving department information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/how-to-call-rest-api/batch.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n        \"halt\": 0,\n        \"cmd\": {\n            \"get_user\": \"user.current\",\n            \"get_department\": \"department.get?ID=$result[get_user][UF_DEPARTMENT][0]\"\n        }\n    }' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/batch\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Comments using cURL with OAuth\nDESCRIPTION: Example of using cURL with OAuth authentication to fetch CRM timeline comments. The request specifies filtering and field selection parameters for a specific deal entity.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/crm-timeline-comment-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"ENTITY_ID\":10,\"ENTITY_TYPE\":\"deal\"},\"select\":[\"ID\",\"CREATED\",\"ENTITY_ID\",\"ENTITY_TYPE\",\"AUTHOR_ID\",\"COMMENT\",\"FILES\"],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.timeline.comment.list\n```\n\n----------------------------------------\n\nTITLE: Deleting User Field with cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to delete a user field using cURL with OAuth authentication in Bitrix24. It requires an access token. The `id` parameter specifies the user field to delete.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":432,\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/crm.contact.userfield.delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving Price Types with PHP in Bitrix24\nDESCRIPTION: This snippet shows how to use the CRest::call function to retrieve price types in PHP. It includes the same parameters as previous examples and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/price-type/catalog-price-type-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'catalog.priceType.list',\n    [\n        'select' => [\n            'id',\n            'name',\n            'xmlId'\n        ],\n        'filter' => [\n            'modifiedBy' => 1\n        ],\n        'order' => [\n            'id' => 'ASC'\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Opening Event Card with viewEvent Method\nDESCRIPTION: Shows how to open an event card for viewing using the viewEvent method. The code requires an event ID and optionally a date parameter which is important for recurring events.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-grid-veiw.md#2025-04-20_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nBX24.placement.call(\n    'viewEvent',\n    {\n        id: \"1431170\", // идентификатор события\n        dateFrom: \"11.07.2018\" // дата события. Не обязательна, но важна для регулярных событий\n    },\n    function(){}\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Calendar Sections using PHP\nDESCRIPTION: This snippet shows how to call the calendar.section.get method using PHP with the CRest library. It calls the method with an array of parameters including the calendar type and owner ID, then prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-section-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'calendar.section.get',\n    [\n        'type' => 'user',\n        'ownerId' => 1\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Установка имени чата через cURL (OAuth) в Bitrix24 REST API\nDESCRIPTION: Пример использования метода imconnector.chat.name.set через cURL с использованием OAuth. Устанавливает новое имя для указанного чата в коннекторе.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/imconnector/imconnector-chat-name-set.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"CONNECTOR\":\"connector\",\"LINE\":\"105\",\"CHAT_ID\":\"47e007b1-ee15-43db-bcba-1c26e5884d3f\",\"NAME\":\"Новое имя диалога\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/imconnector.chat.name.set\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment Fields with cURL (Webhook)\nDESCRIPTION: This snippet demonstrates how to call the `sale.payment.getfields` method using cURL with webhook authentication. It requires the Bitrix24 address, user ID, and webhook to be specified in the URL.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get-fields.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/sale.payment.getfields\n```\n\n----------------------------------------\n\nTITLE: Получение списка подразделений через cURL (OAuth)\nDESCRIPTION: Пример запроса к методу department.get с использованием cURL и OAuth авторизации. Запрос отправляется методом POST с параметрами сортировки, фильтрации и токеном доступа.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/departments/department-get.md#2025-04-20_snippet_1\n\nLANGUAGE: curl\nCODE:\n```\n-X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\n    \"sort\": \"NAME\",\n    \"order\": \"DESC\",\n    \"PARENT\": 1,\n    \"auth\":\"**put_access_token_here**\"\n}' \\\nhttps://**put_your_bitrix24_address**/rest/department.get\n```\n\n----------------------------------------\n\nTITLE: Sending IFrame Size to Parent Window with JavaScript\nDESCRIPTION: This JavaScript code sends the width and height of the IFrame's content to the parent window. It uses `parent.postMessage` to communicate the `width` and `height` properties. The parent window is expected to handle these properties to adjust the IFrame's dimensions accordingly.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/pay-system/sale-pay-system-handler-add.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ndocument.addEventListener(\"DOMContentLoaded\", function() {\n\tvar size = {\n\t\twidth: document.body.scrollWidth,\n\t\theight: document.body.scrollHeight\n\t};\n\t// отправка данных на сайт продавца\n\tparent.postMessage(size, \"*\");\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving User Field Settings\nDESCRIPTION: This code snippet demonstrates the structure of the data returned by the `crm.userfield.settings.fields` method. It showcases the data structure representing available settings for a user field, such as \"DEFAULT_VALUE\" and \"PRECISION\".\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/companies/userfields/index.md#2025-04-20_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n    [DEFAULT_VALUE] => Array\n            (\n                [type] => double\n                [title] => Значение по умолчанию\n            )\n    [PRECISION] => Array\n            (\n                [type] => int\n                [title] => Точность\n            )\n\n```\n\n----------------------------------------\n\nTITLE: Updating Delivery Service Config in PHP\nDESCRIPTION: PHP method for updating delivery service configuration using CRest::call. Requires crest.php library and includes configuration parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery/sale-delivery-config-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.delivery.config.update',\n    [\n        'ID' => 196,\n        'CONFIG' => [\n            ['CODE' => \"SETTING_1\", 'VALUE' => \"New SETTING_1 string value\"],\n            ['CODE' => \"SETTING_2\", 'VALUE' => \"N\"],\n            ['CODE' => \"SETTING_3\", 'VALUE' => 999.99],\n            ['CODE' => \"SETTING_4\", 'VALUE' => \"Option2Code\"],\n            ['CODE' => \"SETTING_5\", 'VALUE' => \"25.03.2023\"],\n            ['CODE' => \"SETTING_6\", 'VALUE' => \"0000144962\"],\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Error Handling - JSON Response\nDESCRIPTION: This JSON snippet illustrates a typical error response. It includes an 'error' field with a general error code and an 'error_description' field providing a more specific message regarding the error, in this case, a missing 'entityTypeID' parameter.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/item-details-configuration/crm-item-details-configuration-get.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"Parameter 'entityTypeID' is not defined\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Property Variant with JavaScript\nDESCRIPTION: This JavaScript code uses the `BX24.callMethod` function to call the `sale.propertyvariant.delete` method. It includes error handling to log any errors that occur during the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"sale.propertyvariant.delete\", {\n        \"id\": 5\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Запрос полей вариации товара через cURL с использованием Webhook\nDESCRIPTION: Пример выполнения POST-запроса к методу catalog.product.offer.getFieldsByFilter с использованием cURL и Webhook. Запрос включает фильтр по ID инфоблока.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/offer/catalog-product-offer-get-fields-by-filter.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"iblockId\":24}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/catalog.product.offer.getFieldsByFilter\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM activities using cURL OAuth request\nDESCRIPTION: Example of using cURL with OAuth authentication to retrieve CRM activities for a specific owner, sorting by ID in descending order and selecting all fields plus communications.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{\"ID\":\"DESC\"},\"filter\":{\"OWNER_TYPE_ID\":3,\"OWNER_ID\":102},\"select\":[\"*\",\"COMMUNICATIONS\"],\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.activity.list\n```\n\n----------------------------------------\n\nTITLE: Calling disk.storage.gettypes Method in JavaScript\nDESCRIPTION: This snippet demonstrates how to call the disk.storage.gettypes method using the Bitrix24 JavaScript SDK. It sends a request without parameters and handles the response, logging the result or any errors.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/disk/storage/disk-storage-get-types.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"disk.storage.gettypes\",\n    {},\n    function (result)\n    {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Updating Userfieldtype in JavaScript (BX24)\nDESCRIPTION: Demonstrates updating a user field type configuration using Bitrix24 JavaScript SDK. Includes method call with configuration parameters and error handling.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/user-field/userfieldtype-update.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'userfieldtype.update',\n    {\n        USER_TYPE_ID: 'test_type',\n        HANDLER: 'https://www.myapplication.com/handler/',\n        TITLE: 'Updated test type',\n        DESCRIPTION: 'Test userfield type for documentation with updated description',\n        OPTIONS: {\n            height: 60,\n        },\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Property Value Fields with PHP\nDESCRIPTION: This snippet shows how to retrieve shipment property value fields using PHP and the `CRest::call` function. It requires the `crest.php` library and calls the `sale.shipmentpropertyvalue.getfields` method, then prints the result using `print_r`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipmentpropertyvalue.getfields',\n    []\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving Resource Bookings by Resource IDs in Bitrix24 Calendar API\nDESCRIPTION: This example shows how to retrieve resource bookings using specific resource IDs from CRM entity custom fields using the calendar.resource.booking.list method.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/resource/calendar-resource-booking-list.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"filter\":{\"resourceIdList\":[10,18,17]}}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/calendar.resource.booking.list\n```\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'calendar.resource.booking.list',\n    {\n        filter: {\n            resourceIdList: [10, 18, 17]\n        }\n    }\n);\n```\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'calendar.resource.booking.list',\n    [\n        'filter' => [\n            'resourceIdList' => [10, 18, 17]\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Creating Bank Requisite with cURL OAuth\nDESCRIPTION: Example of adding a bank requisite using cURL with OAuth authentication, showing how to include access token for secure API requests.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-add.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"fields\":{\"ENTITY_ID\":27,\"COUNTRY_ID\":1,\"NAME\":\"Супербанк\",\"RQ_BANK_NAME\":\"ПАО Супербанк\",\"RQ_BANK_ADDR\":\"117312, г. Москва, улица Вавилова, дом 19\",\"RQ_BIK\":\"044525225\",\"RQ_ACC_NUM\":\"40702810938000060473\",\"RQ_ACC_CURRENCY\":\"RUR\",\"RQ_COR_ACC_NUM\":\"30101810400000000225\",\"XML_ID\":\"1e4641fd-2dd9-31e6-b2f2-105056c00008\",\"ACTIVE\":\"Y\",\"SORT\":600},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.requisite.bankdetail.add\n```\n\n----------------------------------------\n\nTITLE: Activating Task Flow using JavaScript\nDESCRIPTION: This snippet demonstrates how to activate or deactivate a task flow using JavaScript with the Bitrix24 REST API. It uses the BX24.callMethod function to send a request with the flow ID and handles the response.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-activate.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'tasks.flow.Flow.activate',\n    {\n        flowId: 517\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Example of Placement Options for Calendar Range\nDESCRIPTION: Shows the format of the placement options that include the date range currently being displayed in the calendar. These parameters can be used to synchronize your application's view with the calendar.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/calendar/calendar-grid-veiw.md#2025-04-20_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n[PLACEMENT_OPTIONS] => {\n    \"viewRangeFrom\":\"2018-09-30\",\n    \"viewRangeTo\":\"2018-11-04\"\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting Property Variant with cURL (OAuth)\nDESCRIPTION: This cURL example shows how to delete a property variant using OAuth authentication. It includes the access token in the JSON payload of the POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-variant/sale-property-variant-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":5,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/sale.propertyvariant.delete\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON code shows an example error response from the API. It contains the \"error\" and \"error_description\" fields, providing information about the error that occurred.  The HTTP status for this error is 400.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add-catalog-product.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON structure represents an error response that occurs when the requested element is not found. The `error` field provides the error code, and the `error_description` field offers a human-readable explanation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/management-communication/crm-lead-contact-delete.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"NOT_FOUND\",\n    \"error_description\": \"Not found.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Call Card Status Text in Bitrix24\nDESCRIPTION: This code snippet demonstrates how to set the status text of a call card in Bitrix24 using the `CallCardSetStatusText` method. It calls the `BX24.placement.call` function with the method name and an object containing the `statusText` property. The callback function is executed after the status text is set.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/ui-interaction/page-background-worker/card.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.placement.call('CallCardSetStatusText', {statusText: 'Status Text'}, () => { //some code });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Epic Fields with JavaScript in Bitrix24 REST API\nDESCRIPTION: This JavaScript example demonstrates how to call the tasks.api.scrum.epic.getFields method using the BX24 library. The response containing all available epic fields is logged to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sonet-group/scrum/epic/tasks-api-scrum-epic-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'tasks.api.scrum.epic.getFields',\n    {},\n    function(res)\n    {\n        console.log(res);\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON\nDESCRIPTION: This JSON snippet shows the structure of a typical error response from the Bitrix24 REST API. It contains an `error` code and an `error_description` providing details about the cause of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-item/sale-basket-item-add.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample error response in JSON\nDESCRIPTION: This JSON object represents an error response from the `sale.propertygroup.add` method. It indicates a missing required field (`name`) by providing an `error_description` with `Required fields: name`.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/property-group/sale-property-group-add.md#2025-04-20_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"error\":0,\n    \"error_description\":\"Required fields: name\"\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Task Dependency using PHP in Bitrix24\nDESCRIPTION: This snippet shows how to remove a task dependency using the CRest::call function in PHP. It requires the crest.php file and prints the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/task-dependence-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'task.dependence.delete',\n    [\n        'taskIdFrom' => 100,\n        'taskIdTo' => 101,\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: CRM Duplicate Volatile Type Unregister HTTP Request\nDESCRIPTION: This snippet shows the HTTP request structure for unregistering a volatile type for duplicate search. The method requires the 'id' parameter, representing the identifier of the duplicate type, to be provided.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/duplicates/volatile-type/crm-duplicate-volatile-type-unregister.md#2025-04-20_snippet_0\n\nLANGUAGE: http\nCODE:\n```\ncrm.duplicate.volatileType.unregister({id: number})\n```\n\n----------------------------------------\n\nTITLE: Get Shipment Property with PHP\nDESCRIPTION: This PHP code uses the `CRest::call` method to retrieve a shipment property. It requires the `crest.php` library. The result is printed using `print_r` for debugging purposes.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property/sale-shipment-property-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.shipmentproperty.get',\n    [\n        'id' => 22\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Defining catalog_extra Data Type in Markdown\nDESCRIPTION: Specifies the structure and fields of the catalog_extra data type, including markup ID, name, and percentage value.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/data-types.md#2025-04-20_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Значение**\n`тип` | **Описание** ||\n|| **id**\n[`integer`](../data-types.md) | Идентификатор наценки ||\n|| **name**\n[`string`](../data-types.md) | Название наценки ||\n|| **percentage**\n[`double`](../data-types.md) | Величина наценки ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Bitrix24 CRM Payment Delivery Addition - JavaScript\nDESCRIPTION: Shows how to add a delivery position to a payment using Bitrix24's JS SDK with a callback function for handling the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/delivery-in-payment/crm-item-payment-delivery-add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.item.payment.delivery.add', {\n        paymentId: 1039,\n        deliveryId: 4072\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.log(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Error Response Example (JSON)\nDESCRIPTION: This JSON snippet represents an error response from the `sale.payment.get` method. It indicates that the requested payment does not exist (error code 200640400001).\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":200640400001,\n    \"error_description\":\"payment is not exists\"\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Business Process Template with JavaScript in Bitrix24\nDESCRIPTION: This snippet shows how to add a business process template using the BX24 JavaScript SDK. It defines document type, template name, description, auto-execution settings, and includes the encoded template data from a .bpt file.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/template/bizproc-workflow-template-add.md#2025-04-20_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'bizproc.workflow.template.add',\n    {\n        DOCUMENT_TYPE: ['lists', 'BizprocDocument', 'iblock_164'],\n        NAME: 'App template',\n        DESCRIPTION: 'Template was generated by rest application.',\n        AUTO_EXECUTE: 3,\n        TEMPLATE_DATA: [\n                \"bp-379.bpt\",\n                \"eNrlWNtO41YUfe9XRH5vlTiJhxj1IYkdYTU3Jeb2ZBkwg1UHU9t0BiFLhKk6rTq9aNSHqupF7RcwU1JSIOEXjv+oex/biZ04YWagIKYvcE7Ots9ea9+t8hx/aPOPeGZFbLWlRp1Z1Hl20eYXeEYWa81qURaZRZXP8Ic6n4ZFHsVzcHiwpzEgx3I809Y+29d2HV01Vk3r023DfFLcdPTPdecAJUC4rnaoML5U6+wZqkO3BZ6hgrDdwn2GZ9bp/zTPNC1zT7McXbPxehZvzcPTumPQRzkQIb+TodclF6RHTsmQvCYn3jGsL7wXZOB9Q/5JkVekT87IgPS87ofkyjsC+S9x43VH12hWR7dt3dzFaxbwGtBCwE2aP3TpToztWrFdO7aTY7vl2G41tlsLd65LaSnv6MaWpe3O5xovNDfrmlPTbFt9rM2gmYV1MZ9Oc2llocCxBYUrsByr5Atsnn073qlzZOA8uFDWnjpUMov8vwRGe+TS+z4FRhiSc3Likw/rHp86/Lh9YDtah6+bT6rmpmq4H0SeAMP1YPOa/j2JS4PgnyB27j3zvgajwutPqW2jYgIo7/qqjLSrmFZHpfqBdvQsPzpbtjWrYpmdCMHgRTyj7js7psUsurE3obRszpGN+mIW6CZ/AOgheQUK94CAPukhQnC3jyjQY9IPdRW3dMe0ymanAyEz0nXaC3znQPegZim2ijVRhhgduxGYcaXYkoqlqhj/tdyot+ViXY46JygsNMrLNbEuKxVJrAr0kE2jgVmekajLFwKHCx0pU8CTlPctDbJLhIZmCNwtdEsApftQUNOKbjiapW4gNxt8xo96BB3+lPZ/akHS0C10wNFPtX3D0ffGUkg5+mn0sZJqa9MXQ/4CRuHRp8xindoSo1GqicBDramsJYHLodl+9B0rRRMFBejbDz10PmrQZQt80NEDqt4EeubWoE/cnoi/1hAkMLWglNaT8GM2IT8jwgn0E0BhuQ/hcA8gIzcnAhSgOCnllhjUqCkDsxEDYzQCSEgk74V5QR0f+CzrYugG1o1Cv6Ft03diW8w6pWqj/ImSnJYwciEtgdcOvC8gyR6BFU+gsvcB54CWn7/IEKt/UJVulq8SrJq59XwFjxbLsrSS6MhZECc/QD2EMgIVc4Btj3fsvbjOh2G5YZrG/URuePO070JYlppKc7lUldpLYqKFWQzd36Ble0at2Acr0gYvyYFnQ0zfG8RMaE6l0mrUkhDmC9HqM4DFc2yfcHMyaWnSf9jZqjBiQ24kccHlo1wMqbEHlA8/Vb9/jICi7UZLTnQM7Kx/AqCntAXu+n3kEWLGAQY4OL8e/c1T3O23ZIgReljaVGcnqxW8l/wKdj7zoxwb6P8gQUcYggttx9J3HwfM2abl4OybCUDZmuPA6Xj6xN69vdRYVYqCoFQarVpscsoFh6IgyROn7gRrqBsmCP8XxRnnE58eP0MK2rYK2q+oxr4WmWgm6I6hmE5DEFfNlrgiiatKUyrLy63E8pLnqMed0fkFhjHy92iGASe8wAC8onPbaTBDd8HvhlCAjpIqzrZuaPeTjsObEytOyIMsrskzpwF/6oT88i7AnXA2vnPg4c3TwB/FgSvyetMPwPSkD2Qp/D65StGPKJQFzMZvyQM6pGZom6E+jT1HN3fHUTTB05jx4D07TscIlkt06d45oZMQRpTiJa4f64IoF6XqvKDKLbxRUD3AYMqM4M+KpSw3M5YeYAxxMbyzQyiXvz6E/uehk8NvU0LyjIMJ6Bf6AeKSjnF9aAB7QBd0O/gpF3vCU2ZODb/jRmd+5YXTtVp1xvjKItSX9LP0VzQlUHgX3nfe8wcC0HX/BTDK1SA=\"\n            ]\n    },\n    function(result)\n    {\n        if(result.error())\n            alert(\"Error: \" + result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Activity Types with cURL (OAuth)\nDESCRIPTION: cURL POST request to fetch CRM activity types, requiring an access token and Bitrix24 domain URL\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/types/crm-activity-type-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.activity.type.list\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Entity Fields in JavaScript with BX24\nDESCRIPTION: Demonstrates retrieving order entity fields using the BX24 JavaScript API with error handling and result logging.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/order-entity/crm-order-entity-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.orderentity.getFields\",\n    {},\n)\n    .then(\n        function(result)\n        {\n            if (result.error())\n            {\n                console.error(result.error());\n            }\n            else\n            {\n                console.log(result.data());\n            }\n        },\n        function(error)\n        {\n            console.info(error);\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Example of BINDINGS filter parameter format\nDESCRIPTION: JSON showing how to format the BINDINGS filter parameter to find activities linked to specific CRM entity types, such as deals or leads.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/activity-base/crm-activity-list.md#2025-04-20_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"BINDINGS\": [\n    {\"OWNER_TYPE_ID\": 2},\n    {\"OWNER_TYPE_ID\": 3}\n]\n```\n\n----------------------------------------\n\nTITLE: Получение настроек службы доставки через JavaScript Bitrix24\nDESCRIPTION: Метод JavaScript для получения конфигурации службы доставки с обработкой результата и ошибок\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery/sale-delivery-config-get.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    'sale.delivery.config.get', {\n        ID: 196,\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: CRM Address Fields Documentation\nDESCRIPTION: Comprehensive specification of address-related fields in Bitrix24 CRM, including location details, parent entity references, and address component mappings\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/main-entities-fields.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nAddress fields for CRM objects, including street, city, postal code, country, and location identifier mappings\n```\n\n----------------------------------------\n\nTITLE: Available REST API Methods for Bitrix24 Application Robots\nDESCRIPTION: A table listing all available REST API methods for working with application robots in Bitrix24, including links to their detailed documentation pages.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-robot/index.md#2025-04-20_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n#|\n|| **Метод** | **Описание** ||\n|| [bizproc.robot.add](./bizproc-robot-add.md) | Регистрирует нового робота ||\n|| [bizproc.robot.update](./bizproc-robot-update.md) | Обновляет поля робота ||\n|| [bizproc.robot.list](./bizproc-robot-list.md) | Получает список роботов, зарегистрированных приложением ||\n|| [bizproc.robot.delete](./bizproc-robot-delete.md) | Удаляет зарегистрированного робота ||\n|| [bizproc.event.send](./bizproc-event-send.md) | Возвращает действию выходные параметры, заданные в описании действия ||\n|#\n```\n\n----------------------------------------\n\nTITLE: Error Response Example\nDESCRIPTION: This JSON snippet represents an example of an error response returned by the `sale.shipmentpropertyvalue.get` method. It includes an error code and a description, indicating that the property value was not found.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/shipment-property-value/sale-shipment-property-value-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\":201040400001,\n    \"error_description\":\"Property value has not been found\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example\nDESCRIPTION: This JSON snippet represents a successful response from the crm.requisite.preset.field.update method. It includes the 'result' flag set to true, indicating a successful update, and timing information about the request processing.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-update.md#2025-04-20_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": true,\n    \"time\": {\n        \"start\": 1716898310.398361,\n        \"finish\": 1716898310.936332,\n        \"duration\": 0.537971019744873,\n        \"processing\": 0.09376883506774902,\n        \"date_start\": \"2024-05-28T14:11:50+02:00\",\n        \"date_finish\": \"2024-05-28T14:11:50+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Booking Client List with cURL Webhook in Bitrix24 REST API\nDESCRIPTION: cURL example using a Webhook to call the booking.v1.booking.client.list method in Bitrix24 REST API. The request requires a bookingId parameter in the JSON payload sent to the Bitrix24 REST endpoint.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/booking/booking/client/booking-v1-booking-client-list.md#2025-04-20_snippet_1\n\nLANGUAGE: Bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"bookingId\":123}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/booking.v1.booking.client.list\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON for Empty Log Message in Bitrix24\nDESCRIPTION: This JSON example shows the error response structure when the bizproc.activity.log method is called with an empty log message. It includes an error code and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-activity/bizproc-activity-log.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"ERROR_EMPTY_LOG_MESSAGE\",\n    \"error_description\": \"Empty log message!\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sample JSON Response for Task History in Bitrix24\nDESCRIPTION: This snippet shows a sample JSON response from the tasks.task.history.list method, including task history details and execution time information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/tasks-task-history-list.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"list\": [\n            {\n                \"id\": \"1230\",\n                \"createdDate\": \"01.03.2019 15:29:28\",\n                \"field\": \"NEW\",\n                \"value\": {\n                    \"from\": null,\n                    \"to\": null\n                },\n                \"user\": {\n                    \"id\": \"1\",\n                    \"name\": \"Максим\",\n                    \"lastName\": \"Гречушников\",\n                    \"secondName\": \"\",\n                    \"login\": \"admin\"\n                }\n            }\n        ]\n    },\n    \"time\": {\n        \"start\": 1552382093.81029,\n        \"finish\": 1552382093.927268,\n        \"duration\": 0.11697793006896973,\n        \"processing\": 0.018744230270385742,\n        \"date_start\": \"2019-03-12T11:14:53+02:00\",\n        \"date_finish\": \"2019-03-12T11:14:53+02:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for tasks.task.counters.get\nDESCRIPTION: This JSON snippet shows the expected response format when the tasks.task.counters.get method is called successfully. It includes various counter types, their values, and execution time details.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/tasks-task-counters-get.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": {\n        \"wo_deadline\": {\n            \"counter\": 0,\n            \"code\": 10485760\n        },\n        \"expired\": {\n            \"counter\": 1,\n            \"code\": 6291456\n        },\n        \"expired_soon\": {\n            \"counter\": 0,\n            \"code\": 9437184\n        },\n        \"not_viewed\": {\n            \"counter\": 0,\n            \"code\": 1048576\n        },\n        \"wait_ctrl\": {\n            \"counter\": 0,\n            \"code\": 8388608\n        }\n    },\n    \"total\": 1,\n    \"time\": {\n        \"start\": 1552383141.526606,\n        \"finish\": 1552383141.576861,\n        \"duration\": 0.05025482177734375,\n        \"processing\": 0.002279996871948242,\n        \"date_start\": \"2019-03-12T11:32:21+02:00\",\n        \"date_finish\": \"2019-03-12T11:32:21+02:00\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculate Delivery Costs Error Response Example\nDESCRIPTION: This is an example of an error JSON response from the CALCULATE_URL endpoint. It indicates a failed delivery cost calculation with the `SUCCESS` flag set to `N`, and provides a `REASON` object containing a descriptive `TEXT` field explaining the cause of the error.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/webhooks/calculate.md#2025-04-20_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"SUCCESS\": \"N\",\n    \"REASON\": {\n        \"TEXT\": \"Delivery is not available for the specified address\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Business Process Logs Using cURL with OAuth in Bitrix24\nDESCRIPTION: This example shows how to send a log message to a Bitrix24 business process using cURL with OAuth authentication. It includes the event token, message, and access token for authorization.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/bizproc/bizproc-activity/bizproc-activity-log.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"event_token\":\"55c1dc1c3f0d75.78875596|A51601_82584_96831_81132|hsyUws1j4XiwqPqN45eH66CcQtEvpUIP.47dd5d888e8e549d2c984713e12a4268e6e87d0208ca1f093ba1075e77f92e90\",\"log_message\":\"Please wait for answer!\",\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/bizproc.activity.log\n```\n\n----------------------------------------\n\nTITLE: Retrieving Recurring Deal Template Settings in JavaScript\nDESCRIPTION: Uses BX24 JavaScript SDK to fetch recurring deal template configuration by its ID with error handling and result logging\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/deals/recurring-deals/crm-deal-recurring-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.deal.recurring.get\",\n    { id: id },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Структура данных события onCrmTimelineCommentAdd в PHP\nDESCRIPTION: Пример структуры данных, передаваемых обработчику при срабатывании события onCrmTimelineCommentAdd. Содержит информацию о событии, ID добавленного комментария, временную метку и авторизационные данные.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/comments/events/on-Crm-Timeline-Comment-Add.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\narray(\n    'event' => 'onCrmTimelineCommentAdd',\n    'data' => array(\n        'ID' => 999,\n    ),\n    'ts' => '1466439714',\n    'auth' => array(\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => '3600',\n        'scope' => 'crm',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ),\n)\n```\n\n----------------------------------------\n\nTITLE: Logging Data to File in PHP\nDESCRIPTION: This function writes data to a log file. It takes the data to be logged and an optional title. The log entry includes a timestamp and is appended to the 'imbot.log' file.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/chat-bots/index.md#2025-04-20_snippet_2\n\nLANGUAGE: PHP\nCODE:\n```\nfunction writeToLog($data, $title = '') {\n    $log = \"\\n------------------------\\n\";\n    $log .= date(\"Y.m.d G:i:s\") . \"\\n\";\n    $log .= (strlen($title) > 0 ? $title : 'DEBUG') . \"\\n\";\n    $log .= print_r($data, 1);\n    $log .= \"\\n------------------------\\n\";\n    file_put_contents(__DIR__ . '/imbot.log', $log, FILE_APPEND);\n    return true;\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Bitrix24 Lead User Field Update Event Payload\nDESCRIPTION: JSON structure representing the event payload when a custom lead field is updated, containing event details, field information, and authentication data\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/userfield/events/on-crm-lead-user-field-update.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"event\": \"ONCRMLEADUSERFIELDUPDATE\",\n    \"event_handler_id\": \"715\",\n    \"data\": {\n        \"FIELDS\": {\n            \"ID\": \"6977\",\n            \"ENTITY_ID\": \"CRM_LEAD\",\n            \"FIELD_NAME\": \"UF_CRM_1742999523\"\n        }\n    },\n    \"ts\": \"1742999566\",\n    \"auth\": {\n        \"access_token\": \"s6p6eclrvim6da22ft9ch94ekreb52lv\",\n        \"expires_in\": \"3600\",\n        \"scope\": \"crm\",\n        \"domain\": \"some-domain.bitrix24.com\",\n        \"server_endpoint\": \"https://oauth.bitrix.info/rest/\",\n        \"status\": \"L\",\n        \"client_endpoint\": \"https://some-domain.bitrix24.com/rest/\",\n        \"member_id\": \"a223c6b3710f85df22e9377d6c4f7553\",\n        \"refresh_token\": \"4s386p3q0tr8dy89xvmt96234v3dljg8\",\n        \"application_token\": \"51856fefc120afa4b628cc82d3935cce\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Requisites by Preset ID using PHP\nDESCRIPTION: This PHP code uses the `CRest::call` function to retrieve requisites from Bitrix24 CRM. It sets the `order`, `filter`, and `select` parameters to define the query. The `crest.php` library is required for making the API call.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n        $result = CRest::call(\n            'crm.requisite.list',\n            [\n                'order' => [\"DATE_CREATE\" => \"ASC\"],\n                'filter' => [\"PRESET_ID\" => \"1\"],\n                'select' => [\"ENTITY_TYPE_ID\", \"ENTITY_ID\", \"ID\", \"NAME\"]\n            ]\n        );\n\n        echo '<PRE>';\n        print_r($result);\n        echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Lead with PHP in Bitrix24\nDESCRIPTION: Example of how to retrieve a CRM lead with ID 250 using PHP and the CRest library. The code makes an API call and displays the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-get.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.item.get',\n    [\n        'entityTypeId' => 1,\n        'id' => 250,\n        'useOriginalUfNames' => 'N',\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Delete Company from Contact via cURL OAuth\nDESCRIPTION: cURL request to remove a company association from a contact using Bitrix24 REST API OAuth authentication method\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-delete.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":54,\"fields\":{\"COMPANY_ID\":32},\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.company.delete\n```\n\n----------------------------------------\n\nTITLE: Retrieving Payment List in PHP with CRest\nDESCRIPTION: PHP implementation of sale.payment.list using the CRest library, demonstrating method invocation with comprehensive field selection, advanced filtering, and result printing\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment/sale-payment-list.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'sale.payment.list',\n    [\n        'select' => [\n            \"paySystemXmlId\",\n            \"paySystemIsCash\",\n            \"accountNumber\",\n            \"id\",\n            \"orderId\",\n            \"paid\",\n            \"datePaid\",\n            \"empPaidId\",\n            \"paySystemId\",\n            \"psStatus\",\n            \"psStatusCode\",\n            \"psStatusDescription\",\n            \"psStatusMessage\",\n            \"psSum\",\n            \"psCurrency\",\n            \"psResponseDate\",\n            \"payVoucherNum\",\n            \"payVoucherDate\",\n            \"datePayBefore\",\n            \"dateBill\",\n            \"xmlId\",\n            \"sum\",\n            \"currency\",\n            \"paySystemName\",\n            \"companyId\",\n            \"payReturnNum\",\n            \"priceCod\",\n            \"payReturnDate\",\n            \"empReturnId\",\n            \"payReturnComment\",\n            \"responsibleId\",\n            \"empResponsibleId\",\n            \"dateResponsibleId\",\n            \"isReturn\",\n            \"comments\",\n            \"updated1c\",\n            \"id1c\",\n            \"version1c\",\n            \"externalPayment\",\n            \"psInvoiceId\",\n            \"marked\",\n            \"reasonMarked\",\n            \"dateMarked\",\n            \"empMarkedId\",\n        ],\n        'filter' => [\n            \"<id\" => 10,\n            \"@personTypeId\" => [3, 4],\n            \"payed\" => \"N\",\n        ],\n        'order' => [\n            \"id\" => \"desc\",\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Update delivery request with PHP (CRest::call)\nDESCRIPTION: This PHP code uses the `CRest::call` function to update a delivery request. It sets parameters such as delivery ID, request ID, status, and properties. The response is then printed for debugging purposes.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/delivery-request/sale-delivery-request-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n    require_once('crest.php');\n\n    $result = CRest::call(\n        'sale.delivery.request.update',\n        [\n            'DELIVERY_ID' => 225,\n            'REQUEST_ID' => \"4757aca4931a4f029f49c0db4374d13d\",\n            'STATUS' => [\n                'TEXT' => \"Performer found\",\n                'SEMANTIC' => \"process\",\n            ],\n            'PROPERTIES' => [\n                [\n                    'NAME' => \"Car\",\n                    'VALUE' => \"Gray Skoda Octavia, a777zn\",\n                ],\n                [\n                    'NAME' => \"Driver\",\n                    'VALUE' => \"John Smith\",\n                ],\n                [\n                    'NAME' => \"Phone Number\",\n                    'VALUE' => \"+11111111111\",\n                    'TAGS' => [\n                        \"phone\"\n                    ],\n                ],\n                [\n                    'NAME' => \"Something else\",\n                    'VALUE' => \"Some value\",\n                ],\n            ]\n        ]\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n    ?>\n```\n\n----------------------------------------\n\nTITLE: Querying Lead Fields via JavaScript\nDESCRIPTION: This snippet demonstrates how to retrieve lead fields using the crm.lead.fields method in JavaScript with the BX24.callMethod function. It sends an empty object as parameters and handles the result in a callback function, logging errors to the console if any occur and printing the data upon success.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n  'crm.lead.fields',\n  {},\n  (result) => {\n    if(result.error())\n    {\n      console.error(result.error());\n\n      return;\n    }\n    \n    console.info(result.data());\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Delete Lead via PHP\nDESCRIPTION: This PHP code demonstrates how to delete a lead using the CRest::call method.  It prompts the user for the lead ID via the command line using `readline()`, then calls the 'crm.lead.delete' method with the ID. The result of the API call is then printed to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('crest.php');\n\n$id = readline(\"Введите ID: \");\n\n$result = CRest::call(\n    'crm.lead.delete',\n    [\n        'id' => $id\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Querying Requisites by Preset ID using cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to retrieve requisites by filtering based on the `PRESET_ID`. It specifies the order, filter, and select parameters to customize the retrieved data. The command uses a webhook to authenticate the request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"order\":{\"DATE_CREATE\":\"ASC\"},\"filter\":{\"PRESET_ID\":\"1\"},\"select\":[\"ENTITY_TYPE_ID\",\"ENTITY_ID\",\"ID\",\"NAME\"]}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webhook_here**/crm.requisite.list\n```\n\n----------------------------------------\n\nTITLE: Updating Product Properties via REST API in Bitrix24 using JavaScript\nDESCRIPTION: This JavaScript code updates a product's properties using the Bitrix24 REST API. It handles different property types, including select, multiselect, and file uploads.  The code first retrieves the product, then modifies the fields with the new values, including file uploads encoded as base64. Finally, it calls the 'crm.product.update' method to apply the changes.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-change-product-custom-field-values.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet idProduct = 10339;\n\n    let propertyIDSelect = 106;\n    let propertySelectValueID = 85;\n\n    let propertyIDMultiSelect = 105;\n    let propertyMultiSelectValueID = [79, 80, 82];\n\n    let propertyIDFile = 107;\n    let propertyFilePathToPicture = 'pictures/1.jpg'; // relative or full path on server\n\n    let propertyIDMultiFile = 108;\n    let propertyMultiFilePathToPicture = [ // relative or full path on server\n        'pictures/2.jpg',\n        'pictures/3.jpg',\n        'pictures/4.jpg',\n    ];\n\n    let standardPreviewPicturePath = 'pictures/5.jpg'; // relative or full path on server\n    let standardDetailPicturePath = 'pictures/6.jpg'; // relative or full path on server\n\n    let arFields = {\n        'NAME': 'Example product 2',\n        'CURRENCY_ID': 'USD',\n        'PRICE': 4900,\n        'SORT': 500\n    };\n\n    BX24.callMethod(\n        'crm.product.get',\n        {\n            'id': idProduct\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                let arProduct = result.data();\n                if (propertyIDSelect > 0 && propertySelectValueID > 0) {\n                    arFields['PROPERTY_' + propertyIDSelect] = propertySelectValueID;\n                }\n\n                if (propertyIDMultiSelect > 0 && Array.isArray(propertyMultiSelectValueID) && propertyMultiSelectValueID.length > 0) {\n                    arFields['PROPERTY_' + propertyIDMultiSelect] = propertyMultiSelectValueID;\n                }\n\n                if (propertyIDFile > 0 && propertyFilePathToPicture && fileExists(propertyFilePathToPicture)) {\n                    let fileName = propertyFilePathToPicture.split('/').pop();\n                    arFields['PROPERTY_' + propertyIDFile] = {\n                        \"fileData\": [\n                            fileName,\n                            base64Encode(fileGetContents(propertyFilePathToPicture))\n                        ]\n                    };\n                }\n\n                if (propertyIDMultiFile > 0 && Array.isArray(propertyMultiFilePathToPicture) && propertyMultiFilePathToPicture.length > 0) {\n                    arFields['PROPERTY_' + propertyIDMultiFile] = [];\n                    propertyMultiFilePathToPicture.forEach(function(path) {\n                        if (fileExists(path)) {\n                            let fileName = path.split('/').pop();\n                            arFields['PROPERTY_' + propertyIDMultiFile].push({\n                                \"fileData\": [\n                                    fileName,\n                                    base64Encode(fileGetContents(path))\n                                ]\n                            });\n                        }\n                    });\n                }\n\n                if (standardPreviewPicturePath && fileExists(standardPreviewPicturePath)) {\n                    let fileName = standardPreviewPicturePath.split('/').pop();\n                    arFields['PREVIEW_PICTURE'] = {\n                        \"fileData\": [\n                            fileName,\n                            base64Encode(fileGetContents(standardPreviewPicturePath))\n                        ]\n                    };\n                }\n\n                if (standardDetailPicturePath && fileExists(standardDetailPicturePath)) {\n                    let fileName = standardDetailPicturePath.split('/').pop();\n                    arFields['DETAIL_PICTURE'] = {\n                        \"fileData\": [\n                            fileName,\n                            base64Encode(fileGetContents(standardDetailPicturePath))\n                        ]\n                    };\n                }\n            }\n        }\n    );\n\n    function fileExists(filePath) {\n        // Implement file existence check\n    }\n\n    function fileGetContents(filePath) {\n        // Implement file get contents\n    }\n\n    function base64Encode(data) {\n        // Implement base64 encoding\n    }\n\n    // delete old files\n    let arPropsFile = [\n        'PREVIEW_PICTURE',\n        'DETAIL_PICTURE',\n    ];\n    if (propertyIDFile > 0) {\n        arPropsFile.push('PROPERTY_' + propertyIDFile);\n    }\n    if (propertyIDMultiFile > 0) {\n        arPropsFile.push('PROPERTY_' + propertyIDMultiFile);\n    }\n    arPropsFile.forEach(function(prop) {\n        if (!arFields[prop]) { // if property does not change file don't delete old file\n            return;\n        }\n\n        if (arProduct[prop] && arProduct[prop].id) { // for standard fields PREVIEW_PICTURE and DETAIL_PICTURE\n            arFields[prop].push({\n                'id': arProduct[prop].id,\n                'remove': 'Y'\n            });\n        } else if (arProduct[prop] && arProduct[prop].value && arProduct[prop].value.id) { // for property type file\n            arFields[prop].push({\n                'valueId': arProduct[prop].valueId,\n                'value': {\n                    'id': arProduct[prop].value.id,\n                    'remove': 'Y'\n                }\n            });\n        } else if (!arProduct[prop].value && Array.isArray(arProduct[prop])) { // for property type multiple file\n            arProduct[prop].forEach(function(file) {\n                if (file.value && file.value.id) {\n                    arFields[prop].push({\n                        'valueId': file.valueId,\n                        'value': {\n                            'id': file.value.id,\n                            'remove': 'Y'\n                        }\n                    });\n                }\n            });\n        }\n    });\n\n    BX24.callMethod(\n        'crm.product.update',\n        {\n            'id': idProduct,\n            'fields': arFields\n        },\n        function(result) {\n            if (result.error()) {\n                console.error(result.error());\n            } else {\n                console.dir(result.data());\n            }\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Fetching CRM Requisite Link using JavaScript\nDESCRIPTION: This JavaScript snippet uses the BX24 API to call the 'crm.requisite.link.get' method to fetch the connection between the CRM requisite and an entity. The method requires entityTypeId and entityId and handles the response through a callback function to process results or errors.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/links/crm-requisite-link-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    \"crm.requisite.link.get\", {\n        entityTypeId: 31,        // Идентификатор типа (Счёт)\n        entityId: 315,             // Идентификатор счёта\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Receiving Data for CRM Deal List Toolbar\nDESCRIPTION: This code snippet illustrates the data structure received by the handler when a widget is placed in the CRM deal list toolbar. It includes information such as domain, protocol, language, application ID, authentication details, member ID, status, and placement code. This data is sent as a POST request.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/widgets/crm/list-toolbar.md#2025-04-20_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n\"Array\\n(\\n    [DOMAIN] => xxx.bitrix24.com\\n    [PROTOCOL] => 1\\n    [LANG] => com\\n    [APP_SID] => 55fb79c4a1bb3645c8bf3b5f0cfca12f\\n    [AUTH_ID] => 31f29f6600631fcd00005a4b00000001f0f10781afcd4e67da98de2c0c3ba491e6d6f5\\n    [AUTH_EXPIRES] => 3600\\n    [REFRESH_ID] => 2171c76600631fcd00005a4b00000001f0f10731ca47c52d032bf3568e3f94c3d9750a\\n    [member_id] => da45a03b265edd8787f8a258d793cc5d\\n    [status] => L\\n    [PLACEMENT] => CRM_DEAL_LIST_TOOLBAR\\n)\\n\"\n```\n\n----------------------------------------\n\nTITLE: Reset Personal Configuration using cURL OAuth\nDESCRIPTION: This snippet demonstrates how to reset the personal configuration for contact details using a cURL request with OAuth in Bitrix24. It sends a POST request to the specified endpoint with the `scope` parameter set to \"P\", a specific `userId`, and includes the OAuth `auth` token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-reset.md#2025-04-20_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"scope\":\"P\",\"userId\":6,\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.details.configuration.reset\n```\n\n----------------------------------------\n\nTITLE: Add Contact Company using cURL (Webhook)\nDESCRIPTION: This cURL command demonstrates how to add a company to a contact using a webhook in Bitrix24. It sends a POST request with the contact ID, company ID, and other optional fields in JSON format to the specified webhook URL.  Replace placeholders for Bitrix24 address, user ID, and webhook.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/company/crm-contact-company-add.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":54,\"fields\":{\"COMPANY_ID\":32,\"IS_PRIMARY\":\"Y\",\"SORT\":1000}}' \\\n    https://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.company.add\n```\n\n----------------------------------------\n\nTITLE: Executing REST API Request with Curl (Access Token)\nDESCRIPTION: This snippet demonstrates how to make a REST API call to Bitrix24 using curl with an OAuth 2.0 access token. It sets the Content-Type header to application/json and includes the access token in the auth parameter. The curl command creates a new deal with the specified fields.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/how-to-use-examples.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-d '{\n\"fields\": {\n\"title\": \"New Deal\",\n\"typeId\": \"SALE\",\n\"stageId\": \"NEW\"\n},\nauth=YOUR_ACCESS_TOKEN\n}' \\\nhttps://your-domain.bitrix24.com/rest/crm.deal.add.json\n```\n\n----------------------------------------\n\nTITLE: Get Contact User Field via cURL (Webhook)\nDESCRIPTION: This snippet shows how to retrieve a contact user field using cURL with a webhook. It sends a POST request to the Bitrix24 REST API endpoint, specifying the ID of the user field to retrieve. Replace placeholders for your Bitrix24 address, user ID, and webhook key.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-get.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"id\":399}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/crm.contact.userfield.get\n```\n\n----------------------------------------\n\nTITLE: Updating Contact User Field via PHP (CRest)\nDESCRIPTION: This snippet demonstrates updating a contact user field using the `CRest::call` function in PHP. It requires the `crest.php` library. It includes setting various field properties such as mandatory, filter, settings, sort, and labels. The function calls the `crm.contact.userfield.update` method in the Bitrix24 REST API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-update.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.userfield.update',\n    [\n        'id' => 536,\n        'fields' => [\n            'MANDATORY' => \"N\",\n            'SHOW_FILTER' => \"N\",\n            'SETTINGS' => [\n                'DEFAULT_VALUE' => \"Привет, мир! Значение по умолчанию (изменено)\",\n                'ROWS' => 10,\n            ],\n            'SORT' => 2000,\n            'EDIT_IN_LIST' => \"N\",\n            'LIST_FILTER_LABEL' => \"Привет, мир! Фильтр (изменено)\",\n            'LIST_COLUMN_LABEL' => [\n                'en' => \"Hello, World! Column (changed)\",\n                'ru' => \"Привет, мир! Колонка (изменено)\",\n                'de' => \"Hallo, Welt! Spalte (geändert)\"\n            ],\n            'EDIT_FORM_LABEL' => [\n                'en' => \"Hello, World! Edit (changed)\",\n                'ru' => \"Привет, мир! Редактировать (изменено)\",\n                'de' => \"Hallo, Welt! Bearbeiten (geändert)\"\n            ],\n            'ERROR_MESSAGE' => [\n                'en' => \"Hello, World! Error (changed)\",\n                'ru' => \"Привет, мир! Ошибка (изменено)\",\n                'de' => \"Hallo, Welt! Fehler (geändert)\"\n            ],\n            'HELP_MESSAGE' => [\n                'en' => \"Hello, World! Help (changed)\",\n                'ru' => \"Привет, мир! Помощь (изменено)\",\n                'de' => \"Hallo, Welt! Hilfe (geändert)\"\n            ]\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Defining Delivery Service Configuration\nDESCRIPTION: Specifies the structure and properties of delivery services, including service identification, configuration settings, and parent service details\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/delivery/webhooks/_includes/tables.md#2025-04-20_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n### DELIVERY_SERVICE\n\n#|\n|| **Название**\n`тип` | **Описание** ||\n```\n\n----------------------------------------\n\nTITLE: OnOrderDeleted Event Data Structure\nDESCRIPTION: This snippet shows the data structure passed to the `OnOrderDeleted` event handler as a POST request. It includes the event name, handler ID, data (containing the order ID), timestamp, and authentication information. The handler receives this data when a Bitrix24 order is deleted.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/events/on-order-deleted.md#2025-04-20_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n[\t\n    'event' => 'ONORDERDELETED',\n    'event_handler_id' => 1,\n    'data' => [\n        'FIELDS' => [\n            'ID' => 300,\n        ],\n    ],\n    'ts' => 1714649632,\n    'auth' => [\n        'access_token' => 's6p6eclrvim6da22ft9ch94ekreb52lv',\n        'expires_in' => 3600,\n        'scope' => 'sale',\n        'domain' => 'some-domain.bitrix24.com',\n        'server_endpoint' => 'https://oauth.bitrix.info/rest/',\n        'status' => 'F',\n        'client_endpoint' => 'https://some-domain.bitrix24.com/rest/',\n        'member_id' => 'a223c6b3710f85df22e9377d6c4f7553',\n        'refresh_token' => '4s386p3q0tr8dy89xvmt96234v3dljg8',\n        'application_token' => '51856fefc120afa4b628cc82d3935cce',\n    ],\n]\n```\n\n----------------------------------------\n\nTITLE: Executing Batch Request with HTTP GET using OAuth in Bash\nDESCRIPTION: Example of sending a batch request using HTTP GET with OAuth authentication. The request includes two commands: getting current user and retrieving department information. Note that parameters are URL-encoded.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/how-to-call-rest-api/batch.md#2025-04-20_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nhttps://**put_your_bitrix24_address**/rest/batch?auth=d161f25928c3184678924ec127edd29a&halt=0&cmd[get_user]=user.current%3F&cmd[get_department]=department.get%3FID%3D%2524result%255Bget_user%255D%255BUF_DEPARTMENT%255D\n```\n\n----------------------------------------\n\nTITLE: Generating Boolean (Checkbox) Input Field\nDESCRIPTION: This code generates a boolean checkbox input field. Similar to the 'char' type, if the value is 'Y', the checkbox is set as checked. The input's properties include name, required status, disabled status, multiplicity, value (set to '1'), and the checked status, with the input type set to 'checkbox'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_8\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'boolean':\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => '1',\n                    'CHECKED' => ($value == 'Y') ? true : false,\n                    'TYPE' => 'checkbox',\n                ]\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Generating Double (Number) Input Field\nDESCRIPTION: This code generates a number input field for double values. The input field's attributes, such as name, requirement status, disabled status, multiplicity, and value, are set from the `$arField` array. The input type is explicitly set to 'number'.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/tutorials/crm/how-to-edit-crm-objects/how-to-generate-edit-form-for-deal.md#2025-04-20_snippet_9\n\nLANGUAGE: PHP\nCODE:\n```\n        case 'double':\n            $return = CPrintForm::input(\n                [\n                    'NAME' => 'form[' . $key . ']',\n                    'REQUIRED' => $arField['isRequired'],\n                    'DISABLE' => $arField['isReadOnly'],\n                    'MULTIPLE' => $arField['isMultiple'],\n                    'VALUE' => $value,\n                    'TYPE' => 'number'\n                ]\n            );\n            break;\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Authorization Provider Class in PHP\nDESCRIPTION: Main authorization provider class that extends Bitrix\\Rest\\OAuth\\Provider and implements AuthProviderInterface. Handles token generation, validation and storage for custom authorization flow.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/cloud-and-on-premise/on-premise/custom-auth-provider.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nnamespace Demo\\AuthProvider;\nuse Bitrix\\Main\\Context;\nuse Bitrix\\Main\\NotImplementedException;\nuse Bitrix\\Main\\ObjectNotFoundException;\nuse Bitrix\\Main\\Security\\Random;\nuse Bitrix\\Rest\\Application;\nuse Bitrix\\Rest\\AppTable;\nuse Bitrix\\Rest\\AuthProviderInterface;\nuse Bitrix\\Rest\\OAuth\\Provider;\nuse Bitrix\\Rest\\RestException;\nclass AuthProvider extends Provider implements AuthProviderInterface\n{\n    const TOKEN_TTL = 3600;\n    const TOKEN_PREFIX = 'demo.';\n    protected $applicationList = array();\n    protected static $instance = null;\n    protected $storage;\n    public static function instance()\n    {\n        if(static::$instance === null)\n        {\n            static::$instance = new static();\n        }\n        return static::$instance;\n    }\n    public static function onApplicationManagerInitialize()\n    {\n        Application::setAuthProvider(static::instance());\n    }\n    public function get($clientId, $scope, $additionalParams, $userId)\n    {\n        if(!$this->checkClient($clientId))\n        {\n            return parent::get($clientId, $scope, $additionalParams, $userId);\n        }\n        if($userId > 0)\n        {\n            $applicationData = AppTable::getByClientId($clientId);\n            if($applicationData)\n            {\n                $authResult = array(\n                    'access_token' => $this->generateToken(),\n                    'user_id' => $userId,\n                    'client_id' => $clientId,\n                    'expires' => time() + static::TOKEN_TTL,\n                    'expires_in' => static::TOKEN_TTL,\n                    'scope' => $applicationData['SCOPE'],\n                    'domain' => Context::getCurrent()->getServer()->getHttpHost(),\n                    'status' => AppTable::STATUS_LOCAL,\n                    'client_endpoint' => \\CRestUtil::getEndpoint(),\n                    'member_id' => \\CRestUtil::getMemberId(),\n                );\n                $this->store($authResult);\n                return $authResult;\n            }\n            else\n            {\n                $authResult = array('error' => RestException::ERROR_OAUTH, 'Application not installed');\n            }\n            return $authResult;\n        }\n        return false;\n    }\n    public function authorizeClient($clientId, $userId, $state = '')\n    {\n        if(!$this->checkClient($clientId))\n        {\n            return parent::authorizeClient($clientId, $userId, $state);\n        }\n        throw new NotImplementedException('Full OAuth authorization is not implemented in this demo');\n    }\n    public function checkClient($clientId)\n    {\n        return in_array($clientId, $this->applicationList);\n    }\n    protected function store(array $authResult)\n    {\n        $this->getStorage()->store($authResult);\n    }\n    public function checkToken($token)\n    {\n        return substr($token, 0, strlen(static::TOKEN_PREFIX)) === static::TOKEN_PREFIX;\n    }\n    protected function generateToken()\n    {\n        return static::TOKEN_PREFIX.Random::getString(32);\n    }\n    public function getStorage()\n    {\n        if($this->storage === null)\n        {\n            throw new ObjectNotFoundException('No token storage set. Use '.__CLASS__.'::instance()->setStorage().');\n        }\n        return $this->storage;\n    }\n    public function setStorage(AuthStorageInterface $storage)\n    {\n        $this->storage = $storage;\n        return $this;\n    }\n    public function addApplication($clientId)\n    {\n        $this->applicationList[] = $clientId;\n        return $this;\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response (Example 1)\nDESCRIPTION: This JSON snippet represents a successful response from the `crm.requisite.list` method when querying by `PRESET_ID`. It shows a list of requisites with their entity type, ID, and name, along with the total number of records and execution time information.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/universal/crm-requisite-list.md#2025-04-20_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"result\": [\n        {\n        \"ENTITY_TYPE_ID\": \"4\",\n        \"ENTITY_ID\": \"3027\",\n        \"ID\": \"40\",\n        \"NAME\": \"Организация\"\n        },\n        {\n        \"ENTITY_TYPE_ID\": \"4\",\n        \"ENTITY_ID\": \"3028\",\n        \"ID\": \"41\",\n        \"NAME\": \"Реквизиты головного офиса\"\n        },\n        {\n        \"ENTITY_TYPE_ID\": \"4\",\n        \"ENTITY_ID\": \"3028\",\n        \"ID\": \"42\",\n        \"NAME\": \"Филиал в г. Черняховск\"\n        }\n    ],\n    \"total\": 3,\n    \"time\": {\n        \"start\": 1717150154.197056,\n        \"finish\": 1717150154.505106,\n        \"duration\": 0.30804991722106934,\n        \"processing\": 0.030454158782958984,\n        \"date_start\": \"2024-05-31T12:09:14+02:00\",\n        \"date_finish\": \"2024-05-31T12:09:14+02:00\",\n        \"operating\": 0\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Lead with JavaScript in Bitrix24\nDESCRIPTION: Example of how to retrieve a CRM lead with ID 250 using JavaScript and the BX24 API. The code sends the request and handles both success and error responses.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/crm-item-get.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.item.get',\n    {\n        entityTypeId: 1,\n        id: 250,\n        useOriginalUfNames: 'N',\n    },\n    (result) => {\n        if (result.error())\n        {\n            console.error(result.error());\n\n            return;\n        }\n\n        console.info(result.data());\n    },\n);\n```\n\n----------------------------------------\n\nTITLE: Creating and Managing CRM Activities in Bitrix24 with PHP and JavaScript\nDESCRIPTION: A complete example of an application that creates, updates, and deletes CRM activities with the special REST_APP provider type. The application demonstrates selecting a CRM entity, adding a new activity, updating an existing activity, and deleting an activity using the Bitrix24 JavaScript SDK.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/activities/app-embedding/activity-app.md#2025-04-20_snippet_0\n\nLANGUAGE: php\nCODE:\n```\n<?php\nheader('Content-Type: text/html; charset=UTF-8');\n?>\n<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"UTF-8\">\n    <title></title>\n    <style type=\"text/css\">\n\n    </style>\n</head>\n<body style=\"display: none\">\n<script src=\"//api.bitrix24.com/api/v1/\"></script>\n\n<?if (isset($_POST['PLACEMENT']) && !empty($_POST['PLACEMENT_OPTIONS'])):\n    $opt = json_decode($_POST['PLACEMENT_OPTIONS'], true);\n?>\n<p>Activity ID: <?= (int)$opt['activity_id']?></p>\n<button onclick=\"updateActivity(<?= (int)$opt['activity_id']?>);\">Update activity (set new description + completed)</button>\n<p><button onclick=\"deleteActivity(<?= (int)$opt['activity_id']?>);\">Delete activity</button>\n<?else:?>\n<button onclick=\"selectCRMEntity();\">Select LEAD</button>\n<span id=\"selected-entity\"></span>\n<p>\n<button onclick=\"addActivity();\">Add activity</button>\n<?endif;?>\n<script type=\"text/javascript\">\n    BX24.init(function()\n    {\n        document.body.style.display = '';\n    });\n\n    var selectedEntityId = null;\n\n    function addActivity()\n    {\n\n        if (!selectedEntityId)\n        {\n            alert('Lead not selected');\n            return;\n        }\n        BX24.callMethod(\n            'crm.activity.add',\n            {\n                fields:\n                    {\n                        \"OWNER_TYPE_ID\": 1,\n                        \"OWNER_ID\": selectedEntityId,\n                        \"PROVIDER_ID\": 'REST_APP',\n                        \"PROVIDER_TYPE_ID\": 'LINK',\n                        \"SUBJECT\": \"Новое дело\",\n                        \"COMPLETED\": \"N\",\n                        \"RESPONSIBLE_ID\": 1,\n                        \"DESCRIPTION\": \"Описание нового дела\"\n                    }\n            },\n            function(result)\n            {\n                if(result.error())\n                    alert(\"Error: \" + result.error());\n                else\n                {\n                    alert(\"Success: \" + result.data());\n                }\n            }\n        );\n    }\n    function updateActivity(id)\n    {\n        BX24.callMethod(\n            'crm.activity.update',\n            {\n                id: id,\n                fields:\n                    {\n                        COMPLETED: 'Y',\n                        SUBJECT: \"Дело выполнено!\",\n                        DESCRIPTION: \"Описание нового дела (выполнено)\"\n                    }\n            },\n            function(result)\n            {\n                if(result.error())\n                    alert(\"Error: \" + result.error());\n                else\n                {\n                    alert(\"Success: \" + result.data());\n                }\n            }\n        );\n    }\n\n    function deleteActivity(id)\n    {\n        BX24.callMethod(\n            'crm.activity.delete',\n            {\n                id: id\n            },\n            function(result)\n            {\n                if(result.error())\n                    alert(\"Error: \" + result.error());\n                else\n                {\n                    alert(\"Success: \" + result.data());\n                }\n            }\n        );\n    }\n\n    function selectCRMEntity()\n    {\n        document.getElementById('selected-entity').textContent = '';\n        BX24.selectCRM({\n            entityType: ['lead']\n        }, function(selected)\n        {\n            if (selected['lead'] && selected['lead'][0])\n            {\n                document.getElementById('selected-entity').textContent = selected['lead'][0]['title'];\n                var    id = selected['lead'][0]['id'];\n\n                selectedEntityId = id.substring(2);\n\n                console.log(selectedEntityId);\n            }\n        })\n    }\n</script>\n</body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Querying Basket Properties Fields with PHP\nDESCRIPTION: This PHP code uses the `crest.php` library to call the `sale.basketproperties.getFields` method.  It then prints the result of the call using `print_r` within `<PRE>` tags for better formatting. It requires the `crest.php` library for Bitrix24 REST API interaction.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/basket-properties/sale-basket-properties-get-fields.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n    $result = CRest::call(\n        'sale.basketproperties.getFields',\n        []\n    );\n\n    echo '<PRE>';\n    print_r($result);\n    echo '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Activating Task Flow using PHP\nDESCRIPTION: This snippet shows how to activate or deactivate a task flow using PHP with the Bitrix24 REST API. It uses the CRest PHP SDK to send a request with the flow ID and handles the response, including error handling.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-activate.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php'); // подключение CRest PHP SDK\n\n$flowId = 517;\n\n// выполнение запроса к REST API\n$result = CRest::call(\n    'tasks.flow.Flow.activate',\n    [\n        'flowId' => $flowId\n    ]\n);\n\n// Обработка ответа от Битрикс24\nif ($result['error']) {\n    echo 'Error: '.$result['error_description'];\n} else {\n    print_r($result['result']);\n}\n```\n\n----------------------------------------\n\nTITLE: Update Bank Detail via cURL (OAuth)\nDESCRIPTION: This cURL example shows how to update a bank detail using OAuth authentication.  Similar to the webhook example, it sends a JSON payload with the ID and fields to update, but includes an 'auth' parameter with the access token.  Replace placeholders for the Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/bank-detail/crm-requisite-bank-detail-update.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n    -H \"Content-Type: application/json\" \\\n    -H \"Accept: application/json\" \\\n    -d '{\"id\":357,\"fields\":{\"NAME\":\"ПАО Супербанк (не использовать)\",\"COMMENTS\":\"Устаревший\",\"SORT\":10000,\"ACTIVE\":\"N\"},\"auth\":\"**put_access_token_here**\"}' \\\n    https://**put_your_bitrix24_address**/rest/crm.requisite.bankdetail.update\n```\n\n----------------------------------------\n\nTITLE: Deleting a custom field from a preset using JavaScript\nDESCRIPTION: This JavaScript code demonstrates how to delete a custom field from a preset using the BX24.callMethod function. It passes the method name and the parameters as an object to the function. It also includes a callback function to handle the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/requisites/presets/fields/crm-requisite-preset-field-delete.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n        \"crm.requisite.preset.field.delete\",\n        {\n            ID: 27,        // Идентификатор настраиваемого поля, которое нужно удалить из шаблона\n            preset:\n            {\n                \"ID\": 1    // Идентификатор шаблона реквизитов\n            }\n        },\n        function(result)\n        {\n            if(result.error())\n                console.error(result.error());\n            else\n                console.dir(result.data());\n        }\n    );\n```\n\n----------------------------------------\n\nTITLE: Update Payment Item Binding with JavaScript\nDESCRIPTION: This JavaScript code uses the BX24.callMethod function to update a payment item binding. It calls the `sale.paymentitembasket.update` method with the item's ID and the fields to be updated (quantity and XML ID).  It includes error handling and displays the result in the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/payment-item-basket/sale-payment-item-basket-update.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'sale.paymentitembasket.update', {\n        id: 1186,\n        fields: {\n            quantity: 1,\n            xmlId: 'myNewXmlId',\n        }\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.info(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Timeline Log Messages with JavaScript\nDESCRIPTION: Example of retrieving CRM timeline log messages using Bitrix24's JavaScript SDK. The request includes entity type and ID, ordering by creation date, and pagination parameters.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/crm-timeline-logmessage-list.md#2025-04-20_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nBX24.callMethod(\n    \"crm.timeline.logmessage.list\",\n    {\n        entityTypeId: 1,\n        entityId: 1,\n        order: { created: \"desc\" },\n        start: 1,\n    },\n    result => {\n        if (result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Successful Merge Response JSON Structure\nDESCRIPTION: JSON response format representing the result of a batch entity merge operation with possible statuses and merged entity IDs\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/duplicates/crm-entity-merge-batch.md#2025-04-20_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"STATUS\": \"SUCCESS\",\n    \"ENTITY_IDS\": [\n        \"1\"\n    ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving CRM Quote Product Rows with Bitrix24 JS API\nDESCRIPTION: A JavaScript example demonstrating how to fetch product rows for a quote using BX24.callMethod(). Prompts user for quote ID and handles success/error scenarios.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/quote/crm-quote-product-rows-get.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar id = prompt(\"Введите ID\");\nBX24.callMethod(\n    \"crm.quote.productrows.get\",\n    { id: id },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.dir(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating User Field in Bitrix24 with PHP\nDESCRIPTION: This PHP snippet utilizes the Bitrix24 REST API to add a user-defined field of type list. It establishes a connection with the API, specifies the necessary field parameters, and prints the result of the operation.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n<?php\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.contact.userfield.add',\n    [\n        'fields' => [\n            'LABEL' => \"Пользовательское поле (список)\",\n            'USER_TYPE_ID' => \"enumeration\",\n            'FIELD_NAME' => \"ENUMERATION_EXAMPLE\",\n            'MULTIPLE' => \"N\",\n            'MANDATORY' => \"N\",\n            'SHOW_FILTER' => \"Y\",\n            'LIST' => [\n                [\n                    'VALUE' => \"Элемент списка #1\",\n                    'DEF' => \"Y\",\n                    'XML_ID' => \"XML_ID_1\",\n                    'SORT' => 100,\n                ],\n                [\n                    'VALUE' => \"Элемент списка #2\",\n                    'XML_ID' => \"XML_ID_2\",\n                    'SORT' => 200,\n                ],\n                [\n                    'VALUE' => \"Элемент списка #3\",\n                    'XML_ID' => \"XML_ID_3\",\n                    'SORT' => 300,\n                ],\n                [\n                    'VALUE' => \"Элемент списка #4\",\n                    'XML_ID' => \"XML_ID_4\",\n                    'SORT' => 400,\n                ],\n            ],\n            'SETTINGS' => [\n                'DISPLAY' => \"UI\",\n                'LIST_HEIGHT' => 2,\n            ],\n            'SORT' => 2000,\n        ]\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n?>\n```\n\n----------------------------------------\n\nTITLE: Call crm.status.get HTTP\nDESCRIPTION: Shows how to form request to Bitrix24 REST to call method crm.status.get with the parameter id.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/status/crm-status-get.md#2025-04-20_snippet_1\n\nLANGUAGE: http\nCODE:\n```\ncrm.status.get(id)\n```\n\n----------------------------------------\n\nTITLE: Handling API Error Response in JSON\nDESCRIPTION: Example of a standard 400 error response with error details in Bitrix24 REST API\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-get.md#2025-04-20_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"ID is not defined or invalid.\"\n}\n```\n\n----------------------------------------\n\nTITLE: Установка имени чата через cURL (Webhook) в Bitrix24 REST API\nDESCRIPTION: Пример использования метода imconnector.chat.name.set через cURL с использованием webhook. Устанавливает новое имя для указанного чата в коннекторе.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/imopenlines/imconnector/imconnector-chat-name-set.md#2025-04-20_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"CONNECTOR\":\"connector\",\"LINE\":\"105\",\"CHAT_ID\":\"47e007b1-ee15-43db-bcba-1c26e5884d3f\",\"NAME\":\"Новое имя диалога\"}' \\\nhttps://**put_your_bitrix24_address**/rest/**put_your_user_id_here**/**put_your_webbhook_here**/imconnector.chat.name.set\n```\n\n----------------------------------------\n\nTITLE: Handling Error Response from Bitrix24\nDESCRIPTION: This JSON structure illustrates the error response format for invalid input when creating a user-defined field in Bitrix24, providing an error message and description.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/userfield/crm-contact-userfield-add.md#2025-04-20_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"\",\n    \"error_description\": \"The 'USER_TYPE_ID' field is not found.\"\n}\n```\n\n----------------------------------------\n\nTITLE: CRM Item Details Configuration REST Methods\nDESCRIPTION: REST API methods for managing CRM item card configurations, including setting common scopes, retrieving, resetting, and configuring item details with entity type ID 31\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/invoice.md#2025-04-20_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\ncrm.item.details.configuration.forceCommonScopeForAll\ncrm.item.details.configuration.get\ncrm.item.details.configuration.reset\ncrm.item.details.configuration.set\n```\n\n----------------------------------------\n\nTITLE: Force Common Scope with cURL (OAuth)\nDESCRIPTION: This snippet demonstrates how to use cURL with OAuth to call the `crm.contact.details.configuration.forceCommonScopeForAll` method. It sends a JSON payload containing the access token to the Bitrix24 REST endpoint. Replace placeholders for Bitrix24 address and access token.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/contacts/custom-form/crm-contact-details-configuration-force-common-scope-for-all.md#2025-04-20_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n-H \"Content-Type: application/json\" \\\n-H \"Accept: application/json\" \\\n-d '{\"auth\":\"**put_access_token_here**\"}' \\\nhttps://**put_your_bitrix24_address**/rest/crm.contact.details.configuration.forceCommonScopeForAll\n```\n\n----------------------------------------\n\nTITLE: Querying Leads with Bitrix24 JavaScript API\nDESCRIPTION: This JavaScript code snippet demonstrates how to retrieve a list of leads using the Bitrix24 JavaScript API (`BX24.callMethod`).  It specifies the selection fields, start position, filter criteria, and ordering. The code includes an error handling mechanism and logs the retrieved data to the console.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/leads/crm-lead-list.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n      'crm.lead.list',\n      {\n        select: ['*', 'UF_*'],\n        start: 50,\n        filter: {\n            '=OPPORTUNITY': 15000,\n        },\n        order: {\n            STATUS_ID: 'ASC',\n        }, \n      },\n      (result) => {\n        if(result.error())\n        {\n          console.error(result.error());\n  \n          return;\n        }\n        \n        console.info(result.data());\n      }\n    );\n```\n\n----------------------------------------\n\nTITLE: Retrieving Order Source Fields using JavaScript in Bitrix24\nDESCRIPTION: This JavaScript example shows how to call the sale.tradePlatform.getFields method using the BX24 library. It handles both success and error responses from the API.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/sale/trade-platform/sale-trade-platform-get-fields.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'sale.tradePlatform.getFields',\n    {},\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Adding CRM Payment with JavaScript\nDESCRIPTION: This snippet demonstrates how to create a CRM payment using the Bitrix24 JavaScript API. It calls the `crm.item.payment.add` method with the `entityId` and `entityTypeId` parameters. The callback function handles the result, logging any errors to the console or the data if successful.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/universal/payment/crm-item-payment-add.md#2025-04-20_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'crm.item.payment.add', {\n        entityId: 13123,\n        entityTypeId: 2\n    },\n    function(result) {\n        if (result.error()) {\n            console.error(result.error());\n        } else {\n            console.log(result.data());\n        }\n    }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating a New Flow using PHP\nDESCRIPTION: This snippet shows how to create a new flow using the Bitrix24 PHP SDK. It includes error handling and printing of the response data.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/tasks/flow/tasks-flow-flow-create.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php'); // подключение CRest PHP SDK\n\n$flowData = [\n    \"name\" => \"Unique Flow Name\",\n    \"description\" => \"Описание потока\",\n    \"plannedCompletionTime\" => 7200,\n    \"distributionType\" => \"manually\",\n    \"responsibleList\" => [[\"user\", \"3\"]],\n    \"taskCreators\" => [[\"meta-user\", \"all-users\"]],\n    \"matchWorkTime\" => 1,\n    \"notifyAtHalfTime\" => 0\n];\n\n// выполнение запроса к REST API\n$result = CRest::call(\n    'tasks.flow.Flow.create',\n    [\n        'flowData' => $flowData\n    ]\n);\n\n// Обработка ответа от Битрикс24\nif ($result['error']) {\n    echo 'Error: '.$result['error_description'];\n} else {\n    print_r($result['result']);\n}\n```\n\n----------------------------------------\n\nTITLE: Deleting CRM Timeline Icon with PHP SDK\nDESCRIPTION: This code snippet demonstrates how to delete a CRM timeline icon using the Bitrix24 PHP SDK. It requires the crest.php library and calls the crm.timeline.icon.delete method with the icon code parameter, then displays the result.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/crm/timeline/logmessage/icons/crm-timeline-icon-delete.md#2025-04-20_snippet_3\n\nLANGUAGE: php\nCODE:\n```\nrequire_once('crest.php');\n\n$result = CRest::call(\n    'crm.timeline.icon.delete',\n    [\n        'code' => 'info'\n    ]\n);\n\necho '<PRE>';\nprint_r($result);\necho '</PRE>';\n```\n\n----------------------------------------\n\nTITLE: Updating Catalog Service Product with JavaScript in Bitrix24 REST API\nDESCRIPTION: This snippet shows how to update a service product in the Bitrix24 catalog using JavaScript. It includes setting various product fields like name, active status, dates, pictures, and custom properties.\nSOURCE: https://github.com/bitrix-tools/b24-rest-docs/blob/main/api-reference/catalog/product/service/catalog-product-service-update.md#2025-04-20_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nBX24.callMethod(\n    'catalog.product.service.update',\n    {\n        id: 1265,\n        fields: {\n            name: 'Услуга',\n            active: 'Y',\n            code: 'service',\n            createdBy: 1,\n            dateActiveFrom: '2024-05-28T10:00:00',\n            dateActiveTo: '2024-05-29T10:00:00',\n            dateCreate: '2024-05-27T10:00:00',\n            detailPicture: {\n                'fileData':['detailPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            },\n            detailText: '',\n            detailTextType: 'text',\n            iblockSectionId: 47,\n            modifiedBy: 1,\n            previewPicture: {\n                'fileData':['previewPicture.png', 'iVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BMVEX37ff/­///58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7EAAAOxAGV­Kw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCocSfQFGKP3­+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA/q2TwrXZ­ib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt3qSQtwdJ­Ssku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+28tICq4rT­qXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQEFhV3CCN­Tph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKrihqje7Y9­iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guvayybW1i3­Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWtJSyP21r+­FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0hPtw86hMX­99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xfAAAAAElF­TkSuQmCCiVBORw0KGgoAAAANSUhEUgAAAMgAAADIBAMAAABfdrOtAAAAG1BM­VEX37ff////58fn9+v3+/P779vv8+Pz47/j68/oDfe+3AAAACXBIWXMAAA7E­AAAOxAGVKw4bAAABrUlEQVR4nO3UT0/CMBjH8ccx2I56IFynkHg1SgxHHCoc­SfQFGKP3+e++xL1wn7bPUCAeKF5Mvp+EluX3ZN3ariIAAAAAAAAAAAAAAAAA­/q2TwrXZib94LTbj5GdgVbtKxhdXS+2uL270ajQbL9fz4WzcXwVWtbNeIdmt­3qSQtwdJSsku1/NHkfdVEKriHFey0G4haS3+ty4ZtEGoipMW+VS7T2m0zc+2­8tICq4rTqXtuJV7kWdvsUJtuoc1Hm08ssKo4B1Wn1i6tJu5qrj9dA8lWEzOQ­EFhV3CCNTph2naJ0V+eu0SV+ry3WWQqBVcUNsgiP16ndS4SnzuffL5LWEgKr­ihqje7Y9iDTN6mZ38geDNNX2dEm338b5XPafrmRuj/dj4fULfGoXeFTJ/guv­ayybW1i3Vl7aM7h+3y2c+y07FfeZjaT9GHVrNYXPG/fkIbCqCPf+9d1WKiWt­JSyP21r+FaTrZ8+CULW7XliCUe0PyIUdkD29qQzdv7A0FoSq3R0fqaU78d0h­Ptw86hMX99vAqqJlp757/W3vhMCqAAAAAAAAAAAAAAAAAPxbX82/SILlk9xf­AAAAAElFTkSuQmCC']\n            },\n            previewText: '',\n            previewTextType: 'text',\n            sort: 100,\n            vatId: 1,\n            vatIncluded: 'Y',\n            xmlId: '216',\n            property258: {value: 'test', valueId: 9809},\n            property259: [{value: 'test1', valueId: 9810}, {value: 'test2', valueId: 9811}],\n        },\n    },\n    function(result)\n    {\n        if(result.error())\n            console.error(result.error());\n        else\n            console.log(result.data());\n    }\n);\n```"
  }
]