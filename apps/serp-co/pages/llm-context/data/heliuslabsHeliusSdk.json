[
  {
    "owner": "helius-labs",
    "repo": "helius-sdk",
    "content": "TITLE: Getting Priority Fee Estimate in TypeScript\nDESCRIPTION: This method estimates priority fees considering both global and local fee markets. It allows specifying account keys and options for receiving all priority levels and adjusting the calculation window.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\nconst helius = new Helius('YOUR_API_KEY');\n\nconst response = await helius.rpc.getPriorityFeeEstimate({\n  accountKeys: ['JUP6LkbZbjS1jKKwapdHNy74zcZ3tLUZoi5QNyVTaV4'],\n  options: {\n    includeAllPriorityFeeLevels: true,\n  },\n});\n\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: DAS API Functions Reference - Solana Token Management\nDESCRIPTION: Core functions for managing and querying tokens, NFTs, and compressed NFTs on Solana. Includes methods for asset retrieval, searching, and ownership verification.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n- getAsset()\n- getAssetBatch()\n- getSignaturesForAsset()\n- searchAssets()\n- getAssetProof()\n- getAssetsByOwner()\n- getAssetsByGroup()\n- getAssetsByCreator()\n- getAssetsByAuthority()\n- getTokenAccounts()\n- getNftEditions()\n```\n\n----------------------------------------\n\nTITLE: Using Helius SDK to fetch assets by owner in JavaScript\nDESCRIPTION: Example of how to use the Helius SDK to retrieve assets owned by a specific address. It demonstrates importing the SDK, initializing it with an API key, and making an RPC call.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\n// Replace YOUR_API_KEY with the API key from your Helius dashboard\nconst helius = new Helius('YOUR_API_KEY');\n\nconst getAssetsByOwner = async () => {\n  const response = await helius.rpc.getAssetsByOwner({\n    ownerAddress: '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n    page: 1,\n  });\n  console.log(response.items);\n};\n\ngetAssetsByOwner();\n```\n\n----------------------------------------\n\nTITLE: Querying Owner Assets using getAssetsByOwner\nDESCRIPTION: Retrieves all assets owned by a specific wallet address, providing the fastest way to get NFTs owned by a wallet on Solana.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.getAssetsByOwner({\n  ownerAddress: '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n  page: 1,\n});\nconsole.log(response.items);\n```\n\n----------------------------------------\n\nTITLE: Querying Asset Details using getAsset\nDESCRIPTION: Retrieves detailed information about a specific asset by its ID with optional display options for collection metadata.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.getAsset({\n  id: 'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk',\n  displayOptions: {\n    showCollectionMetadata: true,\n  },\n});\nconsole.log(response.grouping?.map((g) => g.collection_metadata?.name));\n```\n\n----------------------------------------\n\nTITLE: Sending Transactions with sendTransaction Method\nDESCRIPTION: Enhanced transaction sending method that extends the standard RPC call with validator ACLs support. Provides additional transaction execution controls and options.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nsendTransaction()\n```\n\n----------------------------------------\n\nTITLE: Executing Jupiter Swap in TypeScript\nDESCRIPTION: This method executes a token swap using Jupiter Exchange with automatic transaction optimizations including priority fees, compute unit calculation, and reliable transaction confirmation.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\nimport { Keypair } from '@solana/web3.js';\n\nconst helius = new Helius('YOUR_API_KEY');\n\n// Swap SOL to USDC with transaction landing optimizations\nconst result = await helius.rpc.executeJupiterSwap({\n  inputMint: 'So11111111111111111111111111111111111111112', // SOL\n  outputMint: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v', // USDC\n  amount: 10000000, // 0.01 SOL (SOL has 9 decimals)\n  slippageBps: 50, // 0.5% slippage tolerance\n  restrictIntermediateTokens: true, // Improves pricing\n  priorityLevel: 'high', // Options: 'low', 'medium', 'high', 'very_high'\n  maxPriorityFeeLamports: 1000000, // Caps priority fee at 0.001 SOL\n  skipPreflight: true, // Skip preflight checks\n  confirmationCommitment: 'confirmed' // Wait for confirmation\n}, wallet);\n\nif (result.success && result.confirmed) {\n  console.log(`Received ${result.outputAmount} USDC, tx: ${result.signature}`);\n}\n```\n\n----------------------------------------\n\nTITLE: Smart Transaction Functions Reference\nDESCRIPTION: Functions for creating and managing optimized transactions on Solana. Includes transaction creation, compute unit calculation, and confirmation polling.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_8\n\nLANGUAGE: markdown\nCODE:\n```\n- createSmartTransaction()\n- getComputeUnits()\n- pollTransactionConfirmation()\n- sendSmartTransaction()\n```\n\n----------------------------------------\n\nTITLE: Smart Transaction Example\nDESCRIPTION: Shows how to send SOL using a smart transaction with optimized settings.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_22\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from \"helius-sdk\";\nimport {\n  Keypair,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nconst helius = new Helius(\"YOUR_API_KEY\");\n\nconst fromKeypair = /* Your keypair goes here */;\nconst fromPubkey = fromKeypair.publicKey;\nconst toPubkey = /* The person we're sending 0.5 SOL to */;\n\nconst instructions: TransactionInstruction[] = [\n  SystemProgram.transfer({\n    fromPubkey: fromPubkey,\n    toPubkey: toPubkey,\n    lamports: 0.5 * LAMPORTS_PER_SOL,\n  }),\n];\n\nconst transactionSignature = await helius.rpc.sendSmartTransaction(instructions, [fromKeypair], [], { skipPreflight: true });\nconsole.log(`Successful transfer: ${transactionSignature}`);\n```\n\n----------------------------------------\n\nTITLE: Executing Token Swaps with executeJupiterSwap Method\nDESCRIPTION: Facilitates token swaps through Jupiter Exchange with automatic optimizations including priority fee calculation, compute unit optimization, and reliable confirmation handling.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nexecuteJupiterSwap()\n```\n\n----------------------------------------\n\nTITLE: Jito Smart Transaction Functions Reference\nDESCRIPTION: Functions for handling Jito-specific smart transactions and bundles. Includes tip management and bundle status tracking.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_9\n\nLANGUAGE: markdown\nCODE:\n```\n- addTipInstruction()\n- createSmartTransactionWithTip()\n- getBundleStatuses()\n- sendJitoBundle()\n- sendSmartTransactionWithTip()\n```\n\n----------------------------------------\n\nTITLE: Compressed NFT Minting Implementation\nDESCRIPTION: Demonstrates minting a compressed NFT with metadata and optional collection authority management.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.mintCompressedNft({\n  name: 'Exodia the Forbidden One',\n  symbol: 'ETFO',\n  owner: 'OWNER_WALLET_ADDRESS',\n  description: 'Exodia the Forbidden One is a powerful, legendary creature composed of five parts: the Right Leg, Left Leg, Right Arm, Left Arm, and the Head. When all five parts are assembled, Exodia becomes an unstoppable force.',\n  attributes: [\n    {\n      trait_type: 'Type',\n      value: 'Legendary',\n    },\n    {\n      trait_type: 'Power',\n      value: 'Infinite',\n    },\n    {\n      trait_type: 'Element',\n      value: 'Dark',\n    },\n    {\n      trait_type: 'Rarity',\n      value: 'Mythical',\n    },\n  ],\n  imageUrl: 'https://cdna.artstation.com/p/assets/images/images/052/118/830/large/julie-almoneda-03.jpg?1658992401',\n  externalUrl: 'https://www.yugioh-card.com/en/',\n  sellerFeeBasisPoints: 6900,\n});\nconsole.log(response.result);\n```\n\n----------------------------------------\n\nTITLE: Sending Transaction with Validator ACLs in TypeScript\nDESCRIPTION: This method sends a transaction with support for validator ACLs (JSON-based allow/denylists). It demonstrates how to send a transaction with skip preflight and validator ACLs options.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const response = await helius.rpc.sendTransaction(transaction, {\n    validatorAcls: [SFDP_REJECTS_URL],\n    skipPreflight: true,\n  });\n} catch (error) {\n  console.error(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Smart Transaction with Tip in TypeScript\nDESCRIPTION: This method sends an optimized transaction as a bundle with a tip to be processed by Jito's Block Engine. It demonstrates sending 0.05 SOL to a given public key with a Jito tip of 100k lamports using Jito's New York API URL.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from \"helius-sdk\";\nimport {\n  Keypair,\n  SystemProgram,\n  LAMPORTS_PER_SOL,\n  TransactionInstruction,\n} from \"@solana/web3.js\";\n\nconst helius = new Helius(\"YOUR_API_KEY\");\n\nconst fromKeypair = /* Your keypair goes here */;\nconst fromPubkey = fromKeypair.publicKey;\nconst toPubkey = /* The person we're sending 0.05 SOL to */;\n\nconst instructions: TransactionInstruction[] = [\n  SystemProgram.transfer({\n    fromPubkey: fromPubkey,\n    toPubkey: toPubkey,\n    lamports: 0.05 * LAMPORTS_PER_SOL,\n  }),\n];\n\n// Call the sendSmartTransactionWithTip function\nconst bundleId = await helius.rpc.sendSmartTransactionWithTip(instructions, [keypair], address_lut, 100000, \"NY\");\nconsole.log(`Bundle sent successfully with ID: ${bundleId}`);\n```\n\n----------------------------------------\n\nTITLE: Webhook Management Functions Reference\nDESCRIPTION: Functions for creating and managing webhooks to monitor on-chain Solana events. Includes webhook creation, editing, and address management capabilities.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_7\n\nLANGUAGE: markdown\nCODE:\n```\n- createWebhook()\n- editWebhook()\n- appendAddressesToWebhook()\n- removeAddressesFromWebhook()\n- deleteWebhook()\n- getWebhookByID()\n- getAllWebhooks()\n- createCollectionWebhook()\n```\n\n----------------------------------------\n\nTITLE: Staking Transaction Creation using Helius SDK\nDESCRIPTION: Creates transactions for staking, unstaking, and withdrawing SOL using the Helius SDK.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst { serializedTx, stakeAccountPubkey } = await helius.rpc.createStakeTransaction(\n  ownerPubkey,\n  1.5 // Amount in SOL (excluding rent exemption)\n);\n\nconst serializedTx = await helius.rpc.createUnstakeTransaction(\n  ownerPubkey,\n  stakeAccountPubkey\n);\n\nconst serializedTx = await helius.rpc.createWithdrawTransaction(\n  ownerPubkey,\n  stakeAccountPubkey,\n  destinationPubkey,\n  lamportsToWithdraw\n);\n```\n\n----------------------------------------\n\nTITLE: Staking Functions Reference - Solana Staking Operations\nDESCRIPTION: Functions for managing stake accounts and delegations to the Helius validator on Solana. Includes transaction creation and account management operations.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_5\n\nLANGUAGE: markdown\nCODE:\n```\n- createStakeTransaction()\n- createUnstakeTransaction()\n- createWithdrawTransaction()\n- getStakeInstructions()\n- getUnstakeInstruction()\n- getWithdrawInstruction()\n- getWithdrawableAmount()\n- getHeliusStakeAccounts()\n```\n\n----------------------------------------\n\nTITLE: Creating Smart Transaction with Tip in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a smart transaction with a tip using the Helius SDK. It takes in instructions, signers, lookup tables, tip amount, and an optional fee payer, returning a serialized transaction and the last valid block height.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_24\n\nLANGUAGE: typescript\nCODE:\n```\nconst { serializedTransaction, lastValidBlockHeight } =\n  await this.createSmartTransactionWithTip(\n    instructions,\n    signers,\n    lookupTables,\n    tipAmount,\n    feePayer\n  );\n```\n\n----------------------------------------\n\nTITLE: Batch Asset Retrieval using getAssetBatch\nDESCRIPTION: Fetches multiple assets by their IDs in a single request, supporting up to 1000 IDs per batch.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst ids = [\n  'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk',\n  'F9Lw3ki3hJ7PF9HQXsBzoY8GyE6sPoEZZdXJBsTTD2rk',\n];\nconst helius = new Helius('your-api-key');\nconst response = await helius.rpc.getAssetBatch({\n  ids: ids,\n});\nconsole.log(response.map((x) => x.id));\n```\n\n----------------------------------------\n\nTITLE: Installing Helius SDK using npm\nDESCRIPTION: Command to install the Helius SDK package using npm package manager.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install helius-sdk\n```\n\n----------------------------------------\n\nTITLE: Adding Tip Instruction for Jito\nDESCRIPTION: Demonstrates how to add a tip instruction for Jito transactions.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_23\n\nLANGUAGE: typescript\nCODE:\n```\nconst randomTipAccount =\n  JITO_TIP_ACCOUNTS[Math.floor(Math.random() * JITO_TIP_ACCOUNTS.length)];\nconst tipAmount = 10000;\n\nhelius.rpc.addTipInstruction(\n  instructions,\n  feePayer,\n  randomTipAccount,\n  tipAmount\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Helius Webhook for NFT Listings\nDESCRIPTION: Demonstrates how to create a webhook to monitor NFT listings on Magic Eden V2 marketplace using the Helius SDK.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  // enums\n  Address,\n  TransactionType,\n\n  // lib\n  Helius,\n} from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.createWebhook({\n  accountAddresses: [Address.MAGIC_EDEN_V2],\n  transactionTypes: [TransactionType.NFT_LISTING],\n  webhookURL: 'my-webhook-handler.com/handle',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating Raw Solana Transaction Webhook\nDESCRIPTION: Shows how to create a webhook using native Solana transaction format with authentication header for enhanced security.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  // enums\n  TransactionType,\n  WebhookType,\n  Address,\n  Helius,\n} from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.createWebhook({\n  accountAddresses: [Address.MAGIC_EDEN_V2],\n  authHeader: 'some auth header',\n  webhookURL: 'my-webhook-handler.com/handle',\n  webhookType: WebhookType.RAW,\n  transactionTypes: [TransactionType.ANY],\n});\n```\n\n----------------------------------------\n\nTITLE: Estimating Priority Fees with getPriorityFeeEstimate Method\nDESCRIPTION: Calculates estimated priority fees based on predefined priority level percentiles. Helps optimize transaction execution by suggesting appropriate fee levels.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetPriorityFeeEstimate()\n```\n\n----------------------------------------\n\nTITLE: Asset Search Implementation using searchAssets\nDESCRIPTION: Searches for assets using various parameters like owner address and compression status.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.searchAssets({\n  ownerAddress: '2k5AXX4guW9XwRQ1AKCpAuUqgWDpQpwFfpVFh3hnm2Ha',\n  compressed: true,\n  page: 1,\n});\nconsole.log(response.items);\n```\n\n----------------------------------------\n\nTITLE: Creator Asset Lookup using getAssetsByCreator\nDESCRIPTION: Retrieves assets created by a specific address with optional verification filter.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.getAssetsByCreator({\n  creatorAddress: 'D3XrkNZz6wx6cofot7Zohsf2KSsu2ArngNk8VqU9cTY3',\n  onlyVerified: true,\n  page: 1,\n});\nconsole.log(response.items);\n```\n\n----------------------------------------\n\nTITLE: Removing Addresses from Webhook\nDESCRIPTION: Demonstrates how to remove specific addresses from a webhook's monitoring list.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius, Address } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.removeAddressesFromWebhook('your-webhook-id-here', [\n  Address.SQUADS,\n  Address.JUPITER_V3,\n]);\n```\n\n----------------------------------------\n\nTITLE: Token Account Information Retrieval using getTokenAccounts\nDESCRIPTION: Gets information about token accounts for a specific mint or owner with filtering options.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst response = await helius.rpc.getTokenAccounts({\n  page: 1,\n  limit: 100,\n  options: {\n    showZeroBalance: false,\n  },\n  owner: 'CckxW6C1CjsxYcXSiDbk7NYfPLhfqAm3kSB5LEZunnSE',\n});\n\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Group-based Asset Retrieval using getAssetsByGroup\nDESCRIPTION: Gets assets by group key and value, useful for retrieving mint lists for NFT Collections.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.getAssetsByGroup({\n  groupKey: 'collection',\n  groupValue: 'J1S9H3QjnRtBbbuD4HjPV6RpRhwuk4zKbxsnCHuTgh9w',\n  page: 1,\n});\nconsole.log(response.items);\n```\n\n----------------------------------------\n\nTITLE: Authority-based Asset Query using getAssetsByAuthority\nDESCRIPTION: Fetches assets associated with a specific authority address.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.getAssetsByAuthority({\n  authorityAddress: '2RtGg6fsFiiF1EQzHqbd66AhW7R5bWeQGpTbv2UMkCdW',\n  page: 1,\n});\nconsole.log(response.items);\n```\n\n----------------------------------------\n\nTITLE: Querying Stake Accounts with getStakeAccounts Method\nDESCRIPTION: Method to retrieve all stake accounts associated with a given public key on Solana blockchain. Returns comprehensive stake account information and delegations.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetStakeAccounts()\n```\n\n----------------------------------------\n\nTITLE: Getting Current TPS in TypeScript\nDESCRIPTION: This helper method retrieves the current transactions per second (TPS) on the Solana network using the Helius SDK.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nconst tps = await helius.rpc.getCurrentTPS();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Token Holders with getTokenHolders Method\nDESCRIPTION: Fetches all token accounts for a specified SPL token mint address. Provides token holder information and account details. Limited to SPL tokens only.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_12\n\nLANGUAGE: JavaScript\nCODE:\n```\ngetTokenHolders()\n```\n\n----------------------------------------\n\nTITLE: Getting Block Height using Helius Connection in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Helius connection object to get the current block height on the Solana blockchain.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\n// Replace YOUR_API_KEY with the API key from your Helius dashboard\nconst helius = new Helius('YOUR_API_KEY');\n\nconst getBlockHeight = async () => {\n  const response = await helius.connection.getBlockHeight();\n  console.log(response);\n};\n\ngetBlockHeight();\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Proof using getAssetProof\nDESCRIPTION: Fetches a merkle proof for a compressed asset using its ID.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.getAssetProof({\n  id: 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss',\n});\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Airdropping SOL in TypeScript\nDESCRIPTION: This helper method airdrops SOL to a specified wallet address using the Helius SDK.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_29\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nconst response = await helius.rpc.airdrop(\n  new PublicKey('<wallet address>'),\n  1000000000\n); // 1 sol\n```\n\n----------------------------------------\n\nTITLE: Retrieving Asset Signatures using getSignaturesForAsset\nDESCRIPTION: Gets a list of transaction signatures associated with a compressed asset.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.getSignaturesForAsset({\n  id: 'Bu1DEKeawy7txbnCEJE4BU3BKLXaNAKCYcHR4XhndGss',\n  page: 1,\n});\nconsole.log(response.items);\n```\n\n----------------------------------------\n\nTITLE: Getting Token Holders in TypeScript\nDESCRIPTION: This helper method retrieves token holders for a given token mint address using the Helius SDK.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nconst response = await helius.rpc.getTokenHolders('<token mint address>');\n```\n\n----------------------------------------\n\nTITLE: Getting Stake Accounts in TypeScript\nDESCRIPTION: This helper method retrieves stake accounts for a given wallet address using the Helius SDK.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_30\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nconst response = await helius.rpc.getStakeAccounts('<wallet address>');\n```\n\n----------------------------------------\n\nTITLE: NFT Edition Information Query using getNftEditions\nDESCRIPTION: Retrieves information about edition NFTs for a specific master NFT.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\nconst response = await helius.rpc.getNftEditions({\n  mint: 'Ey2Qb8kLctbchQsMnhZs5DjY32To2QtPuXNwWvk4NosL',\n  page: 1,\n  limit: 2,\n});\n\nconsole.log(response);\n```\n\n----------------------------------------\n\nTITLE: Helper Functions Reference\nDESCRIPTION: Utility functions for common Solana operations. Includes TPS monitoring and airdrop functionality.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_10\n\nLANGUAGE: markdown\nCODE:\n```\n- getCurrentTPS()\n- airdrop()\n```\n\n----------------------------------------\n\nTITLE: Sending Jito Bundle in TypeScript\nDESCRIPTION: This method sends a bundle of transactions to the Jito Block Engine. It takes an array of serialized transactions and a Jito Block Engine API URL, returning the bundle ID as a string.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nconst jitoApiUrl = 'https://mainnet.block-engine.jito.wtf/api/v1/bundles';\nconst bundleId = helius.rpc.sendJitoBundle(\n  [serializedTransactions],\n  jitoApiUrl\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Jito Bundle Statuses in TypeScript\nDESCRIPTION: This method retrieves the status of Jito bundles. It takes an array of bundle IDs and a Jito Block Engine API URL, returning the status of the bundles.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_25\n\nLANGUAGE: typescript\nCODE:\n```\nconst bundleIds = [\n  /* Bundle IDs */\n];\nconst jitoApiUrl = 'https://mainnet.block-engine.jito.wtf/api/v1/bundles';\nconst statuses = helius.rpc.getBundleStatuses(bundleIds, jitoApiUrl);\n```\n\n----------------------------------------\n\nTITLE: Error handling with Helius SDK in TypeScript\nDESCRIPTION: Example of how to handle errors when using the Helius SDK. It shows a try-catch block to catch and log any errors that occur during an API call.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  const response = await helius.rpc.getAssetsByOwner({\n    ownerAddress: '86xCnPeV69n6t3DnyGvkKobf9FdN2H9oiVDdaMpo2MMY',\n    page: 1,\n  });\n  console.log(response.items);\n} catch (error) {\n  console.log(error);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Helius SDK using yarn\nDESCRIPTION: Command to install the Helius SDK package using yarn package manager.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nyarn add helius-sdk\n```\n\n----------------------------------------\n\nTITLE: Editing Existing Webhook Settings\nDESCRIPTION: Demonstrates how to modify existing webhook configurations by updating account addresses.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius, Address } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.editWebhook(\n  'your-webhook-id-here',\n  { accountAddresses: [Address.SQUADS] }\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Collection Webhook\nDESCRIPTION: Demonstrates how to create a webhook for monitoring specific NFT collections.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_21\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  // collections dict\n  Collections,\n  Helius,\n} from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.createCollectionWebhook({\n  collectionQuery: Collections.ABC,\n  transactionTypes: [Types.TransactionType.ANY],\n  webhookType: Types.WebhookType.DISCORD,\n  webhookURL: 'https://discord.com/api/webhooks/your-discord-token-here',\n});\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Webhooks\nDESCRIPTION: Shows how to fetch all webhooks associated with the API key.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_20\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.getAllWebhooks();\n```\n\n----------------------------------------\n\nTITLE: Deleting a Webhook\nDESCRIPTION: Shows how to delete an existing webhook using its ID.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.deleteWebhook('<webhook-id-here>');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Webhook by ID\nDESCRIPTION: Demonstrates how to fetch a specific webhook's information using its ID.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_19\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.getWebhookByID('<webhook-id-here>');\n```\n\n----------------------------------------\n\nTITLE: Appending Addresses to Webhook\nDESCRIPTION: Shows how to add new addresses to an existing webhook's monitoring list.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/examples/EXAMPLES_OVERVIEW.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Helius, Address } from 'helius-sdk';\n\nconst helius = new Helius('YOUR_API_KEY');\n\nhelius.appendAddressesToWebhook('your-webhook-id-here', [\n  Address.SQUADS,\n  Address.JUPITER_V3,\n]);\n```\n\n----------------------------------------\n\nTITLE: Mint API Functions Reference - Compressed NFT Operations\nDESCRIPTION: Deprecated API functions for minting and managing compressed NFTs on Solana. Includes collection authority management and mintlist retrieval.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/README.md#2025-04-21_snippet_6\n\nLANGUAGE: markdown\nCODE:\n```\n- mintCompressedNft()\n- delegateCollectionAuthority()\n- revokeCollectionAuthority()\n- getMintlist()\n```\n\n----------------------------------------\n\nTITLE: Apache License 2.0 Boilerplate Notice Template\nDESCRIPTION: Standard boilerplate notice for applying the Apache License 2.0 to a software project. This template should be included in appropriate comment syntax for each file, with bracketed fields replaced with actual project information.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/docs/scripts/prettify/Apache-License-2.0.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nCopyright [yyyy] [name of copyright owner]\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n\n----------------------------------------\n\nTITLE: Installing Node.js Type Definitions via npm\nDESCRIPTION: This command installs the @types/node package as a development dependency, providing TypeScript type definitions for Node.js.\nSOURCE: https://github.com/helius-labs/helius-sdk/blob/main/tests/node_modules/@types/node/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save @types/node\n```"
  }
]