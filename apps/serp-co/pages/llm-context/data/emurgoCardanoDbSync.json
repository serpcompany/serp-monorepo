[
  {
    "owner": "emurgo",
    "repo": "cardano-db-sync",
    "content": "TITLE: Get All Reward Account Deposits - SQL\nDESCRIPTION: This query retrieves all reward account deposits, combining staking rewards from the `reward` table and treasury payments from the `treasury` table using a SQL `UNION` operation.  It coalesces the `addr_id`, `amount`, `earned_epoch`, and `tx_id` columns from both tables.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_25\n\nLANGUAGE: sql\nCODE:\n```\nselect addr_id, amount, NULL as reward_epoch_no, tx_id as treasury_tx_id from treasury\n    union\n    select addr_id, amount, earned_epoch as reward_epoch_no, NULL as treasury_tx_id from reward ;\n```\n\n----------------------------------------\n\nTITLE: Query Current Total Ada Supply (SQL)\nDESCRIPTION: This SQL query calculates the current total on-chain supply of Ada by summing the values of unspent transaction outputs (UTxOs) from the 'tx_out' table, excluding those referenced in 'tx_in'. The result is divided by 1,000,000 to convert from Lovelace to ADA.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nselect sum (value) / 1000000 as current_supply from tx_out as tx_outer where\n    not exists\n      ( select tx_out.id from tx_out inner join tx_in\n          on tx_out.tx_id = tx_in.tx_out_id and tx_out.index = tx_in.tx_out_index\n          where tx_outer.id = tx_out.id\n      ) ;\n```\n\n----------------------------------------\n\nTITLE: Running Cardano DB Sync (Bash)\nDESCRIPTION: Runs the `cardano-db-sync` Docker image with specified environment variables and volume mounts. The environment variables configure the network and PostgreSQL connection details.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --env NETWORK=mainnet \\\n  --env POSTGRES_HOST=postgres \\\n  --env POSTGRES_PORT=5432 \\\n  --volume db-sync-data:/var/lib/cexplorer \\\n  --volume node-ipc \\\n  ghcr.io/IntersectMBO/cardano-db-sync:13.3.0.0\n```\n\n----------------------------------------\n\nTITLE: Start Cardano DB Sync - Bash\nDESCRIPTION: Starts the `cardano-db-sync` process with specified configuration parameters. `PGPASSFILE` sets the path to the PostgreSQL password file. The command specifies the path to the DB sync config file, the node socket path, the ledger state directory, and the schema directory. This command connects `cardano-db-sync` to the Cardano node and starts syncing the blockchain data.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/running.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet cardano-db-sync -- \\\n    --config ~/src/cardano-environments/db-sync-config.json \\\n    --socket-path ~/src/cardano-environments/mainnet/node.socket \\\n    --state-dir ~/src/cardano-environments/mainnet/ledger-state \\\n    --schema-dir schema/\n```\n\n----------------------------------------\n\nTITLE: Get Spend Script Usage Details (SQL)\nDESCRIPTION: This SQL query retrieves details about the usage of a specific spend script. It joins the `tx`, `redeemer`, `tx_in`, and `tx_out` tables to find transactions that use the specified script hash. The query selects transaction ID, transaction output value, unit memory, unit steps, fee, and purpose for each usage of the script.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_31\n\nLANGUAGE: sql\nCODE:\n```\nselect tx.id as tx_id, tx_out.value as tx_out_value, redeemer.unit_mem, redeemer.unit_steps, redeemer.fee, redeemer.purpose\n  from tx join redeemer on redeemer.tx_id = tx.id\n  join tx_in on tx_in.redeemer_id = redeemer.id\n  join tx_out on tx_in.tx_out_id = tx_out.tx_id and tx_in.tx_out_index = tx_out.index\n    where redeemer.script_hash = '\\x8a08f851b22e5c54de087be307eeab3b5c8588a8cea8319867c786e0';\n```\n\n----------------------------------------\n\nTITLE: Get All Assets with Minting Data (SQL)\nDESCRIPTION: This SQL query retrieves information about all assets, including their quantities and mint counts. It uses a subquery to aggregate `ma_tx_mint` data, then joins with `multi_asset`, `tx`, and `block` tables to retrieve fingerprint, policy, name, mint count, quantity, and creation time for each asset.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_33\n\nLANGUAGE: sql\nCODE:\n```\n SELECT\n    multi_asset.fingerprint,\n    multi_asset.policy,\n    multi_asset.name,\n    a.ident,\n    a.cnt mints,\n    a.quantity,\n    block.\"time\" AS created\n   FROM ( SELECT ma_tx_mint.ident,\n            sum(ma_tx_mint.quantity::numeric) AS quantity,\n            count(*) AS cnt,\n            min(ma_tx_mint.tx_id) AS mtx\n           FROM ma_tx_mint\n          GROUP BY ma_tx_mint.ident) a\n     LEFT JOIN multi_asset ON multi_asset.id = a.ident\n     LEFT JOIN tx ON tx.id = a.mtx\n     LEFT JOIN block ON block.id = tx.block_id;\n```\n\n----------------------------------------\n\nTITLE: Query Sync Lag (SQL)\nDESCRIPTION: This SQL query determines how far behind the database synchronization is by calculating the time difference between the current time ('now()') and the timestamp of the most recent block in the 'block' table.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_7\n\nLANGUAGE: sql\nCODE:\n```\nselect now () - max (time) as behind_by from block ;\n```\n\n----------------------------------------\n\nTITLE: Configuration: Only UTxO insert_options Example (JSON)\nDESCRIPTION: This JSON snippet shows the `insert_options` when the 'Only UTxO' preset is selected. It configures the DB sync to only load basic transaction data, block data, and UTxO data.  It disables most of the other features, like Plutus script processing and governance, to improve performance when those features are not needed.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/configuration.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"tx_cbor\": \"disable\",\n\"tx_out\": {\n  \"value\": \"bootstrap\"\n},\n\"ledger\": \"ignore\",\n\"shelley\": {\n  \"enable\": false\n},\n\"metadata\": {\n  \"enable\": \"false\"\n},\n\"multi_asset\": {\n  \"enable\": \"true\"\n},\n\"plutus\": {\n  \"enable\": false\n},\n\"governance\": \"disable\",\n\"offchain_pool_data\": \"disable\"\n\"pool_stat\": \"disable\"\n```\n\n----------------------------------------\n\nTITLE: Get Stake Distribution Per Pool with Bech32 (SQL)\nDESCRIPTION: This SQL query retrieves the stake distribution for each pool in a given epoch using the Bech32 pool identifier. It joins 'epoch_stake' with 'pool_hash' on 'pool_id' and sums the 'amount' as 'lovelace', grouping by 'pool_hash.id' and filtering by the specified 'epoch_no'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_17\n\nLANGUAGE: sql\nCODE:\n```\nselect pool_hash.view, sum (amount) as lovelace from epoch_stake\n    inner join pool_hash on epoch_stake.pool_id = pool_hash.id\n    where epoch_no = 216 group by pool_hash.id ;\n```\n\n----------------------------------------\n\nTITLE: Query Chain Meta Data (SQL)\nDESCRIPTION: This SQL query retrieves meta data about the blockchain, including the start time and network name, from the 'meta' table.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nselect * from meta ;\n```\n\n----------------------------------------\n\nTITLE: Creating a Working Directory (Bash)\nDESCRIPTION: Creates a working directory named 'src' in the user's home directory and navigates into it. This sets the stage for downloading and configuring the Docker Compose file.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir ~/src\ncd ~/src\n```\n\n----------------------------------------\n\nTITLE: Create Configuration Directory - Bash\nDESCRIPTION: Creates a directory structure to store configuration files for different Cardano environments (mainnet, preprod, preview, sanchonet).  It uses `mkdir -p` to create parent directories if they don't exist and then changes the current directory to the newly created base directory.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/running.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/src/cardano-environments/{mainnet,preprod,preview,sanchonet}\ncd ~/src/cardano-environments\n```\n\n----------------------------------------\n\nTITLE: Restoring from a Snapshot using postgresql-setup.sh\nDESCRIPTION: This script restores the database from a snapshot. It drops the existing database, recreates the tables, and populates them with the snapshot data. The `PGPASSFILE` environment variable needs to be set. The `--restore-snapshot` option specifies the name of the snapshot to restore and the location of the ledger state directory.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/state-snapshot.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet scripts/postgresql-setup.sh --restore-snapshot \\\n\tdb-sync-snapshot-schema-9-block-5796064-x86_64 ledger-state/mainnet\n```\n\n----------------------------------------\n\nTITLE: Connecting to Other Networks (Bash)\nDESCRIPTION: Starts the Docker Compose services with a specific network configuration using the `NETWORK` environment variable. This allows connecting to networks like `preprod` instead of the default.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nNETWORK=preprod docker compose up -d && docker compose logs -f\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations - Mainnet\nDESCRIPTION: This command runs the existing database migrations for the mainnet configuration. It sets the `PGPASSFILE` environment variable to point to the pgpass-mainnet file and then executes the `cardano-db-tool` with the `run-migrations` command, specifying the schema directory.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/schema-management.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexport PGPASSFILE=config/pgpass-mainnet\ncabal run cardano-db-tool -- run-migrations --mdir schema/\n```\n\n----------------------------------------\n\nTITLE: Setting Up PostgreSQL Database\nDESCRIPTION: Sets up the PostgreSQL database using the provided script. It uses the configuration in `config/pgpass-mainnet` for database connection details. `--createdb` flag ensures that the database is created if it doesn't exist.  The PGPASSFILE environment variable specifies the location of the password file.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet scripts/postgresql-setup.sh --createdb\n```\n\n----------------------------------------\n\nTITLE: Cloning Cardano DB Sync Repository\nDESCRIPTION: Clones the cardano-db-sync repository from GitHub.  This is the first step in setting up the db-sync node. The repository URL is used to clone the project.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/IntersectMBO/cardano-db-sync\n```\n\n----------------------------------------\n\nTITLE: Find Incorrect Epoch Table Entries - SQL\nDESCRIPTION: This SQL query identifies incorrect entries in the epoch table by comparing the block and transaction counts in the epoch table with the aggregated counts from the block table. It selects the epoch number and corresponding counts from both tables, filtering for entries where the counts differ. This query helps in detecting data inconsistencies in the Cardano DB Sync database related to epoch data.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_36\n\nLANGUAGE: sql\nCODE:\n```\nselect b.epoch_no, e.epoch_blk_count, e.epoch_tx_count, b.block_block_count, b.block_tx_count\n  from\n    (select no, blk_count as epoch_blk_count, tx_count as epoch_tx_count from epoch) as e,\n    (select epoch_no, count (block_no) as block_block_count, sum (tx_count) as block_tx_count\n      from block group by epoch_no) as b\n    where e.no = b.epoch_no\n      and (e.epoch_blk_count != b.block_block_count or e.epoch_tx_count != b.block_tx_count)\n    order by b.epoch_no ;\n```\n\n----------------------------------------\n\nTITLE: Get Stake Distribution Per Pool (SQL)\nDESCRIPTION: This SQL query retrieves the stake distribution for each pool in a given epoch. It selects the 'pool_id' and sums the 'amount' from the 'epoch_stake' table, grouping by 'pool_id' and filtering by the specified 'epoch_no'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_16\n\nLANGUAGE: sql\nCODE:\n```\nselect pool_id, sum (amount) from epoch_stake\n    where epoch_no = 216 group by pool_id ;\n```\n\n----------------------------------------\n\nTITLE: Check Cardano DB Sync Version (Bash)\nDESCRIPTION: Verifies the installation by running the `cardano-db-sync` binary with the `--version` flag, which displays the version information. Confirms that the installation was successful and the binary is accessible.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncardano-db-sync --version\n```\n\n----------------------------------------\n\nTITLE: Running Database Migrations (Bash)\nDESCRIPTION: Runs database migrations using the `cardano-db-tool` command, specifying the schema and location directories.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\ncabal run cardano-db-tool run-migrations -- --mdir schema/ --ldir .\n```\n\n----------------------------------------\n\nTITLE: Preparing a Snapshot using cardano-db-tool\nDESCRIPTION: This command prepares the snapshot by extracting necessary information from the ledger state. It requires the `PGPASSFILE` environment variable to be set for database access. The `--state-dir` option specifies the directory containing the ledger state data. The tool then prints the command to create the snapshot.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/state-snapshot.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet cardano-db-tool prepare-snapshot --state-dir ledger-state/mainnet/\n```\n\n----------------------------------------\n\nTITLE: Running DB Sync with Cabal\nDESCRIPTION: Runs the `cardano-db-sync` node using Cabal.  It specifies the configuration file, socket path, state directory, and schema directory as command-line arguments. PGPASSFILE environment variable must be set for database authentication.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet cabal run cardano-db-sync -- \\\n    --config config/mainnet-config.yaml \\\n    --socket-path ../cardano-node/state-node-mainnet/node.socket \\\n    --state-dir ledger-state/mainnet \\\n    --schema-dir schema/\n```\n\n----------------------------------------\n\nTITLE: Checking Out Cardano Node Tag\nDESCRIPTION: Changes the current directory to the cardano-node directory, checks out the latest official tag, and creates a new branch based on that tag.  `<latest-official-tag>` needs to be replaced with the actual tag name. This step ensures the node is running a stable, released version.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd cardano-node\ngit checkout <latest-official-tag> -b tag-<latest-official-tag>\n```\n\n----------------------------------------\n\nTITLE: Query Current Valid Pools (SQL)\nDESCRIPTION: This SQL query identifies currently valid pools by selecting pool updates where the 'registered_tx_id' is the maximum for each 'hash_id' (latest registration) and no corresponding retirement entry exists in 'pool_retire' with a 'retiring_epoch' less than or equal to the maximum epoch number in the 'block' table.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_8\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pool_update\n    where registered_tx_id in (select max(registered_tx_id) from pool_update group by hash_id)\n    and not exists\n      ( select * from pool_retire where pool_retire.hash_id = pool_update.hash_id\n          and pool_retire.retiring_epoch <= (select max (epoch_no) from block)\n      ) ;\n```\n\n----------------------------------------\n\nTITLE: Running Cardano DB Sync with Config Override (Bash)\nDESCRIPTION: Runs the `cardano-db-sync` Docker image and overrides the default db-sync-config.json by mounting a directory containing the replacement file and setting the DB_SYNC_CONFIG environment variable.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --env NETWORK=mainnet \\\n  --env POSTGRES_HOST=postgres \\\n  --env POSTGRES_PORT=5432 \\\n  --env DB_SYNC_CONFIG=/config/db-sync-config.json \\\n  --volume db-sync-data:/var/lib/cexplorer \\\n  --volume node-ipc:/node-ipc \\\n  --volume $PWD/environments/mainnet:/config \\\n  ghcr.io/IntersectMBO/cardano-db-sync:13.3.0.0\n```\n\n----------------------------------------\n\nTITLE: Starting Docker Compose Services (Bash)\nDESCRIPTION: Starts the `cardano-node`, `postgresql`, and `cardano-db-sync` services defined in the docker-compose.yml file using `docker compose up -d`. The `docker compose logs -f` command tails the logs of the services.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d && docker compose logs -f\n```\n\n----------------------------------------\n\nTITLE: Query Current Valid Pools with Hash (SQL)\nDESCRIPTION: This SQL query extends the previous query by joining 'pool_update' with 'pool_hash' to include the pool hash in the output, providing the pool identifier alongside the update information. It identifies currently valid pools by selecting pool updates where the 'registered_tx_id' is the maximum for each 'hash_id' (latest registration) and no corresponding retirement entry exists in 'pool_retire' with a 'retiring_epoch' less than or equal to the maximum epoch number in the 'block' table.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_9\n\nLANGUAGE: sql\nCODE:\n```\nselect * from pool_update inner join pool_hash on pool_update.hash_id = pool_hash.id\n    where registered_tx_id in (select max(registered_tx_id) from pool_update group by hash_id)\n    and not exists\n      ( select * from pool_retire where pool_retire.hash_id = pool_update.hash_id\n          and pool_retire.retiring_epoch <= (select max (epoch_no) from block)\n          ) ;\n```\n\n----------------------------------------\n\nTITLE: Running cardano-db-sync\nDESCRIPTION: This command runs cardano-db-sync to populate the database tables with blockchain data and off-chain metadata. It uses a PGPASSFILE for database authentication, a configuration file, a socket path to connect to the Cardano node, a state directory, and a schema directory.  Ensure the PGPASSFILE contains the correct database credentials.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet db-sync-node/bin/cardano-db-sync \\\n    --config config/mainnet-config.yaml \\\n    --socket-path ../cardano-node/state-node-mainnet/node.socket \\\n    --state-dir ledger-state/mainnet \\\n    --schema-dir schema/\n```\n\n----------------------------------------\n\nTITLE: Get Script Transaction Information (SQL)\nDESCRIPTION: This SQL query retrieves information about transactions involving scripts. It joins the `tx` (transaction) and `redeemer` tables, grouping by transaction ID. The query calculates the sum of redeemer fees, unit memory, and unit steps, along with the transaction fee, validity status, script count, and script size.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_29\n\nLANGUAGE: sql\nCODE:\n```\nselect tx.id as tx_id, tx.fee as fees, SUM(redeemer.fee) as script_fees, SUM(redeemer.unit_mem) as unit_mem,\n       SUM (redeemer.unit_steps) as unit_steps, tx.valid_contract as valid, count(redeemer.id) scripts, tx.script_size\n       from tx join redeemer on tx.id = redeemer.tx_id group by tx.id;\n```\n\n----------------------------------------\n\nTITLE: Download Configs using Curl - Bash\nDESCRIPTION: Downloads configuration files for the mainnet environment using `curl`. It specifies the output directory and uses `--remote-name-all` to save the files with their original names from the provided URLs. The URLs point to various configuration files including genesis files, topology and db-sync configuration.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/running.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl --remote-name-all --output-dir mainnet \\\n    https://book.world.dev.cardano.org/environments/mainnet/config.json \\\n    https://book.world.dev.cardano.org/environments/mainnet/db-sync-config.json \\\n    https://book.world.dev.cardano.org/environments/mainnet/submit-api-config.json \\\n    https://book.world.dev.cardano.org/environments/mainnet/topology.json \\\n    https://book.world.dev.cardano.org/environments/mainnet/byron-genesis.json \\\n    https://book.world.dev.cardano.org/environments/mainnet/shelley-genesis.json \\\n    https://book.world.dev.cardano.org/environments/mainnet/alonzo-genesis.json \\\n    https://book.world.dev.cardano.org/environments/mainnet/conway-genesis.json\n```\n\n----------------------------------------\n\nTITLE: Install GHC and Cabal (Bash)\nDESCRIPTION: Installs specific versions of GHC and Cabal using GHCup, and then sets those versions as the active ones. Ensures the correct Haskell environment is used for building Cardano DB Sync.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nghcup install ghc 8.10.7\nghcup install cabal 3.10.1.0\nghcup set ghc 8.10.7\nghcup set cabal 3.10.1.0\n```\n\n----------------------------------------\n\nTITLE: Configuration: Only Governance insert_options Example (JSON)\nDESCRIPTION: This JSON snippet shows the `insert_options` configuration for the 'Only Governance' preset. It disables most data except for block, transaction, and governance-related data. Ledger is enabled. This configuration is intended for applications primarily focused on governance aspects of the Cardano blockchain.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/configuration.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"tx_cbor\": \"disable\",\n\"tx_out\": {\n  \"value\": \"disable\"\n},\n\"ledger\": \"enable\",\n\"shelley\": {\n  \"enable\": false\n},\n\"multi_asset\": {\n  \"enable\": false\n},\n\"plutus\": {\n  \"enable\": false\n},\n\"governance\": \"enable\",\n\"offchain_pool_data\": \"disable\"\n\"pool_stat\": \"enable\"\n```\n\n----------------------------------------\n\nTITLE: Get Script-Locked Ada in UTxO (SQL)\nDESCRIPTION: This SQL query calculates the total amount of Ada locked by scripts in Unspent Transaction Outputs (UTxO). It selects UTxOs that have the `address_has_script` flag set to true and are not spent in any transaction input.  The result is the sum of the 'value' column, divided by 1000000 to convert from Lovelace to Ada.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_28\n\nLANGUAGE: sql\nCODE:\n```\nselect sum (value) / 1000000 as script_locked from tx_out as tx_outer where\n    tx_outer.address_has_script = true and\n    not exists\n      ( select tx_out.id from tx_out inner join tx_in\n          on tx_out.tx_id = tx_in.tx_out_id and tx_out.index = tx_in.tx_out_index\n          where tx_outer.id = tx_out.id\n      ) ;\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL Database (Bash)\nDESCRIPTION: Connects to the PostgreSQL database running in the Docker container using `psql`. It specifies the host, port, user, and database name to establish the connection.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npsql -h 0.0.0.0 -p 5432 -U postgres -d cexplorer\n```\n\n----------------------------------------\n\nTITLE: Query Database Size (SQL)\nDESCRIPTION: This SQL query retrieves the size of the 'cexplorer' database using the 'pg_database_size' function and formats the result using 'pg_size_pretty'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nselect pg_size_pretty (pg_database_size ('cexplorer'));\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node with Nix\nDESCRIPTION: Runs the cardano-node using Nix.  This command assumes a Nix environment is configured. This step starts the Cardano node, which is a prerequisite for the db-sync node to synchronize with the blockchain.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnix run .#mainnet/node\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Node\nDESCRIPTION: This command runs the Cardano node as a relay or passive node. It requires the genesis file, socket path, and configuration file to be specified. Ensure the paths to these files are correct.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncardano-node --genesis-file genesis.json --socket-path node.socket --config config.yaml\n```\n\n----------------------------------------\n\nTITLE: Query Latest Slot Number (SQL)\nDESCRIPTION: This SQL query retrieves the slot number of the most recent block by selecting the 'slot_no' from the 'block' table where 'block_no' is not null, ordering by 'block_no' in descending order, and limiting the result to one row.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nselect slot_no from block where block_no is not null\n    order by block_no desc limit 1 ;\n```\n\n----------------------------------------\n\nTITLE: Configuration: Default insert_options Example (JSON)\nDESCRIPTION: This JSON snippet shows a sample `insert_options` section with all default settings enabled. This configuration includes options for transaction CBOR, transaction outputs, ledger data, Shelley-era features, multi-asset support, metadata, Plutus scripts, governance data, and off-chain pool data. The `json_type` is set to 'text'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/configuration.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  // <-- Rest of configuration -->\n  // ...\n\n  \"insert_options\": {\n    \"tx_cbor\": \"disable\",\n    \"tx_out\": {\n      \"value\": \"enable\"\n    },\n    \"ledger\": \"enable\",\n    \"shelley\": {\n      \"enable\": true\n    },\n    \"multi_asset\": {\n      \"enable\": true\n    },\n    \"metadata\": {\n      \"enable\": true\n    },\n    \"plutus\": {\n      \"enable\": true\n    },\n    \"governance\": \"enable\",\n    \"offchain_pool_data\": \"enable\",\n    \"json_type\": \"text\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Stake Address for Shelley Address (SQL)\nDESCRIPTION: This SQL query retrieves the stake address associated with a given Shelley address. It joins 'tx_out' with 'stake_address' based on 'stake_address_id' and filters by the specified Shelley 'address'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nselect stake_address.id as stake_address_id, tx_out.address, stake_address.view as stake_address\n\tfrom tx_out inner join stake_address on tx_out.stake_address_id = stake_address.id\n\twhere address = 'addr1qx2kd28nq8ac5pr...08ly3tu9sy0f4qd' ;\n```\n\n----------------------------------------\n\nTITLE: Query Table Size (SQL)\nDESCRIPTION: This SQL query retrieves the total size of the 'block' table, including indexes, using the 'pg_total_relation_size' function and formats the result using 'pg_size_pretty'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nselect pg_size_pretty (pg_total_relation_size ('block'));\n```\n\n----------------------------------------\n\nTITLE: Get Transaction Outputs by Hash (SQL)\nDESCRIPTION: This SQL query retrieves the transaction outputs for a specified transaction hash. It joins 'tx_out' with 'tx' based on 'tx_id' and filters by the transaction 'hash'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_12\n\nLANGUAGE: sql\nCODE:\n```\nselect tx_out.* from tx_out inner join tx on tx_out.tx_id = tx.id\n    where tx.hash = '\\xf9c0997afc8159dbe0568eadf0823112e0cc29cd097c8dc939ff44c372388bc0' ;\n```\n\n----------------------------------------\n\nTITLE: Running cardano-smash-server\nDESCRIPTION: This command runs the cardano-smash-server, connecting it to the populated database. It requires a PGPASSFILE for database authentication, a configuration file, a port number, and an administrators file. Ensure the PGPASSFILE is consistent with the one used for cardano-db-sync.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet cardano-smash-server \\\n     --config config/mainnet-config.yaml \\\n     --port 3100 \\\n     --admins admins.txt\n```\n\n----------------------------------------\n\nTITLE: Get Epoch Performance Statistics (SQL)\nDESCRIPTION: This complex SQL query retrieves per-epoch performance statistics, including sync time, transaction count, total transaction size, reward count, and stake count. It uses a series of UNION operations to combine data from 'reward', 'epoch_stake', 'block', and 'epoch_sync_time' tables, and then aggregates the results by 'epoch_no'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_14\n\nLANGUAGE: sql\nCODE:\n```\nselect epoch_no, max (sync_secs) as sync_secs, sum (tx_count) as tx_count, sum (sum_tx_size) as sum_tx_size,\n    sum (reward_count) as reward_count, sum (stake_count) as stake_count\n  from (\n    select earned_epoch as epoch_no, 0 as sync_secs, 0 as tx_count, 0 as sum_tx_size, count (reward) as reward_count,\n        0 as stake_count from reward group by earned_epoch\n    union\n    select epoch_no, 0 as sync_secs, 0 as tx_count, 0 as sum_tx_size, 0 as reward_count,\n        count (epoch_stake) as stake_count from epoch_stake group by epoch_no\n    union\n    select epoch_no, 0 as sync_secs, count (tx) as tx_count, sum (tx.size) as tx_sum_size, 0 as reward_count,\n        0 as stake_count\n      from block inner join tx on tx.block_id = block.id\n      where epoch_no is not null\n      group by epoch_no\n    union\n    select no as epoch_no, seconds, 0 as tx_count, 0 as tx_sum_size, 0 as reward_count,\n        0 as stake_count\n      from epoch_sync_time\n  )\n  as derived_table group by epoch_no ;\n```\n\n----------------------------------------\n\nTITLE: Install Secp256k1 (Bash)\nDESCRIPTION: Downloads, builds, and installs the secp256k1 library, which is a dependency of Cardano DB Sync. Includes cloning the repository, checking out a specific revision, configuring with schnorrsig support, building, and installing the library.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src\n```\n\nLANGUAGE: bash\nCODE:\n```\nREV=$(curl -L https://github.com/input-output-hk/iohk-nix/releases/latest/download/INFO \\\n  | awk '$1 == \"debian.libsecp256k1.deb\" { rev = gensub(/.*-(.*)\\.deb/, \"\\\\1\", \"g\", $2); print rev }')\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/bitcoin-core/secp256k1\ncd secp256k1\ngit checkout $REV\n```\n\nLANGUAGE: bash\nCODE:\n```\n./autogen.sh\n./configure --enable-module-schnorrsig --enable-experimental\nmake\nmake check\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Running DB Sync with Nix\nDESCRIPTION: Runs the `cardano-db-sync` node using the executable built with Nix.  It specifies the configuration file, socket path, state directory, and schema directory as command-line arguments. PGPASSFILE environment variable needs to be correctly set to allow database access.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet db-sync-node/bin/cardano-db-sync \\\n    --config config/mainnet-config.yaml \\\n    --socket-path ../cardano-node/state-node-mainnet/node.socket \\\n    --state-dir ledger-state/mainnet \\\n    --schema-dir schema/\n```\n\n----------------------------------------\n\nTITLE: Creating a Snapshot using postgresql-setup.sh\nDESCRIPTION: This script creates the database snapshot using the information gathered from the `cardano-db-tool`. It requires the `PGPASSFILE` environment variable to be set for database access. The `--create-snapshot` option specifies the name of the snapshot and the location of the ledger state file.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/state-snapshot.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet scripts/postgresql-setup.sh --create-snapshot \\\n    db-sync-snapshot-schema-9-block-5796064-x86_64 ledger-state/mainnet/31021676-f3873e4bec.lstate\n```\n\n----------------------------------------\n\nTITLE: Fetching Pool Errors with GET Request\nDESCRIPTION: This command retrieves the last 10 errors associated with a specific pool ID using a GET request to the `/api/v1/errors/{poolId}` endpoint.  Optionally, a `fromDate` parameter can be added to filter errors from a specific date (DD.MM.YYYY format). The server must be running at `localhost:3100`.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:3100/api/v1/errors/062693863e0bcf9f619238f020741381d4d3748aae6faf1c012e80e7\n```\n\n----------------------------------------\n\nTITLE: Get Historical UTxO Set for Timestamp - SQL\nDESCRIPTION: This query retrieves the UTxO (Unspent Transaction Output) set for a given timestamp. It uses a common table expression (CTE) named `const` to define the target timestamp. It joins several tables (`tx_out`, `tx`, `block`, `tx_in`) and filters based on block time relative to the specified timestamp and Allegra hard fork.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_26\n\nLANGUAGE: sql\nCODE:\n```\n# with const as (select to_timestamp ('2020-10-10 17:00:00', 'YYYY-MM-DD HH24:MI:SS') as effective_time_)\n  select tx_out.address as address, tx_out.value as lovelace, generating_block.time as timestamp\n    from const\n    cross join tx_out\n    inner join tx as generating_tx on generating_tx.id = tx_out.tx_id\n    inner join block as generating_block on generating_block.id = generating_tx.block_id\n    left join tx_in as consuming_input on consuming_input.tx_out_id = generating_tx.id\n      and consuming_input.tx_out_index = tx_out.index\n    left join tx as consuming_tx on consuming_tx.id = consuming_input.tx_in_id\n    left join block as consuming_block on consuming_block.id = consuming_tx.block_id\n    where ( -- Ommit outputs from genesis after Allegra hard fork\n\t\t\tconst.effective_time_ < '2020-12-16 21:44:00'\n\t\t\tor generating_block.epoch_no is not null\n\t\t\t)\n      and const.effective_time_ >= generating_block.time -- Only outputs from blocks generated in the past\n      and ( -- Only outputs consumed in the future or unconsumed outputs\n\t\tconst.effective_time_ <= consuming_block.time or consuming_input.id IS NULL\n\t\t) ;\n```\n\n----------------------------------------\n\nTITLE: Get Block Count by Pool for Each Epoch - SQL\nDESCRIPTION: This query retrieves the number of blocks created by a specific pool for each epoch. It joins the `block`, `slot_leader`, and `pool_hash` tables. It groups the results by epoch number and pool view and counts the number of blocks.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_21\n\nLANGUAGE: sql\nCODE:\n```\nselect block.epoch_no, count (*) as block_count\n    from block inner join slot_leader on block.slot_leader_id = slot_leader.id\n    inner join pool_hash on slot_leader.pool_hash_id = pool_hash.id\n    where pool_hash.view = 'pool1nux6acnlx0du7ss9fhg2phjlaqe87l4wcurln5r6f0k8xreluez'\n    group by block.epoch_no, pool_hash.view ;\n```\n\n----------------------------------------\n\nTITLE: Start PostgreSQL Service\nDESCRIPTION: This command starts the PostgreSQL service after the schema upgrade has been completed. Uses `systemctl` to manage the postgresql service.  Requires root privileges.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/upgrading-postgresql.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl start postgresql\n```\n\n----------------------------------------\n\nTITLE: Running Cardano DB Sync with Extra Args (Bash)\nDESCRIPTION: Runs the `cardano-db-sync` Docker image and passes extra arguments to the db-sync process. This example uses `--skip-fix`.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --env NETWORK=mainnet \\\n  --env POSTGRES_HOST=postgres \\\n  --env POSTGRES_PORT=5432 \\\n  --env EXTRA_DB_SYNC_ARGS=\"--skip-fix\"\n  --volume db-sync-data:/var/lib/cexplorer \\\n  --volume node-ipc \\\n  ghcr.io/IntersectMBO/cardano-db-sync:13.3.0.0\n```\n\n----------------------------------------\n\nTITLE: Verify Cabal Installation (Bash)\nDESCRIPTION: Checks the location of the `cabal` executable to ensure that the GHCup installation is being used and not a system-wide installation. It is necessary to use the right cabal executable.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nwhich cabal\n```\n\n----------------------------------------\n\nTITLE: Get Transaction Withdrawals by Hash (SQL)\nDESCRIPTION: This SQL query retrieves the withdrawals associated with a specified transaction hash. It joins the 'withdrawal' table with the 'tx' table on their respective IDs and filters based on the provided transaction hash.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_15\n\nLANGUAGE: sql\nCODE:\n```\nselect withdrawal.* from withdrawal\n    inner join tx on withdrawal.tx_id = tx.id\n    where tx.hash = '\\x0b8c5be678209bb051a02904dd18896a929f9aca8aecd48850939a590175f7e8' ;\n```\n\n----------------------------------------\n\nTITLE: Running Database Integration Tests with Cabal\nDESCRIPTION: These commands execute database integration tests for the Cardano DB Sync project using Cabal.  They verify the interaction between the application and the database.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncabal test cardano-chain-gen:test:cardano-chain-gen\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncabal test cardano-db:test:test-db\n```\n\n----------------------------------------\n\nTITLE: Get Transaction ID from Signed Transaction File - Bash\nDESCRIPTION: This command retrieves the transaction ID (hash) from a signed transaction file using the `cardano-cli` tool.  It requires the `cardano-cli` to be installed and configured.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\ncardano-cli transaction txid --tx-file metadata.txsigned\n```\n\n----------------------------------------\n\nTITLE: Fetching Pool Metadata with GET Request\nDESCRIPTION: This command fetches pool metadata using a GET request to the specified endpoint. It pipes the JSON response to `jq` for formatting and readability. No dependencies are explicitly listed, but `curl` and `jq` must be installed. It requires the server to be running and accessible at `localhost:3100`.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET -v http://localhost:3100/api/v1/metadata/8517fa7042cb9494818861c53c87780b4975c0bd402e3ed85168aa66/4b2221a0ac0b0197308323080ba97e3e453f8625393d30f96eebe0fca4cb7335 | jq .\n```\n\n----------------------------------------\n\nTITLE: Delisting a Pool using HTTP API\nDESCRIPTION: This command delists a stake pool using the SMASH server's HTTP API. It uses curl to send a PATCH request to the `/api/v1/delist` endpoint, including the pool ID in the request body. Replace `<POOL_ID>` with the actual pool ID.  This operation requires administrator privileges.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --verbose --header \"Content-Type: application/json\" \\\n  --request PATCH --data '{\"poolId\":\"<POOL_ID>\"}' \\\n  http://localhost:3100/api/v1/delist\n```\n\n----------------------------------------\n\nTITLE: Query Sync Progress (SQL)\nDESCRIPTION: This SQL query estimates the synchronization progress of the database by comparing the time range of blocks in the 'block' table to the time elapsed since the earliest block. It calculates the percentage of time covered by blocks compared to the total time since the earliest block.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\nselect\n   100 * (extract (epoch from (max (time) at time zone 'UTC')) - extract (epoch from (min (time) at time zone 'UTC')))\n      / (extract (epoch from (now () at time zone 'UTC')) - extract (epoch from (min (time) at time zone 'UTC')))\n  as sync_percent\n  from block ;\n```\n\n----------------------------------------\n\nTITLE: Get Transaction Inputs by Hash (SQL)\nDESCRIPTION: This SQL query retrieves the transaction inputs for a specified transaction hash. It joins 'tx_out' with 'tx_in' and 'tx' based on the respective IDs and index, filtering by the transaction 'hash'.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_13\n\nLANGUAGE: sql\nCODE:\n```\nselect tx_out.* from tx_out\n    inner join tx_in on tx_out.tx_id = tx_in.tx_out_id\n    inner join tx on tx.id = tx_in.tx_in_id and tx_in.tx_out_index = tx_out.index\n    where tx.hash = '\\xf9c0997afc8159dbe0568eadf0823112e0cc29cd097c8dc939ff44c372388bc0' ;\n```\n\n----------------------------------------\n\nTITLE: Finding PostgreSQL Unix Domain Socket Path\nDESCRIPTION: This command uses `lsof`, `ps`, `grep`, `xargs`, and `cut` to discover the actual path to the Unix domain socket used by the running PostgreSQL instance. It relies on process filtering to identify the PostgreSQL process and then finds the socket it's using.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/troubleshooting.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ lsof -p \"$(ps -ef | grep postgres | grep '[b]in/postgres' | xargs | cut -d ' ' -f 2)\" | grep 5432\n```\n\n----------------------------------------\n\nTITLE: Upgrade PostgreSQL Schemas using pg_upgrade\nDESCRIPTION: This command uses the `pg_upgrade` utility to migrate the PostgreSQL database schemas from the old version (11) to the new version (15).  It specifies the old and new binaries and data directories, as well as the configuration file locations.  Requires correct paths for `pg_upgrade`, old bindir, new bindir, old datadir, new datadir, old config, and new config.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/upgrading-postgresql.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd /tmp\nsudo -u postgres /usr/lib/postgresql/15/bin/pg_upgrade \\\n  --old-bindir=/usr/lib/postgresql/11/bin \\\n  --new-bindir=/usr/lib/postgresql/15/bin \\\n  --old-datadir=/var/lib/postgresql/11/main \\\n  --new-datadir=/var/lib/postgresql/15/main \\\n  --old-options=\"--config_file=/etc/postgresql/11/main/postgresql.conf\" \\\n  --new-options=\"--config_file=/etc/postgresql/14/main/postgresql.conf\"\n```\n\n----------------------------------------\n\nTITLE: Configuration: Disable All insert_options Example (JSON)\nDESCRIPTION: This JSON snippet presents the `insert_options` for disabling almost all data insertion, focusing only on `block` and `tx` tables. This preset is suitable for scenarios where only minimal blockchain data is required, leading to significant performance improvements by avoiding the storage of unnecessary data.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/configuration.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"tx_cbor\": \"disable\",\n\"tx_out\": {\n  \"value\": \"disable\"\n},\n\"ledger\": \"disable\",\n\"shelley\": {\n  \"enable\": false\n},\n\"multi_asset\": {\n  \"enable\": false\n},\n\"plutus\": {\n  \"enable\": false\n},\n\"governance\": \"disable\",\n\"offchain_pool_data\": \"disable\"\n\"pool_stat\": \"disable\"\n```\n\n----------------------------------------\n\nTITLE: Downloading Cardano DB Sync Snapshot (Bash)\nDESCRIPTION: Downloads a snapshot archive for mainnet using `curl`. It is recommended to download separately for reliability.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ncurl -O https://update-cardano-mainnet.iohk.io/cardano-db-sync/13.3/db-sync-snapshot-schema-13.3-block-10611621-x86_64.tgz\n```\n\n----------------------------------------\n\nTITLE: Build Cardano DB Sync (Bash)\nDESCRIPTION: Updates cabal and then builds all components of the Cardano DB Sync project using `cabal build all`.  This compiles the source code into executable binaries.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ncabal update\ncabal build all\n```\n\n----------------------------------------\n\nTITLE: Building Cardano DB Sync with Nix\nDESCRIPTION: Builds the Cardano DB Sync executable using Nix. This command instructs Nix to build the project defined in the current directory (.). The resulting executable will be linked in `./result`.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing-with-nix.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnix build .\n```\n\n----------------------------------------\n\nTITLE: Query All Delegators and Basic Info - SQL\nDESCRIPTION: This SQL query retrieves information about all delegators, including their address, currently delegated pool ID, delegation epoch, previously delegated pool ID, previous delegation epoch, address ID, and stake key registration time. It joins multiple tables, including delegation, stake_address, stake_deregistration, stake_registration, and pool_hash, to gather the necessary information. The query filters out delegations that are deregistered before registration.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_35\n\nLANGUAGE: sql\nCODE:\n```\n SELECT sa.view AS address,\n    nh.view AS delegated_now_poolid,\n    d.active_epoch_no delegated_now_epoch,\n    oh.view AS delegated_before_poolid,\n    od.active_epoch_no AS delegated_before_epoch,\n    d.addr_id,\n    br.\"time\" AS stake_key_registered\n   FROM ( SELECT max(delegation.id) AS id\n           FROM delegation\n          GROUP BY delegation.addr_id) a\n     LEFT JOIN delegation d ON d.id = a.id\n     LEFT JOIN tx txn ON txn.id = d.tx_id\n     LEFT JOIN block bn ON bn.id = txn.block_id\n     LEFT JOIN stake_address sa ON sa.id = d.addr_id\n     LEFT JOIN stake_deregistration de ON de.addr_id = d.addr_id AND de.id = (( SELECT max(stake_deregistration.id) AS max\n           FROM stake_deregistration\n          WHERE stake_deregistration.addr_id = d.addr_id))\n     LEFT JOIN stake_registration re ON re.addr_id = d.addr_id AND re.id = (( SELECT max(stake_registration.id) AS max\n           FROM stake_registration\n          WHERE stake_registration.addr_id = d.addr_id))\n     LEFT JOIN delegation od ON od.addr_id = d.addr_id AND od.id = (( SELECT max(delegation.id) AS max\n           FROM delegation\n          WHERE delegation.addr_id = d.addr_id AND NOT delegation.pool_hash_id = d.pool_hash_id))\n     LEFT JOIN tx txo ON txo.id = od.tx_id\n     LEFT JOIN block bo ON bo.id = txo.block_id\n     LEFT JOIN pool_hash nh ON nh.id = d.pool_hash_id\n     LEFT JOIN pool_hash oh ON oh.id = od.pool_hash_id\n     LEFT JOIN tx txr ON txr.id = re.tx_id\n     LEFT JOIN block br ON br.id = txr.block_id\n  WHERE (de.tx_id < re.tx_id OR de.* IS NULL);\n```\n\n----------------------------------------\n\nTITLE: Running http-get-json-metadata with URL and Empty Hash (cabal)\nDESCRIPTION: This command executes `http-get-json-metadata` with a URL and an empty string for the hash. This is useful when the hash is unknown; the tool will then output the expected hash in the error message.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/pool-offchain-data.md#_snippet_2\n\nLANGUAGE: cabal\nCODE:\n```\n> cabal run -- http-get-json-metadata https://git.io/Jt01O \"\"\n```\n\n----------------------------------------\n\nTITLE: Stop PostgreSQL and Cardano DB Sync\nDESCRIPTION: These commands stop the PostgreSQL service and any running instances of Cardano DB Sync. This ensures no active connections interfere with the upgrade process. The commands use systemctl to stop postgresql and pkill to stop the cardano-db-sync process.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/upgrading-postgresql.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo systemctl stop postgresql\nsudo pkill -f cardano-db-sync\n```\n\n----------------------------------------\n\nTITLE: Building DB Sync with Nix\nDESCRIPTION: Builds the cardano-db-sync project using Nix. `-v` flag enables verbose output, `.#cardano-db-sync` specifies the Nix package to build, and `-o db-sync-node` specifies the output directory.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnix build -v .#cardano-db-sync -o db-sync-node\n```\n\n----------------------------------------\n\nTITLE: Get Collateral Input Loss Sum (SQL)\nDESCRIPTION: This SQL query calculates the total amount of Ada lost due to invalid contracts (failed script executions). It joins the `tx`, `tx_in`, and `tx_out` tables to find transactions where `valid_contract` is false. The result is the sum of the `value` column from the `tx_out` table (collateral input), divided by 1000000 to convert from Lovelace to Ada.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_30\n\nLANGUAGE: sql\nCODE:\n```\nselect SUM(value)/1000000 as lost_amount\n  from tx\n  join tx_in on tx.id = tx_in.tx_in_id\n  join tx_out on tx_in.tx_out_id = tx_out.id\n    where tx.valid_contract = false ;\n```\n\n----------------------------------------\n\nTITLE: Building cardano-smash-server using Cabal\nDESCRIPTION: These commands are used to build and install the cardano-smash-server using the Cabal build system. The first command builds the executable, and the second installs it to a location in your PATH.  Ensure Cabal is installed and configured correctly before running these commands.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncabal build cardano-smash-server\ncabal install cardano-smash-server\n```\n\n----------------------------------------\n\nTITLE: Downloading Docker Compose File (Bash)\nDESCRIPTION: Downloads the example docker-compose.yml file from the specified GitHub URL using `curl`. This file contains the configurations for running `cardano-db-sync` with Docker Compose.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -o docker-compose.yml \\\n  https://raw.githubusercontent.com/IntersectMBO/cardano-db-sync/master/docker-compose.example.yml\n```\n\n----------------------------------------\n\nTITLE: Query Delegation History for Stake Address - SQL\nDESCRIPTION: This query retrieves the delegation history for a specific stake address. It joins the `delegation`, `stake_address`, and `pool_hash` tables to get the active epoch number and the pool view for each delegation. The query filters by the stake address and orders the results by the active epoch number.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_18\n\nLANGUAGE: sql\nCODE:\n```\nselect delegation.active_epoch_no, pool_hash.view from delegation\n    inner join stake_address on delegation.addr_id = stake_address.id\n    inner join pool_hash on delegation.pool_hash_id = pool_hash.id\n    where stake_address.view = 'stake1u8gsndukzghdukmqdsd7r7wd6kvamvjv2pzcgag8v6jd69qfqyl5h'\n    order by active_epoch_no asc;\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Smash Server (Bash)\nDESCRIPTION: Runs the `cardano-smash-server` Docker image with specified environment variables for network and PostgreSQL connection, as well as authentication credentials. It also publishes port 3100.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --env NETWORK=mainnet \\\n  --env POSTGRES_HOST=postgres \\\n  --env POSTGRES_PORT=5432 \\\n  --env SMASH_USER=smash-admin \\\n  --env SMASH_PASSWORD=smash-password \\\n  --publish 3100:3100 \\\n  --volume node-ipc:/node-ipc \\\n  ghcr.io/IntersectMBO/cardano-smash-server:13.3.0.0\n```\n\n----------------------------------------\n\nTITLE: Building DB Sync with Cabal\nDESCRIPTION: Builds the `cardano-db-sync` project using Cabal.  This command compiles the Haskell source code into an executable.  A Cabal environment must be correctly configured to execute this step.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\ncabal build cardano-db-sync\n```\n\n----------------------------------------\n\nTITLE: Remove JSONB Configuration Example\nDESCRIPTION: This JSON configuration example demonstrates how to enable removing JSONB data types from the database schema using the `remove_jsonb_from_schema` option. Enabling this configuration improves insertion performance.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/configuration.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n\"remove_jsonb_from_schema\": \"enable\"\n```\n\n----------------------------------------\n\nTITLE: Starting Postgres for Testing (Bash)\nDESCRIPTION: Starts PostgreSQL via Docker Compose using the `docker-test.yml` configuration file.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-test.yml up\n```\n\n----------------------------------------\n\nTITLE: Start Cardano Node - Bash\nDESCRIPTION: Starts the Cardano node using the `cardano-node run` command.  It specifies the paths to the configuration file, topology file, database path, socket path, and host address. It assumes that these files exist in the specified directory. The `--host-addr` parameter is set to `0.0.0.0`, making the node accessible from any address.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/running.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncardano-node run \\\n    --config ~/src/cardano-environments/config.json\n    --topology ~/src/cardano-environments/topology.json \\\n    --database-path ~/src/cardano-environments/mainnet/db \\\n    --socket-path node.socket \\\n    --host-addr 0.0.0.0 \n```\n\n----------------------------------------\n\nTITLE: Checking Out DB Sync Tag\nDESCRIPTION: Checks out the latest official tag and creates a new branch based on that tag. Replace `<latest-official-tag>` with the specific tag. Ensures that the db-sync node runs on a stable, released version of the codebase.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ngit checkout <latest-official-tag> -b tag-<latest-official-tag>\n```\n\n----------------------------------------\n\nTITLE: Download Cardano DB Sync Source (Bash)\nDESCRIPTION: Clones the Cardano DB Sync repository from GitHub and checks out a specific release version. This prepares the source code for building.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/IntersectMBO/cardano-db-sync.git\ncd cardano-db-sync\ngit fetch --all --tags\ngit checkout tags/<VERSION>\n```\n\n----------------------------------------\n\nTITLE: Fetching Metadata using HTTP API\nDESCRIPTION: This command fetches stake pool metadata from the SMASH server using the HTTP API. It uses curl to send a GET request to the specified endpoint, including the pool ID and metadata hash. Replace `<POOL_ID>` and `<POOL_META_HASH>` with the actual values.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --verbose --header \"Content-Type: application/json\" \\\n  --request GET http://localhost:3100/api/v1/metadata/<POOL_ID>/<POOL_META_HASH>\n```\n\n----------------------------------------\n\nTITLE: Query Reward History for Stake Address - SQL\nDESCRIPTION: This query retrieves the reward history for a specified stake address. It joins the `reward`, `stake_address`, and `pool_hash` tables to get the earned epoch, delegated pool view, and reward amount. The query filters by the stake address and orders the results by the earned epoch.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_19\n\nLANGUAGE: sql\nCODE:\n```\nselect reward.earned_epoch, pool_hash.view as delegated_pool, reward.amount as lovelace\n    from reward inner join stake_address on reward.addr_id = stake_address.id\n    inner join pool_hash on reward.pool_id = pool_hash.id\n    where stake_address.view = 'stake1u8gsndukzghdukmqdsd7r7wd6kvamvjv2pzcgag8v6jd69qfqyl5h'\n    order by earned_epoch asc ;\n```\n\n----------------------------------------\n\nTITLE: Governance Configuration Example\nDESCRIPTION: This JSON snippet demonstrates the configuration of the governance option for Cardano DB Sync. When set to \"enable\", it activates the collection and storage of all governance-related data.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/configuration.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"governance\": \"enable\"\n```\n\n----------------------------------------\n\nTITLE: Get Amount Delegated by Epoch for Address - SQL\nDESCRIPTION: This query retrieves the amount delegated by epoch for a given stake address. It joins the `stake_address` and `epoch_stake` tables to get the stake address, epoch number, and delegated amount. The query filters by the stake address.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_24\n\nLANGUAGE: sql\nCODE:\n```\nselect stake_address.view as stake_address, epoch_stake.epoch_no, epoch_stake.amount\n    from stake_address inner join epoch_stake on stake_address.id = epoch_stake.addr_id\n    where stake_address.view = 'stake1u8mt5gqclkq0swmvzx9lvq4jgwsnx9yh030yrxwqwllu0mq2m0l4n' ;\n```\n\n----------------------------------------\n\nTITLE: Setting Up secp256k1 Library\nDESCRIPTION: Downloads and installs the secp256k1 library, a prerequisite for building the project with Cabal. The script and SHA hash are used to ensure a validated version of the library is installed.  `make install` command installs the library in system.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n./scripts/secp256k1-setup.sh ac83be33d0956faf6b7f61a60ab524ef7d6a473a\n# Check ./github/workflows/haskell.yml to validate the git sha above.\n\n# On Linux\nsudo make install\n\n# On macOS\nmake install\n```\n\n----------------------------------------\n\nTITLE: Creating Migration with use_txout_address\nDESCRIPTION: This command generates a new database migration file, specifically for the `use_txout_address` configuration. It sets the `PGPASSFILE` environment variable and includes the `--use-tx-out-address` flag to instruct the `cardano-db-tool` to create a migration based on the alternate schema variation.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/schema-management.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet cabal run cardano-db-tool -- create-migration --use-tx-out-address --mdir schema/\n```\n\n----------------------------------------\n\nTITLE: Configuring Nix to enable Flakes and IFD\nDESCRIPTION: Configures Nix to enable experimental features like Flakes and allow imports from derivations. This enables the use of modern Nix features required for the build.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing-with-nix.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/nix\ncat <<EOF | sudo tee /etc/nix/nix.conf\nexperimental-features = nix-command flakes\nallow-import-from-derivation = true\nEOF\n```\n\n----------------------------------------\n\nTITLE: SQL Deletion Queries for Ledger State Disabling\nDESCRIPTION: These SQL queries are executed by db-sync when the `ledger` flag is set to `disable` after restoring a snapshot. They remove data related to ledger state, ensuring consistency when running without full ledger tracking. This irreversibly deletes data from the database.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/configuration.md#_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nupdate redeemer set fee = null;\ndelete from reward;\ndelete from epoch_stake;\ndelete from ada_pots;\ndelete from epoch_param;\n```\n\n----------------------------------------\n\nTITLE: Reserving a Ticker using HTTP API\nDESCRIPTION: This command reserves a ticker for a stake pool using the SMASH server's HTTP API. It uses curl to send a POST request to the `/api/v1/tickers/<TICKER_NAME>` endpoint, including the pool hash in the request body and providing username/password for authentication. Replace `<USERNAME>`, `<PASSWORD>`, `<POOL_HASH>`, and `<TICKER_NAME>` with the actual values.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --verbose -u <USERNAME>:<PASSWORD> --header \"Content-Type: application/json\" \\\n  --request POST --data '{\"poolId\":\"<POOL_HASH>\"}' \\\n  http://localhost:3100/api/v1/tickers/<TICKER_NAME>\n```\n\n----------------------------------------\n\nTITLE: Create Working Directory (Bash)\nDESCRIPTION: Creates a directory named 'src' in the user's home directory and changes the current directory to it. This provides a clean working space for building dependencies and the Cardano DB Sync project.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/src\ncd ~/src\n```\n\n----------------------------------------\n\nTITLE: Install Cardano DB Sync Binary (Bash)\nDESCRIPTION: Finds the executable `cardano-db-sync` binary and copies it to the `~/.local/bin` directory, making it available in the user's path. Uses `find` to locate the executable within the project directory.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/.local/bin\ncp -p \\\n  \"$(find . -name cardano-db-sync -executable -type f)\" \\\n  ~/.local/bin/\n```\n\n----------------------------------------\n\nTITLE: Testing: Delisting a Pool using HTTP API\nDESCRIPTION: This command is an example to delist a stake pool using the SMASH server's HTTP API. It uses curl to send a PATCH request to the `/api/v1/delist` endpoint, including the pool ID in the request body.  This operation requires administrator privileges.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --verbose -u <USERNAME>:<PASSWORD> --header \"Content-Type: application/json\" \\\n  --request PATCH --data '{\"poolId\":\"5bb8126c7bacc9bab69957ed95abf46bcad346eb421b3688c61bb37f\"}' \\\n  http://localhost:3100/api/v1/delist\n```\n\n----------------------------------------\n\nTITLE: Creating a New Database Migration\nDESCRIPTION: This command generates a new database migration file, if needed. It sets the `PGPASSFILE` environment variable and then executes the `cardano-db-tool` with the `create-migration` command, specifying the schema directory. This generates a migration file if Haskell schema definition changes are detected.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/schema-management.md#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nexport PGPASSFILE=config/pgpass-mainnet\ncabal run cardano-db-tool -- create-migration --mdir schema/\n```\n\n----------------------------------------\n\nTITLE: Install libsodium (Bash)\nDESCRIPTION: Downloads, builds, and installs a specific version of libsodium required by Cardano. It involves cloning the repository, checking out a specific revision, configuring, building, and installing the library.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src\n```\n\nLANGUAGE: bash\nCODE:\n```\nREV=$(curl -L https://github.com/input-output-hk/iohk-nix/releases/latest/download/INFO \\\n  | awk '$1 == \"debian.libsodium-vrf.deb\" { rev = gensub(/.*-(.*)\\.deb/, \"\\\\1\", \"g\", $2); print rev }')\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/IntersectMBO/libsodium\ncd libsodium\ngit checkout $REV\n```\n\nLANGUAGE: bash\nCODE:\n```\n./autogen.sh\n./configure\nmake\nmake check\nsudo make install\n```\n\n----------------------------------------\n\nTITLE: Genesis Distribution Hash and Supply Log\nDESCRIPTION: This log entry shows the hash of the initial genesis distribution and the total supply of Ada at genesis. It's printed during the initial startup of the db-sync-node after reading and validating the Genesis configuration. This information is crucial for verifying the integrity of the Genesis block and ensuring accurate initial balances.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/validation.md#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nInitial genesis distribution populated. Hash 5f20df933584822601f9e3f8c024eb5eb252fe8cefb24d1317dc3d432e940ebb\nTotal genesis supply of Ada: 31112484745.000000\n```\n\n----------------------------------------\n\nTITLE: Install blst (Bash)\nDESCRIPTION: Downloads, builds, and installs the blst library, another dependency of Cardano DB Sync.  Involves cloning the repository, checking out a specific revision, building the library, and manually copying the required files to the system directories.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src\n```\n\nLANGUAGE: bash\nCODE:\n```\nREV=$(curl -L https://github.com/input-output-hk/iohk-nix/releases/latest/download/INFO \\\n  | awk '$1 == \"debian.libblst.deb\" { rev = gensub(/.*-(.*)\\.deb/, \"\\\\1\", \"g\", $2); print rev }')\n```\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/supranational/blst\ncd blst\ngit checkout $REV\n```\n\nLANGUAGE: bash\nCODE:\n```\n./build.sh\n```\n\n----------------------------------------\n\nTITLE: Creating a Symlink for PostgreSQL Unix Domain Socket\nDESCRIPTION: This command creates a symbolic link (symlink) from the expected Unix domain socket path `/var/run/postgresql/.s.PGSQL.5432` to the actual path discovered in the previous step (e.g., `/tmp/.s.PGSQL.5432`). This resolves connection issues caused by misconfiguration.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/troubleshooting.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo ln -s /tmp/.s.PGSQL.5432 /var/run/postgresql/.s.PGSQL.5432\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Smash Server (Advanced) (Bash)\nDESCRIPTION: Runs the `cardano-smash-server` executable directly by excluding the `NETWORK` environment variable. This requires passing command-line arguments for configuration.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --volume node-ipc:/node-ipc \\\n  --volume $PWD/environments/mainnet:/config \\\n  ghcr.io/IntersectMBO/cardano-db-sync:13.3.0.0 \\\n  --config /config/db-sync-config.json --port 3100\n```\n\n----------------------------------------\n\nTITLE: Building cardano-smash-server using Nix\nDESCRIPTION: This command builds the cardano-smash-server using the Nix package manager. It creates a symlink 'smash-server' to the built executable in the current directory. Nix must be installed to run this command.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnix build .#cardano-smash-server -o smash-server\n```\n\n----------------------------------------\n\nTITLE: Cloning Cardano DB Sync repository\nDESCRIPTION: Clones the Cardano DB Sync repository from GitHub. It navigates to the `src` directory, clones the repository, fetches all tags, and checks out a specific version. Replace `<VERSION>` with the actual version tag.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing-with-nix.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src\ngit clone https://github.com/IntersectMBO/cardano-db-sync.git\ncd cardano-db-sync\ngit fetch --all --tags\ngit checkout tags/<VERSION>\n```\n\n----------------------------------------\n\nTITLE: Genesis Distribution Confirmation Log\nDESCRIPTION: This log message confirms that the genesis distribution is present and correct, along with the total supply of Ada. This message is printed on each restart of the db-sync-node after validating the Genesis configuration. It assures that the genesis data remains consistent across restarts, ensuring the database's initial state is always valid.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/validation.md#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nInitial genesis distribution present and correct\nTotal genesis supply of Ada: 31112484745.000000\n```\n\n----------------------------------------\n\nTITLE: Building Cardano DB Sync Docker Image (Nix)\nDESCRIPTION: Builds a Docker image using Nix.  It requires a Linux environment with Nix installed.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nnix build .#cardano-db-sync-docker\n```\n\n----------------------------------------\n\nTITLE: Starting the PostgreSQL Daemon via Homebrew Services\nDESCRIPTION: This command starts the PostgreSQL database daemon using Homebrew services on MacOS. The daemon must be running for cardano-db-sync to connect to the database.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/troubleshooting.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbrew services start postgresql\n```\n\n----------------------------------------\n\nTITLE: Running http-get-json-metadata with Valid URL and Hash (cabal)\nDESCRIPTION: This command demonstrates a successful execution of `http-get-json-metadata` with a valid URL and corresponding hash, showcasing the successful retrieval and verification of off-chain metadata.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/pool-offchain-data.md#_snippet_3\n\nLANGUAGE: cabal\nCODE:\n```\n> cabal run -- http-get-json-metadata https://git.io/Jt01O 54796c0c86228b9c86a1982e76441b293d01b7a9cd1309d43ae95123a8ad8933\n```\n\n----------------------------------------\n\nTITLE: Cloning Cardano Node Repository\nDESCRIPTION: Clones the cardano-node repository from GitHub.  This is a prerequisite for running the db-sync node, which depends on a locally running Cardano node. The repository URL is specified in the command. It's crucial for setting up the Cardano network environment.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/IntersectMBO/cardano-node\n```\n\n----------------------------------------\n\nTITLE: Running Unit/Property Tests with Cabal\nDESCRIPTION: These commands run the unit and property tests for the Cardano DB Sync project using Cabal. These tests verify the correctness of individual components and properties of the code.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncabal test cardano-db-sync\n```\n\nLANGUAGE: Shell\nCODE:\n```\ncabal test cardano-db:test:test\n```\n\n----------------------------------------\n\nTITLE: Locking Hackage Nix Input\nDESCRIPTION: This command updates the Nix flake lock file for the Hackage input. This ensures that the Nix build uses a consistent set of dependencies from Hackage.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_13\n\nLANGUAGE: Nix\nCODE:\n```\nnix flake lock --update-input hackageNix\n```\n\n----------------------------------------\n\nTITLE: Set GHC Version (Bash)\nDESCRIPTION: Specifies the GHC version to be used for building Cardano DB Sync by adding it to the `cabal.project.local` file. Prevents the build from defaulting to a different GHC version.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\necho \"with-compiler: ghc-8.10.7\" >> cabal.project.local\n```\n\n----------------------------------------\n\nTITLE: Installing Cardano DB Sync into Nix profile\nDESCRIPTION: Installs the Cardano DB Sync executable into the user's Nix profile. This makes the `cardano-db-sync` command available in the user's shell.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing-with-nix.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnix profile install .\n```\n\n----------------------------------------\n\nTITLE: Adding Binary Cache for Nix\nDESCRIPTION: Adds binary caches to Nix configuration. This allows Nix to download pre-built binaries, significantly speeding up the build process by avoiding recompilation of dependencies.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing-with-nix.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /etc/nix\ncat <<EOF | sudo tee -a /etc/nix/nix.conf\nsubstituters = https://cache.nixos.org https://cache.iog.io\ntrusted-public-keys = cache.iog.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=\nEOF\n```\n\n----------------------------------------\n\nTITLE: Updating Cabal Package Lists\nDESCRIPTION: This command updates the Cabal package lists from Hackage and the Cardano Haskell Package repository. This ensures that Cabal has the latest information about available packages and their versions.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_12\n\nLANGUAGE: Shell\nCODE:\n```\ncabal update\n```\n\n----------------------------------------\n\nTITLE: Get Transaction Fee by Hash (SQL)\nDESCRIPTION: This SQL query retrieves the transaction fee for a specified transaction hash from the 'tx' table.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\nselect tx.id, tx.fee from tx\n    where tx.hash = '\\xf9c0997afc8159dbe0568eadf0823112e0cc29cd097c8dc939ff44c372388bc0' ;\n```\n\n----------------------------------------\n\nTITLE: Install blst Library Files (Bash)\nDESCRIPTION: Manually installs the blst library files by creating a pkg-config file and copying the header files, library, and setting proper permissions. Allows dependent projects to find and link against the installed blst library.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ncat > libblst.pc << EOF\nprefix=/usr/local\nexec_prefix=\\${prefix}\nlibdir=\\${exec_prefix}/lib\nincludedir=\\${prefix}/include\n\nName: libblst\nDescription: Multilingual BLS12-381 signature library\nURL: https://github.com/supranational/blst\nVersion: 0.3.10\nCflags: -I\\${includedir}\nLibs: -L\\${libdir} -lblst\nEOF\n\nsudo cp libblst.pc /usr/local/lib/pkgconfig/\nsudo cp bindings/blst_aux.h bindings/blst.h bindings/blst.hpp  /usr/local/include/\nsudo cp libblst.a /usr/local/lib\nsudo chmod 644 \\\n  /usr/local/lib/libblst.* \\\n  /usr/local/include/{blst.*,blst_aux.h}\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL via Homebrew\nDESCRIPTION: This command installs the PostgreSQL database management system using the Homebrew package manager on MacOS. It is a prerequisite for running cardano-db-sync if PostgreSQL is not already installed.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/troubleshooting.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install postgres\n```\n\n----------------------------------------\n\nTITLE: Install PostgreSQL 15 via APT\nDESCRIPTION: This command uses the APT package manager to install PostgreSQL version 15.  It assumes the PostgreSQL APT repository is already configured.  No specific input is expected beyond the sudo password if required. The output is the installation of the postgresql-15 package.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/upgrading-postgresql.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt install postgresql-15\n```\n\n----------------------------------------\n\nTITLE: Navigating to DB Sync Directory\nDESCRIPTION: Changes the current directory to the cardano-db-sync directory.  This command is necessary to execute subsequent commands within the project's context.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/building-running.md#_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd cardano-db-sync\n```\n\n----------------------------------------\n\nTITLE: Checking PostgreSQL Daemon Status via Homebrew Services\nDESCRIPTION: This command checks the status of services managed by Homebrew, including PostgreSQL. It verifies that the PostgreSQL daemon is running and provides user and plist information.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/troubleshooting.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbrew services\n```\n\n----------------------------------------\n\nTITLE: Running Cardano Chain Generation Tests\nDESCRIPTION: This command runs the cardano-chain-gen test suite to verify that a new database migration has not introduced any regressions. It navigates to the `cardano-chain-gen` directory and executes the test suite using `cabal run`.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/schema-management.md#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ./cardano-chain-gen\ncabal run test:cardano-chain-gen\n```\n\n----------------------------------------\n\nTITLE: Install Xcode Command Line Tools (Bash)\nDESCRIPTION: Installs Xcode command line tools if the user encounters missing stdlib.h on macOS. Necessary for compiling native code on macOS systems. Command will trigger the installation prompt for Xcode command line tools.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nxcode-select --install\n```\n\n----------------------------------------\n\nTITLE: Delisting a Pool using PATCH Request\nDESCRIPTION: This command delists a pool by sending a PATCH request to the `/api/v1/delist` endpoint. It requires Basic Authentication with a username and password. The request body includes the `poolId` to be delisted.  The server must be running at `localhost:3100` and configured for Basic Authentication.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u <USERNAME>:<PASSWORD> -X PATCH -v http://localhost:3100/api/v1/delist -H 'content-type: application/json' -d '{\"poolId\": \"8517fa7042cb9494818861c53c87780b4975c0bd402e3ed85168aa66\"}'\n```\n\n----------------------------------------\n\nTITLE: Restoring Cardano DB Sync Snapshot (Bash)\nDESCRIPTION: Restores a snapshot to the PostgreSQL database using `RESTORE_SNAPSHOT` environment variable.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --env NETWORK=mainnet \\\n  --env POSTGRES_HOST=postgres \\\n  --env POSTGRES_PORT=5432 \\\n  --env RESTORE_SNAPSHOT=/data/db-sync-snapshot-schema-13.3-block-10611621-x86_64.tgz \\\n  --volume db-sync-data:/var/lib/cexplorer \\\n  --volume node-ipc:/node-ipc \\\n  --volume $PWD:/data\n  ghcr.io/IntersectMBO/cardano-db-sync:13.3.0.0\n```\n\n----------------------------------------\n\nTITLE: Get Tagged Genesis Addresses - SQL\nDESCRIPTION: This query retrieves and tags genesis addresses with their origin (e.g., 'Test Ada', 'Development Pool', 'Pre-Sale'). It joins tables related to blocks, transactions, and outputs, and uses a case statement to determine the origin based on address and value.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_27\n\nLANGUAGE: sql\nCODE:\n```\nselect\n    genesis_output.address as address,\n    floor (genesis_output.value / 1000000) as ada,\n    redemption_block.time as redeemed_at,\n    cast ((case\n\t\t\t  when genesis_output.value = 1000000 then 'Test Ada'\n\t\t      when genesis_output.address in (\n\t\t\t\t'Ae2tdPwUPEZKQuZh2UndEoTKEakMYHGNjJVYmNZgJk2qqgHouxDsA5oT83n',\n\t\t\t\t'Ae2tdPwUPEZGcVv9qJ3KSTx5wk3dHKNn6G3a3eshzqX2y3N9LzL3ZTBEApq',\n\t\t\t\t'Ae2tdPwUPEZ9dH9VC4iVXZRNYe5HGc73AKVMYHExpgYBmDMkgCUgnJGqqqq'\n\t\t\t\t) then 'Development Pool'\n\t\t\t  else 'Pre-Sale'\n\t\t\t  end) as varchar) as origin\n    from block as genesis_block\n    inner join tx as genesis_tx on genesis_tx.block_id = genesis_block.id\n    inner join tx_out as genesis_output on genesis_output.tx_id = genesis_tx.id\n    left join tx_in as redemption_input on redemption_input.tx_out_id = genesis_tx.id\n    left join tx as redemption_tx on redemption_tx.id = redemption_input.tx_in_id\n    left join block as redemption_block on redemption_block.id = redemption_tx.block_id\n    where genesis_block.epoch_no is null ;\n```\n\n----------------------------------------\n\nTITLE: Testing: Fetching Metadata using HTTP API\nDESCRIPTION: This command is an example to fetch stake pool metadata using the SMASH server's HTTP API. It uses curl to send a GET request to the specified endpoint, including the pool ID and metadata hash.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\ncurl --verbose --header \"Content-Type: application/json\" \\\n  --request GET http://localhost:3100/api/v1/metadata/5bb8126c7bacc9bab69957ed95abf46bcad346eb421b3688c61bb37f/4b2221a0ac0b0197308323080ba97e3e453f8625393d30f96eebe0fca4cb7335\n```\n\n----------------------------------------\n\nTITLE: Running http-get-json-metadata with URL (cabal)\nDESCRIPTION: This command demonstrates how to run the `http-get-json-metadata` tool with only the URL of the off-chain metadata. The tool will fetch the JSON data from the provided URL.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/pool-offchain-data.md#_snippet_0\n\nLANGUAGE: cabal\nCODE:\n```\n> cabal run -- http-get-json-metadata <url>\n```\n\n----------------------------------------\n\nTITLE: Get All Mint Scripts (SQL)\nDESCRIPTION: This SQL query retrieves information about all mint scripts used in transactions. It joins the `redeemer`, `multi_asset`, and `ma_tx_mint` tables to find redeemers with the purpose 'mint'. The query selects transaction ID, unit memory, unit steps, redeemer fee, purpose, policy, name, and quantity of the minted asset.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_32\n\nLANGUAGE: sql\nCODE:\n```\nselect redeemer.tx_id as tx_id, redeemer.unit_mem, redeemer.unit_steps, redeemer.fee as redeemer_fee, redeemer.purpose, multi_asset.policy, multi_asset.name, ma_tx_mint.quantity\n  from redeemer\n    join multi_asset on redeemer.script_hash = multi_asset.policy\n    join ma_tx_mint on ma_tx_mint.ident = multi_asset.id and redeemer.tx_id = ma_tx_mint.tx_id\n      where purpose = 'mint';\n```\n\n----------------------------------------\n\nTITLE: Running HLint and Shellcheck Checks with Nix\nDESCRIPTION: These commands run HLint (Haskell static code analysis) and Shellcheck (shell script analysis) using Nix.  They ensure code quality and adherence to best practices.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_11\n\nLANGUAGE: Nix\nCODE:\n```\nnix build .#checks.<cpu_arch>.hlint\n```\n\nLANGUAGE: Nix\nCODE:\n```\nnix build .#checks.<cpu_arch>.shellcheck\n```\n\n----------------------------------------\n\nTITLE: Set Environment Variables for libsodium (Bash)\nDESCRIPTION: Sets environment variables to include the libsodium library and pkg-config files in the system's search paths. Allows the system to find the installed libsodium when building dependent projects.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport LD_LIBRARY_PATH=\"/usr/local/lib:$LD_LIBRARY_PATH\"\nexport PKG_CONFIG_PATH=\"/usr/local/lib/pkgconfig:$PKG_CONFIG_PATH\"\n```\n\n----------------------------------------\n\nTITLE: Building Profiled DB Sync with Nix\nDESCRIPTION: These commands build profiled versions of Cardano DB Sync and cardano-smash-server using Nix. These builds include profiling information for performance analysis.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_5\n\nLANGUAGE: Nix\nCODE:\n```\nnix build .#profiled.cardano-db-sync\n```\n\nLANGUAGE: Nix\nCODE:\n```\nnix build .#profiled.cardano-smash-server\n```\n\n----------------------------------------\n\nTITLE: Checking the version of Cardano DB Sync\nDESCRIPTION: Checks the installed version of Cardano DB Sync. This confirms that the installation was successful and allows verifying the installed version.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing-with-nix.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncardano-db-sync --version\n```\n\n----------------------------------------\n\nTITLE: Loading and Running Built Docker Image (Bash)\nDESCRIPTION: Loads a previously built docker image from the `result` file and runs the image.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndocker load < result\ndocker run cardano-db-sync\n```\n\n----------------------------------------\n\nTITLE: Get Block Number by Pool in Epoch - SQL\nDESCRIPTION: This query retrieves the block number of blocks created in a specific epoch by a given pool. It joins the `block`, `slot_leader`, and `pool_hash` tables to get the block number, epoch number, and pool view. The query filters by the epoch number and pool view.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_20\n\nLANGUAGE: sql\nCODE:\n```\nselect block.block_no, block.epoch_no, pool_hash.view as pool_view\n    from block inner join slot_leader on block.slot_leader_id = slot_leader.id\n    inner join pool_hash on slot_leader.pool_hash_id = pool_hash.id\n    where block.epoch_no = 220\n    and pool_hash.view = 'pool137x32lrkprphrd0aa8x4jqz98z6lc0wawlc88hdjeps4qe408ad' ;\n```\n\n----------------------------------------\n\nTITLE: Reserving a Ticker for a Pool using POST Request\nDESCRIPTION: This command reserves a ticker for a specific pool by sending a POST request to the `/api/v1/tickers/{TICKER}` endpoint. The request body contains the `poolHash` for which the ticker is being reserved.  The server must be running at `localhost:3100` and configured to handle ticker reservations.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncurl --verbose --header \"Content-Type: application/json\" \\\n  --request POST --data '{\"poolHash\":\"2560993cf1b6f3f1ebde429f062ce48751ed6551c2629ce62e4e169f140a3524\"}' \\\n  http://localhost:3100/api/v1/tickers/SALAD\n```\n\n----------------------------------------\n\nTITLE: Entering Nix Development Shell\nDESCRIPTION: This command enters a Nix development shell, which provides the complete toolchain needed to build the Cardano DB Sync repository artifacts. It requires Nix to be installed and configured.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: Nix\nCODE:\n```\nnix develop .\n```\n\n----------------------------------------\n\nTITLE: Creating Postgres Password File (Bash)\nDESCRIPTION: Creates a `pgpass-test` file containing the credentials to the postgresql test database, and sets the permissions.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\necho \"localhost:5432:cexplorer:postgres:v8hlDV0yMAHHlIurYupj\" > config/pgpass-test\nchmod 0600 config/pgpass-test\nexport PGPASSFILE=$PWD/config/pgpass-test\n```\n\n----------------------------------------\n\nTITLE: Configuration: Tx Out object example (JSON)\nDESCRIPTION: This JSON snippet provides an example of configuring the `tx_out` property within the `insert_options`.  The values for `tx_out` determine how transaction outputs are handled.  This example shows setting `value` to \"consumed\", `force_tx_in` to false, and `use_address_table` to true, which affects the data stored in `tx_out` and related tables.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/configuration.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"tx_out\": {\n  \"value\": \"consumed\",\n  \"force_tx_in\": false,\n  \"use_address_table\": true,\n}\n```\n\n----------------------------------------\n\nTITLE: Configure OpenSSL Paths for macOS (Bash)\nDESCRIPTION: Creates symbolic links to OpenSSL libraries and headers for macOS systems that use Homebrew.  This ensures the build system can find the OpenSSL installation.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nsudo mkdir -p /usr/local/opt/openssl\nsudo ln -s /opt/homebrew/opt/openssl@3/lib /usr/local/opt/openssl/lib\nsudo ln -s /opt/homebrew/opt/openssl@3/include /usr/local/opt/openssl/include\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Pre-commit Hook Symlink\nDESCRIPTION: This shell command creates a symbolic link named 'pre-commit' in the '.git/hooks/' directory of the 'cardano-db-sync' Git repository. This link points to the 'scripts/git-pre-commit-hook' script, making it a Git pre-commit hook that executes before each commit.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/hlint-stylish-haskell.md#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n(cd .git/hooks/ && ln -s ../../scripts/git-pre-commit-hook pre-commit)\n```\n\n----------------------------------------\n\nTITLE: Uninstall llvm@13 (Bash)\nDESCRIPTION: Uninstalls llvm@13 if it clashes with x-code. This step addresses potential conflicts between Homebrew-installed LLVM and Xcode command line tools on macOS.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbrew uninstall llvm@13\n```\n\n----------------------------------------\n\nTITLE: Building DB Sync with Cabal\nDESCRIPTION: This command builds the Cardano DB Sync project using Cabal within the Nix development shell. It compiles all project artifacts.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncabal build all\n```\n\n----------------------------------------\n\nTITLE: Fetching Unregistered Pools with GET Request\nDESCRIPTION: This command retrieves a list of unregistered pools by sending a GET request to the `/api/v1/retired` endpoint. It requires the server to be running and accessible at `localhost:3100`.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ncurl --verbose --header \"Content-Type: application/json\" http://localhost:3100/api/v1/retired\n```\n\n----------------------------------------\n\nTITLE: Incrementing Cabal Cache Version\nDESCRIPTION: This configuration snippet increments the CABAL_CACHE_VERSION in the haskell.yml workflow file. This invalidates the Cabal cache, forcing a rebuild with the updated dependencies. It ensures that the CI/CD pipeline uses the latest packages.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_15\n\nLANGUAGE: YAML\nCODE:\n```\nenv:\n  # Increment this value to \"invalidate\" the cabal cache. Be sure to do this\n  # after updating dependencies (Hackage or chap)\n  CABAL_CACHE_VERSION: 2\n```\n\n----------------------------------------\n\nTITLE: Running Executable with Profiling\nDESCRIPTION: This command runs the built executable with profiling enabled, generating profiling reports for performance analysis. It requires a profiled build of the application.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\n./result/cardano-db-sync <args> +RTS -p -h -RTS\n```\n\n----------------------------------------\n\nTITLE: Enlisting a Pool using PATCH Request\nDESCRIPTION: This command enlists a previously delisted pool by sending a PATCH request to the `/api/v1/enlist` endpoint. Basic Authentication is required with a username and password. The request body contains the `poolId` to be enlisted. The server must be running at `localhost:3100` and configured for Basic Authentication.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncurl -u <USERNAME>:<PASSWORD> -X PATCH -v http://localhost:3100/api/v1/enlist -H 'content-type: application/json' -d '{\"poolId\": \"8517fa7042cb9494818861c53c87780b4975c0bd402e3ed85168aa66\"}'\n```\n\n----------------------------------------\n\nTITLE: Running Tests (Bash)\nDESCRIPTION: Runs the cardano-db tests.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\ncabal test cardano-db\n```\n\n----------------------------------------\n\nTITLE: Running Cardano DB Sync (Advanced) (Bash)\nDESCRIPTION: Runs the `cardano-db-sync` executable directly by excluding the `NETWORK` environment variable. This requires passing command-line arguments for configuration.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ndocker run \\\n  --volume db-sync-data:/var/lib/cexplorer \\\n  --volume node-ipc:/node-ipc \\\n  --volume $PWD/environments/mainnet:/config \\\n  ghcr.io/IntersectMBO/cardano-db-sync:13.3.0.0 \\\n  run --config /config/db-sync-config.json --socket-path /node-ipc/node.socket\n```\n\n----------------------------------------\n\nTITLE: Enabling Direnv with Flake\nDESCRIPTION: These commands enable direnv, a tool that loads environment variables based on the current directory. It is used with Nix to provide the correct Haskell language server.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\necho \"use flake\" > .envrc\n```\n\nLANGUAGE: Shell\nCODE:\n```\ndirenv allow\n```\n\n----------------------------------------\n\nTITLE: Formatting Haskell Code with Fourmolu\nDESCRIPTION: This command formats all modified Haskell files using Fourmolu, ensuring consistent code style. The Fourmolu executable is provided by the Nix development shell.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_9\n\nLANGUAGE: Shell\nCODE:\n```\n./script/fourmolize.sh\n```\n\n----------------------------------------\n\nTITLE: Running http-get-json-metadata with URL and Hash (cabal)\nDESCRIPTION: This command shows how to run the `http-get-json-metadata` tool with both the URL and the expected hash of the off-chain metadata. This allows for verification of the fetched data's integrity.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/pool-offchain-data.md#_snippet_1\n\nLANGUAGE: cabal\nCODE:\n```\n> cabal run -- http-get-json-metadata <url> <hash>\n```\n\n----------------------------------------\n\nTITLE: Locking CHaP Nix Input\nDESCRIPTION: This command updates the Nix flake lock file for the Cardano Haskell Package repository (CHaP) input. This ensures a consistent set of dependencies when using packages from CHaP.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_16\n\nLANGUAGE: Nix\nCODE:\n```\nnix flake lock --update-input CHaP\n```\n\n----------------------------------------\n\nTITLE: Running a Subset of Tests with Cabal\nDESCRIPTION: This command runs a specific subset of tests based on a pattern using Cabal. It enables focusing on particular test cases.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ncabal run cardano-chain-gen:test:cardano-chaingen -- --pattern \"Babbage unit tests.consumed-tx-out\"\n```\n\n----------------------------------------\n\nTITLE: Creating a working directory\nDESCRIPTION: Creates a directory named `src` in the user's home directory and navigates into it. This directory is used for building the Cardano DB Sync.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing-with-nix.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p ~/src\ncd ~/src\n```\n\n----------------------------------------\n\nTITLE: Stopping Test Containers (Bash)\nDESCRIPTION: Stops and removes the Docker containers created for testing, using the `docker-test.yml` configuration file.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/docker.md#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose -f docker-test.yml down\n```\n\n----------------------------------------\n\nTITLE: Starting a Local Hoogle Server\nDESCRIPTION: This command starts a local Hoogle server with all dependencies using Nix. Hoogle is a Haskell API search engine.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_8\n\nLANGUAGE: Nix\nCODE:\n```\nnix develop .#ghc96 --command hoogle server --local --port 8000\n```\n\n----------------------------------------\n\nTITLE: Navigate to DB Sync Directory - Bash\nDESCRIPTION: Changes the current directory to the `cardano-db-sync` repository directory. This assumes the user has cloned the repository to `~/src/cardano-db-sync`. This step is necessary to execute `cardano-db-sync` from within the project directory.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/running.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd ~/src/cardano-db-sync\n```\n\n----------------------------------------\n\nTITLE: Source Repository Package Stanza\nDESCRIPTION: This example shows how to use a source-repository-package stanza in cabal.project to pull in an unreleased version of a dependency directly from a Git repository. The stanza specifies the repository type, location, tag, and subdirectory.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_17\n\nLANGUAGE: Haskell\nCODE:\n```\nsource-repository-package\n  type: git\n  location: https://github.com/IntersectMBO/cardano-node\n  tag: 4a18841e7df0d10edab98a612c80217ea49a5c11\n  --sha256: sha256-T5kZqlzTnaain3rypUwhpmY3YcZoDtbSqEQADeucJH4=\n  subdir:\n    cardano-node\n    cardano-submit-api\n    trace-dispatcher\n    trace-forward\n    trace-resources\n```\n\n----------------------------------------\n\nTITLE: Running Fourmolu Checks with Nix\nDESCRIPTION: This command runs Fourmolu checks using Nix to verify that the Haskell code is properly formatted. It uses the nix build system to execute the formatting checks.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_10\n\nLANGUAGE: Nix\nCODE:\n```\nnix build .#checks.<cpu_arch>.fourmolu\n```\n\n----------------------------------------\n\nTITLE: Get Blocks with Zero Transactions and Pool Info (SQL)\nDESCRIPTION: This SQL query retrieves information about blocks that have zero transactions, along with the pools that forged them. It joins the `block`, `slot_leader`, `pool_hash`, `pool_update`, `pool_metadata_ref` and `offchain_pool_data` tables to find blocks with `tx_count = 0`. The query selects the block hash, epoch number, transaction count, pool hash, pledge, active epoch number, URL, and ticker name for these blocks.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_34\n\nLANGUAGE: sql\nCODE:\n```\nselect distinct on(block.hash) block.hash as block_hash , epoch_no, tx_count, pool_hash.hash_raw as pool_hash,\n                               pool_update.pledge, pool_update.active_epoch_no, pool_metadata_ref.url, offchain_pool_data.ticker_name\n  from block join slot_leader on block.slot_leader_id = slot_leader.id\n    join pool_hash on slot_leader.pool_hash_id = pool_hash.id\n    join pool_update on pool_update.hash_id = pool_hash.id\n    left join pool_metadata_ref on pool_update.meta_id = pool_metadata_ref.id\n    left join offchain_pool_data on offchain_pool_data.pmr_id = pool_metadata_ref.id\n  where tx_count = 0 and epoch_no > 150\n  order by block.hash, pool_update.active_epoch_no desc;\n```\n\n----------------------------------------\n\nTITLE: Connect to PostgreSQL Database\nDESCRIPTION: This command allows connecting to the 'cexplorer' PostgreSQL database using the 'psql' executable. It utilizes the PGPASSFILE environment variable to specify the location of the password file, enabling secure authentication.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nPGPASSFILE=config/pgpass-mainnet psql cexplorer\n```\n\n----------------------------------------\n\nTITLE: Fetching Pool Errors with Date Filter\nDESCRIPTION: This command fetches pool errors filtered by a specific date, using the `fromDate` parameter. The date format is DD.MM.YYYY.  The server must be running at `localhost:3100` and the `fromDate` parameter must be in the correct format to be parsed successfully.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/smash.md#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nhttp://localhost:3100/api/v1/errors/6b6164af70861c5537cc9c8e50fdae35139ca2c8c6fbb42e8b7e6bfb?fromDate=13.10.2020\n```\n\n----------------------------------------\n\nTITLE: Set Homebrew OpenSSL Flag for M1 Mac (Bash)\nDESCRIPTION: Sets the `-homebrew-openssl` flag for the `HsOpenSSL` package in the `cabal.project.local` file when building on an M1 Mac.  Required to correctly link against OpenSSL installed via Homebrew.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/installing.md#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\necho \"package HsOpenSSL\" >> cabal.project.local\necho \"  flags: -homebrew-openssl\" >> cabal.project.local\necho \"\" >> cabal.project.local\n```\n\n----------------------------------------\n\nTITLE: Remove Old PostgreSQL Version\nDESCRIPTION: These commands remove the old PostgreSQL version after a successful upgrade.  The script `delete-old-cluster.sh` is assumed to be present in the /tmp directory. Requires root privileges. Removes postgresql using apt.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/upgrading-postgresql.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nsudo -u postgres ./delete-old-cluster.sh\nsudo apt remove postgresql\n```\n\n----------------------------------------\n\nTITLE: Locking Haskell Nix Input\nDESCRIPTION: This command updates the Nix flake lock file for the haskellNix input. This is sometimes required when updating Hackage or CHaP.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/CONTRIBUTING.rst#_snippet_14\n\nLANGUAGE: Nix\nCODE:\n```\nnix flake lock --update-input haskellNix\n```\n\n----------------------------------------\n\nTITLE: Get Transaction Details for Voting Registration - SQL\nDESCRIPTION: This query retrieves the transaction ID, block ID, and output address for a voting registration transaction.  It joins the `tx` and `tx_out` tables. The query filters by the transaction hash.\nSOURCE: https://github.com/emurgo/cardano-db-sync/blob/master/doc/interesting-queries.md#_snippet_22\n\nLANGUAGE: sql\nCODE:\n```\nselect tx.id as tx_id, tx.block_id as tx_block_id, tx_out.address as tx_out_address\n    from tx inner join tx_out on tx.id = tx_out.tx_id\n    where tx.hash = '\\x9053a4cf0c6c9fb29792c78e688c5915a02909d0073371d8fff1abba0bed3065';\n```"
  }
]