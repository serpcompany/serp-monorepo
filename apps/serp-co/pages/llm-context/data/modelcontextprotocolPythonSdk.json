[
  {
    "owner": "modelcontextprotocol",
    "repo": "python-sdk",
    "content": "TITLE: Implementing MCP Client in Python\nDESCRIPTION: Shows how to create an MCP client using the SDK's high-level client interface. It demonstrates connecting to an MCP server, initializing the connection, and using various MCP primitives like prompts, resources, and tools.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp import ClientSession, StdioServerParameters, types\nfrom mcp.client.stdio import stdio_client\n\n# Create server parameters for stdio connection\nserver_params = StdioServerParameters(\n    command=\"python\",  # Executable\n    args=[\"example_server.py\"],  # Optional command line arguments\n    env=None,  # Optional environment variables\n)\n\n\n# Optional: create a sampling callback\nasync def handle_sampling_message(\n    message: types.CreateMessageRequestParams,\n) -> types.CreateMessageResult:\n    return types.CreateMessageResult(\n        role=\"assistant\",\n        content=types.TextContent(\n            type=\"text\",\n            text=\"Hello, world! from model\",\n        ),\n        model=\"gpt-3.5-turbo\",\n        stopReason=\"endTurn\",\n    )\n\n\nasync def run():\n    async with stdio_client(server_params) as (read, write):\n        async with ClientSession(\n            read, write, sampling_callback=handle_sampling_message\n        ) as session:\n            # Initialize the connection\n            await session.initialize()\n\n            # List available prompts\n            prompts = await session.list_prompts()\n\n            # Get a prompt\n            prompt = await session.get_prompt(\n                \"example-prompt\", arguments={\"arg1\": \"value\"}\n            )\n\n            # List available resources\n            resources = await session.list_resources()\n\n            # List available tools\n            tools = await session.list_tools()\n\n            # Read a resource\n            content, mime_type = await session.read_resource(\"file://some/path\")\n\n            # Call a tool\n            result = await session.call_tool(\"tool-name\", arguments={\"arg1\": \"value\"})\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: Implementing SQLite Explorer with MCP in Python\nDESCRIPTION: Demonstrates a more complex MCP server integrating with SQLite. It provides a resource for schema retrieval and a tool for executing SQL queries safely.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_19\n\nLANGUAGE: python\nCODE:\n```\nimport sqlite3\n\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"SQLite Explorer\")\n\n\n@mcp.resource(\"schema://main\")\ndef get_schema() -> str:\n    \"\"\"Provide the database schema as a resource\"\"\"\n    conn = sqlite3.connect(\"database.db\")\n    schema = conn.execute(\"SELECT sql FROM sqlite_master WHERE type='table'\").fetchall()\n    return \"\\n\".join(sql[0] for sql in schema if sql[0])\n\n\n@mcp.tool()\ndef query_data(sql: str) -> str:\n    \"\"\"Execute SQL queries safely\"\"\"\n    conn = sqlite3.connect(\"database.db\")\n    try:\n        result = conn.execute(sql).fetchall()\n        return \"\\n\".join(str(row) for row in result)\n    except Exception as e:\n        return f\"Error: {str(e)}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a FastMCP Server with Lifespan Support\nDESCRIPTION: Advanced example of creating an MCP server with lifespan management for database connections and type-safe context.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Add lifespan support for startup/shutdown with strong typing\nfrom contextlib import asynccontextmanager\nfrom collections.abc import AsyncIterator\nfrom dataclasses import dataclass\n\nfrom fake_database import Database  # Replace with your actual DB type\n\nfrom mcp.server.fastmcp import Context, FastMCP\n\n# Create a named server\nmcp = FastMCP(\"My App\")\n\n# Specify dependencies for deployment and development\nmcp = FastMCP(\"My App\", dependencies=[\"pandas\", \"numpy\"])\n\n\n@dataclass\nclass AppContext:\n    db: Database\n\n\n@asynccontextmanager\nasync def app_lifespan(server: FastMCP) -> AsyncIterator[AppContext]:\n    \"\"\"Manage application lifecycle with type-safe context\"\"\"\n    # Initialize on startup\n    db = await Database.connect()\n    try:\n        yield AppContext(db=db)\n    finally:\n        # Cleanup on shutdown\n        await db.disconnect()\n\n\n# Pass lifespan to server\nmcp = FastMCP(\"My App\", lifespan=app_lifespan)\n\n\n# Access type-safe lifespan context in tools\n@mcp.tool()\ndef query_db(ctx: Context) -> str:\n    \"\"\"Tool that uses initialized resources\"\"\"\n    db = ctx.request_context.lifespan_context.db\n    return db.query()\n```\n\n----------------------------------------\n\nTITLE: Creating a Simple MCP Server with Calculator Tool\nDESCRIPTION: Example code for creating a basic MCP server that provides an addition tool and a dynamic greeting resource.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# server.py\nfrom mcp.server.fastmcp import FastMCP\n\n# Create an MCP server\nmcp = FastMCP(\"Demo\")\n\n\n# Add an addition tool\n@mcp.tool()\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two numbers\"\"\"\n    return a + b\n\n\n# Add a dynamic greeting resource\n@mcp.resource(\"greeting://{name}\")\ndef get_greeting(name: str) -> str:\n    \"\"\"Get a personalized greeting\"\"\"\n    return f\"Hello, {name}!\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Echo Server with MCP in Python\nDESCRIPTION: Creates a simple MCP server with echo functionality, demonstrating the use of resources, tools, and prompts. Each function showcases a different MCP primitive.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"Echo\")\n\n\n@mcp.resource(\"echo://{message}\")\ndef echo_resource(message: str) -> str:\n    \"\"\"Echo a message as a resource\"\"\"\n    return f\"Resource echo: {message}\"\n\n\n@mcp.tool()\ndef echo_tool(message: str) -> str:\n    \"\"\"Echo a message as a tool\"\"\"\n    return f\"Tool echo: {message}\"\n\n\n@mcp.prompt()\ndef echo_prompt(message: str) -> str:\n    \"\"\"Create an echo prompt\"\"\"\n    return f\"Please process this message: {message}\"\n```\n\n----------------------------------------\n\nTITLE: Implementing MCP Tools for Computations and Side Effects\nDESCRIPTION: Examples of defining synchronous and asynchronous tools in an MCP server to perform calculations and API calls.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.tool()\ndef calculate_bmi(weight_kg: float, height_m: float) -> float:\n    \"\"\"Calculate BMI given weight in kg and height in meters\"\"\"\n    return weight_kg / (height_m**2)\n\n\n@mcp.tool()\nasync def fetch_weather(city: str) -> str:\n    \"\"\"Fetch current weather for a city\"\"\"\n    async with httpx.AsyncClient() as client:\n        response = await client.get(f\"https://api.weather.com/{city}\")\n        return response.text\n```\n\n----------------------------------------\n\nTITLE: Implementing Low-Level MCP Server with Lifespan in Python\nDESCRIPTION: Shows how to use the low-level server implementation for more control, including lifecycle management through the lifespan API. It demonstrates initializing and cleaning up database connections.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nfrom contextlib import asynccontextmanager\nfrom collections.abc import AsyncIterator\n\nfrom fake_database import Database  # Replace with your actual DB type\n\nfrom mcp.server import Server\n\n\n@asynccontextmanager\nasync def server_lifespan(server: Server) -> AsyncIterator[dict]:\n    \"\"\"Manage server startup and shutdown lifecycle.\"\"\"\n    # Initialize resources on startup\n    db = await Database.connect()\n    try:\n        yield {\"db\": db}\n    finally:\n        # Clean up on shutdown\n        await db.disconnect()\n\n\n# Pass lifespan to server\nserver = Server(\"example-server\", lifespan=server_lifespan)\n\n\n# Access lifespan context in handlers\n@server.call_tool()\nasync def query_db(name: str, arguments: dict) -> list:\n    ctx = server.request_context\n    db = ctx.lifespan_context[\"db\"]\n    return await db.query(arguments[\"query\"])\n```\n\n----------------------------------------\n\nTITLE: Implementing Low-Level MCP Server with Stdio Communication in Python\nDESCRIPTION: Demonstrates a low-level MCP server implementation using stdio for communication. It includes handlers for listing and getting prompts, and shows how to set up the server with initialization options.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nimport mcp.server.stdio\nimport mcp.types as types\nfrom mcp.server.lowlevel import NotificationOptions, Server\nfrom mcp.server.models import InitializationOptions\n\n# Create a server instance\nserver = Server(\"example-server\")\n\n\n@server.list_prompts()\nasync def handle_list_prompts() -> list[types.Prompt]:\n    return [\n        types.Prompt(\n            name=\"example-prompt\",\n            description=\"An example prompt template\",\n            arguments=[\n                types.PromptArgument(\n                    name=\"arg1\", description=\"Example argument\", required=True\n                )\n            ],\n        )\n    ]\n\n\n@server.get_prompt()\nasync def handle_get_prompt(\n    name: str, arguments: dict[str, str] | None\n) -> types.GetPromptResult:\n    if name != \"example-prompt\":\n        raise ValueError(f\"Unknown prompt: {name}\")\n\n    return types.GetPromptResult(\n        description=\"Example prompt\",\n        messages=[\n            types.PromptMessage(\n                role=\"user\",\n                content=types.TextContent(type=\"text\", text=\"Example prompt text\"),\n            )\n        ],\n    )\n\n\nasync def run():\n    async with mcp.server.stdio.stdio_server() as (read_stream, write_stream):\n        await server.run(\n            read_stream,\n            write_stream,\n            InitializationOptions(\n                server_name=\"example\",\n                server_version=\"0.1.0\",\n                capabilities=server.get_capabilities(\n                    notification_options=NotificationOptions(),\n                    experimental_capabilities={},\n                ),\n            ),\n        )\n\n\nif __name__ == \"__main__\":\n    import asyncio\n\n    asyncio.run(run())\n```\n\n----------------------------------------\n\nTITLE: MCP Client Implementation in Python\nDESCRIPTION: Asynchronous Python implementation demonstrating how to connect to the MCP server, initialize a session, list available prompts, and retrieve a prompt with custom context and topic parameters.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/servers/simple-prompt/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom mcp.client.session import ClientSession\nfrom mcp.client.stdio import StdioServerParameters, stdio_client\n\n\nasync def main():\n    async with stdio_client(\n        StdioServerParameters(command=\"uv\", args=[\"run\", \"mcp-simple-prompt\"])\n    ) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            # List available prompts\n            prompts = await session.list_prompts()\n            print(prompts)\n\n            # Get the prompt with arguments\n            prompt = await session.get_prompt(\n                \"simple\",\n                {\n                    \"context\": \"User is a software developer\",\n                    \"topic\": \"Python async programming\",\n                },\n            )\n            print(prompt)\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Mounting MCP Server to Existing ASGI Server in Python\nDESCRIPTION: Demonstrates how to mount an MCP server to an existing ASGI server using Starlette. It shows both static mounting and dynamic host-based mounting.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nfrom starlette.applications import Starlette\nfrom starlette.routing import Mount, Host\nfrom mcp.server.fastmcp import FastMCP\n\n\nmcp = FastMCP(\"My App\")\n\n# Mount the SSE server to the existing ASGI server\napp = Starlette(\n    routes=[\n        Mount('/', app=mcp.sse_app()),\n    ]\n)\n\n# or dynamically mount as host\napp.router.routes.append(Host('mcp.acme.corp', app=mcp.sse_app()))\n```\n\n----------------------------------------\n\nTITLE: Defining MCP Resources for Data Access\nDESCRIPTION: Example of defining static and dynamic resources in an MCP server to expose data to LLMs.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.resource(\"config://app\")\ndef get_config() -> str:\n    \"\"\"Static configuration data\"\"\"\n    return \"App configuration here\"\n\n\n@mcp.resource(\"users://{user_id}/profile\")\ndef get_user_profile(user_id: str) -> str:\n    \"\"\"Dynamic user data\"\"\"\n    return f\"Profile data for user {user_id}\"\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable MCP Prompts\nDESCRIPTION: Examples of defining single-string and multi-message prompts for LLM interactions in an MCP server.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP\nfrom mcp.server.fastmcp.prompts import base\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.prompt()\ndef review_code(code: str) -> str:\n    return f\"Please review this code:\\n\\n{code}\"\n\n\n@mcp.prompt()\ndef debug_error(error: str) -> list[base.Message]:\n    return [\n        base.UserMessage(\"I'm seeing this error:\"),\n        base.UserMessage(error),\n        base.AssistantMessage(\"I'll help debug that. What have you tried so far?\"),\n    ]\n```\n\n----------------------------------------\n\nTITLE: MCP Client Resource Retrieval Example\nDESCRIPTION: Asynchronous Python example demonstrating how to use the MCP client to connect to the server, list available resources, and read specific resource content using STDIO transport.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/servers/simple-resource/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom mcp.types import AnyUrl\nfrom mcp.client.session import ClientSession\nfrom mcp.client.stdio import StdioServerParameters, stdio_client\n\n\nasync def main():\n    async with stdio_client(\n        StdioServerParameters(command=\"uv\", args=[\"run\", \"mcp-simple-resource\"])\n    ) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            # List available resources\n            resources = await session.list_resources()\n            print(resources)\n\n            # Get a specific resource\n            resource = await session.read_resource(AnyUrl(\"file:///greeting.txt\"))\n            print(resource)\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using MCP Client with STDIO Transport in Python\nDESCRIPTION: Illustrates how to use the MCP client to connect to the server, list available tools, and call the 'fetch' tool to retrieve a website's content.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/servers/simple-tool/README.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom mcp.client.session import ClientSession\nfrom mcp.client.stdio import StdioServerParameters, stdio_client\n\n\nasync def main():\n    async with stdio_client(\n        StdioServerParameters(command=\"uv\", args=[\"run\", \"mcp-simple-tool\"])\n    ) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            # List available tools\n            tools = await session.list_tools()\n            print(tools)\n\n            # Call the fetch tool\n            result = await session.call_tool(\"fetch\", {\"url\": \"https://example.com\"})\n            print(result)\n\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using Context in MCP Tools for Enhanced Capabilities\nDESCRIPTION: Example of using the Context object in MCP tools to access advanced features like progress reporting.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP, Context\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.tool()\nasync def long_task(files: list[str], ctx: Context) -> str:\n    \"\"\"Process multiple files with progress tracking\"\"\"\n    for i, file in enumerate(files):\n        ctx.info(f\"Processing {file}\")\n        await ctx.report_progress(i, len(files))\n        data, mime_type = await ctx.read_resource(f\"file://{file}\")\n    return \"Processing complete\"\n```\n\n----------------------------------------\n\nTITLE: Handling Images in MCP Tools\nDESCRIPTION: Example of using the Image class to handle image data in MCP tools.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP, Image\nfrom PIL import Image as PILImage\n\nmcp = FastMCP(\"My App\")\n\n\n@mcp.tool()\ndef create_thumbnail(image_path: str) -> Image:\n    \"\"\"Create a thumbnail from an image\"\"\"\n    img = PILImage.open(image_path)\n    img.thumbnail((100, 100))\n    return Image(data=img.tobytes(), format=\"png\")\n```\n\n----------------------------------------\n\nTITLE: Running MCP Server in Development Mode\nDESCRIPTION: Commands for running an MCP server in development mode with dependencies and local code mounting.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nmcp dev server.py\n\n# Add dependencies\nmcp dev server.py --with pandas --with numpy\n\n# Mount local code\nmcp dev server.py --with-editable .\n```\n\n----------------------------------------\n\nTITLE: Direct Execution of MCP Server\nDESCRIPTION: Example of creating an executable MCP server script and running it directly.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nfrom mcp.server.fastmcp import FastMCP\n\nmcp = FastMCP(\"My App\")\n\nif __name__ == \"__main__\":\n    mcp.run()\n```\n\n----------------------------------------\n\nTITLE: Running MCP Server Directly\nDESCRIPTION: Commands for running an MCP server script directly.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\npython server.py\n# or\nmcp run server.py\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server in Claude Desktop\nDESCRIPTION: Command for installing an MCP server in Claude Desktop for direct integration.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nmcp install server.py\n```\n\n----------------------------------------\n\nTITLE: Installing MCP Server in Claude Desktop with Options\nDESCRIPTION: Commands for installing an MCP server in Claude Desktop with custom name and environment variables.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmcp install server.py\n\n# Custom name\nmcp install server.py --name \"My Analytics Server\"\n\n# Environment variables\nmcp install server.py -v API_KEY=abc123 -v DB_URL=postgres://...\nmcp install server.py -f .env\n```\n\n----------------------------------------\n\nTITLE: Testing MCP Server with Inspector\nDESCRIPTION: Command for testing an MCP server using the built-in Inspector tool.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nmcp dev server.py\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Server Using Bash Commands\nDESCRIPTION: Command-line instructions for starting the MCP server using either stdio transport (default) or SSE transport with custom port configuration.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/servers/simple-prompt/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using stdio transport (default)\nuv run mcp-simple-prompt\n\n# Using SSE transport on custom port\nuv run mcp-simple-prompt --transport sse --port 8000\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Server with Transport Options\nDESCRIPTION: Command line examples showing how to start the MCP server using either stdio (default) transport or SSE transport with custom port configuration.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/servers/simple-resource/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using stdio transport (default)\nuv run mcp-simple-resource\n\n# Using SSE transport on custom port\nuv run mcp-simple-resource --transport sse --port 8000\n```\n\n----------------------------------------\n\nTITLE: Starting MCP Server with Different Transport Options\nDESCRIPTION: Demonstrates how to start the MCP server using either stdio (default) or SSE transport on a custom port.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/servers/simple-tool/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Using stdio transport (default)\nuv run mcp-simple-tool\n\n# Using SSE transport on custom port\nuv run mcp-simple-tool --transport sse --port 8000\n```\n\n----------------------------------------\n\nTITLE: Adding MCP to a Python Project with uv\nDESCRIPTION: Commands for initializing a new project with uv and adding MCP as a dependency.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv init mcp-server-demo\ncd mcp-server-demo\n```\n\n----------------------------------------\n\nTITLE: Installing MCP with uv\nDESCRIPTION: Command for adding MCP with CLI tools to a project using uv.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv add \"mcp[cli]\"\n```\n\n----------------------------------------\n\nTITLE: Installing MCP with pip\nDESCRIPTION: Command for installing MCP with CLI tools using pip.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install \"mcp[cli]\"\n```\n\n----------------------------------------\n\nTITLE: Running MCP Command with uv\nDESCRIPTION: Command to run the MCP CLI tool using uv.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/README.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run mcp\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Minimum Versions\nDESCRIPTION: This code snippet defines the minimum required versions for packages needed by the ModelContextProtocol Python SDK. It includes python-dotenv for environment variable management, requests for HTTP interactions, the core mcp package, and uvicorn for ASGI server implementation.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/examples/clients/simple-chatbot/mcp_simple_chatbot/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npython-dotenv>=1.0.0\nrequests>=2.31.0\nmcp>=1.0.0\nuvicorn>=0.32.1\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with UV Package Manager\nDESCRIPTION: Command to install project dependencies using UV package manager with frozen dependencies and all extras for development.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync --frozen --all-extras --dev\n```\n\n----------------------------------------\n\nTITLE: Running Python Tests with Pytest\nDESCRIPTION: Command to execute the project's test suite using pytest through UV package manager.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Running Type Checking with Pyright\nDESCRIPTION: Command to perform static type checking using pyright through UV package manager.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run pyright\n```\n\n----------------------------------------\n\nTITLE: Running Code Linting and Formatting with Ruff\nDESCRIPTION: Commands to run code linting and formatting using Ruff through UV package manager.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nuv run ruff check .\nuv run ruff format .\n```\n\n----------------------------------------\n\nTITLE: Dependency Version Update Command for Python SDK\nDESCRIPTION: Command to upgrade dependencies to their lowest direct versions in the lock file after updating the pyproject.toml file.\nSOURCE: https://github.com/modelcontextprotocol/python-sdk/blob/main/RELEASE.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv lock --resolution lowest-direct\n```"
  }
]