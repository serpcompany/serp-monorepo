[
  {
    "owner": "microsoft",
    "repo": "playwright-python",
    "content": "TITLE: Synchronous Browser Automation with Playwright in Python\nDESCRIPTION: This snippet demonstrates how to use Playwright's synchronous API to launch multiple browser types, navigate to a website, and take screenshots. It loops through Chromium, Firefox, and WebKit browsers.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/README.md#2025-04-17_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom playwright.sync_api import sync_playwright\n\nwith sync_playwright() as p:\n    for browser_type in [p.chromium, p.firefox, p.webkit]:\n        browser = browser_type.launch()\n        page = browser.new_page()\n        page.goto('http://playwright.dev')\n        page.screenshot(path=f'example-{browser_type.name}.png')\n        browser.close()\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Browser Automation with Playwright in Python\nDESCRIPTION: This snippet shows how to use Playwright's asynchronous API to perform the same operations as the synchronous example. It uses asyncio to run the asynchronous main function, which launches multiple browser types, navigates to a website, and takes screenshots.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/README.md#2025-04-17_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom playwright.async_api import async_playwright\n\nasync def main():\n    async with async_playwright() as p:\n        for browser_type in [p.chromium, p.firefox, p.webkit]:\n            browser = await browser_type.launch()\n            page = await browser.new_page()\n            await page.goto('http://playwright.dev')\n            await page.screenshot(path=f'example-{browser_type.name}.png')\n            await browser.close()\n\nasyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Configuring Python 3.9+ Virtual Environment\nDESCRIPTION: Commands to set up a Python 3.9+ virtual environment and activate it. Requires Python 3.9 or higher to be installed on the system.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/CONTRIBUTING.md#2025-04-17_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# You may need to install python 3.9 venv if it's missing, on Ubuntu just run `sudo apt-get install python3.9-venv`\npython3.9 -m venv env\nsource ./env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Installing Project Dependencies\nDESCRIPTION: Commands to upgrade pip and install required project dependencies from local-requirements.txt file.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/CONTRIBUTING.md#2025-04-17_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npython -m pip install --upgrade pip\npip install -r local-requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Drivers\nDESCRIPTION: Commands to install the project in editable mode and build wheel distribution.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/CONTRIBUTING.md#2025-04-17_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npip install -e .\npython -m build --wheel\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests\nDESCRIPTION: Command to run tests using pytest with Chromium browser.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/CONTRIBUTING.md#2025-04-17_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npytest --browser chromium\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-playwright Plugin in Python\nDESCRIPTION: This code snippet demonstrates how to install the pytest-playwright plugin using pip. It also shows how to install specific browser dependencies.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/examples/todomvc/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-playwright\npytest-playwright install # install browser binaries\n```\n\n----------------------------------------\n\nTITLE: Setting up Playwright-Python Development Environment\nDESCRIPTION: Commands for setting up a Python development environment for Playwright-Python, including cloning the repository, creating a virtual environment, and installing dependencies.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/ROLLING.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/microsoft/playwright-python\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m venv env\n```\n\nLANGUAGE: bash\nCODE:\n```\nsource env/bin/activate\n```\n\nLANGUAGE: bash\nCODE:\n```\npython -m pip install --upgrade pip\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -r local-requirements.txt\n```\n\nLANGUAGE: bash\nCODE:\n```\npre-commit install\n```\n\nLANGUAGE: bash\nCODE:\n```\npip install -e .\n```\n\n----------------------------------------\n\nTITLE: Building and Updating Playwright-Python Driver\nDESCRIPTION: Commands for building a new wheel with the updated driver version and generating the updated API.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/ROLLING.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npython -m build --wheel\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/update_api.sh\n```\n\n----------------------------------------\n\nTITLE: Fixing Typing Issues with Playwright ToT\nDESCRIPTION: Commands to regenerate API JSON file and update the API for fixing typing issues with the latest Playwright (Tip of Tree).\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/ROLLING.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd playwright\n```\n\nLANGUAGE: bash\nCODE:\n```\nAPI_JSON_MODE=1 node utils/doclint/generateApiJson.js > ../playwright-python/playwright/driver/package/api.json\n```\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/update_api.sh\n```\n\n----------------------------------------\n\nTITLE: Collecting Test Coverage\nDESCRIPTION: Commands to run tests with coverage reporting and open the HTML coverage report.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/CONTRIBUTING.md#2025-04-17_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\npytest --browser chromium --cov-report html --cov=playwright\nopen htmlcov/index.html\n```\n\n----------------------------------------\n\nTITLE: Checking Type Hints\nDESCRIPTION: Command to run mypy for static type checking on the playwright package.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/CONTRIBUTING.md#2025-04-17_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nmypy playwright\n```\n\n----------------------------------------\n\nTITLE: Code Formatting Setup\nDESCRIPTION: Commands to install and run pre-commit hooks for code formatting.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/CONTRIBUTING.md#2025-04-17_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\npre-commit install\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Regenerating APIs\nDESCRIPTION: Commands to update API and run pre-commit hooks on all files.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/CONTRIBUTING.md#2025-04-17_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/update_api.sh\npre-commit run --all-files\n```\n\n----------------------------------------\n\nTITLE: Defining Python Package Dependencies for Playwright\nDESCRIPTION: Requirements file specifying exact versions of Python packages needed by Playwright. Lists greenlet, pyee, and typing-extensions with their specific versions and dependency relationships.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/requirements.txt#2025-04-17_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n#    uv pip compile pyproject.toml -o requirements.txt\ngreenlet==3.1.1\n    # via playwright (pyproject.toml)\npyee==13.0.0\n    # via playwright (pyproject.toml)\ntyping-extensions==4.12.2\n    # via pyee\n```\n\n----------------------------------------\n\nTITLE: Generating Server Certificate for Client Certificate Authentication\nDESCRIPTION: Creates a self-signed server certificate with RSA 4096-bit key, valid for 365 days. The certificate is configured for localhost and local.playwright domains with Subject Alternative Names.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/tests/assets/client-certificates/README.md#2025-04-17_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nopenssl req \\\n\t-x509 \\\n\t-newkey rsa:4096 \\\n\t-keyout server/server_key.pem \\\n\t-out server/server_cert.pem \\\n\t-nodes \\\n\t-days 365 \\\n\t-subj \"/CN=localhost/O=Client\\ Certificate\\ Demo\" \\\n\t-addext \"subjectAltName=DNS:localhost,DNS:local.playwright\"\n```\n\n----------------------------------------\n\nTITLE: Creating Trusted Client Certificate for Authentication Testing\nDESCRIPTION: Generates a server-signed (valid) client certificate in two steps: first creating a certificate signing request with a 4096-bit RSA key, then signing it with the server certificate to create a trusted client certificate valid for 365 days.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/tests/assets/client-certificates/README.md#2025-04-17_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p client/trusted\n# generate server-signed (valid) certifcate\nopenssl req \\\n\t-newkey rsa:4096 \\\n\t-keyout client/trusted/key.pem \\\n\t-out client/trusted/csr.pem \\\n\t-nodes \\\n\t-days 365 \\\n\t-subj \"/CN=Alice\"\n\n# sign with server_cert.pem\nopenssl x509 \\\n\t-req \\\n\t-in client/trusted/csr.pem \\\n\t-CA server/server_cert.pem \\\n\t-CAkey server/server_key.pem \\\n\t-out client/trusted/cert.pem \\\n\t-set_serial 01 \\\n\t-days 365\n```\n\n----------------------------------------\n\nTITLE: Creating Self-Signed Client Certificate for Invalid Authentication Testing\nDESCRIPTION: Generates a self-signed (invalid) client certificate in two steps: first creating a certificate signing request with a 4096-bit RSA key, then self-signing it to create an invalid certificate for testing certificate rejection scenarios.\nSOURCE: https://github.com/microsoft/playwright-python/blob/main/tests/assets/client-certificates/README.md#2025-04-17_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmkdir -p client/self-signed\nopenssl req \\\n\t-newkey rsa:4096 \\\n\t-keyout client/self-signed/key.pem \\\n\t-out client/self-signed/csr.pem \\\n\t-nodes \\\n\t-days 365 \\\n\t-subj \"/CN=Bob\"\n\n# sign with self-signed/key.pem\nopenssl x509 \\\n\t-req \\\n\t-in client/self-signed/csr.pem \\\n\t-signkey client/self-signed/key.pem \\\n\t-out client/self-signed/cert.pem \\\n\t-days 365\n```"
  }
]