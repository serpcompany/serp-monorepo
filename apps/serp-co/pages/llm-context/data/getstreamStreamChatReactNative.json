[
  {
    "owner": "getstream",
    "repo": "stream-chat-react-native",
    "content": "TITLE: Connecting a User to Stream Chat - TS\nDESCRIPTION: This code shows how to connect a user to the Stream Chat service using the `connectUser` method.  It requires a user object containing user details (id, name) and a `user_token` typically received from your backend. Repeated calls without disconnection will result in warnings or errors.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'testUser',\n    name: 'Test User',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Chat Provider Setup (App) - TSX\nDESCRIPTION: This snippet demonstrates how to use the Chat provider at the App level, wrapping your components and providing the Stream Chat client instance. The Chat provider is crucial for context sharing between Stream Chat components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>{/** App components */}</Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: React Native Chat App Component\nDESCRIPTION: This React Native component integrates the Stream Chat SDK, managing user connection, channel selection, and thread display. It utilizes `useEffect` for connecting the user on mount and conditional rendering based on state variables like `channel` and `thread`. It handles navigation using the back button functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport {\n  Channel,\n  ChannelList,\n  Chat,\n  MessageInput,\n  MessageList,\n  MessageType,\n  OverlayProvider,\n  Thread,\n} from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [clientReady, setClientReady] = useState(false);\n  const [thread, setThread] = useState<MessageType | null>();\n\n  useEffect(() => {\n    const setupClient = async () => {\n      try {\n        await client.connectUser(\n          {\n            id: 'jlahey',\n            name: 'Jim Lahey',\n            image: 'https://i.imgur.com/fR9Jz14.png',\n          },\n          'user_token',\n        );\n        setClientReady(true);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    setupClient();\n  }, []);\n\n  const onBackPress = () => {\n    if (thread) {\n      setThread(undefined);\n    } else if (channel) {\n      setChannel(undefined);\n    }\n  };\n\n  if (!clientReady) return null;\n\n  return (\n    <OverlayProvider topInset={60}>\n      <TouchableOpacity onPress={onBackPress} disabled={!channel}>\n        <View style={{ height: 60, paddingLeft: 16, paddingTop: 40 }}>{channel && <Text>Back</Text>}</View>\n      </TouchableOpacity>\n      <View style={{ flex: 1 }}>\n        <Chat client={client}>\n          {channel ? (\n            <Channel channel={channel} keyboardVerticalOffset={60} thread={thread} threadList={!!thread}>\n              {thread ? (\n                <Thread />\n              ) : (\n                <>\n                  <MessageList onThreadSelect={setThread} />\n                  <MessageInput />\n                </>\n              )}\n            </Channel>\n          ) : (\n            <ChannelList onSelect={setChannel} />\n          )}\n        </Chat>\n      </View>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Watching a Channel - TS\nDESCRIPTION: This snippet demonstrates how to create a channel on the server using the `watch()` function.  This function both creates the channel and subscribes the client to updates for that channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.watch();\n```\n\n----------------------------------------\n\nTITLE: Connecting a User - TypeScript\nDESCRIPTION: Connects a user to the Stream Chat service. The `connectUser` function is called with a user object containing the user's ID, name, and image URL, and a `user_token` for authentication. The `user_token` is typically obtained from the backend. This function is asynchronous and should be awaited. Requires the `stream-chat` package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'jlahey',\n    name: 'Jim Lahey',\n    image: 'https://i.imgur.com/fR9Jz14.png',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting a User to Stream Chat - TS\nDESCRIPTION: This snippet demonstrates how to connect a user to the Stream Chat service. It requires a user object (containing at least an `id`) and a `user_token`. The `user_token` is typically obtained from your backend after user authentication. Avoid calling this function repeatedly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'testUser',\n    name: 'Test User',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Using Chat Provider in App - TSX\nDESCRIPTION: Wraps application components within the `Chat` component, providing the necessary context for Stream Chat functionality. The `Chat` component requires a `client` prop, which is the initialized `StreamChat` instance. This setup integrates Stream Chat functionality at the app level. Requires the `stream-chat` and `stream-chat-react-native` packages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>{/** App components */}</Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Live Location Sharing Context (TypeScript)\nDESCRIPTION: This TypeScript code defines a React Context for managing live location sharing. It provides methods to start and stop location updates, and to check if location tracking is active. It utilizes `@react-native-community/geolocation` to watch location, and the Stream Chat client to update message attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, {createContext, useContext} from 'react';\nimport {useChatContext} from 'stream-chat-react-native';\nimport Geolocation, {\n  GeolocationResponse,\n} from '@react-native-community/geolocation';\n\nGeolocation.setRNConfiguration({\n  skipPermissionRequests: false,\n  authorizationLevel: 'always',\n  enableBackgroundLocationUpdates: true,\n});\n\ninterface LiveLocationContextValue {\n  startLiveLocation: (messageId: string) => void;\n  stopLiveLocation: (messageId: string) => void;\n  isWatching: (messageId: string) => boolean;\n}\n\nconst LiveLocationContext = createContext<LiveLocationContextValue>({\n  startLiveLocation: () => {},\n  stopLiveLocation: () => {},\n  isWatching: () => false,\n});\n\nexport const useLiveLocationContext = () => {\n  return useContext(LiveLocationContext);\n};\n\n// a map of message IDs to live location watch IDs\nconst messageIdToLiveWatchMap = new Map<string, number>();\n\nconst isWatching = (id: string) => {\n  return messageIdToLiveWatchMap.has(id);\n};\n\nexport const LiveLocationContextProvider = (\n  props: React.PropsWithChildren<{}>,\n) => {\n  const {client} = useChatContext();\n\n  const lastLocationRef = React.useRef<GeolocationResponse>();\n\n  // watch live location and update message\n  const startLiveLocation = React.useCallback(\n    (id: string) => {\n      const watchId = Geolocation.watchPosition(\n        position => {\n          client.updateMessage({\n            id,\n            attachments: [\n              {\n                type: 'location',\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude,\n              },\n            ],\n          });\n          lastLocationRef.current = position;\n        },\n        error => {\n          console.error('watchPosition', error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 20000,\n          maximumAge: 1000,\n          interval: 5000, // android only\n        },\n      );\n      messageIdToLiveWatchMap.set(id, watchId);\n    },\n    [client],\n  );\n\n  // stop watching live location and send message with ended time\n  const stopLiveLocation = React.useCallback(\n    (id: string) => {\n      const watchId = messageIdToLiveWatchMap.get(id);\n      if (watchId !== undefined) {\n        messageIdToLiveWatchMap.delete(id);\n        Geolocation.clearWatch(watchId);\n        if (lastLocationRef.current) {\n          client.updateMessage({\n            id,\n            attachments: [\n              {\n                type: 'location',\n                latitude: lastLocationRef.current.coords.latitude,\n                longitude: lastLocationRef.current.coords.longitude,\n                ended_at: new Date().toISOString(),\n              },\n            ],\n          });\n        }\n      }\n    },\n    [client],\n  );\n\n  const contextValue: LiveLocationContextValue = {\n    startLiveLocation,\n    stopLiveLocation,\n    isWatching,\n  };\n\n  return (\n    <LiveLocationContext.Provider value={contextValue}>\n      {props.children}\n    </LiveLocationContext.Provider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining StreamChat Generics Type (TSX)\nDESCRIPTION: This snippet defines the StreamChatGenerics type, which specifies the types for attachmentType, channelType, commandType, eventType, messageType, reactionType, and userType. These types allow for customization of the data models used within the Stream Chat SDK. These must be defined to take full advantage of the typescript support.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype StreamChatGenerics = {\n  attachmentType: LocalAttachmentType;\n  channelType: LocalChannelType;\n  commandType: LocalCommandType;\n  eventType: LocalEventType;\n  messageType: LocalMessageType;\n  reactionType: LocalReactionType;\n  userType: LocalUserType;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Device with Stream for Push Notifications (JS)\nDESCRIPTION: This code registers a device with the Stream backend to receive push notifications via Firebase. It requests permission, retrieves the Firebase device token, and uses `client.addDevice` to register the device with Stream.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v2.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Request Push Notification permission from device.\nconst requestPermission = async () => {\n  const authStatus = await messaging().requestPermission();\n  const enabled =\n    authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log('Authorization status:', authStatus);\n  }\n};\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n  const unsubscribeTokenRefreshListenerRef = useRef<() => void>();\n\n  useEffect(() => {\n    // Register FCM token with stream chat server.\n    const registerPushToken = async () => {\n      // unsubscribe any previous listener\n      unsubscribeTokenRefreshListenerRef.current?.();\n      const token = await messaging().getToken();\n      const push_provider = 'firebase';\n      const push_provider_name = 'MyRNAppFirebasePush'; // name an alias for your push provider (optional)\n      client.setLocalDevice({\n        id: token,\n        push_provider,\n        // push_provider_name is meant for optional multiple providers support, see: https://getstream.io/chat/docs/react/push_providers_and_multi_bundle\n        push_provider_name,\n      });\n      await AsyncStorage.setItem('@current_push_token', token);\n\n      const removeOldToken = async () => {\n        const oldToken = await AsyncStorage.getItem('@current_push_token');\n        if (oldToken !== null) {\n          await client.removeDevice(oldToken);\n        }\n      };\n\n      unsubscribeTokenRefreshListenerRef.current = messaging().onTokenRefresh(async newToken => {\n        await Promise.all([\n          removeOldToken(),\n          client.addDevice(newToken, push_provider, USER_ID, push_provider_name),\n          AsyncStorage.setItem('@current_push_token', newToken),\n        ]);\n      });\n    };\n\n    const init = async () => {\n      await requestPermission();\n      await registerPushToken();\n      await client.connectUser({ id: USER_ID }, USER_TOKEN);\n\n      setIsReady(true);\n    };\n\n    init();\n\n    return async () => {\n      await client?.disconnectUser();\n      unsubscribeTokenRefreshListenerRef.current?.();\n    };\n  }, []);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Chat client={client}>{/* Child components of Chat go here */}</Chat>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamChat and connecting user\nDESCRIPTION: This code snippet illustrates how to initialize the StreamChat client, connect a user, and render chat components.  It highlights the importance of not waiting for the `connectUser` call to succeed before rendering chat components to enable offline access to user information and chat data. `API_KEY`, `user`, and `tokenOrTokenProvider` need to be provided.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/offline-support.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst chatClient = StreamChat.getInstance('API_KEY');\nconst App = () => {\n  const [isClientReady, setIsClientReady] = useState(false);\n\n  useEffect(() => {\n    const startChat = async () => {\n      const connectPromise = chatClient.connectUser(user, tokenOrTokenProvider);\n      setIsClientReady(true); // this allows components to render\n      await connectPromise();\n      // Any other post-connectUser logic you may have goes here.\n    };\n    startChat();\n  }, []);\n\n  if (!isClientReady) return null; // or some loading indicator;\n\n  return (\n    <Chat client={chatClient} enableOfflineSupport>\n      ...\n    </Chat>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Map-Based Message Card - TypeScript\nDESCRIPTION: This code creates a custom message card that displays a map showing the shared location.  It utilizes react-native-maps to render the map and a marker indicating the location. It also includes a \"Stop sharing\" button if the location is being actively shared by the current user, allowing them to terminate the live location sharing. The component also display a button showing when location sharing ended or that live location is active.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, {useMemo} from 'react';\nimport {Button, StyleSheet, useWindowDimensions} from 'react-native';\nimport MapView, {Marker} from 'react-native-maps';\nimport {\n  Channel,\n  Card as DefaultCard,\n  useMessageContext,\n  useMessageOverlayContext,\n  useOverlayContext,\n} from 'stream-chat-react-native';\nimport {useLiveLocationContext} from './LiveLocationContext';\nimport {StreamChatGenerics} from './types';\n\nconst MapCard = ({\n  latitude,\n  longitude,\n  ended_at,\n}: {\n  latitude: number;\n  longitude: number;\n  ended_at?: string;\n}) => {\n  const {width, height} = useWindowDimensions();\n  const aspect_ratio = width / height;\n  const {stopLiveLocation} = useLiveLocationContext();\n\n  const {isMyMessage, message} = useMessageContext();\n  const {data} = useMessageOverlayContext();\n  const {overlay} = useOverlayContext();\n  const overlayId = data?.message?.id;\n  // is this message shown on overlay? If yes, then don't show the button\n  const isOverlayOpen = overlay === 'message' && overlayId === message.id;\n  const showStopSharingButton = !ended_at && isMyMessage && !isOverlayOpen;\n\n  // Convert ISO date string to Date object\n  const endedAtDate = ended_at ? new Date(ended_at) : null;\n\n  // Format the date to a readable string\n  const formattedEndedAt = endedAtDate ? endedAtDate.toLocaleString() : '';\n\n  // this is to compute the zoom level and centre for the map view\n  const region = useMemo(() => {\n    const latitudeDelta = 0.02;\n    const longitudeDelta = latitudeDelta * aspect_ratio;\n\n    // For reference, check -\n    // https://github.com/react-native-maps/react-native-maps/blob/master/example/src/examples/DisplayLatLng.tsx\n    return {\n      latitude,\n      longitude,\n      latitudeDelta,\n      longitudeDelta,\n    };\n  }, [aspect_ratio, latitude, longitude]);\n\n  return (\n    <>\n      <MapView\n        region={region}\n        pitchEnabled={false}\n        rotateEnabled={false}\n        scrollEnabled={false}\n        zoomTapEnabled={false}\n        zoomEnabled={false}\n        toolbarEnabled={false}\n        style={styles.mapView}>\n        <Marker\n          coordinate={{\n            latitude,\n            longitude,\n          }}\n        />\n      </MapView>\n      {showStopSharingButton && (\n        <Button\n          title=\"Stop sharing\"\n          onPress={() => {\n            stopLiveLocation(message.id);\n          }}\n        />\n      )}\n      {ended_at && (\n        <Button title={`Ended at: ${formattedEndedAt}`} disabled={true} />\n      )}\n      {!ended_at && !showStopSharingButton && (\n        <Button title={'Live location'} disabled={true} />\n      )}\n    </>\n  );\n};\n\nconst Card: NonNullable<\n  React.ComponentProps<typeof Channel>['Card']\n> = props => {\n  const {type, ...otherProperties} = props;\n\n  if (type === 'location') {\n    // @ts-ignore\n    return <MapCard {...otherProperties} />;\n  }\n\n  return <DefaultCard {...props} />;\n};\n\nconst styles = StyleSheet.create({\n  mapView: {\n    height: 250,\n    width: 250,\n  },\n});\n\nexport default Card;\n```\n\n----------------------------------------\n\nTITLE: Initializing ChannelList with Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to initialize and render the ChannelList component within the Stream Chat React Native framework. It imports necessary components, initializes a Stream Chat client, defines filters and sort options, and renders the ChannelList within the Chat and OverlayProvider components. The onSelect prop is used for navigation when a channel is selected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/channel-list.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst filters = { members: { $in: [ 'vishal', 'lucas', 'neil' ] } };\nconst sort = { last_updated: -1 };\nconst options = { limit: 20, messages_limit: 30 };\n\nexport const App = () => <OverlayProvider>\n    <Chat client={client}>\n    // highlight-start\n      <ChannelList\n        filters={filters}\n        sort={sort}\n        options={options}\n        onSelect={(channel) => /** navigate to channel screen */ }\n      />\n    // highlight-end\n    </Chat>\n  </OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with getInstance - TS\nDESCRIPTION: This snippet demonstrates how to instantiate the Stream Chat client using the `getInstance` method.  `getInstance` is available starting from stream-chat@2.12.0. This method ensures a single instance of the client is created, preventing multiple WebSocket connections. It requires an API key for initialization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with getInstance - TS\nDESCRIPTION: This snippet demonstrates how to initialize the Stream Chat client using the `getInstance` method.  This method ensures a single instance of the client is created, preventing multiple WebSocket connections. An API key is required.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Accessing Stream Chat Client via useChatContext - TS\nDESCRIPTION: This snippet shows how to access the Stream Chat client within a component that is a child of the `Chat` component.  `useChatContext` provides access to the client instance provided via the `Chat` component's `client` prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Basic MessageInput Integration in React Native\nDESCRIPTION: This code snippet demonstrates how to integrate the MessageInput component within a Stream Chat React Native application. It showcases the necessary imports from the stream-chat and stream-chat-react-native libraries, instantiation of the StreamChat client, and rendering of the Chat, Channel, MessageList, and MessageInput components within an OverlayProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-input.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, Channel, MessageList, MessageInput, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <Channel channel={channel}>\n        <MessageList />\n        // highlight-next-line\n        <MessageInput />\n      </Channel>\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: React Native Map Detail Screen with Stream Chat Events (TypeScript)\nDESCRIPTION: This code implements the MapDetailScreen component, which displays a map with a marker representing the live location. It listens for 'message.updated' events to update the map coordinates and 'message.deleted' events to handle message deletions. The component uses the Stream Chat channel object to subscribe to these events. The `stopLiveLocation` function is called when the \"Stop sharing\" button is pressed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, {useMemo} from 'react';\nimport {StackScreenProps} from '@react-navigation/stack';\nimport {useEffect} from 'react';\nimport {Alert, Button, StyleSheet, useWindowDimensions} from 'react-native';\nimport {SafeAreaView} from 'react-native-safe-area-context';\nimport MapView, {Marker} from 'react-native-maps';\nimport {NavigationParamsList} from './types';\nimport {useAppContext} from './AppContext';\nimport {useLiveLocationContext} from './LiveLocationContext';\n\ntype MapDetailScreenProps = StackScreenProps<NavigationParamsList, 'MapDetail'>;\n\nconst MapDetailScreen: React.FC<MapDetailScreenProps> = ({\n  route,\n  navigation,\n}) => {\n  // store channel in an app context like below to easily access the channel in this screen\n  const {channel} = useAppContext();\n  if (!channel) {\n    throw new Error('MapDetailScreen - Channel is not defined');\n  }\n  const {isWatching, stopLiveLocation} = useLiveLocationContext();\n  const {width, height} = useWindowDimensions();\n  const aspect_ratio = width / height;\n\n  // the parameters passed to the screen define the state\n  const {messageId, latitude, longitude, ended_at} = route.params;\n  const showStopSharingButton = !ended_at && isWatching(messageId);\n\n  const endedAtDate = ended_at ? new Date(ended_at) : null;\n  const formattedEndedAt = endedAtDate ? endedAtDate.toLocaleString() : '';\n\n  const region = useMemo(() => {\n    const latitudeDelta = 0.1;\n    const longitudeDelta = latitudeDelta * aspect_ratio;\n    return {\n      latitude,\n      longitude,\n      latitudeDelta,\n      longitudeDelta,\n    };\n  }, [aspect_ratio, latitude, longitude]);\n\n  useEffect(() => {\n    const listeners = [\n      channel.on('message.updated', event => {\n        if (\n          event.message?.id === messageId &&\n          event.message.attachments?.[0]?.type === 'location'\n        ) {\n          const attachment = event.message.attachments[0];\n          if (attachment) {\n            // update the navigation params of the screen which would in turn update the state\n            navigation.setParams({\n              latitude: attachment.latitude,\n              longitude: attachment.longitude,\n              ended_at: attachment.ended_at,\n            });\n          }\n        }\n      }),\n      channel.on('message.deleted', event => {\n        if (event.message?.id === messageId) {\n          Alert.alert(\n            'Message deleted',\n            'The live location message has been deleted',\n          );\n          navigation.goBack();\n        }\n      }),\n    ];\n\n    return () => listeners.forEach(l => l.unsubscribe());\n  }, [channel, messageId, navigation]);\n\n  return (\n    <SafeAreaView style={styles.container} edges={['bottom']}>\n      <MapView region={region} style={styles.container}>\n        <Marker\n          coordinate={{\n            latitude,\n            longitude,\n          }}\n        />\n      </MapView>\n      {showStopSharingButton && (\n        <Button\n          title=\"Stop sharing\"\n          onPress={() => {\n            stopLiveLocation(messageId);\n          }}\n        />\n      )}\n      {ended_at && (\n        <Button title={`Ended at: ${formattedEndedAt}`} disabled={true} />\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nexport default MapDetailScreen;\n```\n\n----------------------------------------\n\nTITLE: Watching a Channel\nDESCRIPTION: This snippet shows how to use `channel.watch()` to create and subscribe to updates on a channel.  It's an asynchronous operation that initializes the channel on the server and establishes a connection for real-time updates.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.watch();\n```\n\n----------------------------------------\n\nTITLE: Location Sharing Implementation - React Native JSX\nDESCRIPTION: This React Native JSX snippet presents a complete implementation of the location sharing feature. It includes importing necessary libraries, connecting to Stream Chat, defining utility functions for opening Google Maps and generating static map URLs, sending the current location as a message, creating UI components for displaying the map and a \"Share Location\" button, and integrating everything into a Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { Image, Linking, StyleSheet, TouchableOpacity, View } from 'react-native';\nimport { StreamChat } from 'stream-chat';\nimport {\n  Channel,\n  Chat,\n  MessageInput,\n  MessageList,\n  OverlayProvider as ChatOverlayProvider,\n  useChannelContext,\n} from 'stream-chat-react-native';\nimport { SafeAreaProvider, SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';\nimport Geolocation from '@react-native-community/geolocation';\nimport Svg, { Path } from 'react-native-svg';\n\n// ============================================================\n//   Fill in following values\n// ============================================================\nconst API_KEY = '';\nconst USER_ID = '';\nconst USER_TOKEN = '';\nconst CHANNEL_ID = '';\n// Reference: https://developers.google.com/maps/documentation/maps-static/get-api-key\nconst MAPS_API_KEY = '';\n\nconst chatClient = StreamChat.getInstance(API_KEY);\nconst user = { id: USER_ID };\n\n// We are going to `await` following two calls, before rendering any UI component.\n// Please check the App component at bottom.\nconst connectUserPromise = chatClient.connectUser(user, USER_TOKEN);\nconst channel = chatClient.channel('messaging', CHANNEL_ID);\n\n// Basic utilities required for location sharing\n\n// Given the location coordinates, this function generates URL for google map,\n// and opens this Url using Linking module of react-native.\n// Please check documentation of `Linking` module from react-native, for details:\n// https://reactnative.dev/docs/linking\n//\n// Generally this URL will be opened in google maps application.\n// https://developers.google.com/maps/documentation/urls/get-started\nconst goToGoogleMaps = (lat, long) => {\n  const url = `https://www.google.com/maps/search/?api=1&query=${lat},${long}`;\n\n  Linking.canOpenURL(url).then(supported => {\n    if (supported) {\n      Linking.openURL(url);\n    } else {\n      console.log(`Don't know how to open URI: ${url}`);\n    }\n  });\n};\n\n// Generates static map url for given location coordinates.\n// For reference, please check - https://developers.google.com/maps/documentation/maps-static/overview\nconst prepareStaticMapUrl = (lat, long) => {\n  let baseURL = 'https://maps.googleapis.com/maps/api/staticmap?';\n  let url = new URL(baseURL);\n  let params = url.searchParams;\n  params.append('center', `${lat},${long}`);\n  params.append('zoom', '15');\n  params.append('size', '600x300');\n  params.append('maptype', 'roadmap');\n  params.append('key', MAPS_API_KEY);\n  params.append('markers', `color:red|${lat},${long}`);\n\n  return url.toString();\n};\n\n// Send your current location attachment, as message, on current channel.\nconst sendCurrentLocation = () => {\n  Geolocation.getCurrentPosition(info => {\n    channel?.sendMessage({\n      text: 'This is my location',\n      attachments: [\n        {\n          type: 'location',\n          latitude: info.coords.latitude,\n          longitude: info.coords.longitude,\n        },\n      ],\n    });\n  });\n};\n\n// UI Component for rendering `location` type attachment\nconst LocationCard = ({ type, latitude, longitude }) => {\n  if (type === 'location') {\n    const mapApi = prepareStaticMapUrl(latitude, longitude);\n    console.log(mapApi);\n    return (\n      <TouchableOpacity onPress={() => goToGoogleMaps(latitude, longitude)}>\n        <Image source={{ uri: mapApi }} style={{ height: 200, width: 300 }} />\n      </TouchableOpacity>\n    );\n  }\n};\n\n// Icon for \"Share Location\" button, next to input box.\nconst ShareLocationIcon = props => (\n  <Svg width={24} height={24} viewBox='0 0 24 24' fill='none' {...props}>\n    <Path\n      d='M12 12c-1.654 0-3-1.345-3-3 0-1.654 1.346-3 3-3s3 1.346 3 3c0 1.655-1.346 3-3 3zm0-4a1.001 1.001 0 101 1c0-.551-.449-1-1-1z'\n      fill='#000'\n    />\n    <Path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M12 22s7-5.455 7-12.727C19 5.636 16.667 2 12 2S5 5.636 5 9.273C5 16.545 12 22 12 22zm1.915-4.857C15.541 15.032 17 12.277 17 9.273c0-1.412-.456-2.75-1.27-3.7C14.953 4.664 13.763 4 12 4s-2.953.664-3.73 1.573C7.456 6.523 7 7.86 7 9.273c0 3.004 1.459 5.759 3.085 7.87.678.88 1.358 1.614 1.915 2.166a21.689 21.689 0 001.915-2.166zm-.683 3.281s0 .001 0 0z'\n      fill='#000'\n    />\n  </Svg>\n);\n\n// UI component to add Share Location button next to input box.\nconst InputButtons = () => {\n  const { channel: currentChannel } = useChannelContext();\n\n  return (\n    <TouchableOpacity onPress={() => sendCurrentLocation(currentChannel)} style={{ marginRight: 10 }}>\n      <ShareLocationIcon />\n    </TouchableOpacity>\n  );\n};\n\nconst ChannelScreen = () => {\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <ChatOverlayProvider bottomInset={bottom}>\n      <SafeAreaView>\n        <Chat client={chatClient}>\n          {/* Setting keyboardVerticalOffset as 0, since we don't have any header yet */}\n          <Channel channel={channel} keyboardVerticalOffset={0} Card={LocationCard} InputButtons={InputButtons}>\n            <View style={StyleSheet.absoluteFill}>\n              <MessageList />\n              <MessageInput />\n            </View>\n          </Channel>\n        </Chat>\n      </SafeAreaView>\n    </ChatOverlayProvider>\n  );\n};\n\nexport default function App() {\n  const [ready, setReady] = useState();\n\n  useEffect(() => {\n    const initChat = async () => {\n      await connectUserPromise;\n      await channel.watch();\n      setReady(true);\n    };\n\n    initChat();\n  }, []);\n\n  if (!ready) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider>\n      <ChannelScreen channel={channel} />\n    </SafeAreaProvider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client in React Native (TSX)\nDESCRIPTION: This code initializes the Stream Chat client, connects a user with predefined ID, name, and image, and sets the client ready state. It utilizes the `StreamChat` class from the `stream-chat` package and the `useEffect` hook to perform the connection on component mount. An API key and user token are required for connecting the user. Error handling is included to catch connection issues.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport {\n  Channel,\n  ChannelList,\n  Chat,\n  MessageInput,\n  MessageList,\n  MessageType,\n  OverlayProvider,\n  Thread,\n} from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [clientReady, setClientReady] = useState(false);\n  const [thread, setThread] = useState<MessageType | null>();\n\n  useEffect(() => {\n    const setupClient = async () => {\n      try {\n        await client.connectUser(\n          {\n            id: 'jlahey',\n            name: 'Jim Lahey',\n            image: 'https://i.imgur.com/fR9Jz14.png',\n          },\n          'user_token',\n        );\n        setClientReady(true);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    setupClient();\n  }, []);\n\n  const onBackPress = () => {\n    if (thread) {\n      setThread(undefined);\n    } else if (channel) {\n      setChannel(undefined);\n    }\n  };\n\n  if (!clientReady) return null;\n\n  return (\n    <OverlayProvider topInset={60}>\n      <TouchableOpacity onPress={onBackPress} disabled={!channel}>\n        <View style={{ height: 60, paddingLeft: 16, paddingTop: 40 }}>{channel && <Text>Back</Text>}</View>\n      </TouchableOpacity>\n      <View style={{ flex: 1 }}>\n        <Chat client={client}>\n          {channel ? (\n            <Channel channel={channel} keyboardVerticalOffset={60} thread={thread} threadList={!!thread}>\n              {thread ? (\n                <Thread />\n              ) : (\n                <>\n                  <MessageList onThreadSelect={setThread} />\n                  <MessageInput />\n                </>\n              )}\n            </Channel>\n          ) : (\n            <ChannelList onSelect={setChannel} />\n          )}\n        </Chat>\n      </View>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Connecting a User - Typescript\nDESCRIPTION: This snippet shows how to connect a user to Stream Chat using the connectUser function.  It requires a user object containing the user's ID, name, and image URL, along with a user token for authentication.  It's recommended to call this function during the login flow or after client instantiation. The user token should be generated on your backend.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'jlahey',\n    name: 'Jim Lahey',\n    image: 'https://i.imgur.com/fR9Jz14.png',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client - Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize a Stream Chat client instance using your API key.  It imports the StreamChat class from the stream-chat library and then calls getInstance to create a singleton instance.  The API key is required for authentication and connecting to Stream's chat services.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel - TS\nDESCRIPTION: This snippet demonstrates how to create a channel on the server using the `create()` function.  This function only creates the channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Connecting a User to Stream Chat - TypeScript\nDESCRIPTION: This code snippet shows how to connect a user to Stream Chat using the connectUser function. It takes a user object (with id, name, and image) and a user token as parameters. The user token is used to authenticate the user. It's crucial to obtain the token from your backend after user registration or login.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'jlahey',\n    name: 'Jim Lahey',\n    image: 'https://i.imgur.com/fR9Jz14.png',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Resetting the database on user sign out\nDESCRIPTION: This code snippet demonstrates how to reset the offline database when a user signs out. It uses the `QuickSqliteClient.resetDB()` method before disconnecting the user using `chatClient.disconnectUser()`. This ensures that the offline data is cleared when a user logs out.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/offline-support.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QuickSqliteClient } from 'stream-chat-react-native';\n\n// Sign out logic\nQuickSqliteClient.resetDB();\nchatClient.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Displaying a Channel with ChannelList in React Native using Stream Chat\nDESCRIPTION: This code demonstrates how to display a specific channel when selected from the `ChannelList`. It uses the `useState` hook to store the selected channel and conditionally renders either the `ChannelList` or the `Channel` component, based on whether a channel is selected. An `onSelect` handler on `ChannelList` is used to manage the selected channel state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? <Channel channel={channel}>{/** App components */}</Channel> : <ChannelList onSelect={setChannel} />}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Send Button - React Native TSX\nDESCRIPTION: This example demonstrates how to replace the default SendButton in Stream Chat React Native with a custom implementation, using a boat icon. It uses the `useMessageInputContext` hook to access context and disables the button if no text or attachments are present.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from 'react-native';\nimport { RootSvg, RootPath, Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst StreamButton = () => {\n  const { sendMessage, text, imageUploads, fileUploads } = useMessageInputContext();\n  const isDisabled = !text && !imageUploads.length && !fileUploads.length;\n\n  return (\n    <TouchableOpacity disabled={isDisabled} onPress={sendMessage}>\n      <RootSvg height={21} width={42} viewBox='0 0 42 21'>\n        <RootPath\n          d='M26.1491984,6.42806971 L38.9522984,5.52046971 C39.7973984,5.46056971 40.3294984,6.41296971 39.8353984,7.10116971 L30.8790984,19.5763697 C30.6912984,19.8379697 30.3888984,19.9931697 30.0667984,19.9931697 L9.98229842,19.9931697 C9.66069842,19.9931697 9.35869842,19.8384697 9.17069842,19.5773697 L0.190598415,7.10216971 C-0.304701585,6.41406971 0.227398415,5.46036971 1.07319842,5.52046971 L13.8372984,6.42816971 L19.2889984,0.333269706 C19.6884984,-0.113330294 20.3884984,-0.110730294 20.7846984,0.338969706 L26.1491984,6.42806971 Z M28.8303984,18.0152734 L20.5212984,14.9099734 L20.5212984,18.0152734 L28.8303984,18.0152734 Z M19.5212984,18.0152734 L19.5212984,14.9099734 L11.2121984,18.0152734 L19.5212984,18.0152734 Z M18.5624984,14.1681697 L10.0729984,17.3371697 L3.82739842,8.65556971 L18.5624984,14.1681697 Z M21.4627984,14.1681697 L29.9522984,17.3371697 L36.1978984,8.65556971 L21.4627984,14.1681697 Z M19.5292984,13.4435697 L19.5292984,2.99476971 L12.5878984,10.8305697 L19.5292984,13.4435697 Z M20.5212984,13.4435697 L20.5212984,2.99606971 L27.4627984,10.8305697 L20.5212984,13.4435697 Z M10.5522984,10.1082697 L12.1493984,8.31366971 L4.34669842,7.75446971 L10.5522984,10.1082697 Z M29.4148984,10.1082697 L27.8178984,8.31366971 L35.6205984,7.75446971 L29.4148984,10.1082697 Z'\n          pathFill={isDisabled ? 'grey' : 'blue'}\n        />\n      </RootSvg>\n    </TouchableOpacity>\n  );\n};\n\n// In your App\n\n<Channel channel={channel} SendButton={StreamButton} />;\n```\n\n----------------------------------------\n\nTITLE: Custom Message Input Layout - React Native JSX\nDESCRIPTION: This code demonstrates how to create a custom layout for the MessageInput component in Stream Chat React Native. It includes stretching the input field, adding buttons for sending messages, opening attachment and command pickers, and disabling the send button when the input field is empty. It uses the useMessageInputContext hook to access sendMessage, text, toggleAttachmentPicker, and openCommandsPicker functions.  The component is passed as the Input prop to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport {\n  Channel,\n  Chat,\n  ImageUploadPreview,\n  OverlayProvider,\n  AutoCompleteInput,\n  useMessageInputContext,\n} from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nconst CustomInput = props => {\n  const { sendMessage, text, toggleAttachmentPicker, openCommandsPicker } = useMessageInputContext();\n\n  return (\n    <View style={styles.fullWidth}>\n      <ImageUploadPreview />\n      <FileUploadPreview />\n      <View style={[styles.fullWidth, styles.inputContainer]}>\n        <AutoCompleteInput />\n      </View>\n      <View style={[styles.fullWidth, styles.row]}>\n        <Button title='Attach' onPress={toggleAttachmentPicker} />\n        <Button title='Commands' onPress={openCommandsPicker} />\n        <Button title='Send' onPress={sendMessage} disabled={!text} />\n      </View>\n    </View>\n  );\n};\n\nexport const ChannelScreen = ({ channel }) => {\n  const [channel, setChannel] = useState();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} Input={CustomInput}>\n            {/** App components */}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  flex: { flex: 1 },\n  fullWidth: {\n    width: '100%',\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  inputContainer: {\n    height: 40,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with Generics (TSX)\nDESCRIPTION: This code snippet demonstrates how to initialize the Stream Chat client with specific generics to define custom data types for attachmentType, channelType, commandType, eventType, messageType, reactionType and userType. It is crucial for providing static type safety when using custom data with Stream Chat.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/typescript.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = StreamChat.getInstance<StreamChatGenerics>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Wrapping NavigationContainer with OverlayProvider and Chat - TSX\nDESCRIPTION: This snippet demonstrates how to wrap the React Navigation's NavigationContainer with Stream Chat's OverlayProvider and Chat components. This ensures that the OverlayProvider renders content above all navigation elements, and that the Chat component handles connection, theming and translations for the entire application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/navigation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const App = () =>\n  <NavigationContainer>\n    <OverlayProvider>\n    // highlight-next-line\n      <Chat client={client}>\n        <Stack.Navigator>\n          <Stack.Screen component={() => {/** App components */})} name='home' />\n        </Stack.Navigator>\n    // highlight-next-line\n      </Chat>\n    </OverlayProvider>\n  </NavigationContainer>;\n```\n\n----------------------------------------\n\nTITLE: Initializing MessageInput Component in React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the MessageInput component within a Stream Chat React Native application. It shows how to integrate MessageInput into a Chat, Channel, and MessageList structure to enable message composition. It requires the stream-chat and stream-chat-react-native libraries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-input.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, Channel, MessageList, MessageInput, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <Channel channel={channel}>\n        <MessageList />\n        // highlight-next-line\n        <MessageInput />\n      </Channel>\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Custom Send Button - React Native TSX\nDESCRIPTION: This TypeScript code demonstrates how to replace the default SendButton component in the MessageInput with a custom implementation. It uses a boat icon as the send button and disables the button if the user has not entered any text or attached any files. It uses the useMessageInputContext hook to access sendMessage, text, imageUploads, and fileUploads functions. The SendButton prop of the Channel component is used to pass the custom component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_2\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { TouchableOpacity } from 'react-native';\nimport { RootSvg, RootPath, Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst StreamButton = () => {\n  const { sendMessage, text, imageUploads, fileUploads } = useMessageInputContext();\n  const isDisabled = !text && !imageUploads.length && !fileUploads.length;\n\n  return (\n    <TouchableOpacity disabled={isDisabled} onPress={sendMessage}>\n      <RootSvg height={21} width={42} viewBox='0 0 42 21'>\n        <RootPath\n          d='M26.1491984,6.42806971 L38.9522984,5.52046971 C39.7973984,5.46056971 40.3294984,6.41296971 39.8353984,7.10116971 L30.8790984,19.5763697 C30.6912984,19.8379697 30.3888984,19.9931697 30.0667984,19.9931697 L9.98229842,19.9931697 C9.66069842,19.9931697 9.35869842,19.8384697 9.17069842,19.5773697 L0.190598415,7.10216971 C-0.304701585,6.41406971 0.227398415,5.46036971 1.07319842,5.52046971 L13.8372984,6.42816971 L19.2889984,0.333269706 C19.6884984,-0.113330294 20.3884984,-0.110730294 20.7846984,0.338969706 L26.1491984,6.42806971 Z M28.8303984,18.0152734 L20.5212984,14.9099734 L20.5212984,18.0152734 L28.8303984,18.0152734 Z M19.5212984,18.0152734 L19.5212984,14.9099734 L11.2121984,18.0152734 L19.5212984,18.0152734 Z M18.5624984,14.1681697 L10.0729984,17.3371697 L3.82739842,8.65556971 L18.5624984,14.1681697 Z M21.4627984,14.1681697 L29.9522984,17.3371697 L36.1978984,8.65556971 L21.4627984,14.1681697 Z M19.5292984,13.4435697 L19.5292984,2.99476971 L12.5878984,10.8305697 L19.5292984,13.4435697 Z M20.5212984,13.4435697 L20.5212984,2.99606971 L27.4627984,10.8305697 L20.5212984,13.4435697 Z M10.5522984,10.1082697 L12.1493984,8.31366971 L4.34669842,7.75446971 L10.5522984,10.1082697 Z M29.4148984,10.1082697 L27.8178984,8.31366971 L35.6205984,7.75446971 L29.4148984,10.1082697 Z'\n          pathFill={isDisabled ? 'grey' : 'blue'}\n        />\n      </RootSvg>\n    </TouchableOpacity>\n  );\n};\n\n// In your App\n\n<Channel channel={channel} SendButton={StreamButton} />;\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client - TypeScript\nDESCRIPTION: This code snippet demonstrates how to initialize the Stream Chat client using an API key. It imports the StreamChat class from the 'stream-chat' library and creates an instance of the client using the getInstance method. The API key is required to authenticate with Stream's chat services.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by Members List - Typescript\nDESCRIPTION: This snippet demonstrates creating a channel using a list of members. The `channel` method is called with the channel type and an object containing the `members` array, along with other optional channel data. Requires channel type and members list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel(channel_type, {\n    members: ['userOne', 'userTwo']\n    name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel on Server - TypeScript\nDESCRIPTION: Creates the Stream Chat channel on the server. This function must be called after initializing a channel object using client.channel. Requires the `stream-chat` package. It's an async function and should be awaited.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Enabling offline support on Chat component\nDESCRIPTION: This code snippet shows how to enable offline support for the `Chat` component by passing the `enableOfflineSupport` prop.  It imports the `Chat` component from the `stream-chat-react-native` library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/offline-support.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat } from 'stream-chat-react-native';\n\n<Chat client={chatClient} enableOfflineSupport>\n  ...\n</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Initializing ChannelList with Filters and Sorting in React Native\nDESCRIPTION: This snippet demonstrates the basic usage of the ChannelList component within a Stream Chat React Native application. It initializes the StreamChat client, defines filters and sort options for querying channels, and renders the ChannelList component within the Chat and OverlayProvider wrappers.  The onSelect prop is used for navigating to a channel screen when a channel is selected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/channel-list.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst filters = { members: { $in: [ 'vishal', 'lucas', 'neil' ] } };\nconst sort = { last_updated: -1 };\nconst options = { limit: 20, messages_limit: 30 };\n\nexport const App = () => <OverlayProvider>\n    <Chat client={client}>\n    // highlight-start\n      <ChannelList\n        filters={filters}\n        sort={sort}\n        options={options}\n        onSelect={(channel) => /** navigate to channel screen */ }\n      />\n    // highlight-end\n    </Chat>\n  </OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Action List Item - React Native\nDESCRIPTION: This snippet demonstrates how to customize the `MessageActionListItem` component in Stream Chat React Native. It conditionally renders different components based on the `actionType`. Specifically, it customizes the 'pinMessage' and 'muteUser' actions, and uses the default `MessageActionListItem` for other actions. It uses `useMessageActionAnimation` hook to handle tap animation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MessageActionListItem, OverlayProvider, useMessageActionAnimation } from 'stream-chat-react-native';\n\nconst CustomMessageActionListItem = ({ action, actionType, ...rest }) => {\n  const { onTap } = useMessageActionAnimation({ action: action });\n  if (actionType === 'pinMessage') {\n    return (\n      <TapGestureHandler onHandlerStateChange={onTap}>\n        <Animated.View>\n          <Text>{actionType}</Text>\n        </Animated.View>\n      </TapGestureHandler>\n    );\n  } else if (actionType === 'muteUser') {\n    return (\n      <TapGestureHandler onHandlerStateChange={onTap}>\n        <Animated.View>\n          <Text>{actionType}</Text>\n        </Animated.View>\n      </TapGestureHandler>\n    );\n  } else {\n    return <MessageActionListItem action={action} actionType={actionType} {...rest} />;\n  }\n};\n\n<OverlayProvider MessageActionListItem={CustomMessageActionListItem}>\n  {/* Underlying Channel, MessageList and Message components */}\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Resetting the Database on User Sign Out\nDESCRIPTION: This TypeScript code snippet demonstrates how to reset the offline database using QuickSqliteClient.resetDB() before disconnecting the user. This is important for managing user data and security when a user logs out.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/offline-support.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QuickSqliteClient } from 'stream-chat-react-native';\n\n// Sign out logic\nQuickSqliteClient.resetDB();\nchatClient.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat Client and Connect User\nDESCRIPTION: This TypeScript code snippet initializes the StreamChat client, connects the user, and sets a state variable to indicate that the client is ready. This allows the chat components to render without waiting for the connectUser call to succeed, which is crucial for offline support.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/offline-support.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst chatClient = StreamChat.getInstance('API_KEY');\nconst App = () => {\n  const [isClientReady, setIsClientReady] = useState(false);\n\n  useEffect(() => {\n    const startChat = async () => {\n      const connectPromise = chatClient.connectUser(user, tokenOrTokenProvider);\n      setIsClientReady(true); // this allows components to render\n      await connectPromise();\n      // Any other post-connectUser logic you may have goes here.\n    };\n    startChat();\n  }, []);\n\n  if (!isClientReady) return null; // or some loading indicator;\n\n  return (\n    <Chat client={chatClient} enableOfflineSupport>\n      ...\n    </Chat>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing OverlayProvider with ChannelList, Chat - JSX\nDESCRIPTION: This code snippet demonstrates the basic usage of the `OverlayProvider` component in a React Native application using Stream Chat. It initializes the Stream Chat client, wraps the `Chat` and `ChannelList` components within the `OverlayProvider`, and renders them. The `OverlayProvider` enables features such as message overlays and the attachment picker.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/overlay-provider.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Stream Chat Client via useChatContext - TypeScript\nDESCRIPTION: This snippet demonstrates how to access the Stream Chat client instance within a component using the `useChatContext` hook from `stream-chat-react-native`.  This is helpful when customizing components within the `Chat` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Blocking a User with Stream Chat\nDESCRIPTION: This code snippet demonstrates how to block a user using the `blockUser` method from the Stream Chat SDK.  It initializes a Stream Chat client instance, then defines an asynchronous function `blockUser` that takes a user ID as input and attempts to block the specified user. An error message is logged if the operation fails.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/blocking-users.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nconst chatClient = StreamChat.getInstance('your api key');\n\n// Note this has to be done after the client connection(`client.connectUser`) is established.\nconst blockUser = async (userId: string) => {\n  try {\n    await chatClient.blockUser(userId);\n  } catch (err) {\n    console.log('Error blocking user:', err);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating WallpaperOverviewScreen for Background Selection - React Native\nDESCRIPTION: This code defines a `WallpaperOverviewScreen` component that allows users to select a background image from a predefined list and store it in `react-native-mmkv` using `useMMKVObject` hook.  It navigates back to the `Channel` screen after selection. Requires `react-navigation` and `react-native-mmkv`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-background.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RouteProp } from '@react-navigation/native';\nimport { useMMKVObject } from 'react-native-mmkv';\nimport { View, SafeAreaView, Pressable, Image, StyleSheet } from 'react-native';\n\nconst WallpaperOverviewScreen = ({\n  navigation: { navigate },\n  route: {\n    params: { channelId },\n  },\n}: WallpaperOverviewScreenProps) => {\n  const [_, setChannelPreferences] = useMMKVObject<ChannelPreferences>(channelId);\n  return (\n    <SafeAreaView\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n      }}\n    >\n      <View style={styles.container}>\n        {BRIGHT_IMAGES?.map(({ imageUri = '' }, i) => {\n          const handleOnPress = () => {\n            setChannelPreferences({ imageUri });\n            navigate('Channel');\n          };\n          return (\n            <Pressable\n              key={i}\n              onPress={handleOnPress}\n              style={{\n                margin: 1,\n                width: GRID_ITEM_WIDTH,\n              }}\n            >\n              <Image style={styles.image} source={{ uri: imageUri }} />\n            </Pressable>\n          );\n        })}\n      </View>\n    </SafeAreaView>\n  );\n};\n\ntype StackNavigatorParamList = {\n  WallpaperOverviewScreen: {\n    channelId: string;\n  };\n};\n\ntype WallpaperOverviewScreenProps = {\n  navigation: StackNavigationProp<StackNavigatorParamList, 'WallpaperOverviewScreen'>;\n  route: RouteProp<StackNavigatorParamList, 'WallpaperOverviewScreen'>;\n};\n\ntype ChannelPreferences = {\n  imageUri: string;\n};\n\nconst GRID_ITEM_WIDTH = '32.7%';\n\n// Some random images that will get you started\nconst BRIGHT_IMAGES = [\n  'https://images.unsplash.com/photo-1549125764-91425ca48850?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8NjF8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1549241520-425e3dfc01cb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8ODB8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1554226321-24fdcddd5a55?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MjE5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1550006490-9f0656b79e9d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8ODl8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1551506448-074afa034c05?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTEzfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553114835-6f7674d3c2c0?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTMyfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553075712-453f7213c24f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTMzfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1551917951-148edcd8ea8d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTU3fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553969923-bbf0cac2666b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MjA3fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553194642-29b272a173b9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTcwfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553356084-58ef4a67b2a7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTcxfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553526777-5ffa3b3248d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTk4fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n].map(imageUri => ({\n  imageUri,\n}));\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flex: 1,\n    alignContent: 'stretch',\n    flexWrap: 'wrap',\n    padding: 6,\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Filtering ChannelList\nDESCRIPTION: This code snippet shows how to apply filters to the ChannelList component to display specific channels, for example, only frozen channels with a specific member.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/channel_list_customization.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst filters = {\n  members: { $in: ['vishal'] },\n  frozen: true\n}\n\n<ChannelList filters={filters} />\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Message Action\nDESCRIPTION: This JSX snippet demonstrates how to add a custom message action (\"Mute User\") to the message action list. It checks if the message is from another user and adds the mute/unmute action accordingly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { messageActions as defaultMessageActions, Mute as MuteIcon } from 'stream-chat-react-native';\n\n<Channel\n  channel={channel}\n  messageActions={param => {\n    const { isMyMessage, ownCapabilities, dismissOverlay } = param;\n    const actions = defaultMessageActions({ ...param });\n\n    if (!isMyMessage) {\n      const isMuted = (client.mutedUsers || []).some(\n        mute => mute.user.id === client.userID && mute.target.id === message.user?.id,\n      );\n\n      actions.push({\n        action: async () => {\n          dismissOverlay();\n          if (message.user?.id) {\n            if (isMuted) {\n              await client.unmuteUser(message.user.id);\n            } else {\n              await client.muteUser(message.user.id);\n            }\n          }\n        },\n        actionType: 'custom-mute-user',\n        icon: <MuteIcon />,\n        title: isMuted ? t('Custom Unmute User') : t('Custom Mute User'),\n      });\n    }\n\n    return actions;\n  }}\n>\n  {/** MessageList and MessageInput component here */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat Client and Rendering Chat Component - TSX\nDESCRIPTION: This code snippet demonstrates how to initialize a Stream Chat client using the `useCreateChatClient` hook and render the `Chat` component. It includes the necessary imports from the `stream-chat-react-native` library and shows how to wrap the `Chat` component with the `OverlayProvider` and include the `ChannelList` component as a child.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/chat.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider, useCreateChatClient } from 'stream-chat-react-native';\n\n// highlight-start\nconst chatApiKey = 'REPLACE_WITH_API_KEY';\nconst chatUserId = 'REPLACE_WITH_USER_ID';\nconst chatUserName = 'REPLACE_WITH_USER_NAME';\nconst chatUserToken = 'REPLACE_WITH_USER_TOKEN';\n// highlight-end\n\nconst user = {\n  id: chatUserId,\n  name: chatUserName,\n};\n\nexport const App = () => {\n  // highlight-start\n  const chatClient = useCreateChatClient({\n    apiKey: chatApiKey,\n    userData: user,\n    tokenOrProvider: chatUserToken,\n  });\n  // highlight-end\n\n  return (\n    <OverlayProvider>\n      // highlight-next-line\n      <Chat client={chatClient}>\n        <ChannelList />\n        // highlight-next-line\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Watching a Channel - Typescript\nDESCRIPTION: This snippet shows how to 'watch' a channel. Watching a channel creates it on the server (if it doesn't exist) and subscribes the client to updates on that channel. Must be called after channel creation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.watch();\n```\n\n----------------------------------------\n\nTITLE: Consuming PaginatedMessageListContext with usePaginatedMessageListContext - TSX\nDESCRIPTION: Shows how to access the PaginatedMessageListContext using the usePaginatedMessageListContext hook provided by the 'stream-chat-react-native' library. It imports the custom hook and then destructures properties like loadingMore, loadMoreRecent, and messages for use within the component. The component must be a child of the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/paginated-message-list-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePaginatedMessageListContext } from 'stream-chat-react-native';\n\nconst { loadingMore, loadMoreRecent, messages } = usePaginatedMessageListContext();\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with new StreamChat() - TS\nDESCRIPTION: This snippet shows the traditional way to instantiate the Stream Chat client using `new StreamChat()`.  This approach is backward compatible but can lead to multiple WebSocket connections if not managed carefully. Requires an API key for initialization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new StreamChat('api_key');\n```\n\n----------------------------------------\n\nTITLE: Define Attachment Type with Typescript Generics\nDESCRIPTION: This TypeScript code defines the attachment type using generics, extending the `DefaultStreamChatGenerics` to include `latitude`, `longitude`, and `ended_at` properties. This ensures type safety when working with location attachments in the Stream Chat application. It also shows how to instantiate the StreamChat client using the defined generics.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultStreamChatGenerics } from 'stream-chat-react-native';\nimport { StreamChat } from 'stream-chat';\n\ntype LocalAttachmentType = DefaultStreamChatGenerics['attachmentType'] & {\n  latitude?: number;\n  longitude?: number;\n  ended_at?: string;\n};\n\nexport type StreamChatGenerics = DefaultStreamChatGenerics & {\n  attachmentType: LocalAttachmentType;\n};\n\n// and use the generics when creating the client\nconst client = StreamChat.getInstance<StreamChatGenerics>('<ADD_YOUR_STREAM_API_KEY_HERE>');\n```\n\n----------------------------------------\n\nTITLE: Custom Input Component with React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom input component for the Stream Chat React Native SDK. It includes elements for image upload preview, file upload preview, an auto-complete input, and buttons for attaching files, accessing commands, and sending messages. It utilizes the useMessageInputContext hook to manage input interactions and display a custom UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Channel,\n  Chat,\n  ImageUploadPreview,\n  OverlayProvider,\n  AutoCompleteInput,\n  useMessageInputContext,\n} from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nconst CustomInput = props => {\n  const { sendMessage, text, toggleAttachmentPicker, openCommandsPicker } = useMessageInputContext();\n\n  return (\n    <View style={styles.fullWidth}>\n      <ImageUploadPreview />\n      <FileUploadPreview />\n      <View style={[styles.fullWidth, styles.inputContainer]}>\n        <AutoCompleteInput />\n      </View>\n      <View style={[styles.fullWidth, styles.row]}>\n        <Button title='Attach' onPress={toggleAttachmentPicker} />\n        <Button title='Commands' onPress={openCommandsPicker} />\n        <Button title='Send' onPress={sendMessage} disabled={!text} />\n      </View>\n    </View>\n  );\n};\n\nexport const ChannelScreen = ({ channel }) => {\n  const [channel, setChannel] = useState();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} Input={CustomInput}>\n            {/** App components */}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  flex: { flex: 1 },\n  fullWidth: {\n    width: '100%',\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  inputContainer: {\n    height: 40,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Message UI Component Integration - TSX\nDESCRIPTION: Shows how to integrate a custom message UI component (`CustomMessageUIComponent`) into the Stream Chat React Native channel, replacing the default MessageSimple component.  It uses `useChannelContext` and `useMessageContext` hooks to access channel and message data. Requires `OverlayProvider`, `Chat`, `Channel`, `MessageList`, `MessageInput`, `useChannelContext`, `useMessagesContext`, and `useMessageContext` from `stream-chat-react-native`.  `CustomMessageUIComponent` needs to be a React component defined elsewhere.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  useChannelContext,\n  useMessagesContext,\n  useMessageContext,\n} from 'stream-chat-react-native';\n\nconst CustomMessageUIComponent = () => {\n  const { channel, members, watchers, error, loading } = useChannelContext();\n  const { handleDeleteMessage, handleResendMessage, message, reactions } = useMessageContext();\n\n  /** Custom implementation */\n};\n\n<OverlayProvider bottomInset={bottom} i18nInstance={streami18n}>\n  <Chat client={chatClient} i18nInstance={streami18n}>\n    <Channel channel={channel} keyboardVerticalOffset={headerHeight} MessageSimple={CustomMessageUIComponent}>\n      <View style={{ flex: 1 }}>\n        <MessageList />\n        <MessageInput />\n      </View>\n    </Channel>\n  </Chat>\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Register Device for Push Notifications with Stream Chat (JS)\nDESCRIPTION: This JavaScript snippet demonstrates how to register a device with Stream Chat to receive push notifications.  It requests push notification permission, retrieves the Firebase device token, and registers the device with Stream using `client.addDevice`.  It also includes logic to remove old tokens and refresh tokens. Requires React Native Firebase messaging module and AsyncStorage.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Request Push Notification permission from device.\nconst requestPermission = async () => {\n  const authStatus = await messaging().requestPermission();\n  const enabled =\n    authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log('Authorization status:', authStatus);\n  }\n};\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n  const unsubscribeTokenRefreshListenerRef = useRef<() => void>();\n\n  useEffect(() => {\n    // Register FCM token with stream chat server.\n    const registerPushToken = async () => {\n      // unsubscribe any previous listener\n      unsubscribeTokenRefreshListenerRef.current?.();\n      const token = await messaging().getToken();\n      const push_provider = 'firebase';\n      const push_provider_name = 'MyRNAppFirebasePush'; // name an alias for your push provider (optional)\n      client.setLocalDevice({\n        id: token,\n        push_provider,\n        // push_provider_name is meant for optional multiple providers support, see: https://getstream.io/chat/docs/react/push_providers_and_multi_bundle\n        push_provider_name,\n      });\n      await AsyncStorage.setItem('@current_push_token', token);\n\n      const removeOldToken = async () => {\n        const oldToken = await AsyncStorage.getItem('@current_push_token');\n        if (oldToken !== null) {\n          await client.removeDevice(oldToken);\n        }\n      };\n\n      unsubscribeTokenRefreshListenerRef.current = messaging().onTokenRefresh(async newToken => {\n        await Promise.all([\n          removeOldToken(),\n          client.addDevice(newToken, push_provider, USER_ID, push_provider_name),\n          AsyncStorage.setItem('@current_push_token', newToken),\n        ]);\n      });\n    };\n\n    const init = async () => {\n      await requestPermission();\n      await registerPushToken();\n      await client.connectUser({ id: USER_ID }, USER_TOKEN);\n\n      setIsReady(true);\n    };\n\n    init();\n\n    return async () => {\n      await client?.disconnectUser();\n      unsubscribeTokenRefreshListenerRef.current?.();\n    };\n  }, []);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Chat client={client}>{/* Child components of Chat go here */}</Chat>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageContext with useContext - React Native\nDESCRIPTION: This snippet demonstrates how to consume the MessageContext using the useContext hook in a React Native component.  It imports useContext from 'react' and MessageContext from 'stream-chat-react-native'. The context provides access to message properties like isMyMessage, message object and attached files.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/message-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { MessageContext } from 'stream-chat-react-native';\n\nconst { isMyMessage, message, files } = useContext(MessageContext);\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageFooter with formattedDate in React Native\nDESCRIPTION: This code demonstrates how to customize the MessageFooter component in Stream Chat React Native by providing a custom formattedDate function. This function is used to format the timestamp displayed in the message footer. The example shows how to integrate the custom MessageFooter into the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_footer.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, MessageFooter } from 'stream-chat-react-native';\n\nconst getDateTimeStamp = message => `My new date is ${message.created_at}`;\n\nconst CustomMessageFooter = ({ message }) => {\n  const dateFormatted = useMemo(() => getDateTimeStamp(message), [message.created_at]);\n\n  <MessageFooter formattedDate={dateFormatted} />;\n};\n\n<Channel MessageFooter={CustomMessageFooter} />;\n```\n\n----------------------------------------\n\nTITLE: Connecting a User to Stream Chat - Typescript\nDESCRIPTION: This snippet demonstrates how to connect a user to Stream Chat using the connectUser method. A user object containing user details (id, name, image) and a user token are provided.  The user object is used to represent the user in the chat application. The user_token is obtained from your backend and used to authenticate the user. Errors are thrown if a user is already connected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'jlahey',\n    name: 'Jim Lahey',\n    image: 'https://i.imgur.com/fR9Jz14.png',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Actions with messageActions Prop (Channel)\nDESCRIPTION: This code snippet shows how to use the `messageActions` prop on the Channel component to customize the default message actions. The `messageActions` prop accepts a callback function that receives an object with all the default message actions as `MessageAction` objects. The function should return an array of `MessageAction` objects to render in a `MessageActionList` within the message overlay.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmessageActions={({\n  blockUser, // MessageAction | null;\n  copyMessage, // MessageAction | null;\n  deleteMessage, // MessageAction | null;\n  dismissOverlay, // () => void;\n  editMessage, // MessageAction | null;\n  error, // boolean;\n  flagMessage, // MessageAction | null;\n  isMessageActionsVisible, // boolean;\n  isMyMessage, // boolean;\n  isThreadMessage, // boolean;\n  message, // MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  reply, // MessageAction | null;\n  retry, // MessageAction | null;\n  threadReply, // MessageAction | null;\n  ownCapabilities, // object\n}) => {\n  return [] // Array<MessageAction>\n}}\n```\n\n----------------------------------------\n\nTITLE: Consuming ChatContext with useContext - TSX\nDESCRIPTION: This snippet shows how to consume the ChatContext provided by the Chat component using the useContext hook.  It imports the ChatContext from stream-chat-react-native and destructures the client and isOnline properties from the context value. It requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/chat-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChatContext } from 'stream-chat-react-native';\n\nconst { client, isOnline } = useContext(ChatContext);\n```\n\n----------------------------------------\n\nTITLE: Consuming ChatContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ChatContext using the useContext hook provided by React.  It imports the ChatContext from the stream-chat-react-native library and uses useContext to access the client and isOnline values.  Dependencies: React, stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/chat-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChatContext } from 'stream-chat-react-native';\n\nconst { client, isOnline } = useContext(ChatContext);\n```\n\n----------------------------------------\n\nTITLE: App Component - TypeScript\nDESCRIPTION: This defines the main App component, a functional component which manages the application state for channel, client readiness, and thread selection. It uses useEffect to connect the user on mount and conditionally renders the Chat component based on the current state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [clientReady, setClientReady] = useState(false);\n  const [thread, setThread] = useState<MessageType | null>();\n\n  useEffect(() => {\n    const setupClient = async () => {\n      try {\n        await client.connectUser(\n          {\n            id: 'jlahey',\n            name: 'Jim Lahey',\n            image: 'https://i.imgur.com/fR9Jz14.png',\n          },\n          'user_token',\n        );\n        setClientReady(true);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    setupClient();\n  }, []);\n\n  const onBackPress = () => {\n    if (thread) {\n      setThread(undefined);\n    } else if (channel) {\n      setChannel(undefined);\n    }\n  };\n\n  if (!clientReady) return null;\n\n  return (\n    <OverlayProvider topInset={60}>\n      <TouchableOpacity onPress={onBackPress} disabled={!channel}>\n        <View style={{ height: 60, paddingLeft: 16, paddingTop: 40 }}>{channel && <Text>Back</Text>}</View>\n      </TouchableOpacity>\n      <View style={{ flex: 1 }}>\n        <Chat client={client}>\n          {channel ? (\n            <Channel channel={channel} keyboardVerticalOffset={60} thread={thread} threadList={!!thread}>\n              {thread ? (\n                <Thread />\n              ) : (\n                <>\n                  <MessageList onThreadSelect={setThread} />\n                  <MessageInput />\n                </>\n              )}\n            </Channel>\n          ) : (\n            <ChannelList onSelect={setChannel} />\n          )}\n        </Chat>\n      </View>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Full Width Message Bubble - React Native\nDESCRIPTION: This snippet implements a full-width message bubble by overriding the default styles in the theme. It sets the width of various components within the message bubble, such as the card, content, and gallery, to fill the available screen width. It also overrides the reply style to prevent text overflow.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { vw } from 'stream-chat-react-native';\n\nconst maxWidth = vw(100) - 72;\nconst themeStyle = {\n  messageSimple: {\n    card: {\n      container: {\n        width: maxWidth,\n      },\n    },\n    content: {\n      container: {\n        width: maxWidth,\n      },\n      textContainer: {\n        width: maxWidth,\n        maxWidth: maxWidth,\n      },\n      wrapper: { width: maxWidth },\n    },\n    gallery: {\n      // -2 because of the 2px border\n      width: maxWidth - 2,\n    },\n    giphy: {\n      container: {\n        width: maxWidth,\n      },\n    },\n  },\n  // Override reply so the reuse of message style does not overflow text in the message input\n  reply: {\n    textContainer: {\n      maxWidth: undefined,\n      width: undefined,\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode - TypeScript\nDESCRIPTION: This code demonstrates how to implement dark mode support using the colorScheme from React Native and applying different themes based on the color scheme. It uses the useColorScheme hook to detect the current color scheme and updates the theme state accordingly. This ensures that the UI adapts to the user's preferred color scheme. The state is updated in a useEffect hook to avoid unnecessary re-renders, and it imports and uses OverlayProvider, Chat, and ChannelList components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/theming.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { useColorScheme } from 'react-native';\nimport type { DeepPartial, Theme } from 'stream-chat-react-native';\n\nexport const App = () => {\n  const colorScheme = useColorScheme();\n  const getTheme = (): DeepPartial<Theme> => ({\n    colors: colorScheme === 'dark' ? { black: '#FFFFFF' } : { black: '#000000' },\n  });\n  const [theme, setTheme] = useState(getTheme());\n\n  useEffect(() => {\n    setTheme(getTheme());\n  }, [colorScheme]);\n\n  return (\n    <OverlayProvider value={{ style: theme }}>\n      <Chat client={client}>\n        <ChannelList />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Compress File Before Upload - React Native Typescript\nDESCRIPTION: This code snippet demonstrates how to compress a video file before uploading it to Stream Chat using the Channel component and the doDocUploadRequest prop. It uses the react-native-compressor library to compress the video file before sending it. The function checks if the file is a video, compresses it and updates the file URI with the compressed file URI before sending it. Dependencies: stream-chat-react-native, react-native-compressor.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel, ChannelProps } from 'stream-chat-react-native';\nimport { Video as VideoCompressor } from 'react-native-compressor';\n\n\nconst customDoDocUploadRequest: NonNullable<ChannelProps['doDocUploadRequest']> = async (\n  file,\n  channel,\n) => {\n  if (!file.uri) {\n    throw new Error('Invalid file provided');\n  }\n  // check if it is a video file using the MIME type\n  if (file.mimeType?.startsWith('video/')) {\n    const result = await VideoCompressor.compress(file.uri, {\n      compressionMethod: 'auto',\n    });\n    // set the local file uri to the compressed file\n    file.uri = result;\n  }\n\n  // send the file\n  return await channel.sendFile(file.uri, file.name, file.mimeType);\n};\n\n\n<Channel channel={channel} doDocUploadRequest={customDoDocUploadRequest}>\n```\n\n----------------------------------------\n\nTITLE: Connecting a User to Stream Chat - TypeScript\nDESCRIPTION: This snippet demonstrates how to connect a user to the Stream Chat service. It calls the `connectUser` method on the `client` instance, providing a user object with `id` and `name` properties, along with a `user_token` for authentication.  The `user_token` should be obtained from your backend.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_2\n\nLANGUAGE: ts\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'testUser',\n    name: 'Test User',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: useStateStore Hook Example - Typescript/JSX\nDESCRIPTION: This snippet shows how to use the useStateStore hook from the stream-chat-react-native library to access and react to changes in the thread state. It defines a selector to extract the `threads` property and then uses useStateStore to subscribe to updates.  This provides a convenient way to integrate reactive state into React components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStateStore } from 'stream-chat-react-native';\nimport type { ThreadManagerState } from 'stream-chat';\n\nconst selector = (nextValue: ThreadManagerState) => ({ threads: nextValue.threads }) as const;\n\nconst CustomThreadList = () => {\n  const { client } = useChatContext();\n  const { threads } = useStateStore(client.threads.state, selector);\n\n  return (\n    <View>\n      {threads.map(thread => (\n        <Text key={thread.id}>{thread.id}</Text>\n      ))}\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ThemeContext using useTheme hook - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ThemeContext using the useTheme hook provided by the stream-chat-react-native library. It imports the useTheme hook, then extracts the accent_red color from the theme object. This hook provides a more convenient way to access the theme compared to useContext.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/theme-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'stream-chat-react-native';\n\nconst {\n  theme: {\n    colors: { accent_red },\n  },\n} = useTheme();\n```\n\n----------------------------------------\n\nTITLE: Implementing Full Width Message Bubble - JSX\nDESCRIPTION: Provides an example of how to implement full-width message bubbles in Stream Chat React Native by customizing the theme. This involves setting the width of various elements within the `messageSimple` style to a calculated maximum width based on viewport width.  It also overrides the `reply` style to avoid overflow issues in the message input. Requires the `Chat` and `vw` (viewport width) utility from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { vw } from 'stream-chat-react-native';\n\nconst maxWidth = vw(100) - 72;\nconst themeStyle = {\n  messageSimple: {\n    card: {\n      container: {\n        width: maxWidth,\n      },\n    },\n    content: {\n      container: {\n        width: maxWidth,\n      },\n      textContainer: {\n        width: maxWidth,\n        maxWidth: maxWidth,\n      },\n      wrapper: { width: maxWidth },\n    },\n    gallery: {\n      // -2 because of the 2px border\n      width: maxWidth - 2,\n    },\n    giphy: {\n      container: {\n        width: maxWidth,\n      },\n    },\n  },\n  // Override reply so the reuse of message style does not overflow text in the message input\n  reply: {\n    textContainer: {\n      maxWidth: undefined,\n      width: undefined,\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Action - React Native\nDESCRIPTION: This snippet demonstrates how to disable a specific message action by returning `null` for that action type within the `MessageActionListItem` component. In this example, the 'pinMessage' action is disabled, effectively removing it from the action list. All other actions use the default `MessageActionListItem` component. It is wrapped by the OverlayProvider to take effect.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { MessageActionListItem, OverlayProvider, useMessageActionAnimation } from 'stream-chat-react-native';\n\nconst CustomMessageActionListItem = ({ action, actionType, ...rest }) => {\n  if (actionType === 'pinMessage') {\n    return null;\n  } else {\n    return <MessageActionListItem action={action} actionType={actionType} {...rest} />;\n  }\n};\n\n<OverlayProvider MessageActionListItem={CustomMessageActionListItem}>\n  {/* Underlying Channel, MessageList and Message components */}\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Action List with React and Typescript\nDESCRIPTION: This code shows how to fully customize the Message Action List within the Stream Chat React Native SDK using React and Typescript. It defines a `CustomMessageActionList` component that renders a custom list of message actions, each represented by a `MessageActionListItem`.  The component retrieves message actions from a predefined array and uses the `useOverlayContext` hook to dismiss the overlay after an action is performed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_actions_customization.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessageActionListItem, OverlayProvider, useOverlayContext } from 'stream-chat-react-native';\n\nconst CustomMessageActionList = () => {\n  const { setOverlay } = useOverlayContext();\n  const messageActions = [\n    {\n      action: function () {\n        Alert.alert('Edit Message action called.');\n        setOverlay('none');\n      },\n      actionType: 'editMessage',\n      title: 'Edit messagee',\n    },\n    {\n      action: function () {\n        Alert.alert('Delete message action');\n        setOverlay('none');\n      },\n      actionType: 'deleteMessage',\n      title: 'Delete Message',\n    },\n  ];\n  return (\n    <View style={{ backgroundColor: 'white' }}>\n      {messageActions.map(({ actionType, ...rest }) => (\n        <MessageActionListItem actionType={actionType} key={actionType} {...rest} />\n      ))}\n    </View>\n  );\n};\n\n<OverlayProvider MessageActionList={CustomMessageActionList}>\n  {/* Underlying Channel, MessageList and Message components */}\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Optimizing Attachment Updates with isAttachmentEqual - TypeScript\nDESCRIPTION: This code defines a function `isAttachmentEqual` to optimize updates of location attachments in the chat. It compares the latitude, longitude, and ended_at properties of the previous and next attachments. If all three properties are equal, it returns `true`, preventing unnecessary re-renders. This is crucial for performance, especially when dealing with frequent live location updates. This is necessary because default memoization will not trigger updates based on custom properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAttachmentEqual: NonNullable<React.ComponentProps<typeof Channel<StreamChatGenerics>>['isAttachmentEqual']> = (\n  prevAttachment,\n  nextAttachment,\n) => {\n  if (prevAttachment.type === 'location' && nextAttachment.type === 'location') {\n    return (\n      prevAttachment.latitude === nextAttachment.latitude &&\n      prevAttachment.longitude === nextAttachment.longitude &&\n      prevAttachment.ended_at === nextAttachment.ended_at\n    );\n  }\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a Device with Stream for Push Notifications - JavaScript\nDESCRIPTION: This React Native code snippet registers a device with Stream Chat to receive push notifications using Firebase Cloud Messaging (FCM). It requests permission, retrieves the FCM token, and uses `client.addDevice` to register the device with Stream.  The snippet also includes a listener for token refresh and disconnects the user on component unmount. It depends on `@react-native-firebase/messaging` and Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/push_notifications.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Request Push Notification permission from device.\nconst requestPermission = async () => {\n  const authStatus = await messaging().requestPermission();\n  const enabled =\n    authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log('Authorization status:', authStatus);\n  }\n};\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n\n  useEffect(() => {\n    let unsubscribeTokenRefreshListener;\n    // Register FCM token with stream chat server.\n    const registerPushToken = async () => {\n      const token = await messaging().getToken();\n      await client.addDevice(token, 'firebase');\n\n      unsubscribeTokenRefreshListener = messaging().onTokenRefresh(async newToken => {\n        await client.addDevice(newToken, 'firebase');\n      });\n    };\n\n    const init = async () => {\n      await client.connectUser({ id: USER_ID }, USER_TOKEN);\n\n      await requestPermission();\n      await registerPushToken();\n\n      setIsReady(true);\n    };\n\n    init();\n\n    return async () => {\n      await client?.disconnectUser();\n      unsubscribeTokenRefreshListener?.();\n    };\n  }, []);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Chat client={client}>{/* Child components of Chat go here */}</Chat>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Adding MessageInput to Channel for Sending Messages - React Native\nDESCRIPTION: This snippet extends the previous example by adding the `MessageInput` component. It allows users to send messages in the selected channel.  The `keyboardVerticalOffset` prop on the `Channel` component is used to adjust for header spacing.  It also renders the `MessageInput` when a channel is selected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0}>\n            <MessageList />\n            <MessageInput />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Channel Screen Component using useFocusEffect - TypeScript\nDESCRIPTION: This component renders the Channel screen and handles thread selection using the useFocusEffect hook from React Navigation. It manages the selected thread using a local state variable, ensuring the thread is cleared when the screen gains focus. When a thread is selected, the state is updated, and the user navigates to the ThreadScreen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/navigation.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ChannelScreen = () => {\n  const { channel } = useAppChannel();\n  const [selectedThread, setSelectedThread] = useState<MessageType>();\n\n  useFocusEffect(() => {\n    setSelectedThread(undefined);\n  });\n\n  return (\n    <Channel channel={channel} thread={selectedThread}>\n      <MessageList\n        onThreadSelect={thread => {\n          setSelectedThread(thread);\n          navigation.navigate('ThreadScreen', { thread });\n        }}\n      />\n      <MessageInput />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Intercepting Message Action - React Native\nDESCRIPTION: This snippet demonstrates how to intercept a message action, specifically the 'Copy Message' action, to add analytics tracking. It utilizes the `handleCopy` prop of the `Channel` component to execute a custom `trackCopyAction` function before the default copy action is performed. This allows for tracking user interactions without modifying the core functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\n<Channel handleCopy={() => trackCopyAction()} />\n```\n\n----------------------------------------\n\nTITLE: Setting Language During Streami18n Initialization\nDESCRIPTION: Shows how to initialize Streami18n with a specific language.  The `language` option is used to specify the desired language during the instantiation. Example shows setting it to Dutch ('nl').\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n({ language: 'nl' }); // Instantiate Streami18n with Dutch strings.\n```\n\n----------------------------------------\n\nTITLE: Implementing Double Tap Reaction\nDESCRIPTION: This snippet demonstrates how to implement an Instagram-style double-tap reaction using `react-native-gesture-handler`. It utilizes `TapGestureHandler` and `useAnimatedGestureHandler` to detect double taps on a message and trigger a 'love' reaction.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomMessage = (props: MessageSimpleProps) => {\n  const doubleTapRef = useRef(null);\n  const { message, handleToggleReaction } = useMessageContext();\n\n  const _onDoubleTap = useAnimatedGestureHandler<TapGestureHandlerGestureEvent>(\n    {\n      onActive: () => {\n        console.log('double tapped')\n        runOnJS(handleToggleReaction)('love')\n      },\n    },\n    [message],\n  );\n\n  return (\n    <TapGestureHandler\n      waitFor={doubleTapRef}>\n      <Animated.View>\n        <TapGestureHandler\n          ref={doubleTapRef}\n          numberOfTaps={2}\n          onHandlerStateChange={_onDoubleTap}>\n          <Animated.View>\n            <MessageSimple {...props} />\n          </Animated.View>\n        </TapGestureHandler>\n      </Animated.View>\n    </TapGestureHandler>\n  );\n}\n\n<Channel\n  channel={channel}\n  MessageSimple={CustomMessage}\n>\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete List - JSX\nDESCRIPTION: This example demonstrates how to completely customize the autocomplete suggestion list using the `AutoCompleteSuggestionList` prop in the `Channel` component. It showcases different rendering approaches based on the `triggerType`, including using `FlatList` for emoji suggestions.  The component provides access to `data`, `onSelect`, `queryText`, and `triggerType` props for complete control over list rendering and behavior. The default `AutoCompleteSuggestionList` must be returned if no change is desired for a specific trigger type.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-auto-complete-suggestion-list.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AutoCompleteSuggestionHeader, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\nimport { FlatList, Text, View } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionList={({ data, onSelect, queryText, triggerType }) => {\n    if (triggerType === 'command') {\n      return (\n        <View>\n          <View>\n            <Text>Command suggestions for {queryText}</Text>\n          </View>\n          {data.map(item => (\n            <AutoCompleteSuggestionItem itemProps={item} key={item.name} triggerType={triggerType} />\n          ))}\n        </View>\n      );\n    } else if (triggerType === 'emoji') {\n      return (\n        <FlatList\n          data={data}\n          keyboardShouldPersistTaps='always'\n          ListHeaderComponent={<AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />}\n          renderItem={({ index, item }) => (\n            <TouchableOpacity\n              onPress={() => {\n                onSelect(item);\n              }}\n            >\n              <Text>{item.unicode}</Text>\n            </TouchableOpacity>\n          )}\n        />\n      );\n    } else {\n      return (\n        <View>\n          <AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />\n          {data.map(item => (\n            <AutoCompleteSuggestionItem itemProps={item} key={item.name} triggerType={triggerType} />\n          ))}\n        </View>\n      );\n    }\n  }}\n>\n  {/*The underlying components*/}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode - JSX\nDESCRIPTION: This snippet implements dark mode support in Stream Chat React Native by dynamically switching themes based on the color scheme provided by React Native's `useColorScheme` hook.  It uses `useEffect` and `useState` to update the theme when the `colorScheme` changes, and applies the appropriate theme to the `OverlayProvider`. To prevent unnecessary renders, theme changes are only triggered when the `colorScheme` changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/theme.mdx#_snippet_3\n\nLANGUAGE: JSX\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { useColorScheme } from 'react-native';\nimport type { DeepPartial, Theme } from 'stream-chat-react-native';\n\nconst getTheme = (): DeepPartial<Theme> => ({\n  colors: colorScheme === 'dark' ? { black: '#FFFFFF' } : { black: '#000000' },\n});\n\nexport const App = () => {\n  const colorScheme = useColorScheme();\n  const [theme, setTheme] = useState(getTheme());\n\n  useEffect(() => {\n    setTheme(getTheme());\n  }, [colorScheme]);\n\n  return (\n    <OverlayProvider value={{ style: theme }}>\n      <Chat client={client}>\n        <ChannelList />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Sender Name in Message Bubble\nDESCRIPTION: This snippet shows how to display the sender's name above the message bubble in group chats, similar to Slack or WhatsApp. It replaces the default `MessageHeader` component with a custom one that renders the sender's name and formatted date. The original `MessageFooter` is removed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  MessageHeader={(props) =>\n    props.message?.user?.id !== chatClient.userID ? (\n      <View\n        style={{ flexDirection: 'row' }}\n      >\n        {Object.keys(props.members).length > 2 &&\n          props.message.user?.name ? (\n            <Text style={[{ color: grey, marginRight: 8 }]}>\n              {props.message.user.name}\n            </Text>\n          ) : null}\n        <Text style={[{ color: grey, textAlign: props.alignment }]}>\n          {props.formattedDate}\n        </Text>\n      </View>\n    ) : null\n  }\n  MessageFooter={() => null}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to access the ChannelContext using the useContext hook in a React functional component. It imports the ChannelContext from the 'stream-chat-react-native' library and extracts values such as lastRead, reloadChannel, and watcherCount.  It requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channel-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChannelContext } from 'stream-chat-react-native';\n\nconst { lastRead, reloadChannel, watcherCount } = useContext(ChannelContext);\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with getInstance - Typescript\nDESCRIPTION: This snippet shows how to initialize the Stream Chat client using the `getInstance` method with an API key. This is the recommended method for creating a unique StreamChat client instance within your application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Selection with onSelect in React Native\nDESCRIPTION: This code snippet demonstrates how to use the `onSelect` prop of the `ChannelList` component in a React Native application. The `onSelect` function is called when a user presses an item in the `ChannelList`. The function receives a `Channel` instance as a parameter, which represents the selected channel.  This example shows a placeholder for navigation logic, which would typically involve navigating to a dedicated channel screen or component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel-list/props/on_select.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nonSelect={(channel) => { /** navigation logic */ }}\n```\n\n----------------------------------------\n\nTITLE: Consuming OverlayContext using useOverlayContext hook - React TSX\nDESCRIPTION: This snippet shows how to use the useOverlayContext hook, provided by the stream-chat-react-native library, to consume the OverlayContext. This hook simplifies accessing the context values such as setBlurType and setOverlay, which are used for managing overlays. It's an alternative to the useContext hook and should be used within the OverlayProvider component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/overlay_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useOverlayContext } from 'stream-chat-react-native';\n\nconst { setBlurType, setOverlay } = useOverlayContext();\n```\n\n----------------------------------------\n\nTITLE: Connecting a User to Stream Chat\nDESCRIPTION: This snippet demonstrates how to connect a user to the Stream Chat API using `client.connectUser()`.  It requires a user object with an ID and name, along with a `user_token` obtained from your backend. Repeated calls to `connectUser` are discouraged.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'testUser',\n    name: 'Test User',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Basic Channel Setup with Stream Chat in React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the Channel component within a Stream Chat React Native application. It initializes the StreamChat client, creates and watches a channel, and renders the MessageList and MessageInput components within the Channel. The `OverlayProvider` is used to manage overlays, while the `Chat` component provides the client context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/channel.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Channel, Chat, MessageInput, MessageList, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState();\n\n  useEffect(() => {\n    const createAndWatchChannel = async () => {\n      const newChannel = client.channel('messaging', 'channel_id');\n      await newChannel.watch();\n      setChannel(newChannel);\n    };\n\n    createAndWatchChannel();\n  }, []);\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <MessageList />\n          <MessageInput />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adjusting State Update Throttling - React Native\nDESCRIPTION: This code snippet demonstrates how to adjust the throttling interval for state updates within the Channel component to improve performance in high-traffic applications. The `newMessageStateUpdateThrottleInterval` prop controls throttling for new message updates, while `stateUpdateThrottleInterval` manages throttling for other channel updates.  A higher interval reduces the frequency of updates, potentially improving performance but also increasing latency for certain updates, such as adding reactions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/performance.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel newMessageStateUpdateThrottleInterval={2000} stateUpdateThrottleInterval={800} />\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageList within Channel - React Native\nDESCRIPTION: This snippet adds the `MessageList` component within the `Channel` component. When a channel is selected it will display messages within that channel. It requires the channel state to be managed and passed as a prop to the `Channel` component.  The `MessageList` is rendered when a channel is selected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel}>\n            <MessageList />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Stream Chat Generics Type (TSX)\nDESCRIPTION: This code snippet defines a TypeScript type `StreamChatGenerics` which is used to specify custom types for various aspects of the Stream Chat client, including attachments, channels, commands, events, messages, reactions, and users. This allows developers to enforce type safety for custom data used within the Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/typescript.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype StreamChatGenerics = {\n  attachmentType: LocalAttachmentType;\n  channelType: LocalChannelType;\n  commandType: LocalCommandType;\n  eventType: LocalEventType;\n  messageType: LocalMessageType;\n  reactionType: LocalReactionType;\n  userType: LocalUserType;\n};\n```\n\n----------------------------------------\n\nTITLE: Updating APN Template for Badge Count - JavaScript\nDESCRIPTION: This snippet updates the `apn_template` within the Stream Chat app settings to include a badge count representing the number of unread messages. It retrieves the Stream Chat client instance and defines the `apn_template` as a JSON string containing the `badge` key with the `unread_count` variable.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v2.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance(‘api_key’, ‘api_secret’);\n\nconst apn_template = `{  \"aps\" : {    \"alert\": {      \"title\": \"{{ sender.name }} @ {{ channel.name }}\",      \"body\": \"{{ truncate message.text 2000 }}\"    },    \"badge\": {{ unread_count }},    \"mutable-content\": 1,    \"category\": \"stream.chat\"  },}`;\n\nclient.updateAppSettings({\n  firebase_config: {\n    apn_template,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Android Notification Payload - JavaScript\nDESCRIPTION: This code snippet shows how to customize the Android notification payload using the Stream Chat JavaScript SDK. It updates the app settings with a `notification_template` that includes custom title, body, click action, and sound. This allows aligning Android notifications with iOS by receiving the same payload.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst client = StreamChat.getInstance(‘api_key’, ‘api_secret’);\nconst notification_template = `{\n    \"title\": \"New message from {{ sender.name }}\",\n    \"body\": \"{{ truncate message.text 2000 }}\",\n    \"click_action\": \"OPEN_ACTIVITY_1\",\n    \"sound\": \"default\"\n}`;\n\nclient.updateAppSettings({\n  firebase_config: {\n    notification_template,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client\nDESCRIPTION: This code initializes the Stream Chat client using an API key.  It creates a singleton instance of the StreamChat object, which is then used to connect users and interact with the Stream Chat service. It's a crucial first step for using the Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: AppDelegate Deep Linking Implementation (Objective-C++)\nDESCRIPTION: Implements deep linking support in AppDelegate.mm for iOS using RCTLinkingManager.  This snippet enables the app to handle incoming URLs and user activities for deep linking functionality. It requires the React library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/deeplinking.mdx#_snippet_4\n\nLANGUAGE: objective-c++\nCODE:\n```\n#import <React/RCTLinkingManager.h>\n\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Gesture Handler (TSX)\nDESCRIPTION: This code snippet demonstrates how to import 'react-native-gesture-handler' at the top of your entry file (App.tsx or index.js) as required by the react-native-gesture-handler library. This is essential for gesture handling to work properly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-native-gesture-handler';\nimport { AppRegistry } from 'react-native';\n\nimport App from './App';\nimport { name as appName } from './app.json';\n\nAppRegistry.registerComponent(appName, () => App);\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with OverlayProvider and Chat - TSX\nDESCRIPTION: This code snippet demonstrates how to wrap the entire application within the OverlayProvider and Chat components. This ensures that overlay components like AttachmentPicker render correctly above all other components, including navigation elements. It also initializes the Stream Chat client. The Chat component handles theming, connection handling, and translations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/navigation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const App = () =>\n  <NavigationContainer>\n    <OverlayProvider>\n    // highlight-next-line\n      <Chat client={client}>\n        <Stack.Navigator>\n          <Stack.Screen component={() => {/** App components */})} name='home' />\n        </Stack.Navigator>\n    // highlight-next-line\n      </Chat>\n    </OverlayProvider>\n  </NavigationContainer>;\n```\n\n----------------------------------------\n\nTITLE: Consuming CreatePollContext with useContext - Typescript\nDESCRIPTION: Demonstrates how to consume the CreatePollContext using the useContext hook from React. This context provides access to functionalities for creating and sending polls within the stream-chat-react-native library. It requires React and stream-chat-react-native as dependencies. The returned value contains methods like sendMessage, closePollCreationDialog, createAndSendPoll, and createPollOptionHeight.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/create-poll-context.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from 'react';\nimport { CreatePollContext } from 'stream-chat-react-native';\n\nconst value = useContext(CreatePollContext);\n```\n\n----------------------------------------\n\nTITLE: Using Channel Component with ChannelList - React Native\nDESCRIPTION: This code snippet shows how to use the `Channel` component to wrap the chat components. It uses a state variable to manage the selected channel from the `ChannelList`.  When a channel is selected, it renders the `Channel` component; otherwise, it renders the `ChannelList`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? <Channel channel={channel}>{/** App components */}</Channel> : <ChannelList onSelect={setChannel} />}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageInputContext with useContext - React Native\nDESCRIPTION: This code snippet shows how to access the MessageInputContext using the useContext hook in a React Native component. It demonstrates how to import the context and retrieve values such as sendMessage and toggleAttachmentPicker for handling message sending and attachment selection.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/message-input-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { MessageInputContext } from 'stream-chat-react-native';\n\nconst { sendMessage, toggleAttachmentPicker } = useContext(MessageInputContext);\n```\n\n----------------------------------------\n\nTITLE: Integrating Image and File Picking - TSX\nDESCRIPTION: This code snippet integrates image and file picking using `@expo/react-native-action-sheet` and `react-native-image-picker`. It uses `useMessageInputContext` to access `pickFile` and `uploadNewImage` functions to handle file uploads and image uploads (from gallery and camera) respectively.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel, useMessageInputContext } from 'stream-chat-react-native';\nimport { ActionSheetProvider, useActionSheet } from '@expo/react-native-action-sheet';\nimport ImagePicker from 'react-native-image-picker';\n\nconst CustomAttachButton = () => {\n  const { showActionSheetWithOptions } = useActionSheet();\n  const { pickFile, uploadNewImage } = useMessageInputContext();\n\n  const pickImageFromGallery = () =>\n    ImagePicker.launchImageLibrary({\n      selectionLimit: 0,\n    }).then(images =>\n      images.forEach(image =>\n        uploadNewImage({\n          uri: image.path,\n        }),\n      ),\n    );\n\n  const pickImageFromCamera = () =>\n    ImagePicker.launchCamera({}).then(image =>\n      uploadNewImage({\n        uri: image.path,\n      }),\n    );\n\n  const onPress = () => {\n    // Same interface as https://facebook.github.io/react-native/docs/actionsheetios.html\n    showActionSheetWithOptions(\n      {\n        cancelButtonIndex: 3,\n        destructiveButtonIndex: 3,\n        options: ['Photo Library', 'Camera', 'Files', 'Cancel'],\n      },\n      buttonIndex => {\n        switch (buttonIndex) {\n          case 0:\n            pickImageFromGallery();\n            break;\n          case 1:\n            pickImageFromCamera();\n            break;\n          case 2:\n            pickFile();\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n\n  return <AttachButton handleOnPress={onPress} />;\n};\n\n<ActionSheetProvider>\n  <Channel AttachButton={CustomAttachButton} />\n</ActionSheetProvider>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Members - Typescript\nDESCRIPTION: This snippet demonstrates how to create a channel using a list of member IDs.  A channel type is also required (in this case, 'messaging'). Custom channel data, such as the channel name, can also be provided.  The channel ID will be auto-generated on the backend if creating the channel with member list.  This channel is created locally; you still need to call `channel.create()` to persist it on the server.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel('messaging', {\n  members: ['jlahey', 'rlafleur'],\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Listing Blocked Users with Stream Chat - TSX\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of blocked users using the `getBlockedUsers` method of the Stream Chat client. The retrieved list of blocked users is then stored in a state variable using the `setBlockedUsers` function. The code is wrapped in a try-catch block to handle potential errors. The client must be connected before calling `getBlockedUsers`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/blocking-users.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst chatClient = StreamChat.getInstance('your api key');\n\n// Note this has to be done after the client connection(`client.connectUser`) is established.\nconst getBlockedUsers = async () => {\n  try {\n    const users = await chatClient.getBlockedUsers();\n    setBlockedUsers(users.blocks);\n  } catch (error) {\n    console.log('Error getting blocked users:', error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by ID - TypeScript\nDESCRIPTION: This snippet shows how to create a channel by specifying a channel ID. The `client.channel` method is called with the channel type, channel ID, and an optional object containing channel metadata such as the channel name.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel(channel_type, 'channel_id', {\n  name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Header to Display Sender Name in TypeScript\nDESCRIPTION: This example shows how to replace the default `MessageHeader` to display the sender's name above the message bubble, similar to Slack or WhatsApp. It checks if the message sender is not the current user and renders the sender's name and formatted date accordingly. A custom `MessageFooter` is set to null to remove the default footer information.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  MessageHeader={(props) =>\n    props.message?.user?.id !== chatClient.userID ? (\n      <View\n        style={{ flexDirection: 'row' }}\n      >\n        {Object.keys(props.members).length > 2 &&\n          props.message.user?.name ? (\n            <Text style={[{ color: grey, marginRight: 8 }]}>\n              {props.message.user.name}\n            </Text>\n          ) : null}\n        <Text style={[{ color: grey, textAlign: props.alignment }]}>\n          {props.formattedDate}\n        </Text>\n      </View>\n    ) : null\n  }\n  MessageFooter={() => null}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Custom Send Button Component with Stream Chat - TSX\nDESCRIPTION: This code demonstrates how to replace the default SendButton in Stream Chat React Native with a custom implementation. It utilizes the useMessageInputContext hook to access the sendMessage function and the text, imageUploads and fileUploads to determine whether the button should be disabled. The custom button is a TouchableOpacity component that renders a boat icon (SVG) and triggers sendMessage when pressed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from 'react-native';\nimport { RootSvg, RootPath, Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst StreamButton = () => {\n  const { sendMessage, text, imageUploads, fileUploads } = useMessageInputContext();\n  const isDisabled = !text && !imageUploads.length && !fileUploads.length;\n\n  return (\n    <TouchableOpacity disabled={isDisabled} onPress={sendMessage}>\n      <RootSvg height={21} width={42} viewBox='0 0 42 21'>\n        <RootPath\n          d='M26.1491984,6.42806971 L38.9522984,5.52046971 C39.7973984,5.46056971 40.3294984,6.41296971 39.8353984,7.10116971 L30.8790984,19.5763697 C30.6912984,19.8379697 30.3888984,19.9931697 30.0667984,19.9931697 L9.98229842,19.9931697 C9.66069842,19.9931697 9.35869842,19.8384697 9.17069842,19.5773697 L0.190598415,7.10216971 C-0.304701585,6.41406971 0.227398415,5.46036971 1.07319842,5.52046971 L13.8372984,6.42816971 L19.2889984,0.333269706 C19.6884984,-0.113330294 20.3884984,-0.110730294 20.7846984,0.338969706 L26.1491984,6.42806971 Z M28.8303984,18.0152734 L20.5212984,14.9099734 L20.5212984,18.0152734 L28.8303984,18.0152734 Z M19.5212984,18.0152734 L19.5212984,14.9099734 L11.2121984,18.0152734 L19.5212984,18.0152734 Z M18.5624984,14.1681697 L10.0729984,17.3371697 L3.82739842,8.65556971 L18.5624984,14.1681697 Z M21.4627984,14.1681697 L29.9522984,17.3371697 L36.1978984,8.65556971 L21.4627984,14.1681697 Z M19.5292984,13.4435697 L19.5292984,2.99476971 L12.5878984,10.8305697 L19.5292984,13.4435697 Z M20.5212984,13.4435697 L20.5212984,2.99606971 L27.4627984,10.8305697 L20.5212984,13.4435697 Z M10.5522984,10.1082697 L12.1493984,8.31366971 L4.34669842,7.75446971 L10.5522984,10.1082697 Z M29.4148984,10.1082697 L27.8178984,8.31366971 L35.6205984,7.75446971 L29.4148984,10.1082697 Z'\n          pathFill={isDisabled ? 'grey' : 'blue'}\n        />\n      </RootSvg>\n    </TouchableOpacity>\n  );\n};\n\n// In your App\n\n<Channel channel={channel} SendButton={StreamButton} />;\n```\n\n----------------------------------------\n\nTITLE: Custom Attachment with Card Component (JSX)\nDESCRIPTION: This code snippet demonstrates how to create a custom attachment type that uses the Card component. By assigning a custom type to an attachment and then providing a custom Card component to the Channel, you can render any custom UI for that specific attachment type.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomCardComponent = ({ type, ...otherProperties }) => {\n  console.log(type);\n  console.log(otherProperties);\n\n  return (/** Your custom UI */)\n}\n\n<Channel Card={CustomCardComponent} />\n```\n\n----------------------------------------\n\nTITLE: Consuming ChatContext with useChatContext hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ChatContext using the useChatContext hook provided by the stream-chat-react-native library. It imports useChatContext from 'stream-chat-react-native'. It extracts the client and isOnline properties from the context.  This offers a more streamlined approach to accessing context values compared to useContext.  Dependencies: stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/chat_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client, isOnline } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Suggestion List - React Native\nDESCRIPTION: This code snippet illustrates how to completely customize the autocomplete suggestion list in a Stream Chat React Native application. It uses the AutoCompleteSuggestionList prop of the Channel component to provide a custom list implementation, including handling different trigger types (command, emoji), rendering custom headers and items, and managing user selection.  Dependencies include 'stream-chat-react-native' and 'react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/auto_complete_suggestion_list_customizations.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AutoCompleteSuggestionHeader, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\nimport { FlatList, Text, View } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionList={({ data, onSelect, queryText, triggerType }) => {\n    if (triggerType === 'command') {\n      return (\n        <View>\n          <View>\n            <Text>Command suggestions for {queryText}</Text>\n          </View>\n          {data.map(item => (\n            <AutoCompleteSuggestionItem itemProps={item} key={item.name} triggerType={triggerType} />\n          ))}\n        </View>\n      );\n    } else if (triggerType === 'emoji') {\n      return (\n        <FlatList\n          data={data}\n          keyboardShouldPersistTaps='always'\n          ListHeaderComponent={<AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />}\n          renderItem={({ index, item }) => (\n            <TouchableOpacity\n              onPress={() => {\n                onSelect(item);\n              }}\n            >\n              <Text>{item.unicode}</Text>\n            </TouchableOpacity>\n          )}\n        />\n      );\n    } else {\n      return (\n        <View>\n          <AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />\n          {data.map(item => (\n            <AutoCompleteSuggestionItem itemProps={item} key={item.name} triggerType={triggerType} />\n          ))}\n        </View>\n      );\n    }\n  }}\n>\n  {/*The underlying components*/}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Consuming ThemeContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ThemeContext using the useContext hook from React. It imports ThemeContext from stream-chat-react-native and retrieves the theme object, specifically accessing the accent_red color. It requires React and stream-chat-react-native as dependencies. The expected output is the theme object, allowing access to its properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/theme-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThemeContext } from 'stream-chat-react-native';\n\nconst {\n  theme: {\n    colors: { accent_red },\n  },\n} = useContext(OverlayContext);\n```\n\n----------------------------------------\n\nTITLE: Register device with Stream Chat for push notifications\nDESCRIPTION: This snippet demonstrates how to register a device with Stream Chat to receive push notifications using Firebase. It retrieves the Firebase device token, sets the local device information using `client.setLocalDevice`, and handles token refresh events to ensure the device remains registered with the latest token. The `AsyncStorage` library is used to persist the token locally.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/push_notifications_v2.mdx#_snippet_2\n\nLANGUAGE: js\nCODE:\n```\n// Request Push Notification permission from device.\nconst requestPermission = async () => {\n  const authStatus = await messaging().requestPermission();\n  const enabled =\n    authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log('Authorization status:', authStatus);\n  }\n};\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n  const unsubscribeTokenRefreshListenerRef = useRef<() => void>();\n\n  useEffect(() => {\n    // Register FCM token with stream chat server.\n    const registerPushToken = async () => {\n      // unsubscribe any previous listener\n      unsubscribeTokenRefreshListenerRef.current?.();\n      const token = await messaging().getToken();\n      const push_provider = 'firebase';\n      const push_provider_name = 'MyRNAppFirebasePush'; // name an alias for your push provider (optional)\n      client.setLocalDevice({\n        id: token,\n        push_provider,\n        // push_provider_name is meant for optional multiple providers support, see: https://getstream.io/chat/docs/react/push_providers_and_multi_bundle\n        push_provider_name,\n      });\n      await AsyncStorage.setItem('@current_push_token', token);\n\n      const removeOldToken = async () => {\n        const oldToken = await AsyncStorage.getItem('@current_push_token');\n        if (oldToken !== null) {\n          await client.removeDevice(oldToken);\n        }\n      };\n\n      unsubscribeTokenRefreshListenerRef.current = messaging().onTokenRefresh(async newToken => {\n        await Promise.all([\n          removeOldToken(),\n          client.addDevice(newToken, push_provider, USER_ID, push_provider_name),\n          AsyncStorage.setItem('@current_push_token', newToken),\n        ]);\n      });\n    };\n\n    const init = async () => {\n      await requestPermission();\n      await registerPushToken();\n      await client.connectUser({ id: USER_ID }, USER_TOKEN);\n\n      setIsReady(true);\n    };\n\n    init();\n\n    return async () => {\n      await client?.disconnectUser();\n      unsubscribeTokenRefreshListenerRef.current?.();\n    };\n  }, []);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Chat client={client}>{/* Child components of Chat go here */}</Chat>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable Message with React Native Gesture Handler (TSX)\nDESCRIPTION: This code snippet demonstrates how to wrap the default `Message` component from `stream-chat-react-native` in a `Swipeable` component from `react-native-gesture-handler` to enable swipe gestures. It defines `onSwipeableLeftOpen` and `onSwipeableRightOpen` props to trigger actions like replying and deleting messages when swiped. Animated views are rendered to provide visual feedback during the swipe actions. Requires the installation of `react-native-gesture-handler`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nconst SwipeableMessage = (\n  props: MessageProps<AttachmentType, ChannelType, CommandType, EventType, MessageType, ResponseType, UserType>,\n) => {\n  return (\n    <Swipeable\n      onSwipeableLeftOpen={reply(props.message)}\n      onSwipeableRightOpen={delete props.message}\n      overshootLeft={false}\n      overshootRight={false}\n      renderLeftActions={progress => (\n        <Animated.View\n          style={{\n            backgroundColor: 'blue',\n            transform: [\n              {\n                translateX: progress.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [-100, 0],\n                }),\n              },\n            ],\n            width: 100,\n          }}\n        />\n      )}\n      renderRightActions={progress => (\n        <Animated.View\n          style={{\n            justifyContent: 'center',\n            opacity: progress.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 1],\n            }),\n          }}\n        >\n          <StreamReaction />\n        </Animated.View>\n      )}\n    >\n      <Message {...props} />\n    </Swipeable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Action Handlers for Native Image Picker - TSX\nDESCRIPTION: This code snippet adds action handlers to the action sheet buttons to integrate with `react-native-image-crop-picker` for image selection and camera access, and `useMessageInputContext` to access `pickFile` and `uploadNewImage`. It enables selecting images from the photo library or camera, and uploading files using the native file picker.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel, useMessageInputContext } from 'stream-chat-react-native';\nimport { ActionSheetProvider, useActionSheet } from '@expo/react-native-action-sheet';\nimport ImagePicker from 'react-native-image-crop-picker';\n\nconst CustomAttachButton = () => {\n  const { showActionSheetWithOptions } = useActionSheet();\n  const { pickFile, uploadNewImage } = useMessageInputContext();\n\n  const pickImageFromGallery = () =>\n    ImagePicker.openPicker({\n      multiple: true,\n    }).then(images =>\n      images.forEach(image =>\n        uploadNewImage({\n          uri: image.path,\n        }),\n      ),\n    );\n\n  const pickImageFromCamera = () =>\n    ImagePicker.openCamera({\n      cropping: true,\n    }).then(image =>\n      uploadNewImage({\n        uri: image.path,\n      }),\n    );\n\n  const onPress = () => {\n    // Same interface as https://facebook.github.io/react-native/docs/actionsheetios.html\n    showActionSheetWithOptions(\n      {\n        cancelButtonIndex: 3,\n        destructiveButtonIndex: 3,\n        options: ['Photo Library', 'Camera', 'Files', 'Cancel'],\n      },\n      buttonIndex => {\n        switch (buttonIndex) {\n          case 0:\n            pickImageFromGallery();\n            break;\n          case 1:\n            pickImageFromCamera();\n            break;\n          case 2:\n            pickFile();\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n\n  return <AttachButton handleOnPress={onPress} />;\n};\n\n<ActionSheetProvider>\n  <Channel AttachButton={CustomAttachButton} />\n</ActionSheetProvider>;\n```\n\n----------------------------------------\n\nTITLE: Consuming KeyboardContext with useContext - Typescript\nDESCRIPTION: This snippet demonstrates how to consume the KeyboardContext using the useContext hook provided by React. It imports the KeyboardContext from 'stream-chat-react-native' and extracts the dismissKeyboard function to programmatically dismiss the keyboard. It requires React and stream-chat-react-native to be installed.  The dismissKeyboard function is used to close the keyboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/keyboard-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { KeyboardContext } from 'stream-chat-react-native';\n\nconst { dismissKeyboard } = useContext(KeyboardContext);\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Deletion - React Native\nDESCRIPTION: This TypeScript snippet demonstrates how to listen for the `channel.deleted` event and navigate the user back to the channel list screen when a channel is deleted. This improves the user experience by preventing a blank screen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nclient.on('channel.deleted', event => {\n  if (event.cid === channel.cid) {\n    // add your action here\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Attachment Components (JSX)\nDESCRIPTION: This code snippet shows how to override the default attachment components (Giphy, Gallery, FileAttachment, UrlPreview) with custom implementations. These custom components receive attachment-specific props, allowing for custom rendering logic. The custom components are then passed as props to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomGiphy = ({ attachment, onPressIn }) => {\n  console.log(attachment.type);\n  console.log(attachment.actions)\n  console.log(attachment.image_url)\n  console.log(attachment.thumb_url)\n  console.log(attachment.title)\n  console.log(attachment.type)\n\n  return (/** Your custom UI */)\n}\n\nconst CustomGallery = ({ images, onPressIn }) => {\n  console.log(images);\n\n  return (/** Your custom UI */)\n}\n\nconst CustomFileAttachment = ({ attachment }) => {\n  console.log(attachment.mime_type);\n  console.log(attachment.title);\n  console.log(attachment.file_size);\n  console.log(attachment.actions);\n\n  return (/** Your custom UI */)\n}\n\nconst CustomUrlPreview = () => {\n  console.log(text);\n  console.log(thumb_url);\n  console.log(title);\n\n  return (/** Your custom UI */)\n}\n\n// Provide these custom components to Channel, as props.\n<Channel\n  Gallery={CustomGallery}\n  Giphy={CustomGiphy}\n  FileAttachment={CustomFileAttachment}\n  UrlPreview={CustomUrlPreview}\n>\n```\n\n----------------------------------------\n\nTITLE: Overriding MessageSimple component in Channel - React Native\nDESCRIPTION: This snippet demonstrates how to override the default MessageSimple component with a custom UI component. It provides access to handlers defined in the Message HOC via the useMessageContext hook. This allows full customization of message appearance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  useChannelContext,\n  useMessagesContext,\n  useMessageContext,\n} from 'stream-chat-react-native';\n\nconst CustomMessageUIComponent = () => {\n  const { channel, members, watchers, error, loading } = useChannelContext();\n  const { handleDeleteMessage, handleResendMessage, message, reactions } = useMessageContext();\n\n  /** Custom implementation */\n};\n\n<OverlayProvider bottomInset={bottom} i18nInstance={streami18n}>\n  <Chat client={chatClient} i18nInstance={streami18n}>\n    <Channel channel={channel} keyboardVerticalOffset={headerHeight} MessageSimple={CustomMessageUIComponent}>\n      <View style={{ flex: 1 }}>\n        <MessageList />\n        <MessageInput />\n      </View>\n    </Channel>\n  </Chat>\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Item - JSX\nDESCRIPTION: This snippet shows how to customize individual items in the autocomplete suggestion list within the Stream Chat React Native Channel component. It utilizes the `AutoCompleteSuggestionItem` prop to render different item layouts based on the `triggerType` (command, mention, or default), adjusting display based on the type of suggestion.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-auto-complete-suggestion-list.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Avatar, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\nimport { Text, View } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionItem={({ itemProps, triggerType }) => {\n    if (triggerType === 'command') {\n      return (\n        <View>\n          <Text>{itemProps.name}</Text>\n          <Text>{itemProps.args}</Text>\n        </View>\n      );\n    } else if (triggerType === 'mention') {\n      const { id, image, name, online } = itemProps;\n      return (\n        <View>\n          <Avatar image={image} name={name} online={online} size={30} />\n          <Text>{itemProps.name}</Text>\n        </View>\n      );\n    } else {\n      return <AutoCompleteSuggestionItem itemProps={itemProps} triggerType={triggerType} />;\n    }\n  }}\n>\n  {/*The underlying components*/}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Custom AttachButton Component - TSX\nDESCRIPTION: This code defines a custom AttachButton component to override the default attach button in the Channel component. It demonstrates how to create a custom `onPress` handler for the AttachButton.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel } from 'stream-chat-react-native';\n\nconst CustomAttachButton = () => {\n  const onPressHandler = () => {\n    // Custom handling of onPress action on AttachButton\n  };\n\n  return <AttachButton handleOnPress={onPressHandler} />;\n};\n\n<Channel AttachButton={CustomAttachButton} />;\n```\n\n----------------------------------------\n\nTITLE: Sending a Message in a Channel\nDESCRIPTION: This snippet demonstrates how to send a message in a channel using `channel.sendMessage()`.  It creates a message object with the text content and sends it to the channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = await channel.sendMessage({\n  text: 'Hey there.',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Answers List - React Native\nDESCRIPTION: This snippet demonstrates how to use a custom component (MyPollAnswersContent) to render the poll answers list within the PollAnswersList component of Stream Chat React Native. It showcases how to override the default UI with a custom implementation to tailor the poll presentation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n<PollAnswersList message={message} poll={poll} PollAnswersListContent={MyPollAnswersContent} />\n```\n\n----------------------------------------\n\nTITLE: Basic MessageList Usage in Stream Chat React Native (TSX)\nDESCRIPTION: Demonstrates the basic usage of the MessageList component within a Stream Chat React Native application. It shows how to import the necessary components and render MessageList inside Chat and Channel components. The Chat component is wrapped with OverlayProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat, Channel, OverlayProvider, MessageList } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          // highlight-next-line\n          <MessageList />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Selection (onSelect) - TypeScript\nDESCRIPTION: The `onSelect` function is a callback invoked when a user selects a channel from the `ChannelList`. It receives a `Channel` instance as a parameter, allowing you to implement navigation logic, such as navigating to a channel screen. The `Channel` instance itself is not serializable and cannot be passed as a parameter through navigation to another screen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel-list/props/on_select.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nonSelect={(channel) => { /** navigation logic */ }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Deleted Message Visibility in Stream Chat\nDESCRIPTION: This code snippet shows how to use the `deletedMessagesVisibilityType` prop in the `Channel` component to control the visibility of deleted messages. Setting it to \"sender\" will make deleted messages visible only to the sender, while other options exist for different visibility configurations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  ...\n  deletedMessagesVisibilityType=\"sender\"\n>\n```\n\n----------------------------------------\n\nTITLE: Overriding MessageInput with Null - React Native TSX\nDESCRIPTION: This TypeScript code snippet shows how to completely override the default MessageInput component with a null component.  This can be useful for cases where you want to replace the entire input area with a custom solution.  It demonstrates the precedence of the Input prop over the context value when multiple Input components are defined within the Channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_1\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Channel channel={channel} Input={() => null} keyboardVerticalOffset={headerHeight} Message={CustomMessageComponent}>\n  <View style={{ flex: 1 }}>\n    <MessageList />\n    <MessageInput Input={() => <View style={{ height: 40, backgroundColor: 'red' }} />} />\n  </View>\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Adding MessageList Component inside Channel in React Native using Stream Chat\nDESCRIPTION: This code snippet adds the `MessageList` component inside the `Channel` component to display messages within a selected channel.  It relies on the `Channel` component to provide the necessary context. It is conditionally rendered based on whether a channel is selected from the ChannelList.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel}>\n            <MessageList />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Date Separators and Sticky Date Header - React Native\nDESCRIPTION: This code snippet shows how to disable the sticky date header and inline date separators within the Channel component to reduce the computational load on the JS thread. These features, while visually helpful, can be performance-intensive when rendering long message lists. Disabling them is recommended for live-streaming applications where message volume is high.  It involves setting the `hideDateSeparators` and `hideStickyDateHeader` props to true.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/performance.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel hideDateSeparators={true} hideStickyDateHeader={true} />\n```\n\n----------------------------------------\n\nTITLE: Using FastImage for Image Caching\nDESCRIPTION: This TypeScript code snippet shows how to use the react-native-fast-image library to handle image caching in the Chat component. By providing FastImage as the ImageComponent prop, the SDK will use it for rendering images, improving offline image availability.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/offline-support.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport FastImage from 'react-native-fast-image';\n\n...\n\n<Chat\n  client={chatClient}\n  enableOfflineSupport\n  ImageComponent={FastImage}\n/>\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User - TS\nDESCRIPTION: This snippet shows how to disconnect a user from the Stream Chat service using the `client.disconnectUser()` method. Disconnecting releases resources and prevents warnings/errors when reconnecting.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Android Data Scheme Configuration XML\nDESCRIPTION: Configures the data scheme in AndroidManifest.xml to handle deep links. It specifies the scheme and host that the app will respond to. Ensure to replace `YOUR URL HERE` with your actual domain.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/deeplinking.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<data android:scheme=\"http\" />\n<data android:scheme=\"https\" />\n<!-- The URL here must exclude the scheme -->\n<data android:host=\"`YOUR URL HERE`\" />\n```\n\n----------------------------------------\n\nTITLE: Using Chat Component (App Level) - TSX\nDESCRIPTION: This snippet shows how to use the Chat component at the application level, wrapping it within the OverlayProvider. The Chat component is essential for providing the necessary context for Stream Chat's functionality. The client prop should be the instance of StreamChat created earlier.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>{/** App components */}</Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Filtering Channels with channelRenderFilterFn in React Native\nDESCRIPTION: This code snippet demonstrates how to use the `channelRenderFilterFn` prop to filter channels rendered in a `ChannelList` component. This allows you to customize which channels are displayed in each list, addressing the issue of multiple lists receiving updates for all channels. It takes an array of `Channel` objects as input and returns a filtered array based on your custom logic.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/multiple_channel_lists.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst customChannelFilterFunction = (channels: Channel[]) => {\n  return channels.filter(/** your custom filter logic */);\n};\n\n<ChannelList channelRenderFilterFn={customChannelFilterFunction} filters={filters} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Blocked Users in UI\nDESCRIPTION: This code shows how to create a custom UI component in React Native to display a list of blocked users and provide a button to unblock them. It uses the `getBlockedUsers` method to fetch the blocked users and the `unBlockUser` method to remove users from the blocked list. The component manages state to update the UI after unblocking.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/blocking-users.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Image, StyleSheet, Text, View } from 'react-native';\nimport { BlockedUserDetails, StreamChat } from 'stream-chat';\n\nconst chatClient = StreamChat.getInstance('your api key');\n\nconst BlockedUsers = () => {\n  const [blockedUsers, setBlockedUsers] = useState<BlockedUserDetails[]>([]);\n\n  useEffect(() => {\n    const getBlockedUsers = async () => {\n      try {\n        const users = await chatClient.getBlockedUsers();\n        setBlockedUsers(users.blocks);\n      } catch (error) {\n        console.log('Error getting blocked users:', error);\n      }\n    };\n\n    getBlockedUsers();\n  }, []);\n\n  const unBlockUser = async (userId: string) => {\n    try {\n      await chatClient.unBlockUser(userId);\n      const filteredUsers = blockedUsers.filter(user => user.blocked_user_id !== userId);\n      setBlockedUsers(filteredUsers);\n    } catch (err) {\n      console.log('Error UnBlocking user:', err);\n    }\n  };\n\n  return (\n    <View>\n      {blockedUsers.map((blockedUser: BlockedUserDetails) => (\n        <Pressable\n          key={blockedUser.blocked_user_id}\n          onPress={() => {\n            unBlockUser(blockedUser.blocked_user_id);\n          }}\n          style={styles.container}\n        >\n          <Image source={{ uri: blockedUser.blocked_user.image as string }} style={styles.image} />\n          <Text style={styles.name}>{blockedUser.blocked_user.name}</Text>\n        </Pressable>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    padding: 16,\n    alignItems: 'center',\n  },\n  image: {\n    height: 80,\n    width: 80,\n    borderRadius: 40,\n  },\n  name: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginLeft: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: App Component - Initialization\nDESCRIPTION: This JSX component, `App`, initializes the Stream Chat client and connects the user. It also watches the specified channel. The `connectUserPromise` ensures the client is connected before rendering the UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\nexport default function App() {\n  const [ready, setReady] = useState();\n\n  useEffect(() => {\n    const initChat = async () => {\n      await connectUserPromise;\n      await channel.watch();\n      setReady(true);\n    };\n\n    initChat();\n  }, []);\n\n  if (!ready) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider>\n      <ChannelScreen channel={channel} />\n    </SafeAreaProvider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable Message Component in React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom `SwipeableMessage` component in React Native, wrapping the default `Message` component from `stream-chat-react-native` with a `Swipeable` component from `react-native-gesture-handler`. It allows users to swipe left to reply and right to delete messages. The example uses Animated.View to show animations on swipe.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nconst SwipeableMessage = (\n  props: MessageProps<AttachmentType, ChannelType, CommandType, EventType, MessageType, ResponseType, UserType>,\n) => {\n  return (\n    <Swipeable\n      onSwipeableLeftOpen={reply(props.message)}\n      onSwipeableRightOpen={delete props.message}\n      overshootLeft={false}\n      overshootRight={false}\n      renderLeftActions={progress => (\n        <Animated.View\n          style={{\n            backgroundColor: 'blue',\n            transform: [\n              {\n                translateX: progress.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [-100, 0],\n                }),\n              },\n            ],\n            width: 100,\n          }}\n        />\n      )}\n      renderRightActions={progress => (\n        <Animated.View\n          style={{\n            justifyContent: 'center',\n            opacity: progress.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 1],\n            }),\n          }}\n        >\n          <StreamReaction />\n        </Animated.View>\n      )}\n    >\n      <Message {...props} />\n    </Swipeable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel - TS\nDESCRIPTION: This code demonstrates how to create a channel on the server using the `channel.create()` method.  This method is used to create a new channel but does not automatically subscribe the client to the channel's updates.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelAvatar with onPress Handler in ChannelList - JSX\nDESCRIPTION: This code snippet demonstrates how to customize the ChannelAvatar within the ChannelList component by providing a custom PreviewAvatar prop.  It adds an onPress handler to the avatar using TouchableOpacity, allowing you to define custom actions when the avatar is pressed. The channel prop is passed to the ChannelAvatar component. Requires react-native-gesture-handler and stream-chat-react-native libraries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/channel-avatar.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { ChannelList, ChannelAvatar } from 'stream-chat-react-native';\n\n<ChannelList\n  PreviewAvatar={({ channel }) => (\n    <TouchableOpacity\n      disallowInterruption={true}\n      onPress={() => {\n        /** Handler for press action */\n      }}\n    >\n      // highlight-next-line\n      <ChannelAvatar channel={channel} />\n    </TouchableOpacity>\n  )}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Filtering File Attachments from Message Object - TSX\nDESCRIPTION: This code filters an array of attachments within a `message` object to extract file attachments.  It assumes the `message` object has an `attachments` property which is an array. The filter method iterates through this array, checking if each attachment's `type` property is equal to 'file'. The result is an array containing only the file attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/message-context/files.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst files = message.attachments.filter(a => a.type === 'file');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Translators - JavaScript\nDESCRIPTION: This code snippet shows how to asynchronously retrieve the current translator functions from `Streami18n`. The `getTranslators()` method returns an object containing translation functions, like `t` (for general translations) and `tDateTimeParser` (for date/time formatting).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { t, tDateTimeParser } =await streami18n.getTranslators();\n```\n\n----------------------------------------\n\nTITLE: Filtering Frozen Channels in ChannelList - TSX\nDESCRIPTION: This code snippet demonstrates how to filter a ChannelList to only show frozen channels for a specific user. It defines a filter object and applies it to the ChannelList component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst filters = {\n  members: { $in: ['vishal'] },\n  frozen: true\n}\n\n<ChannelList filters={filters} />\n```\n\n----------------------------------------\n\nTITLE: Accessing Stream Chat Client via Context - TS\nDESCRIPTION: This code demonstrates how to access the Stream Chat client within a component using the `useChatContext` hook. This hook is available within the `Chat` component's context, allowing components to interact directly with the client.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Incorrect vs. Correct Selector Usage in React Component (ThreadState)\nDESCRIPTION: This TypeScript snippet demonstrates the correct and incorrect ways to use selectors within React components when working with Stream Chat's state management. The incorrect example recreates the selector function on every render, leading to performance issues. The correct examples show how to define selectors outside the component or memoize them using `useCallback` to prevent unnecessary re-renders and re-subscriptions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// ❌ not okay\nconst Component1 = () => {\n  const { latestReply } = useStateStore(thread.state, (nextValue: ThreadState) => ({\n    latestReply: nextValue.latestReplies.at(-1),\n  }));\n\n  return <Text>{latestReply.text}</Text>;\n};\n\n// ✅ okay\nconst selector = (nextValue: ThreadState) => ({ latestReply: nextValue.latestReplies.at(-1) });\n\nconst Component2 = () => {\n  const { latestReply } = useStateStore(thread.state, selector);\n\n  return <Text>{latestReply.text}</Text>;\n};\n\n// ✅ also okay\nconst Component3 = ({ userId }: { userId: string }) => {\n  const selector = useCallback(\n    (nextValue: ThreadState) => ({ unreadMessagesCount: nextValue.read[userId].unread_messages }),\n    [userId],\n  );\n\n  const { unreadMessagesCount } = useStateStore(thread.state, selector);\n\n  return <Text>{unreadMessagesCount}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Example Local Type Definitions (TSX)\nDESCRIPTION: This snippet provides example type definitions for local attachments, channels, commands, events, messages, reactions, and users. These definitions allow you to specify the shape of your custom data models, such as defining file sizes and MIME types for attachments, or adding image URLs to user profiles.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalAttachmentType = {\n  file_size?: number;\n  mime_type?: string;\n};\ntype LocalChannelType = Record<string, unknown>;\ntype LocalCommandType = string;\ntype LocalEventType = Record<string, unknown>;\ntype LocalMessageType = Record<string, unknown>;\ntype LocalReactionType = Record<string, unknown>;\ntype LocalUserType = {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Date and time formatting in i18n JSON\nDESCRIPTION: This snippet shows how to customize date and time formatting using the i18n service by modifying the translation JSON files. The formatting is controlled via the `timestampFormatter` function, which can accept parameters like `calendar`, `calendarFormats`, and `format` to customize the date and time display.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/date-time-formatting.mdx#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"timestamp/SystemMessage\": \"{{ timestamp | timestampFormatter(format: YYYY) }}\"\n```\n\n----------------------------------------\n\nTITLE: Android Permissions for Image Picker - XML\nDESCRIPTION: These are the necessary Android permissions required for the image picker to function correctly in Stream Chat for React Native. These permissions must be included in the `AndroidManifest.xml` file of your React Native project.  `READ_MEDIA_IMAGES` and `READ_MEDIA_VIDEO` are required for Android 13 and above. For older versions, `READ_EXTERNAL_STORAGE` and `WRITE_EXTERNAL_STORAGE` are required.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\n<uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n                android:maxSdkVersion=\"32\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Accessing the Theme - JSX\nDESCRIPTION: This code demonstrates how to access the current theme within custom components using the `useTheme` hook in Stream Chat React Native. This allows you to retrieve theme variables, such as colors, and apply them to your custom UI elements.  It is recommended to avoid memoization checks to ensure theme changes are reflected in the UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/theme.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nconst {\n  theme: {\n    colors: { black },\n  },\n} = useTheme();\n\n```\n\n----------------------------------------\n\nTITLE: Sending Current Location Message\nDESCRIPTION: This JavaScript function retrieves the user's current location using `react-native-geolocation` and sends a message with a location attachment to the current Stream Chat channel. It utilizes the channel's `sendMessage` method to send the message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst sendCurrentLocation = () => {\n  Geolocation.getCurrentPosition(info => {\n    channel?.sendMessage({\n      text: 'This is my location',\n      attachments: [\n        {\n          type: 'location',\n          latitude: info.coords.latitude,\n          longitude: info.coords.longitude,\n        },\n      ],\n    });\n  });\n};\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Attach Button Press - React\nDESCRIPTION: This code snippet demonstrates how to customize the behavior when the attach button is pressed in the Channel component. It uses the handleAttachButtonPress prop to pass a custom function that will be executed when the button is pressed.  Requires importing useCallback from 'react' and Channel from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/native-image-picker.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { Channel } from 'stream-chat-react-native';\n\nconst App = () => {\n  const handleAttachButtonPress = useCallback(async () => {\n    // Your custom logic here\n  }, []);\n\n  return <Channel channel={channel} handleAttachButtonPress={handleAttachButtonPress} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting a Custom Theme - stream-chat-react-native - JSX\nDESCRIPTION: This snippet demonstrates how to create a custom theme in stream-chat-react-native and override default styles. It imports necessary types, defines a theme object with specific styles for the `messageSimple` component, and shows how to apply a background color to the file container.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/theme.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport type { DeepPartial, Theme } from 'stream-chat-react-native';\n\nconst theme: DeepPartial<Theme> = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting thread state in Channel component - TSX\nDESCRIPTION: This code snippet demonstrates how to manage the `thread` state within a `Channel` component in Stream Chat for React Native. It emphasizes the importance of resetting the thread when navigating back to the original screen to prevent messages from being incorrectly sent to a thread instead of the channel. The `thread` prop is used to keep track of the current thread.  The `onThreadSelect` prop updates this state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Chat client={chatClient} i18nInstance={streami18n}>\n  <Channel channel={channel} thread={thread}>\n    <MessageList onThreadSelect={setThread} />\n    <MessageInput />\n  </Channel>\n</Chat>\n```\n\n----------------------------------------\n\nTITLE: Sending a Message - Typescript\nDESCRIPTION: This snippet shows how to send a message in a channel using the `sendMessage` API.  It sends a text message. The channel instance must exist prior to sending a message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst message = await channel.sendMessage({\n  text: 'Hey there.',\n});\n```\n\n----------------------------------------\n\nTITLE: Updating Channel component with thread prop - TSX\nDESCRIPTION: This snippet illustrates how to keep the `Channel` component updated with the `thread` state. This is essential for ensuring the correct context for image viewer and message overlay logic within the `OverlayProvider`. The `thread` prop is consistently passed to the `Channel` component, even when it's being used for a channel, to keep these components synchronized. The `onThreadSelect` prop updates this state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel channel={channel} thread={thread}>\n  <MessageList onThreadSelect={setThread} />\n  <MessageInput />\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Setting Additional TextInput Props - JSX\nDESCRIPTION: This code snippet shows how to provide additional props to the underlying React Native `TextInput` component used within the `Channel` by using the `additionalTextInputProps` prop. The provided props are merged with the default props of the `TextInput` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst additionalTextInputProps = useMemo(() => {\n  selectionColor: 'pink';\n});\n\n// Render UI part\n<Channel channel={channel} additionalTextInputProps={additionalTextInputProps}>\n  ...\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Giphy Search Input - Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom Giphy search input component for the Stream Chat React Native MessageInput. It utilizes the `useMessageInputContext` hook to access functions such as `setGiphyActive` and `setShowMoreOptions`. An `AutoCompleteInput` is used for searching. A \"Close\" button is included to deactivate Giphy and revert to the standard options. The custom search input is then passed to the `InputGiphySearch` prop of the `Channel` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { AutoCompleteInput, Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputGiphySearch = () => {\n  const { setGiphyActive, setShowMoreOptions } = useMessageInputContext();\n\n  return (\n    <View>\n      <Text style={{ textAlign: 'center' }}>Giphy</Text>\n      <AutoCompleteInput />\n      <Button\n        onPress={() => {\n          setGiphyActive(false);\n          setShowMoreOptions(true);\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputGiphySearch={CustomInputGiphySearch}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Override Update Message Request - React Native\nDESCRIPTION: This example demonstrates how to override the default update message request in Stream Chat React Native.  This allows you to modify the message object before updating it on the server. A promise equivalent to `client.updateMessage` must be returned.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/channel.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst doUpdateMessageRequest = (channelId, messageObject) => {\n  const numberOfUpdates = (messageObject.numberOfUpdates ?? 0) + 1;\n  const messageToSend = { ...messageObject, numberOfUpdates };\n  return client.updateMessage(messageToSend);\n};\n```\n\n----------------------------------------\n\nTITLE: Unblocking a User with Stream Chat\nDESCRIPTION: This code snippet shows how to unblock a user using the `unBlockUser` method from the Stream Chat SDK. It initializes a Stream Chat client instance and defines an asynchronous function `unBlockUser` which accepts the user's ID and attempts to remove the user from the blocked list. If the operation results in an error, it gets logged in the console.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/blocking-users.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nconst chatClient = StreamChat.getInstance('your api key');\n\n// Note this has to be done after the client connection(`client.connectUser`) is established.\nconst unBlockUser = async (userId: string) => {\n  try {\n    await chatClient.unBlockUser(userId);\n  } catch (err) {\n    console.log('Error UnBlocking user:', err);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Action List Item - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the MessageActionListItem component in Stream Chat React Native to render custom components for specific action types (pinMessage, muteUser) and fall back to the default implementation for others. It requires react-native and stream-chat-react-native dependencies. The MessageActionListItem component receives props for the action, action type, and any additional props. The component returns a custom Pressable with Text for pinMessage and muteUser, and the default MessageActionListItem for other action types.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Pressable, Text } from 'react-native';\nimport { Channel, MessageActionListItem, useMessageActionAnimation } from 'stream-chat-react-native';\n\nconst CustomMessageActionListItem = ({ action, actionType, ...rest }: MessageActionListItemProps) => {\n  if (actionType === 'pinMessage') {\n    return (\n      <Pressable onPress={action}>\n        <Text>{actionType}</Text>\n      </Pressable>\n    );\n  } else if (actionType === 'muteUser') {\n    return (\n      <Pressable onPress={action}>\n        <Text>{actionType}</Text>\n      </Pressable>\n    );\n  } else {\n    return <MessageActionListItem action={action} actionType={actionType} {...rest} />;\n  }\n};\n\n<Channel MessageActionListItem={CustomMessageActionListItem}>\n  {/* Underlying MessageList and MessageInput components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated Babel Plugin in babel.config.js\nDESCRIPTION: This JavaScript snippet shows how to add the `react-native-reanimated/plugin` to the `babel.config.js` file. This plugin is required for using the `react-native-reanimated` library. It should be added to the `plugins` array, and it is important that it's listed last to avoid conflicts with other Babel plugins.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ... // don't add it here :)\n  ],\n  plugins: [\n    ...\n    // highlight-next-line\n    'react-native-reanimated/plugin',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CooldownTimer Component - JSX\nDESCRIPTION: This code snippet shows how to create a custom `CooldownTimer` component to replace the default one.  The custom component receives the remaining `seconds` as a prop and is then used inside `<Channel CooldownTimer={CustomCooldownTimer}>...</Channel>`. It must accept `CooldownTimerProps` type from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CooldownTimerProps } from 'stream-chat-react-native';\n\nconst CustomCooldownTimer = ({ seconds }: CooldownTimerProps) => {\n  const isEven = seconds % 2 === 0;\n\n  console.log(`There is an ${isEven ? 'even' : 'odd'} amount of seconds left`);\n\n  return <Text>{seconds}</Text>;\n};\n\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel CooldownTimer={CustomCooldownTimer}>...</Channel>\n```\n\n----------------------------------------\n\nTITLE: Using Streami18n Instance with Components\nDESCRIPTION: Demonstrates how to provide a custom Streami18n instance to the OverlayProvider and Chat components.  This is necessary when a language other than the default English is required, or if custom translations or date handling are used.  The i18nInstance prop is used to pass the custom instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat }from 'stream-chat';\nimport { Chat, OverlayProvider, Streami18n }from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst streami18n =new Streami18n();\n\nexportconst App = () => (\n  <OverlayProvider i18nInstance={streami18n}>\n    <Chat client={client} i18nInstance={streami18n}>\n      {/** App components */}\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Action List\nDESCRIPTION: This TypeScript/JSX snippet shows how to fully customize the message action list using the `MessageActionList` prop of the `Channel` component. It provides a custom component with predefined actions and styles.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Alert } from 'react-native';\nimport { Channel, MessageActionListItem, useMessageContext } from 'stream-chat-react-native';\n\nconst CustomMessageActionList = () => {\n  const { dismissOverlay } = useMessageContext();\n  const messageActions = [\n    {\n      action: function () {\n        Alert.alert('Edit Message action called.');\n        dismissOverlay();\n      },\n      actionType: 'editMessage',\n      title: 'Edit messagee',\n    },\n    {\n      action: function () {\n        Alert.alert('Delete message action');\n        dismissOverlay();\n      },\n      actionType: 'deleteMessage',\n      title: 'Delete Message',\n    },\n  ];\n  return (\n    <View style={{ backgroundColor: 'white' }}>\n      {messageActions.map(({ actionType, ...rest }) => (\n        <MessageActionListItem actionType={actionType} key={actionType} {...rest} />\n      ))}\n    </View>\n  );\n};\n\n<Channel MessageActionList={CustomMessageActionList}>\n  {/* Underlying MessageList and MessageInput components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Chat Provider Setup (Screen) - TSX\nDESCRIPTION: This snippet demonstrates how to use the Chat provider at the Screen level, providing the Stream Chat client instance to a specific screen's components. It also shows how to nest it within the OverlayProvider at the App level.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\nimport { Screen } from './Screen';\n\nexport const App = () => (\n  <OverlayProvider>\n    <Screen />\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat React Native with Yarn (RN CLI)\nDESCRIPTION: This command installs the core Stream Chat React Native SDK using Yarn in a React Native CLI project.  It adds the necessary packages for building chat functionality.  This is the initial step for integrating Stream Chat into your application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stream-chat-react-native\n```\n\n----------------------------------------\n\nTITLE: Initializing ChannelList with Stream Chat - React Native\nDESCRIPTION: This code snippet demonstrates the basic implementation of the `ChannelList` component from `stream-chat-react-native`. It requires an initialized `StreamChat` client and being wrapped with `OverlayProvider` and `Chat` components.  It displays a list of channels the user has access to.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Override Mark Read Request - React Native\nDESCRIPTION: This code snippet demonstrates how to override the default mark read request in Stream Chat React Native. The `doMarkReadRequest` function allows you to conditionally trigger the mark read functionality based on custom logic. It receives the channel instance as input and should call `channel.markRead()` when appropriate.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/channel.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst doMarkReadRequest = (channel) => {\n  if (/** Some custom logic here */) {\n    channel.markRead();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom CDN for Attachments - React Native TSX\nDESCRIPTION: This TypeScript code shows how to upload image and file attachments to a custom CDN instead of Stream's default CDN.  It utilizes the doImageUploadRequest and doDocUploadRequest props on the Channel component to override the default upload behavior. It is crucial to return a promise that resolves to an object with the key `file` that is the URL of the uploaded file.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\n<Channel\n  doDocUploadRequest={(file, channel) =>\n    chatClient?.sendFile(\n      `${channel._channelURL()}/file`, // replace this with your own cdn url\n      file.uri,\n      'name_for_file',\n    )\n  }\n  doImageUploadRequest={(file, channel) =>\n    chatClient?.sendFile(\n      `https://customcdnurl.com`, // replace this with your own cdn url\n      file.uri,\n      'name_for_file',\n    )\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Defining Default Reaction Type (TSX)\nDESCRIPTION: This snippet shows the default reaction type for stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultReactionType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Using Chat Component at App Level - TSX\nDESCRIPTION: This snippet illustrates wrapping app components with the `Chat` component, providing the `client` prop with the initialized Stream Chat client instance. It demonstrates the use of the `Chat` component within the `OverlayProvider`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>{/** App components */}</Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Accessing Stream Chat Client via useChatContext - Typescript\nDESCRIPTION: This snippet shows how to access the Stream Chat client within a React component using the `useChatContext` hook. This is useful for customizing components or functionality that require direct interaction with the client.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Giphy Search Input - React Native Typescript\nDESCRIPTION: This code snippet demonstrates how to create a custom Giphy search input for the MessageInput component using the Channel component and the InputGiphySearch prop in Stream Chat React Native. It utilizes the useMessageInputContext hook to control the Giphy active state and the display of more options.  Dependencies: react-native, stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { AutoCompleteInput, Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputGiphySearch = () => {\n  const { setGiphyActive, setShowMoreOptions } = useMessageInputContext();\n\n  return (\n    <View>\n      <Text style={{ textAlign: 'center' }}>Giphy</Text>\n      <AutoCompleteInput />\n      <Button\n        onPress={() => {\n          setGiphyActive(false);\n          setShowMoreOptions(true);\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputGiphySearch={CustomInputGiphySearch}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Using Channel Component with Thread State - TSX\nDESCRIPTION: This code snippet demonstrates how to use the `Channel` component with the `thread` prop to manage the thread state. The `thread` prop is used to ensure that messages are sent to the correct thread and that the image viewer is updated correctly. It also shows how to use `onThreadSelect` and `onThreadDismount` props to set and reset the thread state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Chat client={chatClient} i18nInstance={streami18n}>\n  <Channel channel={channel} thread={thread}>\n    <MessageList onThreadSelect={setThread} />\n    <MessageInput />\n  </Channel>\n</Chat>\n```\n\n----------------------------------------\n\nTITLE: Providing Stream Chat Client to UI\nDESCRIPTION: This snippet shows how to provide the Stream Chat client instance to the React Native UI components using the `Chat` component. The client is passed as a prop, enabling the UI to interact with the Stream Chat API internally via React context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with GestureHandlerRootView\nDESCRIPTION: This TypeScript snippet shows how to wrap the component tree with `<GestureHandlerRootView>` from `react-native-gesture-handler`.  This ensures that gesture handling works correctly, especially with components like `MessageOverlay` and `ImageGallery`.  This wrapper is necessary to properly handle touch events and gestures within the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\n<GestureHandlerRootView style={{ flex: 1 }}>\n  <OverlayProvider>{/* Other underlying components */}</OverlayProvider>\n</GestureHandlerRootView>\n```\n\n----------------------------------------\n\nTITLE: Initializing OverlayProvider with Stream Chat - JSX\nDESCRIPTION: This code snippet demonstrates the basic usage of the OverlayProvider component in a React Native application using Stream Chat.  It imports necessary components, initializes the Stream Chat client, and renders the Chat and ChannelList components within the OverlayProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/overlay-provider.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Enable Offline Support in Chat Component\nDESCRIPTION: This TypeScript code snippet shows how to enable offline support by adding the enableOfflineSupport prop to the Chat component from stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/offline-support.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Chat } from 'stream-chat-react-native';\n\n<Chat client={chatClient} enableOfflineSupport>\n  ...\n</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Overriding Channel Capabilities with overrideOwnCapabilities - TSX\nDESCRIPTION: This code snippet demonstrates how to override the default user capabilities within a Stream Chat Channel component using the overrideOwnCapabilities prop.  It disables the ability to upload files and send links by setting uploadFile and sendLinks to false respectively. This customization affects the UI by removing the attach file button and preventing the user from sending URLs in messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel/props/override_own_capabilities.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    uploadFile: false,\n    sendLinks: false\n  }}\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Members List - Typescript\nDESCRIPTION: This snippet illustrates how to create a channel instance using a list of members. The channel method is invoked with the channel type ('messaging') and a configuration object. The configuration object specifies the members of the channel in the `members` array.  The `name` property is an optional field to set the channel name.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel('messaging', {\n  members: ['jlahey', 'rlafleur'],\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Emoji Search - TSX\nDESCRIPTION: This code demonstrates how to customize the emoji search functionality using the `emojiSearchIndex` prop in the `Channel` component.  It requires providing a custom search function that accepts a query string and returns an array of Emoji objects. The example utilizes the `@jukben/emoji-search` library for performing the search and then maps the results to the expected Emoji type. The returned Emoji array should be limited to a reasonable number of results (e.g., 10).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-auto-complete-suggestion-list.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, EmojiSearchIndex } from 'stream-chat-react-native';\nimport search from '@jukben/emoji-search';\n\nconst ChannelScreen: React.FC<ChannelScreenProps> = ({ navigation }) => {\n  const customEmojiSearchIndex: EmojiSearchIndex = {\n    search: (query: string) => {\n      const results = search(query);\n      return results.slice(0, 10).map(data => ({\n        name: data.name,\n        names: data.keywords,\n        unicode: data.name,\n        skins: [],\n      }));\n    },\n  };\n\n  return (\n    <Channel\n      channel={channel}\n      emojiSearchIndex={customEmojiSearchIndex}\n      keyboardVerticalOffset={headerHeight}\n      thread={thread}\n    >\n      {/* Underlying components here */}\n    </Channel>\n  );\n};\n```\n\nLANGUAGE: ts\nCODE:\n```\ntype Emoji = {\n  id: string;\n  name: string;\n  names: string[];\n  unicode: string;\n  skins?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ThemeContext with useTheme hook - TSX\nDESCRIPTION: Demonstrates how to access theme values using the useTheme hook provided by stream-chat-react-native.  It retrieves the accent_red color from the theme. This is a simpler alternative to useContext and is the recommended approach.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/theme_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'stream-chat-react-native';\n\nconst {\n  theme: {\n    colors: {\n      accent_red },\n  },\n} = useTheme();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a custom theme for the stream-chat-react-native library using TypeScript. It imports the necessary types from the library and defines a theme object that overrides the default styles for the file container within the messageSimple component. The DeepPartial type ensures that all keys are optional for deep merging with the default theme.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/theming.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { DeepPartial, Theme } from 'stream-chat-react-native';\n\nconst theme: DeepPartial<Theme> = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Adding Thread Component inside Channel in React Native using Stream Chat\nDESCRIPTION: This snippet adds the `Thread` component for displaying message threads. It utilizes `useState` to manage the selected thread and conditionally renders either the `Thread` component or the `MessageList` and `MessageInput` components based on whether a thread is selected.  The `onThreadSelect` prop is used on the `MessageList` to set the selected thread.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, MessageType, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [thread, setThread] = useState<MessageType | null>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0} thread={thread} threadList={!!thread}>\n            {thread ? (\n              <Thread />\n            ) : (\n              <>\n                <MessageList onThreadSelect={setThread} />\n                <MessageInput />\n              </>\n            )}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadContext with useContext - TSX\nDESCRIPTION: Demonstrates how to consume the ThreadContext using React's useContext hook within a Stream Chat React Native application. The ThreadContext provides access to thread-related data and functions within a Channel component. Import useContext from 'react' and ThreadContext from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/thread_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThreadContext } from 'stream-chat-react-native';\n\nconst value = useContext(ThreadContext);\n```\n\n----------------------------------------\n\nTITLE: Basic ChannelList Usage with Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the ChannelList component within a React Native application using the stream-chat-react-native library. It shows how to initialize the StreamChat client, define filters, sort options, and rendering the ChannelList within the Chat and OverlayProvider components, as well as specifying an onSelect handler for channel selection.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/channel_list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst filters = { members: { $in: [ 'vishal', 'lucas', 'neil' ] } };\nconst sort = { last_updated: -1 };\nconst options = { limit: 20, messages_limit: 30 };\n\nexport const App = () =>\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList\n        filters={filters}\n        sort={sort}\n        options={options}\n        onSelect={(channel) => /** navigate to channel screen */ }\n      />\n    </Chat>\n  </OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Checking Moderator Role - TSX\nDESCRIPTION: This code snippet demonstrates how to check if the current user has a 'moderator' role, considering both channel-specific ('channel_moderator') and application-wide ('moderator') roles.  It relies on the channel object's state and membership information.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channel-context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst isModerator =\n  channel?.state.membership.role === 'channel_moderator' || channel?.state.membership.role === 'moderator';\n```\n\n----------------------------------------\n\nTITLE: Custom Message Component Integration - TSX\nDESCRIPTION: Demonstrates how to integrate a custom message component (`CustomMessageComponent`) into the Stream Chat React Native channel.  It replaces the default Message component with the custom one. Requires the `OverlayProvider`, `Chat`, `Channel`, `MessageList`, and `MessageInput` components from `stream-chat-react-native`.  The `channel` prop needs to be a valid Stream Chat channel instance. `CustomMessageComponent` needs to be defined elsewhere.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider bottomInset={bottom} i18nInstance={streami18n}>\n  <Chat client={chatClient} i18nInstance={streami18n}>\n    <Channel channel={channel} keyboardVerticalOffset={headerHeight} Message={CustomMessageComponent}>\n      <View style={{ flex: 1 }}>\n        <MessageList />\n        <MessageInput />\n      </View>\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Filtering Frozen Channels in ChannelList - React Native\nDESCRIPTION: This code snippet demonstrates how to filter channels in a ChannelList component to only display frozen channels for a specific user. It uses the `filters` prop to define the filtering criteria, specifying that only channels where the user 'vishal' is a member and the channel is frozen should be displayed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst filters = {\n  members: { $in: ['vishal'] },\n  frozen: true\n}\n\n<ChannelList filters={filters} />\n```\n\n----------------------------------------\n\nTITLE: Unblocking a User with Stream Chat - TSX\nDESCRIPTION: This code snippet demonstrates how to unblock a user using the `unBlockUser` method of the Stream Chat client. It takes the user ID of the user to be unblocked as input. The code is wrapped in a try-catch block to handle potential errors during the unblocking process. The client must be connected before calling `unBlockUser`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/blocking-users.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nconst chatClient = StreamChat.getInstance('your api key');\n\n// Note this has to be done after the client connection(`client.connectUser`) is established.\nconst unBlockUser = async (userId: string) => {\n  try {\n    await chatClient.unBlockUser(userId);\n  } catch (err) {\n    console.log('Error UnBlocking user:', err);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User from Stream Chat - TS\nDESCRIPTION: This snippet shows how to disconnect a user from the Stream Chat service.  Calling `disconnectUser` closes the WebSocket connection and cleans up the user's session.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Adjusting State Update Throttling - React Native\nDESCRIPTION: This code snippet demonstrates how to adjust the throttling interval for state updates in the Channel component. It uses the newMessageStateUpdateThrottleInterval and stateUpdateThrottleInterval props to configure the throttling for new messages and other channel updates, respectively. This can help to reduce the load on the application in high-traffic scenarios.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/performance.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel newMessageStateUpdateThrottleInterval={2000} stateUpdateThrottleInterval={800} />\n```\n\n----------------------------------------\n\nTITLE: React Native Location Sharing Implementation - JSX\nDESCRIPTION: This JSX code snippet demonstrates a React Native component for integrating location sharing with Stream Chat. It uses react-native-geolocation to fetch the user's location, the Google Maps Static API to render a map, and stream-chat-react-native for chat functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { Image, Linking, StyleSheet, TouchableOpacity, View } from 'react-native';\nimport { StreamChat } from 'stream-chat';\nimport {\n  Channel,\n  Chat,\n  MessageInput,\n  MessageList,\n  OverlayProvider as ChatOverlayProvider,\n  useChannelContext,\n} from 'stream-chat-react-native';\nimport { SafeAreaProvider, SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';\nimport Geolocation from '@react-native-community/geolocation';\nimport Svg, { Path } from 'react-native-svg';\n\n// ============================================================\n//   Fill in following values\n// ============================================================\nconst API_KEY = '';\nconst USER_ID = '';\nconst USER_TOKEN = '';\nconst CHANNEL_ID = '';\n// Reference: https://developers.google.com/maps/documentation/maps-static/get-api-key\nconst MAPS_API_KEY = '';\n\nconst chatClient = StreamChat.getInstance(API_KEY);\nconst user = { id: USER_ID };\n\n// We are going to `await` following two calls, before rendering any UI component.\n// Please check the App component at bottom.\nconst connectUserPromise = chatClient.connectUser(user, USER_TOKEN);\nconst channel = chatClient.channel('messaging', CHANNEL_ID);\n\n// Basic utilities required for location sharing\n\n// Given the location coordinates, this function generates URL for google map,\n// and opens this Url using Linking module of react-native.\n// Please check documentation of `Linking` module from react-native, for details:\n// https://reactnative.dev/docs/linking\n//\n// Generally this URL will be opened in google maps application.\n// https://developers.google.com/maps/documentation/urls/get-started\nconst goToGoogleMaps = (lat, long) => {\n  const url = `https://www.google.com/maps/search/?api=1&query=${lat},${long}`;\n\n  Linking.canOpenURL(url).then(supported => {\n    if (supported) {\n      Linking.openURL(url);\n    } else {\n      console.log(`Don't know how to open URI: ${url}`);\n    }\n  });\n};\n\n// Generates static map url for given location coordinates.\n// For reference, please check - https://developers.google.com/maps/documentation/maps-static/overview\nconst prepareStaticMapUrl = (lat, long) => {\n  let baseURL = 'https://maps.googleapis.com/maps/api/staticmap?';\n  let url = new URL(baseURL);\n  let params = url.searchParams;\n  params.append('center', `${lat},${long}`);\n  params.append('zoom', '15');\n  params.append('size', '600x300');\n  params.append('maptype', 'roadmap');\n  params.append('key', MAPS_API_KEY);\n  params.append('markers', `color:red|${lat},${long}`);\n\n  return url.toString();\n};\n\n// Send your current location attachment, as message, on current channel.\nconst sendCurrentLocation = () => {\n  Geolocation.getCurrentPosition(info => {\n    channel?.sendMessage({\n      text: 'This is my location',\n      attachments: [\n        {\n          type: 'location',\n          latitude: info.coords.latitude,\n          longitude: info.coords.longitude,\n        },\n      ],\n    });\n  });\n};\n\n// UI Component for rendering `location` type attachment\nconst LocationCard = ({ type, latitude, longitude }) => {\n  if (type === 'location') {\n    const mapApi = prepareStaticMapUrl(latitude, longitude);\n    console.log(mapApi);\n    return (\n      <TouchableOpacity onPress={() => goToGoogleMaps(latitude, longitude)}>\n        <Image source={{ uri: mapApi }} style={{ height: 200, width: 300 }} />\n      </TouchableOpacity>\n    );\n  }\n};\n\n// Icon for \"Share Location\" button, next to input box.\nconst ShareLocationIcon = props => (\n  <Svg width={24} height={24} viewBox='0 0 24 24' fill='none' {...props}>\n    <Path\n      d='M12 12c-1.654 0-3-1.345-3-3 0-1.654 1.346-3 3-3s3 1.346 3 3c0 1.655-1.346 3-3 3zm0-4a1.001 1.001 0 101 1c0-.551-.449-1-1-1z'\n      fill='#000'\n    />\n    <Path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M12 22s7-5.455 7-12.727C19 5.636 16.667 2 12 2S5 5.636 5 9.273C5 16.545 12 22 12 22zm1.915-4.857C15.541 15.032 17 12.277 17 9.273c0-1.412-.456-2.75-1.27-3.7C14.953 4.664 13.763 4 12 4s-2.953.664-3.73 1.573C7.456 6.523 7 7.86 7 9.273c0 3.004 1.459 5.759 3.085 7.87.678.88 1.358 1.614 1.915 2.166a21.689 21.689 0 001.915-2.166zm-.683 3.281s0 .001 0 0z'\n      fill='#000'\n    />\n  </Svg>\n);\n\n// UI component to add Share Location button next to input box.\nconst InputButtons = () => {\n  const { channel: currentChannel } = useChannelContext();\n\n  return (\n    <TouchableOpacity onPress={() => sendCurrentLocation(currentChannel)} style={{ marginRight: 10 }}>\n      <ShareLocationIcon />\n    </TouchableOpacity>\n  );\n};\n\nconst ChannelScreen = () => {\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <ChatOverlayProvider bottomInset={bottom}>\n      <SafeAreaView>\n        <Chat client={chatClient}>\n          {/* Setting keyboardVerticalOffset as 0, since we don't have any header yet */}\n          <Channel channel={channel} keyboardVerticalOffset={0} Card={LocationCard} InputButtons={InputButtons}>\n            <View style={StyleSheet.absoluteFill}>\n              <MessageList />\n              <MessageInput />\n            </View>\n          </Channel>\n        </Chat>\n      </SafeAreaView>\n    </ChatOverlayProvider>\n  );\n};\n\nexport default function App() {\n  const [ready, setReady] = useState();\n\n  useEffect(() => {\n    const initChat = async () => {\n      await connectUserPromise;\n      await channel.watch();\n      setReady(true);\n    };\n\n    initChat();\n  }, []);\n\n  if (!ready) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider>\n      <ChannelScreen channel={channel} />\n    </SafeAreaProvider>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadsContext with useContext - React\nDESCRIPTION: This code snippet shows how to consume the ThreadsContext using the useContext hook in a React component. It imports the ThreadsContext from 'stream-chat-react-native' and uses useContext to access the context value.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/threads-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThreadsContext } from 'stream-chat-react-native';\n\nconst value = useContext(ThreadsContext);\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelPreviewStatus with PreviewStatus prop - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the ChannelPreviewStatus component by providing a custom implementation to the `PreviewStatus` prop of the `ChannelList` component.  It uses `useMemo` to memoize the result of a custom date formatter, preventing unnecessary re-renders. The custom status displays a formatted date derived from the latest message preview.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/channel-preview-status.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo } from 'react';\nimport { ChannelList, ChannelPreviewStatus } from 'stream-chat-react-native';\nimport { customDateFormatter } from '...'; // your custom date formatter\n\nconst CustomPreviewStatus = ({ latestMessagePreview }) => {\n  // important usage of useMemo once date parsers can perform some computation when re-rendering.\n  const formattedDate = useMemo(() => customDateFormatter(latestMessagePreview), [latestMessagePreview]);\n  return <ChannelPreviewStatus formatLatestMessageDate={formattedDate} />;\n};\n\nconst App = () => {\n  return <ChannelList PreviewStatus={CustomPreviewStatus} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Identifying Bounced Messages in React Native\nDESCRIPTION: This snippet explains how to identify bounced messages in the React Native SDK. A bounced message will have its `type` property set to `error` and its `moderation_details` property will be defined. The `moderation_details` provides information about why the message was bounced.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/moderation.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.type === 'error' && message.moderation_details !== undefined\n```\n\n----------------------------------------\n\nTITLE: Install Expo Document Picker (Expo)\nDESCRIPTION: This command installs the expo-document-picker package using npx expo install for projects initialized with Expo. This is an optional dependency to share file attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-document-picker\n```\n\n----------------------------------------\n\nTITLE: Displaying Blocked Users in UI - TSX\nDESCRIPTION: This code snippet demonstrates how to create a React Native UI to display a list of blocked users. It uses `useEffect` to fetch the list of blocked users on component mount and stores them in a state variable. It also implements an `unBlockUser` function that removes the user from the blocked list and updates the state. Dependencies include `react-native` components and Stream Chat types.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/blocking-users.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { Image, StyleSheet, Text, View } from 'react-native';\nimport { BlockedUserDetails, StreamChat } from 'stream-chat';\n\nconst chatClient = StreamChat.getInstance('your api key');\n\nconst BlockedUsers = () => {\n  const [blockedUsers, setBlockedUsers] = useState<BlockedUserDetails[]>([]);\n\n  useEffect(() => {\n    const getBlockedUsers = async () => {\n      try {\n        const users = await chatClient.getBlockedUsers();\n        setBlockedUsers(users.blocks);\n      } catch (error) {\n        console.log('Error getting blocked users:', error);\n      }\n    };\n\n    getBlockedUsers();\n  }, []);\n\n  const unBlockUser = async (userId: string) => {\n    try {\n      await chatClient.unBlockUser(userId);\n      const filteredUsers = blockedUsers.filter(user => user.blocked_user_id !== userId);\n      setBlockedUsers(filteredUsers);\n    } catch (err) {\n      console.log('Error UnBlocking user:', err);\n    }\n  };\n\n  return (\n    <View>\n      {blockedUsers.map((blockedUser: BlockedUserDetails) => (\n        <Pressable\n          key={blockedUser.blocked_user_id}\n          onPress={() => {\n            unBlockUser(blockedUser.blocked_user_id);\n          }}\n          style={styles.container}\n        >\n          <Image source={{ uri: blockedUser.blocked_user.image as string }} style={styles.image} />\n          <Text style={styles.name}>{blockedUser.blocked_user.name}</Text>\n        </Pressable>\n      ))}\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    padding: 16,\n    alignItems: 'center',\n  },\n  image: {\n    height: 80,\n    width: 80,\n    borderRadius: 40,\n  },\n  name: {\n    fontSize: 16,\n    fontWeight: 'bold',\n    marginLeft: 16,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Language Translations\nDESCRIPTION: Shows how to override existing translations for a specific language using the `registerTranslation` method.  This is useful for regional variations or specific customizations. The example overrides the \"Delete Message\" translation for Dutch ('nl').\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n\nstreami18n.registerTranslation('nl', {\n  'Delete Message': 'Verwijder bericht',\n});\n```\n\n----------------------------------------\n\nTITLE: Load More Button Implementation for ChannelList - TSX\nDESCRIPTION: This snippet demonstrates how to replace the default infinite scroll pagination with a 'Load More' button in a ChannelList. It defines a `FooterLoadMoreButton` component that utilizes the `useChannelsContext` hook to access pagination-related flags and the `loadNextPage` function. The `additionalFlatListProps` are used to override the default FlatList props.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-list.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\nimport { useChannelsContext } from 'stream-chat-react-native';\n\nconst FooterLoadMoreButton = () => {\n  const { loadingChannels, loadNextPage, hasNextPage } = useChannelsContext();\n\n  if (loadingChannels || !hasNextPage) return null;\n\n  return <Button title={'Load More'} onPress={loadNextPage} />;\n};\n\n<ChannelList\n  additionalFlatListProps={{\n    ListFooterComponent: FooterLoadMoreButton,\n    onEndReached: () => null,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Customizing AttachButton onPress using useCallback (JSX)\nDESCRIPTION: This code snippet demonstrates how to customize the behavior of the AttachButton by passing a custom `onPress` function to the `handleAttachButtonPress` prop of the `Channel` component. It uses `useCallback` to memoize the function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/native-image-picker.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useCallback } from 'react';\nimport { Channel } from 'stream-chat-react-native';\n\nconst App = () => {\n  const handleAttachButtonPress = useCallback(async () => {\n    // Your custom logic here\n  }, []);\n\n  return <Channel channel={channel} handleAttachButtonPress={handleAttachButtonPress} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ThemeContext with useTheme Hook - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ThemeContext using the useTheme hook provided by the stream-chat-react-native library. It imports the useTheme hook and calls it to access the theme object, specifically the accent_red color. The component must be a child of either the OverlayProvider or Chat component for the useTheme hook to access the ThemeContext correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/theme_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'stream-chat-react-native';\n\nconst {\n  theme: {\n    colors: { accent_red },\n  },\n} = useTheme();\n```\n\n----------------------------------------\n\nTITLE: Using Custom CooldownTimer in Channel - JSX\nDESCRIPTION: This snippet illustrates how to integrate the custom CooldownTimer component into the Channel component. It passes the CustomCooldownTimer component as the `CooldownTimer` prop to the Channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel CooldownTimer={CustomCooldownTimer}>...</Channel>\n```\n\n----------------------------------------\n\nTITLE: Implementing MessageInput in React Native\nDESCRIPTION: This snippet demonstrates how to add the MessageInput component to enable users to send messages. It's placed below the MessageList within the Channel component. It sets the keyboardVerticalOffset to 0, assuming no header is present.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0}>\n            <MessageList />\n            <MessageInput />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Reaction Data\nDESCRIPTION: This snippet defines an array of `ReactionData` objects to represent custom reactions. Each object includes an `Icon` component and a `type` string. The icons are defined as React components, preferably using `react-native-svg` for scalability.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const reactionData: ReactionData[] = [\n  {\n    Icon: LoveReaction,\n    type: 'love',\n  },\n  {\n    Icon: ThumbsUpReaction,\n    type: 'like',\n  },\n  {\n    Icon: ThumbsDownReaction,\n    type: 'sad',\n  },\n  {\n    Icon: LOLReaction,\n    type: 'haha',\n  },\n  {\n    Icon: WutReaction,\n    type: 'wow',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Installing peer dependencies with Yarn (RN CLI)\nDESCRIPTION: This command installs the peer dependencies required by the Stream Chat React Native SDK using Yarn in a React Native CLI project. These dependencies provide essential functionalities such as network information, flat list support, file system access, gesture handling, image resizing, animations, and SVG support. It ensures the SDK functions correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-community/netinfo @stream-io/flat-list-mvcp react-native-fs react-native-gesture-handler react-native-image-resizer react-native-reanimated react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Overriding Native Handlers - Trigger Haptic Feedback\nDESCRIPTION: This code snippet demonstrates how to override a native handler function, specifically the `triggerHaptic` handler, within the Stream Chat React Native library.  It imports `registerNativeHandlers` from 'stream-chat-react-native' and overrides the default haptic feedback implementation with a function that does nothing (returns null), effectively disabling haptic feedback. This prevents repeatedly re-registering the same handler by doing it outside the component lifecycle.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/native-handlers.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerNativeHandlers } from 'stream-chat-react-native';\n\nregisterNativeHandlers({\n  triggerHaptic: () => null,\n});\n```\n\n----------------------------------------\n\nTITLE: Complete Android Intent Filter XML\nDESCRIPTION: Complete intent filter configuration for Android deep linking, including action, categories, and data schemes (http/https).  The `android:autoVerify=\"true\"` attribute enables Android App Links verification.  Remember to replace `YOUR URL HERE` with your app's actual domain.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/deeplinking.mdx#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"http\" />\n    <data android:scheme=\"https\" />\n    <!-- Example: \"stream-calls-dogfood.vercel.app” -->\n    <data android:host=\"`YOUR URL HERE`\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Intercepting Message Action - React Native\nDESCRIPTION: This code snippet demonstrates how to intercept a message action in Stream Chat React Native.  Specifically, it adds analytics tracking to the copy message action using the handleCopy prop of the Channel component. The trackCopyAction function is assumed to be defined elsewhere and handles the analytics tracking logic. This interception doesn't prevent the default copy action from executing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\n<Channel handleCopy={() => trackCopyAction()} />\n```\n\n----------------------------------------\n\nTITLE: Custom Send Button Implementation in React Native\nDESCRIPTION: This example shows how to replace the default SendButton in Stream Chat React Native with a custom implementation. The custom button is a boat icon and is disabled if the user has not entered any text or attached any files. It uses the `useMessageInputContext` hook to access the necessary context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity } from 'react-native';\nimport { RootSvg, RootPath, Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst StreamButton = () => {\n  const { sendMessage, text, imageUploads, fileUploads } = useMessageInputContext();\n  const isDisabled = !text && !imageUploads.length && !fileUploads.length;\n\n  return (\n    <TouchableOpacity disabled={isDisabled} onPress={sendMessage}>\n      <RootSvg height={21} width={42} viewBox='0 0 42 21'>\n        <RootPath\n          d='M26.1491984,6.42806971 L38.9522984,5.52046971 C39.7973984,5.46056971 40.3294984,6.41296971 39.8353984,7.10116971 L30.8790984,19.5763697 C30.6912984,19.8379697 30.3888984,19.9931697 30.0667984,19.9931697 L9.98229842,19.9931697 C9.66069842,19.9931697 9.35869842,19.8384697 9.17069842,19.5773697 L0.190598415,7.10216971 C-0.304701585,6.41406971 0.227398415,5.46036971 1.07319842,5.52046971 L13.8372984,6.42816971 L19.2889984,0.333269706 C19.6884984,-0.113330294 20.3884984,-0.110730294 20.7846984,0.338969706 L26.1491984,6.42806971 Z M28.8303984,18.0152734 L20.5212984,14.9099734 L20.5212984,18.0152734 L28.8303984,18.0152734 Z M19.5212984,18.0152734 L19.5212984,14.9099734 L11.2121984,18.0152734 L19.5212984,18.0152734 Z M18.5624984,14.1681697 L10.0729984,17.3371697 L3.82739842,8.65556971 L18.5624984,14.1681697 Z M21.4627984,14.1681697 L29.9522984,17.3371697 L36.1978984,8.65556971 L21.4627984,14.1681697 Z M19.5292984,13.4435697 L19.5292984,2.99476971 L12.5878984,10.8305697 L19.5292984,13.4435697 Z M20.5212984,13.4435697 L20.5212984,2.99606971 L27.4627984,10.8305697 L20.5212984,13.4435697 Z M10.5522984,10.1082697 L12.1493984,8.31366971 L4.34669842,7.75446971 L10.5522984,10.1082697 Z M29.4148984,10.1082697 L27.8178984,8.31366971 L35.6205984,7.75446971 L29.4148984,10.1082697 Z'\n          pathFill={isDisabled ? 'grey' : 'blue'}\n        />\n      </RootSvg>\n    </TouchableOpacity>\n  );\n};\n\n// In your App\n\n<Channel channel={channel} SendButton={StreamButton} />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel\nDESCRIPTION: This snippet shows how to create a channel using the `create` method.  This creates the channel on the server, but does not automatically subscribe the client to updates.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Connecting a User - Typescript\nDESCRIPTION: This snippet shows how to connect a user to Stream Chat using the `connectUser` function. It requires a user object containing user details like id, name, and image URL, as well as a user token for authentication. It's recommended to avoid unnecessary `connectUser` calls.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'jlahey',\n    name: 'Jim Lahey',\n    image: 'https://i.imgur.com/fR9Jz14.png',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Channel\nDESCRIPTION: This code snippet demonstrates the basic usage of the Stream Chat Channel component in a React Native application. It initializes a Stream Chat client, creates and watches a channel, and renders the Channel component with MessageList and MessageInput components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/channel.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Channel, Chat, MessageInput, MessageList, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState();\n\n  useEffect(() => {\n    const createAndWatchChannel = async () => {\n      const newChannel = client.channel('messaging', 'channel_id');\n      await newChannel.watch();\n      setChannel(newChannel);\n    };\n\n    createAndWatchChannel();\n  }, []);\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <MessageList />\n          <MessageInput />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: ThreadScreen Component with Context - React Native\nDESCRIPTION: This component represents the Thread screen. It uses the `useAppChannel` and `useAppThread` hooks to access the channel and thread context, respectively. The `onThreadDismount` prop is used to clear the thread context when the thread screen is unmounted, preventing unnecessary ImageGallery updates in the main channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ThreadScreen = () => {\n  const { channel } = useAppChannel();\n  const { setThread, thread } = useAppThread();\n\n  return (\n    <Channel channel={channel} thread={thread} threadList>\n      <Thread onThreadDismount={() => setThread(undefined)} />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Applying a Custom Theme\nDESCRIPTION: This code snippet shows how to apply a custom theme to the `stream-chat-react-native` application using the `OverlayProvider` component. The theme is passed as a `style` prop within the `value` prop of the `OverlayProvider`. This makes the theme available to all child components via context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/theming.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const App = () => (\n  <OverlayProvider value={{ style: theme }}>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Components to Channel (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to pass the custom attachment components as props to the `<Channel>` component.  This overrides the default components with the custom implementations defined earlier.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n  Gallery={CustomGallery}\n  Giphy={CustomGiphy}\n  FileAttachment={CustomFileAttachment}\n  UrlPreview={CustomUrlPreview}\n>\n```\n\n----------------------------------------\n\nTITLE: Providing Stream Chat Client to UI - TypeScript\nDESCRIPTION: This snippet shows how to provide the Stream Chat client instance to the UI components using the `Chat` component from `stream-chat-react-native`. The client instance is passed as the `client` prop to the `Chat` component, making it accessible to the UI components via context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Checking Owner Permissions within ChannelContext\nDESCRIPTION: This snippet illustrates how to check if the current user has 'owner' permissions for the current channel type.  It accesses the channel object from the ChannelContext and checks the membership role.  Requires access to channel state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channel-context.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst isOwner = channel?.state.membership.role === 'owner';\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with ID - Typescript\nDESCRIPTION: This snippet demonstrates how to create a channel using a specified channel ID. A channel type is also required (in this case, 'messaging'). Custom channel data, such as the channel name, can also be provided.  This channel is created locally; you still need to call `channel.create()` to persist it on the server.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel('messaging', 'the_park', {\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Creation Content\nDESCRIPTION: This code snippet starts the process of customizing the poll creation screen for consistency with the poll results screen. It imports the CreatePoll component from stream-chat-react-native. It outlines a basic structure for a MyCreatePollContent component, setting up a SafeAreaView but leaving the rest of the implementation incomplete.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-next-line\n  CreatePoll,\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\n// highlight-start\nconst MyCreatePollContent = ({\n  route: {\n    params: { sendMessage },\n  },\n}) => {\n  const navigation = useNavigation();\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n```\n\n----------------------------------------\n\nTITLE: Defining StreamChatGenerics Type (TSX)\nDESCRIPTION: This snippet shows how to define the `StreamChatGenerics` type, which includes seven customizable fields that correspond to the seven generic types available in `stream-chat-js`.  These types allow you to define custom data structures for attachments, channels, commands, events, messages, reactions, and users within the Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\ntype StreamChatGenerics = {\n  attachmentType: LocalAttachmentType;\n  channelType: LocalChannelType;\n  commandType: LocalCommandType;\n  eventType: LocalEventType;\n  messageType: LocalMessageType;\n  reactionType: LocalReactionType;\n  userType: LocalUserType;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Mark Read Request - React Native\nDESCRIPTION: This code demonstrates how to override the default mark read request using the doMarkReadRequest prop. It allows for conditional marking of the channel as read based on custom logic. The function receives the channel instance as a parameter.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/channel.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst doMarkReadRequest = (channel) => {\n  if (/** Some custom logic here */) {\n    channel.markRead();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Registering a New Language Translation\nDESCRIPTION: Demonstrates how to add support for a new language by registering a translation using the `registerTranslation` method. The example shows how to add Polish ('pl') translations for specific keys. The first argument is the language code, and the second argument is an object containing the key-value pairs for the translations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\nstreami18n.registerTranslation('pl', {\n  'Copy Message': 'Kopiuj wiadomość',\n  'Delete Message': 'Usuń wiadomość',\n  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} i {{ secondUser }} piszą...',\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Keyboard Compatible View Implementation\nDESCRIPTION: This code snippet demonstrates how to create a custom KeyboardCompatibleView component for React Native Stream Chat. It checks the platform and adjusts the keyboard vertical offset for iOS based on safe area insets. For Android, it renders the children directly without keyboard adjustments. It utilizes the `useSafeAreaInsets` hook from 'react-native-safe-area-context' to get the safe area insets.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/keyboard.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {Platform} from 'react-native';\nimport {useSafeAreaInsets} from 'react-native-safe-area-context';\nimport {KeyboardCompatibleView} from 'stream-chat-react-native';\n\nexport const CustomKeyboardCompatibleView = ({children}) => {\n  const insets = useSafeAreaInsets();\n\n  if (Platform.OS === 'android') {\n    return children;\n  }\n\n  const iosVerticalOffset = insets.bottom > 0 ? 60 : 0;\n\n  return (\n    <KeyboardCompatibleView\n      keyboardVerticalOffset={iosVerticalOffset}>\n      {children}\n    </KeyboardCompatibleView>\n  );\n};\n\n/** In your app */\n<Channel\n  KeyboardCompatibleView={CustomizedKeyboardView}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with new StreamChat - TS\nDESCRIPTION: This snippet shows how to initialize the Stream Chat client using the `new StreamChat()` constructor. Note that repeated calls to this constructor will create multiple client instances and WebSocket connections.  An API key is required.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new StreamChat('api_key');\n```\n\n----------------------------------------\n\nTITLE: Chat Component with Screen Level Scope - Typescript React\nDESCRIPTION: This code snippet shows how to implement the `Chat` component at the screen level, offering more granular control. It utilizes the `Chat` component within a specific screen, requiring the `client` prop, while the `OverlayProvider` wraps the screen component in the main `App` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\nLANGUAGE: typescript react\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\nimport { Screen } from './Screen';\n\nexport const App = () => (\n  <OverlayProvider>\n    <Screen />\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Specific Message Parts - React Native\nDESCRIPTION: This snippet shows how to customize specific parts of the MessageSimple component, such as the MessageAvatar or MessageText, by providing custom components to the Channel component as props. This allows for targeted customization without overriding the entire message component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  MessageAvatar={CustomAvatarComponent}\n  MessageText={CustomTextComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Avatar in Stream Chat Channel\nDESCRIPTION: This code snippet demonstrates how to customize the message avatar within the Stream Chat React Native Channel component. It defines a `CustomAvatar` component that utilizes the `useMessageContext` hook to access the message and its associated user information. The avatar is then rendered using an Image component, fetching the image URI from the user object.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/channel.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Image } from 'react-native';\nimport { Channel, useMessageContext } from 'stream-chat-react-native';\n\nconst CustomAvatar = () => {\n  const { message } = useMessageContext();\n\n  return <Image source={{ uri: message.user?.image }} />;\n};\n\n<Channel MessageAvatar={CustomAvatar} />;\n```\n\n----------------------------------------\n\nTITLE: Compressing Files Before Upload - React Native\nDESCRIPTION: This snippet illustrates how to compress video files before uploading them using the Channel component's doDocUploadRequest prop. It utilizes the react-native-compressor library for video compression. The file size limit for uploads is 100 MB.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, ChannelProps } from 'stream-chat-react-native';\nimport { Video as VideoCompressor } from 'react-native-compressor';\n\n\nconst customDoDocUploadRequest: NonNullable<ChannelProps['doDocUploadRequest']> = async (\n  file,\n  channel,\n) => {\n  if (!file.uri) {\n    throw new Error('Invalid file provided');\n  }\n  // check if it is a video file using the MIME type\n  if (file.mimeType?.startsWith('video/')) {\n    const result = await VideoCompressor.compress(file.uri, {\n      compressionMethod: 'auto',\n    });\n    // set the local file uri to the compressed file\n    file.uri = result;\n  }\n\n  // send the file\n  return await channel.sendFile(file.uri, file.name, file.mimeType);\n};\n\n\n<Channel channel={channel} doDocUploadRequest={customDoDocUploadRequest}>\n```\n\n----------------------------------------\n\nTITLE: Override Send Message Request - React Native\nDESCRIPTION: This code snippet demonstrates overriding the send message request in Stream Chat React Native. The `doSendMessageRequest` function allows modification of the message object before sending. The function receives the channelId and messageObject, modifies the object, and returns a Promise equivalent to `channel.sendMessage`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/channel.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst doSendMessageRequest = (channelId, messageObject) => {\n  if (/** Some custom logic here */) {\n    messageObject.isSpecial = true;\n  }\n  return channel.sendMessage(messageObject);\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Results Content with usePollState Hook\nDESCRIPTION: This code snippet customizes the PollResults screen further by including the Poll name in the header. It utilizes the usePollState hook to access the poll name and the PollResultsContent component to display the results. A MyPollResultsContent component is created to render the custom header with the poll name.  The PollResultsScreen component then uses MyPollResultsContent to display the poll results.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-start\n  usePollState,\n  PollResultsContent,\n  // highlight-end\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\n// highlight-start\nconst MyPollResultsContent = () => {\n  const { name } = usePollState();\n  const navigation = useNavigation();\n  return (\n    <>\n      <PollModalHeader title={name} onPress={() => navigation.goBack()} />\n      <PollResultsContent />\n    </>\n  );\n};\n\nconst PollResultsScreen = ({\n  route: {\n    params: { message, poll },\n  },\n}) => {\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <PollResults message={message} poll={poll} PollResultsContent={MyPollResultsContent} />\n    </SafeAreaView>\n  );\n};\n// highlight-end\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel} PollContent={MyPollContent}>\n          <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n            <ChannelStack.Screen\n              name={'ChannelMessageList'}\n              options={{ headerShown: false }}\n              component={ChannelMessageList}\n            />\n            <ChannelStack.Screen\n              name={'PollResultsScreen'}\n              options={{ headerShown: false }}\n              component={PollResultsScreen}\n            />\n          </ChannelStack.Navigator>\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Chat Provider in Screen - TSX\nDESCRIPTION: Demonstrates using the `Chat` component at the screen level, allowing for more modular integration of Stream Chat. The `Chat` component requires a `client` prop, which is the initialized `StreamChat` instance.  A separate `OverlayProvider` is also required at a higher level. Requires the `stream-chat` and `stream-chat-react-native` packages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\nimport { Screen } from './Screen';\n\nexport const App = () => (\n  <OverlayProvider>\n    <Screen />\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Reply Header - React Native Typescript\nDESCRIPTION: This code snippet demonstrates how to create a custom reply state header for the MessageInput component using the Channel component and the InputReplyStateHeader prop in Stream Chat React Native.  It uses the useMessageInputContext hook to access the clearQuotedMessageState and resetInput functions for handling the reply state. Dependencies: react-native, stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputReplyStateHeader = () => {\n  const { clearQuotedMessageState, resetInput } = useMessageInputContext();\n  return (\n    <View>\n      <Text>Reply Header</Text>\n      <Button\n        onPress={() => {\n          clearQuotedMessageState();\n          resetInput();\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputReplyStateHeader={CustomInputReplyStateHeader}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Members List - TS\nDESCRIPTION: This snippet shows how to create a channel instance using a list of members, channel type and optional data. This does not create the channel on the backend, this only initializes the channel object on the client. If a list of members is used, a channel `id` will be auto-generated.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel(channel_type, {\n    members: ['userOne', 'userTwo']\n    name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming OwnCapabilitiesContext with useContext - TSX\nDESCRIPTION: Demonstrates how to consume the OwnCapabilitiesContext using the useContext hook in a React component. This allows access to the boolean capabilities like uploadFile, updateAnyMessage, and deleteAnyMessage, which indicate whether the user has permission to perform those actions in the current channel. It requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/own-capabilities-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { OwnCapabilitiesContext } from 'stream-chat-react-native';\n\nconst { uploadFile, updateAnyMessage, deleteAnyMessage } = useContext(OwnCapabilitiesContext);\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamChat Client with Generics (TSX)\nDESCRIPTION: This snippet shows how to instantiate the StreamChat client with TypeScript generics.  It's crucial for enabling type safety when working with custom data fields. The client is instantiated with a generic type, StreamChatGenerics, which defines seven customizable fields.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = StreamChat.getInstance<StreamChatGenerics>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Vote Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the VoteButton component from the stream-chat-react-native library. It imports the VoteButton component and defines a button that, when pressed, logs the poll ID and message ID to the console. The onPress prop receives the message and poll objects. It requires an `option` object as prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VoteButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <VoteButton\n    option={option}\n    onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Block User Message Action - TSX\nDESCRIPTION: This code shows how to add a custom message action to block a user within the `Channel` component. The `messageActions` prop allows you to customize actions available for each message. This example adds an action to block the user who sent the message. `dismissOverlay` is used to close the message actions overlay after a successful block.  Dependencies include `Channel` and `messageActions` from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/blocking-users.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, messageActions } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <Channel\n      channel={channel}\n      messageActions={params => {\n        const { dismissOverlay, message } = params;\n        const actions = messageActions({ ...params });\n        if (actions) {\n          actions.push({\n            action: async () => {\n              try {\n                await chatClient.blockUser(message.user?.id || '');\n                dismissOverlay();\n              } catch (error) {\n                console.log('Error blocking user:', error);\n              }\n            },\n            actionType: 'block-user',\n            title: 'Block User',\n          });\n          return actions;\n        } else {\n          return [];\n        }\n      }}\n    >\n      {/* Other components here  */}\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing AttachButton component (JSX)\nDESCRIPTION: This code snippet demonstrates how to customize the `AttachButton` component itself. It creates a `CustomAttachButton` component that wraps the original `AttachButton` and overrides its `onPress` handler with custom logic.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/native-image-picker.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AttachButton } from 'stream-chat-react-native';\n\nconst CustomAttachButton = props => {\n  const { onPress } = props;\n\n  const handlePress = async () => {\n    // Your custom logic here\n  };\n\n  return <AttachButton onPress={handlePress} />;\n};\n\nconst App = () => {\n  return <Channel channel={channel} AttachButton={CustomAttachButton} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageContext with useMessageContext hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume the MessageContext using the useMessageContext hook provided by the stream-chat-react-native library. It shows importing the hook and accessing values such as isMyMessage, message, and files.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/message-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageContext } from 'stream-chat-react-native';\n\nconst { isMyMessage, message, files } = useMessageContext();\n```\n\n----------------------------------------\n\nTITLE: Removing Message from Local Channel State\nDESCRIPTION: This function is used to remove a message from the local channel state. It is important to note that this function only updates the local state and does not call the API to delete the message on the server. For deleting the message on the server, use `channel.deleteMessage`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/messages_context.mdx#_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client - Typescript\nDESCRIPTION: This snippet demonstrates how to initialize a Stream Chat client instance using your API key.  The StreamChat class is imported from the 'stream-chat' package. The getInstance method creates and returns a singleton instance of the client, initialized with your provided API key. This client is then used to interact with Stream's chat services.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Custom Message Action to Block User\nDESCRIPTION: This code snippet illustrates how to add a custom message action to block a user within the Stream Chat React Native `Channel` component. It uses the `messageActions` prop to inject a new action that calls `chatClient.blockUser` when triggered.  It handles potential errors during the blocking process and dismisses the overlay after the action is performed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/blocking-users.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, messageActions } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <Channel\n      channel={channel}\n      messageActions={params => {\n        const { dismissOverlay, message } = params;\n        const actions = messageActions({ ...params });\n        if (actions) {\n          actions.push({\n            action: async () => {\n              try {\n                await chatClient.blockUser(message.user?.id || '');\n                dismissOverlay();\n              } catch (error) {\n                console.log('Error blocking user:', error);\n              }\n            },\n            actionType: 'block-user',\n            title: 'Block User',\n          });\n          return actions;\n        } else {\n          return [];\n        }\n      }}\n    >\n      {/* Other components here  */}\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio Recording in Channel Component - React Native\nDESCRIPTION: This code snippet shows how to enable audio recording within the `Channel` component of the Stream Chat React Native SDK. By setting the `audioRecordingEnabled` prop to true, the `MessageInput` UI will render a `StartRecordingAudioButton`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/audio-messages-support.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel audioRecordingEnabled />\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Members List - Typescript\nDESCRIPTION: This code snippet shows how to create a Stream Chat channel using a list of members. The `client.channel` method is called with the channel type ('messaging') and an object containing the members array and custom data (channel name).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel('messaging', {\n  members: ['jlahey', 'rlafleur'],\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Generating Google Maps URL\nDESCRIPTION: This JavaScript function generates a URL that opens Google Maps with the specified latitude and longitude.  It uses the `Linking` module from React Native to open the URL in the Google Maps application if it's installed, or logs an error if it can't.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst goToGoogleMaps = (lat, long) => {\n  const url = `https://www.google.com/maps/search/?api=1&query=${lat},${long}`;\n\n  Linking.canOpenURL(url).then(supported => {\n    if (supported) {\n      Linking.openURL(url);\n    } else {\n      console.log(`Don't know how to open URI: ${url}`);\n    }\n  });\n};\n\n```\n\n----------------------------------------\n\nTITLE: Setting Additional TextInput Props in Channel - JSX\nDESCRIPTION: This code snippet shows how to provide additional props to the underlying React Native TextInput component used within the Channel component. It utilizes the `additionalTextInputProps` prop to pass a `selectionColor` style. It uses `useMemo` to create the props object for performance optimization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst additionalTextInputProps = useMemo(() => {\n  selectionColor: 'pink';\n});\n\n// Render UI part\n<Channel channel={channel} additionalTextInputProps={additionalTextInputProps}>\n  ...\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Channel with Stream Chat\nDESCRIPTION: This example demonstrates the basic usage of the Channel component with Stream Chat in React Native.  It initializes a StreamChat client, creates a channel, and then renders the Channel component with MessageList and MessageInput. It showcases how to integrate Stream Chat into a React Native application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/channel.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Channel, Chat, MessageInput, MessageList, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState();\n\n  useEffect(() => {\n    const createAndWatchChannel = async () => {\n      const newChannel = client.channel('messaging', 'channel_id');\n      await newChannel.watch();\n      setChannel(newChannel);\n    };\n\n    createAndWatchChannel();\n  }, []);\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <MessageList />\n          <MessageInput />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Local Types for Stream Chat Generics (TSX)\nDESCRIPTION: This code defines the structure for local types that map to stream chat entities. These types allow the user to have full type safety when interacting with Stream Chat entities. This example shows basic structures that can be applied to your application's needs.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/typescript.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalAttachmentType = {\n  file_size?: number;\n  mime_type?: string;\n};\ntype LocalChannelType = Record<string, unknown>;\ntype LocalCommandType = string;\ntype LocalEventType = Record<string, unknown>;\ntype LocalMessageType = Record<string, unknown>;\ntype LocalReactionType = Record<string, unknown>;\ntype LocalUserType = {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Deleted Message Visibility in Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates how to use the `deletedMessagesVisibilityType` prop in the `Channel` component to control the visibility of deleted messages.  It shows an example where deleted messages are only visible to the sender.  The `Channel` component and the `deletedMessagesVisibilityType` prop are expected to be available from the Stream Chat React Native library.  It is essential to ensure that any values assigned to `deletedMessagesVisibilityType` are valid options recognized by the Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\n<Channel\n  ...\n  deletedMessagesVisibilityType=\"sender\"\n>\n```\n\n----------------------------------------\n\nTITLE: Integrating Screen Component with Navigation\nDESCRIPTION: This snippet illustrates how to integrate a screen component (e.g., `Screen` from the previous snippet) within a React Navigation stack. It uses `NavigationContainer`, `OverlayProvider`, and `createStackNavigator` to create a navigation setup. This example assumes `Screen` is defined in a separate file. `StreamChat.getInstance` should only be called once, and the client passed down as a prop to all screens.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { OverlayProvider } from 'stream-chat-react-native';\nimport { Screen } from './Screen';\n\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const App = () => (\n  <NavigationContainer>\n    <OverlayProvider>\n      <Stack.Navigator>\n        <Stack.Screen component={Screen} name='home' />\n      </Stack.Navigator>\n    </OverlayProvider>\n  </NavigationContainer>\n);\n```\n\n----------------------------------------\n\nTITLE: Connecting a User to Stream Chat - Typescript\nDESCRIPTION: This snippet shows how to connect a user to the Stream Chat API using the `connectUser` method.  It requires a user object (containing at least an `id`) and a `user_token` obtained from your backend.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'testUser',\n    name: 'Test User',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Reply Header in MessageInput - React Native\nDESCRIPTION: This snippet demonstrates how to create a custom reply state header using the Channel component and the InputReplyStateHeader prop. It uses the useMessageInputContext hook to access functions for clearing the quoted message state and resetting the input field.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputReplyStateHeader = () => {\n  const { clearQuotedMessageState, resetInput } = useMessageInputContext();\n  return (\n    <View>\n      <Text>Reply Header</Text>\n      <Button\n        onPress={() => {\n          clearQuotedMessageState();\n          resetInput();\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputReplyStateHeader={CustomInputReplyStateHeader}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Adding MessageList to Channel in React Native\nDESCRIPTION: This code snippet demonstrates how to integrate the MessageList component within the Channel component.  It assumes that a Channel instance is already selected and stored in state. The MessageList will automatically display messages from the selected channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel}>\n            <MessageList />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Blocking a User with Stream Chat - TSX\nDESCRIPTION: This code snippet demonstrates how to block a user using the `blockUser` method of the Stream Chat client. It takes the user ID of the user to be blocked as input. The code is wrapped in a try-catch block to handle potential errors during the blocking process. The client must be connected before calling `blockUser`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/blocking-users.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nconst chatClient = StreamChat.getInstance('your api key');\n\n// Note this has to be done after the client connection(`client.connectUser`) is established.\nconst blockUser = async (userId: string) => {\n  try {\n    await chatClient.blockUser(userId);\n  } catch (err) {\n    console.log('Error blocking user:', err);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Custom calendar formatting with i18n JSON - JS\nDESCRIPTION: This JavaScript snippet demonstrates the `calendarFormats` object used to customize calendar formatting.  The example showcases how to format date and time based on relative time differences (yesterday, last week, today, etc.).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/date-time-formatting.mdx#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  lastDay: '[gestern um] LT',\n  lastWeek: '[letzten] dddd [um] LT',\n  nextDay: '[morgen um] LT',\n  nextWeek: 'dddd [um] LT',\n  sameDay: '[heute um] LT',\n  sameElse: 'L',\n}\n```\n\n----------------------------------------\n\nTITLE: Using defaultHandlers.quotedReply onLongPressMessage\nDESCRIPTION: This snippet demonstrates how to use the `defaultHandlers.quotedReply` function within the `onLongPressMessage` handler of a `Channel` component in Stream Chat React Native. This allows users to quickly reply to a message by long-pressing on it.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/object-types/message_pressable_handler_payload.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel onLongPressMessage={({ defaultHandlers }) => defaultHandlers.quotedReply()}\n```\n\n----------------------------------------\n\nTITLE: Disabling Sticky Date Header and Inline Date Separator - React Native\nDESCRIPTION: This code snippet shows how to disable the sticky date header and inline date separator in the MessageList component. By setting the hideDateSeparators and hideStickyDateHeader props to true on the Channel component, you can reduce the computation and rendering overhead associated with these features, particularly in channels with a large number of messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/performance.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel hideDateSeparators={true} hideStickyDateHeader={true} />\n```\n\n----------------------------------------\n\nTITLE: Integrating Custom Components into the Channel - TypeScript\nDESCRIPTION: This code snippet demonstrates how to integrate the custom `InputButtons` and `Card` components into the Stream Chat `Channel` component. It also shows how to use the `onPressMessage` and `isAttachmentEqual` functions. These props enable the live location sharing feature within the chat interface. The `keyboardVerticalOffset` is also used.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel } from 'stream-chat-react-native';\nimport InputButtons from './InputButtons';\nimport Card from './Card';\n\n<\n  channel={channel}\n  InputButtons={InputButtons}\n  Card={Card}\n  keyboardVerticalOffset={headerHeight}\n  onPressMessage={onPressMessage}\n  isAttachmentEqual={isAttachmentEqual}\n>\n  {/* The underlying components */}\n;\n\n```\n\n----------------------------------------\n\nTITLE: Override Update Message Request - React Native\nDESCRIPTION: This code snippet demonstrates how to override the update message request in Stream Chat React Native. The `doUpdateMessageRequest` function allows you to modify the message object before updating it. It receives the channelId and messageObject, increments a counter, and returns a Promise equivalent to `client.updateMessage`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/channel.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst doUpdateMessageRequest = (channelId, messageObject) => {\n  const numberOfUpdates = (messageObject.numberOfUpdates ?? 0) + 1;\n  const messageToSend = { ...messageObject, numberOfUpdates };\n  return client.updateMessage(messageToSend);\n};\n```\n\n----------------------------------------\n\nTITLE: Filtering Channels by Members - Stream Chat - TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a filter object to query channels where users 'vishal' or 'jaap' are members.  It defines a filter object with the 'type' and 'members' properties. The 'members' property uses the '$in' operator to specify an array of user IDs to match.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/channel-list/props/filters.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst filter = {\n  type: 'messaging',\n  members: {\n    $in: ['vishal', 'jaap'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Override Send Message Request - React Native\nDESCRIPTION: This example demonstrates how to override the default send message request in Stream Chat React Native. This allows you to modify the message object before sending it to the server. A promise equivalent to `client.sendMessage` must be returned.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/channel.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst doSendMessageRequest = (channelId, messageObject) => {\n  if (/** Some custom logic here */) {\n    messageObject.isSpecial = true;\n  }\n  return channel.sendMessage(messageObject);\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageReplies Component\nDESCRIPTION: This snippet renders the MessageReplies component, responsible for displaying the replies to a particular message. It's a React component that receives props from the Channel component to customize the display of the replies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageReplies />\n```\n\n----------------------------------------\n\nTITLE: Basic Thread Component Usage - React Native\nDESCRIPTION: This snippet shows the basic usage of the Thread component within a React Native application using Stream Chat. It demonstrates how to embed the Thread component inside the Channel and Chat components, passing the necessary client and channel props. It also demonstrates how to use OverlayProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/thread.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider>\n  <Chat client={client}>\n    <Channel channel={channel} thread={messageId}>\n      <Thread />\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Handling Message Taps for Location Details - TypeScript\nDESCRIPTION: This code defines a function `onPressMessage` that handles taps on messages within the chat. When a user taps a message with a location attachment, it navigates to a 'MapDetail' screen, passing the message ID, latitude, longitude, and ended_at as parameters. This allows users to view the location details on a dedicated map screen. The code also handles default message tap behavior using the defaultHandler function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst onPressMessage: NonNullable<\n  React.ComponentProps<typeof Channel<StreamChatGenerics>>['onPressMessage']\n> = payload => {\n  const { message, defaultHandler, emitter } = payload;\n  if (emitter === 'messageContent') {\n    if (message?.attachments?.[0]?.type === 'location') {\n      // here we use react-navigation to define screens\n      // and we pass the initial data to the screen\n      navigation.navigate('MapDetail', {\n        messageId: message.id,\n        latitude: message.attachments[0].latitude!,\n        longitude: message.attachments[0].longitude!,\n        ended_at: message.attachments[0].ended_at,\n      });\n    }\n  }\n  defaultHandler?.();\n};\n```\n\n----------------------------------------\n\nTITLE: ChannelScreen Component with Context - TSX\nDESCRIPTION: This component renders the main Channel screen. It utilizes context to access the current channel and thread. The onThreadSelect handler is used to set the thread in the context and navigate to the ThreadScreen. The useAppChannel and useAppThread hooks are assumed to provide the channel and thread context, respectively.  Requires navigation prop to be available.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/navigation.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ChannelScreen = () => {\n  const { channel } = useAppChannel();\n  const { setThread, thread } = useAppThread();\n\n  return (\n    <Channel channel={channel} thread={thread}>\n      <MessageList\n        onThreadSelect={selectedThread => {\n          setThread(selectedThread);\n          navigation.navigate('ThreadScreen');\n        }}\n      />\n      <MessageInput />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Sub-Components - TSX\nDESCRIPTION: Demonstrates how to customize specific parts of the MessageSimple component by providing custom UI components as props to the Channel component. This allows for targeted customization of elements like the avatar or text. Requires `Channel` component from `stream-chat-react-native`. `CustomAvatarComponent` and `CustomTextComponent` are assumed to be defined elsewhere.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  MessageAvatar={CustomAvatarComponent}\n  MessageText={CustomTextComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Providing Stream Chat Client to UI - TSX\nDESCRIPTION: This snippet illustrates how to provide the Stream Chat client instance to the `Chat` component for UI integration.  The `client` prop of the `Chat` component is used to pass the client instance. This allows the UI components to interact with the Stream Chat API.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Streami18n Instance - Typescript\nDESCRIPTION: This snippet demonstrates how to create a new instance of the Streami18n class.  Streami18n is used for providing static translations for React Native components within the Stream Chat SDK.  The default language is English if no options are provided.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst streami18n = new Streami18n();\n```\n\n----------------------------------------\n\nTITLE: Overriding Poll Theme - React Native\nDESCRIPTION: This code defines a custom theme to change the background color of polls in Stream Chat React Native. It imports ThemeProvider from 'stream-chat-react-native' and defines a myTheme object that overrides the poll.message.container.backgroundColor property. This theme is then applied to the ThemeProvider wrapping the chat components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-next-line\n  ThemeProvider,\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\n// highlight-start\nconst myTheme: DeepPartial<Theme> = {\n  poll: {\n    message: {\n      container: {\n        backgroundColor: 'pink',\n      },\n    },\n  },\n};\n// highlight-end\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst ChannelScreen = () => {\n  const navigation = useNavigation();\n  return (\n    // highlight-next-line\n    <ThemeProvider style={myTheme}>\n      <OverlayProvider>\n        <Chat client={client}>\n          <Channel\n            channel={channel}\n            PollContent={MyPollContent}\n            openPollCreationDialog={({ sendMessage }) => navigation.navigate('CreatePollScreen', { sendMessage })}\n          >\n            <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n              <ChannelStack.Screen\n                name={'ChannelMessageList'}\n                options={{ headerShown: false }}\n                component={ChannelMessageList}\n              />\n              <ChannelStack.Screen\n                name={'PollResultsScreen'}\n                options={{ headerShown: false }}\n                component={PollResultsScreen}\n              />\n              <ChannelStack.Group screenOptions={{ presentation: 'modal' }}>\n                <ChannelStack.Screen\n                  name={'CreatePollScreen'}\n                  options={{ headerShown: false }}\n                  component={MyCreatePollContent}\n                />\n              </ChannelStack.Group>\n            </ChannelStack.Navigator>\n          </Channel>\n        </Chat>\n      </OverlayProvider>\n      // highlight-next-line\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using useStateStore Hook in React Native\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `useStateStore` hook from `stream-chat-react-native` to access and subscribe to the reactive state of threads in a React Native component. It uses a selector to extract the `threads` property from the ThreadManagerState. It imports necessary modules, defines a selector, and uses the `useStateStore` hook to access `threads` from the `client.threads.state` object.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useStateStore } from 'stream-chat-react-native';\nimport type { ThreadManagerState } from 'stream-chat';\n\nconst selector = (nextValue: ThreadManagerState) => ({ threads: nextValue.threads }) as const;\n\nconst CustomThreadList = () => {\n  const { client } = useChatContext();\n  const { threads } = useStateStore(client.threads.state, selector);\n\n  return (\n    <View>\n      {threads.map(thread => (\n        <Text key={thread.id}>{thread.id}</Text>\n      ))}\n    </View>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: ThreadScreen Component with Context - TSX\nDESCRIPTION: This component renders the Thread screen. It utilizes context to access the current channel and thread, and provides an onThreadDismount handler to clear the thread when navigating away from the Thread screen. The useAppChannel and useAppThread hooks are assumed to provide the channel and thread context, respectively.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/navigation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ThreadScreen = () => {\n  const { channel } = useAppChannel();\n  const { setThread, thread } = useAppThread();\n\n  return (\n    <Channel channel={channel} thread={thread} threadList>\n      <Thread onThreadDismount={() => setThread(undefined)} />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Sorting Channel List - Typescript\nDESCRIPTION: Defines a sort object to sort channel list by the 'last_updated' field in descending order. The last_updated field could be a built-in or custom field. For optimal performance, the sort object should be static or memoized.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/channel-list/props/sort.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sort = { last_updated: -1 };\n```\n\n----------------------------------------\n\nTITLE: Replacing AttachmentPicker Button - React Native (TSX)\nDESCRIPTION: This snippet demonstrates how to replace the default AttachmentPicker with a custom AttachButton component.  It defines a CustomAttachButton that overrides the default onPress handler. It requires the AttachButton and Channel components from stream-chat-react-native.  Clicking the custom button triggers a custom action, in this case onPressHandler.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel } from 'stream-chat-react-native';\n\nconst CustomAttachButton = () => {\n  const onPressHandler = () => {\n    // Custom handling of onPress action on AttachButton\n  };\n\n  return <AttachButton handleOnPress={onPressHandler} />;\n};\n\n<Channel AttachButton={CustomAttachButton} />;\n```\n\n----------------------------------------\n\nTITLE: Input Button Component for Location Sharing in TypeScript\nDESCRIPTION: This code defines a React Native component for adding a 'Share Live Location' button next to the input box in a Stream Chat channel. When pressed, it fetches the user's current location coordinates using react-native-community/geolocation, sends a message with the location, and starts watching for live location updates using the useLiveLocationContext hook. It uses stream-chat-react-native components for UI elements and context management. Dependencies include React, react-native, stream-chat-react-native, react-native-svg, and @react-native-community/geolocation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport {Pressable, StyleSheet} from 'react-native';\nimport {\n  Channel,\n  useChannelContext,\n  InputButtons as DefaultInputButtons,\n  useTheme,\n} from 'stream-chat-react-native';\nimport Svg, {Path} from 'react-native-svg';\nimport Geolocation from '@react-native-community/geolocation';\nimport {useLiveLocationContext} from './LiveLocationContext';\n\n// Icon for \"Share Location\" button, next to input box.\nconst ShareLocationIcon = () => {\n  const {\n    theme: {\n      colors: {grey},\n    },\n  } = useTheme();\n  return (\n    <Svg width={28} height={28} viewBox=\"0 0 24 24\" fill=\"none\">\n      <Path\n        d=\"M12 12c-1.654 0-3-1.345-3-3 0-1.654 1.346-3 3-3s3 1.346 3 3c0 1.655-1.346 3-3 3zm0-4a1.001 1.001 0 101 1c0-.551-.449-1-1-1z\"\n        fill={grey}\n      />\n      <Path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M12 22s7-5.455 7-12.727C19 5.636 16.667 2 12 2S5 5.636 5 9.273C5 16.545 12 22 12 22zm1.915-4.857C15.541 15.032 17 12.277 17 9.273c0-1.412-.456-2.75-1.27-3.7C14.953 4.664 13.763 4 12 4s-2.953.664-3.73 1.573C7.456 6.523 7 7.86 7 9.273c0 3.004 1.459 5.759 3.085 7.87.678.88 1.358 1.614 1.915 2.166a21.689 21.689 0 001.915-2.166zm-.683 3.281s0 .001 0 0z\"\n        fill={grey}\n      />\n    </Svg>\n  );\n};\n\nconst InputButtons: NonNullable<\n  React.ComponentProps<typeof Channel>['InputButtons']\n> = props => {\n  const {channel: currentChannel} = useChannelContext();\n  const {startLiveLocation} = useLiveLocationContext();\n\n  const sendLiveLocation = async () => {\n    Geolocation.getCurrentPosition(\n      async position => {\n        // create message with initial location\n        const response = await currentChannel.sendMessage({\n          attachments: [\n            {\n              type: 'location',\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n            },\n          ],\n        });\n        // then start watching for live location\n        startLiveLocation(response.message.id);\n      },\n      error => {\n        console.error('getCurrentPosition', error);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 20000,\n        maximumAge: 1000,\n      },\n    );\n  };\n\n  return (\n    <>\n      <DefaultInputButtons {...props} hasCommands={false} />\n      <Pressable style={styles.liveLocationButton} onPress={sendLiveLocation}>\n        <ShareLocationIcon />\n      </Pressable>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  liveLocationButton: {\n    paddingLeft: 5,\n  },\n});\n\nexport default InputButtons;\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated Babel Plugin\nDESCRIPTION: This JavaScript code shows how to add the `react-native-reanimated/plugin` to the project's Babel configuration file (`babel.config.js`). This plugin is necessary for Reanimated 2 to function correctly, enabling optimized animations and gesture handling. The plugin must be listed last in the plugins array to avoid conflicts with other Babel transforms.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_18\n\nLANGUAGE: js\nCODE:\n```\nmodule.exports = {\n      ...\n      plugins: [\n          ...\n          'react-native-reanimated/plugin',\n      ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Handling User Interactions with Notifications - React Native\nDESCRIPTION: This code snippet demonstrates how to handle user interactions with background notifications in a React Native application. It uses React Navigation to navigate to a specific channel screen when the user presses a notification. It utilizes `notifee.onBackgroundEvent` for Android and `messaging().onNotificationOpenedApp` and `messaging().getInitialNotification` for iOS to detect when the app is opened by a notification.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport messaging from '@react-native-firebase/messaging';\nimport { NavigationContainer, NavigationContainerRef } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\nconst navigationContainerRef = React.createRef<NavigationContainerRef>();\n\nnotifee.onBackgroundEvent(async ({ detail, type }) => {\n  if (type === EventType.PRESS) {\n    // user press on notification detected while app was on background on Android\n    const channelId = detail.notification?.data?.channel_id;\n    if (channelId) {\n       navigationContainerRef.current?.navigate('ChannelScreen', { channelId });\n    }\n    await Promise.resolve();\n  }\n});\n\nfunction App() {\n  const [initialChannelId, setInitialChannelId] = useState<string>()\n  useEffect(() => {\n    const unsubscribeOnNotificationOpen = messaging().onNotificationOpenedApp((remoteMessage) => {\n      // Notification caused app to open from background state on iOS\n      const channelId = remoteMessage.data?.channel_id;\n      // The navigation logic, to navigate to relevant channel screen.\n      if (channelId) {\n        navigationContainerRef.current?.navigate('ChannelScreen', { channelId });\n      }\n    });\n\n    notifee.getInitialNotification().then(initialNotification => {\n      if (initialNotification) {\n        // Notification caused app to open from quit state on Android\n        const channelId = initialNotification.notification.data?.channel_id;\n        // Start the app with the relevant channel screen.\n        setInitialChannelId(channelId)\n      }\n    });\n\n    messaging()\n      .getInitialNotification()\n      .then(remoteMessage => {\n        if (remoteMessage) {\n          // Notification caused app to open from quit state on iOS\n          const channelId = remoteMessage.data?.channel_id;\n          // Start the app with the relevant channel screen.\n          setInitialChannelId(channelId)\n        }\n    });\n\n    return () => {\n      unsubscribeOnNotificationOpen();\n    };\n  }, []);\n\n  return (\n    <NavigationContainer ref={navigationContainerRef}>\n      <Stack.Navigator initialRouteName={initialChannelId ? \"ChannelScreen\" : \"Home\"}>\n        <Stack.Screen name='Home' component={HomeScreen} />\n        <Stack.Screen name='ChannelListScreen' component={ChannelListScreen} />\n        <Stack.Screen name='ChannelScreen'\n          component={ChannelScreen}\n          initialParams={initialChannelId ? { channelId: initialChannelId } : undefined}\n        />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring resizableCDNHosts with ChatConfigProvider - TSX\nDESCRIPTION: This code snippet demonstrates how to configure the `resizableCDNHosts` option using the `ChatConfigProvider` component. It wraps the root of the Chat application and provides a list of CDN hosts to use for image resizing. If no value is provided, the default CDN host is '.stream-io-cdn.com'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/global_config.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat, ChatConfigProvider, OverlayProvider } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <ChatConfigProvider\n      value={{\n        resizableCDNHosts: ['cdn.example.com'],\n      }}\n    >\n      <OverlayProvider>\n        <Chat client={client}>\n          <ChannelList />\n        </Chat>\n      </OverlayProvider>\n    </ChatConfigProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Checking Message Type and Status for actionsEnabled - React Native\nDESCRIPTION: This snippet shows the condition that determines when actions are enabled for a message. It checks if the message type is 'regular' and the message status is 'received'. This boolean value determines whether actions are enabled.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/message-context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmessage.type === 'regular' && message.status === 'received';\n```\n\n----------------------------------------\n\nTITLE: Defining Default Types for Stream Chat Generics (TSX)\nDESCRIPTION: This code snippet defines default TypeScript types for the Stream Chat generics, which include attachmentType, channelType, commandType, eventType, messageType, reactionType, and userType. These defaults can be extended to incorporate custom data structures, providing a base for type-safe interactions with the Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/typescript.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultAttachmentType = Record<string, unknown>;\ntype DefaultChannelType = Record<string, unknown> & {\n  image?: string;\n};\ntype DefaultCommandType = string & {};\ntype DefaultEventType = Record<string, unknown>;\ntype DefaultMessageType = Record<string, unknown>;\ntype DefaultReactionType = Record<string, unknown>;\ntype DefaultUserType = Record<string, unknown> & {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming PaginatedMessageListContext with usePaginatedMessageListContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the `PaginatedMessageListContext` using the `usePaginatedMessageListContext` hook in a React functional component.  It imports the hook from `stream-chat-react-native` and retrieves the `loadingMore`, `loadMoreRecent`, and `messages` properties.  This is an alternative to using `useContext` directly.  These properties provide information about the message loading state and the list of messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/paginated-message-list-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePaginatedMessageListContext } from 'stream-chat-react-native';\n\nconst { loadingMore, loadMoreRecent, messages } = usePaginatedMessageListContext();\n```\n\n----------------------------------------\n\nTITLE: Navigation Stack Implementation in TypeScript\nDESCRIPTION: This code snippet demonstrates how to create a navigation stack using `react-native-screens/native-stack` and `react-navigation/native`. It initializes a stack navigator, defines routes for 'Channel' and 'WallpaperOverviewScreen', and configures options for the 'Channel' screen. The application is wrapped in `SafeAreaProvider`, `ThemeProvider`, and `NavigationContainer` for proper styling and navigation context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-background.mdx#_snippet_5\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { createNativeStackNavigator } from 'react-native-screens/native-stack';\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst Stack = createNativeStackNavigator();\n\nexport default () => {\n  return (\n    <SafeAreaProvider>\n      <ThemeProvider style={theme}>\n        <NavigationContainer>\n          <Stack.Navigator initialRouteName='Channel'>\n            <Stack.Screen component={ChannelScreen} name='Channel' options={noHeaderOptions} />\n            <Stack.Screen component={WallpaperOverviewScreen} name='WallpaperOverviewScreen' />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </ThemeProvider>\n    </SafeAreaProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating Channel Background View Component - TSX\nDESCRIPTION: This component handles rendering a custom background for a channel by retrieving the image URI from a key-value store using react-native-mmkv. It uses a default background if no preference is set for the channel.  It expects a channelId as prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_background_customization.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ViewProps } from 'react-native';\nimport { useMMKVObject } from 'react-native-mmkv';\n\ntype ChannelPreferences = {\n  imageUri: string;\n};\n\nconst DEFAULT_BACKGROUND_URI = 'https://i.redd.it/3jfjc53fsyb61.jpg';\n\nconst ChannelBackgroundView = ({\n  channelId,\n  ...props\n}: {\n  channelId: string;\n} & ViewProps) => {\n  const [channelPreferences] = useMMKVObject<ChannelPreferences>(channelId);\n  const uri = channelPreferences?.imageUri || DEFAULT_BACKGROUND_URI;\n\n  return <ImageBackground {...props} source={{ uri }} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User - TypeScript\nDESCRIPTION: Disconnects the current user from the Stream Chat service. The `disconnectUser` function is called on the `client` instance. This function is asynchronous and should be awaited.  It clears the user's connection and any associated resources. Requires the `stream-chat` package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Component\nDESCRIPTION: This snippet configures the Channel component to wrap the stream-chat-react-native components being used. It utilizes a state variable 'channel' to determine whether to display the Channel component or the ChannelList. The onSelect prop on ChannelList is used to update the channel state when a channel is selected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? <Channel channel={channel}>{/** App components */}</Channel> : <ChannelList onSelect={setChannel} />}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Attach Button Component - React\nDESCRIPTION: This code snippet demonstrates how to fully customize the AttachButton component itself. A new component `CustomAttachButton` is created to override the default `AttachButton` component, adding custom logic within the component.  Requires importing AttachButton from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/native-image-picker.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AttachButton } from 'stream-chat-react-native';\n\nconst CustomAttachButton = props => {\n  const { onPress } = props;\n\n  const handlePress = async () => {\n    // Your custom logic here\n  };\n\n  return <AttachButton onPress={handlePress} />;\n};\n\nconst App = () => {\n  return <Channel channel={channel} AttachButton={CustomAttachButton} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating ChannelBackgroundView into ChannelScreen - React Native\nDESCRIPTION: This snippet demonstrates how to replace the static `ImageBackground` in `ChannelScreen` with the dynamic `ChannelBackgroundView`.  The `channelId` is passed to the `ChannelBackgroundView` so it can retrieve channel-specific preferences. It depends on the `ChannelBackgroundView` defined previously.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-background.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst ChannelScreen = ({ channel }) => {\n  return (\n    <ThemeProvider style={theme}>\n      <Channel channel={channel}>\n        <ChannelBackgroundView channelId={channel?.id} style={{ flex: 1 }}>\n          <MessageList />\n          <MessageInput />\n        </ChannelBackgroundView>\n      </Channel>\n    </ThemeProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Custom Message Component Implementation - TSX\nDESCRIPTION: Demonstrates how to replace the default Message component with a custom implementation within the Stream Chat React Native SDK. It shows how to pass the CustomMessageComponent to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider bottomInset={bottom} i18nInstance={streami18n}>\n  <Chat client={chatClient} i18nInstance={streami18n}>\n    <Channel channel={channel} keyboardVerticalOffset={headerHeight} Message={CustomMessageComponent}>\n      <View style={{ flex: 1 }}>\n        <MessageList />\n        <MessageInput />\n      </View>\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Member Record Type in TypeScript\nDESCRIPTION: This code snippet defines the type structure for channel members within the Stream Chat React Native application. It represents a record where the key is the userId (string), and the value is an object containing various properties related to the user's membership in the channel. The type includes fields for banned status, creation timestamps, invitation statuses, moderator status, role, shadow banned status, update timestamps, user information (of type UserResponse with UserType), and the userId.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/channel-context/members.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nRecord<\n  string, // userId\n  {\n    banned?: boolean;\n    created_at?: string;\n    invite_accepted_at?: string;\n    invite_rejected_at?: string;\n    invited?: boolean;\n    is_moderator?: boolean;\n    role?: string;\n    shadow_banned?: boolean;\n    updated_at?: string;\n    user?: UserResponse<UserType>;\n    user_id?: string;\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User from Stream Chat - TypeScript\nDESCRIPTION: This snippet demonstrates how to disconnect a user from the Stream Chat service. It calls the `disconnectUser` method on the `client` instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_9\n\nLANGUAGE: ts\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client (getInstance)\nDESCRIPTION: This snippet demonstrates how to instantiate a Stream Chat client using `StreamChat.getInstance()` with an API key.  This method ensures a single instance of the client, preventing multiple WebSocket connections. Available since stream-chat@2.12.0.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Reply Header - Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom reply state header component for the Stream Chat React Native MessageInput. It uses the `useMessageInputContext` hook to access functions like `clearQuotedMessageState` and `resetInput`. The custom header includes a \"Close\" button that clears the quoted message state and resets the input field. The component is then passed to the `InputReplyStateHeader` prop of the `Channel` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputReplyStateHeader = () => {\n  const { clearQuotedMessageState, resetInput } = useMessageInputContext();\n  return (\n    <View>\n      <Text>Reply Header</Text>\n      <Button\n        onPress={() => {\n          clearQuotedMessageState();\n          resetInput();\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputReplyStateHeader={CustomInputReplyStateHeader}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Import react-native-gesture-handler in App.tsx\nDESCRIPTION: This code snippet shows how to import 'react-native-gesture-handler' at the top of the entry file (usually App.tsx or index.js) as required by the package. It also includes the standard React Native app initialization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/getting_started.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'react-native-gesture-handler';\nimport { AppRegistry } from 'react-native';\n\nimport App from './App';\nimport { name as appName } from './app.json';\n\nAppRegistry.registerComponent(appName, () => App);\n```\n\n----------------------------------------\n\nTITLE: Using OverlayProvider Component - TSX\nDESCRIPTION: This snippet shows how to use the OverlayProvider component. The OverlayProvider is a high-level component that enables features like message interactions on long press and full-screen image viewing. It wraps the application's components, providing context for overlay-related functionalities.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\n\nexport const Screen = () => <OverlayProvider>{/** App components */}</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Avoid Non-Memoized Selectors - Typescript/JSX\nDESCRIPTION: This snippet demonstrates the proper and improper use of selectors within React components using the stream-chat-react-native library.  The first example shows an anti-pattern where a selector is created anew on each render, leading to performance issues.  The subsequent examples showcase the correct usage with a stable selector function defined outside the component or memoized using useCallback.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\n// ❌ not okay\nconst Component1 = () => {\n  const { latestReply } = useStateStore(thread.state, (nextValue: ThreadState) => ({\n    latestReply: nextValue.latestReplies.at(-1),\n  }));\n\n  return <Text>{latestReply.text}</Text>;\n};\n\n// ✅ okay\nconst selector = (nextValue: ThreadState) => ({ latestReply: nextValue.latestReplies.at(-1) });\n\nconst Component2 = () => {\n  const { latestReply } = useStateStore(thread.state, selector);\n\n  return <Text>{latestReply.text}</Text>;\n};\n\n// ✅ also okay\nconst Component3 = ({ userId }: { userId: string }) => {\n  const selector = useCallback(\n    (nextValue: ThreadState) => ({ unreadMessagesCount: nextValue.read[userId].unread_messages }),\n    [userId],\n  );\n\n  const { unreadMessagesCount } = useStateStore(thread.state, selector);\n\n  return <Text>{unreadMessagesCount}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Using Chat Component at Screen Level - TSX\nDESCRIPTION: This snippet shows how to implement the `Chat` component at the screen level instead of the app level. It demonstrates the use of the `Chat` component with the `client` prop set to the initialized Stream Chat client instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\nimport { Screen } from './Screen';\n\nexport const App = () => (\n  <OverlayProvider>\n    <Screen />\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Reconstructing PollResults Screen with Custom Navigation\nDESCRIPTION: This code snippet reconstructs the PollResults screen using Stream Chat React Native components and React Navigation. It imports PollResults and PollModalHeader from the SDK. A PollResultsScreen component is created to display the poll results with a custom header.  The ViewResultsButton is modified to navigate to the new PollResultsScreen, and the PollResultsScreen component is added to the ChannelStack navigator.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  PollContent,\n  // highlight-start\n  PollResults,\n  PollModalHeader,\n  // highlight-end\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      <ViewResultsButton\n        onPress={({ message, poll }) =>\n          navigation.navigate('PollResultsScreen', {\n            message,\n            poll,\n          });\n        }\n      />\n      <EndVoteButton />\n    </>\n  )\n}\n\n// ... rest of the components\n\n// highlight-start\nconst PollResultsScreen = ({\n  route: {\n    params: { message, poll },\n  },\n}) => {\n  const navigation = useNavigation();\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <PollModalHeader title={'RESULTS'} onPress={() => navigation.goBack()} />\n      <PollResults message={message} poll={poll} />\n    </SafeAreaView>\n  );\n};\n// highlight-end\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel} PollContent={MyPollContent}>\n          <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n            <ChannelStack.Screen\n              name={'ChannelMessageList'}\n              options={{ headerShown: false }}\n              component={ChannelMessageList}\n            />\n            <ChannelStack.Screen\n              name={'PollResultsScreen'}\n              options={{ headerShown: false }}\n              // highlight-next-line\n              component={PollResultsScreen}\n            />\n          </ChannelStack.Navigator>\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ImageGalleryContext with useImageGalleryContext hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume ImageGalleryContext using the useImageGalleryContext hook provided by stream-chat-react-native. It imports the hook and extracts the messages and setMessages values. This hook simplifies access to the context and is an alternative to useContext. Requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/image-gallery-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useImageGalleryContext } from 'stream-chat-react-native';\n\nconst { messages, setMessages } = useImageGalleryContext();\n```\n\n----------------------------------------\n\nTITLE: Styling OverlayProvider with Theme Value - TSX\nDESCRIPTION: This snippet shows how to partially override the default styles of components within the `OverlayProvider` using the `value` prop. Specifically, it demonstrates changing the background color of the file container in the `messageSimple` style. The style is passed via the `value` prop, allowing customization of various UI elements.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/overlay-provider.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst theme = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n<OverlayProvider value={{ style: theme }}>...</OverlayProvider>;\n\n```\n\n----------------------------------------\n\nTITLE: Implementing CreatePoll Component in React Native\nDESCRIPTION: This code snippet demonstrates how to implement the CreatePoll component within a React Native application using the stream-chat-react-native library. It showcases the component's integration within an OverlayProvider, Chat, and Channel component hierarchy. The `sendMessage` prop is passed from the MessageInputContext.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/create-poll.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, CreatePoll } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <CreatePoll sendMessage={sendMessage} {...otherOptionalProps} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Message Status Component using useMessageContext (React)\nDESCRIPTION: This code snippet demonstrates how to create a custom `MessageStatus` component in React that leverages the `useMessageContext` hook from Stream Chat React Native SDK. The component extracts the `message` object from the context and renders the `readBy` property as text. It showcases a simple customization example by pulling contextual data and displaying it in a custom UI element.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/contexts.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomMessageStatus = () => {\n  const { message } = useMessageContext();\n  return <Text>{message.readBy}</Text>;\n};\n...\n<Channel MessageStatus={CustomMessageStatus}>\n```\n\n----------------------------------------\n\nTITLE: Update/Upsert Message in Local Channel State - React Native\nDESCRIPTION: This function either updates an existing message or inserts a new message into the local channel state. It's designed for optimistic updates to the message and does not call `channel.sendMessage`. The Channel component uses this for immediate UI updates. This function receives the message to be updated or inserted as an argument.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/messages-context.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Attachment Object (JavaScript)\nDESCRIPTION: This code snippet demonstrates the structure of a message object with attachments. The attachments array contains objects with properties like type, thumb_url, and asset_url. The type property determines which default view is used to render the attachment.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageObject = {\n  id: '12312jh3b1jh2b312',\n  text: 'This is my test message!',\n  attachments: [\n    {\n      type: 'image',\n      thumb_url: '',\n    },\n    {\n      type: 'file',\n      asset_url: '',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using AutoCompleteSuggestionList in Channel - React Native\nDESCRIPTION: This code snippet demonstrates how to integrate the AutoCompleteSuggestionList component into the Channel component in stream-chat-react-native. It shows how to define a custom AutoCompleteSuggestionList component and pass it to the Channel component via the AutoCompleteSuggestionList prop.  The custom component will be used instead of the default suggestion list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/autocomplete-suggestion-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionList } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionListComponent = () => <AutoCompleteSuggestionList />\n\n<Channel AutoCompleteSuggestionList={AutoCompleteSuggestionListComponent} />\n```\n\n----------------------------------------\n\nTITLE: Custom PollAnswersListContent - React Native\nDESCRIPTION: This example demonstrates how to create a custom PollAnswersListContent component and pass it to the PollAnswersList. It showcases using the usePollState and usePollAnswersPagination hooks to access poll data and render a customized list of answers using a FlatList.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-answers-list.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, FlatList } from 'react-native';\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  PollAnswersList,\n  usePollAnswersPagination,\n  usePollState,\n} from 'stream-chat-react-native';\n\n// will only display the first page of answers without loading more\nconst MyPollAnswersListContent = () => {\n  const { name } = usePollState();\n  const { pollAnswers } = usePollAnswersPagination();\n  return (\n    <FlatList\n      ListHeaderComponent={() => <Text>{name}</Text>}\n      data={pollAnswers}\n      renderItem={({ item }) => <Text>{item.answer_text}</Text>}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollAnswersList message={message} poll={poll} PollAnswersListContent={MyPollAnswersListContent} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting TextInput Props - React Native (JSX)\nDESCRIPTION: This snippet shows how to pass additional props to the underlying React Native TextInput component within the Channel.  It uses useMemo to ensure a static reference is passed. `additionalTextInputProps` is an object containing the properties to be applied to the TextInput.  It requires the React Native TextInput component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst additionalTextInputProps = useMemo(() => {\n  selectionColor: 'pink';\n});\n\n// Render UI part\n<Channel channel={channel} additionalTextInputProps={additionalTextInputProps}>\n  ...\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: ThreadList Usage with useIsFocused Hook - TSX\nDESCRIPTION: This example demonstrates how to use the ThreadList component with the `useIsFocused` hook from `@react-navigation/native`. The `isFocused` prop of the `ThreadList` component is set to the return value of `useIsFocused()`, which indicates whether the screen is currently in focus. This allows the `ThreadList` to only update when the screen is visible, improving performance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/threads-context/is-focused.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { useIsFocused } from '@react-navigation/native';\nimport { ThreadList } from 'stream-chat-react-native';\n\nexport const ThreadListScreen = () => {\n  const isFocused = useIsFocused();\n  return <ThreadList isFocused={isFocused} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Providing Stream Chat Client to UI Components - TSX\nDESCRIPTION: This snippet shows how to pass the Stream Chat client instance as a prop to the `Chat` component. This makes the client available to the UI components for internal interactions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Channel Background - Static Image - TSX\nDESCRIPTION: This snippet demonstrates how to set a static background image for a Stream Chat channel by wrapping MessageList and MessageInput components within an ImageBackground component from React Native. It also highlights the need to adjust the theme to accommodate the background.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_background_customization.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, MessageInput, MessageList, ThemeProvider } from 'stream-chat-react-native';\nimport { ImageBackground } from 'react-native';\n\nexport const theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transparent',\n    },\n  },\n};\n\nconst IMAGE_URI =\n  'https://images.unsplash.com/photo-1549125764-91425ca48850?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8NjF8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60';\n\nconst ChannelScreen = ({ channel }) => (\n  <ThemeProvider style={theme}>\n    <Channel channel={channel}>\n      <ImageBackground\n        style={{ flex: 1 }}\n        source={{\n          uri: IMAGE_URI,\n        }}\n      >\n        <MessageList />\n        <MessageInput />\n      </ImageBackground>\n    </Channel>\n  </ThemeProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Applying Theme to OverlayProvider - stream-chat-react-native - JSX\nDESCRIPTION: This snippet illustrates how to apply the custom theme defined earlier to the `OverlayProvider` component.  It imports necessary components, creates a `style` object containing the theme, and passes it as the `value` prop to the `OverlayProvider`. This allows the custom styles to be applied to the Stream Chat UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/theme.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Chat, ChannelList, OverlayProvider } from 'stream-chat-react-native';\n\nconst style = { style: theme };\n\nexport const App = () => (\n  <OverlayProvider value={style}>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Overriding timestampFormatter function with Streami18n - Typescript\nDESCRIPTION: This snippet demonstrates how to override the default `timestampFormatter` function by providing a custom `Streami18n` instance. It creates a new `Streami18n` instance with a custom formatter that converts the timestamp to milliseconds and returns it as a string. The custom `Streami18n` instance is then passed to the `Chat` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/date-time-formatting.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat, Streami18n } from 'stream-chat-react-native';\n\nconst chatClient = 'Your Chat client here';\n\nconst i18n = new Streami18n({\n  formatters: {\n    timestampFormatter: () => (val: string | Date) => {\n      return new Date(val).getTime() + '';\n    },\n  },\n});\n\nexport const ChatApp = ({ apiKey, userId, userToken }) => {\n  return <Chat client={chatClient} i18nInstance={i18n}></Chat>;\n};\n```\n\n----------------------------------------\n\nTITLE: Handling ACTION_PRESS Event in Notifee - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to handle the `ACTION_PRESS` event from Notifee when the user presses on a notification in the background on Android. It extracts the channel ID from the notification data and navigates to the corresponding channel screen using React Navigation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nnotifee.onBackgroundEvent(async ({ detail, type }) => {\n  if (type === EventType.ACTION_PRESS) {\n    // user press on notification detected while app was on background on Android\n    const channelId = detail.notification?.data?.channel_id;\n    if (channelId) {\n      navigationContainerRef.current?.navigate('ChannelScreen', { channelId });\n    }\n    await Promise.resolve();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Defining MessageActionType\nDESCRIPTION: This TypeScript snippet defines the `MessageActionType` which represents the structure of a message action object, including its action handler, action type, title, icon, and title style. It shows the properties required to customize the actions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MessageActionType = {\n  action: () => void;\n  actionType: enum('blockUser', 'copyMessage', 'deleteMessage', 'editMessage', 'flagMessage', 'muteUser', 'pinMessage', 'selectReaction', 'reply', 'retry', 'quotedReply', 'threadReply', 'unpinMessage')\n  title: string;\n  icon?: React.ReactElement;\n  titleStyle?: StyleProp<TextStyle>;\n};\n```\n\n----------------------------------------\n\nTITLE: Channel Screen Component using Context - TypeScript\nDESCRIPTION: This component renders the Channel screen and handles thread selection using the Context API. It utilizes useAppChannel and useAppThread to access channel data and manage the selected thread. When a thread is selected, the setThread function is called to update the thread context, and the user is navigated to the ThreadScreen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/navigation.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ChannelScreen = () => {\n  const { channel } = useAppChannel();\n  const { setThread, thread } = useAppThread();\n\n  return (\n    <Channel channel={channel} thread={thread}>\n      <MessageList\n        onThreadSelect={selectedThread => {\n          setThread(selectedThread);\n          navigation.navigate('ThreadScreen');\n        }}\n      />\n      <MessageInput />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ChatContext with useChatContext hook - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ChatContext using the useChatContext hook provided by the stream-chat-react-native library. It imports the hook and uses it to access the client and isOnline values. Dependencies: React, stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/chat-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client, isOnline } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Consuming OwnCapabilitiesContext with useContext - Typescript\nDESCRIPTION: This code snippet demonstrates how to consume the `OwnCapabilitiesContext` using the `useContext` hook from React. It imports the context and the `useContext` hook, then uses it to extract specific capabilities like `uploadFile`, `updateAnyMessage`, and `deleteAnyMessage`. This allows components to conditionally render UI or execute logic based on the user's permissions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/own-capabilities-context.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from 'react';\nimport { OwnCapabilitiesContext } from 'stream-chat-react-native';\n\nconst { uploadFile, updateAnyMessage, deleteAnyMessage } = useContext(OwnCapabilitiesContext);\n```\n\n----------------------------------------\n\nTITLE: Handling onPressMessage Event in Channel Component - TSX\nDESCRIPTION: This code snippet demonstrates how to handle the `onPressMessage` event within the Stream Chat React Native `<Channel>` component. It shows how to access the `additionalInfo` prop to get specific information based on the event emitter (e.g., user details for text mentions, URL for cards/links, attachment details for file attachments). The code also includes a call to `defaultHandler` to execute the default message press behavior if desired.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel/props/on_press_message.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n    <Channel\n      onPressMessage={({ additionalInfo, defaultHandler, emitter }) => {\n\n          if (emitter === 'textMention') {\n            console.log(additionalInfo?.user);\n            return;\n          }\n\n          if (emitter === 'card' || emitter === 'textLink') {\n            console.log(additionalInfo?.url);\n            return;\n          }\n\n          if (emitter === 'fileAttachment') {\n            console.log(additionalInfo?.attachment);\n            return;\n          }\n\n          defaultHandler?.();\n      }}\n    >\n```\n\n----------------------------------------\n\nTITLE: Using Day.js for DateTime Formatting - Typescript\nDESCRIPTION: This snippet demonstrates how to use Day.js for DateTime formatting in Stream Chat React Native by providing a Dayjs object to the Streami18n constructor. It requires installing Day.js, importing locales and also depends on stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport Dayjs from 'dayjs';\n\nimport 'dayjs/locale/nl';\nimport 'dayjs/locale/it';\n// or if you want to include all locales\nimport 'dayjs/min/locales';\n\nconst i18n = new Streami18n({\n  language: 'nl',\n  DateTimeParser: Dayjs,\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime Format with Dayjs - Typescript\nDESCRIPTION: This snippet demonstrates how to provide Day.js locale configurations while registering the language with Streami18n. This allows customizing the date and time formatting used by the chat components, providing a locale-specific experience. Requires Dayjs.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n =new Streami18n({\n language: 'nl',\n dayjsLocaleConfigForLanguage: {\n   months: [...],\n   monthsShort: [...],\n   calendar: {\n     sameDay: '...'\n   }\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by Members List - TS\nDESCRIPTION: This snippet shows how to create a new channel instance using a list of members via the `client.channel()` method. The backend will auto-generate the channel ID when created in this way. Adding or removing members from this type of channel is disallowed after creation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel(channel_type, {\n    members: ['userOne', 'userTwo']\n    name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Using AutoCompleteSuggestionList in Channel Component - React Native\nDESCRIPTION: This code snippet demonstrates how to integrate the `AutoCompleteSuggestionList` component within the `Channel` component in `stream-chat-react-native`. It shows how to create a custom AutoCompleteSuggestionListComponent and pass it as a prop to the Channel component. This allows for complete customization of the suggestion list's appearance and behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/autocomplete-suggestion-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionList } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionListComponent = () => <AutoCompleteSuggestionList />\n\n<Channel AutoCompleteSuggestionList={AutoCompleteSuggestionListComponent} />\n```\n\n----------------------------------------\n\nTITLE: Override Channel Capabilities - Quote Message - React Native\nDESCRIPTION: This code snippet shows how to disable the 'Reply' action (quotedRepliesEnabled in v3) using the `overrideOwnCapabilities` prop on the `Channel` component in Stream Chat React Native v4.  Setting `quoteMessage` to `false` removes the \"Reply\" action.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    quoteMessage: false\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Retry Sending Failed Message - React Native\nDESCRIPTION: This function is responsible for re-attempting to send a message that previously failed to be sent. It is used to handle scenarios where message delivery was unsuccessful, allowing the user to try again. The function takes a message object as input, representing the message to be resent.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/messages-context.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with new StreamChat - Typescript\nDESCRIPTION: This snippet demonstrates initializing the Stream Chat client using the `new StreamChat()` constructor. While still supported, using `getInstance` is preferred to avoid creating multiple client instances and WebSocket connections.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new StreamChat('api_key');\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Permissions in Info.plist\nDESCRIPTION: This XML snippet demonstrates how to configure necessary permission descriptions in the `Info.plist` file for iOS. This includes descriptions for accessing the photo library, adding photos to the photo library, using the camera, and using the microphone. These descriptions are displayed to the user when the app requests access to these features, explaining why the app needs them.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>$(PRODUCT_NAME) would like access to your photo gallery to share image in a message.</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>$(PRODUCT_NAME) would like to save photos to your photo gallery after downloading from a message.</string>\n<key>NSCameraUsageDescription</key>\n<string>$(PRODUCT_NAME) would like to use your camera to share image in a message.</string>\n<key>NSMicrophoneUsageDescription</key>\n<string>$(PRODUCT_NAME) would like to use your microphone for voice recording.</string>\n```\n\n----------------------------------------\n\nTITLE: Consuming KeyboardContext using useKeyboardContext hook - Typescript\nDESCRIPTION: This snippet showcases how to use the useKeyboardContext hook provided by the stream-chat-react-native library to consume the KeyboardContext. It imports the useKeyboardContext hook and utilizes it to directly access the dismissKeyboard function. This hook simplifies accessing the context values compared to using useContext directly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/keyboard_context.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useKeyboardContext } from 'stream-chat-react-native';\n\nconst { dismissKeyboard } = useKeyboardContext();\n```\n\n----------------------------------------\n\nTITLE: Handle Universal Links - Objective-C++\nDESCRIPTION: This Objective-C++ method in AppDelegate.m or AppDelegate.mm handles Universal Links. It calls `RCTLinkingManager` to process user activities related to Universal Links. This ensures that the application responds correctly when a user opens a Universal Link associated with the app.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/deeplinking.mdx#_snippet_3\n\nLANGUAGE: objective-c++\nCODE:\n```\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Integrating ChannelBackgroundView - TSX\nDESCRIPTION: This snippet demonstrates integrating the ChannelBackgroundView component into the ChannelScreen, replacing the static ImageBackground. It passes the channelId as a prop to the ChannelBackgroundView, allowing it to retrieve and display the user's preferred background image for that specific channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_background_customization.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst ChannelScreen = ({ channel }) => {\n  return (\n    <ThemeProvider style={theme}>\n      <Channel channel={channel}>\n        <ChannelBackgroundView channelId={channel?.id} style={{ flex: 1 }}>\n          <MessageList />\n          <MessageInput />\n        </ChannelBackgroundView>\n      </Channel>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using OverlayProvider - TSX\nDESCRIPTION: This code snippet demonstrates how to use the OverlayProvider component. The OverlayProvider enables UI overlays for features such as long press actions, full-screen image viewing, and attachment pickers. Wrap app components with OverlayProvider to enable these functionalities.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\n\nexport const Screen = () => <OverlayProvider>{/** App components */}</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelsContext with useContext - React\nDESCRIPTION: This code demonstrates how to consume the ChannelsContext using the useContext hook in a React component. It retrieves the channels and reloadList properties from the context, allowing access to channel data and the ability to refresh the channel list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/channels_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChannelsContext } from 'stream-chat-react-native';\n\nconst { channels, reloadList } = useContext(ChannelsContext);\n```\n\n----------------------------------------\n\nTITLE: Integrating LiveLocationContextProvider (TypeScript)\nDESCRIPTION: This TypeScript snippet shows how to integrate the `LiveLocationContextProvider` within the `Chat` component. It ensures that the context is available to all child components that need to access live location sharing functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n    <Chat client={chatClient}>\n      <LiveLocationContextProvider>\n        // ...add your screens here\n      </LiveLocationContextProvider>\n    </Chat>\n```\n\n----------------------------------------\n\nTITLE: Custom onNewMessageNotification Handler - TSX\nDESCRIPTION: This code snippet shows how to customize the behavior when a new message notification is received.  It defines a custom `onNewMessageNotification` function that only adds the channel to the list if it's frozen. It uses the `setChannels` function to update the internal `channels` state and the `client` object to watch the new channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-list.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst filters = {\n  members: { $in: ['vishal'] },\n  frozen: true,\n};\n\nconst customOnNewMessageNotification = async (setChannels, event) => {\n  const eventChannel = event.channel;\n\n  // If the channel is frozen, then don't add it to the list.\n  if (!eventChannel?.id || !eventChannel.frozen) return;\n\n  try {\n    const newChannel = client.channel(eventChannel.type, eventChannel.id);\n    await newChannel.watch();\n    setChannels(channels => [newChannel, ...channels]);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n<ChannelList filters={filters} onNewMessageNotification={customOnNewMessageNotification} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Support in Stream Chat\nDESCRIPTION: This snippet extends the application to include thread support using the Thread component. It manages thread state and uses the onThreadSelect prop of MessageList to select a thread. The threadList prop on the Channel component is used to conditionally render the Thread component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, MessageType, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [thread, setThread] = useState<MessageType | null>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0} thread={thread} threadList={!!thread}>\n            {thread ? (\n              <Thread />\n            ) : (\n              <>\n                <MessageList onThreadSelect={setThread} />\n                <MessageInput />\n              </>\n            )}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageEditedTimestamp Component\nDESCRIPTION: This snippet renders the MessageEditedTimestamp component. This component displays the timestamp of when a message was last edited. It is a React component that receives props from the Channel component, allowing customization of its appearance and behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageEditedTimestamp />\n```\n\n----------------------------------------\n\nTITLE: Adding react-native-reanimated Babel Plugin (JavaScript)\nDESCRIPTION: This JavaScript code snippet demonstrates how to add the `react-native-reanimated/plugin` to the `babel.config.js` file. The plugin must be listed last in the plugins array.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_34\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n  presets: [\n    ... // don't add it here :)\n  ],\n  plugins: [\n    ...\n    // highlight-next-line\n    'react-native-reanimated/plugin',\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Reaction Icon Component - TSX\nDESCRIPTION: This code defines a custom React component (`StreamReaction`) to be used as an icon for a custom reaction.  It leverages `react-native-svg` for scalable vector graphics.  The component accepts `IconProps` and renders an SVG path. The custom reaction is then added to the existing `reactionData` array.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const StreamReaction: React.FC<IconProps> = props => (\n  <RootSvg height={21} width={42} {...props} viewBox='0 0 42 21'>\n    <RootPath\n      d='M26.1491984,6.42806971 L38.9522984,5.52046971 C39.7973984,5.46056971 40.3294984,6.41296971 39.8353984,7.10116971 L30.8790984,19.5763697 C30.6912984,19.8379697 30.3888984,19.9931697 30.0667984,19.9931697 L9.98229842,19.9931697 C9.66069842,19.9931697 9.35869842,19.8384697 9.17069842,19.5773697 L0.190598415,7.10216971 C-0.304701585,6.41406971 0.227398415,5.46036971 1.07319842,5.52046971 L13.8372984,6.42816971 L19.2889984,0.333269706 C19.6884984,-0.113330294 20.3884984,-0.110730294 20.7846984,0.338969706 L26.1491984,6.42806971 Z M28.8303984,18.0152734 L20.5212984,14.9099734 L20.5212984,18.0152734 L28.8303984,18.0152734 Z M19.5212984,18.0152734 L19.5212984,14.9099734 L11.2121984,18.0152734 L19.5212984,18.0152734 Z M18.5624984,14.1681697 L10.0729984,17.3371697 L3.82739842,8.65556971 L18.5624984,14.1681697 Z M21.4627984,14.1681697 L29.9522984,17.3371697 L36.1978984,8.65556971 L21.4627984,14.1681697 Z M19.5292984,13.4435697 L19.5292984,2.99476971 L12.5878984,10.8305697 L19.5292984,13.4435697 Z M20.5212984,13.4435697 L20.5212984,2.99606971 L27.4627984,10.8305697 L20.5212984,13.4435697 Z M10.5522984,10.1082697 L12.1493984,8.31366971 L4.34669842,7.75446971 L10.5522984,10.1082697 Z M29.4148984,10.1082697 L27.8178984,8.31366971 L35.6205984,7.75446971 L29.4148984,10.1082697 Z'\n      {...props}\n    />\n  </RootSvg>\n);\n\nconst newReactionData = [...reactionData, { type: 'stream', Icon: StreamReaction }];\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Giphy Search Input in MessageInput - React Native\nDESCRIPTION: This snippet shows how to create a custom Giphy search input using the Channel component and the InputGiphySearch prop. It leverages the useMessageInputContext hook to manage the Giphy active state and show more options.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { AutoCompleteInput, Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputGiphySearch = () => {\n  const { setGiphyActive, setShowMoreOptions } = useMessageInputContext();\n\n  return (\n    <View>\n      <Text style={{ textAlign: 'center' }}>Giphy</Text>\n      <AutoCompleteInput />\n      <Button\n        onPress={() => {\n          setGiphyActive(false);\n          setShowMoreOptions(true);\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputGiphySearch={CustomInputGiphySearch}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Custom Keyboard Compatible View - React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom KeyboardCompatibleView component in React Native. It uses useSafeAreaInsets to adjust the keyboardVerticalOffset for iOS, and returns children directly on Android. This allows for platform-specific keyboard handling within the Stream Chat Channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/keyboard.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {Platform} from 'react-native';\nimport {useSafeAreaInsets} from 'react-native-safe-area-context';\nimport {KeyboardCompatibleView} from 'stream-chat-react-native';\n\nexport const CustomKeyboardCompatibleView = ({children}) => {\n  const insets = useSafeAreaInsets();\n\n  if (Platform.OS === 'android') {\n    return children;\n  }\n\n  const iosVerticalOffset = insets.bottom > 0 ? 60 : 0;\n\n  return (\n    <KeyboardCompatibleView\n      keyboardVerticalOffset={iosVerticalOffset}>\n      {children}\n    </KeyboardCompatibleView>\n  );\n};\n\n/** In your app */\n<Channel\n  KeyboardCompatibleView={CustomizedKeyboardView}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Thread Component Usage - React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the `<Thread />` component within a `stream-chat-react-native` application. It shows how to integrate the `Thread` component within `OverlayProvider`, `Chat`, `Channel` components, setting up the necessary context for the thread to function properly. The `thread` prop is assumed to be defined and passed from the parent component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/thread.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, Thread } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel} thread={message} threadList>\n          // highlight-next-line\n          <Thread />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Language Translation - Typescript\nDESCRIPTION: This snippet demonstrates how to override existing language translations with the Streami18n instance.  The registerTranslation method is used to modify the translations for a specific language code. This is useful for tweaking existing languages for regional variations. Requires a pre-existing Streami18n instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst streami18n = new Streami18n();\n\nstreami18n.registerTranslation('nl', {\n  'Delete Message': 'Verwijder bericht',\n});\n```\n\n----------------------------------------\n\nTITLE: Override Channel Capabilities - Thread Replies - React Native\nDESCRIPTION: This code snippet demonstrates how to disable 'Thread Reply' actions (threadRepliesEnabled in v3) by using the `overrideOwnCapabilities` prop on the `Channel` component in Stream Chat React Native v4.  Setting `sendReply` to `false` removes the 'Thread Reply' action.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    sendReply: false\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Consuming ImageGalleryContext with useImageGalleryContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ImageGalleryContext using the useImageGalleryContext hook provided by the stream-chat-react-native library. This hook provides access to the images array and the setImages function for managing images in the image gallery. This is an alternative way to access the context values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/image_gallery_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useImageGalleryContext } from 'stream-chat-react-native';\n\nconst { images, setImages } = useImageGalleryContext();\n```\n\n----------------------------------------\n\nTITLE: Customizing Channel Preview Title in ChannelList\nDESCRIPTION: This example showcases how to customize the title displayed in the ChannelList's preview using the PreviewTitle prop. It defines a CustomPreviewTitle component that accesses channel data and renders a custom title. This component is then passed to the ChannelList, overriding the default title rendering.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/channel_list.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomPreviewTitle = ({ channel }) => (\n  <Text>\n    {channel.data.customProperty} - {channel.data.name}\n  </Text>\n);\n\n<ChannelList PreviewTitle={CustomPreviewTitle} />;\n```\n\n----------------------------------------\n\nTITLE: Displaying Unread Thread Count - React Native\nDESCRIPTION: This snippet adds a banner to display the number of unread threads using the useStateStore hook to access the unreadThreadCount from the Stream Chat state store. A custom CustomBanner component is created to display the count, and it's included as a child of the Chat component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-thread-list.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity, Text, View } from 'react-native';\nimport {\n  OverlayProvider,\n  Chat,\n  ThreadList,\n  useThreadsContext,\n  useThreadListItemContext,\n  MessageType,\n  // highlight-next-line\n  useStateStore,\n} from 'stream-chat-react-native';\n// highlight-next-line\nimport { ThreadManagerState } from 'stream-chat';\n// any navigation library hook/method can be used for this\nimport { useNavigation, useIsFocused } from '@react-navigation/native';\n\n// ...\n\n// highlight-start\n// create a selector for unreadThreadCount\nconst selector = (nextValue: ThreadManagerState) => [nextValue.unreadThreadCount];\n\nconst CustomBanner = () => {\n  // use our utility hook to access the store\n  const [unreadCount] = useStateStore(client?.threads?.state, selector);\n\n  // display the banner\n  return (\n     <View style={{ paddingVertical: 15, paddingHorizontal: 5 }}>\n       <Text>You have {unreadCount} unread threads !</Text>\n     </View>\n  );\n};\n// highlight-end\n\nconst ThreadListScreen = () => {\n  const isFocused = useIsFocused();\n  const navigation = useNavigation();\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        // highlight-start\n        {/* it's important that the banner is also a child of <Chat /> */}\n        <CustomBanner />\n        // highlight-end\n        <ThreadList\n          isFocused={isFocused}\n          {/* here we can reuse the same method as we would in the ChannelList component */}\n          onThreadSelect={(thread, channel) => {\n            navigation.navigate('ThreadScreen', {\n              thread,\n              channel,\n            });\n          }}\n          ThreadListItem={ThreadListItem}\n        />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Poll Answers List with Pagination - React Native\nDESCRIPTION: This code snippet implements a custom poll answers list in Stream Chat React Native using the usePollAnswersPagination hook for efficient data loading. It defines custom components LoadingIndicator and MyItem to display loading states and individual poll answers, respectively. The MyPollAnswersContent component renders a FlatList that displays the poll answers, loads more data on end reached, and shows a loading indicator while loading.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-next-line\n  usePollAnswersPagination,\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\n// highlight-start\nconst LoadingIndicator = () => {\n  /* some LoadingIndicator logic here */\n};\n\nconst MyItem = ({ item }) => {\n  const { answer_text, user } = item;\n  return (\n    <Text>\n      {user.name} commented: {answer_text}\n    </Text>\n  );\n};\n\nconst MyPollAnswersContent = () => {\n  const { pollAnswers, loading, loadMore } = usePollAnswersPagination();\n  return (\n    <FlatList\n      contentContainerStyle={{ flex: 1, padding: 16 }}\n      data={pollAnswers}\n      renderItem={MyItem}\n      onEndReached={loadMore}\n      ListFooterComponent={loading ? <LoadingIndicator /> : null}\n    />\n  );\n};\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Navigating to Poll Answers - React Native\nDESCRIPTION: This code shows how to navigate to a PollAnswersScreen in Stream Chat React Native when the ShowAllCommentsButton is pressed. It modifies the onPress handler of the ShowAllCommentsButton to navigate to the 'PollAnswersScreen', passing the message and poll data as parameters. A new ChannelStack.Screen is added to the ChannelStack.Navigator to render the PollAnswersScreen component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-next-line\n  PollAnswersList,\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      // highlight-start\n      <ShowAllCommentsButton\n          onPress={({ message, poll }) => {\n            navigation.navigate('PollAnswersScreen', {\n              message,\n              poll,\n            });\n          }}\n        />\n      // highlight-end\n      <AddCommentButton />\n      <ViewResultsButton\n        onPress={({ message, poll }) =>\n          navigation.navigate('PollResultsScreen', {\n            message,\n            poll,\n          });\n        }\n      />\n      <EndVoteButton />\n    </>\n  )\n}\n\n// highlight-start\nconst PollAnswersScreen = ({ \n  route: {\n    params: { message, poll },\n  },\n}) => {\n  const navigation = useNavigation();\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <PollModalHeader title={'All Poll Answers'} onPress={() => navigation.goBack()} />\n      <PollAnswersList message={message} poll={poll} />\n    </SafeAreaView>\n  );\n};\n// highlight-end\n```\n\nLANGUAGE: tsx\nCODE:\n```\nconst ChannelScreen = () => {\n  const navigation = useNavigation();\n  return (\n    <ThemeProvider style={myTheme}>\n      <OverlayProvider>\n        <Chat client={client}>\n          <Channel\n            channel={channel}\n            PollContent={MyPollContent}\n            openPollCreationDialog={({ sendMessage }) => navigation.navigate('CreatePollScreen', { sendMessage })}\n          >\n            <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n              <ChannelStack.Screen\n                name={'ChannelMessageList'}\n                options={{ headerShown: false }}\n                component={ChannelMessageList}\n              />\n              <ChannelStack.Screen\n                name={'PollResultsScreen'}\n                options={{ headerShown: false }}\n                component={PollResultsScreen}\n              />\n              // highlight-start\n              <ChannelStack.Screen\n                name={'PollAnswersScreen'}\n                options={{ headerShown: false }}\n                component={PollAnswersScreen}\n              />\n              // highlight-end\n              <ChannelStack.Group screenOptions={{ presentation: 'modal' }}>\n                <ChannelStack.Screen\n                  name={'CreatePollScreen'}\n                  options={{ headerShown: false }}\n                  component={MyCreatePollContent}\n                />\n              </ChannelStack.Group>\n            </ChannelStack.Navigator>\n          </Channel>\n        </Chat>\n      </OverlayProvider>\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelsContext with useContext hook\nDESCRIPTION: This code demonstrates how to consume the ChannelsContext using the useContext hook from React. It retrieves the 'channels' and 'reloadList' values from the context, allowing the component to access channel data and reload the channel list.  This snippet is used within a React Native application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channels_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChannelsContext } from 'stream-chat-react-native';\n\nconst { channels, reloadList } = useContext(ChannelsContext);\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links with Linking API in React Native (Typescript)\nDESCRIPTION: This code snippet demonstrates how to use the `Linking` API in React Native to handle deep links. It sets up event listeners for both the initial URL (when the app is opened from a link) and subsequent URLs (when the app is already open). The `parseAndSetChannelID` function is intended to parse the URL and perform actions based on the extracted data, such as navigating to a specific channel in Stream Chat.  Requires `react-native` dependency.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/deeplinking.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nconst App = () => {\n  useEffect(() => {\n    const parseAndSetChannelID = (url: string | null) => {\n      const matchResponse = url?.match(`YOUR REGEX HERE`); // To match the paths and handle them accordingly\n      if (matchResponse?.length) {\n        // Your custom setup here.\n      }\n    };\n    const { remove } = Linking.addEventListener('url', ({ url }) => {\n      parseAndSetChannelID(url);\n    });\n    const configure = async () => {\n      const url = await Linking.getInitialURL();\n      parseAndSetChannelID(url);\n    };\n    configure();\n    return remove;\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Replacing Attachment Picker with Native Image Picker - TSX\nDESCRIPTION: This snippet replaces the attachment picker with a native image picker using `@expo/react-native-action-sheet`. It integrates an action sheet to display options for Photo Library, Camera, Files, and Cancel. It uses `useActionSheet` to present the action sheet and handles each option.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel } from 'stream-chat-react-native';\nimport { ActionSheetProvider, useActionSheet } from '@expo/react-native-action-sheet';\n\nconst CustomAttachButton = () => {\n  const { showActionSheetWithOptions } = useActionSheet();\n\n  const onPressHandler = () => {\n    // Same interface as https://facebook.github.io/react-native/docs/actionsheetios.html\n    showActionSheetWithOptions(\n      {\n        cancelButtonIndex: 3,\n        destructiveButtonIndex: 3,\n        options: ['Photo Library', 'Camera', 'Files', 'Cancel'],\n      },\n      buttonIndex => {\n        switch (buttonIndex) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n\n  return <AttachButton handleOnPress={onPressHandler} />;\n};\n\n<ActionSheetProvider>\n  <Channel AttachButton={CustomAttachButton} />\n</ActionSheetProvider>;\n```\n\n----------------------------------------\n\nTITLE: Caching images using react-native-fast-image\nDESCRIPTION: This code snippet demonstrates how to use the `react-native-fast-image` library to cache images in the chat application. It replaces the default `Image` component with `FastImage` by passing it as the `ImageComponent` prop to the `Chat` component. The `client` and `enableOfflineSupport` props are also passed to the `Chat` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/offline-support.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport FastImage from 'react-native-fast-image';\n\n...\n\n<Chat\n  client={chatClient}\n  enableOfflineSupport\n  ImageComponent={FastImage}\n/>\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client - TypeScript\nDESCRIPTION: This snippet initializes the Stream Chat client with an API key. The StreamChat.getInstance() method ensures a single instance of the client is used throughout the application.  The api_key placeholder should be replaced with a valid API key from Stream.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Adding Configuration Button to Channel Screen - TSX\nDESCRIPTION: This snippet adds a configuration button to the Channel screen, which navigates the user to the WallpaperOverviewScreen. It uses react-navigation's useNavigation hook to navigate between screens. The button is styled using React Native's StyleSheet API. It depends on stream-chat-react-native, react-navigation, react-native and the ChannelBackgroundView component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-background.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\nimport { Channel, MessageInput, MessageList, ThemeProvider } from 'stream-chat-react-native';\nimport { Pressable, Text, StyleSheet } from 'react-native';\n\nconst ChannelScreen = ({ channel }) => {\n  const { navigate } = useNavigation();\n  const handleMenuOnPress = () => navigate('WallpaperOverviewScreen', { channelId: channel?.id });\n\n  return (\n    <ThemeProvider style={theme}>\n      <Channel channel={channel}>\n        <ChannelBackgroundView channelId={channel?.id} style={{ flex: 1 }}>\n          <Pressable style={styles.menuButton} onPress={handleMenuOnPress}>\n            <Text>🎨</Text>\n          </Pressable>\n          <MessageList />\n          <MessageInput />\n        </ChannelBackgroundView>\n      </Channel>\n    </ThemeProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  menuButton: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n    backgroundColor: 'rgba(255,87,56,0.65)',\n    borderRadius: 36,\n    padding: 16,\n    margin: 16,\n    alignItems: 'center',\n    zIndex: 10,\n  },\n});\n\nexport const theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transparent',\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelPreviewStatus Date in React Native\nDESCRIPTION: This code snippet demonstrates how to customize the date format displayed in the ChannelPreviewStatus component within a ChannelList. It utilizes `useMemo` to optimize the date formatting process, preventing unnecessary re-renders when the `latestMessagePreview` prop remains unchanged. This is achieved by creating a custom component `CustomPreviewStatus` which renders the default `ChannelPreviewStatus` with the `formatLatestMessageDate` prop set to a custom date format.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/channel_preview_status.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo } from 'react';\nimport { ChannelList, ChannelPreviewStatus } from 'stream-chat-react-native';\nimport { customDateFormatter } from '...'; // your custom date formatter\n\nconst CustomPreviewStatus = ({ latestMessagePreview }) => {\n  // important usage of useMemo once date parsers can perform some computation when re-rendering.\n  const formattedDate = useMemo(() => customDateFormatter(latestMessagePreview), [latestMessagePreview]);\n  return <ChannelPreviewStatus formatLatestMessageDate={formattedDate} />;\n};\n<ChannelList PreviewStatus={CustomPreviewStatus} />;\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel component in React Native\nDESCRIPTION: This code snippet demonstrates how to implement the Channel component. It shows how to manage the selected channel state using useState and pass the channel instance to the Channel component. It utilizes the ChannelList for channel selection.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? <Channel channel={channel}>{/** App components */}</Channel> : <ChannelList onSelect={setChannel} />}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageActionList with OverlayProvider\nDESCRIPTION: This example demonstrates how to customize the entire MessageActionList component using the OverlayProvider. It creates a custom component that maps through the `messageActions` array and renders `MessageActionListItem` components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessageActionListItem, OverlayProvider, useOverlayContext } from 'stream-chat-react-native';\n\nconst CustomMessageActionList = () => {\n  const { setOverlay } = useOverlayContext();\n  const messageActions = [\n    {\n      action: function () {\n        Alert.alert('Edit Message action called.');\n        setOverlay('none');\n      },\n      actionType: 'editMessage',\n      title: 'Edit messagee',\n    },\n    {\n      action: function () {\n        Alert.alert('Delete message action');\n        setOverlay('none');\n      },\n      actionType: 'deleteMessage',\n      title: 'Delete Message',\n    },\n  ];\n  return (\n    <View style={{ backgroundColor: 'white' }}>\n      {messageActions.map(({ actionType, ...rest }) => (\n        <MessageActionListItem actionType={actionType} key={actionType} {...rest} />\n      ))}\n    </View>\n  );\n};\n\n<OverlayProvider MessageActionList={CustomMessageActionList}>\n  {/* Underlying Channel, MessageList and Message components */}\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Rendering Show All Votes Button in React Native\nDESCRIPTION: This code snippet shows how to render a ShowAllVotesButton component from the stream-chat-react-native library.  The onPress handler receives message, option, and poll objects, logging their IDs to the console when pressed. Requires stream-chat-react-native package and 'option' prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShowAllVotesButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <ShowAllVotesButton\n    option={option}\n    onPress={({ message, option, poll }) =>\n      console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}; Option ID: ${option.id}`)\n    }\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: usePollState Hook Example - Typescript/JSX\nDESCRIPTION: This snippet demonstrates how to use the usePollState hook from the stream-chat-react-native library to access and display poll data. It retrieves the name and options of a poll and renders them in a React component. It assumes that the component is wrapped in a PollContextProvider to provide the necessary context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePollState } from 'stream-chat-react-native';\n\nconst CustomPollComponent = () => {\n  const { name, options } = usePollState();\n\n  return (\n    <View>\n      <Text>{name}</Text>\n      {options.map(option => (\n        <Text key={option.id}>{option.text}</Text>\n      ))}\n    </View>\n  );\n};\n\nconst PollMessage = ({ message }) => {\n  const { client } = useChatContext();\n  const pollInstance = client.polls.fromState(message?.poll_id);\n  return (\n    <PollContextProvider value={{ message, poll: pollInstance }}>\n      <CustomPollComponent />\n    </PollContextProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping Entry Point with GestureHandlerRootView (JavaScript)\nDESCRIPTION: This JavaScript code snippet shows how to wrap the entry point of a React Native application with `<GestureHandlerRootView>` from `react-native-gesture-handler`. This step is required after installing `react-native-gesture-handler`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_35\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport default function App() {\n  return <GestureHandlerRootView style={{ flex: 1 }}>{/* content */}</GestureHandlerRootView>;\n}\n```\n\n----------------------------------------\n\nTITLE: Custom AttachButton Component Setup - TSX\nDESCRIPTION: This code snippet shows how to override the default attach button next to the input field by providing a custom `AttachButton` component to the `Channel` component. The custom `AttachButton` can handle the `onPress` action as needed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel } from 'stream-chat-react-native';\n\nconst CustomAttachButton = () => {\n  const onPressHandler = () => {\n    // Custom handling of onPress action on AttachButton\n  };\n\n  return <AttachButton handleOnPress={onPressHandler} />;\n};\n\n<Channel AttachButton={CustomAttachButton} />;\n```\n\n----------------------------------------\n\nTITLE: Compress Video Before Uploading - React Native\nDESCRIPTION: This code snippet demonstrates how to compress a video file before uploading it to Stream Chat using the `react-native-compressor` library. It overrides the `doDocUploadRequest` prop of the Channel component to intercept the file upload process, compress the video if it's a video file, and then send the compressed file.  Requires the `react-native-compressor` library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/file_compression.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel, ChannelProps } from 'stream-chat-react-native';\nimport { Video as VideoCompressor } from 'react-native-compressor';\n\n\nconst customDoDocUploadRequest: NonNullable<ChannelProps['doDocUploadRequest']> = async (\n  file,\n  channel,\n) => {\n  if (!file.uri) {\n    throw new Error('Invalid file provided');\n  }\n  // check if it is a video file using the MIME type\n  if (file.mimeType?.startsWith('video/')) {\n    const result = await VideoCompressor.compress(file.uri, {\n      compressionMethod: 'auto',\n    });\n    // set the local file uri to the compressed file\n    file.uri = result;\n  }\n\n  // send the file\n  return await channel.sendFile(file.uri, file.name, file.mimeType);\n};\n\n\n<Channel channel={channel} doDocUploadRequest={customDoDocUploadRequest}>\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode - stream-chat-react-native - JSX\nDESCRIPTION: This snippet demonstrates how to implement dark mode in stream-chat-react-native by dynamically switching between different themes based on the system's color scheme. It utilizes `useColorScheme` to detect the current color scheme, defines a `getTheme` function to return the appropriate theme, and uses `useEffect` to update the theme state when the color scheme changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/theme.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { useColorScheme } from 'react-native';\nimport type { DeepPartial, Theme } from 'stream-chat-react-native';\n\nconst getTheme = (): DeepPartial<Theme> => ({\n  colors: colorScheme === 'dark' ? { black: '#FFFFFF' } : { black: '#000000' },\n});\n\nexport const App = () => {\n  const colorScheme = useColorScheme();\n  const [theme, setTheme] = useState(getTheme());\n\n  useEffect(() => {\n    setTheme(getTheme());\n  }, [colorScheme]);\n\n  return (\n    <OverlayProvider value={{ style: theme }}>\n      <Chat client={client}>\n        <ChannelList />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel - Typescript\nDESCRIPTION: This snippet shows how to create a channel on the server. It's similar to watch, but doesn't subscribe the client to updates.  Must be called after channel creation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Replacing ScrollToBottomButton in Channel Component - TSX\nDESCRIPTION: This code snippet shows how to replace the default ScrollToBottomButton component in the Channel component with a custom implementation. This allows developers to customize the button's appearance and behavior as needed. The Channel component accepts a ScrollToBottomButton prop, which expects a React component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/scroll-to-bottom-button.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel ScrollToBottomButton={CustomScrollToBottomButton} />\n```\n\n----------------------------------------\n\nTITLE: Consuming PaginatedMessageListContext with usePaginatedMessageListContext hook - TSX\nDESCRIPTION: This snippet shows how to consume `PaginatedMessageListContext` using the `usePaginatedMessageListContext` hook provided by the `stream-chat-react-native` library. It retrieves the `loadingMore`, `loadMoreRecent`, and `messages` properties from the context.  It depends on the stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/paginated_message_list_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePaginatedMessageListContext } from 'stream-chat-react-native';\n\nconst { loadingMore, loadMoreRecent, messages } = usePaginatedMessageListContext();\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Selection with onSelect in React Native\nDESCRIPTION: This code snippet demonstrates how to use the `onSelect` prop in the `ChannelList` component from the Stream Chat React Native library.  The `onSelect` prop accepts a function that is called when a user selects a channel in the list.  The function receives a `Channel` instance as its only argument, which can then be used to perform actions such as navigating to a channel screen. A Channel instance is not serializable and should not be passed directly as a navigation parameter.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/channel-list/props/on_select.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nonSelect={(channel) => { /** navigation logic */ }}\n```\n\n----------------------------------------\n\nTITLE: Running Android App with React Native CLI or Expo\nDESCRIPTION: This Bash command is used to run the Android application on the simulator or a connected device using React Native CLI or Expo. The `yarn android` command will build and start the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Integrating React Navigation Stack in Stream Chat Channel\nDESCRIPTION: This code snippet integrates React Navigation into the Stream Chat Channel component to handle poll-related screens. It creates a ChannelStack using createStackNavigator and defines a ChannelMessageList component to encapsulate the ChannelHeader, MessageList, and MessageInput. The ChannelStack.Navigator is then embedded within the Channel component, allowing for custom navigation between the main channel view and the PollResultsScreen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, MessageList, MessageInput, PollContent } from 'stream-chat-react-native';\n// highlight-next-line\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      <ViewResultsButton\n        onPress={({ message, poll }) => Alert.alert(`Message ID: ${message.id} and Poll ID: ${poll.id}`)}\n      />\n      <EndVoteButton />\n    </>\n  );\n};\n\nconst MyPollContent = () => <PollContent PollHeader={() => null} PollButtons={MyPollButtons} />;\n\n// highlight-start\nconst ChannelMessageList = () => {\n  return (\n    <>\n      <ChannelHeader />\n      <MessageList />\n      <MessageInput />\n    </>\n  );\n};\n// highlight-end\n\n// highlight-next-line\nconst ChannelStack = createStackNavigator<StackNavigatorParamList>();\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel} PollContent={MyPollContent}>\n          // highlight-start\n          <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n            <ChannelStack.Screen\n              name={'ChannelMessageList'}\n              options={{ headerShown: false }}\n              component={ChannelMessageList}\n            />\n            <ChannelStack.Screen name={'PollResultsScreen'} options={{ headerShown: false }} component={() => null} />\n          </ChannelStack.Navigator>\n          // highlight-end\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Chat Component with Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the Chat component within the OverlayProvider. It initializes the StreamChat client and renders the ChannelList component within the Chat component, highlighting lines 8 and 10 for specific emphasis.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/chat.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Using Streami18n with OverlayProvider and Chat - Typescript\nDESCRIPTION: This code shows how to integrate a custom Streami18n instance with the OverlayProvider and Chat components in Stream Chat React Native.  It passes the i18nInstance prop to these components, ensuring that the custom translations and date/time formatting are used throughout the application. It depends on stream-chat and stream-chat-react-native libraries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, OverlayProvider, Streami18n } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst streami18n = new Streami18n();\n\nexport const App = () => (\n  <OverlayProvider i18nInstance={streami18n}>\n    <Chat client={client} i18nInstance={streami18n}>\n      {/** App components */}\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Thread Screen Component Definition (Context Approach) - TSX\nDESCRIPTION: This code defines a ThreadScreen component that utilizes context to manage the current thread. It retrieves the channel and thread context, and renders a Channel component with the current thread. The onThreadDismount prop is used to clear the thread context when the Thread screen is dismounted.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ThreadScreen = () => {\n  const { channel } = useAppChannel();\n  const { setThread, thread } = useAppThread();\n\n  return (\n    <Channel channel={channel} thread={thread}>\n      <Thread onThreadDismount={() => setThread(undefined)} />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Handling Deep Links with React Native Linking API\nDESCRIPTION: This code snippet demonstrates how to use the `Linking` API in React Native to handle deep links. It adds an event listener for 'url' events and also retrieves the initial URL when the app is launched from a deep link. The URL is then parsed and actions are performed based on its content. The cleanup function removes the event listener when the component unmounts to prevent memory leaks.  A placeholder regex `YOUR REGEX HERE` needs to be replaced with the actual regex to extract the channel ID from the URL.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/deeplinking.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nconst App = () => {\n  useEffect(() => {\n    const parseAndSetChannelID = (url: string | null) => {\n      const matchResponse = url?.match(`YOUR REGEX HERE`); // To match the paths and handle them accordingly\n      if (matchResponse?.length) {\n        // Your custom setup here.\n      }\n    };\n    const { remove } = Linking.addEventListener('url', ({ url }) => {\n      parseAndSetChannelID(url);\n    });\n    const configure = async () => {\n      const url = await Linking.getInitialURL();\n      parseAndSetChannelID(url);\n    };\n    configure();\n    return remove;\n  }, []);\n};\n```\n\n----------------------------------------\n\nTITLE: Custom PollAnswersList Content - React Native\nDESCRIPTION: This example demonstrates how to override the default content of the `PollAnswersList` component using the `PollAnswersListContent` prop.  It shows how to create a custom component that uses the `usePollState` and `usePollAnswersPagination` hooks to access the poll name and paginated answers, and then renders them using a FlatList. Requires importing necessary components from the `stream-chat-react-native` library as well as `Text` and `FlatList` from `react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-answers-list.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, FlatList } from 'react-native';\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  PollAnswersList,\n  usePollAnswersPagination,\n  usePollState,\n} from 'stream-chat-react-native';\n\n// will only display the first page of answers without loading more\nconst MyPollAnswersListContent = () => {\n  const { name } = usePollState();\n  const { pollAnswers } = usePollAnswersPagination();\n  return (\n    <FlatList\n      ListHeaderComponent={() => <Text>{name}</Text>}\n      data={pollAnswers}\n      renderItem={({ item }) => <Text>{item.answer_text}</Text>}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollAnswersList message={message} poll={poll} PollAnswersListContent={MyPollAnswersListContent} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by Members List - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a channel by providing a list of members.  The `client.channel` method is invoked with the channel type and an object containing the `members` array and optional metadata, such as the channel name.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel(channel_type, {\n    members: ['userOne', 'userTwo']\n    name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client - Typescript\nDESCRIPTION: This snippet demonstrates how to initialize a Stream Chat client instance using the `StreamChat.getInstance()` method. It requires your Stream Chat API key. The client instance is then used to interact with Stream's chat services.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Consuming ChatContext with useChatContext hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume ChatContext using the useChatContext hook provided by the stream-chat-react-native library. It imports the hook and destructures the client and isOnline properties.  It simplifies the consumption of ChatContext and requires stream-chat-react-native as a dependency.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/chat-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client, isOnline } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Deletion Event - TypeScript\nDESCRIPTION: This code snippet shows how to listen for the `channel.deleted` event and trigger an action, such as navigating back to the channel list screen, when a channel is deleted. This improves the user experience by preventing a blank screen from appearing when the current channel is deleted.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nclient.on('channel.deleted', event => {\n  if (event.cid === channel.cid) {\n    // add your action here\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Foreground Notifications - JSX\nDESCRIPTION: This snippet shows how to handle foreground notifications in a React Native application using Firebase and Notifee. It uses `messaging().onMessage` to listen for incoming messages when the app is in the foreground. It then creates an Android notification channel and displays the notification using Notifee, extracting data from the remote message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v2.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport messaging from '@react-native-firebase/messaging';\nimport notifee from '@notifee/react-native';\n\nuseEffect(() => {\n  // add listener to notifications received when on foreground\n  const unsubscribeOnMessage = messaging().onMessage(async remoteMessage => {\n    const message = await chatClient.getMessage(remoteMessage.data.id);\n\n    // create the android channel to send the notification to\n    const channelId = await notifee.createChannel({\n      id: 'chat-messages',\n      name: 'Chat Messages',\n    });\n\n    // display the notification\n    const { stream, ...rest } = remoteMessage.data ?? {};\n    const data = {\n      ...rest,\n      ...((stream as unknown as Record<string, string> | undefined) ?? {}), // extract and merge stream object if present\n    };\n    await notifee.displayNotification({\n      title: 'New message from ' + message.message.user.name,\n      body: message.message.text,\n      data,\n      android: {\n        channelId,\n        pressAction: {\n          id: 'default',\n        },\n      },\n    });\n  });\n\n  // add listener to user interactions on foreground notifications\n  const unsubscribeForegroundEvent = notifee.onForegroundEvent(({ detail, type }) => {\n    if (type === EventType.PRESS) {\n      // user has pressed notification\n      const channelId = detail.notification?.data?.channel_id;\n      // The navigation logic, to navigate to relevant channel screen.\n      if (channelId) {\n        navigationContainerRef.current?.navigate('ChannelScreen', { channelId });\n      }\n    }\n  });\n\n  return () => {\n    unsubscribeOnMessage();\n    unsubscribeForegroundEvent();\n  };\n}, []);\n```\n\n----------------------------------------\n\nTITLE: Using Device Locale for Language - Typescript\nDESCRIPTION: This snippet demonstrates how to use the react-native-localize package to get the user's preferred locale and set the language for the Streami18n instance. This allows the app to automatically use the user's preferred language for the chat UI. Requires react-native-localize dependency.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport * as RNLocalize from 'react-native-localize';\nconst streami18n = new Streami18n();\n\nconst userPreferredLocales = RNLocalize.getLocales();\n\nstreami18n.setLanguage(userPreferredLocales[0].languageCode);\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Avatar - React Native\nDESCRIPTION: This example shows how to customize the message avatar within the Channel component. It defines a CustomAvatar component that renders an Image using the message user's image URL obtained from the useMessageContext hook. This custom component is then passed as the MessageAvatar prop to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/channel.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from 'react-native';\nimport { Channel, useMessageContext } from 'stream-chat-react-native';\n\nconst CustomAvatar = () => {\n  const { message } = useMessageContext();\n\n  return <Image source={{ uri: message.user?.image }} />;\n};\n\n<Channel MessageAvatar={CustomAvatar} />;\n```\n\n----------------------------------------\n\nTITLE: Using OverlayProvider Component with topInset - TSX\nDESCRIPTION: This snippet shows how to use `OverlayProvider` with `topInset`. The `topInset` prop is used to account for Header or status bar height and ensures the image picker opens at the correct height. This prop may need to be adjusted to work around limitations prior to version `3.6.0`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider topInset={/** number */}>\n```\n\n----------------------------------------\n\nTITLE: Basic Gallery Usage in Channel - React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the Gallery component within a Channel in a React Native application using the stream-chat-react-native library. It shows how to import the necessary components and how to override the default Gallery component with a customized one, disabling the default onPress handler by using the preventPress prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/gallery.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, Gallery } from 'stream-chat-react-native';\n\n<Channel Gallery={() => <Gallery preventPress />}\n```\n\n----------------------------------------\n\nTITLE: Creating Data-Only APN Template - JavaScript\nDESCRIPTION: This code snippet demonstrates how to create a data-only APN template for iOS push notifications using the Stream Chat JavaScript SDK. The `apn_template` is updated to include the `content-available` key, which indicates that the notification is a silent background update. It depends on the Stream Chat client.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v2.mdx#_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance(‘api_key’, ‘api_secret’);\n\nconst apn_template = `{  \"aps\": {    \"content-available\": 1  }}`;\n\nclient.updateAppSettings({\n  firebase_config: {\n    apn_template,\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing FileAttachment with attachmentSize in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the FileAttachment component within a Channel component in stream-chat-react-native.  It specifically shows how to modify the size of the file attachment icon by setting the `attachmentSize` prop. This overrides the default FileAttachment implementation. The Channel component uses the custom FileAttachment component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/file_attachment.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, FileAttachment } from 'stream-chat-react-native';\n\n<Channel FileAttachment={() => <FileAttachment attachmentSize={40} />}\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Actions using messageActions prop\nDESCRIPTION: This TypeScript snippet demonstrates how to use the `messageActions` prop of the Channel component to selectively render message actions. It shows how to access the default message actions and return a modified array of `MessageAction` objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmessageActions={({\n  blockUser, // MessageAction | null;\n  copyMessage, // MessageAction | null;\n  deleteMessage, // MessageAction | null;\n  dismissOverlay, // () => void;\n  editMessage, // MessageAction | null;\n  error, // boolean;\n  flagMessage, // MessageAction | null;\n  isMessageActionsVisible, // boolean;\n  isMyMessage, // boolean;\n  isThreadMessage, // boolean;\n  message, // MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  reply, // MessageAction | null;\n  retry, // MessageAction | null;\n  threadReply, // MessageAction | null;\n  ownCapabilities, // object\n}) => {\n  return [] // Array<MessageAction>\n}}\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageUserReactionsAvatar Component\nDESCRIPTION: This snippet renders the MessageUserReactionsAvatar component. This component displays the avatars of users who have reacted to a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_19\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageUserReactionsAvatar />\n```\n\n----------------------------------------\n\nTITLE: Setting Editing State - React Native\nDESCRIPTION: This function enables the editing state for a given message. It takes a message object as input, and it prepares the UI to allow the user to edit that specific message. It does not handle sending the edited message, just enabling the editing UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetEditingState: (message) => void\n```\n\n----------------------------------------\n\nTITLE: Accessing Context in a Custom Component - React Native\nDESCRIPTION: This example showcases how to access data from a context (PaginatedMessageListContext) within a custom component to display dynamic information (last sender's name) in place of the DateHeader. It utilizes the usePaginatedMessageListContext hook to retrieve messages and extract the sender's name.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/custom_components.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\n<Channel\n  ...\n  DateHeader={MySenderComponent}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Integrating MessageInput for Sending Messages\nDESCRIPTION: This snippet incorporates the MessageInput component for sending messages within a Stream Chat channel. It sets the keyboardVerticalOffset to 0, assuming no header spacing. This requires the Channel and MessageList components to be rendered and the channel state to be managed appropriately.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0}>\n            <MessageList />\n            <MessageInput />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: AttachButton with ImagePicker and File Picker - React Native (TSX)\nDESCRIPTION: This snippet demonstrates how to integrate react-native-image-crop-picker and the native file picker with the custom AttachButton.  It uses useActionSheet, useMessageInputContext (pickFile, uploadNewImage), and ImagePicker.  It requires react-native-image-crop-picker, @expo/react-native-action-sheet, AttachButton, Channel, useMessageInputContext.  It outputs an action sheet with options to select attachments from Photo Library, Camera, or Files, and it uploads the selected images/files.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel, useMessageInputContext } from 'stream-chat-react-native';\nimport { ActionSheetProvider, useActionSheet } from '@expo/react-native-action-sheet';\nimport ImagePicker from 'react-native-image-crop-picker';\n\nconst CustomAttachButton = () => {\n  const { showActionSheetWithOptions } = useActionSheet();\n  const { pickFile, uploadNewImage } = useMessageInputContext();\n\n  const pickImageFromGallery = () =>\n    ImagePicker.openPicker({\n      multiple: true,\n    }).then(images =>\n      images.forEach(image =>\n        uploadNewImage({\n          uri: image.path,\n        }),\n      ),\n    );\n\n  const pickImageFromCamera = () =>\n    ImagePicker.openCamera({\n      cropping: true,\n    }).then(image =>\n      uploadNewImage({\n        uri: image.path,\n      }),\n    );\n\n  const onPress = () => {\n    // Same interface as https://facebook.github.io/react-native/docs/actionsheetios.html\n    showActionSheetWithOptions(\n      {\n        cancelButtonIndex: 3,\n        destructiveButtonIndex: 3,\n        options: ['Photo Library', 'Camera', 'Files', 'Cancel'],\n      },\n      buttonIndex => {\n        switch (buttonIndex) {\n          case 0:\n            pickImageFromGallery();\n            break;\n          case 1:\n            pickImageFromCamera();\n            break;\n          case 2:\n            pickFile();\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n\n  return <AttachButton handleOnPress={onPress} />;\n};\n\n<ActionSheetProvider>\n  <Channel AttachButton={CustomAttachButton} />\n</ActionSheetProvider>;\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User\nDESCRIPTION: This snippet demonstrates how to disconnect a user from the Stream Chat client using `client.disconnectUser()`. This will end the current user's session.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Accessing ThreadsContext using useContext - React Native\nDESCRIPTION: This code snippet demonstrates how to access the ThreadsContext in a Stream Chat React Native application using the useContext hook. The ThreadsContext provides access to information and methods related to threads within a channel.  It requires the react and stream-chat-react-native packages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/threads-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThreadsContext } from 'stream-chat-react-native';\n\nconst value = useContext(ThreadsContext);\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Answers Content - React Native\nDESCRIPTION: This code demonstrates customizing the content of the Poll Answers List using the `usePollAnswersPagination` hook. It fetches the poll answers with pagination, renders them using a FlatList, and implements a loading indicator.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-next-line\n  usePollAnswersPagination,\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\n// highlight-start\nconst LoadingIndicator = () => {\n  /* some LoadingIndicator logic here */\n};\n\nconst MyItem = ({ item }) => {\n  const { answer_text, user } = item;\n  return (\n    <Text>\n      {user.name} commented: {answer_text}\n    </Text>\n  );\n};\n\nconst MyPollAnswersContent = () => {\n  const { pollAnswers, loading, loadMore } = usePollAnswersPagination();\n  return (\n    <FlatList\n      contentContainerStyle={{ flex: 1, padding: 16 }}\n      data={pollAnswers}\n      renderItem={MyItem}\n      onEndReached={loadMore}\n      ListFooterComponent={loading ? <LoadingIndicator /> : null}\n    />\n  );\n};\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Using AutoCompleteSuggestionItem in Channel Component - TSX\nDESCRIPTION: This snippet demonstrates how to use the `AutoCompleteSuggestionItem` component within a `Channel` component in a React Native application using TypeScript.  It shows how to override the default suggestion item with a custom component. This snippet assumes that `stream-chat-react-native` is installed and properly configured. The custom `AutoCompleteSuggestionItemComponent` should return a valid React Native component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/autocomplete-suggestion-item.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionItemComponent = () => <AutoCompleteSuggestionItem />\n\n<Channel AutoCompleteSuggestionItem={AutoCompleteSuggestionItemComponent} />\n```\n\n----------------------------------------\n\nTITLE: Adding Poll Answers Screen to Channel Stack - React Native\nDESCRIPTION: This code adds the `PollAnswersScreen` to the `ChannelStack.Navigator`. This makes the `PollAnswersScreen` available to navigate to within the channel's navigation stack.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-start\n<ChannelStack.Screen\n  name={'PollAnswersScreen'}\n  options={{ headerShown: false }}\n  component={PollAnswersScreen}\n/>\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Disable Keyboard Compatible View - React Native\nDESCRIPTION: This code snippet shows how to disable the default KeyboardCompatibleView in the Channel component by setting the `disableKeyboardCompatibleView` prop to true. Disabling the built-in keyboard handling allows developers to implement their own custom keyboard handling logic. This configuration is helpful when the default implementation does not suit the application's specific needs.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/keyboard.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  disableKeyboardCompatibleView\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Updating Stream Chat App Settings with Firebase Credentials (JS)\nDESCRIPTION: This code snippet demonstrates how to update Stream Chat app settings using the API to enable Firebase notifications and upload Firebase credentials.  It reads the credentials from a JSON file and sends them to the Stream server.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v2.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst client = StreamChat.getInstance('api_key', 'api_secret');\nclient.updateAppSettings({\n  push_config: {\n    version: 'v2'\n  },\n  firebase_config: {\n    credentials_json: fs.readFileSync(\n      './firebase-credentials.json',\n      'utf-8',\n    ),\n });\n```\n\n----------------------------------------\n\nTITLE: Consuming OwnCapabilitiesContext with useOwnCapabilitiesContext hook - TSX\nDESCRIPTION: Illustrates how to consume the OwnCapabilitiesContext using the useOwnCapabilitiesContext hook in a React component. Similar to useContext, this provides access to boolean capabilities such as uploadFile, updateAnyMessage, and deleteAnyMessage, indicating the user's permissions in the channel. It depends on stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/own-capabilities-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useOwnCapabilitiesContext } from 'stream-chat-react-native';\n\nconst { uploadFile, updateAnyMessage, deleteAnyMessage } = useOwnCapabilitiesContext();\n```\n\n----------------------------------------\n\nTITLE: Custom DateHeader component - React Native\nDESCRIPTION: This code snippet illustrates how to replace the default `DateHeader` component in Stream Chat for React Native with a custom component that displays a \"Hello World\" message along with the date string. It shows how to pass a custom component to the `DateHeader` prop of the `Channel` component, and how the component receives the `dateString` prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/custom_components.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyNewComponent = ({ dateString }) => <Text>{`Hello World: ${dateString}`}</Text>;\n\n<Channel\n  ...\n  DateHeader={MyNewComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by ID\nDESCRIPTION: This snippet shows how to create a new channel using a channel ID and channel type.  The `client.channel` method initializes the channel object.  You must then call `create` or `watch` on the channel instance to persist the channel to the server.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel(channel_type, 'channel_id', {\n  name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by ID\nDESCRIPTION: This snippet demonstrates how to create a channel using a channel ID with the Stream Chat client.  It initializes a channel instance with a channel type, ID, and optional data such as the channel name.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel(channel_type, 'channel_id', {\n  name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Reply Component Implementation in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to replace the default `Reply` UI component with a custom component (`CustomReply`) within the `Channel` component. This allows for overriding the default rendering of parent message previews for quoted messages in Stream Chat React Native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/reply.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel Reply={CustomReply} />\n```\n\n----------------------------------------\n\nTITLE: Defining Local Event Type Example (TSX)\nDESCRIPTION: This snippet demonstrates defining a LocalEventType as a Record<string, unknown>, enabling storage of various custom event properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalEventType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Custom Attach Button with Action Sheet (React Native)\nDESCRIPTION: This example showcases using `@expo/react-native-action-sheet` to present an action sheet when the attachment button is pressed. The action sheet provides options for the user to select attachments from the photo library, camera, or files.  This code imports and uses `ActionSheetProvider` and `useActionSheet` from `@expo/react-native-action-sheet`. The highlighted lines are specific to the action sheet setup and usage.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel } from 'stream-chat-react-native';\nimport { ActionSheetProvider, useActionSheet } from '@expo/react-native-action-sheet';\n\nconst CustomAttachButton = () => {\n  const { showActionSheetWithOptions } = useActionSheet();\n\n  const onPressHandler = () => {\n    // Same interface as https://facebook.github.io/react-native/docs/actionsheetios.html\n    showActionSheetWithOptions(\n      {\n        cancelButtonIndex: 3,\n        destructiveButtonIndex: 3,\n        options: ['Photo Library', 'Camera', 'Files', 'Cancel'],\n      },\n      buttonIndex => {\n        switch (buttonIndex) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n\n  return <AttachButton handleOnPress={onPressHandler} />;\n};\n\n<ActionSheetProvider>\n  <Channel AttachButton={CustomAttachButton} />\n</ActionSheetProvider>;\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadContext using useThreadContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ThreadContext using the useThreadContext hook provided by the stream-chat-react-native library. This hook simplifies accessing the ThreadContext values within a functional component. It requires importing useThreadContext from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/thread-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadContext } from 'stream-chat-react-native';\n\nconst value = useThreadContext();\n```\n\n----------------------------------------\n\nTITLE: Override camera handler - TypeScript\nDESCRIPTION: This code snippet showcases how to override the default camera handler in Stream Chat React Native using `react-native-image-picker` instead of the default `react-native-image-crop-picker`. It imports `registerNativeHandlers` from `stream-chat-react-native-core` and `launchCamera` from `react-native-image-picker`. The `takePhoto` handler is overridden to use `launchCamera` to capture a photo, handling the response and resolving with the appropriate image information or a cancelled status.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/native_handlers.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerNativeHandlers } from 'stream-chat-react-native-core';\nimport { launchCamera } from 'react-native-image-picker';\n\nregisterNativeHandlers({\n  takePhoto: () =>\n    new Promise((resolve, reject) => {\n      launchCamera(\n        {\n          cameraType: 'back',\n        },\n        response => {\n          if (response.errorMessage) {\n            resolve({ cancelled: true });\n            return;\n          }\n\n          const photo = response?.assets?.[0];\n          if (photo?.height && photo.width && photo.uri) {\n            resolve({\n              cancelled: false,\n              height: photo.height,\n              source: 'camera',\n              uri: photo.uri,\n              width: photo.width,\n            });\n          }\n\n          resolve({ cancelled: true });\n        },\n      );\n    }),\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Keyboard Handling with KeyboardCompatibleView - TSX\nDESCRIPTION: This code snippet demonstrates how to create a custom `KeyboardCompatibleView` component in React Native, adjusting the keyboard vertical offset based on the SafeAreaInsets.  It checks the platform (Android vs iOS) and applies platform-specific adjustments. It relies on `react-native-safe-area-context` for safe area insets and `stream-chat-react-native` for the base `KeyboardCompatibleView` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/keyboard.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {Platform} from 'react-native';\nimport {useSafeAreaInsets} from 'react-native-safe-area-context';\nimport {KeyboardCompatibleView} from 'stream-chat-react-native';\n\nexport const CustomKeyboardCompatibleView = ({children}) => {\n  const insets = useSafeAreaInsets();\n\n  if (Platform.OS === 'android') {\n    return children;\n  }\n\n  const iosVerticalOffset = insets.bottom > 0 ? 60 : 0;\n\n  return (\n    <KeyboardCompatibleView\n      keyboardVerticalOffset={iosVerticalOffset}>\n      {children}\n    </KeyboardCompatibleView>\n  );\n};\n\n/** In your app */\n<Channel\n  KeyboardCompatibleView={CustomizedKeyboardView}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Configure Android Location Permissions\nDESCRIPTION: This XML snippet adds the necessary permissions to the AndroidManifest.xml file to request access to the device's location. `ACCESS_FINE_LOCATION` provides precise location, while `ACCESS_COARSE_LOCATION` provides less accurate location information.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Debugging Re-renders in Custom Components - React Native\nDESCRIPTION: This snippet shows how to add a console log to a custom component to identify potential performance issues related to re-renders when accessing the `PaginatedMessageListContext`.  This helps in debugging performance bottlenecks.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/custom_components.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n  console.log('Render.');\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Vertical Offset for Channel Component\nDESCRIPTION: This snippet demonstrates how to set the `keyboardVerticalOffset` prop on the `Channel` component to account for the header height in React Navigation. This ensures that the keyboard doesn't obscure the input field. It utilizes the `useHeaderHeight` hook from `@react-navigation/stack`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n  const headerHeight = useHeaderHeight();\n\n  <Channel keyboardVerticalOffset={headerHeight}>\n```\n\n----------------------------------------\n\nTITLE: Custom AttachButton with ActionSheet - React Native (TSX)\nDESCRIPTION: This snippet shows how to integrate `@expo/react-native-action-sheet` with the custom AttachButton to display attachment options.  It uses useActionSheet to show the action sheet.  It requires @expo/react-native-action-sheet, AttachButton, and Channel.  It outputs an action sheet with options to select attachments from Photo Library, Camera, or Files.  The actions within the action sheet are placeholders.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel } from 'stream-chat-react-native';\nimport { ActionSheetProvider, useActionSheet } from '@expo/react-native-action-sheet';\n\nconst CustomAttachButton = () => {\n  const { showActionSheetWithOptions } = useActionSheet();\n\n  const onPressHandler = () => {\n    // Same interface as https://facebook.github.io/react-native/docs/actionsheetios.html\n    showActionSheetWithOptions(\n      {\n        cancelButtonIndex: 3,\n        destructiveButtonIndex: 3,\n        options: ['Photo Library', 'Camera', 'Files', 'Cancel'],\n      },\n      buttonIndex => {\n        switch (buttonIndex) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n\n  return <AttachButton handleOnPress={onPressHandler} />;\n};\n\n<ActionSheetProvider>\n  <Channel AttachButton={CustomAttachButton} />\n</ActionSheetProvider>;\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Object with Attachments (JavaScript)\nDESCRIPTION: This snippet defines a JavaScript object representing a message with attachments.  The `attachments` property is an array of objects, each defining a different type of attachment (image and file).  The type property determines the default rendering component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageObject = {\n  id: '12312jh3b1jh2b312',\n  text: 'This is my test message!',\n  attachments: [\n    {\n      type: 'image',\n      thumb_url: '',\n    },\n    {\n      type: 'file',\n      asset_url: '',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Disable Autocomplete Triggers in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to disable the default autocomplete triggers (slash commands, mentions, emojis) within the `Channel` component by overriding the `autoCompleteTriggerSettings` prop and setting the `hasCommands` prop to false. This example removes all autocomplete suggestions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  autoCompleteTriggerSettings={() => ({})}\n  channel={channel}\n  hasCommands={false}\n  keyboardVerticalOffset={headerHeight}\n  thread={thread}\n>\n  {/* Underlying components inside */}\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Passing FlatList Props to ChannelList - TypeScript\nDESCRIPTION: This code snippet demonstrates how to pass additional props to the underlying FlatList component within the ChannelList component in Stream Chat React Native. It sets the `bounces` property to `true` on the FlatList. This allows customization of the FlatList's behavior and appearance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel-list/props/additional_flat_list_props.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<ChannelList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Using AutoCompleteSuggestionList with Channel - TSX\nDESCRIPTION: This snippet demonstrates how to use the AutoCompleteSuggestionList component within the Channel component of the stream-chat-react-native library. It shows how to define a custom AutoCompleteSuggestionList component and pass it to the Channel component using the AutoCompleteSuggestionList prop.  No specific dependencies are required beyond the stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/autocomplete_suggestion_list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionList } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionListComponent = () => <AutoCompleteSuggestionList />\n\n<Channel AutoCompleteSuggestionList={AutoCompleteSuggestionListComponent} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Message List\nDESCRIPTION: This snippet adds the MessageList component to the Channel component. When a channel is selected, the MessageList component is rendered within the Channel. It depends on the Channel and Chat components for proper context. The MessageList component has no required props, and should function properly out of the box.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel}>\n            <MessageList />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Wrapping App Entry Point with GestureHandlerRootView\nDESCRIPTION: This JavaScript snippet demonstrates how to wrap the entry point of the React Native application with the `GestureHandlerRootView` component from the `react-native-gesture-handler` library. This is essential for gesture handling to work correctly across the app. The entry point is typically found in `index.js` or `App.tsx`, or `app/_layout.js` if using Expo Router v3.x.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\n\nexport default function App() {\n  return <GestureHandlerRootView style={{ flex: 1 }}>{/* content */}</GestureHandlerRootView>;\n}\n```\n\n----------------------------------------\n\nTITLE: Querying Channel List - Typescript\nDESCRIPTION: This snippet shows how to query channels using the `queryChannels` API of the Stream Chat client. It includes filtering, sorting, and options for watching and state management.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = { type: 'messaging', members: { $in: ['thierry'] } };\nconst sort = [{ last_message_at: -1 }];\n\nconst channels = await chatClient.queryChannels(filter, sort, {\n  watch: true, // this is the default\n  state: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageInputContext with useContext in React Native\nDESCRIPTION: This code snippet demonstrates how to access message input functionalities using the useContext hook with the MessageInputContext in a Stream Chat React Native application. It imports the MessageInputContext from the 'stream-chat-react-native' library and then uses useContext to retrieve sendMessage and toggleAttachmentPicker functions.  These functions can be used to send messages and toggle the attachment picker respectively. This snippet requires the stream-chat-react-native library to be installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/message-input-context.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from 'react';\nimport { MessageInputContext } from 'stream-chat-react-native';\n\nconst { sendMessage, toggleAttachmentPicker } = useContext(MessageInputContext);\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Editing State Header - TSX\nDESCRIPTION: This code snippet shows how to create a custom header for the editing state in `MessageInput` using the `Channel` component and the `InputEditingStateHeader` prop. It demonstrates how to access `clearEditingState` and `resetInput` from `useMessageInputContext` to manage the editing state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputEditingStateHeader = () => {\n  const { clearEditingState, resetInput } = useMessageInputContext();\n  return (\n    <View>\n      <Text>Editing Header</Text>\n      <Button\n        onPress={() => {\n          clearEditingState();\n          resetInput();\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputEditingStateHeader={CustomInputEditingStateHeader}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelContext with useContext in React Native\nDESCRIPTION: This snippet demonstrates how to consume the ChannelContext using the useContext hook from React in a React Native application.  It imports ChannelContext from stream-chat-react-native and extracts lastRead, reloadChannel, and watcherCount values.  The Channel component provides ChannelContext to its children.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channel-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChannelContext } from 'stream-chat-react-native';\n\nconst { lastRead, reloadChannel, watcherCount } = useContext(ChannelContext);\n```\n\n----------------------------------------\n\nTITLE: Adding threadList Prop to Channel Component - React Native\nDESCRIPTION: This code snippet demonstrates how to add the required `threadList` prop to the `Channel` component when using the `Thread` component in Stream Chat React Native. This is a necessary step when upgrading from v3 to v4 if you're using the `Thread` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel channel={channel} thread={thread} threadList>\n  <Thread />\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Disabling DateTime Translations\nDESCRIPTION: Shows how to disable date-time translations in Stream components.  The `disableDateTimeTranslations` option, when set to true, will enforce English as the language for date-times.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// No code example provided for disableDateTimeTranslations as it's a simple boolean setting.\n```\n\n----------------------------------------\n\nTITLE: Accessing the Client via useChatContext\nDESCRIPTION: This snippet shows how to access the Stream Chat client within a component wrapped by the `Chat` component using the `useChatContext` hook. This provides access to the client instance managed by the Stream Chat React Native UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Default Type Definitions in stream-chat-react-native (TSX)\nDESCRIPTION: This code shows the default type definitions in `stream-chat-react-native` for attachments, channels, commands, events, messages, reactions, and users. These defaults can be extended to include custom data fields relevant to your application. For instance, the `DefaultChannelType` and `DefaultUserType` include an optional `image` field, which is a custom field already used by the SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultAttachmentType = Record<string, unknown>;\ntype DefaultChannelType = Record<string, unknown> & {\n  image?: string;\n};\ntype DefaultCommandType = string & {};\ntype DefaultEventType = Record<string, unknown>;\ntype DefaultMessageType = Record<string, unknown>;\ntype DefaultReactionType = Record<string, unknown>;\ntype DefaultUserType = Record<string, unknown> & {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Adding a new language to Streami18n\nDESCRIPTION: This code snippet demonstrates how to add a new language (Polish - 'pl') to the `Streami18n` instance using the `registerTranslation` method. It registers translations for specific UI strings. It relies on the `Streami18n` class from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\nstreami18n.registerTranslation('pl', {\n  'Copy Message': 'Kopiuj wiadomość',\n  'Delete Message': 'Usuń wiadomość',\n  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} i {{ secondUser }} piszą...',\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding timestampTranslationKey prop - TSX\nDESCRIPTION: This TSX snippet shows how to override the default translation key for a timestamp component using the `timestampTranslationKey` prop. The `MessageTimestamp` component is wrapped in a custom component that passes a custom translation key, allowing for specific formatting configurations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/date-time-formatting.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nimport { MessageTimestampProps, MessageTimestamp } from 'stream-chat-react-native';\n\nconst CustomMessageTimestamp = (props: MessageTimestampProps) => (\n  <MessageTimestamp {...props} timestampTranslationKey='customTimestampTranslationKey' />\n);\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Content and Buttons - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the Poll component within a Stream Chat channel. It overrides the default Poll header and modifies the behavior of the buttons at the bottom of the poll using the PollContent prop on the Channel component.  It reuses default buttons and alters the ViewResultsButton to display an alert instead of opening the modal.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  // highlight-next-line\n  PollContent,\n} from 'stream-chat-react-native';\n\n// highlight-start\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      <ViewResultsButton\n        onPress={({ message, poll }) => Alert.alert(`Message ID: ${message.id} and Poll ID: ${poll.id}`)}\n      />\n      <EndVoteButton />\n    </>\n  );\n};\n\nconst MyPollContent = () => <PollContent PollHeader={() => null} PollButtons={MyPollButtons} />;\n// highlight-end\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        // highlight-next-line\n        <Channel channel={channel} PollContent={MyPollContent}>\n          <ChannelHeader />\n          <MessageList />\n          <MessageInput />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Double-Tap Reaction (TSX)\nDESCRIPTION: This code implements an Instagram-style double-tap reaction on a message. It uses `react-native-gesture-handler` and `react-native-reanimated` to detect double taps and trigger the `handleToggleReaction` function. The `useAnimatedGestureHandler` hook manages the double-tap gesture and calls the appropriate function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomMessage = (props: MessageSimpleProps) => {\n  const doubleTapRef = useRef(null);\n  const { message, handleToggleReaction } = useMessageContext();\n\n  const _onDoubleTap = useAnimatedGestureHandler<TapGestureHandlerGestureEvent>(\n    {\n      onActive: () => {\n        console.log('double tapped')\n        runOnJS(handleToggleReaction)('love')\n      },\n    },\n    [message],\n  );\n\n  return (\n    <TapGestureHandler\n      waitFor={doubleTapRef}>\n      <Animated.View>\n        <TapGestureHandler\n          ref={doubleTapRef}\n          numberOfTaps={2}\n          onHandlerStateChange={_onDoubleTap}>\n          <Animated.View>\n            <MessageSimple {...props} />\n          </Animated.View>\n        </TapGestureHandler>\n      </Animated.View>\n    </TapGestureHandler>\n  );\n}\n\n<Channel\n  channel={channel}\n  MessageSimple={CustomMessage}\n>\n```\n\n----------------------------------------\n\nTITLE: Applying Generics to MessageList Component (TSX)\nDESCRIPTION: This snippet demonstrates how to apply the `StreamChatGenerics` to the `MessageList` component. Applying generics directly allows the custom message type and other generics to be available to custom components, like a custom Message component in this example.  This ensures type safety when accessing custom message properties within the component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<MessageList<StreamChatGenerics>\n  onThreadSelect={thread => {\n    /** Set thread and navigate to thread screen */\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatList Ref with setFlatListRef in React Native\nDESCRIPTION: This example demonstrates how to gain access to the underlying FlatList ref within the MessageList component using the setFlatListRef prop.  It uses useRef to store the ref and then assigns the ref to the current property.  It requires the useRef hook from React.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-list.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst flRef = useRef();\n\n<MessageList setFlatListRef={ref => (flRef.current = ref)} />;\n```\n\n----------------------------------------\n\nTITLE: Adding react-native-quick-sqlite dependency\nDESCRIPTION: This code snippet demonstrates how to add the `react-native-quick-sqlite` dependency to your project and install the necessary pods. This dependency is required for offline support in the React Native Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/offline-support.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  yarn add react-native-quick-sqlite\n  npx pod-install\n```\n\n----------------------------------------\n\nTITLE: Updating Thread component with thread prop - TSX\nDESCRIPTION: This snippet illustrates how to keep the `Thread` component updated with the `thread` state. This is essential for ensuring the correct context. The `thread` prop is consistently passed to the `Channel` component, even when it's being used for a channel, to keep these components synchronized. The `onThreadDismount` prop resets the thread state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel channel={channel} thread={thread} threadList>\n  <Thread onThreadDismount={() => setThread(null)} />\n  </Channel>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Reaction to Existing Reaction Data (TSX)\nDESCRIPTION: This code adds a custom reaction to the existing `reactionData` array. It uses the spread operator to create a new array and includes the `StreamReaction` component defined earlier. This allows extending the supported reactions in Stream Chat.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst newReactionData = [...reactionData, { type: 'stream', Icon: StreamReaction }];\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamChat Client with getInstance - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Stream Chat client using the `getInstance` method.  It imports the `StreamChat` class from the 'stream-chat' package and then calls `StreamChat.getInstance` with your API key. This method is the preferred approach, as it acts as a singleton ensuring only one StreamChat instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_0\n\nLANGUAGE: ts\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User from Stream Chat - Typescript\nDESCRIPTION: This snippet demonstrates how to disconnect a user from Stream Chat using the disconnectUser method. This method removes the current user's connection from the Stream Chat service. No parameters are required.  It is important to disconnect a user to free up resources and prevent unexpected behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Initializing ChannelList in React Native\nDESCRIPTION: This code snippet demonstrates how to implement the ChannelList component from stream-chat-react-native. It requires the StreamChat instance to be initialized and a user to be connected.  The ChannelList displays available channels for the connected user.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with Generics (TSX)\nDESCRIPTION: This snippet demonstrates how to initialize the Stream Chat client with TypeScript generics. It's crucial to apply the correct generics to the client when instantiated to ensure type safety for custom data fields. The generics define the types for customizable fields like attachments, channels, commands, events, messages, reactions, and users.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = StreamChat.getInstance<StreamChatGenerics>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Member Record Type - TypeScript\nDESCRIPTION: Defines the structure of a record containing channel member information, indexed by userId. It specifies the type for each member's properties like ban status, timestamps, roles, moderator status and user object. It uses a generic type UserType for custom user properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/channel-context/members.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRecord<\n  string, // userId\n  {\n    banned?: boolean;\n    created_at?: string;\n    invite_accepted_at?: string;\n    invite_rejected_at?: string;\n    invited?: boolean;\n    is_moderator?: boolean;\n    role?: string;\n    shadow_banned?: boolean;\n    updated_at?: string;\n    user?: UserResponse<UserType>;\n    user_id?: string;\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Filtering Channels by Members in Stream Chat - Typescript\nDESCRIPTION: This code snippet demonstrates how to construct a filter object to query channels where users 'vishal' or 'jaap' are members. The filter object is used with the Stream Chat client query function.  It includes the 'type' and 'members' properties to narrow down the search.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel-list/props/filters.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = {\n  type: 'messaging',\n  members: {\n    $in: ['vishal', 'jaap'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageContext with useMessageContext hook - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the MessageContext using the useMessageContext hook provided by the 'stream-chat-react-native' library.  It imports the useMessageContext hook and extracts relevant properties such as isMyMessage, message, and files. This offers an alternative approach to accessing message-related information within child components of the Message component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/message_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageContext } from 'stream-chat-react-native';\n\nconst { isMyMessage, message, files } = useMessageContext();\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime Format with Day.js\nDESCRIPTION: Demonstrates how to override the DateTime format using a Day.js object. Requires installing `dayjs` and locale files. The `DateTimeParser` option is used to provide the custom Day.js instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport Dayjs from 'dayjs';\n\nimport 'dayjs/locale/nl';\nimport 'dayjs/locale/it';\n// or if you want to include all locales\nimport 'dayjs/min/locales';\n\nconst i18n = new Streami18n({\n  language: 'nl',\n  DateTimeParser: Dayjs,\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Channel ID - Typescript\nDESCRIPTION: This snippet shows how to create a channel instance using a channel ID. The `client.channel` method is called with the channel type ('messaging') and a channel ID ('the_park'), along with optional data (name).  The create() call must be made separately to persist the channel on the server.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel('messaging', 'the_park', {\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Using withChannelContext HOC with Generics (TSX)\nDESCRIPTION: This snippet demonstrates how to use the `withChannelContext` Higher Order Component (HOC) with generics. Because TypeScript does not support partial type inference, when using HOCs you must explicitly provide the props for the wrapped component in addition to the StreamChatGenerics type.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nwithChannelContext<MyComponentProps, StreamChatGenerics>(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Filtering Channels with customChannelFilterFunction - React Native\nDESCRIPTION: This code snippet demonstrates how to use the `channelRenderFilterFn` prop on the ChannelList component to apply custom filtering logic. This prop is used to control which channels are displayed in the list, and it can filter channels based on type, custom fields, or other criteria.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-list.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst customChannelFilterFunction = (channels: Channel[]) => {\n  return channels.filter(/** your custom filter logic */);\n};\n\n<ChannelList channelRenderFilterFn={customChannelFilterFunction} filters={filters} />;\n```\n\n----------------------------------------\n\nTITLE: Providing Stream Chat Client to UI Components - TSX\nDESCRIPTION: This snippet demonstrates how to provide the Stream Chat client to the UI components using the `Chat` component. The `client` prop is used to pass the client instance.  The UI components then access the client via React's `context` API.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Reaction Data - TSX\nDESCRIPTION: This code defines an array of `ReactionData` objects, each representing a custom reaction.  Each object includes an `Icon` component (representing the reaction's visual) and a `type` string (identifying the reaction).  This data is intended for use with the `supportedReactions` prop on the `Channel` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport const reactionData: ReactionData[] = [\n  {\n    Icon: LoveReaction,\n    type: 'love',\n  },\n  {\n    Icon: ThumbsUpReaction,\n    type: 'like',\n  },\n  {\n    Icon: ThumbsDownReaction,\n    type: 'sad',\n  },\n  {\n    Icon: LOLReaction,\n    type: 'haha',\n  },\n  {\n    Icon: WutReaction,\n    type: 'wow',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Consuming OverlayContext with useOverlayContext hook - TSX\nDESCRIPTION: This code snippet shows how to use the useOverlayContext hook, provided by the library, to access the OverlayContext. It simplifies the process of accessing context values, specifically the setOverlay function in this case. This hook provides a more concise way to consume the context compared to the standard useContext hook.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/overlay_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useOverlayContext } from 'stream-chat-react-native';\n\nconst { setOverlay } = useOverlayContext();\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageInput Layout in React Native\nDESCRIPTION: This code demonstrates how to replace the default MessageInput component in Stream Chat React Native with a custom implementation. It includes a full-width input box, buttons for attaching files, opening command pickers, and sending messages.  The send button is disabled when the input box is empty.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Channel,\n  Chat,\n  ImageUploadPreview,\n  OverlayProvider,\n  AutoCompleteInput,\n  useMessageInputContext,\n} from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nconst CustomInput = props => {\n  const { sendMessage, text, toggleAttachmentPicker, openCommandsPicker } = useMessageInputContext();\n\n  return (\n    <View style={styles.fullWidth}>\n      <ImageUploadPreview />\n      <FileUploadPreview />\n      <View style={[styles.fullWidth, styles.inputContainer]}>\n        <AutoCompleteInput />\n      </View>\n      <View style={[styles.fullWidth, styles.row]}>\n        <Button title='Attach' onPress={toggleAttachmentPicker} />\n        <Button title='Commands' onPress={openCommandsPicker} />\n        <Button title='Send' onPress={sendMessage} disabled={!text} />\n      </View>\n    </View>\n  );\n};\n\nexport const ChannelScreen = ({ channel }) => {\n  const [channel, setChannel] = useState();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} Input={CustomInput}>\n            {/** App components */}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  flex: { flex: 1 },\n  fullWidth: {\n    width: '100%',\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  inputContainer: {\n    height: 40,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing ChannelList with Filters, Sort, Options, and onSelect - TSX\nDESCRIPTION: This code snippet demonstrates how to use the ChannelList component with filters, sort options, and an onSelect handler for navigation. It showcases the basic setup within the StreamChat context and OverlayProvider. This setup is crucial for the ChannelList to function correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/channel_list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst filters = { members: { $in: [ 'vishal', 'lucas', 'neil' ] } };\nconst sort = { last_updated: -1 };\nconst options = { limit: 20, messages_limit: 30 };\n\nexport const App = () =>\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList\n        filters={filters}\n        sort={sort}\n        options={options}\n        onSelect={(channel) => /** navigate to channel screen */ }\n      />\n    </Chat>\n  </OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Editing State Header in MessageInput - TSX\nDESCRIPTION: This code snippet demonstrates how to create a custom editing state header in the MessageInput component using the `InputEditingStateHeader` prop of the `Channel` component. It shows a simple header with a \"Close\" button that clears the editing state and resets the input field using the `useMessageInputContext` hook.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputEditingStateHeader = () => {\n  const { clearEditingState, resetInput } = useMessageInputContext();\n  return (\n    <View>\n      <Text>Editing Header</Text>\n      <Button\n        onPress={() => {\n          clearEditingState();\n          resetInput();\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputEditingStateHeader={CustomInputEditingStateHeader}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Android Category Configuration XML\nDESCRIPTION: Configures the category in AndroidManifest.xml to handle deep links. It specifies the default and browsable categories that the app will respond to.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/deeplinking.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<category android:name=\"android.intent.category.DEFAULT\" />\n<category android:name=\"android.intent.category.BROWSABLE\" />\n```\n\n----------------------------------------\n\nTITLE: Theming Message Avatar Size in React Native\nDESCRIPTION: This code snippet shows how to customize the message avatar size using the theming system in Stream Chat React Native. A theme object is created with a nested avatar object, and the BASE_AVATAR_SIZE is set to 30. This theme can then be applied to the Stream Chat provider to affect the appearance of the avatar.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/message_avatar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  avatar: {\n    BASE_AVATAR_SIZE: 30,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageFooter in Stream Chat React Native (TSX)\nDESCRIPTION: This snippet demonstrates how to customize the MessageFooter component in the Stream Chat React Native SDK. It shows how to override the default formatting of the date/time stamp and integrate the custom component into the Channel component. The formattedDate prop allows you to inject the date string you want into the footer. The component is passed as a prop to the Channel component. The message object contains the created_at timestamp.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-footer.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, MessageFooter } from 'stream-chat-react-native';\n\nconst getDateTimeStamp = message => `My new date is ${message.created_at}`;\n\nconst CustomMessageFooter = ({ message }) => {\n  const dateFormatted = useMemo(() => getDateTimeStamp(message), [message.created_at]);\n\n  <MessageFooter formattedDate={dateFormatted} />;\n};\n\n<Channel MessageFooter={CustomMessageFooter} />;\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Header - JSX\nDESCRIPTION: This code snippet demonstrates how to customize the header component of the autocomplete suggestion list in Stream Chat React Native. It uses the `AutoCompleteSuggestionHeader` prop in the `Channel` component to render different headers based on the trigger type (command, emoji, or default). The component receives `queryText` and `triggerType` as props. It is essential to return the default `AutoCompleteSuggestionHeader` for trigger types that don't require customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-auto-complete-suggestion-list.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AutoCompleteSuggestionHeader } from 'stream-chat-react-native';\nimport { Text } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionHeader={({ queryText, triggerType }) => {\n    if (triggerType === 'command') {\n      return <Text>Command Header Component</Text>;\n    } else if (triggerType === 'emoji') {\n      return <Text>Emoji Header Component</Text>;\n    } else {\n      return <AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />;\n    }\n  }}\n>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Basic Thread Component Usage in React Native\nDESCRIPTION: This snippet demonstrates the basic implementation of the Thread component within a chat application using OverlayProvider, Chat, Channel, and Thread components. It requires the client and channel objects to be properly initialized and passed as props. The `messageId` prop enables the thread view.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/thread.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider>\n  <Chat client={client}>\n    <Channel channel={channel} thread={messageId} threadList>\n      <Thread />\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Update Stream App Settings with Firebase Config\nDESCRIPTION: Updates the Stream Chat app settings with Firebase configuration, including the server key and notification templates. This enables Stream to send push notifications via Firebase. The notification template defines the structure of the push notification message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v1.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance(API_KEY, API_SECRET);\nawait client.updateAppSettings({\n  firebase_config: {\n    server_key: 'server_key',\n    notification_template: `{\"message\":{\"notification\":{\"title\":\"New messages\",\"body\":\"You have {{ unread_count }} new message(s) from {{ sender.name }}\"},\"android\":{\"ttl\":\"86400s\",\"notification\":{\"click_action\":\"OPEN_ACTIVITY_1\"}}}}`,\n    data_template: `{\"sender\":\"{{ sender.id }}\",\"channel\":{\"type\": \"{{ channel.type }}\",\"id\":\"{{ channel.id }}\"},\"message\":\"{{ message.id }}\"}`,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disable Message Action - Stream Chat React Native (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to disable a specific message action (e.g., 'pinMessage') in Stream Chat React Native.  It involves creating a custom `MessageActionListItem` component that checks the `actionType` and returns `null` if it matches the action to be disabled, otherwise renders the default `MessageActionListItem` component. The custom component is then passed to the `OverlayProvider` to override the default message action behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_actions_customization.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessageActionListItem, OverlayProvider, useMessageActionAnimation } from 'stream-chat-react-native';\n\nconst CustomMessageActionListItem = ({ action, actionType, ...rest }) => {\n  if (actionType === 'pinMessage') {\n    return null;\n  } else {\n    return <MessageActionListItem action={action} actionType={actionType} {...rest} />;\n  }\n};\n\n<OverlayProvider MessageActionListItem={CustomMessageActionListItem}>\n  {/* Underlying Channel, MessageList and Message components */}\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Using ImageGalleryContext to open image viewer - TSX\nDESCRIPTION: This snippet demonstrates how to use ImageGalleryContext in combination with OverlayContext to open an image viewer. It sets the messages to be displayed, selects a specific message, and then sets the overlay to 'gallery'. This is usually triggered by an onPress event on an image in the chat.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/image-gallery-context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { messages, setMessages, setSelectedMessage } = useImageGalleryContext();\nconst { setOverlay } = useOverlayContext();\n\nonPress={() => {\n  setMessages(messagesWithImage);\n  setSelectedMessage({\n    messageId: selectedItem.messageId,\n    url: selectedItem.uri,\n  });\n  setOverlay('gallery');\n}}\n```\n\n----------------------------------------\n\nTITLE: Consuming AttachmentPickerContext using useContext\nDESCRIPTION: This snippet demonstrates how to consume the AttachmentPickerContext using the useContext hook in React. It imports the AttachmentPickerContext from the stream-chat-react-native library and uses it to access the openPicker and closePicker functions. These functions are used to open and close the attachment picker bottom sheet.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/attachment-picker-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { AttachmentPickerContext } from 'stream-chat-react-native';\n\nconst { openPicker, closePicker } = useContext(AttachmentPickerContext);\n```\n\n----------------------------------------\n\nTITLE: Setting Language Based on Device Locale\nDESCRIPTION: Illustrates how to set the language based on the user's preferred locale using the `react-native-localize` package. The code retrieves the user's locale and sets the Streami18n language accordingly.  Requires `react-native-localize` dependency.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as RNLocalize from 'react-native-localize';\nconst streami18n = new Streami18n();\n\nconst userPreferredLocales = RNLocalize.getLocales();\n\nstreami18n.setLanguage(userPreferredLocales[0].languageCode);\n```\n\n----------------------------------------\n\nTITLE: Consuming KeyboardContext with useKeyboardContext hook - Typescript\nDESCRIPTION: This snippet shows how to consume the KeyboardContext using the useKeyboardContext hook provided by the stream-chat-react-native library. It imports the useKeyboardContext hook and then uses it to get access to the dismissKeyboard function. It requires stream-chat-react-native to be installed. The dismissKeyboard function is used to close the keyboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/keyboard-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardContext } from 'stream-chat-react-native';\n\nconst { dismissKeyboard } = useKeyboardContext();\n```\n\n----------------------------------------\n\nTITLE: Integrating ChannelBackgroundView into ChannelScreen - TSX\nDESCRIPTION: This snippet integrates the ChannelBackgroundView component into the ChannelScreen, replacing the static ImageBackground.  It passes the channelId to the ChannelBackgroundView to retrieve the appropriate background image. It depends on stream-chat-react-native, react-native and the ChannelBackgroundView Component defined previously.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-background.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst ChannelScreen = ({ channel }) => {\n  return (\n    <ThemeProvider style={theme}>\n      <Channel channel={channel}>\n        <ChannelBackgroundView channelId={channel?.id} style={{ flex: 1 }}>\n          <MessageList />\n          <MessageInput />\n        </ChannelBackgroundView>\n      </Channel>\n    </ThemeProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamChat Client with Specific Generics (TSX)\nDESCRIPTION: This code snippet demonstrates how to initialize the StreamChat client with specific generics, overriding the defaults. It shows how to specify types for ChannelType and MessageType while also setting AttachmentType, CommandType, and EventType to their default types to avoid TypeScript errors. Requires stream-chat-js.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/typescript.mdx#_snippet_2\n\nLANGUAGE: TSX\nCODE:\n```\nconst client = StreamChat.getInstance<\n  DefaultAttachmentType,\n  { image?: string; nickName?: string },\n  DefaultCommandType,\n  DefaultEventType,\n  { isAdminMessage?: boolean }\n>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Consuming TypingContext with useTypingContext hook - Typescript\nDESCRIPTION: This snippet demonstrates how to use the useTypingContext hook to consume the TypingContext within a React component. It imports the useTypingContext hook from 'stream-chat-react-native' and then calls the hook to retrieve the typing object.  The typing object contains information about users who are currently typing in the channel. This hook is provided by the library to simplify access to the TypingContext. It is expected that the component is a child of the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/typing_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTypingContext } from 'stream-chat-react-native';\n\nconst { typing } = useTypingContext();\n```\n\n----------------------------------------\n\nTITLE: Getting Translations - Typescript\nDESCRIPTION: This code snippet shows how to retrieve the current translation dictionaries for all available languages using the `getTranslations()` method. The method returns an object where keys are language codes and values are the corresponding translation dictionaries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst translations = streami18n.getTranslations();\n```\n\n----------------------------------------\n\nTITLE: Rendering Show All Comments Button in React Native\nDESCRIPTION: This code snippet shows how to render a ShowAllCommentsButton component from the stream-chat-react-native library. The onPress handler receives message and poll objects and logs their IDs to the console when the button is pressed. It requires the stream-chat-react-native package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShowAllCommentsButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <ShowAllCommentsButton\n    onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageMenu Component\nDESCRIPTION: This snippet renders the MessageMenu component. This component provides a menu of actions that can be performed on a message, such as editing, deleting, or replying. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_11\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageMenu />\n```\n\n----------------------------------------\n\nTITLE: Defining Query Options for Stream Chat Channels - Typescript\nDESCRIPTION: This code snippet demonstrates how to define an options object for use with the Stream Chat client's query function.  Specifically, it sets the `message_limit` property to 100, which will limit the number of messages returned for each channel. The `options` object is passed as a parameter to the `query_channels` function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel-list/props/options.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst options = { message_limit: 100 };\n```\n\n----------------------------------------\n\nTITLE: Using AutoCompleteSuggestionHeader Component in Channel - TSX\nDESCRIPTION: This snippet demonstrates how to use and customize the AutoCompleteSuggestionHeader component within a Channel component in stream-chat-react-native.  It imports the necessary components from 'stream-chat-react-native' and defines a custom header component. This custom component is then passed to the AutoCompleteSuggestionHeader prop of the Channel component, overriding the default header.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/autocomplete-suggestion-header.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionHeader } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionHeaderComponent = () => <AutoCompleteSuggestionHeader />\n\n<Channel AutoCompleteSuggestionHeader={AutoCompleteSuggestionHeaderComponent} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread component for threaded messages - React Native\nDESCRIPTION: This code snippet adds the `Thread` component for displaying threaded messages.  It introduces a `thread` state variable, and the `onThreadSelect` prop on the `MessageList` allows for management of the thread state. The `thread` prop on `Channel` is used to determine whether to display the `Thread` component or the `MessageList` and `MessageInput` components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, MessageType, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [thread, setThread] = useState<MessageType | null>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0} thread={thread}>\n            {thread ? (\n              <Thread />\n            ) : (\n              <>\n                <MessageList onThreadSelect={setThread} />\n                <MessageInput />\n              </>\n            )}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming TranslationContext with useTranslationContext hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume the TranslationContext using the useTranslationContext hook provided by stream-chat-react-native. It imports useTranslationContext from the library and directly accesses the translation functions 't' and 'tDateTimeParser'.  This hook simplifies access to the translation context, offering a more concise approach.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/translation-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'stream-chat-react-native';\n\nconst { t, tDateTimeParser } = useTranslationContext();\n```\n\n----------------------------------------\n\nTITLE: Wrap Screens with LiveLocationContextProvider\nDESCRIPTION: This TypeScript code snippet demonstrates how to integrate the `LiveLocationContextProvider` within the `Chat` component. This ensures that the live location context is available to all screens wrapped within the provider. It highlights the importance of nesting the context provider within the `Chat` component for proper functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n    <Chat client={chatClient}>\n      <LiveLocationContextProvider>\n        // ...add your screens here\n      </LiveLocationContextProvider>\n    </Chat>\n```\n\n----------------------------------------\n\nTITLE: Customizing Reply Component with Channel Prop - TSX\nDESCRIPTION: This code snippet demonstrates how to override the default `Reply` component with a custom implementation using the `Reply` prop of the `Channel` component. This allows for full control over the rendering of quoted message previews within a message list. The `CustomReply` component should be defined elsewhere and implement the desired UI and functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/reply.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel Reply={CustomReply} />\n```\n\n----------------------------------------\n\nTITLE: Custom MessageFooter and MessageStatus Components - TSX\nDESCRIPTION: This example demonstrates how to create custom `MessageFooter` and `MessageStatus` components that leverage both components and data from the `MessagesContext` and `MessageContext` respectively. It showcases the ability to compose custom UI elements from existing components within the same context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/contexts.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomMessageFooter = () => {\n  const { MessageAvatar, MessageStatus } = useMessagesContext();\n  return (\n    <View>\n      <MessageAvatar />\n      <Text>Footer</Text>\n      <MessageStatus />\n    </View>\n  );\n};\n\nconst CustomMessageStatus = () => {\n  const { message } = useMessageContext();\n  return <Text>{message.readBy}</Text>\n};\n...\n<Channel MessageFooter={CustomMessageFooter} MessageStatus={CustomMessageStatus}>\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Component with Dismount Handler - Typescript\nDESCRIPTION: This snippet illustrates how to use the `<Thread>` component and reset the `thread` state when the thread is dismounted, using the `onThreadDismount` prop. This is crucial for maintaining the correct context, especially when an `OverlayProvider` is used to manage image pickers and galleries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Chat client={chatClient} i18nInstance={streami18n}>\n  <Channel channel={channel} thread={thread}>\n    <Thread onThreadDismount={() => setThread(null)} />\n  </Channel>\n</Chat>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Theme\nDESCRIPTION: This code snippet demonstrates how to create a custom theme using the `DeepPartial` and `Theme` types from `stream-chat-react-native`.  It defines a theme that modifies the background color of the file attachment container within a message. The theme object is created using TypeScript to ensure type safety.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/theming.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { DeepPartial, Theme } from 'stream-chat-react-native';\n\nconst theme: DeepPartial<Theme> = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Custom FileAttachment Component - JSX\nDESCRIPTION: This JSX code defines a custom FileAttachment component for Stream Chat. It receives the `attachment` object as a prop and logs various properties of the attachment to the console. The component should return a custom UI for displaying file attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomFileAttachment = ({ attachment }) => {\n  console.log(attachment.mime_type);\n  console.log(attachment.title);\n  console.log(attachment.file_size);\n  console.log(attachment.actions);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MessageAction type in Typescript\nDESCRIPTION: This code snippet defines the `MessageAction` type, which represents a message action in the Stream Chat React Native SDK. It includes properties such as `action` (the function to be executed), `actionType` (an enum representing the type of action), `title` (the text displayed for the action), `icon` (an optional React element to display as an icon), and `titleStyle` (an optional style for the title text). This type is used to customize message actions in the UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_actions_customization.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MessageAction = {\n  action: () => void;\n  actionType: enum('blockUser', 'copyMessage', 'deleteMessage', 'editMessage', 'flagMessage', 'muteUser', 'pinMessage', 'selectReaction', 'reply', 'retry', 'quotedReply', 'threadReply', 'unpinMessage')\n  title: string;\n  icon?: React.ReactElement;\n  titleStyle?: StyleProp<TextStyle>;\n};\n```\n\n----------------------------------------\n\nTITLE: Defining custom timestamp formatter function - TSX\nDESCRIPTION: This TSX snippet shows how to override the default `timestampFormatter` function by providing a custom `Streami18n` instance. The custom formatter converts the timestamp to milliseconds and returns it as a string. This provides full control over the formatting logic.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/date-time-formatting.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nimport { Chat, Streami18n } from 'stream-chat-react-native';\n\nconst chatClient = 'Your Chat client here';\n\nconst i18n = new Streami18n({\n  formatters: {\n    timestampFormatter: () => (val: string | Date) => {\n      return new Date(val).getTime() + '';\n    },\n  },\n});\n\nexport const ChatApp = ({ apiKey, userId, userToken }) => {\n  return <Chat client={chatClient} i18nInstance={i18n}></Chat>;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Channel Id - TS\nDESCRIPTION: This snippet shows how to create a channel instance using a channel id, channel type and optional data. This does not create the channel on the backend, this only initializes the channel object on the client.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/client.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel(channel_type, 'channel_id', {\n  name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Filtering Image Attachments - TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter an array of message attachments to extract only those with the type 'image'. The `message.attachments` array is filtered using the `filter` method, which returns a new array containing only attachments where `a.type === 'image'` is true. The resulting array `images` contains only image attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/message-context/images.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst images = message.attachments.filter(a => a.type === 'image');\n```\n\n----------------------------------------\n\nTITLE: Customizing FileIcon in Channel Component - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the FileIcon component within the Channel component in a React Native application using stream-chat-react-native.  It imports Channel and FileIcon from the library and overrides the default FileAttachmentIcon with a customized FileIcon instance, setting the size prop to 40. This allows developers to easily adjust the appearance of file attachment icons.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/file_icon.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, FileIcon } from 'stream-chat-react-native';\n\n<Channel FileAttachmentIcon={() => <FileIcon size={40} />}\n```\n\n----------------------------------------\n\nTITLE: Accessing Vanilla Reactive State - Typescript\nDESCRIPTION: This snippet demonstrates how to access and subscribe to the reactive state of threads using the Stream Chat SDK. It showcases subscribing to the entire state, subscribing with a selector to only receive updates when specific values change, and retrieving the latest state value directly.  This provides fine-grained control over state updates and data access.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = new StreamChat(/*...*/);\n\n// calls console.log with the whole state object whenever it changes\nclient.threads.state.subscribe(console.log);\n\nlet latestThreads;\nclient.threads.state.subscribeWithSelector(\n  // called each time theres a change in the state object\n  nextValue => ({ threads: nextValue.threads }),\n  // called only when threads change (selected value)\n  ({ threads }) => {\n    latestThreads = threads;\n  },\n);\n\n// returns lastest state object\nconst state = client.threads.state.getLatestValue();\n\nconst [thread] = latestThreads;\n\n// thread instances come with the same functionality\nthread?.state.subscribe(/*...*/);\nthread?.state.subscribeWithSelector(/*...*/);\nthread?.state.getLatestValue(/*...*/);\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageContext with useContext in React - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the MessageContext using the useContext hook from React.  It imports the MessageContext from 'stream-chat-react-native' and extracts relevant properties such as isMyMessage, message, and files. This allows child components of the Message component to access message-related information.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/message_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { MessageContext } from 'stream-chat-react-native';\n\nconst { isMyMessage, message, files } = useContext(MessageContext);\n```\n\n----------------------------------------\n\nTITLE: Custom ThreadListItem Component - React Native\nDESCRIPTION: This code defines a custom ThreadListItem component in React Native for use with Stream Chat. It utilizes the useThreadListItemContext hook to access the parent message, thread, and channel, and the useThreadsContext hook to get the onThreadSelect function. The component renders a TouchableOpacity that displays the parent message's text and triggers the onThreadSelect function when pressed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/threads-context/thread-list-item.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, TouchableOpacity } from 'react-native';\nimport {\n  OverlayProvider,\n  Chat,\n  ThreadList,\n  useThreadListItemContext,\n  useThreadsContext,\n} from 'stream-chat-react-native';\n\nconst ThreadListItem = () => {\n  const { parentMessage, thread, channel } = useThreadListItemContext();\n  const { onThreadSelect } = useThreadsContext();\n\n  return (\n    <TouchableOpacity onPress={() => onThreadSelect(thread, channel)}>\n      <Text>{parentMessage?.text || 'Text not available !'}</Text>\n    </TouchableOpacity>\n  );\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <ThreadList ThreadListItem={ThreadListItem} />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions in AndroidManifest.xml (RN CLI)\nDESCRIPTION: This XML snippet shows how to configure permissions in the `AndroidManifest.xml` file to allow the application to access media images and videos on Android using React Native CLI. It includes permissions to read media images, video and external storage.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_30\n\nLANGUAGE: XML\nCODE:\n```\n  <uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\n  <uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" />\n  <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n    android:maxSdkVersion=\"32\" />\n  <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Setting the Language - JavaScript\nDESCRIPTION: This code snippet demonstrates how to set the current language for the `Streami18n` instance. The `setLanguage()` method asynchronously updates the language and returns the new translation function (`t`).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst t = await streami18n.setLanguage('nl');\n```\n\n----------------------------------------\n\nTITLE: Initializing Channel List\nDESCRIPTION: This snippet initializes the ChannelList component with Stream Chat React Native. It imports the necessary components, initializes the StreamChat client, and renders the ChannelList within the Chat and OverlayProvider components. The ChannelList displays all channels the connected user has access to.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Dark Mode\nDESCRIPTION: This code snippet demonstrates how to implement dark mode support in a `stream-chat-react-native` application. It uses the `useColorScheme` hook from `react-native` to detect the current color scheme and dynamically updates the theme based on the color scheme. `useEffect` is used to update the theme when the color scheme changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/theming.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useEffect, useState } from 'react';\nimport { useColorScheme } from 'react-native';\nimport type { DeepPartial, Theme } from 'stream-chat-react-native';\n\nexport const App = () => {\n  const colorScheme = useColorScheme();\n  const getTheme = (): DeepPartial<Theme> => ({\n    colors: colorScheme === 'dark' ? { black: '#FFFFFF' } : { black: '#000000' },\n  });\n  const [theme, setTheme] = useState(getTheme());\n\n  useEffect(() => {\n    setTheme(getTheme());\n  }, [colorScheme]);\n\n  return (\n    <OverlayProvider value={{ style: theme }}>\n      <Chat client={client}>\n        <ChannelList />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Overriding Update Message Request\nDESCRIPTION: This example illustrates how to override the update message request with the doUpdateMessageRequest prop. It demonstrates how to modify a message before updating it on the server, in this case, incrementing a counter.  The function needs to return a Promise equivalent to `client.updateMessage`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/channel.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst doUpdateMessageRequest = (channelId, messageObject) => {\n  const numberOfUpdates = (messageObject.numberOfUpdates ?? 0) + 1;\n  const messageToSend = { ...messageObject, numberOfUpdates };\n  return client.updateMessage(messageToSend);\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing ChannelList component with Stream Chat - React Native\nDESCRIPTION: This code snippet shows how to implement a basic `ChannelList` component using `stream-chat-react-native`.  It imports necessary components, initializes the StreamChat client, and renders the `ChannelList` within the `Chat` and `OverlayProvider` components. The `ChannelList` component displays all channels accessible to the connected user.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Consuming ChatContext with useChatContext Hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ChatContext using the useChatContext hook provided by the stream-chat-react-native library.  It imports the useChatContext hook and extracts the client and isOnline values.  The component must be a child of the Chat component for this hook to work.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/chat_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client, isOnline } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Applying Generics to MessageList Component (TSX)\nDESCRIPTION: This code shows how to apply the defined generics to a MessageList component, ensuring type safety throughout the component and its children. This allows custom `Message` components to receive the generics.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_17\n\nLANGUAGE: tsx\nCODE:\n```\n<MessageList<StreamChatGenerics>\n  onThreadSelect={thread => {\n    /** Set thread and navigate to thread screen */\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Top Inset for AttachmentPicker\nDESCRIPTION: This code demonstrates how to set the `topInset` for the `AttachmentPicker` using the `useHeaderHeight` hook from `@react-navigation/stack` and the `useAttachmentPickerContext` hook.  This ensures the attachment picker opens to the bottom of the navigation header.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst headerHeight = useHeaderHeight();\nconst { setTopInset } = useAttachmentPickerContext();\n\nuseEffect(() => {\n  setTopInset(headerHeight);\n}, [headerHeight]);\n```\n\n----------------------------------------\n\nTITLE: Checking Owner Role - React TSX\nDESCRIPTION: Demonstrates how to verify if the current user has owner permissions for the current channel type. It checks the channel's membership role for the 'owner' value. This check is used to grant access to owner-specific functionalities within the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channel_context.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst isOwner = channel?.state.membership.role === 'owner';\n```\n\n----------------------------------------\n\nTITLE: Custom Card Component for Location Display in TypeScript\nDESCRIPTION: This code defines a React Native component (`MapCard`) to display location information within a Stream Chat message card. It utilizes react-native-maps to render a map with a marker at the specified latitude and longitude. Additionally, it conditionally renders a 'Stop sharing' button for the message sender, allowing them to stop live location sharing via useLiveLocationContext. The primary `Card` component determines whether to render the `MapCard` based on the attachment type. Dependencies: react, react-native, react-native-maps, stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, {useMemo} from 'react';\nimport {Button, StyleSheet, useWindowDimensions} from 'react-native';\nimport MapView, {Marker} from 'react-native-maps';\nimport {\n  Channel,\n  Card as DefaultCard,\n  useMessageContext,\n  useOverlayContext,\n} from 'stream-chat-react-native';\nimport {useLiveLocationContext} from './LiveLocationContext';\nimport {StreamChatGenerics} from './types';\n\nconst MapCard = ({\n  latitude,\n  longitude,\n  ended_at,\n}: {\n  latitude: number;\n  longitude: number;\n  ended_at?: string;\n}) => {\n  const {width, height} = useWindowDimensions();\n  const aspect_ratio = width / height;\n  const {stopLiveLocation} = useLiveLocationContext();\n\n  const {isMyMessage, message} = useMessageContext();\n  const {overlay} = useOverlayContext();\n  const overlayId = message?.id;\n  // is this message shown on overlay? If yes, then don't show the button\n  const isOverlayOpen = overlay === 'message' && overlayId === message.id;\n  const showStopSharingButton = !ended_at && isMyMessage && !isOverlayOpen;\n\n  // Convert ISO date string to Date object\n  const endedAtDate = ended_at ? new Date(ended_at) : null;\n\n  // Format the date to a readable string\n  const formattedEndedAt = endedAtDate ? endedAtDate.toLocaleString() : '';\n\n  // this is to compute the zoom level and centre for the map view\n  const region = useMemo(() => {\n    const latitudeDelta = 0.02;\n    const longitudeDelta = latitudeDelta * aspect_ratio;\n\n    // For reference, check -\n    // https://github.com/react-native-maps/react-native-maps/blob/master/example/src/examples/DisplayLatLng.tsx\n    return {\n      latitude,\n      longitude,\n      latitudeDelta,\n      longitudeDelta,\n    };\n  }, [aspect_ratio, latitude, longitude]);\n\n  return (\n    <>\n      <MapView\n        region={region}\n        pitchEnabled={false}\n        rotateEnabled={false}\n        scrollEnabled={false}\n        zoomTapEnabled={false}\n        zoomEnabled={false}\n        toolbarEnabled={false}\n        style={styles.mapView}>\n        <Marker\n          coordinate={{\n            latitude,\n            longitude,\n          }}\n        />\n      </MapView>\n      {showStopSharingButton && (\n        <Button\n          title=\"Stop sharing\"\n          onPress={() => {\n            stopLiveLocation(message.id);\n          }}\n        />\n      )}\n      {ended_at && (\n        <Button title={`Ended at: ${formattedEndedAt}`} disabled={true} />\n      )}\n      {!ended_at && !showStopSharingButton && (\n        <Button title={'Live location'} disabled={true} />\n      )}\n    </>\n  );\n};\n\nconst Card: NonNullable<\n  React.ComponentProps<typeof Channel>['Card']\n> = props => {\n  const {type, ...otherProperties} = props;\n\n  if (type === 'location') {\n    // @ts-ignore\n    return <MapCard {...otherProperties} />;\n  }\n\n  return <DefaultCard {...props} />;\n};\n\nconst styles = StyleSheet.create({\n  mapView: {\n    height: 250,\n    width: 250,\n  },\n});\n\nexport default Card;\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with getInstance\nDESCRIPTION: This snippet demonstrates how to instantiate the Stream Chat client using the `getInstance` method, which ensures a single client instance. This is the preferred way to create the StreamChat client since stream-chat@2.12.0. Requires an API key.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageInputContext with useMessageInputContext Hook\nDESCRIPTION: This code snippet demonstrates how to use the `useMessageInputContext` hook to access message input functionalities in Stream Chat React Native. It imports the hook from the library and uses it to retrieve functions like `sendMessage` and `toggleAttachmentPicker`.  This approach offers a cleaner way to access context values compared to `useContext`. Requires the `stream-chat-react-native` library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/message-input-context.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useMessageInputContext } from 'stream-chat-react-native';\n\nconst { sendMessage, toggleAttachmentPicker } = useMessageInputContext();\n```\n\n----------------------------------------\n\nTITLE: Adding Spacing Between Items - React Native\nDESCRIPTION: This snippet adds spacing between ThreadList items using the additionalFlatListProps prop and the ItemSeparatorComponent. The ItemSeparatorComponent is a simple View component that adds padding to create the spacing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-thread-list.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n// ...\n\n// highlight-next-line\nconst ItemSeparatorComponent = () => <View style={{ paddingVertical: 5 }} />\n\nconst ThreadListScreen = () => {\n  const isFocused = useIsFocused();\n  const navigation = useNavigation();\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {/* it's important that the banner is also a child of <Chat /> */}\n        <CustomBanner />\n        <ThreadList\n          isFocused={isFocused}\n          {/* here we can reuse the same method as we would in the ChannelList component */}\n          onThreadSelect={(thread, channel) => {\n            navigation.navigate('ThreadScreen', {\n              thread,\n              channel,\n            });\n          }}\n          ThreadListItem={ThreadListItem}\n          // highlight-start\n          additionalFlatListProps={{\n            ItemSeparatorComponent,\n          }}\n          // highlight-end\n        />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Markdown Styles - JSX\nDESCRIPTION: Shows how to apply custom styles to markdown elements within the Message component using the theme. Demonstrates targeting specific markdown keys like heading1 and inlineCode for styling.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst themeStyle = {\n  messageSimple: {\n    content: {\n      markdown: {\n        heading1: {\n          color: 'pink',\n        },\n        inlineCode: {\n          fontSize: 10,\n        },\n      },\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Install Stream Chat React Native SDK (RN CLI)\nDESCRIPTION: This command installs the core Stream Chat React Native SDK using yarn for projects initialized with React Native CLI. It adds the necessary package to your project's dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stream-chat-react-native\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageRepliesAvatars Component\nDESCRIPTION: This snippet renders the MessageRepliesAvatars component. It likely displays the avatars of users who have replied to a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageRepliesAvatars />\n```\n\n----------------------------------------\n\nTITLE: Setting language using device locale\nDESCRIPTION: This code snippet demonstrates how to use the `react-native-localize` package to get the user's preferred locale and set the language for the chat components accordingly.  It relies on `react-native-localize` for getting locale information and `Streami18n` from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as RNLocalize from 'react-native-localize';\nconst streami18n = new Streami18n();\n\nconst userPreferredLocales = RNLocalize.getLocales();\n\nstreami18n.setLanguage(userPreferredLocales[0].languageCode);\n```\n\n----------------------------------------\n\nTITLE: Input Buttons Component\nDESCRIPTION: This JSX component, `InputButtons`, adds a \"Share Location\" button next to the input box in the chat interface. When pressed, it calls the `sendCurrentLocation` function to send the user's current location as a message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\nconst InputButtons = () => {\n  const { channel: currentChannel } = useChannelContext();\n\n  return (\n    <TouchableOpacity onPress={() => sendCurrentLocation(currentChannel)} style={{ marginRight: 10 }}>\n      <ShareLocationIcon />\n    </TouchableOpacity>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatList ref using setFlatListRef (JSX)\nDESCRIPTION: Demonstrates how to access the underlying FlatList ref using the `setFlatListRef` prop of the MessageList component.  This allows direct manipulation of the FlatList.  A `useRef` is used to store the FlatList reference.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-list.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst flRef = useRef();\n\n<MessageList setFlatListRef={ref => (flRef.current = ref)} />;\n```\n\n----------------------------------------\n\nTITLE: Overriding OverlayProvider theme - TSX\nDESCRIPTION: This code snippet shows how to customize the theme of the OverlayProvider using the `value` prop. It defines a theme object that overrides the background color of the file container within the messageSimple component. This allows for visual customization of the chat interface.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/core-components/overlay-provider.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\nconst theme = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n<OverlayProvider value={{ style: theme }}>...</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Calendar formatting in i18n JSON\nDESCRIPTION: This snippet demonstrates calendar formatting in the i18n JSON, using the `timestampFormatter` function with the `calendar` parameter set to `true`. It also shows how to customize the calendar strings using the `calendarFormats` parameter, defining formats for various relative time periods like 'lastDay', 'nextWeek', and so on.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/date-time-formatting.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"timestamp/MessageSystem\": \"{{ timestamp | timestampFormatter(calendar: true; calendarFormats: {\\\"lastDay\\\": \\\"[gestern um] LT\\\", \\\"lastWeek\\\": \\\"[letzten] dddd [um] LT\\\", \\\"nextDay\\\": \\\"[morgen um] LT\\\", \\\"nextWeek\\\": \\\"dddd [um] LT\\\", \\\"sameDay\\\": \\\"[heute um] LT\\\", \\\"sameElse\\\": \\\"L\\\"}) }}\"\n```\n\n----------------------------------------\n\nTITLE: Filtering Video Attachments - React Native (TypeScript)\nDESCRIPTION: This code snippet filters an array of attachments (`message.attachments`) to extract video file attachments. It uses the `filter` method to create a new array containing only attachments where the `type` is 'video' and the `og_scrape_url` property is falsy, effectively excluding attachments linked through URL scraping.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/message-context/videos.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst videos = message.attachments.filter(a => a.type === 'video' && !a.og_scrape_url);\n```\n\n----------------------------------------\n\nTITLE: Watching a Channel\nDESCRIPTION: This snippet shows how to watch a channel using the `watch` method.  This creates the channel (if it doesn't exist) and subscribes the client to updates on the channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.watch();\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageInputContext with useMessageInputContext hook - React Native\nDESCRIPTION: This code snippet demonstrates how to consume the MessageInputContext using the useMessageInputContext hook provided by the stream-chat-react-native library. The sendMessage and toggleAttachmentPicker functions are extracted from the hook's return value.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/message_input_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageInputContext } from 'stream-chat-react-native';\n\nconst { sendMessage, toggleAttachmentPicker } = useMessageInputContext();\n```\n\n----------------------------------------\n\nTITLE: Modifying CooldownTimer Styles via Theme - JSX\nDESCRIPTION: This code snippet demonstrates how to modify the styles of the default CooldownTimer component, which is displayed when slow mode is enabled in a channel. The styles are modified through the `ThemeProvider` using the `messageInput.cooldownTimer` keys.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n    <ThemeProvider style={{\n      {/* ... your other styles */}\n      messageInput: {\n        cooldownTimer: {\n          container: {\n            {/* ViewStyle values */}\n          },\n          text: {\n            {/* TextStyle values */}\n          }\n        }\n      }\n    }}>\n    {/* Underlying components inside */}\n    </ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Handle Incoming URLs - Objective-C++\nDESCRIPTION: These Objective-C++ methods in AppDelegate.m or AppDelegate.mm handle incoming URLs and pass them to the RCTLinkingManager. These methods are crucial for intercepting and processing deep links on iOS. They ensure that the React Native application receives and can act upon the deep link information.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/deeplinking.mdx#_snippet_2\n\nLANGUAGE: objective-c++\nCODE:\n```\n- (BOOL)application:(UIApplication *)application\n   openURL:(NSURL *)url\n   options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options\n{\n  return [RCTLinkingManager application:application openURL:url options:options];\n}\n\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming PaginatedMessageListContext with useContext - TSX\nDESCRIPTION: Demonstrates how to consume the PaginatedMessageListContext within a child component of the Channel component using React's useContext hook. It imports the necessary context and extracts properties like loadingMore, loadMoreRecent, and messages. Requires 'react' and 'stream-chat-react-native' packages as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/paginated-message-list-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { PaginatedMessageListContext } from 'stream-chat-react-native';\n\nconst { loadingMore, loadMoreRecent, messages } = useContext(PaginatedMessageListContext);\n```\n\n----------------------------------------\n\nTITLE: Replacing Default ScrollToBottomButton - React Native (TSX)\nDESCRIPTION: This code snippet demonstrates how to replace the default ScrollToBottomButton component in the Channel component with a custom implementation. The `ScrollToBottomButton` prop accepts a React component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/scroll-to-bottom-button.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel ScrollToBottomButton={CustomScrollToBottomButton} />\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Grouping - React Native\nDESCRIPTION: This code snippet demonstrates how to disable message grouping by user within the Channel component to further reduce the processing load. Message grouping involves iterating through the message list, which can be costly for long lists. However, disabling this feature may increase the number of avatar images rendered and hurt performance. Thus, should only be used if message avatars are not displayed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/performance.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel enableMessageGroupingByUser={false} />\n```\n\n----------------------------------------\n\nTITLE: Using Streami18n with OverlayProvider and Chat - Typescript\nDESCRIPTION: This snippet shows how to integrate a custom Streami18n instance with the OverlayProvider and Chat components.  The i18nInstance prop is used to pass the custom Streami18n instance to these components, ensuring that all child components use the provided translations and date/time formatting. Requires stream-chat and stream-chat-react-native dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat }from 'stream-chat';\nimport { Chat, OverlayProvider, Streami18n }from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst streami18n =new Streami18n();\n\nexportconst App = () => (\n  <OverlayProvider i18nInstance={streami18n}>\n    <Chat client={client} i18nInstance={streami18n}>\n      {/** App components */}\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Message Action\nDESCRIPTION: This code demonstrates how to add a custom message action (Mute User) and only show it for messages from other users. It retrieves existing capabilities, dismisses the overlay after performing the action, and updates the UI based on whether the user is already muted.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { messageActions as defaultMessageActions, Mute as MuteIcon } from 'stream-chat-react-native';\n\n<Channel\n  channel={channel}\n  messageActions={param => {\n    const { isMyMessage, ownCapabilities, dismissOverlay } = param;\n    const actions = defaultMessageActions({ ...param });\n\n    if (!isMyMessage) {\n      const isMuted = (client.mutedUsers || []).some(\n        mute => mute.user.id === client.userID && mute.target.id === message.user?.id,\n      );\n\n      actions.push({\n        action: async () => {\n          dismissOverlay();\n          if (message.user?.id) {\n            if (isMuted) {\n              await client.unmuteUser(message.user.id);\n            } else {\n              await client.muteUser(message.user.id);\n            }\n          }\n        },\n        actionType: 'muteUser',\n        icon: <MuteIcon />,\n        title: isMuted ? t('Unmute User') : t('Mute User'),\n      });\n    }\n\n    return actions;\n  }}\n>\n  {/** MessageList and MessageInput component here */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: MessageAction Object Example\nDESCRIPTION: This JSX snippet shows an example of a MessageAction object, demonstrating the structure of an action with an action handler, icon, title, and title style.  This provides a reference for creating custom actions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  action: () => { /** Some action here */ },\n  icon: <PinIcon />,\n  title: 'Pin Message',\n  titleStyle: { color: 'red' }\n}\n```\n\n----------------------------------------\n\nTITLE: Aligning Messages to the Left in a Channel in TypeScript\nDESCRIPTION: This code demonstrates how to force all messages within a `<Channel>` component to align to the left side, regardless of whether they were sent or received. This is achieved by setting the `forceAlignMessages` prop to 'left'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  forceAlignMessages='left'\n  keyboardVerticalOffset={headerHeight}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Enabling Audio Recording in Channel Component (TSX)\nDESCRIPTION: This code snippet demonstrates how to enable audio recording functionality within the Stream Chat `Channel` component in a React Native application. By setting the `audioRecordingEnabled` prop to `true`, the `MessageInput` UI will render a `StartRecordingAudioButton` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/audio-messages-support.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel audioRecordingEnabled />\n```\n\n----------------------------------------\n\nTITLE: Live Location Sharing Context Implementation (InputButtons.tsx)\nDESCRIPTION: This TypeScript code defines a React Context for managing live location sharing. It uses `Geolocation.watchPosition` to monitor user location and `client.updateMessage` to update the message with the latest location. The context provides functions to start and stop live location sharing, as well as check if live location is being watched for a given message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, {createContext, useContext} from 'react';\nimport {useChatContext} from 'stream-chat-react-native';\nimport Geolocation, {\n  GeolocationResponse,\n} from '@react-native-community/geolocation';\n\nGeolocation.setRNConfiguration({\n  skipPermissionRequests: false,\n  authorizationLevel: 'always',\n  enableBackgroundLocationUpdates: true,\n});\n\ninterface LiveLocationContextValue {\n  startLiveLocation: (messageId: string) => void;\n  stopLiveLocation: (messageId: string) => void;\n  isWatching: (messageId: string) => boolean;\n}\n\nconst LiveLocationContext = createContext<LiveLocationContextValue>({\n  startLiveLocation: () => {},\n  stopLiveLocation: () => {},\n  isWatching: () => false,\n});\n\nexport const useLiveLocationContext = () => {\n  return useContext(LiveLocationContext);\n};\n\n// a map of message IDs to live location watch IDs\nconst messageIdToLiveWatchMap = new Map<string, number>();\n\nconst isWatching = (id: string) => {\n  return messageIdToLiveWatchMap.has(id);\n};\n\nexport const LiveLocationContextProvider = (\n  props: React.PropsWithChildren<{}>,\n) => {\n  const {client} = useChatContext();\n\n  const lastLocationRef = React.useRef<GeolocationResponse>();\n\n  // watch live location and update message\n  const startLiveLocation = React.useCallback(\n    (id: string) => {\n      const watchId = Geolocation.watchPosition(\n        position => {\n          client.updateMessage({\n            id,\n            attachments: [\n              {\n                type: 'location',\n                latitude: position.coords.latitude,\n                longitude: position.coords.longitude,\n              },\n            ],\n          });\n          lastLocationRef.current = position;\n        },\n        error => {\n          console.error('watchPosition', error);\n        },\n        {\n          enableHighAccuracy: true,\n          timeout: 20000,\n          maximumAge: 1000,\n          interval: 5000, // android only\n        },\n      );\n      messageIdToLiveWatchMap.set(id, watchId);\n    },\n    [client],\n  );\n\n  // stop watching live location and send message with ended time\n  const stopLiveLocation = React.useCallback(\n    (id: string) => {\n      const watchId = messageIdToLiveWatchMap.get(id);\n      if (watchId !== undefined) {\n        messageIdToLiveWatchMap.delete(id);\n        Geolocation.clearWatch(watchId);\n        if (lastLocationRef.current) {\n          client.updateMessage({\n            id,\n            attachments: [\n              {\n                type: 'location',\n                latitude: lastLocationRef.current.coords.latitude,\n                longitude: lastLocationRef.current.coords.longitude,\n                ended_at: new Date().toISOString(),\n              },\n            ],\n          });\n        }\n      }\n    },\n    [client],\n  );\n\n  const contextValue: LiveLocationContextValue = {\n    startLiveLocation,\n    stopLiveLocation,\n    isWatching,\n  };\n\n  return (\n    <LiveLocationContext.Provider value={contextValue}>\n      {props.children}\n    </LiveLocationContext.Provider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Consuming KeyboardContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the KeyboardContext using the useContext hook provided by React. It imports the KeyboardContext from 'stream-chat-react-native' and retrieves the dismissKeyboard function. This allows a child component of the Channel component to programmatically dismiss the keyboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/keyboard-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { KeyboardContext } from 'stream-chat-react-native';\n\nconst { dismissKeyboard } = useContext(KeyboardContext);\n```\n\n----------------------------------------\n\nTITLE: Creating Android Intent Filter - XML\nDESCRIPTION: This XML snippet demonstrates how to create an intent filter in AndroidManifest.xml to handle deep links.  It defines the action, category, and data (scheme and host) for the intent filter.  The `autoVerify` attribute is set to `true` for Android App Links verification. Replace `YOUR URL HERE` with your actual URL.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/deeplinking.mdx#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<intent-filter android:autoVerify=\"true\">\n    <action android:name=\"android.intent.action.VIEW\" />\n    <category android:name=\"android.intent.category.DEFAULT\" />\n    <category android:name=\"android.intent.category.BROWSABLE\" />\n    <data android:scheme=\"http\" />\n    <data android:scheme=\"https\" />\n    <!-- Example: \"stream-calls-dogfood.vercel.app” -->\n    <data android:host=\"`YOUR URL HERE`\" />\n</intent-filter>\n```\n\n----------------------------------------\n\nTITLE: Custom Gallery Attachment Component - JSX\nDESCRIPTION: This JSX code defines a custom Gallery attachment component for Stream Chat. It receives the `images` array and `onPressIn` function as props and logs the `images` to the console. The component should return a custom UI for displaying image galleries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomGallery = ({ images, onPressIn }) => {\n  console.log(images);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Static Background Customization with ImageBackground - TSX\nDESCRIPTION: This snippet demonstrates how to statically set a custom background for a chat channel using the ImageBackground component from React Native. It wraps the MessageList and MessageInput components within ImageBackground and applies a custom theme to make the background transparent.  It depends on stream-chat-react-native and react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-background.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, MessageInput, MessageList, ThemeProvider } from 'stream-chat-react-native';\nimport { ImageBackground } from 'react-native';\n\nexport const theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transparent',\n    },\n  },\n};\n\nconst IMAGE_URI =\n  'https://images.unsplash.com/photo-1549125764-91425ca48850?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8NjF8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60';\n\nconst ChannelScreen = ({ channel }) => (\n  <ThemeProvider style={theme}>\n    <Channel channel={channel}>\n      <ImageBackground\n        style={{ flex: 1 }}\n        source={{\n          uri: IMAGE_URI,\n        }}\n      >\n        <MessageList />\n        <MessageInput />\n      </ImageBackground>\n    </Channel>\n  </ThemeProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Filtering File Attachments with TypeScript\nDESCRIPTION: This code snippet filters an array of attachments to retrieve only those with the type 'file'. It assumes that 'message' is an object containing an 'attachments' property which is an array of attachment objects.  The filter method iterates through the attachments array and returns a new array containing only the file attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/message-context/files.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst files = message.attachments.filter(a => a.type === 'file');\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Action Styles (TSX)\nDESCRIPTION: This code snippet showcases how to customize the styles of message actions using theme keys. These styles can be applied to the action container, icon, and title of each message action item.  The theme keys are applied within the `overlay.messageActions` section of your application's theme. The types `ViewStyle` and `TextStyle` should be imported from `react-native`\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\noverlay: {\n  messageActions: {\n    actionContainer: ViewStyle;\n    icon: ViewStyle;\n    title: TextStyle;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Action in React Native\nDESCRIPTION: This code snippet demonstrates how to define a MessageAction object in React Native for use within the Stream Chat message menu. It includes properties for the action callback, icon, title, and title styling.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/object-types/message_action.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{  action: () => { /** Some action here */ },  icon: <PinIcon />,  title: 'Pin Message',  titleStyle: { color: 'red' }}\n```\n\n----------------------------------------\n\nTITLE: Replacing ScrollToBottomButton Component in Channel - TSX\nDESCRIPTION: This code snippet shows how to replace the default ScrollToBottomButton component with a custom component named CustomScrollToBottomButton within the Channel component in a React Native application using TypeScript. This allows for customization of the scroll-to-bottom button's appearance and behavior. No specific dependencies are required beyond the stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/scroll_to_bottom_button.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel ScrollToBottomButton={CustomScrollToBottomButton} />\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime with Day.js - Typescript\nDESCRIPTION: This snippet demonstrates how to override the default DateTime parser with Day.js in Streami18n.  This allows for more control over date and time formatting using Day.js. Requires Day.js and locale imports.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport Dayjs from 'dayjs';\n\nimport 'dayjs/locale/nl';\nimport 'dayjs/locale/it';\n// or if you want to include all locales\nimport 'dayjs/min/locales';\n\nconst i18n = new Streami18n({\n  language: 'nl',\n  DateTimeParser: Dayjs,\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing AttachmentPicker with Native Image Picker using ActionSheet - TSX\nDESCRIPTION: This code snippet replaces the default AttachmentPicker with the device's native image picker using `@expo/react-native-action-sheet`. It shows how to use `ActionSheetProvider` and `useActionSheet` hooks to present options for Photo Library, Camera, and Files. No actions are implemented.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel } from 'stream-chat-react-native';\nimport { ActionSheetProvider, useActionSheet } from '@expo/react-native-action-sheet';\n\nconst CustomAttachButton = () => {\n  const { showActionSheetWithOptions } = useActionSheet();\n\n  const onPressHandler = () => {\n    // Same interface as https://facebook.github.io/react-native/docs/actionsheetios.html\n    showActionSheetWithOptions(\n      {\n        cancelButtonIndex: 3,\n        destructiveButtonIndex: 3,\n        options: ['Photo Library', 'Camera', 'Files', 'Cancel'],\n      },\n      buttonIndex => {\n        switch (buttonIndex) {\n          case 0:\n            break;\n          case 1:\n            break;\n          case 2:\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n\n  return <AttachButton handleOnPress={onPressHandler} />;\n};\n\n<ActionSheetProvider>\n  <Channel AttachButton={CustomAttachButton} />\n</ActionSheetProvider>;\n```\n\n----------------------------------------\n\nTITLE: Theming Stream Chat RN with OverlayProvider (Typescript)\nDESCRIPTION: This snippet showcases how to partially override the `value` prop of the `OverlayContext` to apply a custom theme. The theme object targets the `messageSimple.file.container` to change its background color to red. This demonstrates how to customize the appearance of Stream Chat React Native components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/overlay-provider/props/value.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst theme = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n<OverlayProvider value={{ style: theme }}>...</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Show All Votes Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the ShowAllVotesButton component from the stream-chat-react-native library. It imports the ShowAllVotesButton component and defines a button that, when pressed, logs the poll ID, message ID and option ID to the console. The onPress prop receives the message, option, and poll objects. It requires an `option` object as prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShowAllVotesButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <ShowAllVotesButton\n    option={option}\n    onPress={({ message, option, poll }) =>\n      console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}; Option ID: ${option.id}`)\n    }\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Retrying Sending a Failed Message\nDESCRIPTION: This function is used to re-attempt sending a message that previously failed to send. It allows the user to retry sending the message if the initial attempt was unsuccessful due to network issues or other reasons.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/messages_context.mdx#_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Custom Card Component - JSX\nDESCRIPTION: This JSX code defines a custom Card component for Stream Chat. It receives the `type` and `otherProperties` as props and logs them to the console. The component should return a custom UI for rendering custom attachment types using the Card view.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomCardComponent = ({ type, ...otherProperties }) => {\n  console.log(type);\n  console.log(otherProperties);\n\n  return (/** Your custom UI */)\n}\n\n<Channel Card={CustomCardComponent} />\n```\n\n----------------------------------------\n\nTITLE: Defining Local User Type Example (TSX)\nDESCRIPTION: This snippet demonstrates defining a LocalUserType, including an optional image field. It allows extending the user type with application-specific data.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalUserType = {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding Capabilities in Channel Component - React Native\nDESCRIPTION: This code snippet demonstrates how to override the default user capabilities within the Stream Chat React Native Channel component. By using the overrideOwnCapabilities prop, specific features such as uploading files and sending links can be disabled for the current user within the channel. This is achieved by setting the corresponding capability keys (uploadFile and sendLinks) to false within the object passed to the prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/channel/props/override_own_capabilities.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    uploadFile: false,\n    sendLinks: false\n  }}\n\n```\n\n----------------------------------------\n\nTITLE: Creating Swipeable Message Component in React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom `SwipeableMessage` component that wraps the standard Stream Chat `Message` component with a `Swipeable` component from `react-native-gesture-handler`.  It allows for defining actions to be performed when swiping left (reply) or right (delete). The `renderLeftActions` and `renderRightActions` props are used to render UI elements that appear during the swipe gesture. The component uses animated views for visual effects during swiping.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst SwipeableMessage = (\n  props: MessageProps<AttachmentType, ChannelType, CommandType, EventType, MessageType, ResponseType, UserType>,\n) => {\n  return (\n    <Swipeable\n      onSwipeableLeftOpen={reply(props.message)}\n      onSwipeableRightOpen={delete props.message}\n      overshootLeft={false}\n      overshootRight={false}\n      renderLeftActions={progress => (\n        <Animated.View\n          style={{\n            backgroundColor: 'blue',\n            transform: [\n              {\n                translateX: progress.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [-100, 0],\n                }),\n              },\n            ],\n            width: 100,\n          }}\n        />\n      )}\n      renderRightActions={progress => (\n        <Animated.View\n          style={{\n            justifyContent: 'center',\n            opacity: progress.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 1],\n            }),\n          }}\n        >\n          <StreamReaction />\n        </Animated.View>\n      )}\n    >\n      <Message {...props} />\n    </Swipeable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Custom Message Input Layout - React Native JSX\nDESCRIPTION: This example demonstrates how to create a custom MessageInput layout in Stream Chat React Native, including stretching the input field to full width and adding buttons for sending messages, attachments, and commands.  It leverages the `useMessageInputContext` hook and disables the send button when the input field is empty.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport {\n  Channel,\n  Chat,\n  ImageUploadPreview,\n  OverlayProvider,\n  AutoCompleteInput,\n  useMessageInputContext,\n} from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nconst CustomInput = props => {\n  const { sendMessage, text, toggleAttachmentPicker, openCommandsPicker } = useMessageInputContext();\n\n  return (\n    <View style={styles.fullWidth}>\n      <ImageUploadPreview />\n      <FileUploadPreview />\n      <View style={[styles.fullWidth, styles.inputContainer]}>\n        <AutoCompleteInput />\n      </View>\n      <View style={[styles.fullWidth, styles.row]}>\n        <Button title='Attach' onPress={toggleAttachmentPicker} />\n        <Button title='Commands' onPress={openCommandsPicker} />\n        <Button title='Send' onPress={sendMessage} disabled={!text} />\n      </View>\n    </View>\n  );\n};\n\nexport const ChannelScreen = ({ channel }) => {\n  const [channel, setChannel] = useState();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} Input={CustomInput}>\n            {/** App components */}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  flex: { flex: 1 },\n  fullWidth: {\n    width: '100%',\n  },\n  row: {\n    flexDirection: 'row',\n    justifyContent: 'space-between',\n  },\n  inputContainer: {\n    height: 40,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom MessageStatus Component in React Native\nDESCRIPTION: This code demonstrates the creation of a simple custom `MessageStatus` component that retrieves the `message` object from the `useMessageContext` hook and displays the `readBy` property as text. This showcases how to leverage contexts to build custom UI elements.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/contexts.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomMessageStatus = () => {\n  const { message } = useMessageContext();\n  return <Text>{message.readBy}</Text>;\n};\n...\n<Channel MessageStatus={CustomMessageStatus}>\n```\n\n----------------------------------------\n\nTITLE: Selected Files Array Type Definition - TSX\nDESCRIPTION: This code snippet defines the type for the `selectedFiles` array, which represents the list of currently selected files in the attachment picker. Each file object contains properties like duration, name, size, type, and URI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/attachment_picker_context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nArray<{  \n  duration: number | null;\n  name: string;\n  size: string;\n  type: string;\n  uri: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Checking Message Type and Status - TSX\nDESCRIPTION: This code snippet shows the condition under which the `actionsEnabled` value is set to true within the MessageContext. The condition checks if the message type is 'regular' and the message status is 'received'.  This logic determines when actions can be performed on a message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/message_context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmessage.type === 'regular' && message.status === 'received';\n```\n\n----------------------------------------\n\nTITLE: Import Gesture Handler - TypeScript\nDESCRIPTION: This code snippet imports the `react-native-gesture-handler` library at the top of your app entry file. This is a crucial step to properly set up React Native Gesture Handler, which is essential for handling touch events and interactions within the application.  Without this import, touchable components and gesture-based interactions may not function correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Wrapping Navigation with SafeAreaProvider\nDESCRIPTION: This snippet demonstrates how to wrap the navigation component with `SafeAreaProvider` from `react-native-safe-area-context`. This ensures that the app respects safe area insets on devices with notches or rounded corners.  It leverages a separate `Nav` component where the navigation logic is defined.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Nav } from './Nav';\n\nexport const App = () => (\n  <SafeAreaProvider>\n    <Nav />\n  </SafeAreaProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing File Attachment Theme\nDESCRIPTION: This code snippet demonstrates how to customize the styling of a file attachment component by modifying the theme. It showcases how to change the background color of the container and the height and width of the icon. This customization is achieved by targeting the `messageSimple.file` theme path.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/theming.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme: DeepPartial<Theme> = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n      icon: {\n        height: 16,\n        width: 16,\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Members List - TypeScript\nDESCRIPTION: Creates a Stream Chat channel using a list of member IDs. The `client.channel` method is called with the channel type ('messaging') and an object containing the `members` array and other channel settings. Requires the `stream-chat` package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel('messaging', {\n  members: ['jlahey', 'rlafleur'],\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Customize MessageAvatar size using theme - TSX\nDESCRIPTION: This code demonstrates how to customize the size of the MessageAvatar component using the theming system in Stream Chat React Native.  It shows how to set the BASE_AVATAR_SIZE property within the theme object to control the avatar's dimensions globally.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-avatar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  avatar: {\n    BASE_AVATAR_SIZE: 30,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Thread Component Usage in React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the Thread component within a Stream Chat React Native application. It shows how to integrate the Thread component within the OverlayProvider, Chat, Channel, and other Stream Chat components to display and manage message threads.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/thread.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, Thread } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel} thread={message} threadList>\n          // highlight-next-line\n          <Thread />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Default Types for Custom Fields (TSX)\nDESCRIPTION: This code snippet defines default types for custom fields in Stream Chat React Native. These types extend the base types provided by stream-chat-js and include additional fields like file_size, mime_type, and image. These defaults can be extended for custom data.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/typescript.mdx#_snippet_1\n\nLANGUAGE: TSX\nCODE:\n```\ntype DefaultAttachmentType = Record<string, unknown> & {\n  file_size?: number | string;\n  mime_type?: string;\n};\ntype DefaultChannelType = Record<string, unknown> & {\n  image?: string;\n};\ntype DefaultCommandType = string & {};\ntype DefaultEventType = Record<string, unknown>;\ntype DefaultMessageType = Record<string, unknown>;\ntype DefaultReactionType = Record<string, unknown>;\ntype DefaultUserType = Record<string, unknown> & {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelContext with useChannelContext Hook - React TSX\nDESCRIPTION: Demonstrates how to consume the ChannelContext using the useChannelContext hook provided by the stream-chat-react-native library. It imports the hook and retrieves values like lastRead, reloadChannel, and watcherCount.  This is the recommended way to access context values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channel_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChannelContext } from 'stream-chat-react-native';\n\nconst { lastRead, reloadChannel, watcherCount } = useChannelContext();\n```\n\n----------------------------------------\n\nTITLE: Updating Stream Chat App Settings with FCM Server Key - JavaScript\nDESCRIPTION: This code snippet demonstrates how to update Stream Chat application settings with the Firebase Cloud Messaging (FCM) server key using the Stream Chat Server-Side SDK.  It sets the server key, notification template, and data template for Firebase push notifications.  Dependencies include the Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/push_notifications.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance(API_KEY, API_SECRET);\nawait client.updateAppSettings({\n  firebase_config: {\n    server_key: 'server_key',\n    notification_template: `{\"message\":{\"notification\":{\"title\":\"New messages\",\"body\":\"You have {{ unread_count }} new message(s) from {{ sender.name }}\"}},\"android\":{\"ttl\":\"86400s\",\"notification\":{\"click_action\":\"OPEN_ACTIVITY_1\"}}}}`,\n    data_template: `{\"sender\":\"{{ sender.id }}\",\"channel\":{\"type\": \"{{ channel.type }}\",\"id\":\"{{ channel.id }}\"}},\"message\":\"{{ message.id }}\"}`,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Admin Role within ChannelContext\nDESCRIPTION: This snippet shows how to check if the current user has the 'admin' role, either at the application level or within the channel's membership. It accesses the client and channel objects from the ChannelContext to determine the user's role. Requires access to the stream chat client and channel state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channel-context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst isAdmin = client?.user?.role === 'admin' || channel?.state.membership.role === 'admin';\n```\n\n----------------------------------------\n\nTITLE: Consuming OverlayContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the OverlayContext using the useContext hook in a TypeScript React Native component. It imports the necessary modules from stream-chat-react-native and React, then uses useContext to access the setOverlay function from the OverlayContext. The setOverlay function can be used to update the current active overlay.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/overlay-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { OverlayContext } from 'stream-chat-react-native';\n\nconst { setOverlay } = useContext(OverlayContext);\n```\n\n----------------------------------------\n\nTITLE: Sorting Channel List by last_updated Field - Typescript\nDESCRIPTION: This code snippet demonstrates how to sort a channel list by the `last_updated` field in descending order using a sort object.  It shows a typical usage scenario when querying channels. It sorts channels from newest to oldest.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel-list/props/sort.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst sort = { last_updated: -1 };\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Input Button for Location Sharing - TypeScript\nDESCRIPTION: This code adds a custom input button labeled \"Share Live Location\" next to the input box in the chat interface. Upon pressing the button, it fetches the user's current location coordinates and sends a message to the channel with the location data. It then initiates live location updates. The component uses react-native-community/geolocation to get the current location and Stream Chat React Native to send the message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {Pressable, StyleSheet} from 'react-native';\nimport {\n  Channel,\n  useChannelContext,\n  InputButtons as DefaultInputButtons,\n  useTheme,\n} from 'stream-chat-react-native';\nimport Svg, {Path} from 'react-native-svg';\nimport Geolocation from '@react-native-community/geolocation';\nimport {useLiveLocationContext} from './LiveLocationContext';\n\n// Icon for \"Share Location\" button, next to input box.\nconst ShareLocationIcon = () => {\n  const {\n    theme: {\n      colors: {grey},\n    },\n  } = useTheme();\n  return (\n    <Svg width={28} height={28} viewBox=\"0 0 24 24\" fill=\"none\">\n      <Path\n        d=\"M12 12c-1.654 0-3-1.345-3-3 0-1.654 1.346-3 3-3s3 1.346 3 3c0 1.655-1.346 3-3 3zm0-4a1.001 1.001 0 101 1c0-.551-.449-1-1-1z\"\n        fill={grey}\n      />\n      <Path\n        fillRule=\"evenodd\"\n        clipRule=\"evenodd\"\n        d=\"M12 22s7-5.455 7-12.727C19 5.636 16.667 2 12 2S5 5.636 5 9.273C5 16.545 12 22 12 22zm1.915-4.857C15.541 15.032 17 12.277 17 9.273c0-1.412-.456-2.75-1.27-3.7C14.953 4.664 13.763 4 12 4s-2.953.664-3.73 1.573C7.456 6.523 7 7.86 7 9.273c0 3.004 1.459 5.759 3.085 7.87.678.88 1.358 1.614 1.915 2.166a21.689 21.689 0 001.915-2.166zm-.683 3.281s0 .001 0 0z\"\n        fill={grey}\n      />\n    </Svg>\n  );\n};\n\nconst InputButtons: NonNullable<\n  React.ComponentProps<typeof Channel>['InputButtons']\n> = props => {\n  const {channel: currentChannel} = useChannelContext();\n  const {startLiveLocation} = useLiveLocationContext();\n\n  const sendLiveLocation = async () => {\n    Geolocation.getCurrentPosition(\n      async position => {\n        // create message with initial location\n        const response = await currentChannel.sendMessage({\n          attachments: [\n            {\n              type: 'location',\n              latitude: position.coords.latitude,\n              longitude: position.coords.longitude,\n            },\n          ],\n        });\n        // then start watching for live location\n        startLiveLocation(response.message.id);\n      },\n      error => {\n        console.error('getCurrentPosition', error);\n      },\n      {\n        enableHighAccuracy: true,\n        timeout: 20000,\n        maximumAge: 1000,\n      },\n    );\n  };\n\n  return (\n    <>\n      <DefaultInputButtons {...props} hasCommands={false} />\n      <Pressable style={styles.liveLocationButton} onPress={sendLiveLocation}>\n        <ShareLocationIcon />\n      </Pressable>\n    </>\n  );\n};\n\nconst styles = StyleSheet.create({\n  liveLocationButton: {\n    paddingLeft: 5,\n  },\n});\n\nexport default InputButtons;\n```\n\n----------------------------------------\n\nTITLE: Disabling KeyboardCompatibleView in Channel - TSX\nDESCRIPTION: This snippet shows how to disable the built-in `KeyboardCompatibleView` for the `Channel` component by using the `disableKeyboardCompatibleView` prop. This allows developers to implement their own keyboard handling logic or rely on default React Native behavior. No dependencies are required beyond the core `Channel` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/keyboard.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  disableKeyboardCompatibleView\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting topInset in OverlayProvider - TSX\nDESCRIPTION: This code snippet shows how to set the `topInset` prop within the `OverlayProvider`.  This is used to adjust the height of the gallery when fully open. The `topInset` prop accepts a number value representing the offset.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider topInset={/** number */}>{/* Inner component */}</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Mapping Latest Reactions to Reaction Objects - TSX\nDESCRIPTION: This code snippet demonstrates how to map the `latest_reactions` array from a message object into an array of reaction objects suitable for rendering. It extracts user information like image, name, and user ID, as well as the reaction type and alignment based on the client ID.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/overlay_reactions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst reactions = message.latest_reactions.map(reaction => ({\n  alignment: clientId && clientId === reaction.user?.id ? 'right' : 'left',\n  image: reaction?.user?.image,\n  name: reaction?.user?.name || reaction.user_id || '',\n  type: reaction.type,\n}));\n```\n\n----------------------------------------\n\nTITLE: User ID Array Example - TypeScript\nDESCRIPTION: Illustrates an array of user IDs representing mentioned users in a message. These IDs are typically extracted from a message string using regular expressions or other parsing techniques within the MessageInput component of the Stream Chat React Native library. The array is of type string[].\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/message-input-context/mentioned_users.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n['vishal-user-id', 'jaap-user-id'];\n```\n\n----------------------------------------\n\nTITLE: Defining Local Command Type Example (TSX)\nDESCRIPTION: This snippet provides an example of defining a LocalCommandType as a simple string. This is the base type that can be modified with a string union such as `'poll' | 'question'`\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalCommandType = string;\n```\n\n----------------------------------------\n\nTITLE: Disabling Autocomplete Features - React Native (TSX)\nDESCRIPTION: This snippet demonstrates how to disable autocomplete features (mentions and commands) within the Channel component by overriding the autoCompleteTriggerSettings prop. The hasCommands prop is also set to false to remove the commands button. It takes no parameters and returns no value.  The return is an override function setting autocomplete triggers to an empty object.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  autoCompleteTriggerSettings={() => ({})}\n  channel={channel}\n  hasCommands={false}\n  keyboardVerticalOffset={headerHeight}\n  thread={thread}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Reaction Icon Component (TSX)\nDESCRIPTION: This code creates a custom React component for a reaction icon, utilizing `react-native-svg` for scaling purposes. The component receives `IconProps` and renders an SVG path. It's used in conjunction with `reactionData` to define custom reactions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const StreamReaction: React.FC<IconProps> = props => (\n  <RootSvg height={21} width={42} {...props} viewBox='0 0 42 21'>\n    <RootPath\n      d='M26.1491984,6.42806971 L38.9522984,5.52046971 C39.7973984,5.46056971 40.3294984,6.41296971 39.8353984,7.10116971 L30.8790984,19.5763697 C30.6912984,19.8379697 30.3888984,19.9931697 30.0667984,19.9931697 L9.98229842,19.9931697 C9.66069842,19.9931697 9.35869842,19.8384697 9.17069842,19.5773697 L0.190598415,7.10216971 C-0.304701585,6.41406971 0.227398415,5.46036971 1.07319842,5.52046971 L13.8372984,6.42816971 L19.2889984,0.333269706 C19.6884984,-0.113330294 20.3884984,-0.110730294 20.7846984,0.338969706 L26.1491984,6.42806971 Z M28.8303984,18.0152734 L20.5212984,14.9099734 L20.5212984,18.0152734 L28.8303984,18.0152734 Z M19.5212984,18.0152734 L19.5212984,14.9099734 L11.2121984,18.0152734 L19.5212984,18.0152734 Z M18.5624984,14.1681697 L10.0729984,17.3371697 L3.82739842,8.65556971 L18.5624984,14.1681697 Z M21.4627984,14.1681697 L29.9522984,17.3371697 L36.1978984,8.65556971 L21.4627984,14.1681697 Z M19.5292984,13.4435697 L19.5292984,2.99476971 L12.5878984,10.8305697 L19.5292984,13.4435697 Z M20.5212984,13.4435697 L20.5212984,2.99606971 L27.4627984,10.8305697 L20.5212984,13.4435697 Z M10.5522984,10.1082697 L12.1493984,8.31366971 L4.34669842,7.75446971 L10.5522984,10.1082697 Z M29.4148984,10.1082697 L27.8178984,8.31366971 L35.6205984,7.75446971 L29.4148984,10.1082697 Z'\n      {...props}\n    />\n  </RootSvg>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Gallery Attachment (JSX)\nDESCRIPTION: This JSX snippet shows how to override the default Gallery attachment component. It takes `images` and `onPressIn` as props.  It logs the `images` prop to the console and renders a placeholder comment for the custom UI implementation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomGallery = ({ images, onPressIn }) => {\n  console.log(images);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelContext with useChannelContext hook in React Native\nDESCRIPTION: This snippet demonstrates how to consume the ChannelContext using the useChannelContext hook provided by stream-chat-react-native.  It imports useChannelContext from stream-chat-react-native and extracts lastRead, reloadChannel, and watcherCount values. This hook provides a more convenient way to access the context compared to useContext.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channel-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChannelContext } from 'stream-chat-react-native';\n\nconst { lastRead, reloadChannel, watcherCount } = useChannelContext();\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadListItemContext with useThreadListItemContext hook\nDESCRIPTION: This code snippet demonstrates how to consume the ThreadListItemContext using the useThreadListItemContext hook provided by the stream-chat-react-native library. This is an alternative method to the standard useContext hook from React.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/thread-list-item-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadListItemContext } from 'stream-chat-react-native';\n\nconst value = useThreadListItemContext();\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Reactions with ReactionData in TypeScript\nDESCRIPTION: This code defines an array of `ReactionData` objects, each representing a custom reaction.  Each object includes an `Icon` component (for rendering the reaction icon) and a `type` string (identifying the reaction). The `Icon` components are assumed to be defined elsewhere and should accept `IconProps`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const reactionData: ReactionData[] = [\n  {\n    Icon: LoveReaction,\n    type: 'love',\n  },\n  {\n    Icon: ThumbsUpReaction,\n    type: 'like',\n  },\n  {\n    Icon: ThumbsDownReaction,\n    type: 'sad',\n  },\n  {\n    Icon: LOLReaction,\n    type: 'haha',\n  },\n  {\n    Icon: WutReaction,\n    type: 'wow',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Setting Top Inset for AttachmentPicker\nDESCRIPTION: This code shows how to set the `topInset` for the `AttachmentPicker` to align with the header in React Navigation. This is typically done using the `useHeaderHeight` hook from `@react-navigation/stack` and updating the `OverlayProvider`'s state using `useAttachmentPickerContext`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst headerHeight = useHeaderHeight();\nconst { setTopInset } = useAttachmentPickerContext();\n\nuseEffect(() => {\n  setTopInset(headerHeight);\n}, [headerHeight]);\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageContext with useContext - TSX\nDESCRIPTION: This snippet shows how to consume MessageContext using the useContext hook in a TypeScript React Native component. It imports the necessary modules and demonstrates accessing values like isMyMessage, message, and files.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/message-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { MessageContext } from 'stream-chat-react-native';\n\nconst { isMyMessage, message, files } = useContext(MessageContext);\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageContext with useMessageContext hook - React\nDESCRIPTION: This code snippet shows how to access the MessageContext using the useMessageContext hook provided by the stream-chat-react-native library. The hook simplifies access to context values such as isMyMessage, message, and files, making them readily available within functional components. It offers a more concise alternative to useContext. It depends on stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/message_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageContext } from 'stream-chat-react-native';\n\nconst { isMyMessage, message, files } = useMessageContext();\n```\n\n----------------------------------------\n\nTITLE: Integrating React Navigation for Poll Results - React Native\nDESCRIPTION: This code snippet integrates React Navigation to handle the PollResults screen within a Stream Chat channel. It introduces a Stack navigator as a child of the Channel component, allowing custom navigation for Poll screens without moving the channel prop.  It defines a ChannelMessageList component and a ChannelStack navigator.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, MessageList, MessageInput, PollContent } from 'stream-chat-react-native';\n// highlight-next-line\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      <ViewResultsButton\n        onPress={({ message, poll }) => Alert.alert(`Message ID: ${message.id} and Poll ID: ${poll.id}`)}\n      />\n      <EndVoteButton />\n    </>\n  );\n};\n\nconst MyPollContent = () => <PollContent PollHeader={() => null} PollButtons={MyPollButtons} />;\n\n// highlight-start\nconst ChannelMessageList = () => {\n  return (\n    <>\n      <ChannelHeader />\n      <MessageList />\n      <MessageInput />\n    </>\n  );\n};\n// highlight-end\n\n// highlight-next-line\nconst ChannelStack = createStackNavigator<StackNavigatorParamList>();\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel} PollContent={MyPollContent}>\n          // highlight-start\n          <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n            <ChannelStack.Screen\n              name={'ChannelMessageList'}\n              options={{ headerShown: false }}\n              component={ChannelMessageList}\n            />\n            <ChannelStack.Screen name={'PollResultsScreen'} options={{ headerShown: false }} component={() => null} />\n          </ChannelStack.Navigator>\n          // highlight-end\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamChat Client with Generics (TSX)\nDESCRIPTION: This code snippet demonstrates how to initialize the StreamChat client with a single generic type, `StreamChatGenerics`.  It simplifies the previous approach of using multiple generics. The API key is required to initialize the client. You need to replace `'YOUR_API_KEY'` with your actual API key.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = StreamChat.getInstance<StreamChatGenerics>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Overriding Mark Read Request\nDESCRIPTION: This example demonstrates how to override the default mark read request using the doMarkReadRequest prop.  It allows for custom logic to be implemented before marking a channel as read. Note: This should be used for advanced functionality and not to disable read receipts.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/channel.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst doMarkReadRequest = (channel) => {\n  if (/** Some custom logic here */) {\n    channel.markRead();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Conditionally Rendering Message Actions\nDESCRIPTION: This code demonstrates how to conditionally render message actions based on whether the message is from the current user and how to customize the styles of a message action title.  It shows how to only display copy and edit message actions, only show edit message for messages from the current user and demonstrates how to override the text style.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n  messageActions={({ copyMessage, editMessage, isMyMessage }) =>\n    isMyMessage\n      ? [\n          copyMessage,\n          editMessage,\n          {\n            ...deleteMessage,\n            textStyle: {\n              color: 'red',\n              fontWeight: 'bold',\n            },\n          },\n        ]\n      : [copyMessage]\n  }\n>\n  {/** MessageList and MessageInput component here */}\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Retrying Send Failed Message - React Native\nDESCRIPTION: This function retries sending a previously failed message.  It takes a message object as input and triggers the resending process.  It's used to handle cases where a message fails to send initially, allowing the user to retry sending it.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nretrySendMessage: (message) => void\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Attachment Components to Channel in JSX\nDESCRIPTION: This JSX snippet demonstrates how to provide custom attachment components to the Channel component.  The custom components (CustomGallery, CustomGiphy, CustomFileAttachment, CustomUrlPreview) are passed as props. These components override the default implementations for rendering attachments within the Channel component. Dependencies include React and the previously defined custom components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n  Gallery={CustomGallery}\n  Giphy={CustomGiphy}\n  FileAttachment={CustomFileAttachment}\n  UrlPreview={CustomUrlPreview}\n>\n```\n\n----------------------------------------\n\nTITLE: Configuring additional FlatList props for MessageList (React Native)\nDESCRIPTION: This snippet shows how to pass additional props to the underlying FlatList component used by MessageList.  This allows for customization of FlatList's behavior, such as enabling bouncing. Avoid using this to get FlatList ref, use 'setFlatListRef' instead.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/message_list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<MessageList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by Channel Id - Typescript\nDESCRIPTION: This snippet demonstrates creating a channel using a specified channel ID. The `channel` method is called with the channel type, channel ID, and optional channel data. Requires channel type and channel id.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel(channel_type, 'channel_id', {\n  name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Header - TSX\nDESCRIPTION: This code shows how to customize the message header. It replaces the default header with a custom component. The custom header displays the sender's name (if it's a group message and the user is not the current user) and the formatted date.  The default `MessageFooter` is removed by setting it to null.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  MessageHeader={(props) =>\n    props.message?.user?.id !== chatClient.userID ? (\n      <View\n        style={{ flexDirection: 'row' }}\n      >\n        {Object.keys(props.members).length > 2 &&\n          props.message.user?.name ? (\n            <Text style={[{ color: grey, marginRight: 8 }]}>\n              {props.message.user.name}\n            </Text>\n          ) : null}\n        <Text style={[{ color: grey, textAlign: props.alignment }]}>\n          {props.formattedDate}\n        </Text>\n      </View>\n    ) : null\n  }\n  MessageFooter={() => null}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Components to Channel - JSX\nDESCRIPTION: This JSX code demonstrates how to provide custom attachment components to the `Channel` component in Stream Chat React Native. It shows how to override the default `Gallery`, `Giphy`, `FileAttachment`, and `UrlPreview` components with custom implementations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n  Gallery={CustomGallery}\n  Giphy={CustomGiphy}\n  FileAttachment={CustomFileAttachment}\n  UrlPreview={CustomUrlPreview}\n>\n```\n\n----------------------------------------\n\nTITLE: Customizing MessagePinnedHeader Component - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the MessagePinnedHeader component within a stream-chat-react-native application. It imports the Channel and MessageAvatar components from 'stream-chat-react-native' and creates a custom MessagePinnedHeaderComponent. This custom component is then passed to the Channel component through the MessagePinnedHeader prop. This allows developers to override the default MessagePinnedHeader with their own custom implementation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_pinned_header.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Channel, MessageAvatar} from 'stream-chat-react-native';\n\nconst MessagePinnedHeaderComponent = () => <MessagePinnedHeader />\n\n<Channel MessagePinnedHeader={MessagePinnedHeaderComponent} />\n```\n\n----------------------------------------\n\nTITLE: Customizing FileAttachment with attachmentSize in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the FileAttachment component within the Channel component using the attachmentSize prop. It imports the necessary components from 'stream-chat-react-native' and then renders the Channel component, providing a custom FileAttachment component that sets the attachmentSize to 40.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/file-attachment.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, FileAttachment } from 'stream-chat-react-native';\n\n<Channel FileAttachment={() => <FileAttachment attachmentSize={40} />}\n```\n\n----------------------------------------\n\nTITLE: Channel Screen Component Definition (useFocusEffect Approach) - TSX\nDESCRIPTION: This code defines a ChannelScreen component that uses the useFocusEffect hook to manage thread selection and navigation. It uses local state for the selectedThread. useFocusEffect resets selectedThread to undefined when the screen gains focus. onThreadSelect updates the local state and navigates to ThreadScreen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ChannelScreen = () => {\n  const { channel } = useAppChannel();\n  const [selectedThread, setSelectedThread] = useState<MessageType>();\n\n  useFocusEffect(() => {\n    setSelectedThread(undefined);\n  });\n\n  return (\n    <Channel channel={channel} thread={selectedThread}>\n      <MessageList\n        onThreadSelect={thread => {\n          setSelectedThread(thread);\n          navigation.navigate('ThreadScreen', { thread });\n        }}\n      />\n      <MessageInput />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat React Native Dependency (Yarn)\nDESCRIPTION: This command installs the core stream-chat-react-native package using Yarn. This is the first step in integrating Stream Chat into your React Native project.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stream-chat-react-native\n```\n\n----------------------------------------\n\nTITLE: Passing FlatList Props to ChannelList - TypeScript\nDESCRIPTION: This code snippet demonstrates how to pass additional props to the underlying FlatList component used within the ChannelList component from Stream Chat React Native.  It shows how to define a `flatListProps` object containing properties like `bounces` and pass it to the `additionalFlatListProps` prop of the `ChannelList`.  This allows customization of the FlatList behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/channel-list/props/additional_flat_list_props.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<ChannelList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Custom Poll Component Using usePollState Hook\nDESCRIPTION: This TypeScript snippet demonstrates how to create a custom poll component using the `usePollState` hook from `stream-chat-react-native`.  It accesses the `name` and `options` properties from the poll state and renders them in a simple view. The component relies on being wrapped within a `PollContext` to access the poll state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePollState } from 'stream-chat-react-native';\n\nconst CustomPollComponent = () => {\n  const { name, options } = usePollState();\n\n  return (\n    <View>\n      <Text>{name}</Text>\n      {options.map(option => (\n        <Text key={option.id}>{option.text}</Text>\n      ))}\n    </View>\n  );\n};\n\nconst PollMessage = ({ message }) => {\n  const { client } = useChatContext();\n  const pollInstance = client.polls.fromState(message?.poll_id);\n  return (\n    <PollContextProvider value={{ message, poll: pollInstance }}>\n      <CustomPollComponent />\n    </PollContextProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing Poll State with usePollStateStore in React Native\nDESCRIPTION: This code snippet demonstrates how to use the `usePollStateStore` hook in `stream-chat-react-native` to access and extract specific data from the `PollState`. It defines a selector function to retrieve `latestVotesByOption` and `maxVotedOptionIds` from the poll state. This hook must be used within a `PollContext` provider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/hooks/poll/use-poll-state-store.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PollVote, PollState } from 'stream-chat';\nimport { usePollStateStore } from 'stream-chat-react-native';\n\ntype PollOptionSelectorReturnValue = {\n  latestVotesByOption: Record<string, PollVote[]>;\n  maxVotedOptionIds: string[];\n};\n\nconst selector = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  nextValue: PollState<StreamChatGenerics>,\n): PollOptionSelectorReturnValue => ({\n  latestVotesByOption: nextValue.latestVotesByOption,\n  maxVotedOptionIds: nextValue.maxVotedOptionIds,\n});\n\nconst { latestVotesByOption, maxVotedOptionIds } = usePollStateStore(selector);\n```\n\n----------------------------------------\n\nTITLE: Setting topInset for AttachmentPicker - TSX\nDESCRIPTION: This code demonstrates setting the topInset for the AttachmentPicker's bottom sheet. It retrieves the header height using useHeaderHeight and then uses the setTopInset function from useAttachmentPickerContext to set the top inset. This ensures the bottom sheet opens to the navigation header.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/navigation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst headerHeight = useHeaderHeight();\nconst { setTopInset } = useAttachmentPickerContext();\n\nuseEffect(() => {\n  setTopInset(headerHeight);\n}, [headerHeight]);\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Permission to AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to add the necessary camera permission to the `AndroidManifest.xml` file for Android. This permission is essential for enabling camera functionality within the React Native application when using features that require access to the device's camera. The app needs this permission to request camera access from the user.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.CAMERA\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelPreviewStatus with custom date - JSX\nDESCRIPTION: This code snippet demonstrates how to customize the `ChannelPreviewStatus` component within a `ChannelList` to display a custom formatted date. It uses `useMemo` to optimize performance when the date formatting involves computation. A custom date formatter is imported and applied to the `latestMessagePreview`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/channel_preview_status.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo } from 'react';\nimport { ChannelList, ChannelPreviewStatus } from 'stream-chat-react-native';\nimport { customDateFormatter } from '...'; // your custom date formatter\n\nconst CustomPreviewStatus = ({ latestMessagePreview }) => {\n  // important usage of useMemo once date parsers can perform some computation when re-rendering.\n  const formattedDate = useMemo(() => customDateFormatter(latestMessagePreview), [latestMessagePreview]);\n  return <ChannelPreviewStatus formatLatestMessageDate={formattedDate} />;\n};\n<ChannelList PreviewStatus={CustomPreviewStatus} />;\n```\n\n----------------------------------------\n\nTITLE: Adding Wallpaper Selection Button - TSX\nDESCRIPTION: This snippet demonstrates adding a button to the ChannelScreen that navigates users to the WallpaperOverviewScreen, enabling them to customize the channel background. It utilizes react-navigation for navigation and passes the channel ID to the WallpaperOverviewScreen as navigation parameters.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_background_customization.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\nimport { Channel, MessageInput, MessageList, ThemeProvider } from 'stream-chat-react-native';\nimport { Pressable, Text, StyleSheet } from 'react-native';\n\nconst ChannelScreen = ({ channel }) => {\n  const { navigate } = useNavigation();\n  const handleMenuOnPress = () => navigate('WallpaperOverviewScreen', { channelId: channel?.id });\n\n  return (\n    <ThemeProvider style={theme}>\n      <Channel channel={channel}>\n        <ChannelBackgroundView channelId={channel?.id} style={{ flex: 1 }}>\n          <Pressable style={styles.menuButton} onPress={handleMenuOnPress}>\n            <Text>🎨</Text>\n          </Pressable>\n          <MessageList />\n          <MessageInput />\n        </ChannelBackgroundView>\n      </Channel>\n    </ThemeProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  menuButton: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n    backgroundColor: 'rgba(255,87,56,0.65)',\n    borderRadius: 36,\n    padding: 16,\n    margin: 16,\n    alignItems: 'center',\n    zIndex: 10,\n  },\n});\n\nexport const theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transparent',\n    },\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Parts - TSX\nDESCRIPTION: Shows how to customize specific parts of the message component, such as the avatar and text, by providing custom components as props to the Channel component. This enables fine-grained control over the appearance of individual message elements.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  MessageAvatar={CustomAvatarComponent}\n  MessageText={CustomTextComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CooldownTimer - JSX\nDESCRIPTION: This code snippet demonstrates how to create a custom CooldownTimer component to replace the default one. It accepts a `seconds` prop (number) indicating the remaining cooldown time.  It implements a basic example that displays the remaining seconds and logs whether the number of seconds is even or odd.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CooldownTimerProps } from 'stream-chat-react-native';\n\nconst CustomCooldownTimer = ({ seconds }: CooldownTimerProps) => {\n  const isEven = seconds % 2 === 0;\n\n  console.log(`There is an ${isEven ? 'even' : 'odd'} amount of seconds left`);\n\n  return <Text>{seconds}</Text>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Consuming PaginatedMessageListContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the `PaginatedMessageListContext` using the `useContext` hook from React.  It imports the necessary context from `stream-chat-react-native` and extracts the `loadingMore`, `loadMoreRecent`, and `messages` values. It requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/paginated_message_list_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { PaginatedMessageListContext } from 'stream-chat-react-native';\n\nconst { loadingMore, loadMoreRecent, messages } = useContext(PaginatedMessageListContext);\n```\n\n----------------------------------------\n\nTITLE: Adding Message Input\nDESCRIPTION: This snippet includes the MessageInput component below the MessageList component within the Channel component. It configures the keyboardVerticalOffset property on the Channel component to 0. It depends on Channel, Chat and OverlayProvider components. The MessageInput component has no required props.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0}>\n            <MessageList />\n            <MessageInput />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Custom Keyboard Compatible View - React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom KeyboardCompatibleView component in React Native, which can be used to handle keyboard interactions in the Channel component. It uses react-native-safe-area-context to adjust the keyboard vertical offset based on safe area insets on iOS. The component renders children directly on Android and uses the built-in KeyboardCompatibleView on iOS with a calculated vertical offset. The insets value is used to account for the presence of the home indicator on newer iPhones. The children prop is rendered within the KeyboardCompatibleView. The `KeyboardCompatibleView` component is imported from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/keyboard.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport {Platform} from 'react-native';\nimport {useSafeAreaInsets} from 'react-native-safe-area-context';\nimport {KeyboardCompatibleView} from 'stream-chat-react-native';\n\nexport const CustomKeyboardCompatibleView = ({children}) => {\n  const insets = useSafeAreaInsets();\n\n  if (Platform.OS === 'android') {\n    return children;\n  }\n\n  const iosVerticalOffset = insets.bottom > 0 ? 60 : 0;\n\n  return (\n    <KeyboardCompatibleView\n      keyboardVerticalOffset={iosVerticalOffset}>\n      {children}\n    </KeyboardCompatibleView>\n  );\n};\n\n/** In your app */\n<Channel\n  KeyboardCompatibleView={CustomizedKeyboardView}\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Faded Chat Implementation with MessageList in React Native\nDESCRIPTION: This code snippet demonstrates how to implement a faded chat overlay on a video background using the MessageList component in React Native. It uses MaskedView and LinearGradient to create the fade effect. It requires the installation of `react-native-linear-gradient` and `@react-native-community/masked-view`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-list.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, View } from 'react-native';\n\n// Make sure you have installed following two dependencies\nimport MaskedView from '@react-native-community/masked-view';\nimport LinearGradient from 'react-native-linear-gradient';\n\nimport { Chat, Channel, MessageList } from 'stream-chat-react-native';\n\nconst theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transparent',\n    },\n  },\n  messageSimple: {\n    content: {\n      textContainer: {\n        backgroundColor: 'white',\n      },\n    },\n  },\n};\n\n// When you render your chat screen\n<SafeAreaView style={{ flex: 1 }}>\n  {/* For the sake of example, we are using image as background, you can replace it with your Video component. */}\n  <Image\n    source={{\n      uri: 'https://i.pinimg.com/474x/59/a2/aa/59a2aae82b34bace9dc4d4df90457a3b.jpg',\n    }}\n    style={{ height: '100%', width: '100%' }}\n  />\n\n  <View style={[{ position: 'absolute' }, StyleSheet.absoluteFillObject]}>\n    <Chat client={chatClient} style={theme}>\n      <Channel channel={channel} keyboardVerticalOffset={headerHeight} thread={thread}>\n        <View style={{ flex: 1 }} />\n        <View style={{ flex: 2 }}>\n          <MaskedView\n            style={{ flex: 1 }}\n            maskElement={\n              <LinearGradient\n                colors={['rgba(0,0,0,0)', 'rgba(0,0,0,1)']}\n                style={{\n                  flex: 1,\n                }}\n                start={{ x: 0, y: 0 }}\n                end={{ x: 0, y: 1 }}\n                locations={[0, 0.5]}\n              />\n            }\n          >\n            <MessageList />\n          </MaskedView>\n        </View>\n        <MessageInput />\n      </Channel>\n    </Chat>\n  </View>\n</SafeAreaView>;\n```\n\n----------------------------------------\n\nTITLE: Overriding Existing Language Translation - Typescript\nDESCRIPTION: This snippet demonstrates how to override existing language translations in the Stream Chat React Native SDK using the `registerTranslation` method.  This allows customization of existing translations for specific needs. Translations are registered for keys that already have default values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n\nstreami18n.registerTranslation('nl', {\n  'Delete Message': 'Verwijder bericht',\n});\n```\n\n----------------------------------------\n\nTITLE: Install React Native Firebase Messaging Module\nDESCRIPTION: This snippet shows how to install the necessary React Native Firebase modules using yarn. It installs the core app module and the messaging module for push notifications.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install & setup the app module\nyarn add @react-native-firebase/app\n\n# Install the messaging module\nyarn add @react-native-firebase/messaging\n```\n\n----------------------------------------\n\nTITLE: Consuming AttachmentPickerContext with useContext - React\nDESCRIPTION: This code snippet demonstrates how to consume the AttachmentPickerContext using the useContext hook in a React component. It imports the AttachmentPickerContext from the stream-chat-react-native library and extracts the openPicker and closePicker functions to control the attachment picker's visibility.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/attachment-picker-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { AttachmentPickerContext } from 'stream-chat-react-native';\n\nconst { openPicker, closePicker } = useContext(AttachmentPickerContext);\n```\n\n----------------------------------------\n\nTITLE: Rendering End Vote Button in React Native\nDESCRIPTION: This code snippet shows how to render an EndVoteButton component from the stream-chat-react-native library. It demonstrates the simplest use case, rendering the button with default behavior. This assumes that the button's default behavior is sufficient, or that the button is properly configured within the Stream Chat context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EndVoteButton } from 'stream-chat-react-native';\n\nconst button = () => <EndVoteButton />;\n```\n\n----------------------------------------\n\nTITLE: Consuming AttachmentPickerContext with useAttachmentPickerContext hook - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the `AttachmentPickerContext` using the `useAttachmentPickerContext` hook provided by the `stream-chat-react-native` library. It imports the hook and then uses it to access the `openPicker` and `closePicker` functions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/attachment_picker_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAttachmentPickerContext } from 'stream-chat-react-native';\n\nconst { openPicker, closePicker } = useAttachmentPickerContext();\n```\n\n----------------------------------------\n\nTITLE: Setting up React Navigation Stack in React Native\nDESCRIPTION: This snippet demonstrates how to set up a React Navigation Stack using `createNativeStackNavigator` from `react-native-screens/native-stack` and `NavigationContainer` from `@react-navigation/native`. It defines a Stack Navigator with two screens: 'Channel' and 'WallpaperOverviewScreen'. The 'Channel' screen is set as the initial route and uses `noHeaderOptions` to hide the header.  It requires the installation of `@react-navigation/native`, `react-native-screens`, and related dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_background_customization.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNativeStackNavigator } from 'react-native-screens/native-stack';\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst Stack = createNativeStackNavigator();\n\nexport default () => {\n  return (\n    <SafeAreaProvider>\n      <ThemeProvider style={theme}>\n        <NavigationContainer>\n          <Stack.Navigator initialRouteName='Channel'>\n            <Stack.Screen component={ChannelScreen} name='Channel' options={noHeaderOptions} />\n            <Stack.Screen component={WallpaperOverviewScreen} name='WallpaperOverviewScreen' />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </ThemeProvider>\n    </SafeAreaProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ThemeContext with useTheme Hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ThemeContext using the useTheme hook provided by the stream-chat-react-native library.  It imports useTheme from stream-chat-react-native and retrieves the theme object, specifically accessing the accent_red color. It depends on stream-chat-react-native.  The returned value is the theme object, allowing access to its properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/theme-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'stream-chat-react-native';\n\nconst {\n  theme: {\n    colors: { accent_red },\n  },\n} = useTheme();\n```\n\n----------------------------------------\n\nTITLE: Consuming PaginatedMessageListContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the `PaginatedMessageListContext` using the `useContext` hook in a React functional component. It imports the necessary context from `stream-chat-react-native` and retrieves the `loadingMore`, `loadMoreRecent`, and `messages` properties. These properties provide information about the message loading state and the list of messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/paginated-message-list-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { PaginatedMessageListContext } from 'stream-chat-react-native';\n\nconst { loadingMore, loadMoreRecent, messages } = useContext(PaginatedMessageListContext);\n```\n\n----------------------------------------\n\nTITLE: Basic MessageInput Usage with React Context\nDESCRIPTION: This code snippet demonstrates the basic integration of the MessageInput component within a React application using OverlayProvider, Chat, and Channel components. It showcases how to nest MessageInput inside a Channel component, which is itself within Chat and OverlayProvider. This configuration provides the necessary context for the MessageInput component to function correctly within the Stream Chat React Native environment.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_input.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider>\n  <Chat client={client}>\n    <Channel channel={channel}>\n      <MessageInput />\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Load More Button Implementation - TSX\nDESCRIPTION: This code snippet demonstrates how to replace the default infinite scroll pagination with a \"Load More\" button in the `ChannelList` component. It uses `additionalFlatListProps` to override the default FlatList behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/channel_list_customization.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\nimport { useChannelsContext } from 'stream-chat-react-native';\n\nconst FooterLoadMoreButton = () => {\n  const { loadingChannels, loadNextPage, hasNextPage } = useChannelsContext();\n\n  if (loadingChannels || !hasNextPage) return null;\n\n  return <Button title={'Load More'} onPress={loadNextPage} />;\n};\n\n<ChannelList\n  additionalFlatListProps={{\n    ListFooterComponent: FooterLoadMoreButton,\n    onEndReached: () => null,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependencies (Yarn)\nDESCRIPTION: This command installs a series of peer dependencies required by Stream Chat React Native, using Yarn. These dependencies provide features like camera roll access, network information, document picking, file system access, gesture handling, haptic feedback, image manipulation, reanimated, safe area context, sharing, and SVG support.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-community/cameraroll @react-native-community/netinfo @stream-io/flat-list-mvcp react-native-document-picker react-native-fs react-native-gesture-handler react-native-haptic-feedback react-native-haptic-feedback react-native-image-crop-picker react-native-image-resizer react-native-reanimated react-native-safe-area-context react-native-share react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Overriding Capabilities with Channel Component - React Native\nDESCRIPTION: This snippet demonstrates how to override user capabilities in a Stream Chat React Native application using the `overrideOwnCapabilities` prop within the `<Channel>` component. By setting properties like `uploadFile` and `sendLinks` to `false`, you can disable the file upload button and prevent users from sending URLs in messages. The `Channel` component is expected to be imported from Stream Chat React Native SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel/props/override_own_capabilities.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    uploadFile: false,\n    sendLinks: false\n  }}\n\n```\n\n----------------------------------------\n\nTITLE: MessageAction Type Definition - TypeScript\nDESCRIPTION: Defines the structure of a MessageAction object, which represents a single action that can be performed on a message. It includes properties for the action's handler, title, icon, and title style.  This type is used to represent all available message actions in the UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_actions_customization.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MessageAction = {\n  action: () => void;\n  title: string;\n  icon?: React.ReactElement;\n  titleStyle?: StyleProp<TextStyle>;\n};\n```\n\n----------------------------------------\n\nTITLE: Send Current Location Message - JavaScript\nDESCRIPTION: This JavaScript function uses react-native-geolocation to retrieve the user's current location and sends it as a message with a location attachment through the Stream Chat channel. The message includes latitude and longitude.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_8\n\nLANGUAGE: js\nCODE:\n```\nconst sendCurrentLocation = () => {\n  Geolocation.getCurrentPosition(info => {\n    channel?.sendMessage({\n      text: 'This is my location',\n      attachments: [\n        {\n          type: 'location',\n          latitude: info.coords.latitude,\n          longitude: info.coords.longitude,\n        },\n      ],\n    });\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Install Stream Chat React Native SDK (Expo)\nDESCRIPTION: This command installs the core Stream Chat React Native SDK using npx expo install for projects initialized with Expo.  It adds the stream-chat-expo package to your project's dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install stream-chat-expo\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageInputContext with useContext\nDESCRIPTION: This code snippet demonstrates how to consume the MessageInputContext using the useContext hook in a React component. It retrieves the sendMessage and toggleAttachmentPicker functions from the context, allowing the component to send messages and toggle the attachment picker.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/message_input_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { MessageInputContext } from 'stream-chat-react-native';\n\nconst { sendMessage, toggleAttachmentPicker } = useContext(MessageInputContext);\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme - TypeScript\nDESCRIPTION: This snippet showcases how to apply a custom theme to the stream-chat-react-native components. The theme is passed as a prop to the OverlayProvider component, making it accessible via context to the Chat and ChannelList components. Applying the theme at the OverlayProvider level is generally sufficient, as it is available to all nested components. The component imports and uses the client, ChannelList, and Chat components from stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/theming.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nexport const App = () => (\n  <OverlayProvider value={{ style: theme }}>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Action List Item with React and Typescript\nDESCRIPTION: This code demonstrates how to customize individual message action list items using React and Typescript in Stream Chat React Native. It defines a `CustomMessageActionListItem` component that selectively overrides the rendering of `pinMessage` and `muteUser` actions.  For these actions, it renders a custom `Text` component within a `TapGestureHandler` and `Animated.View`. For all other actions, it renders the default `MessageActionListItem`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_actions_customization.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessageActionListItem, OverlayProvider, useMessageActionAnimation } from 'stream-chat-react-native';\n\nconst CustomMessageActionListItem = ({ action, actionType, ...rest }) => {\n  const { onTap } = useMessageActionAnimation({ action: action });\n  if (actionType === 'pinMessage') {\n    return (\n      <TapGestureHandler onHandlerStateChange={onTap}>\n        <Animated.View>\n          <Text>{actionType}</Text>\n        </Animated.View>\n      </TapGestureHandler>\n    );\n  } else if (actionType === 'muteUser') {\n    return (\n      <TapGestureHandler onHandlerStateChange={onTap}>\n        <Animated.View>\n          <Text>{actionType}</Text>\n        </Animated.View>\n      </TapGestureHandler>\n    );\n  } else {\n    return <MessageActionListItem action={action} actionType={actionType} {...rest} />;\n  }\n};\n\n<OverlayProvider MessageActionListItem={CustomMessageActionListItem}>\n  {/* Underlying Channel, MessageList and Message components */}\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Wrapping the root component with DebugContextProvider in TSX\nDESCRIPTION: Wraps the root of the React Native component tree with `DebugContextProvider` from `stream-chat-react-native`, providing the `useFlipper` function from `stream-chat-react-native-devtools`. This enables the Flipper plugin to access and display debugging information from the Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/debug-using-flipper-plugin.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DebugContextProvider } from 'stream-chat-react-native';\nimport { useFlipper } from 'stream-chat-react-native-devtools';\n...\n\n<DebugContextProvider useFlipper={useFlipper}>\n  {/* All other elements of the App component comes here */}\n</DebugContextProvider>\n```\n\n----------------------------------------\n\nTITLE: Custom format in i18n JSON\nDESCRIPTION: This code snippet illustrates customizing the time format using the i18n JSON. It sets the `format` parameter in the `timestampFormatter` function, allowing for specific time formats to be applied, such as `LT` for localized time.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/date-time-formatting.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"timestamp/MessageTimestamp\": \"{{ timestamp | timestampFormatter(format: LT) }}\"\n```\n\n----------------------------------------\n\nTITLE: Consuming ImageGalleryContext with useImageGalleryContext hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ImageGalleryContext using the useImageGalleryContext hook provided by the library. It imports the hook and retrieves the images and setImages values for managing the image gallery.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/image_gallery_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useImageGalleryContext } from 'stream-chat-react-native';\n\nconst { images, setImages } = useImageGalleryContext();\n```\n\n----------------------------------------\n\nTITLE: Customizing File Attachment (JSX)\nDESCRIPTION: This JSX snippet showcases the overriding of the FileAttachment component. The component receives the `attachment` prop and logs properties like `mime_type`, `title`, `file_size`, and `actions` to the console.  The custom UI should replace the placeholder comment.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomFileAttachment = ({ attachment }) => {\n  console.log(attachment.mime_type);\n  console.log(attachment.title);\n  console.log(attachment.file_size);\n  console.log(attachment.actions);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Channel UI - React Native\nDESCRIPTION: This code snippet initializes the basic UI for a Stream Chat channel using stream-chat-react-native components. It includes the OverlayProvider, Chat, Channel, ChannelHeader, MessageList, and MessageInput components to display a chat interface.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, MessageList, MessageInput } from 'stream-chat-react-native';\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <ChannelHeader />\n          <MessageList />\n          <MessageInput />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Streami18n with Translation Overrides - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize `Streami18n` with specific translation overrides for a given language. It showcases how to provide custom translations for existing keys, ensuring that the application displays localized text according to the specified language.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst streami18n =new Streami18n({\n  language: 'nl',\n  translationsForLanguage: {\n    'Nothing yet...': 'Nog Niet...',\n    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Wrapping a Screen Component with OverlayProvider\nDESCRIPTION: This example illustrates how to wrap a specific screen component with the `OverlayProvider` when the `Chat` component is rendered within that screen. This setup is useful when you want to manage the overlay context for specific parts of the app's navigation stack. Uses React Navigation and the `Screen` component defined in another file.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { OverlayProvider } from 'stream-chat-react-native';\nimport { Screen } from './Screen';\n\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const App = () => (\n  <NavigationContainer>\n    <OverlayProvider>\n      <Stack.Navigator>\n        <Stack.Screen component={Screen} name='home' />\n      </Stack.Navigator>\n    </OverlayProvider>\n  </NavigationContainer>\n);\n```\n\n----------------------------------------\n\nTITLE: Using useThreadContext Hook\nDESCRIPTION: This snippet shows how to utilize the useThreadContext hook, which is provided by the 'stream-chat-react-native' library, to consume the ThreadContext.  The hook simplifies access to the context's value, offering a more concise way to retrieve it. The value obtained can then be used within the component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/thread_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadContext } from 'stream-chat-react-native';\n\nconst value = useThreadContext();\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageError Component\nDESCRIPTION: This snippet renders the MessageError component. It's used to display error messages related to a specific message, such as when a message fails to send. The component receives props from the Channel component to customize the error message's presentation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageError />\n```\n\n----------------------------------------\n\nTITLE: Consuming CreatePollContext with useCreatePollContext hook - TSX\nDESCRIPTION: This snippet shows how to consume the CreatePollContext using the useCreatePollContext hook provided by the 'stream-chat-react-native' library. This hook provides a more streamlined way to access the context value within functional components. The hook simplifies the context access compared to the standard useContext hook.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/create-poll-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useCreatePollContext } from 'stream-chat-react-native';\n\nconst value = useCreatePollContext();\n```\n\n----------------------------------------\n\nTITLE: Using OverlayProvider - TSX\nDESCRIPTION: Wraps the application components with the `OverlayProvider`. This provider enables features like message interactions on long press and full-screen image viewing. It is a top-level provider in the Stream Chat component hierarchy. Requires the `stream-chat-react-native` package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\n\nexport const Screen = () => <OverlayProvider>{/** App components */}</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Integrating Thread component in React Native\nDESCRIPTION: This code snippet demonstrates how to integrate the Thread component for threaded messages. It uses the onThreadSelect prop of MessageList to manage the selected thread. The thread state is maintained using useState and passed to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, MessageType, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [thread, setThread] = useState<MessageType | null>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0} thread={thread} threadList={!!thread}>\n            {thread ? (\n              <Thread />\n            ) : (\n              <>\n                <MessageList onThreadSelect={setThread} />\n                <MessageInput />\n              </>\n            )}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Setting Background Message Handler - React Native\nDESCRIPTION: This code snippet sets up a background message handler using React Native Firebase to listen for notifications when the app is in the background. It retrieves the message, creates an Android notification channel (using Notifee), and displays the notification. It uses Stream Chat to get message details.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n// index.js\nimport { AppRegistry } from 'react-native';\nimport messaging from '@react-native-firebase/messaging';\nimport { StreamChat } from 'stream-chat';\n\nmessaging().setBackgroundMessageHandler(async remoteMessage => {\n  const client = StreamChat.getInstance('api_key');\n\n  // You can also provide tokenProvider instead of static token\n  // await client._setToken({ id: userId }, tokenProvider)\n  client._setToken(\n    {\n      id: 'user_id',\n    },\n    'user_token',\n  );\n  // handle the message\n  const message = await client.getMessage(remoteMessage.data.id);\n\n  // create the android channel to send the notification to\n  const channelId = await notifee.createChannel({\n    id: 'chat-messages',\n    name: 'Chat Messages',\n  });\n\n  // display the notification\n  const { stream, ...rest } = remoteMessage.data ?? {};\n  const data = {\n    ...rest,\n    ...((stream as unknown as Record<string, string> | undefined) ?? {}), // extract and merge stream object if present\n  };\n  await notifee.displayNotification({\n    title: 'New message from ' + message.message.user.name,\n    body: message.message.text,\n    data,\n    android: {\n      channelId,\n      // add a press action to open the app on press\n      pressAction: {\n        id: 'default',\n      },\n    },\n  });\n});\n\nfunction App() {\n  // Your application\n}\n\nAppRegistry.registerComponent('app', App);\n```\n\n----------------------------------------\n\nTITLE: Add Stream Chat React Native Dependency using npm\nDESCRIPTION: This command adds the stream-chat-react-native package to your React Native project using npm. It is a necessary first step to integrate Stream Chat functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/getting_started.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install stream-chat-react-native@3.10.2\n```\n\n----------------------------------------\n\nTITLE: Update FCM Server Key via Stream Chat Server side SDK\nDESCRIPTION: This code snippet shows how to update the Firebase Cloud Messaging (FCM) server key and notification/data templates using the Stream Chat Server-Side SDK.  It requires the API Key and API Secret for authentication. The `firebase_config` object includes `server_key`, `notification_template`, and `data_template` for customizing push notifications.  It uses async/await syntax.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v1.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance(API_KEY, API_SECRET);\nawait client.updateAppSettings({\n  firebase_config: {\n    server_key: 'server_key',\n    notification_template: `{\"message\":{\"notification\":{\"title\":\"New messages\",\"body\":\"You have {{ unread_count }} new message(s) from {{ sender.name }}\"},\"android\":{\"ttl\":\"86400s\",\"notification\":{\"click_action\":\"OPEN_ACTIVITY_1\"}}}}`,\n    data_template: `{\"sender\":\"{{ sender.id }}\",\"channel\":{\"type\": \"{{ channel.type }}\",\"id\":\"{{ channel.id }}\"},\"message\":\"{{ message.id }}\"}`,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Keyboard Compatible View\nDESCRIPTION: This code snippet shows how to disable the default KeyboardCompatibleView in the Stream Chat Channel component. By setting the `disableKeyboardCompatibleView` prop to `true`, the default keyboard handling is bypassed. This is useful when you want to implement custom keyboard handling logic or when the default behavior is not desired.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/keyboard.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n<Channel\n  disableKeyboardCompatibleView\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with GestureHandlerRootView (JSX)\nDESCRIPTION: This code snippet shows how to wrap your application's entry point with `<GestureHandlerRootView>` from 'react-native-gesture-handler'. This is necessary for the gesture handler to function correctly, especially in conjunction with Stream Chat's OverlayProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { OverlayProvider } from 'stream-chat-react-native';\n\nexport default function App() {\n  return (\n    <GestureHandlerRootView>\n      <OverlayProvider>{/* Your app code goes here */}</OverlayProvider>\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Passing additional FlatList props to ChannelList - TypeScript\nDESCRIPTION: This code snippet shows how to pass additional props to the underlying FlatList component used by the ChannelList component in a React Native application using Stream Chat. In this example, the `bounces` prop is set to true. Avoid using this prop to access the FlatList ref; instead, use `setFlatListRef`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/core-components/channel-list/props/additional_flat_list_props.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<ChannelList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Customizing timestamp formatting with i18n JSON - JSON\nDESCRIPTION: This JSON snippet demonstrates how to customize date and time formatting using the i18n service.  It overrides the default formatting parameters for the `MessageSystem` component, setting the format to display the year (YYYY). This configuration is stored within the translation JSON files.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/date-time-formatting.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"timestamp/SystemMessage\": \"{{ timestamp | timestampFormatter(format: YYYY) }}\"\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Grouping - React Native\nDESCRIPTION: This code snippet demonstrates how to disable message grouping in the MessageList component. Setting the enableMessageGroupingByUser prop to false on the Channel component prevents messages from the same user from being grouped together, which can reduce the processing required to render the message list.  It is recommended to only use in conjunction with not rendering message avatars.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/performance.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel enableMessageGroupingByUser={false} />\n```\n\n----------------------------------------\n\nTITLE: Customizing timestamp via timestampTranslationKey prop - Typescript\nDESCRIPTION: This code snippet shows how to customize the date format by overriding the default translation key via the `timestampTranslationKey` prop. It imports the necessary components and creates a custom `MessageTimestamp` component that uses the specified translation key. This allows for specific formatting configurations for individual timestamp instances.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/date-time-formatting.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { MessageTimestampProps, MessageTimestamp } from 'stream-chat-react-native';\n\nconst CustomMessageTimestamp = (props: MessageTimestampProps) => (\n  <MessageTimestamp {...props} timestampTranslationKey='customTimestampTranslationKey' />\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete List - JSX\nDESCRIPTION: This snippet demonstrates how to completely customize the autocomplete suggestion list in the Stream Chat React Native Channel component using the `AutoCompleteSuggestionList` prop.  It renders different lists for command, emoji, and default triggers, employing FlatList for emoji and custom mapping for commands and default.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-auto-complete-suggestion-list.mdx#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\nimport { AutoCompleteSuggestionHeader, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\nimport { FlatList, Text, View } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionList={({ data, onSelect, queryText, triggerType }) => {\n    if (triggerType === 'command') {\n      return (\n        <View>\n          <View>\n            <Text>Command suggestions for {queryText}</Text>\n          </View>\n          {data.map(item => (\n            <AutoCompleteSuggestionItem itemProps={item} key={item.name} triggerType={triggerType} />\n          ))}\n        </View>\n      );\n    } else if (triggerType === 'emoji') {\n      return (\n        <FlatList\n          data={data}\n          keyboardShouldPersistTaps='always'\n          ListHeaderComponent={<AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />}\n          renderItem={({ index, item }) => (\n            <TouchableOpacity\n              onPress={() => {\n                onSelect(item);\n              }}\n            >\n              <Text>{item.unicode}</Text>\n            </TouchableOpacity>\n          )}\n        />\n      );\n    } else {\n      return (\n        <View>\n          <AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />\n          {data.map(item => (\n            <AutoCompleteSuggestionItem itemProps={item} key={item.name} triggerType={triggerType} />\n          ))}\n        </View>\n      );\n    }\n  }}\n>\n  {/*The underlying components*/}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Consuming PaginatedMessageListContext with usePaginatedMessageListContext hook - TSX\nDESCRIPTION: Demonstrates how to consume the PaginatedMessageListContext using the usePaginatedMessageListContext hook in a React component. It imports the necessary hook from stream-chat-react-native, and then retrieves the loadingMore, loadMoreRecent, and messages values from the hook. The component must be a child of the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/paginated_message_list_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePaginatedMessageListContext } from 'stream-chat-react-native';\n\nconst { loadingMore, loadMoreRecent, messages } = usePaginatedMessageListContext();\n```\n\n----------------------------------------\n\nTITLE: Setting Bottom Inset for AttachmentPicker (SafeArea)\nDESCRIPTION: This example shows how to set the `bottomInset` for the `OverlayProvider` using `useSafeAreaInsets` to account for safe area insets, particularly the bottom inset. This is used to adjust the height of the AttachmentPicker menu to align properly with the bottom-sheet.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const Nav = () => {\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <NavigationContainer>\n      <OverlayProvider bottomInset={bottom}>\n        <Chat client={client}>\n          <Stack.Navigator>\n            <Stack.Screen component={() => {/** App components */}} name='home' />\n          </Stack.Navigator>\n        </Chat>\n      </OverlayProvider>\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Install Peer Dependencies (Expo)\nDESCRIPTION: This command installs the necessary peer dependencies for the Stream Chat React Native SDK using npx expo install for projects initialized with Expo. These dependencies are required for optimal chat experience.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @react-native-community/netinfo expo-image-manipulator react-native-gesture-handler react-native-reanimated react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Retrieving i18next Instance - JavaScript\nDESCRIPTION: This code snippet shows how to retrieve the underlying i18next instance used by `Streami18n`. This allows direct access to the i18next API for more advanced customization or integration with other i18next-based libraries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst i18n = streami18n.geti18Instance();\n```\n\n----------------------------------------\n\nTITLE: Installing stream-chat-react-native-devtools with NPM\nDESCRIPTION: Installs the `stream-chat-react-native-devtools` package as a development dependency using NPM. This package facilitates communication between the Stream Chat React Native SDK and the Flipper plugin, enabling debugging capabilities.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/debug-using-flipper-plugin.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev stream-chat-react-native-devtools\n```\n\n----------------------------------------\n\nTITLE: Customizing OverlayReactionList in OverlayProvider - TSX\nDESCRIPTION: This snippet shows how to customize the OverlayReactionList component within the OverlayProvider.  By passing a function that returns null to the OverlayReactionList prop, the default reaction list is effectively removed. This allows developers to replace it with custom implementations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/overlay_provider.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider OverlayReactionList={() => null}>\n```\n\n----------------------------------------\n\nTITLE: Message Preview Object Definition\nDESCRIPTION: This code snippet defines the structure of a message preview object in the Stream Chat React Native library. It includes properties such as creation timestamp, the message object itself, preview formatting options, and the read status of the latest message. The `previews` object controls formatting, including bolding and the actual preview text.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel-preview-messenger/props/latest_message_preview.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n created_at: '' ,\n messageObject: { ... },\n previews: {\n   bold: true,\n   text: 'This is the message preview text'\n },\n status: 0 | 1 | 2 // read states of latest message.\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelsContext with useContext in React TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ChannelsContext using the useContext hook in a React functional component written in TypeScript. It imports the necessary modules and extracts the channels and reloadList properties from the context. This allows child components of ChannelList to access the channel data and the reloadList function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channels-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChannelsContext } from 'stream-chat-react-native';\n\nconst { channels, reloadList } = useContext(ChannelsContext);\n```\n\n----------------------------------------\n\nTITLE: Consuming ThemeContext using useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ThemeContext using the useContext hook from React. It imports the ThemeContext and useContext, then extracts the accent_red color from the theme object. This allows components to access and use the theme defined in the OverlayProvider or Chat components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/theme-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThemeContext } from 'stream-chat-react-native';\n\nconst {\n  theme: {\n    colors: { accent_red },\n  },\n} = useContext(OverlayContext);\n```\n\n----------------------------------------\n\nTITLE: Using ImageGalleryContext and OverlayContext - TSX\nDESCRIPTION: This snippet demonstrates how to use the ImageGalleryContext in combination with the OverlayContext to open an image viewer when a user presses on an image. It shows how to set the images, the active image, and the overlay settings.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/image_gallery_context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { images, setImages } = useImageGalleryContext();\nconst { setBlurType, setOverlay } = useOverlayContext();\n\nonPress={() => {\n  setImages(messagesWithImage);\n  setImage({\n    messageId: selectedItem.messageId,\n    url: selectedItem.uri,\n  });\n  setBlurType('dark');\n  setOverlay('gallery');\n}}\n```\n\n----------------------------------------\n\nTITLE: Basic Chat Component Usage with Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the Chat component within an OverlayProvider. It initializes the StreamChat client and renders the ChannelList component within the Chat component. The lines highlighted (8 and 10) are significant because they show the client prop being passed and the ChannelList component being rendered as a child.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/chat.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Using ImageGalleryContext and OverlayContext - TSX\nDESCRIPTION: This snippet shows how to use the ImageGalleryContext in combination with the OverlayContext to open an image viewer and display a selected image when a user presses on an image.  The setImages function is used to update the image array, setImage is used to specify the active image and setOverlay is used to trigger the gallery overlay.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/image_gallery_context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { images, setImages } = useImageGalleryContext();\nconst { setOverlay } = useOverlayContext();\n\nonPress={() => {\n  setImages(messagesWithImage);\n  setImage({\n    messageId: selectedItem.messageId,\n    url: selectedItem.uri,\n  });\n  setOverlay('gallery');\n}}\n```\n\n----------------------------------------\n\nTITLE: Setting topInset using useAttachmentPickerContext - TSX\nDESCRIPTION: This code snippet shows how to adjust the `topInset` value for the image picker using the `useAttachmentPickerContext` hook and `setTopInset` function. It specifically addresses the scenario where the StatusBar is translucent on Android and requires height adjustments. The code calculates the final header height by subtracting the status bar height (if present) from the header height and uses the `useEffect` hook to apply the adjustment when the component mounts.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StatusBar } from 'react-native';\nimport { useHeaderHeight } from '@react-navigation/elements';\nimport { useAttachmentPickerContext } from 'stream-chat-react-native';\nconst headerHeight = useHeaderHeight();\nconst { setTopInset } = useAttachmentPickerContext();\n\n// When the status bar is translucent, the headerHeight contains the actual header height + the status bar height which needs to be substracted.\nconst finalHeaderHeight =\n  headerHeight - (Platform.OS === 'android' && StatusBar.currentHeight ? StatusBar.currentHeight : 0);\n\nuseEffect(() => {\n  setTopInset(finalHeaderHeight);\n}, [setTopInset, finalHeaderHeight]);\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime Format with Moment.js\nDESCRIPTION: Illustrates how to override the DateTime format using a Moment.js object. Requires installing `moment` and locale files.  The `DateTimeParser` option is used to provide the custom Moment.js instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'moment/locale/nl';\nimport 'moment/locale/it';\n// or if you want to include all locales\nimport 'moment/min/locales';\n\nimport Moment from moment;\n\nconst i18n =new Streami18n({\n  language: 'nl',\n  DateTimeParser: Moment,\n});\n```\n\n----------------------------------------\n\nTITLE: Compress Video File Before Uploading - React Native\nDESCRIPTION: This code snippet demonstrates how to compress a video file before uploading it to Stream Chat using the react-native-compressor library. It overrides the default doDocUploadRequest prop of the Channel component to compress the file before sending it.  Requires react-native-compressor library.  Input: file object with uri, name and mimeType properties. Output: Compressed video file uploaded to Stream Chat.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/file_compression.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel, ChannelProps } from 'stream-chat-react-native';\nimport { Video as VideoCompressor } from 'react-native-compressor';\n\n\nconst customDoDocUploadRequest: NonNullable<ChannelProps['doDocUploadRequest']> = async (\n  file,\n  channel,\n) => {\n  if (!file.uri) {\n    throw new Error('Invalid file provided');\n  }\n  // check if it is a video file using the MIME type\n  if (file.mimeType?.startsWith('video/')) {\n    const result = await VideoCompressor.compress(file.uri, {\n      compressionMethod: 'auto',\n    });\n    // set the local file uri to the compressed file\n    file.uri = result;\n  }\n\n  // send the file\n  return await channel.sendFile(file.uri, file.name, file.mimeType);\n};\n\n\n<Channel channel={channel} doDocUploadRequest={customDoDocUploadRequest}>\n```\n\n----------------------------------------\n\nTITLE: Setting Language with setLanguage Method\nDESCRIPTION: Illustrates how to change the language of an existing Streami18n instance using the `setLanguage` method.  This allows for dynamic language switching within the application.  The example shows changing it to French ('fr').\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n\n...\n// Logic for how a user can change the language\n...\n\nstreami18n.setLanguage('fr');// The UI will change to French.\n```\n\n----------------------------------------\n\nTITLE: Theming Avatar size in React Native\nDESCRIPTION: This code snippet demonstrates how to customize the avatar size using the theming system within the stream-chat-react-native library.  It showcases how to define a theme object where the BASE_AVATAR_SIZE property within the avatar section is set to a specific value (30 in this case). This approach offers a centralized way to manage visual styles across the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-avatar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  avatar: {\n    BASE_AVATAR_SIZE: 30,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Navigating to Poll Answers Screen - React Native\nDESCRIPTION: This code snippet modifies the `ShowAllCommentsButton` to navigate to a `PollAnswersScreen` when pressed, passing the `message` and `poll` objects as parameters. This enables the user to view all answers (comments) associated with a specific poll.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-next-line\n  PollAnswersList,\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      // highlight-start\n      <ShowAllCommentsButton\n          onPress={({ message, poll }) => {\n            navigation.navigate('PollAnswersScreen', {\n              message,\n              poll,\n            });\n          }}\n        />\n      // highlight-end\n      <AddCommentButton />\n      <ViewResultsButton\n        onPress={({ message, poll }) =>\n          navigation.navigate('PollResultsScreen', {\n            message,\n            poll,\n          });\n        }\n      />\n      <EndVoteButton />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming ChatContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ChatContext using the useContext hook in a React functional component.  It imports useContext from 'react' and ChatContext from 'stream-chat-react-native'. It then extracts the client and isOnline properties from the context. This allows access to the Stream Chat client and the user's online status within the component.  Dependencies: react, stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/chat_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChatContext } from 'stream-chat-react-native';\n\nconst { client, isOnline } = useContext(ChatContext);\n```\n\n----------------------------------------\n\nTITLE: Install Native Image Picker - Expo\nDESCRIPTION: This command installs the expo-image-picker package using npx. This package provides the native image picker functionality for Expo projects.  Follow post-installation steps mentioned in the expo-image-picker documentation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/native-image-picker.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-picker\n```\n\n----------------------------------------\n\nTITLE: Using useChannelContext Hook with Generics (TSX)\nDESCRIPTION: This snippet shows how to use the `useChannelContext` hook with generics to correctly type the returned `channel` object. By providing the `StreamChatGenerics` type, you can ensure that the `channel` object is typed according to your custom channel type definition, enabling type-safe access to custom channel properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst { channel } = useChannelContext<StreamChatGenerics>();\n```\n\n----------------------------------------\n\nTITLE: Customizing File Attachment Theme - TypeScript\nDESCRIPTION: This code snippet shows how to customize the theme styles for file attachments within the stream-chat-react-native library.  It overrides the background color of the container and sets the height and width of the icon within the file attachment component, demonstrating specific style modifications for sub-components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/theming.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme: DeepPartial<Theme> = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n      icon: {\n        height: 16,\n        width: 16,\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Overriding FlatList Props in PollAnswersList - React Native\nDESCRIPTION: This snippet shows how to override the default FlatList props of the PollAnswersList component using the additionalFlatListProps prop. This allows customizing the FlatList's behavior, such as enabling bouncing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-answers-list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<PollAnswersList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Set Language - Typescript\nDESCRIPTION: This code snippet demonstrates how to change the current language of the `Streami18n` instance using the asynchronous `setLanguage()` method. It returns the new translation function (`t`) after updating the language. Dependencies: Streami18n class.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst t = await streami18n.setLanguage('nl');\n```\n\n----------------------------------------\n\nTITLE: Render Location Card - JSX\nDESCRIPTION: This JSX code defines a React Native component that renders a location attachment as an image of a static map. It uses the prepareStaticMapUrl function to generate the map URL and the goToGoogleMaps function to open the location in Google Maps when tapped.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\nconst LocationCard = ({ type, latitude, longitude }) => {\n  if (type === 'location') {\n    const mapApi = prepareStaticMapUrl(latitude, longitude);\n    console.log(mapApi);\n    return (\n      <TouchableOpacity onPress={() => goToGoogleMaps(latitude, longitude)}>\n        <Image source={{ uri: mapApi }} style={{ height: 200, width: 300 }} />\n      </TouchableOpacity>\n    );\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing PollAllOptionsContent - React Native\nDESCRIPTION: Demonstrates how to override the default PollAllOptionsContent with a custom component. The custom component, `MyPollAllOptionsContent`, accesses poll options using the `usePollState` hook and renders the option IDs as text.  It demonstrates how to replace the default UI with a custom implementation. It requires import of Text from react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-all-options.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { OverlayProvider, Chat, Channel, PollAllOptions, usePollState } from 'stream-chat-react-native';\n\nconst MyPollAllOptionsContent = () => {\n  const { options } = usePollState();\n  return options.map(option => <Text>{option.id}</Text>);\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollAllOptions message={message} poll={poll} PollAllOptionsContent={MyPollAllOptionsContent} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Markdown Style Type Definition - Typescript\nDESCRIPTION: Defines the `MarkdownStyle` type used for styling markdown content within messages. It specifies the available keys for customizing various markdown elements. Each key corresponds to a specific markdown element and accepts a `TextStyle`, `ViewStyle`, or `ImageStyle` object from React Native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MarkdownStyle = Partial<{\n  autolink: TextStyle;\n  blockQuoteBar: ViewStyle;\n  blockQuoteSection: ViewStyle;\n  blockQuoteSectionBar: ViewStyle;\n  blockQuoteText: TextStyle | ViewStyle;\n  br: TextStyle;\n  codeBlock: TextStyle;\n  del: TextStyle;\n  em: TextStyle;\n  heading: TextStyle;\n  heading1: TextStyle;\n  heading2: TextStyle;\n  heading3: TextStyle;\n  heading4: TextStyle;\n  heading5: TextStyle;\n  heading6: TextStyle;\n  hr: ViewStyle;\n  image: ImageStyle;\n  inlineCode: TextStyle;\n  list: ViewStyle;\n  listItem: ViewStyle;\n  listItemBullet: TextStyle;\n  listItemNumber: TextStyle;\n  listItemText: TextStyle;\n  listRow: ViewStyle;\n  mailTo: TextStyle;\n  mentions: TextStyle;\n  newline: TextStyle;\n  noMargin: TextStyle;\n  paragraph: TextStyle;\n  paragraphCenter: TextStyle;\n  paragraphWithImage: ViewStyle;\n  strong: TextStyle;\n  sublist: ViewStyle;\n  table: ViewStyle;\n  tableHeader: ViewStyle;\n  tableHeaderCell: TextStyle;\n  tableRow: ViewStyle;\n  tableRowCell: ViewStyle;\n  tableRowLast: ViewStyle;\n  text: TextStyle;\n  u: TextStyle;\n  view: ViewStyle;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Custom Editing State Header - React Native (TSX)\nDESCRIPTION: This snippet shows how to create a custom editing state header for the MessageInput component.  It uses the Channel component with a custom Editing state header component. It requires the Button, Text, View components from react-native, and Channel, useMessageInputContext from stream-chat-react-native.  It displays a custom header with a close button that clears the editing state and resets the input.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button, Text, View } from 'react-native';\nimport { Channel, useMessageInputContext } from 'stream-chat-react-native';\n\nconst CustomInputEditingStateHeader = () => {\n  const { clearEditingState, resetInput } = useMessageInputContext();\n  return (\n    <View>\n      <Text>Editing Header</Text>\n      <Button\n        onPress={() => {\n          clearEditingState();\n          resetInput();\n        }}\n        title='Close'\n      />\n    </View>\n  );\n};\n\n<Channel channel={channel} InputEditingStateHeader={CustomInputEditingStateHeader}>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: These commands install the necessary dependencies for location tracking and map integration in the React Native application. `@react-native-community/geolocation` is used for accessing the device's location, and `react-native-maps` is for displaying the location on a map.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-community/geolocation\nyarn add react-native-maps\n```\n\n----------------------------------------\n\nTITLE: Creating a message with location attachment in JavaScript\nDESCRIPTION: This JavaScript code snippet shows how to create a message object with a location attachment.  The attachment includes the type set to 'location', along with latitude and longitude coordinates. This message can then be sent through the Stream Chat API to share the user's location.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst messageWithLocation = {\n  text: 'This is my location',\n  attachments: [\n    {\n      type: 'location',\n      latitude: '50.212312',\n      longitude: '-71.212659',\n      // You can add more custom properties if needed.\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatList Ref with setFlatListRef - JSX\nDESCRIPTION: This example shows how to access the underlying FlatList ref using the `setFlatListRef` prop of the MessageList component. It utilizes useRef to store the FlatList instance, allowing for direct manipulation of the FlatList. The `ref` callback is invoked when the FlatList is mounted, providing access to the FlatList instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_list.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst flRef = useRef();\n\n<MessageList setFlatListRef={ref => (flRef.current = ref)} />;\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageFooter using React Context - v3 - TSX\nDESCRIPTION: This code snippet shows how to customize the MessageFooter in Stream Chat React Native v3 using React Context. The FooterWithSenderName component accesses the message object from the useMessageContext hook, eliminating the need for prop drilling. This component can then be passed directly as the MessageFooter prop to the Channel component, simplifying customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/upgrade_helper.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat, Channel, MessageList, useMessageContext } from 'stream-chat-react-native';\n\nconst FooterWithSenderName = () => {\n  const { message } = useMessageContext();\n\n  return <Text>{props.message.user.name}</Text>;\n};\n\n// In your rendering logic\n<Chat client={client}>\n  <Channel channel={channel} MessageFooter={FooterWithSenderName}>\n    <MessageList />\n  </Channel>\n</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Setting topInset using useAttachmentPickerContext - TSX\nDESCRIPTION: This snippet showcases how to dynamically adjust the top inset of the image picker gallery in Stream Chat for React Native, specifically for Android when the StatusBar is translucent. It uses the `useAttachmentPickerContext` hook to access the `setTopInset` function and updates the top inset based on the header height, compensating for the status bar height. Dependencies include `@react-navigation/elements` for `useHeaderHeight` and `react-native` for `StatusBar`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StatusBar } from 'react-native';\nimport { useHeaderHeight } from '@react-navigation/elements';\nimport { useAttachmentPickerContext } from 'stream-chat-react-native';\nconst headerHeight = useHeaderHeight();\nconst { setTopInset } = useAttachmentPickerContext();\n\n// When the status bar is translucent, the headerHeight contains the actual header height + the status bar height which needs to be substracted.\nconst finalHeaderHeight =\n  headerHeight - (Platform.OS === 'android' && StatusBar.currentHeight ? StatusBar.currentHeight : 0);\n\nuseEffect(() => {\n  setTopInset(finalHeaderHeight);\n}, [setTopInset, finalHeaderHeight]);\n```\n\n----------------------------------------\n\nTITLE: Identifying Blocked Messages in React Native\nDESCRIPTION: This code snippet describes how to identify blocked messages in the React Native SDK. A blocked message will have a `type` property set to `error` and the message text will contain the string `Message was blocked by moderation policies`. This allows the application to handle blocked messages accordingly in the UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/moderation.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.type === 'error' && message.text.includes('Message was blocked by moderation policies')\n```\n\n----------------------------------------\n\nTITLE: Customizing Card Component (JSX)\nDESCRIPTION: This JSX snippet illustrates how to customize the default `Card` component used for rendering custom attachment types.  It logs the `type` and other properties passed to the component. Replace the placeholder comment with custom UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomCardComponent = ({ type, ...otherProperties }) => {\n  console.log(type);\n  console.log(otherProperties);\n\n  return (/** Your custom UI */)\n}\n\n<Channel Card={CustomCardComponent} />\n```\n\n----------------------------------------\n\nTITLE: Options object example\nDESCRIPTION: This TypeScript snippet demonstrates how to define an options object for querying channels with Stream Chat.  The `message_limit` parameter specifies the maximum number of messages to retrieve per channel. Changing this object alone will not re-query the list of channels.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/core-components/channel-list/props/options.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst options = { message_limit: 100 };\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime format with Day.js object\nDESCRIPTION: This example demonstrates how to override the DateTime handling with Day.js by providing your own Day.js instance to `Streami18n`. It shows importing locale data for Day.js and passing a Day.js instance to `Streami18n`. It requires `dayjs` and `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport Dayjs from 'dayjs';\n\nimport 'dayjs/locale/nl';\nimport 'dayjs/locale/it';\n// or if you want to include all locales\nimport 'dayjs/min/locales';\n\nconst i18n = new Streami18n({\n  language: 'nl',\n  DateTimeParser: Dayjs,\n});\n```\n\n----------------------------------------\n\nTITLE: Message Input Image Attachment Structure - TypeScript\nDESCRIPTION: Defines the structure of an image attachment within the message input component.  It includes the file name, a unique ID, the upload state (finished or uploading), and the URL (either a CDN URL when finished or a local URI while uploading). The attachment data is structured as an array of these attachment objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/message-input-context/image_uploads.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    file: { name: 'fallback-name.jpeg' },\n    id: '2j3n4k23nj4k23n4k3',\n    state: 'finished', // or 'uploading'\n    url: 'https://cdn.getstream.io/kajsnkj2n3j4', // If the state is `uploading`, then this will be a local uri of image.\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Message Preview Object Structure\nDESCRIPTION: Defines the structure of a message preview object. This object includes the creation timestamp (`created_at`), the complete message object (`messageObject`), a preview containing bold formatting and the text (`previews`), and a status indicating the read state of the message (`status`).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/ui-components/channel-preview-messenger/props/last_message_preview.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n created_at: '' ,\n messageObject: { ... },\n previews: {\n   bold: true,\n   text: 'This is the message preview text'\n },\n status: 0 | 1 | 2 // read states of latest message.\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Message Actions - JSX\nDESCRIPTION: This snippet demonstrates how to conditionally render message actions based on whether the message is from the current user. It includes 'Copy Message' and 'Edit Message' for the user's own messages and only 'Copy Message' for others. It also shows how to apply custom styling to the 'Delete Message' action.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_actions_customization.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n  messageActions={({ copyMessage, editMessage, isMyMessage, deleteMessage }) =>\n    isMyMessage\n      ? [\n          copyMessage,\n          editMessage,\n          {\n            ...deleteMessage,\n            titleStyle: {\n              color: 'red',\n              fontWeight: 'bold',\n            },\n          },\n        ]\n      : [copyMessage]\n  }\n>\n  {/** MessageList and MessageInput component here */}\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Header - JSX\nDESCRIPTION: This snippet demonstrates how to customize the header of the autocomplete suggestion list in the Stream Chat React Native Channel component. It uses the `AutoCompleteSuggestionHeader` prop to render different headers based on the `triggerType` (command, emoji, or default).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-auto-complete-suggestion-list.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport { AutoCompleteSuggestionHeader } from 'stream-chat-react-native';\nimport { Text } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionHeader={({ queryText, triggerType }) => {\n    if (triggerType === 'command') {\n      return <Text>Command Header Component</Text>;\n    } else if (triggerType === 'emoji') {\n      return <Text>Emoji Header Component</Text>;\n    } else {\n      return <AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />;\n    }\n  }}\n>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Install React Native Firebase modules\nDESCRIPTION: These commands install the necessary React Native Firebase modules for app functionality and messaging. `@react-native-firebase/app` provides core Firebase functionality, and `@react-native-firebase/messaging` enables push notifications via Firebase Cloud Messaging (FCM).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/push_notifications_v2.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install & setup the app module\nyarn add @react-native-firebase/app\n\n# Install the messaging module\nyarn add @react-native-firebase/messaging\n```\n\n----------------------------------------\n\nTITLE: Consuming TranslationContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the TranslationContext using the useContext hook in a React component. It imports the TranslationContext from stream-chat-react-native and retrieves the t (translation function) and tDateTimeParser from the context. This allows the component to access translated text and date/time parsers for internationalization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/translation-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { TranslationContext } from 'stream-chat-react-native';\n\nconst { t, tDateTimeParser } = useContext(TranslationContext);\n```\n\n----------------------------------------\n\nTITLE: Overriding URL Preview Component in JSX\nDESCRIPTION: This JSX snippet demonstrates how to override the default URL preview component. The component logs text, thumb_url, and title.  It receives text, thumb_url, and title props, which are related to the URL preview. Dependencies include React.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomUrlPreview = () => {\n  console.log(text);\n  console.log(thumb_url);\n  console.log(title);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Badge Count on App Open - JavaScript\nDESCRIPTION: This snippet uses Notifee to clear the app's badge count when the app is opened. It employs the `useEffect` hook to call an asynchronous function `clearBadge` which resets the badge count to 0 using `notifee.setBadgeCount(0)`. This ensures that the badge is cleared each time the app is opened.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v2.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nfunction App() {\n  useEffect(() => {\n    const clearBadge = async () => {\n      await notifee.setBadgeCount(0);\n    };\n    clearBadge();\n  }, []);\n  // Rest of your application\n}\n```\n\n----------------------------------------\n\nTITLE: Expo app.json microphone permission config\nDESCRIPTION: This JSON snippet shows the configuration required in the app.json file for Expo to add microphone permissions to the Info.plist on iOS using config plugins. This ensures the app can request microphone access for voice recording.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"$(PRODUCT_NAME) would like to use your microphone for voice recording.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Message UI Component - TSX\nDESCRIPTION: Illustrates the integration of a custom message UI component (`CustomMessageUIComponent`) within the Stream Chat React Native environment. It uses React context hooks to access message data and handlers.  The code uses `useChannelContext` and `useMessageContext` to access necessary data.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  useChannelContext,\n  useMessagesContext,\n  useMessageContext,\n} from 'stream-chat-react-native';\n\nconst CustomMessageUIComponent = () => {\n  const { channel, members, watchers, error, loading } = useChannelContext();\n  const { handleDeleteMessage, handleResendMessage, message, reactions } = useMessageContext();\n\n  /** Custom implementation */\n};\n\n<OverlayProvider bottomInset={bottom} i18nInstance={streami18n}>\n  <Chat client={chatClient} i18nInstance={streami18n}>\n    <Channel channel={channel} keyboardVerticalOffset={headerHeight} MessageSimple={CustomMessageUIComponent}>\n      <View style={{ flex: 1 }}>\n        <MessageList />\n        <MessageInput />\n      </View>\n    </Channel>\n  </Chat>\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Registering a Translation - Typescript\nDESCRIPTION: This code snippet demonstrates how to register a custom translation for a specific language using the `registerTranslation()` method. This allows you to override existing translations or add new ones. The method takes the language code, the translation object, and an optional Day.js locale configuration as parameters.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nstreami18n.registerTranslation('mr', {\n  'Nothing yet...': 'काहीही नाही  ...',\n  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत',\n});\n```\n\n----------------------------------------\n\nTITLE: Update Stream Chat App Settings with Firebase Credentials (JS)\nDESCRIPTION: This JavaScript snippet demonstrates how to update Stream Chat app settings with Firebase credentials using the Stream Chat API. It reads the Firebase credentials from a JSON file and sends them to Stream's backend. This is an alternative to using the Stream Dashboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst client = StreamChat.getInstance('api_key', 'api_secret');\nclient.updateAppSettings({\n  push_config: {\n    version: 'v2'\n  },\n  firebase_config: {\n    credentials_json: fs.readFileSync(\n      './firebase-credentials.json',\n      'utf-8',\n    ),\n });\n```\n\n----------------------------------------\n\nTITLE: Selected Images array type definition\nDESCRIPTION: This snippet defines the structure of an array that holds the selected images in the attachment picker. Each image object includes properties like height, source (camera or picker), URI, width, and an optional ID.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/attachment-picker-context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nArray<{  \n  height: number;  \n  source: 'camera' | 'picker';  \n  uri: string;  \n  width: number;  \n  id?: string;  \n}>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Item - JSX\nDESCRIPTION: This snippet shows how to customize individual items in the autocomplete suggestion list. The `AutoCompleteSuggestionItem` prop of the `Channel` component is used to render different item components based on the trigger type. The `itemProps` are different for each `triggerType`: `command` expects `name` and `args`, `emoji` expects an Emoji object, and `mention` expects a `SuggestionUser` object. It's important to return the default `AutoCompleteSuggestionItem` if no customization is needed for a specific trigger type.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-auto-complete-suggestion-list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\nimport { Text, View } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionItem={({ itemProps, triggerType }) => {\n    if (triggerType === 'command') {\n      return (\n        <View>\n          <Text>{itemProps.name}</Text>\n          <Text>{itemProps.args}</Text>\n        </View>\n      );\n    } else if (triggerType === 'mention') {\n      const { id, image, name, online } = itemProps;\n      return (\n        <View>\n          <Avatar image={image} name={name} online={online} size={30} />\n          <Text>{itemProps.name}</Text>\n        </View>\n      );\n    } else {\n      return <AutoCompleteSuggestionItem itemProps={itemProps} triggerType={triggerType} />;\n    }\n  }}\n>\n  {/*The underlying components*/}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Custom ThreadListItem Component in React Native\nDESCRIPTION: This code defines a custom ThreadListItem component for Stream Chat React Native. It uses the `useThreadListItemContext` hook to access the parent message, thread, and channel, and the `useThreadsContext` hook to access the `onThreadSelect` function for navigating to the thread view.  The component renders a TouchableOpacity containing the parent message text.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/threads-context/thread-list-item.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Text, TouchableOpacity } from 'react-native';\nimport {\n  OverlayProvider,\n  Chat,\n  ThreadList,\n  useThreadListItemContext,\n  useThreadsContext,\n} from 'stream-chat-react-native';\n\nconst ThreadListItem = () => {\n  const { parentMessage, thread, channel } = useThreadListItemContext();\n  const { onThreadSelect } = useThreadsContext();\n\n  return (\n    <TouchableOpacity onPress={() => onThreadSelect(thread, channel)}>\n      <Text>{parentMessage?.text || 'Text not available !'}</Text>\n    </TouchableOpacity>\n  );\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <ThreadList ThreadListItem={ThreadListItem} />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Day.js locale config when registering translation\nDESCRIPTION: This code snippet shows how to add a Day.js locale config when registering a new translation using the `registerTranslation` function. This allows custom DateTime formatting for the newly added language. It requires `Streami18n` from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst i18n = new Streami18n();\n\ni18n.registerTranslation(\n 'mr',\n {\n   'Nothing yet...': 'काहीही नाही  ...',\n   '{{ firstUser }} and {{ secondUser }} are typing...':\n    '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',\n },\n {\n   months: [...],\n   monthsShort: [...],\n   calendar: {\n     sameDay: '...'\n   }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering View Results Button in React Native\nDESCRIPTION: This code snippet demonstrates how to render a ViewResultsButton component from the stream-chat-react-native library. The onPress handler receives message and poll objects, logging their IDs to the console when the button is pressed. It requires the stream-chat-react-native package and assumes message and poll objects are available in scope.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ViewResultsButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <ViewResultsButton onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)} />\n);\n```\n\n----------------------------------------\n\nTITLE: Override Channel Capabilities - Reactions - React Native\nDESCRIPTION: This code snippet demonstrates how to disable reactions (reactionsEnabled in v3) by using the `overrideOwnCapabilities` prop on the `Channel` component in Stream Chat React Native v4. By setting `sendReactions` to `false`, reaction selection is disabled.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    sendReactions: false\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Setting bottomInset for OverlayProvider - TSX\nDESCRIPTION: This snippet shows how to set the bottomInset prop on the OverlayProvider. It utilizes the useSafeAreaInsets hook from react-native-safe-area-context to get the bottom safe area inset. This ensures the AttachmentPicker menu aligns properly with the bottom sheet, especially when a tab bar is not present.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/navigation.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const Nav = () => {\n    // highlight-next-line\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <NavigationContainer>\n    // highlight-next-line\n      <OverlayProvider bottomInset={bottom}>\n        <Chat client={client}>\n          <Stack.Navigator>\n            <Stack.Screen component={() => {/** App components */})} name='home' />\n          </Stack.Navigator>\n        </Chat>\n    // highlight-next-line\n      </OverlayProvider>\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Vector Drawables - Android\nDESCRIPTION: This Java snippet shows how to enable vector drawables by adding `vectorDrawables.useSupportLibrary = true` to the `android/app/build.gradle` file. This ensures that vector assets are rendered correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nandroid {\n    defaultConfig {\n        vectorDrawables.useSupportLibrary = true\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelContext with useChannelContext Hook - TSX\nDESCRIPTION: This code snippet demonstrates how to access the ChannelContext using the useChannelContext hook provided by the 'stream-chat-react-native' library. It shows a more concise way to access the context values like lastRead, reloadChannel, and watcherCount. The snippet requires the stream-chat-react-native library as a dependency.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channel-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChannelContext } from 'stream-chat-react-native';\n\nconst { lastRead, reloadChannel, watcherCount } = useChannelContext();\n```\n\n----------------------------------------\n\nTITLE: Setting Language - Typescript\nDESCRIPTION: This code snippet demonstrates how to change the current language using the `setLanguage()` method. The method takes the language code as a parameter and asynchronously returns the new translation function. If the language update fails, the current translation function is returned.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nconst t = await streami18n.setLanguage('nl');\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with Default Generics (TSX)\nDESCRIPTION: This code snippet demonstrates how to initialize the Stream Chat client with the previously defined `StreamChatGenerics` type. This ensures that the client is properly typed with the custom data structures, enabling type-safe operations within the Stream Chat environment.  This is a repeated example to show how you can apply the full chain of generics.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/typescript.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = StreamChat.getInstance<StreamChatGenerics>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Override Channel Capabilities - Typing Events - React Native\nDESCRIPTION: This code snippet shows how to disable the typing indicator (typingEventsEnabled in v3) using the `overrideOwnCapabilities` prop on the `Channel` component in Stream Chat React Native v4. Setting `sendTypingEvents` to `false` disables typing indicators.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    sendTypingEvents: false\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Preparing Static Map URL\nDESCRIPTION: This JavaScript function generates a URL for a static map image from the Google Maps Static API. It takes latitude and longitude as input and constructs a URL with parameters for center, zoom, size, map type, API key, and a marker.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst prepareStaticMapUrl = (lat, long) => {\n  let baseURL = 'https://maps.googleapis.com/maps/api/staticmap?';\n  let url = new URL(baseURL);\n  let params = url.searchParams;\n  params.append('center', `${lat},${long}`);\n  params.append('zoom', '15');\n  params.append('size', '600x300');\n  params.append('maptype', 'roadmap');\n  params.append('key', MAPS_API_KEY);\n  params.append('markers', `color:red|${lat},${long}`);\n\n  return url.toString();\n};\n\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Grouping - TSX\nDESCRIPTION: This code snippet shows how to disable message grouping by user in the MessageList component.  By setting the `enableMessageGroupingByUser` prop to `false` on the Channel component, you can prevent the component from iterating through the message list to create message groups, which can improve performance when the message list is very long.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/performance_guide.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel enableMessageGroupingByUser={false} />\n```\n\n----------------------------------------\n\nTITLE: Navigating to Thread on Select - React Native\nDESCRIPTION: This snippet adds navigation functionality when a thread is selected in the ThreadList. It utilizes the useNavigation hook from @react-navigation/native and the onThreadSelect prop of the ThreadList component to navigate to a ThreadScreen, passing the selected thread and channel as parameters.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-thread-list.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, ThreadList } from 'stream-chat-react-native';\n// any navigation library hook/method can be used for this\n// highlight-next-line\nimport { useNavigation, useIsFocused } from '@react-navigation/native';\n\nconst ThreadListScreen = () => {\n  const isFocused = useIsFocused();\n  // highlight-next-line\n  const navigation = useNavigation();\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <ThreadList\n          isFocused={isFocused}\n          // highlight-start\n          // here we can reuse the same method as we would in the ChannelList component\n          onThreadSelect={(thread, channel) => {\n            navigation.navigate('ThreadScreen', {\n              thread,\n              channel,\n            });\n          }}\n          // highlight-end\n        />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Firebase Messaging Module\nDESCRIPTION: This command installs the React Native Firebase app and messaging modules required for Firebase integration. It uses yarn package manager to install the necessary dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v2.mdx#_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# Install & setup the app module\nyarn add @react-native-firebase/app\n\n# Install the messaging module\nyarn add @react-native-firebase/messaging\n```\n\n----------------------------------------\n\nTITLE: Installing SampleApp dependencies with Yarn\nDESCRIPTION: These commands navigate to the SampleApp directory within the SDK and install its dependencies using Yarn. This prepares the SampleApp for running.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\ncd examples/SampleApp;\nyarn install;\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadContext with useThreadContext hook - TSX\nDESCRIPTION: Shows how to consume the ThreadContext using the useThreadContext hook provided by the Stream Chat React Native library. This hook simplifies access to the ThreadContext within a Channel component. Import useThreadContext from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/thread_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadContext } from 'stream-chat-react-native';\n\nconst value = useThreadContext();\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Channel ID - Typescript\nDESCRIPTION: This snippet shows how to create a new channel instance using a channel ID and channel type.  The channel method is called on the client with the channel type (e.g., 'messaging') and the channel ID ('the_park').  An optional data object can be provided to set custom channel properties, such as name.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel('messaging', 'the_park', {\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Reactions Array Structure - Stream Chat React Native (TSX)\nDESCRIPTION: Illustrates the structure of an array representing reactions to a message. Each object within the array represents a single reaction and includes properties indicating the reaction type ('type') and whether the reaction belongs to the current user ('own'). The possible values of 'type' are determined by the application and could be 'love', 'haha', etc.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/message-context/reactions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n[\n  {\n    own: true,\n    type: 'love',\n  },\n  {\n    own: false,\n    type: 'haha',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Theme - JSX/TypeScript\nDESCRIPTION: This code snippet demonstrates how to define a custom theme in Stream Chat React Native using TypeScript types for accurate theming.  It imports `DeepPartial` and `Theme` from `stream-chat-react-native` and creates a theme object that overrides the background color of the file container in the `messageSimple` component. The `DeepPartial` type ensures that all keys are optional, allowing for a deep merge with the default theme.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/theme.mdx#_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport type { DeepPartial, Theme } from 'stream-chat-react-native';\n\nconst theme: DeepPartial<Theme> = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Channel component with ChannelList - React Native\nDESCRIPTION: This code demonstrates how to use the `Channel` component to wrap the app's components and display the `ChannelList`.  It uses state to manage the selected channel, switching between displaying the `ChannelList` when no channel is selected and the `Channel` component when a channel is selected. It expects a `StreamChat` `Channel` instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? <Channel channel={channel}>{/** App components */}</Channel> : <ChannelList onSelect={setChannel} />}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Install react-native-flipper with Yarn\nDESCRIPTION: This command installs the `react-native-flipper` package as a development dependency. This package is necessary for interacting with the Flipper Plugin.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/debug-using-flipper-plugin.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev react-native-flipper\n```\n\n----------------------------------------\n\nTITLE: Setting Language for Components - Typescript\nDESCRIPTION: This snippet demonstrates how to set the language for Stream Chat React Native components by passing a language option to the Streami18n constructor. It shows how to initialize Streami18n with Dutch strings.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n({ language: 'nl' }); // Instantiate Streami18n with Dutch strings.\n```\n\n----------------------------------------\n\nTITLE: Using Overlay Provider - Typescript React\nDESCRIPTION: This code snippet shows how to use the `OverlayProvider` component. This provider is crucial for overlaying UI elements, such as image viewers and attachment pickers, above the app's main content. It wraps the application's components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\n\nexport const Screen = () => <OverlayProvider>{/** App components */}</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Running iOS App with React Native CLI\nDESCRIPTION: These Bash commands are used to install pods and run the iOS application. `npx pod-install` installs the necessary CocoaPods dependencies, and `yarn ios` starts the iOS application on the simulator or a connected device using React Native CLI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx pod-install\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Determine border visibility for deleted message - Typescript\nDESCRIPTION: This code snippet determines whether to show borders for a deleted message based on whether it contains only emojis and no quoted message, or if it has other attachments.  It's used to customize the appearance of the deleted message component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/message_deleted.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst noBorder = (onlyEmojis && !message.quoted_message) || !!otherAttachments.length;\n```\n\n----------------------------------------\n\nTITLE: Show All Options Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the ShowAllOptionsButton component from the stream-chat-react-native library. It imports the ShowAllOptionsButton component and defines a button that, when pressed, logs the poll ID and message ID to the console. The onPress prop receives the message and poll objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShowAllOptionsButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <ShowAllOptionsButton\n    onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Implementing Map Detail Screen with React Native and Stream Chat\nDESCRIPTION: This code snippet implements a map detail screen in a React Native application using Stream Chat. It uses `channel.on` to listen for `message.updated` events (for location updates) and `message.deleted` events (to exit the screen if the message is deleted). It also includes a button to stop sharing the location.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, {useMemo} from 'react';\nimport {StackScreenProps} from '@react-navigation/stack';\nimport {useEffect} from 'react';\nimport {Alert, Button, StyleSheet, useWindowDimensions} from 'react-native';\nimport {SafeAreaView} from 'react-native-safe-area-context';\nimport MapView, {Marker} from 'react-native-maps';\nimport {NavigationParamsList} from './types';\nimport {useAppContext} from './AppContext';\nimport {useLiveLocationContext} from './LiveLocationContext';\n\ntype MapDetailScreenProps = StackScreenProps<NavigationParamsList, 'MapDetail'>;\n\nconst MapDetailScreen: React.FC<MapDetailScreenProps> = ({\n  route,\n  navigation,\n}) => {\n  // store channel in an app context like below to easily access the channel in this screen\n  const {channel} = useAppContext();\n  if (!channel) {\n    throw new Error('MapDetailScreen - Channel is not defined');\n  }\n  const {isWatching, stopLiveLocation} = useLiveLocationContext();\n  const {width, height} = useWindowDimensions();\n  const aspect_ratio = width / height;\n\n  // the parameters passed to the screen define the state\n  const {messageId, latitude, longitude, ended_at} = route.params;\n  const showStopSharingButton = !ended_at && isWatching(messageId);\n\n  const endedAtDate = ended_at ? new Date(ended_at) : null;\n  const formattedEndedAt = endedAtDate ? endedAtDate.toLocaleString() : '';\n\n  const region = useMemo(() => {\n    const latitudeDelta = 0.1;\n    const longitudeDelta = latitudeDelta * aspect_ratio;\n    return {\n      latitude,\n      longitude,\n      latitudeDelta,\n      longitudeDelta,\n    };\n  }, [aspect_ratio, latitude, longitude]);\n\n  useEffect(() => {\n    const listeners = [\n      channel.on('message.updated', event => {\n        if (\n          event.message?.id === messageId &&\n          event.message.attachments?.[0]?.type === 'location'\n        ) {\n          const attachment = event.message.attachments[0];\n          if (attachment) {\n            // update the navigation params of the screen which would in turn update the state\n            navigation.setParams({\n              latitude: attachment.latitude,\n              longitude: attachment.longitude,\n              ended_at: attachment.ended_at,\n            });\n          }\n        }\n      }),\n      channel.on('message.deleted', event => {\n        if (event.message?.id === messageId) {\n          Alert.alert(\n            'Message deleted',\n            'The live location message has been deleted',\n          );\n          navigation.goBack();\n        }\n      }),\n    ];\n\n    return () => listeners.forEach(l => l.unsubscribe());\n  }, [channel, messageId, navigation]);\n\n  return (\n    <SafeAreaView style={styles.container} edges={['bottom']}>\n      <MapView region={region} style={styles.container}>\n        <Marker\n          coordinate={{\n            latitude,\n            longitude,\n          }}\n        />\n      </MapView>\n      {showStopSharingButton && (\n        <Button\n          title=\"Stop sharing\"\n          onPress={() => {\n            stopLiveLocation(messageId);\n          }}\n        />\n      )}\n      {ended_at && (\n        <Button title={`Ended at: ${formattedEndedAt}`} disabled={true} />\n      )}\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n});\n\nexport default MapDetailScreen;\n```\n\n----------------------------------------\n\nTITLE: Initialize StreamChat Client with Generics - React Native\nDESCRIPTION: This code snippet demonstrates the new way of initializing the StreamChat client with a single generic `StreamChatGenerics` instead of 7 different generics in Stream Chat React Native v4. This simplifies the TypeScript configuration.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = StreamChat.getInstance<StreamChatGenerics>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Checking Message Type and Status\nDESCRIPTION: This code snippet defines a condition that determines whether actions are enabled for a message based on its type and status.  Specifically, actions are enabled if the message type is 'regular' and the message status is 'received'. This logic is used to set the `actionsEnabled` value within the MessageContext. It directly uses `message` object available in `MessageContext`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/message_context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmessage.type === 'regular' && message.status === 'received';\n```\n\n----------------------------------------\n\nTITLE: Creating the Channel on Server - Typescript\nDESCRIPTION: This snippet shows how to create the channel on the server. This uses the previously initialized channel instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: General PollOptionFullResults Usage - React Native\nDESCRIPTION: This code demonstrates the basic usage of the PollOptionFullResults component within a React Native application using Stream Chat. It shows how to integrate the component within OverlayProvider, Chat, and Channel components and pass the necessary message, poll, and other optional props.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-option-full-results.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, PollOptionFullResults } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollOptionFullResults message={message} poll={poll} {...otherOptionalProps} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Loading Channel Around Message - TSX\nDESCRIPTION: This code snippet shows how to call the `loadChannelAroundMessage` function, passing a messageId. This function is used to load channel messages around the specified message in the history. It relies on the existence of the `loadChannelAroundMessage` function in the ChannelContext.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channel-context.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nloadChannelAroundMessage({\n  messageId,\n});\n```\n\n----------------------------------------\n\nTITLE: Setting keyboardVerticalOffset in Channel - TSX\nDESCRIPTION: This snippet shows how to set the keyboardVerticalOffset prop in the Channel component to account for the header height of React Navigation. It uses the useHeaderHeight hook from @react-navigation/stack to get the header height and pass it as a prop to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/navigation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst headerHeight = useHeaderHeight();\n\nconst App = () => {\n  return <Channel keyboardVerticalOffset={headerHeight}>{/* other components inside */}</Channel>;\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming TranslationContext with useTranslationContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the TranslationContext using the useTranslationContext hook provided by the stream-chat-react-native library. It imports the useTranslationContext hook and retrieves the t (translation function) and tDateTimeParser from the context. This provides a convenient way to access translated text and date/time parsers for internationalization within functional components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/translation-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'stream-chat-react-native';\n\nconst { t, tDateTimeParser } = useTranslationContext();\n```\n\n----------------------------------------\n\nTITLE: Integrating MessageInput for sending messages - React Native\nDESCRIPTION: This code demonstrates how to integrate the `MessageInput` component within the `Channel` component. It allows users to send messages in the selected channel.  The `keyboardVerticalOffset` prop is set to 0 on the channel component to account for header spacing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0}>\n            <MessageList />\n            <MessageInput />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat React Native Dependency (npm)\nDESCRIPTION: This command installs the core stream-chat-react-native package using npm. This is the first step in integrating Stream Chat into your React Native project.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install stream-chat-react-native\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone with Moment Timezone\nDESCRIPTION: Illustrates how to set the timezone for date and time display using Moment Timezone. Requires installing `moment-timezone`.  The `DateTimeParser` is set to the `momentTimezone` object and the `timezone` option is used to specify the desired timezone.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Streami18n } from 'stream-chat-react';\nimport momentTimezone from 'moment-timezone';\n\nconst streami18n = new Streami18n({\n  DateTimeParser: momentTimezone,\n  timezone: 'Europe/Budapest',\n});\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Object with Attachments in Javascript\nDESCRIPTION: This code snippet demonstrates how to define a message object with attachments.  The attachments array contains objects with type and other properties like thumb_url or asset_url, influencing how the attachment is rendered. The message object requires an id and text in addition to the attachments array.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageObject = {\n  id: '12312jh3b1jh2b312',\n  text: 'This is my test message!',\n  attachments: [\n    {\n      type: 'image',\n      thumb_url: '',\n    },\n    {\n      type: 'file',\n      asset_url: '',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Read Statuses Type Definition - React TSX\nDESCRIPTION: Defines the type structure for the read statuses of channel members. It is a record where the key is the userId and the value is an object containing the last_read timestamp and the user object. This structure represents the read state of each member in the channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channel_context.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nRecord<\n  string, // userId\n  {\n    last_read: Date;\n    user: UserResponse<UserType>;\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Consuming TranslationContext with useTranslationContext - React\nDESCRIPTION: This code snippet shows how to use the useTranslationContext hook, provided by the stream-chat-react-native library, to access the TranslationContext. It imports the useTranslationContext hook and retrieves the t and tDateTimeParser functions for translation. This requires stream-chat-react-native as a dependency.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/translation_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'stream-chat-react-native';\n\nconst { t, tDateTimeParser } = useTranslationContext();\n```\n\n----------------------------------------\n\nTITLE: Creating Poll Answers Screen - React Native\nDESCRIPTION: This snippet defines a `PollAnswersScreen` component that renders a `PollAnswersList`. It receives the `message` and `poll` objects as parameters from the route and passes them to the `PollAnswersList` component to display the answers.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n// highlight-start\nconst PollAnswersScreen = ({\n  route: {\n    params: { message, poll },\n  },\n}) => {\n  const navigation = useNavigation();\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <PollModalHeader title={'All Poll Answers'} onPress={() => navigation.goBack()} />\n      <PollAnswersList message={message} poll={poll} />\n    </SafeAreaView>\n  );\n};\n// highlight-end\n```\n\n----------------------------------------\n\nTITLE: Checking for Moderated Messages in React Native\nDESCRIPTION: This code snippet explains how to check if a message has been moderated by checking the `moderation_details` property within a chat message object. If the `moderation_details` property is not defined or `undefined`, the message is considered a regular, unmoderated message.  If defined it means the message has been bounced by moderation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/moderation.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nmessage.moderation_details // Check for existence and value\n```\n\n----------------------------------------\n\nTITLE: Thread Screen Component using Context - TypeScript\nDESCRIPTION: This component renders the Thread screen, setting the thread and handling dismounting. It utilizes useAppChannel and useAppThread context hooks to manage the channel and thread state. The onThreadDismount prop is used to clear the thread when the component is unmounted.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/navigation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ThreadScreen = () => {\n  const { channel } = useAppChannel();\n  const { setThread, thread } = useAppThread();\n\n  return (\n    <Channel channel={channel} thread={thread} threadList>\n      <Thread onThreadDismount={() => setThread(undefined)} />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling DateTime Translations - Typescript\nDESCRIPTION: This snippet shows how to disable DateTime translations, forcing Stream components to use English for date-times. This is achieved by setting the disableDateTimeTranslations prop to true in the Streami18n constructor.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nIf you would like to stick with English language for date-times in Stream components, you can set `disableDateTimeTranslations` to true.\n```\n\n----------------------------------------\n\nTITLE: Customizing FileIcon Size in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the size of the FileIcon component within the Channel component using the FileAttachmentIcon prop. It imports the Channel and FileIcon components from 'stream-chat-react-native' and renders the Channel with a custom FileAttachmentIcon that sets the size to 40. This overrides the default size.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/file-icon.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, FileIcon } from 'stream-chat-react-native';\n\n<Channel FileAttachmentIcon={() => <FileIcon size={40} />}\n```\n\n----------------------------------------\n\nTITLE: Example onListScroll event (JS)\nDESCRIPTION: Illustrates the structure of the event object passed to the `onListScroll` callback function. This callback is triggered whenever the underlying FlatList scrolls. The `nativeEvent` contains information about content inset, offset, size, layout, and zoom scale.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-list.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  nativeEvent: {\n    contentInset: {bottom, left, right, top},\n    contentOffset: {x, y},\n    contentSize: {height, width},\n    layoutMeasurement: {height, width},\n    zoomScale\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstalling media library using yarn (Expo)\nDESCRIPTION: This command uninstalls the existing media library using yarn package manager in an Expo project. This is a prerequisite for installing the native image picker. The media library to be uninstalled is `expo-media-library`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/native-image-picker.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove expo-media-library\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelContext with useChannelContext hook - TSX\nDESCRIPTION: This snippet illustrates how to consume the ChannelContext using the useChannelContext hook provided by the stream-chat-react-native library. It retrieves values such as lastRead, reloadChannel, and watcherCount from the context, enabling child components of the Channel component to access channel-specific data and functions.  It requires importing useChannelContext from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/channel_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChannelContext } from 'stream-chat-react-native';\n\nconst { lastRead, reloadChannel, watcherCount } = useChannelContext();\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelContext with useContext - React TSX\nDESCRIPTION: Demonstrates how to consume the ChannelContext using the useContext hook from React within a functional component. It imports ChannelContext and retrieves values like lastRead, reloadChannel, and watcherCount. This method provides access to channel-related data and functions within the component's scope.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channel_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChannelContext } from 'stream-chat-react-native';\n\nconst { lastRead, reloadChannel, watcherCount } = useContext(ChannelContext);\n```\n\n----------------------------------------\n\nTITLE: Logging Renders of a Custom Component - React Native\nDESCRIPTION: This snippet shows how to add a console log to a custom component to track its re-renders and identify potential performance issues. This can be used within a `DateHeader` to understand how often context updates are triggering re-renders.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/custom_components.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n  console.log('Render.');\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Styling MessageList and MessageInput with ImageBackground - React Native\nDESCRIPTION: This snippet demonstrates how to wrap `MessageList` and `MessageInput` components from the `stream-chat-react-native` library with the `ImageBackground` component from `react-native` to set a static background image for the chat channel.  It also shows how to adjust the `theme` to ensure proper styling with the transparent background.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-background.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel, MessageInput, MessageList, ThemeProvider } from 'stream-chat-react-native';\nimport { ImageBackground } from 'react-native';\n\nexport const theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transparent',\n    },\n  },\n};\n\nconst IMAGE_URI =\n  'https://images.unsplash.com/photo-1549125764-91425ca48850?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8NjF8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60';\n\nconst ChannelScreen = ({ channel }) => (\n  <ThemeProvider style={theme}>\n    <Channel channel={channel}>\n      <ImageBackground\n        style={{ flex: 1 }}\n        source={{\n          uri: IMAGE_URI,\n        }}\n      >\n        <MessageList />\n        <MessageInput />\n      </ImageBackground>\n    </Channel>\n  </ThemeProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Screen Chat with Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates how to implement a split-screen interface between video and chat using Stream Chat React Native.  It renders a video (represented by an Image component in this example) in the top portion of the screen and a `MessageList` component in the bottom portion. It uses the `streami18n` object for internationalization and assumes `chatClient` and `channel` are initialized. The MessageList component takes generic types to define LocalAttachmentType, LocalChannelType, LocalCommandType, LocalEventType, LocalMessageType, LocalResponseType, and LocalUserType.  The `onThreadSelect` prop is used to handle thread selection, navigating to a separate Thread component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/livestream_messagelist.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, View } from 'react-native';\n\nimport { Chat, Channel, MessageList } from 'stream-chat-react-native';\n\n// When you render your chat screen\n<SafeAreaView style={{ flex: 1 }}>\n  <View style={[{ position: 'absolute' }, StyleSheet.absoluteFillObject]}>\n      <Chat client={chatClient} i18nInstance={streami18n}>\n        <Channel\n          channel={channel}\n          keyboardVerticalOffset={headerHeight}\n          thread={thread}\n        >\n          <View style={{ flex: 1 }}>\n            <Image source={{\n              uri: 'https://i.ibb.co/rfx5PCr/Screenshot-2021-02-24-at-14-20-57.png'\n            }} style={{ height: '100%', width: '100%'}} resizeMode={'cover'} />\n          </View>\n          <MessageList<\n            LocalAttachmentType,\n            LocalChannelType,\n            LocalCommandType,\n            LocalEventType,\n            LocalMessageType,\n            LocalResponseType,\n            LocalUserType\n          >\n            onThreadSelect={(thread) => {\n              setThread(thread);\n              navigation.navigate('Thread');\n            }}\n          />\n          <MessageInput />\n        </Channel>\n      </Chat>\n  </View>\n</SafeAreaView>\n```\n\n----------------------------------------\n\nTITLE: Faded Chat Implementation with MessageList in React Native\nDESCRIPTION: This snippet demonstrates how to implement a faded chat overlaying a video background using the MessageList component. It uses MaskedView and LinearGradient to achieve the fading effect. The required dependencies are react-native-linear-gradient and @react-native-community/masked-view.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-list.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, View } from 'react-native';\n\n// Make sure you have installed following two dependencies\nimport MaskedView from '@react-native-community/masked-view';\nimport LinearGradient from 'react-native-linear-gradient';\n\nimport { Chat, Channel, MessageList } from 'stream-chat-react-native';\n\nconst theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transparent',\n    },\n  },\n  messageSimple: {\n    content: {\n      textContainer: {\n        backgroundColor: 'white',\n      },\n    },\n  },\n};\n\n// When you render your chat screen\n<SafeAreaView style={{ flex: 1 }}>\n  {/* For the sake of example, we are using image as background, you can replace it with your Video component. */}\n  <Image\n    source={{\n      uri: 'https://i.pinimg.com/474x/59/a2/aa/59a2aae82b34bace9dc4d4df90457a3b.jpg',\n    }}\n    style={{ height: '100%', width: '100%' }}\n  />\n\n  <View style={[{ position: 'absolute' }, StyleSheet.absoluteFillObject]}>\n    <Chat client={chatClient} style={theme}>\n      <Channel channel={channel} keyboardVerticalOffset={headerHeight} thread={thread}>\n        <View style={{ flex: 1 }} />\n        <View style={{ flex: 2 }}>\n          <MaskedView\n            style={{ flex: 1 }}\n            maskElement={\n              <LinearGradient\n                colors={['rgba(0,0,0,0)', 'rgba(0,0,0,1)']}\n                style={{\n                  flex: 1,\n                }}\n                start={{ x: 0, y: 0 }}\n                end={{ x: 0, y: 1 }}\n                locations={[0, 0.5]}\n              />\n            }\n          >\n            <MessageList />\n          </MaskedView>\n        </View>\n        <MessageInput />\n      </Channel>\n    </Chat>\n  </View>\n</SafeAreaView>;\n```\n\n----------------------------------------\n\nTITLE: Apple App Site Association (AASA) File JSON\nDESCRIPTION: Configuration for the apple-app-site-association file, which is required for iOS Universal Links.  Replace `<TeamID>.com.example.myapp` with your actual Team ID and App Bundle ID. The `paths` array defines the URL paths supported by your app.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/deeplinking.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [{\n            \"appID\": [\"<TeamID>.com.example.myapp\"],\n            \"paths\": [\"*\"]\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Members List - TypeScript\nDESCRIPTION: This snippet shows creating a chat channel using a list of member IDs. It utilizes the client.channel method to create a channel of type 'messaging' and assigns a list of members to the channel. The system will automatically generate an ID for such channels.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel('messaging', {\n  members: ['jlahey', 'rlafleur'],\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Override Translations for a Language - Typescript\nDESCRIPTION: This code snippet demonstrates how to override the default translations for a specific language using the `translationsForLanguage` property when initializing a `Streami18n` instance. It allows you to customize the displayed text based on the selected language. Dependencies: Streami18n class.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst streami18n = new Streami18n({\n  language: 'nl',\n  translationsForLanguage: {\n    'Nothing yet...': 'Nog Niet...',\n    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notification Interactions with React Native Firebase\nDESCRIPTION: This code snippet demonstrates how to use the React Native Firebase API to handle push notification interactions in a React Native application. It sets up listeners for both `onNotificationOpenedApp` (when the app is in the background) and `getInitialNotification` (when the app is opened from a quit state).  It assumes the notification data contains a \"channel\" property. Requires `@react-native-firebase/messaging` and `@react-navigation/native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v1.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport messaging from '@react-native-firebase/messaging';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  useEffect(() => {\n    // `onNotificationOpenedApp` gets called when app is in background, and you press\n    // the push notification.\n    //\n    // Here its assumed a message-notification contains a \"channel\" property in the data payload.\n    //\n    // Please check the docs on push template:\n    // https://getstream.io/chat/docs/javascript/push_template/?language=javascript\n    messaging().onNotificationOpenedApp(remoteMessage => {\n      console.log('Notification caused app to open from background state:', remoteMessage);\n      const channel = JSON.parse(remoteMessage.data.channel);\n      const message = remoteMessage.data.message;\n\n      console.log('This message belongs to channel with id - ', channel.id);\n      console.log('Message id is', message);\n\n      // You will add your navigation logic, to navigate to relevant channel screen.\n    });\n\n    // `getInitialNotification` gets called when app is in quit state, and you press\n    // the push notification.\n    //\n    //\n    // Here its assumed that a message-notification contains a \"channel\" property in the data payload.\n    // Please check the docs on push template:\n    // https://getstream.io/chat/docs/javascript/push_template/?language=javascript\n    messaging()\n      .getInitialNotification()\n      .then(remoteMessage => {\n        if (remoteMessage) {\n          console.log('Notification caused app to open from quite state:', remoteMessage);\n          const channel = JSON.parse(remoteMessage.data.channel);\n          const message = remoteMessage.data.message;\n\n          console.log('This message belongs to channel with id - ', channel.id);\n          console.log('Message id is', message);\n\n          // You will add your navigation logic, to navigate to relevant channel screen.\n        }\n      });\n  }, []);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName={initialRoute}>\n        <Stack.Screen name='Home' component={HomeScreen} />\n        <Stack.Screen name='ChannelListScreen' component={SettingsScreen} />\n        <Stack.Screen name='ChannelScreen' component={SettingsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Type Definition for Channel Watchers - Typescript\nDESCRIPTION: Defines the type for representing channel watchers, which is a record (object) where the keys are strings and the values are `UserResponse<UserType>`.  This is the structure of data returned for watchers of current channel from backend when you query a channel. It comes when you call the method queryChannels() or watch().\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/channel-context/watchers.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nRecord<\n  string, // string\n  UserResponse<UserType>\n>;\n```\n\n----------------------------------------\n\nTITLE: Message Input Image Attachment Structure - Typescript\nDESCRIPTION: This code snippet illustrates the structure of image attachments within the `MessageInput` component. Each attachment object contains information about the file, a unique ID, the upload state ('finished' or 'uploading'), and the URL of the image. If the state is 'uploading', the URL will be a local URI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/contexts/message-input-context/image_uploads.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    file: { name: 'fallback-name.jpeg' },\n    id: '2j3n4k23nj4k23n4k3',\n    state: 'finished', // or 'uploading'\n    url: 'https://cdn.getstream.io/kajsnkj2n3j4', // If the state is `uploading`, then this will be a local uri of image.\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Install React Native Clipboard (RN CLI)\nDESCRIPTION: This command installs the @react-native-clipboard/clipboard package using yarn for projects initialized with React Native CLI. This is an optional dependency to copy message content to the clipboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-clipboard/clipboard\n```\n\n----------------------------------------\n\nTITLE: Installing expo-media-library package (Expo)\nDESCRIPTION: This bash command installs the `expo-media-library` package using expo install command for accessing the device gallery in an Expo project.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_29\n\nLANGUAGE: Bash\nCODE:\n```\nnpx expo install expo-media-library\n```\n\n----------------------------------------\n\nTITLE: Customizing ScrollView props for PollAllOptions in React Native\nDESCRIPTION: This snippet shows how to customize the ScrollView props of the PollAllOptions component in React Native. It uses the additionalScrollViewProps prop to override the default ScrollView behavior, specifically setting bounces to true.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-all-options.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<PollAllOptions additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Re-initializing Stream Chat Client with Defined Generics (TSX)\nDESCRIPTION: This snippet re-initializes the Stream Chat client using the previously defined `StreamChatGenerics` type. This step is necessary to apply the custom types to the client instance, enabling type checking and auto-completion for your custom data fields throughout your application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = StreamChat.getInstance<StreamChatGenerics>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Basic MessageList Usage with Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the MessageList component within a Stream Chat React Native application. It requires the Chat client and channel to be initialized and passed as props to the Channel component. The MessageList component is then rendered within the Channel component to display the messages in the channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/message_list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider>\n  <Chat client={client}>\n    <Channel channel={channel}>\n      <MessageList />\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Markdown Style Type Definition - Typescript\nDESCRIPTION: Defines the TypeScript type `MarkdownStyle`, showing the available keys for styling different markdown elements within the message component. This is helpful for identifying which elements can be customized through the theme.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MarkdownStyle = Partial<{\n  autolink: TextStyle;\n  blockQuoteBar: ViewStyle;\n  blockQuoteSection: ViewStyle;\n  blockQuoteSectionBar: ViewStyle;\n  blockQuoteText: TextStyle | ViewStyle;\n  br: TextStyle;\n  codeBlock: TextStyle;\n  del: TextStyle;\n  em: TextStyle;\n  heading: TextStyle;\n  heading1: TextStyle;\n  heading2: TextStyle;\n  heading3: TextStyle;\n  heading4: TextStyle;\n  heading5: TextStyle;\n  heading6: TextStyle;\n  hr: ViewStyle;\n  image: ImageStyle;\n  inlineCode: TextStyle;\n  list: ViewStyle;\n  listItem: ViewStyle;\n  listItemBullet: TextStyle;\n  listItemNumber: TextStyle;\n  listItemText: TextStyle;\n  listRow: ViewStyle;\n  mailTo: TextStyle;\n  mentions: TextStyle;\n  newline: TextStyle;\n  noMargin: TextStyle;\n  paragraph: TextStyle;\n  paragraphCenter: TextStyle;\n  paragraphWithImage: ViewStyle;\n  strong: TextStyle;\n  sublist: ViewStyle;\n  table: ViewStyle;\n  tableHeader: ViewStyle;\n  tableHeaderCell: TextStyle;\n  tableRow: ViewStyle;\n  tableRowCell: ViewStyle;\n  tableRowLast: ViewStyle;\n  text: TextStyle;\n  u: TextStyle;\n  view: ViewStyle;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Customizing ReactionList Background Color - React Native\nDESCRIPTION: This snippet demonstrates how to override the default background color of the ReactionList component in Stream Chat React Native. It defines a new component `ReactionListWithCustomBackground` that wraps the original `ReactionList` and applies a custom fill and stroke color.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/reaction-list-top.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, ReactionList, ReactionListProps } from 'stream-chat-react-native';\n\nconst ReactionListWithCustomBackground = (props: ReactionListProps) => <ReactionList {...props} fill={'#00DDD'} stroke={'#fffff'} />\n\n<Channel ReactionList={ReactionListWithCustomBackground} />\n```\n\n----------------------------------------\n\nTITLE: Overriding Theme - React Native\nDESCRIPTION: This snippet demonstrates how to override the default theme of the Stream Chat React Native SDK using the ThemeProvider component. It modifies the background color of poll messages by defining a custom theme object `myTheme` and passing it to the ThemeProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-next-line\n  ThemeProvider,\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\n// highlight-start\nconst myTheme: DeepPartial<Theme> = {\n  poll: {\n    message: {\n      container: {\n        backgroundColor: 'pink',\n      },\n    },\n  },\n};\n// highlight-end\n\nconst ChannelScreen = () => {\n  const navigation = useNavigation();\n  return (\n    // highlight-next-line\n    <ThemeProvider style={myTheme}>\n      <OverlayProvider>\n        <Chat client={client}>\n          <Channel\n            channel={channel}\n            PollContent={MyPollContent}\n            openPollCreationDialog={({ sendMessage }) => navigation.navigate('CreatePollScreen', { sendMessage })}\n          >\n            <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n              <ChannelStack.Screen\n                name={'ChannelMessageList'}\n                options={{ headerShown: false }}\n                component={ChannelMessageList}\n              />\n              <ChannelStack.Screen\n                name={'PollResultsScreen'}\n                options={{ headerShown: false }}\n                component={PollResultsScreen}\n              />\n              <ChannelStack.Group screenOptions={{ presentation: 'modal' }}>\n                <ChannelStack.Screen\n                  name={'CreatePollScreen'}\n                  options={{ headerShown: false }}\n                  component={MyCreatePollContent}\n                />\n              </ChannelStack.Group>\n            </ChannelStack.Navigator>\n          </Channel>\n        </Chat>\n      </OverlayProvider>\n      // highlight-next-line\n    </ThemeProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Native Dependencies with CocoaPods\nDESCRIPTION: Navigates to the iOS directory within the SampleApp and installs the native dependencies required for iOS using CocoaPods. This step is essential for running the app on iOS simulators or devices.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncd ios;\nnpx pod-install;\n```\n\n----------------------------------------\n\nTITLE: Setting thread dismount in Channel component - TSX\nDESCRIPTION: This code snippet shows how to dismount a thread within a `Channel` component in Stream Chat for React Native. It uses the `threadList` prop to indicate it is a thread list and the `onThreadDismount` prop to reset the thread state to null when the thread is closed.  This ensures the UI reflects the correct context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chat client={chatClient} i18nInstance={streami18n}>\n  <Channel channel={channel} thread={thread} threadList>\n    <Thread onThreadDismount={() => setThread(null)} />\n  </Channel>\n</Chat>\n```\n\n----------------------------------------\n\nTITLE: Get Translations - Typescript\nDESCRIPTION: This code snippet demonstrates how to fetch the current translations dictionaries for all languages using the `getTranslations()` method. This allows you to inspect or manipulate the translation data. Dependencies: Streami18n class.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nconst translations = streami18n.getTranslations();\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageFooter using prop drilling - v2 - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the MessageFooter component in Stream Chat React Native v2 using prop drilling. It involves creating a new component MessageWithSenderNameAtBottom that renders MessageSimple with a custom MessageFooter prop. This approach requires passing the MessageFooter component as a prop through multiple layers of components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/upgrade_helper.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat, Channel, MessageList, MessageSimple } from 'stream-chat-react-native';\n\nconst MessageWithSenderNameAtBottom = props => {\n  return <MessageSimple {...props} MessageFooter={props => <Text>{props.message.user.name}</Text>} />;\n};\n\n// In your rendering logic\n<Chat client={client}>\n  <Channel channel={channel}>\n    <MessageList Message={MessageWithSenderNameAtBottom} />\n  </Channel>\n</Chat>;\n```\n\n----------------------------------------\n\nTITLE: View Results Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the ViewResultsButton component from the stream-chat-react-native library. It imports the ViewResultsButton component and defines a button that, when pressed, logs the poll ID and message ID to the console. The onPress prop receives the message and poll objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ViewResultsButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <ViewResultsButton onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)} />\n);\n```\n\n----------------------------------------\n\nTITLE: Memoizing Stream Chat React Native components to reduce re-renders\nDESCRIPTION: The code presents a solution to reduce re-renders in custom React Native Stream Chat components via React.memo and custom areEqual checks.  It splits the `MySenderComponent` into `MySenderComponentWithContext` which receives the data as prop, and a memoized version of `MySenderComponentWithContext` called `MemoizedMySenderComponent`.  The `areEqual` check prevents unnecessary renders of the UI by only updating the component when the latest message sender changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/going-live-checklist.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { usePaginatedMessageListContext } from 'stream-chat-react-native';\nimport { Text } from 'react-native';\n\nconst MySenderComponentWithContext = ({ latestMessageSender }) => {\n  console.log('Rendered');\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\nconst MemoizedMySenderComponent = React.memo(\n  MySenderComponentWithContext,\n  (prev, next) => prev.latestMessageSender === next.latestMessageSender,\n);\n\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n\n  return <MemoizedMySenderComponent latestMessageSender={latestMessageSender} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Custom CDN Integration in Stream Chat - TSX\nDESCRIPTION: This code demonstrates how to integrate a custom CDN for storing image and file attachments in Stream Chat React Native.  It shows how to use the `doImageUploadRequest` and `doDocUploadRequest` props of the Channel component. These props take a function that receives the file and channel objects.  The file is uploaded to the specified CDN endpoint. The function must return a promise that resolves to an object containing a `file` key with the URL of the uploaded file.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  doDocUploadRequest={(file, channel) =>\n    chatClient?.sendFile(\n      `${channel._channelURL()}/file`, // replace this with your own cdn url\n      file.uri,\n      'name_for_file',\n    )\n  }\n  doImageUploadRequest={(file, channel) =>\n    chatClient?.sendFile(\n      `https://customcdnurl.com`, // replace this with your own cdn url\n      file.uri,\n      'name_for_file',\n    )\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Read Status Record Type Definition - TSX\nDESCRIPTION: Defines the TypeScript record type for read statuses of channel members, where the key is the user ID and the value contains last_read timestamp and user information. It shows the data structure expected from the backend for channel read statuses.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channel-context.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nRecord<\n  string, // userId\n  {\n    last_read: Date;\n    user: UserResponse<UserType>;\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Setting Language using setLanguage method - Typescript\nDESCRIPTION: This snippet demonstrates how to change the language using the `setLanguage` method of the `Streami18n` class. This allows for dynamic language switching within the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n\n...\n// Logic for how a user can change the language\n...\n\nstreami18n.setLanguage('fr'); // The UI will change to French.\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering of Message Actions in React\nDESCRIPTION: This code demonstrates how to conditionally render message actions within a `Channel` component in Stream Chat React Native. It uses the `messageActions` prop to filter and modify the default message actions based on whether the message is from the current user (`isMyMessage`). Specifically, it shows \"Copy Message\" for all messages and \"Edit Message\" only for messages from the current user. It also applies custom styling to the \"deleteMessage\" action title.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_actions_customization.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n  messageActions={({ copyMessage, editMessage, isMyMessage }) =>\n    isMyMessage\n      ? [\n          copyMessage,\n          editMessage,\n          {\n            ...deleteMessage,\n            textStyle: {\n              color: 'red',\n              fontWeight: 'bold',\n            },\n          },\n        ]\n      : [copyMessage]\n  }\n>\n  {/** MessageList and MessageInput component here */}\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Defining the type of selectedImages in AttachmentPicker\nDESCRIPTION: This code snippet defines the structure of each element within the `selectedImages` array. It specifies the properties of an image object in the attachment picker, including height, source, URI, width, and an optional ID.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/attachment_picker_context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nArray<{\n  height: number;\n  source: 'camera' | 'picker';\n  uri: string;\n  width: number;\n  id?: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Install Expo AV for voice recording (Expo)\nDESCRIPTION: This command installs the expo-av package using npx expo install for projects initialized with Expo. This is an optional dependency to enable voice recording.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-av\n```\n\n----------------------------------------\n\nTITLE: Install Expo Sharing (Expo)\nDESCRIPTION: This command installs the expo-sharing package using npx expo install for projects initialized with Expo.  This is an optional dependency to enable attachment sharing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-sharing\n```\n\n----------------------------------------\n\nTITLE: Setting additional FlatList props (JSX)\nDESCRIPTION: Shows how to pass additional props to the underlying FlatList component used by MessageList.  This allows for customization of the FlatList's behavior.  In this example, the `bounces` prop is set to true.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<MessageList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Applying Generics to useChannelContext Hook (TSX)\nDESCRIPTION: This code snippet demonstrates how to apply generics to the useChannelContext hook in Stream Chat React Native. Applying generics ensures that the returned channel object is correctly typed, especially when using custom channel fields. This provides type safety when accessing channel properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/typescript.mdx#_snippet_4\n\nLANGUAGE: TSX\nCODE:\n```\nconst { channel } = useChannelContext<\n  DefaultAttachmentType,\n  { image?: string; nickName?: string },\n  DefaultCommandType,\n  DefaultEventType,\n  { isAdminMessage?: boolean }\n>();\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client - Typescript\nDESCRIPTION: This code snippet demonstrates how to initialize the Stream Chat client using an API key. The `StreamChat.getInstance` method is used to create a singleton instance of the client.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Suggestion Item - React Native\nDESCRIPTION: This code snippet shows how to customize the list item component of the autocomplete suggestion list in a Stream Chat React Native application using the AutoCompleteSuggestionItem prop of the Channel component. It demonstrates conditional rendering based on the trigger type (command, mention) and accessing item-specific props (itemProps). The default AutoCompleteSuggestionItem is returned if no changes are desired for a specific trigger type. Dependencies include 'stream-chat-react-native' and 'react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/auto_complete_suggestion_list_customizations.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Avatar, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\nimport { Text, View } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionItem={({ itemProps, triggerType }) => {\n    if (triggerType === 'command') {\n      return (\n        <View>\n          <Text>{itemProps.name}</Text>\n          <Text>{itemProps.args}</Text>\n        </View>\n      );\n    } else if (triggerType === 'mention') {\n      const { id, image, name, online } = itemProps;\n      return (\n        <View>\n          <Avatar image={image} name={name} online={online} size={30} />\n          <Text>{itemProps.name}</Text>\n        </View>\n      );\n    } else {\n      return <AutoCompleteSuggestionItem itemProps={itemProps} triggerType={triggerType} />;\n    }\n  }}\n>\n  {/*The underlying components*/}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Register device for push notifications\nDESCRIPTION: This code demonstrates how to register a device with Stream to receive push notifications using Firebase Cloud Messaging (FCM).  It requests push notification permission, retrieves the FCM token, and then uses the Stream Chat client to register the device. The `client.addDevice` function is used to associate the FCM token with the user.  It also sets up a listener to refresh the token if it changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v1.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Request Push Notification permission from device.\nconst requestPermission = async () => {\n  const authStatus = await messaging().requestPermission();\n  const enabled = \n    authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log('Authorization status:', authStatus);\n  }\n};\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n  const unsubscribeTokenRefreshListenerRef = useRef<() => void>();\n\n  useEffect(() => {\n    // Register FCM token with stream chat server.\n    const registerPushToken = async () => {\n      // unsubscribe any previous listener\n      unsubscribeTokenRefreshListenerRef.current?.();\n      const token = await messaging().getToken();\n      await client.addDevice(token, 'firebase');\n\n      unsubscribeTokenRefreshListener = messaging().onTokenRefresh(async newToken => {\n        await client.addDevice(newToken, 'firebase');\n      });\n    };\n\n    const init = async () => {\n      await client.connectUser({ id: USER_ID }, USER_TOKEN);\n\n      await requestPermission();\n      await registerPushToken();\n\n      setIsReady(true);\n    };\n\n    init();\n\n    return async () => {\n      await client?.disconnectUser();\n      unsubscribeTokenRefreshListenerRef.current?.();\n    };\n  }, []);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Chat client={client}>{/* Child components of Chat go here */}</Chat>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting up Thread component - TSX\nDESCRIPTION: This code snippet shows how to configure the Thread component within a Stream Chat Channel. The `thread` prop is passed to `Channel`, and `threadList` is enabled. The `onThreadDismount` prop of the `Thread` component is used to reset the thread when the thread view is closed, ensuring the UI correctly displays the channel messages after closing a thread.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chat client={chatClient} i18nInstance={streami18n}>\n  <Channel channel={channel} thread={thread} threadList>\n    <Thread onThreadDismount={() => setThread(null)} />\n  </Channel>\n</Chat>\n```\n\n----------------------------------------\n\nTITLE: Adding MessageList to a Stream Chat Channel\nDESCRIPTION: This code snippet shows how to include a MessageList component inside the Channel component. The MessageList displays the messages of the selected channel. This relies on the channel state being managed and passed to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel}>\n            <MessageList />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing AutoCompleteSuggestionItem with Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to use the AutoCompleteSuggestionItem component within the Channel component of the stream-chat-react-native library.  It shows how to define a custom AutoCompleteSuggestionItemComponent and pass it to the Channel component's AutoCompleteSuggestionItem prop. This enables the customization of the autocomplete suggestion list items. The component must be a valid React Native component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/autocomplete_suggestion_item.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionItemComponent = () => <AutoCompleteSuggestionItem />\n\n<Channel AutoCompleteSuggestionItem={AutoCompleteSuggestionItemComponent} />\n```\n\n----------------------------------------\n\nTITLE: Markdown Styling with Theme - JSX\nDESCRIPTION: Demonstrates how to customize the styling of markdown content within the message component using the theme object. This allows for specific styling of different markdown elements, like headings and inline code.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst themeStyle = {\n  messageSimple: {\n    content: {\n      markdown: {\n        heading1: {\n          color: 'pink',\n        },\n        inlineCode: {\n          fontSize: 10,\n        },\n      },\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Initializing Streami18n (Default)\nDESCRIPTION: Creates a new instance of Streami18n with default English settings.  This is the basic setup if no custom language or date handling is needed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n```\n\n----------------------------------------\n\nTITLE: Installing SampleApp Dependencies with Yarn\nDESCRIPTION: Navigates to the SampleApp directory within the SDK and installs its specific dependencies using Yarn. This prepares the SampleApp for execution and testing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncd examples/SampleApp;\nyarn install;\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ChannelContext using the useContext hook in a React functional component. It retrieves values like lastRead, reloadChannel, and watcherCount from the context, allowing components within the Channel to access and utilize channel-related data and functions. This approach requires importing useContext from 'react' and ChannelContext from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/channel_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChannelContext } from 'stream-chat-react-native';\n\nconst { lastRead, reloadChannel, watcherCount } = useContext(ChannelContext);\n```\n\n----------------------------------------\n\nTITLE: Wrapping App in Chat and OverlayProvider - TSX\nDESCRIPTION: This code shows how to wrap the app in `Chat` and `OverlayProvider` components. The `Chat` component requires a `client` prop, which is the instance of StreamChat. The `OverlayProvider` wraps the `Chat` component and provides overlay functionalities.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>{/** App components */}</Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing FileAttachment with Channel component in TSX\nDESCRIPTION: This code snippet demonstrates how to customize the FileAttachment component within the Channel component in stream-chat-react-native.  It imports Channel and FileAttachment and then sets the FileAttachment prop of the Channel component to a custom component that renders the FileAttachment with a specified attachmentSize. The attachmentSize prop adjusts the size of the file attachment icon.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/file-attachment.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, FileAttachment } from 'stream-chat-react-native';\n\n<Channel FileAttachment={() => <FileAttachment attachmentSize={40} />}\n```\n\n----------------------------------------\n\nTITLE: Registering DateTime Format with Day.js Locale Config\nDESCRIPTION: Shows how to add locale config for moment while registering translation via `registerTranslation` function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst i18n =new Streami18n();\n\ni18n.registerTranslation(\n 'mr',\n {\n   'Nothing yet...': 'काहीही नाही  ...',\n   '{{ firstUser }} and {{ secondUser }} are typing...':\n    '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',\n },\n {\n   months: [...],\n   monthsShort: [...],\n   calendar: {\n     sameDay: '...'\n   }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Overriding Message component in Channel - React Native\nDESCRIPTION: This snippet shows how to override the default Message component in the Channel component with a custom component. This allows you to implement your own handlers for message actions, gestures, etc. It renders the custom message component within the Channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider bottomInset={bottom} i18nInstance={streami18n}>\n  <Chat client={chatClient} i18nInstance={streami18n}>\n    <Channel channel={channel} keyboardVerticalOffset={headerHeight} Message={CustomMessageComponent}>\n      <View style={{ flex: 1 }}>\n        <MessageList />\n        <MessageInput />\n      </View>\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notification Interactions with React Native Firebase\nDESCRIPTION: This code snippet demonstrates how to use React Native Firebase to handle push notification interactions when the app is opened from a quit state (`getInitialNotification`) or running in the background (`onNotificationOpenedApp`). It extracts channel and message data from the notification and includes placeholders for navigation logic using React Navigation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/push_notifications.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport messaging from '@react-native-firebase/messaging';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  useEffect(() => {\n    // `onNotificationOpenedApp` gets called when app is in background, and you press\n    // the push notification.\n    //\n    // Here its assumed a message-notification contains a \"channel\" property in the data payload.\n    //\n    // Please check the docs on push template:\n    // https://getstream.io/chat/docs/javascript/push_template/?language=javascript\n    messaging().onNotificationOpenedApp(remoteMessage => {\n      console.log('Notification caused app to open from background state:', remoteMessage);\n      const channel = JSON.parse(remoteMessage.data.channel);\n      const message = remoteMessage.data.message;\n\n      console.log('This message belongs to channel with id - ', channel.id);\n      console.log('Message id is', message);\n\n      // You will add your navigation logic, to navigate to relevant channel screen.\n    });\n\n    // `getInitialNotification` gets called when app is in quit state, and you press\n    // the push notification.\n    //\n    //\n    // Here its assumed that a message-notification contains a \"channel\" property in the data payload.\n    // Please check the docs on push template:\n    // https://getstream.io/chat/docs/javascript/push_template/?language=javascript\n    messaging()\n      .getInitialNotification()\n      .then(remoteMessage => {\n        if (remoteMessage) {\n          console.log('Notification caused app to open from quite state:', remoteMessage);\n          const channel = JSON.parse(remoteMessage.data.channel);\n          const message = remoteMessage.data.message;\n\n          console.log('This message belongs to channel with id - ', channel.id);\n          console.log('Message id is', message);\n\n          // You will add your navigation logic, to navigate to relevant channel screen.\n        }\n      });\n  }, []);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName={initialRoute}>\n        <Stack.Screen name='Home' component={HomeScreen} />\n        <Stack.Screen name='ChannelListScreen' component={SettingsScreen} />\n        <Stack.Screen name='ChannelScreen' component={SettingsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Reply Component\nDESCRIPTION: This code snippet demonstrates how to replace the default `Reply` component with a custom one within the `Channel` component.  The `CustomReply` component will be used to render the preview of the parent message for quoted messages. This allows for complete customization of the reply preview UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/reply.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel Reply={CustomReply} />\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime Format with Day.js Locale Config\nDESCRIPTION: Demonstrates how to override the DateTime format using a Day.js locale configuration. This allows you to customize the date and time display based on the selected language.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst i18n =new Streami18n({\n language: 'nl',\n dayjsLocaleConfigForLanguage: {\n   months: [...],\n   monthsShort: [...],\n   calendar: {\n     sameDay: '...'\n   }\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Example Push Notification Payload (JSON)\nDESCRIPTION: This JSON snippet represents an example push notification message payload delivered to iOS devices via Firebase Cloud Messaging (FCM). It contains a `data` field with information about the message, sender, channel, and version and a `notification` field with the title and body of the message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sender\": \"stream.chat\",\n    \"type\": \"message.new\",\n    \"version\": \"v2\",\n    \"id\": \"d152f6c1-8c8c-476d-bfd6-59c15c20548a\",\n    \"channel_type\": \"messaging\",\n    \"channel_id\": \"company-chat\",\n    \"cid\": \"messaging:company-chat\"\n  },\n  // the notification field is present only on iOS by default and not on Android\n  \"notification\": {\n    \"title\": \"Message from user\",\n    \"body\": \"Hello\"\n  }\n  // other fields..\n}\n```\n\n----------------------------------------\n\nTITLE: Thread Manager State Selector - Typescript\nDESCRIPTION: This selector extracts specific properties (unreadThreadsCount, active, lastConnectionDownAt) from the ThreadManagerState.  It's designed to be used with a state management system to efficiently update components when only these specific values change. The selector returns a named object containing the extracted properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst selector = (nextValue: ThreadManagerState) => ({\n  unreadThreadsCount: nextValue.unreadThreadsCount,\n  active: nextValue.active,\n  lastConnectionDownAt: nextvalue.lastConnectionDownAt,\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageStatus with Channel Prop in React Native\nDESCRIPTION: This code snippet demonstrates how to replace the default `MessageStatus` component within the `Channel` component using a prop that returns null, effectively removing it from the UI. It illustrates the initial step in customizing the appearance of the chat interface.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/contexts.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel MessageStatus={() => null}>\n```\n\n----------------------------------------\n\nTITLE: Message Reactions Array Example - TSX\nDESCRIPTION: This code snippet shows an example array of message reactions. Each reaction object indicates whether the current user added the reaction (own: true/false) and the type of reaction (e.g., 'love', 'haha'). This data structure is commonly used in Stream Chat React Native to display reactions to messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/message-context/reactions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n[\n  {\n    own: true,\n    type: 'love',\n  },\n  {\n    own: false,\n    type: 'haha',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Consuming OverlayContext with useOverlayContext Hook - TSX\nDESCRIPTION: Demonstrates how to consume the OverlayContext using the useOverlayContext hook provided by the stream-chat-react-native library.  This simplifies access to the setOverlay function. This snippet requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/overlay-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useOverlayContext } from 'stream-chat-react-native';\n\nconst { setOverlay } = useOverlayContext();\n```\n\n----------------------------------------\n\nTITLE: Replacing Infinite Scroll with Load More Button - React Native\nDESCRIPTION: This code snippet demonstrates how to replace the default infinite scroll pagination in the ChannelList component with a 'Load More' button. It defines a `FooterLoadMoreButton` component that uses the `useChannelsContext` hook to access pagination-related flags and the `loadNextPage` function. It then uses the `additionalFlatListProps` prop to override the default FlatList props, adding the 'Load More' button as the `ListFooterComponent` and disabling infinite scroll by setting `onEndReached` to null.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-list.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\nimport { useChannelsContext } from 'stream-chat-react-native';\n\nconst FooterLoadMoreButton = () => {\n  const { loadingChannels, loadNextPage, hasNextPage } = useChannelsContext();\n\n  if (loadingChannels || !hasNextPage) return null;\n\n  return <Button title={'Load More'} onPress={loadNextPage} />;\n};\n\n<ChannelList\n  additionalFlatListProps={{\n    ListFooterComponent: FooterLoadMoreButton,\n    onEndReached: () => null,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Custom Message UI Component Implementation - TSX\nDESCRIPTION: Example of how to replace the MessageSimple component with a custom UI component within the Stream Chat React Native SDK.  It illustrates how to access context using `useChannelContext`, `useMessagesContext`, and `useMessageContext` hooks.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  useChannelContext,\n  useMessagesContext,\n  useMessageContext,\n} from 'stream-chat-react-native';\n\nconst CustomMessageUIComponent = () => {\n  const { channel, members, watchers, error, loading } = useChannelContext();\n  const { handleDeleteMessage, handleResendMessage, message, reactions } = useMessageContext();\n\n  /** Custom implementation */\n};\n\n<OverlayProvider bottomInset={bottom} i18nInstance={streami18n}>\n  <Chat client={chatClient} i18nInstance={streami18n}>\n    <Channel channel={channel} keyboardVerticalOffset={headerHeight} MessageSimple={CustomMessageUIComponent}>\n      <View style={{ flex: 1 }}>\n        <MessageList />\n        <MessageInput />\n      </View>\n    </Channel>\n  </Chat>\n</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Add Reanimated Babel Plugin - JavaScript\nDESCRIPTION: This code snippet demonstrates how to add the react-native-reanimated Babel plugin to your babel.config.js file. This is a required step for using react-native-reanimated in your React Native project. The plugin enables the Reanimated library to work correctly by transforming the code during the build process.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_11\n\nLANGUAGE: JavaScript\nCODE:\n```\nmodule.exports = {\n    ...\n    plugins: [\n        ...\n        'react-native-reanimated/plugin',\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using Default Types with StreamChatGenerics (TSX)\nDESCRIPTION: This snippet demonstrates how to incorporate the default types provided by `stream-chat-react-native` into the `StreamChatGenerics` type. This ensures that you're extending the existing types with your custom data models. It is important to set all seven generics even if you intend to only customize a subset of the types.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/typescript.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\ntype StreamChatGenerics = {\n  attachmentType: DefaultAttachmentType;\n  channelType: DefaultChannelType;\n  commandType: DefaultCommandType;\n  eventType: DefaultEventType;\n  messageType: DefaultMessageType;\n  reactionType: DefaultReactionType;\n  userType: DefaultUserType;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel for Instagram Double-Tap Reaction in TypeScript\nDESCRIPTION: This code snippet configures the `<Channel>` component to use the double-tap gesture for reactions. It sets `onDoubleTapMessage`, `onPressInMessage`, and `onLongPressMessage` props with the handler functions defined previously. The `OverlayReactionList` is set to `null` to hide the default reaction list and fully rely on the double-tap action.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  onDoubleTapMessage={onDoubleTapMessage}\n  onPressInMessage={handleDoubleTap}\n  onLongPressMessage={onLongPressMessage}\n  OverlayReactionList={() => null}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Setting language during Streami18n instantiation\nDESCRIPTION: This code snippet shows how to initialize the `Streami18n` class with a specific language, such as Dutch ('nl'). This sets the initial language for all components using the `Streami18n` instance. It relies on the `Streami18n` class from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n({ language: 'nl' }); // Instantiate Streami18n with Dutch strings.\n```\n\n----------------------------------------\n\nTITLE: Replacing DateHeader Component in Channel - TSX\nDESCRIPTION: This snippet demonstrates how to replace the default `DateHeader` component in the `Channel` component with `undefined`, effectively removing it from the UI. This requires no dependencies beyond the standard Stream Chat React Native setup.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/custom_components.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  ...\n  DateHeader={undefined}\n>\n```\n\n----------------------------------------\n\nTITLE: Customizing additionalScrollViewProps - React Native\nDESCRIPTION: Shows how to customize the ScrollView props using the `additionalScrollViewProps` prop.  This allows developers to modify the behavior and appearance of the underlying ScrollView used by PollAllOptions. The example sets the bounces prop to true. Requires passing of additionalFlatListProps to PollAllOptions component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-all-options.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<PollAllOptions additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Registering a Device with Stream for Push Notifications (JavaScript)\nDESCRIPTION: This snippet shows how to register a device with Stream Chat to receive push notifications using the Firebase device token. It requests permission for push notifications, retrieves the FCM token, and uses the client.addDevice method to register the device with Stream. It also includes logic to refresh the token and handle user connection/disconnection.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/push_notifications_v1.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Request Push Notification permission from device.\nconst requestPermission = async () => {\n  const authStatus = await messaging().requestPermission();\n  const enabled =\n    authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log('Authorization status:', authStatus);\n  }\n};\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n  const unsubscribeTokenRefreshListenerRef = useRef<() => void>();\n\n  useEffect(() => {\n    // Register FCM token with stream chat server.\n    const registerPushToken = async () => {\n      // unsubscribe any previous listener\n      unsubscribeTokenRefreshListenerRef.current?.();\n      const token = await messaging().getToken();\n      await client.addDevice(token, 'firebase');\n\n      unsubscribeTokenRefreshListener = messaging().onTokenRefresh(async newToken => {\n        await client.addDevice(newToken, 'firebase');\n      });\n    };\n\n    const init = async () => {\n      await client.connectUser({ id: USER_ID }, USER_TOKEN);\n\n      await requestPermission();\n      await registerPushToken();\n\n      setIsReady(true);\n    };\n\n    init();\n\n    return async () => {\n      await client?.disconnectUser();\n      unsubscribeTokenRefreshListenerRef.current?.();\n    };\n  }, []);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Chat client={client}>{/* Child components of Chat go here */}</Chat>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming ImageGalleryContext with useContext - TSX\nDESCRIPTION: This snippet shows how to consume the ImageGalleryContext using the useContext hook.  It imports the ImageGalleryContext from the stream-chat-react-native library and extracts the messages and setMessages values. This allows child components of OverlayProvider to access and modify the image gallery data. Requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/image-gallery-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ImageGalleryContext } from 'stream-chat-react-native';\n\nconst { messages, setMessages } = useContext(ImageGalleryContext);\n```\n\n----------------------------------------\n\nTITLE: Consuming KeyboardContext with useKeyboardContext hook - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the KeyboardContext using the useKeyboardContext hook provided by 'stream-chat-react-native'. It retrieves the dismissKeyboard function, allowing a component to dismiss the keyboard programmatically.  This is an alternative to using the useContext hook directly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/keyboard-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardContext } from 'stream-chat-react-native';\n\nconst { dismissKeyboard } = useKeyboardContext();\n```\n\n----------------------------------------\n\nTITLE: Getting Available Languages - Typescript\nDESCRIPTION: This code snippet shows how to retrieve an array of language codes supported by the `Streami18n` instance using the `getAvailableLanguages()` method. The method returns a list of strings, each representing a language code.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst availableLanguages = streami18n.getAvailableLanguages();\n```\n\n----------------------------------------\n\nTITLE: Update buildToolsVersion, compileSdkVersion, targetSdkVersion - Java\nDESCRIPTION: This snippet from the `android/build.gradle` file shows how to define the `buildToolsVersion`, `compileSdkVersion`, and `targetSdkVersion` to be >= 26. Ensure these values are properly configured for camera compatibility.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n  ext {\n    buildToolsVersion = \"29.0.3\"\n    compileSdkVersion = 29\n    targetSdkVersion = 29\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Message Attachment Data Structure - TSX\nDESCRIPTION: This code snippet shows the structure of the file attachment object within the array.  It includes the file's name, size, type, and URI, along with an ID, state, and URL. The state indicates whether the file is currently being uploaded or if the upload has finished.  The data structure is used within the MessageInput component in the stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/message-input-context/file_uploads.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n[\n  {\n    file: {\n      name: 'test.pdf';\n      size: 2000;\n      type: 'application/pdf';\n      uri: 'file-uri';\n    };\n    id: 'asdas232bk3jb42k3';\n    state: 'uploaded'; // or 'finished'\n    url: 'https://cdn.getstream.io/kajsnkj2n3j4';\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Add Google Maps API Key (Android)\nDESCRIPTION: This XML snippet adds the Google Maps API key to the AndroidManifest.xml file. This key is required to use the Google Maps service on Android. Replace \"Your Google maps API Key Here\" with the actual API key obtained from the Google Cloud Console.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application>\n   <!-- You will only need to add this meta-data tag, but make sure it's a child of application -->\n   <meta-data\n     android:name=\"com.google.android.geo.API_KEY\"\n     android:value=\"Your Google maps API Key Here\"/>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Using ImageGalleryContext and OverlayContext to open image viewer - TSX\nDESCRIPTION: This snippet illustrates how to use ImageGalleryContext and OverlayContext together to open an image viewer when a user presses on an image. It sets the messages to display, selects a specific message, and then triggers the 'gallery' overlay. This relies on both ImageGalleryContext and OverlayContext being available in the component's scope.  Requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/image-gallery-context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst { messages, setMessages, setSelectedMessage } = useImageGalleryContext();\nconst { setOverlay } = useOverlayContext();\n\nonPress={() => {\n  setMessages(messagesWithImage);\n  setSelectedMessage({\n    messageId: selectedItem.messageId,\n    url: selectedItem.uri,\n  });\n  setOverlay('gallery');\n}}\n```\n\n----------------------------------------\n\nTITLE: Conditionally Render Message Actions\nDESCRIPTION: This JSX snippet shows how to conditionally render message actions using the `messageActions` prop of the `Channel` component. It filters and modifies actions based on whether the message is from the current user, customizing text style of a specific action.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n  messageActions={({ copyMessage, editMessage, isMyMessage }) =>\n    isMyMessage\n      ? [\n          copyMessage,\n          editMessage,\n          {\n            ...deleteMessage,\n            textStyle: {\n              color: 'red',\n              fontWeight: 'bold',\n            },\n          },\n        ]\n      : [copyMessage]\n  }\n>\n  {/** MessageList and MessageInput component here */}\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Install React Native Haptic Feedback (RN CLI)\nDESCRIPTION: This command installs the react-native-haptic-feedback package using yarn for projects initialized with React Native CLI. This is an optional dependency to provide haptic feedback to the user.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-haptic-feedback\n```\n\n----------------------------------------\n\nTITLE: Filtering Video Attachments with TypeScript\nDESCRIPTION: This code snippet filters an array of message attachments to extract video files. It utilizes the `filter` method to create a new array containing only attachments where the `type` property equals 'video' and the `og_scrape_url` property is either undefined or evaluates to false (typically meaning no open graph scraping URL is associated with the video). The result is stored in the `videos` variable.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/message-context/videos.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst videos = message.attachments.filter(a => a.type === 'video' && !a.og_scrape_url);\n```\n\n----------------------------------------\n\nTITLE: Running iOS App (Expo)\nDESCRIPTION: This bash command runs the iOS application using Expo.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_38\n\nLANGUAGE: Bash\nCODE:\n```\nyarn run ios\n```\n\n----------------------------------------\n\nTITLE: Consuming TypingContext with useContext - Typescript\nDESCRIPTION: This snippet demonstrates how to consume the TypingContext using the useContext hook in a React component.  It imports the TypingContext from 'stream-chat-react-native' and then uses useContext to access the typing object. The typing object contains information about users who are currently typing in the channel. It assumes that the component is a child of the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/typing_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { TypingContext } from 'stream-chat-react-native';\n\nconst { typing } = useContext(TypingContext);\n```\n\n----------------------------------------\n\nTITLE: Retry Sending Failed Message - React Native\nDESCRIPTION: This function re-attempts sending a failed message. It's intended to allow users to resend messages that failed to send initially due to network issues or other errors. It takes a message object as input.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/messages_context.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nretrySendMessage(message)\n```\n\n----------------------------------------\n\nTITLE: Adding the custom reaction to ReactionData array in TypeScript\nDESCRIPTION: This line adds a new reaction to the list of available reactions.  It uses the spread operator to create a new array containing all the existing reactions in `reactionData`, plus a new object with the type 'stream' and the previously defined Icon `StreamReaction`. \nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst newReactionData = [...reactionData, { type: 'stream', Icon: StreamReaction }];\n```\n\n----------------------------------------\n\nTITLE: Setting Language on Streami18n Instance - Typescript\nDESCRIPTION: This snippet demonstrates how to set the language for the Streami18n instance using the constructor. This will load the appropriate translation strings for the specified language. The snippet initializes Streami18n with Dutch strings.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst streami18n = new Streami18n({ language: 'nl' }); // Instantiate Streami18n with Dutch strings.\n```\n\n----------------------------------------\n\nTITLE: General PollAnswersList Usage - React Native\nDESCRIPTION: This code demonstrates the basic usage of the `PollAnswersList` component within a `Channel` component, which is nested inside `Chat` and `OverlayProvider`. It requires a `client`, `channel`, `message`, and `poll` prop.  It initializes the necessary context providers for the stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-answers-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, PollAnswersList } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollAnswersList message={message} poll={poll} {...otherOptionalProps} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Using Nav component with SafeAreaProvider - TSX\nDESCRIPTION: This snippet demonstrates wrapping the Nav component with SafeAreaProvider to handle safe area insets.  This ensures that the application content is properly displayed within the safe area of the screen, avoiding overlapping with device UI elements like status bars and navigation bars.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/navigation.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Nav } from './Nav';\n\nexport const App = () => (\n  <SafeAreaProvider>\n    <Nav />\n  </SafeAreaProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Getting Translators - JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the translation functions from the Streami18n instance using the `getTranslators()` method. This method returns an object containing the `t` (translation) and `tDateTimeParser` (date/time translation) functions. It is asynchronous.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_17\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst { t, tDateTimeParser } =await streami18n.getTranslators();\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadsContext with useThreadsContext hook - React\nDESCRIPTION: This code snippet demonstrates how to consume the ThreadsContext using the useThreadsContext hook provided by the library. It imports the hook from 'stream-chat-react-native' and calls it to access the context value.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/threads-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadsContext } from 'stream-chat-react-native';\n\nconst value = useThreadsContext();\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelList Preview Title - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the title displayed in the ChannelList preview.  It shows how to replace the default title component with a custom component that uses channel data to render a specific title. The component receives the channel object as prop and can use its data to construct the title.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/channel_list.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomPreviewTitle = ({ channel }) => (\n  <Text>\n    {channel.data.customProperty} - {channel.data.name}\n  </Text>\n);\n\n<ChannelList PreviewTitle={CustomPreviewTitle} />;\n```\n\n----------------------------------------\n\nTITLE: Getting I18next Instance - JavaScript\nDESCRIPTION: This code snippet shows how to retrieve the underlying i18next instance used by Streami18n. This allows you to access i18next's functionalities directly if needed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_15\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst i18n = streami18n.geti18Instance();\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelsContext with useChannelsContext hook\nDESCRIPTION: This code demonstrates how to consume the ChannelsContext using the useChannelsContext hook provided by the stream-chat-react-native library. It retrieves the 'channels' and 'reloadList' values from the context, giving access to channel data and the ability to reload the channel list. This method offers a more streamlined approach compared to the standard useContext hook.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channels_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChannelsContext } from 'stream-chat-react-native';\n\nconst { channels, reloadList } = useChannelsContext();\n```\n\n----------------------------------------\n\nTITLE: Registering a Translation - JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a custom translation for a specific language using `Streami18n`. The `registerTranslation()` method allows you to add or override translations for a given language code. You can also include a custom Day.js locale configuration.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nstreami18n.registerTranslation('mr', {\n  'Nothing yet...': 'काहीही नाही  ...',\n  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत',\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelsContext with useChannelsContext hook - Typescript\nDESCRIPTION: This code snippet demonstrates consuming the ChannelsContext using the provided useChannelsContext hook. The hook simplifies the process of accessing context values within a React functional component. Similar to the useContext example, it extracts the 'channels' and 'reloadList' properties for channel data and list reloading.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channels-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChannelsContext } from 'stream-chat-react-native';\n\nconst { channels, reloadList } = useChannelsContext();\n```\n\n----------------------------------------\n\nTITLE: Generate Static Map URL - JavaScript\nDESCRIPTION: This JavaScript function generates a URL for a static map image from the Google Maps Static API using given latitude and longitude coordinates. It includes parameters for center, zoom, size, map type, API key, and a marker.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_7\n\nLANGUAGE: js\nCODE:\n```\nconst prepareStaticMapUrl = (lat, long) => {\n  let baseURL = 'https://maps.googleapis.com/maps/api/staticmap?';\n  let url = new URL(baseURL);\n  let params = url.searchParams;\n  params.append('center', `${lat},${long}`);\n  params.append('zoom', '15');\n  params.append('size', '600x300');\n  params.append('maptype', 'roadmap');\n  params.append('key', MAPS_API_KEY);\n  params.append('markers', `color:red|${lat},${long}`);\n\n  return url.toString();\n};\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with NavigationContainer and OverlayProvider (App)\nDESCRIPTION: This snippet demonstrates how to wrap your application with NavigationContainer, OverlayProvider, and Chat components from stream-chat-react-native. It ensures that the OverlayProvider renders content above all screens and handles the necessary React Navigation setup. The `StreamChat.getInstance` method needs to be called with your Stream API key to instantiate the client. Replace `/** App components */` with your actual application's content.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const App = () =>\n  <NavigationContainer>\n    <OverlayProvider>\n      <Chat client={client}>\n        <Stack.Navigator>\n          <Stack.Screen component={() => {/** App components */}} name='home' />\n        </Stack.Navigator>\n      </Chat>\n    </OverlayProvider>\n  </NavigationContainer>;\n```\n\n----------------------------------------\n\nTITLE: Setting Keyboard Vertical Offset for Channel\nDESCRIPTION: This snippet shows how to use the `useHeaderHeight` hook from `@react-navigation/stack` to get the header height and pass it as the `keyboardVerticalOffset` prop to the `Channel` component. This ensures that the keyboard avoids covering the input field when it appears.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n  const headerHeight = useHeaderHeight();\n\n  <Channel keyboardVerticalOffset={headerHeight}>\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Header (TSX)\nDESCRIPTION: This example shows how to add a custom message header that displays the sender's name (if it's a group message) and the formatted date. It replaces the default `MessageFooter` with a `MessageHeader` component passed to the `Channel`. It utilizes `MessageHeaderProps` and the `useMessageContext` hook to render the custom header.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  MessageHeader={(props) =>\n    props.message?.user?.id !== chatClient.userID ? (\n      <View\n        style={{ flexDirection: 'row' }}\n      >\n        {Object.keys(props.members).length > 2 &&\n          props.message.user?.name ? (\n            <Text style={[{ color: grey, marginRight: 8 }]}>\n              {props.message.user.name}\n            </Text>\n          ) : null}\n        <Text style={[{ color: grey, textAlign: props.alignment }]}>\n          {props.formattedDate}\n        </Text>\n      </View>\n    ) : null\n  }\n  MessageFooter={() => null}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Theming Markdown Text Styles - JSX\nDESCRIPTION: Illustrates how to customize the styles of markdown text rendered within the Message component using the `theme` prop of the `Chat` component.  It shows how to target specific markdown elements (e.g., heading1, inlineCode) and apply custom text styles. Requires the `Chat` component from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst themeStyle = {\n  messageSimple: {\n    content: {\n      markdown: {\n        heading1: {\n          color: 'pink',\n        },\n        inlineCode: {\n          fontSize: 10,\n        },\n      },\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Getting Translations - JavaScript\nDESCRIPTION: This code snippet shows how to retrieve the current translation dictionaries for all languages from the Streami18n instance using the `getTranslations()` method. The returned value is an object containing language codes as keys and their corresponding translation dictionaries as values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst translations = streami18n.getTranslations();\n```\n\n----------------------------------------\n\nTITLE: Defining Sort Object for Stream Chat Channel Query (TypeScript)\nDESCRIPTION: This code snippet demonstrates how to define a sort object to be passed to the Stream Chat client query function.  The example sorts channels by the `last_updated` field in descending order (-1). For optimal performance, the sort object should be a static reference or memoized.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/core-components/channel-list/props/sort.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst sort = { last_updated: -1 };\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat and Channel - React Native\nDESCRIPTION: This code demonstrates the basic usage of the Channel component. It initializes a StreamChat client, creates and watches a channel, and renders the MessageList and MessageInput components within the Channel component. The channel state is managed using the useState hook.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/channel.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Channel, Chat, MessageInput, MessageList, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState();\n\n  useEffect(() => {\n    const createAndWatchChannel = async () => {\n      const newChannel = client.channel('messaging', 'channel_id');\n      await newChannel.watch();\n      setChannel(newChannel);\n    };\n\n    createAndWatchChannel();\n  }, []);\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <MessageList />\n          <MessageInput />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Gallery Component in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the Gallery component within the Channel component in stream-chat-react-native. It shows how to prevent onPress events using the preventPress prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/gallery.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, Gallery } from 'stream-chat-react-native';\n\n<Channel Gallery={() => <Gallery preventPress />}\n```\n\n----------------------------------------\n\nTITLE: Implementing onSelect function in ChannelList - TSX\nDESCRIPTION: This code snippet demonstrates how to implement the `onSelect` function within the `ChannelList` component in a React Native application using TypeScript. The `onSelect` function is called when a user presses an item in the `ChannelList`. It receives a `Channel` instance as a parameter, which corresponds to the selected list item. Typically, this function is used for navigating to a channel screen to display messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/core-components/channel-list/props/on_select.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nonSelect={(channel) => { /** navigation logic */ }}\n```\n\n----------------------------------------\n\nTITLE: Configuring Expo Permissions in app.json\nDESCRIPTION: This JSON snippet demonstrates how to configure permissions in the `app.json` file for an Expo project, specifically for iOS via config plugins. It shows how to set permission descriptions for media library, image picker, and audio/video (expo-av). These permission descriptions are used when the app requests access to the camera, microphone, and photo library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"$(PRODUCT_NAME) would like access to your photo gallery to share image in a message.\",\n          \"savePhotosPermission\": \"$(PRODUCT_NAME) would like to save photos to your photo gallery after downloading from a message.\"\n        }\n      ],\n      [\n        \"expo-image-picker\",\n        {\n          \"cameraPermission\": \"$(PRODUCT_NAME) would like to use your camera to share image in a message.\"\n        }\n      ],\n      [\n        \"expo-av\",\n        {\n          \"microphonePermission\": \"$(PRODUCT_NAME) would like to use your microphone for voice recording.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-camera-roll package (RN CLI)\nDESCRIPTION: This bash command installs the `@react-native-camera-roll/camera-roll` package using yarn for accessing the device gallery in a React Native CLI project.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_28\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add @react-native-camera-roll/camera-roll\n```\n\n----------------------------------------\n\nTITLE: Targeted Message ID\nDESCRIPTION: This variable stores the message ID of the message that should be highlighted. The default value is undefined, and it is set back to undefined after the highlight time expires. This variable is used to visually emphasize a specific message within the chat interface.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/messages-context.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Adding MessageList component to Channel - React Native\nDESCRIPTION: This code snippet adds the `MessageList` component within the `Channel` component. It displays the list of messages in the selected channel. It is a simplified implementation assuming that the channel and client are already set up.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel}>\n            <MessageList />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageContext with useContext - React\nDESCRIPTION: This code snippet demonstrates how to consume the MessageContext within a React component using the useContext hook.  It imports the necessary modules from 'react' and 'stream-chat-react-native', retrieves values like isMyMessage, message, and files from the context, and makes them available for use within the component. It depends on the stream-chat-react-native library and the React Context API.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/message_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { MessageContext } from 'stream-chat-react-native';\n\nconst { isMyMessage, message, files } = useContext(MessageContext);\n```\n\n----------------------------------------\n\nTITLE: Filtering Image Attachments with TypeScript\nDESCRIPTION: This code snippet filters an array of attachments to extract only the image attachments from a message object. It assumes that `message.attachments` is an array of objects, where each object represents an attachment and has a `type` property. The `filter` method is used to create a new array containing only the attachments where `a.type` is equal to 'image'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/message-context/images.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst images = message.attachments.filter(a => a.type === 'image');\n```\n\n----------------------------------------\n\nTITLE: Adding External Link Permissions - Android\nDESCRIPTION: This XML snippet adds permissions to `AndroidManifest.xml` that allows opening external links when `targetSdkVersion` is >= 30. This is necessary for supporting http and https links.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"http\" android:host=\"*\" />\n  </intent>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"https\" android:host=\"*\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Message Action in React\nDESCRIPTION: This code snippet illustrates how to add a custom message action, \"Mute User\", to the message actions list in Stream Chat React Native. It uses the `messageActions` prop of the `Channel` component to add the custom action. The action is only displayed for messages from other users (`!isMyMessage`).  The code also demonstrates how to use icons and conditional titles based on the user's mute status.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_actions_customization.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nimport { messageActions as defaultMessageActions, Mute as MuteIcon } from 'stream-chat-react-native';\n\n<Channel\n  channel={channel}\n  messageActions={param => {\n    const { isMyMessage, ownCapabilities, dismissOverlay } = param;\n    const actions = defaultMessageActions({ ...param });\n\n    if (!isMyMessage) {\n      const isMuted = (client.mutedUsers || []).some(\n        mute => mute.user.id === client.userID && mute.target.id === message.user?.id,\n      );\n\n      actions.push({\n        action: async () => {\n          dismissOverlay();\n          if (message.user?.id) {\n            if (isMuted) {\n              await client.unmuteUser(message.user.id);\n            } else {\n              await client.muteUser(message.user.id);\n            }\n          }\n        },\n        actionType: 'muteUser',\n        icon: <MuteIcon />,\n        title: isMuted ? t('Unmute User') : t('Mute User'),\n      });\n    }\n\n    return actions;\n  }}\n>\n  {/** MessageList and MessageInput component here */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Consuming TranslationContext with useTranslationContext hook\nDESCRIPTION: This snippet shows how to use the useTranslationContext hook, provided by the stream-chat-react-native library, to consume the TranslationContext. It imports useTheme from 'stream-chat-react-native'. The t and tDateTimeParser functions are extracted from the hook. It assumes that the component is a child of OverlayProvider or Chat component. It requires stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/translation_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTheme } from 'stream-chat-react-native';\n\nconst { t, tDateTimeParser } = useTranslationContext();\n```\n\n----------------------------------------\n\nTITLE: Configuring User Query for Mention Autocomplete (React Native)\nDESCRIPTION: This code snippet shows how to define a query for searching users as part of an autocomplete mention feature within a React Native input box.  It uses the `mentionAllAppUsersQuery` prop to filter users based on their IDs.  The `filters` object specifies that the `id` field must be one of the values in the array ['$in: ['vishal', 'lucas']']. `sort` and `options` are empty objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/core-components/channel/props/mention_all_app_users_query.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nmentionAllAppUsersQuery={{\n  filters: {\n    id: {\n      $in: ['vishal', 'lucas']\n    }\n  },\n  sort: {},\n  options: {}\n}}\n```\n\n----------------------------------------\n\nTITLE: Enabling Vector Drawables - Java\nDESCRIPTION: This snippet demonstrates how to enable vector drawables in `android/app/build.gradle` by adding `vectorDrawables.useSupportLibrary = true` to the `defaultConfig` block. This enables the use of vector drawables which can improve app performance and reduce APK size.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nandroid {\n    defaultConfig {\n        vectorDrawables.useSupportLibrary = true\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Component with Thread State - Typescript\nDESCRIPTION: This snippet demonstrates how to configure the `<Channel>` component with a `thread` prop to maintain the correct thread state when navigating between channels and threads. It ensures that messages are sent to the appropriate location and that the image gallery displays the correct images.  The `onThreadSelect` prop is used to update the `thread` state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n<Channel channel={channel} thread={thread}>\n  <MessageList onThreadSelect={setThread} />\n  <MessageInput />\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Import RCTLinkingManager in AppDelegate - Objective-C++\nDESCRIPTION: This snippet imports the RCTLinkingManager in AppDelegate.m or AppDelegate.mm for iOS deep linking support. RCTLinkingManager is responsible for listening to incoming app links and handling them appropriately.  This is a necessary dependency when setting up deep linking for React Native on iOS.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/deeplinking.mdx#_snippet_1\n\nLANGUAGE: objective-c++\nCODE:\n```\n#import <React/RCTLinkingManager.h>\n```\n\n----------------------------------------\n\nTITLE: Changing directory to package and installing dependencies\nDESCRIPTION: This command changes the current directory to the `package` directory within the project and installs the dependencies using yarn.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd package && yarn install\n```\n\n----------------------------------------\n\nTITLE: Setting Theme in OverlayProvider - React Native (TSX)\nDESCRIPTION: This snippet demonstrates how to pass a custom theme to the OverlayProvider in a React Native application. The theme is defined as a JavaScript object and passed to the OverlayProvider via the value prop's style key. This allows for customization of various UI elements, such as the background color of the file container within a chat message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/overlay-provider/props/value.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n<OverlayProvider value={{ style: theme }}>...</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Overriding Native Handlers in Stream Chat\nDESCRIPTION: This code snippet demonstrates how to override native handlers in Stream Chat React Native using the `registerNativeHandlers` function.  Specifically, it shows how to disable haptic feedback by registering a new handler that returns null. This should be done outside the component lifecycle to avoid unnecessary re-registrations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/native-handlers.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerNativeHandlers } from 'stream-chat-react-native';\n\nregisterNativeHandlers({\n  triggerHaptic: () => null,\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadContext with useThreadContext hook - React\nDESCRIPTION: This snippet demonstrates how to consume the ThreadContext using the useThreadContext hook provided by the 'stream-chat-react-native' library. It imports the useThreadContext hook and calls it to access the ThreadContext value. This provides a more concise way to access the thread context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/thread-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadContext } from 'stream-chat-react-native';\n\nconst value = useThreadContext();\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Buttons and Header in Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates how to customize the Poll component within the Stream Chat React Native SDK. It defines a MyPollButtons component to modify the default buttons, replacing the default action of ViewResultsButton with an alert. It also defines MyPollContent to remove the PollHeader. These customized components are then passed as props to the Channel component to override the default poll UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  // highlight-next-line\n  PollContent,\n} from 'stream-chat-react-native';\n\n// highlight-start\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      <ViewResultsButton\n        onPress={({ message, poll }) => Alert.alert(`Message ID: ${message.id} and Poll ID: ${poll.id}`)}\n      />\n      <EndVoteButton />\n    </>\n  );\n};\n\nconst MyPollContent = () => <PollContent PollHeader={() => null} PollButtons={MyPollButtons} />;\n// highlight-end\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        // highlight-next-line\n        <Channel channel={channel} PollContent={MyPollContent}>\n          <ChannelHeader />\n          <MessageList />\n          <MessageInput />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Android Permissions in AndroidManifest.xml\nDESCRIPTION: This XML snippet demonstrates how to configure necessary permissions in the `AndroidManifest.xml` file for Android, including camera, media access (images and videos), audio recording, and external storage. The `maxSdkVersion` attribute is used to limit the `READ_EXTERNAL_STORAGE` permission to older Android versions. These permissions are required for accessing device features within the React Native application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n  <uses-permission android:name=\"android.permission.CAMERA\" />\n  <uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\n  <uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" />\n  <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n  <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n    android:maxSdkVersion=\"32\" />\n  <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Hiding Message Avatars - React Native\nDESCRIPTION: This code snippet shows how to hide message avatars using the MessageAvatar prop.  It is recommended when disabling message grouping to maintain performance, as rendering many avatars may negatively impact the rendering performance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/performance.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel MessageAvatar={() => null} />\n```\n\n----------------------------------------\n\nTITLE: Metro Configuration Setup\nDESCRIPTION: Configures Metro bundler to correctly resolve dependencies when using a local SDK clone. This prevents dependency collision issues that can arise when Metro encounters multiple versions of the same dependency in different node_modules directories. The extractLinkedPackages helper simplifies this process.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst PATH = require('path');\nconst blacklist = require('metro-config/src/defaults/exclusionList');\n\nconst extractLinkedPackages = require('stream-chat-react-native-core/metro-dev-helpers/extract-linked-packages');\n\nconst projectRoot = PATH.resolve(__dirname);\n\nconst { alternateRoots, extraNodeModules, moduleBlacklist } = extractLinkedPackages(projectRoot);\n\nmodule.exports = {\n  resolver: {\n    blacklistRE: blacklist(moduleBlacklist),\n    extraNodeModules,\n    useWatchman: false,\n  },\n  watchFolders: [projectRoot].concat(alternateRoots),\n};\n```\n\n----------------------------------------\n\nTITLE: Example MessageTouchableHandlerPayload\nDESCRIPTION: This code demonstrates the structure of `MessageTouchableHandlerPayload` which is passed to the handlers like `onLongPressMessage` and `onPressMessage` when a user interacts with a message.  It includes the action handlers for various message actions, additional information, and the message object itself.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  actionHandlers: {\n    deleteMessage: [function],\n    editMessage: [function],\n    quotedReply: [function],\n    resendMessage: [function],\n    showMessageOverlay: [function],\n    toggleBanUser: [function],\n    toggleMuteUser: [function],\n    toggleReaction: [function],\n  },\n  additionalInfo: [object],\n  message: [message object],\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CDN Integration for Attachments in React Native\nDESCRIPTION: This code shows how to integrate a custom CDN for storing image and file attachments in Stream Chat React Native. It uses the `doImageUploadRequest` and `doDocUploadRequest` props on the Channel component to override the default Stream CDN behavior.  It's crucial that the file response has a 'file' key.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  doDocUploadRequest={(file, channel) =>\n    chatClient?.sendFile(\n      `${channel._channelURL()}/file`, // replace this with your own cdn url\n      file.uri,\n      'name_for_file',\n    )\n  }\n  doImageUploadRequest={(file, channel) =>\n    chatClient?.sendFile(\n      `https://customcdnurl.com`, // replace this with your own cdn url\n      file.uri,\n      'name_for_file',\n    )\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: Checking actionsEnabled Condition - TSX\nDESCRIPTION: This code snippet illustrates the condition under which the actionsEnabled value in the MessageContext is set to true. It checks if the message type is 'regular' and the message status is 'received'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/message-context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nmessage.type === 'regular' && message.status === 'received';\n```\n\n----------------------------------------\n\nTITLE: Accessing Theme with useTheme Hook - stream-chat-react-native - JSX\nDESCRIPTION: This snippet shows how to access the current theme within a custom component using the `useTheme` hook.  It destructures the `theme` object to access specific style properties, such as the `black` color. This allows custom components to dynamically adapt to the current theme.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/theme.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst {\n  theme: {\n    colors: { black },\n  },\n} = useTheme();\n\n```\n\n----------------------------------------\n\nTITLE: Custom calendar formatting with i18n JSON - JSON\nDESCRIPTION: This JSON snippet shows how to customize date and time formatting for calendar views using the i18n service. It overrides the default calendar format for the `MessageSystem` component, defining specific formats for different relative dates (e.g., lastDay, lastWeek, today).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/date-time-formatting.mdx#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"timestamp/MessageSystem\": \"{{ timestamp | timestampFormatter(calendar: true; calendarFormats: {\\\"lastDay\\\": \\\"[gestern um] LT\\\", \\\"lastWeek\\\": \\\"[letzten] dddd [um] LT\\\", \\\"nextDay\\\": \\\"[morgen um] LT\\\", \\\"nextWeek\\\": \\\"dddd [um] LT\\\", \\\"sameDay\\\": \\\"[heute um] LT\\\", \\\"sameElse\\\": \\\"L\\\"}) }}\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by Members List\nDESCRIPTION: This snippet demonstrates how to create a channel using a list of members. When a list of members is provided, the ID will be auto-generated in the backend. Channels created using list of members cannot have add or remove members.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel(channel_type, {\n    members: ['userOne', 'userTwo']\n    name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Override Channel Capabilities - Read Events - React Native\nDESCRIPTION: This code snippet demonstrates how to disable read receipts (readEventsEnabled in v3) using the `overrideOwnCapabilities` prop on the `Channel` component in Stream Chat React Native v4. Setting `readEvents` to `false` disables the display of read receipts.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    readEvents: false\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Setting Bottom Inset for AttachmentPicker with SafeAreaInsets\nDESCRIPTION: This example demonstrates how to set the `bottomInset` prop of the `OverlayProvider` to account for the bottom safe area inset. This ensures proper placement of the `AttachmentPicker` when there's no bottom tab bar. It uses `useSafeAreaInsets` from `react-native-safe-area-context` to determine the appropriate inset value.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const Nav = () => {\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <NavigationContainer>\n      <OverlayProvider bottomInset={bottom}>\n        <Chat client={client}>\n          <Stack.Navigator>\n            <Stack.Screen component={() => {/** App components */}} name='home' />\n          </Stack.Navigator>\n        </Chat>\n      </OverlayProvider>\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Remove React Native Blur Dependency\nDESCRIPTION: These commands show how to remove the `react-native-blur` dependency which is no longer a peer dependency in v4 and how to install the pods after dependency changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn remove react-native-blur\nnpx pod-install\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Languages - JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of available language codes from a `Streami18n` instance. The `getAvailableLanguages()` method returns an array of strings, each representing a supported language code. This can be useful for dynamically displaying available language options to the user.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst availableLanguages = streami18n.getAvailableLanguages();\n```\n\n----------------------------------------\n\nTITLE: End Vote Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the EndVoteButton component from the stream-chat-react-native library. It imports the EndVoteButton component and renders the button. The default implementation will be used if `onPress` isn't defined.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { EndVoteButton } from 'stream-chat-react-native';\n\nconst button = () => <EndVoteButton />;\n```\n\n----------------------------------------\n\nTITLE: Split Screen Implementation with MessageList in React Native\nDESCRIPTION: This snippet shows how to implement a split-screen layout with video and chat using the MessageList component. It renders a video component (represented by an Image component in this example) above the MessageList.  It uses the stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, View } from 'react-native';\n\nimport { Chat, Channel, MessageList } from 'stream-chat-react-native';\n\n// When you render your chat screen\n<SafeAreaView style={{ flex: 1 }}>\n  <View style={[{ position: 'absolute' }, StyleSheet.absoluteFillObject]}>\n      <Chat client={chatClient} i18nInstance={streami18n}>\n        <Channel\n          channel={channel}\n          keyboardVerticalOffset={headerHeight}\n          thread={thread}\n        >\n          <View style={{ flex: 1 }}>\n            <Image source={{\n              uri: 'https://i.ibb.co/rfx5PCr/Screenshot-2021-02-24-at-14-20-57.png'\n            }} style={{ height: '100%', width: '100%'}} resizeMode={'cover'} />\n          </View>\n          <MessageList<\n            LocalAttachmentType,\n            LocalChannelType,\n            LocalCommandType,\n            LocalEventType,\n            LocalMessageType,\n            LocalResponseType,\n            LocalUserType\n          >\n            onThreadSelect={(thread) => {\n              setThread(thread);\n              navigation.navigate('Thread');\n            }}\n          />\n          <MessageInput />\n        </Channel>\n      </Chat>\n  </View>\n</SafeAreaView>\n```\n\n----------------------------------------\n\nTITLE: Consuming PollContext with useContext - TSX\nDESCRIPTION: Demonstrates how to consume the PollContext using the useContext hook from React.  This allows components within the Channel to access the poll data. Requires importing useContext from 'react' and PollContext from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/poll-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { CreatePollContext } from 'stream-chat-react-native';\n\nconst value = useContext(PollContext);\n```\n\n----------------------------------------\n\nTITLE: Linking the SDK in package.json\nDESCRIPTION: These lines configure the app's `package.json` to use a locally cloned version of the SDK rather than fetching it from npm. It uses the `link:` protocol to point to the local directory.  This is useful for testing local changes to the SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n\"stream-chat-react-native-core\": \"link:../stream-chat-react-native/package\",\n\"stream-chat-react-native\": \"link:../stream-chat-react-native/package/native-package\", // If youre using the native package\n\"stream-chat-expo\": \"link:../stream-chat-react-native/package/expo-package\" // If youre using expo\n```\n\n----------------------------------------\n\nTITLE: Extracting Reaction Data for Avatar - TSX\nDESCRIPTION: This code snippet demonstrates how to extract the necessary data from a reaction object to populate the OverlayReactionsAvatar component. It determines alignment based on the client ID, retrieves the user's image and name, and extracts the reaction type.  This object is then used to configure the avatar.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/overlay_reactions_avatar.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  alignment: clientId && clientId === reaction.user?.id ? 'right' : 'left',\n  image: reaction?.user?.image,\n  name: reaction?.user?.name || reaction.user_id || '',\n  type: reaction.type,\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing PreviewAvatar using React Context - v3 - TSX\nDESCRIPTION: This code snippet shows how to customize the PreviewAvatar in Stream Chat React Native v3 using React Context. The CustomAvatar component accesses the refreshing and reloadList functions from the useChannelsContext hook, along with the channel prop. The CustomAvatar component is then passed directly as the PreviewAvatar prop to the ChannelList component, simplifying customization and eliminating prop drilling.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/upgrade_helper.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n  import { Chat, Channel, ChannelList, useChannelsContext } from 'stream-chat-react-native';\n\n  const CustomAvatar = props => {\n    const { refreshing, reloadList } = useChannelsContext();\n    const { channel } = props;\n\n    return (/* custom component */)\n  };\n\n  // In your rendering logic\n  <Chat client={client}>\n    <ChannelList PreviewAvatar={CustomAvatar} />\n  </Chat>\n```\n\n----------------------------------------\n\nTITLE: Channel Component Configuration in TypeScript\nDESCRIPTION: This TypeScript code demonstrates how to configure the `Channel` component from `stream-chat-react-native` with custom props for live location sharing. It imports the `InputButtons` and `Card` components defined earlier and sets them as the `InputButtons` and `Card` props, respectively. It also includes the `onPressMessage` and `isAttachmentEqual` functions for handling message taps and attachment equality checks. The keyboardVerticalOffset is set to headerHeight to avoid the input field being hidden by the keyboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel } from 'stream-chat-react-native';\nimport InputButtons from './InputButtons';\nimport Card from './Card';\n\n<Channel\n  channel={channel}\n  InputButtons={InputButtons}\n  Card={Card}\n  keyboardVerticalOffset={headerHeight}\n  onPressMessage={onPressMessage}\n  isAttachmentEqual={isAttachmentEqual}\n>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Suggest Option Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the SuggestOptionButton component from the stream-chat-react-native library. It imports the SuggestOptionButton component and defines a button that, when pressed, logs the poll ID and message ID to the console. The onPress prop receives the message and poll objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SuggestOptionButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <SuggestOptionButton onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)} />\n);\n```\n\n----------------------------------------\n\nTITLE: Custom Attachment Property Handling - TSX\nDESCRIPTION: This TypeScript/JSX code demonstrates how to handle custom properties on attachments in Stream Chat React Native. It provides an `isAttachmentEqualHandler` function to check for changes in custom properties, ensuring UI updates when these properties are modified.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel } from 'stream-chat-react-native';\n\nconst isAttachmentEqualHandler = (prevAttachment, nextAttachment) => {\n  const attachmentEqual = prevAttachment.customField === nextAttachment.customField;\n  if (!attachmentEqual) return false;\n  return true;\n};\n\n<Channel\n  channel={channel}\n  isAttachmentEqual={isAttachmentEqualHandler}\n  Card={attachment => {\n    return (\n      <View>\n        <Text>{attachment.customField}</Text>\n      </View>\n    );\n  }}\n>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Adding Intent Filter to AndroidManifest.xml - XML\nDESCRIPTION: This XML snippet demonstrates how to add an intent filter to the launcher activity in the `AndroidManifest.xml` file. This intent filter allows the app to open when the user presses the notification. The action name should match the `click_action` specified in the notification template.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v2.mdx#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<activity\n  android:name=\".MainActivity\"\n  android:label=\"@string/app_name\"\n  android:configChanges=\"keyboard|keyboardHidden|orientation|screenLayout|screenSize|smallestScreenSize|uiMode\"\n  android:launchMode=\"singleTask\"\n  android:windowSoftInputMode=\"adjustResize\"\n  android:exported=\"true\">\n  <intent-filter>\n      <action android:name=\"android.intent.action.MAIN\" />\n      <category android:name=\"android.intent.category.LAUNCHER\" />\n  </intent-filter>\n  <intent-filter>\n      <action android:name=\"OPEN_ACTIVITY_1\" />\n      <category android:name=\"android.intent.category.DEFAULT\" />\n  </intent-filter>\n</activity>\n```\n\n----------------------------------------\n\nTITLE: Removing NetInfo handler from registerNativeHandlers - TSX\nDESCRIPTION: This code snippet shows how to remove the `NetInfo` handler from `registerNativeHandlers` when upgrading Stream Chat React Native.  The `NetInfo` package is no longer used in native handlers, so it should be removed from the handlers object. Requires importing `registerNativeHandlers` from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerNativeHandlers } from 'stream-chat-react-native';\n\nregisterNativeHandlers({\n  // removed-line\n  NetInfo: NetInfo,\n});\n```\n\n----------------------------------------\n\nTITLE: MessageList General Usage in Stream Chat React Native\nDESCRIPTION: This example demonstrates the basic integration of the MessageList component within a Chat, Channel, and OverlayProvider context in a React Native application using Stream Chat. It shows how to render the MessageList component within a Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat, Channel, OverlayProvider, MessageList } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          // highlight-next-line\n          <MessageList />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Autocomplete Suggestion Header - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the header component of the autocomplete suggestion list in a Stream Chat React Native application. It uses the AutoCompleteSuggestionHeader prop of the Channel component to conditionally render different header components based on the trigger type (command, emoji).  The default AutoCompleteSuggestionHeader is returned if no changes are desired for a specific trigger type. Dependencies include 'stream-chat-react-native' and 'react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/auto_complete_suggestion_list_customizations.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { AutoCompleteSuggestionHeader } from 'stream-chat-react-native';\nimport { Text } from 'react-native';\n\n<Channel\n  AutoCompleteSuggestionHeader={({ queryText, triggerType }) => {\n    if (triggerType === 'command') {\n      return <Text>Command Header Component</Text>;\n    } else if (triggerType === 'emoji') {\n      return <Text>Emoji Header Component</Text>;\n    } else {\n      return <AutoCompleteSuggestionHeader queryText={queryText} triggerType={triggerType} />;\n    }\n  }}\n>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Attachment Data Structure in Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates the structure of an attachment object within an array.  The `file` property contains metadata about the file including the `name`. The `id` is a unique identifier for the attachment. The `state` indicates whether the file is currently being uploaded (`uploading`) or has finished uploading (`finished`). The `url` is the location where the file can be accessed; during upload, this will be a local URI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/message-input-context/image_uploads.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n[\n  {\n    file: { name: 'fallback-name.jpeg' },\n    id: '2j3n4k23nj4k23n4k3',\n    state: 'finished', // or 'uploading'\n    url: 'https://cdn.getstream.io/kajsnkj2n3j4', // If the state is `uploading`, then this will be a local uri of image.\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Handling onPressMessage Event in Channel Component - TSX\nDESCRIPTION: This code snippet demonstrates how to override the default message press handler in the Stream Chat React Native Channel component. It shows how to access the additionalInfo prop to extract user details from text mentions, URLs from cards and text links, and attachment details from file attachments. The defaultHandler function is called if none of the specific emitter conditions are met.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel/props/on_press_message.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n    <Channel\n      onPressMessage={({ additionalInfo, defaultHandler, emitter }) => {\n\n          if (emitter === 'textMention') {\n            console.log(additionalInfo?.user);\n            return;\n          }\n\n          if (emitter === 'card' || emitter === 'textLink') {\n            console.log(additionalInfo?.url);\n            return;\n          }\n\n          if (emitter === 'fileAttachment') {\n            console.log(additionalInfo?.attachment);\n            return;\n          }\n\n          defaultHandler?.();\n      }}\n    >\n```\n\n----------------------------------------\n\nTITLE: ChannelScreen Component with useFocusEffect - TSX\nDESCRIPTION: This component renders the main Channel screen, using the useFocusEffect hook to manage thread selection. When the screen gains focus, the selectedThread state is reset to undefined. The onThreadSelect handler updates the selectedThread state and navigates to the ThreadScreen, passing the selected thread as a parameter. Requires react navigation installed and navigation prop to be available.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/navigation.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ChannelScreen = () => {\n  const { channel } = useAppChannel();\n  const [selectedThread, setSelectedThread] = useState<MessageType>();\n\n  useFocusEffect(() => {\n    setSelectedThread(undefined);\n  });\n\n  return (\n    <Channel channel={channel} thread={selectedThread}>\n      <MessageList\n        onThreadSelect={thread => {\n          setSelectedThread(thread);\n          navigation.navigate('ThreadScreen', { thread });\n        }}\n      />\n      <MessageInput />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering VideoThumbnail Component\nDESCRIPTION: This snippet renders the VideoThumbnail component. This component displays a thumbnail of a video contained in a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\n<VideoThumbnail />\n```\n\n----------------------------------------\n\nTITLE: Consuming OverlayContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the OverlayContext using the useContext hook in a React component.  It imports the necessary modules from stream-chat-react-native and uses useContext to access the setOverlay function from the OverlayContext. This allows the component to update the active overlay.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/overlay_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { OverlayContext } from 'stream-chat-react-native';\n\nconst { setOverlay } = useContext(OverlayContext);\n```\n\n----------------------------------------\n\nTITLE: Overriding Update Message Request - React Native\nDESCRIPTION: This snippet illustrates how to override the update message request using the doUpdateMessageRequest prop. It demonstrates modifying the message object before updating it. The function receives the channelId and messageObject as parameters and returns a Promise equivalent to client.updateMessage.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/channel.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst doUpdateMessageRequest = (channelId, messageObject) => {\n  const numberOfUpdates = (messageObject.numberOfUpdates ?? 0) + 1;\n  const messageToSend = { ...messageObject, numberOfUpdates };\n  return client.updateMessage(messageToSend);\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel\nDESCRIPTION: This snippet demonstrates how to create a channel using `channel.create()`. It creates the channel on the server.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Members List - Typescript\nDESCRIPTION: This snippet shows how to create a channel instance using a list of members. The `client.channel` method is called with the channel type ('messaging') and an object containing the members list (['jlahey', 'rlafleur']) and optional channel data (name). The create() call must be made separately to persist the channel on the server.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel('messaging', {\n  members: ['jlahey', 'rlafleur'],\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Full Width Message Bubble - JSX\nDESCRIPTION: Shows how to implement full-width message bubbles by overriding styles in the theme. Uses the `vw` function from the library and customizes styles for `card`, `content`, and `gallery` elements to achieve the desired full-width effect.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { vw } from 'stream-chat-react-native';\n\nconst maxWidth = vw(100) - 72;\nconst themeStyle = {\n  messageSimple: {\n    card: {\n      container: {\n        width: maxWidth,\n      },\n    },\n    content: {\n      container: {\n        width: maxWidth,\n      },\n      textContainer: {\n        width: maxWidth,\n        maxWidth: maxWidth,\n      },\n      wrapper: { width: maxWidth },\n    },\n    gallery: {\n      // -2 because of the 2px border\n      width: maxWidth - 2,\n    },\n    giphy: {\n      container: {\n        width: maxWidth,\n      },\n    },\n  },\n  // Override reply so the reuse of message style does not overflow text in the message input\n  reply: {\n    textContainer: {\n      maxWidth: undefined,\n      width: undefined,\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Share Location Icon Component\nDESCRIPTION: This JSX component, `ShareLocationIcon`, renders an SVG icon used for the \"Share Location\" button.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_13\n\nLANGUAGE: jsx\nCODE:\n```\nconst ShareLocationIcon = props => (\n  <Svg width={24} height={24} viewBox='0 0 24 24' fill='none' {...props}>\n    <Path\n      d='M12 12c-1.654 0-3-1.345-3-3 0-1.654 1.346-3 3-3s3 1.346 3 3c0 1.655-1.346 3-3 3zm0-4a1.001 1.001 0 101 1c0-.551-.449-1-1-1z'\n      fill='#000'\n    />\n    <Path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M12 22s7-5.455 7-12.727C19 5.636 16.667 2 12 2S5 5.636 5 9.273C5 16.545 12 22 12 22zm1.915-4.857C15.541 15.032 17 12.277 17 9.273c0-1.412-.456-2.75-1.27-3.7C14.953 4.664 13.763 4 12 4s-2.953.664-3.73 1.573C7.456 6.523 7 7.86 7 9.273c0 3.004 1.459 5.759 3.085 7.87.678.88 1.358 1.614 1.915 2.166a21.689 21.689 0 001.915-2.166zm-.683 3.281s0 .001 0 0z'\n      fill='#000'\n    />\n  </Svg>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Defining MessageAction Object in stream-chat-react-native TSX\nDESCRIPTION: This code snippet demonstrates the structure of a MessageAction object in a TypeScript React Native (TSX) environment. The action property is a callback function to be executed when the action button is pressed.  The icon property renders an element, and the title provides a string for the action button's label. The titleStyle allows for customization of the title's text component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/object-types/message_action.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{  action: () => { /** Some action here */ },  icon: <PinIcon />,  title: 'Pin Message',  titleStyle: { color: 'red' }}\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageInputContext with useContext - React Native\nDESCRIPTION: This code snippet demonstrates how to consume the MessageInputContext using the useContext hook in a React Native component. The sendMessage and toggleAttachmentPicker functions are extracted from the context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/message_input_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { MessageInputContext } from 'stream-chat-react-native';\n\nconst { sendMessage, toggleAttachmentPicker } = useContext(MessageInputContext);\n```\n\n----------------------------------------\n\nTITLE: Show All Comments Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the ShowAllCommentsButton component from the stream-chat-react-native library. It imports the ShowAllCommentsButton component and defines a button that, when pressed, logs the poll ID and message ID to the console. The onPress prop receives the message and poll objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShowAllCommentsButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <ShowAllCommentsButton\n    onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Targeted Message ID\nDESCRIPTION: This prop holds the message ID of the message that is to be highlighted in the channel. By default, the value is undefined and is set to undefined when the highlight time is up.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/messages_context.mdx#_snippet_5\n\nLANGUAGE: text\nCODE:\n```\nstring\n```\n\n----------------------------------------\n\nTITLE: Watching a Channel - TypeScript\nDESCRIPTION: This snippet demonstrates how to 'watch' a channel, subscribing the client to channel updates and creating the channel if it doesn't exist. It calls the `watch` method on the channel instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nawait channel.watch();\n```\n\n----------------------------------------\n\nTITLE: Image Attachment Data Structure in Stream Chat React Native (TSX)\nDESCRIPTION: This code snippet demonstrates the structure of an array of image attachments associated with a message being composed within the MessageInput component. Each object in the array represents a single image attachment, containing information about the file, a unique identifier, the upload state ('finished' or 'uploading'), and the URL (either a remote URL after upload or a local URI during upload).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/message-input-context/image_uploads.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n[\n  {\n    file: { name: 'fallback-name.jpeg' },\n    id: '2j3n4k23nj4k23n4k3',\n    state: 'finished', // or 'uploading'\n    url: 'https://cdn.getstream.io/kajsnkj2n3j4', // If the state is `uploading`, then this will be a local uri of image.\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Implementing Double-Tap Reaction - TSX\nDESCRIPTION: This code demonstrates how to implement an Instagram-style double-tap reaction using `react-native-gesture-handler`.  It defines a `CustomMessage` component that wraps the default `MessageSimple` component with `TapGestureHandler` components. A double tap on the message triggers the `handleToggleReaction` function with the 'love' reaction type.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomMessage = (props: MessageSimpleProps) => {\n  const doubleTapRef = useRef(null);\n  const { message, handleToggleReaction } = useMessageContext();\n\n  const _onDoubleTap = useAnimatedGestureHandler<TapGestureHandlerGestureEvent>(\n    {\n      onActive: () => {\n        console.log('double tapped')\n        runOnJS(handleToggleReaction)('love')\n      },\n    },\n    [message],\n  );\n\n  return (\n    <TapGestureHandler\n      waitFor={doubleTapRef}>\n      <Animated.View>\n        <TapGestureHandler\n          ref={doubleTapRef}\n          numberOfTaps={2}\n          onHandlerStateChange={_onDoubleTap}>\n          <Animated.View>\n            <MessageSimple {...props} />\n          </Animated.View>\n        </TapGestureHandler>\n      </Animated.View>\n    </TapGestureHandler>\n  );\n}\n\n<Channel\n  channel={channel}\n  MessageSimple={CustomMessage}\n>\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with OverlayProvider and Chat Component (App-Level)\nDESCRIPTION: This code snippet demonstrates how to wrap the entire application with the `OverlayProvider` and `Chat` components from `stream-chat-react-native`. This approach ensures that overlay elements like the `AttachmentPicker` are rendered above all other components. It uses React Navigation's `NavigationContainer` and `createStackNavigator` for routing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const App = () =>\n  <NavigationContainer>\n    <OverlayProvider>\n      <Chat client={client}>\n        <Stack.Navigator>\n          <Stack.Screen component={() => {/** App components */}} name='home' />\n        </Stack.Navigator>\n      </Chat>\n    </OverlayProvider>\n  </NavigationContainer>;\n```\n\n----------------------------------------\n\nTITLE: Overriding MessageInput props in Channel Component - TSX\nDESCRIPTION: This code shows how to override the MessageInput component's props within the Channel component. The Input prop is set to render null initially, but the MessageInput component within it is overridden to display a red View. This demonstrates the precedence of props over context values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-input.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel channel={channel} Input={() => null} keyboardVerticalOffset={headerHeight} Message={CustomMessageComponent}>\n  <View style={{ flex: 1 }}>\n    <MessageList />\n    <MessageInput Input={() => <View style={{ height: 40, backgroundColor: 'red' }} />} />\n  </View>\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadContext using useContext - TSX\nDESCRIPTION: This code snippet shows how to consume the ThreadContext using the useContext hook in a React component. The ThreadContext provides access to thread-related data and functions. It requires importing useContext from 'react' and ThreadContext from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/thread-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThreadContext } from 'stream-chat-react-native';\n\nconst value = useContext(ThreadContext);\n```\n\n----------------------------------------\n\nTITLE: Memoizing a Custom Component with Context - React Native\nDESCRIPTION: This code demonstrates how to optimize a custom component that uses context by memoizing it and using a custom areEqual check. This prevents unnecessary re-renders when context values change, improving performance.  It involves splitting the component into one that consumes context and another that is memoized.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/custom_components.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst MySenderComponentWithContext = ({ latestMessageSender }) => {\n  console.log('Rendered');\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\nconst MemoizedMySenderComponent = React.memo(\n  MySenderComponentWithContext,\n  (prev, next) => prev.latestMessageSender === next.latestMessageSender,\n);\n\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n\n  return <MemoizedMySenderComponent latestMessageSender={latestMessageSender} />;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client with new StreamChat()\nDESCRIPTION: This snippet demonstrates how to instantiate the Stream Chat client using the `new StreamChat()` constructor.  While still supported, this method can lead to multiple WebSocket connections if not managed carefully. Requires an API key.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new StreamChat('api_key');\n```\n\n----------------------------------------\n\nTITLE: Consuming PaginatedMessageListContext with useContext - TSX\nDESCRIPTION: Demonstrates how to consume the PaginatedMessageListContext using the useContext hook in a React component.  It imports the necessary modules from stream-chat-react-native and React, and then retrieves the loadingMore, loadMoreRecent, and messages values from the context. The component must be a child of the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/paginated_message_list_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { PaginatedMessageListContext } from 'stream-chat-react-native';\n\nconst { loadingMore, loadMoreRecent, messages } = useContext(PaginatedMessageListContext);\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User - Typescript\nDESCRIPTION: This code snippet demonstrates how to disconnect a user from the Stream Chat service. It uses the `disconnectUser` method, which removes the user's connection from the client.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Adding Google Maps API Key (Android)\nDESCRIPTION: This XML snippet adds the Google Maps API key to the Android manifest file. This key is required to use the Google Maps SDK in the application. Replace \"Your Google maps API Key Here\" with your actual API key.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_2\n\nLANGUAGE: xml\nCODE:\n```\n<application>\n   <!-- You will only need to add this meta-data tag, but make sure it's a child of application -->\n   <meta-data\n     android:name=\"com.google.android.geo.API_KEY\"\n     android:value=\"Your Google maps API Key Here\"/>\n</application>\n```\n\n----------------------------------------\n\nTITLE: Configuring Location Permissions (Android)\nDESCRIPTION: This XML snippet adds the required permissions for accessing the device's location in the Android application.  `ACCESS_FINE_LOCATION` provides access to precise location using GPS, while `ACCESS_COARSE_LOCATION` provides access to location using network services.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n<uses-permission android:name=\"android.permission.ACCESS_COARSE_LOCATION\" />\n```\n\n----------------------------------------\n\nTITLE: Channel Background Component with MMKV - TSX\nDESCRIPTION: This snippet creates a ChannelBackgroundView component that retrieves the channel's background image URI from react-native-mmkv and renders it using the ImageBackground component.  It uses the channelId as the key for storing and retrieving the background URI. The component uses a default background URI if none is found in storage. It depends on react-native-mmkv and react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-background.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport type { ViewProps } from 'react-native';\nimport { useMMKVObject } from 'react-native-mmkv';\n\ntype ChannelPreferences = {\n  imageUri: string;\n};\n\nconst DEFAULT_BACKGROUND_URI = 'https://i.redd.it/3jfjc53fsyb61.jpg';\n\nconst ChannelBackgroundView = ({\n  channelId,\n  ...props\n}: {\n  channelId: string;\n} & ViewProps) => {\n  const [channelPreferences] = useMMKVObject<ChannelPreferences>(channelId);\n  const uri = channelPreferences?.imageUri || DEFAULT_BACKGROUND_URI;\n\n  return <ImageBackground {...props} source={{ uri }} />;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Checking Owner Role - TSX\nDESCRIPTION: This code snippet illustrates how to verify if the current user has 'owner' permissions for the current channel.  It directly checks the channel's membership role for 'owner'. It assumes the existence of a channel object with state and membership properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channel-context.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst isOwner = channel?.state.membership.role === 'owner';\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel - TypeScript\nDESCRIPTION: This snippet shows how to create a channel on the server. It calls the `create` method on the channel instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Customizing ReactionList Background - React Native\nDESCRIPTION: This snippet demonstrates how to customize the background color of the ReactionList component in Stream Chat React Native by overriding the default props. It imports the Channel, ReactionList and ReactionListProps components and renders a custom ReactionList component inside the Channel component, filling with '#00DDD' and stroke with '#fffff'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/reaction-list-bottom.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, ReactionList, ReactionListProps } from 'stream-chat-react-native';\n\nconst ReactionListWithCustomBackground = (props: ReactionListProps) => <ReactionList {...props} fill={'#00DDD'} stroke={'#fffff'} />\n\n<Channel ReactionList={ReactionListWithCustomBackground} />\n```\n\n----------------------------------------\n\nTITLE: Checking Admin Role - React TSX\nDESCRIPTION: Shows how to determine if the current user has an admin role, either at the application or channel level. It checks the client's user role and the channel's membership role for 'admin'. This allows components to adapt their behavior based on the user's administrative privileges.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channel_context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst isAdmin = client?.user?.role === 'admin' || channel?.state.membership.role === 'admin';\n```\n\n----------------------------------------\n\nTITLE: Importing Gesture Handler - React Native\nDESCRIPTION: This TypeScript snippet shows how to import `react-native-gesture-handler` at the top of the app entry file. This import is crucial for the proper functioning of touchables and gestures within the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Install Expo Action Sheet Package - SH\nDESCRIPTION: This command installs the `@expo/react-native-action-sheet` package, which is used for implementing the action sheet in the example. This package is a dependency for the subsequent code snippet.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @expo/react-native-action-sheet\n```\n\n----------------------------------------\n\nTITLE: Intercepting a Message Action with React\nDESCRIPTION: This code snippet demonstrates how to intercept a message action in Stream Chat React Native for purposes such as analytics tracking. It shows how to use the `handleCopy` prop of the `Channel` component to execute a custom function (`trackCopyAction`) before the default copy message action is executed. This allows developers to track when a user copies a message without modifying the core functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_actions_customization.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel handleCopy={() => trackCopyAction()} />\n```\n\n----------------------------------------\n\nTITLE: Setting Language Using Device Locale - Typescript\nDESCRIPTION: This snippet demonstrates how to use the `react-native-localize` package to determine the user's preferred locale and set the language for Stream Chat components accordingly. It depends on the `react-native-localize` library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport * as RNLocalize from 'react-native-localize';\nconst streami18n = new Streami18n();\n\nconst userPreferredLocales = RNLocalize.getLocales();\n\nstreami18n.setLanguage(userPreferredLocales[0].languageCode);\n```\n\n----------------------------------------\n\nTITLE: Defining Local Channel Type Example (TSX)\nDESCRIPTION: This snippet shows how to define a LocalChannelType as a Record<string, unknown>. It provides a generic type for channel data, allowing it to hold any custom fields.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalChannelType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Disabling Autocomplete Triggers in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to disable autocomplete features (mentions and commands) within the Channel component by overriding the autoCompleteTriggerSettings prop.  It removes all trigger settings by returning an empty object, effectively disabling autocomplete. It also disables the commands button via the `hasCommands` prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  autoCompleteTriggerSettings={() => ({})}\n  channel={channel}\n  hasCommands={false}\n  keyboardVerticalOffset={headerHeight}\n  thread={thread}\n>\n  {/* Underlying components inside */}\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Full Width Message Bubble - JSX\nDESCRIPTION: Illustrates how to create a full-width message bubble by overriding the default styles in the theme object. It uses the `vw` function to calculate the maximum width based on the viewport width. It includes overrides to the card, content, gallery, and giphy components within messageSimple, as well as the reply text container\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nimport { vw } from 'stream-chat-react-native';\n\nconst maxWidth = vw(100) - 72;\nconst themeStyle = {\n  messageSimple: {\n    card: {\n      container: {\n        width: maxWidth,\n      },\n    },\n    content: {\n      container: {\n        width: maxWidth,\n      },\n      textContainer: {\n        width: maxWidth,\n        maxWidth: maxWidth,\n      },\n      wrapper: { width: maxWidth },\n    },\n    gallery: {\n      // -2 because of the 2px border\n      width: maxWidth - 2,\n    },\n    giphy: {\n      container: {\n        width: maxWidth,\n      },\n    },\n  },\n  // Override reply so the reuse of message style does not overflow text in the message input\n  reply: {\n    textContainer: {\n      maxWidth: undefined,\n      width: undefined,\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: ChannelScreen Component with Context - React Native\nDESCRIPTION: This component represents the main Channel screen. It uses the `useAppChannel` and `useAppThread` hooks to access the channel and thread context, respectively. The `onThreadSelect` function updates the thread context when a thread is selected, ensuring the correct ImageGallery state is maintained when navigating to the Thread screen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ChannelScreen = () => {\n  const { channel } = useAppChannel();\n  const { setThread, thread } = useAppThread();\n\n  return (\n    <Channel channel={channel} thread={thread}>\n      <MessageList\n        onThreadSelect={selectedThread => {\n          setThread(selectedThread);\n          navigation.navigate('ThreadScreen');\n        }}\n      />\n      <MessageInput />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering Show All Options Button in React Native\nDESCRIPTION: This code snippet shows how to render a ShowAllOptionsButton component from the stream-chat-react-native library.  The onPress handler receives message and poll objects, logging their IDs to the console when pressed. Requires stream-chat-react-native package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { ShowAllOptionsButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <ShowAllOptionsButton\n    onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Install react-native-flipper with NPM\nDESCRIPTION: This command installs the `react-native-flipper` package as a development dependency. This package is necessary for interacting with the Flipper Plugin.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/debug-using-flipper-plugin.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-native-flipper\n```\n\n----------------------------------------\n\nTITLE: Using Moment.js for DateTime Formatting - Typescript\nDESCRIPTION: This snippet demonstrates how to use Moment.js for DateTime formatting in Stream Chat React Native by providing a Moment object to the Streami18n constructor.  It requires installing moment, importing desired locales and requires stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'moment/locale/nl';\nimport 'moment/locale/it';\n// or if you want to include all locales\nimport 'moment/min/locales';\n\nimport Moment from moment;\n\nconst i18n = new Streami18n({\n  language: 'nl',\n  DateTimeParser: Moment,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Attachment Type with Generics (TypeScript)\nDESCRIPTION: This TypeScript code extends the default Stream Chat attachment type to include latitude, longitude, and ended_at properties. Generics are used to ensure type safety when working with the Stream Chat client.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { DefaultStreamChatGenerics } from 'stream-chat-react-native';\nimport { StreamChat } from 'stream-chat';\n\ntype LocalAttachmentType = DefaultStreamChatGenerics['attachmentType'] & {\n  latitude?: number;\n  longitude?: number;\n  ended_at?: string;\n};\n\nexport type StreamChatGenerics = DefaultStreamChatGenerics & {\n  attachmentType: LocalAttachmentType;\n};\n\n// and use the generics when creating the client\nconst client = StreamChat.getInstance<StreamChatGenerics>('<ADD_YOUR_STREAM_API_KEY_HERE>');\n```\n\n----------------------------------------\n\nTITLE: Setting bottomInset in OverlayProvider - TSX\nDESCRIPTION: This code demonstrates how to set the `bottomInset` prop in the `OverlayProvider` component.  This adjustment accounts for the presence of a Safe Area or Tab Bar below the `MessageInput`, ensuring the image picker opens to the correct height. The `bottomInset` prop accepts a number value representing the offset.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider bottomInset={/** number */}>{/* Inner component */}</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Filtering File Attachments with TypeScript\nDESCRIPTION: This code snippet filters an array of attachments to extract only those with the type 'file'. It assumes that 'message.attachments' is an array of objects, where each object has a 'type' property. The result is a new array named 'files' containing only the file attachments. It's commonly used in chat applications to display attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/message-context/files.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst files = message.attachments.filter(a => a.type === 'file');\n```\n\n----------------------------------------\n\nTITLE: Logout Implementation with Database Reset and User Disconnection in React Native\nDESCRIPTION: This code snippet demonstrates a proper logout implementation within a React Native application that utilizes Stream Chat SDK. It includes resetting the local database (if offline storage is enabled), disconnecting the current user from the chat client, and setting the chat client to null. This ensures a clean state and prevents potential issues when logging in with a different user.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/going-live-checklist.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { QuickSqliteClient } from 'stream-chat-react-native';\n\nconst logout = async () => {\n  // Reset and clear the local database if offline storage was enabled.\n  QuickSqliteClient.resetDB();\n\n  // Disconnect the connected user for the chat client.\n  chatClient?.disconnectUser();\n\n  // Set the current chat client to null.\n  setChatClient(null);\n};\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies in ExpoMessaging directory\nDESCRIPTION: Changes the directory to the `examples/ExpoMessaging` and installs dependencies.  This step ensures that the example app's dependencies are installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/ExpoMessaging/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../examples/ExpoMessaging && yarn install\n```\n\n----------------------------------------\n\nTITLE: Image type definition - TSX\nDESCRIPTION: This code defines the structure of the 'image' object within the ImageGalleryContext. It includes optional properties for the messageId (string) and url (string) of the currently selected image in the image viewer/gallery.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/image_gallery_context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  messageId?: string;\n  url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Reverting Commits with Git Revert\nDESCRIPTION: This snippet describes how to revert specific commits using `git revert`. It highlights the importance of reverting breaking change commits before reverting the merge commit itself.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/RELEASE_PROCESS.md#_snippet_0\n\nLANGUAGE: git\nCODE:\n```\ngit revert MERGE_PR_COMMIT_HASH\n```\n\n----------------------------------------\n\nTITLE: Customizing OverlayProvider Style with Theme in Typescript\nDESCRIPTION: This code snippet shows how to customize the style of a specific component (file container within a message) by providing a `theme` object to the `OverlayProvider`.  It demonstrates how to override the default background color of the file container to 'red'. The `OverlayProvider` component then applies this customized theme to its children.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/overlay-provider/props/value.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst theme = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n<OverlayProvider value={{ style: theme }}>...</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Creating Channel on Server - Typescript\nDESCRIPTION: This code snippet demonstrates how to create the channel on the Stream Chat server after initializing the channel locally. The `create` method is called on the channel instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Enabling Quoted Reply State for Message\nDESCRIPTION: This function enables the quoted-reply state for a given message. This feature allows users to reply to a specific message within a channel, quoting the original message for context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/messages_context.mdx#_snippet_3\n\nLANGUAGE: text\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Installing Peer Dependencies (npm)\nDESCRIPTION: This command installs a series of peer dependencies required by Stream Chat React Native, using npm. These dependencies provide features like camera roll access, network information, document picking, file system access, gesture handling, haptic feedback, image manipulation, reanimated, safe area context, sharing, and SVG support.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @react-native-community/cameraroll @react-native-community/netinfo @stream-io/flat-list-mvcp react-native-document-picker react-native-fs react-native-gesture-handler react-native-haptic-feedback react-native-haptic-feedback react-native-image-crop-picker react-native-image-resizer react-native-reanimated react-native-safe-area-context react-native-share react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Yarn (root)\nDESCRIPTION: This command installs the necessary dependencies defined in the root directory's package.json file using Yarn. These dependencies are required for the overall project setup.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Starting the Application with Yarn\nDESCRIPTION: This command starts the development server, enabling you to run the application in development mode. It's a common starting point for working on React Native projects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Removing react-native-quick-sqlite dependency - Bash\nDESCRIPTION: This command removes the `react-native-quick-sqlite` package, as it has been replaced with `op-sqlite` in version 6.x of the Stream Chat React Native SDK for performance enhancements and architectural improvements.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove react-native-quick-sqlite\n```\n\n----------------------------------------\n\nTITLE: Implementing Thread Support\nDESCRIPTION: This snippet adds support for threads by including the Thread component and managing a thread state. The onThreadSelect prop on the MessageList is used to update the thread state when a thread is selected. The Channel component is updated to include the thread and threadList props.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, MessageType, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [thread, setThread] = useState<MessageType | null>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0} thread={thread} threadList={!!thread}>\n            {thread ? (\n              <Thread />\n            ) : (\n              <>\n                <MessageList onThreadSelect={setThread} />\n                <MessageInput />\n              </>\n            )}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Forcing Message Alignment to the Left\nDESCRIPTION: This snippet demonstrates how to force all messages in a channel to align to the left side, regardless of whether they are sent or received. This is achieved by setting the `forceAlignMessages` prop to 'left' on the `Channel` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  forceAlignMessages='left'\n  keyboardVerticalOffset={headerHeight}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Consuming PollContext using useContext - Typescript\nDESCRIPTION: This snippet demonstrates how to consume the PollContext using the useContext hook from React. It imports useContext from 'react' and PollContext from 'stream-chat-react-native'. The PollContext provides access to poll related data and functionalities within the Channel component. This requires react and stream-chat-react-native libraries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/poll-context.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from 'react';\nimport { CreatePollContext } from 'stream-chat-react-native';\n\nconst value = useContext(PollContext);\n```\n\n----------------------------------------\n\nTITLE: Override Channel Capabilities - Uploads - React Native\nDESCRIPTION: This code snippet illustrates how to disable file uploads (uploadsEnabled in v3) by using the `overrideOwnCapabilities` prop on the `Channel` component in Stream Chat React Native v4. Setting `uploadFile` to `false` disables the `AttachButton` in `MessageInput`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    uploadFile: false\n  }}\n>\n```\n\n----------------------------------------\n\nTITLE: Defining StreamChat Generics Type (TSX)\nDESCRIPTION: This code snippet defines the `StreamChatGenerics` type, which is used to specify the types for attachments, channels, commands, events, messages, reactions, and users.  It allows you to define custom types for each of these entities. Each type alias (e.g., `LocalAttachmentType`) needs to be defined separately according to your application's needs.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype StreamChatGenerics = {\n  attachmentType: LocalAttachmentType;\n  channelType: LocalChannelType;\n  commandType: LocalCommandType;\n  eventType: LocalEventType;\n  messageType: LocalMessageType;\n  reactionType: LocalReactionType;\n  userType: LocalUserType;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageStatus Component\nDESCRIPTION: This snippet renders the MessageStatus component, which is likely responsible for displaying the delivery status of a message (e.g., sent, delivered, read). The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageStatus />\n```\n\n----------------------------------------\n\nTITLE: Running SampleApp on iOS Simulator\nDESCRIPTION: Navigates back to the SampleApp directory and executes the React Native command to run the application on the iOS simulator. This command compiles and deploys the app for testing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nnpx react-native run-ios\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Photo Permissions in app.json (Expo)\nDESCRIPTION: This JSON snippet configures the `app.json` to add permissions to the `Info.plist` on iOS using config plugins in an Expo project. It uses `expo-image-picker` plugin to request photo permissions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_27\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"photosPermission\": \"$(PRODUCT_NAME) would like to use your device gallery to attach image in a message.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Uninstall Media Library - Expo\nDESCRIPTION: This command uninstalls the expo-media-library package using yarn.  This is necessary if the media library is already installed and needs to be replaced with the native image picker.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/native-image-picker.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove expo-media-library\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Action - React Native\nDESCRIPTION: This code snippet demonstrates how to disable a specific message action in Stream Chat React Native by returning null from the custom MessageActionListItem component for a particular action type (pinMessage). It requires react-native and stream-chat-react-native dependencies. When actionType is pinMessage, the component returns null, effectively disabling the action. For all other action types, the default MessageActionListItem is rendered.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel, MessageActionListItem, useMessageActionAnimation } from 'stream-chat-react-native';\n\nconst CustomMessageActionListItem = ({ action, actionType, ...rest }) => {\n  if (actionType === 'pinMessage') {\n    return null;\n  } else {\n    return <MessageActionListItem action={action} actionType={actionType} {...rest} />;\n  }\n};\n\n<Channel MessageActionListItem={CustomMessageActionListItem}>\n  {/* Underlying MessageList and MessageInput components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Consuming ImageGalleryContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ImageGalleryContext using the useContext hook from React. It retrieves the messages and setMessages values from the context. This enables components within the OverlayProvider to access and modify the image gallery's messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/image-gallery-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ImageGalleryContext } from 'stream-chat-react-native';\n\nconst { messages, setMessages } = useContext(ImageGalleryContext);\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Photo and Save Photo Permissions in app.json (Expo)\nDESCRIPTION: This JSON snippet shows how to configure permissions for accessing and saving photos to the photo gallery using the `expo-media-library` plugin in Expo's `app.json` file.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_31\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-media-library\",\n        {\n          \"photosPermission\": \"$(PRODUCT_NAME) would like access to your photo gallery to share image in a message.\",\n          \"savePhotosPermission\": \"$(PRODUCT_NAME) would like to save photos to your photo gallery after downloading from a message.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Message Preview Object Structure\nDESCRIPTION: This code snippet describes the structure of a message preview object used in Stream Chat React Native to display the latest message on a channel. It contains the creation timestamp, the message object itself, a preview object with text and bold formatting, and the read status of the latest message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel-preview-messenger/props/latest_message_preview.mdx#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n created_at: '' ,\n messageObject: { ... },\n previews: {\n   bold: true,\n   text: 'This is the message preview text'\n },\n status: 0 | 1 | 2 // read states of latest message.\n}\n```\n\n----------------------------------------\n\nTITLE: Setting topInset for AttachmentPicker - TSX\nDESCRIPTION: This snippet demonstrates how to set the topInset for the AttachmentPicker using the useHeaderHeight hook from @react-navigation/stack. It sets the topInset to the header height, ensuring the bottom sheet opens to the header.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/navigation.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst headerHeight = useHeaderHeight();\nconst { setTopInset } = useAttachmentPickerContext();\n\nuseEffect(() => {\n  setTopInset(headerHeight);\n}, [headerHeight]);\n```\n\n----------------------------------------\n\nTITLE: Customizing URL Preview (JSX)\nDESCRIPTION: This JSX snippet demonstrates customizing the URL preview component.  It expects `text`, `thumb_url`, and `title` to be available and logs them. Replace the placeholder comment with your own UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomUrlPreview = () => {\n  console.log(text);\n  console.log(thumb_url);\n  console.log(title);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime format with Day.js locale config\nDESCRIPTION: This code shows how to provide a Day.js locale configuration when instantiating `Streami18n`. This allows customizing the DateTime format for a specific language.  It requires `Streami18n` from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst i18n = new Streami18n({\n language: 'nl',\n dayjsLocaleConfigForLanguage: {\n   months: [...],\n   monthsShort: [...],\n   calendar: {\n     sameDay: '...'\n   }\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding createReactActivityDelegate in MainActivity.java\nDESCRIPTION: This Java code shows how to override the `createReactActivityDelegate` method in `MainActivity.java` to use `RNGestureHandlerEnabledRootView`. This is required when using v1 of `react-native-gesture-handler` on Android. By using this custom root view, the app ensures that gesture handling is properly integrated into the React Native environment.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\npackage com.swmansion.gesturehandler.react.example;\n\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.ReactActivityDelegate;\nimport com.facebook.react.ReactRootView;\nimport com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return \"Example\";\n  }\n  @Override\n  protected ReactActivityDelegate createReactActivityDelegate() {\n    return new ReactActivityDelegate(this, getMainComponentName()) {\n      @Override\n      protected ReactRootView createRootView() {\n        return new RNGestureHandlerEnabledRootView(MainActivity.this);\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom Equality Check for MessageFooter in React Native\nDESCRIPTION: This code snippet demonstrates a custom equality check (`messageEqual`) for a `MessageFooter` component in React Native. It compares specific properties of the `prevMessage` and `nextMessage` objects that are relevant to the `MessageFooter`'s rendering logic, such as `deleted_at`, `reply_count`, `status`, `type`, and `text`. This prevents unnecessary re-renders when other properties of the `message` object change, as the `message` object from `MessageContext` is not referentially stable.  The dependencies are `prevMessage` and `nextMessage` objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/custom_components.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst messageEqual =\n  prevMessage.deleted_at === nextMessage.deleted_at &&\n  prevMessage.reply_count === nextMessage.reply_count &&\n  prevMessage.status === nextMessage.status &&\n  prevMessage.type === nextMessage.type &&\n  prevMessage.text === nextMessage.text;\n```\n\n----------------------------------------\n\nTITLE: Overriding Gallery Attachment Component in JSX\nDESCRIPTION: This JSX snippet shows how to override the default Gallery component. The component receives images and onPressIn props for access to image details and handling press events. The component logs images and renders custom UI. Dependencies include React.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomGallery = ({ images, onPressIn }) => {\n  console.log(images);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying CooldownTimer Styles - JSX\nDESCRIPTION: This code snippet shows how to customize the styles of the default CooldownTimer component via the theme using ThemeProvider.  It demonstrates how to modify container and text styles within the messageInput.cooldownTimer theme.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-input.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n    <ThemeProvider style={{\n      {/* ... your other styles */}\n      messageInput: {\n        cooldownTimer: {\n          container: {\n            {/* ViewStyle values */}\n          },\n          text: {\n            {/* TextStyle values */}\n          }\n        }\n      }\n    }}>\n    {/* Underlying components inside */}\n    </ThemeProvider>\n```\n\n----------------------------------------\n\nTITLE: Changing directory to native-package and installing dependencies\nDESCRIPTION: This command changes the current directory to the `native-package` directory within the project and installs the dependencies using yarn.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd native-package && yarn install\n```\n\n----------------------------------------\n\nTITLE: Replace DateHeader with Empty Component - React Native\nDESCRIPTION: This snippet demonstrates how to replace the default DateHeader component in Stream Chat for React Native with a custom component that returns null. This effectively removes the DateHeader from the UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/custom_components.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyEmptyComponent = () => null;\n\n<Channel\n  ...\n  DateHeader={MyEmptyComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Message Actions Context\nDESCRIPTION: This shows how to selectively render message actions using props on the Channel component. The channel component makes these props available in the MessagesContext context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_actions_customization.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nmessageActions={({\n  blockUser, // MessageAction | null;\n  copyMessage, // MessageAction | null;\n  deleteMessage, // MessageAction | null;\n  dismissOverlay, // () => void;\n  editMessage, // MessageAction | null;\n  error, // boolean;\n  flagMessage, // MessageAction | null;\n  isMyMessage, // boolean;\n  isThreadMessage, // boolean;\n  message, // MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  messageReactions, // boolean;\n  reply, // MessageAction | null;\n  retry, // MessageAction | null;\n  threadReply, // MessageAction | null;\n  ownCapabilities, // object\n}) => {\n  return [] // Array<MessageAction>\n}}\n```\n\n----------------------------------------\n\nTITLE: Running the Application on Android with Yarn\nDESCRIPTION: This command builds and runs the application on the Android platform, typically using an emulator or a connected Android device. It automates the build and deployment process for Android.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Setting SDK Versions - Android\nDESCRIPTION: This Java snippet shows how to ensure that `buildToolsVersion`, `compileSdkVersion`, and `targetSdkVersion` are all >= 26 in `android/build.gradle`. This ensures compatibility with the required Android SDK levels.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n  ext {\n    buildToolsVersion = \"29.0.3\"\n    compileSdkVersion = 29\n    targetSdkVersion = 29\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Chat Component with Stream Chat Client in React Native\nDESCRIPTION: This code snippet demonstrates how to initialize the Chat component with a Stream Chat client in a React Native application.  It uses the `useCreateChatClient` hook to create and manage the client, passing in API key, user data, and token. The Chat component renders ChannelList.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/chat.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider, useCreateChatClient } from 'stream-chat-react-native';\n\n// highlight-start\nconst chatApiKey = 'REPLACE_WITH_API_KEY';\nconst chatUserId = 'REPLACE_WITH_USER_ID';\nconst chatUserName = 'REPLACE_WITH_USER_NAME';\nconst chatUserToken = 'REPLACE_WITH_USER_TOKEN';\n// highlight-end\n\nconst user = {\n  id: chatUserId,\n  name: chatUserName,\n};\n\nexport const App = () => {\n  // highlight-start\n  const chatClient = useCreateChatClient({\n    apiKey: chatApiKey,\n    userData: user,\n    tokenOrProvider: chatUserToken,\n  });\n  // highlight-end\n\n  return (\n    <OverlayProvider>\n      // highlight-next-line\n      <Chat client={chatClient}>\n        <ChannelList />\n        // highlight-next-line\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Video (npm)\nDESCRIPTION: This command installs the react-native-video package using npm.  This is an optional dependency that enables playing video files within the chat interface.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpm install react-native-video\n```\n\n----------------------------------------\n\nTITLE: Consuming ThemeContext with useContext - TSX\nDESCRIPTION: Demonstrates how to access theme values using the useContext hook in a TypeScript React Native component within stream-chat-react-native. It retrieves the accent_red color from the theme. The component must be a child of OverlayProvider or Chat components to access the context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/theme_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThemeContext } from 'stream-chat-react-native';\n\nconst {\n  theme: {\n    colors: {\n      accent_red },\n  },\n} = useContext(OverlayContext);\n```\n\n----------------------------------------\n\nTITLE: Image object structure - TSX\nDESCRIPTION: Defines the structure of the 'image' object, which represents the current active image in the image viewer/gallery. It includes optional properties for the messageId and URL of the image.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/image_gallery_context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  messageId?: string;\n  url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Queries for External Links in AndroidManifest.xml\nDESCRIPTION: This XML snippet configures the `AndroidManifest.xml` to allow opening external links using intent filters on `targetSdkVersion` >= 30. The `<queries>` block specifies the intents the app intends to use, ensuring the app can open HTTP and HTTPS URLs in external applications. This configuration is essential for apps that need to redirect users to web pages or other external resources.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_12\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"http\" android:host=\"*\" />\n  </intent>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"https\" android:host=\"*\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Overriding createReactActivityDelegate in MainActivity.java - Java\nDESCRIPTION: This snippet shows how to override the `createReactActivityDelegate` method in `MainActivity.java` to enable gesture handling in React Native on Android when using v1 of `react-native-gesture-handler`. This ensures that gestures are properly recognized and handled by the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage com.swmansion.gesturehandler.react.example;\n\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.ReactActivityDelegate;\nimport com.facebook.react.ReactRootView;\nimport com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return \"Example\";\n  }\n  @Override\n  protected ReactActivityDelegate createReactActivityDelegate() {\n    return new ReactActivityDelegate(this, getMainComponentName()) {\n      @Override\n      protected ReactRootView createRootView() {\n        return new RNGestureHandlerEnabledRootView(MainActivity.this);\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Add Intent Queries in AndroidManifest.xml - XML\nDESCRIPTION: This XML snippet shows how to add intent queries for external links in `AndroidManifest.xml`. Required for `targetSdkVersion` >= 30. This allows the app to open external links (http/https).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_10\n\nLANGUAGE: xml\nCODE:\n```\n<queries>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"http\" android:host=\"*\" />\n  </intent>\n  <intent>\n    <action android:name=\"android.intent.action.VIEW\" />\n    <data android:scheme=\"https\" android:host=\"*\" />\n  </intent>\n</queries>\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat Expo and Dependencies (bash)\nDESCRIPTION: This command installs Stream Chat Expo, netinfo, document picker, file system, haptics, image manipulator, image picker, media library, sharing, gesture handler, reanimated, safe area context and svg dependencies using expo install.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nexpo install stream-chat-expo\nexpo install @react-native-community/netinfo expo-document-picker expo-file-system expo-haptics expo-image-manipulator expo-image-picker expo-media-library expo-sharing react-native-gesture-handler react-native-reanimated react-native-safe-area-context react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Running iOS App with Expo\nDESCRIPTION: This Bash command is used to run the iOS application on the simulator or a connected device using Expo. The `yarn ios` command will build and start the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Memoizing Components in Stream Chat React Native\nDESCRIPTION: This code shows how to optimize custom components in Stream Chat React Native using `React.memo`. By separating the component that consumes context from the memoized component and using a custom `areEqual` check, unnecessary re-renders are avoided, resulting in improved performance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/going-live-checklist.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport React from 'react';\nimport { usePaginatedMessageListContext } from 'stream-chat-react-native';\nimport { Text } from 'react-native';\n\nconst MySenderComponentWithContext = ({ latestMessageSender }) => {\n  console.log('Rendered');\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\nconst MemoizedMySenderComponent = React.memo(\n  MySenderComponentWithContext,\n  (prev, next) => prev.latestMessageSender === next.latestMessageSender,\n);\n\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n\n  return <MemoizedMySenderComponent latestMessageSender={latestMessageSender} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadContext with useContext - React\nDESCRIPTION: This snippet demonstrates how to consume the ThreadContext using the useContext hook in a React component. It imports the necessary modules from 'stream-chat-react-native' and uses useContext to access the ThreadContext value. This allows the component to access thread-related data and functions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/thread-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThreadContext } from 'stream-chat-react-native';\n\nconst value = useContext(ThreadContext);\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handling (onMessageNew) - TSX\nDESCRIPTION: This code snippet demonstrates how to override the default `onMessageNew` event handler of the `ChannelList` component. It prevents new unfrozen channels from being added to the list, maintaining the frozen channel filter.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/channel_list_customization.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst filters = {\n  members: { $in: ['vishal'] },\n  frozen: true,\n};\n\nconst customOnMessageNew = async (setChannels, event) => {\n  const eventChannel = event.channel;\n\n  // If the channel is frozen, then don't add it to the list.\n  if (!eventChannel?.id || !eventChannel.frozen) return;\n\n  try {\n    const newChannel = client.channel(eventChannel.type, eventChannel.id);\n    await newChannel.watch();\n    setChannels(channels => [newChannel, ...channels]);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n<ChannelList filters={filters} onMessageNew={customOnMessageNew} />;\n```\n\n----------------------------------------\n\nTITLE: Integrating Native Image Picker and File Picker (React Native)\nDESCRIPTION: This code demonstrates how to integrate the native image picker (using `react-native-image-crop-picker`) and the native file picker into the attachment selection process.  It utilizes the `useMessageInputContext` hook from `stream-chat-react-native` to access the `uploadNewImage` and `pickFile` functions, which are used to handle image uploads and file selection respectively.  The highlighted lines are specific to the integration with the image and file pickers, as well as the `MessageInputContext`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel, useMessageInputContext } from 'stream-chat-react-native';\nimport { ActionSheetProvider, useActionSheet } from '@expo/react-native-action-sheet';\nimport ImagePicker from 'react-native-image-crop-picker';\n\nconst CustomAttachButton = () => {\n  const { showActionSheetWithOptions } = useActionSheet();\n  const { pickFile, uploadNewImage } = useMessageInputContext();\n\n  const pickImageFromGallery = () =>\n    ImagePicker.openPicker({\n      multiple: true,\n    }).then(images =>\n      images.forEach(image =>\n        uploadNewImage({\n          uri: image.path,\n        }),\n      ),\n    );\n\n  const pickImageFromCamera = () =>\n    ImagePicker.openCamera({\n      cropping: true,\n    }).then(image =>\n      uploadNewImage({\n        uri: image.path,\n      }),\n    );\n\n  const onPress = () => {\n    // Same interface as https://facebook.github.io/react-native/docs/actionsheetios.html\n    showActionSheetWithOptions(\n      {\n        cancelButtonIndex: 3,\n        destructiveButtonIndex: 3,\n        options: ['Photo Library', 'Camera', 'Files', 'Cancel'],\n      },\n      buttonIndex => {\n        switch (buttonIndex) {\n          case 0:\n            pickImageFromGallery();\n            break;\n          case 1:\n            pickImageFromCamera();\n            break;\n          case 2:\n            pickFile();\n            break;\n          default:\n            break;\n        }\n      },\n    );\n  };\n\n  return <AttachButton handleOnPress={onPress} />;\n};\n\n<ActionSheetProvider>\n  <Channel AttachButton={CustomAttachButton} />\n</ActionSheetProvider>;\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Grouping - TypeScript\nDESCRIPTION: This snippet demonstrates how to disable message grouping by user in the MessageList component.  Message grouping involves iterating through the message list, which can impact performance with large lists. Setting `enableMessageGroupingByUser` to `false` avoids this iteration but may affect UI appearance by rendering more avatar images.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/performance_guide.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel enableMessageGroupingByUser={false} />\n```\n\n----------------------------------------\n\nTITLE: Consuming OverlayContext with useOverlayContext Hook - TSX\nDESCRIPTION: This snippet demonstrates how to consume the OverlayContext using the useOverlayContext hook provided by stream-chat-react-native. It imports the useOverlayContext hook and then uses it to access the setOverlay function. This is an alternative way to access the OverlayContext compared to using useContext.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/overlay-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useOverlayContext } from 'stream-chat-react-native';\n\nconst { setOverlay } = useOverlayContext();\n```\n\n----------------------------------------\n\nTITLE: Consuming TypingContext with useTypingContext Hook - TSX\nDESCRIPTION: This snippet illustrates how to use the useTypingContext hook, provided by the stream-chat-react-native library, to access the TypingContext within a TypeScript React Native component. This is an alternative approach to using useContext.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/typing-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTypingContext } from 'stream-chat-react-native';\n\nconst { typing } = useTypingContext();\n```\n\n----------------------------------------\n\nTITLE: Customizing ImageUploadPreview in Channel Component (TSX)\nDESCRIPTION: This code snippet demonstrates how to override the default ImageUploadPreview component with a custom component using the ImageUploadPreview prop of the Channel component. This allows developers to customize the image preview UI within the message input.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/image-upload-preview.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel ImageUploadPreview={CustomImageUploadPreview} />\n```\n\n----------------------------------------\n\nTITLE: Displaying Poll Name in Results - React Native\nDESCRIPTION: This code snippet shows how to display the poll name in the PollResults screen using the usePollState hook and PollResultsContent component from stream-chat-react-native. It overrides the PollModalHeader title with the poll name obtained from the usePollState hook.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-start\n  usePollState,\n  PollResultsContent,\n  // highlight-end\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\n// highlight-start\nconst MyPollResultsContent = () => {\n  const { name } = usePollState();\n  const navigation = useNavigation();\n  return (\n    <>\n      <PollModalHeader title={name} onPress={() => navigation.goBack()} />\n      <PollResultsContent />\n    </>\n  );\n};\n\nconst PollResultsScreen = ({\n  route: {\n    params: { message, poll },\n  },\n}) => {\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <PollResults message={message} poll={poll} PollResultsContent={MyPollResultsContent} />\n    </SafeAreaView>\n  );\n};\n// highlight-end\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel} PollContent={MyPollContent}>\n          <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n            <ChannelStack.Screen\n              name={'ChannelMessageList'}\n              options={{ headerShown: false }}\n              component={ChannelMessageList}\n            />\n            <ChannelStack.Screen\n              name={'PollResultsScreen'}\n              options={{ headerShown: false }}\n              component={PollResultsScreen}\n            />\n          </ChannelStack.Navigator>\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Selected Message Type Definition - TSX\nDESCRIPTION: Defines the type for the `selectedMessage` object within the `ImageGalleryContext`. It includes `messageId` and `url` properties, both optional strings. This represents the currently active message being displayed in the image gallery.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/image-gallery-context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  messageId?: string;\n  url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting keyboardVerticalOffset for Channel - TSX\nDESCRIPTION: This snippet shows how to set the keyboardVerticalOffset prop on the Channel component. This is necessary for the KeyboardCompatibleView within the Channel to correctly adjust its position when the keyboard is visible. It uses the useHeaderHeight hook from @react-navigation/stack to get the height of the navigation header.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/navigation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst headerHeight = useHeaderHeight();\n\nconst App = () => {\n  return <Channel keyboardVerticalOffset={headerHeight}>{/* other components inside */}</Channel>;\n};\n```\n\n----------------------------------------\n\nTITLE: Installing iOS Pods\nDESCRIPTION: This command navigates to the `ios` directory and installs the necessary CocoaPods dependencies for the iOS platform. This step is essential for integrating native iOS modules into the React Native application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ios && pod install\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelAvatar with onPress handler - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the ChannelAvatar component by adding an onPress handler using TouchableOpacity. It uses the PreviewAvatar prop of the ChannelList component to override the default avatar rendering.  The channel prop is required for ChannelAvatar.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/channel-avatar.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { ChannelList, ChannelAvatar } from 'stream-chat-react-native';\n\n<ChannelList\n  PreviewAvatar={({ channel }) => (\n    <TouchableOpacity\n      disallowInterruption={true}\n      onPress={() => {\n        /** Handler for press action */\n      }}\n    >\n      // highlight-next-line\n      <ChannelAvatar channel={channel} />\n    </TouchableOpacity>\n  )}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Forcing Message Alignment to Left - TSX\nDESCRIPTION: This code demonstrates how to force all messages in a channel to be aligned to the left side.  This is achieved by setting the `forceAlignMessages` prop to `'left'` on the `Channel` component.  The `keyboardVerticalOffset` and `thread` props are also passed to the `Channel` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  forceAlignMessages='left'\n  keyboardVerticalOffset={headerHeight}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Register Device with Stream for Push Notifications\nDESCRIPTION: Registers a device with Stream to receive push notifications by obtaining the Firebase device token and calling `client.addDevice`. This function also requests push notification permissions from the user. The `onTokenRefresh` listener ensures the device token is updated if it changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v1.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// Request Push Notification permission from device.\nconst requestPermission = async () => {\n  const authStatus = await messaging().requestPermission();\n  const enabled =\n    authStatus === messaging.AuthorizationStatus.AUTHORIZED || authStatus === messaging.AuthorizationStatus.PROVISIONAL;\n\n  if (enabled) {\n    console.log('Authorization status:', authStatus);\n  }\n};\n\nconst App = () => {\n  const [isReady, setIsReady] = useState(false);\n  const unsubscribeTokenRefreshListenerRef = useRef<() => void>();\n\n  useEffect(() => {\n    // Register FCM token with stream chat server.\n    const registerPushToken = async () => {\n      // unsubscribe any previous listener\n      unsubscribeTokenRefreshListenerRef.current?.();\n      const token = await messaging().getToken();\n      await client.addDevice(token, 'firebase');\n\n      unsubscribeTokenRefreshListener = messaging().onTokenRefresh(async newToken => {\n        await client.addDevice(newToken, 'firebase');\n      });\n    };\n\n    const init = async () => {\n      await client.connectUser({ id: USER_ID }, USER_TOKEN);\n\n      await requestPermission();\n      await registerPushToken();\n\n      setIsReady(true);\n    };\n\n    init();\n\n    return async () => {\n      await client?.disconnectUser();\n      unsubscribeTokenRefreshListenerRef.current?.();\n    };\n  }, []);\n\n  if (!isReady) {\n    return null;\n  }\n\n  return (\n    <View style={styles.container}>\n      <Chat client={client}>{/* Child components of Chat go here */}</Chat>\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Override haptic feedback handler - TypeScript\nDESCRIPTION: This code snippet demonstrates how to override the default haptic feedback handler in Stream Chat React Native. It imports the `registerNativeHandlers` function from the `stream-chat-react-native-core` package and registers a new handler that disables haptic feedback by returning `null`. This will prevent haptic feedback from being triggered in the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/native_handlers.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { registerNativeHandlers } from 'stream-chat-react-native-core';\n\nregisterNativeHandlers({\n  triggerHaptic: () => null,\n});\n```\n\n----------------------------------------\n\nTITLE: Message Preview Object Structure\nDESCRIPTION: This snippet defines the structure of a message preview object used in Stream Chat React Native. It includes the creation timestamp, the message object, preview formatting options (e.g., bold text), and the read status of the message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/ui-components/channel-preview-messenger/props/latest_message_preview.mdx#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n created_at: '' ,\n messageObject: { ... },\n previews: {\n   bold: true,\n   text: 'This is the message preview text'\n },\n status: 0 | 1 | 2 // read states of latest message.\n}\n```\n\n----------------------------------------\n\nTITLE: Load More Button - React Native\nDESCRIPTION: This code implements a 'Load More' button to replace the infinite scroll pagination in the `ChannelList` component. It uses `useChannelsContext` to access pagination-related flags and the `loadNextPage` function.  It conditionally renders the button based on the `loadingChannels` and `hasNextPage` values.  The `additionalFlatListProps` are used to override the default FlatList behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_list_customization.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Button } from 'react-native';\nimport { useChannelsContext } from 'stream-chat-react-native';\n\nconst FooterLoadMoreButton = () => {\n  const { loadingChannels, loadNextPage, hasNextPage } = useChannelsContext();\n\n  if (loadingChannels || !hasNextPage) return null;\n\n  return <Button title={'Load More'} onPress={loadNextPage} />;\n};\n\n<ChannelList\n  additionalFlatListProps={{\n    ListFooterComponent: FooterLoadMoreButton,\n    onEndReached: () => null,\n  }}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Replacing DateHeader with an empty component - React Native\nDESCRIPTION: This code snippet demonstrates how to replace the default DateHeader component in Stream Chat with a custom component that returns null, effectively removing the DateHeader from the UI.  The custom component, MyEmptyComponent, is passed as the DateHeader prop to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/custom_components.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyEmptyComponent = () => null;\n\n<Channel\n  ...\n  DateHeader={MyEmptyComponent}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Defining Query Options for Stream Chat Channels\nDESCRIPTION: This code snippet demonstrates how to define an options object for querying channels using the Stream Chat React Native library. The `message_limit` parameter is set to 100, which configures the number of messages to retrieve per channel. Note that only modifying the options object will not automatically re-query the channel list; filters or sort objects must also be changed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/channel-list/props/options.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst options = { message_limit: 100 };\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Google Repository - Java\nDESCRIPTION: This snippet demonstrates how to add the Google Maven repository to the `allprojects` block in the `android/build.gradle` file. This repository is required for resolving dependencies needed by certain Android modules. Add `maven { url 'https://maven.google.com' }` to `android/build.gradle`\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nallprojects {\n  repositories {\n    mavenLocal()\n    maven {\n      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n      url(\"$rootDir/../node_modules/react-native/android\")\n    }\n    maven {\n      // Android JSC is installed from npm\n      url(\"$rootDir/../node_modules/jsc-android/dist\")\n    }\n\n    google()\n    jcenter()\n    maven { url 'https://maven.google.com' }\n    maven { url 'https://www.jitpack.io' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Channel at a Specific Message - React TSX\nDESCRIPTION: Illustrates how to use the loadChannelAtMessage function to load the channel history around a specific message.  It takes an object with before (number of messages before), after (number of messages after), and messageId.  This is used to load historical context around a particular message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channel_context.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nloadChannelAtMessage({\n  before: 10, // Number of messages to load before messageId\n  after: 10, // Number of messages to load after messageId\n  messageId,\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Message Component Integration - TSX\nDESCRIPTION: Demonstrates how to integrate a custom message component into the Stream Chat React Native Channel component. The `CustomMessageComponent` prop allows you to override the default message rendering logic with your own implementation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider bottomInset={bottom} i18nInstance={streami18n}>\n  <Chat client={chatClient} i18nInstance={streami18n}>\n    <Channel channel={channel} keyboardVerticalOffset={headerHeight} Message={CustomMessageComponent}>\n      <View style={{ flex: 1 }}>\n        <MessageList />\n        <MessageInput />\n      </View>\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Enabling Hermes in Android build.gradle - Java\nDESCRIPTION: This code snippet shows how to enable Hermes in the `android/app/build.gradle` file. This is crucial for Reanimated 2 to function properly on Android. The snippet highlights the line that needs to be added or modified to enable Hermes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nproject.ext.react = [\n  enableHermes: true  // clean and rebuild if changing\n]\n```\n\n----------------------------------------\n\nTITLE: Enable Editing State for Message - React Native\nDESCRIPTION: This function sets the editing state for a specified message. When invoked, it allows the user to edit the content of the given message. It is typically used in conjunction with a UI element that enables message editing. It receives the message to be edited as an argument.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/messages-context.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Displaying Channel List in React Native using Stream Chat\nDESCRIPTION: This code snippet demonstrates how to display a list of channels using the `ChannelList` component from the `stream-chat-react-native` library. It requires a Stream Chat client instance and wraps the `ChannelList` within the `Chat` and `OverlayProvider` components to provide the necessary context. No props are required to simply display all channels a user has access to.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Selected Images Array Type Definition - TSX\nDESCRIPTION: This code snippet defines the type for the `selectedImages` array, which represents the list of currently selected images in the attachment picker. Each image object contains properties like height, source, URI, and width.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/attachment_picker_context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nArray<{  \n  height: number;\n  source: 'camera' | 'picker';\n  uri: string;\n  width: number;\n  id?: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Adding react-native-image-picker dependency - Bash\nDESCRIPTION: This command adds the `react-native-image-picker` package, which replaces the `react-native-image-crop-picker` package. This change provides a better alternative with improved architecture endeavors.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-image-picker\n```\n\n----------------------------------------\n\nTITLE: Customizing MessagePinnedHeader in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the MessagePinnedHeader component and provide it to the Channel component via the MessagePinnedHeader prop.  It imports Channel and MessageAvatar from stream-chat-react-native and defines a custom MessagePinnedHeaderComponent. The custom component is then passed to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-pinned-header.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Channel, MessageAvatar} from 'stream-chat-react-native';\n\nconst MessagePinnedHeaderComponent = () => <MessagePinnedHeader />\n\n<Channel MessagePinnedHeader={MessagePinnedHeaderComponent} />\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Yarn (package)\nDESCRIPTION: This command navigates to the `package` directory and installs the dependencies specified in its package.json file using Yarn. These dependencies are likely specific to a particular feature or module within the project.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd package && yarn install\n```\n\n----------------------------------------\n\nTITLE: Replacing DateHeader with undefined - React Native\nDESCRIPTION: This code snippet demonstrates how to remove the default DateHeader component in the Stream Chat for React Native MessageList by passing `undefined` to the `DateHeader` prop of the `Channel` component. This effectively hides the date header from the UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/custom_components.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  ...\n  DateHeader={undefined}\n>\n```\n\n----------------------------------------\n\nTITLE: Consuming OverlayContext using useContext - React TSX\nDESCRIPTION: This snippet demonstrates how to consume the OverlayContext using the useContext hook provided by React. The OverlayContext provides access to methods like setBlurType and setOverlay, which are used to manage overlays and blur effects within the application. This context should be used within the OverlayProvider component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/overlay_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { OverlayContext } from 'stream-chat-react-native';\n\nconst { setBlurType, setOverlay } = useContext(OverlayContext);\n```\n\n----------------------------------------\n\nTITLE: ProGuard Rules for Reanimated 2 - Text\nDESCRIPTION: These ProGuard rules are essential to prevent ProGuard from removing Reanimated 2 related classes, which can lead to crashes in the Android release bundle. Adding these rules to the ProGuard configuration ensures that the necessary classes are kept during the build process.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_19\n\nLANGUAGE: text\nCODE:\n```\n-keep class com.swmansion.reanimated.** { *; }\n-keep class com.facebook.react.turbomodule.** { *; }\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated JSI Module Package\nDESCRIPTION: This Java code demonstrates how to add the `ReanimatedJSIModulePackage` in the `MainApplication.java` file. This step is crucial for enabling Reanimated 2 in React Native Android applications, especially for older versions. The JSI module package integrates Reanimated's native components, allowing for smooth and efficient animations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nimport com.facebook.react.bridge.JSIModulePackage;\nimport com.swmansion.reanimated.ReanimatedJSIModulePackage;\n...\n\nprivate final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n  ...\n\n  @Override\n  protected String getJSMainModuleName() {\n    return \"index\";\n  }\n\n  @Override\n  protected JSIModulePackage getJSIModulePackage() {\n    return new ReanimatedJSIModulePackage();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Listing Blocked Users with Stream Chat\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of blocked users using the `getBlockedUsers` method from the Stream Chat SDK.  It creates a Stream Chat client instance and defines an asynchronous function `getBlockedUsers` that fetches the blocked user list and updates the `blockedUsers` state. Any error encountered during retrieval is logged.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/blocking-users.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst chatClient = StreamChat.getInstance('your api key');\n\n// Note this has to be done after the client connection(`client.connectUser`) is established.\nconst getBlockedUsers = async () => {\n  try {\n    const users = await chatClient.getBlockedUsers();\n    setBlockedUsers(users.blocks);\n  } catch (error) {\n    console.log('Error getting blocked users:', error);\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring resizableCDNHosts with ChatConfigProvider - TSX\nDESCRIPTION: This code snippet demonstrates how to configure the `resizableCDNHosts` property using the `ChatConfigProvider` in Stream Chat React Native.  It wraps the application's root, enabling custom CDN hosts for image resizing. If nothing is provided, the `resizableCDNHosts` will default to `['.stream-io-cdn.com']`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat, ChatConfigProvider, OverlayProvider } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <ChatConfigProvider\n      value={{\n        resizableCDNHosts: ['cdn.example.com'],\n      }}\n    >\n      <OverlayProvider>\n        <Chat client={client}>\n          <ChannelList />\n        </Chat>\n      </OverlayProvider>\n    </ChatConfigProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering TypingIndicator Component\nDESCRIPTION: This snippet renders the TypingIndicator component. It indicates when a user is typing a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_25\n\nLANGUAGE: jsx\nCODE:\n```\n<TypingIndicator />\n```\n\n----------------------------------------\n\nTITLE: Implementing Swipeable Messages in Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates how to wrap the standard `Message` component from `stream-chat-react-native` in a `Swipeable` component from `react-native-gesture-handler/Swipeable` to add swipe functionality. It shows how to use `onSwipeableLeftOpen` and `onSwipeableRightOpen` to trigger actions like replying or deleting messages, and how to use `renderLeftActions` and `renderRightActions` to display custom swipe actions.  It depends on the `react-native-gesture-handler` library and assumes you have access to `MessageProps` and the standard `Message` component from the Stream Chat React Native library.  The props parameter of type `MessageProps` is expected and passes props to the base message component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst SwipeableMessage = (\n  props: MessageProps<AttachmentType, ChannelType, CommandType, EventType, MessageType, ResponseType, UserType>,\n) => {\n  return (\n    <Swipeable\n      onSwipeableLeftOpen={reply(props.message)}\n      onSwipeableRightOpen={delete props.message}\n      overshootLeft={false}\n      overshootRight={false}\n      renderLeftActions={progress => (\n        <Animated.View\n          style={{\n            backgroundColor: 'blue',\n            transform: [\n              {\n                translateX: progress.interpolate({\n                  inputRange: [0, 1],\n                  outputRange: [-100, 0],\n                }),\n              },\n            ],\n            width: 100,\n          }}\n        />\n      )}\n      renderRightActions={progress => (\n        <Animated.View\n          style={{\n            justifyContent: 'center',\n            opacity: progress.interpolate({\n              inputRange: [0, 1],\n              outputRange: [0, 1],\n            }),\n          }}\n        >\n          <StreamReaction />\n        </Animated.View>\n      )}\n    >\n      <Message {...props} />\n    </Swipeable>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Integrating Thread Component for Threaded Conversations - React Native\nDESCRIPTION: This code snippet integrates the `Thread` component to handle threaded messages. It manages a `thread` state and uses the `onThreadSelect` prop on the `MessageList` to handle thread selection.  The `threadList` prop on the `Channel` component is used to indicate whether a thread is currently active.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, MessageType, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [thread, setThread] = useState<MessageType | null>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0} thread={thread} threadList={!!thread}>\n            {thread ? (\n              <Thread />\n            ) : (\n              <>\n                <MessageList onThreadSelect={setThread} />\n                <MessageInput />\n              </>\n            )}\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing ReactionList Background Color - React Native\nDESCRIPTION: This code snippet demonstrates how to override the background color of the ReactionList container in a Stream Chat React Native application. It imports the necessary components and defines a custom ReactionList component with specified fill and stroke colors. The custom component is then passed to the Channel component's ReactionList prop to apply the changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/reaction_list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, ReactionList } from 'stream-chat-react-native';\n\nconst ReactionListWithCustomBackground = () => <ReactionList fill={'#00DDD'} stroke={'#fffff'} />\n\n<Channel ReactionList={ReactionListWithCustomBackground} />\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatList Ref with setFlatListRef - Typescript\nDESCRIPTION: This code snippet demonstrates how to access the underlying FlatList ref of the ChannelList component using the setFlatListRef property.  The setFlatListRef takes a callback function that receives the FlatList ref as a parameter, allowing you to store it in a useRef hook for later use. This enables programmatic control over the FlatList, such as scrolling to a specific item.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/channel-list/props/set_flat_list_ref.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst flatListRef = useRef();\n\n<ChannelList setFlatListRef={ref => (flatListRef.current = ref)} />;\n```\n\n----------------------------------------\n\nTITLE: Setting Language - JavaScript\nDESCRIPTION: This code snippet shows how to change the current language of the Streami18n instance using the `setLanguage()` method. It returns the new translation function `t` after the language is updated. It is an asynchronous operation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_19\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst t = await streami18n.setLanguage('nl');\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client (new StreamChat)\nDESCRIPTION: This snippet demonstrates an alternative way to instantiate a Stream Chat client using `new StreamChat()` with an API key. Note that repeatedly calling this will create multiple WebSocket connections. Stream Chat is backward compatible.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nconst client = new StreamChat('api_key');\n```\n\n----------------------------------------\n\nTITLE: Accessing Context Values in Stream Chat React Native\nDESCRIPTION: This code demonstrates accessing the `PaginatedMessageListContext` and logging the component's re-renders. It's a simple example that highlights potential performance issues when custom components are not properly optimized to avoid unnecessary re-renders.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/going-live-checklist.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePaginatedMessageListContext } from 'stream-chat-react-native';\nimport { Text } from 'react-native';\n\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n  console.log('Render.');\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Rendering ThreadList in a Chat Component - React Native\nDESCRIPTION: This code snippet demonstrates how to integrate the ThreadList component within a Chat component in a React Native application using the stream-chat-react-native library. It shows the basic structure needed to display a list of threads.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/thread-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, ThreadList } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <ThreadList />\n      </Chat>\n    </OverlayProvider>\n  ); \n};\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist Camera Usage Description\nDESCRIPTION: This XML snippet shows the required entry in the Info.plist file on iOS for camera access when using react-native-image-picker in a React Native CLI project. It provides a description of why the app needs camera access.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_22\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSCameraUsageDescription</key>\n<string>$(PRODUCT_NAME) would like to use your camera to share image in a message.</string>\n```\n\n----------------------------------------\n\nTITLE: Customizing Reply Component in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to replace the default `Reply` component with a custom component named `CustomReply` within the `Channel` component. This allows for overriding the default UI and behavior of the reply preview.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/reply.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel Reply={CustomReply} />\n```\n\n----------------------------------------\n\nTITLE: Custom Attachment Equality Check in TypeScript\nDESCRIPTION: This TypeScript code snippet defines a custom function to determine equality between attachments in Stream Chat, allowing for more granular control over when UI updates occur.  The default comparison only checks a fixed set of properties, so this function lets you check custom properties (e.g., 'customField'). By providing this custom equality check to the Channel component, you ensure that the UI updates when the custom properties change.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel } from 'stream-chat-react-native';\n\nconst isAttachmentEqualHandler = (prevAttachment, nextAttachment) => {\n  const attachmentEqual = prevAttachment.customField === nextAttachment.customField;\n  if (!attachmentEqual) return false;\n  return true;\n};\n\n<Channel\n  channel={channel}\n  isAttachmentEqual={isAttachmentEqualHandler}\n  Card={attachment => {\n    return (\n      <View>\n        <Text>{attachment.customField}</Text>\n      </View>\n    );\n  }}\n>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Reconstructing Poll Results Screen with Navigation - React Native\nDESCRIPTION: This code reconstructs the PollResults screen using React Navigation and Stream Chat React Native components.  It utilizes PollModalHeader and PollResults components to create a custom UI for displaying poll results within the navigation stack. The ViewResultsButton navigates to PollResultsScreen with message and poll data.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  MessageList,\n  MessageInput,\n  PollContent,\n  // highlight-start\n  PollResults,\n  PollModalHeader,\n  // highlight-end\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      <ViewResultsButton\n        onPress={({ message, poll }) =>\n          navigation.navigate('PollResultsScreen', {\n            message,\n            poll,\n          });\n        }\n      />\n      <EndVoteButton />\n    </>\n  )\n}\n\n// ... rest of the components\n\n// highlight-start\nconst PollResultsScreen = ({\n  route: {\n    params: { message, poll },\n  },\n}) => {\n  const navigation = useNavigation();\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n      <PollModalHeader title={'RESULTS'} onPress={() => navigation.goBack()} />\n      <PollResults message={message} poll={poll} />\n    </SafeAreaView>\n  );\n};\n// highlight-end\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel} PollContent={MyPollContent}>\n          <ChannelStack.Navigator initialRouteName={'ChannelMessageList'}>\n            <ChannelStack.Screen\n              name={'ChannelMessageList'}\n              options={{ headerShown: false }}\n              component={ChannelMessageList}\n            />\n            <ChannelStack.Screen\n              name={'PollResultsScreen'}\n              options={{ headerShown: false }}\n              // highlight-next-line\n              component={PollResultsScreen}\n            />\n          </ChannelStack.Navigator>\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Disabling Legacy Image Viewer Swipe Behavior - TSX\nDESCRIPTION: This snippet shows how to disable the legacy image viewer's swipe behavior within the Channel component.  By setting the `legacyImageViewerSwipeBehaviour` prop to `false`, the image viewer will only load attachments for selected messages, reducing the load on the JS thread. This alternate UX improves performance by avoiding pre-population of all images in the channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/performance_guide.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel legacyImageViewerSwipeBehaviour={false} />\n```\n\n----------------------------------------\n\nTITLE: Setting up Channel with Thread State - TSX\nDESCRIPTION: This code snippet demonstrates how to set up the Channel component with a thread state in Stream Chat for React Native. It ensures that the Channel component is always aware of the current thread, which is essential for correct image viewer and message handling when navigating between channels and threads. The `thread` prop is passed to the `Channel` component, and the `onThreadSelect` prop of the `MessageList` is used to update the thread state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Chat client={chatClient} i18nInstance={streami18n}>\n  <Channel channel={channel} thread={thread}>\n    <MessageList onThreadSelect={setThread} />\n    <MessageInput />\n  </Channel>\n</Chat>\n```\n\n----------------------------------------\n\nTITLE: Implementing Double-Tap Gesture Handling in TypeScript\nDESCRIPTION: This code defines functions to handle double-tap gestures on messages, mimicking Instagram's reaction behavior. It uses `react-native-gesture-handler` and `react-native` touchables.  `handleDoubleTap` detects the double tap and prevents the default `onPress` action. `onDoubleTapMessage` then triggers the `toggleReaction` action with the 'love' reaction. `onLongPressMessage` clears the timeout set by `handleDoubleTap`, preventing the single-tap action when a long press occurs.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\nconst lastTap = React.useRef<number | null>(null);\nconst timeOut = React.useRef<NodeJS.Timeout | null>(null);\n\nconst handleDoubleTap = ({\n  defaultHandler,\n}) => {\n  const now = Date.now();\n  console.log(now, lastTap.current)\n  if (lastTap.current && now - lastTap.current < 510) {\n    if (timeOut.current) {\n      clearTimeout(timeOut.current);\n    }\n  } else {\n    lastTap.current = now;\n    timeOut.current = setTimeout(() => {\n      if (defaultHandler) {\n        defaultHandler();\n      }\n    }, 510);\n  }\n};\n\nconst onDoubleTapMessage = ({\n  actionHandlers\n}) => {\n  actionHandlers?.toggleReaction('love')\n};\n\nconst onLongPressMessage = ({\n  defaultHandler,\n}) => {\n  console.log('onLongPress')\n  if (timeOut.current) {\n    clearTimeout(timeOut.current);\n    defaultHandler()\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Overriding MessageInput with a Null Component in React Native\nDESCRIPTION: This snippet demonstrates overriding the default MessageInput component with null in a Stream Chat React Native application using the Input prop on the Channel component. It also shows how to override MessageInput within a Message component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel channel={channel} Input={() => null} keyboardVerticalOffset={headerHeight} Message={CustomMessageComponent}>\n  <View style={{ flex: 1 }}>\n    <MessageList />\n    <MessageInput Input={() => <View style={{ height: 40, backgroundColor: 'red' }} />} />\n  </View>\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Creating a Location Message\nDESCRIPTION: This JavaScript snippet demonstrates how to create a message object with a location attachment. The attachment includes latitude and longitude coordinates, which can be used to display the location on a map.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageWithLocation = {\n  text: 'This is my location',\n  attachments: [\n    {\n      type: 'location',\n      latitude: '50.212312',\n      longitude: '-71.212659',\n      // You can add more custom properties if needed.\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Theme Path Replacement - messageList.messageNotificationText\nDESCRIPTION: This change replaces the theme path `messageList.messageNotificationText` with `messageList.messageNotification.text`. This indicates a refactoring or restructuring of the theme properties related to message notifications within the message list component.  Users who have customized the theme using the older path will need to update their theme configurations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/package/CHANGELOG.md#_snippet_6\n\nLANGUAGE: none\nCODE:\n```\nmessageList.messageNotificationText  -> messageList.messageNotification.text\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatList ref with callback - TypeScript\nDESCRIPTION: This code snippet demonstrates how to access the underlying FlatList ref using a callback function within the ChannelList component. It uses useRef to create a mutable ref object and then assigns the FlatList ref to it via the setFlatListRef prop. The ref parameter in the callback function is the FlatList ref.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/core-components/channel-list/props/set_flat_list_ref.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst flatListRef = useRef();\n\n<ChannelList setFlatListRef={ref => (flatListRef.current = ref)} />;\n```\n\n----------------------------------------\n\nTITLE: General Usage of PollAnswersList - React Native\nDESCRIPTION: This code snippet demonstrates the basic usage of the PollAnswersList component within a React Native application using the stream-chat-react-native library. It shows how to integrate the component inside OverlayProvider, Chat and Channel components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-answers-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, PollAnswersList } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollAnswersList message={message} poll={poll} {...otherOptionalProps} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Adding ReanimatedJSIModulePackage in MainApplication.java - Java\nDESCRIPTION: This snippet demonstrates how to add the `ReanimatedJSIModulePackage` to the `MainApplication.java` file. This step is essential for initializing Reanimated 2 properly on Android and preventing blank screens.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nimport com.facebook.react.bridge.JSIModulePackage;\nimport com.swmansion.reanimated.ReanimatedJSIModulePackage;\n...\n\nprivate final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n  ...\n\n  @Override\n  protected String getJSMainModuleName() {\n    return \"index\";\n  }\n\n  @Override\n  protected JSIModulePackage getJSIModulePackage() {\n    return new ReanimatedJSIModulePackage();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Create Poll Screen to Stack Navigator - React Native\nDESCRIPTION: This code adds a 'CreatePollScreen' to the ChannelStack.Navigator using a modal presentation style. This allows the poll creation screen to appear as a modal over the existing channel screen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\n<ChannelStack.Group screenOptions={{ presentation: 'modal' }}>\n  <ChannelStack.Screen\n    name={'CreatePollScreen'}\n    options={{ headerShown: false }}\n    component={MyCreatePollContent}\n  />\n</ChannelStack.Group>\n```\n\n----------------------------------------\n\nTITLE: Adding MessageInput Component inside Channel in React Native using Stream Chat\nDESCRIPTION: This code adds a `MessageInput` component within the `Channel` component. The `MessageInput` enables users to send messages.  `keyboardVerticalOffset` is set on the `Channel` component. The component is conditionally rendered based on whether a channel is selected from the ChannelList.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? (\n          <Channel channel={channel} keyboardVerticalOffset={0}>\n            <MessageList />\n            <MessageInput />\n          </Channel>\n        ) : (\n          <ChannelList onSelect={setChannel} />\n        )}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Android Camera Permission in AndroidManifest.xml - XML\nDESCRIPTION: This XML snippet shows the required camera permission for the camera functionality to work correctly on Android. The `CAMERA` permission must be included in `AndroidManifest.xml`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.CAMERA\"/>\n```\n\n----------------------------------------\n\nTITLE: Implementing Split Screen Video/Chat in React Native\nDESCRIPTION: This snippet demonstrates how to create a split-screen layout with video and chat in React Native using Stream Chat. The video component (represented by an Image component for demonstration purposes) occupies the top part of the screen, while the chat message list occupies the bottom. The snippet assumes `chatClient`, `channel`, `streami18n` are already initialized and `headerHeight` is defined. Also assumes `navigation` and `setThread` are available for thread navigation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/livestream_messagelist.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, View } from 'react-native';\n\nimport { Chat, Channel, MessageList } from 'stream-chat-react-native';\n\n// When you render your chat screen\n<SafeAreaView style={{ flex: 1 }}>\n  <View style={[{ position: 'absolute' }, StyleSheet.absoluteFillObject]}>\n      <Chat client={chatClient} i18nInstance={streami18n}>\n        <Channel\n          channel={channel}\n          keyboardVerticalOffset={headerHeight}\n          thread={thread}\n        >\n          <View style={{ flex: 1 }}>\n            <Image source={{\n              uri: 'https://i.ibb.co/rfx5PCr/Screenshot-2021-02-24-at-14-20-57.png'\n            }} style={{ height: '100%', width: '100%'}} resizeMode={'cover'} />\n          </View>\n          <MessageList<\n            LocalAttachmentType,\n            LocalChannelType,\n            LocalCommandType,\n            LocalEventType,\n            LocalMessageType,\n            LocalResponseType,\n            LocalUserType\n          >\n            onThreadSelect={(thread) => {\n              setThread(thread);\n              navigation.navigate('Thread');\n            }}\n          />\n          <MessageInput />\n        </Channel>\n      </Chat>\n  </View>\n</SafeAreaView>\n```\n\n----------------------------------------\n\nTITLE: Removing stream-chat dependency - yarn\nDESCRIPTION: This command removes the `stream-chat` dependency using yarn. It is crucial to remove this direct dependency since `stream-chat-react-native` already includes it, and having it separately can cause conflicts and unexpected behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-4.x-to-5.x.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove stream-chat\n```\n\n----------------------------------------\n\nTITLE: Cloning the SDK repository with Git\nDESCRIPTION: This command clones the Stream Chat React Native SDK repository from GitHub into your local machine. Replace `{github-user-id}` with your GitHub username after forking the repository.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ngit clone https://github.com/{github-user-id}/stream-chat-react-native.git\n```\n\n----------------------------------------\n\nTITLE: Customizing message text truncation in OverlayProvider - Typescript\nDESCRIPTION: This code snippet demonstrates how to customize the truncation length of the message text within the overlay by providing the `messageTextNumberOfLines` prop to the `OverlayProvider` component. The `messageTextNumberOfLines` prop accepts a number, which specifies the maximum number of lines to display before truncating the text. This allows users to adjust the overlay's content display to fit their application's design and user experience requirements.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n<OverlayProvider messageTextNumberOfLines={300}>{/** child components */}</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Rendering a Channel with Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to render a Channel component in a Stream Chat React Native application. It manages channel state using useState and conditionally renders the Channel component when a channel is selected from the ChannelList. It depends on the StreamChat client being initialized and a user connected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useState } from 'react';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        {channel ? <Channel channel={channel}>{/** App components */}</Channel> : <ChannelList onSelect={setChannel} />}\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Channel Property Reference\nDESCRIPTION: This snippet references the Channel type, which is likely a custom object used to represent a channel in the application. The properties of the Channel object are defined elsewhere.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/channel-preview-title.mdx#_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<Channel />\n```\n\n----------------------------------------\n\nTITLE: Overriding createReactActivityDelegate - Android\nDESCRIPTION: This Java snippet shows how to override the `createReactActivityDelegate` method in `MainActivity.java` to use `RNGestureHandlerEnabledRootView`. This is required for older versions of `react-native-gesture-handler` (v1) to ensure proper gesture handling on Android.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage com.swmansion.gesturehandler.react.example;\n\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.ReactActivityDelegate;\nimport com.facebook.react.ReactRootView;\nimport com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return \"Example\";\n  }\n  @Override\n  protected ReactActivityDelegate createReactActivityDelegate() {\n    return new ReactActivityDelegate(this, getMainComponentName()) {\n      @Override\n      protected ReactRootView createRootView() {\n        return new RNGestureHandlerEnabledRootView(MainActivity.this);\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Custom CDN for Attachments - React Native TSX\nDESCRIPTION: This code snippet demonstrates how to configure Stream Chat React Native to upload image and file attachments to a custom CDN, instead of Stream's default CDN.  It uses the `doImageUploadRequest` and `doDocUploadRequest` props on the `Channel` component to override the default upload behavior.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  doDocUploadRequest={(file, channel) =>\n    chatClient?.sendFile(\n      `${channel._channelURL()}/file`, // replace this with your own cdn url\n      file.uri,\n      'name_for_file',\n    )\n  }\n  doImageUploadRequest={(file, channel) =>\n    chatClient?.sendFile(\n      `https://customcdnurl.com`, // replace this with your own cdn url\n      file.uri,\n      'name_for_file',\n    )\n  }\n/>\n```\n\n----------------------------------------\n\nTITLE: PollResults General Usage - stream-chat-react-native - TSX\nDESCRIPTION: This code snippet demonstrates the basic usage of the PollResults component within a React Native application using Stream Chat. It shows how to integrate it within the OverlayProvider, Chat, and Channel components, passing the message, poll, and any other optional props required for rendering the poll results.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-results.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, PollResults } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollResults message={message} poll={poll} {...otherOptionalProps} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring Metro Bundler\nDESCRIPTION: This JavaScript code snippet modifies the `metro.config.js` file to correctly resolve dependencies when linking the SDK locally. It uses helpers from `stream-chat-react-native-core` to extract linked packages and configure the resolver.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst PATH = require('path');\nconst blacklist = require('metro-config/src/defaults/exclusionList');\n\nconst extractLinkedPackages = require('stream-chat-react-native-core/metro-dev-helpers/extract-linked-packages');\n\nconst projectRoot = PATH.resolve(__dirname);\n\nconst { alternateRoots, extraNodeModules, moduleBlacklist } = extractLinkedPackages(projectRoot);\n\nmodule.exports = {\n  resolver: {\n    blacklistRE: blacklist(moduleBlacklist),\n    extraNodeModules,\n    useWatchman: false,\n  },\n  watchFolders: [projectRoot].concat(alternateRoots),\n};\n```\n\n----------------------------------------\n\nTITLE: Applying Generics to withChannelContext HOC (TSX)\nDESCRIPTION: This code snippet shows how to apply generics to the withChannelContext Higher Order Component (HOC) in Stream Chat React Native.  It's important to note that because partial inference is not supported in TypeScript, the props for the wrapped component must also be explicitly provided when using the HOC.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/typescript.mdx#_snippet_5\n\nLANGUAGE: TSX\nCODE:\n```\nwithChannelContext<\n  MyComponentProps,\n  DefaultAttachmentType,\n  { image?: string; nickName?: string },\n  DefaultCommandType,\n  DefaultEventType,\n  { isAdminMessage?: boolean }\n>(MyComponent);\n```\n\n----------------------------------------\n\nTITLE: Consuming TypingContext with useContext - TSX\nDESCRIPTION: This code snippet shows how to consume the TypingContext using the useContext hook. It imports useContext from 'react' and TypingContext from 'stream-chat-react-native'. It then uses useContext(TypingContext) to get the typing object.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/typing-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { TypingContext } from 'stream-chat-react-native';\n\nconst { typing } = useContext(TypingContext);\n```\n\n----------------------------------------\n\nTITLE: Consuming OwnCapabilitiesContext with useOwnCapabilitiesContext hook - Typescript\nDESCRIPTION: This code snippet shows how to use the `useOwnCapabilitiesContext` hook, provided by the `stream-chat-react-native` library, to access the user's capabilities within a channel.  It imports the hook and then utilizes it to directly extract capabilities like `uploadFile`, `updateAnyMessage`, and `deleteAnyMessage`. This approach offers a more streamlined way to access the context values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/own-capabilities-context.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useOwnCapabilitiesContext } from 'stream-chat-react-native';\n\nconst { uploadFile, updateAnyMessage, deleteAnyMessage } = useOwnCapabilitiesContext();\n```\n\n----------------------------------------\n\nTITLE: Overriding Translations with translationsForLanguage - Typescript\nDESCRIPTION: This code snippet demonstrates how to override default translations for specific keys using the `translationsForLanguage` option when initializing `Streami18n`. This allows you to customize the text displayed in your application for a given language.  It expects a language code and an object mapping translation keys to their overridden values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst streami18n = new Streami18n({\n  language: 'nl',\n  translationsForLanguage: {\n    'Nothing yet...': 'Nog Niet...',\n    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...', \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling Sticky Date Header and Inline Date Separator - TypeScript\nDESCRIPTION: This code snippet shows how to disable the sticky date header and inline date separators in the MessageList component within a Channel.  These features can be computationally expensive for long message lists. Disabling them via the `hideDateSeparators` and `hideStickyDateHeader` props can improve performance, especially in live-stream applications where frequent updates occur.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/performance_guide.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel hideDateSeparators={true} hideStickyDateHeader={true} />\n```\n\n----------------------------------------\n\nTITLE: Android Storage Permissions in AndroidManifest.xml - XML\nDESCRIPTION: This XML snippet demonstrates the required storage permissions for the image picker to work correctly on Android. `READ_EXTERNAL_STORAGE` and `WRITE_EXTERNAL_STORAGE` permissions are required. Also, `requestLegacyExternalStorage` attribute should be included in the application tag.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_4\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Avatar in Channel\nDESCRIPTION: This code snippet demonstrates how to customize the message avatar in the Stream Chat Channel component. It defines a custom avatar component that renders an image from the message user's image URL. This custom component is then passed as a prop to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/channel.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from 'react-native';\nimport { Channel, useMessageContext } from 'stream-chat-react-native';\n\nconst CustomAvatar = () => {\n  const { message } = useMessageContext();\n\n  return <Image source={{ uri: message.user?.image }} />;\n};\n\n<Channel MessageAvatar={CustomAvatar} />;\n```\n\n----------------------------------------\n\nTITLE: Consuming AttachmentPickerContext using useAttachmentPickerContext hook\nDESCRIPTION: This snippet demonstrates how to consume the AttachmentPickerContext using the useAttachmentPickerContext hook provided by the stream-chat-react-native library. It imports the hook and uses it to access the openPicker and closePicker functions, which are used to control the visibility of the attachment picker bottom sheet.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/attachment-picker-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAttachmentPickerContext } from 'stream-chat-react-native';\n\nconst { openPicker, closePicker } = useAttachmentPickerContext();\n```\n\n----------------------------------------\n\nTITLE: Initializing OverlayProvider with Stream Chat - TSX\nDESCRIPTION: This code snippet demonstrates the basic usage of the OverlayProvider component in Stream Chat React Native. It wraps the Chat component, which in turn contains the ChannelList component.  It shows how to initialize the StreamChat client and integrate the OverlayProvider into the application's component tree. The apiKey must be a valid Stream Chat API key.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/overlay_provider.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Loading Channel Around Message in React Native\nDESCRIPTION: This snippet shows how to call the loadChannelAroundMessage function. Requires a messageId to load channel with messages around it in history. The messageId prop should be passed as an argument to the function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channel-context.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nloadChannelAroundMessage({\n  messageId,\n});\n```\n\n----------------------------------------\n\nTITLE: ChannelScreen Component with useFocusEffect - React Native\nDESCRIPTION: This component represents the main Channel screen. It utilizes the `useFocusEffect` hook from React Navigation to reset the selected thread state when the screen gains focus. This approach ensures that the ImageGallery is updated correctly when navigating back from the Thread screen to the main Channel screen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ChannelScreen = () => {\n  const { channel } = useAppChannel();\n  const [selectedThread, setSelectedThread] = useState<MessageType>();\n\n  useFocusEffect(() => {\n    setSelectedThread(undefined);\n  });\n\n  return (\n    <Channel channel={channel} thread={selectedThread}>\n      <MessageList\n        onThreadSelect={thread => {\n          setSelectedThread(thread);\n          navigation.navigate('ThreadScreen', { thread });\n        }}\n      />\n      <MessageInput />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing PreviewAvatar using prop drilling - v2 - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the PreviewAvatar component in Stream Chat React Native v2 using prop drilling. It involves creating a CustomAvatar component and a PreviewWithCustomAvatar component that renders ChannelPreviewMessenger with the custom PreviewAvatar. This approach requires passing the Preview component as a prop to ChannelList.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/upgrade_helper.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Chat, Channel, ChannelList, ChannelPreviewMessenger } from 'stream-chat-react-native';\n\nconst CustomAvatar = props => {\n  /* custom component */\n};\nconst PreviewWithCustomAvatar = props => {\n  return <ChannelPreviewMessenger {...props} PreviewAvatar={CustomAvatar} />;\n};\n\n// In your rendering logic\n<Chat client={client}>\n  <ChannelList Preview={PreviewWithCustomAvatar} />\n</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Using Gallery Component in Stream Chat React Native\nDESCRIPTION: Demonstrates how to use the Gallery component within a Channel component in Stream Chat React Native. It shows how to import the necessary modules and pass the Gallery component as a prop to the Channel component, enabling customization of the image gallery.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/gallery.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, Gallery } from 'stream-chat-react-native';\n\n<Channel Gallery={() => <Gallery preventPress />}\n```\n\n----------------------------------------\n\nTITLE: Overriding Handlers on Channel Component - React Native\nDESCRIPTION: This code snippet shows how to override default touch handlers on the Channel component such as onLongPress, onPress, onPressIn, and onDoubleTap. It provides access to handler payloads and allows for custom actions based on user interaction with messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/package/CHANGELOG.md#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n    ...\n    onLongPressMessage={({\n      actionHandlers: {\n          deleteMessage, // () => Promise<void>;\n          editMessage, // () => void;\n          reply, // () => void;\n          resendMessage, // () => Promise<void>;\n          showMessageOverlay, // () => void;\n          toggleBanUser, // () => Promise<void>;\n          toggleMuteUser, // () => Promise<void>;\n          toggleReaction, // (reactionType: string) => Promise<void>;\n      },\n      defaultHandler, // () => void\n      event, // any event object corresponding to touchable feedback\n      emitter, // which component trigged this touchable feedback e.g. card, fileAttachment, gallery, message ... etc\n      message // message object on which longPress occurred\n    }) => {\n      /** Your custom action */\n    }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Conditional Border Display Logic - TypeScript\nDESCRIPTION: This snippet demonstrates the logic for determining whether to display borders around a deleted message. It checks if the message contains only emojis and isn't a quoted message, or if there are other attachments.  This logic is used to set the `noBorder` prop. This helps optimize the UI by removing borders when they are not needed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-deleted.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst noBorder = (onlyEmojis && !message.quoted_message) || !!otherAttachments.length;\n```\n\n----------------------------------------\n\nTITLE: Rendering UrlPreview Component\nDESCRIPTION: This snippet renders the UrlPreview component. This component displays a preview of a URL contained in a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n<UrlPreview />\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User\nDESCRIPTION: This snippet demonstrates how to disconnect a user from the Stream Chat API using the `disconnectUser` function. This closes the WebSocket connection.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Example of iOS Push Notification Payload (JSON)\nDESCRIPTION: This is an example of the push notification payload structure received on iOS devices. It includes a 'data' field containing information about the message and channel, and a 'notification' field used by the Firebase SDK to display the message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v2.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sender\": \"stream.chat\",\n    \"type\": \"message.new\",\n    \"version\": \"v2\",\n    \"id\": \"d152f6c1-8c8c-476d-bfd6-59c15c20548a\",\n    \"channel_type\": \"messaging\",\n    \"channel_id\": \"company-chat\",\n    \"cid\": \"messaging:company-chat\"\n  },\n  // the notification field is present only on iOS by default and not on Android\n  \"notification\": {\n    \"title\": \"Message from user\",\n    \"body\": \"Hello\"\n  }\n  // other fields..\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Additional TextInput Props on Channel Component (React Native)\nDESCRIPTION: This snippet illustrates how to pass additional props to the underlying React Native `TextInput` component within the Stream Chat Channel.  It uses `useMemo` to create a memoized object containing the additional props (e.g., `selectionColor`) and passes it to the `additionalTextInputProps` prop of the Channel component. Make sure to memoize or pass static reference for this object to avoid performance issues.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst additionalTextInputProps = useMemo(() => {\n  selectionColor: 'pink';\n});\n\n// Render UI part\n<Channel channel={channel} additionalTextInputProps={additionalTextInputProps}>\n  ...\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Open Google Maps with Coordinates - JavaScript\nDESCRIPTION: This JavaScript function generates a Google Maps URL from given latitude and longitude coordinates and opens it using React Native's Linking API. It checks if the URL can be opened and logs an error if not supported.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_6\n\nLANGUAGE: js\nCODE:\n```\nconst goToGoogleMaps = (lat, long) => {\n  const url = `https://www.google.com/maps/search/?api=1&query=${lat},${long}`;\n\n  Linking.canOpenURL(url).then(supported => {\n    if (supported) {\n      Linking.openURL(url);\n    } else {\n      console.log(`Don't know how to open URI: ${url}`);\n    }\n  });\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Streami18n with custom translations - JavaScript\nDESCRIPTION: This code snippet demonstrates how to initialize the Streami18n class with custom translations for a specific language (Dutch in this case). It shows how to override default translations for certain keys.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_13\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst streami18n =new Streami18n({\n  language: 'nl',\n  translationsForLanguage: {\n    'Nothing yet...': 'Nog Niet...',\n    '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} en {{ secondUser }} zijn aan het typen...', \n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Loading Channel At Message - TSX\nDESCRIPTION: This code snippet shows how to use the `loadChannelAtMessage` function to reload a channel at a particular message in history. It specifies the number of messages to load before and after the target message, using the `messageId`. This function is available via ChannelContext.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/channel_context.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nloadChannelAtMessage({\n  before: 10, // Number of messages to load before messageId\n  after: 10, // Number of messages to load after messageId\n  messageId,\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Message Sending - React Native\nDESCRIPTION: This code snippet demonstrates how to configure the `asyncMessagesMultiSendEnabled` prop on the `Channel` component. This prop controls whether audio messages are sent immediately after recording or stacked up in the composer to be sent together with other attachments and text.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/audio-messages-support.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel asyncMessagesMultiSendEnabled audioRecordingEnabled />\n```\n\n----------------------------------------\n\nTITLE: Install Expo AV (Expo)\nDESCRIPTION: This command installs the expo-av package using npx expo install for projects initialized with Expo. This is an optional dependency to enable playing video and audio attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-av\n```\n\n----------------------------------------\n\nTITLE: Custom DateHeader using Context - React Native\nDESCRIPTION: This code snippet demonstrates how to create a custom `DateHeader` component in Stream Chat for React Native that utilizes the `usePaginatedMessageListContext` hook to access the list of messages and display the name of the last sender. This illustrates how to access contextual data within custom components to create dynamic UI elements.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/custom_components.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\n<Channel\n  ...\n  DateHeader={MySenderComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Initializing ChannelList with Stream Chat React Native\nDESCRIPTION: This snippet initializes a ChannelList component within a Stream Chat React Native application. It imports necessary components from the stream-chat-react-native library and uses them to render a list of channels the user has access to. It assumes that the StreamChat client has already been instantiated and a user has been connected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Customizing FileIcon size in Channel component - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the size of the FileIcon component within the Channel component using the FileAttachmentIcon prop. It imports the Channel and FileIcon components from the stream-chat-react-native library and renders the Channel component, providing a custom FileIcon with a specified size. The mimeType prop is not demonstrated in this example but is required for the FileIcon component to function correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/file_icon.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, FileIcon } from 'stream-chat-react-native';\n\n<Channel FileAttachmentIcon={() => <FileIcon size={40} />}\n```\n\n----------------------------------------\n\nTITLE: Adjusting State Update Throttling - TypeScript\nDESCRIPTION: This code snippet demonstrates how to adjust the throttling interval for state updates in the Channel component of the React Native Chat SDK. The `newMessageStateUpdateThrottleInterval` prop controls throttling for new messages, while `stateUpdateThrottleInterval` controls throttling for other channel updates. Setting these props helps to optimize performance for high-traffic applications by reducing the frequency of state updates.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/performance_guide.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel newMessageStateUpdateThrottleInterval={2000} stateUpdateThrottleInterval={800} />\n```\n\n----------------------------------------\n\nTITLE: Selector Example for ThreadManagerState\nDESCRIPTION: This TypeScript snippet demonstrates how to create a selector function that returns a named object containing specific properties from the ThreadManagerState. Selectors should return named objects to improve code readability and maintainability. It extracts `unreadThreadsCount`, `active`, and `lastConnectionDownAt` from the `nextValue` parameter.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst selector = (nextValue: ThreadManagerState) => ({\n  unreadThreadsCount: nextValue.unreadThreadsCount,\n  active: nextValue.active,\n  lastConnectionDownAt: nextvalue.lastConnectionDownAt,\n});\n```\n\n----------------------------------------\n\nTITLE: Overriding Haptic Feedback Handler in React Native\nDESCRIPTION: This code snippet demonstrates how to override the default haptic feedback handler in Stream Chat for React Native. It imports the `registerNativeHandlers` function and then calls it with an object containing a new implementation for `triggerHaptic` that disables haptic feedback by returning null. This is done outside of the component lifecycle to avoid unnecessary re-registrations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/native_handlers.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { registerNativeHandlers } from 'stream-chat-react-native';\n\nregisterNativeHandlers({\n  triggerHaptic: () => null,\n});\n```\n\n----------------------------------------\n\nTITLE: Handling onPressMessage in Channel Component (TSX)\nDESCRIPTION: This code snippet demonstrates how to override the default message press handler in the Stream Chat React Native Channel component. It shows how to access the additionalInfo prop to get user details from text mentions or URLs from cards and text links. It also calls the default handler for other cases.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/core-components/channel/props/on_press_message.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n    <Channel\n      onPressMessage={({ additionalInfo, defaultHandler, emitter }) => {\n\n          if (emitter === 'textMention') {\n            console.log(additionalInfo?.user);\n            return;\n          }\n\n          if (emitter === 'card' || emitter === 'textLink') {\n            console.log(additionalInfo?.url);\n            return;\n          }\n\n          defaultHandler?.();\n      }}\n    >\n```\n\n----------------------------------------\n\nTITLE: Setting OverlayProvider bottomInset - TSX\nDESCRIPTION: This snippet demonstrates how to use the `bottomInset` prop on the `OverlayProvider` component in Stream Chat for React Native. This prop is used to adjust the height of the image picker gallery to account for elements like Safe Areas or Tab Bars that might be present below the `MessageInput`. Providing a number value adjusts the gallery height accordingly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider bottomInset={/** number */}>{/* Inner component */}</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Applying a Theme - JSX\nDESCRIPTION: This snippet shows how to apply a custom theme to the `OverlayProvider` component in Stream Chat React Native. The theme object is passed as a prop to the `OverlayProvider`, which then merges it with the default theme. This allows you to customize the appearance of the chat components while retaining the default styles for other elements.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/theme.mdx#_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\nimport { Chat, ChannelList, OverlayProvider } from 'stream-chat-react-native';\n\nconst style = { style: theme };\n\nexport const App = () => (\n  <OverlayProvider value={style}>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n\n```\n\n----------------------------------------\n\nTITLE: Running Android App (Expo)\nDESCRIPTION: This bash command runs the Android application using Expo.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_39\n\nLANGUAGE: Bash\nCODE:\n```\nyarn run android\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Google URL to Android build.gradle\nDESCRIPTION: This Java code shows how to add the Google Maven repository to the `allprojects` block in `android/build.gradle`. This is required to resolve dependencies hosted on Google's Maven repository. Ensure that the URL is correctly specified for dependency resolution during the build process.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nallprojects {\n  repositories {\n    mavenLocal()\n    maven {\n      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n      url(\"$rootDir/../node_modules/react-native/android\")\n    }\n    maven {\n      // Android JSC is installed from npm\n      url(\"$rootDir/../node_modules/jsc-android/dist\")\n    }\n\n    google()\n    maven { url 'https://maven.google.com' }\n    maven { url 'https://www.jitpack.io' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Gesture Handler\nDESCRIPTION: This TypeScript code demonstrates importing the `react-native-gesture-handler` library at the top of the app's entry file. This import is crucial for enabling gesture handling functionality within the React Native application, allowing components to respond to touch events and gestures correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Applying Generics to MessageList Component (TSX)\nDESCRIPTION: This code snippet shows how to apply generics directly to the MessageList component in Stream Chat React Native.  The same generics used when initializing the client can be applied here to ensure type safety for custom data fields. This ensures custom components receive the correct types.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/typescript.mdx#_snippet_3\n\nLANGUAGE: TSX\nCODE:\n```\n<MessageList<\n  DefaultAttachmentType,\n  { image?: string; nickName?: string },\n  DefaultCommandType,\n  DefaultEventType,\n  { isAdminMessage?: boolean }\n>\n  onThreadSelect={thread => {\n    /** Set thread and navigate to thread screen */\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using AutoCompleteSuggestionHeader with Channel Component - TSX\nDESCRIPTION: This code snippet demonstrates how to use the `AutoCompleteSuggestionHeader` component with the `Channel` component in Stream Chat React Native. It imports the necessary components and renders a custom header using `AutoCompleteSuggestionHeaderComponent`. The custom header is then passed to the `Channel` component using the `AutoCompleteSuggestionHeader` prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/autocomplete_suggestion_header.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionHeader } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionHeaderComponent = () => <AutoCompleteSuggestionHeader />\n\n<Channel AutoCompleteSuggestionHeader={AutoCompleteSuggestionHeaderComponent} />\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Restarting Yarn\nDESCRIPTION: Commands to clear out node_modules, yarn.lock, and the Metro cache before re-installing dependencies and starting the application. This resolves dependency issues related to symlinking.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf node_modules\nrm yarn.lock\nyarn install\nwatchman watch-del-all\nyarn start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Cleaning install and reset cache\nDESCRIPTION: These commands remove existing node_modules, yarn lock file, watchman watches, then reinstall the dependencies and start the metro bundler with cache reset. This is the final step to ensure the local SDK changes are reflected in your application after configuring the metro bundler.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_8\n\nLANGUAGE: Shell\nCODE:\n```\nrm -rf node_modules\nrm yarn.lock\nyarn install\nwatchman watch-del-all\nyarn start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Cloning SDK Repository with Git\nDESCRIPTION: Clones the stream-chat-react-native repository from GitHub to your local machine, allowing you to work on the SDK locally. Replace {github-user-id} with your GitHub username after forking the repository.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ngit clone https://github.com/{github-user-id}/stream-chat-react-native.git\n```\n\n----------------------------------------\n\nTITLE: Theming MessageAvatar Size in React Native\nDESCRIPTION: This snippet shows how to customize the size of the MessageAvatar component using the stream-chat-react-native theming system.  A theme object is defined, and within it, the BASE_AVATAR_SIZE property under the avatar key is set to 30.  This allows for consistent styling across the application. The `theme` object would then be used to configure the chat components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_avatar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  avatar: {\n    BASE_AVATAR_SIZE: 30,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelAvatar in ChannelList - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the ChannelAvatar component within the ChannelList component in a React Native application using stream-chat-react-native. It adds an onPress handler to the avatar, allowing for custom actions when the avatar is pressed. The channel prop is required to render the avatar.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/channel_avatar.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { ChannelList, ChannelAvatar } from 'stream-chat-react-native';\n\n<ChannelList\n  PreviewAvatar={({ channel }) => (\n    <TouchableOpacity\n      disallowInterruption={true}\n      onPress={() => {\n        /** Handler for press action */\n      }}\n    >\n      <ChannelAvatar channel={channel} />\n    </TouchableOpacity>\n  )}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Filtering channels using channelRenderFilterFn - TypeScript\nDESCRIPTION: This code snippet demonstrates how to use the `channelRenderFilterFn` prop to filter channels that are rendered in a `ChannelList` component.  It takes an array of channels as input and returns a filtered array based on custom filtering logic. This prevents unintended channel updates across multiple lists.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/multiple_channel_lists.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst customChannelFilterFunction = (channels: Channel[]) => {\n  return channels.filter(/** your custom filter logic */);\n};\n\n<ChannelList channelRenderFilterFn={customChannelFilterFunction} filters={filters} />;\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Context in Custom Component - TSX\nDESCRIPTION: This snippet shows how to access the `PaginatedMessageListContext` within a custom component to retrieve the latest message sender's name. It then displays this name instead of the default `DateHeader`. It requires the `usePaginatedMessageListContext` hook and the `Text` component from React Native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/custom_components.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\n<Channel\n  ...\n  DateHeader={MySenderComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Rendering Generic Poll Button in React Native\nDESCRIPTION: This code snippet demonstrates how to render a GenericPollButton component from the stream-chat-react-native library. It shows how to import the component and define a simple button with a title and an onPress handler that logs a message to the console when pressed. This component requires the stream-chat-react-native package to be installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GenericPollButton } from 'stream-chat-react-native';\n\nconst button = () => <GenericPollButton title='Button title' onPress={() => console.log('I got pressed !')} />;\n```\n\n----------------------------------------\n\nTITLE: Filtering Video Attachments from Message\nDESCRIPTION: This code snippet filters an array of attachments from a Stream Chat message, selecting only those where the 'type' property is 'video' and the 'og_scrape_url' property is falsy (meaning it does not exist or is false).  The 'message' object is expected to have an 'attachments' property, which is an array of attachment objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/message-context/videos.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst videos = message.attachments.filter(a => a.type === 'video' && !a.og_scrape_url);\n```\n\n----------------------------------------\n\nTITLE: Rendering ScrollToBottomButton Component\nDESCRIPTION: This snippet renders the ScrollToBottomButton component. This component allows users to scroll to the bottom of the message list. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_24\n\nLANGUAGE: jsx\nCODE:\n```\n<ScrollToBottomButton />\n```\n\n----------------------------------------\n\nTITLE: Consuming OwnCapabilitiesContext using useContext - TSX\nDESCRIPTION: Demonstrates how to consume the OwnCapabilitiesContext using the useContext hook provided by React. It retrieves the uploadFile, updateAnyMessage, and deleteAnyMessage capabilities.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/own_capabilities_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { OwnCapabilitiesContext } from 'stream-chat-react-native';\n\nconst { uploadFile, updateAnyMessage, deleteAnyMessage } = useContext(OwnCapabilitiesContext);\n```\n\n----------------------------------------\n\nTITLE: Adding Wallpaper Selection Button to ChannelScreen - React Native\nDESCRIPTION: This code snippet shows how to add a button to the `ChannelScreen` that navigates the user to the `WallpaperOverviewScreen` to select a new background image. It uses `useNavigation` from `react-navigation/native` to handle navigation.  It also includes styling for the button.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-background.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useNavigation } from '@react-navigation/native';\nimport { Channel, MessageInput, MessageList, ThemeProvider } from 'stream-chat-react-native';\nimport { Pressable, Text, StyleSheet } from 'react-native';\n\nconst ChannelScreen = ({ channel }) => {\n  const { navigate } = useNavigation();\n  const handleMenuOnPress = () => navigate('WallpaperOverviewScreen', { channelId: channel?.id });\n\n  return (\n    <ThemeProvider style={theme}>\n      <Channel channel={channel}>\n        <ChannelBackgroundView channelId={channel?.id} style={{ flex: 1 }}>\n          <Pressable style={styles.menuButton} onPress={handleMenuOnPress}>\n            <Text>🎨</Text>\n          </Pressable>\n          <MessageList />\n          <MessageInput />\n        </ChannelBackgroundView>\n      </Channel>\n    </ThemeProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  menuButton: {\n    position: 'absolute',\n    right: 0,\n    top: 0,\n    backgroundColor: 'rgba(255,87,56,0.65)',\n    borderRadius: 36,\n    padding: 16,\n    margin: 16,\n    alignItems: 'center',\n    zIndex: 10,\n  },\n});\n\nexport const theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transparent',\n    },\n  },\n};\n\n```\n\n----------------------------------------\n\nTITLE: Install Firebase React Native Modules\nDESCRIPTION: Installs the necessary React Native Firebase modules for app and messaging functionality using yarn package manager. This allows the React Native app to interact with Firebase services.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/push-notifications-v1.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install & setup the app module\nyarn add @react-native-firebase/app\n\n# Install the messaging module\nyarn add @react-native-firebase/messaging\n```\n\n----------------------------------------\n\nTITLE: Custom timestamp formatting with simple format string - JSON\nDESCRIPTION: This JSON snippet demonstrates customizing date and time formatting by providing a simple format string. It configures `MessageTimestamp` to use the 'LT' (localized time) format.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/date-time-formatting.mdx#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"timestamp/MessageTimestamp\": \"{{ timestamp | timestampFormatter(format: LT) }}\"\n```\n\n----------------------------------------\n\nTITLE: Adding a New Language Translation - Typescript\nDESCRIPTION: This snippet demonstrates how to add a new language translation to the Stream Chat React Native SDK using the `registerTranslation` method of the `Streami18n` class. It allows to specify translations for specific keys.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\nstreami18n.registerTranslation('pl', {\n  'Copy Message': 'Kopiuj wiadomość',\n  'Delete Message': 'Usuń wiadomość',\n  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} i {{ secondUser }} piszą...',\n});\n```\n\n----------------------------------------\n\nTITLE: Message Press Handler Function in TypeScript\nDESCRIPTION: This TypeScript code defines a function (`onPressMessage`) to handle taps on messages within a Stream Chat channel. If the tapped message contains a 'location' attachment, it navigates to a 'MapDetail' screen, passing the message ID, latitude, longitude, and ended_at properties as parameters. This function is intended to be used as the `onPressMessage` prop of the `Channel` component in `stream-chat-react-native`, enabling navigation to a detailed map view upon tapping a location message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nconst onPressMessage: NonNullable<\n  React.ComponentProps<typeof Channel<StreamChatGenerics>>['onPressMessage']\n> = payload => {\n  const { message, defaultHandler, emitter } = payload;\n  if (emitter === 'messageContent') {\n    if (message?.attachments?.[0]?.type === 'location') {\n      // here we use react-navigation to define screens\n      // and we pass the initial data to the screen\n      navigation.navigate('MapDetail', {\n        messageId: message.id,\n        latitude: message.attachments[0].latitude!,\n        longitude: message.attachments[0].longitude!,\n        ended_at: message.attachments[0].ended_at,\n      });\n    }\n  }\n  defaultHandler?.();\n};\n```\n\n----------------------------------------\n\nTITLE: Install React Native Document Picker (RN CLI)\nDESCRIPTION: This command installs the react-native-document-picker package using yarn for projects initialized with React Native CLI. This is an optional dependency to share file attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-document-picker\n```\n\n----------------------------------------\n\nTITLE: User ID Array Definition - TypeScript\nDESCRIPTION: This code snippet represents an array of user IDs, specifically those mentioned in a message within the MessageInput component.  The array contains strings, where each string is a unique user identifier. It's used to track which users are being mentioned in the message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/message-input-context/mentioned_users.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n['vishal-user-id', 'jaap-user-id'];\n```\n\n----------------------------------------\n\nTITLE: Adding Maven Repository - Android\nDESCRIPTION: This Java snippet adds the Google Maven repository to the `android/build.gradle` file.  This repository is required to resolve dependencies for the Android build process.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nallprojects {\n  repositories {\n    mavenLocal()\n    maven {\n      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n      url(\"$rootDir/../node_modules/react-native/android\")\n    }\n    maven {\n      // Android JSC is installed from npm\n      url(\"$rootDir/../node_modules/jsc-android/dist\")\n    }\n\n    google()\n    maven { url 'https://maven.google.com' }\n    maven { url 'https://www.jitpack.io' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageFooter in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the `MessageFooter` component within a `Channel` in Stream Chat React Native. It overrides the default date formatting with a custom `getDateTimeStamp` function.  The `useMemo` hook is used to memoize the formatted date. The custom MessageFooter is passed to the Channel component via the MessageFooter prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-footer.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, MessageFooter } from 'stream-chat-react-native';\n\nconst getDateTimeStamp = message => `My new date is ${message.created_at}`;\n\nconst CustomMessageFooter = ({ message }) => {\n  const dateFormatted = useMemo(() => getDateTimeStamp(message), [message.created_at]);\n\n  <MessageFooter formattedDate={dateFormatted} />;\n};\n\n<Channel MessageFooter={CustomMessageFooter} />;\n```\n\n----------------------------------------\n\nTITLE: Consuming TypingContext with useTypingContext - TSX\nDESCRIPTION: This code snippet shows how to consume the TypingContext using the useTypingContext hook. It imports useTypingContext from 'stream-chat-react-native'. It then calls useTypingContext() to get the typing object.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/typing-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTypingContext } from 'stream-chat-react-native';\n\nconst { typing } = useTypingContext();\n```\n\n----------------------------------------\n\nTITLE: Accessing the Theme - TypeScript\nDESCRIPTION: This snippet demonstrates how to access the theme within custom components using the useTheme hook from stream-chat-react-native. It retrieves the black color value from the theme and utilizes destructuring for easy access.  The code emphasizes that it is recommended not to pass theme variables through custom memoization checks to ensure UI changes are reflected.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/theming.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n  theme: {\n    colors: {\n      black },\n  },\n} = useTheme();\n\n```\n\n----------------------------------------\n\nTITLE: Replacing DateHeader with a custom component - React Native\nDESCRIPTION: This code snippet shows how to replace the default DateHeader with a custom component that renders a text string including a prop called dateString. The new component takes the place of the original and displays custom information.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/custom_components.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyNewComponent = ({ dateString }) => <Text>{`Hello World: ${dateString}`}</Text>;\n\n<Channel\n  ...\n  DateHeader={MyNewComponent}\n>\n\n```\n\n----------------------------------------\n\nTITLE: Customize DateHeader with a Text Component - React Native\nDESCRIPTION: This snippet shows how to replace the default DateHeader with a custom component that displays a greeting message along with the date string.  It uses the `dateString` prop passed to the custom DateHeader component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/custom_components.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyNewComponent = ({ dateString }) => <Text>{`Hello World: ${dateString}`}</Text>;\n\n<Channel\n  ...\n  DateHeader={MyNewComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Overriding Giphy Attachment Component in JSX\nDESCRIPTION: This JSX snippet shows how to override the default Giphy component with a custom implementation.  The component receives the attachment and onPressIn props, allowing access to attachment details and handling press events.  The component logs the attachment properties and returns a custom UI. Dependencies include React.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomGiphy = ({ attachment, onPressIn }) => {\n  console.log(attachment.type);\n  console.log(attachment.actions)\n  console.log(attachment.image_url)\n  console.log(attachment.thumb_url)\n  console.log(attachment.title)\n  console.log(attachment.type)\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Chat Component (Screen Level) - TSX\nDESCRIPTION: This snippet demonstrates using the Chat component at the screen level, separate from the OverlayProvider which is at the App level. This organization offers flexibility in structuring the chat functionality within specific parts of an application. The client prop connects the Chat component to the Stream Chat instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\nimport { Screen } from './Screen';\n\nexport const App = () => (\n  <OverlayProvider>\n    <Screen />\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Update Stream Chat app settings with Firebase credentials\nDESCRIPTION: This snippet demonstrates how to update the Stream Chat app settings with Firebase credentials using the Stream Chat API. It reads the Firebase credentials from a JSON file and includes them in the `push_config` and `firebase_config` objects when calling `client.updateAppSettings`.  `fs.readFileSync` is used for reading the file.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/push_notifications_v2.mdx#_snippet_1\n\nLANGUAGE: js\nCODE:\n```\nconst client = StreamChat.getInstance('api_key', 'api_secret');\nclient.updateAppSettings({\n  push_config: {\n    version: 'v2'\n  },\n  firebase_config: {\n    credentials_json: fs.readFileSync(\n      './firebase-credentials.json',\n      'utf-8',\n    ),\n });\n```\n\n----------------------------------------\n\nTITLE: Rendering Vote Button in React Native\nDESCRIPTION: This code snippet shows how to render a VoteButton component from the stream-chat-react-native library.  The onPress handler receives message and poll objects, logging their IDs to the console when pressed. Requires stream-chat-react-native package and 'option' prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport { VoteButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <VoteButton\n    option={option}\n    onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)}\n  />\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamChat Client with Generics (TSX)\nDESCRIPTION: This code snippet demonstrates how to initialize the StreamChat client with generics in TypeScript. It shows how to specify types for AttachmentType, ChannelType, CommandType, EventType, MessageType, ReactionType, and UserType, allowing for type-safe access to custom data fields. Requires stream-chat-js.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/typescript.mdx#_snippet_0\n\nLANGUAGE: TSX\nCODE:\n```\nconst client = StreamChat.getInstance<\n  AttachmentType,\n  ChannelType,\n  CommandType,\n  EventType,\n  MessageType,\n  ReactionType,\n  UserType\n>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Customizing OverlayReactionList in OverlayProvider - TSX\nDESCRIPTION: This example illustrates how to override and customize components rendered within the OverlayProvider. Specifically, it shows how to replace the OverlayReactionList with a function that returns null, effectively removing it from the overlay. This allows for complete UI customization of the overlay components without directly modifying the SDK's source code.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/overlay_provider.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider OverlayReactionList={() => null}>\n```\n\n----------------------------------------\n\nTITLE: Consuming TranslationContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the TranslationContext using the useContext hook in a React component. It imports TranslationContext from stream-chat-react-native and uses useContext to access the translation functions 't' and 'tDateTimeParser'. These functions can then be used to translate text and format dates/times according to the user's locale.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/translation-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { TranslationContext } from 'stream-chat-react-native';\n\nconst { t, tDateTimeParser } = useContext(TranslationContext);\n```\n\n----------------------------------------\n\nTITLE: Rendering Chat Component within a Screen\nDESCRIPTION: This snippet shows how to render the `Chat` component locally within a specific screen. This approach is suitable when connection handling and theming are less of a concern at the app level.  It utilizes the `StreamChat` client instance to connect to the chat service.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/stream_chat_with_navigation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Wrap Entry Point with GestureHandlerRootView - JSX\nDESCRIPTION: This code snippet illustrates how to wrap your application's entry point with `<GestureHandlerRootView>` from react-native-gesture-handler. This wrapper is essential for gesture handling to work correctly on Android.  `OverlayProvider` appears to be related to the stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_13\n\nLANGUAGE: JSX\nCODE:\n```\nimport { GestureHandlerRootView } from 'react-native-gesture-handler';\nimport { OverlayProvider } from 'stream-chat-react-native';\n\nexport default function App() {\n  return (\n    <GestureHandlerRootView>\n      <OverlayProvider>{/* Your app code goes here */}</OverlayProvider>\n    </GestureHandlerRootView>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Forcing Message Alignment to the Left (TSX)\nDESCRIPTION: This code snippet demonstrates how to force all messages in a channel to align to the left side, overriding the default behavior where sent messages appear on the right. This is achieved by using the `forceAlignMessages` prop on the `Channel` component and setting its value to 'left'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  forceAlignMessages='left'\n  keyboardVerticalOffset={headerHeight}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Running the app on iOS with Yarn\nDESCRIPTION: Runs the Expo Chat example application on the iOS platform using the yarn command.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/ExpoMessaging/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Requesting Legacy External Storage - XML\nDESCRIPTION: This snippet demonstrates how to include the `requestLegacyExternalStorage` attribute within the `application` tag in `AndroidManifest.xml`.  This attribute is crucial for supporting older Android devices that require legacy storage access. Without this, some devices may fail to load images.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<application\n  android:requestLegacyExternalStorage=\"true\"\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Firebase Modules\nDESCRIPTION: This command installs the necessary React Native Firebase modules for push notifications: `@react-native-firebase/app` for core Firebase functionality and `@react-native-firebase/messaging` for handling push notifications. The installation is done using yarn.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/push_notifications.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install & setup the app module\nyarn add @react-native-firebase/app\n\n# Install the messaging module\nyarn add @react-native-firebase/messaging\n```\n\n----------------------------------------\n\nTITLE: Applying Generics to MessageList Component (TSX)\nDESCRIPTION: This code snippet demonstrates how to apply generics to the `MessageList` component in stream-chat-react-native. By specifying the `StreamChatGenerics` type, you ensure that the component correctly handles custom data types, enhancing type safety and allowing the custom `Message` component to also utilize the generics.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/typescript.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<MessageList<StreamChatGenerics>\n  onThreadSelect={thread => {\n    /** Set thread and navigate to thread screen */\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelsContext with useContext - Typescript\nDESCRIPTION: This code snippet demonstrates how to consume the ChannelsContext using the useContext hook in a React functional component. It imports the necessary modules and accesses the 'channels' and 'reloadList' properties from the context. These properties allow access to channel data and trigger a list reload, respectively.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channels-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChannelsContext } from 'stream-chat-react-native';\n\nconst { channels, reloadList } = useContext(ChannelsContext);\n```\n\n----------------------------------------\n\nTITLE: Rendering Location Card\nDESCRIPTION: This JSX component, `LocationCard`, renders a static map image for a location attachment using the Google Maps Static API. When the user taps the image, it calls the `goToGoogleMaps` function to open the location in the Google Maps application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_12\n\nLANGUAGE: jsx\nCODE:\n```\nconst LocationCard = ({ type, latitude, longitude }) => {\n  if (type === 'location') {\n    const mapApi = prepareStaticMapUrl(latitude, longitude);\n    console.log(mapApi);\n    return (\n      <TouchableOpacity onPress={() => goToGoogleMaps(latitude, longitude)}>\n        <Image source={{ uri: mapApi }} style={{ height: 200, width: 300 }} />\n      </TouchableOpacity>\n    );\n  }\n};\n\n```\n\n----------------------------------------\n\nTITLE: Configuring iOS Photo Library Permissions in Info.plist (RN CLI)\nDESCRIPTION: This XML snippet demonstrates how to configure permissions in the `Info.plist` file to allow the application to access the photo library on iOS using React Native CLI. It includes the necessary keys for photo library usage and adding photos.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_26\n\nLANGUAGE: XML\nCODE:\n```\n<key>NSPhotoLibraryUsageDescription</key>\n<string>$(PRODUCT_NAME) would like access to your photo gallery to share image in a message.</string>\n<key>NSPhotoLibraryAddUsageDescription</key>\n<string>$(PRODUCT_NAME) would like to save photos to your photo gallery after downloading from a message.</string>\n```\n\n----------------------------------------\n\nTITLE: Import Gesture Handler - TypeScript\nDESCRIPTION: This code snippet shows how to import the react-native-gesture-handler package at the top of your entry file (e.g., App.tsx or index.js). This is a crucial step for the gesture handler to function correctly. It initializes the necessary modules before any other application code runs.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_12\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport 'react-native-gesture-handler';\nimport { AppRegistry } from 'react-native';\n\nimport App from './App';\nimport { name as appName } from './app.json';\n\nAppRegistry.registerComponent(appName, () => App);\n```\n\n----------------------------------------\n\nTITLE: Checking for Moderator Role - TSX\nDESCRIPTION: This code snippet shows how to determine if the current user has a 'moderator' role, either at the application or channel level. It checks the channel's membership role for 'channel_moderator' or 'moderator'.  It requires access to the channel object, specifically its state and membership properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/channel_context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst isModerator =\n  channel?.state.membership.role === 'channel_moderator' || channel?.state.membership.role === 'moderator';\n```\n\n----------------------------------------\n\nTITLE: Add Peer Dependencies using Yarn\nDESCRIPTION: This command adds various peer dependencies required by Stream Chat React Native to your project using Yarn. These dependencies provide features like blur effects, camera roll access, network information, file system access, and more.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/getting_started.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-community/blur @react-native-community/cameraroll @react-native-community/netinfo @stream-io/flat-list-mvcp react-native-document-picker react-native-fs react-native-gesture-handler react-native-haptic-feedback react-native-haptic-feedback react-native-image-crop-picker react-native-image-resizer react-native-reanimated react-native-safe-area-context react-native-share react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Opening Poll Creation Dialog - React Native\nDESCRIPTION: This snippet configures a button within the Channel component to open a custom poll creation dialog using React Navigation. It utilizes the `navigation.navigate` function to transition to the 'CreatePollScreen' and passes the `sendMessage` function as a parameter to allow the creation dialog to send new polls.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nopenPollCreationDialog={({ sendMessage }) => navigation.navigate('CreatePollScreen', { sendMessage })}\n```\n\n----------------------------------------\n\nTITLE: Mapping Reactions from Message - TSX\nDESCRIPTION: This code snippet demonstrates how to map the latest reactions from a message object to an array of reaction objects. It extracts the alignment, image, name, and type of each reaction for display in the OverlayReactions component.  The clientId is used to determine the alignment of the reaction.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/overlay_reactions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst reactions = message.latest_reactions.map(reaction => ({\n  alignment: clientId && clientId === reaction.user?.id ? 'right' : 'left',\n  image: reaction?.user?.image,\n  name: reaction?.user?.name || reaction.user_id || '',\n  type: reaction.type,\n}));\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelsContext with useChannelsContext Hook - React\nDESCRIPTION: This snippet shows how to use the useChannelsContext hook to access the ChannelsContext. It retrieves the channels and reloadList properties, providing a convenient way to access channel data and functionality within a component rendered as a child of ChannelList.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/channels_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChannelsContext } from 'stream-chat-react-native';\n\nconst { channels, reloadList } = useChannelsContext();\n```\n\n----------------------------------------\n\nTITLE: Consuming TypingContext with useTypingContext hook - TSX\nDESCRIPTION: This snippet shows how to use the useTypingContext hook provided by the stream-chat-react-native library to access the TypingContext. The hook simplifies accessing the typing object. The typing object contains a map of user IDs to typing.start event objects from the Stream Chat JavaScript SDK. This enables a component to display typing indicators.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/typing_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTypingContext } from 'stream-chat-react-native';\n\nconst { typing } = useTypingContext();\n```\n\n----------------------------------------\n\nTITLE: MessageTouchableHandlerPayload Example (TSX)\nDESCRIPTION: Example of the MessageTouchableHandlerPayload object structure, showcasing the types of data it contains. Includes properties like defaultHandler, emitter, event, actionHandlers, and message, each with specific data types and purposes for handling interactions within a chat message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/object-types/message_touchable_handler_payload.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{  defaultHandler: [function],  emitter: 'giphy',  event: [Native Event Object],  actionHandlers: {    deleteMessage: [function],    editMessage: [function],    quotedReply: [function],    resendMessage: [function],    showMessageOverlay: [function],    toggleBanUser: [function],    toggleMuteUser: [function],    toggleReaction: [function],  },  message: [message object],}\n```\n\n----------------------------------------\n\nTITLE: Enabling vectorDrawables Support\nDESCRIPTION: This Java code demonstrates how to enable vector drawable support in `android/app/build.gradle`. This setting allows the app to use vector drawables, which scale without loss of quality, on older Android versions. By setting `vectorDrawables.useSupportLibrary = true`, the app can use vector assets on API levels below 21.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nandroid {\n    defaultConfig {\n        vectorDrawables.useSupportLibrary = true\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Giphy Active Setter Function\nDESCRIPTION: This function sets the `giphyActive` state. It accepts a boolean `isActive` as input and updates the `giphyActive` state in the message input context. The `giphyActive` state controls whether Giphy integration is enabled or disabled in the message input component. It is linked to the `giphyActive` property in the `message-input-context.mdx` file.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/message-input-context/set_giphy_active.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n(isActive) => void\n```\n\n----------------------------------------\n\nTITLE: Setting additionalFlatListProps for MessageList in React Native\nDESCRIPTION: This code snippet illustrates how to pass additional props to the underlying FlatList component used by MessageList.  It sets the 'bounces' property to true, enabling bounce effect when the list reaches the top or bottom. It requires the MessageList component to render.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<MessageList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Running the app on Android with Yarn\nDESCRIPTION: Runs the Expo Chat example application on the Android platform using the yarn command.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/ExpoMessaging/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Install React Native Video (RN CLI)\nDESCRIPTION: This command installs the react-native-video package using yarn for projects initialized with React Native CLI.  This is an optional dependency to enable playing video and audio attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-video\n```\n\n----------------------------------------\n\nTITLE: Consuming KeyboardContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the KeyboardContext using the useContext hook in a TypeScript React Native component. It imports the KeyboardContext from 'stream-chat-react-native' and uses useContext to access the dismissKeyboard function. This function can then be called to programmatically dismiss the keyboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/keyboard_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { KeyboardContext } from 'stream-chat-react-native';\n\nconst { dismissKeyboard } = useContext(KeyboardContext);\n```\n\n----------------------------------------\n\nTITLE: Updating Message in Local State - React Native\nDESCRIPTION: This function upserts a given message in the local channel state. It is intended for optimistic updates and does not call `channel.sendMessage`. The `Channel` component utilizes this function for immediate UI updates.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nupdateMessage: (message) => void\n```\n\n----------------------------------------\n\nTITLE: Accessing Poll State with usePollStateStore in React Native\nDESCRIPTION: This code snippet demonstrates how to use the `usePollStateStore` hook to access the `poll` state within a React Native component. It imports necessary types from `stream-chat` and `stream-chat-react-native`. The code defines a selector function to extract `latestVotesByOption` and `maxVotedOptionIds` from the poll state. The hook `usePollStateStore` is used within a function component that is expected to be a child of `PollContext`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/hooks/poll/use-poll-state-store.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { PollVote, PollState } from 'stream-chat';\nimport { usePollStateStore } from 'stream-chat-react-native';\n\ntype PollOptionSelectorReturnValue = {\n  latestVotesByOption: Record<string, PollVote[]>;\n  maxVotedOptionIds: string[];\n};\n\nconst selector = <StreamChatGenerics extends DefaultStreamChatGenerics = DefaultStreamChatGenerics>(\n  nextValue: PollState<StreamChatGenerics>,\n): PollOptionSelectorReturnValue => ({\n  latestVotesByOption: nextValue.latestVotesByOption,\n  maxVotedOptionIds: nextValue.maxVotedOptionIds,\n});\n\nconst { latestVotesByOption, maxVotedOptionIds } = usePollStateStore(selector);\n```\n\n----------------------------------------\n\nTITLE: Filtering Image Attachments - TypeScript\nDESCRIPTION: This code snippet demonstrates how to filter an array of attachments to extract only those with the type 'image'. It assumes that `message.attachments` is an array of objects, where each object represents an attachment and has a 'type' property. The filter method creates a new array named `images` containing only the image attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/contexts/message-context/images.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst images = message.attachments.filter(a => a.type === 'image');\n```\n\n----------------------------------------\n\nTITLE: Custom Message Component Props - TSX\nDESCRIPTION: Demonstrates how to pass custom UI components to specific parts of the MessageSimple component using props in the Channel component, such as MessageAvatar and MessageText. Requires existing custom components for these props.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  channel={channel}\n  keyboardVerticalOffset={headerHeight}\n  MessageAvatar={CustomAvatarComponent}\n  MessageText={CustomTextComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Reaction Icon Component in TypeScript\nDESCRIPTION: This code defines a custom reaction icon component, `StreamReaction`, using `react-native-svg`. It receives props and renders an SVG path. This Icon component is then used when defining `newReactionData` to add this component to the list of possible reactions. Using exported type from `stream-chat-react-native` a custom reaction can be created and added.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const StreamReaction: React.FC<IconProps> = props => (\n  <RootSvg height={21} width={42} {...props} viewBox='0 0 42 21'>\n    <RootPath\n      d='M26.1491984,6.42806971 L38.9522984,5.52046971 C39.7973984,5.46056971 40.3294984,6.41296971 39.8353984,7.10116971 L30.8790984,19.5763697 C30.6912984,19.8379697 30.3888984,19.9931697 30.0667984,19.9931697 L9.98229842,19.9931697 C9.66069842,19.9931697 9.35869842,19.8384697 9.17069842,19.5773697 L0.190598415,7.10216971 C-0.304701585,6.41406971 0.227398415,5.46036971 1.07319842,5.52046971 L13.8372984,6.42816971 L19.2889984,0.333269706 C19.6884984,-0.113330294 20.3884984,-0.110730294 20.7846984,0.338969706 L26.1491984,6.42806971 Z M28.8303984,18.0152734 L20.5212984,14.9099734 L20.5212984,18.0152734 L28.8303984,18.0152734 Z M19.5212984,18.0152734 L19.5212984,14.9099734 L11.2121984,18.0152734 L19.5212984,18.0152734 Z M18.5624984,14.1681697 L10.0729984,17.3371697 L3.82739842,8.65556971 L18.5624984,14.1681697 Z M21.4627984,14.1681697 L29.9522984,17.3371697 L36.1978984,8.65556971 L21.4627984,14.1681697 Z M19.5292984,13.4435697 L19.5292984,2.99476971 L12.5878984,10.8305697 L19.5292984,13.4435697 Z M20.5212984,13.4435697 L20.5212984,2.99606971 L27.4627984,10.8305697 L20.5212984,13.4435697 Z M10.5522984,10.1082697 L12.1493984,8.31366971 L4.34669842,7.75446971 L10.5522984,10.1082697 Z M29.4148984,10.1082697 L27.8178984,8.31366971 L35.6205984,7.75446971 L29.4148984,10.1082697 Z'\n      {...props}\n    />\n  </RootSvg>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Suggest Option Button in React Native\nDESCRIPTION: This code snippet shows how to render a SuggestOptionButton component from the stream-chat-react-native library. The onPress handler receives message and poll objects, and logs their IDs to the console when the button is pressed. Requires the stream-chat-react-native package to be installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { SuggestOptionButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <SuggestOptionButton onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)} />\n);\n```\n\n----------------------------------------\n\nTITLE: Defining File Attachment Array Structure - TypeScript\nDESCRIPTION: This code snippet defines the structure of the array that represents file attachments in the MessageInput component. It includes the file details (name, size, type, URI), a unique ID, the upload state, and the URL of the uploaded file. This structure is used to manage attachments before a message is sent.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/message-input-context/file_uploads.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\n[\n  {\n    file: {\n      name: 'test.pdf';\n      size: 2000;\n      type: 'application/pdf';\n      uri: 'file-uri';\n    };\n    id: 'asdas232bk3jb42k3';\n    state: 'uploaded'; // or 'finished'\n    url: 'https://cdn.getstream.io/kajsnkj2n3j4';\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Message with Location Attachment\nDESCRIPTION: This JavaScript code defines the structure of a message containing a location attachment.  The attachment has a `type` of 'location' and includes the latitude, longitude, and the time the location sharing ended.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageWithLocation = {\n  attachments: [\n    {\n      type: 'location',\n      latitude: 50.212312,\n      longitude: -71.212659,\n      ended_at: '2012-07-14T01:00:00+01:00',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using OverlayProvider Component - TSX\nDESCRIPTION: This snippet shows how to use `OverlayProvider` with `bottomInset`. The `bottomInset` prop is used to account for Safe Area or Tab Bar space and ensures the image picker opens at the correct height. The component needs to wrap the application correctly for the image picker to display correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider bottomInset={/** number */}>\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Avatar in Channel Component\nDESCRIPTION: This example shows how to customize the message avatar within the Channel component by providing a custom component to the MessageAvatar prop. It uses the useMessageContext hook to access the message object and display the user's image. This demonstrates how to tailor the UI of the Stream Chat SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/channel.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Image } from 'react-native';\nimport { Channel, useMessageContext } from 'stream-chat-react-native';\n\nconst CustomAvatar = () => {\n  const { message } = useMessageContext();\n\n  return <Image source={{ uri: message.user?.image }} />;\n};\n\n<Channel MessageAvatar={CustomAvatar} />;\n```\n\n----------------------------------------\n\nTITLE: Setting language using setLanguage method\nDESCRIPTION: This example demonstrates how to change the language of a `Streami18n` instance after it has been created, using the `setLanguage` method.  This allows dynamic language switching within the application. It requires the `Streami18n` class from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n\n...\n// Logic for how a user can change the language\n...\n\nstreami18n.setLanguage('fr'); // The UI will change to French.\n```\n\n----------------------------------------\n\nTITLE: Customizing Inline Date Separator in Channel - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the inline date separator within the Channel component. It allows developers to define their own UI for displaying date separators between messages. The `maxTimeBetweenGroupedMessages` prop controls the time interval for grouping messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/package/CHANGELOG.md#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n    InlineDateSeparator={({ date }) => { /** Your custom UI */ }}\n    maxTimeBetweenGroupedMessages={40000} // number of ms, after which further messages will be considered part of new group.\n  >\n```\n\n----------------------------------------\n\nTITLE: Setting FlatList Ref in ChannelList - TypeScript\nDESCRIPTION: This code snippet shows how to use the `setFlatListRef` prop of the `ChannelList` component to access the underlying `FlatList` ref.  A `useRef` hook is used to create a ref that is then assigned within the callback.  The callback receives the FlatList ref as its argument.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel-list/props/set_flat_list_ref.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst flatListRef = useRef();\n\n<ChannelList setFlatListRef={ref => (flatListRef.current = ref)} />;\n```\n\n----------------------------------------\n\nTITLE: Basic MessageList Usage with Chat, Channel, OverlayProvider - TSX\nDESCRIPTION: This example shows the basic usage of the MessageList component within the Chat, Channel, and OverlayProvider components. It demonstrates how to integrate MessageList into the Stream Chat React Native environment to display messages in a channel. The client and channel props are expected to be initialized Stream Chat client and channel instances respectively.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider>\n  <Chat client={client}>\n    <Channel channel={channel}>\n      <MessageList />\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Custom FlatList Props for PollAnswersList - React Native\nDESCRIPTION: This code snippet shows how to pass additional properties to the underlying FlatList used within the `PollAnswersList` component.  This allows for customization of the FlatList's behavior, such as enabling bouncing.  The `additionalFlatListProps` prop accepts an object containing the FlatList props.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-answers-list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<PollAnswersList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Message Sending (TSX)\nDESCRIPTION: This snippet shows how to configure asynchronous message sending behavior for audio messages using the `asyncMessagesMultiSendEnabled` prop on the `Channel` component.  When set to `true`, audio recordings can be sent alongside other text or attachments. Dependencies: Stream Chat React Native SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/audio-messages-support.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel asyncMessagesMultiSendEnabled audioRecordingEnabled />\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageHeader Component\nDESCRIPTION: This snippet renders the MessageHeader component. This component displays header information for a message, such as the sender's name and timestamp. It's a React component that receives props forwarded from the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_10\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageHeader />\n```\n\n----------------------------------------\n\nTITLE: Rendering Chat component on a specific screen\nDESCRIPTION: This snippet shows how to render the `Chat` component within a specific screen component.  It assumes that the `OverlayProvider` is rendered higher up in the component tree (e.g., wrapping the `NavigationContainer`). `StreamChat.getInstance` needs to be called with your Stream API key to instantiate the client.  Replace `/** App components */` with the actual screen content.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Applying Generics to useChannelContext Hook (TSX)\nDESCRIPTION: This code snippet shows how to apply generics to the `useChannelContext` hook.  By specifying the `StreamChatGenerics` type, you ensure that the hook correctly provides the custom type `channel` within the context. The return `channel` will be of the `channelType` defined in `StreamChatGenerics`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/typescript.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nconst { channel } = useChannelContext<StreamChatGenerics>();\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Channel Id - TypeScript\nDESCRIPTION: Creates a Stream Chat channel using a channel ID.  The `client.channel` method is called with the channel type ('messaging') and the channel ID ('the_park'). An optional object can be passed to configure channel settings. This returns a channel object which can then be created on the server. Requires the `stream-chat` package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel('messaging', 'the_park', {\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring FlatList Props in ChannelList - TypeScript/React Native\nDESCRIPTION: This code snippet demonstrates how to pass additional properties to the FlatList component within the ChannelList component using the `additionalFlatListProps` prop.  This allows customization of the FlatList's behavior, such as enabling bouncing.  It assumes a React Native environment with the Stream Chat React Native SDK installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel-list/props/additional_flat_list_props.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<ChannelList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Checking Moderator Role - React TSX\nDESCRIPTION: Shows how to check if the current user has a moderator role, either at the channel or application level. It inspects the channel's membership role for values 'channel_moderator' or 'moderator'. This logic allows components to provide moderation features to authorized users.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/channel_context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst isModerator =\n  channel?.state.membership.role === 'channel_moderator' || channel?.state.membership.role === 'moderator';\n```\n\n----------------------------------------\n\nTITLE: Add Google Maven Repository in android/build.gradle - Java\nDESCRIPTION: This Java snippet shows how to add the Google Maven repository to the `allprojects.repositories` block in the `android/build.gradle` file. This repository is required for resolving dependencies related to camera functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nallprojects {\n  repositories {\n    mavenLocal()\n    maven {\n      // All of React Native (JS, Obj-C sources, Android binaries) is installed from npm\n      url(\"$rootDir/../node_modules/react-native/android\")\n    }\n    maven {\n      // Android JSC is installed from npm\n      url(\"$rootDir/../node_modules/jsc-android/dist\")\n    }\n\n    google()\n    jcenter()\n    maven { url 'https://maven.google.com' }\n    maven { url 'https://www.jitpack.io' }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overlay Provider Setup - TSX\nDESCRIPTION: This snippet shows how to wrap your application or screen with the OverlayProvider component from stream-chat-react-native. This provider is essential for enabling overlay features like long press message interactions, full-screen image viewing, and the attachment picker.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\n\nexport const Screen = () => <OverlayProvider>{/** App components */}</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Querying Channel List\nDESCRIPTION: This snippet shows how to query a list of channels for a user using `chatClient.queryChannels()`.  It uses filters and sorting options to retrieve relevant channels, and also enables watching the returned channels for updates.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst filter = { type: 'messaging', members: { $in: ['thierry'] } };\nconst sort = [{ last_message_at: -1 }];\n\nconst channels = await chatClient.queryChannels(filter, sort, {\n  watch: true, // this is the default\n  state: true,\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing MessageStatus Component in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to replace the default `MessageStatus` component within the `Channel` component with a custom implementation that returns `null`, effectively removing it from the UI. It showcases the basic syntax for overriding default components using props in React Native with TypeScript.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/contexts.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel MessageStatus={() => null}>\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated JSI Module - Android\nDESCRIPTION: This Java snippet demonstrates how to add Reanimated's JSI module package to `MainApplication.java`.  This allows Reanimated to use the JSI bridge for improved performance. This is required for older versions of Reanimated 2.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nimport com.facebook.react.bridge.JSIModulePackage;\nimport com.swmansion.reanimated.ReanimatedJSIModulePackage;\n...\n\nprivate final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n  ...\n\n  @Override\n  protected String getJSMainModuleName() {\n    return \"index\";\n  }\n\n  @Override\n  protected JSIModulePackage getJSIModulePackage() {\n    return new ReanimatedJSIModulePackage();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Answers List in React Native\nDESCRIPTION: This code snippet demonstrates the usage of a custom `PollAnswersListContent` component within the `PollAnswersList` to customize the rendering of poll answers. It receives `message` and `poll` props, ensuring the component has the necessary data to display the answers correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_14\n\nLANGUAGE: JSX\nCODE:\n```\n<PollAnswersList message={message} poll={poll} PollAnswersListContent={MyPollAnswersContent} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Channel ID - TypeScript\nDESCRIPTION: This snippet illustrates creating a chat channel using a specific channel ID. It utilizes the client.channel method to create a channel of type 'messaging' with the ID 'the_park' and sets a custom name for the channel. This approach allows precise control over channel identification.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel('messaging', 'the_park', {\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Message Status Component using React Context\nDESCRIPTION: This code snippet defines a custom `MessageStatus` component in React that retrieves message data from the `useMessageContext` hook and displays the `readBy` property as text. It demonstrates how to access and utilize context data within a custom component in the Stream Chat React Native SDK. It also shows how this custom component can be passed as a prop to the `<Channel>` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/contexts.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomMessageStatus = () => {\n  const { message } = useMessageContext();\n  return <Text>{message.readBy}</Text>;\n};\n...\n<Channel MessageStatus={CustomMessageStatus}>\n```\n\n----------------------------------------\n\nTITLE: Rendering PollContent Component\nDESCRIPTION: This snippet renders the PollContent component. It displays the content of a poll within a message. The component receives props forwarded from the Channel component, enabling customization of the poll's appearance and functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\n<PollContent />\n```\n\n----------------------------------------\n\nTITLE: Styling Markdown Text in Message - React Native\nDESCRIPTION: This snippet shows how to style markdown text within the Message component by modifying the theme. It targets specific markdown sub-components like headings or inline code using the MarkdownStyle type.  The modified theme is then passed to the Chat component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst themeStyle = {\n  messageSimple: {\n    content: {\n      markdown: {\n        heading1: {\n          color: 'pink',\n        },\n        inlineCode: {\n          fontSize: 10,\n        },\n      },\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Removing react-native-image-resizer dependency - Bash\nDESCRIPTION: This command removes the `react-native-image-resizer` package, which is now included directly within the Stream Chat React Native SDK itself. Uninstalling it reduces the application's dependency footprint.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove react-native-image-resizer\n```\n\n----------------------------------------\n\nTITLE: Rendering TypingIndicatorContainer Component\nDESCRIPTION: This snippet renders the TypingIndicatorContainer component. It likely contains and manages the display of one or more TypingIndicator components. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<TypingIndicatorContainer />\n```\n\n----------------------------------------\n\nTITLE: Customizing Poll Creation Content - React Native\nDESCRIPTION: This code snippet starts the process of customizing the poll creation screen using the CreatePoll component from stream-chat-react-native. It creates a custom MyCreatePollContent component that renders a SafeAreaView.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-next-line\n  CreatePoll,\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\n// highlight-start\nconst MyCreatePollContent = ({\n  route: {\n    params: { sendMessage },\n  },\n}) => {\n  const navigation = useNavigation();\n  return (\n    <SafeAreaView style={{ flex: 1 }}>\n```\n\n----------------------------------------\n\nTITLE: Rendering Issues in Custom Stream Chat React Native Components\nDESCRIPTION: This code snippet illustrates a potential performance issue within a custom Stream Chat React Native component, `MySenderComponent`, where frequent re-renders occur when accessing the `PaginatedMessageListContext`.  The component accesses messages and renders the last sender's name. The `console.log` statement highlights the number of re-renders, which can be significant when the channel mounts or when interacting with messages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/going-live-checklist.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePaginatedMessageListContext } from 'stream-chat-react-native';\nimport { Text } from 'react-native';\n\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n  console.log('Render.');\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n```\n\n----------------------------------------\n\nTITLE: Running SampleApp on Android Emulator\nDESCRIPTION: Executes the React Native command to run the application on the Android emulator.  This compiles and deploys the application for testing and development.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nnpx react-native run-android\n```\n\n----------------------------------------\n\nTITLE: Defining Default Command Type (TSX)\nDESCRIPTION: This snippet shows the default command type for stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultCommandType = string & {};\n```\n\n----------------------------------------\n\nTITLE: Custom ThreadListItem Rendering - React Native\nDESCRIPTION: This snippet overrides the default rendering of ThreadList items using the ThreadListItem prop.  It utilizes the useThreadsContext and useThreadListItemContext hooks to access thread-related data and defines a custom ThreadListItem component that displays only the thread ID within a TouchableOpacity.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-thread-list.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { TouchableOpacity, Text } from 'react-native';\n// highlight-start\nimport {\n  OverlayProvider,\n  Chat,\n  ThreadList,\n  useThreadsContext,\n  useThreadListItemContext,\n  MessageType,\n} from 'stream-chat-react-native';\n// highlight-end\n\n// any navigation library hook/method can be used for this\nimport { useNavigation, useIsFocused } from '@react-navigation/native';\n\n// highlight-start\nconst ThreadListItem = () => {\n  // we grab the definition of the navigation function from the ThreadsContext\n  const { onThreadSelect } = useThreadsContext();\n  // we grab the actual thread, channel and its parent message from the ThreadListItemContext\n  const { channel, thread, parentMessage } = useThreadListItemContext();\n  return (\n    <TouchableOpacity\n      style={{ backgroundColor: 'red', padding: 5 }}\n      onPress={() => {\n        if (onThreadSelect) {\n          // since we are overriding the behaviour of the item it is mandatory to pass the parameters in the\n          // below to onThreadSelect()\n          onThreadSelect({ thread: parentMessage as MessageType, threadInstance: thread }, channel);\n        }\n      }}\n     >\n      <Text>{thread?.id}</Text>\n    </TouchableOpacity>\n  )\n}\n// highlight-end\n\nconst ThreadListScreen = () => {\n  const isFocused = useIsFocused();\n  const navigation = useNavigation();\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <ThreadList\n          isFocused={isFocused}\n          {/* here we can reuse the same method as we would in the ChannelList component */}\n          onThreadSelect={(thread, channel) => {\n            navigation.navigate('ThreadScreen', {\n              thread,\n              channel,\n            });\n          }}\n          // highlight-next-line\n          ThreadListItem={ThreadListItem}\n        />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageAvatar size in Channel - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the size of the MessageAvatar component within a Channel in a React Native application using the stream-chat-react-native library. It involves creating a custom MessageAvatar component (SmallerMessageAvatar) with a specified size prop, and then passing this custom component to the MessageAvatar prop of the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-avatar.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Channel, MessageAvatar} from 'stream-chat-react-native';\n\nconst SmallerMessageAvatar = () => <MessageAvatar size={30} />\n\n<Channel MessageAvatar={SmallerMessageAvatar} />\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime with Moment.js - Typescript\nDESCRIPTION: This snippet demonstrates how to override the default DateTime parser with Moment.js in Streami18n. This allows for more control over date and time formatting. Requires Moment.js and locale imports.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport 'moment/locale/nl';\nimport 'moment/locale/it';\n// or if you want to include all locales\nimport 'moment/min/locales';\n\nimport Moment from moment;\n\nconst i18n =new Streami18n({\n  language: 'nl',\n  DateTimeParser: Moment,\n});\n```\n\n----------------------------------------\n\nTITLE: Initializing Channel Screen with Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates the basic setup of a ChannelScreen component using Stream Chat React Native. It imports necessary components like OverlayProvider, Chat, Channel, MessageList, and MessageInput. The Channel component is configured with a client and a channel object.  It showcases the initial UI setup without any customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, MessageList, MessageInput } from 'stream-chat-react-native';\n\nconst ChannelScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <ChannelHeader />\n          <MessageList />\n          <MessageInput />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Conditional Border Logic in MessageDeleted Component - Typescript\nDESCRIPTION: This code snippet demonstrates the logic used to determine whether to display borders on a deleted message. It checks if the message contains only emojis and is not a quoted message, or if there are other attachments. The result is a boolean value indicating whether the border should be hidden.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/message-deleted.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nconst noBorder = (onlyEmojis && !message.quoted_message) || !!otherAttachments.length;\n```\n\n----------------------------------------\n\nTITLE: Filtering File Attachments using Array.filter in TypeScript\nDESCRIPTION: This code snippet filters an array of attachments within a message object to extract only those attachments that are of type 'file'. It assumes that the message object has a property called `attachments` which is an array of attachment objects. Each attachment object is expected to have a `type` property.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/contexts/message-context/files.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst files = message.attachments.filter(a => a.type === 'file');\n```\n\n----------------------------------------\n\nTITLE: Customizing PollAllOptionsContent Component in React Native\nDESCRIPTION: This snippet demonstrates how to customize the content rendered within the PollAllOptions component. It defines a custom component MyPollAllOptionsContent that maps over the poll options and renders their IDs. It utilizes the usePollState hook to access the poll options.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-all-options.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { OverlayProvider, Chat, Channel, PollAllOptions, usePollState } from 'stream-chat-react-native';\n\nconst MyPollAllOptionsContent = () => {\n  const { options } = usePollState();\n  return options.map(option => <Text>{option.id}</Text>);\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollAllOptions message={message} poll={poll} PollAllOptionsContent={MyPollAllOptionsContent} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Defining Message with Location Attachment (JavaScript)\nDESCRIPTION: This JavaScript code defines the structure of a message containing a location attachment. The attachment includes the latitude, longitude, and the time when location sharing ended. This structure is used for sending location data through Stream Chat.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/live-location-sharing.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageWithLocation = {\n  attachments: [\n    {\n      type: 'location',\n      latitude: 50.212312,\n      longitude: -71.212659,\n      ended_at: '2012-07-14T01:00:00+01:00',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client - TypeScript\nDESCRIPTION: Initializes a Stream Chat client instance using the provided API key.  The `StreamChat.getInstance` method is used to create a singleton instance of the client. This instance is then used to interact with Stream's chat services. Requires the `stream-chat` package. The 'api_key' should be replaced with your actual Stream Chat API key.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/hello_stream_chat.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = StreamChat.getInstance('api_key');\n```\n\n----------------------------------------\n\nTITLE: Overriding Send Message Request - React Native\nDESCRIPTION: This example showcases overriding the send message request using the doSendMessageRequest prop. It allows modification of the message object before sending. The function receives the channelId and messageObject as parameters and must return a Promise equivalent to client.sendMessage.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/channel.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst doSendMessageRequest = (channelId, messageObject) => {\n  if (/** Some custom logic here */) {\n    messageObject.isSpecial = true;\n  }\n  return channel.sendMessage(messageObject);\n}\n```\n\n----------------------------------------\n\nTITLE: Enable Hermes in Gradle - Android\nDESCRIPTION: This code snippet enables Hermes in the `android/app/build.gradle` file. Hermes is a JavaScript engine optimized for React Native. Enabling Hermes can improve the application's performance and startup time.  A clean and rebuild is recommended after changing this setting.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nproject.ext.react = [\n  enableHermes: true  // clean and rebuild if changing\n]\n```\n\n----------------------------------------\n\nTITLE: Custom Channel Filtering Function - TSX\nDESCRIPTION: This snippet shows how to use the `channelRenderFilterFn` prop to apply custom filtering logic to the list of channels that are rendered in a `ChannelList` component. It includes defining and using a custom filter function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-list.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst customChannelFilterFunction = (channels: Channel[]) => {\n  return channels.filter(/** your custom filter logic */);\n};\n\n<ChannelList channelRenderFilterFn={customChannelFilterFunction} filters={filters} />;\n```\n\n----------------------------------------\n\nTITLE: Running iOS App (RN CLI)\nDESCRIPTION: These bash commands install the pods and then run the iOS application using React Native CLI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_36\n\nLANGUAGE: Bash\nCODE:\n```\nnpx pod-install\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadListItemContext using useThreadListItemContext Hook - TSX\nDESCRIPTION: This code snippet illustrates how to use the useThreadListItemContext hook provided by the stream-chat-react-native library.  It shows how to import and call the hook to access the ThreadListItemContext value within a functional component, providing a simpler and more direct way to access the context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/thread-list-item-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadListItemContext } from 'stream-chat-react-native';\n\nconst value = useThreadListItemContext();\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Context in React Native\nDESCRIPTION: This snippet showcases how to access information from the `MessageContext` using the `useMessageContext` hook within a custom component. This allows developers to access data such as `message`, `readEventsEnabled`, and `threadList` for use in their custom UI elements.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/contexts.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst { message, readEventsEnabled, threadList } = useMessageContext();\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel on the Server - Typescript\nDESCRIPTION: This snippet demonstrates how to create the channel on the Stream Chat server. After initializing a channel instance with the `channel` method (using either channel ID or member list), you call `create` to persist the channel on the server. This action makes the channel available to users within your application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Remove Message from Local Channel State - React Native\nDESCRIPTION: This function removes a message from the local channel state. It's important to note that this operation only updates the local state and does not invoke the API for deleting the message on the server. Use `channel.deleteMessage` for that purpose. This function expects a message object as input.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/messages-context.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Adding op-sqlite dependency - Bash\nDESCRIPTION: This command adds the `op-sqlite` package, which replaces the `react-native-quick-sqlite` package. This change provides a faster alternative with improved architecture endeavors. For React Native 0.74 and above, version >=9.3.0 is required.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add op-sqlite\n```\n\n----------------------------------------\n\nTITLE: Wrapping App with SafeAreaProvider\nDESCRIPTION: This snippet demonstrates how to wrap the root component with `SafeAreaProvider` from `react-native-safe-area-context`. This ensures that the app respects safe area insets on devices with notches or other screen cutouts.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Nav } from './Nav';\n\nexport const App = () => (\n  <SafeAreaProvider>\n    <Nav />\n  </SafeAreaProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Consuming ChannelsContext with useChannelsContext Hook in React TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ChannelsContext using the useChannelsContext hook provided by the stream-chat-react-native library.  It imports the hook and extracts the channels and reloadList properties.  This provides a more concise way to access the context's values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channels-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useChannelsContext } from 'stream-chat-react-native';\n\nconst { channels, reloadList } = useChannelsContext();\n```\n\n----------------------------------------\n\nTITLE: Adding Comment Buttons - React Native\nDESCRIPTION: This code adds `ShowAllCommentsButton` and `AddCommentButton` components to a custom `PollButtons` UI. These buttons enable users to view all comments and add new comments to a poll.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-poll-flow.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-start\n  ShowAllCommentsButton,\n  AddCommentButton\n // highlight-end\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      // highlight-start\n      <ShowAllCommentsButton />\n      <AddCommentButton />\n      // highlight-end\n      <ViewResultsButton\n        onPress={({ message, poll }) =>\n          navigation.navigate('PollResultsScreen', {\n            message,\n            poll,\n          });\n        }\n      />\n      <EndVoteButton />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering ReactionListTop Component\nDESCRIPTION: This snippet renders the ReactionListTop component. It displays the list of reactions at the top of a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_23\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactionListTop />\n```\n\n----------------------------------------\n\nTITLE: Defining Message Attachment Data Structure in Typescript\nDESCRIPTION: This snippet defines the structure of an attachment object, which is part of an array representing the attachments currently attached to a message being composed in the MessageInput component.  It includes the file's name, size, type, URI, a unique ID, the upload state, and the URL where the file is hosted after upload. The `state` property indicates whether the file is currently being uploaded (`uploaded`) or has completed uploading (`finished`).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/contexts/message-input-context/file_uploads.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n[\n  {\n    file: {\n      name: 'test.pdf';\n      size: 2000;\n      type: 'application/pdf';\n      uri: 'file-uri';\n    };\n    id: 'asdas232bk3jb42k3';\n    state: 'uploaded'; // or 'finished'\n    url: 'https://cdn.getstream.io/kajsnkj2n3j4';\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Overriding FileAttachment Component in JSX\nDESCRIPTION: This JSX snippet illustrates overriding the default FileAttachment component.  It accepts an attachment prop, enabling access to file details such as mime_type, title, file_size, and actions. The component logs the attachment properties and renders a custom UI. Dependencies include React.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomFileAttachment = ({ attachment }) => {\n  console.log(attachemnt.mime_type);\n  console.log(attachemnt.title);\n  console.log(attachemnt.file_size);\n  console.log(attachemnt.actions);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming PollContext with usePollContext hook - TSX\nDESCRIPTION: Illustrates the use of the usePollContext hook to access the PollContext.  This hook is provided by the stream-chat-react-native library. Requires importing usePollContext from 'stream-chat-react-native'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/poll-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { usePollContext } from 'stream-chat-react-native';\n\nconst value = usePollContext();\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatList Ref in ChannelList - TypeScript\nDESCRIPTION: This code snippet demonstrates how to access the underlying FlatList ref within the ChannelList component using the setFlatListRef callback. A useRef hook is used to store the FlatList ref, which is then passed to the ChannelList component. The callback updates the current value of the ref.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel-list/props/set_flat_list_ref.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst flatListRef = useRef();\n\n<ChannelList setFlatListRef={ref => (flatListRef.current = ref)} />;\n```\n\n----------------------------------------\n\nTITLE: Overriding Send Message Request\nDESCRIPTION: This example showcases how to override the send message request using the doSendMessageRequest prop. It allows modification of the message object before it's sent to the server. The function must return a Promise equivalent to `client.sendMessage`. This is for advanced use cases where message content needs to be altered before sending.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/core-components/channel.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst doSendMessageRequest = (channelId, messageObject) => {\n  if (/** Some custom logic here */) {\n    messageObject.isSpecial = true;\n  }\n  return channel.sendMessage(messageObject);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting additional FlatList props - JSX\nDESCRIPTION: This code snippet demonstrates how to pass additional properties to the underlying FlatList component used by MessageList. It shows how to configure FlatList properties like 'bounces' to customize the list's behavior. It is recommended to use `setFlatListRef` for accessing the FlatList ref instead of `additionalFlatListProps`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<MessageList additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Registering a New Language Translation - Typescript\nDESCRIPTION: This snippet demonstrates how to register a new language translation with the Streami18n instance.  The registerTranslation method is used to add translations for a specific language code.  This allows adding support for languages not included by default. Requires a pre-existing Streami18n instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst streami18n = new Streami18n();\nstreami18n.registerTranslation('pl', {\n  'Copy Message': 'Kopiuj wiadomość',\n  'Delete Message': 'Usuń wiadomość',\n  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} i {{ secondUser }} piszą...',\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelAvatar with onPress handler in ChannelList - JSX\nDESCRIPTION: This code snippet demonstrates how to customize the ChannelAvatar component within the ChannelList using the PreviewAvatar prop. It adds an onPress handler to the avatar using TouchableOpacity from 'react-native-gesture-handler'. The channel prop is required for ChannelAvatar.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/channel_avatar.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { TouchableOpacity } from 'react-native-gesture-handler';\nimport { ChannelList, ChannelAvatar } from 'stream-chat-react-native';\n\n<ChannelList\n  PreviewAvatar={({ channel }) => (\n    <TouchableOpacity\n      disallowInterruption={true}\n      onPress={() => {\n        /** Handler for press action */\n      }}\n    >\n      <ChannelAvatar channel={channel} />\n    </TouchableOpacity>\n  )}\n/>;\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime format with Moment.js\nDESCRIPTION: This example demonstrates how to override the default Day.js DateTime handling with Moment.js.  It shows importing locale data for Moment.js and passing a Moment.js instance to `Streami18n`. It requires `moment` and `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'moment/locale/nl';\nimport 'moment/locale/it';\n// or if you want to include all locales\nimport 'moment/min/locales';\n\nimport Moment from moment\n\nconst i18n = new Streami18n({\n language: 'nl',\n DateTimeParser: Moment\n})\n```\n\n----------------------------------------\n\nTITLE: ThreadList with useIsFocused Hook in React Native (TSX)\nDESCRIPTION: This code snippet demonstrates how to use the `isFocused` property of the `ThreadList` component from `stream-chat-react-native` in conjunction with the `useIsFocused` hook from `@react-navigation/native`.  The `useIsFocused` hook returns a boolean indicating whether the current screen is focused. This value is then passed to the `isFocused` prop of the `ThreadList`, allowing for conditional rendering or update management. This is useful to prevent the `ThreadList` from updating when it is not visible, optimizing performance. Requires `@react-navigation/native` and `stream-chat-react-native` to be installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/threads-context/is-focused.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { useIsFocused } from '@react-navigation/native';\nimport { ThreadList } from 'stream-chat-react-native';\n\nexport const ThreadListScreen = () => {\n  const isFocused = useIsFocused();\n  return <ThreadList isFocused={isFocused} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Getting i18next Instance - Typescript\nDESCRIPTION: This code snippet demonstrates how to access the underlying i18next instance used by `Streami18n` using the `geti18Instance()` method.  This allows for direct interaction with i18next functionalities if needed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = streami18n.geti18Instance();\n```\n\n----------------------------------------\n\nTITLE: Intercept Message Action - TypeScript\nDESCRIPTION: This code shows how to intercept a message action (in this case, 'Copy Message') to add analytics tracking. The `handleCopy` prop function is called before the default copy action is executed. This approach doesn't change or block the standard copy function.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_actions_customization.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel handleCopy={() => trackCopyAction()} />\n```\n\n----------------------------------------\n\nTITLE: Custom MessageStatus Component Implementation - TSX\nDESCRIPTION: This code defines a custom `MessageStatus` component that accesses the current message's `readBy` property from the `useMessageContext` hook and renders it as text. This example shows how to retrieve data from a context and use it to create a custom UI element.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/contexts.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomMessageStatus = () => {\n  const { message } = useMessageContext();\n  return <Text>{message.readBy}</Text>;\n};\n...\n<Channel MessageStatus={CustomMessageStatus}>\n```\n\n----------------------------------------\n\nTITLE: Creating Custom DateHeader Component - TSX\nDESCRIPTION: This code creates a custom `DateHeader` component that receives a `dateString` prop and displays it within a `Text` component. This replaces the default `DateHeader` in the `Channel` component.  It requires the `Text` component from React Native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/customization/custom_components.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst MyNewComponent = ({ dateString }) => <Text>{`Hello World: ${dateString}`}</Text>;\n\n<Channel\n  ...\n  DateHeader={MyNewComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Consuming KeyboardContext using useContext - Typescript\nDESCRIPTION: This snippet demonstrates how to consume the KeyboardContext using the useContext hook from React.  It imports the KeyboardContext from stream-chat-react-native and uses useContext to access the dismissKeyboard function. This function allows dismissing the keyboard when called within a child component of the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/keyboard_context.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useContext } from 'react';\nimport { KeyboardContext } from 'stream-chat-react-native';\n\nconst { dismissKeyboard } = useContext(KeyboardContext);\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadListItemContext using useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ThreadListItemContext using the useContext hook from React. It imports the necessary modules and shows how to access the context value within a functional component. This approach requires importing useContext from React.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/thread-list-item-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThreadListItemContext } from 'stream-chat-react-native';\n\nconst value = useContext(ThreadListItemContext);\n```\n\n----------------------------------------\n\nTITLE: Theme Path Replacement - messageList.messageNotification\nDESCRIPTION: This change replaces the theme path `messageList.messageNotification` with `messageList.messageNotification.container`. This suggests a change in how the message notification container is structured within the theme. Users customizing themes need to adjust their configurations to align with the new structure.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/package/CHANGELOG.md#_snippet_7\n\nLANGUAGE: none\nCODE:\n```\nmessageList.messageNotification -> messageList.messageNotification.container\n```\n\n----------------------------------------\n\nTITLE: Extracting User IDs from Message Input (React Native)\nDESCRIPTION: This code snippet represents the structure of user IDs that are extracted from a message composed in the MessageInput component of a Stream Chat React Native application.  The IDs are strings representing user identifiers. The expected output is an array of these strings.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/message-input-context/mentioned_users.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n['vishal-user-id', 'jaap-user-id'];\n```\n\n----------------------------------------\n\nTITLE: Accessing ThreadsContext using useThreadsContext hook - React Native\nDESCRIPTION: This code snippet demonstrates how to access the ThreadsContext in a Stream Chat React Native application using the useThreadsContext hook. This custom hook provides a more concise way to access the context. It requires the stream-chat-react-native package and must be used within a Chat component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/threads-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useThreadsContext } from 'stream-chat-react-native';\n\nconst value = useThreadsContext();\n```\n\n----------------------------------------\n\nTITLE: Consuming AttachmentPickerContext with useAttachmentPickerContext hook - React\nDESCRIPTION: This code snippet shows how to consume the AttachmentPickerContext using the useAttachmentPickerContext hook provided by the stream-chat-react-native library.  It retrieves the openPicker and closePicker functions to control the attachment picker's visibility within a React component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/attachment-picker-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAttachmentPickerContext } from 'stream-chat-react-native';\n\nconst { openPicker, closePicker } = useAttachmentPickerContext();\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User from Stream Chat - TypeScript\nDESCRIPTION: This code snippet demonstrates how to disconnect a user from Stream Chat using the disconnectUser function. It's a simple call that ends the user's session. Call this method upon user logout or when the user no longer needs to be connected to the chat service.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageDeleted Component\nDESCRIPTION: This snippet renders the MessageDeleted component, which is likely used to indicate that a message has been deleted. It's a React component within the Stream Chat React Native SDK and receives props forwarded from the parent Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageDeleted />\n```\n\n----------------------------------------\n\nTITLE: Consuming OverlayContext with useContext - TSX\nDESCRIPTION: Demonstrates how to consume the OverlayContext using the useContext hook from React. The OverlayContext provides access to the setOverlay function, which is used to manage the active overlay. This snippet requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/overlay-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { OverlayContext } from 'stream-chat-react-native';\n\nconst { setOverlay } = useContext(OverlayContext);\n```\n\n----------------------------------------\n\nTITLE: Removing react-native-image-crop-picker dependency - Bash\nDESCRIPTION: This command removes the `react-native-image-crop-picker` package, which has been replaced with `react-native-image-picker` for improved functionality and new architecture compatibility. Removing this dependency is part of the migration to version 6.x of the SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove react-native-image-crop-picker\n```\n\n----------------------------------------\n\nTITLE: Importing React Native Gesture Handler - TypeScript\nDESCRIPTION: This snippet demonstrates how to import the `react-native-gesture-handler` library at the top of your app's entry file. This is a necessary step for properly setting up the gesture handler and ensuring that touchable components function correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\nimport 'react-native-gesture-handler';\n```\n\n----------------------------------------\n\nTITLE: Consuming ChatContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ChatContext using the useContext hook in a functional React component. It imports the ChatContext from stream-chat-react-native and extracts the client and isOnline values.  The component must be a child of the Chat component to access the context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/chat_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ChatContext } from 'stream-chat-react-native';\n\nconst { client, isOnline } = useContext(ChatContext);\n```\n\n----------------------------------------\n\nTITLE: Accessing Stream Chat Client via Context\nDESCRIPTION: This snippet demonstrates how to access the Stream Chat client instance within a custom component using the `useChatContext` hook. This is useful for interacting with the client directly when customizing UI components or functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useChatContext } from 'stream-chat-react-native';\n\nconst { client } = useChatContext();\n```\n\n----------------------------------------\n\nTITLE: Message with Location Attachment - JavaScript\nDESCRIPTION: This JavaScript snippet demonstrates the structure of a message object containing a location attachment. The attachment includes the type, latitude, and longitude of the location. This object is sent as a message through Stream Chat.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-attachment.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\nconst messageWithLocation = {\n  text: 'This is my location',\n  attachments: [\n    {\n      type: 'location',\n      latitude: '50.212312',\n      longitude: '-71.212659',\n      // You can add more custom properties if needed.\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Using OverlayProvider - TSX\nDESCRIPTION: This snippet demonstrates how to wrap your application components with the `OverlayProvider`. This allows components within to interact with messages on long press, use the full screen image viewer, and the `AttachmentPicker`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\n\nexport const Screen = () => <OverlayProvider>{/** App components */}</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Access Context in Custom Component - React Native\nDESCRIPTION: This snippet demonstrates how to access the `PaginatedMessageListContext` within a custom DateHeader component to display the name of the last sender. It showcases using the `usePaginatedMessageListContext` hook.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/custom_components.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\n<Channel\n  ...\n  DateHeader={MySenderComponent}\n>\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by ID - TS\nDESCRIPTION: This snippet demonstrates how to create a new channel instance using a channel ID with the `client.channel()` method. This method accepts the channel type, the channel ID, and optional channel data such as name.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel(channel_type, 'channel_id', {\n  name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Replacing camera roll dependency - yarn\nDESCRIPTION: These commands replace the deprecated `@react-native-community/cameraroll` dependency with the actively maintained `@react-native-camera-roll/camera-roll` package using yarn. This ensures compatibility and access to the latest features and fixes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-4.x-to-5.x.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @react-native-community/cameraroll\n```\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-camera-roll/camera-roll\n```\n\n----------------------------------------\n\nTITLE: Customizing FileIcon size in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to customize the size of the FileIcon component within the Channel component using the FileAttachmentIcon prop.  It imports Channel and FileIcon from 'stream-chat-react-native' and renders the Channel component, passing a custom FileIcon component with a specified size of 40.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/file-icon.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, FileIcon } from 'stream-chat-react-native';\n\n<Channel FileAttachmentIcon={() => <FileIcon size={40} />}\n```\n\n----------------------------------------\n\nTITLE: Consuming PollContext using usePollContext hook - Typescript\nDESCRIPTION: This snippet demonstrates how to consume PollContext using the usePollContext hook provided by the stream-chat-react-native library. This hook simplifies accessing the PollContext values within the Channel component. The hook depends on 'stream-chat-react-native' library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/poll-context.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { usePollContext } from 'stream-chat-react-native';\n\nconst value = usePollContext();\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageUserReactions Component\nDESCRIPTION: This snippet renders the MessageUserReactions component. This component displays the list of users who have reacted to a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_21\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageUserReactions />\n```\n\n----------------------------------------\n\nTITLE: Consuming CreatePollContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the CreatePollContext using the useContext hook in a TypeScript React Native component.  It imports useContext from 'react' and CreatePollContext from 'stream-chat-react-native'. The useContext hook is then used to retrieve the context value.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/create-poll-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { CreatePollContext } from 'stream-chat-react-native';\n\nconst value = useContext(CreatePollContext);\n```\n\n----------------------------------------\n\nTITLE: Using Channel's onLongPressMessage\nDESCRIPTION: This TypeScript snippet shows how to use `onLongPressMessage` prop to access default handlers or message details. It demonstrates logging the message id and text.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel onLongPressMessage={({ message }) => console.log(message.id, message.text)}\n```\n\n----------------------------------------\n\nTITLE: Checking for Admin Role - TSX\nDESCRIPTION: This snippet demonstrates how to check if the current user has an 'admin' role, either at the application or channel level. It accesses the client user's role and the channel's membership role to determine admin status. This requires access to the client and channel objects and assumes that the roles are stored in the 'role' property.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/channel_context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst isAdmin = client?.user?.role === 'admin' || channel?.state.membership.role === 'admin';\n```\n\n----------------------------------------\n\nTITLE: Using Custom ScrollToBottomButton with Channel Component (TSX)\nDESCRIPTION: This code snippet demonstrates how to replace the default ScrollToBottomButton UI component with a custom component named CustomScrollToBottomButton by passing it as a prop to the Channel component. This allows developers to customize the appearance and behavior of the scroll-to-bottom button in their chat application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/scroll_to_bottom_button.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel ScrollToBottomButton={CustomScrollToBottomButton} />\n```\n\n----------------------------------------\n\nTITLE: Defining Local Reaction Type Example (TSX)\nDESCRIPTION: This snippet defines a LocalReactionType as a Record<string, unknown>, allowing for custom properties on reactions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalReactionType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Consuming ImageGalleryContext with useImageGalleryContext Hook - TSX\nDESCRIPTION: This code snippet shows how to use the useImageGalleryContext hook provided by the library to consume the ImageGalleryContext. It retrieves the messages and setMessages values. Using this hook simplifies access to the ImageGalleryContext values, especially in functional components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/image-gallery-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useImageGalleryContext } from 'stream-chat-react-native';\n\nconst { messages, setMessages } = useImageGalleryContext();\n```\n\n----------------------------------------\n\nTITLE: Custom FlatList Props for PollOptionFullResults - React Native\nDESCRIPTION: This code shows how to override the default FlatList props of the PollOptionFullResults component using the additionalFlatListProps prop.  In this example, the bounces property is set to true.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-option-full-results.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<PollOptionFullResults additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: Running the application on Android using Yarn\nDESCRIPTION: This command runs the React Native application on the Android platform using Yarn. It likely executes the `android` script defined in the `package.json` file, which typically builds and launches the application on a connected Android device or emulator.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Chat Component with App Level Scope - Typescript React\nDESCRIPTION: This code snippet illustrates the usage of the `Chat` component at the application level, wrapping the core components. It requires a `client` prop, which is the Stream Chat client instance. The entire application is wrapped within the `Chat` and `OverlayProvider` components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>{/** App components */}</Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering Add Comment Button in React Native\nDESCRIPTION: This code snippet shows how to render an AddCommentButton component from the stream-chat-react-native library. The onPress handler receives message and poll objects and logs their IDs to the console when pressed. Requires stream-chat-react-native package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-buttons.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AddCommentButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <AddCommentButton onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)} />\n);\n```\n\n----------------------------------------\n\nTITLE: Consuming OwnCapabilitiesContext using useOwnCapabilitiesContext hook - TSX\nDESCRIPTION: Demonstrates how to consume the OwnCapabilitiesContext using the useOwnCapabilitiesContext hook provided by the stream-chat-react-native library. It retrieves the uploadFile, updateAnyMessage, and deleteAnyMessage capabilities.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/own_capabilities_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useOwnCapabilitiesContext } from 'stream-chat-react-native';\n\nconst { uploadFile, updateAnyMessage, deleteAnyMessage } = useOwnCapabilitiesContext();\n```\n\n----------------------------------------\n\nTITLE: Upsert Message in Local Channel State - React Native\nDESCRIPTION: This function upserts (updates or inserts) a given message in the local channel state.  This is used for optimistic updates, providing immediate feedback to the user. Note that this function does not call `channel.sendMessage`; use `channel.sendMessage` to send messages through the API.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/messages_context.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nupdateMessage(message)\n```\n\n----------------------------------------\n\nTITLE: Consuming ImageGalleryContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ImageGalleryContext using the useContext hook in a React functional component. It imports the context and retrieves the images and setImages values for managing the image gallery.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/image_gallery_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ImageGalleryContext } from 'stream-chat-react-native';\n\nconst { images, setImages } = useContext(ImageGalleryContext);\n```\n\n----------------------------------------\n\nTITLE: Customizing ReactionList Background\nDESCRIPTION: This code snippet demonstrates how to override the background color of the ReactionList container in the stream-chat-react-native library. It imports the necessary components and defines a new component ReactionListWithCustomBackground that renders the ReactionList with custom fill and stroke props. This new component is then passed to the ReactionList prop of the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/reaction-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, ReactionList, ReactionListProps } from 'stream-chat-react-native';\n\nconst ReactionListWithCustomBackground = (props: ReactionListProps) => <ReactionList {...props} fill={'#00DDD'} stroke={'#fffff'} />\n\n<Channel ReactionList={ReactionListWithCustomBackground} />\n```\n\n----------------------------------------\n\nTITLE: Getting Available Languages - JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the array of available language codes from the Streami18n instance using the `getAvailableLanguages()` method. The returned array contains strings like 'en', 'es', etc., representing the supported languages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_14\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst availableLanguages = streami18n.getAvailableLanguages();\n```\n\n----------------------------------------\n\nTITLE: MessageAction Example in TSX\nDESCRIPTION: This code snippet provides an example of a MessageAction object, demonstrating how to define an action, icon, title, and title style for a message action button in a React Native application using TypeScript syntax (TSX). The `action` property takes a callback function to be executed when the button is pressed. The `icon` property renders an icon, and the `title` and `titleStyle` define the text and style of the button's title.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/object-types/message_action.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{  action: () => { /** Some action here */ },  icon: <PinIcon />,  title: 'Pin Message',  titleStyle: { color: 'red' }}\n```\n\n----------------------------------------\n\nTITLE: Removing @stream-io/flat-list-mvcp dependency - Bash\nDESCRIPTION: This command removes the `@stream-io/flat-list-mvcp` package, which is no longer required when using React Native version 0.72 or higher, as the React Native `FlatList` component now supports `maintainVisibleContentPosition` natively.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @stream-io/flat-list-mvcp\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageContext with useMessageContext - React Native\nDESCRIPTION: This snippet demonstrates how to consume the MessageContext using the useMessageContext hook in a React Native component. It imports useMessageContext from 'stream-chat-react-native'. The hook provides access to message properties like isMyMessage, message object and attached files.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/message-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageContext } from 'stream-chat-react-native';\n\nconst { isMyMessage, message, files } = useMessageContext();\n```\n\n----------------------------------------\n\nTITLE: Message Reaction List Structure - TypeScript\nDESCRIPTION: This snippet demonstrates the expected structure of a list of reactions added to a message. Each reaction object includes whether the reaction is owned by the current user (`own`) and the type of reaction (e.g., 'love', 'haha').\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/message-context/reactions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n[\n  {\n    own: true,\n    type: 'love',\n  },\n  {\n    own: false,\n    type: 'haha',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Override Mark Read Request - React Native\nDESCRIPTION: This example demonstrates how to override the default mark read request in Stream Chat React Native. This allows for conditional marking of messages as read based on custom logic.  The channel instance is passed as a parameter.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/core-components/channel.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst doMarkReadRequest = (channel) => {\n  if (/** Some custom logic here */) {\n    channel.markRead();\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Watching a Channel - TS\nDESCRIPTION: This code shows how to create a channel on the server and subscribe the client to the channel's updates using the `channel.watch()` method.  This is useful for both creating a new channel and ensuring the client receives updates.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/client.mdx#_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.watch();\n```\n\n----------------------------------------\n\nTITLE: Running the application on iOS using Yarn\nDESCRIPTION: This command runs the React Native application on the iOS platform using Yarn. It likely executes the `ios` script defined in the `package.json` file, which typically builds and launches the application in the iOS simulator.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Initializing Streami18n - Typescript\nDESCRIPTION: This code snippet demonstrates how to create a new instance of the Streami18n class, which is used for managing translations in Stream Chat React Native components. It defaults to English if no language is specified.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n```\n\n----------------------------------------\n\nTITLE: Consuming ImageGalleryContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the ImageGalleryContext using the useContext hook provided by React. The context provides access to the images array and the setImages function for managing images in the image gallery. This is used within a component that is a child of OverlayProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/image_gallery_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ImageGalleryContext } from 'stream-chat-react-native';\n\nconst { images, setImages } = useContext(ImageGalleryContext);\n```\n\n----------------------------------------\n\nTITLE: Consuming KeyboardContext with useKeyboardContext hook - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the KeyboardContext using the useKeyboardContext hook provided by the 'stream-chat-react-native' library. It imports the hook and utilizes it to retrieve the dismissKeyboard function. This function is used to programmatically hide the keyboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/keyboard_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useKeyboardContext } from 'stream-chat-react-native';\n\nconst { dismissKeyboard } = useKeyboardContext();\n```\n\n----------------------------------------\n\nTITLE: Setting Avatar Size via Theme - TSX\nDESCRIPTION: This code snippet illustrates how to customize the default avatar size for the OverlayReactionsAvatar component using the stream-chat-react-native theming system.  It shows the theme structure and the property (BASE_AVATAR_SIZE) to modify the avatar dimensions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/overlay_reactions_avatar.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  avatar: {\n    BASE_AVATAR_SIZE: 30,\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Override createReactActivityDelegate - MainActivity.java (Android)\nDESCRIPTION: This code snippet overrides the `createReactActivityDelegate` method in `MainActivity.java` to use `RNGestureHandlerEnabledRootView`. This is a necessary step for Android to properly integrate React Native Gesture Handler. By using `RNGestureHandlerEnabledRootView`, the application ensures that gesture handling is correctly enabled for the React Native view hierarchy.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_15\n\nLANGUAGE: java\nCODE:\n```\npackage com.swmansion.gesturehandler.react.example;\n\nimport com.facebook.react.ReactActivity;\nimport com.facebook.react.ReactActivityDelegate;\nimport com.facebook.react.ReactRootView;\nimport com.swmansion.gesturehandler.react.RNGestureHandlerEnabledRootView;\npublic class MainActivity extends ReactActivity {\n\n  @Override\n  protected String getMainComponentName() {\n    return \"Example\";\n  }\n  @Override\n  protected ReactActivityDelegate createReactActivityDelegate() {\n    return new ReactActivityDelegate(this, getMainComponentName()) {\n      @Override\n      protected ReactRootView createRootView() {\n        return new RNGestureHandlerEnabledRootView(MainActivity.this);\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Image Attachments with TypeScript\nDESCRIPTION: This code snippet filters an array of message attachments to extract only the attachments of type 'image'. The `message.attachments` is assumed to be an array of attachment objects, each with a `type` property.  The filter method creates a new array containing only the image attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/contexts/message-context/images.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst images = message.attachments.filter(a => a.type === 'image');\n```\n\n----------------------------------------\n\nTITLE: Consuming AttachmentPickerContext with useAttachmentPickerContext - React\nDESCRIPTION: This code snippet demonstrates how to consume the `AttachmentPickerContext` using the `useAttachmentPickerContext` hook provided by the library.  It offers a convenient way to access the `openPicker` and `closePicker` functions for controlling the attachment picker bottom sheet.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/attachment_picker_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useAttachmentPickerContext } from 'stream-chat-react-native';\n\nconst { openPicker, closePicker } = useAttachmentPickerContext();\n```\n\n----------------------------------------\n\nTITLE: Setting Global Config in Stream Chat React Native\nDESCRIPTION: This code snippet shows how to set global configuration options in Stream Chat React Native using the `setConfig` function. It imports the `StreamChatRN` object and then calls `setConfig` before any other components are rendered.  The example sets the `resizableCDNHosts` option to a custom CDN. It is crucial to call this function at the root of your application before rendering any components.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/global_config.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChatRN } from 'stream-chat-react-native';\n\nStreamChatRN.setConfig({\n  resizableCDNHosts: ['https://my-company-cdn.com'],\n  // future config options\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Equality Check for MessageFooter in React Native\nDESCRIPTION: This code snippet demonstrates a custom equality check for the `MessageFooter` component in React Native Stream Chat. It compares specific properties of the `prevMessage` and `nextMessage` objects, such as `deleted_at`, `reply_count`, `status`, `type`, and `text`, to determine if the component needs to re-render. It avoids a simple object comparison which would always return false due to referential instability.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/custom_components.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst messageEqual =\n  prevMessage.deleted_at === nextMessage.deleted_at &&\n  prevMessage.reply_count === nextMessage.reply_count &&\n  prevMessage.status === nextMessage.status &&\n  prevMessage.type === nextMessage.type &&\n  prevMessage.text === nextMessage.text;\n```\n\n----------------------------------------\n\nTITLE: React Native Location Sharing Component\nDESCRIPTION: This JSX code defines a React Native component that integrates Stream Chat to enable location sharing. It uses react-native-geolocation to retrieve the user's current location, the Google Maps Static API to display a map preview, and the Linking API to open the location in the Google Maps application. The component includes a custom button for sharing location and a custom card for rendering location attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_8\n\nLANGUAGE: jsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { Image, Linking, StyleSheet, TouchableOpacity, View } from 'react-native';\nimport { StreamChat } from 'stream-chat';\nimport {\n  Channel,\n  Chat,\n  MessageInput,\n  MessageList,\n  OverlayProvider as ChatOverlayProvider,\n  useChannelContext,\n} from 'stream-chat-react-native';\nimport { SafeAreaProvider, SafeAreaView, useSafeAreaInsets } from 'react-native-safe-area-context';\nimport Geolocation from '@react-native-community/geolocation';\nimport Svg, { Path } from 'react-native-svg';\n\n// ============================================================\n//   Fill in following values\n// ============================================================\nconst API_KEY = '';\nconst USER_ID = '';\nconst USER_TOKEN = '';\nconst CHANNEL_ID = '';\n// Reference: https://developers.google.com/maps/documentation/maps-static/get-api-key\nconst MAPS_API_KEY = '';\n\nconst chatClient = StreamChat.getInstance(API_KEY);\nconst user = { id: USER_ID };\n\n// We are going to `await` following two calls, before rendering any UI component.\n// Please check the App component at bottom.\nconst connectUserPromise = chatClient.connectUser(user, USER_TOKEN);\nconst channel = chatClient.channel('messaging', CHANNEL_ID);\n\n// Basic utilities required for location sharing\n\n// Given the location coordinates, this function generates URL for google map,\n// and opens this Url using Linking module of react-native.\n// Please check documentation of `Linking` module from react-native, for details:\n// https://reactnative.dev/docs/linking\n//\n// Generally this URL will be opened in google maps application.\n// https://developers.google.com/maps/documentation/urls/get-started\nconst goToGoogleMaps = (lat, long) => {\n  const url = `https://www.google.com/maps/search/?api=1&query=${lat},${long}`;\n\n  Linking.canOpenURL(url).then(supported => {\n    if (supported) {\n      Linking.openURL(url);\n    } else {\n      console.log(`Don't know how to open URI: ${url}`);\n    }\n  });\n};\n\n// Generates static map URL for given location coordinates.\n// For reference, please check - https://developers.google.com/maps/documentation/maps-static/overview\nconst prepareStaticMapUrl = (lat, long) => {\n  let baseURL = 'https://maps.googleapis.com/maps/api/staticmap?';\n  let url = new URL(baseURL);\n  let params = url.searchParams;\n  params.append('center', `${lat},${long}`);\n  params.append('zoom', '15');\n  params.append('size', '600x300');\n  params.append('maptype', 'roadmap');\n  params.append('key', MAPS_API_KEY);\n  params.append('markers', `color:red|${lat},${long}`);\n\n  return url.toString();\n};\n\n// Send your current location attachment, as message, on current channel.\nconst sendCurrentLocation = () => {\n  Geolocation.getCurrentPosition(info => {\n    channel?.sendMessage({\n      text: 'This is my location',\n      attachments: [\n        {\n          type: 'location',\n          latitude: info.coords.latitude,\n          longitude: info.coords.longitude,\n        },\n      ],\n    });\n  });\n};\n\n// UI Component for rendering `location` type attachment\nconst LocationCard = ({ type, latitude, longitude }) => {\n  if (type === 'location') {\n    const mapApi = prepareStaticMapUrl(latitude, longitude);\n    console.log(mapApi);\n    return (\n      <TouchableOpacity onPress={() => goToGoogleMaps(latitude, longitude)}>\n        <Image source={{ uri: mapApi }} style={{ height: 200, width: 300 }} />\n      </TouchableOpacity>\n    );\n  }\n};\n\n// Icon for \"Share Location\" button, next to input box.\nconst ShareLocationIcon = props => (\n  <Svg width={24} height={24} viewBox='0 0 24 24' fill='none' {...props}>\n    <Path\n      d='M12 12c-1.654 0-3-1.345-3-3 0-1.654 1.346-3 3-3s3 1.346 3 3c0 1.655-1.346 3-3 3zm0-4a1.001 1.001 0 101 1c0-.551-.449-1-1-1z'\n      fill='#000'\n    />\n    <Path\n      fillRule='evenodd'\n      clipRule='evenodd'\n      d='M12 22s7-5.455 7-12.727C19 5.636 16.667 2 12 2S5 5.636 5 9.273C5 16.545 12 22 12 22zm1.915-4.857C15.541 15.032 17 12.277 17 9.273c0-1.412-.456-2.75-1.27-3.7C14.953 4.664 13.763 4 12 4s-2.953.664-3.73 1.573C7.456 6.523 7 7.86 7 9.273c0 3.004 1.459 5.759 3.085 7.87.678.88 1.358 1.614 1.915 2.166a21.689 21.689 0 001.915-2.166zm-.683 3.281s0 .001 0 0z'\n      fill='#000'\n    />\n  </Svg>\n);\n\n// UI component to add Share Location button next to input box.\nconst InputButtons = () => {\n  const { channel: currentChannel } = useChannelContext();\n\n  return (\n    <TouchableOpacity onPress={() => sendCurrentLocation(currentChannel)} style={{ marginRight: 10 }}>\n      <ShareLocationIcon />\n    </TouchableOpacity>\n  );\n};\n\nconst ChannelScreen = () => {\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <ChatOverlayProvider bottomInset={bottom}>\n      <SafeAreaView>\n        <Chat client={chatClient}>\n          {/* Setting keyboardVerticalOffset as 0, since we don't have any header yet */}\n          <Channel channel={channel} keyboardVerticalOffset={0} Card={LocationCard} InputButtons={InputButtons}>\n            <View style={StyleSheet.absoluteFill}>\n              <MessageList />\n              <MessageInput />\n            </View>\n          </Channel>\n        </Chat>\n      </SafeAreaView>\n    </ChatOverlayProvider>\n  );\n};\n\nexport default function App() {\n  const [ready, setReady] = useState();\n\n  useEffect(() => {\n    const initChat = async () => {\n      await connectUserPromise;\n      await channel.watch();\n      setReady(true);\n    };\n\n    initChat();\n  }, []);\n\n  if (!ready) {\n    return null;\n  }\n\n  return (\n    <SafeAreaProvider>\n      <ChannelScreen channel={channel} />\n    </SafeAreaProvider>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Updating ThreadList on Focus - React Native\nDESCRIPTION: This snippet modifies the ThreadList component to update only when the screen is focused using the useIsFocused hook from @react-navigation/native. The isFocused prop is passed to the ThreadList component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-thread-list.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, ThreadList } from 'stream-chat-react-native';\n// highlight-start\n// any navigation library hook/method can be used for this\nimport { useIsFocused } from '@react-navigation/native';\n// highlight-end\n\nconst ThreadListScreen = () => {\n  // highlight-next-line\n  const isFocused = useIsFocused();\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        // highlight-next-line\n        <ThreadList isFocused={isFocused} />\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Install Native Image Picker - React Native CLI\nDESCRIPTION: This command installs the react-native-image-picker package using yarn. This package provides the native image picker functionality for React Native CLI projects. Follow post-installation steps mentioned in the react-native-image-picker documentation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/native-image-picker.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-image-picker\n```\n\n----------------------------------------\n\nTITLE: Get Available Languages - Typescript\nDESCRIPTION: This code snippet shows how to retrieve an array of available language codes using the `getAvailableLanguages()` method of the `Streami18n` class. The method returns an array of strings, each representing a supported language. Dependencies: Streami18n class.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst availableLanguages = streami18n.getAvailableLanguages();\n```\n\n----------------------------------------\n\nTITLE: Accessing Message Data in onLongPressMessage\nDESCRIPTION: This snippet shows how to access the `message` object and its properties (e.g., `id`, `text`) within the `onLongPressMessage` handler of a `Channel` component. This allows you to perform actions based on the message content when a user long-presses on a message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/object-types/message_pressable_handler_payload.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel onLongPressMessage={({ message }) => console.log(message.id, message.text)}\n```\n\n----------------------------------------\n\nTITLE: Disable Message Action - TypeScript\nDESCRIPTION: This snippet shows how to disable/remove the 'Delete Message' action by setting the `deleteMessage` prop to `null` on the `Channel` component. This prevents the 'Delete Message' action from appearing in the message action list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_actions_customization.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel deleteMessage={null} />\n```\n\n----------------------------------------\n\nTITLE: Custom onNewMessageNotification for Frozen Channels - React Native\nDESCRIPTION: This code snippet demonstrates how to override the default `onNewMessageNotification` event handler in the ChannelList component to prevent unfrozen channels from being added to the list when a new message is received. It defines a custom function `customOnNewMessageNotification` that checks if the channel is frozen before adding it to the list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-list.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst filters = {\n  members: { $in: ['vishal'] },\n  frozen: true,\n};\n\nconst customOnNewMessageNotification = async (setChannels, event) => {\n  const eventChannel = event.channel;\n\n  // If the channel is frozen, then don't add it to the list.\n  if (!eventChannel?.id || !eventChannel.frozen) return;\n\n  try {\n    const newChannel = client.channel(eventChannel.type, eventChannel.id);\n    await newChannel.watch();\n    setChannels(channels => [newChannel, ...channels]);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n<ChannelList filters={filters} onNewMessageNotification={customOnNewMessageNotification} />;\n```\n\n----------------------------------------\n\nTITLE: Enable Quoted-Reply State for Message - React Native\nDESCRIPTION: This function sets the quoted-reply state on a given message. This allows the user to create a reply that quotes the original message, providing context for the reply. The function accepts a message object as input, indicating which message will be quoted in the reply.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/messages-context.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Creating Channel on Server - Typescript\nDESCRIPTION: This snippet shows how to create a channel on the Stream Chat server. You need to call `create()` on the local channel instance for the channel to be created on the server. This should be done only once for each channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Install Expo Haptics (Expo)\nDESCRIPTION: This command installs the expo-haptics package using npx expo install for projects initialized with Expo. This is an optional dependency to provide haptic feedback to the user.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-haptics\n```\n\n----------------------------------------\n\nTITLE: Overriding DateTime Format - Typescript\nDESCRIPTION: This snippet demonstrates how to override the default DateTime format in Stream Chat React Native using Day.js locale configuration. It depends on Day.js and stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst i18n = new Streami18n({\n language: 'nl',\n dayjsLocaleConfigForLanguage: {\n   months: [...],\n   monthsShort: [...],\n   calendar: {\n     sameDay: '...'\n   }\n }\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Editing State for Message\nDESCRIPTION: This function enables the editing state for a given message. This allows the user to modify the content of the message. It is typically used in conjunction with a UI element that allows the user to edit the message text.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/messages_context.mdx#_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Installing stream-chat-react-native-devtools with Yarn\nDESCRIPTION: Installs the `stream-chat-react-native-devtools` package as a development dependency using Yarn. This package facilitates communication between the Stream Chat React Native SDK and the Flipper plugin, enabling debugging capabilities.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/debug-using-flipper-plugin.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev stream-chat-react-native-devtools\n```\n\n----------------------------------------\n\nTITLE: Custom UrlPreview Component - JSX\nDESCRIPTION: This JSX code defines a custom UrlPreview component for Stream Chat.  It logs the text, thumb_url, and title. The component should return a custom UI for displaying URL previews.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomUrlPreview = () => {\n  console.log(text);\n  console.log(thumb_url);\n  console.log(title);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom ImageUploadPreview in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to override the default ImageUploadPreview component with a custom implementation within the Channel component. It uses the ImageUploadPreview prop to specify the CustomImageUploadPreview component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/image_upload_preview.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel ImageUploadPreview={CustomImageUploadPreview} />\n```\n\n----------------------------------------\n\nTITLE: Attachment Equality Check Function in TypeScript\nDESCRIPTION: This TypeScript code defines a function to check if two attachments of type 'location' are equal, specifically comparing their latitude, longitude, and ended_at properties. This function (`isAttachmentEqual`) is designed for use with the `Channel` component in `stream-chat-react-native` to prevent unnecessary re-renders when custom properties of attachments are updated. It adheres to FlatList performance optimization rules by providing a custom equality check.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst isAttachmentEqual: NonNullable<React.ComponentProps<typeof Channel<StreamChatGenerics>>['isAttachmentEqual']> = (\n  prevAttachment,\n  nextAttachment,\n) => {\n  if (prevAttachment.type === 'location' && nextAttachment.type === 'location') {\n    return (\n      prevAttachment.latitude === nextAttachment.latitude &&\n      prevAttachment.longitude === nextAttachment.longitude &&\n      prevAttachment.ended_at === nextAttachment.ended_at\n    );\n  }\n  return true;\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageAvatar size in React Native\nDESCRIPTION: This code snippet demonstrates how to customize the size of the MessageAvatar component in Stream Chat React Native. It imports the Channel and MessageAvatar components from the stream-chat-react-native library.  It then defines a SmallerMessageAvatar functional component that renders the MessageAvatar with a specified size prop of 30.  Finally, it shows how to pass this customized MessageAvatar component to the Channel component using the MessageAvatar prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/message_avatar.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Channel, MessageAvatar} from 'stream-chat-react-native';\n\nconst SmallerMessageAvatar = () => <MessageAvatar size={30} />\n\n<Channel MessageAvatar={SmallerMessageAvatar} />\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Permission - Android\nDESCRIPTION: This XML snippet adds the necessary camera permission to the `AndroidManifest.xml` file for Android. This permission is required for the camera to function correctly within the Stream Chat React Native application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.CAMERA\"/>\n```\n\n----------------------------------------\n\nTITLE: Handling Channel Deletion Event\nDESCRIPTION: This TypeScript code snippet demonstrates how to listen to the `channel.deleted` event using the Stream Chat client in a React Native application. This event listener allows the application to react when a channel is deleted, providing an opportunity to implement custom UX, such as navigating back to the channel list screen. The code checks if the deleted channel is the current channel and then executes a custom action.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nclient.on('channel.deleted', event => {\n  if (event.cid === channel.cid) {\n    // add your action here\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Translators - Typescript\nDESCRIPTION: This code snippet demonstrates how to asynchronously retrieve the translation functions using the `getTranslators()` method. The method returns an object containing translation functions, such as `t` (for general translations) and `tDateTimeParser` (for date/time parsing).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { t, tDateTimeParser } = await streami18n.getTranslators();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Reaction Icon\nDESCRIPTION: This snippet creates a custom reaction icon component using `react-native-svg`. The component receives `IconProps` and renders an SVG path. It's important to style the icon appropriately to fit with the existing theme and sizing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const StreamReaction: React.FC<IconProps> = props => (\n  <RootSvg height={21} width={42} {...props} viewBox='0 0 42 21'>\n    <RootPath\n      d='M26.1491984,6.42806971 L38.9522984,5.52046971 C39.7973984,5.46056971 40.3294984,6.41296971 39.8353984,7.10116971 L30.8790984,19.5763697 C30.6912984,19.8379697 30.3888984,19.9931697 30.0667984,19.9931697 L9.98229842,19.9931697 C9.66069842,19.9931697 9.35869842,19.8384697 9.17069842,19.5773697 L0.190598415,7.10216971 C-0.304701585,6.41406971 0.227398415,5.46036971 1.07319842,5.52046971 L13.8372984,6.42816971 L19.2889984,0.333269706 C19.6884984,-0.113330294 20.3884984,-0.110730294 20.7846984,0.338969706 L26.1491984,6.42806971 Z M28.8303984,18.0152734 L20.5212984,14.9099734 L20.5212984,18.0152734 L28.8303984,18.0152734 Z M19.5212984,18.0152734 L19.5212984,14.9099734 L11.2121984,18.0152734 L19.5212984,18.0152734 Z M18.5624984,14.1681697 L10.0729984,17.3371697 L3.82739842,8.65556971 L18.5624984,14.1681697 Z M21.4627984,14.1681697 L29.9522984,17.3371697 L36.1978984,8.65556971 L21.4627984,14.1681697 Z M19.5292984,13.4435697 L19.5292984,2.99476971 L12.5878984,10.8305697 L19.5292984,13.4435697 Z M20.5212984,13.4435697 L20.5212984,2.99606971 L27.4627984,10.8305697 L20.5212984,13.4435697 Z M10.5522984,10.1082697 L12.1493984,8.31366971 L4.34669842,7.75446971 L10.5522984,10.1082697 Z M29.4148984,10.1082697 L27.8178984,8.31366971 L35.6205984,7.75446971 L29.4148984,10.1082697 Z'\n      {...props}\n    />\n  </RootSvg>\n);\n```\n\n----------------------------------------\n\nTITLE: Consuming CreatePollContext with useCreatePollContext hook - Typescript\nDESCRIPTION: Demonstrates how to consume the CreatePollContext using the useCreatePollContext hook provided by stream-chat-react-native. This hook simplifies access to the context's values. It depends on React and stream-chat-react-native. The returned value provides access to methods like sendMessage, closePollCreationDialog, createAndSendPoll, and createPollOptionHeight.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/create-poll-context.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useCreatePollContext } from 'stream-chat-react-native';\n\nconst value = useCreatePollContext();\n```\n\n----------------------------------------\n\nTITLE: Using useChannelContext with Generics (TSX)\nDESCRIPTION: This snippet shows how to use the useChannelContext hook with generics, allowing you to access a correctly typed channel object. Applying generics to hooks such as useChannelContext returns correctly typed custom data.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_18\n\nLANGUAGE: tsx\nCODE:\n```\nconst { channel } = useChannelContext<StreamChatGenerics>();\n```\n\n----------------------------------------\n\nTITLE: Customizing Message Actions in Channel Component (JSX)\nDESCRIPTION: Demonstrates how to customize message actions within the Channel component in stream-chat-react-native. It showcases the previous method of overriding `messageActions` and the new approach of selectively keeping or removing actions by providing a function that receives available actions and returns the desired subset.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/package/CHANGELOG.md#_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<Channel\n    messageActions=[\n      {\n        action: () => { /** Some message action logic */ };\n        title: \"Pin Message\";\n        icon: PinIcon;\n        titleStyle: {};\n      },\n      {\n        action: () => { /** Some message action logic */ };\n        title: \"Delete Message\";\n        icon: PinIcon;\n        titleStyle: {};\n      }\n    ]\n  >\n    {/** MessageList and MessageInput component here */}\n  </Channel>\n```\n\nLANGUAGE: JSX\nCODE:\n```\n/** Lets say you only want to keep threadReply and copyMessage actions */\n  <Channel\n    messageActions={({\n      blockUser,\n      copyMessage,\n      deleteMessage,\n      editMessage,\n      flagMessage,\n      muteUser,\n      reply,\n      retry,\n      threadReply,\n    }) => [threadReply, copyMessage]}\n  >\n    {/** MessageList and MessageInput component here */}\n  </Channel>\n```\n\n----------------------------------------\n\nTITLE: Installing peer dependencies with Expo CLI\nDESCRIPTION: This command installs the peer dependencies required by the Stream Chat React Native SDK using the Expo CLI in an Expo project. These dependencies are necessary for features such as network information, flat list support, file system access, image manipulation, gesture handling, animations, and SVG support.  It uses Expo's package management system.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install @stream-io/flat-list-mvcp @react-native-community/netinfo expo-file-system expo-image-manipulator react-native-gesture-handler react-native-reanimated react-native-svg\n```\n\n----------------------------------------\n\nTITLE: General Usage of PollAllOptions - React Native\nDESCRIPTION: Demonstrates the basic integration of the PollAllOptions component within a stream-chat-react-native application.  It shows how to embed the component within OverlayProvider, Chat, and Channel components, and how to pass the message and poll props. It assumes the existence of client, channel, message and poll variables.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-all-options.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, PollAllOptions } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollAllOptions message={message} poll={poll} {...otherOptionalProps} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Accessing and Rendering Custom MessageStatus in MessageFooter (React Native)\nDESCRIPTION: This code demonstrates how to access and render the custom `MessageStatus` component in `MessageFooter` using the `useMessagesContext` hook.  The default component utilizes the `useMessageContext` hook, however, custom components can utilize different hooks to access information within the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/contexts.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst { showMessageStatus } = useMessageContext();\nconst { MessageStatus } = useMessagesContext();\n...\nreturn (\n  ...\n  {showMessageStatus && <MessageStatus />}\n);\n```\n\n----------------------------------------\n\nTITLE: Register Translation - Typescript\nDESCRIPTION: This code snippet shows how to register a custom translation for a specific language using the `registerTranslation()` method. This allows for dynamic addition or overriding of translations at runtime. Dependencies: Streami18n class.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nstreami18n.registerTranslation('mr', {\n  'Nothing yet...': 'काहीही नाही  ...',\n  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageFooter Component\nDESCRIPTION: This snippet renders the MessageFooter component, likely used to display information or actions related to a message at the bottom of the message bubble. It's a React component that receives props from the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_9\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageFooter />\n```\n\n----------------------------------------\n\nTITLE: Defining Query Options - Typescript\nDESCRIPTION: This code snippet demonstrates how to define an options object to be passed to the Stream Chat client's query function. The `message_limit` property specifies the maximum number of messages to retrieve for each channel. Changing only the options object will not trigger a re-query of the channel list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel-list/props/options.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst options = { message_limit: 100 };\n```\n\n----------------------------------------\n\nTITLE: Providing MessagesContext with a custom value in React Native\nDESCRIPTION: This snippet demonstrates how a messagesContext can be provided to the messages provider.  Components that use this provider can access it via the `useMessagesContext` hook.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/contexts.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<MessagesProvider value={messagesContext}>\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated Babel Plugin - JavaScript\nDESCRIPTION: This JavaScript snippet shows how to add the `react-native-reanimated/plugin` to the project's babel config file (`babel.config.js`). This is essential for Reanimated 2 to function correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n      ...\n      plugins: [\n          ...\n          'react-native-reanimated/plugin',\n      ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Avatar - React Native\nDESCRIPTION: This code snippet shows how to disable rendering of the message avatar by setting the MessageAvatar prop to null.  This is recommended when message grouping is disabled.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/performance.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel MessageAvatar={() => null} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel on the Server - TypeScript\nDESCRIPTION: This snippet demonstrates how to create a channel on the Stream Chat server. It uses the create method on the channel instance. Ensure the channel is created server-side before attempting to use it.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Install stream-chat-react-native-devtools with Yarn\nDESCRIPTION: This command installs the `stream-chat-react-native-devtools` package as a development dependency. This package enables communication between the Stream Chat React Native SDK and the Flipper plugin.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/debug-using-flipper-plugin.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev stream-chat-react-native-devtools\n```\n\n----------------------------------------\n\nTITLE: Setting Timezone in Streami18n - Typescript\nDESCRIPTION: This snippet demonstrates how to set the timezone in the Streami18n constructor. It is important to provide the moment-timezone object to the DateTimeParser key.  Requires stream-chat-react and moment-timezone dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Streami18n } from 'stream-chat-react';\nimport momentTimezone from 'moment-timezone';\n\nconst streami18n = new Streami18n({\n  DateTimeParser: momentTimezone,\n  timezone: 'Europe/Budapest',\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageReactionPicker Component\nDESCRIPTION: This snippet renders the MessageReactionPicker component. This component allows users to select reactions to a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_18\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageReactionPicker />\n```\n\n----------------------------------------\n\nTITLE: Custom Giphy Attachment Component - JSX\nDESCRIPTION: This JSX code defines a custom Giphy attachment component for Stream Chat. It receives the `attachment` object and `onPressIn` function as props and logs attachment properties to the console. The component should return a custom UI for displaying Giphy attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomGiphy = ({ attachment, onPressIn }) => {\n  console.log(attachment.type);\n  console.log(attachment.actions)\n  console.log(attachment.image_url)\n  console.log(attachment.thumb_url)\n  console.log(attachment.title)\n  console.log(attachment.type)\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageInputContext with useMessageInputContext hook - React Native\nDESCRIPTION: This code demonstrates using the useMessageInputContext hook provided by the stream-chat-react-native library to access the MessageInputContext. It shows importing the hook and retrieving values like sendMessage and toggleAttachmentPicker. This is an alternative way to access the context values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/message-input-context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageInputContext } from 'stream-chat-react-native';\n\nconst { sendMessage, toggleAttachmentPicker } = useMessageInputContext();\n```\n\n----------------------------------------\n\nTITLE: Memoizing Custom Components for Performance - React Native\nDESCRIPTION: This snippet demonstrates how to optimize the performance of custom components by memoizing them and using a custom `areEqual` check.  This prevents unnecessary re-renders when the context updates.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/custom_components.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst MySenderComponentWithContext = ({ latestMessageSender }) => {\n  console.log('Rendered');\n\n  return <Text>{`Last Sender: ${latestMessageSender}`}</Text>;\n};\n\nconst MemoizedMySenderComponent = React.memo(\n  MySenderComponentWithContext,\n  (prev, next) => prev.latestMessageSender === next.latestMessageSender,\n);\n\nconst MySenderComponent = () => {\n  const { messages } = usePaginatedMessageListContext();\n  const latestMessageSender = messages[messages.length - 1]?.user?.name;\n\n  return <MemoizedMySenderComponent latestMessageSender={latestMessageSender} />;\n};\n```\n\n----------------------------------------\n\nTITLE: MessagePressableHandlerPayload Example\nDESCRIPTION: This JSX snippet illustrates the structure of the `MessagePressableHandlerPayload` object, which is passed to callback handlers for message interactions. It includes properties like `actionHandlers`, `additionalInfo`, and `message`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-actions.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  actionHandlers: {\n    deleteMessage: [function],\n    editMessage: [function],\n    quotedReply: [function],\n    resendMessage: [function],\n    showMessageOverlay: [function],\n    toggleBanUser: [function],\n    toggleMuteUser: [function],\n    toggleReaction: [function],\n  },\n  additionalInfo: [object],\n  message: [message object],\n}\n```\n\n----------------------------------------\n\nTITLE: Split Screen Implementation with MessageList in React Native\nDESCRIPTION: This code snippet showcases how to implement a split-screen layout with video and chat side-by-side using the MessageList component in React Native. The video is rendered in the top section, and the chat MessageList is rendered in the bottom section. It uses stream-chat-react-native components for chat functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message-list.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, View } from 'react-native';\n\nimport { Chat, Channel, MessageList } from 'stream-chat-react-native';\n\n// When you render your chat screen\n<SafeAreaView style={{ flex: 1 }}>\n  <View style={[{ position: 'absolute' }, StyleSheet.absoluteFillObject]}>\n      <Chat client={chatClient} i18nInstance={streami18n}>\n        <Channel\n          channel={channel}\n          keyboardVerticalOffset={headerHeight}\n          thread={thread}\n        >\n          <View style={{ flex: 1 }}>\n            <Image source={{\n              uri: 'https://i.ibb.co/rfx5PCr/Screenshot-2021-02-24-at-14-20-57.png'\n            }} style={{ height: '100%', width: '100%'}} resizeMode={'cover'} />\n          </View>\n          <MessageList<\n            LocalAttachmentType,\n            LocalChannelType,\n            LocalCommandType,\n            LocalEventType,\n            LocalMessageType,\n            LocalResponseType,\n            LocalUserType\n          >\n            onThreadSelect={(thread) => {\n              setThread(thread);\n              navigation.navigate('Thread');\n            }}\n          />\n          <MessageInput />\n        </Channel>\n      </Chat>\n  </View>\n</SafeAreaView>\n```\n\n----------------------------------------\n\nTITLE: Filtering channels with $in operator - Typescript\nDESCRIPTION: This code snippet demonstrates how to construct a filter object to query channels where users 'vishal' or 'jaap' are members.  The filter is passed to the client query function from the Stream Chat SDK.  It uses the `$in` operator to check if the 'members' field contains either of the specified user IDs. This enhances performance by filtering based on server-side indexing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel-list/props/filters.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst filter = {\n  type: 'messaging',\n  members: {\n    $in: ['vishal', 'jaap'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Defining User Response Record Type - TypeScript\nDESCRIPTION: Defines a TypeScript type for a record (object) where keys are strings and values are of type `UserResponse<UserType>`. This type likely represents a collection of user responses, indexed by a string identifier, potentially user IDs or usernames. The `UserType` is a generic type parameter allowing for flexibility in defining the specific user data structure.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/contexts/channel-context/watchers.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nRecord<\n  string, // string\n  UserResponse<UserType>\n>;\n```\n\n----------------------------------------\n\nTITLE: Creating Wallpaper Overview Screen - TSX\nDESCRIPTION: This code defines a screen where users can select a wallpaper image from a list of predefined images. It utilizes react-native-mmkv to store the selected image URI for a specific channel and then navigates the user back to the chat channel screen.  It uses react navigation for navigation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_background_customization.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RouteProp } from '@react-navigation/native';\nimport { useMMKVObject } from 'react-native-mmkv';\nimport { View, SafeAreaView, Pressable, Image, StyleSheet } from 'react-native';\n\nconst WallpaperOverviewScreen = ({\n  navigation: { navigate },\n  route: {\n    params: { channelId },\n  },\n}: WallpaperOverviewScreenProps) => {\n  const [_, setChannelPreferences] = useMMKVObject<ChannelPreferences>(channelId);\n  return (\n    <SafeAreaView\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n      }}\n    >\n      <View style={styles.container}>\n        {BRIGHT_IMAGES?.map(({ imageUri = '' }, i) => {\n          const handleOnPress = () => {\n            setChannelPreferences({ imageUri });\n            navigate('Channel');\n          };\n          return (\n            <Pressable\n              key={i}\n              onPress={handleOnPress}\n              style={{\n                margin: 1,\n                width: GRID_ITEM_WIDTH,\n              }}\n            >\n              <Image style={styles.image} source={{ uri: imageUri }} />\n            </Pressable>\n          );\n        })}\n      </View>\n    </SafeAreaView>\n  );\n};\n\ntype StackNavigatorParamList = {\n  WallpaperOverviewScreen: {\n    channelId: string;\n  };\n};\n\ntype WallpaperOverviewScreenProps = {\n  navigation: StackNavigationProp<StackNavigatorParamList, 'WallpaperOverviewScreen'>;\n  route: RouteProp<StackNavigatorParamList, 'WallpaperOverviewScreen'>;\n};\n\ntype ChannelPreferences = {\n  imageUri: string;\n};\n\nconst GRID_ITEM_WIDTH = '32.7%';\n\n// Some random images that will get you started\nconst BRIGHT_IMAGES = [\n  'https://images.unsplash.com/photo-1549125764-91425ca48850?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8NjF8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1549241520-425e3dfc01cb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8ODB8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1554226321-24fdcddd5a55?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MjE5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1550006490-9f0656b79e9d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8ODl8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1551506448-074afa034c05?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTEzfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553114835-6f7674d3c2c0?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTMyfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553075712-453f7213c24f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTMzfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1551917951-148edcd8ea8d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTU3fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553969923-bbf0cac2666b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MjA3fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553194642-29b272a173b9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTcwfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553356084-58ef4a67b2a7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTcxfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553526777-5ffa3b3248d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTk4fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n].map(imageUri => ({ imageUri }));\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flex: 1,\n    alignContent: 'stretch',\n    flexWrap: 'wrap',\n    padding: 6,\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Custom Attachment Property Handling - TypeScript\nDESCRIPTION: This TypeScript snippet demonstrates how to handle custom properties on message attachments. It defines a function `isAttachmentEqualHandler` that checks for changes in the `customField` property of an attachment. This function is then passed to the Stream Chat Channel component to ensure UI updates when the custom property changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Channel } from 'stream-chat-react-native';\n\nconst isAttachmentEqualHandler = (prevAttachment, nextAttachment) => {\n  const attachmentEqual = prevAttachment.customField === nextAttachment.customField;\n  if (!attachmentEqual) return false;\n  return true;\n};\n\n<Channel\n  channel={channel}\n  isAttachmentEqual={isAttachmentEqualHandler}\n  Card={attachment => {\n    return (\n      <View>\n        <Text>{attachment.customField}</Text>\n      </View>\n    );\n  }}\n>\n  {/* The underlying components */}\n</Channel>;\n```\n\n----------------------------------------\n\nTITLE: Creating ChannelBackgroundView for Dynamic Background - React Native\nDESCRIPTION: This code defines a `ChannelBackgroundView` component that fetches a background image URI from `react-native-mmkv` storage using `useMMKVObject` hook.  It displays the image using `ImageBackground` and defaults to a placeholder if no URI is found in storage.  Requires `react-native-mmkv` to be installed and configured.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-background.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { ViewProps } from 'react-native';\nimport { useMMKVObject } from 'react-native-mmkv';\n\ntype ChannelPreferences = {\n  imageUri: string;\n};\n\nconst DEFAULT_BACKGROUND_URI = 'https://i.redd.it/3jfjc53fsyb61.jpg';\n\nconst ChannelBackgroundView = ({\n  channelId,\n  ...props\n}: {\n  channelId: string;\n} & ViewProps) => {\n  const [channelPreferences] = useMMKVObject<ChannelPreferences>(channelId);\n  const uri = channelPreferences?.imageUri || DEFAULT_BACKGROUND_URI;\n\n  return <ImageBackground {...props} source={{ uri }} />;\n};\n\n```\n\n----------------------------------------\n\nTITLE: Custom PollOptionFullResultsContent - React Native\nDESCRIPTION: This example demonstrates how to create and use a custom PollOptionFullResultsContent component to override the default UI. It uses the usePollState and usePollOptionVotesPagination hooks to access the poll name and paginated votes, displaying them in a FlatList. The MyPollOptionFullResultsContent is then passed as a prop to the PollOptionFullResults component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-option-full-results.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, FlatList } from 'react-native';\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  PollOptionFullResults,\n  usePollOptionVotesPagination,\n  usePollState,\n} from 'stream-chat-react-native';\n\n// will only display the first page of votes without loading more\nconst MyPollOptionFullResultsContent = ({ option }) => {\n  const { name } = usePollState();\n  const { votes } = usePollOptionVotesPagination({ option });\n  return (\n    <FlatList\n      ListHeaderComponent={() => <Text>{name}</Text>}\n      data={votes}\n      renderItem={({ item }) => <Text>{item.id}</Text>}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollOptionFullResults\n            message={message}\n            poll={poll}\n            option={option}\n            PollOptionFullResultsContent={MyPollOptionFullResultsContent}\n          />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing Emoji Search Index - Typescript/JSX\nDESCRIPTION: This snippet showcases how to override the default emoji search behavior in the Stream Chat React Native Channel component using the `emojiSearchIndex` prop. It integrates a custom search function (`@jukben/emoji-search`) and maps the results to the expected emoji type.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-auto-complete-suggestion-list.mdx#_snippet_3\n\nLANGUAGE: TypeScript\nCODE:\n```\nimport { Channel, EmojiSearchIndex } from 'stream-chat-react-native';\nimport search from '@jukben/emoji-search';\n\nconst ChannelScreen: React.FC<ChannelScreenProps> = ({ navigation }) => {\n  const customEmojiSearchIndex: EmojiSearchIndex = {\n    search: (query: string) => {\n      const results = search(query);\n      return results.slice(0, 10).map(data => ({\n        name: data.name,\n        names: data.keywords,\n        unicode: data.name,\n        skins: [],\n      }));\n    },\n  };\n\n  return (\n    <Channel\n      channel={channel}\n      emojiSearchIndex={customEmojiSearchIndex}\n      keyboardVerticalOffset={headerHeight}\n      thread={thread}\n    >\n      {/* Underlying components here */}\n    </Channel>\n  );\n};\n```\n\nLANGUAGE: TypeScript\nCODE:\n```\ntype Emoji = {\n  id: string;\n  name: string;\n  names: string[];\n  unicode: string;\n  skins?: string[];\n};\n```\n\n----------------------------------------\n\nTITLE: Implementing Faded Chat with Video Background in React Native\nDESCRIPTION: This snippet demonstrates how to create a faded chat overlay on a video background in React Native using Stream Chat. It uses `MaskedView` and `LinearGradient` to achieve the fade effect. Requires installing `@react-native-community/masked-view` and `react-native-linear-gradient`. The snippet assumes `chatClient` and `channel` are already initialized and `headerHeight` is defined. MessageList is wrapped within the MaskedView to provide the fade effect.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/livestream_messagelist.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, View } from 'react-native';\n\n// Make sure you have installed following two dependencies\nimport MaskedView from '@react-native-community/masked-view';\nimport LinearGradient from 'react-native-linear-gradient';\n\nimport { Chat, Channel, MessageList } from 'stream-chat-react-native';\n\nconst theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transperant',\n    },\n  },\n  messageSimple: {\n    content: {\n      textContainer: {\n        backgroundColor: 'white',\n      },\n    },\n  },\n};\n\n// When you render your chat screen\n<SafeAreaView style={{ flex: 1 }}>\n  {/* For the sake of example, we are using image as background, you can replace it with your Video component. */}\n  <Image\n    source={{\n      uri: 'https://i.pinimg.com/474x/59/a2/aa/59a2aae82b34bace9dc4d4df90457a3b.jpg',\n    }}\n    style={{ height: '100%', width: '100%' }}\n  />\n\n  <View style={[{ position: 'absolute' }, StyleSheet.absoluteFillObject]}>\n    <Chat client={chatClient} style={theme}>\n      <Channel channel={channel} keyboardVerticalOffset={headerHeight} thread={thread}>\n        <View style={{ flex: 1 }} />\n        <View style={{ flex: 2 }}>\n          <MaskedView\n            style={{ flex: 1 }}\n            maskElement={\n              <LinearGradient\n                colors={['rgba(0,0,0,0)', 'rgba(0,0,0,1)']}\n                style={{\n                  flex: 1,\n                }}\n                start={{ x: 0, y: 0 }}\n                end={{ x: 0, y: 1 }}\n                locations={[0, 0.5]}\n              />\n            }\n          >\n            <MessageList />\n          </MaskedView>\n        </View>\n        <MessageInput />\n      </Channel>\n    </Chat>\n  </View>\n</SafeAreaView>;\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Reaction Data in Stream Chat React Native (TSX)\nDESCRIPTION: This code defines an array of `ReactionData` objects, which are used to specify custom reactions for messages in Stream Chat. Each object includes an `Icon` component and a `type` string. The default array contains common reactions like love, like, sad, haha, and wow.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nexport const reactionData: ReactionData[] = [\n  {\n    Icon: LoveReaction,\n    type: 'love',\n  },\n  {\n    Icon: ThumbsUpReaction,\n    type: 'like',\n  },\n  {\n    Icon: ThumbsDownReaction,\n    type: 'sad',\n  },\n  {\n    Icon: LOLReaction,\n    type: 'haha',\n  },\n  {\n    Icon: WutReaction,\n    type: 'wow',\n  },\n];\n```\n\n----------------------------------------\n\nTITLE: Consuming TypingContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to access the TypingContext using React's useContext hook.  It imports the TypingContext from stream-chat-react-native and uses useContext to retrieve the typing object. The typing object contains a map of user IDs to typing.start event objects from the Stream Chat JavaScript SDK. This allows a component to display typing indicators.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/typing_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { TypingContext } from 'stream-chat-react-native';\n\nconst { typing } = useContext(TypingContext);\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-flipper with NPM\nDESCRIPTION: Installs the `react-native-flipper` package as a development dependency using NPM. This dependency is required to interact with the Flipper Plugin.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/debug-using-flipper-plugin.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev react-native-flipper\n```\n\n----------------------------------------\n\nTITLE: Installing react-native-flipper with Yarn\nDESCRIPTION: Installs the `react-native-flipper` package as a development dependency using Yarn. This dependency is required to interact with the Flipper Plugin.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/debug-using-flipper-plugin.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add --dev react-native-flipper\n```\n\n----------------------------------------\n\nTITLE: Install @expo/react-native-action-sheet\nDESCRIPTION: This command installs the `@expo/react-native-action-sheet` package, which is used for displaying an action sheet for selecting attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @expo/react-native-action-sheet\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Config for Moment via registerTranslation - Typescript\nDESCRIPTION: This snippet shows how to add locale config for Moment.js while registering translation via `registerTranslation` function. This allows for custom date and time formatting based on the given language. Requires Moment.js.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n =new Streami18n();\n\ni18n.registerTranslation(\n 'mr',\n {\n   'Nothing yet...': 'काहीही नाही  ...',\n   '{{ firstUser }} and {{ secondUser }} are typing...':\n    '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',\n },\n {\n   months: [...],\n   monthsShort: [...],\n   calendar: {\n     sameDay: '...'\n   }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User - Typescript\nDESCRIPTION: This code snippet demonstrates how to disconnect the current user from Stream Chat using the disconnectUser function. This function cleans up the user connection and should be called when the user logs out or the application closes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/hello_stream_chat.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Members Record Type - Typescript\nDESCRIPTION: Defines the type for a record of channel members, where the key is the user ID (string), and the value is an object containing member details such as ban status, creation timestamp, invitation status, moderator status, role, shadow ban status, update timestamp, user information, and user ID.  This type is used to represent the channel members data received from the backend.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/channel-context/members.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRecord<\n  string, // userId\n  {\n    banned?: boolean;\n    created_at?: string;\n    invite_accepted_at?: string;\n    invite_rejected_at?: string;\n    invited?: boolean;\n    is_moderator?: boolean;\n    role?: string;\n    shadow_banned?: boolean;\n    updated_at?: string;\n    user?: UserResponse<UserType>;\n    user_id?: string;\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Example Push Notification Payload (iOS)\nDESCRIPTION: This JSON snippet demonstrates a sample push notification payload structure for iOS devices. The `data` field contains information about the message, channel, and sender. The `notification` field, specific to iOS, contains the title and body of the notification message.  On Android, only the `data` field is present by default.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/push_notifications_v2.mdx#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"data\": {\n    \"sender\": \"stream.chat\",\n    \"type\": \"message.new\",\n    \"version\": \"v2\",\n    \"id\": \"d152f6c1-8c8c-476d-bfd6-59c15c20548a\",\n    \"channel_type\": \"messaging\",\n    \"channel_id\": \"company-chat\",\n    \"cid\": \"messaging:company-chat\"\n  },\n  // the notification field is present only on iOS by default and not on Android\n  \"notification\": {\n    \"title\": \"Message from user\",\n    \"body\": \"Hello\"\n  }\n  // other fields..\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Action Sheet Package\nDESCRIPTION: This snippet shows the command to install the `@expo/react-native-action-sheet` package, which is used for implementing the action sheet in the example.  It is required to provide action sheet functionality for attachment options.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nyarn add @expo/react-native-action-sheet\n```\n\n----------------------------------------\n\nTITLE: Providing Custom Card Component to Channel in JSX\nDESCRIPTION: This JSX snippet shows how to provide a custom Card component to the Channel component.  The CustomCardComponent is passed as the Card prop. This allows for rendering custom attachments using a Card view with a custom implementation. Dependencies include React and the CustomCardComponent.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel Card={CustomCardComponent} />\n```\n\n----------------------------------------\n\nTITLE: Using AutoCompleteSuggestionHeader with Channel Component in React Native\nDESCRIPTION: This snippet demonstrates how to use the `AutoCompleteSuggestionHeader` component and integrate it into the `Channel` component in a React Native application using the stream-chat-react-native library. It shows a basic usage example where a custom AutoCompleteSuggestionHeaderComponent is created and passed as a prop to the Channel component. This allows for customization of the autocomplete suggestion list header. The stream-chat-react-native library must be installed and properly configured.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/autocomplete-suggestion-header.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionHeader } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionHeaderComponent = () => <AutoCompleteSuggestionHeader />\n\n<Channel AutoCompleteSuggestionHeader={AutoCompleteSuggestionHeaderComponent} />\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CooldownTimer - React Native (JSX)\nDESCRIPTION: This snippet showcases how to create a custom CooldownTimer component to replace the default one. It accepts a seconds prop representing the remaining cooldown time and renders it within a Text component.  It requires the CooldownTimerProps type from stream-chat-react-native.  The output is a custom UI element displaying the remaining seconds.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\nimport { CooldownTimerProps } from 'stream-chat-react-native';\n\nconst CustomCooldownTimer = ({ seconds }: CooldownTimerProps) => {\n  const isEven = seconds % 2 === 0;\n\n  console.log(`There is an ${isEven ? 'even' : 'odd'} amount of seconds left`);\n\n  return <Text>{seconds}</Text>;\n};\n\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel CooldownTimer={CustomCooldownTimer}>...</Channel>\n```\n\n----------------------------------------\n\nTITLE: Replacing Attachment Picker with Native Image Picker (React Native)\nDESCRIPTION: This code shows how to replace the default attachment picker with a native image picker using `@expo/react-native-action-sheet`. It overrides the default `AttachButton` component in the `Channel` component and implements a custom `onPress` handler to display an `ActionSheet` with options to choose attachments from the Photo Library, Camera, or Files.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AttachButton, Channel } from 'stream-chat-react-native';\n\nconst CustomAttachButton = () => {\n  const onPressHandler = () => {\n    // Custom handling of onPress action on AttachButton\n  };\n\n  return <AttachButton handleOnPress={onPressHandler} />;\n};\n\n<Channel AttachButton={CustomAttachButton} />;\n```\n\n----------------------------------------\n\nTITLE: Read Status Record Type Definition\nDESCRIPTION: This snippet shows the typescript type definition for the read statuses of members of the current channel. It is a record that maps userIds to objects containing last_read dates and user information.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channel-context.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nRecord<\n  string, // userId\n  {\n    last_read: Date;\n    user: UserResponse<UserType>;\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Disable Keyboard Compatible View - React Native\nDESCRIPTION: This code snippet shows how to disable the default KeyboardCompatibleView in the Stream Chat Channel component using the disableKeyboardCompatibleView prop. This is useful when you want to implement your own keyboard handling logic.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/keyboard.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  disableKeyboardCompatibleView\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Customizing ChannelPreviewStatus with custom date - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the `ChannelPreviewStatus` component in `stream-chat-react-native` to display a custom message preview date. It utilizes `useMemo` to optimize performance when re-rendering and passes the formatted date to the `formatLatestMessageDate` prop of `ChannelPreviewStatus`. The custom component is then passed to the `PreviewStatus` prop of the `ChannelList` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/channel-preview-status.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo } from 'react';\nimport { ChannelList, ChannelPreviewStatus } from 'stream-chat-react-native';\nimport { customDateFormatter } from '...'; // your custom date formatter\n\nconst CustomPreviewStatus = ({ latestMessagePreview }) => {\n  // important usage of useMemo once date parsers can perform some computation when re-rendering.\n  const formattedDate = useMemo(() => customDateFormatter(latestMessagePreview), [latestMessagePreview]);\n  return <ChannelPreviewStatus formatLatestMessageDate={formattedDate} />;\n};\n\nconst App = () => {\n  return <ChannelList PreviewStatus={CustomPreviewStatus} />;\n};\n```\n\n----------------------------------------\n\nTITLE: Install Geolocation and React Native Maps\nDESCRIPTION: These commands install the necessary dependencies for geolocation and displaying maps in the React Native application. `@react-native-community/geolocation` is used to track user location, and `react-native-maps` is used to display the location on a map.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/live-location-sharing.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-community/geolocation\nyarn add react-native-maps\n```\n\n----------------------------------------\n\nTITLE: Adding Camera Permissions - XML\nDESCRIPTION: This XML snippet shows the necessary permission to include in the `AndroidManifest.xml` file for camera functionality on Android.  It requires the camera permission for accessing the device's camera.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.CAMERA\"/>\n```\n\n----------------------------------------\n\nTITLE: Initializing ThreadList Component - React Native\nDESCRIPTION: This snippet initializes the ThreadList component within a React Native screen, wrapped by OverlayProvider and Chat components. It assumes a pre-existing chatClient instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-thread-list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, ThreadList } from 'stream-chat-react-native';\n\nconst ThreadListScreen = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <ThreadList />\n      </Chat>\n    </OverlayProvider>\n  );};\n\n```\n\n----------------------------------------\n\nTITLE: Re-Initializing StreamChat Client with Defaults (TSX)\nDESCRIPTION: This snippet shows how to re-initialize the StreamChat client with the default generics.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_16\n\nLANGUAGE: tsx\nCODE:\n```\nconst client = StreamChat.getInstance<StreamChatGenerics>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User - Typescript\nDESCRIPTION: This snippet demonstrates how to disconnect a user from Stream Chat using the `disconnectUser` function. No parameters are required.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overview.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Registering a Custom Translation - JavaScript\nDESCRIPTION: This code snippet demonstrates how to register a custom translation for a specific language ('mr' - Marathi in this example) using the `registerTranslation` method. It also shows how to override existing translations for certain keys.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_18\n\nLANGUAGE: JavaScript\nCODE:\n```\nstreami18n.registerTranslation('mr', {\n  'Nothing yet...': 'काहीही नाही  ...',\n  '{{ firstUser }} and {{ secondUser }} are typing...': '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत',\n});\n```\n\n----------------------------------------\n\nTITLE: Running the SampleApp on iOS\nDESCRIPTION: This command runs the SampleApp on the iOS simulator using React Native CLI. Make sure to install native dependencies with CocoaPods before running this command.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx react-native run-ios\n```\n\n----------------------------------------\n\nTITLE: Install React Native Blob Util and Share (RN CLI)\nDESCRIPTION: This command installs the react-native-blob-util and react-native-share packages using yarn for projects initialized with React Native CLI.  These are optional dependencies to enable attachment sharing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-blob-util react-native-share\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageFooter and MessageStatus in React Native\nDESCRIPTION: This code showcases how to create custom `MessageFooter` and `MessageStatus` components and integrate them into the `Channel` component. It illustrates the possibility of using other components, both custom and out-of-the-box, within a custom component to create a desired UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/contexts.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nconst CustomMessageFooter = () => {\n  const { MessageAvatar, MessageStatus } = useMessagesContext();\n  return (\n    <View>\n      <MessageAvatar />\n      <Text>Footer</Text>\n      <MessageStatus />\n    </View>\n  );\n};\n\nconst CustomMessageStatus = () => {\n  const { message } = useMessageContext();\n  return <Text>{message.readBy}</Text>\n};\n...\n<Channel MessageFooter={CustomMessageFooter} MessageStatus={CustomMessageStatus}>\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Reaction to Reaction Data\nDESCRIPTION: This snippet shows how to add the newly created `StreamReaction` to the existing `reactionData` array. This allows it to be displayed in the reaction picker and used as a valid reaction type.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\nconst newReactionData = [...reactionData, { type: 'stream', Icon: StreamReaction }];\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel with Channel ID - Typescript\nDESCRIPTION: This code snippet shows how to create a Stream Chat channel using a channel ID. The `client.channel` method is called with the channel type ('messaging') and the channel ID ('the_park'), along with custom data (channel name).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a channel id\n */\nconst channel = client.channel('messaging', 'the_park', {\n  name: 'The Park',\n});\n```\n\n----------------------------------------\n\nTITLE: Removing Message from Local State - React Native\nDESCRIPTION: This function removes a message from the local channel state.  It's important to note that this function only updates the local state and does not interact with the API to delete the message.  The actual API call for deleting the message should be done via `channel.deleteMessage`.  The function accepts a message object as a parameter.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nremoveMessage: (message) => void\n```\n\n----------------------------------------\n\nTITLE: Customizing MessagePinnedHeader with Channel Prop in TSX\nDESCRIPTION: This snippet demonstrates how to customize the MessagePinnedHeader component by providing a custom implementation via the `MessagePinnedHeader` prop on the `Channel` component. This allows developers to override the default pinned message header with their own custom UI. It imports Channel and MessageAvatar components from the stream-chat-react-native library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-pinned-header.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Channel, MessageAvatar} from 'stream-chat-react-native';\n\nconst MessagePinnedHeaderComponent = () => <MessagePinnedHeader />\n\n<Channel MessagePinnedHeader={MessagePinnedHeaderComponent} />\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageUserReactionsItem Component\nDESCRIPTION: This snippet renders the MessageUserReactionsItem component. This component represents a single user reaction item in the list of reactions to a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_20\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageUserReactionsItem />\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageFooter with formattedDate - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the MessageFooter component in Stream Chat React Native by providing a custom `formattedDate` prop.  It replaces the default date formatting with a custom function `getDateTimeStamp`. The customized MessageFooter is passed to the Channel component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/message_footer.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, MessageFooter } from 'stream-chat-react-native';\n\nconst getDateTimeStamp = message => `My new date is ${message.created_at}`;\n\nconst CustomMessageFooter = ({ message }) => {\n  const dateFormatted = useMemo(() => getDateTimeStamp(message), [message.created_at]);\n\n  <MessageFooter formattedDate={dateFormatted} />;\n};\n\n<Channel MessageFooter={CustomMessageFooter} />;\n```\n\n----------------------------------------\n\nTITLE: Overriding existing language translations\nDESCRIPTION: This code snippet shows how to override existing translations for a language (Dutch - 'nl') in the `Streami18n` instance. It uses the `registerTranslation` method to modify specific UI strings. It requires the `Streami18n` class from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n\nstreami18n.registerTranslation('nl', {\n  'Delete Message': 'Verwijder bericht',\n});\n```\n\n----------------------------------------\n\nTITLE: Uninstalling media library using yarn (React Native CLI)\nDESCRIPTION: This command uninstalls the existing media library using yarn package manager in a React Native CLI project. This is a prerequisite for installing the native image picker. The media library to be uninstalled is `@react-native-camera-roll/camera-roll`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/native-image-picker.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @react-native-camera-roll/camera-roll\n```\n\n----------------------------------------\n\nTITLE: Android permissions for image picker - XML\nDESCRIPTION: This XML snippet specifies the necessary permissions required for the image picker to function correctly on Android. These permissions must be included in the `AndroidManifest.xml` file. It includes permissions to read images and videos from external storage.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_MEDIA_IMAGES\" />\n<uses-permission android:name=\"android.permission.READ_MEDIA_VIDEO\" />\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"\n                android:maxSdkVersion=\"32\" />\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\" />\n```\n\n----------------------------------------\n\nTITLE: Styling Stream Chat with OverlayProvider - Typescript\nDESCRIPTION: This snippet shows how to apply a custom theme to a Stream Chat React Native application using the `OverlayProvider`. The `theme` object defines styles for the `messageSimple.file.container`, setting the background color to red. This theme is then passed to the `OverlayProvider`'s `value.style` prop, applying the custom styles to the chat interface. The `OverlayProvider` must wrap the components you want to style.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/core-components/overlay-provider/props/value.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst theme = {\n  messageSimple: {\n    file: {\n      container: {\n        backgroundColor: 'red',\n      },\n    },\n  },\n};\n\n<OverlayProvider value={{ style: theme }}>...</OverlayProvider>;\n```\n\n----------------------------------------\n\nTITLE: Defining Local Attachment Type Example (TSX)\nDESCRIPTION: This snippet provides an example of defining a LocalAttachmentType.  The type definition should align with your application's needs. It shows how to add custom fields (file_size and mime_type) to the attachment type.  These local types must be defined before instantiating StreamChatGenerics\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalAttachmentType = {\n  file_size?: number;\n  mime_type?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Configuring User Query for Autocomplete Mentions (Stream Chat, TypeScript)\nDESCRIPTION: This code snippet demonstrates how to configure a query for fetching users to be displayed in an autocomplete mention component within a Stream Chat React Native application. The `mentionAllAppUsersQuery` object defines filters to include users with IDs 'vishal' and 'lucas'. Sort and options are kept empty in this example, but they can be extended according to the [Stream Chat documentation](https://getstream.io/chat/docs/javascript/query_users/?language=javascript&q=queryUsers).\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/common-content/ui-components/channel/props/mention_all_app_users_query.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nmentionAllAppUsersQuery={{\n  filters: {\n    id: {\n      $in: ['vishal', 'lucas']\n    }\n  },\n  sort: {},\n  options: {}\n}}\n```\n\n----------------------------------------\n\nTITLE: Type definition for selectedMessage property - TSX\nDESCRIPTION: This snippet defines the type structure of selectedMessage object in ImageGalleryContext. It has two optional string properties: messageId, url. This type is the format for specifying current active message in image viewer/gallery.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/image-gallery-context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n{\n  messageId?: string;\n  url?: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing iOS native dependencies with CocoaPods\nDESCRIPTION: These commands navigate to the iOS directory within the SampleApp and install the native dependencies using CocoaPods. This step is required before running the app on iOS.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ncd ios;\nnpx pod-install;\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated Babel Plugin - JavaScript\nDESCRIPTION: This snippet demonstrates how to add the `react-native-reanimated/plugin` to the Babel configuration file (`babel.config.js`). This is necessary for Reanimated 2 to work correctly and prevent errors related to worklet creation.  The plugin must be listed last in the plugins array.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_16\n\nLANGUAGE: js\nCODE:\n```\n  module.exports = {\n      ...\n      plugins: [\n          ...\n          'react-native-reanimated/plugin',\n      ],\n  };\n```\n\n----------------------------------------\n\nTITLE: Enable Quoted-Reply State for a Message - React Native\nDESCRIPTION: This function enables the quoted-reply state for a given message. This triggers UI elements to display the message in a state where it's being quoted as a reply in the channel. It takes the message object as input.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/messages_context.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetQuotedMessageState(message)\n```\n\n----------------------------------------\n\nTITLE: Filtering Channels - React Native\nDESCRIPTION: This code snippet demonstrates how to filter channels within the ChannelList component using the `filters` prop.  It filters for channels where the user 'vishal' is a member and the channel is frozen. This restricts the channels displayed in the list to only those matching the specified criteria. This assumes the `ChannelList` component is already imported and available.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_list_customization.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst filters = {\n  members: { $in: ['vishal'] },\n  frozen: true\n}\n\n<ChannelList filters={filters} />\n```\n\n----------------------------------------\n\nTITLE: Checking for Owner Role - TSX\nDESCRIPTION: This code snippet demonstrates how to check if the current user has 'owner' permissions for the current channel type.  It accesses the channel's membership role and compares it to 'owner'. This requires access to the channel object, specifically its state and membership properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/channel_context.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nconst isOwner = channel?.state.membership.role === 'owner';\n```\n\n----------------------------------------\n\nTITLE: Defining Default Message Type (TSX)\nDESCRIPTION: This snippet shows the default message type for stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_13\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultMessageType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Customize MessageAvatar size in Channel Component - TSX\nDESCRIPTION: This code demonstrates how to customize the size of the MessageAvatar component within the Channel component in Stream Chat React Native. It imports the necessary components and renders a smaller avatar by passing a custom MessageAvatar component with a specified size prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-avatar.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Channel, MessageAvatar} from 'stream-chat-react-native';\n\nconst SmallerMessageAvatar = () => <MessageAvatar size={30} />\n\n<Channel MessageAvatar={SmallerMessageAvatar} />\n```\n\n----------------------------------------\n\nTITLE: Customizing FileAttachment Component in Channel - React Native\nDESCRIPTION: This code snippet demonstrates how to customize the FileAttachment component within the Channel component of the stream-chat-react-native library.  Specifically, it shows how to override the default FileAttachment component to change the size of the file attachment icon using the `attachmentSize` prop. This customization affects how file attachments are displayed within the message list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/file_attachment.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, FileAttachment } from 'stream-chat-react-native';\n\n<Channel FileAttachment={() => <FileAttachment attachmentSize={40} />}\n```\n\n----------------------------------------\n\nTITLE: General Usage of PollOptionFullResults - TSX\nDESCRIPTION: This code demonstrates the basic usage of the PollOptionFullResults component within a Stream Chat React Native application. It shows how to integrate the component inside the OverlayProvider, Chat, and Channel components. It requires the stream-chat-react-native package and assumes that client and channel objects are defined elsewhere.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-option-full-results.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, PollOptionFullResults } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollOptionFullResults message={message} poll={poll} {...otherOptionalProps} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Message Bubble Without Border - JSX\nDESCRIPTION: Example of how to remove borders from message bubbles by customizing the theme. Shows how to target the `container`, `containerInner`, `deletedContainerInner`, and `textContainer` elements within `messageSimple.content` to remove their borders.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_customizations.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst themeStyle = {\n  messageSimple: {\n    content: {\n      container: {\n        borderWidth: 0,\n      },\n      containerInner: {\n        borderWidth: 0,\n      },\n      deletedContainerInner: {\n        borderWidth: 0,\n      },\n      textContainer: {\n        borderWidth: 0,\n      },\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Using Gallery Component with Channel in Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates how to use the Gallery component within a Channel component in Stream Chat React Native. It shows how to override the default Gallery component with a custom implementation, disabling the default onPress functionality by setting the preventPress prop to true.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/gallery.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, Gallery } from 'stream-chat-react-native';\n\n<Channel Gallery={() => <Gallery preventPress />}\n```\n\n----------------------------------------\n\nTITLE: Configuring Channel Component with Thread State - Typescript\nDESCRIPTION: This snippet demonstrates how to configure the `<Channel>` component with a `thread` prop to maintain the correct thread state when navigating between channels and threads. It ensures that messages are sent to the appropriate location and that the image gallery displays the correct images.  The `onThreadSelect` prop is used to update the `thread` state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n<Chat client={chatClient} i18nInstance={streami18n}>\n  <Channel channel={channel} thread={thread}>\n    <MessageList onThreadSelect={setThread} />\n    <MessageInput />\n  </Channel>\n</Chat>\n```\n\n----------------------------------------\n\nTITLE: Adding Storage Permissions - XML\nDESCRIPTION: This XML snippet shows the necessary permissions to include in the `AndroidManifest.xml` file for image picker functionality on Android.  It requires both read and write external storage permissions. These permissions are essential for accessing and saving images to the device's storage.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n<uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n```\n\n----------------------------------------\n\nTITLE: Defining Local Message Type Example (TSX)\nDESCRIPTION: This snippet shows defining a LocalMessageType as a Record<string, unknown>, providing a flexible structure for custom message data.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalMessageType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Type definition for selectedImages\nDESCRIPTION: This snippet defines the type structure for the selectedImages array within the AttachmentPickerContext. Each object in the array represents a selected image and includes properties such as height, source, URI, width, and an optional ID.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/attachment-picker-context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nArray<{  height: number;\n  source: 'camera' | 'picker';\n  uri: string;\n  width: number;\n  id?: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Installing SDK dependencies with Yarn\nDESCRIPTION: These commands navigate to the SDK directory and install the necessary dependencies using Yarn.  This ensures all the required packages for the SDK are available.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncd stream-chat-react-native;\nyarn install;\n```\n\n----------------------------------------\n\nTITLE: Install React Native Image Picker (RN CLI)\nDESCRIPTION: This command installs the react-native-image-picker package using yarn for projects initialized with React Native CLI. This is an optional dependency to capture images from the camera and upload them as attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-image-picker\n```\n\n----------------------------------------\n\nTITLE: Legacy Storage Request in AndroidManifest.xml - XML\nDESCRIPTION: This XML snippet shows how to include `requestLegacyExternalStorage` attribute within the `application` tag in `AndroidManifest.xml`. This attribute is required for some Android devices to load images, even if storage permissions are granted.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<application\n  android:requestLegacyExternalStorage=\"true\"\n  ...\n/>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Translations - JavaScript\nDESCRIPTION: This code snippet demonstrates how to retrieve the current translation dictionaries for all languages managed by `Streami18n`. The `getTranslations()` method returns an object containing the translations for each language.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/internationalization.mdx#_snippet_16\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst translations = streami18n.getTranslations();\n```\n\n----------------------------------------\n\nTITLE: Consuming TypingContext with useContext - TSX\nDESCRIPTION: This snippet demonstrates how to consume the TypingContext using the useContext hook in a TypeScript React Native component. It imports the necessary modules and retrieves the 'typing' object from the context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/typing-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { TypingContext } from 'stream-chat-react-native';\n\nconst { typing } = useContext(TypingContext);\n```\n\n----------------------------------------\n\nTITLE: Customizing MessageAvatar Size in React Native\nDESCRIPTION: This snippet demonstrates how to customize the size of the MessageAvatar component in a React Native application using the stream-chat-react-native library. It defines a SmallerMessageAvatar component that renders a MessageAvatar with a specific size. The MessageAvatar component's size prop is set to 30. This custom component is then passed to the Channel component via the MessageAvatar prop, overriding the default avatar.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_avatar.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport {Channel, MessageAvatar} from 'stream-chat-react-native';\n\nconst SmallerMessageAvatar = () => <MessageAvatar size={30} />\n\n<Channel MessageAvatar={SmallerMessageAvatar} />\n```\n\n----------------------------------------\n\nTITLE: Setting Deleted Messages Visibility (TSX)\nDESCRIPTION: This code snippet demonstrates how to configure the visibility of deleted messages using the `deletedMessagesVisibilityType` prop on the `Channel` component. This prop controls who can see deleted messages, allowing you to choose between showing them to everyone, no one, only the sender, or only the receiver.  The possible values are 'always', 'never', 'sender', and 'receiver'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel deletedMessagesVisibilityType={'never'} />\n```\n\n----------------------------------------\n\nTITLE: TypeScript Record for Stream Chat User Response\nDESCRIPTION: Defines a TypeScript record (object) structure for representing a user response in the Stream Chat context. The keys are strings, and the values are of type `UserResponse<UserType>`, allowing for flexible user data representation. It is used to type the watchers of the channel.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/common-content/contexts/channel-context/watchers.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nRecord<\n  string, // string\n  UserResponse<UserType>\n>;\n```\n\n----------------------------------------\n\nTITLE: Setting topInset prop to the OverlayProvider - Typescript\nDESCRIPTION: This snippet show how to pass the `topInset` to the OverlayProvider, which will change the height of gallery to prevent rendering issues with `MessageInput`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n<OverlayProvider topInset={/** number */}>\n```\n\n----------------------------------------\n\nTITLE: Setting Language with setLanguage Method - Typescript\nDESCRIPTION: This snippet shows how to dynamically change the language of the Streami18n instance using the setLanguage method.  This is useful for implementing language toggle functionality within an app. Requires a pre-existing Streami18n instance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/internationalization.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst streami18n = new Streami18n();\n\n...\n// Logic for how a user can change the language\n...\n\nstreami18n.setLanguage('fr');// The UI will change to French.\n```\n\n----------------------------------------\n\nTITLE: Configuring SDK Versions - Java\nDESCRIPTION: This snippet shows how to configure the `buildToolsVersion`, `compileSdkVersion`, and `targetSdkVersion` in the `android/build.gradle` file.  Ensure that these versions are all >= 26 for compatibility.  Requires `buildToolsVersion = \"29.0.3\"`, `compileSdkVersion = 29`, and `targetSdkVersion = 29`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n  ext {\n    buildToolsVersion = \"29.0.3\"\n    compileSdkVersion = 29\n    targetSdkVersion = 29\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Running the SampleApp on Android\nDESCRIPTION: This command runs the SampleApp on the Android emulator using React Native CLI. No additional steps are needed before running this command after setting up the dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\nnpx react-native run-android\n```\n\n----------------------------------------\n\nTITLE: Consuming TranslationContext with useContext in React\nDESCRIPTION: This snippet demonstrates how to consume the TranslationContext using the useContext hook in a React component. It imports useContext from 'react' and TranslationContext from 'stream-chat-react-native'. The t and tDateTimeParser functions are extracted from the context to be used for translation. It requires React and stream-chat-react-native library as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/translation_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { TranslationContext } from 'stream-chat-react-native';\n\nconst { t, tDateTimeParser } = useContext(TranslationContext);\n```\n\n----------------------------------------\n\nTITLE: Type definition for selectedFiles\nDESCRIPTION: This snippet defines the type structure for the selectedFiles array within the AttachmentPickerContext. Each object in the array represents a selected file and includes properties such as duration, name, size, type, and URI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/attachment-picker-context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nArray<{  duration: number | null;\n  name: string;\n  size: string;\n  type: string;\n  uri: string;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Install Peer Dependencies (RN CLI)\nDESCRIPTION: This command installs the necessary peer dependencies for the Stream Chat React Native SDK using yarn for projects initialized with React Native CLI. These dependencies are required for optimal chat experience.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @react-native-community/netinfo react-native-gesture-handler react-native-reanimated react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Creating a Location Message with Attachment - JavaScript\nDESCRIPTION: This snippet shows how to construct a message object containing a location attachment with latitude and longitude properties. It demonstrates the structure of the message to be sent to the Stream Chat API when a user shares their location.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageWithLocation = {\n  text: 'This is my location',\n  attachments: [\n    {\n      type: 'location',\n      latitude: '50.212312',\n      longitude: '-71.212659',\n      // You can add more custom properties if needed.\n    },\n  ],\n};\n\n```\n\n----------------------------------------\n\nTITLE: Custom Event Handling - React Native\nDESCRIPTION: This snippet shows how to override the default `onMessageNew` event handler of the `ChannelList` component. It prevents unfrozen channels from being added to the list when a new message is received.  It checks if the channel is frozen before potentially adding it. The code requires the `client` from Stream Chat to be initialized and accessible.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/channel_list_customization.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst filters = {\n  members: { $in: ['vishal'] },\n  frozen: true,\n};\n\nconst customOnMessageNew = async (setChannels, event) => {\n  const eventChannel = event.channel;\n\n  // If the channel is frozen, then don't add it to the list.\n  if (!eventChannel?.id || !eventChannel.frozen) return;\n\n  try {\n    const newChannel = client.channel(eventChannel.type, eventChannel.id);\n    await newChannel.watch();\n    setChannels(channels => [newChannel, ...channels]);\n  } catch (error) {\n    console.log(error);\n  }\n};\n\n<ChannelList filters={filters} onMessageNew={customOnMessageNew} />;\n```\n\n----------------------------------------\n\nTITLE: Enable vectorDrawables.useSupportLibrary in android/app/build.gradle - Java\nDESCRIPTION: This Java snippet demonstrates how to enable `vectorDrawables.useSupportLibrary = true` in `android/app/build.gradle`. This setting is required for supporting vector drawables.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nandroid {\n    defaultConfig {\n        vectorDrawables.useSupportLibrary = true\n        ...\n    }\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Card Component in JSX\nDESCRIPTION: This JSX snippet shows how to create a custom Card component. The component receives the type and otherProperties props, which can be used to customize the card's rendering based on the attachment type. The component logs the type and otherProperties and renders custom UI. Dependencies include React.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomCardComponent = ({ type, ...otherProperties }) => {\n  console.log(type);\n  console.log(otherProperties);\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: onListScroll event example - JS\nDESCRIPTION: This code snippet shows the shape of the event object which is emitted by the underlying FlatList when the list scrolls. This event has `nativeEvent` property which includes the properties: `contentInset`, `contentOffset`, `contentSize`, `layoutMeasurement`, and `zoomScale`. All the properties are numbers.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_list.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  nativeEvent: {\n    contentInset: {bottom, left, right, top},\n    contentOffset: {x, y},\n    contentSize: {height, width},\n    layoutMeasurement: {height, width},\n    zoomScale\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing native image picker (React Native CLI)\nDESCRIPTION: This command installs the `react-native-image-picker` package using yarn. This provides a native image picker for selecting images from the gallery or taking a picture from the camera.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/native-image-picker.mdx#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-image-picker\n```\n\n----------------------------------------\n\nTITLE: Add Custom Message Action - JSX\nDESCRIPTION: This example demonstrates adding a custom 'Poke User' action to the message actions. It sends a specific message to the channel when the action is triggered and then dismisses the overlay.  The action is always displayed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_actions_customization.mdx#_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Channel\n  channel={channel}\n  messageActions={({ dismissOverlay }) => [\n    {\n      action: () => {\n        channel.sendMessage({ text: '👉' });\n        dismissOverlay();\n      },\n      icon: <PokeUserSVGIcon />,\n      title: 'Poke User',\n    },\n  ]}\n>\n  {/** MessageList and MessageInput component here */}\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Running the Application on iOS with Yarn\nDESCRIPTION: This command builds and runs the application on the iOS platform, typically using a simulator or a connected iOS device. It automates the process of compiling and deploying the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn ios\n```\n\n----------------------------------------\n\nTITLE: Custom PollResultsContent Implementation - stream-chat-react-native - TSX\nDESCRIPTION: This code shows how to create a custom PollResultsContent component and use it to override the default content rendering. The custom component accesses the poll state using the usePollState hook and renders a list of option IDs.  This demonstrates how to fully customize the UI of the PollResults component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-results.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text } from 'react-native';\nimport { OverlayProvider, Chat, Channel, PollResults, usePollState } from 'stream-chat-react-native';\n\nconst MyPollResultsContent = () => {\n  const { options } = usePollState();\n  return options.map(option => <Text>{option.id}</Text>);\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollResults message={message} poll={poll} PollResultsContent={MyPollResultsContent} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Linking SDK in package.json (JSON)\nDESCRIPTION: This snippet demonstrates how to link the local `stream-chat-react-native` SDK within the `package.json` file of a React Native project. It uses the `link:` protocol to point dependencies to the locally cloned repository. The snippet assumes that the application and the SDK are located in a common parent directory.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/README.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"stream-chat-react-native-core\": \"link:../stream-chat-react-native/package\",\n\"stream-chat-react-native\": \"link:../stream-chat-react-native/package/native-package\", // If youre using the native package\n\"stream-chat-expo\": \"link:../stream-chat-react-native/package/expo-package\" // If youre using expo\n```\n\n----------------------------------------\n\nTITLE: Android Intent Filter Configuration XML\nDESCRIPTION: Configures the intent filter in AndroidManifest.xml to handle deep links. It specifies the action, categories, and data schemes (http/https) that the app will respond to.  Ensure to replace `YOUR URL HERE` with your actual domain.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/deeplinking.mdx#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<action android:name=\"android.intent.action.VIEW\" />\n```\n\n----------------------------------------\n\nTITLE: Install stream-chat-react-native-devtools with NPM\nDESCRIPTION: This command installs the `stream-chat-react-native-devtools` package as a development dependency. This package enables communication between the Stream Chat React Native SDK and the Flipper plugin.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/debug-using-flipper-plugin.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install --save-dev stream-chat-react-native-devtools\n```\n\n----------------------------------------\n\nTITLE: Accessing FlatList Ref with setFlatListRef in MessageList (React Native)\nDESCRIPTION: This snippet illustrates how to get a reference to the underlying FlatList component of the MessageList.  The setFlatListRef prop is a callback function that receives the FlatList ref, which can then be stored using useRef for later access and manipulation.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/message_list.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst flRef = useRef();\n\n<MessageList setFlatListRef={ref => (flRef.current = ref)} />;\n```\n\n----------------------------------------\n\nTITLE: Channel Screen Component Definition (Context Approach) - TSX\nDESCRIPTION: This code defines a ChannelScreen component that uses context to handle thread selection and navigation. It retrieves the channel and thread context, and renders a Channel component. The onThreadSelect prop on MessageList updates the thread context and navigates to the ThreadScreen.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/stream_chat_with_navigation.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nexport const ChannelScreen = () => {\n  const { channel } = useAppChannel();\n  const { setThread, thread } = useAppThread();\n\n  return (\n    <Channel channel={channel} thread={thread}>\n      <MessageList\n        onThreadSelect={selectedThread => {\n          setThread(selectedThread);\n          navigation.navigate('ThreadScreen');\n        }}\n      />\n      <MessageInput />\n    </Channel>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat Expo with Expo CLI\nDESCRIPTION: This command installs the Stream Chat Expo package using the Expo CLI. This package is specifically designed for Expo projects and provides the necessary components for integrating Stream Chat functionality. It assumes Expo is already set up in the project.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/installation.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install stream-chat-expo\n```\n\n----------------------------------------\n\nTITLE: Updating Stream App Settings with FCM Server Key (JavaScript)\nDESCRIPTION: This snippet demonstrates how to update Stream Chat application settings with the FCM server key and notification/data templates using the Stream Chat server-side SDK. It initializes the Stream Chat client and uses the updateAppSettings method to configure Firebase push notifications.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/push_notifications_v1.mdx#_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance(API_KEY, API_SECRET);\nawait client.updateAppSettings({\n  firebase_config: {\n    server_key: 'server_key',\n    notification_template: `{\"message\":{\"notification\":{\"title\":\"New messages\",\"body\":\"You have {{ unread_count }} new message(s) from {{ sender.name }}\"},\"android\":{\"ttl\":\"86400s\",\"notification\":{\"click_action\":\"OPEN_ACTIVITY_1\"}}}}`,\n    data_template: `{\"sender\":\"{{ sender.id }}\",\"channel\":{\"type\": \"{{ channel.type }}\",\"id\":\"{{ channel.id }}\" },\"message\":\"{{ message.id }}\"}`,\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Remove Message from Channel State - React Native\nDESCRIPTION: This function removes a message from the local channel state. It's important to note that this function only updates the local state and does not trigger an API call to delete the message from the server. Use `channel.deleteMessage` for deleting the message via the API.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/messages_context.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nremoveMessage(message)\n```\n\n----------------------------------------\n\nTITLE: Implementing Faded Chat with Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates how to implement a faded chat interface with a video (or image) background using Stream Chat React Native. It utilizes `MaskedView` and `LinearGradient` to create the fading effect. The chat messages appear over a background image, with a gradient mask applied to the message list to fade the messages into the background. It assumes that `chatClient` and `channel` are already initialized, along with the `headerHeight` variable. The example uses an image as a placeholder for the video; the image tag should be replaced with a `<Video />` component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/livestream_messagelist.mdx#_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaView, StyleSheet, View } from 'react-native';\n\n// Make sure you have installed following two dependencies\nimport MaskedView from '@react-native-community/masked-view';\nimport LinearGradient from 'react-native-linear-gradient';\n\nimport { Chat, Channel, MessageList } from 'stream-chat-react-native';\n\nconst theme = {\n  messageList: {\n    container: {\n      backgroundColor: 'transperant',\n    },\n  },\n  messageSimple: {\n    content: {\n      textContainer: {\n        backgroundColor: 'white',\n      },\n    },\n  },\n};\n\n// When you render your chat screen\n<SafeAreaView style={{ flex: 1 }}>\n  {/* For the sake of example, we are using image as background, you can replace it with your Video component. */}\n  <Image\n    source={{\n      uri: 'https://i.pinimg.com/474x/59/a2/aa/59a2aae82b34bace9dc4d4df90457a3b.jpg',\n    }}\n    style={{ height: '100%', width: '100%' }}\n  />\n\n  <View style={[{ position: 'absolute' }, StyleSheet.absoluteFillObject]}>\n    <Chat client={chatClient} style={theme}>\n      <Channel channel={channel} keyboardVerticalOffset={headerHeight} thread={thread}>\n        <View style={{ flex: 1 }} />\n        <View style={{ flex: 2 }}>\n          <MaskedView\n            style={{ flex: 1 }}\n            maskElement={\n              <LinearGradient\n                colors={['rgba(0,0,0,0)', 'rgba(0,0,0,1)']}\n                style={{\n                  flex: 1,\n                }}\n                start={{ x: 0, y: 0 }}\n                end={{ x: 0, y: 1 }}\n                locations={[0, 0.5]}\n              />\n            }\n          >\n            <MessageList />\n          </MaskedView>\n        </View>\n        <MessageInput />\n      </Channel>\n    </Chat>\n  </View>\n</SafeAreaView>;\n```\n\n----------------------------------------\n\nTITLE: Disconnecting a User - Typescript\nDESCRIPTION: This snippet shows how to disconnect a user from the Stream Chat API using the `disconnectUser` method.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/state-and-offline-support/state-overview.mdx#_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.disconnectUser();\n```\n\n----------------------------------------\n\nTITLE: Handling Push Notifications with React Navigation - JS\nDESCRIPTION: This code snippet demonstrates how to handle push notification interactions using React Native Firebase and React Navigation. It listens for when the app is opened from a quit state (`getInitialNotification`) or from the background (`onNotificationOpenedApp`). The code extracts channel and message data from the notification and logs them to the console. Replace console logs with actual navigation logic to route users to specific chat channels.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/push_notifications_v1.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport messaging from '@react-native-firebase/messaging';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  useEffect(() => {\n    // `onNotificationOpenedApp` gets called when app is in background, and you press\n    // the push notification.\n    //\n    // Here its assumed a message-notification contains a \"channel\" property in the data payload.\n    //\n    // Please check the docs on push template:\n    // https://getstream.io/chat/docs/javascript/push_template/?language=javascript\n    messaging().onNotificationOpenedApp(remoteMessage => {\n      console.log('Notification caused app to open from background state:', remoteMessage);\n      const channel = JSON.parse(remoteMessage.data.channel);\n      const message = remoteMessage.data.message;\n\n      console.log('This message belongs to channel with id - ', channel.id);\n      console.log('Message id is', message);\n\n      // You will add your navigation logic, to navigate to relevant channel screen.\n    });\n\n    // `getInitialNotification` gets called when app is in quit state, and you press\n    // the push notification.\n    //\n    //\n    // Here its assumed that a message-notification contains a \"channel\" property in the data payload.\n    // Please check the docs on push template:\n    // https://getstream.io/chat/docs/javascript/push_template/?language=javascript\n    messaging()\n      .getInitialNotification()\n      .then(remoteMessage => {\n        if (remoteMessage) {\n          console.log('Notification caused app to open from quite state:', remoteMessage);\n          const channel = JSON.parse(remoteMessage.data.channel);\n          const message = remoteMessage.data.message;\n\n          console.log('This message belongs to channel with id - ', channel.id);\n          console.log('Message id is', message);\n\n          // You will add your navigation logic, to navigate to relevant channel screen.\n        }\n      });\n  }, []);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName={initialRoute}>\n        <Stack.Screen name='Home' component={HomeScreen} />\n        <Stack.Screen name='ChannelListScreen' component={SettingsScreen} />\n        <Stack.Screen name='ChannelScreen' component={SettingsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Reactive State in Stream Chat Vanilla JS\nDESCRIPTION: This TypeScript snippet demonstrates how to access the reactive state of threads in Stream Chat using vanilla JavaScript. It shows how to subscribe to state changes, subscribe with a selector, and retrieve the latest state value.  It uses `StreamChat` client and `threads.state` to observe changes and extract specific data like the `threads` property.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/state-and-offline-support/state-overview.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n\nconst client = new StreamChat(/*...*/);\n\n// calls console.log with the whole state object whenever it changes\nclient.threads.state.subscribe(console.log);\n\nlet latestThreads;\nclient.threads.state.subscribeWithSelector(\n  // called each time theres a change in the state object\n  nextValue => ({ threads: nextValue.threads }),\n  // called only when threads change (selected value)\n  ({ threads }) => {\n    latestThreads = threads;\n  },\n);\n\n// returns lastest state object\nconst state = client.threads.state.getLatestValue();\n\nconst [thread] = latestThreads;\n\n// thread instances come with the same functionality\nthread?.state.subscribe(/*...*/);\nthread?.state.subscribeWithSelector(/*...*/);\nthread?.state.getLatestValue(/*...*/);\n```\n\n----------------------------------------\n\nTITLE: Defining MessageAction Type in TypeScript\nDESCRIPTION: This code defines the MessageAction type, which represents a message action that can be performed on a message. It includes properties for the action handler, action type, title, icon, and title style. The actionType property is an enum of possible message actions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\ntype MessageAction = {\n  action: () => void;\n  actionType: enum('blockUser', 'copyMessage', 'deleteMessage', 'editMessage', 'flagMessage', 'muteUser', 'pinMessage', 'selectReaction', 'reply', 'retry', 'quotedReply', 'threadReply', 'unpinMessage')\n  title: string;\n  icon?: React.ReactElement;\n  titleStyle?: StyleProp<TextStyle>;\n};\n```\n\n----------------------------------------\n\nTITLE: General Usage of PollAllOptions in React Native\nDESCRIPTION: This snippet demonstrates the basic usage of the PollAllOptions component within a React Native application using Stream Chat. It shows how to integrate it within OverlayProvider, Chat, and Channel components, passing required props such as message and poll.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-all-options.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider, Chat, Channel, PollAllOptions } from 'stream-chat-react-native';\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollAllOptions message={message} poll={poll} {...otherOptionalProps} />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Wrap component tree with DebugContextProvider\nDESCRIPTION: This code snippet shows how to wrap the root of your component tree with `DebugContextProvider`. It's required to pass the `useFlipper` function to enable debugging features within Flipper. It depends on the `stream-chat-react-native` and `stream-chat-react-native-devtools` packages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/debug-using-flipper-plugin.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport { DebugContextProvider } from 'stream-chat-react-native';\nimport { useFlipper } from 'stream-chat-react-native-devtools';\n...\n\n<DebugContextProvider useFlipper={useFlipper}>\n  {/* All other elements of the App component comes here */}\n</DebugContextProvider>\n```\n\n----------------------------------------\n\nTITLE: Configuring Thread Component with Dismount Handler - Typescript\nDESCRIPTION: This snippet illustrates how to use the `<Thread>` component and reset the `thread` state when the thread is dismounted, using the `onThreadDismount` prop. This is crucial for maintaining the correct context, especially when an `OverlayProvider` is used to manage image pickers and galleries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n<Channel channel={channel} thread={thread}>\n  <Thread onThreadDismount={() => setThread(null)} />\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Generating debug Keystore for Android\nDESCRIPTION: This command generates a debug Keystore file for Android development. It is used to sign the debug builds of the application. The keystore is generated using the `keytool` utility, and requires JDK to be installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nkeytool -genkey -v -keystore debug.keystore -storepass android -alias androiddebugkey -keypass android -keyalg RSA -keysize 2048 -validity 10000\n```\n\n----------------------------------------\n\nTITLE: Throttling Channel State Updates - TSX\nDESCRIPTION: This code snippet demonstrates how to adjust the throttling interval for state updates in the Channel component.  It configures the `newMessageStateUpdateThrottleInterval` and `stateUpdateThrottleInterval` props to control the frequency of state updates based on chat events and new messages respectively.  The snippet is intended for use in high-traffic applications where default throttling might not be sufficient.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/performance_guide.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel newMessageStateUpdateThrottleInterval={2000} stateUpdateThrottleInterval={800} />\n```\n\n----------------------------------------\n\nTITLE: Defining Default Event Type (TSX)\nDESCRIPTION: This snippet shows the default event type for stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultEventType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Install Expo Clipboard (Expo)\nDESCRIPTION: This command installs the expo-clipboard package using npx expo install for projects initialized with Expo. This is an optional dependency to copy message content to the clipboard.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-clipboard\n```\n\n----------------------------------------\n\nTITLE: Get i18next Instance - Typescript\nDESCRIPTION: This code snippet demonstrates how to obtain the underlying i18next instance used by `Streami18n` via the `geti18Instance()` method. This gives you direct access to the i18next API for more advanced i18n functionality. Dependencies: Streami18n class, i18next.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nconst i18n = streami18n.geti18Instance();\n```\n\n----------------------------------------\n\nTITLE: Rendering ReactionListBottom Component\nDESCRIPTION: This snippet renders the ReactionListBottom component. It displays the list of reactions at the bottom of a message. The component receives props from the Channel component for customization.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_22\n\nLANGUAGE: jsx\nCODE:\n```\n<ReactionListBottom />\n```\n\n----------------------------------------\n\nTITLE: Providing the Client to React Native UI\nDESCRIPTION: This snippet shows how to provide the Stream Chat client to the React Native UI components via the `Chat` component.  The client instance is passed as a prop, and the UI components interact with it internally through context. Requires the `stream-chat`, and `stream-chat-react-native` libraries.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Expo app.json camera permission config\nDESCRIPTION: This JSON snippet shows the configuration required in the app.json file for Expo to add camera permissions to the Info.plist on iOS using config plugins. This ensures the app can request camera access to share images.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_23\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"expo\": {\n    \"plugins\": [\n      [\n        \"expo-image-picker\",\n        {\n          \"cameraPermission\": \"$(PRODUCT_NAME) would like to use your camera to share image in a message.\"\n        }\n      ]\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadContext with useContext in React\nDESCRIPTION: This snippet demonstrates how to consume the ThreadContext using the useContext hook provided by React.  It imports the ThreadContext from the 'stream-chat-react-native' library and utilizes the useContext hook to access the context's value. The value obtained can then be used within the component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/thread_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThreadContext } from 'stream-chat-react-native';\n\nconst value = useContext(ThreadContext);\n```\n\n----------------------------------------\n\nTITLE: Consuming ThemeContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the ThemeContext using the useContext hook in a TypeScript React Native component. It imports the ThemeContext from stream-chat-react-native and uses useContext to access the theme object, specifically the accent_red color. The component must be a child of either the OverlayProvider or Chat component to access the ThemeContext.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/theme_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThemeContext } from 'stream-chat-react-native';\n\nconst {\n  theme: {\n    colors: { accent_red },\n  },\n} = useContext(OverlayContext);\n```\n\n----------------------------------------\n\nTITLE: Handle Push Notification Interactions in React Native with Firebase\nDESCRIPTION: This code snippet demonstrates how to handle push notification interactions in a React Native application using Firebase Cloud Messaging (FCM). It utilizes the `onNotificationOpenedApp` and `getInitialNotification` methods from the `@react-native-firebase/messaging` library to detect when the application is opened from a background or quit state, respectively. The code extracts channel and message data from the notification payload and logs it to the console. It assumes that the notification payload contains a `channel` property with channel information, and a `message` property.  React Navigation is utilized to navigate to specific screens.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v1.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport React, { useEffect } from 'react';\nimport messaging from '@react-native-firebase/messaging';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nconst Stack = createStackNavigator();\n\nfunction App() {\n  useEffect(() => {\n    // `onNotificationOpenedApp` gets called when app is in background, and you press\n    // the push notification.\n    //\n    // Here its assumed a message-notification contains a \"channel\" property in the data payload.\n    //\n    // Please check the docs on push template:\n    // https://getstream.io/chat/docs/javascript/push_template/?language=javascript\n    messaging().onNotificationOpenedApp(remoteMessage => {\n      console.log('Notification caused app to open from background state:', remoteMessage);\n      const channel = JSON.parse(remoteMessage.data.channel);\n      const message = remoteMessage.data.message;\n\n      console.log('This message belongs to channel with id - ', channel.id);\n      console.log('Message id is', message);\n\n      // You will add your navigation logic, to navigate to relevant channel screen.\n    });\n\n    // `getInitialNotification` gets called when app is in quit state, and you press\n    // the push notification.\n    //\n    //\n    // Here its assumed that a message-notification contains a \"channel\" property in the data payload.\n    // Please check the docs on push template:\n    // https://getstream.io/chat/docs/javascript/push_template/?language=javascript\n    messaging()\n      .getInitialNotification()\n      .then(remoteMessage => {\n        if (remoteMessage) {\n          console.log('Notification caused app to open from quite state:', remoteMessage);\n          const channel = JSON.parse(remoteMessage.data.channel);\n          const message = remoteMessage.data.message;\n\n          console.log('This message belongs to channel with id - ', channel.id);\n          console.log('Message id is', message);\n\n          // You will add your navigation logic, to navigate to relevant channel screen.\n        }\n      });\n  }, []);\n\n  if (loading) {\n    return null;\n  }\n\n  return (\n    <NavigationContainer>\n      <Stack.Navigator initialRouteName={initialRoute}>\n        <Stack.Screen name='Home' component={HomeScreen} />\n        <Stack.Screen name='ChannelListScreen' component={SettingsScreen} />\n        <Stack.Screen name='ChannelScreen' component={SettingsScreen} />\n      </Stack.Navigator>\n    </NavigationContainer>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Fresco Dependencies - Java\nDESCRIPTION: This snippet demonstrates how to add Fresco dependencies to the `dependencies` block in `android/app/build.gradle`.  This is necessary for supporting GIF and WebP image formats on Android. It includes dependencies for animated GIF, animated WebP, and non-animated WebP support, along with the base support library.  Requires `com.facebook.fresco:animated-base-support:1.3.0`, `com.facebook.fresco:animated-gif:2.0.0`, `com.facebook.fresco:animated-webp:2.1.0`, and `com.facebook.fresco:webpsupport:2.0.0`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_12\n\nLANGUAGE: java\nCODE:\n```\ndependencies {\n  // For Android versions less than Ice Cream Sandwich (API level 14)\n  implementation 'com.facebook.fresco:animated-base-support:1.3.0'\n\n  // For GIF support\n  implementation 'com.facebook.fresco:animated-gif:2.0.0'\n\n  // For WebP support, with animations\n  implementation 'com.facebook.fresco:animated-webp:2.1.0'\n\n  // For WebP support, without animations\n  implementation 'com.facebook.fresco:webpsupport:2.0.0'\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing ImageUploadPreview in Channel - TSX\nDESCRIPTION: This code snippet demonstrates how to replace the default `ImageUploadPreview` component with a custom one using the `ImageUploadPreview` prop on the `Channel` component. It allows you to create a custom UI for displaying image upload previews within the chat interface. No dependencies are explicitly shown, but `Channel` is assumed to be imported.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/image-upload-preview.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel ImageUploadPreview={CustomImageUploadPreview} />\n```\n\n----------------------------------------\n\nTITLE: Force BlurView Version in Gradle - Android\nDESCRIPTION: This code snippet forces a specific version of the BlurView library in the `android/app/build.gradle` file. This is a workaround for a known bug in the `@react-native-community/blur` library that relies on the native Android BlurView library. By explicitly specifying the version, you ensure that the fixed native library is used until a new version of `@react-native-community/blur` is released.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\ndependencies {\n  implementation('com.eightbitlab:blurview:1.6.6') {\n    force = true\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ExoPlayer for React Native Video (Gradle)\nDESCRIPTION: This configuration snippet shows how to configure ExoPlayer to be used by react-native-video on Android.  This is done by adding an include statement and setting the project directory within the android/settings.gradle file.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_9\n\nLANGUAGE: gradle\nCODE:\n```\ninclude ':react-native-video'\nproject(':react-native-video').projectDir = new File(rootProject.projectDir, '../node_modules/react-native-video/android-exoplayer')\n```\n\n----------------------------------------\n\nTITLE: Defining Default Channel Type (TSX)\nDESCRIPTION: This snippet shows the default channel type for stream-chat-react-native, including image prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_10\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultChannelType = Record<string, unknown> & {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Creating a Channel by Members List\nDESCRIPTION: This snippet shows how to create a new channel using a list of members. The `client.channel` method initializes the channel object. A channel id will be generated automatically on the backend. You must then call `create` or `watch` on the channel instance to persist the channel to the server. Adding/removing members is not supported on channels created with members list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/**\n *  Channel created using a members list\n */\nconst channel = client.channel(channel_type, {\n    members: ['userOne', 'userTwo']\n    name: 'My New Channel',\n});\n```\n\n----------------------------------------\n\nTITLE: Android Manifest audio recording permission\nDESCRIPTION: This XML snippet shows the required permission in the AndroidManifest.xml file for microphone access when using react-native-audio-recorder-player in a React Native CLI project. It requests permission to record audio.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_8\n\nLANGUAGE: xml\nCODE:\n```\n  <uses-permission android:name=\"android.permission.RECORD_AUDIO\" />\n```\n\n----------------------------------------\n\nTITLE: Logging message.id and message.text onLongPressMessage (TSX)\nDESCRIPTION: Example of how to access the `message` object within the `onLongPressMessage` handler in the `Channel` component. It demonstrates logging the `message.id` and `message.text` to the console when a message is long-pressed, showcasing how to extract message-specific information.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/object-types/message_touchable_handler_payload.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel onLongPressMessage={({ message }) => console.log(message.id, message.text)}\n```\n\n----------------------------------------\n\nTITLE: Connecting a User to Stream Chat\nDESCRIPTION: This snippet demonstrates how to connect a user to the Stream Chat API using the `connectUser` function. It requires a user object (with at least an `id`) and a `user_token` obtained from your backend.  Repeated calls to `connectUser` are discouraged.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/client.mdx#_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'testUser',\n    name: 'Test User',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageSystem Component\nDESCRIPTION: This snippet renders the MessageSystem component. This component is used for displaying system messages, such as user joins and leaves. The component receives props from the Channel component to customize its display.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_16\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageSystem />\n```\n\n----------------------------------------\n\nTITLE: Disabling Message Avatars - TypeScript\nDESCRIPTION: This code shows how to disable message avatars in the Channel component.  It's recommended to disable message avatars if `enableMessageGroupingByUser` is set to false to avoid performance issues related to rendering too many avatar images.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/performance_guide.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel MessageAvatar={() => null} />\n```\n\n----------------------------------------\n\nTITLE: iOS Info.plist Microphone Usage Description\nDESCRIPTION: This XML snippet shows the required entry in the Info.plist file on iOS for microphone access when using react-native-audio-recorder-player in a React Native CLI project.  It provides a description of why the app needs microphone access.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<key>NSMicrophoneUsageDescription</key>\n<string>$(PRODUCT_NAME) would like to use your microphone for voice recording.</string>\n```\n\n----------------------------------------\n\nTITLE: Install Expo Image Picker (Image Gallery) (Expo)\nDESCRIPTION: This command installs the expo-image-picker package using npx expo install for projects initialized with Expo to allow for picking gallery images.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_25\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-picker\n```\n\n----------------------------------------\n\nTITLE: Example MessageAction Object\nDESCRIPTION: This code snippet shows an example of a MessageAction object. It includes properties for the action handler, icon, title, and title style.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message-actions.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n{\n  action: () => { /** Some action here */ },\n  icon: <PinIcon />,\n  title: 'Pin Message',\n  titleStyle: { color: 'red' }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Moderator Role within ChannelContext\nDESCRIPTION: This snippet demonstrates how to check if the current user has the 'moderator' role within the channel's membership or at the application level. It uses optional chaining to safely access nested properties and checks for both 'channel_moderator' and 'moderator' roles. Requires access to channel state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channel-context.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst isModerator =\n  channel?.state.membership.role === 'channel_moderator' || channel?.state.membership.role === 'moderator';\n```\n\n----------------------------------------\n\nTITLE: Using AutoCompleteSuggestionItem in Channel - TSX\nDESCRIPTION: This snippet demonstrates how to customize the `AutoCompleteSuggestionItem` component and pass it to the `Channel` component using the `AutoCompleteSuggestionItem` prop. This allows for custom rendering of the auto-suggestion list items. No specific dependencies beyond stream-chat-react-native are explicitly shown in this short snippet.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/autocomplete-suggestion-item.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, AutoCompleteSuggestionItem } from 'stream-chat-react-native';\n\nconst AutoCompleteSuggestionItemComponent = () => <AutoCompleteSuggestionItem />\n\n<Channel AutoCompleteSuggestionItem={AutoCompleteSuggestionItemComponent} />\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies in root\nDESCRIPTION: Installs the required dependencies in the root directory of the cloned repository. This ensures the project has all the necessary packages to build and run.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/ExpoMessaging/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Importing Dependencies - TypeScript\nDESCRIPTION: This snippet imports necessary modules from React, React Native, and the Stream Chat React Native SDK. These modules are essential for building the chat application's UI and managing its state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/hello_stream_chat.mdx#_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport {\n  Channel,\n  ChannelList,\n  Chat,\n  MessageInput,\n  MessageList,\n  MessageType,\n  OverlayProvider,\n  Thread,\n} from 'stream-chat-react-native';\n```\n\n----------------------------------------\n\nTITLE: Consuming AttachmentPickerContext with useContext - React\nDESCRIPTION: This code snippet demonstrates how to consume the `AttachmentPickerContext` using the `useContext` hook in a React component. It provides access to the `openPicker` and `closePicker` functions for controlling the attachment picker bottom sheet.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/attachment_picker_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { AttachmentPickerContext } from 'stream-chat-react-native';\n\nconst { openPicker, closePicker } = useContext(AttachmentPickerContext);\n```\n\n----------------------------------------\n\nTITLE: Message Bubble Without Border - React Native\nDESCRIPTION: This snippet demonstrates how to remove the border from message bubbles by customizing the theme object. It sets the borderWidth property to 0 for various container and content elements within the messageSimple style. This provides a clean, borderless message appearance.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst themeStyle = {\n  messageSimple: {\n    content: {\n      container: {\n        borderWidth: 0,\n      },\n      containerInner: {\n        borderWidth: 0,\n      },\n      deletedContainerInner: {\n        borderWidth: 0,\n      },\n      textContainer: {\n        borderWidth: 0,\n      },\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Defining a Message Object with Attachments - JavaScript\nDESCRIPTION: This code snippet demonstrates how to define a message object with attachments in JavaScript. It shows the structure of the `attachments` array and the properties of each attachment object, such as `type` and URLs.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/attachment_customizations.mdx#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst messageObject = {\n  id: '12312jh3b1jh2b312',\n  text: 'This is my test message!',\n  attachments: [\n    {\n      type: 'image',\n      thumb_url: '',\n    },\n    {\n      type: 'file',\n      asset_url: '',\n    },\n  ],\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Hermes - Android\nDESCRIPTION: This Java snippet demonstrates how to enable Hermes in the `android/app/build.gradle` file. Hermes is a JavaScript engine that can improve the performance of React Native applications. This is required for older versions of Reanimated 2.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nproject.ext.react = [\n  enableHermes: true  // clean and rebuild if changing\n]\n```\n\n----------------------------------------\n\nTITLE: Replacing camera roll dependency - yarn\nDESCRIPTION: These commands replace the deprecated `@react-native-community/cameraroll` dependency with the actively maintained `@react-native-camera-roll/camera-roll` package using yarn. This ensures compatibility and access to the latest features and fixes for camera roll functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/migrating-from-4.x-to-5.x.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @react-native-community/cameraroll\nyarn add @react-native-camera-roll/camera-roll\n```\n\n----------------------------------------\n\nTITLE: Removing stream-chat dependency - yarn\nDESCRIPTION: This command removes the `stream-chat` dependency from your project using yarn.  This is necessary because `stream-chat-react-native` includes `stream-chat` as a direct dependency. Having it listed explicitly in the app's package.json can cause conflicts.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/migrating-from-4.x-to-5.x.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove stream-chat\n```\n\n----------------------------------------\n\nTITLE: Android Manifest camera permission\nDESCRIPTION: This XML snippet shows the required permission in the AndroidManifest.xml file for camera access when using react-native-image-picker in a React Native CLI project. It requests permission to use the camera.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_21\n\nLANGUAGE: xml\nCODE:\n```\n  <uses-permission android:name=\"android.permission.CAMERA\" />\n```\n\n----------------------------------------\n\nTITLE: Basic MessageInput Usage in React Native\nDESCRIPTION: This snippet demonstrates the basic usage of the MessageInput component within a Stream Chat React Native application. It shows how to wrap the MessageInput component within OverlayProvider, Chat, and Channel components to integrate it into the chat interface.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/message_input.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider>\n  <Chat client={client}>\n    <Channel channel={channel}>\n      <MessageInput />\n    </Channel>\n  </Chat>\n</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Consuming TranslationContext with useContext - React\nDESCRIPTION: This code snippet demonstrates how to consume the TranslationContext using the useContext hook in a React component. It imports the TranslationContext from stream-chat-react-native and retrieves the t and tDateTimeParser functions for translation. This requires React and stream-chat-react-native as dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/translation_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { TranslationContext } from 'stream-chat-react-native';\n\nconst { t, tDateTimeParser } = useContext(TranslationContext);\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies using Yarn\nDESCRIPTION: This command installs the required dependencies for the project using Yarn. It is executed in multiple directories: root, package, native-package and examples/SampleApp. Yarn reads the `package.json` file and downloads and installs all listed packages.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn install\n```\n\n----------------------------------------\n\nTITLE: Enabling Hermes Engine\nDESCRIPTION: This Java code shows how to enable the Hermes JavaScript engine in the `android/app/build.gradle` file. Hermes is a JavaScript engine optimized for React Native, improving app startup time and performance. Enabling Hermes is essential for Reanimated 2 to function correctly on Android, specifically for older versions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nproject.ext.react = [\n  enableHermes: true  // clean and rebuild if changing\n]\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies in expo-package directory\nDESCRIPTION: Changes the directory to `expo-package` and installs dependencies. This step ensures that the expo-package-specific dependencies are installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/ExpoMessaging/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd expo-package && yarn install\n```\n\n----------------------------------------\n\nTITLE: Disable Autocomplete in Channel Component (React Native)\nDESCRIPTION: This code snippet demonstrates how to disable the autocomplete feature (mentions, commands) within the Stream Chat Channel component in React Native. It involves overriding the `autoCompleteTriggerSettings` prop with an empty object and removing the commands button using the `hasCommands` prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_input_customization.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  autoCompleteTriggerSettings={() => ({})}\n  channel={channel}\n  hasCommands={false}\n  keyboardVerticalOffset={headerHeight}\n  thread={thread}\n>\n```\n\n----------------------------------------\n\nTITLE: Using defaultHandlers.quotedReply() onLongPressMessage (TSX)\nDESCRIPTION: Example of how to use the `defaultHandlers.quotedReply()` function within the `onLongPressMessage` handler in the `Channel` component.  It shows how to trigger a quoted reply action using the default handler when a message is long-pressed. The Channel component is from stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/object-types/message_touchable_handler_payload.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel onLongPressMessage={({ defaultHandlers }) => defaultHandlers.quotedReply()}\n```\n\n----------------------------------------\n\nTITLE: Clean Install Script\nDESCRIPTION: This snippet includes commands that remove the existing node_modules directory and yarn.lock file, then reinstalls dependencies using yarn. Finally, it clears the watchman cache and restarts the yarn bundler, resetting its cache. This process helps ensure a clean environment for development and prevents potential conflicts after changing the project configuration or dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/README.md#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nrm -rf node_modules\nrm yarn.lock\nyarn install\nwatchman watch-del-all\nyarn start --reset-cache\n```\n\n----------------------------------------\n\nTITLE: Removing Message Bubble Border - JSX\nDESCRIPTION: Demonstrates how to remove the border from message bubbles using theme customization.  This involves setting the `borderWidth` property to 0 for various container elements within the `messageSimple -> content` style. Requires the `Chat` component from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-message.mdx#_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\nconst themeStyle = {\n  messageSimple: {\n    content: {\n      container: {\n        borderWidth: 0,\n      },\n      containerInner: {\n        borderWidth: 0,\n      },\n      deletedContainerInner: {\n        borderWidth: 0,\n      },\n      textContainer: {\n        borderWidth: 0,\n      },\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Customizing Giphy Attachment (JSX)\nDESCRIPTION: This JSX snippet demonstrates how to override the default Giphy attachment component with a custom implementation. It receives the `attachment` and `onPressIn` props and logs specific attachment properties to the console for demonstration. Replace the placeholder comment with the actual custom UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-attachment.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst CustomGiphy = ({ attachment, onPressIn }) => {\n  console.log(attachment.type);\n  console.log(attachment.actions)\n  console.log(attachment.image_url)\n  console.log(attachment.thumb_url)\n  console.log(attachment.title)\n  console.log(attachment.type)\n\n  return (/** Your custom UI */)\n}\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Firebase Modules (Shell)\nDESCRIPTION: This snippet shows how to install the necessary React Native Firebase modules using yarn. It installs the core app module and the messaging module for handling push notifications.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/push_notifications_v1.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install & setup the app module\nyarn add @react-native-firebase/app\n\n# Install the messaging module\nyarn add @react-native-firebase/messaging\n```\n\n----------------------------------------\n\nTITLE: Markdown Style Type Definition - Typescript\nDESCRIPTION: Defines the `MarkdownStyle` type used for styling markdown content, showcasing available keys for styling various markdown elements. It shows the various TextStyle and ViewStyle properties that can be configured.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nexport type MarkdownStyle = Partial<{\n  autolink: TextStyle;\n  blockQuoteBar: ViewStyle;\n  blockQuoteSection: ViewStyle;\n  blockQuoteSectionBar: ViewStyle;\n  blockQuoteText: TextStyle | ViewStyle;\n  br: TextStyle;\n  codeBlock: TextStyle;\n  del: TextStyle;\n  em: TextStyle;\n  heading: TextStyle;\n  heading1: TextStyle;\n  heading2: TextStyle;\n  heading3: TextStyle;\n  heading4: TextStyle;\n  heading5: TextStyle;\n  heading6: TextStyle;\n  hr: ViewStyle;\n  image: ImageStyle;\n  inlineCode: TextStyle;\n  list: ViewStyle;\n  listItem: ViewStyle;\n  listItemBullet: TextStyle;\n  listItemNumber: TextStyle;\n  listItemText: TextStyle;\n  listRow: ViewStyle;\n  mailTo: TextStyle;\n  mentions: TextStyle;\n  newline: TextStyle;\n  noMargin: TextStyle;\n  paragraph: TextStyle;\n  paragraphCenter: TextStyle;\n  paragraphWithImage: ViewStyle;\n  strong: TextStyle;\n  sublist: ViewStyle;\n  table: ViewStyle;\n  tableHeader: ViewStyle;\n  tableHeaderCell: TextStyle;\n  tableRow: ViewStyle;\n  tableRowCell: ViewStyle;\n  tableRowLast: ViewStyle;\n  text: TextStyle;\n  u: TextStyle;\n  view: ViewStyle;\n}>;\n```\n\n----------------------------------------\n\nTITLE: Using Chat Component at Screen Level - TSX\nDESCRIPTION: This snippet illustrates how to use the Chat component at the screen level. The Chat component receives the initialized StreamChat client as a prop. This configuration provides the necessary context for Stream Chat functionality within the Screen component. A separate snippet shows the Screen component wrapped in OverlayProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/overview.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const Screen = () => <Chat client={client}>{/** App components */}</Chat>;\n```\n\nLANGUAGE: tsx\nCODE:\n```\nimport { OverlayProvider } from 'stream-chat-react-native';\nimport { Screen } from './Screen';\n\nexport const App = () => (\n  <OverlayProvider>\n    <Screen />\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Install React Native Image Picker (Image Gallery) (RN CLI)\nDESCRIPTION: This command installs the react-native-image-picker package using yarn for projects initialized with React Native CLI to allow for picking gallery images.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_24\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-image-picker\n```\n\n----------------------------------------\n\nTITLE: Sorting Channel List - Typescript\nDESCRIPTION: This code snippet shows how to create a sort object to sort channel list by last updated time. The `last_updated` field is sorted in descending order (-1). This sort object can be passed to the `ChannelList` component to sort the channels.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/common-content/ui-components/channel-list/props/sort.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst sort = { last_updated: -1 };\n```\n\n----------------------------------------\n\nTITLE: Representing Mentioned User IDs - TSX\nDESCRIPTION: This code snippet represents an array of user IDs that have been mentioned in a message. The array is expected to contain strings, where each string is the unique identifier for a user. This array is likely used in conjunction with a chat library to highlight or notify the mentioned users.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/contexts/message-input-context/mentioned_users.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n['vishal-user-id', 'jaap-user-id'];\n```\n\n----------------------------------------\n\nTITLE: Using the Theme\nDESCRIPTION: This code snippet shows how to access the theme in custom components using the `useTheme` hook from `stream-chat-react-native`. It demonstrates how to retrieve a specific color value (black) from the theme's color palette.  It is important to avoid memoization checks when using theme variables to ensure UI updates reflect theme changes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/customization/theming.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nconst {\n  theme: {\n    colors: {\n      black\n    },\n  },\n} = useTheme();\n\n```\n\n----------------------------------------\n\nTITLE: Cloning the Project with Git\nDESCRIPTION: This command clones the project repository from GitHub to your local machine, providing the source code for the React Native chat application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GetStream/stream-chat-react-native.git\n```\n\n----------------------------------------\n\nTITLE: Overriding MessageInput with Channel Props - React Native TSX\nDESCRIPTION: This snippet shows how to override the `MessageInput` component using the `Input` prop of the `Channel` component in Stream Chat React Native. It also shows how `MessageInput` props take precedence over context values.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel channel={channel} Input={() => null} keyboardVerticalOffset={headerHeight} Message={CustomMessageComponent}>\n  <View style={{ flex: 1 }}>\n    <MessageList />\n    <MessageInput Input={() => <View style={{ height: 40, backgroundColor: 'red' }} />} />\n  </View>\n</Channel>\n```\n\n----------------------------------------\n\nTITLE: Calendar Formats Configuration - Javascript\nDESCRIPTION: This javascript snippet demonstrates the expected structure for customizing the calendar formats. Each key represents a relative time period (lastDay, lastWeek, etc.) and its value is a string specifying the desired format for that period.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/date-time-formatting.mdx#_snippet_5\n\nLANGUAGE: js\nCODE:\n```\n{\n  lastDay: '[gestern um] LT',\n  lastWeek: '[letzten] dddd [um] LT',\n  nextDay: '[morgen um] LT',\n  nextWeek: 'dddd [um] LT',\n  sameDay: '[heute um] LT',\n  sameElse: 'L',\n}\n```\n\n----------------------------------------\n\nTITLE: Add Reanimated JSI Module Package - MainApplication.java (Android)\nDESCRIPTION: This code snippet adds the Reanimated JSI module package to the `MainApplication.java` file. This step is crucial for Reanimated 2 to work correctly on Android. The JSI module package provides native bindings for Reanimated, allowing it to interact with the native platform. It must be imported and then added to the `getJSIModulePackage` method within the `ReactNativeHost`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nimport com.facebook.react.bridge.JSIModulePackage;\nimport com.swmansion.reanimated.ReanimatedJSIModulePackage;\n...\n\nprivate final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) {\n  ...\n\n  @Override\n  protected String getJSMainModuleName() {\n    return \"index\";\n  }\n\n  @Override\n  protected JSIModulePackage getJSIModulePackage() {\n    return new ReanimatedJSIModulePackage();\n  }\n};\n...\n```\n\n----------------------------------------\n\nTITLE: Defining Default User Type (TSX)\nDESCRIPTION: This snippet shows the default user type for stream-chat-react-native, including image prop.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_15\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultUserType = Record<string, unknown> & {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Setting bottomInset for OverlayProvider - TSX\nDESCRIPTION: This snippet demonstrates how to set the bottomInset for the OverlayProvider to align the AttachmentPicker properly with the bottom sheet.  It uses the useSafeAreaInsets hook from react-native-safe-area-context to get the bottom safe area inset and passes it as a prop to the OverlayProvider.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/navigation.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { useSafeAreaInsets } from 'react-native-safe-area-context';\nimport { Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst Stack = createStackNavigator<{ home: undefined }>();\n\nexport const Nav = () => {\n    // highlight-next-line\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <NavigationContainer>\n    // highlight-next-line\n      <OverlayProvider bottomInset={bottom}>\n        <Chat client={client}>\n          <Stack.Navigator>\n            <Stack.Screen component={() => {/** App components */})} name='home' />\n          </Stack.Navigator>\n        </Chat>\n    // highlight-next-line\n      </OverlayProvider>\n    </NavigationContainer>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Message Actions Callback - TypeScript\nDESCRIPTION: This code snippet defines the structure of the `messageActions` prop passed to the `Channel` component. The callback function receives various parameters related to the message and user context. It should return an array of `MessageAction` objects to be displayed in the message overlay.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/message_actions_customization.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nmessageActions={({\n  blockUser, // MessageAction | null;\n  canModifyMessage, // boolean;\n  copyMessage, // MessageAction | null;\n  deleteMessage, // MessageAction | null;\n  dismissOverlay, // () => void;\n  editMessage, // MessageAction | null;\n  error, // boolean;\n  flagMessage, // MessageAction | null;\n  isMyMessage, // boolean;\n  isThreadMessage, // boolean;\n  message, // MessageType<At, Ch, Co, Ev, Me, Re, Us>;\n  messageReactions, // boolean;\n  mutesEnabled, // boolean\n  muteUser, // MessageAction | null;\n  reactionsEnabled, // boolean\n  reply, // MessageAction | null;\n  retry, // MessageAction | null;\n  threadReply, // MessageAction | null;\n  threadRepliesEnabled, // boolean;\n  quotedRepliesEnabled, // boolean;\n}) => {\n  return [] // Array<MessageAction>\n}}\n```\n\n----------------------------------------\n\nTITLE: Consuming ThreadListItemContext with useContext - React\nDESCRIPTION: This code snippet demonstrates how to consume the ThreadListItemContext using the useContext hook from React. It imports the ThreadListItemContext from the stream-chat-react-native library and retrieves the context value.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/thread-list-item-context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { ThreadListItemContext } from 'stream-chat-react-native';\n\nconst value = useContext(ThreadListItemContext);\n```\n\n----------------------------------------\n\nTITLE: Installing native image picker (Expo)\nDESCRIPTION: This command installs the `expo-image-picker` package using npx expo install. This provides a native image picker for selecting images from the gallery or taking a picture from the camera.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/native-image-picker.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-picker\n```\n\n----------------------------------------\n\nTITLE: Setting bottomInset prop to the OverlayProvider - Typescript\nDESCRIPTION: This snippet show how to pass the `bottomInset` to the OverlayProvider, which will change the height of gallery to prevent rendering issues with `MessageInput`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/troubleshooting.mdx#_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n<OverlayProvider bottomInset={/** number */}>\n```\n\n----------------------------------------\n\nTITLE: MessagePressableHandlerPayload Example\nDESCRIPTION: This example shows the structure of the MessagePressableHandlerPayload object, which is passed to message interaction handlers. It includes properties like `defaultHandler`, `emitter`, `event`, `actionHandlers`, and `message`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/object-types/message_pressable_handler_payload.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n{  defaultHandler: [function],  emitter: 'giphy',  event: [Native Event Object],  actionHandlers: {    deleteMessage: [function],    editMessage: [function],    quotedReply: [function],    resendMessage: [function],    showMessageOverlay: [function],    toggleBanUser: [function],    toggleMuteUser: [function],    toggleReaction: [function],  },  message: [message object],}\n```\n\n----------------------------------------\n\nTITLE: Mapping message reactions to a data structure (TSX)\nDESCRIPTION: This code snippet demonstrates how to extract reactions from a message object and map them to a specific data structure for rendering.  It iterates through `message.latest_reactions` and constructs an array of objects containing reaction details such as alignment, user ID, image, name, and reaction type. The `clientId` is used to determine the alignment of the reaction, displaying reactions from the current user on the right. The expected input is a message object with a `latest_reactions` property that's an array of reaction objects. The output is an array of reaction objects in the desired format.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/overlay-reactions.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst reactions = message.latest_reactions.map(reaction => ({\n  alignment: clientId && clientId === reaction.user?.id ? 'right' : 'left',\n  id: reaction?.user?.id || '',\n  image: reaction?.user?.image,\n  name: reaction?.user?.name || reaction.user_id || '',\n  type: reaction.type,\n}));\n```\n\n----------------------------------------\n\nTITLE: Linking SDK to package.json\nDESCRIPTION: Replaces the standard SDK dependency with a local file link in your project's package.json.  This allows you to test local changes to the SDK in your application.  It is assumed that `stream-chat-react-native` and your app are in the same parent directory.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n\"stream-chat-react-native-core\": \"link:../stream-chat-react-native/package\",\n\"stream-chat-react-native\": \"link:../stream-chat-react-native/package/native-package\", // If youre using the native package\n\"stream-chat-expo\": \"link:../stream-chat-react-native/package/expo-package\", // If youre using expo\n```\n\n----------------------------------------\n\nTITLE: Overriding PollOptionFullResultsContent - TSX\nDESCRIPTION: This example demonstrates how to override the default PollOptionFullResultsContent with a custom component. The custom component, MyPollOptionFullResultsContent, uses the usePollState and usePollOptionVotesPagination hooks to access poll data and votes. It then renders a FlatList displaying the poll name and vote IDs. This implementation retrieves only the first page of votes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-option-full-results.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Text, FlatList } from 'react-native';\nimport {\n  OverlayProvider,\n  Chat,\n  Channel,\n  PollOptionFullResults,\n  usePollOptionVotesPagination,\n  usePollState,\n} from 'stream-chat-react-native';\n\n// will only display the first page of votes without loading more\nconst MyPollOptionFullResultsContent = ({ option }) => {\n  const { name } = usePollState();\n  const { votes } = usePollOptionVotesPagination({ option });\n  return (\n    <FlatList\n      ListHeaderComponent={() => <Text>{name}</Text>}\n      data={votes}\n      renderItem={({ item }) => <Text>{item.id}</Text>}\n    />\n  );\n};\n\nconst App = () => {\n  return (\n    <OverlayProvider>\n      <Chat client={client}>\n        <Channel channel={channel}>\n          <PollOptionFullResults\n            message={message}\n            poll={poll}\n            option={option}\n            PollOptionFullResultsContent={MyPollOptionFullResultsContent}\n          />\n        </Channel>\n      </Chat>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Changing directory to SampleApp and installing dependencies\nDESCRIPTION: This command changes the current directory to the `examples/SampleApp` directory within the project and installs the dependencies using yarn.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../examples/SampleApp && yarn install\n```\n\n----------------------------------------\n\nTITLE: Install Stream Chat Expo Dependencies\nDESCRIPTION: This command installs the necessary dependencies for Stream Chat Expo projects. It includes stream-chat-expo and other packages that are required for functionality within the Expo environment.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/getting_started.mdx#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nexpo install stream-chat-expo\nexpo install @react-native-community/netinfo expo-blur expo-document-picker expo-file-system expo-haptics expo-image-manipulator expo-image-picker expo-media-library expo-sharing react-native-gesture-handler react-native-reanimated react-native-safe-area-context react-native-svg\n```\n\n----------------------------------------\n\nTITLE: ReactionPickerWrapper Offset Configuration React Native\nDESCRIPTION: This code snippet shows the default offset configuration for the ReactionPickerWrapper component. It defines the top, left, and right offsets used to position the ReactionPicker relative to the wrapped component. This allows for customization of the ReactionPicker's position.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/package/CHANGELOG.md#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    top: 40,\n    left: 30,\n    right: 10,\n}\n```\n\n----------------------------------------\n\nTITLE: Installing dependencies in package directory\nDESCRIPTION: Changes the directory to `package` and installs dependencies. This step ensures that the package-specific dependencies are installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/ExpoMessaging/README.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd package && yarn install\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Yarn (native-package)\nDESCRIPTION: This command changes the current directory to `native-package` and installs dependencies with yarn. This likely contains native module dependencies.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd native-package && yarn install\n```\n\n----------------------------------------\n\nTITLE: Install Expo Image Picker (Expo)\nDESCRIPTION: This command installs the expo-image-picker package using npx expo install for projects initialized with Expo. This is an optional dependency to capture images from the camera and upload them as attachments.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\nnpx expo install expo-image-picker\n```\n\n----------------------------------------\n\nTITLE: Add Stream Chat React Native Dependency using Yarn\nDESCRIPTION: This command adds the stream-chat-react-native package to your React Native project using Yarn. It is a necessary first step to integrate Stream Chat functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/getting_started.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stream-chat-react-native@3.10.2\n```\n\n----------------------------------------\n\nTITLE: Removing react-native-fs dependency - Bash\nDESCRIPTION: This command removes the `react-native-fs` package, which is no longer actively maintained and has been replaced by `react-native-blob-util` in version 6.x of the Stream Chat React Native SDK.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove react-native-fs\n```\n\n----------------------------------------\n\nTITLE: Adding Locale Config with registerTranslation - Typescript\nDESCRIPTION: This snippet shows how to add locale configuration for moment while registering a translation via the `registerTranslation` function. This allows you to customize the date and time format along with the text translations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/translations.mdx#_snippet_8\n\nLANGUAGE: tsx\nCODE:\n```\nconst i18n = new Streami18n();\n\ni18n.registerTranslation(\n 'mr',\n {\n   'Nothing yet...': 'काहीही नाही  ...',\n   '{{ firstUser }} and {{ secondUser }} are typing...':\n    '{{ firstUser }} आणि {{ secondUser }} टीपी करत आहेत ',\n },\n {\n   months: [...],\n   monthsShort: [...],\n   calendar: {\n     sameDay: '...'\n   }\n }\n);\n```\n\n----------------------------------------\n\nTITLE: Cloning the project using Git\nDESCRIPTION: This command clones the Stream Chat React Native repository from GitHub to your local machine. It downloads all the necessary files and directories to your specified location.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GetStream/stream-chat-react-native.git\n```\n\n----------------------------------------\n\nTITLE: Wrapping Components with GestureHandlerRootView - TypeScript\nDESCRIPTION: This snippet shows how to wrap the component tree with `<GestureHandlerRootView>` to ensure that gesture handling works correctly. This is essential for components like `MessageOverlay` and `Imagegallery` that rely on gestures.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<GestureHandlerRootView style={{ flex: 1 }}>\n  <OverlayProvider>// Other underlying components</OverlayProvider>\n</GestureHandlerRootView>\n```\n\n----------------------------------------\n\nTITLE: Installing SDK Dependencies with Yarn\nDESCRIPTION: Navigates to the SDK's root directory and installs the required dependencies using Yarn. This ensures that all necessary packages are available for the SDK to function correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/dev_setup_and_sample_apps.mdx#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\ncd stream-chat-react-native;\nyarn install;\n```\n\n----------------------------------------\n\nTITLE: Metro Configuration (JavaScript)\nDESCRIPTION: This snippet provides a `metro.config.js` configuration for React Native projects using the Stream Chat React Native SDK. It uses the `extractLinkedPackages` helper from the SDK to resolve dependency collisions. The configuration sets up resolver options to blacklist modules and specify extra node modules, along with watch folders for development.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/README.md#_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nconst PATH = require('path');\nconst blacklist = require('metro-config/src/defaults/exclusionList');\n\nconst extractLinkedPackages = require('stream-chat-react-native-core/metro-dev-helpers/extract-linked-packages');\n\nconst projectRoot = PATH.resolve(__dirname);\n\nconst { alternateRoots, extraNodeModules, moduleBlacklist } = extractLinkedPackages(projectRoot);\n\nmodule.exports = {\n  resolver: {\n    blacklistRE: blacklist(moduleBlacklist),\n    extraNodeModules,\n    useWatchman: false,\n  },\n  watchFolders: [projectRoot].concat(alternateRoots),\n};\n```\n\n----------------------------------------\n\nTITLE: Installing Pods for iOS using Pod\nDESCRIPTION: This command installs the required CocoaPods dependencies for the iOS project.  It changes the directory to the ios folder and executes `pod install`. Requires CocoaPods to be installed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd ios && pod install\n```\n\n----------------------------------------\n\nTITLE: Wrapping Nav component with SafeAreaProvider - TSX\nDESCRIPTION: This snippet shows how to wrap the Nav component (which includes the OverlayProvider and navigation) with SafeAreaProvider. This ensures that safe area insets are properly handled across different devices.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/navigation.mdx#_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\nimport React from 'react';\nimport { SafeAreaProvider } from 'react-native-safe-area-context';\nimport { Nav } from './Nav';\n\nexport const App = () => (\n  <SafeAreaProvider>\n    <Nav />\n  </SafeAreaProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Android Gradle Properties Snippet\nDESCRIPTION: This snippet disables Hermes and disables multiple instance checks for gesture handler within the `android/gradle.properties` file.  It resolves potential build failures related to react-native-quick-sqlite and react-native-gesture-handler.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/ExpoMessaging/README.md#_snippet_7\n\nLANGUAGE: text\nCODE:\n```\n# Disabled hermes in favour of broken Android build due to the package `react-native-quick-sqlite`:\n# To Fix:\n# A problem occurred evaluating project ':react-native-quick-sqlite'.\n# > Cannot get property 'hermesEnabled' on extra properties extension as it does not exist\nhermesEnabled=true\n\n# disables the check for multiple instances for gesture handler\n# this is needed for react-native-gesture-handler to be both a devDep of core and be a dep on the expo sample app\ndisableMultipleInstancesCheck=true\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Poll Buttons - React Native\nDESCRIPTION: This code snippet demonstrates how to add custom buttons to the poll UI in Stream Chat React Native. It imports ShowAllCommentsButton and AddCommentButton from 'stream-chat-react-native' and includes them in a custom MyPollButtons component, alongside other buttons. These buttons allow users to view all comments and add new comments to a poll.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-poll-flow.mdx#_snippet_7\n\nLANGUAGE: tsx\nCODE:\n```\nimport {\n  // ...rest of the imports\n  // highlight-start\n  ShowAllCommentsButton,\n  AddCommentButton\n // highlight-end\n} from 'stream-chat-react-native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\n// ... rest of the components\n\nconst MyPollButtons = () => {\n  return (\n    <>\n      <ShowAllOptionsButton />\n      // highlight-start\n      <ShowAllCommentsButton />\n      <AddCommentButton />\n      // highlight-end\n      <ViewResultsButton\n        onPress={({ message, poll }) =>\n          navigation.navigate('PollResultsScreen', {\n            message,\n            poll,\n          });\n        }\n      />\n      <EndVoteButton />\n    </>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing OverlayProvider with Stream Chat - TSX\nDESCRIPTION: This snippet demonstrates the basic usage of the OverlayProvider component. It imports necessary modules from 'stream-chat' and 'stream-chat-react-native', initializes a StreamChat client, and renders the OverlayProvider wrapping the Chat and ChannelList components. The highlighted lines (7 and 11) indicate the core elements being used.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/core-components/overlay_provider.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { ChannelList, Chat, OverlayProvider } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => (\n  <OverlayProvider>\n    <Chat client={client}>\n      <ChannelList />\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Starting the application using Yarn\nDESCRIPTION: This command starts the React Native application using Yarn.  It likely executes the `start` script defined in the `package.json` file, which typically starts the Metro bundler.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/SampleApp/README.md#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn start\n```\n\n----------------------------------------\n\nTITLE: Selected Files array type definition\nDESCRIPTION: This snippet defines the structure of an array that stores the selected files in the attachment picker. Each object in the array represents a selected file and includes properties like duration, name, size, type, and URI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/attachment-picker-context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nArray<{  \n  duration: number | null;  \n  name: string;  \n  size: string;  \n  type: string;  \n  uri: string;  \n}>;\n```\n\n----------------------------------------\n\nTITLE: Install Expo-AV - Bash\nDESCRIPTION: This command demonstrates how to install the expo-av package using Expo. This package provides video playing support in your React Native application.  It is an optional dependency for stream-chat-expo.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_14\n\nLANGUAGE: Bash\nCODE:\n```\nexpo install expo-av\n```\n\n----------------------------------------\n\nTITLE: Using Channel Component with Thread List - TSX\nDESCRIPTION: This code snippet shows another example of how to use the `Channel` component with the `thread` prop, specifically when displaying a thread list.  The `threadList` prop indicates that this `Channel` component is being used to display a list of threads. The `onThreadDismount` prop is used to reset the thread state when navigating away from the thread list.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n<Chat client={chatClient} i18nInstance={streami18n}>\n  <Channel channel={channel} thread={thread} threadList>\n    <Thread onThreadDismount={() => setThread(null)} />\n  </Channel>\n</Chat>\n```\n\n----------------------------------------\n\nTITLE: Wallpaper Overview Screen Implementation - TSX\nDESCRIPTION: This snippet implements the WallpaperOverviewScreen, which allows the user to select a background image from a predefined list. It uses react-native-mmkv to store the selected image URI for the channel. It uses react-navigation to navigate back to the ChannelScreen after selection.  It depends on react-native-mmkv, react-navigation and react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/custom-channel-background.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StackNavigationProp } from '@react-navigation/stack';\nimport { RouteProp } from '@react-navigation/native';\nimport { useMMKVObject } from 'react-native-mmkv';\nimport { View, SafeAreaView, Pressable, Image, StyleSheet } from 'react-native';\n\nconst WallpaperOverviewScreen = ({\n  navigation: { navigate },\n  route: {\n    params: { channelId },\n  },\n}: WallpaperOverviewScreenProps) => {\n  const [_, setChannelPreferences] = useMMKVObject<ChannelPreferences>(channelId);\n  return (\n    <SafeAreaView\n      style={{\n        flex: 1,\n        justifyContent: 'center',\n      }}\n    >\n      <View style={styles.container}>\n        {BRIGHT_IMAGES?.map(({ imageUri = '' }, i) => {\n          const handleOnPress = () => {\n            setChannelPreferences({ imageUri });\n            navigate('Channel');\n          };\n          return (\n            <Pressable\n              key={i}\n              onPress={handleOnPress}\n              style={{\n                margin: 1,\n                width: GRID_ITEM_WIDTH,\n              }}\n            >\n              <Image style={styles.image} source={{ uri: imageUri }} />\n            </Pressable>\n          );\n        })}\n      </View>\n    </SafeAreaView>\n  );\n};\n\ntype StackNavigatorParamList = {\n  WallpaperOverviewScreen: {\n    channelId: string;\n  };\n};\n\ntype WallpaperOverviewScreenProps = {\n  navigation: StackNavigationProp<StackNavigatorParamList, 'WallpaperOverviewScreen'>;\n  route: RouteProp<StackNavigatorParamList, 'WallpaperOverviewScreen'>;\n};\n\ntype ChannelPreferences = {\n  imageUri: string;\n};\n\nconst GRID_ITEM_WIDTH = '32.7%';\n\n// Some random images that will get you started\nconst BRIGHT_IMAGES = [\n  'https://images.unsplash.com/photo-1549125764-91425ca48850?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8NjF8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1549241520-425e3dfc01cb?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8ODB8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1554226321-24fdcddd5a55?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MjE5fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1550006490-9f0656b79e9d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8ODl8fHxlbnwwfHx8fA%3D%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1551506448-074afa034c05?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTEzfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553114835-6f7674d3c2c0?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTMyfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553075712-453f7213c24f?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTMzfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1551917951-148edcd8ea8d?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTU3fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553969923-bbf0cac2666b?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MjA3fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553194642-29b272a173b9?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTcwfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553356084-58ef4a67b2a7?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTcxfHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n  'https://images.unsplash.com/photo-1553526777-5ffa3b3248d8?ixlib=rb-1.2.1&ixid=MnwxMjA3fDB8MHxleHBsb3JlLWZlZWR8MTk4fHx8ZW58MHx8fHw%3D&auto=format&fit=crop&w=800&q=60',\n].map(imageUri => ({\n  imageUri,\n}));\n\nconst styles = StyleSheet.create({\n  container: {\n    flexDirection: 'row',\n    flex: 1,\n    alignContent: 'stretch',\n    flexWrap: 'wrap',\n    padding: 6,\n  },\n  image: {\n    flex: 1,\n    width: '100%',\n  },\n});\n\n```\n\n----------------------------------------\n\nTITLE: Uninstall Camera Roll - React Native CLI\nDESCRIPTION: This command uninstalls the @react-native-camera-roll/camera-roll package using yarn. This is necessary if the media library is already installed and needs to be replaced with the native image picker.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/native-image-picker.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nyarn remove @react-native-camera-roll/camera-roll\n```\n\n----------------------------------------\n\nTITLE: Setting additional FlatList props - JSX\nDESCRIPTION: This code snippet shows how to pass additional props to the underlying FlatList component used within PollOptionFullResults. In this example, the bounces property of the FlatList is set to true, enabling bounce effects when scrolling. This allows for customization of the FlatList's behavior within the PollOptionFullResults component.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/ui-components/poll-option-full-results.mdx#_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<PollOptionFullResults additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: ReactionPickerWrapper Default Offset Configuration - React Native\nDESCRIPTION: This code snippet illustrates the default offset configuration for the ReactionPickerWrapper component in Stream Chat React Native. It defines the top, left, and right offsets that determine the position at which the ReactionPicker opens relative to the wrapped component. This configuration allows developers to adjust the placement of the ReactionPicker to fit their UI design.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/package/CHANGELOG.md#_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    top: 40,\n    left: 30,\n    right: 10,\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Channel Event Handler in ChannelList (JS)\nDESCRIPTION: This code snippet demonstrates how to override the default handler for the `notification.added_to_channel` event within the `ChannelList` component. It shows how to pass a custom function as the `onAddedToChannel` prop, which receives the `setChannels` function and the `event` object as arguments. The custom function can then modify the channels array and perform other actions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/package/CHANGELOG.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n// In following example we will override the default handler for notification.added_to_channel\n<ChannelList\n  filters={}\n  onAddedToChannel={(setChannels, event) => {\n    setChannels(channels => {\n      // Do additional actions on channels array.\n      return channels;\n    })\n  }}\n>\n\n```\n\n----------------------------------------\n\nTITLE: noBorder Calculation\nDESCRIPTION: This code snippet calculates the `noBorder` prop, which determines whether to show borders for the deleted message. It checks if the message contains only emojis and is not a quoted message, or if there are other attachments. This value is then used to determine if borders should be displayed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/ui-components/message_deleted.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst noBorder = (onlyEmojis && !message.quoted_message) || !!otherAttachments.length;\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies using Yarn (TypeScriptMessaging)\nDESCRIPTION: This command navigates to the `examples/TypeScriptMessaging` directory and installs the dependencies using Yarn. These dependencies are crucial for running the TypeScript chat application example.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/TypeScriptMessaging/README.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncd ../../examples/TypeScriptMessaging && yarn install\n```\n\n----------------------------------------\n\nTITLE: Installing React Native Video (Yarn)\nDESCRIPTION: This command installs the react-native-video package using Yarn.  This is an optional dependency that enables playing video files within the chat interface.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-video\n```\n\n----------------------------------------\n\nTITLE: Example Local Type Definitions (TSX)\nDESCRIPTION: This snippet presents example type definitions for various local types like `LocalAttachmentType`, `LocalChannelType`, etc. These types define the structure and properties for each specific data type used in your Stream Chat application.  These definitions should reflect the actual data structures used in your application and can be customized as needed. Each type is shown as a `Record<string, unknown>` except for `LocalAttachmentType` and `LocalUserType` which have defined properties.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_11\n\nLANGUAGE: tsx\nCODE:\n```\ntype LocalAttachmentType = {\n  file_size?: number;\n  mime_type?: string;\n};\ntype LocalChannelType = Record<string, unknown>;\ntype LocalCommandType = string;\ntype LocalEventType = Record<string, unknown>;\ntype LocalMessageType = Record<string, unknown>;\ntype LocalReactionType = Record<string, unknown>;\ntype LocalUserType = {\n  image?: string;\n};\n```\n\n----------------------------------------\n\nTITLE: Consuming MessageInputContext with useMessageInputContext hook\nDESCRIPTION: This code snippet demonstrates how to consume the MessageInputContext using the useMessageInputContext hook provided by the library. This simplifies the context consumption and retrieves the sendMessage and toggleAttachmentPicker functions.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/message_input_context.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useMessageInputContext } from 'stream-chat-react-native';\n\nconst { sendMessage, toggleAttachmentPicker } = useMessageInputContext();\n```\n\n----------------------------------------\n\nTITLE: Defining Default Attachment Type (TSX)\nDESCRIPTION: This snippet shows the default attachment type for stream-chat-react-native.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/customization/typescript.mdx#_snippet_9\n\nLANGUAGE: tsx\nCODE:\n```\ntype DefaultAttachmentType = Record<string, unknown>;\n```\n\n----------------------------------------\n\nTITLE: Cloning the Project with Git\nDESCRIPTION: Clones the Stream Chat React Native repository from GitHub. This step is necessary to obtain the source code for the Expo Chat example app.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/examples/ExpoMessaging/README.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/GetStream/stream-chat-react-native.git\n```\n\n----------------------------------------\n\nTITLE: AASA File Snippet - JSON\nDESCRIPTION: This JSON snippet represents the Apple App Site Association (AASA) file. It declares the association between the website and the iOS app, enabling Universal Links.  The `appID` field should contain the Team ID and App Bundle ID.  Ensure the AASA file is hosted at `https://domain.name/.well-known/apple-app-site-association`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/deeplinking.mdx#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"applinks\": {\n        \"apps\": [],\n        \"details\": [{\n            \"appID\": [\"<TeamID>.com.example.myapp\"],\n            \"paths\": [\"*\"]\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing @op-engineering/op-sqlite package (Expo)\nDESCRIPTION: This bash command installs the `@op-engineering/op-sqlite` package using expo install command for enabling offline support in an Expo project.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_33\n\nLANGUAGE: Bash\nCODE:\n```\nnpx expo install @op-engineering/op-sqlite\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat Client and App Component - React Native\nDESCRIPTION: This code snippet initializes the Stream Chat client and defines the main App component. It uses `useState` to manage the channel, client readiness, and thread state. The `useEffect` hook connects the user upon mounting the component. The component renders a chat interface with channel list or specific channel view based on the state.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\nimport React, { useEffect, useState } from 'react';\nimport { View, TouchableOpacity, Text } from 'react-native';\nimport { Channel as ChannelType, StreamChat } from 'stream-chat';\nimport {\n  Channel,\n  ChannelList,\n  Chat,\n  MessageInput,\n  MessageList,\n  MessageType,\n  OverlayProvider,\n  Thread,\n} from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\n\nexport const App = () => {\n  const [channel, setChannel] = useState<ChannelType>();\n  const [clientReady, setClientReady] = useState(false);\n  const [thread, setThread] = useState<MessageType | null>();\n\n  useEffect(() => {\n    const setupClient = async () => {\n      try {\n        await client.connectUser(\n          {\n            id: 'jlahey',\n            name: 'Jim Lahey',\n            image: 'https://i.imgur.com/fR9Jz14.png',\n          },\n          'user_token',\n        );\n        setClientReady(true);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n\n    setupClient();\n  }, []);\n\n  const onBackPress = () => {\n    if (thread) {\n      setThread(undefined);\n    } else if (channel) {\n      setChannel(undefined);\n    }\n  };\n\n  if (!clientReady) return null;\n\n  return (\n    <OverlayProvider topInset={60}>\n      <TouchableOpacity onPress={onBackPress} disabled={!channel}>\n        <View style={{ height: 60, paddingLeft: 16, paddingTop: 40 }}>{channel && <Text>Back</Text>}</View>\n      </TouchableOpacity>\n      <View style={{ flex: 1 }}>\n        <Chat client={client}>\n          {channel ? (\n            <Channel channel={channel} keyboardVerticalOffset={60} thread={thread}>\n              {thread ? (\n                <Thread />\n              ) : (\n                <>\n                  <MessageList onThreadSelect={setThread} />\n                  <MessageInput />\n                </>\n              )}\n            </Channel>\n          ) : (\n            <ChannelList onSelect={setChannel} />\n          )}\n        </Chat>\n      </View>\n    </OverlayProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Installing @op-engineering/op-sqlite package (RN CLI)\nDESCRIPTION: This bash command installs the `@op-engineering/op-sqlite` package using yarn for enabling offline support in a React Native CLI project.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_32\n\nLANGUAGE: Bash\nCODE:\n```\nyarn add @op-engineering/op-sqlite\n```\n\n----------------------------------------\n\nTITLE: Customizing ReactionList Background Color - React Native\nDESCRIPTION: This code snippet demonstrates how to override the background color of the ReactionList container using the `fill` and `stroke` props within a stream-chat-react-native Channel component. It imports the necessary components and defines a custom ReactionList component with a specific background color.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/reaction_list.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Channel, ReactionList } from 'stream-chat-react-native';\n\nconst ReactionListWithCustomBackground = () => <ReactionList fill={'#00DDD'} stroke={'#fffff'} />\n\n<Channel ReactionList={ReactionListWithCustomBackground} />\n```\n\n----------------------------------------\n\nTITLE: Adding react-native-blob-util dependency - Bash\nDESCRIPTION: This command adds the `react-native-blob-util` package, which replaces the deprecated `react-native-fs` package in version 6.x of the Stream Chat React Native SDK.  This resolves dependency issues and aligns with current maintenance practices.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/migrating-from-5.x-to-6.x.mdx#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-blob-util\n```\n\n----------------------------------------\n\nTITLE: Checking Admin Role - TSX\nDESCRIPTION: This code snippet shows how to determine if the current user has an 'admin' role, either at the application or channel level.  It checks the client's user role and the channel's membership role. Dependencies include the client and channel objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/channel-context.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst isAdmin = client?.user?.role === 'admin' || channel?.state.membership.role === 'admin';\n```\n\n----------------------------------------\n\nTITLE: Loading Channel At Message in React Native (Deprecated)\nDESCRIPTION: This snippet showcases the deprecated loadChannelAtMessage function.  It loads the channel at a particular message in history, specifying the number of messages to load before and after the message.  It requires the messageId, as well as the before and after counts.  It's recommended to use loadChannelAroundMessage instead.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/contexts/channel-context.mdx#_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nloadChannelAtMessage({\n  before: 10, // Number of messages to load before messageId\n  after: 10, // Number of messages to load after messageId\n  messageId,\n});\n```\n\n----------------------------------------\n\nTITLE: Install React Native Audio Recorder Player and Blob Util (RN CLI)\nDESCRIPTION: This command installs the react-native-audio-recorder-player and react-native-blob-util packages using yarn for projects initialized with React Native CLI.  These are optional dependencies to enable voice recording.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn add react-native-audio-recorder-player react-native-blob-util\n```\n\n----------------------------------------\n\nTITLE: Adding GIF and WebP Support Dependencies\nDESCRIPTION: This Java code shows the dependencies required in `android/app/build.gradle` to enable GIF and WebP support in a React Native Android application. It utilizes Facebook Fresco library for handling animated GIFs and WebP images. The `support-core-utils` dependency provides necessary utilities for image processing and display.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_13\n\nLANGUAGE: java\nCODE:\n```\ndependencies {\n  // For animated GIF support\n  implementation 'com.facebook.fresco:animated-gif:2.6.0'\n\n  // For WebP support, including animated WebP\n  implementation 'com.facebook.fresco:animated-webp:2.6.0'\n  implementation 'com.facebook.fresco:webpsupport:2.6.0'\n\n  // Provide the Android support library (you might already have this or a similar dependency)\n  implementation 'com.android.support:support-core-utils:24.2.1'\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Fresco Modules for GIF and WebP Support - Java\nDESCRIPTION: This snippet demonstrates how to add Fresco modules in `android/app/build.gradle` to enable GIF and WebP support in Stream Chat on Android. It includes dependencies for animated GIFs, animated WebP, and static WebP images, ensuring proper rendering of these media types in the application.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/troubleshooting.mdx#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\ndependencies {\n  // For Android versions less than Ice Cream Sandwich (API level 14)\n  implementation 'com.facebook.fresco:animated-base-support:1.3.0'\n\n  // For GIF support\n  implementation 'com.facebook.fresco:animated-gif:2.0.0'\n\n  // For WebP support, with animations\n  implementation 'com.facebook.fresco:animated-webp:2.1.0'\n\n  // For WebP support, without animations\n  implementation 'com.facebook.fresco:webpsupport:2.0.0'\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring buildToolsVersion, compileSdkVersion, targetSdkVersion\nDESCRIPTION: This Java snippet illustrates setting `buildToolsVersion`, `compileSdkVersion`, and `targetSdkVersion` in the `android/build.gradle` file. These settings define the Android SDK versions used for building the app. It's crucial to ensure these versions are compatible with the libraries and features used in the project. The versions should be greater or equal to 26.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/basics/troubleshooting.mdx#_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nbuildscript {\n  ext {\n    buildToolsVersion = \"29.0.3\"\n    compileSdkVersion = 29\n    targetSdkVersion = 29\n    ...\n  }\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamChat Client with new StreamChat - TypeScript\nDESCRIPTION: This snippet demonstrates how to initialize the Stream Chat client using the `new StreamChat` constructor. It imports the `StreamChat` class from the 'stream-chat' package and then calls `new StreamChat` with your API key.  While supported it is not the preferred instantiation method.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/client.mdx#_snippet_1\n\nLANGUAGE: ts\nCODE:\n```\nconst client = new StreamChat('api_key');\n```\n\n----------------------------------------\n\nTITLE: Updating Message in Local Channel State\nDESCRIPTION: This function upserts a given message in the local channel state. It's important to note that this function doesn't call `channel.sendMessage`. The Channel component uses this function for optimistic updates to the message.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/messages_context.mdx#_snippet_4\n\nLANGUAGE: text\nCODE:\n```\n(message) => void\n```\n\n----------------------------------------\n\nTITLE: Running Android App (RN CLI)\nDESCRIPTION: This bash command runs the Android application using React Native CLI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/installation.mdx#_snippet_37\n\nLANGUAGE: Bash\nCODE:\n```\nyarn android\n```\n\n----------------------------------------\n\nTITLE: Generic Poll Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the GenericPollButton component from the stream-chat-react-native library.  It shows how to import the component and define a basic button with a title and an onPress handler. The onPress handler logs a message to the console when the button is pressed.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { GenericPollButton } from 'stream-chat-react-native';\n\nconst button = () => <GenericPollButton title='Button title' onPress={() => console.log('I got pressed !')} />;\n```\n\n----------------------------------------\n\nTITLE: Enable Editing State for a Message - React Native\nDESCRIPTION: This function enables the editing state for a given message. This is likely used to trigger UI changes, such as displaying an editing interface, to allow the user to modify the message content. It takes the message object as input.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/contexts/messages_context.mdx#_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nsetEditingState(message)\n```\n\n----------------------------------------\n\nTITLE: Install React Native Firebase modules\nDESCRIPTION: This snippet demonstrates how to install the necessary React Native Firebase modules for push notifications using yarn.  It installs the core app module and the messaging module, both required for Firebase integration.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/push-notifications-v1.mdx#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n# Install & setup the app module\nyarn add @react-native-firebase/app\n\n# Install the messaging module\nyarn add @react-native-firebase/messaging\n```\n\n----------------------------------------\n\nTITLE: Borderless Message Bubble - JSX\nDESCRIPTION: Demonstrates how to remove the border from the message bubble by setting the borderWidth to 0 in the theme object. This affects the container, containerInner, deletedContainerInner, and textContainer styles within `messageSimple -> content`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_customizations.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\nconst themeStyle = {\n  messageSimple: {\n    content: {\n      container: {\n        borderWidth: 0,\n      },\n      containerInner: {\n        borderWidth: 0,\n      },\n      deletedContainerInner: {\n        borderWidth: 0,\n      },\n      textContainer: {\n        borderWidth: 0,\n      },\n    },\n  },\n};\n\n<Chat style={themeStyle}>...</Chat>;\n```\n\n----------------------------------------\n\nTITLE: Modifying CooldownTimer Styles - React Native (JSX)\nDESCRIPTION: This snippet demonstrates how to customize the styles of the default CooldownTimer component using the ThemeProvider.  It modifies the container and text styles.  It requires the ThemeProvider to be available in the component hierarchy.  The style overrides are applied using the messageInput.cooldownTimer keys.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/guides/message_input_customization.mdx#_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n    <ThemeProvider style={{\n      {/* ... your other styles */}\n      messageInput: {\n        cooldownTimer: {\n          container: {\n            {/* ViewStyle values */}\n          },\n          text: {\n            {/* TextStyle values */}\n          }\n        }\n      }\n    }}>\n\n```\n\n----------------------------------------\n\nTITLE: Get Translators - Typescript\nDESCRIPTION: This code snippet illustrates how to retrieve the current translator functions (`t` and `tDateTimeParser`) using the asynchronous `getTranslators()` method. The `t` function is for general translations, and `tDateTimeParser` is likely for date/time formatting. Dependencies: Streami18n class.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst { t, tDateTimeParser } = await streami18n.getTranslators();\n```\n\n----------------------------------------\n\nTITLE: Connecting a User - Typescript\nDESCRIPTION: This code snippet demonstrates how to connect a user to the Stream Chat service. It uses the `connectUser` method, providing a user object (including id, name, and image) and a user token for authentication.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/hello_stream_chat.mdx#_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nawait client.connectUser(\n  {\n    id: 'jlahey',\n    name: 'Jim Lahey',\n    image: 'https://i.imgur.com/fR9Jz14.png',\n  },\n  'user_token',\n);\n```\n\n----------------------------------------\n\nTITLE: Defining Channel Member Record Type - TypeScript\nDESCRIPTION: Defines the TypeScript type for the record representing members of a channel. The record maps user IDs to objects containing information about each member, such as their ban status, role, and user object.  This type is returned when querying or watching a channel via the Stream Chat API.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/contexts/channel-context/members.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nRecord<\n  string, // userId\n  {\n    banned?: boolean;\n    created_at?: string;\n    invite_accepted_at?: string;\n    invite_rejected_at?: string;\n    invited?: boolean;\n    is_moderator?: boolean;\n    role?: string;\n    shadow_banned?: boolean;\n    updated_at?: string;\n    user?: UserResponse<UserType>;\n    user_id?: string;\n  }\n>;\n```\n\n----------------------------------------\n\nTITLE: Setting OverlayProvider topInset - TSX\nDESCRIPTION: This code illustrates how to set the `topInset` prop on the `OverlayProvider` component in Stream Chat for React Native.  This prop is used to adjust the initial height of the image picker gallery. Setting it to a number will adjust the starting height of the gallery when it opens.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\n<OverlayProvider topInset={/** number */}>{/* Inner component */}</OverlayProvider>\n```\n\n----------------------------------------\n\nTITLE: Channel Screen Component\nDESCRIPTION: This JSX component, `ChannelScreen`, renders the chat channel screen, including the message list and input components. It also incorporates the `LocationCard` and `InputButtons` components for location sharing functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/attachment_customizations.mdx#_snippet_15\n\nLANGUAGE: jsx\nCODE:\n```\nconst ChannelScreen = () => {\n  const { bottom } = useSafeAreaInsets();\n\n  return (\n    <ChatOverlayProvider bottomInset={bottom}>\n      <SafeAreaView>\n        <Chat client={chatClient}>\n          {/* Setting keyboardVerticalOffset as 0, since we don't have any header yet */}\n          <Channel channel={channel} keyboardVerticalOffset={0} Card={LocationCard} InputButtons={InputButtons}>\n            <View style={StyleSheet.absoluteFill}>\n              <MessageList />\n              <MessageInput />\n            </View>\n          </Channel>\n        </Chat>\n      </SafeAreaView>\n    </ChatOverlayProvider>\n  );\n};\n\n```\n\n----------------------------------------\n\nTITLE: Add Peer Dependencies using npm\nDESCRIPTION: This command adds various peer dependencies required by Stream Chat React Native to your project using npm. These dependencies provide features like blur effects, camera roll access, network information, file system access, and more.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/getting_started.mdx#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm add @react-native-community/blur @react-native-community/cameraroll @react-native-community/netinfo @stream-io/flat-list-mvcp react-native-document-picker react-native-fs react-native-gesture-handler react-native-haptic-feedback react-native-haptic-feedback react-native-image-crop-picker react-native-image-resizer react-native-reanimated react-native-safe-area-context react-native-share react-native-svg\n```\n\n----------------------------------------\n\nTITLE: Setting up React Navigation Stack\nDESCRIPTION: This code snippet sets up a React Navigation stack using `createNativeStackNavigator` to navigate between different screens in a Stream Chat React Native application. It defines a stack navigator with `ChannelScreen` as the initial route and also includes `WallpaperOverviewScreen`. The component is wrapped within `SafeAreaProvider` and `ThemeProvider` for consistent styling.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-channel-background.mdx#_snippet_5\n\nLANGUAGE: tsx\nCODE:\n```\nimport { createNativeStackNavigator } from 'react-native-screens/native-stack';\nimport { NavigationContainer } from '@react-navigation/native';\n\nconst Stack = createNativeStackNavigator();\n\nexport default () => {\n  return (\n    <SafeAreaProvider>\n      <ThemeProvider style={theme}>\n        <NavigationContainer>\n          <Stack.Navigator initialRouteName='Channel'>\n            <Stack.Screen component={ChannelScreen} name='Channel' options={noHeaderOptions} />\n            <Stack.Screen component={WallpaperOverviewScreen} name='WallpaperOverviewScreen' />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </ThemeProvider>\n    </SafeAreaProvider>\n  );\n};\n```\n\n----------------------------------------\n\nTITLE: Customizing ImageUploadPreview with Channel Component - TSX\nDESCRIPTION: This code snippet demonstrates how to override the default ImageUploadPreview component with a custom implementation using the `ImageUploadPreview` prop on the `Channel` component. It requires a custom component named `CustomImageUploadPreview` to be defined elsewhere. This allows for complete customization of the image preview UI.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/ui-components/image_upload_preview.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel ImageUploadPreview={CustomImageUploadPreview} />\n```\n\n----------------------------------------\n\nTITLE: Accessing and Overriding MessageStatus Prop in Channel Component (React Native)\nDESCRIPTION: This snippet showcases how the `MessageStatus` prop, passed to the `Channel` component, overrides the default `MessageStatusDefault` component. It's a crucial step in the process of UI customization, where custom components replace the SDK's default implementations.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/contexts.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nconst { ...MessageStatus } = props;\n```\n\n----------------------------------------\n\nTITLE: Wrapping with GestureHandlerRootView - React Native\nDESCRIPTION: This TypeScript snippet demonstrates how to wrap the component tree with `<GestureHandlerRootView>` or `gestureHandlerRootHOC` for React Native Gesture Handler.  This ensures that gestures are handled correctly within the application, especially for components like `Imagegallery`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_14\n\nLANGUAGE: tsx\nCODE:\n```\n<GestureHandlerRootView style={{ flex: 1 }}>\n  <OverlayProvider>{/* Other underlying components */}</OverlayProvider>\n</GestureHandlerRootView>\n```\n\n----------------------------------------\n\nTITLE: Configuring Deleted Message Visibility in Channel Component (TSX)\nDESCRIPTION: This code snippet shows how to use the `deletedMessagesVisibilityType` prop within the `Channel` component to control the visibility of deleted messages. Setting it to 'sender' will only show the deleted messages to the sender. Other possible values include 'receiver', 'none' and 'both'.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/custom-message.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  ...\n  deletedMessagesVisibilityType=\"sender\"\n>\n```\n\n----------------------------------------\n\nTITLE: Passing Streami18n instance to OverlayProvider and Chat\nDESCRIPTION: This code demonstrates how to pass a custom Streami18n instance to the `OverlayProvider` and `Chat` components.  It uses the `i18nInstance` prop to ensure all components use the custom translations and date/time formatting. It requires the `StreamChat`, `Chat`, `OverlayProvider`, and `Streami18n` components from `stream-chat-react-native`.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\nimport { Chat, OverlayProvider, Streami18n } from 'stream-chat-react-native';\n\nconst client = StreamChat.getInstance('api_key');\nconst streami18n = new Streami18n();\n\nexport const App = () => (\n  <OverlayProvider i18nInstance={streami18n}>\n    <Chat client={client} i18nInstance={streami18n}>\n      {/** App components */}\n    </Chat>\n  </OverlayProvider>\n);\n```\n\n----------------------------------------\n\nTITLE: Adding GIF and WebP Support - Android\nDESCRIPTION: This Java snippet shows how to add dependencies for GIF and WebP support to the `android/app/build.gradle` file.  It includes Fresco modules for animated GIFs, WebP, and animated WebP, as well as the Android support library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/troubleshooting.mdx#_snippet_11\n\nLANGUAGE: java\nCODE:\n```\ndependencies {\n  // For animated GIF support\n  implementation 'com.facebook.fresco:animated-gif:2.6.0'\n\n  // For WebP support, including animated WebP\n  implementation 'com.facebook.fresco:animated-webp:2.6.0'\n  implementation 'com.facebook.fresco:webpsupport:2.6.0'\n\n  // Provide the Android support library (you might already have this or a similar dependency)\n  implementation 'com.android.support:support-core-utils:24.2.1'\n  ...\n}\n```\n\n----------------------------------------\n\nTITLE: Hiding Date Separators and Sticky Header - TSX\nDESCRIPTION: This snippet demonstrates how to disable the sticky date header and inline date separators in the MessageList component, which can be computationally expensive. By setting the `hideDateSeparators` and `hideStickyDateHeader` props to `true` on the Channel component, performance can be improved in live-stream applications with a high message volume.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/guides/performance_guide.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel hideDateSeparators={true} hideStickyDateHeader={true} />\n```\n\n----------------------------------------\n\nTITLE: Handling Logout with Stream Chat React Native\nDESCRIPTION: This code snippet demonstrates the proper way to handle logout in a Stream Chat React Native application using QuickSqliteClient. It ensures that the local database is cleared and the user is disconnected from the chat client before setting the chat client to null to prevent corruption and potential crashes.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/guides/going-live-checklist.mdx#_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { QuickSqliteClient } from 'stream-chat-react-native';\n\nconst logout = async () => {\n  // Reset and clear the local database if offline storage was enabled.\n  QuickSqliteClient.resetDB();\n\n  // Disconnect the connected user for the chat client.\n  chatClient?.disconnectUser();\n\n  // Set the current chat client to null.\n  setChatClient(null);\n};\n```\n\n----------------------------------------\n\nTITLE: Using useCreateMessagesContext Hook with Custom Props in React Native\nDESCRIPTION: This snippet illustrates how a custom `MessageStatus` prop is passed into the `useCreateMessagesContext` hook.  This hook then utilizes `useMemo` internally.  This hook is responsible for providing the new context to the application and reducing unnecessary rerenders.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/customization/contexts.mdx#_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nconst messagesContext = useCreateMessagesContext({\n  ...MessageStatus,\n});\n```\n\n----------------------------------------\n\nTITLE: Consuming AttachmentPickerContext with useContext - TSX\nDESCRIPTION: This code snippet demonstrates how to consume the `AttachmentPickerContext` using the `useContext` hook from React. It imports the necessary modules and then accesses the `openPicker` and `closePicker` functions from the context.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/contexts/attachment_picker_context.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useContext } from 'react';\nimport { AttachmentPickerContext } from 'stream-chat-react-native';\n\nconst { openPicker, closePicker } = useContext(AttachmentPickerContext);\n```\n\n----------------------------------------\n\nTITLE: Query Channels with Filter - Stream Chat - Typescript\nDESCRIPTION: This code snippet demonstrates how to create a filter object to query channels where users 'vishal' or 'jaap' are members.  The filter object is passed to the Stream Chat client query function. For optimal performance, use a static or memoized filter object.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/core-components/channel-list/props/filters.mdx#_snippet_0\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst filter = {\n  type: 'messaging',\n  members: {\n    $in: ['vishal', 'jaap'],\n  },\n};\n```\n\n----------------------------------------\n\nTITLE: Add @op-engineering/op-sqlite dependency\nDESCRIPTION: This bash command adds the @op-engineering/op-sqlite dependency to your React Native project using yarn, followed by running npx pod-install to update native dependencies for iOS.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/basics/offline-support.mdx#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n  yarn add @op-engineering/op-sqlite\n  npx pod-install\n```\n\n----------------------------------------\n\nTITLE: Add Comment Button Usage in Stream Chat React Native\nDESCRIPTION: This snippet demonstrates how to use the AddCommentButton component from the stream-chat-react-native library.  It imports the AddCommentButton component and defines a button that, when pressed, logs the poll ID and message ID to the console. The onPress prop receives the message and poll objects.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-buttons.mdx#_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { AddCommentButton } from 'stream-chat-react-native';\n\nconst button = () => (\n  <AddCommentButton onPress={({ message, poll }) => console.log(`Poll ID: ${poll.id}; Message ID: ${message.id}`)} />\n);\n```\n\n----------------------------------------\n\nTITLE: Initializing Streami18n with default language\nDESCRIPTION: This code snippet demonstrates how to create an instance of the Streami18n class with the default English language. No dependencies are required beyond the `stream-chat-react-native` package.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/basics/translations.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nconst streami18n = new Streami18n();\n```\n\n----------------------------------------\n\nTITLE: Adding Reanimated Babel Plugin (JS)\nDESCRIPTION: This code snippet shows how to add the 'react-native-reanimated/plugin' to your babel.config.js file.  This is a required step for react-native-reanimated to function correctly.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/getting_started.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n    ...\n    plugins: [\n        ...\n        'react-native-reanimated/plugin',\n    ],\n};\n```\n\n----------------------------------------\n\nTITLE: Type Definition for UserResponse Record - Typescript\nDESCRIPTION: Defines the type structure for a record of user responses. The keys of the record are strings, and the values are of type UserResponse, parameterized by a UserType. This structure represents watchers of the current channel received from the backend.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-3.x.x/common-content/contexts/channel-context/watchers.mdx#_snippet_0\n\nLANGUAGE: tsx\nCODE:\n```\nRecord<\n  string, // string\n  UserResponse<UserType>\n>;\n```\n\n----------------------------------------\n\nTITLE: Setting Quoted Message State - React Native\nDESCRIPTION: This function enables the quoted-reply state on a given message. It receives a message object as input and prepares the UI to allow the user to reply to the given message via quote. It focuses on setting the state for creating a quoted reply.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nsetQuotedMessageState: (message) => void\n```\n\n----------------------------------------\n\nTITLE: Targeted Message ID - React Native\nDESCRIPTION: This prop holds the message ID of a message to be highlighted. The value is a string representing the message's ID.  By default, it is undefined, and it is reset to undefined when the highlight time expires.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ntargetedMessage: string\n```\n\n----------------------------------------\n\nTITLE: Overriding ScrollView Props in PollResults - stream-chat-react-native - JSX\nDESCRIPTION: This code snippet shows how to override the default ScrollView props of the PollResults component using the additionalScrollViewProps prop. This allows for customization of the ScrollView behavior, such as enabling bouncing.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/poll-results.mdx#_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nconst flatListProps = { bounces: true };\n\n<PollResults additionalFlatListProps={flatListProps} />;\n```\n\n----------------------------------------\n\nTITLE: onListScroll Event Shape in React Native\nDESCRIPTION: This shows the structure of the event object passed to the `onListScroll` callback function when the underlying FlatList scrolls. It includes information about content size, offset, layout measurement, and zoom scale.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/ui-components/message-list.mdx#_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{\n  nativeEvent: {\n    contentInset: {bottom, left, right, top},\n    contentOffset: {x, y},\n    contentSize: {height, width},\n    layoutMeasurement: {height, width},\n    zoomScale\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageText Component\nDESCRIPTION: This snippet renders the MessageText component, which is responsible for displaying the actual text content of a message. It's a React component within the Stream Chat React Native SDK and receives props forwarded from the parent Channel component to customize text formatting and styling.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_17\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageText />\n```\n\n----------------------------------------\n\nTITLE: Rendering MessageSimple Component\nDESCRIPTION: This snippet renders the MessageSimple component. It's probably used to display a basic or simplified version of a message. The component receives props from the Channel component to customize its appearance and functionality.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/docs/reactnative/contexts/messages-context.mdx#_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<MessageSimple />\n```\n\n----------------------------------------\n\nTITLE: Overriding Channel Capabilities (TSX)\nDESCRIPTION: This code snippet demonstrates how to override the default channel capabilities using the `overrideOwnCapabilities` prop on the `Channel` component. This allows you to selectively disable or enable certain features and UI elements based on user roles or application settings. Each capability can be set to `true` or `false` to enable or disable the corresponding feature. These overrides affect the UI and functionality exposed to the user.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-4.x.x/basics/upgrade_helper.mdx#_snippet_12\n\nLANGUAGE: tsx\nCODE:\n```\n<Channel\n  overrideOwnCapabilities={{\n    banChannelMembers: false, // hides \"Block User\" message action.\n    deleteAnyMessage: false, // hides \"Delete Message\" action for received message.\n    deleteOwnMessage: false, // hides \"Delete Message\" action for own message.\n    flagMessage: false, // hides \"Flag Message\" action.\n    pinMessage: false, // hides \"Pin Message\" action.\n    quoteMessage: false, // hides \"Reply\" action.\n    readEvents: false, // hides read receipts.\n    sendLinks: false, // disallows sending links with message.\n    sendMessage: false, // disallows sending a message.\n    sendReaction: false, // hides reaction selector in overlay.\n    sendReply: false, // hides \"Thread Reply\" message action.\n    sendTypingEvents: false, // disallows sending typing events\n    updateAnyMessage: false, // hides \"Edit Message\" action for received message.\n    updateOwnMessage: false, // hides \"Edit Message\" action for own message.\n    uploadFile: false, // hides attach button on message input.\n  }}\n/>\n```\n\n----------------------------------------\n\nTITLE: AppDelegate Universal Links Implementation (Objective-C++)\nDESCRIPTION: Implements universal links support in AppDelegate.mm for iOS using RCTLinkingManager.  This snippet enables the app to handle incoming user activities for universal linking functionality. It requires the React library.\nSOURCE: https://github.com/getstream/stream-chat-react-native/blob/develop/docusaurus/reactnative_versioned_docs/version-5.x.x/guides/deeplinking.mdx#_snippet_5\n\nLANGUAGE: objective-c++\nCODE:\n```\n- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity\n restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler\n{\n return [RCTLinkingManager application:application\n                  continueUserActivity:userActivity\n                    restorationHandler:restorationHandler];\n}\n```"
  }
]