[
  {
    "owner": "ooni",
    "repo": "oohttp",
    "content": "TITLE: Implementing Custom TLS Dialer with uTLS in Go\nDESCRIPTION: This code snippet demonstrates how to create a custom TLS dialer using refraction-networking/utls and integrate it with net/http. It overrides the DialTLSContext method to use uTLS for TLS connections.\nSOURCE: https://github.com/ooni/oohttp/blob/main/example/example-utls-with-dial/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"crypto/tls\"\n\t\"fmt\"\n\t\"io\"\n\t\"net\"\n\t\"net/http\"\n\n\ttls \"github.com/refraction-networking/utls\"\n)\n\nfunc main() {\n\tclient := &http.Client{\n\t\tTransport: &http.Transport{\n\t\t\tDialTLSContext: dialTLSContext,\n\t\t},\n\t}\n\tresp, err := client.Get(\"https://www.google.com\")\n\tif err != nil {\n\t\tfmt.Printf(\"error: %s\\n\", err.Error())\n\t\treturn\n\t}\n\tdefer resp.Body.Close()\n\tbody, err := io.ReadAll(resp.Body)\n\tif err != nil {\n\t\tfmt.Printf(\"error: %s\\n\", err.Error())\n\t\treturn\n\t}\n\tfmt.Printf(\"%d\\n\", len(body))\n}\n\nfunc dialTLSContext(ctx context.Context, network, addr string) (net.Conn, error) {\n\ttconn, err := tls.Dial(network, addr, nil)\n\tif err != nil {\n\t\treturn nil, err\n\t}\n\tuconn := tls.UClient(tconn, &tls.Config{ServerName: stripPort(addr)}, tls.HelloChrome_83)\n\tif err := uconn.Handshake(); err != nil {\n\t\treturn nil, err\n\t}\n\treturn uconn, nil\n}\n\nfunc stripPort(hostport string) string {\n\thost, _, err := net.SplitHostPort(hostport)\n\tif err != nil {\n\t\treturn hostport\n\t}\n\treturn host\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring oohttp.Transport with TLSClientFactory in Go\nDESCRIPTION: This code snippet sets up an oohttp.Transport instance with a SOCKS5 proxy and custom TLSClientFactory to use uTLS for proxied connections. It demonstrates how to configure the Transport.Proxy and Transport.TLSClientFactory fields.\nSOURCE: https://github.com/ooni/oohttp/blob/main/example/example-proxy/README.md#2025-04-12_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nmain.go\n```\n\n----------------------------------------\n\nTITLE: uTLS Factory Function for Creating Custom TLS Connections in Go\nDESCRIPTION: Factory function that creates a uTLS connection implementing the TLSConn interface. It configures uTLS with settings from a standard TLS config and specifies a Firefox TLS fingerprint.\nSOURCE: https://github.com/ooni/oohttp/blob/main/README.md#2025-04-12_snippet_4\n\nLANGUAGE: Go\nCODE:\n```\n// utlsFactory creates a new uTLS connection.\nfunc utlsFactory(conn net.Conn, config *tls.Config) oohttp.TLSConn {\n\tuConfig := &utls.Config{\n\t\tRootCAs:                     config.RootCAs,\n\t\tNextProtos:                  config.NextProtos,\n\t\tServerName:                  config.ServerName,\n\t\tInsecureSkipVerify:          config.InsecureSkipVerify,\n\t\tDynamicRecordSizingDisabled: config.DynamicRecordSizingDisabled,\n\t}\n\treturn &uconn{utls.UClient(conn, uConfig, utls.HelloFirefox_55)}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Transport with Custom TLS Factory in Go\nDESCRIPTION: Shows how to configure the oohttp Transport to use a custom TLS client factory. This enables the HTTP client to use alternative TLS implementations like uTLS for connections.\nSOURCE: https://github.com/ooni/oohttp/blob/main/README.md#2025-04-12_snippet_5\n\nLANGUAGE: Go\nCODE:\n```\ntxp := &oohttp.Transport{\n\t// ...\n\tTLSClientFactory: utlsFactory,\n}\n```\n\n----------------------------------------\n\nTITLE: uTLS Adapter Implementation for TLSConn Interface in Go\nDESCRIPTION: Example of an adapter that makes utls.UConn compatible with the TLSConn interface required by oohttp. This adapter maps uTLS connection state to standard TLS connection state and implements context-aware handshaking.\nSOURCE: https://github.com/ooni/oohttp/blob/main/README.md#2025-04-12_snippet_3\n\nLANGUAGE: Go\nCODE:\n```\n// uconn is an adapter from utls.UConn to TLSConn.\ntype uconn struct {\n\t*utls.UConn\n}\n\n// ConnectionState implements TLSConn's ConnectionState.\nfunc (c *uconn) ConnectionState() tls.ConnectionState {\n\tustate := c.UConn.ConnectionState()\n\treturn tls.ConnectionState{\n\t\tVersion:                     ustate.Version,\n\t\tHandshakeComplete:           ustate.HandshakeComplete,\n\t\t//\n\t\t// [...]\n\t\t//\n\t\t// You get the idea. You need to copy all fields. We\n\t\t// intentionally snip early here so we are not forced\n\t\t// to ensure this code is always up-to-date.\n\t}\n}\n\n// HandshakeContext implements TLSConn's HandshakeContext.\nfunc (c *uconn) HandshakeContext(ctx context.Context) error {\n\terrch := make(chan error, 1)\n\tgo func() {\n\t\terrch <- c.UConn.Handshake()\n\t}()\n\tselect {\n\tcase err := <-errch:\n\t\treturn err\n\tcase <-ctx.Done():\n\t\treturn ctx.Err()\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: StdlibTransport Adapter for net/http Compatibility in Go\nDESCRIPTION: An adapter that implements net/http.Transport interface but uses oohttp's Transport internally. This allows integration with code that depends on the standard library HTTP implementation.\nSOURCE: https://github.com/ooni/oohttp/blob/main/README.md#2025-04-12_snippet_2\n\nLANGUAGE: Go\nCODE:\n```\n// StdlibTransport is an adapter for integrating net/http dependend code.\n// It looks like an http.RoundTripper but uses this fork internally.\ntype StdlibTransport struct {\n\t*Transport\n}\n\n// RoundTrip implements the http.RoundTripper interface.\nfunc (txp *StdlibTransport) RoundTrip(stdReq *http.Request) (*http.Response, error) {\n\t// ...\n}\n```\n\n----------------------------------------\n\nTITLE: Importing the oohttp Package Instead of net/http in Go\nDESCRIPTION: Demonstrates how to replace the standard net/http import with the oohttp package in your codebase. This is the simplest approach when your code doesn't have dependencies assuming the standard library.\nSOURCE: https://github.com/ooni/oohttp/blob/main/README.md#2025-04-12_snippet_0\n\nLANGUAGE: Go\nCODE:\n```\nimport \"net/http\"\n```\n\nLANGUAGE: Go\nCODE:\n```\nimport \"github.com/ooni/oohttp\"\n```\n\n----------------------------------------\n\nTITLE: TLSConn Interface Definition in Go\nDESCRIPTION: Interface representing a TLS connection compatible with *tls.Conn. Custom TLS implementations must implement this interface to work with oohttp. It extends net.Conn with TLS-specific methods.\nSOURCE: https://github.com/ooni/oohttp/blob/main/README.md#2025-04-12_snippet_1\n\nLANGUAGE: Go\nCODE:\n```\n// TLSConn is the interface representing a *tls.Conn compatible\n// connection, which could possibly be different from a *tls.Conn\n// as long as it implements the interface. You can use, for\n// example, refraction-networking/utls instead of the stdlib.\ntype TLSConn interface {\n\t// net.Conn is the underlying interface\n\tnet.Conn\n\n\t// ConnectionState returns the ConnectionState according\n\t// to the standard library.\n\tConnectionState() tls.ConnectionState\n\n\t// HandshakeContext performs an TLS handshake bounded\n\t// in time by the given context.\n\tHandshakeContext(ctx context.Context) error\n\n\t// NetConn returns the underlying net.Conn\n\tNetConn() net.Conn\n}\n```"
  }
]