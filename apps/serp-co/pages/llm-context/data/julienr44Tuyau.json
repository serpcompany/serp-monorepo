[
  {
    "owner": "julien-r44",
    "repo": "tuyau",
    "content": "TITLE: Defining AdonisJS Controller and Route in TypeScript\nDESCRIPTION: This snippet shows the definition of an AdonisJS controller with a route for fetching posts. It includes input validation using VineJS and demonstrates how Tuyau can generate types from this structure.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/introduction.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { HttpContext } from '@adonisjs/http-server'\nimport { vine } from 'vinejs'\n\nexport const getPostsValidator = vine.compile(\n  vine.object({\n    page: vine.number().optional(),\n    limit: vine.number().optional(),\n  })\n)\n\nexport class PostsController {\n  public async index({ request }: HttpContext) {\n    const payload = await request.validateUsing(getPostsValidator)\n\n    return [\n      { id: 1, title: 'Hello World' },\n      { id: 2, title: 'Hello World 2' },\n    ]\n  }\n}\n\nrouter.get('/posts', [PostsController, 'index']).as('posts.index')\n```\n\n----------------------------------------\n\nTITLE: Implementing Type-Safe API Client in TypeScript\nDESCRIPTION: This snippet shows an improved version of the API client with added type safety. It defines interfaces for Post and GetPostsOptions, and uses these types in the API methods.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/introduction.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Post {\n  id: number\n  title: string\n}\n\ninterface GetPostsOptions {\n  page?: number\n  limit?: number\n}\n\nexport class MyAPI {\n  async getPosts(options: GetPostsOptions): Promise<Post[]> {\n    return fetch(\n      `/posts?page=${options.page}&limit=${options.limit}`\n    )\n  }\n\n  async getPost(id: number): Promise<Post> {\n    return fetch(`/posts/${id}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Tuyau Client for Typesafe API Consumption in TypeScript\nDESCRIPTION: This snippet demonstrates how to use the Tuyau client to consume an AdonisJS API with full type safety. It shows the creation of a Tuyau instance and examples of making API calls.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/introduction.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// In your frontend\nimport { createTuyau } from '@tuyau/client'\nimport { api } from '@your-monorepo/my-adonisjs-app/.adonisjs/api'\n\nexport const tuyau = createTuyau({\n  api,\n  baseUrl: 'http://localhost:3333',\n})\n\nconst posts = tuyau.posts.$get({ page: 1, limit: 10 })\nconst post = tuyau.posts({ id: 1 }).$get()\n```\n\n----------------------------------------\n\nTITLE: Handling Lucid Model Type Inference in Tuyau (TypeScript)\nDESCRIPTION: Addresses the issue of type inference when returning Lucid models in Tuyau. It presents two solutions: using type casting and implementing DTOs for better type safety and additional benefits.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\n// title: Casting\nclass UsersController {\n  async edit({ inertia, params }: HttpContext) {\n    const user = users.serialize() as {\n        id: number\n        name: string \n    }\n\n    return { user }\n  }\n}\n```\n\nLANGUAGE: typescript\nCODE:\n```\n// title: DTOs\nclass UserDto {\n  constructor(private user: User) {}\n\n  toJson() {\n    return {\n      id: this.user.id,\n      name: this.user.name\n    }\n  }\n}\n\nclass UsersController {\n  async edit({ inertia, params }: HttpContext) {\n    const user = await User.findOrFail(params.id)\n\n    return { user: new UserDto(user).toJson() }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Inferring Request and Response Types with Tuyau in TypeScript\nDESCRIPTION: This snippet demonstrates how to infer request, response, and error types for Tuyau API routes using TypeScript utility types.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { InferResponseType, InferErrorType, InferRequestType } from '@tuyau/client';\n\n// InferRequestType\ntype LoginRequest = InferRequestType<typeof tuyau.login.post>;\n\n// InferResponseType\ntype LoginResponse = InferResponseType<typeof tuyau.login.post>;\n\n// InferErrorType\ntype LoginError = InferErrorType<typeof tuyau.login.post>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Tuyau Client with Additional Options in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Tuyau client with additional configuration options, including custom headers, timeout, and request hooks for authentication.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tuyau = createTuyau({\n  api,\n  baseUrl: 'http://localhost:3333',\n  timeout: 10_000,\n  headers: { 'X-Custom-Header': 'foobar' },\n  hooks: {\n    beforeRequest: [\n      (request) => {\n        const token = getToken()\n        if (token) {\n          request.headers.set('Authorization', `Bearer ${token}`)\n        }\n      }\n    ]\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tuyau Client Instance with API Definition in TypeScript\nDESCRIPTION: This snippet demonstrates how to create a Tuyau client instance using the createTuyau function. It imports the API definition from the server and sets the base URL for the API.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { api } from '@your-monorepo/server/.adonisjs/api'\n\nexport const tuyau = createTuyau({\n  api,\n  baseUrl: 'http://localhost:3333',\n})\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Tuyau Client in TypeScript\nDESCRIPTION: This snippet shows various examples of making API requests using the Tuyau client, including GET, POST, and PUT requests with different parameter types.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tuyau } from './tuyau'\n\n// GET /users\nawait tuyau.users.$get()\n\n// POST /users { name: 'John Doe' }\nawait tuyau.users.$post({ name: 'John Doe' })\n\n// PUT /users/1 { name: 'John Doe' }\nawait tuyau.users({ id: 1 }).$put({ name: 'John Doe' })\n\n// GET /users/1/posts?limit=10&page=1\nawait tuyau.users.$get({ query: { page: 1, limit: 10 } })\n```\n\n----------------------------------------\n\nTITLE: Handling Responses and Error Checking with Tuyau in TypeScript\nDESCRIPTION: This snippet demonstrates how to handle responses and check for errors when making API requests with the Tuyau client, including type narrowing for response data.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nconst { data, error } = await tuyau.login.$post({ email: 'foo@ok.com', password: 'password' })\n\ndata\n// ^? { token: string } | null\n\nif (error?.status === 401) {\n  console.error('Wrong password !!')\n  return\n}\n\nconsole.log(data.token)\n//          ^? { token: string }\n// data.token will be available and unwrapped here\n```\n\n----------------------------------------\n\nTITLE: Unwrapping Tuyau Response in TypeScript\nDESCRIPTION: This snippet shows how to use the unwrap method to simplify error handling when making API requests with the Tuyau client.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nconst result = await tuyau.login.$post({ email: 'foo@ok.com' }).unwrap()\nconsole.log(result.token)\n```\n\n----------------------------------------\n\nTITLE: Making API Requests Using Route Names with Tuyau in TypeScript\nDESCRIPTION: This snippet demonstrates how to make API requests using route names instead of paths with the Tuyau client.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Backend\nrouter.get('/posts/:id/generate-invitation', '...')\n  .as('posts.generateInvitation')\n\n// Client\nawait tuyau\n  .$route('posts.generateInvitation', { id: 1 })\n  .$get({ query: { limit: 10, page: 1 } })\n```\n\n----------------------------------------\n\nTITLE: Generating URLs with Tuyau Client in TypeScript\nDESCRIPTION: This snippet shows how to generate URLs for API routes using the Tuyau client, including examples with path parameters and query strings.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nconst url = tuyau.users.$url()\nconsole.log(url) // http://localhost:3333/users\n\nconst url = tuyau.users({ id: 1 }).posts({ postId: 2 }).$url()\nconsole.log(url) // http://localhost:3333/users/1/posts/2\n\nconst url = tuyau.users.$url({ query: { page: 1, limit: 10 } })\nconsole.log(url) // http://localhost:3333/users?page=1&limit=10\n```\n\n----------------------------------------\n\nTITLE: Generated Tuyau API Type Definition in TypeScript\nDESCRIPTION: This snippet shows a simplified version of the type definition generated by Tuyau based on the AdonisJS route and controller. It defines the structure of the API, including input and output types for the 'posts' endpoint.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/introduction.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype Api = {\n  posts: {\n    $get: {\n      input: {\n        page?: number\n        limit?: number\n      }\n      output: {\n        id: number\n        title: string\n      }[]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating URLs from Route Names with Tuyau\nDESCRIPTION: Demonstrates how to generate URLs using route names and parameters with the $url method in Tuyau. The method supports various parameter formats and query parameters.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntuyau.$url('users.posts', { id: 1, postId: 2 }) // http://localhost:3333/users/1/posts/2\ntuyau.$url('venues.events.show', [1, 2]) // http://localhost:3333/venues/1/events/2\ntuyau.$url('users', { query: { page: 1, limit: 10 } }) // http://localhost:3333/users?page=1&limit=10\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuyau Client with TypeScript\nDESCRIPTION: Demonstrates how to initialize the Tuyau client in a frontend application. It imports the API type definitions and creates a Tuyau instance with the base URL and API configuration.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference path=\"../../adonisrc.ts\" />\n\nimport { createTuyau } from '@tuyau/client'\nimport type { api } from '@your-monorepo/server/.adonisjs/api'\n\nexport const tuyau = createTuyau({\n  api,\n  baseUrl: 'http://localhost:3333',\n})\n```\n\n----------------------------------------\n\nTITLE: Filtering Generated Routes in Tuyau (TypeScript)\nDESCRIPTION: Explains how to filter routes generated by Tuyau using the 'only' and 'except' options in the configuration file. It demonstrates filtering for both definitions and routes.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nexport default defineConfig({\n  codegen: {\n    definitions: {\n      only: [/users/],\n      // OR\n      except: [/users/]\n    },\n\n    routes: {\n      only: [/users/],\n      // OR\n      except: [/users/]\n    }\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Making Requests Using Route Names with Tuyau Client\nDESCRIPTION: Shows how to use named routes in Tuyau client instead of specifying full paths. This demonstrates using the $route method to reference a route by name and pass parameters.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// Backend\nrouter.get('/posts/:id/generate-invitation', '...').as('posts.generateInvitation')\n\n// Client\nawait tuyau.$route('posts.generateInvitation', { id: 1 }).$get({\n  query: { limit: 10, page: 1 },\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuyau Client with API Object\nDESCRIPTION: TypeScript code to create a Tuyau client instance with the imported API definition and base URL.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_7\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTuyau } from '@tuyau/client'\nimport { api } from '@your-monorepo/server/api'\n\nexport const tuyau = createTuyau({\n  api,\n  baseUrl: 'http://localhost:3333',\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Path Parameters in Tuyau API Requests in TypeScript\nDESCRIPTION: This snippet shows how to handle path parameters when making API requests with the Tuyau client, demonstrating nested route parameters.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Backend\nrouter.get('/users/:id/posts/:postId/comments/:commentId', '...')\n\n// Frontend\nconst result = await tuyau.users({ id: 1 })\n  .posts({ postId: 2 })\n  .comments({ commentId: 3 })\n  .$get()\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuyau Client with Type-Only API Definition\nDESCRIPTION: Alternative approach to initialize Tuyau client using only the API definition type without runtime code.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_8\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTuyau } from '@tuyau/client'\nimport type { ApiDefinition } from '@your-monorepo/server/api'\n\nexport const tuyau = createTuyau<{ definition: ApiDefinition }>({\n  baseUrl: 'http://localhost:3333',\n})\n```\n\n----------------------------------------\n\nTITLE: Passing Custom Headers and Query Parameters in Tuyau Requests\nDESCRIPTION: This snippet demonstrates how to pass custom headers and query parameters when making API requests with the Tuyau client.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nawait tuyau.users.$post({ name: 'John Doe' }, {\n  headers: {\n    'X-Custom-Header': 'foobar'\n  }\n})\n\nawait tuyau.users.$get({\n  headers: { 'X-Custom-Header': 'foobar' },\n  query: { page: 1, limit: 10 }\n})\n```\n\n----------------------------------------\n\nTITLE: Initializing Tuyau client in Next.js\nDESCRIPTION: TypeScript code to initialize the Tuyau client in the Next.js project, importing the API from the backend and setting the base URL.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/next-js.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\nimport { createTuyau } from '@tuyau/client'\nimport { api } from '@acme/server/api'\n\nexport const tuyau = createTuyau({\n  api,\n  baseUrl: 'http://localhost:3333',\n})\n```\n\n----------------------------------------\n\nTITLE: Generating URLs from Route Names with Tuyau in TypeScript\nDESCRIPTION: This snippet demonstrates how to generate URLs using route names with the Tuyau client, similar to the Ziggy library functionality.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\n// http://localhost:3333/users/1/posts/2\ntuyau.$url('users.posts', { id: 1, postId: 2 })\n\n// http://localhost:3333/venues/1/events/2\ntuyau.$url('venues.events.show', [1, 2])\n\n// http://localhost:3333/users?page=1&limit=10\ntuyau.$url('users', { query: { page: 1, limit: 10 } })\n```\n\n----------------------------------------\n\nTITLE: Using useRouter Hook with Vue in TypeScript\nDESCRIPTION: Example of using the useRouter hook in Vue to perform a type-safe navigation between routes. The hook exposes a visit method to manually navigate to a route with parameters and additional options.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/inertia/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useRouter } from '@tuyau/inertia/vue'\n\nconst router = useRouter()\n\nrouter.visit(\n  {\n    name: 'users.posts.show',\n    params: { id: 1, postId: 2 },\n  },\n  { preserveState: true },\n)\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Route Function with Tuyau in TypeScript\nDESCRIPTION: This snippet shows how to create a custom route function similar to Ziggy's route method using Tuyau's $url method.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tuyau = createTuyau({\n  api,\n  baseUrl: 'http://localhost:3333'\n})\n\nwindow.route = tuyau.$url.bind(tuyau)\n```\n\n----------------------------------------\n\nTITLE: Using Route Helper in React Components\nDESCRIPTION: Demonstrates how to use the route helper function in a React component to generate URLs for links, similar to how Laravel's Ziggy is used in frontend templates.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: tsx\nCODE:\n```\nexport function MyComponent() {\n  return (\n    <div>\n      <a href={route('users.posts', { id: 1, postId: 2 })}>Go to post</a>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Custom Route Function in React Component with TypeScript\nDESCRIPTION: This snippet demonstrates how to use the custom route function in a React component for generating URLs.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_14\n\nLANGUAGE: typescript\nCODE:\n```\nexport function MyComponent() {\n  return (\n    <div>\n      <a href={route('users.posts', { id: 1, postId: 2 })}>Go to post</a>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using Static-Defined Validators in Controllers with TypeScript\nDESCRIPTION: Demonstrates how to define a static validator property on a controller class. This allows validators to be defined at the class level rather than per method, which can then be referenced within controller methods.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport default class ListUsersController {\n  static validator = vine.compile(vine.object({ limit: vine.number() }))\n\n  async index() {\n    await request.validateUsing(ListUsersController.validator)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Ziggy-Compatible Route Helper with Tuyau\nDESCRIPTION: Shows how to create a global route function similar to Laravel's Ziggy package by binding Tuyau's $url method to the window object, allowing for more familiar route generation in frontend code.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const tuyau = createTuyau({\n  api,\n  baseUrl: 'http://localhost:3333',\n})\n\nwindow.route = tuyau.$url.bind(tuyau)\n```\n\n----------------------------------------\n\nTITLE: Checking Current Route in Tuyau (TypeScript)\nDESCRIPTION: Demonstrates how to use the $current method to check the current route in Tuyau. It shows examples of basic route checking, wildcard matching, and parameter verification.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\n// Current window location is http://localhost:3000/users/1/posts/2, route name is users.posts.show\ntuyau.$current() // users.posts\ntuyau.$current('users.posts.show') // true\ntuyau.$current('users.*') // true\ntuyau.$current('users.edit') // false\n```\n\nLANGUAGE: typescript\nCODE:\n```\ntuyau.$current('users.posts.show', { params: { id: 1, postId: 2 } }) // true\ntuyau.$current('users.posts.show', { params: { id: 12 } }) // false\ntuyau.$current('users.posts.show', { query: { page: 1 } }) // false\n```\n\n----------------------------------------\n\nTITLE: React Tuyau Link Component Usage\nDESCRIPTION: Example of using the type-safe Link component in React with Tuyau for route navigation.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/inertia.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@tuyau/inertia/react'\n\n<Link route=\"users.posts.show\" params={{ id: 1, postId: 2 }}>Go to post</Link>\n```\n\n----------------------------------------\n\nTITLE: Checking Route Existence in Tuyau (TypeScript)\nDESCRIPTION: Shows how to use the $has method to check if a route exists in Tuyau. It includes examples of exact matching and wildcard usage.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\ntuyau.$has('users') // true\ntuyau.$has('users.posts') // true\ntuyau.$has('users.*.comments') // true\ntuyau.$has('users.*') // true\ntuyau.$has('non-existent') // false\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in React\nDESCRIPTION: Example of using the type-safe Link component in React to create a navigation link to a named route with parameters. Similar to the Vue implementation, it provides type-safety for route navigation.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/inertia/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { Link } from '@tuyau/inertia'\n\nexport function MyComponent() {\n  return (\n    <Link route=\"posts.edit\" params={{ id: 2 }}>\n      Home\n    </Link>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Route Existence with Tuyau\nDESCRIPTION: Shows how to use the $has method to check if a route exists by name. The method supports wildcards in route names for more flexible route checking.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\ntuyau.$has('users') // true\ntuyau.$has('users.posts') // true\ntuyau.$has('users.*.comments') // true\ntuyau.$has('users.*') // true\ntuyau.$has('non-existent') // false\n```\n\n----------------------------------------\n\nTITLE: Using Link Component in Vue\nDESCRIPTION: Example of using the type-safe Link component in Vue to create a navigation link to a named route with parameters. This replaces the standard InertiaJS Link component with a more type-safe alternative.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/inertia/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Link } from '@tuyau/inertia'\n</script>\n\n<template>\n  <Link route=\"posts.edit\" :params=\"{ id: 2 }\">Home</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic API Client in TypeScript\nDESCRIPTION: This snippet demonstrates a basic implementation of an API client class without type safety. It includes methods for fetching posts and individual post details.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/introduction.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nexport class MyAPI {\n  async getPosts(options) {\n    return fetch(\n      `/posts?page=${options.page}&limit=${options.limit}`\n    )\n  }\n\n  async getPost(id: number) {\n    return fetch(`/posts/${id}`)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Tuyau Router Hook Usage\nDESCRIPTION: Demonstration of using the useRouter hook in Vue for programmatic navigation.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/inertia.md#2025-04-21_snippet_6\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { useRouter } from '@tuyau/inertia/vue'\n\nconst router = useRouter()\n</script>\n\n<template>\n  <button @click=\"router.visit('users.posts.show', { id: 1, postId: 2 })\">Go to post</button>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Configuring SuperJSON with Custom Transformers for Tuyau in TypeScript\nDESCRIPTION: This snippet configures SuperJSON with custom transformers for Date and BigInt types. It creates a new SuperJSON instance with these transformers and exports it for use in Tuyau applications.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/superjson/README.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport SuperJSON from 'superjson'\n\nconst superJson = SuperJSON.create({\n  allowedErrorProps: ['name', 'message', 'stack', 'cause'],\n})\n\nsuperJson.registerCustom<Date, string>(\n  {\n    isApplicable: (v): v is Date => v instanceof Date,\n    serialize: (v) => v.toJSON(),\n    deserialize: (v) => new Date(v),\n  },\n  'Date'\n)\n\nsuperJson.registerCustom<bigint, string>(\n  {\n    isApplicable: (v): v is bigint => typeof v === 'bigint',\n    serialize: (v) => v.toString(),\n    deserialize: (v) => BigInt(v),\n  },\n  'BigInt'\n)\n\nexport default superJson\n```\n\n----------------------------------------\n\nTITLE: Handling File Uploads with Tuyau Client in HTML and TypeScript\nDESCRIPTION: This snippet shows how to handle file uploads using the Tuyau client, including the HTML input and TypeScript code for sending the file.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n<input type=\"file\" id=\"file\" />\n```\n\nLANGUAGE: typescript\nCODE:\n```\nconst fileInput = document.getElementById('file') as HTMLInputElement\nconst file = fileInput.files[0]\n\nawait tuyau.users.$post({ avatar: file })\n```\n\n----------------------------------------\n\nTITLE: Configuring SuperJSON plugin in Tuyau frontend\nDESCRIPTION: TypeScript code to include the SuperJSON plugin when initializing Tuyau in the frontend application.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/superjson.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { superjson } from '@tuyau/superjson/plugin'\n\nexport const tuyau = createTuyau({\n  api,\n  baseUrl: `http://localhost:3333`,\n  plugins: [superjson()],\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Tuyau Client with ApiDefinition Type in TypeScript\nDESCRIPTION: This snippet shows how to create a Tuyau client instance using only the ApiDefinition type, without the runtime API object. This approach is useful when route names are not needed in the frontend.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/client.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { createTuyau } from '@tuyau/client'\nimport type { ApiDefinition } from '@your-monorepo/server/.adonisjs/api'\n\nexport const tuyau = createTuyau<{ definition: ApiDefinition }>({\n  baseUrl: 'http://localhost:3333',\n})\n```\n\n----------------------------------------\n\nTITLE: Generating Tuyau API Types\nDESCRIPTION: Command to generate TypeScript types for the Tuyau client from AdonisJS routes and controllers.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnode ace tuyau:generate\n```\n\n----------------------------------------\n\nTITLE: Generating Tuyau types with SuperJSON support\nDESCRIPTION: Command to regenerate Tuyau types after installing SuperJSON plugin in the Adonis project.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/superjson.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode ace generate:tuyau\n```\n\n----------------------------------------\n\nTITLE: Importing API Definition in Frontend\nDESCRIPTION: TypeScript code to import the API definition from the server package in the frontend.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: ts\nCODE:\n```\nimport { api } from '@acme/server/api'\n```\n\n----------------------------------------\n\nTITLE: Configuring Server Package.json for API Export\nDESCRIPTION: JSON configuration in server package.json to export the API definition using subpath exports.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: jsonc\nCODE:\n```\n// package.json\n{\n  \"name\": \"@acme/server\",\n  \"type\": \"module\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"exports\": {\n    \"./api\": \"./.adonisjs/index.ts\"\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Inline Exported Validators in Controllers with TypeScript\nDESCRIPTION: Shows how to define a validator directly in the controller file as an exported constant, which can then be used within controller methods using validateUsing.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/core/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nexport const myValidator = vine.compile(\n  vine.object({\n    id: vine.number(),\n  }),\n)\n\nexport default class MyController {\n  public async handle({ request }: HttpContext) {\n    const payload = await request.validateUsing(myValidator)\n    // ...\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Specification with Route Macros\nDESCRIPTION: Example of using the openapi macro on routes to add metadata like summaries and tags to the generated OpenAPI specification.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/openapi.md#2025-04-21_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nrouter.group(() => {\n  router\n    .get(\"/random\", [MiscController, \"index\"])\n    .openapi({ summary: \"Get a random thing\" });\n\n  router\n    .get(\"/random/:id\", [MiscController, \"show\"])\n    .openapi({ summary: \"Get a random thing by id\" });\n})\n  .prefix(\"/misc\")\n  .openapi({ tags: [\"misc\"] });\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Global Documentation Settings\nDESCRIPTION: Configuration for customizing global OpenAPI settings in the tuyau.ts config file, including API title, version, and tags.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/openapi.md#2025-04-21_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nconst tuyauConfig = defineConfig({\n  openapi: {\n    documentation: {\n      info: { title: 'My API!', version: '1.0.0', description: 'My super API' },\n      tags: [\n        { name: 'subscriptions', description: 'Operations about subscriptions' },\n      ],\n    },\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Excluding Paths from OpenAPI Specification\nDESCRIPTION: Configuration to exclude specific paths or path patterns from being included in the generated OpenAPI specification.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/openapi.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nconst tuyauConfig = defineConfig({\n  openapi: {\n    exclude: ['/health', /admin/]\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Customizing OpenAPI Endpoints\nDESCRIPTION: Configuration to customize the URLs where the OpenAPI specification and UI documentation will be accessible.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/openapi.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst tuyauConfig = defineConfig({\n  openapi: {\n    endpoints: {\n      spec: '/my-super-spec',\n      ui: '/my-super-doc'\n    }\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring pnpm workspace\nDESCRIPTION: YAML configuration for pnpm workspace, specifying the location of the project's apps.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/next-js.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# pnpm-workspace.yaml\npackages:\n    - apps/*\n```\n\n----------------------------------------\n\nTITLE: Defining Route Details in TypeScript\nDESCRIPTION: This snippet demonstrates how to add details to routes using the 'detail' macro in a TypeScript router configuration. It shows setting descriptions for individual routes and adding tags to a group of routes.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/packages/openapi/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nrouter\n  .group(() => {\n    router.get('/random', [MiscController, 'index']).detail({ description: 'Get a random thing' })\n    router\n      .get('/random/:id', [MiscController, 'show'])\n      .detail({ description: 'Get a random thing by id' })\n  })\n  .prefix('/misc')\n  .detail({ tags: ['misc'] })\n```\n\n----------------------------------------\n\nTITLE: React Tuyau Provider Setup\nDESCRIPTION: Configuration for wrapping a React Inertia app with TuyauProvider component to enable route type safety.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/inertia.md#2025-04-21_snippet_1\n\nLANGUAGE: tsx\nCODE:\n```\n// inertia/app/app.tsx\nimport { TuyauProvider } from '@tuyau/inertia/react'\nimport { tuyau } from './tuyau'\n\ncreateInertiaApp({\n  // ...\n\n  setup({ el, App, props }) {\n    hydrateRoot(\n      el,\n      <>\n        <TuyauProvider client={tuyau}>\n          <App {...props} />\n        </TuyauProvider>\n      </>\n    )\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Installing @tuyau/openapi Package in AdonisJS\nDESCRIPTION: Command to add the @tuyau/openapi package to an existing AdonisJS project with Tuyau core.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/openapi.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ace add @tuyau/openapi\n```\n\n----------------------------------------\n\nTITLE: React Tuyau Router Hook Usage\nDESCRIPTION: Demonstration of using the useRouter hook in React for programmatic navigation.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/inertia.md#2025-04-21_snippet_3\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useRouter } from '@tuyau/inertia/react'\n\nconst router = useRouter()\n\nrouter.visit('users.posts.show', { id: 1, postId: 2 })\n```\n\n----------------------------------------\n\nTITLE: Installing SuperJSON plugin for Tuyau in frontend\nDESCRIPTION: Command to install the SuperJSON plugin in the frontend project using pnpm.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/superjson.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @tuyau/superjson\n```\n\n----------------------------------------\n\nTITLE: Vue Tuyau Plugin Setup\nDESCRIPTION: Configuration for installing the Tuyau plugin in a Vue Inertia application.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/inertia.md#2025-04-21_snippet_4\n\nLANGUAGE: ts\nCODE:\n```\n// inertia/app/app.ts\n\nimport { TuyauPlugin } from '@tuyau/inertia/vue'\nimport { tuyau } from './tuyau'\n\ncreateInertiaApp({\n  // ...\n\n  setup({ el, App, props, plugin }) {\n    createSSRApp({ render: () => h(App, props) })\n      .use(plugin)\n      .use(TuyauPlugin, { client: tuyau })\n      .mount(el)\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Frontend Package.json with Server Dependency\nDESCRIPTION: JSON configuration in frontend package.json to include the server workspace as a dependency.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: jsonc\nCODE:\n```\n// package.json\n{\n  \"name\": \"@acme/frontend\",\n  \"type\": \"module\",\n  \"version\": \"0.0.0\",\n  \"private\": true,\n  \"dependencies\": {\n    \"@acme/server\": \"workspace:*\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Vue Tuyau Link Component Usage\nDESCRIPTION: Example of using the type-safe Link component in Vue with Tuyau for route navigation.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/inertia.md#2025-04-21_snippet_5\n\nLANGUAGE: vue\nCODE:\n```\n<script setup lang=\"ts\">\nimport { Link } from '@tuyau/inertia/vue'\n</script>\n\n<template>\n  <Link route=\"users.posts.show\" :params=\"{ id: 1, postId: 2 }\">Go to post</Link>\n</template>\n```\n\n----------------------------------------\n\nTITLE: Creating Next.js project\nDESCRIPTION: Command to create a new Next.js project with TypeScript within the apps directory of the monorepo.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/next-js.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\npnpx create-next-app@latest frontend --typescript\n```\n\n----------------------------------------\n\nTITLE: Creating AdonisJS project\nDESCRIPTION: Command to create a new AdonisJS project within the apps directory of the monorepo.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/next-js.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npnpm create adonisjs@latest backend\n```\n\n----------------------------------------\n\nTITLE: Initializing pnpm project\nDESCRIPTION: Command to initialize a new pnpm project in the root directory of the monorepo.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/next-js.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npnpm init\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for monorepo\nDESCRIPTION: Next.js configuration to enable transpilation of backend packages and resolve TypeScript file extensions.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/next-js.md#2025-04-21_snippet_5\n\nLANGUAGE: ts\nCODE:\n```\n// next.config.ts\nimport type { NextConfig } from 'next';\n\nconst nextConfig: NextConfig = {\n  reactStrictMode: true,\n  transpilePackages: ['@acme/backend'],\n  webpack: (config) => {\n    config.resolve.extensionAlias = {\n      '.js': ['.ts', '.tsx', '.js', '.jsx'],\n      '.mjs': ['.mts', '.mjs'],\n      '.cjs': ['.cts', '.cjs'],\n    };\n    return config;\n  },\n};\n\nexport default nextConfig;\n```\n\n----------------------------------------\n\nTITLE: Adding typecheck script to package.json\nDESCRIPTION: Script addition to package.json for running TypeScript type checking without emitting files.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/next-js.md#2025-04-21_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n// package.json\n{\n  \"scripts\": {\n    \"typecheck\": \"tsc --noEmit\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling TypeScript decorators\nDESCRIPTION: TypeScript configuration to enable experimental decorators, which are required for AdonisJS.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/next-js.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n// tsconfig.json\n{\n  \"compilerOptions\": {\n    \"experimentalDecorators\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tuyau Core in AdonisJS Project\nDESCRIPTION: Command to install the Tuyau core package in an AdonisJS project using the Ace CLI.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ace add @tuyau/core\n```\n\n----------------------------------------\n\nTITLE: Installing Tuyau Client in Frontend Project\nDESCRIPTION: Command to install the Tuyau client package in a frontend project using pnpm.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @tuyau/client\n```\n\n----------------------------------------\n\nTITLE: Monorepo Directory Structure Example\nDESCRIPTION: Example showing a typical monorepo structure with frontend and server applications.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\napps\n  frontend\n  server\n```\n\n----------------------------------------\n\nTITLE: Configuring Website Settings in JSON\nDESCRIPTION: Shows the structure of the website configuration file. It includes settings for links, file edit base URL, copyright information, and optional configurations for menu items and Algolia search integration.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"links\": {\n    \"home\": {\n      \"title\": \"Your project name\",\n      \"href\": \"/\"\n    },\n    \"github\": {\n      \"title\": \"Your project on Github\",\n      \"href\": \"https://github.com/dimerapp\"\n    }\n  },\n  \"fileEditBaseUrl\": \"https://github.com/dimerapp/docs-boilerplate/blob/develop\",\n  \"copyright\": \"Your project legal name\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"menu\": [\n    {\n      \"href\": \"/docs/introduction\",\n      \"title\": \"Docs\"\n    },\n    {\n      \"href\": \"https://blog.project.com\",\n      \"title\": \"Blog\"\n    },\n    {\n      \"href\": \"https://github.com/project/releases\",\n      \"title\": \"Releases\"\n    }\n  ]\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"search\": {\n    \"appId\": \"\",\n    \"indexName\": \"\",\n    \"apiKey\": \"\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing SuperJSON plugin for Tuyau in backend\nDESCRIPTION: Command to add the SuperJSON plugin to the Tuyau backend project using Adonis CLI.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/superjson.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode ace add @tuyau/superjson\n```\n\n----------------------------------------\n\nTITLE: Installing Tuyau Inertia Package\nDESCRIPTION: Command to install the Tuyau Inertia package using pnpm package manager.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/content/docs/inertia.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @tuyau/inertia\n```\n\n----------------------------------------\n\nTITLE: Installing Documentation Boilerplate using Degit in Shell\nDESCRIPTION: Demonstrates how to clone the documentation boilerplate repository using degit, a tool for downloading repositories without git history. It also shows the commands to navigate to the project directory and install dependencies.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx degit dimerapp/docs-boilerplate <my-website>\n```\n\nLANGUAGE: sh\nCODE:\n```\ncd <my-website>\nnpm i\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Folder Structure in Markdown\nDESCRIPTION: Shows the folder structure of the documentation boilerplate project using a markdown code block. This structure includes directories for assets, bin, content, src, templates, and vscode_grammars.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```\n.\n├── assets\n│  ├── app.css\n│  └── app.js\n├── bin\n│  ├── build.ts\n│  └── serve.ts\n├── content\n│  ├── docs\n│  └── config.json\n├── src\n│  ├── bootstrap.ts\n│  └── collections.ts\n├── templates\n│  ├── elements\n│  ├── layouts\n│  ├── partials\n│  └── docs.edge\n├── vscode_grammars\n│  ├── dotenv.tmLanguage.json\n│  └── main.ts\n├── package-lock.json\n├── package.json\n├── README.md\n├── tsconfig.json\n└── vite.config.js\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Entry for Documentation in JSON\nDESCRIPTION: Illustrates the structure of a typical database entry for documentation content. It includes properties for permalink, title, content path, and category, which are used to organize and display the documentation.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"permalink\": \"introduction\",\n  \"title\": \"Introduction\",\n  \"contentPath\": \"./introduction.md\",\n  \"category\": \"Guides\"\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Collections for Documentation in TypeScript\nDESCRIPTION: Demonstrates how to create multiple collections for different sections of documentation using the Collection class. It shows configuration for both a 'docs' collection and an 'API reference' collection.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// Docs\nconst docs = new Collection()\n  .db(new URL('../content/docs/db.json', import.meta.url))\n  .useRenderer(renderer)\n  .urlPrefix('/docs')\n\nawait docs.boot()\n\n// API reference\nconst apiReference = new Collection()\n  .db(new URL('../content/api_reference/db.json', import.meta.url))\n  .useRenderer(renderer)\n  .urlPrefix('/api')\n\nawait apiReference.boot()\n\nexport const collections = [docs, apiReference]\n```\n\n----------------------------------------\n\nTITLE: Customizing Theme Switcher in Edge Template\nDESCRIPTION: This code shows how to create a custom theme switcher button in the header component using Edge template syntax. It uses conditional rendering to display different text based on the current theme.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_7\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('themeSwitcher')\n    <span x-if=\"store.darkMode.enabled\"> Dark </span>\n    <span x-if=\"!store.darkMode.enabled\"> Light </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Customizing GitHub Link in Edge Template\nDESCRIPTION: This snippet illustrates how to customize the GitHub link in the header component using Edge template syntax. It allows for adding custom text or information to the GitHub link.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_8\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('github')\n    <span> Github (11K+ Stars) </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Customizing Popup Menu Trigger in Edge Template\nDESCRIPTION: This snippet demonstrates how to define custom markup for the popup menu trigger in the header component using Edge template syntax. The custom trigger is displayed only in mobile view.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_6\n\nLANGUAGE: edge\nCODE:\n```\n@component('docs::header', contentConfig)\n  @slots('popMenu')\n    <span> Open popup menu </span>\n  @end\n@end\n```\n\n----------------------------------------\n\nTITLE: Configuring Markdown Code Block Theme in TypeScript\nDESCRIPTION: Shows how to set the theme for code blocks in markdown using the Renderer instance. This example sets the theme to 'material-theme-palenight'.\nSOURCE: https://github.com/julien-r44/tuyau/blob/main/docs/README.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport const renderer = new Renderer(view, pipeline)\n  .codeBlocksTheme('material-theme-palenight')\n```"
  }
]