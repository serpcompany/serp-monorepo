[
  {
    "owner": "openai",
    "repo": "openai-java",
    "content": "TITLE: Generating Text Using OpenAI Chat Completions API in Java\nDESCRIPTION: Shows how to use the OpenAI Chat Completions API to generate text from a model. It configures the client using environment variables and creates a chat completion using specified parameters.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_3\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.ChatModel;\nimport com.openai.models.chat.completions.ChatCompletion;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\n\n// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID`, `OPENAI_PROJECT_ID` and `OPENAI_BASE_URL` environment variables\nOpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\nChatCompletionCreateParams params = ChatCompletionCreateParams.builder()\n    .addUserMessage(\"Say this is a test\")\n    .model(ChatModel.GPT_4_1)\n    .build();\nChatCompletion chatCompletion = client.chat().completions().create(params);\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Java SDK with Gradle\nDESCRIPTION: Shows how to add the OpenAI Java SDK dependency to a Gradle project.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_0\n\nLANGUAGE: kotlin\nCODE:\n```\nimplementation(\"com.openai:openai-java:1.4.1\")\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAI Java SDK with Maven\nDESCRIPTION: Demonstrates how to add the OpenAI Java SDK dependency to a Maven project using XML configuration.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>com.openai</groupId>\n  <artifactId>openai-java</artifactId>\n  <version>1.4.1</version>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client Using Environment Variables in Java\nDESCRIPTION: Demonstrates how to configure the OpenAI client using environment variables for API key, organization ID, project ID, and base URL.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_4\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\n\n// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID`, `OPENAI_PROJECT_ID` and `OPENAI_BASE_URL` environment variables\nOpenAIClient client = OpenAIOkHttpClient.fromEnv();\n```\n\n----------------------------------------\n\nTITLE: Manually Configuring OpenAI Client in Java\nDESCRIPTION: Shows how to manually configure the OpenAI client by providing the API key directly in the code.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_5\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\n\nOpenAIClient client = OpenAIOkHttpClient.builder()\n    .apiKey(\"My API Key\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Creating Asynchronous OpenAI Client in Java\nDESCRIPTION: Shows how to create an asynchronous OpenAI client from the beginning, using environment variables for configuration. It demonstrates creating an asynchronous chat completion.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_8\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClientAsync;\nimport com.openai.client.okhttp.OpenAIOkHttpClientAsync;\nimport com.openai.models.ChatModel;\nimport com.openai.models.chat.completions.ChatCompletion;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\nimport java.util.concurrent.CompletableFuture;\n\n// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID`, `OPENAI_PROJECT_ID` and `OPENAI_BASE_URL` environment variables\nOpenAIClientAsync client = OpenAIOkHttpClientAsync.fromEnv();\n\nChatCompletionCreateParams params = ChatCompletionCreateParams.builder()\n    .addUserMessage(\"Say this is a test\")\n    .model(ChatModel.GPT_4_1)\n    .build();\nCompletableFuture<ChatCompletion> chatCompletion = client.chat().completions().create(params);\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Execution of OpenAI API Requests in Java\nDESCRIPTION: Demonstrates how to use the asynchronous client to execute OpenAI API requests. It configures the client using environment variables and creates an asynchronous chat completion.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_7\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.ChatModel;\nimport com.openai.models.chat.completions.ChatCompletion;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\nimport java.util.concurrent.CompletableFuture;\n\n// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID`, `OPENAI_PROJECT_ID` and `OPENAI_BASE_URL` environment variables\nOpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\nChatCompletionCreateParams params = ChatCompletionCreateParams.builder()\n    .addUserMessage(\"Say this is a test\")\n    .model(ChatModel.GPT_4_1)\n    .build();\nCompletableFuture<ChatCompletion> chatCompletion = client.async().chat().completions().create(params);\n```\n\n----------------------------------------\n\nTITLE: Processing Synchronous Streaming Responses with OpenAI Java SDK\nDESCRIPTION: Demonstrates how to handle streaming responses using the synchronous client with StreamResponse. The code processes ChatCompletionChunks as they arrive instead of waiting for the full response.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_9\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.http.StreamResponse;\nimport com.openai.models.chat.completions.ChatCompletionChunk;\n\ntry (StreamResponse<ChatCompletionChunk> streamResponse = client.chat().completions().createStreaming(params)) {\n    streamResponse.stream().forEach(chunk -> {\n        System.out.println(chunk);\n    });\n    System.out.println(\"No more chunks!\");\n}\n```\n\n----------------------------------------\n\nTITLE: Processing Asynchronous Streaming Responses with OpenAI Java SDK\nDESCRIPTION: Shows how to handle streaming responses with the asynchronous client using AsyncStreamResponse. The example includes multiple implementation options including simple subscription, error handling, and future-based completion handling.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_10\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.http.AsyncStreamResponse;\nimport com.openai.models.chat.completions.ChatCompletionChunk;\nimport java.util.Optional;\n\nclient.async().chat().completions().createStreaming(params).subscribe(chunk -> {\n    System.out.println(chunk);\n});\n\n// If you need to handle errors or completion of the stream\nclient.async().chat().completions().createStreaming(params).subscribe(new AsyncStreamResponse.Handler<>() {\n    @Override\n    public void onNext(ChatCompletionChunk chunk) {\n        System.out.println(chunk);\n    }\n\n    @Override\n    public void onComplete(Optional<Throwable> error) {\n        if (error.isPresent()) {\n            System.out.println(\"Something went wrong!\");\n            throw new RuntimeException(error.get());\n        } else {\n            System.out.println(\"No more chunks!\");\n        }\n    }\n});\n\n// Or use futures\nclient.async().chat().completions().createStreaming(params)\n    .subscribe(chunk -> {\n        System.out.println(chunk);\n    })\n    .onCompleteFuture();\n    .whenComplete((unused, error) -> {\n        if (error != null) {\n            System.out.println(\"Something went wrong!\");\n            throw new RuntimeException(error);\n        } else {\n            System.out.println(\"No more chunks!\");\n        }\n    });\n```\n\n----------------------------------------\n\nTITLE: Using ChatCompletionAccumulator with Synchronous Streaming in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to use ChatCompletionAccumulator to record and accumulate streaming chunks into a complete ChatCompletion object. This helper makes it easier to work with streaming responses while preserving the full response structure.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_13\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.http.StreamResponse;\nimport com.openai.helpers.ChatCompletionAccumulator;\nimport com.openai.models.chat.completions.ChatCompletion;\nimport com.openai.models.chat.completions.ChatCompletionChunk;\n\nChatCompletionAccumulator chatCompletionAccumulator = ChatCompletionAccumulator.create();\n\ntry (StreamResponse<ChatCompletionChunk> streamResponse =\n        client.chat().completions().createStreaming(createParams)) {\n    streamResponse.stream()\n            .peek(chatCompletionAccumulator::accumulate)\n            .flatMap(completion -> completion.choices().stream())\n            .flatMap(choice -> choice.delta().content().stream())\n            .forEach(System.out::print);\n}\n\nChatCompletion chatCompletion = chatCompletionAccumulator.chatCompletion();\n```\n\n----------------------------------------\n\nTITLE: Using ChatCompletionAccumulator with Asynchronous Streaming in OpenAI Java SDK\nDESCRIPTION: Shows how to use ChatCompletionAccumulator with asynchronous streaming responses to build a complete ChatCompletion object from streamed chunks while also displaying content as it arrives.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_14\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.helpers.ChatCompletionAccumulator;\nimport com.openai.models.chat.completions.ChatCompletion;\n\nChatCompletionAccumulator chatCompletionAccumulator = ChatCompletionAccumulator.create();\n\nclient.chat()\n        .completions()\n        .createStreaming(createParams)\n        .subscribe(chunk -> chatCompletionAccumulator.accumulate(chunk).choices().stream()\n                .flatMap(choice -> choice.delta().content().stream())\n                .forEach(System.out::print))\n        .onCompleteFuture()\n        .join();\n\nChatCompletion chatCompletion = chatCompletionAccumulator.chatCompletion();\n```\n\n----------------------------------------\n\nTITLE: Configuring Microsoft Azure with OpenAI Java SDK\nDESCRIPTION: Demonstrates how to configure the OpenAI Java client to work with Azure OpenAI, using Azure Entra ID for authentication. This allows using the same SDK for both OpenAI and Azure OpenAI services.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_28\n\nLANGUAGE: java\nCODE:\n```\nOpenAIClient client = OpenAIOkHttpClient.builder()\n        // Gets the API key and endpoint from the `AZURE_OPENAI_KEY` and `OPENAI_BASE_URL` environment variables, respectively\n        .fromEnv()\n        // Set the Azure Entra ID\n        .credential(BearerTokenCredential.create(AuthenticationUtil.getBearerTokenSupplier(\n                new DefaultAzureCredentialBuilder().build(), \"https://cognitiveservices.azure.com/.default\")))\n        .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries in OpenAI Java SDK\nDESCRIPTION: Shows how to customize the number of retry attempts for API calls. By default, the SDK retries 2 times with exponential backoff for specific error types like connection errors and rate limits.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_29\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\n\nOpenAIClient client = OpenAIOkHttpClient.builder()\n    .fromEnv()\n    .maxRetries(4)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Synchronous Auto-Pagination in OpenAI Java SDK\nDESCRIPTION: Shows how to iterate through all results across multiple pages using the autoPager() method, which automatically handles fetching additional pages. Includes examples of using both Iterable and Stream approaches.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_25\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.finetuning.jobs.FineTuningJob;\nimport com.openai.models.finetuning.jobs.JobListPage;\n\n// As an Iterable:\nJobListPage page = client.fineTuning().jobs().list(params);\nfor (FineTuningJob job : page.autoPager()) {\n    System.out.println(job);\n};\n\n// As a Stream:\nclient.fineTuning().jobs().list(params).autoPager().stream()\n    .limit(50)\n    .forEach(job -> System.out.println(job));\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Auto-Pagination in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to use auto-pagination with asynchronous clients, allowing for non-blocking iteration through all results across multiple pages.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_26\n\nLANGUAGE: java\nCODE:\n```\n// Using forEach, which returns CompletableFuture<Void>:\nasyncClient.fineTuning().jobs().list(params).autoPager()\n    .forEach(job -> System.out.println(job), executor);\n```\n\n----------------------------------------\n\nTITLE: Manual Pagination in OpenAI Java SDK\nDESCRIPTION: Shows how to manually implement pagination when auto-pagination doesn't meet specific needs. This approach gives more control over the pagination process by explicitly fetching pages one by one.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_27\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.finetuning.jobs.FineTuningJob;\nimport com.openai.models.finetuning.jobs.JobListPage;\n\nJobListPage page = client.fineTuning().jobs().list(params);\nwhile (page != null) {\n    for (FineTuningJob job : page.data()) {\n        System.out.println(job);\n    }\n\n    page = page.getNextPage().orElse(null);\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using Path in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to upload a file to the OpenAI API using a file path. This example uses the java.nio.file.Path interface to specify a file for upload with a fine-tune purpose.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_15\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.files.FileCreateParams;\nimport com.openai.models.files.FileObject;\nimport com.openai.models.files.FilePurpose;\nimport java.nio.file.Paths;\n\nFileCreateParams params = FileCreateParams.builder()\n    .purpose(FilePurpose.FINE_TUNE)\n    .file(Paths.get(\"input.jsonl\"))\n    .build();\nFileObject fileObject = client.files().create(params);\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using InputStream in OpenAI Java SDK\nDESCRIPTION: Shows how to upload a file to the OpenAI API using an InputStream. This approach allows uploading files from arbitrary sources like URLs without saving them to disk first.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_16\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.files.FileCreateParams;\nimport com.openai.models.files.FileObject;\nimport com.openai.models.files.FilePurpose;\nimport java.net.URL;\n\nFileCreateParams params = FileCreateParams.builder()\n    .purpose(FilePurpose.FINE_TUNE)\n    .file(new URL(\"https://example.com/input.jsonl\").openStream())\n    .build();\nFileObject fileObject = client.files().create(params);\n```\n\n----------------------------------------\n\nTITLE: Uploading Files Using Byte Array in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to upload file content as a byte array to the OpenAI API. This approach is useful for small files or when the content is already available in memory.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_17\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.files.FileCreateParams;\nimport com.openai.models.files.FileObject;\nimport com.openai.models.files.FilePurpose;\n\nFileCreateParams params = FileCreateParams.builder()\n    .purpose(FilePurpose.FINE_TUNE)\n    .file(\"content\".getBytes())\n    .build();\nFileObject fileObject = client.files().create(params);\n```\n\n----------------------------------------\n\nTITLE: Uploading Files with Custom Filename Using MultipartField in OpenAI Java SDK\nDESCRIPTION: Shows how to upload a file with a custom filename using MultipartField. This is useful when the filename cannot be automatically determined, such as when uploading from an InputStream or URL.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_18\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.MultipartField;\nimport com.openai.models.files.FileCreateParams;\nimport com.openai.models.files.FileObject;\nimport com.openai.models.files.FilePurpose;\nimport java.io.InputStream;\nimport java.net.URL;\n\nFileCreateParams params = FileCreateParams.builder()\n    .purpose(FilePurpose.FINE_TUNE)\n    .file(MultipartField.<InputStream>builder()\n        .value(new URL(\"https://example.com/input.jsonl\").openStream())\n        .filename(\"input.jsonl\")\n        .build())\n    .build();\nFileObject fileObject = client.files().create(params);\n```\n\n----------------------------------------\n\nTITLE: Handling Binary Responses in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to retrieve binary content from the OpenAI API. This example shows getting file content using the HttpResponse interface which is used for non-JSON API responses.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_19\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.http.HttpResponse;\nimport com.openai.models.files.FileContentParams;\n\nFileContentParams params = FileContentParams.builder()\n    .fileId(\"file_id\")\n    .build();\nHttpResponse response = client.files().content(params);\n```\n\n----------------------------------------\n\nTITLE: Saving Binary Response Content to File in OpenAI Java SDK\nDESCRIPTION: Shows how to save binary response content to a file using Files.copy. This example demonstrates proper resource handling with try-with-resources to ensure the response is properly closed.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_20\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardCopyOption;\n\ntry (HttpResponse response = client.files().content(params)) {\n    Files.copy(\n        response.body(),\n        Paths.get(path),\n        StandardCopyOption.REPLACE_EXISTING\n    );\n} catch (Exception e) {\n    System.out.println(\"Something went wrong!\");\n    throw new RuntimeException(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Transferring Binary Response to Output Stream in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to transfer binary response content to any OutputStream. This example shows how to use the transferTo method to efficiently copy the response data to another stream like a file output stream.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_21\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.http.HttpResponse;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\n\ntry (HttpResponse response = client.files().content(params)) {\n    response.body().transferTo(Files.newOutputStream(Paths.get(path)));\n} catch (Exception e) {\n    System.out.println(\"Something went wrong!\");\n    throw new RuntimeException(e);\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Client-Level Timeouts in OpenAI Java SDK\nDESCRIPTION: Shows how to configure a default timeout duration for all API requests made through the client. This provides a global timeout setting that applies to all method calls.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_31\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport java.time.Duration;\n\nOpenAIClient client = OpenAIOkHttpClient.builder()\n    .fromEnv()\n    .timeout(Duration.ofSeconds(30))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Request-Level Timeouts in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to set a custom timeout duration for a specific API request. This overrides the default 10-minute timeout only for that particular method call.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_30\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.ChatModel;\nimport com.openai.models.chat.completions.ChatCompletion;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\n\nChatCompletion chatCompletion = client.chat().completions().create(\n  params, RequestOptions.builder().timeout(Duration.ofSeconds(30)).build()\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Proxy for OpenAI Java Client\nDESCRIPTION: This snippet demonstrates how to configure the OpenAI Java client to route requests through a proxy using the `proxy` method. It sets up an HTTP proxy with a specified host and port.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_32\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport java.net.InetSocketAddress;\nimport java.net.Proxy;\n\nOpenAIClient client = OpenAIOkHttpClient.builder()\n    .fromEnv()\n    .proxy(new Proxy(\n      Proxy.Type.HTTP, new InetSocketAddress(\n        \"https://example.com\", 8080\n      )\n    ))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw HTTP Responses in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to access raw HTTP response data (status code, headers) by using the withRawResponse() method before making API calls. This allows developers to get additional metadata about the API response.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_22\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.http.Headers;\nimport com.openai.core.http.HttpResponseFor;\nimport com.openai.models.ChatModel;\nimport com.openai.models.chat.completions.ChatCompletion;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\n\nChatCompletionCreateParams params = ChatCompletionCreateParams.builder()\n    .addUserMessage(\"Say this is a test\")\n    .model(ChatModel.GPT_4_1)\n    .build();\nHttpResponseFor<ChatCompletion> chatCompletion = client.chat().completions().withRawResponse().create(params);\n\nint statusCode = chatCompletion.statusCode();\nHeaders headers = chatCompletion.headers();\n```\n\n----------------------------------------\n\nTITLE: Parsing Raw Responses in OpenAI Java SDK\nDESCRIPTION: Shows how to deserialize a raw HTTP response into a Java class instance using the parse() method after obtaining a raw response.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_23\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.chat.completions.ChatCompletion;\n\nChatCompletion parsedChatCompletion = chatCompletion.parse();\n```\n\n----------------------------------------\n\nTITLE: Accessing Request IDs in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to extract the x-request-id header from API responses, which is useful for debugging and reporting issues to OpenAI support.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_24\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.http.HttpResponseFor;\nimport com.openai.models.chat.completions.ChatCompletion;\nimport java.util.Optional;\n\nHttpResponseFor<ChatCompletion> chatCompletion = client.chat().completions().withRawResponse().create(params);\nOptional<String> requestId = chatCompletion.requestId();\n```\n\n----------------------------------------\n\nTITLE: Validating Chat Completion Response in OpenAI Java SDK\nDESCRIPTION: Shows how to validate a chat completion response using the validate() method to ensure type safety.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_40\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.chat.completions.ChatCompletion;\n\nChatCompletion chatCompletion = client.chat().completions().create(params).validate();\n```\n\n----------------------------------------\n\nTITLE: Configuring Response Validation per Request in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to enable response validation for a specific API request using RequestOptions builder.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_41\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.models.ChatModel;\nimport com.openai.models.chat.completions.ChatCompletion;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\n\nChatCompletion chatCompletion = client.chat().completions().create(\n  params, RequestOptions.builder().responseValidation(true).build()\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Default Response Validation in OpenAI Java Client\nDESCRIPTION: Shows how to configure response validation globally for all API calls at the client level.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_42\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\n\nOpenAIClient client = OpenAIOkHttpClient.builder()\n    .fromEnv()\n    .responseValidation(true)\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Executors for Asynchronous Streaming in OpenAI Java SDK\nDESCRIPTION: Demonstrates how to configure custom thread pools for handling asynchronous streaming responses. Provides examples for per-subscription executor configuration and global client-level configuration.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_11\n\nLANGUAGE: java\nCODE:\n```\nimport java.util.concurrent.Executor;\nimport java.util.concurrent.Executors;\n\nExecutor executor = Executors.newFixedThreadPool(4);\nclient.async().chat().completions().createStreaming(params).subscribe(\n    chunk -> System.out.println(chunk), executor\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Executor for Streaming in OpenAI Java SDK Client\nDESCRIPTION: Shows how to configure a global executor for all streaming operations when building the OpenAI client. This sets the stream handler executor for all streaming operations performed by the client instance.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_12\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport java.util.concurrent.Executors;\n\nOpenAIClient client = OpenAIOkHttpClient.builder()\n    .fromEnv()\n    .streamHandlerExecutor(Executors.newFixedThreadPool(4))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Undocumented Parameters in OpenAI Java SDK\nDESCRIPTION: This code shows how to set undocumented parameters in the OpenAI Java SDK using the `putAdditionalHeader`, `putAdditionalQueryParam`, and `putAdditionalBodyProperty` methods on a `Params` class.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_33\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.JsonValue;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\n\nChatCompletionCreateParams params = ChatCompletionCreateParams.builder()\n    .putAdditionalHeader(\"Secret-Header\", \"42\")\n    .putAdditionalQueryParam(\"secret_query_param\", \"42\")\n    .putAdditionalBodyProperty(\"secretProperty\", JsonValue.from(\"42\"))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Setting Undocumented Nested Parameters in OpenAI Java SDK\nDESCRIPTION: This snippet illustrates how to set undocumented parameters on nested headers, query params, or body classes using the `putAdditionalProperty` method on the nested class.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_34\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.JsonValue;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\n\nChatCompletionCreateParams params = ChatCompletionCreateParams.builder()\n    .responseFormat(ChatCompletionCreateParams.ResponseFormat.builder()\n        .putAdditionalProperty(\"secretProperty\", JsonValue.from(\"42\"))\n        .build())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Using JsonValue for Undocumented Parameter Values in OpenAI Java SDK\nDESCRIPTION: This code demonstrates how to set a documented parameter to an undocumented or not yet supported value using a `JsonValue` object in the OpenAI Java SDK.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_35\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.JsonValue;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\n\nChatCompletionCreateParams params = ChatCompletionCreateParams.builder()\n    .addUserMessage(\"Say this is a test\")\n    .model(JsonValue.from(42))\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Creating Various JsonValue Objects in OpenAI Java SDK\nDESCRIPTION: This snippet shows different ways to create `JsonValue` objects for various JSON data types, including primitives, arrays, and nested objects, using the `from(...)` method in the OpenAI Java SDK.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_36\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.JsonValue;\nimport java.util.List;\nimport java.util.Map;\n\n// Create primitive JSON values\nJsonValue nullValue = JsonValue.from(null);\nJsonValue booleanValue = JsonValue.from(true);\nJsonValue numberValue = JsonValue.from(42);\nJsonValue stringValue = JsonValue.from(\"Hello World!\");\n\n// Create a JSON array value equivalent to `[\"Hello\", \"World\"]`\nJsonValue arrayValue = JsonValue.from(List.of(\n  \"Hello\", \"World\"\n));\n\n// Create a JSON object value equivalent to `{ \"a\": 1, \"b\": 2 }`\nJsonValue objectValue = JsonValue.from(Map.of(\n  \"a\", 1,\n  \"b\", 2\n));\n\n// Create an arbitrarily nested JSON equivalent to:\n// {\n//   \"a\": [1, 2],\n//   \"b\": [3, 4]\n// }\nJsonValue complexValue = JsonValue.from(Map.of(\n  \"a\", List.of(\n    1, 2\n  ),\n  \"b\", List.of(\n    3, 4\n  )\n));\n```\n\n----------------------------------------\n\nTITLE: Forcibly Omitting Required Parameters in OpenAI Java SDK\nDESCRIPTION: This code shows how to forcibly omit a required parameter or property by passing `JsonMissing` to the builder in the OpenAI Java SDK.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_37\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.JsonMissing;\nimport com.openai.models.ChatModel;\nimport com.openai.models.chat.completions.ChatCompletionCreateParams;\n\nChatCompletionCreateParams params = ChatCompletionCreateParams.builder()\n    .model(ChatModel.GPT_4_1)\n    .messages(JsonMissing.of())\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Accessing Undocumented Response Properties in OpenAI Java SDK\nDESCRIPTION: This snippet demonstrates how to access undocumented response properties using the `_additionalProperties()` method and how to handle different JSON value types using a visitor pattern in the OpenAI Java SDK.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_38\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.JsonValue;\nimport java.util.Map;\n\nMap<String, JsonValue> additionalProperties = client.chat().completions().create(params)._additionalProperties();\nJsonValue secretPropertyValue = additionalProperties.get(\"secretProperty\");\n\nString result = secretPropertyValue.accept(new JsonValue.Visitor<>() {\n    @Override\n    public String visitNull() {\n        return \"It's null!\";\n    }\n\n    @Override\n    public String visitBoolean(boolean value) {\n        return \"It's a boolean!\";\n    }\n\n    @Override\n    public String visitNumber(Number value) {\n        return \"It's a number!\";\n    }\n\n    // Other methods include `visitMissing`, `visitString`, `visitArray`, and `visitObject`\n    // The default implementation of each unimplemented method delegates to `visitDefault`, which throws by default, but can also be overridden\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Raw JSON Values of Properties in OpenAI Java SDK\nDESCRIPTION: This code shows how to access the raw JSON value of a property, which may be undocumented, using its `_` prefixed method in the OpenAI Java SDK. It demonstrates checking for missing or null values and deserializing into custom types.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_39\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.core.JsonField;\nimport com.openai.models.chat.completions.ChatCompletionMessageParam;\nimport java.util.Optional;\n\nJsonField<List<ChatCompletionMessageParam>> messages = client.chat().completions().create(params)._messages();\n\nif (messages.isMissing()) {\n  // The property is absent from the JSON response\n} else if (messages.isNull()) {\n  // The property was set to literal null\n} else {\n  // Check if value was provided as a string\n  // Other methods include `asNumber()`, `asBoolean()`, etc.\n  Optional<String> jsonString = messages.asString();\n\n  // Try to deserialize into a custom type\n  MyClass myObject = messages.asUnknown().orElseThrow().convert(MyClass.class);\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Text Using OpenAI Responses API in Java\nDESCRIPTION: Illustrates how to use the OpenAI Responses API to generate text from a model. It configures the client using environment variables and creates a response using specified parameters.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\nimport com.openai.models.ChatModel;\nimport com.openai.models.responses.Response;\nimport com.openai.models.responses.ResponseCreateParams;\n\n// Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID` and `OPENAI_PROJECT_ID` environment variables\nOpenAIClient client = OpenAIOkHttpClient.fromEnv();\n\nResponseCreateParams params = ResponseCreateParams.builder()\n        .input(\"Say this is a test\")\n        .model(ChatModel.GPT_4_1)\n        .build();\nResponse response = client.responses().create(params);\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Client with Environment Variables and Manual Settings in Java\nDESCRIPTION: Illustrates how to configure the OpenAI client using a combination of environment variables and manual settings, overriding the API key.\nSOURCE: https://github.com/openai/openai-java/blob/main/README.md#2025-04-18_snippet_6\n\nLANGUAGE: java\nCODE:\n```\nimport com.openai.client.OpenAIClient;\nimport com.openai.client.okhttp.OpenAIOkHttpClient;\n\nOpenAIClient client = OpenAIOkHttpClient.builder()\n    // Configures using the `OPENAI_API_KEY`, `OPENAI_ORG_ID`, `OPENAI_PROJECT_ID` and `OPENAI_BASE_URL` environment variables\n    .fromEnv()\n    .apiKey(\"My API Key\")\n    .build();\n```\n\n----------------------------------------\n\nTITLE: Escaped HTML Entity in SDK Code\nDESCRIPTION: Code reference showing an escaped HTML entity in a type parameter, indicating use of Optional generic types in the Java SDK.\nSOURCE: https://github.com/openai/openai-java/blob/main/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nOptional&lt;T&gt;\n```\n\n----------------------------------------\n\nTITLE: Bug Fix for CompletableFuture Type\nDESCRIPTION: Code change to switch CompletableFuture<Void> to CompletableFuture<Void?> for better null handling\nSOURCE: https://github.com/openai/openai-java/blob/main/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: Java\nCODE:\n```\nCompletableFuture<Void?>\n```"
  }
]