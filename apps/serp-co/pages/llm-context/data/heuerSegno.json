[
  {
    "owner": "heuer",
    "repo": "segno",
    "content": "TITLE: Basic QR Code Generation in Python using Segno\nDESCRIPTION: Simple example showing how to create a QR code and save it as a PNG file using Segno. This demonstrates the basic API for generating a QR code with automatic version and error level selection.\nSOURCE: https://github.com/heuer/segno/blob/master/README.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport segno\nqrcode = segno.make('Yellow Submarine')\nqrcode.save('yellow-submarine.png')\n```\n\n----------------------------------------\n\nTITLE: Creating WIFI Configuration QR Code - Python Segno\nDESCRIPTION: Demonstrates how to create a QR code for WIFI network configuration using Segno's make_wifi helper function. Creates a QR code with minimum error level 'L' or better, encoding network SSID, password, and security type.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/special-qrcode-factories.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from segno import helpers\n>>> # Create a WIFI config with min. error level \"L\" or better\n>>> qrcode = helpers.make_wifi(ssid='My network', password='secret', security='WPA')\n>>> qrcode.designator\n'3-M'\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code Data URI with Flask (Python)\nDESCRIPTION: Creates a QR code in a Flask view and passes it to a template for rendering as a data URI. This allows embedding the QR code directly in HTML without a separate image file.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom flask import Flask, render_template\nimport segno\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    qrcode = segno.make('The Continuing Story of Bungalow Bill')\n    return render_template('example.html', qrcode=qrcode)\n```\n\n----------------------------------------\n\nTITLE: Creating and Saving QR Codes in Multiple Formats with Segno\nDESCRIPTION: Demonstrates how to create a QR code and save it in various output formats including SVG, PNG, EPS, and text. The same QR code can be rendered in multiple formats without recreating it.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Henry Lee')\n>>> qrcode.save('henry-lee.svg')  # SVG document\n>>> qrcode.save('henry-lee.png')  # PNG image\n>>> qrcode.save('henry-lee.eps')  # EPS document\n>>> qrcode.save('henry-lee.txt')  # Text output\n```\n\n----------------------------------------\n\nTITLE: Using Specialized Factory Functions for QR and Micro QR Codes\nDESCRIPTION: Demonstrates the use of specialized factory functions make_micro() and make_qr() to explicitly create Micro QR Codes or standard QR Codes, respectively.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> micro_qrcode = segno.make_micro('The Beatles')  # Micro QR Code\n>>> micro_qrcode.designator  # Get the version and error level\n'M4-M'\n```\n\n----------------------------------------\n\nTITLE: Adding a Logo to a QR Code with Pillow\nDESCRIPTION: A complete example of how to add a logo to the center of a QR code. The script generates a QR code with Segno, loads a logo image, resizes it appropriately, and positions it in the center of the QR code before saving the combined image.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/pillow-qrcodes.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport io\nfrom PIL import Image\nimport segno\n\nout = io.BytesIO()\n# Nothing special here, let Segno generate the QR code and save it as PNG in a buffer\nsegno.make('Blackbird singing in the dead of night', error='h').save(out, scale=5, kind='png')\nout.seek(0)  # Important to let Pillow load the PNG\nimg = Image.open(out)\nimg = img.convert('RGB')  # Ensure colors for the output\nimg_width, img_height = img.size\nlogo_max_size = img_height // 3  # May use a fixed value as well\nlogo_img = Image.open('./blackbird.jpg')  # The logo\n# Resize the logo to logo_max_size\nlogo_img.thumbnail((logo_max_size, logo_max_size), Image.Resampling.LANCZOS)\n# Calculate the center of the QR code\nbox = ((img_width - logo_img.size[0]) // 2, (img_height - logo_img.size[1]) // 2)\nimg.paste(logo_img, box)\nimg.save('qrcode_with_logo.png')\n```\n\n----------------------------------------\n\nTITLE: Creating Animated QR Code with Background Image (Python)\nDESCRIPTION: Demonstrates how to create an animated QR code with a background GIF image using Segno's 'to_artistic' method.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('The Beatles -- Albums', error='h')\n>>> qrcode.to_artistic(background='src/albums.gif', target='albums.gif', scale=8)\n```\n\n----------------------------------------\n\nTITLE: Generating Numeric Mode QR Codes with Segno in Python\nDESCRIPTION: Demonstrates how to create QR codes using numeric mode in Segno. Shows automatic mode detection for string and integer inputs, resulting in Micro QR codes by default.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('64')\n>>> qrcode2 = segno.make(64)\n>>> qrcode.designator\n'M1'\n>>> qrcode2.designator\n'M1'\n>>> qrcode.mode\n'numeric'\n>>> qrcode2.mode\n'numeric'\n>>> qrcode == qrcode2\nTrue\n```\n\n----------------------------------------\n\nTITLE: Dynamic QR Code Generation in Flask View (Python)\nDESCRIPTION: Creates a Flask view that generates QR codes dynamically based on URL parameters. It uses `send_file` to deliver the QR code as a PNG image with custom styling.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nBEATLES_SONGS = {'Yellow Submarine', 'Let It Be', 'Rocky Raccoon'}\n\n@app.route('/qr-png/')\ndef qrcode_png():\n    data = request.args.get('data')\n    # Check if the data is acceptable otherwise a 404 error is generated\n    if data not in BEATLES_SONGS:\n        return abort(404)\n    buff = io.BytesIO()\n    segno.make(data, micro=False) \\\n         .save(buff, kind='png', scale=4, dark='darkblue',\n               data_dark='#474747', light='#efefef')\n    buff.seek(0)\n    return send_file(buff, mimetype='image/png')\n```\n\n----------------------------------------\n\nTITLE: Creating WIFI Configuration String - Python Segno\nDESCRIPTION: Shows how to generate a WIFI configuration string and create a custom QR code with specific error correction level. Uses make_wifi_data to generate the configuration string and segno.make for QR code creation with 'H' error correction.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/special-qrcode-factories.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> from segno import helpers\n>>> config = helpers.make_wifi_data(ssid='My network', password='secret', security='WPA')\n>>> config\n'WIFI:T:WPA;S:My network;P:secret;;'\n>>> # Create a QR Code with error correction level \"H\"\n>>> qrcode = segno.make(config, error='h')\n>>> qrcode.designator\n'4-H'\n```\n\n----------------------------------------\n\nTITLE: Printing a QR Code to Terminal with Segno\nDESCRIPTION: Basic example of using Segno to generate a QR code and display it in the terminal. This creates a 2-Q QR code (version 2 with error correction level Q) for the text 'Up jumped the devil'.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/man/segno.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ segno \"Up jumped the devil\"\n```\n\n----------------------------------------\n\nTITLE: Generating Colorful QR Code with Custom Colors in Python using Segno\nDESCRIPTION: This snippet demonstrates how to create a QR code with custom colors for different module types using Segno. It generates a version 7 QR code with high error correction, using dark red for standard modules, dark orange for data modules, and yellow for light data modules.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/colorful-qrcodes.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Yellow Submarine', version=7, error='h')\n>>> qrcode.save('qrcode_yellow-submarine.png', scale=4, dark='darkred',\n...             data_dark='darkorange', data_light='yellow')\n```\n\n----------------------------------------\n\nTITLE: Creating Rotated QR Code Image with Segno and Pillow (Python)\nDESCRIPTION: Demonstrates how to create a QR code, convert it to a Pillow Image, rotate it, and save it as a PNG file. Uses the 'to_pil' method provided by the qrcode-artistic plugin.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Yellow Submarine', error='h')\n>>> img = qrcode.to_pil(scale=3).rotate(45, expand=True)\n>>> img.save('yellow-submarine-rotated.png')\n```\n\n----------------------------------------\n\nTITLE: Creating MeCard QR Codes with Segno Helpers\nDESCRIPTION: This snippet demonstrates how to create QR codes containing contact information in MeCard format using Segno's helper functions. It shows how to set single values and multiple values for fields like email, phone, and URL.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/contact-information.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from segno import helpers\n>>> qrcode = helpers.make_mecard(name='Doe,John', email='me@example.org', phone='+1234567')\n>>> qrcode.designator\n'3-L'\n>>> # Some params accept multiple values, like email, phone, url\n>>> qrcode = helpers.make_mecard(name='Doe,John',\n...                              email=('me@example.org', 'another@example.org'),\n...                              url=['http://www.example.org', 'https://example.org/~joe'])\n>>> qrcode.save('my-mecard.svg', scale=4)\n```\n\n----------------------------------------\n\nTITLE: Creating vCard QR Codes with Segno Helpers\nDESCRIPTION: This snippet demonstrates how to create QR codes containing contact information in vCard 3.0 format using Segno's helper functions. It shows how to set single values and multiple values for fields like email, phone, and URL.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/contact-information.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from segno import helpers\n>>> qrcode = helpers.make_vcard(name='Doe;John', displayname='John Doe',\n...                             email='me@example.org', phone='+1234567')\n>>> qrcode.designator\n'5-L'\n>>> # Some params accept multiple values, like email, phone, url\n>>> qrcode = helpers.make_vcard(name='Doe;John', displayname='John Doe',\n...                             email=('me@example.org', 'another@example.org'),\n...                             url=['http://www.example.org', 'https://example.org/~joe'])\n>>> qrcode.save('my-vcard.svg', scale=4)\n```\n\n----------------------------------------\n\nTITLE: Generating JPEG QR Code for Django ImageField (Python)\nDESCRIPTION: Illustrates how to create a QR code as a JPEG image using the qrcode-artistic plugin and Pillow, for use with Django's ImageField.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport segno\n\nqrcode = segno.make('JULIA')\n# img is a Pillow Image instance\nimg = qrcode.to_pil(dark='#00008b', scale=3)\n# Now use Pillow Image.save() to save the QR code\nout = io.BytesIO()\nimg.save(out, format='jpg')\n\n# ...\n\nticket.qrcode.save('JULIA.jpg', ContentFile(out.getvalue()), save=False)\n```\n\n----------------------------------------\n\nTITLE: Saving QR Codes to Files with Segno CLI\nDESCRIPTION: Examples of using the --output or -o parameter to save QR codes to files in various formats including PNG and SVG, rather than displaying them in the terminal.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --output=white-room.png \"White Room\"\n```\n\n----------------------------------------\n\nTITLE: Creating Basic QR Codes with Segno CLI\nDESCRIPTION: Demonstrates how to output a QR code to the terminal using the segno command line tool. This creates a standard QR code with default settings for the text 'Little wing'.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ segno \"Little wing\"\n```\n\n----------------------------------------\n\nTITLE: Creating Static QR Code with Background Image (Python)\nDESCRIPTION: Demonstrates how to create a static QR code with a background JPEG image using Segno's 'to_artistic' method.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('The Beatles -- Let It Be', error='h')\n>>> qrcode.to_artistic(background='src/letitbe.jpg', target='letitbe.jpg', scale=5)\n```\n\n----------------------------------------\n\nTITLE: Creating Basic EPC QR Code with Segno\nDESCRIPTION: Demonstrates creating an EPC QR code for a payment to Wikimedia with fixed amount and payment details. Uses default minimal encoding and saves the QR code as a PNG file with scale factor 3.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/epc-qrcodes.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> from segno import helpers\n>>> qrcode = helpers.make_epc_qr(name='Wikimedia Foerdergesellschaft',\n...                              iban='DE33100205000001194700',\n...                              amount=20, text='Spende fuer Wikipedia')\n>>> qrcode.save('spende-wikipedia.png', scale=3)\n```\n\n----------------------------------------\n\nTITLE: Generating Basic SVG QR Code with Segno in Python\nDESCRIPTION: Creates a QR code with the text 'Penny Lane' and error correction level 'h', then saves it as an SVG file with a scale factor of 4. This generates a standard SVG with XML declaration, namespace, and default styling.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Penny Lane', error='h')\n>>> qrcode.save('penny-lane.svg', scale=4)\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code with Background Image from URL (Python)\nDESCRIPTION: Demonstrates how to create a QR code with a background image specified by a URL using urlopen and Segno's 'to_artistic' method.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> from urllib.request import urlopen\n>>> import segno\n>>> qrcode = segno.make('Ringo Starr', error='h')\n>>> url = 'https://media.giphy.com/media/HNo1tVKdFaoco/giphy.gif'\n>>> bg_file = urlopen(url)\n>>> qrcode.to_artistic(background=bg_file, target='ringo.gif', scale=10)\n```\n\n----------------------------------------\n\nTITLE: Embedding Inline SVG QR Code with Flask (Python)\nDESCRIPTION: Shows how to generate a QR code in a Flask view and pass it to a template for inline SVG rendering, which allows direct embedding of the SVG in HTML.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/')\ndef home():\n    qrcode = segno.make('While My Guitar Gently Weeps')\n    return render_template('example.html', qrcode=qrcode)\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code for Django ImageField (Python)\nDESCRIPTION: Demonstrates how to create a QR code using Segno and save it as a PNG image in a BytesIO buffer for use with Django's ImageField.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport io\nimport segno\n\nqrcode = segno.make('JULIA')\n# Save the QR code with transparent background and use dark blue for\n# the dark modules\nout = io.BytesIO()\nqrcode.save(out, kind='png', dark='#00008b', light=None, scale=3)\n```\n\n----------------------------------------\n\nTITLE: Basic QR Code Generation and Saving\nDESCRIPTION: Creates a QR code with text content and saves it in multiple formats (SVG, PNG, EPS)\nSOURCE: https://github.com/heuer/segno/blob/master/docs/serializers.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Tomorrow Never Knows')\n>>> qrcode.save('tomorrow-never-knows.svg')\n>>> qrcode.save('tomorrow-never-knows.png')\n>>> qrcode.save('tomorrow-never-knows.eps')\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code Sequence by Version in Python\nDESCRIPTION: Creates a sequence of QR codes with a specified version using Segno's make_sequence function. The number of QR codes is automatically determined based on the message size and version constraints.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/structured-append.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode_seq = segno.make_sequence('I read the news today oh boy', version=1)\n>>> len(qrcode_seq)\n2\n>>> # Creates \"a-day-in-the-life-02-01.svg\" and \"a-day-in-the-life-02-02.svg\"\n>>> qrcode_seq.save('a-day-in-the-life.svg', scale=10)\n```\n\n----------------------------------------\n\nTITLE: Opening Segno QR Codes with Pillow\nDESCRIPTION: This snippet demonstrates how to create a QR code with Segno, save it as a PNG in a memory buffer, and then open it with Pillow. It shows the basic workflow of interfacing between the two libraries.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/pillow-qrcodes.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import io\n>>> from PIL import Image\n>>> import segno\n>>> # Create a 5-H QR code\n>>> qrcode = segno.make('Blackbird singing in the dead of night', error='h')\n>>> # Save the QR code into a memory buffer as PNG\n>>> out = io.BytesIO()\n>>> qrcode.save(out, scale=5, kind='png')\n>>> out.seek(0)  # Important to let PIL / Pillow load the image\n>>> img = Image.open(out)  # Done, do what ever you want with the PIL/Pillow image\n```\n\n----------------------------------------\n\nTITLE: Creating Colorful Micro QR Code with Custom Colors in Python using Segno\nDESCRIPTION: This example shows how to generate a Micro QR code with custom colors using Segno. It creates a Micro QR code with quartile error correction, using dark blue for standard modules and steel blue for data modules.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/colorful-qrcodes.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> micro_qrcode = segno.make('Rain', error='q')\n>>> micro_qrcode.save('micro_qrode_rain.png', scale=4, dark='darkblue', data_dark='steelblue')\n```\n\n----------------------------------------\n\nTITLE: Multi-Color QR Code Generation\nDESCRIPTION: Shows how to create QR codes with multiple colors using data_dark and data_light parameters\nSOURCE: https://github.com/heuer/segno/blob/master/docs/serializers.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Yellow Submarine', version=7, error='h')\n>>> qrcode.save('qrcode_yellow-submarine.png', scale=5, dark='darkred',\n...             data_dark='darkorange', data_light='yellow')\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code Sequence by Symbol Count\nDESCRIPTION: Creates sequences of QR codes by specifying the desired number of symbols using the symbol_count parameter. The QR code version is automatically determined based on the content and number of symbols.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/structured-append.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode_seq = segno.make_sequence('Day after day, alone on the hill', symbol_count=4)\n>>> [qrcode.designator for qr in seq]\n['1-Q', '1-Q', '1-Q', '1-Q']\n>>> qrcode_seq = segno.make_sequence('Day after day, alone on the hill', symbol_count=2)\n>>> [qrcode.designator for qr in seq]\n['2-Q', '2-Q']\n>>> qrcode_seq = segno.make_sequence('Day after day, alone on the hill', symbol_count=6)\n>>> [qrcode.designator for qr in seq]\n['1-Q', '1-Q', '1-H', '1-H', '1-H', '1-H']\n```\n\n----------------------------------------\n\nTITLE: Creating Geographic Location String - Python Segno\nDESCRIPTION: Shows how to generate a geographic location URI string and create a custom QR code. Uses make_geo_data to generate the URI and segno.make for QR code creation with 'H' error correction level.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/special-qrcode-factories.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> from segno import helpers\n>>> latitude, longitude = 38.8976763, -77.0365297\n>>> geo_uri = helpers.make_geo_data(latitude, longitude)\n>>> geo_uri\n'geo:38.8976763,-77.0365297'\n>>> # Use error correction level \"H\"\n>>> qrcode = segno.make(geo_uri, error='H')\n>>> qrcode.designator\n'4-H'\n```\n\n----------------------------------------\n\nTITLE: Creating vCard Data Strings in Segno\nDESCRIPTION: This snippet shows how to generate a vCard 3.0 data string using Segno's helper function and then create a QR code from it. This approach allows for more control over error correction levels.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/contact-information.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> from segno import helpers\n>>> vcard = helpers.make_vcard_data(name='Doe;John', displayname='John Doe',\n...                                 email='me@example.org', phone='+1234567')\n>>> vcard\n'BEGIN:VCARD\\r\\nVERSION:3.0\\r\\nN:Doe;John\\r\\nFN:John Doe\\r\\nEMAIL:me@example.org\\r\\nTEL:+1234567\\r\\nEND:VCARD\\r\\n'\n>>> qrcode = segno.make(vcard, error='H')\n>>> qrcode.designator\n'9-H'\n```\n\n----------------------------------------\n\nTITLE: Saving a QR Code as PNG with Segno\nDESCRIPTION: Creates a 1-Q QR code for the text 'Yesterday' and saves it as a PNG image file named 'yesterday.png' instead of displaying it in the terminal.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/man/segno.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ segno -o=yesterday.png \"Yesterday\"\n```\n\n----------------------------------------\n\nTITLE: Saving QR Code to Django ImageField (Python)\nDESCRIPTION: Shows how to save the generated QR code image to a Django model's ImageField using a ContentFile.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nticket = Ticket(name='JULIA')\nticket.qrcode.save('JULIA.png', ContentFile(out.getvalue()), save=False)\nticket.save()\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code with Boosted Error Correction in Python\nDESCRIPTION: Creates a QR code with the default behavior of boosting error correction level. This results in a version 2 QR code with medium (M) error correction level, providing 15% error correction capability.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/boost-error-correction-level.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('The Long and Winding Road')\n>>> qrcode.designator\n'2-M'\n```\n\n----------------------------------------\n\nTITLE: Creating Geographic Location QR Code - Python Segno\nDESCRIPTION: Demonstrates creation of a QR code encoding geographic coordinates using make_geo helper function. Takes latitude and longitude as parameters and generates a QR code with appropriate error correction.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/special-qrcode-factories.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> from segno import helpers\n>>> latitude, longitude = 38.8976763,-77.0365297\n>>> qrcode = helpers.make_geo(latitude, longitude)\n>>> qrcode.designator\n'2-M'\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code with URL Background to BytesIO (Python)\nDESCRIPTION: Shows how to create a QR code with a background image from a URL and write the result to a BytesIO stream, combining previous techniques.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import io\n>>> from urllib.request import urlopen\n>>> import segno\n>>> qrcode = segno.make('The Beatles', error='h')\n>>> url = 'https://media.giphy.com/media/mUPQmck5YEisg/giphy.gif'\n>>> bg_file = urlopen(url)\n>>> out = io.BytesIO()\n>>> qrcode.to_artistic(background=bg_file, target=out, scale=5, kind='gif')\n```\n\n----------------------------------------\n\nTITLE: Creating EPC QR Code with UTF-8 Encoding\nDESCRIPTION: Shows how to create an EPC QR code with explicit UTF-8 encoding specification. Demonstrates using decimal amounts and saving the output as a scaled PNG file.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/epc-qrcodes.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> from segno import helpers\n>>> qrcode = helpers.make_epc_qr(name='Wikimedia Foerdergesellschaft',\n...                              iban='DE33100205000001194700', amount=13.05,\n...                              text='Spende fuer Wikipedia', encoding='utf-8')\n>>> qrcode.save('spende-wikipedia2.png', scale=3)\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code with Disabled Error Correction Boosting in Python\nDESCRIPTION: Creates a QR code with error correction boosting disabled using boost_error=False. This results in a version 2 QR code with low (L) error correction level, providing only 7% error correction capability despite being the same size as the boosted version.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/boost-error-correction-level.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('The Long and Winding Road', boost_error=False)\n>>> qrcode.designator\n'2-L'\n```\n\n----------------------------------------\n\nTITLE: Micro QR Code Generation with Segno\nDESCRIPTION: Shows how Segno automatically creates Micro QR codes for small content and how to control this behavior by setting the 'micro' parameter to False to force a regular QR code.\nSOURCE: https://github.com/heuer/segno/blob/master/README.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('RAIN')\n>>> qrcode.is_micro\nTrue\n>>> qrcode.designator\n'M2-M'\n```\n\n----------------------------------------\n\nTITLE: Setting Error Correction Level with Segno CLI\nDESCRIPTION: Examples of changing the error correction level from the default 'L' to 'q' or 'h' using the --error or -e flags. Higher error correction levels increase redundancy.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --error=q \"Ain't no grave\"\n$ segno -e=h \"Heart of Gold\"\n```\n\n----------------------------------------\n\nTITLE: Rendering Inline SVG QR Code in Jinja Template (HTML/Jinja)\nDESCRIPTION: Demonstrates how to use the QR code object in a Jinja template to render an inline SVG, using the `safe` filter to prevent escaping of HTML characters.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n<div>\n  {{ qrcode.svg_inline(scale=3) | safe }}\n</div>\n```\n\n----------------------------------------\n\nTITLE: Creating Micro QR Codes with Segno CLI\nDESCRIPTION: Shows how to create a Micro QR code (M4) instead of a standard QR code using the --micro flag. Micro QR codes are more compact but have lower data capacity.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --micro \"Little wing\"\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Append QR Codes with Fixed Version\nDESCRIPTION: Example of using structured append mode (--seq) with a specified version to split content across multiple QR codes. This creates a sequence of version 1 QR codes.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_19\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --seq -v 1 --scale 3 -o polythene-pam.png \"Well you should see Polythene Pam\"\n```\n\n----------------------------------------\n\nTITLE: Customizing QR Code Appearance with Border and Colors\nDESCRIPTION: Shows how to customize QR code appearance by modifying the border (quiet zone), dark module color, and background color. Options include removing borders, changing the color of dark modules, and setting background colors.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('You Know My Name (Look Up The Number)')\n>>> qrcode.save('you-know-my-name-no-border.svg', border=0)  # no border / quiet zone\n>>> qrcode.save('you-know-my-name-color-green.svg',\n...             dark='green')  # default border, dark modules are green\n>>> qrcode.save('you-know-my-name-background-grey.svg',\n...             light='#eee')  # default border, background grey\n```\n\n----------------------------------------\n\nTITLE: Specifying QR Code Version Explicitly\nDESCRIPTION: Demonstrates how to explicitly specify the QR code version using the version parameter. This forces the use of the specified version even if a smaller version would be sufficient.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Light My Fire', version=1)\n>>> qrcode.version\n1\n>>> qrcode.designator\n'1-M'\n```\n\n----------------------------------------\n\nTITLE: Setting QR Code Version with Segno CLI\nDESCRIPTION: Examples of specifying the QR code version using --version or -v flags. This forces a specific QR code version (5) rather than using the automatic minimal version selection.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --version=5 Layla\n$ segno -v=5 Layla\n```\n\n----------------------------------------\n\nTITLE: Setting Error Correction Level with Automatic Boosting\nDESCRIPTION: Shows how Segno can automatically enhance (boost) the error correction level when possible. By default, it uses the specified error level as a minimum and increases it if there's available space.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Parisienne Walkways',\n...                     error='l')  # Explicit (minimum) error correction level\n>>> qrcode.designator # The error correction level was changed to \"Q\" since there was enough available space\n'2-Q'\n```\n\n----------------------------------------\n\nTITLE: Generating Basic SVG QR Code with Segno in Python\nDESCRIPTION: This snippet shows how to create a basic SVG QR code using the Segno library. It sets various parameters to optimize the SVG output, such as omitting the XML declaration and SVG namespace.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> qrcode.save('penny-lane.svg', xmldecl=False, svgns=False, svgclass=None, lineclass=None, omitsize=True)\n```\n\n----------------------------------------\n\nTITLE: SVG QR Code Generation without XML Declaration in Python\nDESCRIPTION: Creates a QR code and saves it as SVG without the XML declaration. This is useful when the SVG will be embedded in a context where the XML declaration is not needed or could cause issues.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Penny Lane', error='h')\n>>> qrcode.save('penny-lane.svg', scale=4, xmldecl=False)\n```\n\n----------------------------------------\n\nTITLE: QR Code Scale and Unit Configuration\nDESCRIPTION: Shows various scaling options and unit specifications for QR codes, including pixel and metric measurements\nSOURCE: https://github.com/heuer/segno/blob/master/docs/serializers.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make_qr('The Beatles')\n>>> qrcode.save('the-beatles.svg', scale=2.4)  # SVG accepts float values\n>>> qrcode.save('the-beatles.svg', scale=10, unit='mm')  # 1 unit = 1 mm\n>>> qrcode.save('the-beatles.svg', unit='cm')  # 1 unit = 1 cm, result as above\n```\n\n----------------------------------------\n\nTITLE: Disabling Automatic Error Correction Level Boosting\nDESCRIPTION: Demonstrates how to disable the automatic boosting of error correction level by setting boost_error=False. This ensures the exact specified error level is used.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Parisienne Walkways', error='l',\n...                     boost_error=False)  # Explicit error level\n>>> qrcode.designator\n'2-L'\n```\n\n----------------------------------------\n\nTITLE: Saving a QR Code as SVG with Title in Segno\nDESCRIPTION: Generates a 2-Q QR code for the text 'The Fool on the Hill' and saves it as an SVG document named 'fool.svg' with a custom title element set to 'Example QR code'.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/man/segno.rst#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ segno -o=fool.svg --title=\"Example QR code\" \"The Fool on the Hill\"\n```\n\n----------------------------------------\n\nTITLE: Enforcing QR Code Instead of Micro QR Code\nDESCRIPTION: Shows how to force Segno to generate a standard QR Code even when the content would fit in a Micro QR Code. This is done by setting the micro parameter to False.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Rain', micro=False)\n>>> qrcode.version\n1\n```\n\n----------------------------------------\n\nTITLE: SVG QR Code Generation without CSS Classes in Python\nDESCRIPTION: Creates a QR code SVG without XML declaration, namespace, and CSS class attributes. This produces the most minimal SVG output with just the essential structural elements and QR code path data.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qr = segno.make('Penny Lane', error='h')\n>>> qr.save('penny-lane.svg', scale=4, xmldecl=False, svgns=False, svgclass=None, lineclass=None)\n```\n\n----------------------------------------\n\nTITLE: Saving QR Codes as SVG with Segno CLI\nDESCRIPTION: Example of saving a QR code as an SVG file using the -o shorthand parameter. SVG format provides a scalable vector representation of the QR code.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\n$ segno -o=satellite.svg \"Satellite Of Love\"\n```\n\n----------------------------------------\n\nTITLE: Creating Alphanumeric Mode QR Codes with Segno in Python\nDESCRIPTION: Illustrates the creation of QR codes using alphanumeric mode in Segno, which supports uppercase letters, numbers, and some special characters.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('REVOLUTION NO. 9')\n>>> qrcode.designator\n'M4-M'\n>>> qrcode.mode\n'alphanumeric'\n```\n\n----------------------------------------\n\nTITLE: QR Code Color Customization\nDESCRIPTION: Illustrates different ways to customize QR code colors, including solid colors, transparency, and alpha channels\nSOURCE: https://github.com/heuer/segno/blob/master/docs/serializers.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make(\"Sgt. Pepper's Lonely Hearts Club Band\")\n>>> qrcode.save('sgt-peppers.svg', dark='darkred', light='lightblue')\n>>> qrcode.save('sgt-peppers.png', light=None)  # Transparent background\n>>> qrcode.save('sgt-peppers.png', dark='#0000ffcc')\n```\n\n----------------------------------------\n\nTITLE: Saving QR Codes in Various File Formats\nDESCRIPTION: Examples of saving QR codes in different file formats including EPS, PDF, and compressed SVG (SVGZ) using the --output parameter.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --output=mrs.eps \"Mrs. Robinson\"\n$ segno --output=dedodo.pdf \"De Do Do Do, De Da Da Da\"\n$ segno --output=tin-pan-alley.svgz \"Tin Pan Alley\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Colored and Scaled SVG QR Code with Segno\nDESCRIPTION: Creates a 1-L QR code for the text 'A Day in the Life', saves it as an SVG named 'a-day-in-the-life.svg', applies a scaling factor of 10, and changes the color of dark modules to darkblue instead of the default black.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/man/segno.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ segno -o=a-day-in-the-life.svg --scale=10 --dark darkblue \"A Day in the Life\"\n```\n\n----------------------------------------\n\nTITLE: SVG QR Code Generation without XML Namespace in Python\nDESCRIPTION: Creates a QR code SVG without the XML declaration and namespace declaration. This is useful for HTML5 contexts where the SVG namespace is not required, making the output more compact.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Penny Lane', error='h')\n>>> qrcode.save('penny-lane.svg', scale=4, xmldecl=False, svgns=False)\n```\n\n----------------------------------------\n\nTITLE: Automatic Version Selection for QR Codes\nDESCRIPTION: Shows how Segno automatically selects the appropriate version for QR codes. In this example, it chooses M4-M (Micro QR version 4 with medium error correction) for the content 'Light My Fire'.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Light My Fire')\n>>> qrcode.version\n'M4'\n>>> qrcode.designator\n'M4-M'\n```\n\n----------------------------------------\n\nTITLE: Changing QR Code Dark Module Color\nDESCRIPTION: Example of using the --dark parameter to change the color of the dark modules from black to darkblue, with scaling factor of 4.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --dark=darkblue --scale 4 --output=excited.png \"So Excited\"\n```\n\n----------------------------------------\n\nTITLE: Using Specific QR Code Factory Functions in Segno\nDESCRIPTION: Shows how to use the specialized factory functions make_qr() and make_micro() to explicitly create regular QR codes or Micro QR codes, including handling errors when content is too large for Micro QR codes.\nSOURCE: https://github.com/heuer/segno/blob/master/README.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode_micro = segno.make_micro('THE BEATLES')\n>>> qrcode_micro.designator\n'M3-M'\n>>> qrcode = segno.make_qr('THE BEATLES')  # Same content but enforce a QR Code\n>>> qrcode.designator\n'1-Q'\n>>> # This won't work since the data does not fit into a Micro QR Code M1 - M4\n>>> micro_qrcode = segno.make_micro('Nick Cave and the Bad Seeds')\nTraceback (most recent call last):\n    ...\nDataOverflowError: Data too large. No Micro QR Code can handle the provided data\n```\n\n----------------------------------------\n\nTITLE: Further Optimizing SVG QR Code Generation with Segno in Python\nDESCRIPTION: This snippet demonstrates additional optimization by omitting the trailing newline character. It uses the 'nl=False' parameter to further reduce the file size by about 130 bytes.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Penny Lane', error='h')\n>>> qrcode.save('penny-lane.svg', xmldecl=False, svgns=False, svgclass=None, lineclass=None, omitsize=True, nl=False)\n```\n\n----------------------------------------\n\nTITLE: Rendering QR Code Data URI in Jinja Template (HTML/Jinja)\nDESCRIPTION: Demonstrates how to use the QR code object in a Jinja template to render PNG and SVG data URIs with custom styling options.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf-8\" />\n    <title>QR Codes</title>\n  </head>\n  <body>\n    <img src=\"{{ qrcode.png_data_uri(dark='darkblue', data_dark='steelblue', alignment_dark='darkgreen', scale=3) }}\"><br>\n    <img src=\"{{ qrcode.svg_data_uri(dark='darkblue', scale=4) }}\">\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: QR Code Border Customization\nDESCRIPTION: Demonstrates setting custom border (quiet zone) sizes for QR codes, including removing the border or setting a specific width\nSOURCE: https://github.com/heuer/segno/blob/master/docs/serializers.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Vampire Blues')\n>>> qrcode.save('vampire-blues.svg', border=0)  # No border\n```\n\n----------------------------------------\n\nTITLE: Customizing Both QR Code Colors\nDESCRIPTION: Example of customizing both the dark and light module colors, setting dark modules to darkblue and light modules to yellow, with scaling factor of 4.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --dark=darkblue --light=yellow --scale 4 --output=dontgiveup.svg \"Don't Give Up\"\n```\n\n----------------------------------------\n\nTITLE: Using High Error Correction Level May Change Version\nDESCRIPTION: Shows how specifying a high error correction level (H) may result in a larger QR code version to accommodate the additional error correction data.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> # Enhancing the error correction level may enforce another QR Code version\n>>> qrcode = segno.make('Parisienne Walkways', error='H')\n>>> qrcode.designator\n'3-H'\n```\n\n----------------------------------------\n\nTITLE: Generating Full QR Codes for Alphanumeric Input in Segno\nDESCRIPTION: Demonstrates how to create full QR codes instead of Micro QR codes for alphanumeric input using make_qr() function or setting micro=False.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make_qr('REVOLUTION NO. 9')\n>>> qrcode.designator\n'1-Q'\n>>> qrcode.mode\n'alphanumeric'\n>>> qrcode2 = segno.make('REVOLUTION NO. 9', micro=False)\n>>> qrcode2.designator\n'1-Q'\n>>> qrcode2.mode\n'alphanumeric'\n```\n\n----------------------------------------\n\nTITLE: QR Code Stream Serialization\nDESCRIPTION: Demonstrates saving QR codes to memory buffers instead of files\nSOURCE: https://github.com/heuer/segno/blob/master/docs/serializers.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> import io\n>>> qrcode = segno.make('Paul McCartney')\n>>> buff = io.BytesIO()\n>>> qrcode.save(buff, kind='svg')\n>>> buff = io.BytesIO()\n>>> qrcode.save(buff, kind='svg', dark='darkblue', light='#eee')\n```\n\n----------------------------------------\n\nTITLE: Setting Transparent Background for QR Codes\nDESCRIPTION: Example of using the --light parameter to make the background (light modules) of the QR code transparent, with scaling factor of 4.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --light=transparent --scale 4 --output=hotel.png \"Hotel California\"\n```\n\n----------------------------------------\n\nTITLE: Handling Lowercase Letters with Byte Mode in Segno\nDESCRIPTION: Shows how Segno automatically switches to byte mode when the input contains lowercase letters, which are not supported by alphanumeric mode.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Revolution No. 9')\n>>> qrcode.mode\n'byte'\n```\n\n----------------------------------------\n\nTITLE: Using the Simple QR Code Plugin in Python\nDESCRIPTION: Example usage of the installed plugin, demonstrating how to generate a QR code and convert it to the simple ASCII output format using the plugin's to_simple() method.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/plugins.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Chelsea Hotel No. 2')\n>>> qrcode.to_simple()\n```\n\n----------------------------------------\n\nTITLE: Creating a Micro QR Code with Custom Color and Scale in Segno\nDESCRIPTION: Generates a Micro QR Code (version M2-M) for the text 'RAIN', saves it as a PNG image named 'rain.png', sets the scaling factor to 4 (making each module 4x4 pixels), and uses the color #003399 for dark modules.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/man/segno.rst#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ segno -o rain.png -s 4 --dark \"#003399\" --micro RAIN\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple QR Code Output Plugin in Python\nDESCRIPTION: A basic plugin implementation that writes QR code modules to stdout using 'X' for dark modules and '_' for light modules. The plugin accesses the QR code matrix and writes each row character by character.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/plugins.rst#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport sys\n\ndef write(qrcode):\n    write = sys.stdout.write\n    for row in qrcode.matrix:\n        for col in row:\n            write('X' if col else '_')\n        write('\\n')\n```\n\n----------------------------------------\n\nTITLE: Creating Kanji Mode QR Codes with Segno in Python\nDESCRIPTION: Demonstrates the creation of QR codes using Kanji mode in Segno, which provides efficient encoding for Japanese characters.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('ビートルズ')\n>>> qrcode.designator\n'M3-L'\n>>> qrcode.mode\n'kanji'\n```\n\n----------------------------------------\n\nTITLE: Creating Standard QR Code with make_qr Function\nDESCRIPTION: Shows how to create a standard QR Code using the dedicated make_qr() function. This ensures a QR Code is generated even if the content would fit in a Micro QR Code.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make_qr('The Beatles')  # Same content but as QR Code\n>>> qrcode.designator\n'1-Q'\n```\n\n----------------------------------------\n\nTITLE: Creating MeCard Data Strings in Segno\nDESCRIPTION: This snippet shows how to generate a MeCard data string using Segno's helper function and then create a QR code from it. This approach allows for more control over error correction levels.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/contact-information.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> from segno import helpers\n>>> mecard = helpers.make_mecard_data(name='Doe,John', email='me@example.org', phone='+1234567')\n>>> mecard\n'MECARD:N:Doe,John;TEL:+1234567;EMAIL:me@example.org;;'\n>>> qrcode = segno.make(mecard, error='H')\n>>> qrcode.designator\n'6-H'\n```\n\n----------------------------------------\n\nTITLE: Setting Wide Quiet Zone for QR Codes\nDESCRIPTION: Example of using the --border parameter to set a wide quiet zone of 10 modules around the QR code, with scaling factor of 4.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --border 10 --scale 4 --output diamond.png \"Shine On You Crazy Diamond\"\n```\n\n----------------------------------------\n\nTITLE: Creating Colorful QR Code with Segno and Pillow (Python)\nDESCRIPTION: Shows how to create a colorful QR code using Segno's 'to_pil' method with custom colors for different parts of the QR code.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Yellow Submarine', error='h')\n>>> img = qrcode.to_pil(scale=4, dark='darkred', data_dark='darkorange',\n...                    data_light='yellow')\n>>> img.save('yellow-submarine.png')\n```\n\n----------------------------------------\n\nTITLE: Using Byte Mode for Complex Input in Segno\nDESCRIPTION: Illustrates how Segno uses byte mode for input that cannot be represented by other modes, encoding in ISO 8859-1 or UTF-8 as needed.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Turn off your mind relax and float down stream')\n>>> qrcode.designator\n'3-L'\n>>> qrcode.mode\n'byte'\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Setup Script in Python\nDESCRIPTION: Setup script configuration for the Segno plugin using setuptools. Defines the plugin entry point 'segno.plugin.converter' and specifies the plugin name 'simple' along with required metadata and dependencies.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/plugins.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nsetup(\n    name='simple-plugin',\n    version='1.0',\n    license='BSD',\n    author='John Doe',\n    author_email='john@example.org',\n    platforms=['any'],\n    py_modules=['simple_plugin'],\n    entry_points=\"\"\"\n    [segno.plugin.converter]\n    simple = simple_plugin:write\n    \"\"\",\n    install_requires=['segno'],\n)\n```\n\n----------------------------------------\n\nTITLE: Creating Animated WebP QR Code with Background Image (Python)\nDESCRIPTION: Shows how to create an animated WebP QR code with a background GIF image using Segno's 'to_artistic' method, if Pillow supports WebP format.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('The Beatles -- Abbey Road', error='h')\n>>> qrcode.to_artistic(background='src/abbey-road-walking.gif',\n...                    target='abbey-road.webp', scale=4)\n```\n\n----------------------------------------\n\nTITLE: Setting Extra Wide Quiet Zone with Short Flag\nDESCRIPTION: Example of using the -b shorthand to set a very wide quiet zone of 30 modules around the QR code, with scaling factor of 4.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ segno -b 30 --scale 4 --output=boom-boom.svg Boom Boom\n```\n\n----------------------------------------\n\nTITLE: Scaling QR Codes with Segno CLI (PNG)\nDESCRIPTION: Example of using the --scale or -s parameter to increase the size of the generated QR code in a PNG file. The scale factor of 10 makes each module 10 times larger.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --scale=10 --output=money-talks.png \"Money Talks\"\n```\n\n----------------------------------------\n\nTITLE: Optimized SVG QR Code XML Output\nDESCRIPTION: This XML snippet shows the resulting SVG markup for the QR code. It demonstrates a compact SVG structure with a single path element containing the QR code data.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_9\n\nLANGUAGE: xml\nCODE:\n```\n<svg viewBox=\"0 0 33 33\"><path stroke=\"#000\" d=\"M4 4.5h7m3 0h1m1 0h1m1 0h1m3 0h7m-25 1h1m5 0h1m3 0h2m1 0h4m1 0h1m5 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m5 0h1m1 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m1 0h1m1 0h1m3 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m4 0h3m1 0h1m1 0h3m1 0h1m-25 1h1m5 0h1m2 0h1m2 0h2m2 0h1m1 0h1m5 0h1m-25 1h7m1 0h1m1 0h1m1 0h1m1 0h1m1 0h1m1 0h7m-17 1h1m2 0h1m1 0h4m-15 1h2m2 0h5m3 0h1m1 0h3m1 0h1m-19 1h2m1 0h1m1 0h10m2 0h1m2 0h1m-23 1h2m1 0h5m1 0h1m1 0h1m1 0h1m2 0h1m5 0h1m-23 1h1m1 0h3m2 0h1m2 0h3m1 0h2m1 0h1m2 0h4m-24 1h1m1 0h1m1 0h1m1 0h2m3 0h2m1 0h1m3 0h1m1 0h5m-21 1h1m2 0h4m1 0h3m1 0h2m1 0h6m-24 1h1m1 0h1m1 0h5m1 0h3m1 0h2m6 0h1m-24 1h1m2 0h2m2 0h1m3 0h1m4 0h1m1 0h1m5 0h1m-22 1h1m2 0h2m2 0h1m2 0h11m-16 1h1m2 0h1m1 0h1m1 0h2m3 0h1m2 0h1m-24 1h7m1 0h5m2 0h2m1 0h1m1 0h1m2 0h2m-25 1h1m5 0h1m4 0h1m1 0h2m1 0h1m3 0h1m2 0h2m-25 1h1m1 0h3m1 0h1m6 0h1m2 0h5m3 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m3 0h1m4 0h1m1 0h2m2 0h1m-25 1h1m1 0h3m1 0h1m1 0h7m2 0h1m1 0h2m2 0h1m-24 1h1m5 0h1m2 0h2m2 0h1m2 0h4m1 0h2m-23 1h7m5 0h1m1 0h1m1 0h1m2 0h3m1 0h2\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Creating QR Code with Background Image to BytesIO (Python)\nDESCRIPTION: Shows how to create a QR code with a background image and write the result to a BytesIO stream instead of a file.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import io\n>>> import segno\n>>> qrcode = segno.make('The Beatles -- Let It Be', error='h')\n>>> out = io.BytesIO()\n>>> qrcode.to_artistic(background='src/letitbe.jpg', target=out, scale=5, kind='jpg')\n```\n\n----------------------------------------\n\nTITLE: Creating Multi-Colored QR Codes\nDESCRIPTION: Example of creating a QR code with multiple colors by specifying different colors for different module types, with specific colors for data dark and data light modules.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_18\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --dark darkred --data-dark darkorange --data-light yellow --scale 5 -o qrcode_yellow-submarine.png Yellow Submarine\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic QR Code in Jinja Template (HTML/Jinja)\nDESCRIPTION: Shows how to use the `url_for` function in a Jinja template to generate a URL for the dynamic QR code view, allowing for easy embedding of custom QR codes.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<img src=\"{{ url_for('qrcode_png', data='Rocky Raccoon') }}\">\n```\n\n----------------------------------------\n\nTITLE: SVG QR Code XML Output without XML Declaration\nDESCRIPTION: Shows the XML markup output for a QR code without the XML declaration. The SVG element still includes the namespace, width, height, and class attributes, as well as the path data.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"132\" height=\"132\" class=\"segno\"><path transform=\"scale(4)\" stroke=\"#000\" class=\"qrline\" d=\"M4 4.5h7m3 0h1m1 0h1m1 0h1m3 0h7m-25 1h1m5 0h1m3 0h2m1 0h4m1 0h1m5 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m5 0h1m1 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m1 0h1m1 0h1m3 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m4 0h3m1 0h1m1 0h3m1 0h1m-25 1h1m5 0h1m2 0h1m2 0h2m2 0h1m1 0h1m5 0h1m-25 1h7m1 0h1m1 0h1m1 0h1m1 0h1m1 0h1m1 0h7m-17 1h1m2 0h1m1 0h4m-15 1h2m2 0h5m3 0h1m1 0h3m1 0h1m-19 1h2m1 0h1m1 0h10m2 0h1m2 0h1m-23 1h2m1 0h5m1 0h1m1 0h1m1 0h1m2 0h1m5 0h1m-23 1h1m1 0h3m2 0h1m2 0h3m1 0h2m1 0h1m2 0h4m-24 1h1m1 0h1m1 0h1m1 0h2m3 0h2m1 0h1m3 0h1m1 0h5m-21 1h1m2 0h4m1 0h3m1 0h2m1 0h6m-24 1h1m1 0h1m1 0h5m1 0h3m1 0h2m6 0h1m-24 1h1m2 0h2m2 0h1m3 0h1m4 0h1m1 0h1m5 0h1m-22 1h1m2 0h2m2 0h1m2 0h11m-16 1h1m2 0h1m1 0h1m1 0h2m3 0h1m2 0h1m-24 1h7m1 0h5m2 0h2m1 0h1m1 0h1m2 0h2m-25 1h1m5 0h1m4 0h1m1 0h2m1 0h1m3 0h1m2 0h2m-25 1h1m1 0h3m1 0h1m6 0h1m2 0h5m3 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m3 0h1m4 0h1m1 0h2m2 0h1m-25 1h1m1 0h3m1 0h1m1 0h7m2 0h1m1 0h2m2 0h1m-24 1h1m5 0h1m2 0h2m2 0h1m2 0h4m1 0h2m-23 1h7m5 0h1m1 0h1m1 0h1m2 0h3m1 0h2\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Saving QR Codes as Text Files\nDESCRIPTION: Example of saving a QR code as a plain text file, which represents the QR code using ASCII characters.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --output=thrill-gone.txt \"The Thrill Is Gone\"\n```\n\n----------------------------------------\n\nTITLE: SVG QR Code XML Output with Default Options\nDESCRIPTION: Shows the XML markup output for a QR code with default SVG settings. The output includes XML declaration, SVG namespace, width and height attributes, class attributes for the SVG element and path, and the path data defining the QR code.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"132\" height=\"132\" class=\"segno\"><path transform=\"scale(4)\" stroke=\"#000\" class=\"qrline\" d=\"M4 4.5h7m3 0h1m1 0h1m1 0h1m3 0h7m-25 1h1m5 0h1m3 0h2m1 0h4m1 0h1m5 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m5 0h1m1 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m1 0h1m1 0h1m3 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m4 0h3m1 0h1m1 0h3m1 0h1m-25 1h1m5 0h1m2 0h1m2 0h2m2 0h1m1 0h1m5 0h1m-25 1h7m1 0h1m1 0h1m1 0h1m1 0h1m1 0h1m1 0h7m-17 1h1m2 0h1m1 0h4m-15 1h2m2 0h5m3 0h1m1 0h3m1 0h1m-19 1h2m1 0h1m1 0h10m2 0h1m2 0h1m-23 1h2m1 0h5m1 0h1m1 0h1m1 0h1m2 0h1m5 0h1m-23 1h1m1 0h3m2 0h1m2 0h3m1 0h2m1 0h1m2 0h4m-24 1h1m1 0h1m1 0h1m1 0h2m3 0h2m1 0h1m3 0h1m1 0h5m-21 1h1m2 0h4m1 0h3m1 0h2m1 0h6m-24 1h1m1 0h1m1 0h5m1 0h3m1 0h2m6 0h1m-24 1h1m2 0h2m2 0h1m3 0h1m4 0h1m1 0h1m5 0h1m-22 1h1m2 0h2m2 0h1m2 0h11m-16 1h1m2 0h1m1 0h1m1 0h2m3 0h1m2 0h1m-24 1h7m1 0h5m2 0h2m1 0h1m1 0h1m2 0h2m-25 1h1m5 0h1m4 0h1m1 0h2m1 0h1m3 0h1m2 0h2m-25 1h1m1 0h3m1 0h1m6 0h1m2 0h5m3 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m3 0h1m4 0h1m1 0h2m2 0h1m-25 1h1m1 0h3m1 0h1m1 0h7m2 0h1m1 0h2m2 0h1m-24 1h1m5 0h1m2 0h2m2 0h1m2 0h4m1 0h2m-23 1h7m5 0h1m1 0h1m1 0h1m2 0h3m1 0h2\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Enforcing QR Code Output for Numeric Mode in Segno\nDESCRIPTION: Shows how to force Segno to generate a full QR code instead of a Micro QR code for numeric input using make_qr() function or setting micro=False.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make_qr('64')\n>>> qrcode2 = segno.make(64, micro=False)\n>>> qrcode.designator\n'1-H'\n>>> qrcode.mode\n'numeric'\n>>> qrcode == qrcode2\nTrue\n```\n\n----------------------------------------\n\nTITLE: Scaling QR Codes with Segno CLI (SVG)\nDESCRIPTION: Example of using the -s shorthand to scale an SVG QR code by a factor of 10, making it larger while maintaining vector quality.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\n$ segno -s 10 --output=private-investigations.svg Private Investigations\n```\n\n----------------------------------------\n\nTITLE: Creating Byte Mode Micro QR Codes with Segno\nDESCRIPTION: Demonstrates that byte mode is also supported by Micro QR Codes M3 and M4 in Segno.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Let it be')\n>>> qrcode.designator\n'M3-L'\n>>> qrcode.mode\n'byte'\n```\n\n----------------------------------------\n\nTITLE: Generating Full QR Codes for Kanji Input in Segno\nDESCRIPTION: Shows how to create full QR codes instead of Micro QR codes for Kanji input using the make_qr() function.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make_qr('ビートルズ')\n>>> qrcode.designator\n'1-Q'\n>>> qrcode.mode\n'kanji'\n```\n\n----------------------------------------\n\nTITLE: Working with Data Masks in QR Codes\nDESCRIPTION: Demonstrates how to check and set data mask patterns in QR codes. Segno automatically chooses an optimal mask, but users can specify a preferred mask using the mask parameter.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Ai Du')\n>>> qrcode.mask\n0\n>>> qrcode = segno.make('Ai Du', mask=3)\n>>> qrcode.mask\n3\n```\n\n----------------------------------------\n\nTITLE: SVG QR Code XML Output without XML Declaration and Namespace\nDESCRIPTION: Shows the XML markup output for a QR code without XML declaration and namespace. The SVG element still includes width, height, and class attributes, suitable for HTML5 embedding.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_5\n\nLANGUAGE: xml\nCODE:\n```\n<svg width=\"132\" height=\"132\" class=\"segno\"><path transform=\"scale(4)\" stroke=\"#000\" class=\"qrline\" d=\"M4 4.5h7m3 0h1m1 0h1m1 0h1m3 0h7m-25 1h1m5 0h1m3 0h2m1 0h4m1 0h1m5 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m5 0h1m1 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m1 0h1m1 0h1m3 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m4 0h3m1 0h1m1 0h3m1 0h1m-25 1h1m5 0h1m2 0h1m2 0h2m2 0h1m1 0h1m5 0h1m-25 1h7m1 0h1m1 0h1m1 0h1m1 0h1m1 0h1m1 0h7m-17 1h1m2 0h1m1 0h4m-15 1h2m2 0h5m3 0h1m1 0h3m1 0h1m-19 1h2m1 0h1m1 0h10m2 0h1m2 0h1m-23 1h2m1 0h5m1 0h1m1 0h1m1 0h1m2 0h1m5 0h1m-23 1h1m1 0h3m2 0h1m2 0h3m1 0h2m1 0h1m2 0h4m-24 1h1m1 0h1m1 0h1m1 0h2m3 0h2m1 0h1m3 0h1m1 0h5m-21 1h1m2 0h4m1 0h3m1 0h2m1 0h6m-24 1h1m1 0h1m1 0h5m1 0h3m1 0h2m6 0h1m-24 1h1m2 0h2m2 0h1m3 0h1m4 0h1m1 0h1m5 0h1m-22 1h1m2 0h2m2 0h1m2 0h11m-16 1h1m2 0h1m1 0h1m1 0h2m3 0h1m2 0h1m-24 1h7m1 0h5m2 0h2m1 0h1m1 0h1m2 0h2m-25 1h1m5 0h1m4 0h1m1 0h2m1 0h1m3 0h1m2 0h2m-25 1h1m1 0h3m1 0h1m6 0h1m2 0h5m3 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m3 0h1m4 0h1m1 0h2m2 0h1m-25 1h1m1 0h3m1 0h1m1 0h7m2 0h1m1 0h2m2 0h1m-24 1h1m5 0h1m2 0h2m2 0h1m2 0h4m1 0h2m-23 1h7m5 0h1m1 0h1m1 0h1m2 0h3m1 0h2\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Handling DataOverflowError for Content Too Large for Micro QR\nDESCRIPTION: Demonstrates how Segno raises a DataOverflowError when the provided content is too large to fit in a Micro QR Code when using make_micro().\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make_micro('The Curse of Millhaven')\nTraceback (most recent call last):\n    ...\nDataOverflowError: Data too large. No Micro QR Code can handle the provided data\n```\n\n----------------------------------------\n\nTITLE: Converting QR Code to RGB(A) Format with Pillow\nDESCRIPTION: This snippet shows how to convert a Segno-generated QR code image to RGB or RGBA format using Pillow. This conversion is necessary when further processing requires color or transparency information.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/pillow-qrcodes.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> img = Image.open(out).convert('RGB')  # We want to use Pillow with colors\n>>> # Only necessary if further processing requires transparency / an alpha channel\n>>> img = Image.open(out).convert('RGBA')\n```\n\n----------------------------------------\n\nTITLE: Setting Zero Quiet Zone for QR Codes\nDESCRIPTION: Example of using the --border parameter to set the quiet zone (white space around the QR code) to zero, while scaling the code by a factor of 4.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --border 0 --scale 4 --output=black-magic-woman.svg \"Black Magic Woman\"\n```\n\n----------------------------------------\n\nTITLE: Disallowing Micro QR Codes with micro Parameter\nDESCRIPTION: Alternative approach to ensure standard QR Codes by using the make() function with micro=False parameter. This achieves the same result as using make_qr().\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('The Beatles', micro=False)  # Disallow Micro QR Codes\n>>> qrcode.designator\n'1-Q'\n```\n\n----------------------------------------\n\nTITLE: Handling Single QR Code in Sequence\nDESCRIPTION: Demonstrates that when content fits into a single QR code, the sequence behaves like a standard QRCode instance, even when using the make_sequence function.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/structured-append.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode_seq = segno.make_sequence('I read', version=1)\n>>> len(qrcode_seq)\n1\n>>> qrcode_seq.designator\n'1-H'\n>>> # Creates \"a-day-in-the-life.svg\"\n>>> qrcode_seq.save('a-day-in-the-life.svg', scale=10)\n```\n\n----------------------------------------\n\nTITLE: Django Model with QR Code ImageField (Python)\nDESCRIPTION: Defines a simple Django model with a CharField for a name and an ImageField for storing a QR code image.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/web-development.rst#2025-04-23_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom django.db import models\n\n\nclass Ticket(models.Model):\n    name = models.CharField(max_length=150, unique=True)\n    qrcode = models.ImageField(upload_to='ticket-qrcodes/')\n```\n\n----------------------------------------\n\nTITLE: Creating a Micro QR Code with Automatic Version Selection\nDESCRIPTION: Demonstrates how Segno automatically chooses the minimal possible Micro QR Code version with maximal error correction for the input. In this case, it selects M3 version for the content 'Rain'.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/make.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('Rain')\n>>> qrcode.version\n'M3'\n```\n\n----------------------------------------\n\nTITLE: Minimal SVG QR Code XML Output\nDESCRIPTION: Shows the most minimal XML markup for a QR code SVG, with no XML declaration, namespace, or CSS classes. Only contains the essential width, height, and path data to define the QR code.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/svg-options.rst#2025-04-23_snippet_7\n\nLANGUAGE: xml\nCODE:\n```\n<svg width=\"132\" height=\"132\"><path transform=\"scale(4)\" stroke=\"#000\" d=\"M4 4.5h7m3 0h1m1 0h1m1 0h1m3 0h7m-25 1h1m5 0h1m3 0h2m1 0h4m1 0h1m5 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m5 0h1m1 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m2 0h2m1 0h1m1 0h1m3 0h1m1 0h3m1 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m4 0h3m1 0h1m1 0h3m1 0h1m-25 1h1m5 0h1m2 0h1m2 0h2m2 0h1m1 0h1m5 0h1m-25 1h7m1 0h1m1 0h1m1 0h1m1 0h1m1 0h1m1 0h7m-17 1h1m2 0h1m1 0h4m-15 1h2m2 0h5m3 0h1m1 0h3m1 0h1m-19 1h2m1 0h1m1 0h10m2 0h1m2 0h1m-23 1h2m1 0h5m1 0h1m1 0h1m1 0h1m2 0h1m5 0h1m-23 1h1m1 0h3m2 0h1m2 0h3m1 0h2m1 0h1m2 0h4m-24 1h1m1 0h1m1 0h1m1 0h2m3 0h2m1 0h1m3 0h1m1 0h5m-21 1h1m2 0h4m1 0h3m1 0h2m1 0h6m-24 1h1m1 0h1m1 0h5m1 0h3m1 0h2m6 0h1m-24 1h1m2 0h2m2 0h1m3 0h1m4 0h1m1 0h1m5 0h1m-22 1h1m2 0h2m2 0h1m2 0h11m-16 1h1m2 0h1m1 0h1m1 0h2m3 0h1m2 0h1m-24 1h7m1 0h5m2 0h2m1 0h1m1 0h1m2 0h2m-25 1h1m5 0h1m4 0h1m1 0h2m1 0h1m3 0h1m2 0h2m-25 1h1m1 0h3m1 0h1m6 0h1m2 0h5m3 0h1m-25 1h1m1 0h3m1 0h1m1 0h2m3 0h1m4 0h1m1 0h2m2 0h1m-25 1h1m1 0h3m1 0h1m1 0h7m2 0h1m1 0h2m2 0h1m-24 1h1m5 0h1m2 0h2m2 0h1m2 0h4m1 0h2m-23 1h7m5 0h1m1 0h1m1 0h1m2 0h3m1 0h2\"/></svg>\n```\n\n----------------------------------------\n\nTITLE: Enabling Hanzi Mode for Chinese Characters in Segno\nDESCRIPTION: Demonstrates how to explicitly enable Hanzi mode for more compact encoding of Chinese characters in Segno.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('书读百遍其义自现', mode='hanzi')\n>>> qrcode.mode\n'hanzi'\n>>> qrcode.designator\n'1-M'\n```\n\n----------------------------------------\n\nTITLE: Handling Chinese Characters with Byte Mode in Segno\nDESCRIPTION: Shows how Segno defaults to byte mode for Chinese characters when Hanzi mode is not explicitly specified.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/qrcode-modes.rst#2025-04-23_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('书读百遍其义自现')\n>>> qrcode.designator\n'2-M'\n>>> qrcode.mode\n'byte'\n```\n\n----------------------------------------\n\nTITLE: QR Code Matrix Representation in Binary Format\nDESCRIPTION: A binary matrix representing a QR code pattern, where 1s represent dark modules and 0s represent light modules. This pattern forms a scannable QR code when rendered properly with the dark/light modules.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/fig-26.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain\nCODE:\n```\n11111110101\n10000010000\n10111010000\n10111010100\n10111010100\n10000010100\n11111110000\n00000000000\n11001011000\n00000000000\n10000000000\n```\n\n----------------------------------------\n\nTITLE: Installing qrcode-artistic Plugin for Segno (Python)\nDESCRIPTION: Command to install the qrcode-artistic plugin using pip. This plugin enables advanced graphic operations for QR codes created with Segno.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/artistic-qrcodes.rst#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install qrcode-artistic\n```\n\n----------------------------------------\n\nTITLE: Setting Micro QR Code Version with Segno CLI\nDESCRIPTION: Examples of specifying a Micro QR code version using the m4 or M4 parameter with the version flag. This forces the use of Micro QR code version M4.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ segno -v m4 Layla\n$ segno --version M4 Layla\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Matrix in Text Format\nDESCRIPTION: This snippet represents a QR code matrix using digits. 1s and 0s are used for finder patterns and timing patterns, while 2s represent the data and error correction areas.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_version.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111102222222222222222222222222200101111111\n100000102222222222222222222222222201001000001\n101110102222222222222222222222222201001011101\n101110102222222222222222222222222201101011101\n101110102222222222221111122222222211101011101\n100000102222222222221000122222222200001000001\n111111101010101010101010101010101010101111111\n000000002222222222221000122222222222200000000\n222222122222222222221111122222222222222222222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n222211111222222222221111122222222222111112222\n222210001222222222221000122222222222100012222\n222210101222222222221010122222222222101012222\n222210001222222222221000122222222222100012222\n222211111222222222221111122222222222111112222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n222222122222222222222222222222222222222222222\n222222022222222222222222222222222222222222222\n000010122222222222222222222222222222222222222\n011110022222222222222222222222222222222222222\n100110122222222222221111122222222222111112222\n000000001222222222221000122222222222100012222\n111111102222222222221010122222222222101012222\n100000102222222222221000122222222222100012222\n101110102222222222221111122222222222111112222\n101110102222222222222222222222222222222222222\n101110102222222222222222222222222222222222222\n100000102222222222222222222222222222222222222\n111111102222222222222222222222222222222222222\n```\n\n----------------------------------------\n\nTITLE: Creating Structured Append QR Codes with Symbol Count\nDESCRIPTION: Example of using structured append mode with a specified symbol count (--symbol-count) to split content across exactly 2 QR codes.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --seq --symbol-count=2 -s 3 -o sa_yellow-submarine.png \"We all live in a yellow submarine\"\n```\n\n----------------------------------------\n\nTITLE: Creating Compact QR Code Representation\nDESCRIPTION: Demonstrates how to use the --compact flag to create a more condensed visual representation of the QR code in the terminal output.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --compact \"Little wing\"\n```\n\n----------------------------------------\n\nTITLE: Binary QR Code Matrix Representation\nDESCRIPTION: A visual representation of a QR code matrix using 1s and 0s arranged in a grid pattern. The matrix includes the characteristic finder patterns in three corners (top-left, top-right, bottom-left) and data cells throughout the pattern. This binary representation could be used for displaying or processing a QR code programmatically.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/covid-cert.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n11111110101101110101011101000110111010010010010001010010011111010000001111111\n10000010110101101011100111011010001011111011011010101000001101111110101000001\n10111010111011110110100101010101000111000100001001000110110001010100101011101\n10111010011100100100011000100001000101101010010111111001111110011100101011101\n10111010100000110010000111111011011101011111111111100111000111111011101011101\n10000010000111000011101010001000001111110100001000111100010011001010001000001\n11111110101010101010101010101010101010101010101010101010101010101010101111111\n00000000010110011110110010001000011111010111101000111101001000110010000000000\n10011111111001110110010111111010010011100100101111100010100110100100110010111\n01100000010111001100010011100110110111011000000111111001101100101100001000100\n10110010011110111010000010111000110100101011001000010000101001010110101100110\n00011100011101100010100101101111000000101101100001010111001000000110111100100\n01001110010000101001100011100010011010011010001000001110011101111100100010110\n10101001000100000111110010000100110001011111100000101010100101001101110001000\n01011110010000110111111001001010001111101111010101100010110100101001011011010\n00101101101001010111001110011101000100100110001011110010110110100010010101100\n10000011000001101111011100011100010111101100010000101101001010100111101100101\n11000001101011100011100111101000101011101001100110110011000010110100000100011\n00001010001101010011111000111111110010110011011100010010011010000111100000110\n01110000101000101100011010111001010010000010111101011010011110000101100111100\n10101011000011101100111101100101111001010100111110000110011010110011111110010\n10010101111101010011000101001101010000011010000011110011001001110000011111011\n11110111000001101111000100001110011100001011000111011101101000011011111100100\n00111100010111111000010001110111010011010011000011000100010110000100111110010\n10101111111011111111010111111111110111010011101111100011110101110101111111000\n00011000111101001011010010001110110010101000011000101100101001011000100011011\n00111010110100100101100110101101011100101101011010101010100101001111101010011\n10001000100101001011110010001111101100000101011000111111110010011011100010011\n11001111110001010111000111111100100001111110101111110011100010101100111110010\n00111000000100000110100110100001000011000100000110011110110010000101010110110\n11110110011100101001111100001000101010001111111111100111100110111100001100101\n00001001110010000010011100000011100111010010011011100100101101010010110011111\n01010011011001000010000010000011100010100110111000010101011010110100100101011\n00001100001111110111101101000011111111101011101011101110000111000011110101001\n00010011110100010110111000111110010110100010111101110010010100101110100011000\n11101101110101110010011101011111111000111010100011001110000100001111100000110\n11110110011101110000011001100010111010001100100001101101010011110101011111111\n10001100110010001101110100010011010110110010010111000010101111100110010111100\n01000110001101100111001111111110111011001010111011010101100101011010010010000\n11011000111100100101011011110001101100111011111110011010110101000011100110100\n01110010101000001001000001111100111111110001011101001110010111010001011100101\n01011100000110101101011100110111111100011110100000011100011101111011010110000\n00010010010111100011101101111001100000111001000101110111110111100011110000010\n01010000111010111111000101010010110101110000110000110100110111010100001110110\n10010011100010011000000000101010000010101100101101000100000000101001110010111\n10100100100101101010000000000001110100000010100010111001111011100101110111011\n10111111101101101100011111111010110110001000011111100011101100010110111110110\n01101000101000011100110110001101001100001111001000100010111110111010100010100\n00001010110011000011111110101011101101000111111010111101101101110000101011100\n11101000101000010110100010001000000110110100101000101001111011011101100011011\n11011111100100110110111111111110101001110101011111110100100010011011111111000\n00001001100111101011111001101000011011110101100001000100101101110110111010101\n01100111111101010010011111010101101010101111110110100101101000000000010111100\n10110100010110000100101101000110001001111111100111011010010111100001011010000\n10101111101101100111101101011001001100110111111111101010011100010111011001000\n01101100111110110100110101100010001100011110001101101111111111100111110001101\n10000111001100110010101001011110011011000011000000100011111001010101101010101\n01000100100011111001111000010111100111000100100000011001110110001111011001010\n11111110011100001001111110001101101000000000000111010100001111011101101110011\n11000000101010101001111110100101001111011010010100011010100011011111001101101\n01000011110100111110100011000100101001100001101001110101100111000001111011111\n01010101110100110011000010110010101011000010111011011011010100101101010000110\n10011011100110111101000101010111000110011010001111011011011000011000101001001\n00001001011010001001000011000110111100100001000100011101010111110110111100100\n10101111001010010001000111111011011100000100110010101100101011010100101100010\n10111100010101000101001010111110101001000101000011100100010111000000001110101\n01001111110110111001101000010000001100110111110011100001110111011100111110100\n00001001001100001000000000000110110101001100001000110111010000111001110001011\n01111010110111110000010011111101110011110101101111111011111110010010111111111\n00000000110100101000010110001101101010001011011000110011100101100100100010101\n11111110100010001010011110101011101100000010111010100111010000110110101011000\n10000010101011010111011110001000011110011000001000100001010110110110100011010\n10111010101010111101100011111101011000001101001111101011000011111101111111111\n10111010100010000100001111100110001001001101100110111000010011111101000111100\n10111010000000010110000110100001110100101011110111001111010000001101101101001\n10000010001100100001101100111001001111011111100010100000101000101111011100000\n11111110100001010000001000011000011000001111001010001101100001110101100010010\n```\n\n----------------------------------------\n\nTITLE: Using Symbol Count Shorthand for Structured Append\nDESCRIPTION: Example of using the shortened -sc flag to specify the number of symbols for structured append mode, creating exactly 2 QR codes.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/command-line.rst#2025-04-23_snippet_21\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --seq -sc 2 -s 3 -o julia.png \"Half of what I say is meaningless\"\n```\n\n----------------------------------------\n\nTITLE: Forcing Regular QR Codes in Segno\nDESCRIPTION: Demonstrates disabling Micro QR code generation by setting the 'micro' parameter to False, which forces Segno to create a regular QR code even for small content.\nSOURCE: https://github.com/heuer/segno/blob/master/README.rst#2025-04-23_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> qrcode = segno.make('RAIN', micro=False)\n>>> qrcode.is_micro\nFalse\n>>> qrcode.designator\n'1-H'\n```\n\n----------------------------------------\n\nTITLE: Text-based QR Code Matrix Pattern\nDESCRIPTION: A 21x21 QR code matrix represented in plain text format, where 1s indicate black modules (pixels) and 0s indicate white modules. This appears to be a Version 1 QR code with the characteristic finder patterns in three corners.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/iso-fig-1.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n111111100001101111111\n100000101001101000001\n101110101110101011101\n101110101010001011101\n101110100000101011101\n100000100010101000001\n111111101010101111111\n000000001100100000000\n100000101111011001110\n100010001110001000111\n011101111001100100010\n110100001011010100110\n011111111110001011011\n000000001000000010110\n111111100111111000110\n100000100010011011100\n101110100000111000111\n101110100100001010100\n101110100100101010011\n100000100001110111100\n111111101011001010010\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Representation\nDESCRIPTION: A QR code represented as a 21x21 binary matrix where 1s represent black modules and 0s represent white modules. This includes the characteristic finder patterns in three corners and the data/alignment patterns throughout the code.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/fig-23-unmasked.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111100111101111111\n100000100111101000001\n101110100111101011101\n101110100111101011101\n101110100111101011101\n100000100000001000001\n111111101010101111111\n000000000000000000000\n000000100000000000000\n111111011111111111111\n111111111111111111111\n111111011111111111111\n000000100000000000000\n000000000000000000000\n111111100101110100000\n100000100101110100000\n101110100101110100000\n101110100101110100000\n101110100101110100000\n100000100101110100000\n111111100101110100000\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Matrix as Binary Pattern\nDESCRIPTION: A raw binary representation of a QR code where 1s represent dark modules and 0s represent light modules. The matrix includes the three finder patterns in the corners, as well as the timing patterns and data regions.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking_mask-2.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111101010001111111\n100000100000101000001\n101110100111101011101\n101110100001101011101\n101110101100001011101\n100000101011101000001\n111111101010101111111\n000000000001100000000\n011111110110100110001\n100001011110110011111\n000011111000000101001\n101010000010100100000\n101100100101100000100\n000000001100111001011\n111111101100001011101\n100000101100011100110\n101110101100000001110\n101110101100100101100\n101110101110110011000\n100000101010100000101\n111111100110110010000\n```\n\n----------------------------------------\n\nTITLE: Printing a Compact QR Code to Terminal with Segno\nDESCRIPTION: Generates a 1-L QR code (version 1 with error correction level L) for the text 'I am the walrus' and displays it in the terminal using a more compact representation.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/man/segno.rst#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ segno --compact \"I am the walrus\"\n```\n\n----------------------------------------\n\nTITLE: QR Code Library Usage Examples with Segno\nDESCRIPTION: Demonstrates creating a QR code with automatic version and error level selection, checking its properties, and saving it in different formats with various customization options like scaling and colors.\nSOURCE: https://github.com/heuer/segno/blob/master/README.rst#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import segno\n>>> # Let Segno choose the minimal version and an optimal (maximal) error\n>>> # level without changing the minimal version\n>>> qrcode = segno.make('Up Jumped the Devil')\n>>> qrcode.designator  # Returns the QR code version and the error correction level\n'2-Q'\n>>> qrcode.save('up-jumped-the-devil.png')  # Save as PNG\n>>> qrcode.save('up-jumped-the-devil-2.png', scale=10)  # Scaling factor 10\n>>> qrcode.save('up-jumped-the-devil-3.png', light=None)  # Transparent light modules\n>>> qrcode.save('up-jumped-the-devil.pdf', scale=10)  # Save as PDF\n>>> # SVG drawing the dark modules in \"dark blue\"\n>>> qrcode.save('up-jumped-the-devil.svg', scale=10, dark='darkblue')\n```\n\n----------------------------------------\n\nTITLE: Documenting Main Module Contents in RST\nDESCRIPTION: ReStructuredText directive for auto-documenting the main segno module contents, ordered by source appearance.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/api.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: segno\n    :member-order: bysource\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Dependencies\nDESCRIPTION: Specifies required Python packages and their version constraints for Sphinx documentation setup. Includes the main Sphinx package, parameter links extension, and Furo theme with specific version bounds.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsphinx<7.4.0\nsphinx_paramlinks~=0.6\nfuro<2025.0.0\n```\n\n----------------------------------------\n\nTITLE: Including External RST File Content\nDESCRIPTION: Uses RST include directive to import content from a parent directory's CHANGES.rst file\nSOURCE: https://github.com/heuer/segno/blob/master/docs/changes.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../CHANGES.rst\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 1.6.6\nDESCRIPTION: Restructured text entry documenting a fix for man page directory issue\nSOURCE: https://github.com/heuer/segno/blob/master/CHANGES.rst#2025-04-23_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n1.6.6 -- 2025-03-12\n-------------------\n* Fixed man page directory. This issue was introduced by mistake in the\n  1.6.4/1.6.5 release and was reported by `Johannes Kastl <https://github.com/kastl-ars>`_\n  and `Michał Górny <https://github.com/mgorny>`_\n```\n\n----------------------------------------\n\nTITLE: Changelog Entry for Version 1.6.5\nDESCRIPTION: Restructured text entry noting alignment of changelog with version numbers\nSOURCE: https://github.com/heuer/segno/blob/master/CHANGES.rst#2025-04-23_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n1.6.5 -- 2025-03-11\n-------------------\n* Fixed release notes / aligned changelog to the mistake of skipping two minor \n  releases\n```\n\n----------------------------------------\n\nTITLE: Colormap Configuration Example - Python\nDESCRIPTION: Example showing the deprecated colormap configuration for QR code colors and the new recommended approach using dark/light parameters.\nSOURCE: https://github.com/heuer/segno/blob/master/CHANGES.rst#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncolormap = {mt.TYPE_FINDER_PATTERN_DARK: 'darkred',\n            mt.TYPE_ALIGNMENT_PATTERN_DARK: 'darkred',\n            mt.TYPE_TIMING_DARK: 'darkred', \n            mt.TYPE_DARKMODULE: 'darkred',\n            mt.TYPE_DATA_DARK: 'darkorange',\n            mt.TYPE_DATA_LIGHT: 'yellow',\n            mt.TYPE_FORMAT_DARK: 'darkred'}\n\nqr.save('qrcode.png', scale=5, colormap=colormap)\n```\n\nLANGUAGE: python\nCODE:\n```\nqr.save('qrcode.png', scale=5, dark='darkred', data_dark='darkorange',\n        data_light='yellow')\n```\n\n----------------------------------------\n\nTITLE: Binary Matrix Pattern\nDESCRIPTION: A 13x13 matrix pattern consisting of 1s and 2s arranged in specific rows. The pattern shows predominantly 2s in the upper portion and 1s in the lower portion of the matrix.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/m2-timing-dark-and-light.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2222222211111\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n1222222222222\n1222222222222\n1222222222222\n1222222222222\n1222222222222\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Binary Data\nDESCRIPTION: This snippet shows the binary data representation of a QR code. Each line represents a row in the QR code matrix, where '2' likely indicates a black module and '0' a white module.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/m2-timing-light.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2222222220202\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n0222222222222\n2222222222222\n0222222222222\n2222222222222\n```\n\n----------------------------------------\n\nTITLE: Listing Test Dependencies for Segno Project in Python\nDESCRIPTION: This snippet enumerates the Python packages required to run tests for the Segno project. It includes testing frameworks like pytest, image processing libraries like Pillow, and QR code-related packages such as pypng and qrcode-artistic.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n# Requirements to run the tests\npytest\npytest-cov\npypng~=0.0.20\npyzbar~=0.1.8\nqrcode-artistic\nPillow\nimportlib-metadata>=3.6.0; python_version < '3.10'\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Pattern\nDESCRIPTION: A 13x13 grid of binary values (1s and 2s) that appears to represent a QR code matrix pattern or similar 2D barcode structure. The pattern shows a distinct border pattern with 1s forming a frame around inner values of 2s.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/m2-finder-dark.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1111111222222\n1222221222222\n1211121222222\n1211121222222\n1211121222222\n1222221222222\n1111111222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n```\n\n----------------------------------------\n\nTITLE: Documenting Helper Factories in RST\nDESCRIPTION: ReStructuredText directive for auto-documenting the segno.helpers module which contains high-level QR code factory functions.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/api.rst#2025-04-23_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: segno.helpers\n    :members:\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies for Segno\nDESCRIPTION: This snippet lists the required Python packages for the Segno project. It includes Django version 3.0 or higher and the Pillow imaging library.\nSOURCE: https://github.com/heuer/segno/blob/master/examples/django_qrcode/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: Plain Text\nCODE:\n```\nDjango>=3.0\nPillow\n```\n\n----------------------------------------\n\nTITLE: Flask Version Requirement\nDESCRIPTION: Specifies Flask framework dependency version using tilde (~) version constraint to allow patch-level updates while maintaining compatibility with Flask 2.3.x.\nSOURCE: https://github.com/heuer/segno/blob/master/examples/flask_qrcode/requirements.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nflask~=2.3.2\n```\n\n----------------------------------------\n\nTITLE: Defining Sphinx Documentation Structure with Toctree in reStructuredText\nDESCRIPTION: This RST code snippet defines a table of contents tree (toctree) for Sphinx documentation of the Segno CLI. It sets a maximum depth of 3 levels and includes a reference to the 'segno' document, which contains the actual command line interface documentation.\nSOURCE: https://github.com/heuer/segno/blob/master/docs/man/index.rst#2025-04-23_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 3\n\n   segno\n```\n\n----------------------------------------\n\nTITLE: ASCII QR Code Pattern Display\nDESCRIPTION: Represents a square matrix pattern using '2' and '0' characters, likely representing black and white modules of a QR code or similar 2D barcode. The pattern shows a 13x13 grid with a specific arrangement.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/m2-finder-light.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2222222222222\n2000002222222\n2022202222222\n2022202222222\n2022202222222\n2000002222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Pattern Example\nDESCRIPTION: Example of a QR code finder pattern represented as a 7x7 binary matrix where 0 indicates white modules and 1 indicates dark modules. This shows the standard finder pattern structure without including any quiet zone/border.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/README.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1111111\n1000001\n1011101\n1011101\n1011101\n1000001\n1111111\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Representation\nDESCRIPTION: A 21x21 matrix of 1s and 0s representing a QR code. In this representation, 1s typically indicate black modules (or filled squares) and 0s indicate white modules (or empty squares) in the QR code visual pattern.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking_mask-0.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111101100001111111\n100000101001001000001\n101110101001101011101\n101110101000001011101\n101110101010001011101\n100000100010001000001\n111111101010101111111\n000000001000000000000\n011010110000101011111\n010000001111000010001\n001101110110001011000\n011011010011010101110\n100010101011101110101\n000000001101001000101\n111111101010000101100\n100000100101101101000\n101110101010001111111\n101110100101010100010\n101110101000111101001\n100000101011010001011\n111111100000111100001\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Binary Matrix Pattern\nDESCRIPTION: A visual representation of a QR code matrix with 1s and 0s, where 1 represents dark modules (black) and 0 represents light modules (white). This pattern forms a scannable QR code when rendered properly.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/fig-22-mask-1.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n11111110101010101\n10000010100011100\n10111010111100011\n10111010111100011\n10111010100011100\n10000010100011100\n11111110111100011\n00000000111100011\n11111111100011100\n01100011100011100\n10011100011100011\n00011100011100011\n11100011100011100\n01100011100011100\n10011100011100011\n00011100011100011\n11100011100011100\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Matrix in ASCII\nDESCRIPTION: This ASCII representation shows a 21x21 QR code matrix. The '2' characters represent dark modules, while '0' characters represent light modules. The pattern includes standard QR code elements such as finder patterns and alignment patterns.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/v1-timing-light.txt#2025-04-23_snippet_0\n\nLANGUAGE: ASCII\nCODE:\n```\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222020222222222\n222222222222222222222\n222222222222222222222\n222222022222222222222\n222222222222222222222\n222222022222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n```\n\n----------------------------------------\n\nTITLE: QR Code Matrix Pattern in Text Format\nDESCRIPTION: A text-based representation of a QR code pattern using numbers where 1s and 2s define different module states within the QR code matrix.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/v1-format-dark-and-light.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n222222221222222222222\n222222221222222222222\n222222221222222222222\n222222221222222222222\n222222221222222222222\n222222221222222222222\n222222222222222222222\n222222221222222222222\n111111211222111111111\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222221222222222222\n222222221222222222222\n222222221222222222222\n222222221222222222222\n222222221222222222222\n222222221222222222222\n222222221222222222222\n```\n\n----------------------------------------\n\nTITLE: ASCII QR Code Pattern\nDESCRIPTION: A QR code pattern represented using ASCII numbers where '1' and '2' represent different pixel states in the QR code matrix. The pattern forms a square matrix with specific positioning markers.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/v7-version-dark-and-light.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n222222222222222222222222222222222211122222222\n222222222222222222222222222222222211122222222\n222222222222222222222222222222222211122222222\n222222222222222222222222222222222211122222222\n222222222222222222222222222222222211122222222\n222222222222222222222222222222222211122222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n111111222222222222222222222222222222222222222\n111111222222222222222222222222222222222222222\n111111222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n222222222222222222222222222222222222222222222\n```\n\n----------------------------------------\n\nTITLE: Binary QR Code Pattern Matrix\nDESCRIPTION: A 21x21 QR code matrix represented as binary digits where 1s represent dark modules and 0s represent light modules. This format is commonly used as input/output for QR code generation libraries.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking_mask-5.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n111111101001001111111\n100000101100101000001\n101110100111101011101\n101110100111101011101\n101110100100001011101\n100000100111101000001\n111111101010101111111\n000000000101100000000\n010000111110110000011\n101111010000111101110\n000011111000000101001\n101110000110100000000\n110111111110111011111\n000000001000111101011\n111111101100001011101\n100000100010010010111\n101110100100000001110\n101110100000100001100\n101110100101101000011\n100000101110100100101\n111111100110110010000\n```\n\n----------------------------------------\n\nTITLE: Representing QR Code Matrix in Plain Text\nDESCRIPTION: This snippet shows the raw binary data of a QR code matrix. Each line represents a row in the QR code, where 1 indicates a black module and 0 indicates a white module. This format is commonly used for storing or transmitting QR code data in a simple text-based format.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/issue-33-m1-12345.txt#2025-04-23_snippet_0\n\nLANGUAGE: plain text\nCODE:\n```\n11111110101\n10000010110\n10111010100\n10111010000\n10111010111\n10000010011\n11111110100\n00000000011\n11001110011\n01010001100\n11110000011\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Matrix in Text Format\nDESCRIPTION: This snippet shows a 15x15 matrix of binary digits representing a QR code. Each line corresponds to a row in the QR code, with 1s typically representing dark modules and 0s representing light modules.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/issue-33-m3-l-12345678901234567890123.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111101010101\n100000100110110\n101110100011111\n101110100100110\n101110101101010\n100000101010111\n111111101111110\n000000001000010\n111101100000100\n011110110100111\n110111110001111\n001111011000101\n110000101011000\n010011000101101\n100111010001111\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Binary Matrix in Plaintext\nDESCRIPTION: A binary representation of a QR code matrix where 1s represent dark modules and 0s represent light modules. This format is commonly used for debugging or as an intermediate representation before rendering a QR code in a visual format.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/seq-iso-04-01.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n111111101010001111111\n100000100111101000001\n101110100001101011101\n101110101101101011101\n101110101110101011101\n100000101000101000001\n111111101010101111111\n000000001101000000000\n100010111010011111001\n100001010000111110110\n111000101011100011000\n100000000101101011110\n000000101100100100111\n000000001110011100111\n111111101110011110000\n100000100010011100111\n101110101111001010111\n101110100101001011011\n101110100110111110000\n100000100111100010011\n111111101010100100111\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Pattern Matrix\nDESCRIPTION: A 21x21 binary matrix representing a QR code pattern. Each line contains a sequence of 1s and 0s where 1 represents a dark module and 0 represents a light module. The pattern includes the characteristic QR code finder patterns in the corners and timing patterns.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/iso-i2.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111100101101111111\n100000100111101000001\n101110101000001011101\n101110101100001011101\n101110101011101011101\n100000101000101000001\n111111101010101111111\n000000001001100000000\n101111100100101111100\n000101011010100101100\n001000110101010011111\n000010000100000111100\n000111111001010010000\n000000001011111001100\n111111100110101100000\n100000101011111000101\n101110101000100101100\n101110101100100100000\n101110101011010010100\n100000100000000110110\n111111101111010010100\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Representation in Plain Text\nDESCRIPTION: A raw QR code matrix represented as a 13x13 grid of binary digits (1s and 0s). Each line represents a row in the QR code, with 1s typically representing black modules (cells) and 0s representing white modules.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/iso-i3.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1111111010101\n1000001011101\n1011101001101\n1011101001111\n1011101011100\n1000001010001\n1111111001111\n0000000001100\n1101000010001\n0110101010101\n1110011111110\n0001010000110\n1110100110111\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Pattern\nDESCRIPTION: 21x21 binary matrix showing the module pattern of a QR code. Each row contains 21 digits where 1 represents a dark module and 0 represents a light module. This matrix defines the exact visual pattern to be rendered for the QR code.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/iso-i2_code_placement.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111100001001111111\n100000100011001000001\n101110100100101011101\n101110100000101011101\n101110100111001011101\n100000100100001000001\n111111101010101111111\n000000000101000000000\n000000100000000000000\n100001011110000001000\n101100110001110111011\n100110000000100011000\n100011111101110110100\n000000000111011101000\n111111100010001000100\n100000100111011100001\n101110100100000001000\n101110100000000000100\n101110100111110110000\n100000100100100010010\n111111100011110110000\n```\n\n----------------------------------------\n\nTITLE: QR Code Matrix Representation in Plaintext\nDESCRIPTION: A 21×21 QR code matrix represented as 1s and 0s, where 1s represent dark modules (black squares) and 0s represent light modules (white squares). This matrix defines the pattern for a specific QR code and could be used for generation, testing, or documentation purposes.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking_mask-1.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n111111100001001111111\n100000100100001000001\n101110100100101011101\n101110101101001011101\n101110100111001011101\n100000101111001000001\n111111101010101111111\n000000001101000000000\n011000100101101101000\n000101011010010111011\n011000100011011110010\n001110000110000000100\n110111111110111011111\n000000001000011101111\n111111100111010000110\n100000100000111000010\n101110100111011010101\n101110100000000001000\n101110101101101000011\n100000101110000100001\n111111100101101001011\n```\n\n----------------------------------------\n\nTITLE: QR Code Number Pattern Matrix\nDESCRIPTION: A 21x21 matrix representing a QR code pattern using numbers 1 and 2. The pattern shows a distinctive structure with position detection patterns in the corners and timing patterns along the edges.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/v1-finder-dark.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111122222221111111\n122222122222221222221\n121112122222221211121\n121112122222221211121\n121112122222221211121\n122222122222221222221\n111111122222221111111\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n222222222222222222222\n111111122222222222222\n122222122222222222222\n121112122222222222222\n121112122222222222222\n121112122222222222222\n122222122222222222222\n111111122222222222222\n```\n\n----------------------------------------\n\nTITLE: QR Code Matrix Pattern\nDESCRIPTION: A 29x29 matrix representing a QR code pattern using digits 0 and 2. The pattern shows a rectangular shape of 2's surrounded by a border of 0's, forming a basic QR code structure.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/v1-quietzone-4.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n00000000000000000000000000000\\n00000000000000000000000000000\\n00000000000000000000000000000\\n00000000000000000000000000000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00002222222222222222222220000\\n00000000000000000000000000000\\n00000000000000000000000000000\\n00000000000000000000000000000\\n00000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Representation\nDESCRIPTION: A 21x21 binary matrix representing a Version 1 QR code. The 1's and 0's correspond to black and white modules respectively, showing finder patterns in corners and the encoded data pattern.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking_mask-7.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n111111101100001111111\n100000100011001000001\n101110101000101011101\n101110101000001011101\n101110100000001011101\n100000101011001000001\n111111101010101111111\n000000001010000000000\n010101111001111101101\n010000001111000010001\n011111100100011001010\n010010011010011100111\n100010101011101110101\n000000001111011010111\n111111101011001100101\n100000101101101101000\n101110100000011101101\n101110101100011101011\n101110100000111101001\n100000101001000011001\n111111100001110101000\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Pattern\nDESCRIPTION: A 21x21 binary matrix representing a QR code pattern where 1s indicate black modules and 0s indicate white modules. Common in QR code generation and processing applications.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking_mask-6.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111100001001111111\n100000101100101000001\n101110100101101011101\n101110101111101011101\n101110101101001011101\n100000100100101000001\n111111101010101111111\n000000001101100000000\n010111101100111011010\n101111010000111101110\n001010110001001100000\n101101000101100011000\n110111111110111011111\n000000001000100101000\n111111100110011001111\n100000101010010010111\n101110101101001000111\n101110101011100010100\n101110100101101000011\n100000101110111100110\n111111100100100000010\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix\nDESCRIPTION: A 21x21 binary matrix representing a QR code pattern. Each line contains 21 digits where 1 represents a black module and 0 represents a white module. This forms the complete QR code data pattern including finder patterns, alignment patterns, and data/error correction codewords.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking-2.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111100010001111111\n100000101101001000001\n101110101001001011101\n101110100001101011101\n101110100001101011101\n100000100101001000001\n111111101010101111111\n000000000100000000000\n011101100000000000110\n100001011110110011111\n101110110101101000100\n011100010100010010110\n101100100001100000100\n000000001001010100110\n111111100010111101011\n100000101100011100110\n101110100001101100011\n101110101010010011010\n101110101110110011000\n100000101111001101000\n111111100000000100110\n```\n\n----------------------------------------\n\nTITLE: QR Code Matrix Pattern\nDESCRIPTION: A text-based representation of a QR code matrix using numbers where 2 represents one state and 1 represents another state. The pattern consists of 13 rows and 13 columns forming a square matrix.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/m2-timing-dark.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n2222222212121\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n1222222222222\n2222222222222\n1222222222222\n2222222222222\n1222222222222\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Representation\nDESCRIPTION: A 21x21 matrix representation of a QR code using 1s (black modules) and 0s (white modules). This pattern includes finder patterns in three corners, timing patterns, alignment patterns, and data/error correction modules.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/seq-iso-04-02.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n111111101000001111111\n100000100110001000001\n101110100011101011101\n101110101101101011101\n101110101010101011101\n100000101000101000001\n111111101010101111111\n000000001011000000000\n100010111100011111001\n000111001100111010110\n110101100000100001000\n100101011110011101110\n001010101111110100111\n000000001100111101111\n111111101100010101000\n100000100110111011111\n101110101111101100011\n101110100101111111001\n101110100101000110000\n100000100001100011111\n111111101000111000011\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Representation in Plaintext\nDESCRIPTION: A 41x41 binary matrix representing a QR code where 1 indicates a dark module and 0 indicates a light module. The QR code includes standard structural elements such as finder patterns in three corners and alignment patterns.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/iso-fig-29.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n00000000000000000000000000000000000000000\n00000000000000000000000000000000000000000\n00000000000000000000000000000000000000000\n00000000000000000000000000000000000000000\n00001111111011001100100100101011111110000\n00001000001000101110101110001010000010000\n00001011101000000011011011000010111010000\n00001011101010100001110001100010111010000\n00001011101011011000110100100010111010000\n00001000001011000101000011011010000010000\n00001111111010101010101010101011111110000\n00000000000010100000000111001000000000000\n00001000101111000011001000110111110010000\n00001001010001110010010001100001011000000\n00000100011000111110101010000110110010000\n00001011010111010100100000100100000000000\n00000011111100110101100100111010011000000\n00000110010001010010001111001101010010000\n00001010011110011111010011110001101110000\n00001001000100010001111001011111000000000\n00001100101111011100000111101111111000000\n00000100000101111000100010000100001110000\n00001111111111110101010001100100011110000\n00000011000100000001111001010101011100000\n00001111011110111010001110010100100010000\n00001001100001010010100101110001000010000\n00000001101111101110100100010110010000000\n00000010110100111010000111110111011110000\n00001110111110000101110010011111100000000\n00000000000011101100111111001000101000000\n00001111111010001101001010001010100110000\n00001000001000010100100010111000100000000\n00001011101011110110100000101111111000000\n00001011101000001110001111000000001010000\n00001011101001010101000010000101101000000\n00001000001000101101110001101010010010000\n00001111111011011010110100001111000110000\n00000000000000000000000000000000000000000\n00000000000000000000000000000000000000000\n00000000000000000000000000000000000000000\n00000000000000000000000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: QR Code Matrix Representation in Binary Format\nDESCRIPTION: A 21x21 matrix representation of a QR code using 1s and 0s, where 1 represents a black module and 0 represents a white module. This pattern includes the finder patterns in the corners, timing patterns, and the encoded data pattern.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/seq-iso-04-03.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n111111101101001111111\n100000100010001000001\n101110100111101011101\n101110101100001011101\n101110101010101011101\n100000101010101000001\n111111101010101111111\n000000001111000000000\n100010111110111111001\n100100011000101100110\n101101111001000111000\n010110011101001010010\n100110100011110101011\n000000001011110110011\n111111101110000110000\n100000100110110001011\n101110101111001101111\n101110100010101011110\n101110100000110110000\n100000100011111101011\n111111101100111110011\n```\n\n----------------------------------------\n\nTITLE: Binary QR Code Pattern Matrix\nDESCRIPTION: A 17x17 binary matrix representation of a QR code pattern. Each line contains 17 binary digits (1s and 0s) that represent the black and white modules of the QR code.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/issue-33-m3-l-to-m4-m-jump.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n11111110101010101\n10000010000011101\n10111010111011101\n10111010101010001\n10111010010110000\n10000010010010000\n11111110110011100\n00000000111100101\n10101111011111101\n01110100001000110\n11110111010100001\n01010010111110101\n10111111010110011\n00101101111101100\n11011010001110100\n00000110110101101\n11111001101111110\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Matrix as Binary String\nDESCRIPTION: This snippet shows the raw binary representation of a QR code matrix. Each line represents a row in the 33x33 QR code, with 1s and 0s indicating black and white squares respectively.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/iso-fig-29.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111101100110010010010101111111\n100000100010111010111000101000001\n101110100000001101101100001011101\n101110101010000111000110001011101\n101110101101100011010010001011101\n100000101100010100001101101000001\n111111101010101010101010101111111\n000000001010000000011100100000000\n100010111100001100100011011111001\n100101000111001001000110000101100\n010001100011111010101000011011001\n101101011101010010000010010000000\n001111110011010110010011101001100\n011001000101001000111100110101001\n101001111001111101001111000110111\n100100010001000111100101111100000\n110010111101110000011110111111100\n010000010111100010001000010000111\n111111111111010101000110010001111\n001100010000000111100101010101110\n111101111011101000111001010010001\n100110000101001010010111000100001\n000110111110111010010001011001000\n001011010011101000011111011101111\n111011111000010111001001111110000\n000000001110110011111100100010100\n111111101000110100101000101010011\n100000100001010010001011100010000\n101110101111011010000010111111100\n101110100000111000111100000000101\n101110100101010100001000010110100\n100000100010110111000110101001001\n111111101101101011010000111100011\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Binary Matrix Pattern\nDESCRIPTION: A 15x15 binary matrix representing a QR code pattern where 1s indicate black modules and 0s indicate white modules. This format is commonly used in QR code generation and processing algorithms.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/issue-33-m3-l-wikipedia.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111101010101\n100000100001010\n101110101111111\n101110101010011\n101110100001011\n100000101010101\n111111100100110\n000000000101001\n111111000010101\n000100110000111\n111011011110111\n010000100111010\n101111101110101\n010000100101110\n111011010101111\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Pattern\nDESCRIPTION: Binary representation of a QR code where 1s represent black modules and 0s represent white modules. The pattern shows the standard QR code structure including finder patterns in the corners and timing patterns.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/fig-22-mask-0.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n11111110101010101\n10000010100000000\n10111010111111111\n10111010100000000\n10111010111111111\n10000010100000000\n11111110111111111\n00000000100000000\n11111111111111111\n00000000000000000\n11111111111111111\n00000000000000000\n11111111111111111\n00000000000000000\n11111111111111111\n00000000000000000\n11111111111111111\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Representation\nDESCRIPTION: A 21x21 QR code matrix representation using 1s and 0s to depict the module pattern. This binary representation shows the standard QR code structure with the three finder patterns in the corners and the data/timing pattern throughout.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking_mask-3.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111100010001111111\n100000101101001000001\n101110101001001011101\n101110100001101011101\n101110100001101011101\n100000100101001000001\n111111101010101111111\n000000000010000000000\n011101100000000000110\n100001011110110011111\n101110110101101000100\n011100010100010010110\n101100100101100000100\n000000001001010100110\n111111100010111101011\n100000101100011100110\n101110100001101100011\n101110101010010011010\n101110101110110011000\n100000101111001101000\n111111100000000100110\n```\n\n----------------------------------------\n\nTITLE: QR Code Matrix in Binary Format\nDESCRIPTION: A 21x21 QR code matrix representation using binary digits. Each 1 represents a dark module (black square) and each 0 represents a light module (white square) in the QR code.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_datamasking_mask-4.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111100110001111111\n100000100100101000001\n101110101100001011101\n101110100010001011101\n101110101000001011101\n100000101111101000001\n111111101010101111111\n000000000010000000000\n010010101010110110100\n111101000010101111100\n100000111011100110101\n001001000001000111100\n110000111001111100111\n000000001000100101000\n111111100111101000001\n100000100111111111010\n101110101000011101101\n101110100000111001111\n101110100101010000100\n100000101001000011001\n111111100010101110011\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Matrix in Binary\nDESCRIPTION: This snippet shows a 11x11 matrix of binary digits (0s and 1s) that represents the structure of a QR code. Each line corresponds to a row in the QR code, with 1s typically representing dark modules and 0s representing light modules.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/issue-33-m1-50041.txt#2025-04-23_snippet_0\n\nLANGUAGE: Text\nCODE:\n```\n11111110101\n10000010110\n10111010010\n10111010101\n10111010011\n10000010001\n11111110010\n00000000111\n11000100000\n00100110101\n11111000110\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Representation\nDESCRIPTION: A binary representation of a QR code matrix where 1s represent black modules and 0s represent white modules. Each line corresponds to a row in the QR code. This format is commonly used for storing or transmitting QR code data patterns.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/issue-33-m1-1234.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n11111110101\n10000010100\n10111010111\n10111010000\n10111010111\n10000010011\n11111110100\n00000000011\n11001110011\n01000001001\n11111001011\n```\n\n----------------------------------------\n\nTITLE: QR Code Binary Matrix Data\nDESCRIPTION: This snippet shows the binary representation of a QR code matrix. Each line represents a row in the QR code, where 0 indicates a white module and 1 indicates a black module. The matrix appears to be 17x17 in size, which is consistent with the smallest QR code version (Version 1).\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/iso_6.8.2.2.txt#2025-04-23_snippet_0\n\nLANGUAGE: Binary\nCODE:\n```\n00000000000000001\n00000000000000001\n00000000000000001\n00000000000000000\n00000000000000000\n00000000000000001\n00000000000000001\n00000000000000000\n00000000000000001\n00000000000000000\n00000000000000001\n00000000000000000\n00000000000000001\n00000000000000000\n00000000000000000\n00000000000000001\n10011100101001000\n```\n\n----------------------------------------\n\nTITLE: QR Code Matrix Pattern in Numeric Format\nDESCRIPTION: A 21x21 matrix representation of a QR code using numbers 0, 1, and 2 where each digit represents a different module state in the QR code. The pattern includes finder patterns, timing patterns, and data modules.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/ref_matrix/thonky_format.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n111111101222201111111\n100000101222201000001\n101110101222201011101\n101110101222201011101\n101110100222201011101\n100000101222201000001\n111111101010101111111\n000000000222200000000\n110011100222200101111\n222222022222222222222\n222222122222222222222\n222222022222222222222\n222222122222222222222\n000000001222222222222\n111111100222222222222\n100000101222222222222\n101110101222222222222\n101110100222222222222\n101110100222222222222\n100000101222222222222\n111111101222222222222\n```\n\n----------------------------------------\n\nTITLE: QR Code Pattern ASCII Art Representation\nDESCRIPTION: A visual representation of a QR code pattern using ASCII characters. The pattern consists of 2's and 0's, forming the typical square matrix structure of a QR code. This representation is likely used for debugging, visualization, or testing purposes in the segno QR code library.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/m2-separator.txt#2025-04-23_snippet_0\n\nLANGUAGE: ascii\nCODE:\n```\n2222222022222\n2222222022222\n2222222022222\n2222222022222\n2222222022222\n2222222022222\n2222222022222\n0000000022222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n```\n\n----------------------------------------\n\nTITLE: Displaying QR Code Matrix in Binary Format\nDESCRIPTION: A 17x17 matrix representation of a QR code using 0s and 1s. The matrix shows a simple QR code pattern with a quiet zone (border of 0s) surrounding the data area (represented by 1s). This binary format is commonly used for QR code development and testing.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/m2-quietzone-2.txt#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n00000000000000000\n00000000000000000\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00111111111111100\n00000000000000000\n00000000000000000\n```\n\n----------------------------------------\n\nTITLE: Representing QR Code Matrix with Numeric Values\nDESCRIPTION: A text-based representation of a QR code where '0' typically indicates finder patterns or quiet zone areas and '2' indicates data cells. This matrix shows a 23x23 QR code with a border of zeros enclosing a grid of twos.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/v1-quietzone-1.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n00000000000000000000000\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n02222222222222222222220\n00000000000000000000000\n```\n\n----------------------------------------\n\nTITLE: Displaying Number Pattern in Text Format\nDESCRIPTION: A pattern display consisting of seven lines of alternating 1's and 2's followed by six lines of only 2's. Each line contains 13 digits.\nSOURCE: https://github.com/heuer/segno/blob/master/tests/feature_decompose/m2-finder-dark-and-light.txt#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n1111111222222\n1111111222222\n1111111222222\n1111111222222\n1111111222222\n1111111222222\n1111111222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n2222222222222\n```"
  }
]