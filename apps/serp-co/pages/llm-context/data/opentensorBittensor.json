[
  {
    "owner": "opentensor",
    "repo": "bittensor",
    "content": "TITLE: Installing Bittensor via Installer Script (Bash)\nDESCRIPTION: Installs Bittensor using a curl command to download and execute the installation script.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/opentensor/bittensor/master/scripts/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Bittensor SDK Installation by Querying Metagraph Axons in Python\nDESCRIPTION: This code snippet demonstrates how to verify a Bittensor SDK installation by accessing the metagraph and listing axon information for the first 10 neurons in subnet 1. It imports the bittensor module, creates a Metagraph instance for subnet 1, and retrieves information about the axons.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport bittensor\nmetagraph = bittensor.Metagraph(1)\nmetagraph.axons[:10]\n```\n\n----------------------------------------\n\nTITLE: Debugging with Bittensor Package (Python)\nDESCRIPTION: Comprehensive example of using the Bittensor package to create a wallet, connect to an axon, and send a prompt to an endpoint.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport bittensor\n\n# Bittensor's wallet maintenance class.\nwallet = bittensor.wallet()\n\n# Bittensor's chain interface.\nsubtensor = bittensor.subtensor()\n\n# Bittensor's chain state object.\nmetagraph = bittensor.metagraph(netuid=1)\n\n# Instantiate a Bittensor endpoint.\naxon = bittensor.axon(wallet=wallet, metagraph=metagraph)\n\n# Start servicing messages on the wire.\naxon.start()\n\n# Register this axon on a subnetwork\nsubtensor.serve_axon(netuid=1, axon=axon)\n\n# Connect to the axon running on slot 10, use the wallet to sign messages.\ndendrite = bittensor.text_prompting(keypair=wallet.hotkey, axon=metagraph.axons[10])\n\n# Send a prompt to this endpoint\ndendrite.forward(roles=['user'], messages=['Who is Rick James?'])\n```\n\n----------------------------------------\n\nTITLE: Installing Bittensor SDK with PyTorch\nDESCRIPTION: Command to install Bittensor SDK with PyTorch integration for machine learning capabilities.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install bittensor[torch]\n```\n\n----------------------------------------\n\nTITLE: Installing Bittensor SDK using pip with Virtual Environment\nDESCRIPTION: Installation method using pip within a Python virtual environment for better dependency management and isolation.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv bt_venv\nsource bt_venv/bin/activate\npip install bittensor\n```\n\n----------------------------------------\n\nTITLE: Installing Basic Bittensor SDK\nDESCRIPTION: Command to install the core Bittensor SDK package using pip after cloning the repository.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install bittensor\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with pytest in Bittensor\nDESCRIPTION: Command to run all tests in the Bittensor repository using pytest. This automatically discovers and executes all test files that start with 'test_'.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/TESTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npytest\n```\n\n----------------------------------------\n\nTITLE: Running Bittensor Integration and Unit Tests\nDESCRIPTION: This command demonstrates how to run integration and unit tests for the Bittensor SDK using pytest. Tests can be run in both interactive IDE mode or terminal mode with these commands.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/integration_tests\npytest tests/unit_tests\n```\n\n----------------------------------------\n\nTITLE: Mocking in Bittensor Tests with unittest.mock\nDESCRIPTION: Example of using unittest.mock to mock objects in Bittensor tests. This demonstrates mocking a wallet with its coldkey, coldkeypub, and hotkey components to test axon functionality.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/TESTING.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef test_axon_start(self):\n    mock_wallet = MagicMock(\n        spec=bittensor.Wallet,\n        coldkey=MagicMock(),\n        coldkeypub=MagicMock(\n            # mock ss58 address\n            ss58_address=\"5DD26kC2kxajmwfbbZmVmxhrY9VeeyR1Gpzy9i8wxLUg6zxm\"\n        ),\n        hotkey=MagicMock(\n            ss58_address=\"5CtstubuSoVLJGCXkiWRNKrrGg2DVBZ9qMs2qYTLsZR4q1Wg\"\n        ),\n    )\n    axon = bittensor.axon(wallet=mock_wallet, metagraph=None)\n    axon.start()\n    assert axon.server._state.stage == grpc._server._ServerStage.STARTED\n```\n\n----------------------------------------\n\nTITLE: Installing Bittensor SDK with Bash Script\nDESCRIPTION: One-step installation method using a Bash script that handles all dependencies including Python if not already present on the system.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/opentensor/bittensor/master/scripts/install.sh)\"\n```\n\n----------------------------------------\n\nTITLE: Registering and Running Bittensor on Testnet (Bash)\nDESCRIPTION: Shows how to register and run Bittensor on a testnet using the btcli command.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nbtcli register --netuid <testnet uid> --subtensor.chain_endpoint wss://test.finney.opentensor.ai:443\n```\n\n----------------------------------------\n\nTITLE: Querying Bittensor Network (Python)\nDESCRIPTION: Demonstrates how to query the Bittensor network using the Python API with a simple prompt.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport bittensor\nbittensor.trace()\n\n# Attempt to query through the foundation endpoint.\nprint(bittensor.prompt(\"Heraclitus was a \"))\n```\n\n----------------------------------------\n\nTITLE: Upgrading Bittensor SDK with pip\nDESCRIPTION: Command to upgrade an existing Bittensor SDK installation to the latest version using pip.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m pip install --upgrade bittensor\n```\n\n----------------------------------------\n\nTITLE: Cloning Bittensor SDK Repository\nDESCRIPTION: Command to clone the Bittensor SDK source code repository from GitHub for a source installation.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/opentensor/bittensor.git\n```\n\n----------------------------------------\n\nTITLE: Installing Bittensor from Source (Bash)\nDESCRIPTION: Clones the Bittensor repository and installs it from source using pip.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/opentensor/bittensor.git\npython3 -m pip install -e bittensor/\n```\n\n----------------------------------------\n\nTITLE: Installing Bittensor via pip (Bash)\nDESCRIPTION: Installs Bittensor using pip, the Python package installer.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install bittensor\n```\n\n----------------------------------------\n\nTITLE: Testing Bittensor Installation (Python)\nDESCRIPTION: Verifies the Bittensor installation by importing the package and printing its version.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\npython3 -c \"import bittensor; print(bittensor.__version__)\"\n```\n\n----------------------------------------\n\nTITLE: Verifying Bittensor SDK Version using Module\nDESCRIPTION: Command to verify the installed Bittensor SDK version by running the module directly.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m bittensor\n```\n\n----------------------------------------\n\nTITLE: Verifying Bittensor SDK Version using Python Interpreter\nDESCRIPTION: Python code snippet to verify the installed Bittensor SDK version from within the Python interpreter.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport bittensor as bt\nprint( bt.__version__ )\n```\n\n----------------------------------------\n\nTITLE: Basic Test Structure for Bittensor in Python\nDESCRIPTION: Example of a basic test structure for Bittensor using pytest. It demonstrates how to set up objects, call functions being tested, and assert expected outcomes.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/TESTING.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nimport bittensor\n\ndef test_some_functionality():\n    # Setup any necessary objects or state.\n    wallet = bittensor.wallet()\n\n    # Call the function you're testing.\n    result = wallet.create_new_coldkey()\n\n    # Assert that the function behaved as expected.\n    assert result is not None\n```\n\n----------------------------------------\n\nTITLE: Enabling Debug and Trace Logging in Bittensor (Python)\nDESCRIPTION: Demonstrates how to enable debug and trace logging modes in Bittensor for more verbose output.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport bittensor\nbittensor.trace() # lowest level of granularity, best for figuring out what went wrong.\nbittensor.debug() # for most everything else that you don't want to see normally at runtime\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Docker Runner in Bittensor\nDESCRIPTION: This shows how to run end-to-end (E2E) tests using the default Docker runner. This method doesn't require preliminary compilation, executes quickly, but requires Docker to be installed on the system.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/e2e_tests\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Legacy Runner in Bittensor\nDESCRIPTION: This demonstrates how to run E2E tests using the legacy runner which requires specifying the path to localnet.sh script. This method compiles code from the subtensor repository for testing.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nLOCALNET_SH_PATH=/path/to/your/localnet.sh pytest tests/e2e_tests\n```\n\n----------------------------------------\n\nTITLE: Running E2E Tests with Build Skipping in Bittensor\nDESCRIPTION: This shows how to run E2E tests while skipping the rebuild process for each test. It uses the BUILD_BINARY=0 environment variable along with the path to localnet.sh.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nBUILD_BINARY=0 LOCALNET_SH_PATH=/path/to/your/localnet.sh pytest tests/e2e_tests\n```\n\n----------------------------------------\n\nTITLE: Custom Logging in Bittensor (Python)\nDESCRIPTION: Shows how to use custom logging in Bittensor for debugging wallet and metagraph operations.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Bittensor's wallet maintenance class.\nwallet = bittensor.wallet()\n\nbittensor.logging.debug( f\"wallet keypair: {wallet.hotkey}\" )\n\n...\n\n# Bittensor's chain state object.\nmetagraph = bittensor.metagraph(netuid=1)\n\nbittensor.logging.trace( f\"metagraph created! netuid {metagraph.netuid}\" )\n```\n\n----------------------------------------\n\nTITLE: Forcing Legacy Runner for E2E Tests in Bittensor\nDESCRIPTION: This command demonstrates how to force the use of the legacy runner even with Docker installed on your system by setting USE_DOCKER=0. It also skips rebuilding and requires specifying the localnet.sh path.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\nUSE_DOCKER=0 BUILD_BINARY=0 LOCALNET_SH_PATH=/path/to/your/localnet.sh pytest tests/e2e_tests\n```\n\n----------------------------------------\n\nTITLE: Running Individual Test Function in Bittensor\nDESCRIPTION: Command to run a specific test function within a test file. This example runs only the test_create_new_coldkey function from the test_wallet.py file.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/TESTING.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_wallet.py::test_create_new_coldkey\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Coverage Report in Bittensor\nDESCRIPTION: Command to run tests with the pytest-cov plugin to generate a coverage report for the Bittensor codebase, showing the percentage of code covered by tests.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/TESTING.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npytest --cov=bittensor\n```\n\n----------------------------------------\n\nTITLE: Running Pre-configured Bittensor Miner (Bash)\nDESCRIPTION: Demonstrates how to run a pre-configured Bittensor miner using Python.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\npython3 bittensor/neurons/text_prompting/miners/GPT4ALL/neuron.py --netuid <subnetwork uid>\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test File in Bittensor\nDESCRIPTION: Command to run a specific test file in the Bittensor repository. This example demonstrates running tests in the test_wallet.py file.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/TESTING.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npytest tests/test_wallet.py\n```\n\n----------------------------------------\n\nTITLE: Registering Bittensor Miner on Mainnet (Bash)\nDESCRIPTION: Demonstrates how to register a Bittensor miner on the mainnet using btcli.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbtcli register --netuid <subnetwork uid>\n```\n\n----------------------------------------\n\nTITLE: Viewing Bittensor Slot Overview (Bash)\nDESCRIPTION: Shows how to view the overview of a specific Bittensor slot using btcli.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nbtcli overview --netuid <subnetwork uid>\n```\n\n----------------------------------------\n\nTITLE: Installing Bittensor SDK with PyTorch (Alternative Syntax)\nDESCRIPTION: Alternative command syntax for environments where square brackets might cause issues when installing with PyTorch.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npip install \"bittensor[torch]\"\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Metagraph Axons Query in Bittensor\nDESCRIPTION: This shows the expected console output when querying the metagraph axons information. The output displays a list of AxonInfo objects containing neuron endpoint information, including IP addresses, ports, keys, and metadata for the first 10 neurons in the network.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/README.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n[AxonInfo( /ipv4/3.139.80.241:11055, 5GqDsK6SAPyQtG243hbaKTsoeumjQQLhUu8GyrXikPTmxjn7, 5D7u5BTqF3j1XHnizp9oR67GFRr8fBEFhbdnuVQEx91vpfB5, 600 ), AxonInfo( /ipv4/8.222.132.190:5108, 5CwqDkDt1uk2Bngvf8avrapUshGmiUvYZjYa7bfA9Gv9kn1i, 5HQ9eTDorvovKTxBc9RUD22FZHZzpy1KRfaxCnRsT9QhuvR6, 600 ), AxonInfo( /ipv4/34.90.71.181:8091, 5HEo565WAy4Dbq3Sv271SAi7syBSofyfhhwRNjFNSM2gP9M2, 5ChuGqW2cxc5AZJ29z6vyTkTncg75L9ovfp8QN8eB8niSD75, 601 ), AxonInfo( /ipv4/64.247.206.79:8091, 5HK5tp6t2S59DywmHRWPBVJeJ86T61KjurYqeooqj8sREpeN, 5E7W9QXNoW7se7B11vWRMKRCSWkkAu9EYotG5Ci2f9cqV8jn, 601 ), AxonInfo( /ipv4/51.91.30.166:40203, 5EXYcaCdnvnMZbozeknFWbj6aKXojfBi9jUpJYHea68j4q1a, 5CsxoeDvWsQFZJnDCyzxaNKgA8pBJGUJyE1DThH8xU25qUMg, 601 ), AxonInfo( /ipv4/149.137.225.62:8091, 5F4tQyWrhfGVcNhoqeiNsR6KjD4wMZ2kfhLj4oHYuyHbZAc3, 5Ccmf1dJKzGtXX7h17eN72MVMRsFwvYjPVmkXPUaapczECf6, 600 ), AxonInfo( /ipv4/38.147.83.11:8091, 5Hddm3iBFD2GLT5ik7LZnT3XJUnRnN8PoeCFgGQgawUVKNm8, 5DCQw11aUW7bozAKkB8tB5bHqAjiu4F6mVLZBdgJnk8dzUoV, 610 ), AxonInfo( /ipv4/38.147.83.30:41422, 5HNQURvmjjYhTSksi8Wfsw676b4owGwfLR2BFAQzG7H3HhYf, 5EZUTdAbXyLmrs3oiPvfCM19nG6oRs4X7zpgxG5oL1iK4MAh, 610 ), AxonInfo( /ipv4/54.227.25.215:10022, 5DxrZuW8kmkZPKGKp1RBVovaP5zHtPLDHYc5Yu82Z1fWqK5u, 5FhXUSmSZ2ec7ozRSA8Bg3ywmGwrjoLLzsXjNcwmZme2GcSC, 601 ), AxonInfo( /ipv4/52.8.243.76:40033, 5EnZN591jjsKKbt3yBtfGKWHxhxRH9cJonqTKRT5yTRUyNon, 5ChzhHyGmWwEdHjuvAxoUifHEZ6xpUjR67fDd4a42UrPysyB, 601 )]\n```\n\n----------------------------------------\n\nTITLE: Installing pytest-cov for Test Coverage in Bittensor\nDESCRIPTION: Command to install the pytest-cov plugin, which is used to measure test coverage in the Bittensor codebase.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/TESTING.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\npip install pytest-cov\n```\n\n----------------------------------------\n\nTITLE: Setting Breakpoint in Python (Python)\nDESCRIPTION: Shows how to set a breakpoint in Python code for debugging purposes using pdb.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# some code ...\nimport pdb; pdb.set_trace() # breakpoint!\n# more code ...\n```\n\n----------------------------------------\n\nTITLE: Using Silver Searcher (ag) for String Searching (Bash)\nDESCRIPTION: Demonstrates how to use the Silver Searcher (ag) tool to search for a specific string in the codebase.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\n$ ag \"query_subtensor\"\n\n>>> bittensor/_subtensor/subtensor_mock.py\n>>> 165:    e.g. We mock `Subtensor.query_subtensor` instead of all query methods.\n>>> 536:    def query_subtensor(\n>>> 1149:        curr_total_hotkey_stake = self.query_subtensor(\n>>> 1154:        curr_total_coldkey_stake = self.query_subtensor(\n>>> 1345:            return self.query_subtensor(name=name, block=block, params=[netuid]).value\n>>> \n>>> bittensor/_subtensor/subtensor_impl.py\n>>> 902:    def query_subtensor(\n>>> 1017:        return self.query_subtensor(\"Rho\", block, [netuid]).value\n...\n```\n\n----------------------------------------\n\nTITLE: Merging Feature Branch into Staging for Bittensor\nDESCRIPTION: Series of Git commands to merge a completed feature branch into the staging branch. This process integrates new features into the main development branch.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEVELOPMENT_WORKFLOW.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout staging\ngit merge --no-ff feature/my-feature\ngit push origin staging\ngit branch -d feature/my-feature\n```\n\n----------------------------------------\n\nTITLE: Finishing a Release Branch in Bittensor\nDESCRIPTION: Sequence of Git commands to finalize a release branch, merge it into master and staging, and create a version tag. This process releases stable code and generates a new version for Bittensor.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEVELOPMENT_WORKFLOW.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit merge --no-ff release/3.4.0/optional-descriptive-message\ngit tag -a v3.4.0 -m \"Releasing v3.4.0: some comment about it\"\ngit push origin master\ngit push origin --tags\ngit checkout staging\ngit merge --no-ff release/3.4.0/optional-descriptive-message\n```\n\n----------------------------------------\n\nTITLE: Running Release Script to Apply Changes\nDESCRIPTION: Shows how to execute the release script with the apply flag and GitHub token to perform an actual release and publish changes.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/RELEASE_GUIDELINES.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/release/release.sh --apply --github-token $GITHUB_ACCESS_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Creating a Release Branch for Bittensor\nDESCRIPTION: Commands to create a release branch from staging and update the version number. This prepares Bittensor for a new release version.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEVELOPMENT_WORKFLOW.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b release/3.4.0/descriptive-message/creator's_name staging\n./scripts/update_version.sh major|minor\ngit commit -a -m \"Updated version to 3.4.0\"\n```\n\n----------------------------------------\n\nTITLE: Creating a Hotfix Branch for Bittensor\nDESCRIPTION: Commands to create a hotfix branch from master, update the patch version, and commit the fix. This is used for quick fixes in the production environment.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEVELOPMENT_WORKFLOW.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b hotfix/3.3.4/descriptive-message/creator's-name master\n./scripts/update_version.sh patch\ngit commit -a -m \"Updated version to 3.3.4\"\ngit commit -m \"Fixed critical production issue X\"\n```\n\n----------------------------------------\n\nTITLE: Finishing a Hotfix Branch in Bittensor\nDESCRIPTION: Sequence of Git commands to finalize a hotfix branch, merge it into master and staging, create a version tag, and clean up. This process applies critical fixes to both production and development branches.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEVELOPMENT_WORKFLOW.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout master\ngit merge --no-ff hotfix/3.3.4/optional-descriptive-message\ngit tag -a v3.3.4 -m \"Releasing v3.3.4: descriptive comment about the hotfix\"\ngit push origin master\ngit push origin --tags\ngit checkout staging\ngit merge --no-ff hotfix/3.3.4/descriptive-message/creator's-name\ngit push origin staging\ngit branch -d hotfix/3.3.4/optional-descriptive-message\n```\n\n----------------------------------------\n\nTITLE: Creating a Feature Branch in Git for Bittensor Development\nDESCRIPTION: Command to create a new feature branch from the staging branch in Git. This is the first step in developing a new feature for Bittensor.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEVELOPMENT_WORKFLOW.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b feature/my-feature staging\n```\n\n----------------------------------------\n\nTITLE: Checking Bittensor Version from Source Code\nDESCRIPTION: Reference to the location of the version information in the Bittensor codebase. This can be used to include version information in bug reports.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/CONTRIBUTING.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n[`bittensor/bittensor/__init.py`](https://github.com/opentensor/bittensor/blob/master/bittensor/__init__.py#L30)\n```\n\n----------------------------------------\n\nTITLE: Merging Upstream Changes in Git\nDESCRIPTION: This code snippet demonstrates how to merge the latest changes from the upstream repository before making a pull request. It adds the upstream remote, fetches changes, merges them into the current branch, and pushes the changes to the origin.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit remote add upstream https://github.com/opentensor/bittensor.git\ngit fetch upstream\ngit merge upstream/<your-branch-name>\ngit push origin <your-branch-name>\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub Access Token Using Pass\nDESCRIPTION: Demonstrates how to securely retrieve a GitHub personal access token using the pass password manager to avoid exposing secrets in shell history.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/RELEASE_GUIDELINES.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_ACCESS_TOKEN=$(pass github/your_personal_token_with_permisions)\n```\n\n----------------------------------------\n\nTITLE: Retrieving GitHub Access Token Using Custom Method\nDESCRIPTION: Shows a template command for retrieving a GitHub personal access token using any custom secure method.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/RELEASE_GUIDELINES.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nGITHUB_ACCESS_TOKEN=$(whatever you need to get the token safely)\n```\n\n----------------------------------------\n\nTITLE: Running Release Script for Dry Run\nDESCRIPTION: Demonstrates how to execute the release script in dry run mode without applying changes, to preview what would happen during a release.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/RELEASE_GUIDELINES.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./scripts/release/release.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Silver Searcher (ag) for String Searching (Bash)\nDESCRIPTION: Installs the Silver Searcher (ag) tool for fast and convenient string searching in Unix systems.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/DEBUGGING.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\napt-get install silversearcher-ag\n```\n\n----------------------------------------\n\nTITLE: Using Git's --fixup Option\nDESCRIPTION: Command for creating a fixup commit that is intended to be squashed into a previous commit. This is useful for adding minor fixes to existing commits while maintaining a clean history.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/STYLE.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i --autosquash HEAD~5\n```\n\n----------------------------------------\n\nTITLE: Squashing Commits for Pull Requests\nDESCRIPTION: Command for interactive rebasing to squash multiple commits into one before merging a pull request. This helps maintain a clean and understandable commit history in the main branch.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/STYLE.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ngit rebase -i HEAD~n\n```\n\n----------------------------------------\n\nTITLE: Example of a Well-Structured Atomic Commit Message for PRs\nDESCRIPTION: Template for an effective commit message after squashing commits for a pull request. It includes a clear title in imperative mood, detailed description, and reference to the issue it resolves.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/STYLE.md#2025-04-22_snippet_6\n\nLANGUAGE: plaintext\nCODE:\n```\nAdd feature X\n\nThis commit introduces feature X which does A, B, and C. It adds \nnew files for layout, updates the code behind the file, and introduces\nnew resources. This change is important because it allows users to \nperform task Y more efficiently. \n\nIt includes:\n- Creation of new layout file\n- Updates in the code-behind file\n- Addition of new resources\n\nResolves: #123\n```\n\n----------------------------------------\n\nTITLE: Sample Git Commit Message Structure\nDESCRIPTION: A model Git commit message template showing the proper format with subject line, body, and references to issues. This template demonstrates how to structure commits with a 50-character summary, detailed explanation, and proper formatting.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/STYLE.md#2025-04-22_snippet_0\n\nLANGUAGE: git\nCODE:\n```\nSummarize changes in around 50 characters or less\n\nMore detailed explanatory text, if necessary. Wrap it to about 72\ncharacters or so. In some contexts, the first line is treated as the\nsubject of the commit and the rest of the text as the body. The\nblank line separating the summary from the body is critical (unless\nyou omit the body entirely); various tools like `log`, `shortlog`\nand `rebase` can get confused if you run the two together.\n\nExplain the problem that this commit is solving. Focus on why you\nare making this change as opposed to how (the code explains that).\nAre there side effects or other unintuitive consequences of this\nchange? Here's the place to explain them.\n\nFurther paragraphs come after blank lines.\n\n - Bullet points are okay, too\n\n - Typically a hyphen or asterisk is used for the bullet, preceded\n   by a single space, with blank lines in between, but conventions\n   vary here\n\nIf you use an issue tracker, put references to them at the bottom,\nlike this:\n\nResolves: #123\nSee also: #456, #789\n```\n\n----------------------------------------\n\nTITLE: Example of a Well-Structured Git Commit Message\nDESCRIPTION: A model Git commit showing proper structure with header, body, and detailed explanation of changes. This example from Bitcoin Core demonstrates how to effectively explain what changed and why.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/STYLE.md#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\ncommit eb0b56b19017ab5c16c745e6da39c53126924ed6\nAuthor: Pieter Wuille <pieter.wuille@gmail.com>\nDate:   Fri Aug 1 22:57:55 2014 +0200\n\n   Simplify serialize.h's exception handling\n\n   Remove the 'state' and 'exceptmask' from serialize.h's stream\n   implementations, as well as related methods.\n\n   As exceptmask always included 'failbit', and setstate was always\n   called with bits = failbit, all it did was immediately raise an\n   exception. Get rid of those variables, and replace the setstate\n   with direct exception throwing (which also removes some dead\n   code).\n\n   As a result, good() is never reached after a failure (there are\n   only 2 calls, one of which is in tests), and can just be replaced\n   by !eof().\n\n   fail(), clear(n) and exceptions() are just never called. Delete\n   them.\n```\n\n----------------------------------------\n\nTITLE: Git Command for Quick Commit with Message\nDESCRIPTION: Shows how to use the git commit command with the -m flag to create a commit with a simple message. This is useful for straightforward changes that don't require detailed explanation.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/STYLE.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ git commit -m\"Fix typo in introduction to user guide\"\n```\n\n----------------------------------------\n\nTITLE: Git Log Output Example\nDESCRIPTION: Demonstrates the output of the git log command showing a well-formatted commit with subject and body. This example illustrates how properly structured commits appear in the git history.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/STYLE.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ git log\ncommit 42e769bdf4894310333942ffc5a15151222a87be\nAuthor: Kevin Flynn <kevin@flynnsarcade.com>\nDate:   Fri Jan 01 00:00:00 1982 -0200\n\n Derezz the master control program\n\n MCP turned out to be evil and had become intent on world domination.\n This commit throws Tron's disc into MCP (causing its deresolution)\n and turns it back into a chess game.\n```\n\n----------------------------------------\n\nTITLE: Defining Conceptual Review Terms in Markdown\nDESCRIPTION: This snippet defines the terms used in conceptual reviews for pull requests, including 'Concept (N)ACK' and 'Approach (N)ACK'. It explains the meaning of these terms and the requirement for reasoning behind NACKs.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/CODE_REVIEW_DOCS.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n * `Concept (N)ACK`, meaning \"I do (not) agree with the general goal of this pull\\n   request\",\\n * `Approach (N)ACK`, meaning `Concept ACK`, but \"I do (not) agree with the\\n   approach of this change\".\n```\n\n----------------------------------------\n\nTITLE: Describing Code Review Language in Markdown\nDESCRIPTION: This snippet outlines the language used in code review comments, including how to indicate testing, agreement for merging, and the definition of a 'nit'. It provides a standard format for reviewers to express their level of review and testing.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/CODE_REVIEW_DOCS.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n  - \"I have tested the code\", involving change-specific manual testing in\\n    addition to running the unit, functional, or fuzz tests, and in case it is\\n    not obvious how the manual testing was done, it should be described;\\n  - \"I have not tested the code, but I have reviewed it and it looks\\n    OK, I agree it can be merged\";\\n  - A \"nit\" refers to a trivial, often non-blocking issue.\n```\n\n----------------------------------------\n\nTITLE: Using Markdown Code Blocks for Snippets in GitHub Issues\nDESCRIPTION: Example reference to Markdown code blocks for including code snippets in GitHub issues. This is recommended when providing examples in bug reports or enhancement suggestions.\nSOURCE: https://github.com/opentensor/bittensor/blob/master/contrib/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n[Markdown code blocks](https://help.github.com/articles/markdown-basics/#multiple-lines)\n```"
  }
]