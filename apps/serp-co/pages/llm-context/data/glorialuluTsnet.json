[
  {
    "owner": "glorialulu",
    "repo": "tsnet",
    "content": "TITLE: Running Method of Characteristics Transient Simulation via TSNet (Python)\nDESCRIPTION: This code initializes and executes a transient water network simulation using TSNet's MOCSimulator class. It shows how to set up the simulation to save results under a specified object name, which are persisted for retrieval. The primary dependency is a prepared transient model object ('tm'); 'results_obj' determines how simulation results are stored. The function returns an updated transient model with simulation results, and creates a file named '<results_obj>.obj'.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nresults_obj = 'Tnet1' # name of the object for saving simulation results\\ntm = tsnet.simulation.MOCSimulator(tm, results_obj)\n```\n\n----------------------------------------\n\nTITLE: Building Transient Model from EPANET INP File using TSNet (Python)\nDESCRIPTION: This Python code snippet demonstrates constructing a transient network model from an EPANET-format INP file using TSNet. The 'TransientModel' constructor reads all relevant sections and features from the file, enabling subsequent transient simulation steps. Make sure TSNet is installed and that the INP file path is correct. The input parameter 'inp_file' specifies the location of the network file. This operation outputs a transient model object with inherited and extended features required for simulation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ninp_file = 'examples/networks/Tnet1.inp'\\ntm = tsnet.network.TransientModel(inp_file)\n```\n\n----------------------------------------\n\nTITLE: Initializing Simulation State Using TSNet Initializer (Python)\nDESCRIPTION: This example initializes a water network simulation at a specified time using TSNet's Initializer class. The code snippet demonstrates setting up initial (steady-state) conditions via WNTR-based solvers, choosing between demand-driven ('DD') and pressure-driven ('PDD') simulation engines. Requires the TSNet and WNTR packages, and a 'tm' transient model object created as shown previously. The variable 't0' is the time at which initialization occurs, and 'engine' selects the hydraulic solver. Outputs an updated transient model ready for transient simulation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nt0 = 0. # initialize the simulation at 0 [s]\\nengine = 'DD' # demand driven simulator\\ntm = tsnet.simulation.Initializer(tm, t0, engine)\n```\n\n----------------------------------------\n\nTITLE: Accessing Link Simulation Results in tsnet (Python)\nDESCRIPTION: This code demonstrates retrieving simulation results for a specific network link ('LINK-40') using the `get_link` method of a `tsnet.network.model.TransientModel` object (`tm`). It accesses attributes like head, velocity, and flowrate at both the start and end nodes of the link. Results are typically NumPy arrays representing the time history.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/results.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\npipe = tm.get_link('LINK-40')\nstart_head = pipe.start_node_head\nend_head = pipe.end_node_head\nstart_velocity = pipe.start_node_velocity\nend_velocity = pipe.end_node_velocity\nstart_flowrate = pipe.start_node_flowrate\nend_flowrate = pipe.end_node_flowrate\n```\n\n----------------------------------------\n\nTITLE: Importing TSNet and Initializing Model (Pump Shutdown)\nDESCRIPTION: Imports the TSNet library, reads the network configuration from an EPANET INP file ('Tnet2.inp'), and creates a transient model object 'tm'. This is the initial setup step for the pump shutdown simulation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet2_pump_shutdown.py\n    :lines: 1-4\n```\n\n----------------------------------------\n\nTITLE: Retrieving Simulation Time Step and Timestamps in tsnet (Python)\nDESCRIPTION: This snippet retrieves the simulation time step (in seconds) and the array of simulation timestamps (in seconds from the start) stored within a `tsnet.network.model.TransientModel` object (`tm`). These values are crucial for correlating simulation results with time. `dt` is a float, and `tt` is a NumPy array.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/results.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndt = tm.time_step\ntt = tm.simulation_timestamps\n```\n\n----------------------------------------\n\nTITLE: Computing Steady State Initial Conditions (Pump Shutdown)\nDESCRIPTION: Calculates the steady-state hydraulic conditions of the network ('Tnet2'). These results serve as the starting point for the transient simulation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet2_pump_shutdown.py\n    :lines: 20-23\n```\n\n----------------------------------------\n\nTITLE: Importing TSNet and Initializing Model (Valve Closure)\nDESCRIPTION: Imports the TSNet library, reads the network configuration from an EPANET INP file ('Tnet1.inp'), and creates a transient model object 'tm'. This is the initial setup step for the valve closure simulation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet1_valve_closure.py\n    :lines: 1-4\n```\n\n----------------------------------------\n\nTITLE: Running Transient Simulation (Valve Closure)\nDESCRIPTION: Executes the transient simulation based on the previously defined parameters and operating rules. Specifies the filename ('Tnet1') for saving the simulation results.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet1_valve_closure.py\n    :lines: 26-28\n```\n\n----------------------------------------\n\nTITLE: Running Method of Characteristics Simulation with Custom Friction Model via TSNet (Python)\nDESCRIPTION: This snippet illustrates executing a transient simulation using TSNet while specifying the friction model ('steady', 'quasi-steady', or 'unsteady'). The friction parameter controls headloss calculations as described in the documentation, affecting model fidelity and computational cost. Dependencies are identical to other simulation runsâ€”a previously configured transient model and a valid result object name. Changing the 'friction' variable customizes the behavior of the simulation engine.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nresults_obj = 'Tnet3' # name of the object for saving simulation results\\nfriction = 'unsteady' # or \"steady\" or \"quasi-steady\", by default \"steady\"\\ntm = tsnet.simulation.MOCSimulator(tm, results_obj, friction)\n```\n\n----------------------------------------\n\nTITLE: Importing TSNet and Initializing Model (Burst/Leak)\nDESCRIPTION: Imports the TSNet library, reads the network configuration from an EPANET INP file ('Tnet3.inp'), and creates a transient model object 'tm'. This initializes the setup for the burst and leak simulation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 1-4\n```\n\n----------------------------------------\n\nTITLE: Running Transient Simulation (Burst/Leak)\nDESCRIPTION: Executes the transient simulation considering both the background leak and the defined burst event. Specifies the filename ('Tnet3') for saving the simulation results object.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 29-31\n```\n\n----------------------------------------\n\nTITLE: Running Transient Simulation (Pump Shutdown)\nDESCRIPTION: Executes the transient simulation for the pump shutdown scenario. Specifies the filename ('Tnet2') for saving the simulation results object.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet2_pump_shutdown.py\n    :lines: 25-27\n```\n\n----------------------------------------\n\nTITLE: Accessing Node Simulation Results in tsnet (Python)\nDESCRIPTION: This snippet shows how to retrieve simulation results like head, emitter discharge, and demand discharge for a specific network node ('JUNCTION-105') using the `get_node` method and attribute access on the returned node object within the `tsnet` library. It assumes `tm` is an instance of `tsnet.network.model.TransientModel` holding the results. The results are returned as NumPy arrays representing time series data.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/results.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nnode = tm.get_node['JUNCTION-105']\nhead = node.head\nemitter_discharge = node.emitter_discharge\ndemand_discharge = node.demand_discharge\n```\n\n----------------------------------------\n\nTITLE: Defining Valve Operating Rules (Valve Closure)\nDESCRIPTION: Specifies the operating rules for the valve closure event. Sets the valve closure time 'tc' (how long it takes), the start time 'ts', the final opening percentage 'se', and the closure curve shape 'm' (1 for linear, 2 for quadratic).\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet1_valve_closure.py\n    :lines: 13-19\n```\n\n----------------------------------------\n\nTITLE: Plotting Flow Rate Results in Pipe P2 (Valve Closure)\nDESCRIPTION: Retrieves and plots the time history of the flow rate at both the start and end nodes of pipe 'P2' from the transient simulation results. Uses matplotlib for plotting.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet1_valve_closure.py\n    :lines: 45-58\n```\n\n----------------------------------------\n\nTITLE: Setting Simulation Time and Time Step - Python\nDESCRIPTION: This Python snippet demonstrates how to set the simulation period (tf) and time step (dt) for a transient simulation in a pipe network using the Method of Characteristics (MOC) through the tm.set_time function. Required dependencies include an instance tm with a set_time method; the dt parameter is optional and, if omitted, defaults to the system-calculated maximum dt based on physical constraints. Key parameters: tf (simulation period in seconds), dt (time step in seconds). Input: user-defined tf and optional dt. Output: simulation time configuration in the MOC framework. If the user provides dt above the allowed maximum, an error is raised.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndt = 0.1  # time step [s], if not given, use the maximum allowed dt\\ntf = 60   # simulation period [s]\\ntm.set_time(tf,dt)\n```\n\n----------------------------------------\n\nTITLE: Plotting Velocity Results in PIPE-109 (Pump Shutdown)\nDESCRIPTION: Retrieves and plots the time history of flow velocity at the start and end nodes of 'PIPE-109' following the pump shutdown. Uses matplotlib for plotting.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet2_pump_shutdown.py\n    :lines: 44-55\n```\n\n----------------------------------------\n\nTITLE: Loading Saved tsnet Simulation Results with Pickle (Python)\nDESCRIPTION: This snippet shows how to load a saved `tsnet.network.model.TransientModel` object, which includes network information, operational rules, and simulation results, from a binary file (e.g., 'results.obj'). It utilizes the `pickle` module to deserialize the object, allowing users to access previously computed results without re-running the simulation. The filename 'results.obj' is the default, but can be specified via the `result_obj` parameter during simulation setup.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/results.rst#_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pickle\nfile = open('results.obj', 'rb')\ntm = pickle.load(file)\n```\n\n----------------------------------------\n\nTITLE: Simulating Valve Opening in TSNet (Python)\nDESCRIPTION: This snippet shows how to simulate valve opening in a TSNet network. A set of operation parameters is defined (opening period, start time, end open ratio, and opening constant) and then passed to tm.valve_opening() with the valve identifier. It depends on the availability of a TSNet model and a target valve.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntc = 1 # valve opening period [s]\nts = 0 # valve opening start time [s]\nse = 0.5 # end open ratio\nm = 1 # opening constant [dimensionless]\nvalve_op = [tc,ts,se,m]\ntm.valve_opening('VALVE',valve_op)\n\n```\n\n----------------------------------------\n\nTITLE: Importing the tsnet Package in Python\nDESCRIPTION: This snippet shows the basic Python command to import the `tsnet` library, making its functions and classes available for use in the current script or interactive session. It's the first step required to utilize the `tsnet` package.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/usage.rst#_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport tsnet\n```\n\n----------------------------------------\n\nTITLE: Adding a Leak to a Node in TSNet (Python)\nDESCRIPTION: This snippet shows how to assign a leak to a node ('JUNCTION-22') in the TSNet model. The leak is defined by the emitter coefficient and added using tm.add_leak(). The code assumes that leaks should be specified before solving initial conditions in TSNet.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nemitter_coeff = 0.01 # [ m^3/s/(m H20)^(1/2)]\ntm.add_leak('JUNCTION-22', emitter_coeff)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Pump Shut-Off Event in TSNet (Python)\nDESCRIPTION: This snippet details configuring a pump shut-off event where the pump's speed reduction parameters are set as an array. The method tm.pump_shut_off() applies the schedule to pump 'PUMP2'. Dependencies include the TSNet model object and an existing pump component.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\ntc = 1 # pump closure period\nts = 0 # pump closure start time\nse = 0 # end open percentage\nm = 1 # closure constant\npump_op = [tc,ts,se,m]\ntm.pump_shut_off('PUMP2', pump_op)\n\n```\n\n----------------------------------------\n\nTITLE: Adding a Closed Surge Tank in TSNet (Python)\nDESCRIPTION: This snippet shows how to add a closed surge tank to a TSNet model. It defines the tank node, cross-sectional area, height, and initial water level, then calls tm.add_surge_tank() to incorporate the tank into the network. Required dependencies include the tm (TSNet model) object and an existing network topology.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ntank_node = 'JUNCTION-90'\ntank_area = 10   # tank cross sectional area [m^2]\ntank_height = 10  # tank height [m]\nwater_height = 5  # initial water level [m]\ntm.add_surge_tank(tank_node, [tank_area,tank_height,water_height], 'closed')\n\n```\n\n----------------------------------------\n\nTITLE: Modeling Demand Pulse in TSNet (Python)\nDESCRIPTION: This snippet defines a time-varying demand pulse for node 'N2'. The pulse shape is specified by total period, start time, transmission period, and peak amplitude, and applied via tm.add_demand_pulse(). The code requires that the TSNet model object and the network node are accessible.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ntc = 1 # total demand period [s]\nts = 1 # demand pulse start time [s]\ntp = 0.2 # demand pulse transmission time [s]\ndp = 1 # demand peak amplitude [unitless]\ndemand_pulse = [tc,ts,tp,dpa]\ntm.add_demand_pulse('N2',demand_pulse)\n\n```\n\n----------------------------------------\n\nTITLE: Defining Pump Start-Up Event in TSNet (Python)\nDESCRIPTION: This code example simulates a controlled pump start-up by specifying opening period, start time, end open percentage, and opening constant in an array passed to tm.pump_start_up(). This requires a TSNet model with a defined pump and suitable time-step settings.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ntc = 1 # pump opening period [s]\nts = 0 # pump opening start time [s]\nse = 1 # end open percentage [s]\nm = 1 # opening constant [dimensionless]\npump_op = [tc,ts,se,m]\ntm.pump_start_up('PUMP2',pump_op)\n\n```\n\n----------------------------------------\n\nTITLE: Plotting Leak Discharge at JUNCTION-22 (Burst/Leak)\nDESCRIPTION: Retrieves and plots the time history of the leak discharge rate at the specified leak location ('JUNCTION-22') from the simulation results. Uses matplotlib for plotting.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 34-45\n```\n\n----------------------------------------\n\nTITLE: Defining a Burst Event in TSNet (Python)\nDESCRIPTION: This code models a burst at node 'JUNCTION-20' by specifying burst start time, duration, and the final emitter coefficient. The burst is assigned using tm.add_burst(), and is only considered in transient (not steady-state) simulations. Requires TSNet model object and a pre-existing node.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nts = 1 # burst start time\ntc = 1 # time for burst to fully develop\nfinal_burst_coeff = 0.01 # final burst coeff [ m^3/s/(m H20)^(1/2)]\ntm.add_burst('JUNCTION-20', ts, tc, final_burst_coeff)\n\n```\n\n----------------------------------------\n\nTITLE: Simulating Valve Closure in TSNet (Python)\nDESCRIPTION: This code demonstrates how to define a valve closure schedule in TSNet. The closure is parameterized with period, start time, end open ratio, and closure curve constant, then applied to a valve named 'VALVE' via tm.valve_closure(). The snippet requires the TSNet model object and assumes a network with a defined valve.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ntc = 1 # valve closure period [s]\nts = 0 # valve closure start time [s]\nse = 0.5 # end open ratio\nm = 1 # closure constant [dimensionless]\nvalve_op = [tc,ts,se,m]\ntm.valve_closure('VALVE',valve_op)\n\n```\n\n----------------------------------------\n\nTITLE: Adding an Open Surge Tank to a TSNet Model\nDESCRIPTION: Demonstrates how to add an open surge tank to a TSNet simulation model (`tm`). It specifies the node ('JUNCTION-90') where the tank is located and its cross-sectional area (10 m^2) using the `add_surge_tank` method with the type 'open'. This requires an existing TSNet model object (`tm`).\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n.. code:: python\n\n    tank_node = 'JUNCTION-90'\n    tank_area = 10   # tank cross sectional area [m^2]\n    tm.add_surge_tank(tank_node, [tank_area], 'open')\n```\n\n----------------------------------------\n\nTITLE: Computing Steady State Initial Conditions (Valve Closure)\nDESCRIPTION: Calculates the steady-state hydraulic conditions of the network. These results are used as the initial state for the subsequent transient simulation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet1_valve_closure.py\n    :lines: 21-24\n```\n\n----------------------------------------\n\nTITLE: Setting Up Burst Event Parameters (Burst/Leak)\nDESCRIPTION: Defines the parameters for a pipe burst event. Specifies the burst location ('JUNCTION-20'), the start time 'ts', the time for the burst to fully develop 'tc', and the final emitter coefficient 'final_burst_coeff' representing the burst size.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 18-22\n```\n\n----------------------------------------\n\nTITLE: Computing Steady State Initial Conditions (Burst/Leak)\nDESCRIPTION: Calculates the steady-state hydraulic conditions for the 'Tnet3' network, incorporating the defined background leak. These results establish the initial conditions for the transient simulation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 24-27\n```\n\n----------------------------------------\n\nTITLE: Setting Simulation Time and Segment Count - Python\nDESCRIPTION: This snippet configures the simulation period (tf) and the number of computational units (N) on the critical pipe using the tm.set_time_N function in Python. It requires a context where tm is an object representing the transient model and supports set_time_N. The N parameter determines the level of spatial discretization and affects numerical accuracy and computational cost. Inputs: tf (total simulation period in seconds), N (number of computational units on the critical pipe, default is 2). Outputs: updates the MOC configuration for the time stepping based on segment count. Constraints: N must be an integer greater than zero; physical realism in segmentation must be considered.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nN = 3  # number of computational units on the critical pipe, default 2.\\ntf = 60   # simulation period [s]\\ntm.set_time_N(tf,N)\n```\n\n----------------------------------------\n\nTITLE: Auto-generating Module Documentation using Sphinx automodule (rst)\nDESCRIPTION: This reStructuredText snippet leverages the Sphinx `automodule` directive to automatically generate API documentation for the `tsnet` Python module. Options `:members:`, `:undoc-members:`, and `:show-inheritance:` instruct Sphinx to include all members, undocumented members, and inheritance details, respectively. Requires Sphinx with the `autodoc` extension and the importable `tsnet` module.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/apidocs/tsnet.rst#_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automodule:: tsnet\n    :members:\n    :undoc-members:\n    :show-inheritance:\n```\n\n----------------------------------------\n\nTITLE: Setting Simulation Parameters (Valve Closure)\nDESCRIPTION: Configures the transient simulation parameters for the valve closure example. Sets a uniform wave speed of 1200 m/s for all pipes, specifies a time step of 0.1 seconds, and defines the total simulation duration as 60 seconds.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet1_valve_closure.py\n    :lines: 6-11\n```\n\n----------------------------------------\n\nTITLE: Setting Simulation Parameters (Pump Shutdown)\nDESCRIPTION: Configures the transient simulation parameters for the pump shutdown example. Sets a uniform wave speed of 1200 m/s for all pipes, defines the simulation period as 50 seconds, and instructs TSNet to use a suggested time step.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet2_pump_shutdown.py\n    :lines: 6-10\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Wave Speeds and Simulation Time (Burst/Leak)\nDESCRIPTION: Imports numpy and sets custom wave speeds for pipes, sampled from a normal distribution (mean 1200 m/s, std dev 100 m/s). Assigns these speeds to pipes based on their INP file order. Sets the simulation period to 20 seconds and uses the suggested time step.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 6-12\n```\n\n----------------------------------------\n\nTITLE: Defining Background Leak Parameters (Burst/Leak)\nDESCRIPTION: Configures a background leak in the network model. Specifies the leak location ('JUNCTION-22') and sets the emitter coefficient for the leak, which will be included in the steady-state calculation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 14-16\n```\n\n----------------------------------------\n\nTITLE: Defining Pump Operating Rules (Pump Shutdown)\nDESCRIPTION: Specifies the operating rules for the pump shutdown event affecting 'PUMP2'. Sets the shutdown duration 'tc', the start time 'ts', the final speed multiplier 'se', and the shutdown curve shape 'm' (1 for linear, 2 for quadratic).\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet2_pump_shutdown.py\n    :lines: 12-18\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Table of Contents using Sphinx toctree (rst)\nDESCRIPTION: This reStructuredText snippet employs the Sphinx `toctree` directive to generate a table of contents. It specifies the subpackages (`tsnet.network`, `tsnet.postprocessing`, `tsnet.simulation`, `tsnet.utils`) to be linked within the documentation hierarchy. Requires Sphinx and the corresponding modules/documentation files.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/apidocs/tsnet.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n\n    tsnet.network\n    tsnet.postprocessing\n    tsnet.simulation\n    tsnet.utils\n```\n\n----------------------------------------\n\nTITLE: Plotting tsnet Simulation Results with Matplotlib (Python)\nDESCRIPTION: This code demonstrates how to plot simulation results obtained from `tsnet`, specifically plotting the head (`head`) against simulation timestamps (`tt`), using the `matplotlib.pyplot` library. It requires `matplotlib` to be installed and assumes `tt` and `head` are NumPy arrays containing the time and head data, respectively, retrieved from the `TransientModel` object.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/results.rst#_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport matplotlib.pyplot as plt\nplt.plot(tt ,head)\n```\n\n----------------------------------------\n\nTITLE: Plotting Head Results at Node N3 (Valve Closure)\nDESCRIPTION: Retrieves and plots the time history of the hydraulic head at node 'N3' from the transient simulation results stored in the 'tm' object. Uses matplotlib for plotting.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet1_valve_closure.py\n    :lines: 31-42\n```\n\n----------------------------------------\n\nTITLE: Plotting Head Results at JUNCTION-105 (Pump Shutdown)\nDESCRIPTION: Retrieves and plots the time history of the hydraulic head at node 'JUNCTION-105' from the pump shutdown simulation results. Uses matplotlib for visualization.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet2_pump_shutdown.py\n    :lines: 30-41\n```\n\n----------------------------------------\n\nTITLE: Configuring Sphinx Toctree for tsnet Documentation (reStructuredText)\nDESCRIPTION: Defines the table of contents for the tsnet package using Sphinx's reStructuredText directives. This snippet establishes the navigation structure via the 'toctree' directive and integrates the tsnet package documentation with a configurable depth. Required: Sphinx-build, Python, and a valid tsnet docs folder. Inputs include the ':maxdepth:' parameter and the modules to be referenced; output is the structured navigation in rendered HTML documentation.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/apidocs/modules.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\ntsnet\n=====\n\n.. toctree::\n   :maxdepth: 4\n\n   tsnet\n```\n\n----------------------------------------\n\nTITLE: Plotting Velocity Results in LINK-40 (Burst/Leak)\nDESCRIPTION: Retrieves and plots the time history of flow velocity at the start and end nodes of 'LINK-40' during the burst/leak simulation. Uses matplotlib for plotting.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 61-72\n```\n\n----------------------------------------\n\nTITLE: Plotting Head Results at Multiple Junctions (Burst/Leak)\nDESCRIPTION: Retrieves and plots the time history of the hydraulic head at multiple specified junctions ('JUNCTION-8', 'JUNCTION-16', 'JUNCTION-45', 'JUNCTION-90') to observe the pressure transient propagation. Uses matplotlib for plotting.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 75-90\n```\n\n----------------------------------------\n\nTITLE: Plotting Burst Discharge at JUNCTION-20 (Burst/Leak)\nDESCRIPTION: Retrieves and plots the time history of the burst discharge rate at the burst location ('JUNCTION-20'). This visualizes the water loss due to the burst event over time. Uses matplotlib for plotting.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/examples.rst#_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n.. literalinclude:: ../examples/Tnet3_burst_leak.py\n    :lines: 48-58\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Project Dependencies (requirements.txt format)\nDESCRIPTION: Lists the required Python packages for the 'tsnet' project. This format is typically used in a `requirements.txt` file, allowing for easy installation of dependencies using pip (`pip install -r requirements.txt`). The listed dependencies are: networkx (for graph analysis), pandas (data manipulation), numpy (numerical operations), scipy (scientific computing), matplotlib and plotly (plotting), and wntr (Water Network Tool for Resilience).\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/requirements.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnetworkx\npandas\nnumpy\nscipy\nmatplotlib\nplotly\nwntr\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Dependencies in requirements.txt Format\nDESCRIPTION: This snippet lists Python packages and their required versions, formatted similarly to a requirements.txt file. It ensures a consistent environment by specifying dependencies like pip, version management (bumpversion), testing tools (pytest, tox, coverage), documentation (Sphinx), code quality (flake8), and packaging utilities (wheel, twine). Use 'pip install -r <filename>' to install these packages.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/requirements_dev.txt#_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\npip==21.1\nbumpversion==0.5.3\nwheel==0.32.1\nwatchdog==0.9.0\nflake8==3.5.0\ntox\ncoverage==4.5.1\nSphinx==1.8.1\ntwine==1.12.1\npytest\npytest-runner\n```\n\n----------------------------------------\n\nTITLE: Running Code Quality Checks and Tests via Shell\nDESCRIPTION: These shell commands are used to verify the code changes before committing. The first command runs flake8 to check for Python style guide compliance in the 'TSNet' and 'tests' directories. The second command runs the project's test suite using either 'python setup.py test' or 'py.test'. The third command runs tests across multiple Python versions using tox. Requires flake8, pytest (or equivalent test runner defined in setup.py), and tox installed in the virtual environment.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/CONTRIBUTING.rst#_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n$ flake8 TSNet tests\n$ python setup.py test or py.test\n$ tox\n```\n\n----------------------------------------\n\nTITLE: Installing tsnet stable release using pip (Shell)\nDESCRIPTION: This command installs the most recent stable release of the tsnet Python package using the pip package installer. This is the recommended method for end-users. Requires pip to be installed in the Python environment.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/installation.rst#_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ pip install tsnet\n```\n\n----------------------------------------\n\nTITLE: Creating a Git Branch for Development via Shell\nDESCRIPTION: This shell command creates and switches to a new Git branch. The branch should be named descriptively, indicating the bugfix or feature being worked on (e.g., 'fix-login-bug' or 'add-user-profile'). This isolates development work from the main branch. Requires Git.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/CONTRIBUTING.rst#_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ git checkout -b name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Committing and Pushing Changes to GitHub via Shell\nDESCRIPTION: These shell commands finalize the local changes and push them to the remote repository on GitHub. The first command stages all modified files ('git add .'). The second command commits the staged changes with a descriptive message. The third command pushes the current local branch (e.g., 'name-of-your-bugfix-or-feature') to the corresponding remote branch on origin (your fork). Requires Git.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/CONTRIBUTING.rst#_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\n$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n```\n\n----------------------------------------\n\nTITLE: Cloning tsnet repository using Git (Shell)\nDESCRIPTION: This command clones the public tsnet source code repository from GitHub using the Git version control system. This is the first step for developers who want to install the package from the source code. Requires Git to be installed.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/installation.rst#_snippet_1\n\nLANGUAGE: console\nCODE:\n```\n$ git clone git://github.com/glorialulu/tsnet\n```\n\n----------------------------------------\n\nTITLE: MOC Compatibility Equation along Negative Characteristic Line (C-)\nDESCRIPTION: Shows the rearranged compatibility equation derived from the C- characteristic line. It relates the velocity (V3^t) and head (H3^t) at node 3 at the current time step (t) to known conditions at node 4 at the previous time step (t-1) and pipe properties (g, a2, f2, D2, Î±2, Î”t). This complements the C+ equation in the MOC scheme.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_8\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n        V_3^t - \\frac{g}{a_2} H_3^t = -V_4^{t-1} + \\frac{g}{a_2} H_4^{t-1}\n        + \\frac{f_2\\Delta t}{2D_2}V_4^{t-1} |V_4^{t-1}| - \\frac{g \\Delta t}{a_2} V4^{t-1}\\sin\\alpha_2\n```\n\n----------------------------------------\n\nTITLE: MOC Compatibility Equation along Positive Characteristic Line (C+)\nDESCRIPTION: Shows the rearranged compatibility equation derived from the C+ characteristic line. It explicitly relates the velocity (V2^t) and head (H2^t) at node 2 at the current time step (t) to known conditions at node 1 at the previous time step (t-1) and pipe properties (g, a1, f1, D1, Î±1, Î”t). This is part of the explicit time marching MOC scheme.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_7\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n        V_2^t + \\frac{g}{a_1} H_2^t = V_1^{t-1} + \\frac{g}{a_1} H_1^{t-1}\n        -\\frac{f_1\\Delta t}{2D_1}V_1^{t-1} |V_1^{t-1}| +  \\frac{g\\Delta t}{a_1} V_1^{t-1}\\sin\\alpha_1\n```\n\n----------------------------------------\n\nTITLE: Discretized Characteristic Equations (Steady Friction) using MOC\nDESCRIPTION: Provides the discretized C+ and C- characteristic equations for the Method of Characteristics (MOC) using a steady friction model (hf = hf_s = f * V^2 / (2gD)). These equations relate velocity (V) and head (H) at a point (i) at time (t) to conditions at adjacent points (i-1, i+1) at the previous time step (t-1), incorporating gravity (g), wave speed (a), friction factor (f), pipe diameter (D), time step (Î”t), and pipe slope (sin Î±).\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_6\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n    :label: com_steady\n\n    C+:  &\\qquad {} (V_i^t - V_{i-1}^{t-1}) + \\frac{g}{a} (H_i^{t} - H_{i-1}^{t-1} )\n                    + \\frac{f\\Delta t}{2D}V_{i-1}^{t-1} |V_{i-1}^{t-1}|\n                    + \\frac{g\\Delta t}{a} V_{i-1}^{t-1}\\sin\\alpha= 0\\\\\n    C-:  &\\qquad {} (V_i^t - V_{i+1}^{t-1}) - \\frac{g}{a} (H_i^{t} - H_{i+1}^{t-1} )\n                    - \\frac{f\\Delta t}{2D}V_{i+1}^{t-1} |V_{i+1}^{t-1}|\n                    - \\frac{g\\Delta t}{a}  V_{i+1}^{t-1}\\sin\\alpha= 0\n```\n\n----------------------------------------\n\nTITLE: Discretized Characteristic Equations (Unsteady Friction) using MOC\nDESCRIPTION: Provides the discretized C+ and C- characteristic equations for MOC incorporating an unsteady friction model based on instantaneous acceleration. These equations extend the steady friction model by adding terms involving the unsteady friction coefficient (k_u), gravity (g), and the approximated acceleration terms derived from velocities (V) at different points (i, i-1, i+1) and time steps (t-1, t-2).\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_11\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n    :label: com_unsteady\n\n    C+:  \\qquad {}(V_i^t - V_{i-1}^{t-1}) + \\frac{g}{a} (H_i^{t} - H_{i-1}^{t-1} )\n            + \\frac{g}{a} \\Delta t V_{i-1}^{t-1}\\sin\\alpha\n            + \\frac{f\\Delta x}{2D}V_{i-1}^{t-1} |V_{i-1}^{t-1}|\\\\\n            + \\frac{k_u}{2g} \\left[ (V_{i-1}^{t-1} - V_{i-1}^{t-2}) +\n            \\mbox{sign}(V_{i-1}^{t-1}) \\left|V_i^{t-1} - V_{i-1}^{t-1} \\right| \\right] = 0\\\\\n    C-:  \\qquad {} (V_i^t - V_{i+1}^{t-1}) - \\frac{g}{a} (H_i^{t} - H_{i+1}^{t-1} )\n            + \\frac{g}{a} \\Delta t V_{i+1}^{t-1}\\sin\\alpha\n            - \\frac{f\\Delta x}{2D}V_{i+1}^{t-1} |V_{i+1}^{t-1}|\\\\\n            - \\frac{k_u}{2g} \\left[ (V_{i+1}^{t-1} - V_{i+1}^{t-2}) +\n            \\mbox{sign}(V_{i+1}^{t-1}) \\left|V_{i+1}^{t-1} - V_{i}^{t-1} \\right| \\right]  = 0\n```\n\n----------------------------------------\n\nTITLE: Finite Difference Approximations for Acceleration Terms (Unsteady Friction)\nDESCRIPTION: Presents the explicit first-order finite difference schemes used to approximate the local (âˆ‚V/âˆ‚x) and convective (âˆ‚V/âˆ‚t) acceleration terms along the positive (C+) and negative (C-) characteristic lines for the unsteady friction model. These approximations use velocities at previous time steps (t-1, t-2) and adjacent nodes.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_10\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n    C^+: & \\frac{\\partial{V}}{\\partial{t}}^+ = \\frac{V_1^{t-1}-V_1^{t-2}}{\\Delta t}\n        & \\frac{\\partial{V}}{\\partial{x}}^+ = \\frac{V_2^{t-1}-V_1^{t-1}}{\\Delta x} \\\\\n    C^-: & \\frac{\\partial{V}}{\\partial{t}}^- = \\frac{V_4^{t-1}-V_4^{t-2}}{\\Delta t}\n        & \\frac{\\partial{V}}{\\partial{x}}^- = \\frac{V_4^{t-1}-V_3^{t-1}}{\\Delta x}\n```\n\n----------------------------------------\n\nTITLE: Boundary Conditions for an Open Surge Tank\nDESCRIPTION: Defines the system of boundary conditions for modeling an open surge tank connected between two pipe segments (computational units 1 and 2). The equations represent continuity (balancing flow velocity V, area A, and tank flow Q_T), energy conservation (equal heads H at the junction and connection to the tank water level z), and the change in tank water level (z^t) based on inflow/outflow (Q_T) over the time step (Î”t) considering the tank area (A_T) and wave speed (a, which seems misplaced here, likely should just be A_T). These equations, combined with the MOC compatibility equations, allow solving for the six unknowns V2^t, V3^t, H2^t, H3^t, z^t, Q_T^t.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_12\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n    :label: open_surge\n\n    &V_2^t A_1 - V_3^t A_2 = Q_T^t &\\mbox{continuity}\n\n    &H_2^t = H_3^t                 &\\mbox{energy conservation}\n\n    &H_2^t = z^t                    &\\mbox{energy conservation}\n\n    &z^t = z^{t-1} + \\frac{\\Delta t }{a A_T}\\left(Q_T^t + Q_T^{t-1}\\right) &\\mbox{tank water level}\n```\n\n----------------------------------------\n\nTITLE: Boundary Conditions for Pipe Junction with Leak\nDESCRIPTION: Defines the boundary conditions for a connection between two computational units (pipes) modeled as a simple junction with a leak. It establishes the relationship between heads (H2^t, H3^t) assuming energy conservation and relates velocities (V2^t, V3^t) through continuity, accounting for leakage flow proportional to the square root of the head (H2^t) via the leakage coefficient (kl) and pipe areas (A1, A2).\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_9\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n        H_2^t = H_3^t;   V_2^t A_1  = V_3^t A_2 + k_l \\sqrt{H_2^t}\n```\n\n----------------------------------------\n\nTITLE: Boundary Conditions for a Closed Surge Tank (Air Chamber)\nDESCRIPTION: Formulates the initial set of boundary conditions for a closed surge tank (air chamber) connected between two computational units. These equations include continuity (balancing flow velocity V, area A, and tank flow Q_T), energy conservation at the junction (H2 = H3), and the relationship between the air pressure head (H_A^t), junction head (H2^t), barometric pressure head (H_b), and water level in the tank (z_t). Additional equations involving air volume and pressure changes based on polytropic processes would be needed to complete the model.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/transient.rst#_snippet_14\n\nLANGUAGE: latex\nCODE:\n```\n.. math::\n    & V_2^t A_1 - V_3^t A_2 = Q_T^t &\\mbox{continuity}\n\n    & H_2^t = H^3_t &\\mbox{energy conservation}\n\n    & H_A^t = H2^t + H_b - z_t &\\mbox{energy conservation}\n```\n\n----------------------------------------\n\nTITLE: Installing tsnet from source using setup.py (Shell)\nDESCRIPTION: This command installs the tsnet package from the downloaded or cloned source code directory. It should be run from within the source directory containing the setup.py file. This completes the installation process for developers installing from source. Requires Python and the package source code.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/installation.rst#_snippet_3\n\nLANGUAGE: console\nCODE:\n```\n$ python setup.py install\n```\n\n----------------------------------------\n\nTITLE: Setting up TSNet Virtual Environment and Development Install via Shell\nDESCRIPTION: These shell commands set up the local development environment for TSNet. The first command creates a virtual environment named 'TSNet' using virtualenvwrapper. The second command changes the current directory to the cloned TSNet project folder. The third command installs the TSNet package in development mode, allowing changes to the code to be reflected immediately without reinstalling. Requires virtualenvwrapper and Python.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/CONTRIBUTING.rst#_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ mkvirtualenv TSNet\n$ cd TSNet/\n$ python setup.py develop\n```\n\n----------------------------------------\n\nTITLE: Running a Subset of Tests with Pytest via Shell\nDESCRIPTION: This shell command demonstrates how to run a specific subset of tests using pytest. It executes only the tests found within the 'test_tsnet.py' file located in the 'tests' directory. This is useful for focusing on specific parts of the codebase during development or debugging. Requires pytest installed.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/CONTRIBUTING.rst#_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\n$ py.test .\\tests\\test_tsnet.py\n```\n\n----------------------------------------\n\nTITLE: Cloning the Forked TSNet Repository via Shell\nDESCRIPTION: This shell command clones a forked version of the TSNet repository from GitHub to the local machine using Git. Replace 'your_name_here' with your actual GitHub username. This is the second step in setting up the local development environment.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/CONTRIBUTING.rst#_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ git clone git@github.com:your_name_here/TSNet.git\n```\n\n----------------------------------------\n\nTITLE: Including Tnet1 Valve Closure Example via literalinclude (reStructuredText)\nDESCRIPTION: This reStructuredText directive instructs the documentation generator to include lines 2 through 42 from the Python example file `../examples/Tnet1_valve_closure.py`. This is used to embed the relevant portion of the example code directly into the documentation page, demonstrating key `tsnet` functionalities like model generation, simulation execution, and result handling.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/usage.rst#_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. literalinclude:: ../examples/Tnet1_valve_closure.py\n    :lines: 2-42\n```\n\n----------------------------------------\n\nTITLE: Downloading tsnet source tarball using curl (Shell)\nDESCRIPTION: This command downloads the source code of the tsnet package as a compressed tarball directly from the GitHub repository using the curl utility. This is an alternative method for developers to obtain the source code for installation. Requires curl to be installed.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/installation.rst#_snippet_2\n\nLANGUAGE: console\nCODE:\n```\n$ curl  -OL https://github.com/glorialulu/tsnet/tarball/master\n```\n\n----------------------------------------\n\nTITLE: Deploying TSNet via Shell (Maintainer Task)\nDESCRIPTION: These shell commands outline the deployment process for project maintainers. The first command uses 'bumpversion' to increment the project version (patch, minor, or major) and updates relevant files (like HISTORY.rst). The subsequent 'git push' commands push the version commit and associated tags to the remote repository. Pushing tags typically triggers a Travis CI build which, if successful, deploys the package to PyPI. Requires bumpversion and Git.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/CONTRIBUTING.rst#_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\n$ bumpversion patch # possible: major / minor / patch\n$ git push\n$ git push --tags\n```\n\n----------------------------------------\n\nTITLE: Generating API Documentation for Python Modules using Sphinx Automodule - reStructuredText\nDESCRIPTION: Uses Sphinx's automodule directives in reStructuredText to generate API documentation for the tsnet.network package and its submodules. Each submodule (control, discretize, model, topology, and tsnet.network itself) is listed with automodule blocks, with options to include all members, undocumented members, and show inheritance diagrams. This approach requires Sphinx and autodoc extensions; the directives automatically extract and render docstrings from Python modules, making the documentation easier to maintain. Input is reStructuredText; output is generated HTML or other supported formats displaying module APIs.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/apidocs/tsnet.network.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\ntsnet.network package\n=====================\n\nSubmodules\n----------\n\ntsnet.network.control module\n----------------------------\n\n.. automodule:: tsnet.network.control\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\ntsnet.network.discretize module\n-------------------------------\n\n.. automodule:: tsnet.network.discretize\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\ntsnet.network.model module\n--------------------------\n\n.. automodule:: tsnet.network.model\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\ntsnet.network.topology module\n-----------------------------\n\n.. automodule:: tsnet.network.topology\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\n\nModule contents\n---------------\n\n.. automodule:: tsnet.network\n    :members:\n    :undoc-members:\n    :show-inheritance:\n\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents with Sphinx - reStructuredText\nDESCRIPTION: This code snippet employs Sphinx's reStructuredText directives to define the structure of the TSNet documentation site. It uses the '.. toctree::' directive to include multiple pages, controls recursion depth via ':maxdepth:', and sets section captions. It also specifies special index/ref links for the generated documentation. There are no dependencies other than Sphinx (and its reStructuredText markup support). The snippet configures site navigation rather than runtime behavior, affecting only the static documentation output.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/content.rst#_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\\n   :maxdepth: 2\\n   :caption: Contents:\\n\\n   readme\\n   installation\\n   limitations\\n   usage\\n   transient\\n   results\\n   examples\\n   validation\\n   contributing\\n   authors\\n   history\\n   API documentation <apidocs/tsnet>\\n   abbrev\\n   reference\\n\\nIndices and tables\\n==================\\n* :ref:`genindex`\\n* :ref:`modindex`\\n* :ref:`search`\n```\n\n----------------------------------------\n\nTITLE: Including External File in reStructuredText\nDESCRIPTION: This reStructuredText directive instructs the parser to include the content of the specified file ('../AUTHORS.rst') at this location. It's used to embed external content, such as author lists or common sections, into the main document.\nSOURCE: https://github.com/glorialulu/tsnet/blob/master/docs/authors.rst#_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: ../AUTHORS.rst\n```"
  }
]