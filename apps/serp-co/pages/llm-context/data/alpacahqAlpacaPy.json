[
  {
    "owner": "alpacahq",
    "repo": "alpaca-py",
    "content": "TITLE: Loading API Keys from Environment Variables\nDESCRIPTION: Retrieves API credentials from environment variables if they are not explicitly defined in the script. This pattern allows for more secure credential management.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nif api_key is None:\n    api_key = os.environ.get('ALPACA_API_KEY')\n\nif secret_key is None:\n    secret_key = os.environ.get('ALPACA_SECRET_KEY')\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Alpaca Options Trading\nDESCRIPTION: Imports the necessary modules from alpaca-py for options trading, including trading client, data client, stream clients, and request/enum types. These imports cover all functionality needed for the examples.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\n\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.trading.stream import TradingStream\nfrom alpaca.data.live.option import OptionDataStream\n\nfrom alpaca.data.requests import (\n    OptionBarsRequest,\n    OptionTradesRequest,\n    OptionLatestQuoteRequest,\n    OptionLatestTradeRequest,\n    OptionSnapshotRequest,\n    OptionChainRequest    \n)\nfrom alpaca.trading.requests import (\n    GetOptionContractsRequest,\n    GetAssetsRequest,\n    MarketOrderRequest,\n    GetOrdersRequest,\n    ClosePositionRequest\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    ExerciseStyle,\n    OrderSide,\n    OrderType,\n    TimeInForce,\n    QueryOrderStatus \n)\nfrom alpaca.common.exceptions import APIError\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpaca API Credentials for Trading\nDESCRIPTION: Sets up API credentials for Alpaca's trading platform using Google Colab's userdata for secure storage. It initializes TradingClient, OptionHistoricalDataClient, and StockHistoricalDataClient with the provided API keys for paper trading.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example (Please do not modify this. This example is for paper trading only).\nPAPER = True\n\n# Initialize Alpaca clients\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Contracts with Pagination\nDESCRIPTION: Retrieves option contracts for specified underlying symbols (SPY and AAPL) with pagination support. This demonstrates using the new get_option_contracts method with filtering parameters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# get list of options contracts for the given underlying symbol (e.g. SPY,AAPL)\n# - get_option_contracts() is a new method to get list of options contracts\n# - in this example, we get 2 options contracts for SPY,AAPL\n# - you can continue to fetch options contracts by specifying page_token from next_page_token of response\nunderlying_symbols = [\"SPY\", \"AAPL\"]\nreq = GetOptionContractsRequest(\n    underlying_symbols = underlying_symbols,               # specify underlying symbols\n    status = AssetStatus.ACTIVE,                           # specify asset status: active (default)\n    expiration_date = None,                                # specify expiration date (specified date + 1 day range)\n    expiration_date_gte = None,                            # we can pass date object\n    expiration_date_lte = None,                            # or string (YYYY-MM-DD)\n    root_symbol = None,                                    # specify root symbol\n    type = None,                                           # specify option type (ContractType.CALL or ContractType.PUT)\n    style = None,                                          # specify option style (ContractStyle.AMERICAN or ContractStyle.EUROPEAN)\n    strike_price_gte = None,                               # specify strike price range\n    strike_price_lte = None,                               # specify strike price range\n    limit = 2,                                             # specify limit\n    page_token = None,                                     # specify page token\n)\nres = trade_client.get_option_contracts(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trading Account Information\nDESCRIPTION: Fetches and displays details about the Alpaca trading account, providing information about account status, balances, and other properties.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# check trading account\n# You can check definition of each field in the following documents\n# ref. https://docs.alpaca.markets/docs/account-plans\n# ref. https://docs.alpaca.markets/reference/getaccount-1\nacct = trade_client.get_account()\nacct\n```\n\n----------------------------------------\n\nTITLE: Calculating Implied Volatility and Option Greeks using Black-Scholes Model in Python\nDESCRIPTION: This snippet defines functions to calculate implied volatility and option Greeks (delta, gamma, theta, vega) using the Black-Scholes model. It handles edge cases and provides detailed calculations for option pricing.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Calculate implied volatility\ndef calculate_implied_volatility(option_price, S, K, T, r, option_type):\n    \n    # Define a reasonable range for sigma\n    sigma_lower = 1e-6\n    sigma_upper = 5.0  # Adjust upper limit if necessary\n\n    # Check if the option is out-of-the-money and price is close to zero\n    intrinsic_value = max(0, (S - K) if option_type == 'call' else (K - S))\n    if option_price <= intrinsic_value + 1e-6:\n        \n        print('Option price is close to intrinsic value; implied volatility is near zero.')\n        return 0.0\n    \n    # Define the function to find the root\n    def option_price_diff(sigma):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        if option_type == 'call':\n            price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n        elif option_type == 'put':\n            price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)\n        return price - option_price\n\n    try:\n        return brentq(option_price_diff, sigma_lower, sigma_upper)\n    except ValueError as e:\n        print(f\"Failed to find implied volatility: {e}\")\n        return None\n\n\ndef calculate_greeks(option_price, strike_price, expiration, underlying_price, risk_free_rate, option_type):\n    T = (expiration - pd.Timestamp.now()).days / 365 # It is unconventional, but some use 225 days (# of annual trading days) in replace of 365 days\n    T = max(T, 1e-6)  # Set minimum T to avoid zero\n    \n    if T == 1e-6:\n        print('Option has expired or is expiring now; setting Greeks based on intrinsic value.')\n        if option_type == 'put':\n            delta = -1.0 if underlying_price < strike_price else 0.0\n        else:\n            delta = 1.0 if underlying_price > strike_price else 0.0\n        gamma = 0.0\n        theta = 0.0\n        vega = 0.0\n        return delta, gamma, theta, vega\n    \n    # Calculate IV\n    IV = calculate_implied_volatility(option_price, underlying_price, strike_price, T, risk_free_rate, option_type)\n\n    if IV is None or IV == 0.0:\n        print('Implied volatility could not be determined, skipping Greek calculations.')\n        return None\n    \n    d1 = (np.log(underlying_price / strike_price) + (risk_free_rate + 0.5 * IV ** 2) * T) / (IV * np.sqrt(T))\n    d2 = d1 - IV * np.sqrt(T) # d2 for Theta calculation\n    # Calculate Delta\n    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)\n    # Calculate Gamma\n    gamma = norm.pdf(d1) / (underlying_price * IV * np.sqrt(T))\n    # Calculate Vega\n    vega = underlying_price * np.sqrt(T) * norm.pdf(d1)\n    # Calculate Theta\n    if option_type == 'call':\n        theta = (\n            - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T))\n            - (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(d2))\n        )\n    else:\n        theta = (\n            - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T))\n            + (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(-d2))\n        )\n    # Convert annualized theta to daily theta\n    theta /= 365\n    \n    return delta, gamma, theta, vega\n```\n\n----------------------------------------\n\nTITLE: Querying Option Contracts for Iron Condor Strategy\nDESCRIPTION: Makes a single API request to retrieve all the option contracts needed for the iron condor strategy, specifying the date range and strike price range that encompasses all four legs.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Now the actual request\nreq = GetOptionContractsRequest(\n    underlying_symbols=[\"TSLA\"],\n    status=AssetStatus.ACTIVE,\n    expiration_date_gte=cts.option_contracts[0].expiration_date - timedelta(weeks=5),\n    expiration_date_lte=cts.option_contracts[0].expiration_date - timedelta(weeks=3),\n    style=ExerciseStyle.AMERICAN,\n    strike_price_gte=str(min_contract_price),\n    strike_price_lte=str(max_contract_price),\n    page_token=None,\n)\ncts_m = trade_client.get_option_contracts(req)\ncts_m\n```\n\n----------------------------------------\n\nTITLE: Implementing a 0DTE Bull Put Vertical Spread Function in Python\nDESCRIPTION: This function executes a complete 0DTE bull put vertical spread strategy. It finds appropriate option contracts based on delta values, calculates spread metrics, places orders through Alpaca's API, and continuously monitors the position for target profit or stop-loss conditions based on price and delta values.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef trade_0DTE_options(underlying_symbol, risk_free_rate, OI_THRESHOLD, short_put_delta_range, long_put_delta_range, min_credit_percentage, delta_stop_loss_thres, target_stop_loss_percentage):\n    \"\"\"\n    Execute a 0DTE bull put vertical spread.\n    \"\"\"\n    # Fetch zero DTE options\n    zero_dte_options = get_0DTE_options(underlying_symbol)\n\n    if not zero_dte_options:\n        print(\"No 0DTE options available for the underlying symbol.\")\n        return\n\n    # Find the short and long put options using the helper function\n    short_put, long_put = find_short_and_long_puts(zero_dte_options, underlying_symbol, risk_free_rate, OI_THRESHOLD, short_put_delta_range, long_put_delta_range)\n\n    if not short_put or not long_put:\n        print(\"Could not find suitable options with 40 and 20 deltas.\")\n        return\n\n    # Calculate the width of the spread\n    spread_width = abs(short_put['strike_price'] - long_put['strike_price'])\n\n    if not (2 <= spread_width <= 5):\n        print(f\"Spread width of {spread_width} is outside the target range of $2-$5; skipping this pair.\")\n        return\n\n    # Calculate premium collected and check against threshold\n    credit_received = short_put['initial_option_price'] - long_put['initial_option_price']\n    min_credit_threshold = spread_width * min_credit_percentage\n\n    if credit_received <= min_credit_threshold:\n        print(f\"Credit received {credit_received} is below minimum threshold {min_credit_threshold}; skipping trade.\")\n        return\n\n    # Calculate profit/loss metrics\n    max_profit = credit_received\n    max_loss = spread_width * 100 - credit_received # Since we may have an obligation to buy 100 shares if assigned\n    initial_total_delta = abs(short_put['initial_delta']) - abs(long_put['initial_delta'])\n    delta_stop_loss = initial_total_delta * delta_stop_loss_thres # Default: 2 times of the initial delta when we enter the market\n\n    print(f\"Placing 0DTE Bull Put Spread on {underlying_symbol}:\")\n    print(f\"Sell 40 Delta Put: {short_put['symbol']} (Strike: {short_put['strike_price']}, Premium: {short_put['initial_option_price']}, Delta: {short_put['initial_delta']})\")\n    print(f\"Buy 20 Delta Put: {long_put['symbol']} (Strike: {long_put['strike_price']}, Premium: {long_put['initial_option_price']}, Delta: {long_put['initial_delta']})\")\n    print(f\"Spread Width: {spread_width}, Credit received: {credit_received}, Max Profit: {max_profit}, Max Loss: {max_loss}\")\n    print(f\"Initial Total Delta: {initial_total_delta}, Delta Stop-Loss Trigger: {delta_stop_loss}\")\n\n\n    # Create a list for the order request\n    order_legs = []\n    ## Append Long Put\n    order_legs.append(OptionLegRequest(\n        symbol=long_put[\"symbol\"],\n        side=OrderSide.BUY,\n        ratio_qty=1\n    ))\n    ## Append Short Put\n    order_legs.append(OptionLegRequest(\n        symbol=short_put[\"symbol\"],\n        side=OrderSide.SELL,\n        ratio_qty=1\n    ))\n    # Place the order for both legs simultaneously\n    req = MarketOrderRequest(\n        qty=1,\n        order_class=OrderClass.MLEG,\n        time_in_force=TimeInForce.DAY,\n        legs=order_legs\n    )\n    trade_client.submit_order(req)\n    print(\"Spread order placed successfully.\")\n\n    # Set target profit and stop-loss levels\n    target_profit_price = credit_received * target_stop_loss_percentage  # Default: 50% of credit received\n\n    # Monitor the spread for delta stop-loss and profit target\n    while True:\n        # Fetch the latest quote for each leg\n        short_quote_req = OptionLatestQuoteRequest(symbol_or_symbols=[short_put['symbol']])\n        long_quote_req = OptionLatestQuoteRequest(symbol_or_symbols=[long_put['symbol']])\n\n        short_quote = option_historical_data_client.get_option_latest_quote(short_quote_req)[short_put['symbol']]\n        long_quote = option_historical_data_client.get_option_latest_quote(long_quote_req)[long_put['symbol']]\n\n        # Calculate the mid-price for each option as the current option price\n        short_put_price = (short_quote.bid_price + short_quote.ask_price) / 2\n        long_put_price = (long_quote.bid_price + long_quote.ask_price) / 2\n\n        # Calculate the latest delta values for each option\n        current_short_delta = calculate_delta(\n            option_price=short_put_price,\n            strike_price=short_put['strike_price'],\n            expiry=short_put['expiration_date'],\n            underlying_price=get_underlying_price(underlying_symbol),\n            risk_free_rate=risk_free_rate,\n            option_type='put'\n        )\n\n        expiration_date_naive_dt=datetime.combine(long_put['expiration_date'], time(16, 0)) # Set time to 4:00 PM\n\n        current_long_delta = calculate_delta(\n            option_price=long_put_price,\n            strike_price=long_put['strike_price'],\n            expiry=short_put['expiration_date'],\n            underlying_price=get_underlying_price(underlying_symbol),\n            risk_free_rate=risk_free_rate,\n            option_type='put'\n        )\n\n        # Calculate current total delta and spread price\n        current_total_delta = abs(current_short_delta) - abs(current_long_delta)\n        current_spread_price = short_put_price - long_put_price\n\n        # Exit for target profit\n        if current_spread_price <= target_profit_price:\n            close_spread(short_put['symbol'], long_put['symbol'])\n            print(f\"Exited spread for target profit at price {current_spread_price}\")\n            break\n\n        # Check if the stop-loss condition based on delta is met\n        if current_total_delta >= delta_stop_loss:\n            close_spread(short_put['symbol'], long_put['symbol'])\n            print(f\"Exited spread for delta stop-loss at total delta {current_total_delta}\")\n            break\n\n        time.sleep(180)  # Check every 3 minutes\n```\n\n----------------------------------------\n\nTITLE: Creating a Brokerage Account with BrokerClient in Python\nDESCRIPTION: This snippet shows how to create a brokerage account using the BrokerClient. It demonstrates the creation of Contact, Identity, Disclosures, and Agreement objects which are required to instantiate a CreateAccountRequest before submitting to the API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker.client import BrokerClient\nfrom alpaca.broker.models import (\n                        Contact,\n                        Identity,\n                        Disclosures,\n                        Agreement\n                    )\nfrom alpaca.broker.requests import CreateAccountRequest\nfrom alpaca.broker.enums import TaxIdType, FundingSource, AgreementType\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\n# Contact\ncontact_data = Contact(\n            email_address=\"cool_alpaca@example.com\",\n            phone_number=\"555-666-7788\",\n            street_address=[\"20 N San Mateo Dr\"],\n            city=\"San Mateo\",\n            state=\"CA\",\n            postal_code=\"94401\",\n            country=\"USA\"\n            )\n# Identity\nidentity_data = Identity(\n        given_name=\"John\",\n        middle_name=\"Smith\",\n        family_name=\"Doe\",\n        date_of_birth=\"1990-01-01\",\n        tax_id=\"666-55-4321\",\n        tax_id_type=TaxIdType.USA_SSN,\n        country_of_citizenship=\"USA\",\n        country_of_birth=\"USA\",\n        country_of_tax_residence=\"USA\",\n        funding_source=[FundingSource.EMPLOYMENT_INCOME]\n        )\n\n# Disclosures\ndisclosure_data = Disclosures(\n        is_control_person=False,\n        is_affiliated_exchange_or_finra=False,\n        is_politically_exposed=False,\n        immediate_family_exposed=False,\n        )\n\n# Agreements\nagreement_data = [\n    Agreement(\n      agreement=AgreementType.MARGIN,\n      signed_at=\"2020-09-11T18:09:33Z\",\n      ip_address=\"185.13.21.99\",\n    ),\n    Agreement(\n      agreement=AgreementType.ACCOUNT,\n      signed_at=\"2020-09-11T18:13:44Z\",\n      ip_address=\"185.13.21.99\",\n    ),\n    Agreement(\n      agreement=AgreementType.CUSTOMER,\n      signed_at=\"2020-09-11T18:13:44Z\",\n      ip_address=\"185.13.21.99\",\n    ),\n    Agreement(\n      agreement=AgreementType.CRYPTO,\n      signed_at=\"2020-09-11T18:13:44Z\",\n      ip_address=\"185.13.21.99\",\n    )\n]\n\n# ## CreateAccountRequest ## #\naccount_data = CreateAccountRequest(\n                        contact=contact_data,\n                        identity=identity_data,\n                        disclosures=disclosure_data,\n                        agreements=agreement_data\n                        )\n\n# Make a request to create a new brokerage account\naccount = broker_client.create_account(account_data)\n```\n\n----------------------------------------\n\nTITLE: Setting Up Alpaca-py Environment for Options Trading\nDESCRIPTION: Installs and imports necessary packages including alpaca-py and sets up required imports from various modules for options trading, such as data clients, trading functions, and order types.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `alpaca-py` and import it\n!python3 -m pip install --upgrade alpaca-py\n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport alpaca\nimport time\nfrom scipy.optimize import brentq\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\n\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import StockBarsRequest, OptionLatestQuoteRequest, OptionChainRequest, OptionBarsRequest\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (\n    MarketOrderRequest,\n    GetOptionContractsRequest,\n    MarketOrderRequest,\n    OptionLegRequest,\n    ClosePositionRequest,\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    ExerciseStyle,\n    OrderSide,\n    OrderClass,\n    OrderStatus,\n    OrderType,\n    TimeInForce,\n    QueryOrderStatus,\n    ContractType,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpaca API Clients for Paper Trading\nDESCRIPTION: Sets up the Alpaca API clients for paper trading by securely retrieving API credentials from Google Colab's secrets manager. Initializes trading client and data clients for options and stocks trading operations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example (Please do not modify this. This example is for paper trading only).\nPAPER = True\n\n# Initialize Alpaca clients\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Finding Options for Bull Call Spread Strategy in Python\nDESCRIPTION: Main orchestration function to build a bull call spread strategy. Groups options by expiration, filters them based on criteria, pairs candidates, and checks buying power limits. Returns a list of legs [short_call, long_call] or an empty list if no valid pair is found.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef find_options_for_bull_call_spread(call_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD):\n    \"\"\"\n    Orchestrates the workflow to build a bull call spread.\n    Groups options by expiration, filters them with criteria, pairs candidates using helper functions,\n    and checks buying power.\n    \n    Returns:\n        A list of legs [short_call, long_call] if a valid pair is found, or an empty list otherwise.\n    \"\"\"\n    short_call_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n    long_call_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n\n    # Process each option candidate\n    for option_data in call_options:\n        if not validate_sufficient_OI(option_data, OI_THRESHOLD):\n            logger.warning(f\"Insufficient open interest for option {getattr(option_data, 'symbol', 'unknown')} (threshold: {OI_THRESHOLD}). Skipping candidate.\")\n            continue\n\n        candidate = build_option_dict(option_data, underlying_price, risk_free_rate)\n        expiration_date = candidate['expiration_date']\n        short_call_candidates_by_exp.setdefault(expiration_date, [])\n        long_call_candidates_by_exp.setdefault(expiration_date, [])\n        \n        # Check each candidate for both call criteria\n        if check_candidate_option_conditions(candidate, criteria['short_call'], 'short_call'):\n            short_call_candidates_by_exp[expiration_date].append(candidate)\n            logger.info(f\"Added {candidate['symbol']} as a short call candidate for expiration {expiration_date}.\")\n        if check_candidate_option_conditions(candidate, criteria['long_call'], 'long_call'):\n            long_call_candidates_by_exp[expiration_date].append(candidate)\n            logger.info(f\"Added {candidate['symbol']} as a long call candidate for expiration {expiration_date}.\")\n\n    # Process only expiration dates common to both candidate groups\n    common_expirations = set(short_call_candidates_by_exp.keys()) & set(long_call_candidates_by_exp.keys())\n```\n\n----------------------------------------\n\nTITLE: Setting Up Alpaca API Environment for Options Trading\nDESCRIPTION: Installs and imports necessary packages, sets up the Alpaca Trading API clients for options trading with paper account credentials. Includes imports for trading, market data, and mathematical libraries needed for options calculations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `alpaca-py` and import it\n!python3 -m pip install --upgrade alpaca-py\n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport alpaca\nfrom scipy.optimize import brentq\nfrom datetime import datetime, time\nfrom zoneinfo import ZoneInfo\n\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (\n    MarketOrderRequest,\n    GetOptionContractsRequest,\n    MarketOrderRequest,\n    OptionLegRequest,\n    ClosePositionRequest,\n)\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import OptionLatestQuoteRequest\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    # ExerciseStyle,\n    OrderSide,\n    OrderClass,\n    OrderType,\n    TimeInForce,\n    # QueryOrderStatus,\n    ContractType\n)\n```\n\n----------------------------------------\n\nTITLE: Finding Options for Short Iron Condor Strategy in Python\nDESCRIPTION: A comprehensive function to identify suitable options for a short iron condor strategy with a common expiration date. It processes both put and call options, filters by criteria, and ensures OTM conditions are met for each leg of the strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef find_options_for_short_iron_condor(call_options, put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD):\n    '''\n    Modular workflow to find an iron condor with a single common expiration.\n    Returns a list of legs in the order:\n       [short_put, long_put, short_call, long_call]\n    '''\n    common_expirations = None\n\n    # Instead of immediately enforcing common expiration, store candidates by expiration date\n    put_candidates_by_expiration = {}\n    call_candidates_by_expiration = {}\n\n    # Process put options\n    for option_data in put_options:\n        # If option does not meet the Open Interest Threshold, skip the process\n        if not validate_sufficient_OI(option_data, OI_THRESHOLD):\n            continue\n        candidate = build_option_dict(option_data, underlying_price, risk_free_rate)\n        \n        # For puts, consider only options that are OTM (strike below underlying)\n        if candidate['strike_price'] >= underlying_price:\n            print(f\"Skipping {candidate['symbol']}: not OTM for puts (strike {candidate['strike_price']} >= underlying {underlying_price}).\")\n            continue\n        \n        expiration = candidate['expiration']\n        if expiration not in put_candidates_by_expiration:\n            put_candidates_by_expiration[expiration] = {'long_put': [], 'short_put': []}\n        \n        # Add an option candidate to dictionary if it meets the criteria for 'long put'\n        if check_candidate_option_conditions(candidate, criteria['long_put'], 'long_put'):\n            put_candidates_by_expiration[expiration]['long_put'].append(candidate)\n            print(f\"Added {candidate['symbol']} as a long put candidate for expiration {expiration}.\")\n\n        # Add an option candidate to dictionary if it meets the criteria for 'short put'\n        if check_candidate_option_conditions(candidate, criteria['short_put'], 'short_put'):\n            put_candidates_by_expiration[expiration]['short_put'].append(candidate)\n            print(f\"Added {candidate['symbol']} as a short put candidate for expiration {expiration}.\")\n\n    # Process call options\n    for option_data in call_options:\n        if not validate_sufficient_OI(option_data, OI_THRESHOLD):\n            continue\n        candidate = build_option_dict(option_data, underlying_price, risk_free_rate)\n        \n        # For calls, consider only options that are OTM (strike above underlying)\n        if candidate['strike_price'] <= underlying_price:\n            print(f\"Skipping {candidate['symbol']}: not OTM for calls (strike {candidate['strike_price']} <= underlying {underlying_price}).\")\n            continue\n        \n        expiration = candidate['expiration']\n        if expiration not in call_candidates_by_expiration:\n            call_candidates_by_expiration[expiration] = {'short_call': [], 'long_call': []}\n        \n        if check_candidate_option_conditions(candidate, criteria['short_call'], 'short_call'):\n            call_candidates_by_expiration[expiration]['short_call'].append(candidate)\n            print(f\"Added {candidate['symbol']} as a short call candidate for expiration {expiration}.\")\n        if check_candidate_option_conditions(candidate, criteria['long_call'], 'long_call'):\n            call_candidates_by_expiration[expiration]['long_call'].append(candidate)\n            print(f\"Added {candidate['symbol']} as a long call candidate for expiration {expiration}.\")\n\n    # Find common expiration(s) present in both puts and calls\n    common_expirations = set(put_candidates_by_expiration.keys()).intersection(set(call_candidates_by_expiration.keys()))\n    \n    if not common_expirations:\n        raise Exception('No common expiration found across put and call candidates.')\n\n    # Choose the expiration with the most candidates\n    selected_expiration = max(common_expirations, key=lambda exp: (len(put_candidates_by_expiration[exp]['long_put']) +\n                                                        len(put_candidates_by_expiration[exp]['short_put']) +\n                                                        len(call_candidates_by_expiration[exp]['short_call']) +\n                                                        len(call_candidates_by_expiration[exp]['long_call'])))\n    print(f\"Selected common expiration: {selected_expiration}\")\n\n    # Use candidates only from the selected common expiration\n    puts_for_selected_expiration = put_candidates_by_expiration[selected_expiration]\n```\n\n----------------------------------------\n\nTITLE: Placing a Market Order with Fractional Quantity\nDESCRIPTION: Creates and submits a market order to buy 5.5 shares of SPY. This demonstrates how Alpaca supports fractional share quantities for trading.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# simple, market order, fractional qty\n# Alpaca trading platform support fractional trading by default\n# you can specify:\n# fractional qty (e.g. 0.01 qty) in the order request (which is shown in this example)\n# or notional value (e.g. 100 USD) (which is in the next example)\n#\n# If you have an error of `qty must be integer`,\n# please try to `Reset Account` of your paper account via the Alpaca Trading API dashboard\nreq = MarketOrderRequest(\n    symbol = symbol,\n    qty = 5.5,\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Placing an OCO Limit Order\nDESCRIPTION: Creates a One-Cancels-Other (OCO) limit order to buy SPY at $500. In an OCO order, when one order fills, the other order is automatically canceled.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# oco limit order\nreq = LimitOrderRequest(\n                    symbol = symbol,\n                    qty = 1,\n                    limit_price = 500,\n                    side = OrderSide.BUY,\n                    time_in_force = TimeInForce.DAY,\n                    Class = OrderClass.OCO\n                    )\n\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Initializing the Alpaca Trading Client\nDESCRIPTION: Creates a TradingClient instance with API credentials and paper trading configuration. This client is used for all trading operations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# setup clients\ntrade_client = TradingClient(api_key=api_key, secret_key=secret_key, paper=paper, url_override=trade_api_url)\n```\n\n----------------------------------------\n\nTITLE: Implementing Delta-Neutral Strategy Management\nDESCRIPTION: Defines functions to calculate the current delta exposure across all positions and adjust the underlying stock position to maintain delta neutrality within predefined risk limits. The strategy manages risk by placing market orders when delta exposure exceeds thresholds.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# maintain delta-neutral strategy\ndef maintain_delta_neutral():\n    current_delta = 0.0\n    underlying_price = get_underlying_price(underlying_symbol)\n\n    print(f\"Current Price of {underlying_symbol} is {underlying_price}\")\n\n    for symbol, pos in positions.items():\n        if pos['asset_class'] == 'us_equity' and symbol == underlying_symbol:\n            current_delta += pos['position']\n        elif pos['asset_class'] == 'us_option' and pos['underlying_symbol'] == underlying_symbol:\n            option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=symbol)\n            option_quote = option_data_client.get_option_latest_quote(option_quote_request)[symbol]\n            option_quote_mid = (option_quote.bid_price + option_quote.ask_price) / 2\n\n            delta, gamma = calculate_greeks(\n                option_price=option_quote_mid,\n                strike_price=pos['strike_price'],\n                expiry=pos['expiration_date'],\n                underlying_price=underlying_price,\n                risk_free_rate=risk_free_rate,\n                option_type=pos['type']\n            )\n\n            current_delta += delta * pos['position'] * pos['size']\n        \n    adjust_delta(current_delta, underlying_price)\n\ndef adjust_delta(current_delta, underlying_price):\n    if current_delta * underlying_price > max_abs_notional_delta:\n        side = 'sell'\n    elif current_delta * underlying_price < -max_abs_notional_delta:\n        side = 'buy'\n    else:\n        return\n    \n    qty = abs(round(current_delta, 0))\n    order_request = MarketOrderRequest(symbol=underlying_symbol, qty=qty, side=side, type='market', time_in_force='day')\n    print(f\"Submitting {side} order for {qty} shares of {underlying_symbol} at market\")\n    trading_client.submit_order(order_request)\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Details in Alpaca Trading API\nDESCRIPTION: This code shows how to access brokerage account details including buying power, pattern day trader status, and total equity using the TradingClient.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\n\ntrading_client = TradingClient('api-key', 'secret-key')\n\naccount = trading_client.get_account()\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpaca API Clients for Trading\nDESCRIPTION: Sets up API credentials securely using Google Colab's userdata functionality and initializes Alpaca clients for trading, streaming updates, and accessing historical stock and option data. Also applies nest_asyncio to allow running async event loops within Jupyter.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nTRADE_API_KEY = userdata.get('ALPACA_API_KEY')\nTRADE_API_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\nPAPER = True\n\n\n# Initialize Alpaca clients\ntrading_client = TradingClient(api_key=TRADE_API_KEY, secret_key=TRADE_API_SECRET, paper=PAPER)\ntrade_update_stream = TradingStream(api_key=TRADE_API_KEY, secret_key=TRADE_API_SECRET, paper=PAPER)\nstock_data_client = StockHistoricalDataClient(api_key=TRADE_API_KEY, secret_key=TRADE_API_SECRET)\noption_data_client = OptionHistoricalDataClient(api_key=TRADE_API_KEY, secret_key=TRADE_API_SECRET)\n\n# Apply nest_asyncio to allow running the event loop\nnest_asyncio.apply()\n```\n\n----------------------------------------\n\nTITLE: Finding Options for Bull Put Spread\nDESCRIPTION: This orchestrator function processes put options to identify suitable candidates for a bull put spread. It filters options based on open interest, calculates metrics, applies filtering criteria, pairs compatible options, and checks buying power requirements.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef find_options_for_bull_put_spread(put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD):\n    \"\"\"\n    Orchestrates the workflow to build a bull put spread.\n    Groups options by expiration, filters them with criteria, pairs candidates using helper functions,\n    and checks buying power.\n    \n    Returns:\n        A list of legs [short_put, long_put] if a valid pair is found, or an empty list otherwise.\n    \"\"\"\n    short_put_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n    long_put_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n\n    # Process each option candidate\n    for option_data in put_options:\n        if not validate_sufficient_OI(option_data, OI_THRESHOLD):\n            logger.warning(f\"Insufficient open interest for option {getattr(option_data, 'symbol', 'unknown')} (threshold: {OI_THRESHOLD}). Skipping candidate.\")\n            continue\n\n        candidate = build_option_dict(option_data, underlying_price, risk_free_rate)\n        # Skip if candidate creation fails (e.g., missing IV/Greeks)\n        if candidate is None:\n            continue\n        \n        expiration_date = candidate['expiration_date']\n        short_put_candidates_by_exp.setdefault(expiration_date, [])\n        long_put_candidates_by_exp.setdefault(expiration_date, [])\n        \n        # Check each candidate for both put criteria\n        if check_candidate_option_conditions(candidate, criteria['short_put'], 'short_put'):\n            short_put_candidates_by_exp[expiration_date].append(candidate)\n            logger.info(f\"Added {candidate['symbol']} as a short put candidate for expiration {expiration_date}.\")\n        if check_candidate_option_conditions(candidate, criteria['long_put'], 'long_put'):\n            long_put_candidates_by_exp[expiration_date].append(candidate)\n```\n\n----------------------------------------\n\nTITLE: Executing Iron Condor Order\nDESCRIPTION: Places a market order for a four-legged iron condor options strategy using the Alpaca API, including both call and put spreads.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nif iron_condor_order_legs:\n    # Create a list for the order request\n    order_legs = []\n    ## Append short put\n    order_legs.append(OptionLegRequest(\n        symbol=iron_condor_order_legs[0][\"symbol\"],\n        side=OrderSide.SELL,\n        ratio_qty=1\n    ))\n    ## Append long put\n    order_legs.append(OptionLegRequest(\n        symbol=iron_condor_order_legs[1][\"symbol\"],\n        side=OrderSide.BUY,\n        ratio_qty=1\n    ))\n    ## Append short call\n    order_legs.append(OptionLegRequest(\n        symbol=iron_condor_order_legs[2][\"symbol\"],\n        side=OrderSide.SELL,\n        ratio_qty=1\n    ))\n    ## Append long call\n    order_legs.append(OptionLegRequest(\n        symbol=iron_condor_order_legs[3][\"symbol\"],\n        side=OrderSide.BUY,\n        ratio_qty=1\n    ))\n\n    # Place the order for both legs simultaneously\n    req = MarketOrderRequest(\n        qty=1,\n        order_class=OrderClass.MLEG,\n        time_in_force=TimeInForce.DAY,\n        legs=order_legs\n    )\n    res = trade_client.submit_order(req)\n    print(\"Short Iron Condor order placed successfully.\")\n```\n\n----------------------------------------\n\nTITLE: Executing Cash Secured Put Strategy\nDESCRIPTION: Function to execute a cash secured put strategy by finding appropriate options and placing market orders. Includes validation of option availability and suitable delta values.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef execute_cash_secured_put(underlying_symbol, risk_free_rate, buying_power_limit, min_strike, max_strike, min_expiration, max_expiration):\n    put_options = get_put_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration)\n\n    if put_options:\n        underlying_price = get_underlying_price(symbol=underlying_symbol)\n        short_put = find_short_put_option(put_options, underlying_price, risk_free_rate, buying_power_limit)\n\n        if short_put:\n            req = MarketOrderRequest(\n                symbol=short_put['symbol'],\n                qty=1,\n                side='sell',\n                type='market',\n                time_in_force='day'\n            )\n\n            trade_client.submit_order(req)\n\n            success_message = (f\"Placing Cash Secured Put on {underlying_symbol} successfully:\\n\"\n                               f\"Sell {short_put['initial_delta']} Delta Put: {short_put['symbol']} \"\n                               f\"(Strike: {short_put['strike_price']}, Premium to Receive: {short_put['initial_option_price']})\")\n            return success_message, short_put\n        else:\n            return \"Could not find suitable options which has delta between -20 and -40.\", None\n    else:\n        return \"No put options available for the underlying symbol.\", None\n```\n\n----------------------------------------\n\nTITLE: Placing a Bear Put Spread Order with Alpaca\nDESCRIPTION: Places a bear put spread order by creating a multi-leg options order where one leg sells the short put and another leg buys the long put. Returns the order response on success or None on failure.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef place_bear_put_spread_order(short_put, long_put):\n    \"\"\"\n    Place a bear put spread order if both short_put and long_put data are provided.\n    \"\"\"\n    if not (short_put and long_put):\n        logger.info(\"No valid bear put spread found.\")\n        return None\n\n    try:\n        # Build order legs: sell the short put and buy the long put.\n        order_legs = [\n            OptionLegRequest(\n                symbol=short_put['symbol'],\n                side=OrderSide.SELL,\n                ratio_qty=1\n            ),\n            OptionLegRequest(\n                symbol=long_put['symbol'],\n                side=OrderSide.BUY,\n                ratio_qty=1\n            )\n        ]\n\n        # Create a market order for a multi-leg (spread) order.\n        req = MarketOrderRequest(\n            qty=1,\n            order_class=OrderClass.MLEG,\n            time_in_force=TimeInForce.DAY,\n            legs=order_legs\n        )\n        res = trade_client.submit_order(req)\n        logger.info(\"A bear put spread order placed successfully.\")\n        return res\n    except Exception as e:\n        logger.error(f\"Failed to place a bear put spread order: {e}\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Finding Options for Bull Put Spread in Python\nDESCRIPTION: This function finds suitable options for a bull put spread based on given criteria, including underlying price, risk-free rate, and buying power limit.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nsp, lp = find_options_for_bull_put_spread(put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD)\n```\n\n----------------------------------------\n\nTITLE: Calculating Option Metrics (Price, IV, and Greeks) in Python\nDESCRIPTION: Function to calculate key metrics for an option including its price, expiration information, implied volatility (IV), and Greeks (delta, gamma, theta, vega). Uses the Alpaca API to retrieve the latest option snapshot and extracts relevant data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_option_metrics(option_data, underlying_price, risk_free_rate):\n    \"\"\"\n    Calculate key option metrics including option price, implied volatility (IV), and option Greeks.\n    \"\"\"\n    \n    # Calculate expiration and remaining days\n    option_symbol = option_data['symbol']\n    expiration_date = pd.Timestamp(option_data['expiration_date'])\n    remaining_days = (expiration_date - pd.Timestamp.now()).days\n    \n    # Retrieve the latest quote for the option\n    req = OptionSnapshotRequest(symbol_or_symbols = option_symbol)\n    snapshot = option_historical_data_client.get_option_snapshot(req)[option_symbol]\n\n    # Check if snapshot or its required attributes are None; if so, skip further processing\n    if snapshot is None or snapshot.latest_quote is None or snapshot.greeks is None:\n        return None\n    \n    option_price = (snapshot.latest_quote.bid_price + snapshot.latest_quote.ask_price) / 2\n\n    ## implied volatility\n    iv = snapshot.implied_volatility\n    ## Greeks\n    delta = snapshot.greeks.delta\n    gamma = snapshot.greeks.gamma\n    theta = snapshot.greeks.theta\n    vega = snapshot.greeks.vega\n    \n    return {\n        'option_price': option_price,\n        'expiration_date': expiration_date,\n        'remaining_days': remaining_days,\n        'iv': iv,\n        'delta': delta,\n        'gamma': gamma,\n        'theta': theta,\n        'vega': vega\n    }\n```\n\n----------------------------------------\n\nTITLE: Placing a Market Order for Options\nDESCRIPTION: Demonstrates placing a market order to buy an option contract. The order uses the same structure as equity orders but references an option contract symbol.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# place buy put option order\n# - we can place buy put option order same as buy stock/crypto order\nreq = MarketOrderRequest(\n    symbol = high_open_interest_contract.symbol,\n    qty = 1,\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Exercising an Option Contract in Alpaca Trading API (Python)\nDESCRIPTION: Method to exercise an option contract position using the Alpaca Trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/positions.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.exercise_options_position\n```\n\n----------------------------------------\n\nTITLE: Implementing Bollinger Bands Calculation in Python\nDESCRIPTION: This function calculates Bollinger Bands for price data using a specified period and multiplier. It returns the upper and lower band values which represent price levels of high and low volatility respectively, based on standard deviations from a simple moving average.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# setup bollinger band calculations\ndef check_bb(df, period=14, multiplier=2):\n    bollinger_bands = []\n    # Calculate the Simple Moving Average (SMA)\n    df['SMA'] = df['close'].rolling(window=period).mean()\n    # Calculate the rolling standard deviation\n    df['StdDev'] = df['close'].rolling(window=period).std()\n    # Calculate the Upper Bollinger Band (two standard deviation)\n    df['Upper Band'] = df['SMA'] + (multiplier * df['StdDev'])\n    # Calculate the Lower Bollinger Band (two standard deviation)\n    df['Lower Band'] = df['SMA'] - (multiplier * df['StdDev'])\n    # Get the most recent Upper Band value\n    upper_bollinger_band = df['Upper Band'].iloc[-1]\n    lower_bollinger_band = df['Lower Band'].iloc[-1]\n    \n    bollinger_bands = [upper_bollinger_band, lower_bollinger_band]\n    return bollinger_bands\n\nbollinger_bands = check_bb(priceData, 14, 2)\n\n# The current market price is not too close to the two-standard deviation level yet but is relatively closer to the higher Bollinger Band.\nprint(f\"Latest Upper Bollinger Band is: {bollinger_bands[0]}. Latest Lower Bollinger Band is {bollinger_bands[1]}; while underlying stock '{underlying_symbol}' price is {underlying_price}.\")\n```\n\n----------------------------------------\n\nTITLE: Find Options for Bull Call Spread - Python\nDESCRIPTION: Searches for appropriate options to create a bull call spread based on given criteria and thresholds.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsc, lc = find_options_for_bull_call_spread(call_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD)\n```\n\n----------------------------------------\n\nTITLE: Implementing Black-Scholes Model for Options Pricing and Greeks Calculation\nDESCRIPTION: Functions to calculate implied volatility and option Greeks using the Black-Scholes model. Includes calculations for delta, gamma, theta, and vega, with error handling for edge cases such as options close to expiration or near intrinsic value.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Calculate implied volatility\ndef calculate_implied_volatility(option_price, S, K, T, r, option_type):\n    \n    # Define a reasonable range for sigma\n    sigma_lower = 1e-6\n    sigma_upper = 5.0  # Adjust upper limit if necessary\n\n    # Check if the option is out-of-the-money and price is close to zero\n    intrinsic_value = max(0, (S - K) if option_type == 'call' else (K - S))\n    if option_price <= intrinsic_value + 1e-6:\n        \n        print('Option price is close to intrinsic value; implied volatility is near zero.')\n        return 0.0\n    \n    # Define the function to find the root\n    def option_price_diff(sigma):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        if option_type == 'call':\n            price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n        elif option_type == 'put':\n            price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)\n        return price - option_price\n\n    try:\n        return brentq(option_price_diff, sigma_lower, sigma_upper)\n    except ValueError as e:\n        print(f\"Failed to find implied volatility: {e}\")\n        return None\n\n\ndef calculate_greeks(option_price, strike_price, expiration, underlying_price, risk_free_rate, option_type):\n    T = (expiration - pd.Timestamp.now()).days / 365 # It is unconventional, but some use 225 days (# of annual trading days) in replace of 365 days\n    T = max(T, 1e-6)  # Set minimum T to avoid zero\n    \n    if T == 1e-6:\n        print('Option has expired or is expiring now; setting Greeks based on intrinsic value.')\n        if option_type == 'put':\n            delta = -1.0 if underlying_price < strike_price else 0.0\n        else:\n            delta = 1.0 if underlying_price > strike_price else 0.0\n        gamma = 0.0\n        theta = 0.0\n        vega = 0.0\n        return delta, gamma, theta, vega\n    \n    # Calculate IV\n    IV = calculate_implied_volatility(option_price, underlying_price, strike_price, T, risk_free_rate, option_type)\n\n    if IV is None or IV == 0.0:\n        print('Implied volatility could not be determined, skipping Greek calculations.')\n        return None\n    \n    d1 = (np.log(underlying_price / strike_price) + (risk_free_rate + 0.5 * IV ** 2) * T) / (IV * np.sqrt(T))\n    d2 = d1 - IV * np.sqrt(T) # d2 for Theta calculation\n    # Calculate Delta\n    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)\n    # Calculate Gamma\n    gamma = norm.pdf(d1) / (underlying_price * IV * np.sqrt(T))\n    # Calculate Vega\n    vega = underlying_price * np.sqrt(T) * norm.pdf(d1) / 100\n    # Calculate Theta\n    if option_type == 'call':\n        theta = (\n            - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T))\n            - (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(d2))\n        )\n    else:\n        theta = (\n            - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T))\n            + (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(-d2))\n        )\n    # Convert annualized theta to daily theta\n    theta /= 365\n    \n    return delta, gamma, theta, vega\n```\n\n----------------------------------------\n\nTITLE: Setting Up Alpaca API Credentials and Client Initialization\nDESCRIPTION: Initializes the Alpaca API clients for trading and data retrieval using API credentials stored in Google Colab's userdata. The setup specifically configures for paper trading to avoid using real money during testing.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example\nPAPER = True # Please do not modify this. This example is for paper trading only.\n\n# Initialize Alpaca clients\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment and Importing Dependencies for Alpaca Options Trading in Python\nDESCRIPTION: This snippet installs the alpaca-py package and imports necessary libraries for options trading. It sets up clients for trading, historical data, and stock data using Alpaca's API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `alpaca-py` and import it\n!python3 -m pip install --upgrade alpaca-py\n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport alpaca\nimport time\nfrom scipy.optimize import brentq\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\n\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import StockBarsRequest, OptionLatestQuoteRequest, OptionChainRequest, OptionBarsRequest\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (\n    MarketOrderRequest,\n    LimitOrderRequest,\n    GetOptionContractsRequest,\n    MarketOrderRequest,\n    OptionLegRequest,\n    ClosePositionRequest,\n    CreateWatchlistRequest\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    ExerciseStyle,\n    OrderSide,\n    OrderClass,\n    OrderStatus,\n    OrderType,\n    TimeInForce,\n    QueryOrderStatus,\n    ContractType,\n)\n```\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example (Please do not modify this. This example is for paper trading only).\nPAPER = True\n\n# Initialize Alpaca clients\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Calculating Option Metrics and Greeks in Python\nDESCRIPTION: Function to calculate key option metrics including option price, implied volatility (IV), and option Greeks (delta, gamma, theta, vega). Uses the latest quote from Alpaca's API and mathematical models for options pricing.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_option_metrics(option_data, underlying_price, risk_free_rate):\n    \"\"\"\n    Calculate key option metrics including option price, implied volatility (IV), and option Greeks.\n    \"\"\"\n    # Retrieve the latest quote for the option\n    option_quote_req = OptionLatestQuoteRequest(symbol_or_symbols=option_data['symbol'])\n    option_quote = option_historical_data_client.get_option_latest_quote(option_quote_req)[option_data['symbol']]\n    option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n\n    # Calculate expiration and remaining days\n    expiration_date = pd.Timestamp(option_data['expiration_date'])\n    remaining_days = (expiration_date - pd.Timestamp.now()).days\n\n    # Calculate implied volatility\n    iv = calculate_implied_volatility(\n        option_price=option_price,\n        S=underlying_price,\n        K=float(option_data['strike_price']),\n        T=max(remaining_days / 365, 1e-6),\n        r=risk_free_rate,\n        option_type=option_data['type'].value\n    )\n    \n    # Calculate Greeks (delta and vega)\n    delta, gamma, theta, vega = calculate_greeks(\n        option_price=option_price,\n        strike_price=float(option_data['strike_price']),\n        expiration=expiration_date,\n        underlying_price=underlying_price,\n        risk_free_rate=risk_free_rate,\n        option_type=option_data['type'].value\n    )\n    \n    return {\n        'option_price': option_price,\n        'expiration_date': expiration_date,\n        'remaining_days': remaining_days,\n        'iv': iv,\n        'delta': delta,\n        'gamma': gamma,\n        'theta': theta,\n        'vega': vega\n    }\n```\n\n----------------------------------------\n\nTITLE: Long Straddle Strategy Execution in Python\nDESCRIPTION: Implements order placement for a long straddle options strategy with both put and call legs\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nif long_straddle_order_legs:\n    order_legs = []\n    order_legs.append(OptionLegRequest(\n        symbol=long_straddle_order_legs[0][\"symbol\"],\n        side=OrderSide.BUY,\n        ratio_qty=1\n    ))\n    order_legs.append(OptionLegRequest(\n        symbol=long_straddle_order_legs[1][\"symbol\"],\n        side=OrderSide.BUY,\n        ratio_qty=1\n    ))\n\n    req = MarketOrderRequest(\n        qty=1,\n        order_class=OrderClass.MLEG,\n        time_in_force=TimeInForce.DAY,\n        legs=order_legs\n    )\n    res = trade_client.submit_order(req)\n    print(\"Long Straddle order placed successfully.\")\n```\n\n----------------------------------------\n\nTITLE: Submitting a Multi-Leg Market Order for a Straddle\nDESCRIPTION: Places a market order for both the call and put option legs simultaneously as a multi-leg (MLEG) order, ensuring the straddle is executed as a single transaction.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Now we place the order for both legs at the same time\nreq = MarketOrderRequest(\n    qty=1,\n    order_class=OrderClass.MLEG,\n    time_in_force=TimeInForce.DAY,\n    legs=order_legs\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Creating an ACH Relationship for Account Funding in Python\nDESCRIPTION: This snippet shows how to establish an ACH relationship for an account using routing and account numbers. Creating this relationship is a prerequisite before being able to transfer funds to or from an account via ACH.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker.client import BrokerClient\nfrom alpaca.broker.requests import CreateACHRelationshipRequest\nfrom alpaca.broker.enums import BankAccountType\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\naccount_id = \"c8f1ef5d-edc0-4f23-9ee4-378f19cb92a4\"\n\nach_data = CreateACHRelationshipRequest(\n                    account_owner_name=\"John Doe\",\n                    bank_account_type=BankAccountType.CHECKING,\n                    bank_account_number=\"123456789abc\",\n                    bank_routing_number=\"121000358\",\n                )\n\nach_relationship = broker_client.create_ach_relationship_for_account(\n                    account_id=account_id,\n                    ach_data=ach_data\n                )\n```\n\n----------------------------------------\n\nTITLE: Calculating Average True Range (ATR) for Defense Stocks in Python\nDESCRIPTION: Implements functions to fetch stock data and calculate technical indicators including True Range (TR) and Average True Range (ATR) for multiple defense contractors. The code processes data for LMT, RTX, and NOC stocks to analyze their volatility.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Fetch the stock data from the Polygon API\ndef get_stock_data(underlying_symbol, from_date, to_date):\n    # Get daily bars for the underlying stock\n    req = client.get_aggs(ticker=underlying_symbol,\n                          multiplier=1,             # 1-day timespan\n                          timespan='day',\n                          from_=from_date,\n                          to=to_date)\n\n    # List of polygon agg objects to DataFrame\n    priceData = pd.DataFrame(req)\n    # Create Date column\n    priceData['date'] = pd.to_datetime(priceData['timestamp'], unit='ms')\n    priceData = priceData.set_index('date')\n\n    return priceData\n\n# Calculate True Range for the underlying stock in the last 90 days\ndef calculate_true_range(data):\n    data['prev_close'] = data['close'].shift(1)  # Shift the closing price by 1 day\n    data['tr'] = np.maximum(\n        data['high'] - data['low'],\n        np.maximum(\n            abs(data['high'] - data['prev_close']),\n            abs(data['low'] - data['prev_close'])\n        )\n    )\n    return data\n\n# Calculate ATR for the underlying stock on the last 90 days\ndef calculate_atr(data, period=14):\n    data['atr'] = data['tr'].rolling(window=period).mean()\n    return data\n\n# Calculate ATR for multiple stocks\ndef get_atr_for_stocks(stock_symbols, period, from_date, to_date):\n    results = {}\n\n    for symbol in stock_symbols:\n        print(f\"Processing {symbol}...\")\n        data = get_stock_data(symbol, from_date, to_date)\n        data = calculate_true_range(data)\n        data = calculate_atr(data, period=period)\n        results[symbol] = data[['tr', 'atr']].dropna()  # Store TR and ATR data for each stock\n\n    return results\n\n# List of stock symbols\nstock_symbols = ['LMT', 'RTX', 'NOC']\n\n# Call the function for multiple stocks\natr_results = get_atr_for_stocks(stock_symbols, period=14, from_date='2024-01-05', to_date='2024-12-31')\n\n# Display ATR results for each stock\nfor symbol, result in atr_results.items():\n    # Calculate the mean ATR for the past days\n    atr_mean = result[\"atr\"].mean()\n    days = calculate_days_between('2024-01-01', '2024-12-31')\n    print(f\"\\nThe average ATR for {symbol} over the past {days} days is:\\n\")\n    print(atr_mean)\n```\n\n----------------------------------------\n\nTITLE: Building Option Dictionary with Metrics and Greeks in Python\nDESCRIPTION: A helper function to create a comprehensive dictionary of option data, including price, implied volatility, and Greeks calculations. The function retrieves latest quotes and calculates remaining days to expiration.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef build_option_dict(option_data, underlying_price, risk_free_rate):\n    '''\n    Helper to build an option dictionary from option_data and calculated metrics.\n    '''\n    # Retrieve the latest quote\n    option_quote_req = OptionLatestQuoteRequest(symbol_or_symbols=option_data.symbol)\n    option_quote = option_historical_data_client.get_option_latest_quote(option_quote_req)[option_data.symbol]\n    option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n\n    strike_price = float(option_data.strike_price)\n    expiration = pd.Timestamp(option_data.expiration_date)\n    remaining_days = (expiration - pd.Timestamp.now()).days\n\n    iv = calculate_implied_volatility(\n        option_price=option_price,\n        S=underlying_price,\n        K=strike_price,\n        T=max(remaining_days / 365, 1e-6),\n        r=risk_free_rate,\n        option_type=option_data.type.value\n    )\n    delta, _, theta, _ = calculate_greeks(\n        option_price=option_price,\n        strike_price=strike_price,\n        expiration=expiration,\n        underlying_price=underlying_price,\n        risk_free_rate=risk_free_rate,\n        option_type=option_data.type.value\n    )\n\n    # Build a candidate dictionary that can be augmented or returned\n    candidate = {\n        'id': option_data.id,\n        'name': option_data.name,\n        'symbol': option_data.symbol,\n        'strike_price': option_data.strike_price,\n        'root_symbol': option_data.root_symbol,\n        'underlying_symbol': option_data.underlying_symbol,\n        'underlying_asset_id': option_data.underlying_asset_id,\n        'close_price': option_data.close_price,\n        'close_price_date': option_data.close_price_date,\n        'expiration': expiration,\n        'remaining_days': remaining_days,\n        'open_interest': option_data.open_interest,\n        'open_interest_date': option_data.open_interest_date,\n        'size': option_data.size,\n        'status': option_data.status,\n        'style': option_data.style,\n        'tradable': option_data.tradable,\n        'type': option_data.type,\n        'initial_IV': iv,\n        'initial_delta': delta,\n        'initial_theta': theta,\n        'initial_option_price': option_price,\n\n    }\n    return candidate\n```\n\n----------------------------------------\n\nTITLE: Placing a Bracket Order with Stop Loss and Take Profit\nDESCRIPTION: Creates a bracket order that includes a market order to buy 5 shares of SPY with automatic take profit at $600 and stop loss at $300. This sets up automatic exit conditions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# bracket order with both stop loss and take profit\nreq = MarketOrderRequest(\n                    symbol = symbol,\n                    qty = 5,\n                    side = OrderSide.BUY,\n                    time_in_force = TimeInForce.DAY,\n                    order_class = OrderClass.BRACKET,\n                    take_profit = TakeProfitRequest(limit_price=600),\n                    stop_loss = StopLossRequest(stop_price=300)\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Documenting TradingClient Class with Sphinx\nDESCRIPTION: Sphinx documentation directive that automatically generates documentation for the TradingClient class constructor from the alpaca.trading.client module. The directive specifically documents the __init__ method of the class.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/trading-client.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: alpaca.trading.client.TradingClient\n   :members: __init__\n```\n\n----------------------------------------\n\nTITLE: Finding Short Call Options with Delta-Based Selection\nDESCRIPTION: Function to identify suitable call options for selling based on delta values (0.18-0.42), open interest thresholds, and strike price criteria relative to Bollinger Bands. Includes error handling and data validation.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef find_short_call_option(call_options, underlying_price, risk_free_rate, latest_upper_boiler_band):\n    short_call = None\n\n    for option_data in call_options:\n        try:\n            if option_data.open_interest is None or option_data.open_interest_date is None:\n                continue\n\n            if float(option_data.open_interest) <= OI_THRESHOLD:\n                continue\n\n            option_symbol = option_data.symbol\n            option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n            option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n\n            option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n            option_size = float(option_data.size)\n            strike_price = float(option_data.strike_price)\n            expiry = pd.Timestamp(option_data.expiration_date)\n\n            delta = calculate_delta(\n                option_price=option_price,\n                strike_price=strike_price,\n                expiry=expiry,\n                underlying_price=underlying_price,\n                risk_free_rate=risk_free_rate,\n                option_type='call'\n            )\n\n            if delta is not None and delta >= 0.18 and delta <= 0.42 and strike_price > latest_upper_boiler_band:\n                short_call = {\n                    'close_price': option_data.close_price,\n                    'close_price_date': option_data.close_price_date,\n                    'expiration_date': option_data.expiration_date,\n                    'id': option_data.id,\n                    'name': option_data.name,\n                    'open_interest': option_data.open_interest,\n                    'open_interest_date': option_data.open_interest_date,\n                    'root_symbol': option_data.root_symbol,\n                    'size': option_data.size,\n                    'status': option_data.status,\n                    'strike_price': option_data.strike_price,\n                    'style': option_data.style,\n                    'symbol': option_data.symbol,\n                    'tradable': option_data.tradable,\n                    'type': option_data.type,\n                    'underlying_asset_id': option_data.underlying_asset_id,\n                    'underlying_symbol': option_data.underlying_symbol,\n                    'initial_delta': delta,\n                    'initial_option_price': option_price,\n                }\n\n            if short_call:\n                break\n\n        except KeyError as e:\n            print(f\"Missing data for option {option_symbol}: {e}\")\n            continue\n\n    return short_call\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contracts with Alpaca API in Python\nDESCRIPTION: Function to fetch option contracts based on underlying symbol, strike price range, expiration date range, and option type (call or put). Uses Alpaca's GetOptionContractsRequest to filter options.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, option_type):\n    req = GetOptionContractsRequest(\n        underlying_symbols=[underlying_symbol],\n        status=AssetStatus.ACTIVE,\n        type=option_type,\n        strike_price_gte=min_strike,\n        strike_price_lte=max_strike,\n        expiration_date_gte=min_expiration,\n        expiration_date_lte=max_expiration,        \n    )\n    return trade_client.get_option_contracts(req).option_contracts\n```\n\n----------------------------------------\n\nTITLE: Finding Options for Short Iron Butterfly Strategy in Python\nDESCRIPTION: A comprehensive function that processes put and call options, filters them by criteria, groups by expiration, pairs candidates, and validates risk limits to find a valid short iron butterfly option strategy. Returns the selected option legs if successful.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef find_options_for_short_iron_butterfly(put_options, call_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD):\n    \"\"\"\n    Refactored workflow to find and validate short iron butterfly candidates.\n    Processes puts and calls in a single loop, groups by expiration, filters by OI and criteria, pairs candidates, checks risk, and returns the first valid set.\n\n    Returns:\n        A list containing four dictionaries [long_put, short_put, short_call, long_call]\n        representing the selected legs if a valid combination is found,\n        otherwise an empty list ([]).\n    \"\"\"\n    short_put_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n    long_put_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n    short_call_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n    long_call_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n    \n    # Combine puts and calls with their type for single processing loop\n    # This assumes put_options and call_options are lists/iterables\n    all_options_with_type = [('put', opt) for opt in put_options] + [('call', opt) for opt in call_options]\n    logger.info(f\"Starting processing for {len(all_options_with_type)} total options...\")\n\n    for option_type, option_data in all_options_with_type:\n        # 1. Common Step: Check Open Interest\n        if not validate_sufficient_OI(option_data, OI_THRESHOLD):\n            logger.warning(f\"Insufficient OI for {getattr(option_data, 'symbol', 'unknown')}. Skipping.\") # Optional logging\n            continue\n\n        # 2. Common Step: Build Candidate Dictionary\n        candidate = build_option_dict(option_data, underlying_price, risk_free_rate)\n        # Skip if candidate creation fails (e.g., missing IV/Greeks)\n        if candidate is None:\n            continue\n        expiration_date = candidate['expiration_date']\n\n        # 3. Grouping & Categorization (based on option_type)\n        # Appends candidates to the original separate dictionaries\n        if option_type == 'put':\n            short_put_candidates_by_exp.setdefault(expiration_date, [])\n            long_put_candidates_by_exp.setdefault(expiration_date, [])\n            if check_greeks_iv_for_candidate_option(candidate, criteria.get('short_put', {}), 'short_put'):\n                short_put_candidates_by_exp[expiration_date].append(candidate)\n            if check_greeks_iv_for_candidate_option(candidate, criteria.get('long_put', {}), 'long_put'):\n                long_put_candidates_by_exp[expiration_date].append(candidate)\n        elif option_type == 'call':\n            short_call_candidates_by_exp.setdefault(expiration_date, [])\n            long_call_candidates_by_exp.setdefault(expiration_date, [])\n            if check_greeks_iv_for_candidate_option(candidate, criteria.get('short_call', {}), 'short_call'):\n                short_call_candidates_by_exp[expiration_date].append(candidate)\n            if check_greeks_iv_for_candidate_option(candidate, criteria.get('long_call', {}), 'long_call'):\n                long_call_candidates_by_exp[expiration_date].append(candidate)\n    \n    # Process only expiration dates common to all four candidate groups\n    logger.info(\"Finding common expirations and attempting pairing...\")\n    common_expirations = set(short_put_candidates_by_exp.keys()) & set(long_put_candidates_by_exp.keys()) & set(short_call_candidates_by_exp.keys()) & set(long_call_candidates_by_exp.keys())\n    sorted_common_expirations = sorted(list(common_expirations))\n\n    for expiration_date in sorted_common_expirations:\n            logger.debug(f\"Checking common expiration: {expiration_date}\")\n\n            sp_list = short_put_candidates_by_exp.get(expiration_date, [])\n            lp_list = long_put_candidates_by_exp.get(expiration_date, [])\n            sc_list = short_call_candidates_by_exp.get(expiration_date, [])\n            lc_list = long_call_candidates_by_exp.get(expiration_date, [])\n\n            if not all([sp_list, lp_list, sc_list, lc_list]):\n                logger.warning(f\"Expiration {expiration_date} in common set but found empty list(s). Skipping.\")\n                continue\n\n            paired_legs_tuple = pair_short_iron_butterfly_candidates(\n                long_puts=lp_list,\n                short_puts=sp_list,\n                short_calls=sc_list,\n                long_calls=lc_list,\n                underlying_price=underlying_price\n            )\n\n            if paired_legs_tuple and len(paired_legs_tuple) == 4 and all(leg is not None for leg in paired_legs_tuple):\n                lp, sp, sc, lc = paired_legs_tuple # Unpack\n\n                try:\n                    check_risk_and_buying_power(lp, sp, sc, lc, buying_power_limit)\n                    logger.info(f\"Selected short iron butterfly for expiration {expiration_date}: long_put {lp['symbol']}, short_put {sp['symbol']}, short_call {sc['symbol']}, long_call {lc['symbol']}.\")\n                    # <<< Return the first valid, risk-checked pair\n                    option_legs = [lp, sp, sc, lc]\n                    return option_legs\n                except Exception as e:\n                    logger.error(f\"Pair for expiration {expiration_date} failed buying power check: {e}\")\n                    # <<< Continue to the next expiration date\n                    continue\n            # else:\n                # logger.debug(f\"No valid 4-leg combo returned by pairing function for {expiration_date}.\")\n\n    # If loop completes without returning\n    logger.info(\"No valid short iron butterfly found meeting all criteria.\")\n    option_legs = [None, None, None, None]\n    return option_legs\n```\n\n----------------------------------------\n\nTITLE: Placing a Stop Limit Order\nDESCRIPTION: Creates and submits a stop limit order to buy 1 share of SPY with a stop price of $600 and a limit price of $550. This combines features of both stop and limit orders.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# stop limit order\nreq = StopLimitOrderRequest(\n                    symbol = symbol,\n                    qty = 1,\n                    side = OrderSide.BUY,\n                    time_in_force = TimeInForce.GTC,\n                    limit_price = 550,\n                    stop_price = 600\n                    )\n\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Querying Cryptocurrency Historical Data with Alpaca Python SDK\nDESCRIPTION: This snippet demonstrates how to create a CryptoHistoricalDataClient, set up parameters using CryptoBarsRequest, and fetch historical cryptocurrency price data for BTC/USD and ETH/USD. It also shows how to convert the returned data to a pandas DataFrame.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/README.md#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# no keys required for crypto data\nclient = CryptoHistoricalDataClient()\n\nrequest_params = CryptoBarsRequest(\n                        symbol_or_symbols=[\"BTC/USD\", \"ETH/USD\"],\n                        timeframe=TimeFrame.Day,\n                        start=datetime.strptime(\"2022-07-01\", '%Y-%m-%d')\n                        )\n\nbars = client.get_crypto_bars(request_params)\n\n# convert to dataframe\nbars.df\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Credentials and Initializing Alpaca Clients\nDESCRIPTION: This code securely retrieves API credentials from Google Colab's userdata, initializes Alpaca clients for trading and data retrieval, and sets up the paper trading environment for safe testing of the strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example (Please do not modify this. This example is for paper trading only).\nPAPER = True\n\n# Initialize Alpaca clients\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Fetching Put Options with Alpaca API in Python\nDESCRIPTION: A function that retrieves put option contracts based on specified criteria for underlying symbol, strike price range, and expiration date range using the Alpaca trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Check for put options\ndef get_put_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration):\n    \n    # Fetch the options data to add to the portfolio\n    req = GetOptionContractsRequest(\n        underlying_symbols=[underlying_symbol],\n        status=AssetStatus.ACTIVE,\n        type=ContractType.PUT,\n        strike_price_gte=min_strike,\n        strike_price_lte=max_strike,\n        expiration_date_gte=min_expiration,\n        expiration_date_lte=max_expiration,        \n    )\n    \n    # Get put option chain of the underlying symbol\n    put_options = trade_client.get_option_contracts(req).option_contracts\n    return put_options\n```\n\n----------------------------------------\n\nTITLE: Getting Option Snapshot from Alpaca in Python\nDESCRIPTION: This snippet retrieves a snapshot of option data using the OptionHistoricalDataClient. It requires specifying the symbol or symbols for the request.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_30\n\nLANGUAGE: python\nCODE:\n```\nreq = OptionSnapshotRequest(\n    symbol_or_symbols = [high_open_interest_contract.symbol],\n)\noption_historical_data_client.get_option_snapshot(req)\n```\n\n----------------------------------------\n\nTITLE: Querying Multi-Leg Order Status\nDESCRIPTION: Demonstrates various ways to query the status of a multi-leg order by its ID, client ID, or the IDs of individual legs.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Note that we can query via order ids or client order ids for the whole order or individual legs\n\n# Query by the order's client id\nq1 = trade_client.get_order_by_client_id(res.client_order_id)\n\n# Query by the whole order's id\nq2 = trade_client.get_order_by_id(res.id)\n\n# Query just the first leg's client id\nq3 = trade_client.get_order_by_client_id(res.legs[0].client_order_id)\n\n# Query by first leg's id\nq4 = trade_client.get_order_by_id(res.legs[0].id)\n\nprint(f\"Q1: {q1}\\n===\\nQ2: {q2}\\n===\\nQ3: {q3}\\n===\\nQ4: {q4}\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Open Positions\nDESCRIPTION: Gets a list of all currently open positions in the account. This shows all assets currently held, with details like quantity, market value, and profit/loss.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# get all open positions\n# ref. https://docs.alpaca.markets/reference/getallopenpositions-1\npositions = trade_client.get_all_positions()\npositions\n```\n\n----------------------------------------\n\nTITLE: Get Call Options from Alpaca API - Python\nDESCRIPTION: Retrieves call options data for a given underlying symbol within specified strike and expiration ranges.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ncall_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, ContractType.CALL)\n```\n\n----------------------------------------\n\nTITLE: Querying Available Assets on NASDAQ\nDESCRIPTION: Retrieves a list of active assets on the NASDAQ exchange. The request is configured to filter for active status and NASDAQ exchange, showing how to query specific asset subsets.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# get list of assets which are us_equity (default), active, and in NASDAQ\n# ref. https://docs.alpaca.markets/reference/get-v2-assets-1\nreq = GetAssetsRequest(\n  # asset_class=AssetClass.US_EQUITY,  # default asset_class is us_equity\n  status=AssetStatus.ACTIVE,\n  exchange=AssetExchange.NASDAQ,\n)\nassets = trade_client.get_all_assets(req)\nassets[:2]\n```\n\n----------------------------------------\n\nTITLE: Cancelling and Validating Multi-leg Order in Python\nDESCRIPTION: Shows how to cancel a multi-leg order and verify the cancellation through order status query.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Cancel the whole order\ntrade_client.cancel_order_by_id(res.id)\n\n# To validate, we can query the order again\nres = trade_client.get_order_by_client_id(res.client_order_id)\nres\n```\n\n----------------------------------------\n\nTITLE: Rolling or Rinsing a Bear Put Spread Position\nDESCRIPTION: Evaluates whether to exit (rinse) or roll a bear put spread position based on profit targets or stop-loss criteria related to option price, delta, and implied volatility. Can close the existing position and optionally open a new one.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef roll_rinse_bear_put_spread(short_put, long_put, rolling, target_profit_percentage, delta_stop_loss_thres, iv_stop_loss_thres, option_type, criteria, risk_free_rate, min_strike, max_strike, min_expiration, max_expiration, OI_THRESHOLD):\n    \"\"\"\n    Checks if a bear put spread meets exit criteria (profit or stop-loss levels)\n    based on current option price, delta, and vega. If the criteria are met,\n    it closes the existing spread and, if rolling=True, attempts to open a new spread.\n    Returns:\n        Tuple containing a status message and new spread data if a new spread is opened, otherwise None.\n    \"\"\"\n    underlying_symbol = short_put['underlying_symbol']\n    underlying_price = get_underlying_price(underlying_symbol)\n    \n    # Retrieve current quote for the short put\n    option_symbol = short_put['symbol']\n    option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n    option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n    current_short_price = (option_quote.bid_price + option_quote.ask_price) / 2\n    \n    metrics = calculate_option_metrics(short_put, underlying_price, risk_free_rate)\n    current_delta = metrics['delta']\n    current_iv = metrics['iv']\n    \n    # Determine target exit price based on the initial premium received for the short put.\n    target_price = metrics['option_price'] * target_profit_percentage\n    \n    # Check exit criteria: either the short put price is at or below the target,\n    # the absolute delta fall short of the threshold, or iv is above the threshold.\n    if current_short_price <= target_price or abs(current_delta) <= delta_stop_loss_thres or current_iv >= iv_stop_loss_thres:\n        logger.info(f\"Exit criteria met for {underlying_symbol}: current_short_price={current_short_price}, \"\n                    f\"target_price={target_price}, delta={current_delta}, iv={current_iv}.\")\n        # Execute the roll or rinse (exit) of the spread\n        try:\n            # Close the short put\n            trade_client.close_position(\n                symbol_or_asset_id=short_put['symbol'],\n                close_options=ClosePositionRequest(qty='1')\n            )\n            logger.info(f\"Closed short put: {short_put['symbol']}\")\n            \n            # Close the long put\n            trade_client.close_position(\n                symbol_or_asset_id=long_put['symbol'],\n                close_options=ClosePositionRequest(qty='1')\n            )\n            logger.info(f\"Closed long put: {long_put['symbol']}\")\n        except Exception as e:\n            msg = f\"Failed to close existing bear put spread on {underlying_symbol}: {e}\"\n            logger.error(msg)\n            return msg, None\n\n        # If rolling, attempt to open a new bear put spread\n        if rolling:\n            try:\n                # Find latest put options\n                put_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, option_type)\n                # Find new bear put spread candidates\n                sp, lp = find_options_for_bear_put_spread(put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD)\n                # Place a new bear put spread order and return the response message\n                res = place_bear_put_spread_order(sp, lp)\n                if res:\n                    new_spread = {\n                        'short_put': sp,\n                        'long_call': lp\n                    }\n                    return f\"Rolled bear put spread on {underlying_symbol}. {res}\", new_spread\n                else:\n                    msg = f\"Failed to open new bear put spread on {underlying_symbol} after closing.\"\n                    logger.error(msg)\n                    return msg, None\n            except Exception as e:\n                msg = f\"Failed to roll into a new bear put spread on {underlying_symbol}: {e}\"\n                logger.error(msg)\n                return msg, None\n        else:\n            # If not rolling, simply exit the position\n            return f\"Closed (rinsed) bear put spread on {underlying_symbol}.\", None\n    else:\n        # Criteria not met; hold the position.\n        msg = (f\"Holding bear put spread on {underlying_symbol}: current_short_price={current_short_price}, \"\n               f\"target_price={target_price}, delta={current_delta}, vega={current_iv}.\")\n        logger.info(msg)\n        return msg, None\n```\n\n----------------------------------------\n\nTITLE: Executing Covered Call Strategy Orders\nDESCRIPTION: Function to execute a covered call strategy by checking for sufficient shares, finding appropriate call options, and placing market orders. Includes position validation and detailed success/failure messaging.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef execute_covered_call(underlying_symbol, risk_free_rate, latest_upper_boiler_band, option_data, max_strike, min_expiration, max_expiration):\n    required_qty = 100\n\n    if not has_sufficient_shares(underlying_symbol, required_qty):\n        return f\"Insufficient shares for {underlying_symbol} to execute a covered call.\", None\n\n    call_options = get_call_options(underlying_symbol, option_data, max_strike, min_expiration, max_expiration)\n\n    if call_options:\n        underlying_price = get_underlying_price(symbol=underlying_symbol)\n        short_call = find_short_call_option(call_options, underlying_price, risk_free_rate, latest_upper_boiler_band)\n\n        if short_call:\n            req = MarketOrderRequest(\n                symbol=short_call['symbol'],\n                qty=1,\n                side='sell',\n                type='market',\n                time_in_force='day'\n            )\n            trade_client.submit_order(req)\n\n            success_message = (f\"Placing Coverd Call on {underlying_symbol} successfully:\\n\"\n                               f\"Sell {short_call['delta']} Delta Put: {short_call['symbol']} \"\n                               f\"(Strike: {short_call['strike_price']}, Premium to Receive: {short_call['option_price']})\"\n            return success_message, short_call\n        else:\n            return \"Could not find suitable options which has delta between 20 and 40.\", None\n    else:\n        return \"No call options available for the underlying symbol.\", None\n```\n\n----------------------------------------\n\nTITLE: Initializing Real-Time Data Stream Clients for Stocks, Crypto, and Options in Python\nDESCRIPTION: Shows how to initialize real-time data stream clients for stocks, cryptocurrencies, and options. These clients are used for subscribing to live market data via WebSockets.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/market_data.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data import CryptoDataStream, StockDataStream\n\n# keys are required for live data\ncrypto_stream = CryptoDataStream(\"api-key\", \"secret-key\")\n\n# keys required\nstock_stream = StockDataStream(\"api-key\", \"secret-key\")\noption_stream = OptionDataStream(\"api-key\", \"secret-key\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Iron Condor Strategy Parameters and Strike Selection\nDESCRIPTION: Sets up trading parameters for the Iron Condor strategy including underlying stock selection, strike price ranges, expiration dates, and criteria for each leg based on implied volatility and Greeks.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Select the underlying stock (Johnson & Johnson)\nunderlying_symbol = 'JNJ'\n\n# Set the timezone\ntimezone = ZoneInfo('America/New_York')\n\n# Get current date in US/Eastern timezone\ntoday = datetime.now(timezone).date()\n\n# Define a 15% range around the underlying price \nSTRIKE_RANGE = 0.15\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.05\n\n# Risk free rate for the options greeks and IV calculations\nrisk_free_rate = 0.01\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 100\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Set the expiration date range for the options\nmin_expiration = today + timedelta(days=7)\nmax_expiration = today + timedelta(days=42)\n\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nunderlying_price = get_underlying_price(underlying_symbol)\n\n# Set the minimum and maximum strike prices based on the underlying price\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n\n# Define a common expiration range for all legs between 14 days and 35 days\nCOMMON_EXPIRATION_RANGE = (14, 35)\n\n# Each key corresponds to a leg and maps to a tuple of: (expiration range, IV range, delta range, theta range)\ncriteria = {\n    'long_put':  (COMMON_EXPIRATION_RANGE, (0.15, 0.50), (-0.20, -0.01), (-0.1, -0.005)),\n    'short_put': (COMMON_EXPIRATION_RANGE, (0.10, 0.40), (-0.30, -0.03), (-0.2, -0.01)),\n    'short_call':(COMMON_EXPIRATION_RANGE, (0.10, 0.40), (0.03, 0.30), (-0.2, -0.01)),\n    'long_call': (COMMON_EXPIRATION_RANGE, (0.15, 0.50), (0.01, 0.20), (-0.1, -0.005))\n}\n\n# Set target profit levels\nTARGET_PROFIT_PERCENTAGE = 0.4\n\n# Display the values\nprint(f\"Underlying Symbol: {underlying_symbol}\")\nprint(f\"{underlying_symbol} price: {underlying_price}\")\nprint(f\"Strike Range: {STRIKE_RANGE}\")\nprint(f\"Buying Power Limit Percentage: {BUY_POWER_LIMIT}\")\nprint(f\"Risk Free Rate: {risk_free_rate}\")\nprint(f\"Account Buying Power: {buying_power}\")\nprint(f\"Buying Power Limit: {buying_power_limit}\")\nprint(f\"Open Interest Threshold: {OI_THRESHOLD}\")\nprint(f\"Minimum Expiration Date: {min_expiration}\")\nprint(f\"Maximum Expiration Date: {max_expiration}\")\nprint(f\"Minimum Strike Price: {min_strike}\")\nprint(f\"Maximum Strike Price: {max_strike}\")\n```\n\n----------------------------------------\n\nTITLE: Placing Bull Put Spread Order in Python using Alpaca API\nDESCRIPTION: This function places a bull put spread order using the Alpaca API. It creates a multi-leg market order with one leg to sell the short put and another to buy the long put.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef place_bull_put_spread_order(short_put, long_put):\n    \"\"\"\n    Place a bull put spread order if both short_put and long_put data are provided.\n    \"\"\"\n    if not (short_put and long_put):\n        logger.info(\"No valid bull put spread found.\")\n        return None\n\n    try:\n        # Build order legs: sell the short put and buy the long put.\n        order_legs = [\n            OptionLegRequest(\n                symbol=short_put['symbol'],\n                side=OrderSide.SELL,\n                ratio_qty=1\n            ),\n            OptionLegRequest(\n                symbol=long_put['symbol'],\n                side=OrderSide.BUY,\n                ratio_qty=1\n            )\n        ]\n\n        # Create a market order for a multi-leg (spread) order.\n        req = MarketOrderRequest(\n            qty=1,\n            order_class=OrderClass.MLEG,\n            time_in_force=TimeInForce.DAY,\n            legs=order_legs\n        )\n        res = trade_client.submit_order(req)\n        logger.info(\"A bull put spread order placed successfully.\")\n        return res\n    except Exception as e:\n        logger.error(f\"Failed to place a bull put spread order: {e}\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Configuring Trading Parameters and Getting Underlying Asset Price\nDESCRIPTION: Sets up the configuration for the options wheel strategy, including the underlying symbol (WMT), strike price range, buying power limits, and expiration date constraints. It also retrieves the current price of the underlying stock to calculate strike price ranges.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Configuration\nunderlying_symbol = 'WMT'\n\n# Set the timezone\ntimezone = ZoneInfo(\"America/New_York\")\n\n# Get current date in US/Eastern timezone\ntoday = datetime.now(timezone).date()\n\n# Define a 5% range around the underlying price\nSTRIKE_RANGE = 0.05\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.10\n\n# Risk free rate for the options greeks and IV calculations\nRISK_FREE_RATE = 0.01\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 200\n\n# Set the expiration date range for the options\nmin_expiration = today + timedelta(days=7)\nmax_expiration = today + timedelta(days=35)\n\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get current date in US/Eastern timezone\n    today = datetime.now(timezone).date()\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nunderlying_price = get_underlying_price(underlying_symbol)\nprint(f\"{underlying_symbol} price: {underlying_price}\")\n\n# Set the minimum and maximum strike prices based on the underlying price\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n\n# Display the values\nprint(f\"Underlying Symbol: {underlying_symbol}\")\nprint(f\"Strike Range: {STRIKE_RANGE}\")\nprint(f\"Buying Power Limit Percentage: {BUY_POWER_LIMIT}\")\nprint(f\"Risk Free Rate: {RISK_FREE_RATE}\")\nprint(f\"Account Buying Power: {buying_power}\")\nprint(f\"Buying Power Limit: {buying_power_limit}\")\nprint(f\"Open Interest Threshold: {OI_THRESHOLD}\")\nprint(f\"Minimum Expiration Date: {min_expiration}\")\nprint(f\"Maximum Expiration Date: {max_expiration}\")\nprint(f\"Minimum Strike Price: {min_strike}\")\nprint(f\"Maximum Strike Price: {max_strike}\")\n```\n\n----------------------------------------\n\nTITLE: Calculating Implied Volatility and Option Greeks\nDESCRIPTION: Implements functions to calculate implied volatility using the Black-Scholes model and the Brentq numerical method. Also calculates the delta Greek for options, which indicates the rate of change of the option price with respect to changes in the underlying asset price.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Calculate implied volatility\ndef calculate_implied_volatility(option_price, S, K, T, r, option_type):\n\n    # Define a reasonable range for sigma\n    sigma_lower = 1e-6\n    sigma_upper = 5.0  # Adjust upper limit if necessary\n\n    # Check if the option is out-of-the-money and price is close to zero\n    intrinsic_value = max(0, (S - K) if option_type == 'call' else (K - S))\n    if option_price <= intrinsic_value + 1e-6:\n\n        # print(\"Option price is close to intrinsic value; implied volatility is near zero.\") # Uncomment for checking the status\n        return 0.0\n\n    # Define the function to find the root\n    def option_price_diff(sigma):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        if option_type == 'call':\n            price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n        elif option_type == 'put':\n            price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)\n        return price - option_price\n\n    try:\n        return brentq(option_price_diff, sigma_lower, sigma_upper)\n    except ValueError as e:\n        print(f\"Failed to find implied volatility: {e}\")\n        return None\n\n# Calculate option Delta\ndef calculate_delta(option_price, strike_price, expiry, underlying_price, risk_free_rate, option_type):\n    T = (expiry - pd.Timestamp.now()).days / 365\n    T = max(T, 1e-6)  # Set minimum T to avoid zero\n\n    if T == 1e-6:\n        print(\"Option has expired or is expiring now; setting delta based on intrinsic value.\")\n        if option_type == 'put':\n            return -1.0 if underlying_price < strike_price else 0.0\n        else:\n            return 1.0 if underlying_price > strike_price else 0.0\n\n    implied_volatility = calculate_implied_volatility(option_price, underlying_price, strike_price, T, risk_free_rate, option_type)\n    print(f\"implied volatility is {implied_volatility}\")\n    if implied_volatility is None or implied_volatility == 0.0:\n        print(\"Implied volatility could not be determined, skipping delta calculation.\")\n        return None\n\n    d1 = (np.log(underlying_price / strike_price) + (risk_free_rate + 0.5 * implied_volatility ** 2) * T) / (implied_volatility * np.sqrt(T))\n    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)\n    return delta\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Bars Data using Alpaca-py\nDESCRIPTION: Creates a StockBarsRequest to fetch hourly price bars for a specific symbol over a 5-day period. The request specifies timeframe, start time, and result limit, then fetches and returns the data as a DataFrame.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_31\n\nLANGUAGE: python\nCODE:\n```\n# get historical bars by symbol\n# ref. https://docs.alpaca.markets/reference/stockbars-1\nnow = datetime.now(ZoneInfo(\"America/New_York\"))\nreq = StockBarsRequest(\n    symbol_or_symbols = [symbol],\n    timeframe=TimeFrame(amount = 1, unit = TimeFrameUnit.Hour), # specify timeframe\n    start = now - timedelta(days = 5),                          # specify start datetime, default=the beginning of the current day.\n    # end_date=None,                                        # specify end datetime, default=now\n    limit = 2,                                               # specify limit\n)\nstock_historical_data_client.get_stock_bars(req).df\n```\n\n----------------------------------------\n\nTITLE: Validating Option Open Interest in Python\nDESCRIPTION: Function that validates if an option has sufficient open interest. It checks that the option data contains valid open interest information and that the open interest exceeds a specified threshold.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef validate_sufficient_OI(option_data, OI_THRESHOLD):\n    '''Ensure that the option has the required fields and sufficient open interest.'''\n    if option_data.open_interest is None or option_data.open_interest_date is None:\n        return False\n    if float(option_data.open_interest) <= OI_THRESHOLD:\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Submitting Trading Orders\nDESCRIPTION: Example demonstrating how to submit market orders using the TradingClient.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/README.md#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import MarketOrderRequest\nfrom alpaca.trading.enums import OrderSide, TimeInForce\n\ntrading_client = TradingClient('api-key', 'secret-key')\n\n# preparing order data\nmarket_order_data = MarketOrderRequest(\n                      symbol=\"BTC/USD\",\n                      qty=0.0001,\n                      side=OrderSide.BUY,\n                      time_in_force=TimeInForce.DAY\n                  )\n\n# Market order\nmarket_order = trading_client.submit_order(\n                order_data=market_order_data\n                )\n```\n\n----------------------------------------\n\nTITLE: Creating a Market Order in Alpaca Trading API\nDESCRIPTION: This example shows how to submit a market order for fractional shares using the MarketOrderRequest model. It specifies the symbol, quantity, side (buy/sell), and time in force parameters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import MarketOrderRequest\nfrom alpaca.trading.enums import OrderSide, TimeInForce\n\ntrading_client = TradingClient('api-key', 'secret-key', paper=True)\n\n# preparing orders\nmarket_order_data = MarketOrderRequest(\n                    symbol=\"SPY\",\n                    qty=0.023,\n                    side=OrderSide.BUY,\n                    time_in_force=TimeInForce.DAY\n                    )\n\n# Market order\nmarket_order = trading_client.submit_order(\n                order_data=market_order_data\n               )\n```\n\n----------------------------------------\n\nTITLE: Placing a Market Order with Notional Value\nDESCRIPTION: Submits a market order to buy Bitcoin with a specified dollar amount (notional value). This shows how to place an order based on the desired investment amount rather than quantity.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# simple, market order, notional\n\nreq = MarketOrderRequest(\n    symbol = symbol,\n    notional = 1.11,  # notional is specified in USD, here we specify $1.11\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.GTC,\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Stock Data for Strategy Analysis\nDESCRIPTION: This function fetches historical stock data using Alpaca's API. It creates a request with specified parameters including symbol, timeframe, and lookback period to retrieve daily price bars for analysis.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get the historical data for the underlying stock by symbol and timeframe\n# ref. https://alpaca.markets/sdks/python/api_reference/data/option/historical.html\ndef get_stock_data(underlying_symbol, days=90):\n    today = datetime.now(timezone).date()\n    req = StockBarsRequest(\n        symbol_or_symbols=[underlying_symbol],\n        timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),     # specify timeframe\n        start=today - timedelta(days=days),                          # specify start datetime, default=the beginning of the current day.\n    )\n    return stock_data_client.get_stock_bars(req).df\n```\n\n----------------------------------------\n\nTITLE: Executing Long Call Calendar Spread in Python with Alpaca API\nDESCRIPTION: This function executes a long call calendar spread by finding appropriate short and long call options, placing orders for both legs simultaneously, and returning the order details. It handles option selection, order creation, and submission using the Alpaca trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef execute_long_call_calendar_spread(underlying_symbol, risk_free_rate, buying_power_limit, min_strike, max_strike, min_expiration, max_expiration, expiry_range, iv_range, delta_range, theta_range):\n    # Get call options\n    call_options = get_call_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration)\n\n    if call_options:\n        # Get the latest price of the underlying stock\n        underlying_price = get_underlying_price(symbol=underlying_symbol)\n        \n        # Find appropriate short and long call options\n        mleg_option_data = find_call_options_for_calendar_spread(call_options, underlying_price, risk_free_rate, buying_power_limit, expiry_range, iv_range, delta_range, theta_range)\n\n        # Proceed if short call and long call options are found\n        if mleg_option_data:\n\n            # Place orders for the spread\n            # Create a list for the order request\n            order_legs = []\n            ## Append short call for a shorter-term\n            order_legs.append(OptionLegRequest(\n                symbol=mleg_option_data[0][\"symbol\"],\n                side=OrderSide.SELL,\n                ratio_qty=1\n            ))\n            ## Append long call for a longer-term\n            order_legs.append(OptionLegRequest(\n                symbol=mleg_option_data[1][\"symbol\"],\n                side=OrderSide.BUY,\n                ratio_qty=1\n            ))\n            # Place the order for both legs simultaneously\n            req = MarketOrderRequest(\n                qty=1,\n                order_class=OrderClass.MLEG,\n                time_in_force=TimeInForce.DAY,\n                legs=order_legs\n            )\n            res = trade_client.submit_order(req)\n            print(\"Long Call Calendar Spread order placed successfully.\")\n\n            success_message = (f\"Placing Long Call Calendar Spread on {underlying_symbol} successfully:\\n\"\n                               f\"Sell {mleg_option_data[0]['symbol']} at (Strike: {mleg_option_data[0]['strike_price']}, Premium to Receive: {mleg_option_data[0]['initial_option_price']})\\n\"\n                               f\"Buy {mleg_option_data[1]['symbol']} at (Strike: {mleg_option_data[1]['strike_price']}, Premium to Pay: {mleg_option_data[1]['initial_option_price']})\"\n                               )\n            return success_message, res, mleg_option_data\n\n        else:\n            return \"Could not find suitable options for a calendar spread.\", None, None\n    else:\n        return \"No call options found for the underlying symbol.\", None, None\n```\n\n----------------------------------------\n\nTITLE: Fetching Options Historical Bars with Alpaca in Python\nDESCRIPTION: This code retrieves historical bar data for options using the OptionHistoricalDataClient. It specifies parameters such as symbol, timeframe, start date, and limit for the request.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_25\n\nLANGUAGE: python\nCODE:\n```\nreq = OptionBarsRequest(\n    symbol_or_symbols = high_open_interest_contract.symbol,\n    timeframe = TimeFrame(amount = 1, unit = TimeFrameUnit.Hour),   # specify timeframe\n    start = now - timedelta(days = 5),                              # specify start datetime, default=the beginning of the current day.\n    # end_date=None,                                                # specify end datetime, default=now\n    limit = 2,                                                      # specify limit\n)\noption_historical_data_client.get_option_bars(req).df\n```\n\n----------------------------------------\n\nTITLE: Configuring Long Straddle Strategy Parameters for Options Trading with Alpaca in Python\nDESCRIPTION: This snippet sets up the parameters for a long straddle options trading strategy. It includes selecting the underlying stock, setting date ranges, defining strike price ranges, and calculating buying power limits based on the Alpaca account.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Select the underlying stock\nunderlying_symbol = 'AAPL'\n\n# Set the timezone\ntimezone = ZoneInfo('America/New_York')\n\n# Get current date in US/Eastern timezone\ntoday = datetime.now(timezone).date()\n\n# Define a 5% range around the underlying price \nSTRIKE_RANGE = 0.05\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.05\n\n# Risk free rate for the options greeks and IV calculations\nrisk_free_rate = 0.01\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 100\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Set the expiration date range for the options\nmin_expiration = today + timedelta(days=14)\nmax_expiration = today + timedelta(days=60)\n\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nunderlying_price = get_underlying_price(underlying_symbol)\n\n# Set the minimum and maximum strike prices based on the underlying price\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n\n# Define a common expiration range for all legs between 14 days and 42 days\nCOMMON_EXPIRATION_RANGE = (14, 42)\n\n# Each key corresponds to a leg and maps to a tuple of: (expiration range, IV range, delta range, theta range)\ncriteria = {\n    'long_put':  (COMMON_EXPIRATION_RANGE, (0.20, 0.60), (-0.60, -0.10), (-0.20, -0.005)),\n    'long_call': (COMMON_EXPIRATION_RANGE, (0.20, 0.60), (0.10, 0.60), (-0.20, -0.005))\n}\n\n# Set target profit levels\nTARGET_PROFIT_PERCENTAGE = 0.4\n\n# Display the values\nprint(f\"Underlying Symbol: {underlying_symbol}\")\nprint(f\"{underlying_symbol} price: {underlying_price}\")\nprint(f\"Strike Range: {STRIKE_RANGE}\")\nprint(f\"Buying Power Limit Percentage: {BUY_POWER_LIMIT}\")\nprint(f\"Risk Free Rate: {risk_free_rate}\")\nprint(f\"Account Buying Power: {buying_power}\")\nprint(f\"Buying Power Limit: {buying_power_limit}\")\nprint(f\"Open Interest Threshold: {OI_THRESHOLD}\")\nprint(f\"Minimum Expiration Date: {min_expiration}\")\nprint(f\"Maximum Expiration Date: {max_expiration}\")\nprint(f\"Minimum Strike Price: {min_strike}\")\nprint(f\"Maximum Strike Price: {max_strike}\")\n```\n\n----------------------------------------\n\nTITLE: Managing Bull Put Spread Position in Python\nDESCRIPTION: This function checks if a bull put spread meets exit criteria and optionally rolls the position. It calculates current metrics, checks exit conditions, and executes the appropriate actions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\ndef roll_rinse_bull_put_spread(short_put, long_put, rolling, target_profit_percentage, delta_stop_loss_thres, iv_stop_loss_thres, option_type, criteria, risk_free_rate, min_strike, max_strike, min_expiration, max_expiration, buying_power_limit, OI_THRESHOLD):\n\n    \"\"\"\n    Checks if a bull put spread meets exit criteria (profit or stop-loss levels)\n    based on current option price, delta, and IV. If criteria are met, it closes the\n    spread and, if rolling=True, attempts to open a new one.\n    Returns:\n        Tuple: (status message, new spread data if rolled, otherwise None)\n    \"\"\"\n\n    underlying_symbol = short_put['underlying_symbol']\n    underlying_price = get_underlying_price(underlying_symbol)\n\n    # Calculate initial premium and current cost to close the spread.\n    initial_credit = short_put['initial_option_price'] - long_put['initial_option_price']\n    metrics_sp = calculate_option_metrics(short_put, underlying_price, risk_free_rate)\n    metrics_lp = calculate_option_metrics(long_put, underlying_price, risk_free_rate)\n\n    cost_to_close = metrics_sp['option_price'] - metrics_lp['option_price']\n    target_price = initial_credit * (1 - target_profit_percentage)\n    \n    # Compute current risk metrics (current option Greeks and IV).\n    current_net_delta = abs(metrics_sp['delta']) + metrics_lp['delta']\n    current_sp_IV = metrics_sp['iv']\n\n    # Define exit conditions.\n    exit_due_to_underlying = underlying_price <= long_put['strike_price']\n    exit_due_to_profit = cost_to_close <= target_price\n    exit_due_to_delta = current_net_delta >= delta_stop_loss_thres\n    exit_due_to_iv = current_sp_IV >= iv_stop_loss_thres\n    \n    # Check exit criteria: either the short put price is at or below the target,\n    # the absolute delta exceeds the threshold, or IV is above the threshold.\n    if exit_due_to_underlying or exit_due_to_profit or exit_due_to_delta or exit_due_to_iv:\n        logger.info(\n            f\"Exit criteria met for the underlying: {underlying_symbol}: underlying price={underlying_price}, cost to close the position={cost_to_close}, \"\n            f\"target price={target_price}, current net delta of the spread={current_net_delta}, current short put's IV={current_sp_IV}\"\n        )\n        # Execute the roll or rinse (exit) of the spread\n        try:\n            # Close the short put\n            trade_client.close_position(\n                symbol_or_asset_id=short_put['symbol'],\n                close_options=ClosePositionRequest(qty='1')\n            )\n            logger.info(f\"Closed short put: {short_put['symbol']}\")\n            \n            # Close the long put\n            trade_client.close_position(\n                symbol_or_asset_id=long_put['symbol'],\n                close_options=ClosePositionRequest(qty='1')\n            )\n            logger.info(f\"Closed long put: {long_put['symbol']}\")\n        except Exception as e:\n            msg = f\"Failed to close existing bull put spread on {underlying_symbol}: {e}\"\n            logger.error(msg)\n            return msg, None\n\n        # If rolling, attempt to open a new bull put spread\n        if rolling:\n            try:\n                # Find latest put options\n                put_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, option_type)\n                # Find new bull put spread candidates\n                sp, lp = find_options_for_bull_put_spread(put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD)\n                # Place a new bull put spread order and return the response message\n                res = place_bull_put_spread_order(sp, lp)\n                if res:\n                    new_spread = {\n                        'short_put': sp,\n                        'long_put': lp\n                    }\n                    return f\"Rolled bull put spread on {underlying_symbol}. {res}\", new_spread\n                else:\n                    msg = f\"Failed to open new bull put spread on {underlying_symbol} after closing.\"\n                    logger.error(msg)\n                    return msg, None\n            except Exception as e:\n                msg = f\"Failed to roll into a new bull put spread on {underlying_symbol}: {e}\"\n                logger.error(msg)\n                return msg, None\n        else:\n            # If not rolling, simply exit the position\n            return f\"Closed (rinsed) bull put spread on {underlying_symbol}.\", None\n    else:\n        # Criteria not met; hold the position.\n        msg = (f\"Holding bull put spread on the underlying: {underlying_symbol}: underlying price={underlying_price}, initial credit={initial_credit}, cost to close the position={cost_to_close},\"\n               f\"target_price={target_price}, current net delta={current_net_delta}, current net IV={current_sp_IV}.\")\n        logger.info(msg)\n        return msg, None\n```\n\n----------------------------------------\n\nTITLE: Setting up StockHistoricalDataClient in Alpaca-py\nDESCRIPTION: Initializes a StockHistoricalDataClient with API credentials to access historical market data. This client is used for retrieving historical bars, trades, and quotes.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_30\n\nLANGUAGE: python\nCODE:\n```\n# setup stock historical data client\nstock_historical_data_client = StockHistoricalDataClient(api_key, secret_key, url_override = data_api_url)\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Quotes with Alpaca-py\nDESCRIPTION: Creates a StockQuotesRequest to retrieve the latest quote for a specific symbol. This request does not specify time parameters as it's focused on current data, and returns the most recent quote information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_34\n\nLANGUAGE: python\nCODE:\n```\n# get latest quotes by symbol\nreq = StockQuotesRequest(\n    symbol_or_symbols = [symbol],\n)\nres = stock_historical_data_client.get_stock_latest_quote(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Roll/Rinse Bull Call Spread - Python\nDESCRIPTION: Manages existing bull call spread positions by monitoring exit criteria and optionally rolling into new positions. Handles position closing and new spread creation based on profit targets and risk thresholds.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\ndef roll_rinse_bull_call_spread(short_call, long_call, rolling, target_profit_percentage, delta_stop_loss_thres, vega_stop_loss_thres, option_type, criteria, risk_free_rate, min_strike, max_strike, min_expiration, max_expiration, OI_THRESHOLD):\n    \"\"\"\n    Checks if a bull call spread meets exit criteria (profit or stop-loss levels)\n    based on current option price, delta, and vega. If the criteria are met,\n    it closes the existing spread and, if rolling=True, attempts to open a new spread.\n    Returns:\n        Tuple containing a status message and new spread data if a new spread is opened, otherwise None.\n    \"\"\"\n    underlying_symbol = short_call['underlying_symbol']\n    underlying_price = get_underlying_price(underlying_symbol)\n    \n    # Retrieve current quote for the short call\n    option_symbol = short_call['symbol']\n    option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n    option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n    current_short_price = (option_quote.bid_price + option_quote.ask_price) / 2\n    \n    metrics = calculate_option_metrics(short_call, underlying_price, risk_free_rate)\n    current_delta = metrics['delta']\n    current_vega = metrics['vega']\n    \n    # Determine target exit price based on the initial premium received for the short call.\n    target_price = metrics['option_price'] * target_profit_percentage\n    \n    # Check exit criteria: either the short call price is at or below the target,\n    # the absolute delta exceeds the threshold, or vega is above the threshold.\n    if current_short_price <= target_price or abs(current_delta) >= delta_stop_loss_thres or current_vega >= vega_stop_loss_thres:\n        logger.info(f\"Exit criteria met for {underlying_symbol}: current_short_price={current_short_price}, \"\n                    f\"target_price={target_price}, delta={current_delta}, vega={current_vega}.\")\n        # Execute the roll or rinse (exit) of the spread\n        try:\n            # Close the short call\n            trade_client.close_position(\n                symbol_or_asset_id=short_call['symbol'],\n                close_options=ClosePositionRequest(qty='1')\n            )\n            logger.info(f\"Closed short call: {short_call['symbol']}\")\n            \n            # Close the long call\n            trade_client.close_position(\n                symbol_or_asset_id=long_call['symbol'],\n                close_options=ClosePositionRequest(qty='1')\n            )\n            logger.info(f\"Closed long call: {long_call['symbol']}\")\n        except Exception as e:\n            msg = f\"Failed to close existing bull call spread on {underlying_symbol}: {e}\"\n            logger.error(msg)\n            return msg, None\n\n        # If rolling, attempt to open a new bull call spread\n        if rolling:\n            try:\n                # Find latest call options\n                call_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, option_type)\n                # Find new bull call spread candidates\n                sc, lc = find_options_for_bull_call_spread(call_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD)\n                # Place a new bull call spread order and return the response message\n                res = place_bull_call_spread_order(sc, lc)\n                if res:\n                    new_spread = {\n                        'short_call': sc,\n                        'long_call': lc\n                    }\n                    return f\"Rolled bull call spread on {underlying_symbol}. {res}\", new_spread\n                else:\n                    msg = f\"Failed to open new bull call spread on {underlying_symbol} after closing.\"\n                    logger.error(msg)\n                    return msg, None\n            except Exception as e:\n                msg = f\"Failed to roll into a new bull call spread on {underlying_symbol}: {e}\"\n                logger.error(msg)\n                return msg, None\n        else:\n            # If not rolling, simply exit the position\n            return f\"Closed (rinsed) bull call spread on {underlying_symbol}.\", None\n    else:\n        # Criteria not met; hold the position.\n        msg = (f\"Holding bull call spread on {underlying_symbol}: current_short_price={current_short_price}, \"\n               f\"target_price={target_price}, delta={current_delta}, vega={current_vega}.\")\n        logger.info(msg)\n        return msg, None\n```\n\n----------------------------------------\n\nTITLE: Canceling Multi-leg Orders\nDESCRIPTION: Demonstrates how to cancel an unfilled iron condor order by checking its status and using the order ID.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# Query by the order's id\nq1 = trade_client.get_order_by_client_id(res.client_order_id)\n\n# Replace overall order\nif q1.status != OrderStatus.FILLED:\n    # Cancel the whole order\n    trade_client.cancel_order_by_id(res.id)\n    print(f\"Canceled order: {res}\")\n\nelse:\n    print(\"Order is already filled.\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Historical Data\nDESCRIPTION: Initializes a client and requests historical price data for a specific option leg using the Alpaca API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the Option Historical Data Client\noption_historical_data_client = OptionHistoricalDataClient(\n    api_key=API_KEY, \n    secret_key=API_SECRET, \n    url_override=BASE_URL\n)\n\n# Define the request parameters\nreq = OptionBarsRequest(\n    #  iron_condor_order_legs[1][\"symbol\"] = the short put option\n    symbol_or_symbols=iron_condor_order_legs[1][\"symbol\"],\n    timeframe=TimeFrame.Day,  # Choose timeframe (Minute, Hour, Day, etc.)\n    start=\"2025-01-01\",  # Start date\n    end=\"2025-02-21\"  # End date\n)\n\noption_historical_data_client.get_option_bars(req)\n```\n\n----------------------------------------\n\nTITLE: Closing an Option Position\nDESCRIPTION: Demonstrates how to close an existing option position by specifying the contract symbol and quantity to close. This completes the full trade lifecycle for options.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# close the option position\ntrade_client.close_position(\n    symbol_or_asset_id = high_open_interest_contract.symbol,\n    close_options = ClosePositionRequest(qty = \"1\")\n)\n```\n\n----------------------------------------\n\nTITLE: Placing a Limit Order with Fractional Quantity\nDESCRIPTION: Creates and submits a limit order to buy 0.01 shares of SPY at a limit price of $550.25. This demonstrates how to set a maximum price for a buy order.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# simple, limit order, fractional qty\nreq = LimitOrderRequest(\n    symbol = symbol,\n    qty = 0.01,\n    limit_price = 550.25,\n    side = OrderSide.BUY,\n    type = OrderType.LIMIT,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Pairing Short Iron Butterfly Option Candidates in Python\nDESCRIPTION: A function that pairs options to form a short iron butterfly strategy. It takes lists of long puts, short puts, short calls, and long calls and finds the first valid combination based on strike price relationships around the underlying price.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef pair_short_iron_butterfly_candidates(long_puts: List[Dict[str, Any]], short_puts: List[Dict[str, Any]], short_calls: List[Dict[str, Any]], long_calls: List[Dict[str, Any]], underlying_price: float) -> Tuple[Optional[Dict[str, Any]], Optional[Dict[str, Any]]]:    \n    \"\"\"\n    Assumptions:\n    1. All input option contracts (in all lists) share the SAME expiration date.\n    2. Input lists contain dictionaries representing option contracts.\n    3. Dictionaries contain at least 'strike_price' and 'symbol' keys.\n    \n    Returns:\n        A tuple (lp, atm_sp, atm_sc, lc) of the first valid combination found,\n        or (None, None, None, None) if no valid combination is found.\n    \"\"\"\n\n    # Find the at-the-money (ATM) options for short put and short call contracts (returns option contract which is closest to the underlying price)\n    atm_sp = find_nearest_strike_contract(short_puts, underlying_price)\n    atm_sc = find_nearest_strike_contract(short_calls, underlying_price)\n\n    # If either ATM contract wasn't found, we cannot proceed.\n    if atm_sp is None or atm_sc is None:\n        # Minimal logging for this failure case (optional, but helpful)\n        logger.info(\"Could not find necessary ATM short put or short call; cannot form butterfly.\")\n        return None, None, None, None\n        \n    # Iterate through potential wings (long puts and long calls)\n    for lp in long_puts:\n        for lc in long_calls:\n            if (lp['strike_price'] < atm_sp['strike_price']) and (atm_sp['strike_price'] <= atm_sc['strike_price']) and (atm_sc['strike_price'] < lc['strike_price']):\n                logger.info(f\"Selected short iron butterfly: long_put {lp['symbol']}; short_put {atm_sp['symbol']}; short_call {atm_sc['symbol']}; long_call {lc['symbol']} with expiration {lc['expiration_date']}.\")\n                return lp, atm_sp, atm_sc, lc\n    \n    # If the loops complete without finding a suitable long put/call pair for the ATM body\n    logger.info(f\"No valid short iron butterfly pair found for expiration {lc['expiration_date']}: \"\n                f\"Found ATM body (SP@{atm_sp['strike_price']}/SC@{atm_sc['strike_price']}) \"\n                f\"but no suitable OTM wings (LP/LC) found in candidate lists.\")\n  \n    return None, None, None, None\n```\n\n----------------------------------------\n\nTITLE: Historical Options Data Retrieval for Call Options in Python\nDESCRIPTION: Sets up historical data client and fetches historical options data for the call leg of the straddle\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\noption_historical_data_client = OptionHistoricalDataClient(\n    api_key=API_KEY, \n    secret_key=API_SECRET, \n    url_override=BASE_URL\n)\n\nreq = OptionBarsRequest(\n    symbol_or_symbols=long_straddle_order_legs[1][\"symbol\"],\n    timeframe=TimeFrame.Day,\n    start=\"2025-01-01\",\n    end=\"2025-02-21\"\n)\n\noption_historical_data_client.get_option_bars(req)\n```\n\n----------------------------------------\n\nTITLE: Implementing Option Greeks Calculation and Trade Update Handling\nDESCRIPTION: Defines functions to calculate implied volatility and option Greeks (Delta and Gamma) using the Black-Scholes model, and sets up an async handler for trade updates that updates the position tracking based on fill events.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# Calculate implied volatility\ndef calculate_implied_volatility(option_price, S, K, T, r, option_type):\n    def option_price_diff(sigma):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        if option_type == 'call':\n            price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n        elif option_type == 'put':\n            price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)\n        return price - option_price\n    \n    return brentq(option_price_diff, 1e-6, 1)\n\n# Calculate option Greeks (Delta and Gamma)\ndef calculate_greeks(option_price, strike_price, expiry, underlying_price, risk_free_rate, option_type):\n    T = (expiry - pd.Timestamp.now()).days / 365\n    implied_volatility = calculate_implied_volatility(option_price, underlying_price, strike_price, T, risk_free_rate, option_type)\n    d1 = (np.log(underlying_price / strike_price) + (risk_free_rate + 0.5 * implied_volatility ** 2) * T) / (implied_volatility * np.sqrt(T))\n    d2 = d1 - implied_volatility * np.sqrt(T)\n    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)\n    gamma = norm.pdf(d1) / (underlying_price * implied_volatility * np.sqrt(T))\n    return delta, gamma\n\n# handle trade updates\nasync def on_trade_updates(data: TradeUpdate):\n    symbol = data.order.symbol\n    if symbol in positions:\n        if data.event in ('fill', 'partial_fill'):\n            side = data.order.side\n            qty = data.order.qty\n            filled_avg_price = data.order.filled_avg_price\n            position_qty = data.position_qty\n            print(f\"{data.event} event: {side} {qty} {symbol} @ {filled_avg_price}\")\n            print(f\"underlying position from {positions[symbol]['position']} to {position_qty}\")\n            positions[symbol]['position'] = float(position_qty)\n\ntrade_update_stream.subscribe_trade_updates(on_trade_updates)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Stock Data for Analysis\nDESCRIPTION: Function to fetch historical stock price data using Alpaca's API. Takes a symbol and time period as input and returns daily candle data that can be used for technical analysis.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get the historical data for the underlying stock by symbol and timeframe\n# ref. https://alpaca.markets/sdks/python/api_reference/data/option/historical.html\ndef get_stock_data(underlying_symbol, days=90):\n    today = datetime.now(timezone).date()\n    req = StockBarsRequest(\n        symbol_or_symbols=[underlying_symbol],\n        timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),     # specify timeframe\n        start=today - timedelta(days=days),                          # specify start datetime, default=the beginning of the current day.\n    )\n    return stock_data_client.get_stock_bars(req).df\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Visualizing Historical Stock Data\nDESCRIPTION: Retrieves historical price data for the underlying stock and creates a candlestick chart. This function uses Alpaca's StockBarsRequest to fetch daily price bars for the specified time period and visualizes them using Plotly.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get the historical data for the underlying stock by symbol and timeframe\n# ref. https://alpaca.markets/sdks/python/api_reference/data/option/historical.html\ndef get_stock_data(underlying_symbol, days=90):\n    today = datetime.now(timezone).date()\n    req = StockBarsRequest(\n        symbol_or_symbols=[underlying_symbol],\n        timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),     # specify timeframe\n        start=today - timedelta(days=days),                          # specify start datetime, default=the beginning of the current day.\n    )\n    return stock_data_client.get_stock_bars(req).df\n\n# List of stock agg objects while dropping the symbol column\npriceData = get_stock_data(underlying_symbol, days=180).reset_index(level='symbol', drop=True)\n\nimport plotly.graph_objects as go\n\n# Bar chart for the stock price\nfig = go.Figure(data=[go.Candlestick(x=priceData.index,\n                open=priceData['open'],\n                high=priceData['high'],\n                low=priceData['low'],\n                close=priceData['close'])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Executing Initial Option Trades\nDESCRIPTION: Defines an async function to execute the initial option trades according to the initial positions set in the positions dictionary. Orders are submitted as market orders with a brief delay to ensure the trade update stream is properly connected.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# Execute initial trades\nasync def initial_trades():\n    await asyncio.sleep(5)\n    print('executing initial option trades')\n    for symbol, pos in positions.items():\n        if pos['asset_class'] == 'us_option' and pos['initial_position'] != 0:\n            side = 'buy' if pos['initial_position'] > 0 else 'sell'\n            order_request = MarketOrderRequest(\n                symbol=symbol,\n                qty=abs(pos['initial_position']),\n                side=side,\n                type='market',\n                time_in_force='day'\n            )\n            print(f\"Submitting order to {side} {abs(pos['initial_position'])} contracts of {symbol} at market\")\n            trading_client.submit_order(order_request)\n```\n\n----------------------------------------\n\nTITLE: Historical Options Data Retrieval for Put Options in Python\nDESCRIPTION: Fetches historical options data for the put leg of the straddle for backtesting purposes\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\noption_historical_data_client = OptionHistoricalDataClient(\n    api_key=API_KEY, \n    secret_key=API_SECRET, \n    url_override=BASE_URL\n)\n\nreq = OptionBarsRequest(\n    symbol_or_symbols=long_straddle_order_legs[0][\"symbol\"],\n    timeframe=TimeFrame.Day,\n    start=\"2025-01-01\",\n    end=\"2025-03-14\"\n)\n\noption_historical_data_client.get_option_bars(req)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Historical Data\nDESCRIPTION: Initializes the Option Historical Data Client and retrieves historical price data for a specific option leg using the Alpaca API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the Option Historical Data Client\noption_historical_data_client = OptionHistoricalDataClient(\n    api_key=API_KEY, \n    secret_key=API_SECRET, \n    url_override=BASE_URL\n)\n\n# Define the request parameters\nreq = OptionBarsRequest(\n    symbol_or_symbols=short_iron_butterfly_order_legs[1][\"symbol\"],\n    timeframe=TimeFrame.Day,  # Choose timeframe (Minute, Hour, Day, etc.)\n    start=\"2025-03-01\",  # Start date\n    end=\"2025-03-31\"  # End date\n)\n\noption_historical_data_client.get_option_bars(req)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Crypto Bar Data in Python\nDESCRIPTION: Demonstrates how to request historical bar (candlestick) data for multiple cryptocurrency symbols using the CryptoHistoricalDataClient. It shows how to set up the request parameters and convert the response to a pandas DataFrame.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/market_data.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data.historical import CryptoHistoricalDataClient\nfrom alpaca.data.requests import CryptoBarsRequest\nfrom alpaca.data.timeframe import TimeFrame\nfrom datetime import datetime\n\n# no keys required for crypto data\nclient = CryptoHistoricalDataClient()\n\nrequest_params = CryptoBarsRequest(\n                        symbol_or_symbols=[\"BTC/USD\", \"ETH/USD\"],\n                        timeframe=TimeFrame.Day,\n                        start=datetime(2022, 7, 1),\n                        end=datetime(2022, 9, 1)\n                 )\n\nbars = client.get_crypto_bars(request_params)\n\n# convert to dataframe\nbars.df\n\n# access bars as list - important to note that you must access by symbol key\n# even for a single symbol request - models are agnostic to number of symbols\nbars[\"BTC/USD\"]\n```\n\n----------------------------------------\n\nTITLE: Placing a Trailing Stop Order\nDESCRIPTION: Creates a trailing stop order to sell 1 share of SPY with a 20% trailing percentage. The order executes when the price drops 20% from its highest point after order placement.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# trailing stop order\nreq = TrailingStopOrderRequest(\n                    symbol = symbol,\n                    qty = 1,\n                    side = OrderSide.SELL,\n                    time_in_force = TimeInForce.GTC,\n                    trail_percent = 0.20 # you can also use trail_price instead of trail_percent\n                    )\n\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Placing a Limit Order for Bitcoin\nDESCRIPTION: Creates and submits a limit order to buy Bitcoin at a specified price. This demonstrates how to place orders that execute only at the specified price or better.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# simple, limit order\nreq = LimitOrderRequest(\n    symbol = symbol,\n    qty = 0.01,\n    limit_price = 60000,\n    side = OrderSide.BUY,\n    type = OrderType.LIMIT,\n    time_in_force = TimeInForce.GTC,\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Selecting Option Contracts with Common Strike Prices in Python\nDESCRIPTION: Function that identifies common strike prices between put and call options and selects the strike closest to the underlying price. This is useful for options strategies like straddles that require options with the same strike price.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef select_common_strike_candidate(put_candidates, call_candidates, underlying_price):\n    \"\"\"\n    Finds common strike prices between put and call candidates, selects the one closest to the underlying price,\n    and returns one candidate from each side with that strike.\n    \n    Returns:\n      selected_strike: The chosen strike price.\n      chosen_put: A long put candidate with the selected strike.\n      chosen_call: A long call candidate with the selected strike.\n    \"\"\"\n    put_strikes = {float(cand['strike_price']) for cand in put_candidates}\n    call_strikes = {float(cand['strike_price']) for cand in call_candidates}\n    common_strikes = put_strikes.intersection(call_strikes)\n    if not common_strikes:\n        raise Exception(\"No common strike price found across put and call candidates for the selected expiration.\")\n    \n    selected_strike = min(common_strikes, key=lambda strike: abs(strike - underlying_price))\n    print(f\"Selected common strike price: {selected_strike}\")\n    \n    chosen_put = next((cand for cand in put_candidates if float(cand['strike_price']) == selected_strike), None)\n    chosen_call = next((cand for cand in call_candidates if float(cand['strike_price']) == selected_strike), None)\n    \n    if not chosen_put or not chosen_call:\n        raise Exception(\"Could not find valid candidate(s) with the selected strike price.\")\n    \n    return chosen_put, chosen_call\n```\n\n----------------------------------------\n\nTITLE: Fetching Crypto Historical Bar Data with Alpaca-py\nDESCRIPTION: Example of using CryptoHistoricalDataClient to retrieve historical bar data for cryptocurrencies. Demonstrates the use of request models and client instantiation.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/getting_started.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data.historical import CryptoHistoricalDataClient\nfrom alpaca.data.requests import CryptoBarsRequest\nfrom alpaca.data.timeframe import TimeFrame\n\n# no keys required for crypto data\nclient = CryptoHistoricalDataClient()\n\nrequest_params = CryptoBarsRequest(\n                        symbol_or_symbols=[\"BTC/USD\", \"ETH/USD\"],\n                        timeframe=TimeFrame.Day,\n                        start=\"2022-07-01\"\n                 )\n\nbars = client.get_crypto_bars(request_params)\n```\n\n----------------------------------------\n\nTITLE: Finding Short Put Options with Delta-Based Selection\nDESCRIPTION: Function to identify appropriate put options to sell based on delta values (-0.42 to -0.18), open interest threshold, and buying power limits. Includes price calculations and option data validation.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef find_short_put_option(put_options, underlying_price, risk_free_rate, buying_power_limit):\n    short_put = None\n\n    for option_data in put_options:\n        try:\n            if option_data.open_interest is None or option_data.open_interest_date is None:\n                continue\n\n            if float(option_data.open_interest) <= OI_THRESHOLD:\n                print(f\"Skipping option {option_data.symbol} due to lack of open interest. You may change the OI_THRESHOLD\")\n                continue\n\n            option_symbol = option_data.symbol\n            option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n            option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n\n            option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n            option_size = float(option_data.size)\n            strike_price = float(option_data.strike_price)\n            expiry = pd.Timestamp(option_data.expiration_date)\n\n            delta = calculate_delta(\n                option_price=option_price,\n                strike_price=strike_price,\n                expiry=expiry,\n                underlying_price=underlying_price,\n                risk_free_rate=risk_free_rate,\n                option_type='put'\n            )\n\n            if delta is not None and delta >= -0.42 and delta <= -0.18 and strike_price * option_size < buying_power_limit:\n                short_put = {\n                    'close_price': option_data.close_price,\n                    'close_price_date': option_data.close_price_date,\n                    'expiration_date': option_data.expiration_date,\n                    'id': option_data.id,\n                    'name': option_data.name,\n                    'open_interest': option_data.open_interest,\n                    'open_interest_date': option_data.open_interest_date,\n                    'root_symbol': option_data.root_symbol,\n                    'size': option_data.size,\n                    'status': option_data.status,\n                    'strike_price': option_data.strike_price,\n                    'style': option_data.style,\n                    'symbol': option_data.symbol,\n                    'tradable': option_data.tradable,\n                    'type': option_data.type,\n                    'underlying_asset_id': option_data.underlying_asset_id,\n                    'underlying_symbol': option_data.underlying_symbol,\n                    'initial_delta': delta,\n                    'initial_option_price': option_price,\n                }\n\n            if short_put:\n                break\n\n        except KeyError as e:\n            print(f\"Missing data for option {option_symbol}: {e}\")\n            continue\n\n    return short_put\n```\n\n----------------------------------------\n\nTITLE: Finding Put Options for Bull Put Vertical Spread - Python\nDESCRIPTION: Function that searches through zero-day-to-expiration options to find suitable short and long puts for a bull put vertical spread strategy. Filters options based on open interest thresholds and specific delta ranges. Calculates option Greeks and returns detailed option data in dictionary format.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef find_short_and_long_puts(zero_dte_options, underlying_symbol, risk_free_rate, OI_THRESHOLD, short_put_delta_range, long_put_delta_range):\n    \"\"\"\n    Identify the short put (delta ~ -0.40) and long put (delta ~ -0.20) from the options chain.\n    Returns dictionaries containing details of the selected options.\n    \"\"\"\n    underlying_price = get_underlying_price(underlying_symbol)\n    short_put = None\n    long_put = None\n\n    for option_data in zero_dte_options:\n        try:\n            # Validate open interest and volume\n            if option_data.open_interest is None or option_data.open_interest_date is None:\n                continue\n            if float(option_data.open_interest) <= OI_THRESHOLD:\n                continue\n\n            # Fetch the latest option quote\n            option_symbol = option_data.symbol\n            option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n            option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n            print(f\"Option symbol is: {option_symbol}\")\n\n            # Extract necessary data\n            option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n            strike_price = float(option_data.strike_price)\n            expiration_date_naive_dt = datetime.combine(option_data.expiration_date, time(16, 0)) # Set time to 4:00 PM\n            expiry = expiration_date_naive_dt.replace(tzinfo=timezone)\n            # expiry = pd.Timestamp(option_data.expiration_date).replace(hour=16, minute=0, second=0)\n\n            # Calculate delta\n            delta = calculate_delta(\n                option_price=option_price,\n                strike_price=strike_price,\n                expiry=expiry,\n                underlying_price=underlying_price,\n                risk_free_rate=risk_free_rate,\n                option_type='put'\n            )\n            print(f\"Delta is: {delta}\")\n\n            # Create dictionaries for short and long puts based on delta thresholds\n            if short_put_delta_range[0] <= delta <= short_put_delta_range[1]:\n                short_put = {\n                    'close_price': option_data.close_price,\n                    'close_price_date': option_data.close_price_date,\n                    'expiration_date': expiry,\n                    'id': option_data.id,\n                    'name': option_data.name,\n                    'open_interest': option_data.open_interest,\n                    'open_interest_date': option_data.open_interest_date,\n                    'root_symbol': option_data.root_symbol,\n                    'size': option_data.size,\n                    'status': option_data.status,\n                    'strike_price': strike_price,\n                    'style': option_data.style,\n                    'symbol': option_symbol,\n                    'tradable': option_data.tradable,\n                    'type': option_data.type,\n                    'underlying_asset_id': option_data.underlying_asset_id,\n                    'underlying_symbol': option_data.underlying_symbol,\n                    'initial_delta': delta,\n                    'initial_option_price': option_price,\n                }\n            elif long_put_delta_range[0] <= delta <= long_put_delta_range[1]:\n                long_put = {\n                    'close_price': option_data.close_price,\n                    'close_price_date': option_data.close_price_date,\n                    'expiration_date': expiry,\n                    'id': option_data.id,\n                    'name': option_data.name,\n                    'open_interest': option_data.open_interest,\n                    'open_interest_date': option_data.open_interest_date,\n                    'root_symbol': option_data.root_symbol,\n                    'size': option_data.size,\n                    'status': option_data.status,\n                    'strike_price': strike_price,\n                    'style': option_data.style,\n                    'symbol': option_symbol,\n                    'tradable': option_data.tradable,\n                    'type': option_data.type,\n                    'underlying_asset_id': option_data.underlying_asset_id,\n                    'underlying_symbol': option_data.underlying_symbol,\n                    'initial_delta': delta,\n                    'initial_option_price': option_price,\n                }\n\n            # Stop searching if both options are found\n            if short_put and long_put:\n                break\n\n        except KeyError as e:\n            print(f\"Error processing option {option_symbol}: {e}\")\n            continue\n\n    return short_put, long_put\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contracts with Alpaca API in Python\nDESCRIPTION: Function to fetch option contracts based on specified criteria including underlying symbol, strike price range, expiration date range, and option type (call or put). Uses the Alpaca trade client to retrieve active option contracts matching the specified filters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, option_type):\n    req = GetOptionContractsRequest(\n        underlying_symbols=[underlying_symbol],\n        status=AssetStatus.ACTIVE,\n        type=option_type,\n        strike_price_gte=min_strike,\n        strike_price_lte=max_strike,\n        expiration_date_gte=min_expiration,\n        expiration_date_lte=max_expiration,        \n    )\n    return trade_client.get_option_contracts(req).option_contracts\n```\n\n----------------------------------------\n\nTITLE: Calculating Bollinger Bands for Volatility Assessment\nDESCRIPTION: Implements Bollinger Bands calculation to assess market volatility. The function computes standard deviation-based bands around a moving average to identify potential price breakout points and volatility conditions for the underlying stock.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# setup bollinger band calculations\ndef check_bb(df, period=14, multiplier=2):\n    bollinger_bands = []\n    # Calculate the Simple Moving Average (SMA)\n    df['SMA'] = df['close'].rolling(window=period).mean()\n    # Calculate the rolling standard deviation\n    df['StdDev'] = df['close'].rolling(window=period).std()\n    # Calculate the Upper Bollinger Band (two standard deviation)\n    df['Upper Band'] = df['SMA'] + (multiplier * df['StdDev'])\n    # Calculate the Lower Bollinger Band (two standard deviation)\n    df['Lower Band'] = df['SMA'] - (multiplier * df['StdDev'])\n    # Get the most recent Upper Band value\n    upper_bollinger_band = df['Upper Band'].iloc[-1]\n    lower_bollinger_band = df['Lower Band'].iloc[-1]\n    \n    bollinger_bands = [upper_bollinger_band, lower_bollinger_band]\n    return bollinger_bands\n\nbollinger_bands = check_bb(priceData, 14, 2)\n\nprint(f\"Latest Upper Bollinger Band is: {bollinger_bands[0]}. Latest Lower Bollinger Band is {bollinger_bands[1]}; while underlying stock '{underlying_symbol}' price is {underlying_price}.\")\n```\n\n----------------------------------------\n\nTITLE: Building Option Dictionary with Metrics in Python\nDESCRIPTION: Function to combine raw option data with calculated metrics into a comprehensive dictionary. Merges basic option information with derived statistics like implied volatility, Greek values, and price data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef build_option_dict(option_data, underlying_price, risk_free_rate):\n    \"\"\"\n    Build an option dictionary by merging raw option data with calculated metrics.\n    \"\"\"\n    option_data = ensure_dict(option_data)  # Convert to dict if necessary\n    metrics = calculate_option_metrics(option_data, underlying_price, risk_free_rate)\n    candidate = {\n        'id': option_data['id'],\n        'name': option_data['name'],\n        'symbol': option_data['symbol'],\n        'strike_price': option_data['strike_price'],\n        'root_symbol': option_data['root_symbol'],\n        'underlying_symbol': option_data['underlying_symbol'],\n        'underlying_asset_id': option_data['underlying_asset_id'],\n        'close_price': option_data['close_price'],\n        'close_price_date': option_data['close_price_date'],\n        'expiration_date': metrics['expiration_date'],\n        'remaining_days': metrics['remaining_days'],\n        'open_interest': option_data['open_interest'],\n        'open_interest_date': option_data['open_interest_date'],\n        'size': option_data['size'],\n        'status': option_data['status'],\n        'style': option_data['style'],\n        'tradable': option_data['tradable'],\n        'type': option_data['type'],\n        'initial_IV': metrics['iv'],\n        'initial_delta': metrics['delta'],\n        'initial_gamma': metrics['gamma'],\n        'initila_theta': metrics['theta'],\n        'initial_vega': metrics['vega'],\n        'initial_option_price': metrics['option_price'],\n    }\n    \n    return candidate\n```\n\n----------------------------------------\n\nTITLE: Fetching Corporate Actions Data with Alpaca-py\nDESCRIPTION: Creates a CorporateActionsClient to retrieve corporate actions such as dividends, splits, and mergers. Makes a request for a specific symbol starting from January 1, 2020, and returns the results as a DataFrame.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_36\n\nLANGUAGE: python\nCODE:\n```\ncorporate_actions_client = CorporateActionsClient(api_key, secret_key)\ncorporate_actions_client.get_corporate_actions(CorporateActionsRequest(\n    start=datetime(2020, 1, 1),\n    symbols=[symbol]\n)).df\n```\n\n----------------------------------------\n\nTITLE: Adding Underlying Symbol to Position Tracking\nDESCRIPTION: Adds the underlying stock symbol to the positions dictionary with initial position size of zero. This entry will be used to track the stock position for delta hedging.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Add underlying symbol to positions list\nprint(f\"Adding {underlying_symbol} to position list\")\npositions[underlying_symbol] = {'asset_class': 'us_equity', 'position': 0, 'initial_position': 0}\n```\n\n----------------------------------------\n\nTITLE: Visualizing Historical Stock Price Data with Plotly\nDESCRIPTION: This code retrieves 180 days of historical price data for the underlying stock and creates a candlestick chart using Plotly. It helps visualize price trends to inform the calendar spread strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npriceData = get_stock_data(underlying_symbol, days=180)\n\n# List of stock agg objects while dropping the symbol column\npriceData = priceData.reset_index(level='symbol', drop=True)\n\nimport plotly.graph_objects as go\n\n# Bar chart for the stock price\nfig = go.Figure(data=[go.Candlestick(x=priceData.index,\n                open=priceData['open'],\n                high=priceData['high'],\n                low=priceData['low'],\n                close=priceData['close'])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Closing a Position Partially\nDESCRIPTION: Closes a specific quantity of an open position for the given cryptocurrency. This demonstrates how to reduce exposure to an asset without fully liquidating the position.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# close the position with specifying qty\n# ref. https://docs.alpaca.markets/reference/deleteopenposition-1\ntrade_client.close_position(\n    symbol_or_asset_id = symbol,\n    close_options = ClosePositionRequest(\n        qty = \"0.01\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Positions in Alpaca Trading API (Python)\nDESCRIPTION: Method to get all open positions for an account using the Alpaca Trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/positions.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.get_all_positions\n```\n\n----------------------------------------\n\nTITLE: Pairing Options for Bull Put and Bear Call Spreads in Python\nDESCRIPTION: Two functions for pairing options to create spreads: one for bull put spreads (ensuring long put strike < short put strike < underlying price) and another for bear call spreads (ensuring underlying price < short call strike < long call strike).\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef pair_put_candidates(short_puts, long_puts, underlying_price):\n    '''\n    For the bull put spread, we require: long_put strike < short_put strike < underlying_price\n    '''\n    for short_put in short_puts:\n        for long_put in long_puts:\n            if long_put['strike_price'] < short_put['strike_price'] and short_put['strike_price'] < underlying_price and long_put['strike_price'] < underlying_price:\n                print(f\"Selected put spread: short_put {short_put['symbol']} and long_put {long_put['symbol']}.\")\n                return short_put, long_put\n    return None, None\n\n\ndef pair_call_candidates(short_calls, long_calls, underlying_price):\n    '''\n    For the bear call spread, we require: underlying_price < short_call strike < long_call strike\n    '''\n    for short_call in short_calls:\n        for long_call in long_calls:\n            if short_call['strike_price'] < long_call['strike_price'] and short_call['strike_price'] > underlying_price and long_call['strike_price'] > underlying_price:\n                print(f\"Selected call spread: short_call {short_call['symbol']} and long_call {long_call['symbol']}.\")\n                return short_call, long_call\n    return None, None\n```\n\n----------------------------------------\n\nTITLE: Setting Up Environment and Initializing Polygon.io API Client in Python\nDESCRIPTION: Installs required packages, imports necessary modules, and initializes the Polygon.io API client for historical market data access. Includes a utility function to calculate days between dates.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `polygon-api-client` and `plotly` and import them\n!python3 -m pip install --upgrade polygon-api-client\n!python3 -m pip install --upgrade plotly\n\n#import modules\nfrom polygon import RESTClient\nimport datetime as dt\nimport pandas as pd\nimport numpy as np\nimport plotly.graph_objects as go\nfrom plotly.offline import plot\nfrom datetime import datetime, timedelta\n\n# Create client and authenticate with Polygon.io\n# [Reference](https://github.com/polygon-io/client-python)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\npolygonAPIkey = userdata.get('POLYGON_API_KEY')\nclient = RESTClient(polygonAPIkey) # api_key is used\n\ndef calculate_days_between(from_date, to_date):\n    from_date_obj = datetime.strptime(from_date, '%Y-%m-%d')\n    to_date_obj = datetime.strptime(to_date, '%Y-%m-%d')\n    return (to_date_obj - from_date_obj).days\n```\n\n----------------------------------------\n\nTITLE: Evaluating and Rolling/Rinsing Options in Python\nDESCRIPTION: This function evaluates the current status of sold options and decides whether to roll or rinse them based on predefined thresholds. It calculates option metrics, compares them against exit conditions, and executes the roll/rinse if necessary.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# check the current status of the sold option (rolling or rinsing)\ndef roll_rinse_option(mleg_option_data, rolling, target_profit_percentage, bollinger_bands, underlying_symbol, risk_free_rate, buying_power_limit, min_strike, max_strike, min_expiration, max_expiration, expiry_range, iv_range, delta_range, theta_range):\n\n    # Determine the short-term option (earliest expiration date)\n    short_term_option = min(mleg_option_data, key=lambda opt: opt['expiration_date'])\n\n    for option in mleg_option_data:\n        option_symbol = option.get(\"symbol\")\n        option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n        option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n        \n        # Extract option details\n        current_option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n        strike_price = float(option[\"strike_price\"])\n        expiry = pd.Timestamp(option[\"expiration_date\"])\n        option_type = option[\"type\"]\n        remaining_days = (expiry - pd.Timestamp.now()).days\n        T = max(remaining_days / 365, 1e-6)\n\n        # Calculate current IV and Greeks\n        current_iv = calculate_implied_volatility(\n            option_price=current_option_price, \n            S=underlying_price,\n            K=strike_price,\n            T=T,\n            r=risk_free_rate,\n            option_type=option_type\n        )\n        current_delta, _, current_theta, _ = calculate_greeks(\n            option_price=current_option_price, \n            strike_price=strike_price, \n            expiry=expiry,\n            underlying_price=underlying_price,\n            risk_free_rate=risk_free_rate,\n            option_type=option_type\n        )\n        # Calcualte the target profit price based on the predefine target profit percentage (Default: 60% of credit received, meaning if you earn 60% of the initial premium, you exit)\n        target_profit_price = option['initial_option_price'] - option['initial_option_price'] * target_profit_percentage\n\n        # If the target option is the same as the shorter term option\n        if short_term_option['expiration_date'] == option['expiration_date']:\n            # Short-term thresholds:\n            #  - Expires in less than 7 days; |delta| >= 0.7; IV >= 60; Option price is at or below the target profit price; Option price is outside the Bollinger Band range (below lower or above upper)\n            exit_condition = (remaining_days < 7 or abs(current_delta) >= 0.7 or current_iv >= 60 or current_option_price <= target_profit_price or current_option_price <= bollinger_bands[1] or current_option_price >= bollinger_bands[0])\n\n        else:\n            # Longer-term call thresholds:\n            #  - Expires in less than 30 days; |delta| >= 0.8; IV >= 60; Option price is at or below the target profit price; Option price is outside the Bollinger Band range (below lower or above upper)\n            exit_condition = (remaining_days < 30 or abs(current_delta) >= 0.8 or current_iv >= 60 or current_option_price <= target_profit_price or current_option_price <= bollinger_bands[1] or current_option_price >= bollinger_bands[0])\n                \n        # Execute roll/rinse if any threshold is met.\n        if exit_condition:\n            message, response = mleg_roll_rinse_execution(\n                mleg_option_data, rolling, underlying_symbol, risk_free_rate,\n                buying_power_limit, min_strike, max_strike, min_expiration,\n                max_expiration, expiry_range, iv_range, delta_range, theta_range\n            )\n            return message, response\n\n    return \"No option met the exit thresholds. Holding the position.\", None\n```\n\n----------------------------------------\n\nTITLE: Executing Cash Secured Put Strategy with Alpaca API in Python\nDESCRIPTION: Function that implements the cash secured put strategy by finding appropriate put options and executing the trade order. It calculates strike price range based on the underlying price, filters options by expiration dates, and places market orders when suitable options are found.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef execute_cash_secured_put(underlying_symbol, buying_power_limit, min_expiration, max_expiration):\n\n    # Get the latest price of the underlying stock\n    underlying_price = get_underlying_price(underlying_symbol)\n    # Set the minimum and maximum strike prices based on the underlying price\n    min_strike = str(underlying_price * (1 - STRIKE_RANGE))\n    max_strike = str(underlying_price) # In cash-secured put, we explore options whose strike price is below the underlying price\n\n    # Get put options\n    put_options = get_put_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration)\n\n    if put_options:\n        # Get the latest price of the underlying stock\n        underlying_price = get_underlying_price(symbol=underlying_symbol)\n\n        # Find appropriate short put options\n        short_put = find_short_put_option(put_options, buying_power_limit)\n\n        # Proceed if short put options are found\n        if short_put:\n\n            # Place orders for the short put if credit received meets a threshold (e.g., minimum profit)\n            req = MarketOrderRequest(\n                symbol=short_put['symbol'],\n                qty=1,\n                side='sell',\n                type='market',\n                time_in_force='day'\n            )\n\n            trade_client.submit_order(req)\n\n            success_message = (f\"Placing Cash Secured Put on {underlying_symbol} successfully:\\n\"\n                               f\"Sell {short_put['initial_delta']} Delta Put: {short_put['symbol']} \"\n                               f\"(Strike: {short_put['strike_price']}, Premium to Receive: {short_put['initial_option_price']})\")\n            return success_message, short_put\n\n        else:\n            return \"Could not find suitable options which has delta between -20 and -40 and iv less than or equal to 60.\", None\n    else:\n        return \"No put options available for the underlying symbol.\", None\n```\n\n----------------------------------------\n\nTITLE: Executing Short Iron Butterfly Order\nDESCRIPTION: Places a market order for a short iron butterfly spread by creating and submitting multiple option leg requests through the Alpaca trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# Place orders for the short iron butterfly spread if all options are found\nif short_iron_butterfly_order_legs:\n    # Create a list for the order request\n    order_legs = []\n    ## Append long put\n    order_legs.append(OptionLegRequest(\n        symbol=short_iron_butterfly_order_legs[0][\"symbol\"],\n        side=OrderSide.SELL,\n        ratio_qty=1\n    ))\n    ## Append short put\n    order_legs.append(OptionLegRequest(\n        symbol=short_iron_butterfly_order_legs[1][\"symbol\"],\n        side=OrderSide.BUY,\n        ratio_qty=1\n    ))\n    ## Append short call\n    order_legs.append(OptionLegRequest(\n        symbol=short_iron_butterfly_order_legs[2][\"symbol\"],\n        side=OrderSide.SELL,\n        ratio_qty=1\n    ))\n    ## Append short call\n    order_legs.append(OptionLegRequest(\n        symbol=short_iron_butterfly_order_legs[3][\"symbol\"],\n        side=OrderSide.BUY,\n        ratio_qty=1\n    ))\n\n    # Place the order for both legs simultaneously\n    req = MarketOrderRequest(\n        qty=1,\n        order_class=OrderClass.MLEG,\n        time_in_force=TimeInForce.DAY,\n        legs=order_legs\n    )\n    res = trade_client.submit_order(req)\n    print(\"Short iron butterfly order placed successfully.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Relative Volatility Index (RVI) for Volatility Analysis\nDESCRIPTION: Calculates the Relative Volatility Index (RVI) to assess volatility direction and magnitude for options strategy selection. The function analyzes price change standard deviations over a specified period to determine if volatility is overextended or compressed.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_rvi(df, period=14):\n    # Calculate daily price changes \n    df['price_change'] = df['close'].diff()\n\n    # Separate up and down price changes\n    df['up_change'] = df['price_change'].where(df['price_change'] > 0, 0)\n    df['down_change'] = -df['price_change'].where(df['price_change'] < 0, 0)\n\n    # Calculate std of up and down changes over the rolling period\n    df['avg_up_std'] = df['up_change'].rolling(window=period).std()\n    df['avg_down_std'] = df['down_change'].rolling(window=period).std()\n\n    # Calculate RVI\n    df['rvi'] = 100 - (100 / (1 + (df['avg_up_std'] / df['avg_down_std'])))\n\n    # Smooth the RVI with a 4 periods moving average\n    df['rvi_smoothed'] = df['rvi'].rolling(window=4).mean()\n\n    return df['rvi_smoothed']\n\n# smoothed RVI\ncalculate_rvi(priceData, period=21).iloc[30:]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options Historical Trades with Alpaca in Python\nDESCRIPTION: This snippet fetches historical trade data for options using the OptionHistoricalDataClient. It defines parameters such as symbol, start date, and limit for the request.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_26\n\nLANGUAGE: python\nCODE:\n```\nreq = OptionTradesRequest(\n    symbol_or_symbols = high_open_interest_contract.symbol,\n    start = now - timedelta(days = 5),                              # specify start datetime, default=the beginning of the current day.\n    # end=None,                                                     # specify end datetime, default=now\n    limit = 2,                                                      # specify limit\n)\noption_historical_data_client.get_option_trades(req).df\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpaca Trading Client\nDESCRIPTION: Creates a TradingClient instance with the provided API credentials. This client is used for all trading-related operations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# setup clients\ntrade_client = TradingClient(api_key=api_key, secret_key=secret_key, paper=paper, url_override=trade_api_url)\n```\n\n----------------------------------------\n\nTITLE: Placing an OTO Order with Stop Loss\nDESCRIPTION: Creates a One-Triggers-Other (OTO) order that places a limit order to buy SPY at $500, and if filled, creates a stop loss order at $300. This is useful for managing risk on new positions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# oto order with stop loss\nreq = LimitOrderRequest(\n                    symbol = symbol,\n                    qty = 1,\n                    limit_price = 500,\n                    side = OrderSide.BUY,\n                    time_in_force = TimeInForce.DAY,\n                    Class = OrderClass.OTO,\n                    stop_loss = StopLossRequest(stop_price = 300)\n                    )\n\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Closing Option Spread Positions with Alpaca Trading API\nDESCRIPTION: Implements a function to close both legs of an options spread position. The function uses Alpaca's close_position API to liquidate the long and short positions, enabling trade exits at profit targets or stop-loss levels.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Exit the spread by liquidating the position\ndef close_spread(short_symbol, long_symbol):\n\n    # Close the long put by selling it\n    trade_client.close_position(\n        symbol_or_asset_id = long_symbol,\n        close_options = ClosePositionRequest(qty = \"1\")\n    )\n\n    # Close the short put by buying it back\n    trade_client.close_position(\n        symbol_or_asset_id = short_symbol,\n        close_options = ClosePositionRequest(qty = \"1\")\n    )\n```\n\n----------------------------------------\n\nTITLE: Closing a Position with Specified Quantity\nDESCRIPTION: Closes a specific quantity (0.01 shares) of the SPY position. This demonstrates partial position closing rather than liquidating the entire position.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# close the position with specifying qty\n# ref. https://docs.alpaca.markets/reference/deleteopenposition-1\ntrade_client.close_position(\n    symbol_or_asset_id = symbol,\n    close_options = ClosePositionRequest(\n        qty = \"0.01\",\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Building Option Dictionary with Metrics\nDESCRIPTION: This function creates a comprehensive dictionary for an option by combining the raw option data with calculated metrics. It includes contract details as well as calculated Greeks, implied volatility, and pricing information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef build_option_dict(option_data, underlying_price, risk_free_rate):\n    \"\"\"\n    Build an option dictionary by merging raw option data with calculated metrics.\n    \"\"\"\n    option_data = ensure_dict(option_data)  # Convert to dict if necessary\n    metrics = calculate_option_metrics(option_data, underlying_price, risk_free_rate)\n    # Check if metrics is None (e.g., missing IV/Greeks); if so, skip candidate building \n    if metrics is None:\n        return None\n    \n    candidate = {\n        'id': option_data['id'],\n        'name': option_data['name'],\n        'symbol': option_data['symbol'],\n        'strike_price': option_data['strike_price'],\n        'root_symbol': option_data['root_symbol'],\n        'underlying_symbol': option_data['underlying_symbol'],\n        'underlying_asset_id': option_data['underlying_asset_id'],\n        'close_price': option_data['close_price'],\n        'close_price_date': option_data['close_price_date'],\n        'expiration_date': metrics['expiration_date'],\n        'remaining_days': metrics['remaining_days'],\n        'open_interest': option_data['open_interest'],\n        'open_interest_date': option_data['open_interest_date'],\n        'size': option_data['size'],\n        'status': option_data['status'],\n        'style': option_data['style'],\n        'tradable': option_data['tradable'],\n        'type': option_data['type'],\n        'initial_IV': metrics['iv'],\n        'initial_delta': metrics['delta'],\n        'initial_gamma': metrics['gamma'],\n        'initial_theta': metrics['theta'],\n        'initial_vega': metrics['vega'],\n        'initial_option_price': metrics['option_price'],\n    }\n    \n    return candidate\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpaca API Clients for Paper Trading\nDESCRIPTION: Sets up API credentials using Google Colab's secure credential storage and initializes Alpaca clients for trading, option historical data, and stock data with paper trading environment.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example (Please do not modify this. This example is for paper trading only).\nPAPER = True\n\n# Initialize Alpaca clients\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Configuring Options Trading Parameters for 0DTE Strategy\nDESCRIPTION: Defines trading parameters for a put credit spread strategy including underlying asset, strike price range, risk metrics, delta thresholds, and risk management rules. Sets buying power limits and profit/loss targets.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Configuration\nunderlying_symbol = 'SPY'\n\n# Set the timezone\ntimezone = ZoneInfo(\"America/New_York\")\n\n# Set expiration range for options\ntoday = datetime.now(timezone).date()\n\n# Define a 10% range around the underlying price\nSTRIKE_RANGE = 0.1\n\n# Risk free rate for the options greeks and IV calculations\nrisk_free_rate = 0.01\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 500\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.10\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Define delta thresholds\nSHORT_PUT_DELTA_RANGE = (-0.42, -0.38)\nLONG_PUT_DELTA_RANGE = (-0.22, -0.18)\n\n# Set minimum credit percentage (33%)\nMIN_CREDIT_PERCENTAGE = 0.33\n\n# Set stop loss threshold threshold (2 times)\nDELTA_STOP_LOSS_THRES = 2\n\n# Set target profit and stop-loss levels\nTARGET_STOP_LOSS_PERCENTAGE = 0.5\n```\n\n----------------------------------------\n\nTITLE: Selecting Options for Bull Put Spread in Python\nDESCRIPTION: This function processes put options to find suitable candidates for a bull put spread strategy. It filters options based on expiration dates and checks buying power requirements.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ncommon_expirations = set(short_put_candidates_by_exp.keys()) & set(long_put_candidates_by_exp.keys())\nfor expiration_date in common_expirations:\n    sp, lp = pair_put_candidates(short_put_candidates_by_exp[expiration_date],\n                                  long_put_candidates_by_exp[expiration_date],\n                                  underlying_price)\n    if sp and lp:\n        try:\n            check_buying_power(sp, lp, buying_power_limit)\n        except Exception as e:\n            logger.error(f\"Pair for expiration {expiration_date} failed buying power check: {e}\")\n            continue\n        logger.info(f\"Selected bull put spread for expiration {expiration_date}: short {sp['symbol']}, long {lp['symbol']}.\")\n        return [sp, lp]\n\nlogger.info(\"No valid bull put spread found.\")\nreturn [None, None]\n```\n\n----------------------------------------\n\nTITLE: Finding Options for Bear Put Spread Strategy in Python\nDESCRIPTION: This function orchestrates the workflow to build a bear put spread. It groups options by expiration, filters them with criteria, pairs candidates, and checks buying power to find suitable options for the strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef find_options_for_bear_put_spread(put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD):\n    \"\"\"\n    Orchestrates the workflow to build a bear put spread.\n    Groups options by expiration, filters them with criteria, pairs candidates using helper functions,\n    and checks buying power.\n    \n    Returns:\n        A list of legs [short_put, long_put] if a valid pair is found, or an empty list otherwise.\n    \"\"\"\n    short_put_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n    long_put_candidates_by_exp: Dict[pd.Timestamp, List[Dict[str, Any]]] = {}\n\n    # Process each option candidate\n    for option_data in put_options:\n        if not validate_sufficient_OI(option_data, OI_THRESHOLD):\n            logger.warning(f\"Insufficient open interest for option {getattr(option_data, 'symbol', 'unknown')} (threshold: {OI_THRESHOLD}). Skipping candidate.\")\n            continue\n\n        candidate = build_option_dict(option_data, underlying_price, risk_free_rate)\n        expiration_date = candidate['expiration_date']\n        short_put_candidates_by_exp.setdefault(expiration_date, [])\n        long_put_candidates_by_exp.setdefault(expiration_date, [])\n        \n        # Check each candidate for both put criteria\n        if check_candidate_option_conditions(candidate, criteria['short_put'], 'short_put'):\n            short_put_candidates_by_exp[expiration_date].append(candidate)\n            logger.info(f\"Added {candidate['symbol']} as a short put candidate for expiration {expiration_date}.\")\n        if check_candidate_option_conditions(candidate, criteria['long_put'], 'long_put'):\n            long_put_candidates_by_exp[expiration_date].append(candidate)\n            logger.info(f\"Added {candidate['symbol']} as a long put candidate for expiration {expiration_date}.\")\n\n    # Process only expiration dates common to both candidate groups\n    common_expirations = set(short_put_candidates_by_exp.keys()) & set(long_put_candidates_by_exp.keys())\n    for expiration_date in common_expirations:\n        sp, lp = pair_put_candidates(short_put_candidates_by_exp[expiration_date],\n                                      long_put_candidates_by_exp[expiration_date],\n```\n\n----------------------------------------\n\nTITLE: Calculating Option Metrics and Greeks in Python\nDESCRIPTION: This function calculates key option metrics including option price, implied volatility (IV), and option Greeks (delta, gamma, theta, vega) using the latest quote data and mathematical models.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_option_metrics(option_data, underlying_price, risk_free_rate):\n    \"\"\"\n    Calculate key option metrics including option price, implied volatility (IV), and option Greeks.\n    \"\"\"\n    # Retrieve the latest quote for the option\n    option_quote_req = OptionLatestQuoteRequest(symbol_or_symbols=option_data['symbol'])\n    option_quote = option_historical_data_client.get_option_latest_quote(option_quote_req)[option_data['symbol']]\n    option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n\n    # Calculate expiration and remaining days\n    expiration_date = pd.Timestamp(option_data['expiration_date'])\n    remaining_days = (expiration_date - pd.Timestamp.now()).days\n\n    # Calculate implied volatility\n    iv = calculate_implied_volatility(\n        option_price=option_price,\n        S=underlying_price,\n        K=float(option_data['strike_price']),\n        T=max(remaining_days / 365, 1e-6),\n        r=risk_free_rate,\n        option_type=option_data['type'].value\n    )\n    \n    # Calculate Greeks (delta and vega)\n    delta, gamma, theta, vega = calculate_greeks(\n        option_price=option_price,\n        strike_price=float(option_data['strike_price']),\n        expiration=expiration_date,\n        underlying_price=underlying_price,\n        risk_free_rate=risk_free_rate,\n        option_type=option_data['type'].value\n    )\n    \n    return {\n        'option_price': option_price,\n        'expiration_date': expiration_date,\n        'remaining_days': remaining_days,\n        'iv': iv,\n        'delta': delta,\n        'gamma': gamma,\n        'theta': theta,\n        'vega': vega\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpaca API Credentials and Initializing Clients\nDESCRIPTION: Sets up the API credentials for Alpaca using Google Colab's userdata for secure key storage. Initializes the TradingClient, OptionHistoricalDataClient, and StockHistoricalDataClient with the provided credentials.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example (Please do not modify this. This example is for paper trading only).\nPAPER = True\n\n# Initialize Alpaca clients\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Trade Updates with Alpaca TradingStream in Python\nDESCRIPTION: This code sets up a TradingStream client to subscribe to trade updates. It defines an asynchronous handler function to process incoming trade data and runs the stream client.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\ntrade_stream_client = TradingStream(api_key, secret_key, paper=paper, url_override = trade_api_wss)\n\nasync def trade_updates_handler(data):\n    print(data)\n\ntrade_stream_client.subscribe_trade_updates(trade_updates_handler)\ntrade_stream_client.run()\n```\n\n----------------------------------------\n\nTITLE: Placing a Stop Order\nDESCRIPTION: Creates and submits a stop order to buy 1 share of SPY when the price reaches $600. This order will execute as a market order once the stop price is reached.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# stop order\nreq = StopOrderRequest(\n                    symbol = symbol,\n                    qty = 1,\n                    side = OrderSide.BUY,\n                    time_in_force = TimeInForce.GTC,\n                    stop_price = 600\n                    )\n\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Executing Options Roll Strategy in Python for Alpaca\nDESCRIPTION: Example code showing how to call the roll_rinse_option function to manage an existing short put position. This snippet demonstrates the practical application of the options management functions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nmessage, short = roll_rinse_option(option_data=short_put, rolling=True)\nmessage, short\n```\n\n----------------------------------------\n\nTITLE: Replacing Complete Multi-leg Order in Python\nDESCRIPTION: Demonstrates how to replace an entire multi-leg order with updated quantity parameters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nif q1.status != OrderStatus.FILLED:\n    # We can replace the order\n    req = ReplaceOrderRequest(\n        qty=55,\n    )\n    res = trade_client.replace_order_by_id(res.id, req)\n    print(f\"Replaced order: {res}\")\nelse:\n    print(\"Order is already filled.\")\n```\n\n----------------------------------------\n\nTITLE: Placing a Stop Limit Order for Bitcoin\nDESCRIPTION: Submits a stop-limit order for Bitcoin with specified stop and limit prices. This demonstrates a more advanced order type that combines features of stop and limit orders.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# stop limit order\nreq = StopLimitOrderRequest(\n                    symbol = symbol,\n                    qty = 0.01,\n                    side = OrderSide.BUY,\n                    time_in_force = TimeInForce.GTC,\n                    limit_price = 55000,\n                    stop_price = 60000\n                    )\n\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Building Option Data Dictionary with Greeks Calculation in Python\nDESCRIPTION: Helper function that constructs a dictionary containing option data and calculated metrics like implied volatility and Greeks. It retrieves the latest quote for the option, calculates the time to expiration, and computes financial metrics based on market data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef build_option_dict(option_data, underlying_price, risk_free_rate):\n    '''\n    Helper to build an option dictionary from option_data and calculated metrics.\n    '''\n    # Retrieve the latest quote\n    option_quote_req = OptionLatestQuoteRequest(symbol_or_symbols=option_data.symbol)\n    option_quote = option_historical_data_client.get_option_latest_quote(option_quote_req)[option_data.symbol]\n    option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n\n    strike_price = float(option_data.strike_price)\n    expiration = pd.Timestamp(option_data.expiration_date)\n    remaining_days = (expiration - pd.Timestamp.now()).days\n\n    iv = calculate_implied_volatility(\n        option_price=option_price,\n        S=underlying_price,\n        K=strike_price,\n        T=max(remaining_days / 365, 1e-6),\n        r=risk_free_rate,\n        option_type=option_data.type.value\n    )\n    delta, _, theta, _ = calculate_greeks(\n        option_price=option_price,\n        strike_price=strike_price,\n        expiration=expiration,\n        underlying_price=underlying_price,\n        risk_free_rate=risk_free_rate,\n        option_type=option_data.type.value\n    )\n\n    # Build a candidate dictionary that can be augmented or returned\n    candidate = {\n        'id': option_data.id,\n        'name': option_data.name,\n        'symbol': option_data.symbol,\n        'strike_price': option_data.strike_price,\n        'root_symbol': option_data.root_symbol,\n        'underlying_symbol': option_data.underlying_symbol,\n        'underlying_asset_id': option_data.underlying_asset_id,\n        'close_price': option_data.close_price,\n        'close_price_date': option_data.close_price_date,\n        'expiration': expiration,\n        'remaining_days': remaining_days,\n        'open_interest': option_data.open_interest,\n        'open_interest_date': option_data.open_interest_date,\n        'size': option_data.size,\n        'status': option_data.status,\n        'style': option_data.style,\n        'tradable': option_data.tradable,\n        'type': option_data.type,\n        'initial_IV': iv,\n        'initial_delta': delta,\n        'initial_theta': theta,\n        'initial_option_price': option_price,\n\n    }\n    # print(f\"candidate{candidate}\") # Comment out for further investigation of the condition.\n    return candidate\n```\n\n----------------------------------------\n\nTITLE: Pairing Options for Bull Put Spread\nDESCRIPTION: This function identifies valid pairs of put options to form a bull put spread. It ensures that the long put's strike is below the underlying price which is below the short put's strike, and optimizes the width of the spread relative to the underlying price.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef pair_put_candidates(short_puts: List[Dict[str, Any]], long_puts: List[Dict[str, Any]], underlying_price: float) -> Tuple[Optional[Dict[str, Any]], Optional[Dict[str, Any]]]:\n    \"\"\"\n    For the bull put spread, require: \n        * long_put strike <= underlying_price < short_put strike\n        * width between the short_put's strike and the underlying price is smaller than that between the underlying price and the long_put's strike..\n    Returns the first valid pair found.\n    \"\"\"\n    for sp in short_puts:\n        for lp in long_puts:\n            if sp['expiration_date'] == lp['expiration_date'] and lp['strike_price'] <= underlying_price < sp['strike_price'] and (sp['strike_price'] - underlying_price) < (underlying_price - lp['strike_price']):\n                logger.info(f\"Selected Bull put spread: short_put {sp['symbol']} and long_put {lp['symbol']} with expiration {sp['expiration_date']}.\")\n                return sp, lp\n    \n    # If no valid pair is found, log the expiration date (if available) from the candidate lists.\n    expiration_info = None\n    if short_puts:\n        expiration_info = short_puts[0]['expiration_date']\n    elif long_puts:\n        expiration_info = long_puts[0]['expiration_date']\n\n    if expiration_info:\n        logger.info(f\"No valid bull put spread pair found for expiration {expiration_info} with the given candidates and underlying price conditions.\")\n    else:\n        logger.info(\"No valid bull put spread pair found: no candidate data available.\")\n    \n    return None, None\n```\n\n----------------------------------------\n\nTITLE: Checking Option Filtering Criteria in Python\nDESCRIPTION: Function to evaluate whether an option meets specific filtering criteria including expiration range, implied volatility range, delta range, and vega range. Logs detailed information if a candidate fails any criteria.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef check_candidate_option_conditions(candidate: Dict[str, Any], criteria: Tuple, label: str) -> bool:\n    \"\"\"\n    Check whether a candidate option meets the filtering criteria.\n    The criteria is a tuple of (expiration_range, iv_range, delta_range, vega_range).\n    Logs detailed information if a candidate fails a criterion.\n    \"\"\"\n    expiration_range, iv_range, delta_range, vega_range = criteria\n\n    if not (expiration_range[0] <= candidate['remaining_days'] <= expiration_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails expiration condition for {label}: remaining_days {candidate['remaining_days']} not in {expiration_range}.\")\n        return False\n    if not (iv_range[0] <= candidate['initial_IV'] <= iv_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails IV condition for {label}: initial_IV {candidate['initial_IV']} not in {iv_range}.\")\n        return False\n    if not (delta_range[0] <= candidate['initial_delta'] <= delta_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails delta condition for {label}: initial_delta {candidate['initial_delta']} not in {delta_range}.\")\n        return False\n    if not (vega_range[0] <= candidate['initial_vega'] <= vega_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails vega condition for {label}: initial_vega {candidate['initial_vega']} not in {vega_range}.\")\n        return False\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Placing a Market Order with Quantity\nDESCRIPTION: Submits a market order to buy Bitcoin with a specified quantity. This demonstrates how to create and submit a basic market order with a fixed quantity.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# simple, market order\n# you can specify:\n# or notional value (e.g. 100 USD) (which is in the next example)\nreq = MarketOrderRequest(\n    symbol = symbol,\n    qty = 0.01,\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.GTC,\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Building Comprehensive Option Dictionary in Python\nDESCRIPTION: Function to build a detailed dictionary for an option by combining raw option data with calculated metrics. Converts option data to a dictionary if needed, calculates metrics, and creates a comprehensive candidate dictionary with all relevant option fields.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef build_option_dict(option_data, underlying_price, risk_free_rate):\n    \"\"\"\n    Build an option dictionary by merging raw option data with calculated metrics.\n    \"\"\"\n    \n    option_data = ensure_dict(option_data)  # Convert to dict if necessary\n    metrics = calculate_option_metrics(option_data, underlying_price, risk_free_rate)\n    \n    # Check if metrics is None (e.g., missing IV/Greeks); if so, skip candidate building \n    if metrics is None:\n        return None\n    \n    candidate = {\n        'id': option_data['id'],\n        'name': option_data['name'],\n        'symbol': option_data['symbol'],\n        'strike_price': option_data['strike_price'],\n        'root_symbol': option_data['root_symbol'],\n        'underlying_symbol': option_data['underlying_symbol'],\n        'underlying_asset_id': option_data['underlying_asset_id'],\n        'close_price': option_data['close_price'],\n        'close_price_date': option_data['close_price_date'],\n        'expiration_date': metrics['expiration_date'],\n        'remaining_days': metrics['remaining_days'],\n        'open_interest': option_data['open_interest'],\n        'open_interest_date': option_data['open_interest_date'],\n        'size': option_data['size'],\n        'status': option_data['status'],\n        'style': option_data['style'],\n        'tradable': option_data['tradable'],\n        'type': option_data['type'],\n        'initial_IV': metrics['iv'],\n        'initial_delta': metrics['delta'],\n        'initial_gamma': metrics['gamma'],\n        'initial_theta': metrics['theta'],\n        'initial_vega': metrics['vega'],\n        'initial_option_price': metrics['option_price'],\n    }\n    \n    return candidate\n```\n\n----------------------------------------\n\nTITLE: Cancelling Multi-leg Orders in Python with Alpaca API\nDESCRIPTION: This code demonstrates how to cancel a multi-leg order using the Alpaca trading API. It checks the order status and cancels the order if it has not been filled. The function uses the order's client ID to query and cancel the order.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Query by the order's id\nq1 = trade_client.get_order_by_client_id(res.client_order_id)\n\n# Replace overall order\nif q1.status != OrderStatus.FILLED:\n    # Cancel the whole order\n    trade_client.cancel_order_by_id(res.id)\n    print(f\"Canceled order: {res}\")\n\nelse:\n    print(\"Order is already filled.\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Position by Symbol\nDESCRIPTION: Gets details about the open position for a specific symbol (SPY). This shows information like quantity, entry price, and current market value for the position.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# get positions by symbol\n# ref. https://docs.alpaca.markets/reference/getopenposition-1\nposition = trade_client.get_open_position(symbol_or_asset_id=symbol)\nposition\n\n```\n\n----------------------------------------\n\nTITLE: Executing Bull Put Spread Order in Python\nDESCRIPTION: This snippet executes the bull put spread order using the previously defined function and stores the result.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nres = place_bull_put_spread_order(sp, lp)\nres\n```\n\n----------------------------------------\n\nTITLE: Executing Strategy and Running Options Roll/Rinse\nDESCRIPTION: Code snippet demonstrating the execution of the covered call strategy and explanation of the roll_rinse_execution functionality for managing existing positions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nmessage, short_call = execute_covered_call(underlying_symbol, RISK_FREE_RATE, latest_upper_bollinger_band, short_put, max_strike, min_expiration, max_expiration)\nmessage, short_call\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Alpaca API Integration\nDESCRIPTION: Imports necessary modules and classes from the alpaca-py library and other dependencies. These imports enable interaction with Alpaca's trading and data APIs.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nimport json\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\n\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\nfrom alpaca.data.historical.crypto import CryptoHistoricalDataClient\nfrom alpaca.trading.stream import TradingStream\nfrom alpaca.data.live.crypto import CryptoDataStream\n\nfrom alpaca.data.requests import (\n    CryptoBarsRequest,\n    CryptoQuoteRequest,\n    CryptoTradesRequest,\n    CryptoLatestQuoteRequest\n    )\nfrom alpaca.trading.requests import (\n    GetAssetsRequest,\n    MarketOrderRequest,\n    LimitOrderRequest,\n    StopLimitOrderRequest,\n    GetOrdersRequest,\n    ClosePositionRequest\n)\nfrom alpaca.trading.enums import (\n    AssetClass,\n    AssetStatus,\n    OrderSide,\n    OrderType,\n    TimeInForce,\n    QueryOrderStatus\n)\nfrom alpaca.common.exceptions import APIError\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Put Spread Strategy Parameters\nDESCRIPTION: Sets up the parameters for the bull put spread options strategy including underlying asset, strike price range, expiration date range, risk management parameters, and profit targets. Calculates available buying power and retrieves current market price.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Select the underlying stock\nunderlying_symbol = 'JNJ'\n\n# Set the timezone\ntimezone = ZoneInfo('America/New_York')\n\n# Get current date in US/Eastern timezone\ntoday = datetime.now(timezone).date()\n\n# Define a 6% range around the underlying price \nSTRIKE_RANGE = 0.06\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.05\n\n# Risk free rate for the options greeks and IV calculations\nrisk_free_rate = 0.01\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 50\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Set the expiration date range for the options\nmin_expiration = today + timedelta(days=21)\nmax_expiration = today + timedelta(days=60)\n\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nunderlying_price = get_underlying_price(underlying_symbol)\n\n# Set the minimum and maximum strike prices based on the underlying price\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n\n# Define the criteria for selecting the options\n# Each key corresponds to a leg and maps to a tuple of: (expiration range, IV range, delta range, theta range)\ncriteria = {\n    'short_put':  ((20, 60), (0.15, 0.50), (-0.60, -0.20), (-0.10, -0.03)),\n    'long_put': ((20, 60), (0.15, 0.50), (-0.35, -0.10), (-0.08, -0.01))\n}\n\n# Set target profit levels\nTARGET_PROFIT_PERCENTAGE = 0.6\nDELTA_STOP_LOSS = 0.60\nIV_STOP_LOSS = 0.80\n\n# Display the values\nprint(f\"Underlying Symbol: {underlying_symbol}\")\nprint(f\"{underlying_symbol} price: {underlying_price}\")\nprint(f\"Strike Range: {STRIKE_RANGE}\")\nprint(f\"Buying Power Limit: {buying_power_limit}\")\nprint(f\"Open Interest Threshold: {OI_THRESHOLD}\")\nprint(f\"Minimum Expiration Date: {min_expiration}\")\nprint(f\"Maximum Expiration Date: {max_expiration}\")\nprint(f\"Minimum Strike Price: {min_strike}\")\nprint(f\"Maximum Strike Price: {max_strike}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring API Credentials for Alpaca Options Trading\nDESCRIPTION: Setup API credentials for connecting to Alpaca. The credentials can be provided directly or through environment variables. This snippet emphasizes using paper trading for safety.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Please change the following to your own PAPER api key and secret\n# or set them as environment variables (ALPACA_API_KEY, ALPACA_SECRET_KEY).\n# You can get them from https://alpaca.markets/\n\napi_key = None\nsecret_key = None\n\n#### We use paper environment for this example ####\npaper = True # Please do not modify this. This example is for paper trading only.\n####\n\n# Below are the variables for development this documents\n# Please do not change these variables\n\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Building Option Dictionary with Alpaca Python SDK\nDESCRIPTION: This helper function constructs a dictionary containing option data and calculated metrics. It includes option contract details, implied volatility, delta, theta, and option price.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\ndef build_option_dict(option_data, iv, delta, theta, option_price):\n    \"\"\"\n    Helper to build an option dictionary from option_data and calculated metrics.\n    \"\"\"\n    return {\n        'id': option_data.id,\n        'name': option_data.name,\n        'symbol': option_data.symbol,\n        'strike_price': option_data.strike_price,\n        'root_symbol': option_data.root_symbol,\n        'underlying_symbol': option_data.underlying_symbol,\n        'underlying_asset_id': option_data.underlying_asset_id,\n        'close_price': option_data.close_price,\n        'close_price_date': option_data.close_price_date,\n        'expiration_date': option_data.expiration_date,\n        'open_interest': option_data.open_interest,\n        'open_interest_date': option_data.open_interest_date,\n        'size': option_data.size,\n        'status': option_data.status,\n        'style': option_data.style,\n        'tradable': option_data.tradable,\n        'type': option_data.type,\n        'initial_IV': iv,\n        'initial_delta': delta,\n        'initial_theta': theta,\n        'initial_option_price': option_price,\n    }\n```\n\n----------------------------------------\n\nTITLE: Building Comprehensive Option Dictionary in Python\nDESCRIPTION: This function builds a comprehensive option dictionary by merging raw option data with calculated metrics, including Greeks and other relevant information for trading decisions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef build_option_dict(option_data, underlying_price, risk_free_rate):\n    \"\"\"\n    Build an option dictionary by merging raw option data with calculated metrics.\n    \"\"\"\n    option_data = ensure_dict(option_data)  # Convert to dict if necessary\n    metrics = calculate_option_metrics(option_data, underlying_price, risk_free_rate)\n    candidate = {\n        'id': option_data['id'],\n        'name': option_data['name'],\n        'symbol': option_data['symbol'],\n        'strike_price': option_data['strike_price'],\n        'root_symbol': option_data['root_symbol'],\n        'underlying_symbol': option_data['underlying_symbol'],\n        'underlying_asset_id': option_data['underlying_asset_id'],\n        'close_price': option_data['close_price'],\n        'close_price_date': option_data['close_price_date'],\n        'expiration_date': metrics['expiration_date'],\n        'remaining_days': metrics['remaining_days'],\n        'open_interest': option_data['open_interest'],\n        'open_interest_date': option_data['open_interest_date'],\n        'size': option_data['size'],\n        'status': option_data['status'],\n        'style': option_data['style'],\n        'tradable': option_data['tradable'],\n        'type': option_data['type'],\n        'initial_IV': metrics['iv'],\n        'initial_delta': metrics['delta'],\n        'initial_gamma': metrics['gamma'],\n        'initila_theta': metrics['theta'],\n        'initial_vega': metrics['vega'],\n        'initial_option_price': metrics['option_price'],\n    }\n    \n    return candidate\n```\n\n----------------------------------------\n\nTITLE: Running the Gamma Scalping Strategy Loop\nDESCRIPTION: Defines an asynchronous function that runs the gamma scalping strategy in a continuous loop, periodically checking and adjusting the portfolio to maintain delta neutrality based on configurable time intervals.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Gamma sclaping strategy\nasync def gamma_scalp(initial_interval=30, interval=120):\n    await asyncio.sleep(initial_interval)\n    maintain_delta_neutral()\n    while True:\n        await asyncio.sleep(interval)\n        maintain_delta_neutral()\n```\n\n----------------------------------------\n\nTITLE: Closing All Positions in Alpaca Trading API (Python)\nDESCRIPTION: Method to close all open positions for an account using the Alpaca Trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/positions.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.close_all_positions\n```\n\n----------------------------------------\n\nTITLE: Exercising Options Position with Alpaca TradingClient in Python\nDESCRIPTION: This snippet demonstrates how to exercise an options position using the Alpaca TradingClient. It uses the symbol or contract ID of a high open interest contract to exercise the position.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\ntrade_client.exercise_options_position(\n    symbol_or_contract_id = high_open_interest_contract.symbol\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Position by Asset ID\nDESCRIPTION: Gets details about an open position using its asset ID instead of symbol. This alternative method accomplishes the same result as querying by symbol.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# get positions by asset_id\ntrade_client.get_open_position(symbol_or_asset_id=position.asset_id)\n```\n\n----------------------------------------\n\nTITLE: Finding Option Contract with Highest Open Interest\nDESCRIPTION: Iterates through option contracts to find the one with the highest open interest. This approach helps identify more liquid option contracts for trading.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# get high open_interest contract\nopen_interest = 0\nhigh_open_interest_contract = None\nfor contract in res.option_contracts:\n    if (contract.open_interest is not None) and (int(contract.open_interest) > open_interest):\n        open_interest = int(contract.open_interest)\n        high_open_interest_contract = contract\nhigh_open_interest_contract\n```\n\n----------------------------------------\n\nTITLE: Fetching Call Options for Short Iron Condor Strategy in Python\nDESCRIPTION: This function retrieves call options for a specified underlying symbol within given strike price and expiration date ranges. It uses the Alpaca API to fetch option contracts that meet the specified criteria for a short iron condor options strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_call_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration):\n    \n    # Fetch the options data to add to the portfolio\n    req = GetOptionContractsRequest(\n        underlying_symbols=[underlying_symbol],\n        status=AssetStatus.ACTIVE,\n        type=ContractType.CALL,\n        strike_price_gte=min_strike,\n        strike_price_lte=max_strike,\n        expiration_date_gte=min_expiration,\n        expiration_date_lte=max_expiration,\n    )\n    \n    # Get call option chain of the underlying symbol\n    call_options = trade_client.get_option_contracts(req).option_contracts\n    return call_options\n```\n\n----------------------------------------\n\nTITLE: Documenting AccountCreationRequest Class in Python\nDESCRIPTION: This snippet documents the CreateAccountRequest class from the alpaca.broker.requests module. It is used for creating new accounts in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.CreateAccountRequest\n```\n\n----------------------------------------\n\nTITLE: Setting up Real-time Market Data Stream with Alpaca-py\nDESCRIPTION: Initializes a StockDataStream client for real-time market data. Defines an async handler for incoming data, subscribes to quotes and trades for specified symbols, and starts the stream to receive real-time market updates.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_35\n\nLANGUAGE: python\nCODE:\n```\nstock_data_stream_client = StockDataStream(api_key, secret_key, url_override = stream_data_wss)\n\nasync def stock_data_stream_handler(data):\n    print(data)\n\nsymbols = [symbol]\n\nstock_data_stream_client.subscribe_quotes(stock_data_stream_handler, *symbols)\nstock_data_stream_client.subscribe_trades(stock_data_stream_handler, *symbols)\n\nstock_data_stream_client.run()\n```\n\n----------------------------------------\n\nTITLE: Configuring Alpaca API Clients with Secure Credentials\nDESCRIPTION: Sets up Alpaca API clients securely using Google Colab's userdata functionality. Initializes TradingClient, OptionHistoricalDataClient, and StockHistoricalDataClient for paper trading environment.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# API_KEY = \"Alpaca's Trading API Key (Paper Account)\"\n# API_SECRET = \"Alpaca's Trading API Secret Key (Paper Account)\"\n\n# A safe approach to setting up API credentials for Alpaca (Assume you run this notebook in Google Colab)\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example\nPAPER = True # Please do not modify this. This example is for paper trading only.\n\n# Initialize Alpaca clients\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n\n# Below are the variables for developing this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\noption_stream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Implementing Bollinger Bands for Volatility Assessment in Python\nDESCRIPTION: A function to calculate Bollinger Bands, a technical indicator used to assess market volatility. The function computes the simple moving average, standard deviation, and upper/lower bands with a specified multiplier (typically 2 standard deviations). The bands help identify potential overbought or oversold conditions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# setup bollinger band calculations\ndef check_bb(df, period=14, multiplier=2):\n    bollinger_bands = []\n    # Calculate the Simple Moving Average (SMA)\n    df['SMA'] = df['close'].rolling(window=period).mean()\n    # Calculate the rolling standard deviation\n    df['StdDev'] = df['close'].rolling(window=period).std()\n    # Calculate the Upper Bollinger Band (two standard deviation)\n    df['Upper Band'] = df['SMA'] + (multiplier * df['StdDev'])\n    # Calculate the Lower Bollinger Band (two standard deviation)\n    df['Lower Band'] = df['SMA'] - (multiplier * df['StdDev'])\n    # Get the most recent Upper Band value\n    upper_bollinger_band = df['Upper Band'].iloc[-1]\n    lower_bollinger_band = df['Lower Band'].iloc[-1]\n    \n    bollinger_bands = [upper_bollinger_band, lower_bollinger_band]\n    return bollinger_bands\n\nbollinger_bands = check_bb(priceData, 14, 2)\n\n# The current market price is not too close to the two-standard deviation level yet but is relatively closer to the higher Bollinger Band.\nprint(f\"Latest Upper Bollinger Band is: {bollinger_bands[0]}. Latest Lower Bollinger Band is {bollinger_bands[1]}; while underlying stock '{underlying_symbol}' price is {underlying_price}.\")\n```\n\n----------------------------------------\n\nTITLE: Checking Option Criteria Conditions in Python\nDESCRIPTION: A function that evaluates if an option candidate meets specified filtering criteria for expiration range, implied volatility, delta, and theta. It provides detailed feedback about which conditions fail for each option.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef check_candidate_option_conditions(candidate, criteria, label):\n    '''\n    Check whether a candidate option meets the filtering criteria.\n    The criteria is a tuple of (expiration_range, iv_range, delta_range, theta_range).\n    '''\n    expiration_range, iv_range, delta_range, theta_range = criteria\n\n    if not (expiration_range[0] <= candidate['remaining_days'] <= expiration_range[1]):\n        print(f\"{candidate['symbol']} fails expiration condition for {label}.\")\n        return False\n    if not (iv_range[0] <= candidate['initial_IV'] <= iv_range[1]):\n        print(f\"{candidate['symbol']} fails IV condition for {label}.\")\n        return False\n    if not (delta_range[0] <= candidate['initial_delta'] <= delta_range[1]):\n        print(f\"{candidate['symbol']} fails delta condition for {label}.\")\n        return False\n    if not (theta_range[0] <= candidate['initial_theta'] <= theta_range[1]):\n        print(f\"{candidate['symbol']} fails theta condition for {label}.\")\n        return False\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Calculating Bollinger Bands for Option Strike Selection\nDESCRIPTION: Calculates Bollinger Bands using historical stock data to determine appropriate strike prices for covered calls. Uses a 20-day window and 2 standard deviations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nnow = datetime.now(ZoneInfo(\"America/New_York\"))\nreq = StockBarsRequest(\n    symbol_or_symbols=[underlying_symbol],\n    timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),\n    start=today-timedelta(days=60),\n    end=today,\n)\n\nstock_data = stock_data_client.get_stock_bars(req).df\n\nwindow = 20\nstock_data['SMA'] = stock_data['close'].rolling(window=window).mean()\nstock_data['StdDev'] = stock_data['close'].rolling(window=window).std()\nmultiplier = 2\nstock_data['Upper_Band'] = stock_data['SMA'] + (multiplier * stock_data['StdDev'])\nlatest_upper_bollinger_band = stock_data['Upper_Band'].iloc[-1]\n\nprint(f\"Latest Upper Bollinger Band is: {latest_upper_bollinger_band}\")\n```\n\n----------------------------------------\n\nTITLE: Documenting UpdateAccountRequest Class in Python\nDESCRIPTION: This snippet documents the UpdateAccountRequest class from the alpaca.broker.requests module. It is used for updating existing accounts in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.UpdateAccountRequest\n```\n\n----------------------------------------\n\nTITLE: Getting Trading Account Information with Options Data\nDESCRIPTION: Retrieves account information with options-specific fields including options_buying_power, options_approved_level, and options_trading_level. These fields are essential for options trading capabilities.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# check trading account\n# There are trhee new columns in the account object:\n# - options_buying_power\n# - options_approved_level\n# - options_trading_level\nacct = trade_client.get_account()\nacct\n```\n\n----------------------------------------\n\nTITLE: Getting Assets with Filtering in Alpaca Trading API\nDESCRIPTION: This snippet demonstrates how to retrieve assets from Alpaca with optional filtering. The example filters for crypto assets using the GetAssetsRequest model with AssetClass.CRYPTO parameter.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import GetAssetsRequest\nfrom alpaca.trading.enums import AssetClass\n\ntrading_client = TradingClient('api-key', 'secret-key')\n\n# search for crypto assets\nsearch_params = GetAssetsRequest(asset_class=AssetClass.CRYPTO)\n\nassets = trading_client.get_all_assets(search_params)\n```\n\n----------------------------------------\n\nTITLE: Calculating Bull Put Spread Metrics in Python\nDESCRIPTION: This code snippet calculates and prints the width of the bull put spread, initial premium collected, initial net delta, and initial implied volatility.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nprint(f\"The width for the bull put spread (initial premium collected): {sp['initial_option_price'] - lp['initial_option_price']}; the initial net delta: {abs(sp['initial_delta']) - lp['initial_delta']}; the initial IV: \")\n```\n\n----------------------------------------\n\nTITLE: Documenting TrailingStopOrderRequest Class in Python\nDESCRIPTION: This snippet documents the TrailingStopOrderRequest class from the alpaca.broker.requests module. It is used for placing trailing stop orders in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_22\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.TrailingStopOrderRequest\n```\n\n----------------------------------------\n\nTITLE: Place Bull Call Spread Order - Python\nDESCRIPTION: Places a market order for a bull call spread by creating two option legs - selling a short call and buying a long call.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\ndef place_bull_call_spread_order(short_call, long_call):\n    \"\"\"\n    Place a bull call spread order if both short_call and long_call data are provided.\n    \"\"\"\n    if not (short_call and long_call):\n        logger.info(\"No valid bull call spread found.\")\n        return None\n\n    try:\n        # Build order legs: sell the short call and buy the long call.\n        order_legs = [\n            OptionLegRequest(\n                symbol=short_call['symbol'],\n                side=OrderSide.SELL,\n                ratio_qty=1\n            ),\n            OptionLegRequest(\n                symbol=long_call['symbol'],\n                side=OrderSide.BUY,\n                ratio_qty=1\n            )\n        ]\n\n        # Create a market order for a multi-leg (spread) order.\n        req = MarketOrderRequest(\n            qty=1,\n            order_class=OrderClass.MLEG,\n            time_in_force=TimeInForce.DAY,\n            legs=order_legs\n        )\n        res = trade_client.submit_order(req)\n        logger.info(\"A bull call spread order placed successfully.\")\n        return res\n    except Exception as e:\n        logger.error(f\"Failed to place a bull call spread order: {e}\")\n        return None\n```\n\n----------------------------------------\n\nTITLE: Retrieving Put Option Contracts with Alpaca API in Python\nDESCRIPTION: Implements a function to fetch available put option contracts based on criteria including underlying symbol, strike price range, and expiration date range using Alpaca's TradingClient.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Check for put options\ndef get_put_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration):\n\n    # Fetch the options data to add to the portfolio\n    req = GetOptionContractsRequest(underlying_symbols=[underlying_symbol],\n                                    strike_price_gte=min_strike,\n                                    strike_price_lte=max_strike,\n                                    status=\"active\",\n                                    expiration_date_gte=min_expiration,\n                                    expiration_date_lte=max_expiration,\n                                    type=\"put\",\n                                    )\n\n    # Get put option chain of the underlying symbol\n    put_options = trade_client.get_option_contracts(req).option_contracts\n    return put_options\n```\n\n----------------------------------------\n\nTITLE: Implementing Bollinger Bands Calculator in Python\nDESCRIPTION: Calculates Bollinger Bands using price data, period, and multiplier inputs. Returns upper and lower bands based on standard deviation calculations from Simple Moving Average (SMA).\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef check_bb(df, period=14, multiplier=2):\n    bollinger_bands = []\n    # Calculate the Simple Moving Average (SMA)\n    df['SMA'] = df['close'].rolling(window=period).mean()\n    # Calculate the rolling standard deviation\n    df['StdDev'] = df['close'].rolling(window=period).std()\n    # Calculate the Upper Bollinger Band (two standard deviation)\n    df['Upper Band'] = df['SMA'] + (multiplier * df['StdDev'])\n    # Calculate the Lower Bollinger Band (two standard deviation)\n    df['Lower Band'] = df['SMA'] - (multiplier * df['StdDev'])\n    # Get the most recent Upper Band value\n    upper_bollinger_band = df['Upper Band'].iloc[-1]\n    lower_bollinger_band = df['Lower Band'].iloc[-1]\n    \n    bollinger_bands = [upper_bollinger_band, lower_bollinger_band]\n    return bollinger_bands\n\nbollinger_bands = check_bb(priceData, 14, 2)\n\n# The current market price is not too close to the two-standard deviation level yet but is relatively closer to the higher Bollinger Band.\nprint(f\"Latest Upper Bollinger Band is: {bollinger_bands[0]}. Latest Lower Bollinger Band is {bollinger_bands[1]}; while underlying stock '{underlying_symbol}' price is {underlying_price}.\")\n```\n\n----------------------------------------\n\nTITLE: Checking Buying Power for Options Strategies in Python\nDESCRIPTION: Function that calculates the total premium required for an options strategy (specifically a long straddle) and validates it against a specified buying power limit. It raises an exception if the required capital exceeds the available limit.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef check_buying_power(put_option, call_option, buying_power_limit):\n    \"\"\"\n    Calculates the total premium paid (risk) for the long straddle and checks it against the buying power limit.\n    If the buying power requirement is not met, the exception is thrown and the rest of the code is never executed.\n    \"\"\"\n    option_size = float(put_option['size'])\n    risk = (put_option['initial_option_price'] + call_option['initial_option_price']) * option_size\n    print(f\"Calculated long straddle risk: {risk}.\")\n    \n    if risk >= buying_power_limit:\n        raise Exception('Buying power limit exceeded for the long straddle risk.')\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options-Enabled Assets\nDESCRIPTION: Queries for assets with options trading enabled. Uses the new 'options_enabled' attribute filter to identify which underlying assets support options contracts.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# get list of assets which are options enabled\n# - we can filter assets by `options_enabled` attribute\n# - asset object has `options_enabled` attribute if it is options enabled\nreq = GetAssetsRequest(\n  attributes = \"options_enabled\"\n)\nassets = trade_client.get_all_assets(req)\nassets[:2]\n```\n\n----------------------------------------\n\nTITLE: Validating Option Open Interest\nDESCRIPTION: This function checks whether an option contract has the required open interest data and meets a minimum threshold. It returns a boolean indicating if the option has sufficient open interest for trading consideration.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef validate_sufficient_OI(option_data, OI_THRESHOLD):\n    '''Ensure that the option has the required fields and sufficient open interest.'''\n    if option_data.open_interest is None or option_data.open_interest_date is None:\n        return False\n    if float(option_data.open_interest) <= OI_THRESHOLD:\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Configuring Bull Call Spread Strategy Parameters and Account Settings\nDESCRIPTION: Sets up the parameters for the Bull Call Spread strategy, including underlying stock selection, strike price range, expiration dates, and risk management settings. Also retrieves account information and calculates buying power limits for position sizing.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Select the underlying stock\nunderlying_symbol = 'WMT'\n\n# Set the timezone\ntimezone = ZoneInfo('America/New_York')\n\n# Get current date in US/Eastern timezone\ntoday = datetime.now(timezone).date()\n\n# Define a 6% range around the underlying price \nSTRIKE_RANGE = 0.06\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.05\n\n# Risk free rate for the options greeks and IV calculations\nrisk_free_rate = 0.01\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 50\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Set the expiration date range for the options\nmin_expiration = today + timedelta(days=21)\nmax_expiration = today + timedelta(days=60)\n\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nunderlying_price = get_underlying_price(underlying_symbol)\n\n# Set the minimum and maximum strike prices based on the underlying price\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n\n# Define the criteria for selecting the options\n# Each key corresponds to a leg and maps to a tuple of: (expiration range, IV range, delta range, vega range)\ncriteria = {\n    'short_call':  ((21, 60), (0.20, 0.50), (0.20, 0.65), (0.01, 0.12)),\n    'long_call': ((21, 60), (0.20, 0.50), (0.20, 0.65), (0.01, 0.12))\n}\n\n# Set target profit levels\nTARGET_PROFIT_PERCENTAGE = 0.4\nDELTA_STOP_LOSS = 0.80\nVEGA_STOP_LOSS = 0.40\n\n# Display the values\nprint(f\"Underlying Symbol: {underlying_symbol}\")\nprint(f\"{underlying_symbol} price: {underlying_price}\")\nprint(f\"Strike Range: {STRIKE_RANGE}\")\nprint(f\"Buying Power Limit Percentage: {BUY_POWER_LIMIT}\")\nprint(f\"Risk Free Rate: {risk_free_rate}\")\nprint(f\"Account Buying Power: {buying_power}\")\nprint(f\"Buying Power Limit: {buying_power_limit}\")\nprint(f\"Open Interest Threshold: {OI_THRESHOLD}\")\nprint(f\"Minimum Expiration Date: {min_expiration}\")\nprint(f\"Maximum Expiration Date: {max_expiration}\")\nprint(f\"Minimum Strike Price: {min_strike}\")\nprint(f\"Maximum Strike Price: {max_strike}\")\n```\n\n----------------------------------------\n\nTITLE: Canceling All Open Orders\nDESCRIPTION: Cancels all open orders across all symbols. This is useful for quickly clearing pending orders if market conditions change.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# cancel all open orders\ntrade_client.cancel_orders()\n```\n\n----------------------------------------\n\nTITLE: Execute Bull Call Spread Roll/Rinse - Python\nDESCRIPTION: Executes the roll/rinse operation on an existing bull call spread position with specified parameters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\nmessage, new_spread = roll_rinse_bull_call_spread(sc, lc, True, TARGET_PROFIT_PERCENTAGE, DELTA_STOP_LOSS, VEGA_STOP_LOSS, ContractType.CALL, criteria, risk_free_rate, min_strike, max_strike, min_expiration, max_expiration, OI_THRESHOLD)\n```\n\n----------------------------------------\n\nTITLE: Updating Alpaca-py via pip\nDESCRIPTION: Command to upgrade an existing Alpaca-py installation to the latest version.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/README.md#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install alpaca-py --upgrade\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contracts with Alpaca API in Python\nDESCRIPTION: This function retrieves option contracts from the Alpaca API based on specified criteria such as underlying symbol, strike price range, expiration date range, and option type.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, option_type):\n    req = GetOptionContractsRequest(\n        underlying_symbols=[underlying_symbol],\n        status=AssetStatus.ACTIVE,\n        type=option_type,\n        strike_price_gte=min_strike,\n        strike_price_lte=max_strike,\n        expiration_date_gte=min_expiration,\n        expiration_date_lte=max_expiration,        \n    )\n    return trade_client.get_option_contracts(req).option_contracts\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Trade Updates with TradingStream in Alpaca-py\nDESCRIPTION: Sets up a TradingStream client to subscribe to real-time trade updates. Creates an async handler function that prints received trade data and runs the stream client to start receiving updates.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_29\n\nLANGUAGE: python\nCODE:\n```\n# subscribe trade updates\ntrade_stream_client = TradingStream(api_key, secret_key, paper=paper, url_override = trade_api_wss)\n\nasync def trade_updates_handler(data):\n    print(data)\n\ntrade_stream_client.subscribe_trade_updates(trade_updates_handler)\ntrade_stream_client.run()\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateBankTransferRequest Class in Python\nDESCRIPTION: This snippet documents the CreateBankTransferRequest class from the alpaca.broker.requests module. It is used for initiating bank transfers in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.CreateBankTransferRequest\n```\n\n----------------------------------------\n\nTITLE: Finding Options for Long Straddle Strategy in Python\nDESCRIPTION: Function orchestrating the workflow to build a long straddle options strategy. It coordinates the selection of put and call options with common expiration and strike prices that meet specified criteria and buying power constraints.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef find_options_for_long_straddle(call_options, put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD):\n    \"\"\"\n    Orchestrates the workflow to build a long straddle with a common expiration and common strike after checking the filtering criteria.\n    \n    Returns a list of legs in the order: [long_put, long_call]\n    \"\"\"\n    # Group candidates by expiration and select the best common expiration\n```\n\n----------------------------------------\n\nTITLE: Checking Option Criteria Conditions\nDESCRIPTION: This function evaluates whether a candidate option meets the specific criteria for options trading. It checks if the option's expiration, implied volatility, delta, and theta values fall within specified ranges, logging detailed information for failed conditions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef check_candidate_option_conditions(candidate: Dict[str, Any], criteria: Tuple, label: str) -> bool:\n    \"\"\"\n    Check whether a candidate option meets the filtering criteria.\n    The criteria is a tuple of (expiration_range, iv_range, delta_range, theta_range).\n    Logs detailed information if a candidate fails a criterion.\n    \"\"\"\n    expiration_range, iv_range, delta_range, theta_range = criteria\n\n    if not (expiration_range[0] <= candidate['remaining_days'] <= expiration_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails expiration condition for {label}: remaining_days {candidate['remaining_days']} not in {expiration_range}.\")\n        return False\n    if not (iv_range[0] <= candidate['initial_IV'] <= iv_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails IV condition for {label}: initial_IV {candidate['initial_IV']} not in {iv_range}.\")\n        return False\n    if not (delta_range[0] <= candidate['initial_delta'] <= delta_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails delta condition for {label}: initial_delta {candidate['initial_delta']} not in {delta_range}.\")\n        return False\n    if not (theta_range[0] <= candidate['initial_theta'] <= theta_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails theta condition for {label}: initial_theta {candidate['initial_theta']} not in {theta_range}.\")\n        return False\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Orders for a Symbol\nDESCRIPTION: Fetches all orders (open and closed) for the specified cryptocurrency symbol. This provides a comprehensive view of order history for a particular asset.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# get a list of orders including closed (e.g. filled) orders by specifying symbol\nreq = GetOrdersRequest(\n    status = QueryOrderStatus.ALL,\n    symbols = [symbol]\n)\norders = trade_client.get_orders(req)\norders\n```\n\n----------------------------------------\n\nTITLE: Retrieving Put Options for Cash-Secured Puts Strategy\nDESCRIPTION: Implements a function to fetch put options for the underlying stock based on specified criteria such as strike price range, expiration dates, and contract type. This is the first step in the Options Wheel Strategy - selling cash-secured puts.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Check for put options\ndef get_put_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration):\n\n    # Fetch the options data to add to the portfolio\n    req = GetOptionContractsRequest(underlying_symbols=[underlying_symbol],\n                                    strike_price_gte=min_strike,\n                                    strike_price_lte=max_strike,\n                                    status=AssetStatus.ACTIVE,\n                                    expiration_date_gte=min_expiration,\n                                    expiration_date_lte=max_expiration,\n                                    root_symbol=underlying_symbol,\n                                    type=ContractType.PUT,\n                                    )\n\n    # Get put option chain of the underlying symbol\n    put_options = trade_client.get_option_contracts(req).option_contracts\n    return put_options\n```\n\n----------------------------------------\n\nTITLE: Retrieving Available Cryptocurrency Assets\nDESCRIPTION: Fetches a list of all active cryptocurrency assets available for trading on Alpaca. This information includes symbols, IDs, and other asset details.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# get list of crypto pairs\n# ref. https://docs.alpaca.markets/reference/get-v2-assets-1\nreq = GetAssetsRequest(\n  asset_class=AssetClass.CRYPTO,\n  status=AssetStatus.ACTIVE\n)\nassets = trade_client.get_all_assets(req)\nassets[:2]\n```\n\n----------------------------------------\n\nTITLE: Concurrent Processing of Multiple Stocks for Put Option Analysis in Python\nDESCRIPTION: Implementation of concurrent stock processing to analyze multiple symbols simultaneously using Python's ThreadPoolExecutor. This approach efficiently identifies potential short put options across multiple stocks by parallelizing the option analysis process.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nimport concurrent.futures\n\nstock_symbols = ['XOM', 'PAA', 'HAL']\n\n# You can run the `find_short_put_option` function just to find the short put option.\ndef process_stock(symbol):\n    # Get the latest price of the underlying stock\n    underlying_price = get_underlying_price(symbol)\n    min_strike = str(underlying_price * (1 - STRIKE_RANGE))\n    max_strike = str(underlying_price)\n    put_options = get_put_options(symbol, min_strike, max_strike, min_expiration, max_expiration)\n    return find_short_put_option(put_options, buying_power_limit)\n\nwith concurrent.futures.ThreadPoolExecutor() as executor:\n    results = list(executor.map(process_stock, stock_symbols))\n\nprint(results)\n```\n\n----------------------------------------\n\nTITLE: Documenting GetAccountActivitiesRequest Class in Python\nDESCRIPTION: This snippet documents the GetAccountActivitiesRequest class from the alpaca.broker.requests module. It is used for requesting account activities from the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.GetAccountActivitiesRequest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Alpaca API for Options Trading in Python\nDESCRIPTION: Initializes the Alpaca API clients for trading, stock data, and options data. Configures parameters for the Cash-Secured Put strategy including buying power limits, strike price range, and option expiration criteria.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `alpaca-py` and import it\n!python3 -m pip install --upgrade alpaca-py\n\nimport alpaca\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import GetOptionContractsRequest, MarketOrderRequest\nfrom alpaca.data.requests import OptionLatestQuoteRequest, OptionSnapshotRequest\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\n\n# API credentials for Alpaca\n# API_KEY = \"YOUR_ALPACA_API_KEY_FOR_PAPER_TRADING\"\n# API_SECRET = 'YOUR_ALPACA_API_SECRET_KEY_FOR_PAPER_TRADING'\n# Add your key to Colab Secrets. Add your API key to the Colab Secrets manager to securely store it\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\n## We use paper environment for this example\nPAPER = True # Please do not modify this. This example is for paper trading only.\n\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\n\n# Set expiration range for options\ntoday = datetime.now().date()\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 100\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.10\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Define a 10% range around the underlying price\nSTRIKE_RANGE = 0.1\n```\n\n----------------------------------------\n\nTITLE: Retrieving Position by Symbol\nDESCRIPTION: Fetches position details for a specific cryptocurrency symbol. This allows for monitoring the current status of a particular asset investment.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# get positions by symbol\n# ref. https://docs.alpaca.markets/reference/getopenposition-1\nposition = trade_client.get_open_position(symbol_or_asset_id=symbol)\nposition\n\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Journal by ID via BrokerClient\nDESCRIPTION: Method reference for fetching a specific journal entry by its ID using the Alpaca broker client.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/journals.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.get_journal_by_id\n```\n\n----------------------------------------\n\nTITLE: Starting the Main Event Loop\nDESCRIPTION: Initializes and runs the asyncio event loop to execute all the strategy components concurrently: the trade update stream, initial trades execution, and the continuous gamma scalping rebalancing operation.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# Main event loop\nloop = asyncio.get_event_loop()\nloop.run_until_complete(asyncio.gather(\n    trade_update_stream._run_forever(),\n    initial_trades(),\n    gamma_scalp()\n))\n```\n\n----------------------------------------\n\nTITLE: Creating Iron Condor Order Request in Python\nDESCRIPTION: Creates a limit order request for an iron condor options strategy with specified quantity and time in force parameters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\nreq = LimitOrderRequest(\n    qty=50,\n    order_class=OrderClass.MLEG,\n    time_in_force=TimeInForce.DAY,\n    legs=order_legs_m,\n    limit_price=0  # i.e., for a net price of 0\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateACHTransferRequest Class in Python\nDESCRIPTION: This snippet documents the CreateACHTransferRequest class from the alpaca.broker.requests module. It is used for initiating ACH transfers in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_14\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.CreateACHTransferRequest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options Positions\nDESCRIPTION: Gets all positions and filters for a specific option contract. This only works during market hours when positions are active, as noted in the comments.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# below cells should be done after market open otherwise there is no position for the option contract\n\n# get positions filtered by option contract symbol\n# if you do this example outside of market hours, you will see empty list\n# because we have no position in this option contract\n# please wait market open and run this example again\npositions = trade_client.get_all_positions()\n[pos for pos in positions if pos.symbol == high_open_interest_contract.symbol]\n```\n\n----------------------------------------\n\nTITLE: Querying Multi-leg Order Status in Python\nDESCRIPTION: Demonstrates how to query order status at both the multi-leg order level and individual leg level using order IDs.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# Query by the order's id\nq1 = trade_client.get_order_by_client_id(res.client_order_id)\n\n# Query just the first leg's id\nq2 = trade_client.get_order_by_client_id(res.legs[0].client_order_id)\n\nprint(f\"Query by whole order id: {q1}\\n===\\nQuery by leg id: {q2}\")\n```\n\n----------------------------------------\n\nTITLE: Creating a Straddle Strategy with Call and Put Options\nDESCRIPTION: Finds appropriate call and put option contracts for TSLA with strike prices near the target price and expiration dates close to the calculated earnings date. This forms the basis of a straddle options strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Let us find a call and put option for TSLA with the closest expiration date to the earnings date\n# and a strike price closest to some price\norder_legs = []\noptimal_price = 413.82  # this could be our entry price, for example, that we wish to hedge against (if we expect volatility)\n\nfor c_type in [ContractType.CALL, ContractType.PUT]:\n    req = GetOptionContractsRequest(\n        underlying_symbols=[\"TSLA\"],\n        status=AssetStatus.ACTIVE,\n        expiration_date_gte=earnings_date,\n        expiration_date_lte=earnings_date + timedelta(weeks=4),\n        style=ExerciseStyle.AMERICAN,\n        strike_price_gte=str(optimal_price - 20),\n        strike_price_lte=str(optimal_price + 20),\n        limit=10,\n        type=c_type,  # We could do this in one request, without setting type, if we set up the\n        # gte, lte, and limit strategically (but the current approach is a bit more generalizable).\n        # See the next example for how to do this.\n        page_token=None,\n    )\n    cts = trade_client.get_option_contracts(req)\n\n    c = find_nearest_strike_contract(cts.option_contracts, optimal_price)\n    order_legs.append(OptionLegRequest(\n        symbol=c.symbol,\n        side=OrderSide.BUY,\n        ratio_qty=1\n    ))\n\n# We should see that the symbols are similar, like \"TSLA______C________\" and \"TSLA______P________\",\n# with all values marked as \"_\" being the same in both symbols.\n# Such is because we expect only the contract type (call or put, C or P) to be different.\norder_legs\n```\n\n----------------------------------------\n\nTITLE: Calculating Short Iron Butterfly Spread Width\nDESCRIPTION: Calculates and displays the width (initial premium collected) and initial net delta of the short iron butterfly spread using the selected option legs.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Check spread width\nlp = short_iron_butterfly_order_legs[0]\nsp = short_iron_butterfly_order_legs[1]\nsc = short_iron_butterfly_order_legs[2]\nlc = short_iron_butterfly_order_legs[3]\n\nprint(f\"The width for the short iron butterfly (initial premium collected): {sp['initial_option_price'] + sc['initial_option_price'] - lp['initial_option_price'] - lc['initial_option_price']}; the initial net delta: {lc['initial_delta'] + abs(sp['initial_delta']) - abs(sc['initial_delta']) - abs(lp['initial_delta'])}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Nearest Strike Contract in Python\nDESCRIPTION: A utility function that finds the option contract with a strike price closest to the target price. This is useful for finding at-the-money options when constructing option strategies.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# This is a function that will return a contract which minimizes the difference from a target price\ndef find_nearest_strike_contract(contracts, target_price):\n    min_diff = float('inf')\n    min_contract = None\n\n    if not contracts: # Handle empty list case\n        return None\n    \n    for contract in contracts:\n        strike = float(contract['strike_price'])\n        diff = abs(strike - target_price)\n\n        # Check if this contract is closer than the current minimum\n        # No need for 'min_contract is None' check if min_diff starts at infinity\n        if diff < min_diff:\n            min_diff = diff\n            min_contract = contract\n\n    return min_contract\n```\n\n----------------------------------------\n\nTITLE: Documenting GetTransfersRequest Class in Python\nDESCRIPTION: This snippet documents the GetTransfersRequest class from the alpaca.broker.requests module. It is used for requesting transfer information from the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_16\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.GetTransfersRequest\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Volatility Index (RVI) in Python\nDESCRIPTION: Implements the Relative Volatility Index (RVI) calculation with smoothing. Takes price data and period as inputs, calculates daily changes, separates up/down movements, and applies standard deviation calculations to determine volatility direction.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_rvi(df, period):\n    # Calculate daily price changes \n    df['price_change'] = df['close'].diff()\n\n    # Separate up and down price changes\n    df['up_change'] = df['price_change'].where(df['price_change'] > 0, 0)\n    df['down_change'] = -df['price_change'].where(df['price_change'] < 0, 0)\n\n    # Calculate std of up and down changes over the rolling period\n    df['avg_up_std'] = df['up_change'].rolling(window=period).std()\n    df['avg_down_std'] = df['down_change'].rolling(window=period).std()\n\n    # Calculate RVI\n    df['rvi'] = 100 - (100 / (1 + (df['avg_up_std'] / df['avg_down_std'])))\n\n    # Smooth the RVI with a 4 periods moving average\n    df['rvi_smoothed'] = df['rvi'].rolling(window=4).mean()\n\n    return df['rvi_smoothed']\n\n# smoothed RVI\ncalculate_rvi(priceData, period=21).iloc[30:]\n```\n\n----------------------------------------\n\nTITLE: Setting Up Trade Update Stream\nDESCRIPTION: Initializes a streaming client to receive real-time trade updates. This enables monitoring of order executions and trade events as they occur.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n# subscribe trade updates\ntrade_stream_client = TradingStream(api_key, secret_key, paper=paper, url_override = trade_api_wss)\n\nasync def trade_updates_handler(data):\n    print(data)\n\ntrade_stream_client.subscribe_trade_updates(trade_updates_handler)\ntrade_stream_client.run()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Put and Call Options in Python with Alpaca API\nDESCRIPTION: Code snippet that fetches put and call options for a specified underlying symbol within strike price and expiration date ranges using the Alpaca API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nput_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, ContractType.PUT)\ncall_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, ContractType.CALL)\n```\n\n----------------------------------------\n\nTITLE: Getting Options Data for Iron Condor\nDESCRIPTION: Retrieves call and put options data within specified strike and expiration ranges to construct an iron condor strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ncall_options = get_call_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration)\nput_options = get_put_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration)\niron_condor_order_legs = find_options_for_short_iron_condor(call_options, put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD)\n```\n\n----------------------------------------\n\nTITLE: Checking Buying Power for Bear Put Spread in Python\nDESCRIPTION: This function calculates the total premium paid (risk) for a bear put spread and checks it against the buying power limit. It raises an exception if the buying power requirement is not met.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef check_buying_power(short_put: Dict[str, Any], long_put: Dict[str, Any], buying_power_limit: float) -> None:\n    \"\"\"\n    Calculates the total premium paid (risk) for a bear put spread and checks it against the buying power limit.\n    If the buying power requirement is not met, the exception is thrown and the rest of the code is never executed.\n    \"\"\"\n    option_size = float(short_put['size'])\n    risk = (long_put['initial_option_price'] - short_put['initial_option_price']) * option_size\n    logger.info(f\"Calculated bear put spread risk: {risk}.\")\n    \n    if risk >= buying_power_limit:\n        raise Exception('Buying power limit exceeded for a bear put spread risk.')\n```\n\n----------------------------------------\n\nTITLE: Setting API Credentials for Alpaca\nDESCRIPTION: Initializes API key and secret variables for Alpaca, defaulting to paper trading environment. This setup is required for all Alpaca API interactions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Please change the following to your own PAPER api key and secret\n# or set them as environment variables (ALPACA_API_KEY, ALPACA_SECRET_KEY).\n# You can get them from https://alpaca.markets/\n\napi_key = None\nsecret_key = None\n\n#### We use paper environment for this example ####\npaper = True # Please do not modify this. This example is for paper trading only.\n####\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\nstream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Setting API Credentials for Alpaca Paper Trading\nDESCRIPTION: Configures the API key and secret for connecting to Alpaca's paper trading environment. Allows keys to be specified directly or loaded from environment variables.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Please change the following to your own PAPER api key and secret\n# or set them as environment variables (ALPACA_API_KEY, ALPACA_SECRET_KEY).\n# You can get them from https://alpaca.markets/\n\napi_key = None\nsecret_key = None\n\n#### We use paper environment for this example ####\npaper = True  # Please do not modify this. This example is for paper trading only.\n####\n\n# Below are the variables for development this documents\n# Please do not change these variables\n\ntrade_api_url = None\n```\n\n----------------------------------------\n\nTITLE: Validating Open Interest for Option Contracts in Python\nDESCRIPTION: Function to validate if an option contract has sufficient open interest. Checks if the open_interest and open_interest_date fields exist and ensures the open interest meets or exceeds the specified threshold.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef validate_sufficient_OI(option_data, OI_THRESHOLD):\n    '''Ensure that the option has the required fields and sufficient open interest.'''\n    if option_data.open_interest is None or option_data.open_interest_date is None:\n        return False\n    if float(option_data.open_interest) <= OI_THRESHOLD:\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Documenting CreatePlaidRelationshipRequest Class in Python\nDESCRIPTION: This snippet documents the CreatePlaidRelationshipRequest class from the alpaca.broker.requests module. It is used for creating Plaid relationships in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_12\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.CreatePlaidRelationshipRequest\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Volatility Index (RVI) in Python\nDESCRIPTION: This function calculates the Relative Volatility Index (RVI) for a given dataframe of price data. It computes daily price changes, separates up and down movements, calculates standard deviations, and then smooths the RVI with a 4-period moving average.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_rvi(df, period=14):\n    # Calculate daily price changes \n    df[\"price_change\"] = df[\"close\"].diff()\n\n    # Separate up and down price changes\n    df['up_change'] = df['price_change'].where(df['price_change'] > 0, 0)\n    df['down_change'] = -df['price_change'].where(df['price_change'] < 0, 0)\n\n    # Calculate std of up and down changes over the rolling period\n    df['avg_up_std'] = df['up_change'].rolling(window=period).std()\n    df['avg_down_std'] = df['down_change'].rolling(window=period).std()\n\n    # Calculate RVI\n    df['rvi'] = 100 - (100 / (1 + (df['avg_up_std'] / df['avg_down_std'])))\n\n    # Smooth the RVI with a 4 periods moving average\n    df['rvi_smoothed'] = df['rvi'].rolling(window=4).mean()\n\n    return df['rvi_smoothed']\n\n# smoothed RVI\ncalculate_rvi(priceData, period=21).iloc[30:]\n```\n\n----------------------------------------\n\nTITLE: Retrieving Open Orders\nDESCRIPTION: Gets a list of all open (unfilled) orders for the specified symbol (SPY). This is useful for monitoring pending orders that have not executed yet.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n# see all open orders\nreq = GetOrdersRequest(\n    status = QueryOrderStatus.OPEN,\n    symbols = [symbol]\n)\nopen_orders = trade_client.get_orders(req)\nopen_orders\n```\n\n----------------------------------------\n\nTITLE: Pairing Put Options for Bear Put Spread in Python\nDESCRIPTION: This function pairs short and long put options for a bear put spread strategy. It ensures the short put strike is below or equal to the underlying price, and the long put strike is above the underlying price.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef pair_put_candidates(short_puts: List[Dict[str, Any]], long_puts: List[Dict[str, Any]], underlying_price: float) -> Tuple[Optional[Dict[str, Any]], Optional[Dict[str, Any]]]:\n    \"\"\"\n    For the bear put spread, require: short_put strike <= underlying_price < long_put strike.\n    Returns the first valid pair found.\n    \"\"\"\n    for sp in short_puts:\n        for lp in long_puts:\n            if sp['expiration_date'] == lp['expiration_date'] and sp['strike_price'] <= underlying_price < lp['strike_price']:\n                logger.info(f\"Selected Bear Put spread: short_put {sp['symbol']} and long_put {lp['symbol']} with expiration {sp['expiration_date']}.\")\n                return sp, lp\n    \n    \n    # If no valid pair is found, log the expiration date (if available) from the candidate lists.\n    expiration_info = None\n    if short_puts:\n        expiration_info = short_puts[0]['expiration_date']\n    elif long_puts:\n        expiration_info = long_puts[0]['expiration_date']\n\n    if expiration_info:\n        logger.info(f\"No valid bear put spread pair found for expiration {expiration_info} with the given candidates and underlying price conditions.\")\n    else:\n        logger.info(\"No valid bear put spread pair found: no candidate data available.\")\n    \n    return None, None\n```\n\n----------------------------------------\n\nTITLE: Finding Options Legs for Short Iron Butterfly\nDESCRIPTION: Retrieves the option legs required for a short iron butterfly spread based on specified criteria and parameters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nshort_iron_butterfly_order_legs = find_options_for_short_iron_butterfly(put_options, call_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD)\n```\n\n----------------------------------------\n\nTITLE: Adding Selected Options to Position Tracking\nDESCRIPTION: Adds the first three option contracts from the filtered list to the positions dictionary, setting their initial positions to 1 contract each. This establishes the option positions that will be managed in the gamma scalping strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Add the first 3 otions to the position list\nfor option in option_chain_list[:3]:\n    symbol = option.symbol\n    print(f\"Adding {symbol} to position list\")\n    positions[symbol] = {\n        'asset_class': 'us_option',\n        'underlying_symbol': option.underlying_symbol,\n        'expiration_date': pd.Timestamp(option.expiration_date),\n        'strike_price': float(option.strike_price),\n        'type': option.type,\n        'size': float(option.size),\n        'position': 0.0,\n        'initial_position': 1.0\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Put Options in Python\nDESCRIPTION: This snippet retrieves put options for a given underlying symbol within specified strike and expiration ranges using the Alpaca API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\nput_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, ContractType.PUT)\n```\n\n----------------------------------------\n\nTITLE: Installing Alpaca-py Package\nDESCRIPTION: Checks if alpaca-py is installed, and installs it if not available. This ensures the required package is present before proceeding with trading operations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# install alpaca-py if it is not available\ntry:\n    import alpaca\nexcept ImportError:\n    !python3 -m pip install alpaca-py\n    import alpaca\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Multi-Symbol Stock Quote Data in Python\nDESCRIPTION: Shows how to request the latest quote data for multiple stock symbols using the StockHistoricalDataClient. It demonstrates how to access data for a specific symbol from the multi-symbol response.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/market_data.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data.historical import StockHistoricalDataClient\nfrom alpaca.data.requests import StockLatestQuoteRequest\n\n# keys required for stock historical data client\nclient = StockHistoricalDataClient('api-key', 'secret-key')\n\n# multi symbol request - single symbol is similar\nmultisymbol_request_params = StockLatestQuoteRequest(symbol_or_symbols=[\"SPY\", \"GLD\", \"TLT\"])\n\nlatest_multisymbol_quotes = client.get_stock_latest_quote(multisymbol_request_params)\n\ngld_latest_ask_price = latest_multisymbol_quotes[\"GLD\"].ask_price\n```\n\n----------------------------------------\n\nTITLE: Checking Option Filtering Criteria in Python\nDESCRIPTION: Function that evaluates whether a candidate option meets specified filtering criteria. It checks if the option's remaining days, implied volatility, delta, and theta fall within the specified ranges and provides detailed feedback on which conditions fail.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef check_candidate_option_conditions(candidate, criteria, label):\n    '''\n    Check whether a candidate option meets the filtering criteria.\n    The criteria is a tuple of (expiration_range, iv_range, delta_range, theta_range).\n    '''\n    expiration_range, iv_range, delta_range, theta_range = criteria\n\n    if not (expiration_range[0] <= candidate['remaining_days'] <= expiration_range[1]):\n        print(f\"{candidate['symbol']} fails expiration condition for {label}.\")\n        return False\n    if not (iv_range[0] <= candidate['initial_IV'] <= iv_range[1]):\n        print(f\"{candidate['symbol']} fails IV condition for {label}.\")\n        return False\n    if not (delta_range[0] <= candidate['initial_delta'] <= delta_range[1]):\n        print(f\"{candidate['symbol']} fails delta condition for {label}.\")\n        return False\n    if not (theta_range[0] <= candidate['initial_theta'] <= theta_range[1]):\n        print(f\"{candidate['symbol']} fails theta condition for {label}.\")\n        return False\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Documenting UpdatableDisclosures Class in Python\nDESCRIPTION: This snippet documents the UpdatableDisclosures class from the alpaca.broker.requests module. It is likely used as part of the account update process to modify disclosure information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.UpdatableDisclosures\n```\n\n----------------------------------------\n\nTITLE: Calculating Option Metrics\nDESCRIPTION: This function calculates key option metrics including option price, expiration date, time to expiration, implied volatility (IV), and Greeks (delta, gamma, theta, vega). It uses the Alpaca API to get the latest option snapshot data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_option_metrics(option_data, underlying_price, risk_free_rate):\n    \"\"\"\n    Calculate key option metrics including option price, implied volatility (IV), and option Greeks.\n    \"\"\"\n    \n    # Calculate expiration and remaining days\n    option_symbol = option_data['symbol']\n    expiration_date = pd.Timestamp(option_data['expiration_date'])\n    remaining_days = (expiration_date - pd.Timestamp.now()).days\n    \n    # Retrieve the latest quote for the option\n    req = OptionSnapshotRequest(\n        symbol_or_symbols = option_symbol,\n        )\n    snapshot = option_historical_data_client.get_option_snapshot(req)[option_symbol]\n    # Check if snapshot or its required attributes are None; if so, skip further processing\n    if snapshot is None or snapshot.latest_quote is None or snapshot.greeks is None:\n        return None\n    \n    option_price = (snapshot.latest_quote.bid_price + snapshot.latest_quote.ask_price) / 2\n\n    ## implied volatility\n    iv = snapshot.implied_volatility\n    ## Greeks\n    delta = snapshot.greeks.delta\n    gamma = snapshot.greeks.gamma\n    theta = snapshot.greeks.theta\n    vega = snapshot.greeks.vega\n    \n    return {\n        'option_price': option_price,\n        'expiration_date': expiration_date,\n        'remaining_days': remaining_days,\n        'iv': iv,\n        'delta': delta,\n        'gamma': gamma,\n        'theta': theta,\n        'vega': vega\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Positions for an Account with Alpaca Broker API in Python\nDESCRIPTION: This snippet shows how to retrieve all open positions for a specific account using the Alpaca Broker API. It returns a list of Position objects.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker import BrokerClient\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\n# account to get positions for\naccount_id = \"c8f1ef5d-edc0-4f23-9ee4-378f19cb92a4\"\n\npositions = broker_client.get_all_positions_for_account(account_id=account_id)\n```\n\n----------------------------------------\n\nTITLE: Documenting MarketOrderRequest Class in Python\nDESCRIPTION: This snippet documents the MarketOrderRequest class from the alpaca.broker.requests module. It is used for placing market orders in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_18\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.MarketOrderRequest\n```\n\n----------------------------------------\n\nTITLE: Executing Bull Put Spread Management in Python\nDESCRIPTION: This snippet calls the roll_rinse_bull_put_spread function to manage an existing bull put spread position, potentially rolling it into a new position based on specified criteria.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nmessage, new_spread = roll_rinse_bull_put_spread(sp, lp, True, TARGET_PROFIT_PERCENTAGE, DELTA_STOP_LOSS, IV_STOP_LOSS, ContractType.CALL, criteria, risk_free_rate, min_strike, max_strike, min_expiration, max_expiration, buying_power_limit, OI_THRESHOLD)\n```\n\n----------------------------------------\n\nTITLE: Validating Share Position for Covered Calls\nDESCRIPTION: Function to verify if sufficient shares are available for executing covered call strategy. Checks position quantity against required amount (typically 100 shares).\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef has_sufficient_shares(symbol, required_qty=100):\n    positions = trade_client.get_all_positions()\n\n    for position in positions:\n        if position.symbol == symbol and position.asset_class == 'us_equity':\n            if int(position.qty_available) >= required_qty:\n                print(f\"Sufficient shares available for {symbol}.\")\n                return True\n            else:\n                print(f\"Insufficient shares for {symbol}. Required: {required_qty}, Available: {position.qty_available}\")\n                return False\n\n    print(f\"No position found for the stock: {symbol}\")\n    return False\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Visualizing Historical Stock Data\nDESCRIPTION: Fetches historical stock data for the underlying asset and creates a candlestick chart for technical analysis. Uses Alpaca's historical data API to get stock bars and Plotly for visualization.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get the historical data for the underlying stock by symbol and timeframe\n# ref. https://alpaca.markets/sdks/python/api_reference/data/option/historical.html\ndef get_stock_data(underlying_symbol, days=90):\n    today = datetime.now(timezone).date()\n    req = StockBarsRequest(\n        symbol_or_symbols=[underlying_symbol],\n        timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),     # specify timeframe\n        start=today - timedelta(days=days),                          # specify start datetime, default=the beginning of the current day.\n    )\n    return stock_data_client.get_stock_bars(req).df\n\n# List of stock agg objects while dropping the symbol column\npriceData = get_stock_data(underlying_symbol, days=180).reset_index(level='symbol', drop=True)\n\nimport plotly.graph_objects as go\n\n# Bar chart for the stock price\nfig = go.Figure(data=[go.Candlestick(x=priceData.index,\n                open=priceData['open'],\n                high=priceData['high'],\n                low=priceData['low'],\n                close=priceData['close'])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Calculating Option Delta and Managing Positions in Python for Alpaca\nDESCRIPTION: Function to evaluate current options positions and decide whether to roll (close and re-enter) or rinse (close) based on delta values and profit targets. It fetches current option prices from Alpaca's API, calculates the delta, and compares against predefined thresholds.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\ndef roll_rinse_option(option_data, rolling=True):\n\n    # Get the latest quote for the option price\n    option_symbol = option_data[\"symbol\"]\n    option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n    option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n\n    # Extract option details\n    current_option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n    strike_price = float(option_data[\"strike_price\"])\n    expiry = pd.Timestamp(option_data[\"expiration_date\"])\n\n    print(f\"option_symbol is {option_symbol}\")\n    print(f\"current option_price is {current_option_price}\")\n    print(f\"current strike price is {strike_price}\")\n\n    # Deternine if the option is a call or put\n    option_type = option_data['type'].value\n    # If the option is a put, calculate the delta for the put option\n    if option_type == 'put':\n\n        # Calculate delta for each option\n        current_delta = calculate_delta(\n            option_price=current_option_price,\n            strike_price=strike_price,\n            expiry=expiry,\n            underlying_price=underlying_price,\n            risk_free_rate=RISK_FREE_RATE,\n            option_type='put'\n        )\n\n    # If the option is a call, calculate the delta for the call option\n    else:\n        current_delta = calculate_delta(\n            option_price=current_option_price,\n            strike_price=strike_price,\n            expiry=expiry,\n            underlying_price=underlying_price,\n            risk_free_rate=RISK_FREE_RATE,\n            option_type='call'\n        )\n\n    # Set target profit levels in two ways: 1) 50% of the initial credit received, 2) 2x the initial delta of the short put\n    target_profit_price = option_data['initial_option_price'] * 0.5  # 50% of credit received\n    initial_delta = option_data['initial_delta'] * 2  # Set target delta level at 2x the initial delta of the short put\n\n    # roll or rinse the option if the absoluete value of the current delta is greater than or equal to the initial delta\n    if abs(current_delta) >= abs(initial_delta) or current_option_price <= target_profit_price:\n\n        # Roll or rinse the option\n        rinsing_message, short = roll_rinse_execution(option_data, rolling=rolling)\n\n        # you can add the `rinsing_message` from the `roll_rinse_execution` function below to check if the short put or call is not sccessfully placed\n        return f\"Current delta {current_delta} exceeds twice the initial delta {initial_delta} or the option price is less than 50% of the initial credit received. Executing roll/rinse.\", short\n\n    else:\n        return f\"Current delta {current_delta} is less than twice the initial delta {initial_delta} and the option price is greater than 50% of the initial credit received. Holding the position.\", None\n```\n\n----------------------------------------\n\nTITLE: Executing Options Position Exit Strategy in Python for Alpaca\nDESCRIPTION: Function to close an existing options position and optionally re-enter the market with a new position. The function handles both put and call options, using market orders to close positions and calling external functions to open new positions based on the option type.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef roll_rinse_execution(option_data, rolling=True):\n\n    # if rolling the option, close the short put and re-enter the market with a new cash secured put or close the long call and re-enter the market with a new long call\n    if rolling:\n        # Deternine if the option is a call or put\n        option_type = option_data['type'].value\n\n        # If the option is a put, close the short put by buying it back\n        if option_type == 'put':\n\n            # Close the short put by buying it back\n            req = MarketOrderRequest(\n                symbol=option_data['symbol'],\n                qty=1,\n                side='buy',\n                type='market',\n                time_in_force='day'\n            )\n\n            # Submit the order to close the short put\n            trade_client.submit_order(req)\n            print(f\"Closed short {option_type} option: {option_data['symbol']} bought\")\n\n            # Re-enter the market with a new cash secured put\n            rolling_message, short = execute_cash_secured_put(underlying_symbol, RISK_FREE_RATE, buying_power_limit)\n\n            if short:\n                # You can add the `rolling_message` from the `execute_cash_secured_put` function below to check if the short put or call is not sccessfully placed\n                return f\"Re-entering market with new cash secured put on {option_data['underlying_symbol']}\", short\n            else:\n                return f\"Failed to re-enter market with new cash secured put on {option_data['underlying_symbol']}\", None\n\n        # If the option is a call, close the short call by buying it back\n        else:\n            # Close the short call by buying it back\n            req = MarketOrderRequest(\n                symbol=option_data['symbol'],\n                qty=1,\n                side='buy',\n                type='market',\n                time_in_force='day'\n            )\n\n            # Submit the order to close the covered call (short call)\n            trade_client.submit_order(req)\n            print(f\"Closing short {option_type} option: {option_data['symbol']} sold\")\n\n            # Re-enter the market with a new covered call\n            rolling_message, short = execute_covered_call(underlying_symbol, RISK_FREE_RATE, buying_power_limit)\n\n            if short:\n                return f\"Re-entering market with new covered call on {option_data['underlying_symbol']}\", short\n            else:\n                return f\"Failed to re-enter market with new covered call on {option_data['underlying_symbol']}\", None\n\n    else:\n        # If the option is a put, close the short put by buying it back\n        if option_type == 'put':\n\n            # Close the short put by buying it back\n            req = MarketOrderRequest(\n                symbol=option_data['symbol'],\n                qty=1,\n                side='buy',\n                type='market',\n                time_in_force='day'\n            )\n            trade_client.submit_order(req)\n            return f\"Closed short {option_type} option: {option_data['symbol']} bought\", None\n\n         # If the option is a call, close the short call by buying it back\n        else:\n            # Close the short call by buying it back\n            req = MarketOrderRequest(\n                symbol=option_data['symbol'],\n                qty=1,\n                side='buy',\n                type='market',\n                time_in_force='day'\n            )\n\n            # Submit the order to close the covered call (short call)\n            trade_client.submit_order(req)\n            return f\"Closing short {option_type} option: {option_data['symbol']} sold\", None\n```\n\n----------------------------------------\n\nTITLE: Executing Long Call Calendar Spread and Retrieving Results in Python\nDESCRIPTION: This code snippet executes the long call calendar spread using the previously defined function and retrieves the results. It calls the function with various parameters and stores the returned message, response, and option data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# Run the `execute_long_call_calendar_spread` function to execute the long call calendar spread\nmessage, res, call_calendar_option_data = execute_long_call_calendar_spread(underlying_symbol, risk_free_rate, buying_power_limit, min_strike, max_strike, min_expiration, max_expiration, EXPIRY_RANGE, IV_RANGE, DELTA_RANGE, THETA_RANGE)\nmessage, res, call_calendar_option_data\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Trading Documentation in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the trading documentation using reStructuredText syntax. It specifies a maximum depth of 2 and includes links to various trading-related sections.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/trading.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   trading/orders\n   trading/positions\n   trading/portfolio-history\n   trading/watchlists\n```\n\n----------------------------------------\n\nTITLE: Streaming Option Data with Alpaca in Python\nDESCRIPTION: This snippet sets up an OptionDataStream client to subscribe to real-time option quotes and trades. It defines an asynchronous handler function and subscribes to data for specified symbols.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_32\n\nLANGUAGE: python\nCODE:\n```\noption_data_stream_client = OptionDataStream(api_key, secret_key, url_override = option_stream_data_wss)\n\nasync def option_data_stream_handler(data):\n    print(data)\n\nsymbols = [\n    high_open_interest_contract.symbol,\n]\n\noption_data_stream_client.subscribe_quotes(option_data_stream_handler, *symbols) \noption_data_stream_client.subscribe_trades(option_data_stream_handler, *symbols)\n\noption_data_stream_client.run()\n```\n\n----------------------------------------\n\nTITLE: Setting Expiration Date Range for Options Selection\nDESCRIPTION: Defines the acceptable expiration date range for option contracts, targeting options that expire between 14 and 60 days from the current date to ensure appropriate time decay characteristics.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Set expiration range for options\ntoday = datetime.now().date()\nmin_expiration = today + timedelta(days=14)\nmax_expiration = today + timedelta(days=60)\n```\n\n----------------------------------------\n\nTITLE: Calculating Average True Range (ATR) for Risk Assessment\nDESCRIPTION: Implements functions to calculate True Range and Average True Range (ATR) for the underlying stock over 90 days. ATR is a volatility indicator that helps gauge the price movement and potential risk in the underlying asset.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get the historical data for the underlying stock by symbol\n# ref. https://docs.alpaca.markets/reference/stockbars-1\ndef get_stock_data(underlying_symbol, stock_data_client, days=90):\n    now = datetime.now(ZoneInfo(\"America/New_York\"))\n    req = StockBarsRequest(\n        symbol_or_symbols=[underlying_symbol],\n        timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),     # specify timeframe\n        start=now - timedelta(days=days),                          # specify start datetime, default=the beginning of the current day.\n    )\n    return stock_data_client.get_stock_bars(req).df\n\n# Calculate True Range for the underlying stock in the last 90 days\ndef calculate_true_range(data):\n    data['prev_close'] = data['close'].shift(1)  # Shift the closing price by 1 day\n    data['tr'] = np.maximum(\n        data['high'] - data['low'],\n        np.maximum(\n            abs(data['high'] - data['prev_close']),\n            abs(data['low'] - data['prev_close'])\n        )\n    )\n    return data\n\n# Calculate ATR for the underlying stock on the last 90 days\ndef calculate_atr(data, period=14):\n    data['atr'] = data['tr'].rolling(window=period).mean()\n    return data\n\n\ndef get_atr_for_stock(underlying_symbol, period=14):\n    data = get_stock_data(underlying_symbol, stock_data_client, days=90)\n    data = calculate_true_range(data)\n    data = calculate_atr(data, period=period)\n    return data[['tr', 'atr']].dropna()  # Return only TR and ATR columns\n\n# Calculate 14-day Average True Ranges (ATRs) over 90 days\nresults = get_atr_for_stock(underlying_symbol=underlying_symbol, period=14)\natr_mean_90 = results[\"atr\"].mean()\nprint(f\"14-day ATR over 90 days is: {atr_mean_90}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Short Put Options Based on Delta and IV Criteria in Python\nDESCRIPTION: Function that filters put options based on delta range (-0.42 to -0.18), implied volatility (≤60), open interest threshold, and buying power limit. It retrieves option data, quotes, and Greek values before selecting a suitable option to sell.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Find the appropriate short put option to sell based on the delta, IV, and buying power limit\ndef find_short_put_option(put_options, buying_power_limit):\n\n    short_put = None\n\n    for option_data in put_options:\n        try:\n            # Ensure open_interest is valid and open_interest_date exists\n            if option_data.open_interest is None or option_data.open_interest_date is None:\n                # Skip options with missing open interest or quote data\n                continue\n\n            # Check open interest meets the threshold\n            if float(option_data.open_interest) <= OI_THRESHOLD:\n                print(f\"Skipping option {option_data.symbol} due to lack of open interest. You may change the OI_THRESHOLD\")\n                continue\n\n            # Get the latest quote for the option price\n            option_symbol = option_data.symbol\n            option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n            option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n\n            # Extract option details\n            option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n            option_size = float(option_data.size)\n            strike_price = float(option_data.strike_price)\n\n            # Fetch delta for each option\n            # get option chain by underlying_symbol including IV, Greeks, and other information\n            req = OptionSnapshotRequest(\n                symbol_or_symbols = option_symbol\n                )\n            snapshot = option_historical_data_client.get_option_snapshot(req)\n            delta = snapshot[option_symbol].greeks.delta\n            iv = snapshot[option_symbol].implied_volatility\n            print(f\"delta is {delta} and IV is {iv}\")\n\n            # Check if delta is between -0.42 and -0.18, if IV is less than or equal to 60, and if the total contract exceeds the buying power limit\n            if delta is not None and delta >= -0.42 and delta <= -0.18 and iv <= 60 and strike_price * option_size < buying_power_limit:\n\n                # Create the appropriate short put option in the dictionary format\n                short_put = {\n                    'close_price': option_data.close_price,\n                    'close_price_date': option_data.close_price_date,\n                    'expiration_date': option_data.expiration_date,\n                    'id': option_data.id,\n                    'name': option_data.name,\n                    'open_interest': option_data.open_interest,\n                    'open_interest_date': option_data.open_interest_date,\n                    'root_symbol': option_data.root_symbol,\n                    'size': option_data.size,\n                    'status': option_data.status,\n                    'strike_price': option_data.strike_price,\n                    'style': option_data.style,\n                    'symbol': option_data.symbol,\n                    'tradable': option_data.tradable,\n                    'type': option_data.type,\n                    'underlying_asset_id': option_data.underlying_asset_id,\n                    'underlying_symbol': option_data.underlying_symbol,\n                    'initial_delta': delta,\n                    'initial_iv': iv,\n                    'initial_option_price': option_price,\n                }\n\n                print(f\"short_put is {short_put}\")\n            # If the short put is found, break the loop\n            if short_put:\n                break\n\n        except KeyError as e:\n            print(f\"Missing data for option {option_symbol}: {e}\")\n            continue\n\n    return short_put\n```\n\n----------------------------------------\n\nTITLE: Calculating Strike Prices for Iron Condor Strategy\nDESCRIPTION: Calculates four strike prices (A, B, C, D) for an iron condor strategy based on TSLA's current price and standard deviation. The strategy targets profit when the price stays between B and C.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# At the time of writing, TSLA has a standard deviation (a common measure of variation for the price) of 5.02 and a price of 413.82\n# Let's create a interval around the current price such that B and C are a standard deviation away from each other\n\nstddev = 5.02\nB = optimal_price - (stddev / 2)\nC = optimal_price + (stddev / 2)\nA = B - stddev\nD = C + stddev\n\nprint(f\"A: {A}, B: {B}, C: {C}, D: {D}\")\n```\n\n----------------------------------------\n\nTITLE: Checking Buying Power for Bull Put Spread\nDESCRIPTION: This function calculates the maximum risk for a bull put spread (spread width minus premium received) and checks it against a buying power limit. If the risk exceeds the limit, it throws an exception to prevent trade execution.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef check_buying_power(short_put: Dict[str, Any], long_put: Dict[str, Any], buying_power_limit: float) -> None:\n    \"\"\"\n    Calculates the width of the spread minus the credit received for a bull put spread and checks it against the buying power limit.\n    If the buying power requirement is not met, the exception is thrown and the rest of the code is never executed.\n    \"\"\"\n    option_size = float(short_put['size'])\n    premium_received = short_put['initial_option_price'] - long_put['initial_option_price']\n    spread_width = short_put['strike_price'] - long_put['strike_price']\n    risk = (spread_width - premium_received) * option_size\n    logger.info(f\"Calculated bull put spread risk: {risk}.\")\n    \n    if risk >= buying_power_limit:\n        raise Exception('Buying power limit exceeded for a bull put spread risk.')\n```\n\n----------------------------------------\n\nTITLE: Adjusting or Exiting Calendar Spread in Python with Alpaca API\nDESCRIPTION: This function implements the logic for adjusting or exiting a calendar spread through rolling or rinsing. It can liquidate existing positions and optionally re-enter the market with new options. The function uses the Alpaca trading API to close positions and execute new trades.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n# Exit the market\ndef mleg_roll_rinse_execution(mleg_option_data, rolling, underlying_symbol, risk_free_rate, buying_power_limit, min_strike, max_strike, min_expiration, max_expiration, expiry_range, iv_range, delta_range, theta_range):\n\n    # loop through the list and extract the \"symbol\" for each leg\n    option_symbols = [leg.get('symbol') for leg in mleg_option_data]\n\n    # if rolling the option, close the put and re-enter the market with a new put or close the call and re-enter the market with a new call\n    if rolling:\n\n        for option_symbol in option_symbols:\n            try:\n                # Close every leg by liquidating it (buying or selling it)\n                trade_client.close_position(\n                    symbol_or_asset_id=option_symbol,\n                    close_options=ClosePositionRequest(qty=\"1\")\n                )\n                print(f\"Liquidated (Closed) {option_symbol} option.\")\n            except Exception as e:\n                # Immediately halt further processing if any liquidation fails\n                raise Exception(f\"Liquidation failed for {option_symbol}. Error: {e}. Process halted.\")\n        \n        # Roll the option\n        message, res = execute_long_call_calendar_spread(\n                underlying_symbol=underlying_symbol,\n                risk_free_rate=risk_free_rate, \n                buying_power_limit=buying_power_limit, \n                min_strike=min_strike, \n                max_strike=max_strike, \n                min_expiration=min_expiration, \n                max_expiration=max_expiration, \n                expiry_range=expiry_range, \n                iv_range=iv_range, \n                delta_range=delta_range,\n                theta_range=theta_range\n        )\n        print(\"Re-entered the market:\") \n        return message, res\n\n    # if we only want to close the position without rolling\n    else:\n        messages = []\n        for option_symbol in option_symbols:\n            try:\n                trade_client.close_position(\n                    symbol_or_asset_id=option_symbol,\n                    close_options=ClosePositionRequest(qty='1')\n                )\n                messages.append(f\"Liquidated (Closed) {option_symbol} option.\")\n            except Exception as e:\n                messages.append(f\"Failed to liquidate {option_symbol}. Error: {e}\")\n        return \"\\n\".join(messages), None\n```\n\n----------------------------------------\n\nTITLE: Finding Short-Term Option Expiration in Python\nDESCRIPTION: This code snippet demonstrates how to find the short-term option from a list of options based on the expiration date. It uses a lambda function with the min() function to select the option with the earliest expiration date.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# mleg_option_data\n\nshort_term_option = min(mleg_option_data, key=lambda opt: opt['expiration_date'])\nshort_term_option['expiration_date']\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Chain from Alpaca in Python\nDESCRIPTION: This code retrieves the option chain for a given underlying symbol using the OptionHistoricalDataClient. It specifies the underlying symbol in the request.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_31\n\nLANGUAGE: python\nCODE:\n```\nreq = OptionChainRequest(\n    underlying_symbol = high_open_interest_contract.underlying_symbol,\n)\noption_historical_data_client.get_option_chain(req)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trading Account Information\nDESCRIPTION: Fetches account details from Alpaca API. This provides information about the trading account status, balances, and configurations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# check trading account\n# You can check definition of each field in the following documents\n# ref. https://docs.alpaca.markets/docs/account-plans\n# ref. https://docs.alpaca.markets/reference/getaccount-1\nacct = trade_client.get_account()\nacct\n```\n\n----------------------------------------\n\nTITLE: Calculating Bollinger Bands for Volatility Assessment\nDESCRIPTION: Implements Bollinger Bands calculation to assess the current market volatility and determine optimal entry points for the options strategy. Calculates the upper and lower Bollinger Bands using a 14-period window and 2 standard deviations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# setup bollinger band calculations\ndef check_bb(df, period=14, multiplier=2):\n    bollinger_bands = []\n    # Calculate the Simple Moving Average (SMA)\n    df['SMA'] = df['close'].rolling(window=period).mean()\n    # Calculate the rolling standard deviation\n    df['StdDev'] = df['close'].rolling(window=period).std()\n    # Calculate the Upper Bollinger Band (two standard deviation)\n    df['Upper Band'] = df['SMA'] + (multiplier * df['StdDev'])\n    # Calculate the Lower Bollinger Band (two standard deviation)\n    df['Lower Band'] = df['SMA'] - (multiplier * df['StdDev'])\n    # Get the most recent Upper Band value\n    upper_bollinger_band = df['Upper Band'].iloc[-1]\n    lower_bollinger_band = df['Lower Band'].iloc[-1]\n    \n    bollinger_bands = [upper_bollinger_band, lower_bollinger_band]\n    return bollinger_bands\n\nbollinger_bands = check_bb(priceData, 14, 2)\n\n# The current market price is not too close to the two-standard deviation level yet but is relatively closer to the higher Bollinger Band.\nprint(f\"Latest Upper Bollinger Band is: {bollinger_bands[0]}. Latest Lower Bollinger Band is {bollinger_bands[1]}; while underlying stock '{underlying_symbol}' price is {underlying_price}.\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contracts with Alpaca API in Python\nDESCRIPTION: Function that retrieves option contracts based on various filtering criteria including underlying symbol, strike price range, expiration date range, and option type. It uses the Alpaca trade client to fetch options meeting the specified criteria.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, option_type):\n    req = GetOptionContractsRequest(\n        underlying_symbols=[underlying_symbol],\n        status=AssetStatus.ACTIVE,\n        type=option_type,\n        strike_price_gte=min_strike,\n        strike_price_lte=max_strike,\n        expiration_date_gte=min_expiration,\n        expiration_date_lte=max_expiration,        \n    )\n    return trade_client.get_option_contracts(req).option_contracts\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Visualizing Historical Stock Price Data with Plotly\nDESCRIPTION: Retrieves historical price data for the underlying stock using Alpaca's StockBarsRequest API and visualizes it as a candlestick chart using Plotly. The function gets 180 days of daily price data for technical analysis purposes.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Get the historical data for the underlying stock by symbol and timeframe\n# ref. https://alpaca.markets/sdks/python/api_reference/data/option/historical.html\ndef get_stock_data(underlying_symbol, days=90):\n    today = datetime.now(timezone).date()\n    req = StockBarsRequest(\n        symbol_or_symbols=[underlying_symbol],\n        timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),     # specify timeframe\n        start=today - timedelta(days=days),                          # specify start datetime, default=the beginning of the current day.\n    )\n    return stock_data_client.get_stock_bars(req).df\n\n# List of stock agg objects while dropping the symbol column\npriceData = get_stock_data(underlying_symbol, days=180).reset_index(level='symbol', drop=True)\n\nimport plotly.graph_objects as go\n\n# Bar chart for the stock price\nfig = go.Figure(data=[go.Candlestick(x=priceData.index,\n                open=priceData['open'],\n                high=priceData['high'],\n                low=priceData['low'],\n                close=priceData['close'])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Computing Bollinger Bands for Stock Price Analysis in Python\nDESCRIPTION: This function calculates Bollinger Bands for a given dataframe of price data. It computes the Simple Moving Average (SMA), standard deviation, and upper and lower Bollinger Bands. The function returns the latest upper and lower Bollinger Band values.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef check_bb(df, period=14, multiplier=2):\n    bollinger_bands = []\n    # Calculate the Simple Moving Average (SMA)\n    df['SMA'] = df['close'].rolling(window=period).mean()\n    # Calculate the rolling standard deviation\n    df['StdDev'] = df['close'].rolling(window=period).std()\n    # Calculate the Upper Bollinger Band (two standard deviation)\n    df['Upper Band'] = df['SMA'] + (multiplier * df['StdDev'])\n    # Calculate the Lower Bollinger Band (two standard deviation)\n    df['Lower Band'] = df['SMA'] - (multiplier * df['StdDev'])\n    # Get the most recent Upper Band value\n    upper_bollinger_band = df['Upper Band'].iloc[-1]\n    lower_bollinger_band = df['Lower Band'].iloc[-1]\n    \n    bollinger_bands = [upper_bollinger_band, lower_bollinger_band]\n    return bollinger_bands\n\nbollinger_bands = check_bb(priceData, 14, 2)\n\n# The current market price is not too close to the two-standard deviation level yet but is relatively closer to the higher Bollinger Band.\nprint(f\"Latest Upper Bollinger Band is: {bollinger_bands[0]}. Latest Lower Bollinger Band is {bollinger_bands[1]}; while underlying stock '{underlying_symbol}' price is {underlying_price}.\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Relative Volatility Index (RVI) in Python\nDESCRIPTION: This function calculates the Relative Volatility Index (RVI) for a given price dataframe. It computes the ratio of upward price change volatility to downward price change volatility over a specified period, and then smooths the result with a 4-period moving average.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_rvi(df, period):\n    # Calculate daily price changes \n    df['price_change'] = df['close'].diff()\n\n    # Separate up and down price changes\n    df['up_change'] = df['price_change'].where(df['price_change'] > 0, 0)\n    df['down_change'] = -df['price_change'].where(df['price_change'] < 0, 0)\n\n    # Calculate std of up and down changes over the rolling period\n    df['avg_up_std'] = df['up_change'].rolling(window=period).std()\n    df['avg_down_std'] = df['down_change'].rolling(window=period).std()\n\n    # Calculate RVI\n    df['rvi'] = 100 - (100 / (1 + (df['avg_up_std'] / df['avg_down_std'])))\n\n    # Smooth the RVI with a 4 periods moving average\n    df['rvi_smoothed'] = df['rvi'].rolling(window=4).mean()\n\n    return df['rvi_smoothed']\n\n# smoothed RVI\ncalculate_rvi(priceData, period=21).iloc[30:]\n```\n\n----------------------------------------\n\nTITLE: Checking Buying Power for Bull Call Spread in Python\nDESCRIPTION: Function to calculate the total premium paid (risk) for a bull call spread and check if it exceeds the buying power limit. Throws an exception if the buying power requirement is not met, preventing execution of the rest of the code.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef check_buying_power(short_call: Dict[str, Any], long_call: Dict[str, Any], buying_power_limit: float) -> None:\n    \"\"\"\n    Calculates the total premium paid (risk) for a bull call spread and checks it against the buying power limit.\n    If the buying power requirement is not met, the exception is thrown and the rest of the code is never executed.\n    \"\"\"\n    option_size = float(short_call['size'])\n    risk = (long_call['initial_option_price'] - short_call['initial_option_price']) * option_size\n    logger.info(f\"Calculated bull call spread risk: {risk}.\")\n    \n    if risk >= buying_power_limit:\n        raise Exception('Buying power limit exceeded for a bull call spread risk.')\n```\n\n----------------------------------------\n\nTITLE: Finding Bear Put Spread Option Candidates\nDESCRIPTION: Calls a function to identify suitable options pairs for a bear put spread strategy based on the underlying price, risk-free rate, buying power constraints, selection criteria, and open interest threshold.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nsp, lp = find_options_for_bear_put_spread(put_options, underlying_price, risk_free_rate, buying_power_limit, criteria, OI_THRESHOLD)\n```\n\n----------------------------------------\n\nTITLE: Getting Filtered Orders in Alpaca Trading API\nDESCRIPTION: This code demonstrates retrieving orders with filtering options using the GetOrdersRequest model. The example filters for open sell orders by setting the appropriate status and side parameters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import GetOrdersRequest\nfrom alpaca.trading.enums import OrderSide, QueryOrderStatus\n\ntrading_client = TradingClient('api-key', 'secret-key', paper=True)\n\n# params to filter orders by\nrequest_params = GetOrdersRequest(\n                    status=QueryOrderStatus.OPEN,\n                    side=OrderSide.SELL\n                 )\n\n# orders that satisfy params\norders = trading_client.get_orders(filter=request_params)\n```\n\n----------------------------------------\n\nTITLE: Validating Option Open Interest in Python\nDESCRIPTION: This function checks if an option has sufficient open interest by comparing it to a threshold value. It ensures the option has the required fields and meets the minimum open interest criteria.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef validate_sufficient_OI(option_data, OI_THRESHOLD):\n    '''Ensure that the option has the required fields and sufficient open interest.'''\n    if option_data.open_interest is None or option_data.open_interest_date is None:\n        return False\n    if float(option_data.open_interest) <= OI_THRESHOLD:\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Implementing Black-Scholes Model for Option Greeks and Implied Volatility Calculation\nDESCRIPTION: Functions to calculate implied volatility and option Greeks (delta, gamma, theta, vega) using the Black-Scholes model. These functions help in selecting appropriate options contracts for the Iron Condor strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Calculate implied volatility\ndef calculate_implied_volatility(option_price, S, K, T, r, option_type):\n    \n    # Define a reasonable range for sigma\n    sigma_lower = 1e-6\n    sigma_upper = 5.0  # Adjust upper limit if necessary\n\n    # Check if the option is out-of-the-money and price is close to zero\n    intrinsic_value = max(0, (S - K) if option_type == 'call' else (K - S))\n    if option_price <= intrinsic_value + 1e-6:\n        \n        print('Option price is close to intrinsic value; implied volatility is near zero.')\n        return 0.0\n    \n    # Define the function to find the root\n    def option_price_diff(sigma):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        if option_type == 'call':\n            price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n        elif option_type == 'put':\n            price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)\n        return price - option_price\n\n    try:\n        return brentq(option_price_diff, sigma_lower, sigma_upper)\n    except ValueError as e:\n        print(f\"Failed to find implied volatility: {e}\")\n        return None\n\n\ndef calculate_greeks(option_price, strike_price, expiration, underlying_price, risk_free_rate, option_type):\n    T = (expiration - pd.Timestamp.now()).days / 365 # It is unconventional, but some use 225 days (# of annual trading days) in replace of 365 days\n    T = max(T, 1e-6)  # Set minimum T to avoid zero\n    \n    if T == 1e-6:\n        print('Option has expired or is expiring now; setting Greeks based on intrinsic value.')\n        if option_type == 'put':\n            delta = -1.0 if underlying_price < strike_price else 0.0\n        else:\n            delta = 1.0 if underlying_price > strike_price else 0.0\n        gamma = 0.0\n        theta = 0.0\n        vega = 0.0\n        return delta, gamma, theta, vega\n    \n    # Calculate IV\n    IV = calculate_implied_volatility(option_price, underlying_price, strike_price, T, risk_free_rate, option_type)\n\n    if IV is None or IV == 0.0:\n        print('Implied volatility could not be determined, skipping Greek calculations.')\n        return None\n    \n    d1 = (np.log(underlying_price / strike_price) + (risk_free_rate + 0.5 * IV ** 2) * T) / (IV * np.sqrt(T))\n    d2 = d1 - IV * np.sqrt(T) # d2 for Theta calculation\n    # Calculate Delta\n    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)\n    # Calculate Gamma\n    gamma = norm.pdf(d1) / (underlying_price * IV * np.sqrt(T))\n    # Calculate Vega\n    vega = underlying_price * np.sqrt(T) * norm.pdf(d1)\n    # Calculate Theta\n    if option_type == 'call':\n        theta = (\n            - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T))\n            - (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(d2))\n        )\n    else:\n        theta = (\n            - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T))\n            + (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(-d2))\n        )\n    # Convert annualized theta to daily theta\n    theta /= 365\n    \n    return delta, gamma, theta, vega\n```\n\n----------------------------------------\n\nTITLE: Options Data Retrieval in Python\nDESCRIPTION: Fetches options data for both calls and puts within specified strike price and expiration ranges\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ncall_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, ContractType.CALL)\nput_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, ContractType.PUT)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Underlying Stock Price\nDESCRIPTION: Defines a function to get the latest price of the underlying stock using Alpaca's API, then uses it to determine the minimum strike price for option selection (set at 1% above current price).\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\nunderlying_price = get_underlying_price(underlying_symbol)\nmin_strike = round(underlying_price * 1.01, 2)\n\nprint(f\"{underlying_symbol} price: {underlying_price}\")\nprint(f\"Min Expiration: {min_expiration}, Max Expiration: {max_expiration}, Min Strike: {min_strike}\")\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Trade Parameters for Calendar Spread Strategy\nDESCRIPTION: This code defines the underlying stock and various parameters for the calendar spread strategy, including strike price ranges, expiration dates, buying power limits, and thresholds for option Greeks. It retrieves the latest stock price and calculates the appropriate strike price range.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Select the underlying stock (Alcoa Corporation)\nunderlying_symbol = 'AA'\n\n# Set the timezone\ntimezone = ZoneInfo(\"America/New_York\")\n\n# Get current date in US/Eastern timezone\ntoday = datetime.now(timezone).date()\n\n# Define a 5% range around the underlying price \nSTRIKE_RANGE = 0.05\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.05\n\n# Risk free rate for the options greeks and IV calculations\nrisk_free_rate = 0.01\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 100\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Set the expiration date range for the options\nmin_expiration = today + timedelta(days=21)\nmax_expiration = today + timedelta(days=80)\n\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nunderlying_price = get_underlying_price(underlying_symbol)\n\n# Set the minimum and maximum strike prices based on the underlying price\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n\n# Define expiry thresholds. For a shorter-term call, between 27 days and 40 days, which is buffer for 30 days; for a longer-term, between 55 days and 65 days, which is buffer for 60 days\nEXPIRY_RANGE = (27, 40, 55, 65)\n\n# Define Implied Volatility thresholds. For a shorter-term call, between 0.40 and 0.70; for a longer-term, between 0.30 and 0.60\nIV_RANGE = (0.40, 0.70, 0.30, 0.60)\n\n# Define delta thresholds. For a shorter-term call, between 0.45 and 0.80; for a longer-term, between 0.40 and 0.70\nDELTA_RANGE = (0.45, 0.80, 0.40, 0.70)\n\n# Define theta thresholds. For a shorter-term call, between -0.2 and -0.01; for a longer-term, between -0.1 and -0.01\nTHETA_RANGE = (-0.2, -0.01, -0.1, -0.01)\n\n# Set target profit levels\nTARGET_PROFIT_PERCENTAGE = 0.6\n\n# Display the values\nprint(f\"Underlying Symbol: {underlying_symbol}\")\nprint(f\"{underlying_symbol} price: {underlying_price}\")\nprint(f\"Strike Range: {STRIKE_RANGE}\")\nprint(f\"Buying Power Limit Percentage: {BUY_POWER_LIMIT}\")\nprint(f\"Risk Free Rate: {risk_free_rate}\")\nprint(f\"Account Buying Power: {buying_power}\")\nprint(f\"Buying Power Limit: {buying_power_limit}\")\nprint(f\"Open Interest Threshold: {OI_THRESHOLD}\")\nprint(f\"Minimum Expiration Date: {min_expiration}\")\nprint(f\"Maximum Expiration Date: {max_expiration}\")\nprint(f\"Minimum Strike Price: {min_strike}\")\nprint(f\"Maximum Strike Price: {max_strike}\")\nprint(f\"Expiry date range for options: {EXPIRY_RANGE}\")\nprint(f\"Implied Volatility range for options: {IV_RANGE}\")\nprint(f\"Delta range for options: {DELTA_RANGE}\")\nprint(f\"Theta range for options: {THETA_RANGE}\")\n```\n\n----------------------------------------\n\nTITLE: Querying Orders for a Specific Option Contract\nDESCRIPTION: Retrieves all orders for a specific option contract symbol. This allows tracking order history for a particular options position.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# get list of orders by specifying option contract symbol\nreq = GetOrdersRequest(\n    status = QueryOrderStatus.ALL,\n    symbols = [high_open_interest_contract.symbol],\n    limit = 2,\n)\norders = trade_client.get_orders(req)\norders\n```\n\n----------------------------------------\n\nTITLE: Listing and Filtering Accounts with BrokerClient in Python\nDESCRIPTION: This snippet demonstrates how to list and filter brokerage accounts using the BrokerClient. It uses the ListAccountsRequest object to specify filter criteria like creation date and which entity fields to include in the response.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker.client import BrokerClient\nfrom alpaca.broker.requests import ListAccountsRequest\nfrom alpaca.broker.enums import AccountEntities\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\n# search for accounts created after January 30th 2022.\n#Response should contain Contact and Identity fields for each account.\nfilter = ListAccountsRequest(\n                    created_after=datetime.datetime.strptime(\"2022-01-30\", \"%Y-%m-%d\"),\n                    entities=[AccountEntities.CONTACT, AccountEntities.IDENTITY]\n                    )\n\naccounts = broker_client.list_accounts(search_parameters=filter)\n```\n\n----------------------------------------\n\nTITLE: Executing Roll/Rinse Function for Bear Put Spread\nDESCRIPTION: Calls the roll_rinse_bear_put_spread function with the current spread positions and configuration parameters to either exit the position or roll it into a new spread position.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_22\n\nLANGUAGE: python\nCODE:\n```\nmessage, new_spread = roll_rinse_bear_put_spread(sp, lp, True, TARGET_PROFIT_PERCENTAGE, DELTA_STOP_LOSS, IV_STOP_LOSS, ContractType.CALL, criteria, risk_free_rate, min_strike, max_strike, min_expiration, max_expiration, OI_THRESHOLD)\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Open Position in Alpaca Trading API (Python)\nDESCRIPTION: Method to get a specific open position for an account using the Alpaca Trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/positions.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.get_open_position\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Volatility Index (RVI) for Volatility Direction Assessment in Python\nDESCRIPTION: A function to calculate the Relative Volatility Index (RVI), which helps determine volatility direction and magnitude. It computes price changes, separates up and down movements, calculates standard deviations, and applies smoothing with a 4-period moving average to produce the final indicator.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_rvi(df, period):\n    # Calculate daily price changes \n    df['price_change'] = df['close'].diff()\n\n    # Separate up and down price changes\n    df['up_change'] = df['price_change'].where(df['price_change'] > 0, 0)\n    df['down_change'] = -df['price_change'].where(df['price_change'] < 0, 0)\n\n    # Calculate std of up and down changes over the rolling period\n    df['avg_up_std'] = df['up_change'].rolling(window=period).std()\n    df['avg_down_std'] = df['down_change'].rolling(window=period).std()\n\n    # Calculate RVI\n    df['rvi'] = 100 - (100 / (1 + (df['avg_up_std'] / df['avg_down_std'])))\n\n    # Smooth the RVI with a 4 periods moving average\n    df['rvi_smoothed'] = df['rvi'].rolling(window=4).mean()\n\n    return df['rvi_smoothed']\n\n# smoothed RVI\ncalculate_rvi(priceData, period=21).iloc[30:]\n```\n\n----------------------------------------\n\nTITLE: Option Selection and Strategy Setup in Python\nDESCRIPTION: Code for selecting and configuring options legs for a long straddle strategy based on specified criteria including strike prices, expiration dates, and buying power requirements\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nput_candidates, call_candidates = group_and_select_common_expiration(\n            put_options, \n            call_options, \n            underlying_price, \n            risk_free_rate, \n            criteria, \n            OI_THRESHOLD\n    )\n    \n    chosen_long_put, chosen_long_call = select_common_strike_candidate(\n        put_candidates, \n        call_candidates, \n        underlying_price\n    )\n    \n    check_buying_power(chosen_long_put, chosen_long_call, buying_power_limit)\n    \n    long_straddle = [chosen_long_put, chosen_long_call]\n    print('\\nReturning long straddle legs:')\n\n    for leg in long_straddle:\n        print(f\"{leg['symbol']} at strike {leg['strike_price']}\")\n    \n    return long_straddle\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logging for Options Trading in Python\nDESCRIPTION: Configures basic logging setup for options trading strategy with DEBUG level logging enabled.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contracts in Alpaca-py\nDESCRIPTION: This method allows you to fetch a list of option contracts available on Alpaca for market data and trading. It is part of the TradingClient class in the alpaca.trading.client module.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/contracts.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.get_option_contracts\n```\n\n----------------------------------------\n\nTITLE: Calculating Relative Volatility Index (RVI) in Python\nDESCRIPTION: This function calculates the Relative Volatility Index (RVI) for a given DataFrame of price data. It computes daily price changes, separates up and down movements, and applies smoothing to produce the final RVI indicator.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_rvi(df, period=14):\n    # Calculate daily price changes \n    df['price_change'] = df['close'].diff()\n\n    # Separate up and down price changes\n    df['up_change'] = df['price_change'].where(df['price_change'] > 0, 0)\n    df['down_change'] = -df['price_change'].where(df['price_change'] < 0, 0)\n\n    # Calculate std of up and down changes over the rolling period\n    df['avg_up_std'] = df['up_change'].rolling(window=period).std()\n    df['avg_down_std'] = df['down_change'].rolling(window=period).std()\n\n    # Calculate RVI\n    df['rvi'] = 100 - (100 / (1 + (df['avg_up_std'] / df['avg_down_std'])))\n\n    # Smooth the RVI with a 4 periods moving average\n    df['rvi_smoothed'] = df['rvi'].rolling(window=4).mean()\n\n    return df['rvi_smoothed']\n\n# smoothed RVI\ncalculate_rvi(priceData, period=21).iloc[30:]\n```\n\n----------------------------------------\n\nTITLE: Continuing Option Contract Pagination\nDESCRIPTION: Demonstrates how to use the next_page_token from a previous query to fetch additional option contracts. This pattern is useful for handling large result sets.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# continue to fetch option contracts if there is next_page_token in response\nif res.next_page_token is not None:\n    req = GetOptionContractsRequest(\n        underlying_symbols = underlying_symbols,               # specify underlying symbols\n        status = AssetStatus.ACTIVE,                           # specify asset status: active (default)\n        expiration_date = None,                                # specify expiration date (specified date + 1 day range)\n        expiration_date_gte = None,                            # we can pass date object\n        expiration_date_lte = None,                            # or string (YYYY-MM-DD)\n        root_symbol = None,                                    # specify root symbol\n        type = None,                                           # specify option type (ContractType.CALL or ContractType.PUT)\n        style = None,                                          # specify option style (ContractStyle.AMERICAN or ContractStyle.EUROPEAN)\n        strike_price_gte = None,                               # specify strike price range\n        strike_price_lte = None,                               # specify strike price range\n        limit = 2,                                             # specify limit\n        page_token = res.next_page_token,                      # specify page token\n    )\n    res = trade_client.get_option_contracts(req)\n    display(res)\n```\n\n----------------------------------------\n\nTITLE: Implement Black-Scholes Option Calculations - Python\nDESCRIPTION: Implements Black-Scholes model calculations for implied volatility and options Greeks (delta, gamma, theta, vega). Includes error handling and edge cases for various market conditions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef calculate_implied_volatility(option_price, S, K, T, r, option_type):\n    sigma_lower = 1e-6\n    sigma_upper = 5.0\n    intrinsic_value = max(0, (S - K) if option_type == 'call' else (K - S))\n    if option_price <= intrinsic_value + 1e-6:\n        print('Option price is close to intrinsic value; implied volatility is near zero.')\n        return 0.0\n    def option_price_diff(sigma):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        if option_type == 'call':\n            price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n        elif option_type == 'put':\n            price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)\n        return price - option_price\n    try:\n        return brentq(option_price_diff, sigma_lower, sigma_upper)\n    except ValueError as e:\n        print(f\"Failed to find implied volatility: {e}\")\n        return None\n\ndef calculate_greeks(option_price, strike_price, expiration, underlying_price, risk_free_rate, option_type):\n    T = (expiration - pd.Timestamp.now()).days / 365\n    T = max(T, 1e-6)\n    if T == 1e-6:\n        print('Option has expired or is expiring now; setting Greeks based on intrinsic value.')\n        if option_type == 'put':\n            delta = -1.0 if underlying_price < strike_price else 0.0\n        else:\n            delta = 1.0 if underlying_price > strike_price else 0.0\n        gamma = 0.0\n        theta = 0.0\n        vega = 0.0\n        return delta, gamma, theta, vega\n    IV = calculate_implied_volatility(option_price, underlying_price, strike_price, T, risk_free_rate, option_type)\n    if IV is None or IV == 0.0:\n        print('Implied volatility could not be determined, skipping Greek calculations.')\n        return None\n    d1 = (np.log(underlying_price / strike_price) + (risk_free_rate + 0.5 * IV ** 2) * T) / (IV * np.sqrt(T))\n    d2 = d1 - IV * np.sqrt(T)\n    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)\n    gamma = norm.pdf(d1) / (underlying_price * IV * np.sqrt(T))\n    vega = underlying_price * np.sqrt(T) * norm.pdf(d1) / 100\n    if option_type == 'call':\n        theta = - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T)) - (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(d2))\n    else:\n        theta = - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T)) + (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(-d2))\n    theta /= 365\n    return delta, gamma, theta, vega\n```\n\n----------------------------------------\n\nTITLE: Retrieving a Specific Open Position for an Account using Alpaca Broker API in Python\nDESCRIPTION: This method retrieves a specific open position for a given account and symbol using the Alpaca Broker API. It requires authentication and returns a single position object.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/trading/positions.rst#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nalpaca.broker.client.BrokerClient.get_open_position_for_account\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contracts using Alpaca API\nDESCRIPTION: This function queries option contracts based on specified parameters like underlying symbol, strike price range, expiration date range, and option type (call or put). It returns active option contracts matching the criteria.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, option_type):\n    req = GetOptionContractsRequest(\n        underlying_symbols=[underlying_symbol],\n        status=AssetStatus.ACTIVE,\n        type=option_type,\n        strike_price_gte=min_strike,\n        strike_price_lte=max_strike,\n        expiration_date_gte=min_expiration,\n        expiration_date_lte=max_expiration,        \n    )\n    return trade_client.get_option_contracts(req).option_contracts\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Option Trade with Alpaca in Python\nDESCRIPTION: This code fetches the latest trade data for an option using the OptionHistoricalDataClient. It requires specifying the symbol or symbols for the request.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_29\n\nLANGUAGE: python\nCODE:\n```\nreq = OptionLatestTradeRequest(\n    symbol_or_symbols = [high_open_interest_contract.symbol],\n)\noption_historical_data_client.get_option_latest_trade(req)\n```\n\n----------------------------------------\n\nTITLE: Implementing Black-Scholes Calculations for Implied Volatility and Option Greeks\nDESCRIPTION: This code implements functions to calculate implied volatility and option Greeks (delta, gamma, theta, vega) using the Black-Scholes model. It handles edge cases such as near-zero time to expiry and options close to intrinsic value.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Calculate implied volatility\ndef calculate_implied_volatility(option_price, S, K, T, r, option_type):\n    \n    # Define a reasonable range for sigma\n    sigma_lower = 1e-6\n    sigma_upper = 5.0  # Adjust upper limit if necessary\n\n    # Check if the option is out-of-the-money and price is close to zero\n    intrinsic_value = max(0, (S - K) if option_type == 'call' else (K - S))\n    if option_price <= intrinsic_value + 1e-6:\n        \n        print(\"Option price is close to intrinsic value; implied volatility is near zero.\")\n        return 0.0\n    \n    # Define the function to find the root\n    def option_price_diff(sigma):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        if option_type == 'call':\n            price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n        elif option_type == 'put':\n            price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)\n        return price - option_price\n\n    try:\n        return brentq(option_price_diff, sigma_lower, sigma_upper)\n    except ValueError as e:\n        print(f\"Failed to find implied volatility: {e}\")\n        return None\n\n\ndef calculate_greeks(option_price, strike_price, expiry, underlying_price, risk_free_rate, option_type):\n    T = (expiry - pd.Timestamp.now()).days / 365 # It is unconventional, but some use 225 days (# of annual trading days) in replace of 365 days\n    T = max(T, 1e-6)  # Set minimum T to avoid zero\n    \n    if T == 1e-6:\n        print(\"Option has expired or is expiring now; setting Greeks based on intrinsic value.\")\n        if option_type == 'put':\n            delta = -1.0 if underlying_price < strike_price else 0.0\n        else:\n            delta = 1.0 if underlying_price > strike_price else 0.0\n        gamma = 0.0\n        theta = 0.0\n        vega = 0.0\n        return delta, gamma, theta, vega\n    \n    # Calculate IV\n    IV = calculate_implied_volatility(option_price, underlying_price, strike_price, T, risk_free_rate, option_type)\n\n    if IV is None or IV == 0.0:\n        print(\"Implied volatility could not be determined, skipping Greek calculations.\")\n        return None\n    \n    d1 = (np.log(underlying_price / strike_price) + (risk_free_rate + 0.5 * IV ** 2) * T) / (IV * np.sqrt(T))\n    d2 = d1 - IV * np.sqrt(T) # d2 for Theta calculation\n    # Calculate Delta\n    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)\n    # Calculate Gamma\n    gamma = norm.pdf(d1) / (underlying_price * IV * np.sqrt(T))\n    # Calculate Vega\n    vega = underlying_price * np.sqrt(T) * norm.pdf(d1)\n    # Calculate Theta\n    if option_type == 'call':\n        theta = (\n            - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T))\n            - (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(d2))\n        )\n    else:\n        theta = (\n            - (underlying_price * norm.pdf(d1) * IV) / (2 * np.sqrt(T))\n            + (risk_free_rate * strike_price * np.exp(-risk_free_rate * T) * norm.cdf(-d2))\n        )\n    # Convert annualized theta to daily theta\n    theta /= 365\n    \n    return delta, gamma, theta, vega\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logging for Bull Call Spread Strategy in Python\nDESCRIPTION: This snippet configures Python's logging module for a bull call spread options strategy. It sets up basic logging with DEBUG level for detailed tracking of the strategy's execution.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Configure logging\nimport logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Getting All Positions in Alpaca Trading API\nDESCRIPTION: This example demonstrates how to retrieve all open positions in a portfolio. The method returns a list of Position objects representing current holdings.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\n\ntrading_client = TradingClient('api-key', 'secret-key')\n\ntrading_client.get_all_positions()\n```\n\n----------------------------------------\n\nTITLE: Getting Option Position by Contract ID\nDESCRIPTION: Retrieves a specific option position using the contract ID instead of the symbol. This provides an alternative way to access position information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n# get positions by contract id\ntrade_client.get_open_position(symbol_or_asset_id = high_open_interest_contract.id)\n```\n\n----------------------------------------\n\nTITLE: Implementing Contract Buffer Class for Options Trading in Python\nDESCRIPTION: Defines a ContractBuffer class that helps find contracts minimizing difference from target prices. Includes buffer initialization and contract selection logic.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\nclass ContractBuffer:\n    def __init__(self, optimal, is_call, is_buy):\n        self.optimal = optimal\n        self.is_call = is_call\n        self.is_buy = is_buy\n        self.contract = None\n        self.diff = 0\n\n    def __repr__(self):\n        return f\"Contract: {self.contract}, Optimal: {self.optimal}, Diff: {self.diff}, Is Call: {self.is_call}\"\n\nbuffers = [ContractBuffer(A, False, True), ContractBuffer(B, False, False), ContractBuffer(C, True, False),\n           ContractBuffer(D, True, True)]\n\nfor contract in cts_m.option_contracts:\n    for buff in buffers:\n        is_call = contract.type == ContractType.CALL\n        if buff.is_call != is_call:\n            continue\n        diff = abs(float(contract.strike_price) - buff.optimal)\n        if diff < buff.diff or buff.contract is None:\n            buff.diff = diff\n            buff.contract = contract\n\norder_legs_m = []\nfor buff in buffers:\n    order_legs_m.append(OptionLegRequest(\n        symbol=buff.contract.symbol,\n        side=OrderSide.BUY if buff.is_buy else OrderSide.SELL,\n        ratio_qty=1\n    ))\n\ndel buffers\norder_legs_m\n```\n\n----------------------------------------\n\nTITLE: Risk and Buying Power Check for Short Iron Butterfly in Python\nDESCRIPTION: A function that calculates the risk and buying power requirements for a short iron butterfly strategy. It computes the width of the spread minus the credit received and validates against a specified buying power limit.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ndef check_risk_and_buying_power(long_put: Dict[str, Any], short_put: Dict[str, Any], short_call: Dict[str, Any], long_call: Dict[str, Any], buying_power_limit: float) -> None:\n    \"\"\"\n    Calculates the width of the spread minus the credit received for a short iron butterfly and checks it against the buying power limit.\n    If the buying power requirement is not met, the exception is thrown and the rest of the code is never executed.\n    \"\"\"\n    option_size = float(short_put['size'])\n    premium_received = short_put['initial_option_price'] + short_call['initial_option_price'] - long_put['initial_option_price'] - long_call['initial_option_price']\n    # Determine the wider spread width\n    spread_width = max(short_put['strike_price'] - long_put['strike_price'], long_call['strike_price'] - short_call['strike_price'])\n    # Calculate the risk\n    risk = (spread_width - premium_received) * option_size\n    logger.info(f\"Calculated short iron butterfly risk: {risk}.\")\n    \n    if risk >= buying_power_limit:\n        raise Exception('Buying power limit exceeded for a short iron butterfly risk.')\n```\n\n----------------------------------------\n\nTITLE: Validating Order Data with Alpaca-py Request Models\nDESCRIPTION: Example of using Alpaca-py's request models for data validation in a Flask route. Demonstrates how to handle JSON data and validate it using MarketOrderRequest.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/getting_started.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/post_json', methods=['POST'])\ndef do_trade():\n    # ...\n\n    order_data_json = request.get_json()\n\n    # validate data\n    MarketOrderRequest(**order_data_json)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Configure Trading Strategy Parameters - Python\nDESCRIPTION: Sets up trading parameters for the bear put spread strategy including strike price selection, expiration dates, risk management settings, and position sizing calculations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nunderlying_symbol = 'AAPL'\ntimezone = ZoneInfo('America/New_York')\ntoday = datetime.now(timezone).date()\nSTRIKE_RANGE = 0.06\nOI_THRESHOLD = 50\nrisk_free_rate = 0.01\nBUY_POWER_LIMIT = 0.05\nbuying_power = float(trade_client.get_account().buying_power)\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\nmin_expiration = today + timedelta(days=21)\nmax_expiration = today + timedelta(days=60)\n\ndef get_underlying_price(symbol):\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\nunderlying_price = get_underlying_price(underlying_symbol)\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n```\n\n----------------------------------------\n\nTITLE: Initializing OptionHistoricalDataClient for Alpaca in Python\nDESCRIPTION: This snippet sets up the OptionHistoricalDataClient for retrieving historical options data from Alpaca. It requires an API key and secret key, with an optional URL override.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\noption_historical_data_client = OptionHistoricalDataClient(api_key, secret_key, url_override = data_api_url)\n```\n\n----------------------------------------\n\nTITLE: Placing a Market Order with Notional Value\nDESCRIPTION: Creates and submits a market order to buy $1.11 worth of SPY. This demonstrates how Alpaca allows specifying orders by dollar amount rather than share quantity.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# simple, market order, notional\n# Alpaca trading platform support fractional trading by default\n# you can specify:\n# fractional qty (e.g. 0.01 qty) in the order request (which is in the example above)\n# or notional value (e.g. 100 USD) (which is in this example)\nreq = MarketOrderRequest(\n    symbol = symbol,\n    notional = 1.11,  # notional is specified in USD, here we specify $1.11\n    side = OrderSide.BUY,\n    type = OrderType.MARKET,\n    time_in_force = TimeInForce.DAY,\n)\nres = trade_client.submit_order(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Fetching Call Options with Alpaca Python SDK\nDESCRIPTION: This function retrieves call options for a given underlying symbol within specified strike price and expiration date ranges using the Alpaca API. It returns a list of active call option contracts.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\ndef get_call_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration):\n    \n    # Fetch the options data to add to the portfolio\n    req = GetOptionContractsRequest(\n        underlying_symbols=[underlying_symbol],\n        status=AssetStatus.ACTIVE,\n        type=ContractType.CALL,\n        strike_price_gte=min_strike,\n        strike_price_lte=max_strike,\n        expiration_date_gte=min_expiration,\n        expiration_date_lte=max_expiration,\n    )\n    \n    # Get call option chain of the underlying symbol\n    call_options = trade_client.get_option_contracts(req).option_contracts\n    return call_options\n```\n\n----------------------------------------\n\nTITLE: Initializing Historical Data Clients for Stocks, Crypto, and Options in Python\nDESCRIPTION: Demonstrates how to initialize historical data clients for stocks, cryptocurrencies, and options. The crypto client doesn't require API keys, while stock and option clients do.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/market_data.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data import CryptoHistoricalDataClient, StockHistoricalDataClient, OptionHistoricalDataClient\n\n# no keys required.\ncrypto_client = CryptoHistoricalDataClient()\n\n# keys required\nstock_client = StockHistoricalDataClient(\"api-key\",  \"secret-key\")\noption_client = OptionHistoricalDataClient(\"api-key\",  \"secret-key\")\n```\n\n----------------------------------------\n\nTITLE: Executing the Put Options Search Function\nDESCRIPTION: Calls the get_put_options function with the previously configured parameters to retrieve eligible put options for the cash-secured puts strategy based on the defined strike price range and expiration dates.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nget_put_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration)\n```\n\n----------------------------------------\n\nTITLE: Setting up Alpaca API Environment for Options Trading\nDESCRIPTION: Initializes the Python environment with necessary imports and sets up the Alpaca API clients for trading and data access. The code imports required libraries for data manipulation, time handling, and the Alpaca SDK components needed for options trading.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `alpaca-py` and import it\n# !python3 -m pip install --upgrade alpaca-py\n\nimport pandas as pd\nimport numpy as np\nimport alpaca\nimport time\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\nfrom dotenv import load_dotenv\nimport os\nfrom typing import Any, Dict, List, Optional, Tuple\n\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import StockBarsRequest, OptionSnapshotRequest, OptionBarsRequest\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (\n    MarketOrderRequest,\n    GetOptionContractsRequest,\n    OptionLegRequest,\n    ClosePositionRequest,\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    ExerciseStyle,\n    OrderSide,\n    OrderClass,\n    OrderStatus,\n    OrderType,\n    TimeInForce,\n    QueryOrderStatus,\n    ContractType,\n)\n```\n\n----------------------------------------\n\nTITLE: Closing a Specific Position in Alpaca Trading API (Python)\nDESCRIPTION: Method to close a specific position for an account using the Alpaca Trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/positions.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.close_position\n```\n\n----------------------------------------\n\nTITLE: Getting Option Position by Symbol\nDESCRIPTION: Retrieves a specific option position using the contract symbol. This provides details about a single options position in the account.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# get positions by symbol\ntrade_client.get_open_position(symbol_or_asset_id=high_open_interest_contract.symbol)\n\n```\n\n----------------------------------------\n\nTITLE: Canceling Journal by ID via BrokerClient\nDESCRIPTION: Method reference for canceling a specific journal entry by its ID using the Alpaca broker client.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/journals.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.cancel_journal_by_id\n```\n\n----------------------------------------\n\nTITLE: Checking alpaca-py Version\nDESCRIPTION: Displays the installed version of the alpaca-py package. This helps verify that the correct version is being used.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# check version of alpaca-py\nalpaca.__version__\n```\n\n----------------------------------------\n\nTITLE: Validating Option Open Interest in Python\nDESCRIPTION: Function to verify that an option contract has sufficient open interest (OI) to be considered for trading. Checks if the open interest field exists and is above a specified threshold.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef validate_sufficient_OI(option_data, OI_THRESHOLD):\n    '''Ensure that the option has the required fields and sufficient open interest.'''\n    if option_data.open_interest is None or option_data.open_interest_date is None:\n        return False\n    if float(option_data.open_interest) <= OI_THRESHOLD:\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Open Positions for an Account using Alpaca Broker API in Python\nDESCRIPTION: This method fetches all open positions for a specified account using the Alpaca Broker API. It requires authentication and returns a list of position objects.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/trading/positions.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nalpaca.broker.client.BrokerClient.get_all_positions_for_account\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Configuration Settings\nDESCRIPTION: Gets the current account configuration settings. This shows the various preferences and settings applied to the trading account.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# check account configuration\n# ref. https://docs.alpaca.markets/reference/getaccountconfig-1\nacct_config = trade_client.get_account_configurations()\nacct_config\n```\n\n----------------------------------------\n\nTITLE: Configuring Iron Butterfly Strategy Parameters\nDESCRIPTION: Defines key parameters for the Iron Butterfly options strategy including underlying stock selection, strike price range, expiration windows, and risk management settings. The code retrieves current market data for the underlying asset and calculates appropriate strike price ranges based on current price.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Select the underlying stock (Johnson & Johnson)\nunderlying_symbol = 'JNJ'\n\n# Set the timezone\ntimezone = ZoneInfo('America/New_York')\n\n# Get current date in US/Eastern timezone\ntoday = datetime.now(timezone).date()\n\n# Define a 15% range around the underlying price \nSTRIKE_RANGE = 0.15\n\n# Buying power percentage to use for the trade\nBUY_POWER_LIMIT = 0.05\n\n# Risk free rate for the options greeks and IV calculations\nrisk_free_rate = 0.01\n\n# Check account buying power\nbuying_power = float(trade_client.get_account().buying_power)\n\n# Set the open interest volume threshold\nOI_THRESHOLD = 50\n\n# Calculate the limit amount of buying power to use for the trade\nbuying_power_limit = buying_power * BUY_POWER_LIMIT\n\n# Set the expiration date range for the options\nmin_expiration = today + timedelta(days=7)\nmax_expiration = today + timedelta(days=42)\n\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nunderlying_price = get_underlying_price(underlying_symbol)\n\n# Set the minimum and maximum strike prices based on the underlying price\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n\n# Each key corresponds to a leg and maps to a tuple of: (expiration range, IV range, delta range, theta range)\ncriteria = {\n    'long_put':  ((14, 35), (0.10, 0.40), (-0.40, -0.10), (-0.1, -0.005)),\n    'short_put': ((14, 35), (0.15, 0.50), (-0.60, -0.30), (-0.15, -0.01)),\n    'short_call':((14, 35), (0.15, 0.50), (0.30, 0.60), (-0.15, -0.01)),\n    'long_call': ((14, 35), (0.10, 0.40), (0.10, 0.40), (-0.1, -0.005))\n}\n\n# Set target profit levels\nTARGET_PROFIT_PERCENTAGE = 0.60\nDELTA_STOP_LOSS = 0.50\nIV_STOP_LOSS = 0.60\n\n# Display the values\nprint(f\"Underlying Symbol: {underlying_symbol}\")\nprint(f\"{underlying_symbol} price: {underlying_price}\")\nprint(f\"Buying Power Limit: {buying_power_limit}\")\nprint(f\"Minimum Expiration Date: {min_expiration}\")\nprint(f\"Maximum Expiration Date: {max_expiration}\")\nprint(f\"Minimum Strike Price: {min_strike}\")\nprint(f\"Maximum Strike Price: {max_strike}\")\n```\n\n----------------------------------------\n\nTITLE: Listing Broker Accounts\nDESCRIPTION: Example showing how to list and filter brokerage accounts using the BrokerClient.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/README.md#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker.client import BrokerClient\nfrom alpaca.broker.requests import ListAccountsRequest\nfrom alpaca.broker.enums import AccountEntities\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\n# search for accounts created after January 30th 2022.\n# Response should contain Contact and Identity fields for each account.\nfilter = ListAccountsRequest(\n                    created_after=datetime.datetime.strptime(\"2022-01-30\", \"%Y-%m-%d\"),\n                    entities=[AccountEntities.CONTACT, AccountEntities.IDENTITY]\n                    )\n\naccounts = broker_client.list_accounts(search_parameters=filter)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contract by ID\nDESCRIPTION: Demonstrates retrieving an option contract using its unique ID instead of the symbol. This provides an alternative way to access contract information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n# get options contract by id\nid = res.option_contracts[0].id\ncontract = trade_client.get_option_contract(symbol_or_id=id)\ncontract\n```\n\n----------------------------------------\n\nTITLE: Retrieving News Data with Alpaca Python SDK\nDESCRIPTION: This example shows how to use the NewsClient to retrieve news data for Tesla (TSLA) stock since July 1st, 2022. It demonstrates importing the necessary classes, setting up request parameters, and converting the response to a pandas DataFrame.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/README.md#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data.historical.news import NewsClient\nfrom alpaca.data.requests import NewsRequest\nfrom datetime import datetime\n\n# no keys required for news data\nclient = NewsClient()\n\nrequest_params = NewsRequest(\n                        symbols=\"TSLA\",\n                        start=datetime.strptime(\"2022-07-01\", '%Y-%m-%d')\n                        )\n\nnews = client.get_news(request_params)\n\n# convert to dataframe\nnews.df\n```\n\n----------------------------------------\n\nTITLE: Getting Options Exchange Codes from Alpaca in Python\nDESCRIPTION: This code retrieves the options exchange codes using the OptionHistoricalDataClient. It doesn't require any parameters and returns a list of exchange codes.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_27\n\nLANGUAGE: python\nCODE:\n```\noption_historical_data_client.get_option_exchange_codes()\n```\n\n----------------------------------------\n\nTITLE: Modifying Account Configuration\nDESCRIPTION: Demonstrates how to update account configuration settings by toggling fractional trading and then reverting the change. Shows both the modification and verification process.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# set account configuration\n# ref. https://docs.alpaca.markets/reference/patchaccountconfig-1\nreq = acct_config\nreq.fractional_trading = not req.fractional_trading # toggle fractional trading\nacct_config_new = trade_client.set_account_configurations(req)\ndisplay(acct_config_new)\n\n# revert changes\nreq = acct_config_new\nreq.fractional_trading = not req.fractional_trading # toggle fractional trading\nacct_config_reverted = trade_client.set_account_configurations(req)\ndisplay(acct_config_reverted)\n```\n\n----------------------------------------\n\nTITLE: Creating a Limit Order in Alpaca Trading API\nDESCRIPTION: This snippet demonstrates submitting a limit order using the LimitOrderRequest model. It creates a crypto sell order with a specified limit price, notional value, and Fill-or-Kill time in force.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import LimitOrderRequest\nfrom alpaca.trading.enums import OrderSide, TimeInForce\n\ntrading_client = TradingClient('api-key', 'secret-key', paper=True)\n\n\nlimit_order_data = LimitOrderRequest(\n                    symbol=\"BTC/USD\",\n                    limit_price=17000,\n                    notional=4000,\n                    side=OrderSide.SELL,\n                    time_in_force=TimeInForce.FOK\n                   )\n\n# Limit order\nlimit_order = trading_client.submit_order(\n                order_data=limit_order_data\n              )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Crypto Trades\nDESCRIPTION: Fetches historical trade execution data for Bitcoin. This provides information about actual transactions that occurred in the market.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_27\n\nLANGUAGE: python\nCODE:\n```\n# get historical trades by symbol\nreq = CryptoTradesRequest(\n    symbol_or_symbols = [symbol],\n    start = now - timedelta(days = 1),                          # specify start datetime, default=the beginning of the current day.\n    # end=None,                                             # specify end datetime, default=now\n    limit = 2,                                                # specify limit\n)\ncrypto_historical_data_client.get_crypto_trades(req).df\n```\n\n----------------------------------------\n\nTITLE: Checking Account Configuration for Options Trading\nDESCRIPTION: Retrieves account configuration settings, including the new max_options_trading_level field which indicates the highest level of options trading approved for the account.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# check account configuration\n# - we have new field `max_options_trading_level`\nacct_config = trade_client.get_account_configurations()\nacct_config\n```\n\n----------------------------------------\n\nTITLE: Configuring Strategy Parameters\nDESCRIPTION: Defines the core configuration for the gamma scalping strategy, including the underlying stock symbol (JPM), maximum absolute notional delta exposure, risk-free interest rate, and initializes an empty positions dictionary.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# Configuration\nunderlying_symbol = \"JPM\"\nmax_abs_notional_delta = 500\nrisk_free_rate = 0.045\npositions = {}\n```\n\n----------------------------------------\n\nTITLE: Creating a Journal Entry with Alpaca Broker API in Python\nDESCRIPTION: This snippet demonstrates how to create a journal entry using the Alpaca Broker API. It initializes a BrokerClient and creates a journal request to transfer cash between accounts.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker.client import BrokerClient\nfrom alpaca.broker.requests import CreateJournalRequest\nfrom alpaca.broker.enums import JournalEntryType\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\njournal_data = CreateJournalRequest(\n                    from_account=\"c8f1ef5d-edc0-4f23-9ee4-378f19cb92a4\",\n                    entry_type=JournalEntryType.CASH,\n                    to_account=\"0f08c6bc-8e9f-463d-a73f-fd047fdb5e94\",\n                    amount=50\n                )\n\njournal = broker_client.create_journal(journal_data=journal_data)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Contract by Symbol\nDESCRIPTION: Shows how to fetch a specific option contract by its symbol using the get_option_contract method. This is useful when you need detailed information about a particular contract.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# get options contract by symbol\n# - get_option_contract() is a new method to get options contract by symbol or id\nsymbol = res.option_contracts[0].symbol\ncontract = trade_client.get_option_contract(symbol)\ncontract\n```\n\n----------------------------------------\n\nTITLE: Downloading Trade Document by ID for Account in Alpaca Broker API (Python)\nDESCRIPTION: This method downloads a specific trade document by its ID for a given account. It is part of the BrokerClient class in the Alpaca Broker API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/documents.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.download_trade_document_for_account_by_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Underlying Stock Price from Alpaca API\nDESCRIPTION: Defines a function to fetch the latest price of the underlying stock using Alpaca's Stock Historical Data API. This price is essential for calculating option strikes and metrics.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nunderlying_price = get_underlying_price(underlying_symbol)\nprint(f\"{underlying_symbol} price: {underlying_price}\")\n```\n\n----------------------------------------\n\nTITLE: Finding Call Options for Calendar Spread with Alpaca Python SDK\nDESCRIPTION: This function searches for suitable call options to construct a calendar spread. It filters options based on various criteria including expiration dates, implied volatility, delta, theta, and buying power limits. The function returns a list of selected options for the spread.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\ndef find_call_options_for_calendar_spread(call_options, underlying_price, risk_free_rate, buying_power_limit, expiry_range, iv_range, delta_range, theta_range):\n    \n    short_call = None\n    long_call = None\n\n    for option_data in call_options:\n        option_symbol = option_data.symbol\n        print(f\"\\nChecking option {option_symbol}...\")\n\n        try:\n            # Check required fields and open interest\n            if option_data.open_interest is None or option_data.open_interest_date is None:\n                print(f\"Skipping {option_symbol}: missing open_interest or open_interest_date.\")\n                continue\n            if float(option_data.open_interest) <= OI_THRESHOLD:\n                print(f\"Skipping {option_symbol}: open_interest {option_data.open_interest} is below threshold {OI_THRESHOLD}.\")\n                continue\n\n            # Get option quote and calculate basic metrics\n            option_quote_request = OptionLatestQuoteRequest(symbol_or_symbols=option_symbol)\n            option_quote = option_historical_data_client.get_option_latest_quote(option_quote_request)[option_symbol]\n\n            option_price = (option_quote.bid_price + option_quote.ask_price) / 2\n            strike_price = float(option_data.strike_price)\n            expiry = pd.Timestamp(option_data.expiration_date)\n            option_type = option_data.type.value\n\n            print(f\"Option {option_symbol}: price = {option_price}, strike = {strike_price}, expiry = {expiry}\")\n            remaining_days = (expiry - pd.Timestamp.now()).days\n            T = max(remaining_days / 365, 1e-6)  # Avoid division by zero\n            # Calculate IV of options\n            iv = calculate_implied_volatility(\n                option_price=option_price, \n                S=underlying_price,\n                K=strike_price,\n                T=T,\n                r=risk_free_rate,\n                option_type=option_type\n            )\n            # Calculate option Greeks\n            delta, _, theta, _ = calculate_greeks(\n                option_price=option_price, \n                strike_price=strike_price, \n                expiry=expiry,\n                underlying_price=underlying_price,\n                risk_free_rate=risk_free_rate,\n                option_type=option_type\n            )\n            # Print the metrics used for filtering options\n            print(f\"Metrics for {option_symbol}: remaining_days = {remaining_days}, IV = {iv}, delta = {delta}, theta = {theta}\")\n\n            # Check short_call (shorter-term) criteria\n            if expiry_range[0] <= remaining_days <= expiry_range[1]:\n                short_conditions = [\n                    (iv_range[0] <= iv <= iv_range[1], f\"failed IV check for short call: {iv} not in [{iv_range[0]}, {iv_range[1]}]\"),\n                    (delta_range[0] <= delta <= delta_range[1], f\"failed delta check for short call: {delta} not in [{delta_range[0]}, {delta_range[1]}]\"),\n                    (theta_range[0] <= theta <= theta_range[1], f\"failed theta check for short call: {theta} not in [{theta_range[0]}, {theta_range[1]}]\")\n                ]\n                for condition, message in short_conditions:\n                    if not condition:\n                        print(f\"Option {option_symbol} {message}.\")\n                        break\n                else:\n                    print(f\"Option {option_symbol} qualifies for short_call criteria.\")\n                    short_call = build_option_dict(option_data, iv, delta, theta, option_price)\n                    print(f\"short_call set to {option_symbol}.\")\n            else:\n                print(f\"Option {option_symbol} not in short_call expiry range [{expiry_range[0]}, {expiry_range[1]}] (remaining_days: {remaining_days}).\")\n\n            # Check long_call (longer-term) criteria\n            if expiry_range[2] <= remaining_days <= expiry_range[3]:\n                # If we've already found a short_call, ensure the strike prices match.\n                if short_call is not None and strike_price != float(short_call.get('strike_price')):\n                    print(f\"Skipping {option_symbol} for long_call because strike price {strike_price} does not match short_call strike price {short_call.get('strike_price')}.\")\n                    continue\n                long_conditions = [\n                    (iv_range[2] <= iv <= iv_range[3], f\"failed IV check for long_call: {iv} not in [{iv_range[2]}, {iv_range[3]}]\"),\n                    (delta_range[2] <= delta <= delta_range[3], f\"failed delta check for long_call: {delta} not in [{delta_range[2]}, {delta_range[3]}]\"),\n                    (theta_range[2] <= theta <= theta_range[3], f\"failed theta check for long call: {theta} not in [{theta_range[2]}, {theta_range[3]}]\"),\n                    (strike_price * float(option_data.size) < buying_power_limit, \n                     f\"failed buying power check for long_call: {strike_price} * {option_data.size} = {strike_price * float(option_data.size)} is not less than {buying_power_limit}\")\n                ]\n                for condition, message in long_conditions:\n                    if not condition:\n                        print(f\"Option {option_symbol} {message}.\")\n                        break\n                else:\n                    if short_call is not None and option_data.symbol == short_call.get('symbol'):\n                        print(f\"Skipping {option_symbol} for long_call because it's the same as the short_call.\")\n                    else:\n                        print(f\"Option {option_symbol} qualifies for long_call criteria.\")\n                        long_call = build_option_dict(option_data, iv, delta, theta, option_price)\n                        print(f\"long_call set to {option_symbol}.\")\n            else:\n                print(f\"Option {option_symbol} not in long_call expiry range [{expiry_range[2]}, {expiry_range[3]}] (remaining_days: {remaining_days}).\")\n\n            if short_call and long_call:\n                print(\"Both short_call and long_call selected. Breaking loop.\")\n                break\n\n        except Exception as e:\n            print(f\"Error processing {option_symbol}: {e}\")\n            continue\n    \n    mleg_option_data = [option for option in [short_call, long_call] if option is not None]\n    print(f\"\\nReturning combined list of options: {mleg_option_data}\")\n\n    if not mleg_option_data:\n        raise Exception(\"No valid call options found. Halting further process.\")\n\n    return mleg_option_data\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Crypto Data\nDESCRIPTION: Example showing how to request historical bar data for cryptocurrencies using CryptoHistoricalDataClient and CryptoBarsRequest.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/README.md#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data.historical import CryptoHistoricalDataClient\nfrom alpaca.data.requests import CryptoBarsRequest\nfrom alpaca.data.timeframe import TimeFrame\nfrom datetime import datetime\n\n# no keys required for crypto data\nclient = CryptoHistoricalDataClient()\n\nrequest_params = CryptoBarsRequest(\n                        symbol_or_symbols=[\"BTC/USD\", \"ETH/USD\"],\n                        timeframe=TimeFrame.Day,\n                        start=datetime(2022, 7, 1)\n                 )\n\nbars = client.get_crypto_bars(request_params)\n```\n\n----------------------------------------\n\nTITLE: Configuring Logging for Bull Put Spread Strategy\nDESCRIPTION: Sets up logging for the options trading strategy to track execution steps and potential issues. Configures the logging level to DEBUG for detailed information during strategy execution.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Configure logging\nimport logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Call Options for Covered Call Strategy\nDESCRIPTION: Function to fetch call options within specified strike price range and expiration dates. Includes validation against maximum strike price limits.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef get_call_options(underlying_symbol, option_data, max_strike, min_expiration, max_expiration):\n    if option_data['strike_price'] >= float(max_strike):\n        return f\"Option with strike price {option_data.strike_price} exceeds the max strike price {max_strike}.\"\n\n    req = GetOptionContractsRequest(underlying_symbols=[underlying_symbol],\n                                    strike_price_gte=str(option_data['strike_price']),\n                                    strike_price_lte=max_strike,\n                                    status=AssetStatus.ACTIVE,\n                                    expiration_date_gte=min_expiration,\n                                    expiration_date_lte=max_expiration,\n                                    root_symbol=underlying_symbol,\n                                    type=ContractType.CALL,\n                                    )\n\n    call_options = trade_client.get_option_contracts(req).option_contracts\n    return call_options\n```\n\n----------------------------------------\n\nTITLE: Retrieving Account Configuration\nDESCRIPTION: Fetches the current account configuration settings from Alpaca, which include settings like fractional trading, pattern day trading protection, and trade confirmations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# check account configuration\n# ref. https://docs.alpaca.markets/reference/getaccountconfig-1\nacct_config = trade_client.get_account_configurations()\nacct_config\n```\n\n----------------------------------------\n\nTITLE: Checking Account Eligibility for Multi-Leg Options Trading\nDESCRIPTION: Verifies if the Alpaca account is properly configured for multi-leg options trading by checking the options trading level.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# First, let us see if the account is enabled for multi-leg options trading\nacct = trade_client.get_account()\nif acct.options_trading_level >= 3:\n    print(\"Account is enabled for multi-leg options trading!\")\nelse:\n    print(\"Account is not enabled for multi-leg options trading!\")\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Bars using OptionHistoricalDataClient in Python\nDESCRIPTION: Auto-generated method documentation for retrieving historical option bar data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option/historical.rst#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: alpaca.data.historical.option.OptionHistoricalDataClient.get_option_bars\n```\n\n----------------------------------------\n\nTITLE: Closing All Positions in Alpaca Trading API\nDESCRIPTION: This snippet shows how to close all open positions and optionally cancel open orders. Setting cancel_orders to True prevents new positions from being opened during the liquidation process.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\n\ntrading_client = TradingClient('api-key', 'secret-key')\n\n# closes all position AND also cancels all open orders\ntrading_client.close_all_positions(cancel_orders=True)\n```\n\n----------------------------------------\n\nTITLE: Grouping and Selecting Options with Common Expiration Dates in Python\nDESCRIPTION: Function that processes put and call options, validates them against criteria, and groups them by expiration date. It selects the expiration date with the most candidates to maximize the chances of finding suitable options for strategies requiring matching expirations.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef group_and_select_common_expiration(put_options, call_options, underlying_price, risk_free_rate, criteria, OI_THRESHOLD):\n    \"\"\"\n    Processes put and call options, groups valid candidates by expiration, and selects a common expiration.\n    \n    Returns:\n      selected_expiration: The chosen expiration date.\n      put_candidates: List of long put candidates for that expiration.\n      call_candidates: List of long call candidates for that expiration.\n    \"\"\"\n    put_candidates_by_exp = {}\n    call_candidates_by_exp = {}\n\n    # Process put options\n    # Iterate through each put option, validate its open interest, build its candidate dictionary, and group the candidate by its expiration date. \n    for option_data in put_options:\n        if not validate_sufficient_OI(option_data, OI_THRESHOLD):\n            print(f\"Insufficient open interest for put option {getattr(option_data, 'symbol', 'unknown')} (threshold: {OI_THRESHOLD}). Skipping candidate.\")\n            continue\n        candidate = build_option_dict(option_data, underlying_price, risk_free_rate)\n        expiration = candidate['expiration']\n        put_candidates_by_exp.setdefault(expiration, [])\n        # Check if the candidate meets the long put criteria and add it to the appropriate expiration group.\n        if check_candidate_option_conditions(candidate, criteria['long_put'], 'long_put'):\n            put_candidates_by_exp[expiration].append(candidate)\n            print(f\"Added {candidate['symbol']} as a long put candidate for expiration {expiration}.\")\n\n    # Process call options\n    # Iterate through each call option, validate its open interest, build its candidate dictionary, and group the candidate by its expiration date. \n    for option_data in call_options:\n        if not validate_sufficient_OI(option_data, OI_THRESHOLD):\n            print(f\"Insufficient open interest for put option {getattr(option_data, 'symbol', 'unknown')} (threshold: {OI_THRESHOLD}). Skipping candidate.\")\n            continue\n        candidate = build_option_dict(option_data, underlying_price, risk_free_rate)\n        expiration = candidate['expiration']\n        call_candidates_by_exp.setdefault(expiration, [])\n        # Check if the candidate meets the long call criteria and add it to the appropriate expiration group.\n        if check_candidate_option_conditions(candidate, criteria['long_call'], 'long_call'):\n            call_candidates_by_exp[expiration].append(candidate)\n            print(f\"Added {candidate['symbol']} as a long call candidate for expiration {expiration}.\")\n\n    # Find common expiration dates\n    common_expirations = set(put_candidates_by_exp.keys()).intersection(set(call_candidates_by_exp.keys()))\n    if not common_expirations:\n        raise Exception('No common expiration found across put and call candidates.')\n\n    # Choose the expiration with the most candidates\n    selected_expiration = max(common_expirations, key=lambda exp: len(put_candidates_by_exp[exp]) + len(call_candidates_by_exp[exp]))\n    print(f\"Selected common expiration: {selected_expiration}\")\n    \n    return put_candidates_by_exp[selected_expiration], call_candidates_by_exp[selected_expiration]\n```\n\n----------------------------------------\n\nTITLE: Submitting Market and Limit Orders with Alpaca Broker API in Python\nDESCRIPTION: This snippet demonstrates how to submit market and limit orders using the Alpaca Broker API. It creates order requests for both types and submits them for a specific account.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker.client import BrokerClient\nfrom alpaca.broker.requests import MarketOrderRequest, LimitOrderRequest\nfrom alpaca.trading.enums import OrderSide, TimeInForce\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\n# account to make order for\naccount_id = \"c8f1ef5d-edc0-4f23-9ee4-378f19cb92a4\"\n\n# preparing orders\nmarket_order_data = MarketOrderRequest(\n                    symbol=\"BTCUSD\",\n                    qty=1,\n                    side=OrderSide.BUY,\n                    time_in_force=TimeInForce.GTC,\n                    commission=1\n            )\n\nlimit_order_data = LimitOrderRequest(\n                    symbol=\"SPY\",\n                    limit_price=300,\n                    qty=10,\n                    side=OrderSide.SELL,\n                    time_in_force=TimeInForce.FOK,\n                    commission=1\n              )\n\n# Market order\nmarket_order = broker_client.submit_order_for_account(\n                account_id=account_id,\n                order_data=market_order_data\n                )\n\n# Limit order\nlimit_order = broker_client.submit_order_for_account(\n                account_id=account_id,\n                order_data=limit_order_data\n               )\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Quotes Data with Alpaca-py\nDESCRIPTION: Creates a StockQuotesRequest to fetch historical quote data for a specific symbol from the past 5 days. The request specifies start time and result limit, then fetches and returns quote data as a DataFrame.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_33\n\nLANGUAGE: python\nCODE:\n```\n# get historical quotes by symbol\nreq = StockQuotesRequest(\n    symbol_or_symbols = [symbol],\n    start = now - timedelta(days = 5),                      # specify start datetime, default=the beginning of the current day.\n    # end=None,                                             # specify end datetime, default=now\n    limit = 2,                                              # specify limit\n)\nstock_historical_data_client.get_stock_quotes(req).df\n```\n\n----------------------------------------\n\nTITLE: Getting Latest Crypto Bar using CryptoHistoricalDataClient in Python\nDESCRIPTION: This method fetches the most recent bar data for a specified cryptocurrency. It provides aggregated price and volume information for the latest time period.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.data.historical.crypto.CryptoHistoricalDataClient.get_crypto_latest_bar\n```\n\n----------------------------------------\n\nTITLE: Filtering PUT Options Contracts with Date Ranges\nDESCRIPTION: Retrieves PUT options for SPY with expiration dates between 1 and 60 days in the future. Shows how to use date filtering and option type/style parameters in the request.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n# get put options contracts\nunderlying_symbols = [\"SPY\"]\n\n# specify expiration date range\nnow = datetime.now(tz = ZoneInfo(\"America/New_York\"))\nday1 = now + timedelta(days = 1)\nday60 = now + timedelta(days = 60)\n\nreq = GetOptionContractsRequest(\n    underlying_symbols = underlying_symbols,                     # specify underlying symbols\n    status = AssetStatus.ACTIVE,                                 # specify asset status: active (default)\n    expiration_date = None,                                      # specify expiration date (specified date + 1 day range)\n    expiration_date_gte = day1.date(),                           # we can pass date object\n    expiration_date_lte = day60.strftime(format = \"%Y-%m-%d\"),   # or string\n    root_symbol = None,                                          # specify root symbol\n    type = \"put\",                                                # specify option type: put\n    style = ExerciseStyle.AMERICAN,                              # specify option style: american\n    strike_price_gte = None,                                     # specify strike price range\n    strike_price_lte = None,                                     # specify strike price range\n    limit = 100,                                                 # specify limit\n    page_token = None,                                           # specify page\n)\nres = trade_client.get_option_contracts(req)\nres.option_contracts[:2]\n```\n\n----------------------------------------\n\nTITLE: Setting Up API Keys and Environment for Alpaca-py\nDESCRIPTION: Initializes API keys and environment settings for paper trading with Alpaca. Variables can be set directly or loaded from environment variables.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Please change the following to your own PAPER api key and secret\n# or set them as environment variables (ALPACA_API_KEY, ALPACA_SECRET_KEY).\n# You can get them from https://alpaca.markets/\n\napi_key = None\nsecret_key = None\n\n#### We use paper environment for this example ####\npaper = True # Please do not modify this. This example is for paper trading only.\n####\n\n# Below are the variables for development this documents\n# Please do not change these variables\ntrade_api_url = None\ntrade_api_wss = None\ndata_api_url = None\nstream_data_wss = None\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Crypto Orderbook using CryptoHistoricalDataClient in Python\nDESCRIPTION: This method retrieves the most recent orderbook data for a specified cryptocurrency. It provides information about current buy and sell orders in the market.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.data.historical.crypto.CryptoHistoricalDataClient.get_crypto_latest_orderbook\n```\n\n----------------------------------------\n\nTITLE: Installing Alpaca-py using Poetry\nDESCRIPTION: Command to add Alpaca-py as a dependency using Poetry package manager.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/getting_started.rst#2025-04-19_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npoetry add alpaca-py\n```\n\n----------------------------------------\n\nTITLE: Finding Call Options for Calendar Spread in Python\nDESCRIPTION: These lines demonstrate how to retrieve call options and find suitable options for a calendar spread using the previously defined functions. It uses parameters like underlying symbol, strike range, expiration range, and various option Greeks.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ncall_options = get_call_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration)\nmleg_option_data = find_call_options_for_calendar_spread(call_options, underlying_price, risk_free_rate, buying_power_limit, EXPIRY_RANGE, IV_RANGE, DELTA_RANGE, THETA_RANGE)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Calendar using Alpaca Trading API in Python\nDESCRIPTION: This code snippet demonstrates how to use the TradingClient.get_calendar() method to retrieve the market calendar. The market calendar contains records of all trading days, which is crucial for planning trading activities and understanding market schedules.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/calendar.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.trading.client.TradingClient.get_calendar\n```\n\n----------------------------------------\n\nTITLE: Implement Market Data Analysis - Python\nDESCRIPTION: Retrieves and visualizes historical market data for the underlying stock using Plotly for technical analysis. Includes candlestick chart implementation with customizable timeframes.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_stock_data(underlying_symbol, days=90):\n    today = datetime.now(timezone).date()\n    req = StockBarsRequest(\n        symbol_or_symbols=[underlying_symbol],\n        timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),\n        start=today - timedelta(days=days),\n    )\n    return stock_data_client.get_stock_bars(req).df\n\npriceData = get_stock_data(underlying_symbol, days=180).reset_index(level='symbol', drop=True)\n\nimport plotly.graph_objects as go\n\nfig = go.Figure(data=[go.Candlestick(x=priceData.index,\n                open=priceData['open'],\n                high=priceData['high'],\n                low=priceData['low'],\n                close=priceData['close'])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Crypto Quotes\nDESCRIPTION: Fetches historical quote data (bid/ask) for Bitcoin. This information shows the market depth and liquidity at different points in time.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_26\n\nLANGUAGE: python\nCODE:\n```\n# get historical quote by symbol\n# ref. https://docs.alpaca.markets/reference/cryptoquotes-1\nnow = datetime.now(ZoneInfo(\"America/New_York\"))\nreq = CryptoQuoteRequest(\n    symbol_or_symbols = [symbol],\n    start = now - timedelta(days = 1),                          # specify start datetime, default=the beginning of the current day.\n    # end_date=None,                                        # specify end datetime, default=now\n    limit = 2,                                               # specify limit\n)\ncrypto_historical_data_client.get_crypto_quotes(req).df\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Crypto Quote with CryptoHistoricalDataClient in Python\nDESCRIPTION: This method fetches the most recent quote data for a specified cryptocurrency. It provides up-to-date market information for the requested asset.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.data.historical.crypto.CryptoHistoricalDataClient.get_crypto_latest_quote\n```\n\n----------------------------------------\n\nTITLE: Fetching Historical Trades Data with Alpaca-py\nDESCRIPTION: Creates a StockTradesRequest to retrieve historical trade data for a specific symbol over the past 5 days. The request includes start time and a limit parameter, then fetches and returns trade data as a DataFrame.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_32\n\nLANGUAGE: python\nCODE:\n```\n# get historical trades by symbol\nreq = StockTradesRequest(\n    symbol_or_symbols = [symbol],\n    start = now - timedelta(days = 5),                          # specify start datetime, default=the beginning of the current day.\n    # end=None,                                             # specify end datetime, default=now\n    limit = 2,                                                # specify limit\n)\nstock_historical_data_client.get_stock_trades(req).df\n```\n\n----------------------------------------\n\nTITLE: Streaming Trade Updates with Websockets in Alpaca Trading API\nDESCRIPTION: This code demonstrates using TradingStream to listen for real-time trade updates. It sets up an asynchronous handler function to process incoming order status updates via websocket connection.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.stream import TradingStream\n\ntrading_stream = TradingStream('api-key', 'secret-key', paper=True)\n\nasync def update_handler(data):\n    # trade updates will arrive in our async handler\n    print(data)\n\n# subscribe to trade updates and supply the handler as a parameter\ntrading_stream.subscribe_trade_updates(update_handler)\n\n# start our websocket streaming\ntrading_stream.run()\n```\n\n----------------------------------------\n\nTITLE: Converting Option Data to Dictionary\nDESCRIPTION: This utility function ensures that option data is in dictionary format. It checks if the data is a Pydantic model with a model_dump() method, and if so, converts it to a dictionary. Otherwise, it returns the data as-is.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\ndef ensure_dict(option_data):\n    \"\"\"\n    Convert option_data to a dict using model_dump() if available (for Pydantic models),\n    otherwise return the data as-is.\n    \"\"\"\n    if hasattr(option_data, \"model_dump\"):\n        return option_data.model_dump()\n    return option_data\n```\n\n----------------------------------------\n\nTITLE: Retrieving and Visualizing Stock Historical Data with Polygon.io API in Python\nDESCRIPTION: Fetches historical daily price data for LMT stock using Polygon.io API, converts it to a pandas DataFrame, and creates an interactive candlestick chart using Plotly.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Daily bars of target stocks (one of LMT, RTX, NOC). The code below checks \"LMT\" stock.\ndataRequest = client.get_aggs(ticker=\"LMT\",\n                              multiplier=1,\n                              timespan='day',\n                              from_='2017-01-01',\n                              to='2021-01-31')\n\n# List of polygon agg objects to DataFrame\npriceData = pd.DataFrame(dataRequest)\n\n# Create Date column\npriceData['date'] = pd.to_datetime(priceData['timestamp'], unit='ms')\n\npriceData = priceData.set_index('date')\n\n# Generate plotly figure\nfig = go.Figure(data=[go.Candlestick(x=priceData.index,\n                open=priceData['open'],\n                high=priceData['high'],\n                low=priceData['low'],\n                close=priceData['close'])])\n\n# Open figure directly in the Colab notebook\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Finding Available 0DTE Put Options Within Strike Range\nDESCRIPTION: Creates a function to retrieve available 0DTE (zero days to expiration) put options for the underlying symbol within a specified strike price range. Uses Alpaca's API to fetch option contracts based on defined parameters.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Set the minimum and maximum strike prices based on the underlying price\nmin_strike = str(underlying_price * (1 - STRIKE_RANGE))\nmax_strike = str(underlying_price * (1 + STRIKE_RANGE))\n\n# Function to check for 0DTE options\ndef get_0DTE_options(underlying_symbol):\n    # Fetch the options data to add to the portfolio\n    req = GetOptionContractsRequest(underlying_symbols=[underlying_symbol],\n                                    strike_price_gte=min_strike,\n                                    strike_price_lte=max_strike,\n                                    status=AssetStatus.ACTIVE,\n                                    expiration_date=today,\n                                    root_symbol=underlying_symbol,\n                                    type=ContractType.PUT,\n                                    )\n\n    # Get option chain (zero_dte_option) of the underlying symbol\n    zero_dte_options = trade_client.get_option_contracts(req).option_contracts\n\n    return zero_dte_options\n```\n\n----------------------------------------\n\nTITLE: Retrieving Corporate Announcements using Alpaca Python SDK\nDESCRIPTION: This method allows fetching corporate announcements using the BrokerClient in the Alpaca Python SDK. It provides access to data about splits, mergers, and other corporate events.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/corporate-actions.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.get_corporate_announcements\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Option Quote with Alpaca in Python\nDESCRIPTION: This snippet demonstrates how to get the latest quote for an option using the OptionHistoricalDataClient. It requires specifying the symbol or symbols for the request.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_28\n\nLANGUAGE: python\nCODE:\n```\nreq = OptionLatestQuoteRequest(\n    symbol_or_symbols = [high_open_interest_contract.symbol],\n)\noption_historical_data_client.get_option_latest_quote(req)\n```\n\n----------------------------------------\n\nTITLE: Validating Option Candidates Against Specific Criteria in Python\nDESCRIPTION: Function to check if a candidate option meets specific filtering criteria for expiration date, implied volatility, delta, and theta values. Logs detailed information when a candidate fails any criterion for transparency and debugging.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\ndef check_greeks_iv_for_candidate_option(candidate: Dict[str, Any], criteria: Tuple, label: str) -> bool:\n    \"\"\"\n    Check whether a candidate option meets the filtering criteria.\n    The criteria is a tuple of (expiration_range, iv_range, delta_range, theta_range).\n    Logs detailed information if a candidate fails a criterion.\n    \"\"\"\n    expiration_range, iv_range, delta_range, theta_range = criteria\n\n    if not (expiration_range[0] <= candidate['remaining_days'] <= expiration_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails expiration condition for {label}: remaining_days {candidate['remaining_days']} not in {expiration_range}.\")\n        return False\n    if not (iv_range[0] <= candidate['initial_IV'] <= iv_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails IV condition for {label}: initial_IV {candidate['initial_IV']} not in {iv_range}.\")\n        return False\n    if not (delta_range[0] <= candidate['initial_delta'] <= delta_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails delta condition for {label}: initial_delta {candidate['initial_delta']} not in {delta_range}.\")\n        return False\n    if not (theta_range[0] <= candidate['initial_theta'] <= theta_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails theta condition for {label}: initial_theta {candidate['initial_theta']} not in {theta_range}.\")\n        return False\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Converting Option Data to Dictionary in Python\nDESCRIPTION: This utility function ensures that option data is in dictionary format, using the model_dump() method if available (for Pydantic models) or returning the data as-is if already a dictionary.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef ensure_dict(option_data):\n    \"\"\"\n    Convert option_data to a dict using model_dump() if available (for Pydantic models),\n    otherwise return the data as-is.\n    \"\"\"\n    if hasattr(option_data, \"model_dump\"):\n        return option_data.model_dump()\n    return option_data\n```\n\n----------------------------------------\n\nTITLE: Executing a Bear Put Spread Order\nDESCRIPTION: Executes the bear put spread order using the previously identified short and long put options and stores the result.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_20\n\nLANGUAGE: python\nCODE:\n```\nres = place_bear_put_spread_order(sp, lp)\nres\n```\n\n----------------------------------------\n\nTITLE: Installing Alpaca-py via pip\nDESCRIPTION: Command to install the Alpaca-py package using pip package manager.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/README.md#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install alpaca-py\n```\n\n----------------------------------------\n\nTITLE: Iron Condor Option Selection and Risk Calculation\nDESCRIPTION: Selects and validates options for an iron condor strategy, calculating risk for both put and call spreads while ensuring they meet buying power requirements.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_15\n\nLANGUAGE: python\nCODE:\n```\ncalls_for_selected_expiration = call_candidates_by_expiration[selected_expiration]\n\n# Pair up the put candidates\nchosen_short_put, chosen_long_put = pair_put_candidates(puts_for_selected_expiration['short_put'], puts_for_selected_expiration['long_put'], underlying_price)\n# Pair up the call candidates\nchosen_short_call, chosen_long_call = pair_call_candidates(calls_for_selected_expiration['short_call'], calls_for_selected_expiration['long_call'], underlying_price)\n\nif not (chosen_short_put and chosen_long_put and chosen_short_call and chosen_long_call):\n    raise Exception('Could not find a valid combination for the iron condor for the selected expiration.')\n\n# Check buying power requirements\n# For puts: maximum risk = (short_put strike - long_put strike) * option size\n# For calls: maximum risk = (long_call strike - short_call strike) * option size\noption_size = float(chosen_short_put['size'])\nrisk_put = (chosen_short_put['strike_price'] - chosen_long_put['strike_price']) * option_size\nrisk_call = (chosen_long_call['strike_price'] - chosen_short_call['strike_price']) * option_size\n\nprint(f\"Calculated bull put spread risk: {risk_put}, bear call spread risk: {risk_call}.\")\nif risk_put >= buying_power_limit or risk_call >= buying_power_limit:\n    raise Exception('Buying power limit exceeded for the iron condor risk.')\n\n# Return the four legs in the following order\niron_condor = [chosen_short_put, chosen_long_put, chosen_short_call, chosen_long_call]\nprint('\\nReturning iron condor legs:')\nfor leg in iron_condor:\n    print(f\"{leg['symbol']} at strike {leg['strike_price']}\")\nreturn iron_condor\n```\n\n----------------------------------------\n\nTITLE: Closing Existing Option and Equity Positions\nDESCRIPTION: Loops through all positions to identify and close any existing positions in the specified underlying stock or its options contracts. This ensures a clean slate before implementing the gamma scalping strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfor p in all_positions:\n    if p.asset_class == AssetClass.US_OPTION:\n        option_contract = trading_client.get_option_contract(p.symbol)\n        if option_contract.underlying_symbol == underlying_symbol:\n            print(f\"Liquidating {p.qty} of {p.symbol}\")\n            trading_client.close_position(p.symbol)\n    elif p.asset_class == AssetClass.US_EQUITY:\n        if p.symbol == underlying_symbol:\n            print(f\"Liquidating {p.qty} of {p.symbol}\")\n            trading_client.close_position(p.symbol)\n```\n\n----------------------------------------\n\nTITLE: Documenting ScreenerClient Class in RST\nDESCRIPTION: ReStructuredText documentation for the ScreenerClient class, showing the autoclass directive that will import and document the class and its initialization method.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/stock/screener.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: alpaca.data.historical.screener.ScreenerClient\n   :members: __init__\n```\n\n----------------------------------------\n\nTITLE: Subscribing to Real-Time Stock Quote Data in Python\nDESCRIPTION: Demonstrates how to subscribe to and handle real-time stock quote data using the StockDataStream client. It shows how to set up an asynchronous handler function and start the WebSocket connection.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/market_data.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data.live import StockDataStream\n\n\nwss_client = StockDataStream('api-key', 'secret-key')\n\n# async handler\nasync def quote_data_handler(data):\n    # quote data will arrive here\n    print(data)\n\nwss_client.subscribe_quotes(quote_data_handler, \"SPY\")\n\nwss_client.run()\n```\n\n----------------------------------------\n\nTITLE: Visualizing Stock Price Data with Plotly Candlestick Chart\nDESCRIPTION: Creates an interactive candlestick chart to visualize historical price action of the underlying stock. This helps traders analyze recent price trends before implementing the Iron Condor strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npriceData = get_stock_data(underlying_symbol, days=180)\n\n# List of stock agg objects while dropping the symbol column\npriceData = priceData.reset_index(level='symbol', drop=True)\n\nimport plotly.graph_objects as go\n\n# Bar chart for the stock price\nfig = go.Figure(data=[go.Candlestick(x=priceData.index,\n                open=priceData['open'],\n                high=priceData['high'],\n                low=priceData['low'],\n                close=priceData['close'])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Option Trade with OptionHistoricalDataClient in Python\nDESCRIPTION: Auto-generated method documentation for retrieving the latest option trade data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option/historical.rst#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: alpaca.data.historical.option.OptionHistoricalDataClient.get_option_latest_trade\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Crypto Quotes\nDESCRIPTION: Fetches the most recent quote data for Bitcoin. This provides the current market state with latest bid and ask prices and sizes.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n# get latest quotes by symbol\nreq = CryptoLatestQuoteRequest(\n    symbol_or_symbols = [symbol],\n)\nres = crypto_historical_data_client.get_crypto_latest_quote(req)\nres\n```\n\n----------------------------------------\n\nTITLE: Installing Alpaca-py using pip\nDESCRIPTION: Command to install Alpaca-py using pip package manager. Requires Python 3.7+.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/getting_started.rst#2025-04-19_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\npip install alpaca-py\n```\n\n----------------------------------------\n\nTITLE: Order Cancellation Management in Python\nDESCRIPTION: Handles order cancellation logic for unfilled multi-leg options orders\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nq1 = trade_client.get_order_by_client_id(res.client_order_id)\n\nif q1.status != OrderStatus.FILLED:\n    trade_client.cancel_order_by_id(res.id)\n    print(f\"Canceled order: {res}\")\n\nelse:\n    print(\"Order is already filled.\")\n```\n\n----------------------------------------\n\nTITLE: Initializing Alpaca Trading Client\nDESCRIPTION: Creates an instance of TradingClient using the API credentials for connecting to Alpaca's trading platform.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# setup client\ntrade_client = TradingClient(api_key=api_key, secret_key=secret_key, paper=paper, url_override=trade_api_url)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Open Positions\nDESCRIPTION: Fetches all currently open positions across all assets. This provides an overview of all active investments in the account.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# get all open positions\n# ref. https://docs.alpaca.markets/reference/getallopenpositions-1\npositions = trade_client.get_all_positions()\npositions\n```\n\n----------------------------------------\n\nTITLE: Retrieving Option Chain with OptionHistoricalDataClient in Python\nDESCRIPTION: Auto-generated method documentation for fetching option chain data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option/historical.rst#2025-04-19_snippet_7\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: alpaca.data.historical.option.OptionHistoricalDataClient.get_option_chain\n```\n\n----------------------------------------\n\nTITLE: Executing the 0DTE Trading Strategy in Python\nDESCRIPTION: Main execution block that initiates the 0DTE trading strategy with predefined parameters. It includes error handling to catch and display any exceptions that might occur during strategy execution.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n# Main block to place and monitor a single 0DTE trade\nif __name__ == '__main__':\n    try:\n        trade_0DTE_options(underlying_symbol, risk_free_rate, OI_THRESHOLD, SHORT_PUT_DELTA_RANGE, LONG_PUT_DELTA_RANGE, MIN_CREDIT_PERCENTAGE, DELTA_STOP_LOSS_THRES, TARGET_STOP_LOSS_PERCENTAGE) # Enter the trade once and monitor it until exit\n    except Exception as e:\n        print(f\"Error: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Analyzing Historical Stock Data and Creating Candlestick Chart with Plotly in Python\nDESCRIPTION: This snippet retrieves historical stock data using Alpaca's API, processes it, and creates a candlestick chart using Plotly. It demonstrates how to visualize stock price trends over a specified time period.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-long-straddle.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Get the historical data for the underlying stock by symbol and timeframe\n# ref. https://alpaca.markets/sdks/python/api_reference/data/option/historical.html\ndef get_stock_data(underlying_symbol, days=90):\n    today = datetime.now(timezone).date()\n    req = StockBarsRequest(\n        symbol_or_symbols=[underlying_symbol],\n        timeframe=TimeFrame(amount=1, unit=TimeFrameUnit.Day),     # specify timeframe\n        start=today - timedelta(days=days),                          # specify start datetime, default=the beginning of the current day.\n    )\n    return stock_data_client.get_stock_bars(req).df\n\n# List of stock agg objects while dropping the symbol column\npriceData = get_stock_data(underlying_symbol, days=180).reset_index(level='symbol', drop=True)\n\nimport plotly.graph_objects as go\n\n# Bar chart for the stock price\nfig = go.Figure(data=[go.Candlestick(x=priceData.index,\n                open=priceData['open'],\n                high=priceData['high'],\n                low=priceData['low'],\n                close=priceData['close'])])\n\nfig.show()\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Calendar with Alpaca Broker Client in Python\nDESCRIPTION: This snippet demonstrates the use of the get_calendar method from the BrokerClient class in the Alpaca Python SDK. The method is used to retrieve the market calendar, which likely includes information about trading days and market hours.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/calendar.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: alpaca.broker.client.BrokerClient.get_calendar\n```\n\n----------------------------------------\n\nTITLE: Initializing the Alpaca Trading Client\nDESCRIPTION: Creates a TradingClient instance using the provided API credentials. The client is configured for paper trading to ensure no real money is at risk during the examples.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# setup clients\ntrade_client = TradingClient(api_key=api_key, secret_key=secret_key, paper=paper, url_override=trade_api_url)\n```\n\n----------------------------------------\n\nTITLE: Installing alpaca-py Package if Not Available\nDESCRIPTION: Checks if the alpaca-py package is installed and installs it if not present. This ensures the required dependency is available for the notebook.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# install alpaca-py if it is not available\ntry:\n    import alpaca\nexcept ImportError:\n    !python3 -m pip install alpaca-py\n    import alpaca\n```\n\n----------------------------------------\n\nTITLE: Searching for Option Contracts\nDESCRIPTION: Queries Alpaca's API to find suitable call option contracts based on predefined criteria: active status, expiration date range, minimum strike price, and limiting results to 5 contracts for the underlying symbol.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n# Search for option contracts to add to the portfolio\nreq = GetOptionContractsRequest(\n    underlying_symbols=[underlying_symbol],\n    status=AssetStatus.ACTIVE,\n    expiration_date_gte=min_expiration,\n    expiration_date_lte=max_expiration,\n    root_symbol=underlying_symbol,\n    type=ContractType.CALL,\n    strike_price_gte=str(min_strike),\n    limit=5,\n)\n\noption_chain_list = trading_client.get_option_contracts(req).option_contracts\n```\n\n----------------------------------------\n\nTITLE: Fetching Individual Option Contract in Alpaca-py\nDESCRIPTION: This method retrieves details for a specific option contract from Alpaca. It is part of the TradingClient class in the alpaca.trading.client module.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/contracts.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.get_option_contract\n```\n\n----------------------------------------\n\nTITLE: Importing Required Alpaca-py Modules\nDESCRIPTION: Imports all necessary modules from alpaca-py for trading, data handling, and streaming. These modules provide access to Alpaca's trading and data APIs.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\n\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\nfrom alpaca.data.historical.corporate_actions import CorporateActionsClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient\nfrom alpaca.trading.stream import TradingStream\nfrom alpaca.data.live.stock import StockDataStream\n\nfrom alpaca.data.requests import (\n    CorporateActionsRequest,\n    StockBarsRequest,\n    StockQuotesRequest,\n    StockTradesRequest,\n)\nfrom alpaca.trading.requests import (\n    ClosePositionRequest,\n    GetAssetsRequest,\n    GetOrdersRequest,\n    LimitOrderRequest,\n    MarketOrderRequest,\n    StopLimitOrderRequest,\n    StopLossRequest,\n    StopOrderRequest,\n    TakeProfitRequest,\n    TrailingStopOrderRequest,\n)\nfrom alpaca.trading.enums import (\n    AssetExchange,\n    AssetStatus,\n    OrderClass,\n    OrderSide,\n    OrderType,\n    QueryOrderStatus,\n    TimeInForce,\n)\n```\n\n----------------------------------------\n\nTITLE: Documenting get_most_actives Method in RST\nDESCRIPTION: ReStructuredText documentation for the get_most_actives method of the ScreenerClient class, which retrieves the most active stocks in the market.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/stock/screener.rst#2025-04-19_snippet_1\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: alpaca.data.historical.screener.ScreenerClient.get_most_actives\n```\n\n----------------------------------------\n\nTITLE: Retrieving Options Data with Alpaca\nDESCRIPTION: Fetches options data for a specified underlying symbol within strike and expiration constraints. This is a basic building block for the options strategy implementation.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\nput_options = get_options(underlying_symbol, min_strike, max_strike, min_expiration, max_expiration, ContractType.PUT)\n```\n\n----------------------------------------\n\nTITLE: Fetching Option Trades using OptionHistoricalDataClient in Python\nDESCRIPTION: Auto-generated method documentation for retrieving historical option trade data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option/historical.rst#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: alpaca.data.historical.option.OptionHistoricalDataClient.get_option_trades\n```\n\n----------------------------------------\n\nTITLE: Loading API Credentials from Environment Variables\nDESCRIPTION: Retrieves API credentials from environment variables if not explicitly set. This allows for secure credential management without hardcoding values.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nif api_key is None:\n    api_key = os.environ.get('ALPACA_API_KEY')\n\nif secret_key is None:\n    secret_key = os.environ.get('ALPACA_SECRET_KEY')\n```\n\n----------------------------------------\n\nTITLE: Upgrading pip to resolve installation errors\nDESCRIPTION: Command to upgrade pip if facing errors during Alpaca-py installation.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/getting_started.rst#2025-04-19_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npip install --upgrade pip\n```\n\n----------------------------------------\n\nTITLE: Validating Option Open Interest in Python\nDESCRIPTION: A function that checks if an option contract has sufficient open interest based on a provided threshold. It returns False if the open interest is missing or below the threshold.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef validate_sufficient_OI(option_data, OI_THRESHOLD):\n    '''Ensure that the option has the required fields and sufficient open interest.'''\n    if option_data.open_interest is None or option_data.open_interest_date is None:\n        return False\n    if float(option_data.open_interest) <= OI_THRESHOLD:\n        return False\n    return True\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Single-Symbol Crypto Quote Data in Python\nDESCRIPTION: Illustrates how to fetch the latest quote data for a single cryptocurrency symbol using the CryptoHistoricalDataClient. It emphasizes the need to use the symbol as a key to access data, even for single-symbol requests.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/market_data.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.data.historical import CryptoHistoricalDataClient\nfrom alpaca.data.requests import CryptoLatestQuoteRequest\n\n# no keys required\nclient = CryptoHistoricalDataClient()\n\n# single symbol request\nrequest_params = CryptoLatestQuoteRequest(symbol_or_symbols=\"ETH/USD\")\n\nlatest_quote = client.get_crypto_latest_quote(request_params)\n\n# must use symbol to access even though it is single symbol\nlatest_quote[\"ETH/USD\"].ask_price\n```\n\n----------------------------------------\n\nTITLE: Retrieving Specific Trade Document by ID for Account in Alpaca Broker API (Python)\nDESCRIPTION: This method retrieves a specific trade document by its ID for a given account. It is part of the BrokerClient class in the Alpaca Broker API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/documents.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.get_trade_document_for_account_by_id\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Clock Data using Alpaca Trading Client\nDESCRIPTION: Demonstrates how to get the current market clock status using the TradingClient.get_clock() method. The clock endpoint returns information about market hours and trading status for a given day.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/clock.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclient.get_clock()\n```\n\n----------------------------------------\n\nTITLE: Initializing OptionHistoricalDataClient and Retrieving Option Bars in Python\nDESCRIPTION: This code initializes an OptionHistoricalDataClient and demonstrates how to retrieve historical option data for backtesting purposes. It specifies the request parameters including symbol, timeframe, and date range.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n# Initialize the Option Historical Data Client\noption_historical_data_client = OptionHistoricalDataClient(\n    api_key=API_KEY, \n    secret_key=API_SECRET, \n    url_override=BASE_URL\n)\n\n# Define the request parameters\nreq = OptionBarsRequest(\n    symbol_or_symbols=mleg_option_data[0][\"symbol\"],\n    timeframe=TimeFrame.Day,  # Choose timeframe (Minute, Hour, Day, etc.)\n    start=\"2024-09-10\",  # Start date\n    end=\"2025-02-17\"  # End date\n)\n\noption_historical_data_client.get_option_bars(req)\n```\n\n----------------------------------------\n\nTITLE: Fetching Crypto Quotes with CryptoHistoricalDataClient in Python\nDESCRIPTION: This method retrieves historical quote data for cryptocurrencies. It probably allows filtering by time range and specific cryptocurrencies.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.data.historical.crypto.CryptoHistoricalDataClient.get_crypto_quotes\n```\n\n----------------------------------------\n\nTITLE: Importing Required Modules for Options Trading\nDESCRIPTION: Imports necessary modules and classes from Alpaca and Python's standard library for options trading functionality, including date handling, trading client, and order request types.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nimport calendar\n\nfrom alpaca.trading.client import TradingClient\n\nfrom alpaca.trading.requests import (\n    GetOptionContractsRequest,\n    MarketOrderRequest,\n    OptionLegRequest,\n    ReplaceOrderRequest,\n    LimitOrderRequest,\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    ExerciseStyle,\n    OrderSide,\n    OrderStatus,\n    TimeInForce,\n    OrderClass,\n    ContractType\n)\nfrom alpaca.common.exceptions import APIError\n```\n\n----------------------------------------\n\nTITLE: Loading API Credentials from Environment Variables\nDESCRIPTION: Retrieves API credentials from environment variables if not already specified in the code.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nif api_key is None:\n    api_key = os.environ.get('ALPACA_API_KEY')\n\nif secret_key is None:\n    secret_key = os.environ.get('ALPACA_SECRET_KEY')\n```\n\n----------------------------------------\n\nTITLE: Documenting get_market_movers Method in RST\nDESCRIPTION: ReStructuredText documentation for the get_market_movers method of the ScreenerClient class, which retrieves stocks with significant price movements.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/stock/screener.rst#2025-04-19_snippet_2\n\nLANGUAGE: rst\nCODE:\n```\n.. automethod:: alpaca.data.historical.screener.ScreenerClient.get_market_movers\n```\n\n----------------------------------------\n\nTITLE: Converting Option Data to Dictionary in Python\nDESCRIPTION: Utility function to ensure option data is in dictionary format. Checks if the input is a Pydantic model with model_dump() method and converts it if necessary, otherwise returns the data as-is.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ndef ensure_dict(option_data):\n    \"\"\"\n    Convert option_data to a dict using model_dump() if available (for Pydantic models),\n    otherwise return the data as-is.\n    \"\"\"\n    if hasattr(option_data, \"model_dump\"):\n        return option_data.model_dump()\n    return option_data\n```\n\n----------------------------------------\n\nTITLE: Getting Option Snapshot using OptionHistoricalDataClient in Python\nDESCRIPTION: Auto-generated method documentation for retrieving option snapshot data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option/historical.rst#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: alpaca.data.historical.option.OptionHistoricalDataClient.get_option_snapshot\n```\n\n----------------------------------------\n\nTITLE: Calling Roll/Rinse Option Function in Python\nDESCRIPTION: This code snippet demonstrates how to call the roll_rinse_option function with various parameters to evaluate and potentially roll or rinse options based on current market conditions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\nroll_rinse_option(mleg_option_data, True, TARGET_PROFIT_PERCENTAGE, bollinger_bands, underlying_symbol, risk_free_rate, buying_power_limit, min_strike, max_strike, min_expiration, max_expiration, EXPIRY_RANGE, IV_RANGE, DELTA_RANGE, THETA_RANGE)\n```\n\n----------------------------------------\n\nTITLE: Installing Alpaca-py and Setting Up Environment for Options Trading\nDESCRIPTION: Sets up the Python environment by installing the alpaca-py package and importing necessary libraries for options trading, including mathematical libraries for options calculations and Alpaca's specific modules for trading and data retrieval.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `alpaca-py` and import it\n!python3 -m pip install --upgrade alpaca-py\n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport time\nfrom scipy.optimize import brentq\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nfrom typing import Any, Dict, List, Optional, Tuple\n\nimport alpaca\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import StockBarsRequest, OptionLatestQuoteRequest, OptionSnapshotRequest\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (\n    MarketOrderRequest,\n    GetOptionContractsRequest,\n    MarketOrderRequest,\n    OptionLegRequest,\n    ClosePositionRequest,\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    OrderSide,\n    OrderClass,\n    OrderStatus,\n    TimeInForce,\n    ContractType,\n)\n```\n\n----------------------------------------\n\nTITLE: Initializing TradingClient with Paper Trading in Python\nDESCRIPTION: This snippet demonstrates how to instantiate a TradingClient with paper trading enabled. The paper parameter is set to True to use Alpaca's paper trading sandbox environment for testing strategies without real money.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\n\n# paper=True enables paper trading\ntrading_client = TradingClient('api-key', 'secret-key', paper=True)\n```\n\n----------------------------------------\n\nTITLE: Closing a Specific Position for an Account using Alpaca Broker API in Python\nDESCRIPTION: This method closes a specific position for a given account and symbol using the Alpaca Broker API. It requires authentication and may have additional parameters for controlling the closing process.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/trading/positions.rst#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nalpaca.broker.client.BrokerClient.close_position_for_account\n```\n\n----------------------------------------\n\nTITLE: Creating Batch Journal Entries via BrokerClient\nDESCRIPTION: Method reference for creating multiple journal entries in a batch using the Alpaca broker client.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/journals.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.create_batch_journal\n```\n\n----------------------------------------\n\nTITLE: Setting Up Symbol for Crypto Trading Examples\nDESCRIPTION: Defines the cryptocurrency symbol to be used in subsequent order examples. This example uses BTC/USD (Bitcoin) for demonstration.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n# we will place orders which Alapca trading platform supports\n# - order types for crypto: market, limit, stop_limit\n# - time_in_force for crypto: gtc, ioc.\n# please refer to the following documents for more details\n# ref. https://docs.alpaca.markets/docs/orders-at-alpaca\n# ref. https://docs.alpaca.markets/reference/postorder\n\n\n# we will place orders for symbol: BTC/USD in this example\nsymbol = \"BTC/USD\"\n```\n\n----------------------------------------\n\nTITLE: Retrieving Latest Option Quote using OptionHistoricalDataClient in Python\nDESCRIPTION: Auto-generated method documentation for fetching the latest option quote data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option/historical.rst#2025-04-19_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: alpaca.data.historical.option.OptionHistoricalDataClient.get_option_latest_quote\n```\n\n----------------------------------------\n\nTITLE: Liquidating Pre-existing Positions\nDESCRIPTION: Retrieves all current positions from the Alpaca account to liquidate any pre-existing positions related to the target underlying symbol before implementing the strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Liquidate exsiting positions\nprint(f\"Liquidating pre-existing positions related to underlying {underlying_symbol}\")\nall_positions = trading_client.get_all_positions()\n```\n\n----------------------------------------\n\nTITLE: Initializing Dependencies and Alpaca Clients for Options Trading\nDESCRIPTION: Sets up the necessary libraries and initializes Alpaca API clients for trading and data retrieval. Includes imports for data analysis, options calculations, and Alpaca's trading and data clients.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-put-spread.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `alpaca-py` and import it\n# !python3 -m pip install --upgrade alpaca-py\n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport time\nfrom scipy.optimize import brentq\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nfrom dotenv import load_dotenv\nimport os\nfrom typing import Any, Dict, List, Optional, Tuple\n\nimport alpaca\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import StockBarsRequest, OptionLatestQuoteRequest, OptionSnapshotRequest\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (\n    MarketOrderRequest,\n    GetOptionContractsRequest,\n    MarketOrderRequest,\n    OptionLegRequest,\n    ClosePositionRequest,\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    OrderSide,\n    OrderClass,\n    OrderStatus,\n    TimeInForce,\n    ContractType,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Orders for a Symbol\nDESCRIPTION: Gets a list of all orders (open, filled, canceled, etc.) for the specified symbol (SPY). This demonstrates how to query order history for a specific asset.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# get a list of orders including closed (e.g. filled) orders by specifying symbol\nreq = GetOrdersRequest(\n    status = QueryOrderStatus.ALL,\n    symbols = [symbol]\n)\norders = trade_client.get_orders(req)\norders\n```\n\n----------------------------------------\n\nTITLE: Getting Current Stock Prices with Alpaca API in Python\nDESCRIPTION: Sets up the date range for options expiration and retrieves the current market prices of selected defense contractor stocks (LMT, RTX, NOC) using Alpaca's StockHistoricalDataClient.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-polygon-alpaca.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# Set the expiration date range for the options\nmin_expiration = today + timedelta(days=7)\nmax_expiration = today + timedelta(days=35)\n\n# Get the latest price of the underlying stock\ndef get_underlying_price(symbol):\n    # Get the latest trade for the underlying stock\n    underlying_trade_request = StockLatestTradeRequest(symbol_or_symbols=symbol)\n    underlying_trade_response = stock_data_client.get_stock_latest_trade(underlying_trade_request)\n    return underlying_trade_response[symbol].price\n\n# Get the latest price of the underlying stock\nfor symbol in stock_symbols:\n    # Get the latest price of the underlying stock\n    underlying_price = get_underlying_price(symbol)\n    print(f\"\\n{symbol} stock price: {underlying_price}\")\n```\n\n----------------------------------------\n\nTITLE: Cancelling All Open Orders\nDESCRIPTION: Cancels all open orders across all symbols. This is useful for quickly clearing pending orders when changing trading strategies or during market volatility.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n# cancel all open orders\ntrade_client.cancel_orders()\n```\n\n----------------------------------------\n\nTITLE: Calculating Next Earnings Date for TSLA\nDESCRIPTION: Determines the next anticipated earnings date for Tesla by finding the Wednesday of the third week in the next quarter month (January, April, July, or October).\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Let us find the earnings date for TSLA closest to today\n# Typically these occur OCT, JAN, APR, or JUL around the middle of the 3rd week of the month\n\n\ntoday = datetime.now(tz=ZoneInfo(\"America/New_York\"))\n\nearnings_month = None\nearnings_day = None\nearnings_year = today.year\n\n# find next earnings date month\nif today.month < 4:\n    earnings_month = 4\nelif today.month < 7:\n    earnings_month = 7\nelif today.month < 10:\n    earnings_month = 10\nelse:\n    earnings_year += 1\n    earnings_month = 1\n\n# find wednesday of the 3rd week of the month\nearnings_day = calendar.monthcalendar(earnings_year, earnings_month)[-2][calendar.WEDNESDAY]\n\nearnings_date = datetime(earnings_year, earnings_month, earnings_day)\n\nearnings_date\n```\n\n----------------------------------------\n\nTITLE: Getting Crypto Trades using CryptoHistoricalDataClient in Python\nDESCRIPTION: This method is used to obtain historical trade data for cryptocurrencies. It likely allows specifying the time range and specific cryptocurrencies of interest.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.data.historical.crypto.CryptoHistoricalDataClient.get_crypto_trades\n```\n\n----------------------------------------\n\nTITLE: Importing Required Libraries for Gamma Scalping Strategy\nDESCRIPTION: Imports necessary Python libraries for implementing a gamma scalping strategy, including date/time handling, numerical computation, statistics, and Alpaca API clients for options and stock data access and trading.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-gamma-scalping.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom datetime import datetime, timedelta\nimport time\nimport asyncio\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nfrom scipy.optimize import brentq\nimport nest_asyncio\n\nfrom alpaca.data.historical.option import OptionHistoricalDataClient, OptionLatestQuoteRequest\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.trading.models import TradeUpdate\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.stream import TradingStream\nfrom alpaca.trading.requests import GetOptionContractsRequest, MarketOrderRequest\nfrom alpaca.trading.enums import AssetStatus, ContractType, AssetClass\n```\n\n----------------------------------------\n\nTITLE: Installing and Importing Required Libraries for Options Trading with Alpaca\nDESCRIPTION: This code sets up the necessary environment by installing alpaca-py and importing various libraries for data manipulation, statistical analysis, and interaction with Alpaca's trading and data APIs.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-calendar-spread.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!python3 -m pip install --upgrade alpaca-py\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport alpaca\nimport time\nfrom scipy.optimize import brentq\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\n\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import StockBarsRequest, OptionLatestQuoteRequest, OptionChainRequest, OptionBarsRequest\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (\n    MarketOrderRequest,\n    GetOptionContractsRequest,\n    MarketOrderRequest,\n    OptionLegRequest,\n    ClosePositionRequest,\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    ExerciseStyle,\n    OrderSide,\n    OrderClass,\n    OrderStatus,\n    OrderType,\n    TimeInForce,\n    QueryOrderStatus,\n    ContractType\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Corporate Actions using TradingClient\nDESCRIPTION: Endpoint documentation for retrieving multiple corporate announcements through the Alpaca trading API. Provides functionality to fetch data about splits, mergers and other corporate events.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/corporate-actions.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.get_corporate_announcements\n```\n\n----------------------------------------\n\nTITLE: Initializing Crypto Historical Data Client\nDESCRIPTION: Creates a client for accessing historical cryptocurrency market data. This client is used to retrieve past price information, quotes, and trades.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_24\n\nLANGUAGE: python\nCODE:\n```\n# setup crypto historical data client\ncrypto_historical_data_client = CryptoHistoricalDataClient()\n\nsymbol=\"BTC/USD\"\n```\n\n----------------------------------------\n\nTITLE: Setting Symbol Format for Position Queries\nDESCRIPTION: Adjusts the symbol format for position-related API calls. The position endpoints require the symbol without the '/' character.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n# '/' not being supported for position calls\nsymbol=\"BTCUSD\"\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateBankRequest Class in Python\nDESCRIPTION: This snippet documents the CreateBankRequest class from the alpaca.broker.requests module. It is used for creating bank relationships in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_13\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.CreateBankRequest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Crypto Bars using CryptoHistoricalDataClient in Python\nDESCRIPTION: This method is used to fetch historical bar data for cryptocurrencies. It likely allows specifying the time range and granularity of the data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.data.historical.crypto.CryptoHistoricalDataClient.get_crypto_bars\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Journals via BrokerClient\nDESCRIPTION: Method reference for fetching all journal entries using the Alpaca broker client.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/journals.rst#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.get_journals\n```\n\n----------------------------------------\n\nTITLE: Initialize Alpaca Trading Environment - Python\nDESCRIPTION: Sets up the required dependencies and initializes Alpaca API clients for trading and data access. Includes package installations and client configuration for both paper trading and data retrieval.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n!python3 -m pip install --upgrade alpaca-py\n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport time\nfrom scipy.optimize import brentq\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nfrom typing import Any, Dict, List, Optional, Tuple\n\nimport alpaca\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import StockBarsRequest, OptionLatestQuoteRequest, OptionSnapshotRequest\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.trading.requests import (\n    MarketOrderRequest,\n    GetOptionContractsRequest,\n    MarketOrderRequest,\n    OptionLegRequest,\n    ClosePositionRequest,\n)\nfrom alpaca.trading.enums import (\n    AssetStatus,\n    OrderSide,\n    OrderClass,\n    OrderStatus,\n    TimeInForce,\n    ContractType,\n)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Position by Asset ID\nDESCRIPTION: Fetches position details using the asset's unique identifier instead of the symbol. This provides an alternative way to access position information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# get positions by asset_id\ntrade_client.get_open_position(symbol_or_asset_id=position.asset_id)\n```\n\n----------------------------------------\n\nTITLE: Configure Alpaca API Credentials - Python\nDESCRIPTION: Sets up API credentials for Alpaca trading using Google Colab's secure storage. Initializes trading and data clients for both options and stock data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom google.colab import userdata\nAPI_KEY = userdata.get('ALPACA_API_KEY')\nAPI_SECRET = userdata.get('ALPACA_SECRET_KEY')\nBASE_URL = None\nPAPER = True\n\ntrade_client = TradingClient(api_key=API_KEY, secret_key=API_SECRET, paper=PAPER, url_override=BASE_URL)\noption_historical_data_client = OptionHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET, url_override=BASE_URL)\nstock_data_client = StockHistoricalDataClient(api_key=API_KEY, secret_key=API_SECRET)\n```\n\n----------------------------------------\n\nTITLE: Retrieving Historical Crypto Price Bars\nDESCRIPTION: Fetches historical price data (OHLCV bars) for Bitcoin with customized timeframe and date range. This data is useful for technical analysis and strategy development.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_25\n\nLANGUAGE: python\nCODE:\n```\n# get historical bars by symbol\n# ref. https://docs.alpaca.markets/reference/cryptobars-1\nnow = datetime.now(ZoneInfo(\"America/New_York\"))\nreq = CryptoBarsRequest(\n    symbol_or_symbols = [symbol],\n    timeframe=TimeFrame(amount = 1, unit = TimeFrameUnit.Hour), # specify timeframe\n    start = now - timedelta(days = 1),                          # specify start datetime, default=the beginning of the current day.\n    # end_date=None,                                        # specify end datetime, default=now\n    limit = 2,                                               # specify limit\n)\ncrypto_historical_data_client.get_crypto_bars(req).df\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Support for Jupyter Notebook\nDESCRIPTION: Sets up nested asyncio to allow running asynchronous code within Jupyter notebook cells. This is necessary for the streaming data features.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# to run async code in jupyter notebook\nimport nest_asyncio\nnest_asyncio.apply()\n```\n\n----------------------------------------\n\nTITLE: Initializing OptionHistoricalDataClient in Python\nDESCRIPTION: Auto-generated class documentation for the OptionHistoricalDataClient class constructor.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option/historical.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.historical.option.OptionHistoricalDataClient\n   :members: __init__\n```\n\n----------------------------------------\n\nTITLE: Retrieving Trade Documents for Account in Alpaca Broker API (Python)\nDESCRIPTION: This method retrieves trade documents for a specified account. It is part of the BrokerClient class in the Alpaca Broker API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/documents.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.get_trade_documents_for_account\n```\n\n----------------------------------------\n\nTITLE: Setting Up Logging for Options Strategy Execution\nDESCRIPTION: Configures Python's logging module for tracking the options strategy execution. This setup allows for detailed execution logs with customizable verbosity for debugging and monitoring the Iron Butterfly implementation.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n# Configure logging\nimport logging\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\nlogger.setLevel(logging.DEBUG)\n```\n\n----------------------------------------\n\nTITLE: Documenting StockDataStream Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the StockDataStream class. It includes all members and inherited members of the class.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/stock/live.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.live.stock.StockDataStream\n   :members:\n   :inherited-members:\n```\n\n----------------------------------------\n\nTITLE: Documenting UploadW8BenDocumentRequest Class in Python\nDESCRIPTION: This snippet documents the UploadW8BenDocumentRequest class from the alpaca.broker.requests module. It is specifically used for uploading W8-BEN documents to the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_10\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.UploadW8BenDocumentRequest\n```\n\n----------------------------------------\n\nTITLE: Documenting UpdatableContact Class in Python\nDESCRIPTION: This snippet documents the UpdatableContact class from the alpaca.broker.requests module. It is likely used as part of the account update process to modify contact information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.UpdatableContact\n```\n\n----------------------------------------\n\nTITLE: Creating documentation table of contents with Sphinx toctree directive in restructuredtext\nDESCRIPTION: This code snippet uses the Sphinx toctree directive to create a structured table of contents for the Alpaca-py documentation. It sets the maximum depth to 2 and includes links to separate documentation files for data API, trading API, broker API, and common components.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/index.rst#2025-04-19_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   data_api\n   trading_api\n   broker_api\n   common\n```\n\n----------------------------------------\n\nTITLE: Importing Corporate Actions Client - Python\nDESCRIPTION: Sphinx documentation reference for the CorporateActionsClient class initialization documentation. The client provides access to historical corporate actions data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/corporate_actions/historical.rst#2025-04-19_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. autoclass:: alpaca.data.historical.corporate_actions.CorporateActionsClient\n    :members: __init__\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateACHRelationshipRequest Class in Python\nDESCRIPTION: This snippet documents the CreateACHRelationshipRequest class from the alpaca.broker.requests module. It is used for creating ACH relationships in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_11\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.CreateACHRelationshipRequest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Trading Symbol\nDESCRIPTION: Defines the symbol (SPY) that will be used for all trading examples. SPY is an ETF that tracks the S&P 500 index.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n# we will place orders which Alapca trading platform supports\n# - order classes: simple, bracket, oco, oto\n# - order types: market, limit, stop, stop_limit, trailing_stop\n#\n# please refer to the following documents for more details\n# ref. https://docs.alpaca.markets/docs/orders-at-alpaca\n# ref. https://docs.alpaca.markets/reference/postorder\n#\n# we will also use fractional trading capability of Alpaca trading platform in this example\n# ref. https://docs.alpaca.markets/docs/fractional-trading\n\n# we will place orders for symbol: SPY in this example\nsymbol = \"SPY\"\n```\n\n----------------------------------------\n\nTITLE: Initializing CryptoHistoricalDataClient in Python\nDESCRIPTION: This snippet shows the initialization of the CryptoHistoricalDataClient class. It is used to create an instance of the client for accessing historical cryptocurrency data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. autoclass:: alpaca.data.historical.crypto.CryptoHistoricalDataClient\n   :members: __init__\n```\n\n----------------------------------------\n\nTITLE: Documenting UpdatableTrustedContact Class in Python\nDESCRIPTION: This snippet documents the UpdatableTrustedContact class from the alpaca.broker.requests module. It is likely used as part of the account update process to modify trusted contact information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.UpdatableTrustedContact\n```\n\n----------------------------------------\n\nTITLE: Checking Option Candidate Conditions in Python\nDESCRIPTION: This function checks whether a candidate option meets the specified filtering criteria for expiration, implied volatility, delta, and vega. It logs detailed information if a candidate fails a criterion.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bear-put-spread.ipynb#2025-04-19_snippet_13\n\nLANGUAGE: python\nCODE:\n```\ndef check_candidate_option_conditions(candidate, criteria, label):\n    \"\"\"\n    Check whether a candidate option meets the filtering criteria.\n    The criteria is a tuple of (expiration_range, iv_range, delta_range, vega_range).\n    Logs detailed information if a candidate fails a criterion.\n    \"\"\"\n    expiration_range, iv_range, delta_range, vega_range = criteria\n\n    if not (expiration_range[0] <= candidate['remaining_days'] <= expiration_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails expiration condition for {label}: remaining_days {candidate['remaining_days']} not in {expiration_range}.\")\n        return False\n    if not (iv_range[0] <= candidate['initial_IV'] <= iv_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails IV condition for {label}: initial_IV {candidate['initial_IV']} not in {iv_range}.\")\n        return False\n    if not (delta_range[0] <= candidate['initial_delta'] <= delta_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails delta condition for {label}: initial_delta {candidate['initial_delta']} not in {delta_range}.\")\n        return False\n    if not (vega_range[0] <= candidate['initial_vega'] <= vega_range[1]):\n        logger.debug(f\"{candidate['symbol']} fails vega condition for {label}: initial_vega {candidate['initial_vega']} not in {vega_range}.\")\n        return False\n\n    return True\n```\n\n----------------------------------------\n\nTITLE: Documenting LimitOrderRequest Class in Python\nDESCRIPTION: This snippet documents the LimitOrderRequest class from the alpaca.broker.requests module. It is used for placing limit orders in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_19\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.LimitOrderRequest\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateJournalRequest Class in Python\nDESCRIPTION: This snippet documents the CreateJournalRequest class from the alpaca.broker.requests module. It is used for creating journal entries in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_23\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.CreateJournalRequest\n```\n\n----------------------------------------\n\nTITLE: Get Corporate Actions Method - Python\nDESCRIPTION: Sphinx documentation reference for the get_corporate_actions method documentation. This method allows retrieving historical corporate actions data.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/corporate_actions/historical.rst#2025-04-19_snippet_1\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automethod:: alpaca.data.historical.corporate_actions.CorporateActionsClient.get_corporate_actions\n```\n\n----------------------------------------\n\nTITLE: Handling Individual Leg Operations in Multi-leg Orders\nDESCRIPTION: Shows error handling when attempting to cancel or replace individual legs of a multi-leg order, which is not supported.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_17\n\nLANGUAGE: python\nCODE:\n```\ntry:\n    if q1.legs[0].status != OrderStatus.FILLED:\n        res = trade_client.cancel_order_by_id(res.legs[0].id)\n        print(f\"Cancelled leg: {res}\")\n    else:\n        print(\"Order is already filled.\")\nexcept APIError as e:\n    print(f\"Error: {e}\")\n\ntry:\n    if q1.status != OrderStatus.FILLED:\n        req = ReplaceOrderRequest(\n            qty=1\n        )\n        res = trade_client.replace_order_by_id(res.legs[0].id, req)\n        print(f\"Replaced order: {res}\")\n    else:\n        print(\"Order is already filled.\")\nexcept APIError as e:\n    print(f\"Error: {e}\")\n```\n\n----------------------------------------\n\nTITLE: Documenting StopOrderRequest Class in Python\nDESCRIPTION: This snippet documents the StopOrderRequest class from the alpaca.broker.requests module. It is used for placing stop orders in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_20\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.StopOrderRequest\n```\n\n----------------------------------------\n\nTITLE: Initializing BrokerClient with API Keys in Python\nDESCRIPTION: This snippet demonstrates how to initialize the BrokerClient class from the alpaca.broker module. It requires API key and secret key which can be found on the Broker dashboard, and includes the sandbox parameter for testing.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker import BrokerClient\n\nBROKER_API_KEY = \"api-key\"\nBROKER_SECRET_KEY = \"secret-key\"\n\nbroker_client = BrokerClient(\n                    api_key=Broker_API_KEY,\n                    secret_key=BROKER_SECRET_KEY,\n                    sandbox=True,\n                )\n```\n\n----------------------------------------\n\nTITLE: Documenting GetJournalsRequest Class in Python\nDESCRIPTION: This snippet documents the GetJournalsRequest class from the alpaca.broker.requests module. It is used for requesting journal information from the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_27\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.GetJournalsRequest\n```\n\n----------------------------------------\n\nTITLE: Retrieving Market Clock with BrokerClient in Python\nDESCRIPTION: Gets the current market clock status using the BrokerClient's get_clock method. This method returns information about whether the market is currently open and the timestamps for the current trading day.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/clock.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.broker.client.BrokerClient.get_clock\n```\n\n----------------------------------------\n\nTITLE: Documenting BatchJournalRequestEntry Class in Python\nDESCRIPTION: This snippet documents the BatchJournalRequestEntry class from the alpaca.broker.requests module. It is likely used as part of the batch journal creation process in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_25\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.BatchJournalRequestEntry\n```\n\n----------------------------------------\n\nTITLE: Creating Reverse Batch Journal via BrokerClient\nDESCRIPTION: Method reference for creating a reverse batch journal operation using the Alpaca broker client.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/journals.rst#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.create_reverse_batch_journal\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Corporate Action by ID\nDESCRIPTION: Endpoint documentation for retrieving a specific corporate announcement by its unique identifier through the Alpaca trading API.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/corporate-actions.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalpaca.trading.client.TradingClient.get_corporate_announcement_by_id\n```\n\n----------------------------------------\n\nTITLE: Canceling Multi-leg Orders\nDESCRIPTION: Checks the status of a previously placed order and cancels it if it hasn't been filled yet.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n# Query by the order's id\nq1 = trade_client.get_order_by_client_id(res.client_order_id)\n\n# Replace overall order\nif q1.status != OrderStatus.FILLED:\n    # Cancel the whole order\n    trade_client.cancel_order_by_id(res.id)\n    print(f\"Canceled order: {res}\")\n\nelse:\n    print(\"Order is already filled.\")\n```\n\n----------------------------------------\n\nTITLE: Documenting StopLimitOrderRequest Class in Python\nDESCRIPTION: This snippet documents the StopLimitOrderRequest class from the alpaca.broker.requests module. It is used for placing stop-limit orders in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_21\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.StopLimitOrderRequest\n```\n\n----------------------------------------\n\nTITLE: Creating a Transfer Between Accounts in Python\nDESCRIPTION: This snippet demonstrates how to create a transfer for an account once a bank or ACH relationship has been established. It shows how to specify transfer direction (incoming/outgoing), timing, and the relationship to use for the transfer.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker.client import BrokerClient\nfrom alpaca.broker.requests import CreateACHTransferRequest\nfrom alpaca.broker.enums import TransferDirection, TransferTiming\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\naccount_id = \"c8f1ef5d-edc0-4f23-9ee4-378f19cb92a4\"\n\ntransfer_data = CreateACHTransferRequest(\n                    amount=1000,\n                    direction=TransferDirection.INCOMING,\n                    timing=TransferTiming.IMMEDIATE,\n                    relationship_id=\"0f08c6bc-8e9f-463d-a73f-fd047fdb5e94\"\n                )\ntransfer = broker_client.create_transfer_for_account(\n                account_id=account_id,\n                transfer_data=transfer_data\n            )\n```\n\n----------------------------------------\n\nTITLE: Importing Alpaca Common Models in Python\nDESCRIPTION: This code snippet shows how to import models from the Alpaca Python library. It uses the automodule directive to automatically generate documentation for all members in the alpaca.common.models namespace.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/common/models.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n.. automodule:: alpaca.common.models\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Implementing Bollinger Bands Calculation in Python\nDESCRIPTION: This function calculates Bollinger Bands for a given DataFrame of price data. It computes the Simple Moving Average (SMA), standard deviation, and upper and lower bands. The function returns the latest upper and lower band values.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-condor.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef check_bb(df, period=14, multiplier=2):\n    bollinger_bands = []\n    # Calculate the Simple Moving Average (SMA)\n    df['SMA'] = df['close'].rolling(window=period).mean()\n    # Calculate the rolling standard deviation\n    df['StdDev'] = df['close'].rolling(window=period).std()\n    # Calculate the Upper Bollinger Band (two standard deviation)\n    df['Upper Band'] = df['SMA'] + (multiplier * df['StdDev'])\n    # Calculate the Lower Bollinger Band (two standard deviation)\n    df['Lower Band'] = df['SMA'] - (multiplier * df['StdDev'])\n    # Get the most recent Upper Band value\n    upper_bollinger_band = df['Upper Band'].iloc[-1]\n    lower_bollinger_band = df['Lower Band'].iloc[-1]\n    \n    bollinger_bands = [upper_bollinger_band, lower_bollinger_band]\n    return bollinger_bands\n\nbollinger_bands = check_bb(priceData, 14, 2)\n\n# The current market price is not too close to the two-standard deviation level yet but is relatively closer to the higher Bollinger Band.\nprint(f\"Latest Upper Bollinger Band is: {bollinger_bands[0]}. Latest Lower Bollinger Band is {bollinger_bands[1]}; while underlying stock '{underlying_symbol}' price is {underlying_price}.\")\n```\n\n----------------------------------------\n\nTITLE: Documenting ReverseBatchJournalRequestEntry Class in Python\nDESCRIPTION: This snippet documents the ReverseBatchJournalRequestEntry class from the alpaca.broker.requests module. It is used for reversing batch journal entries in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_26\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.ReverseBatchJournalRequestEntry\n```\n\n----------------------------------------\n\nTITLE: Documenting GetTradeDocumentsRequest Class in Python\nDESCRIPTION: This snippet documents the GetTradeDocumentsRequest class from the alpaca.broker.requests module. It is used for requesting trade documents from the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_8\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.GetTradeDocumentsRequest\n```\n\n----------------------------------------\n\nTITLE: Fetching Specific Corporate Announcement by ID using Alpaca Python SDK\nDESCRIPTION: This method retrieves a specific corporate announcement by its ID using the BrokerClient in the Alpaca Python SDK. It allows for targeted retrieval of information about a particular corporate event.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/corporate-actions.rst#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.get_corporate_announcement_by_id\n```\n\n----------------------------------------\n\nTITLE: Checking Alpaca-py Version\nDESCRIPTION: Displays the installed version of alpaca-py to ensure compatibility with the examples.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# check version of alpaca-py\nalpaca.__version__\n```\n\n----------------------------------------\n\nTITLE: Documenting UploadDocumentRequest Class in Python\nDESCRIPTION: This snippet documents the UploadDocumentRequest class from the alpaca.broker.requests module. It is used for uploading documents to the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_9\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.UploadDocumentRequest\n```\n\n----------------------------------------\n\nTITLE: Documenting BrokerClient Class in Python\nDESCRIPTION: This code snippet uses Sphinx autodoc directives to generate documentation for the BrokerClient class. It specifically documents the __init__ method of the class.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/broker-client.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. autoclass:: alpaca.broker.client.BrokerClient\n   :members: __init__\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Option Market Data in reStructuredText\nDESCRIPTION: This snippet defines the structure of the option market data documentation using reStructuredText. It sets up a table of contents with a maximum depth of 2, including sections for historical data, live data, and data requests.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   option/historical\n   option/live\n   option/requests\n```\n\n----------------------------------------\n\nTITLE: Creating Single Journal Entry via BrokerClient\nDESCRIPTION: Method reference for creating a single journal entry using the Alpaca broker client.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/journals.rst#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nalpaca.broker.client.BrokerClient.create_journal\n```\n\n----------------------------------------\n\nTITLE: Documenting Alpaca Exceptions Module in reStructuredText\nDESCRIPTION: This snippet uses reStructuredText directives to automatically generate documentation for all members of the alpaca.common.exceptions module. The automodule directive creates comprehensive documentation for all classes and functions defined in that module.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/common/exceptions.rst#2025-04-19_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n.. automodule:: alpaca.common.exceptions\n   :members:\n```\n\n----------------------------------------\n\nTITLE: Fetching Latest Crypto Trade with CryptoHistoricalDataClient in Python\nDESCRIPTION: This method retrieves the most recent trade data for a specified cryptocurrency. It provides information about the latest executed trade for the requested asset.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.data.historical.crypto.CryptoHistoricalDataClient.get_crypto_latest_trade\n```\n\n----------------------------------------\n\nTITLE: Documenting OrderRequest Class in Python\nDESCRIPTION: This snippet documents the OrderRequest class from the alpaca.broker.requests module. It is likely a base class for various types of order requests in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_17\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.OrderRequest\n```\n\n----------------------------------------\n\nTITLE: Setting Up Nest Asyncio for Jupyter Notebooks\nDESCRIPTION: Configures nest_asyncio to allow running asynchronous code within Jupyter notebooks. This is necessary for the streaming functionality in Alpaca-py.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# to run async code in jupyter notebook\nimport nest_asyncio\nnest_asyncio.apply()\n```\n\n----------------------------------------\n\nTITLE: Documenting ListAccountsRequest Class in Python\nDESCRIPTION: This snippet documents the ListAccountsRequest class from the alpaca.broker.requests module. It is used for requesting a list of accounts from the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.ListAccountsRequest\n```\n\n----------------------------------------\n\nTITLE: Documenting CreateBatchJournalRequest Class in Python\nDESCRIPTION: This snippet documents the CreateBatchJournalRequest class from the alpaca.broker.requests module. It is used for creating batch journal entries in the Alpaca broker system.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_24\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.CreateBatchJournalRequest\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents for Stock Market Data in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the stock market data documentation using reStructuredText syntax. It includes links to submodules for historical data, live data, requests, and a stock screener.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/stock.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   stock/historical\n   stock/live\n   stock/requests\n   stock/screener\n```\n\n----------------------------------------\n\nTITLE: Calculating Options Implied Volatility and Delta Using Black-Scholes\nDESCRIPTION: Implements functions to calculate implied volatility and delta for options using the Black-Scholes model. These calculations are critical for selecting options that meet the delta thresholds defined in the strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-zero-dte.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# Calculate implied volatility\ndef calculate_implied_volatility(option_price, S, K, T, r, option_type):\n\n    # Define a reasonable range for sigma\n    sigma_lower = 1e-6\n    sigma_upper = 5.0  # Adjust upper limit if necessary\n\n    # Check if the option is out-of-the-money and price is close to zero\n    intrinsic_value = max(0, (S - K) if option_type == 'call' else (K - S))\n    if option_price <= intrinsic_value + 1e-6:\n\n        # print(\"Option price is close to intrinsic value; implied volatility is near zero.\") # Uncomment for checking the status\n\n        return 0.0\n\n    # Define the function to find the root\n    def option_price_diff(sigma):\n        d1 = (np.log(S / K) + (r + 0.5 * sigma ** 2) * T) / (sigma * np.sqrt(T))\n        d2 = d1 - sigma * np.sqrt(T)\n        if option_type == 'call':\n            price = S * norm.cdf(d1) - K * np.exp(-r * T) * norm.cdf(d2)\n        elif option_type == 'put':\n            price = K * np.exp(-r * T) * norm.cdf(-d2) - S * norm.cdf(-d1)\n        return price - option_price\n\n    try:\n        return brentq(option_price_diff, sigma_lower, sigma_upper)\n    except ValueError as e:\n        print(f\"Failed to find implied volatility: {e}\")\n        return None\n\n\n# Calculate option Delta\ndef calculate_delta(option_price, strike_price, expiry, underlying_price, risk_free_rate, option_type):\n    # Set the current date and time\n    now = datetime.now(tz=timezone)\n    # Calculate the time to expiry in years\n    T = (expiry - now).total_seconds() / (365 * 24 * 60 * 60)\n    # Set minimum T to avoid zero\n    T = max(T, 1e-6)\n\n    if T == 1e-6:\n        print(\"Option has expired or is expiring now; setting delta based on intrinsic value.\")\n        if option_type == 'put':\n            return -1.0 if underlying_price < strike_price else 0.0\n        else:\n            return 1.0 if underlying_price > strike_price else 0.0\n\n    implied_volatility = calculate_implied_volatility(option_price, underlying_price, strike_price, T, risk_free_rate, option_type)\n    if implied_volatility is None:\n        print(\"Implied volatility could not be determined, skipping delta calculation.\")\n        return None\n\n    d1 = (np.log(underlying_price / strike_price) + (risk_free_rate + 0.5 * implied_volatility ** 2) * T) / (implied_volatility * np.sqrt(T))\n    delta = norm.cdf(d1) if option_type == 'call' else -norm.cdf(-d1)\n    return delta\n```\n\n----------------------------------------\n\nTITLE: Referencing Alpaca Broker Enums in Python\nDESCRIPTION: This snippet demonstrates the pattern used to reference various enums in the Alpaca broker module documentation. Each enum is referenced using the autoenum directive, which automatically generates documentation for the enum.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/enums.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoenum:: alpaca.broker.enums.TaxIdType\n```\n\n----------------------------------------\n\nTITLE: Creating a Batch Journal with Alpaca Broker API in Python\nDESCRIPTION: This snippet shows how to create a batch journal using the Alpaca Broker API. It creates multiple journal entries from one account to several others in a single request.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/broker.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.broker.client import BrokerClient\nfrom alpaca.broker.requests import CreateBatchJournalRequest, BatchJournalRequestEntry\nfrom alpaca.broker.enums import JournalEntryType\n\nbroker_client = BrokerClient('api-key', 'secret-key')\n\n# Receiving accounts\nbatch_entries = [\n    BatchJournalRequestEntry(\n            to_account=\"d7017fd9-60dd-425b-a09a-63ff59368b62\",\n            amount=50,\n    ),\n    BatchJournalRequestEntry(\n            to_account=\"94fa473d-9a92-40cd-908c-25da9fba1e65\",\n            amount=100,\n    ),\n    BatchJournalRequestEntry(\n            to_account=\"399f85f1-cbbd-4eaa-a934-70027fb5c1de\",\n            amount=700,\n    ),\n]\n\nbatch_journal_data = CreateBatchJournalRequest(\n                    entry_type=JournalEntryType.CASH,\n                    from_account=\"8f8c8cee-2591-4f83-be12-82c659b5e748\",\n                    entries=batch_entries\n                )\n\nbatch_journal = broker_client.create_batch_journal(batch_data=batch_journal_data)\n```\n\n----------------------------------------\n\nTITLE: Documenting Adjustment Enum in Alpaca Python SDK\nDESCRIPTION: Autodocumentation for the Adjustment enumeration class in the alpaca.data.enums module. This enum likely represents different types of price adjustments.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/enums.rst#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.enums.Adjustment\n```\n\n----------------------------------------\n\nTITLE: Installing Alpaca-py Package if Not Available\nDESCRIPTION: Checks if the alpaca-py library is installed and installs it if not available. This ensures the required dependencies are present before executing the trading functionality.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# install alpaca-py if it is not available\ntry:\n    import alpaca\nexcept ImportError:\n    !python3 -m pip install alpaca-py\n    import alpaca\n```\n\n----------------------------------------\n\nTITLE: Documenting UpdatableIdentity Class in Python\nDESCRIPTION: This snippet documents the UpdatableIdentity class from the alpaca.broker.requests module. It is likely used as part of the account update process to modify identity information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/requests.rst#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.broker.requests.UpdatableIdentity\n```\n\n----------------------------------------\n\nTITLE: Defining Crypto Market Data Documentation Structure in reStructuredText\nDESCRIPTION: This snippet defines the structure of the crypto market data documentation using reStructuredText. It sets up a table of contents with a maximum depth of 2, including sections for historical data, live data, and API requests.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto.rst#2025-04-19_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n==================\nCrypto Market Data\n==================\n\n.. toctree::\n   :maxdepth: 2\n\n   crypto/historical\n   crypto/live\n   crypto/requests\n```\n\n----------------------------------------\n\nTITLE: Documenting MarketType Enum in Alpaca Python SDK\nDESCRIPTION: Autodocumentation for the MarketType enumeration class in the alpaca.data.enums module. This enum likely represents different types of financial markets.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/enums.rst#2025-04-19_snippet_5\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.enums.MarketType\n```\n\n----------------------------------------\n\nTITLE: Cancelling All Orders in Alpaca Trading API\nDESCRIPTION: This snippet shows how to attempt cancellation of all open orders. The method returns a list of CancelOrderResponse objects indicating the cancellation status of each order.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/trading.rst#2025-04-19_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom alpaca.trading.client import TradingClient\n\ntrading_client = TradingClient('api-key', 'secret-key', paper=True)\n\n# attempt to cancel all open orders\ncancel_statuses = trading_client.cancel_orders()\n```\n\n----------------------------------------\n\nTITLE: Documenting CorporateActionsType Enum in Alpaca Python SDK\nDESCRIPTION: Autodocumentation for the CorporateActionsType enumeration class in the alpaca.data.enums module. This enum likely represents different types of corporate actions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/enums.rst#2025-04-19_snippet_6\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.enums.CorporateActionsType\n```\n\n----------------------------------------\n\nTITLE: Data Validation Example\nDESCRIPTION: Example demonstrating runtime data validation using pydantic models with Flask route handler.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/README.md#2025-04-19_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n@app.route('/post_json', methods=['POST'])\ndef do_trade():\n    # ...\n\n    order_data_json = request.get_json()\n\n    # validate data\n    MarketOrderRequest(**order_data_json)\n\n    # ...\n```\n\n----------------------------------------\n\nTITLE: Documenting MostActivesBy Enum in Alpaca Python SDK\nDESCRIPTION: Autodocumentation for the MostActivesBy enumeration class in the alpaca.data.enums module. This enum likely represents different criteria for determining most active securities.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/enums.rst#2025-04-19_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.enums.MostActivesBy\n```\n\n----------------------------------------\n\nTITLE: Checking Alpaca-py Version\nDESCRIPTION: Displays the installed version of the alpaca-py library to ensure compatibility with the examples in the notebook.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-basic.ipynb#2025-04-19_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n# check version of alpaca-py\nalpaca.__version__\n```\n\n----------------------------------------\n\nTITLE: Defining Table of Contents Structure for Market Data Documentation in reStructuredText\nDESCRIPTION: A reStructuredText (rst) directive that creates a table of contents with a maximum depth of 2 levels, linking to various market data documentation files in the data subdirectory.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data_api.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   data/common\n   data/corporate_actions\n   data/stock\n   data/crypto\n   data/option\n   data/timeframe\n   data/models\n   data/enums\n```\n\n----------------------------------------\n\nTITLE: Retrieving Open Orders for a Symbol\nDESCRIPTION: Fetches only open (unfilled) orders for the specified cryptocurrency. This helps monitor active orders that haven't been executed yet.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb#2025-04-19_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n# see all open orders\nreq = GetOrdersRequest(\n    status = QueryOrderStatus.OPEN,\n    symbols = [symbol]\n)\nopen_orders = trade_client.get_orders(req)\nopen_orders\n```\n\n----------------------------------------\n\nTITLE: Pairing Options for Bull Call Spread in Python\nDESCRIPTION: Function to find valid option pairs for a bull call spread strategy. Requires the long call strike to be less than or equal to the underlying price, which must be less than the short call strike. Returns the first valid pair found or None.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-bull-call-spread.ipynb#2025-04-19_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ndef pair_call_candidates(short_calls: List[Dict[str, Any]], long_calls: List[Dict[str, Any]], underlying_price: float) -> Tuple[Optional[Dict[str, Any]], Optional[Dict[str, Any]]]:\n    \"\"\"\n    For the bull call spread, require: long_call strike <= underlying_price < short_call strike.\n    Returns the first valid pair found.\n    \"\"\"\n    for sc in short_calls:\n        for lc in long_calls:\n            if sc['expiration_date'] == lc['expiration_date'] and lc['strike_price'] <= underlying_price < sc['strike_price']:\n                logger.info(f\"Selected Bull call spread: short_call {sc['symbol']} and long_call {lc['symbol']} with expiration {sc['expiration_date']}.\")\n                return sc, lc\n    \n    # If no valid pair is found, log the expiration date (if available) from the candidate lists.\n    expiration_info = None\n    if short_calls:\n        expiration_info = short_calls[0]['expiration_date']\n    elif long_calls:\n        expiration_info = long_calls[0]['expiration_date']\n\n    if expiration_info:\n        logger.info(f\"No valid bull call spread pair found for expiration {expiration_info} with the given candidates and underlying price conditions.\")\n    else:\n        logger.info(\"No valid bull call spread pair found: no candidate data available.\")\n    \n    return None, None\n```\n\n----------------------------------------\n\nTITLE: Defining Request Methods in Alpaca-Py\nDESCRIPTION: Example of a properly formatted request method in the Alpaca-Py SDK, showing the naming convention and parameter structure. This method removes a symbol from a watchlist by its ID.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/CONTRIBUTING.md#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef remove_symbol_from_watchlist_by_id(self, watchlist_id: UUID, symbol: str) -> Watchlist:\n```\n\n----------------------------------------\n\nTITLE: Documenting CryptoFeed Enum in Alpaca Python SDK\nDESCRIPTION: Autodocumentation for the CryptoFeed enumeration class in the alpaca.data.enums module. This enum likely represents different cryptocurrency data feed sources.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/enums.rst#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.enums.CryptoFeed\n```\n\n----------------------------------------\n\nTITLE: Installing Alpaca-py Library\nDESCRIPTION: Attempts to import the Alpaca library and installs it if not already available.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# install alpaca-py if it is not available\ntry:\n    import alpaca\nexcept ImportError:\n    !python3 -m pip install alpaca-py\n    import alpaca\n```\n\n----------------------------------------\n\nTITLE: Displaying Redirect Notice in Markdown\nDESCRIPTION: This Markdown snippet provides information about the relocation of the Alpaca-py crypto trading basic notebook, including the new file location and the expiration date of this redirect notice.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto-trading-basic.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n# Alpaca-py crypto trading basic\n\nNotice: This notebook is moved [to crypto-trading-basic.ipynb under crypto directory](https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb)\n\nPlease update your bookmark/link to the new location. This redirect page will be removed after 2026-03-01.\n```\n\n----------------------------------------\n\nTITLE: Documenting Exchange Enum in Alpaca Python SDK\nDESCRIPTION: Autodocumentation for the Exchange enumeration class in the alpaca.data.enums module. This enum likely represents different stock exchanges.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/enums.rst#2025-04-19_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.enums.Exchange\n```\n\n----------------------------------------\n\nTITLE: Markdown Table of Google Colab Notebooks for Alpaca-py Stock Trading\nDESCRIPTION: A markdown table that lists available example notebooks for stock trading with alpaca-py. Each entry includes a link to the local notebook file and a badge with a link to open the notebook directly in Google Colab.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/README.md#2025-04-19_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Notebooks                                       |                                                                                    Open in Google Colab                                                                                    |\n|:------------------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| [Basic Stocks](stocks-trading-basic.ipynb)            | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb)  |\n```\n\n----------------------------------------\n\nTITLE: Defining Trading Documentation Structure in RST\nDESCRIPTION: ReStructuredText markup defining the documentation structure and navigation for Alpaca-py trading features using toctree directive.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading_api.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   trading/trading-client\n   trading/stream\n   trading/account\n   trading/positions\n   trading/orders\n   trading/assets\n   trading/contracts\n   trading/watchlists\n   trading/calendar\n   trading/clock\n   trading/corporate-actions\n   trading/models\n   trading/requests\n   trading/enums\n```\n\n----------------------------------------\n\nTITLE: Documenting DataFeed Enum in Alpaca Python SDK\nDESCRIPTION: Autodocumentation for the DataFeed enumeration class in the alpaca.data.enums module. This enum likely represents different data feed sources.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/enums.rst#2025-04-19_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n.. autoclass:: alpaca.data.enums.DataFeed\n```\n\n----------------------------------------\n\nTITLE: Sphinx Documentation for TradingStream Class\nDESCRIPTION: This snippet defines the Sphinx documentation structure for the TradingStream class in the alpaca.trading.stream module. It uses the autoclass directive to automatically generate documentation from the class docstrings, including all members and undocumented members.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/trading/stream.rst#2025-04-19_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. autoclass:: alpaca.trading.stream.TradingStream\n   :members:\n   :undoc-members:\n```\n\n----------------------------------------\n\nTITLE: Getting Option Exchange Codes with OptionHistoricalDataClient in Python\nDESCRIPTION: Auto-generated method documentation for retrieving option exchange codes.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/option/historical.rst#2025-04-19_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n.. automethod:: alpaca.data.historical.option.OptionHistoricalDataClient.get_option_exchange_codes\n```\n\n----------------------------------------\n\nTITLE: Setting up a Trading Stream\nDESCRIPTION: Placeholder for implementing a trading stream that provides real-time updates on trade executions. This would be used to monitor order fills and position changes.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_28\n\nLANGUAGE: python\nCODE:\n```\n\n\n```\n\n----------------------------------------\n\nTITLE: Displaying Google Colab Badge for Basic Crypto Trading Notebook in Markdown\nDESCRIPTION: This snippet shows how to create a markdown table with a link to a basic crypto trading notebook and an embedded Google Colab badge for easy access.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/crypto/README.md#2025-04-19_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n| Notebooks                                 |                                                                                    Open in Google Colab                                                                                    |\n|:-----------------------------------------|:------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\n| [Basic Crypto](crypto-trading-basic.ipynb)   | [![Open In Colab](https://colab.research.google.com/assets/colab-badge.svg)](https://colab.research.google.com/github/alpacahq/alpaca-py/blob/master/examples/crypto/crypto-trading-basic.ipynb)  |\n```\n\n----------------------------------------\n\nTITLE: Creating Table of Contents for Corporate Actions in reStructuredText\nDESCRIPTION: This snippet defines a table of contents for the corporate actions documentation using reStructuredText syntax. It includes links to sections on historical data and requests.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/corporate_actions.rst#2025-04-19_snippet_0\n\nLANGUAGE: reStructuredText\nCODE:\n```\n.. toctree::\n   :maxdepth: 2\n\n   corporate_actions/historical\n   corporate_actions/requests\n```\n\n----------------------------------------\n\nTITLE: Finding Strike Price Increments for Option Contracts\nDESCRIPTION: Analyzes the available option contracts to determine the increment between strike prices, which helps in finding contracts at specific price points for the iron condor strategy.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n# Now, instead of doing two separate requests, we can do one request to get all the contracts we need\n# We set this up by setting the gte, lte, and limit strategically\n# That being said, it is still safest to do separate requests as we did in the prior example as the number of contracts\n# returned can vary based on the strike prices and expiration dates (which are not fixed in this notebook).\n\n# Let's find the delta between strike prices from our prior example\nmax_delta = 0\nfor i in range(len(cts.option_contracts) - 1):\n    delta = abs(float(cts.option_contracts[i].strike_price) - float(cts.option_contracts[i + 1].strike_price))\n    if delta > max_delta:\n        max_delta = delta\n\n\ndef next_divisible(n: float, div: float, round_up: bool):\n    if n % div == 0:\n        return n\n    if round_up:\n        return n + div - n % div\n    return n - n % div\n\n\nmin_contract_price = next_divisible(A, max_delta, False)\nmax_contract_price = next_divisible(D, max_delta, True)\nprint(f\"Min: {min_contract_price}, Max: {max_contract_price}\")\n```\n\n----------------------------------------\n\nTITLE: Installing and Importing Required Libraries for Options Trading\nDESCRIPTION: Sets up the environment by installing the alpaca-py package and importing necessary libraries for options trading, including pandas, numpy, scipy for statistical calculations, and alpaca for trading API interactions.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-wheel-strategy.ipynb#2025-04-19_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Install or upgrade the package `alpaca-py` and import it\n!python3 -m pip install --upgrade alpaca-py\n\nimport pandas as pd\nimport numpy as np\nfrom scipy.stats import norm\nimport alpaca\nimport time\nfrom scipy.optimize import brentq\nfrom datetime import datetime, timedelta\nfrom zoneinfo import ZoneInfo\nfrom alpaca.data.timeframe import TimeFrame, TimeFrameUnit\n\n\nfrom alpaca.trading.client import TradingClient\nfrom alpaca.data.historical.option import OptionHistoricalDataClient\nfrom alpaca.data.historical.stock import StockHistoricalDataClient, StockLatestTradeRequest\nfrom alpaca.data.requests import StockBarsRequest, OptionLatestQuoteRequest, OptionChainRequest\nfrom alpaca.trading.requests import GetOptionContractsRequest, MarketOrderRequest\nfrom alpaca.trading.enums import AssetStatus, ContractType\n```\n\n----------------------------------------\n\nTITLE: Converting Pydantic Models to Dictionaries in Python\nDESCRIPTION: Utility function to convert option data to a dictionary format. Checks if the data has a model_dump() method (indicating a Pydantic model) and uses it if available, otherwise returns the data as-is.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-iron-butterfly.ipynb#2025-04-19_snippet_10\n\nLANGUAGE: python\nCODE:\n```\ndef ensure_dict(option_data):\n    \"\"\"\n    Convert option_data to a dict using model_dump() if available (for Pydantic models),\n    otherwise return the data as-is.\n    \"\"\"\n    if hasattr(option_data, \"model_dump\"):\n        return option_data.model_dump()\n    return option_data\n```\n\n----------------------------------------\n\nTITLE: Finding Nearest Strike Price Contract Function\nDESCRIPTION: Helper function that identifies the option contract with a strike price closest to a target price from a list of contracts.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/options/options-trading-mleg.ipynb#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# This is a function that will return a contract which minimizes the difference from a target price\ndef find_nearest_strike_contract(contracts, target_price):\n    min_diff = 0\n    min_contract = None\n    for contract in contracts:\n        diff = abs(float(contract.strike_price) - target_price)\n        if min_contract is None or diff < min_diff:\n            min_diff = diff\n            min_contract = contract\n    return min_contract\n```\n\n----------------------------------------\n\nTITLE: Retrieving Crypto Snapshot with CryptoHistoricalDataClient in Python\nDESCRIPTION: This method obtains a snapshot of current market data for a specified cryptocurrency. It likely includes various data points such as price, volume, and other relevant market information.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/data/crypto/historical.rst#2025-04-19_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n.. automethod:: alpaca.data.historical.crypto.CryptoHistoricalDataClient.get_crypto_snapshot\n```\n\n----------------------------------------\n\nTITLE: Closing All Positions for an Account using Alpaca Broker API in Python\nDESCRIPTION: This method closes all open positions for a specified account using the Alpaca Broker API. It requires authentication and may have additional parameters for controlling the closing process.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/docs/api_reference/broker/trading/positions.rst#2025-04-19_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nalpaca.broker.client.BrokerClient.close_all_positions_for_account\n```\n\n----------------------------------------\n\nTITLE: Configuring Async Support for Jupyter Notebook\nDESCRIPTION: Sets up nest_asyncio to enable running asynchronous code in Jupyter notebooks, which is required for streaming functionality.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n# to run async code in jupyter notebook\nimport nest_asyncio\nnest_asyncio.apply()\n```\n\n----------------------------------------\n\nTITLE: Loading API Keys from Environment Variables\nDESCRIPTION: Retrieves Alpaca API credentials from environment variables if not explicitly defined in the code.\nSOURCE: https://github.com/alpacahq/alpaca-py/blob/master/examples/stocks/stocks-trading-basic.ipynb#2025-04-19_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport os\n\nif api_key is None:\n    api_key = os.environ.get('ALPACA_API_KEY')\n\nif secret_key is None:\n    secret_key = os.environ.get('ALPACA_SECRET_KEY')\n```"
  }
]