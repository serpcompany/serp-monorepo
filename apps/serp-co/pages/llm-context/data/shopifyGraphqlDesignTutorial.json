[
  {
    "owner": "shopify",
    "repo": "graphql-design-tutorial",
    "content": "TITLE: Defining GraphQL Types for Collection Management\nDESCRIPTION: A complete schema design for Collection management, including Collection type, CollectionRuleSet, CollectionRule, and related enums. The schema demonstrates proper use of non-nullable fields, custom scalar types, and enum implementations.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_10\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection implements Node {\n  id: ID!\n  ruleSet: CollectionRuleSet\n  products: ProductConnection!\n  title: String!\n  image: Image\n  description: HTML!\n}\n\ntype CollectionRuleSet {\n  rules: [CollectionRule!]!\n  appliesDisjunctively: Boolean!\n}\n\ntype CollectionRule {\n  field: CollectionRuleField!\n  relation: CollectionRuleRelation!\n  value: String!\n}\n\nenum CollectionRuleField {\n  TAG\n  TITLE\n  TYPE\n  INVENTORY\n  PRICE\n  VENDOR\n}\n\nenum CollectionRuleRelation {\n  CONTAINS\n  ENDS_WITH\n  EQUALS\n  GREATER_THAN\n  LESS_THAN\n  NOT_CONTAINS\n  NOT_EQUALS\n  STARTS_WITH\n}\n```\n\n----------------------------------------\n\nTITLE: Final Collection Schema with Object References\nDESCRIPTION: Complete schema design with object references instead of ID fields and proper type implementation.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_9\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection implements Node {\n  id: ID!\n  ruleSet: CollectionRuleSet\n  products: ProductConnection!\n  title: String!\n  image: Image\n  bodyHtml: String\n}\n\ntype Image {\n  id: ID!\n}\n\ntype CollectionRuleSet {\n  rules: [CollectionRule!]!\n  appliesDisjunctively: Boolean!\n}\n\ntype CollectionRule {\n  column: String!\n  relation: String!\n  condition: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Refactoring Mutations with Shared Input Types\nDESCRIPTION: Improved mutation design that reduces duplication by using a shared input type. This pattern makes code more maintainable and allows clients to share logic between create and update operations.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_14\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  # ...\n  collectionCreate(collection: CollectionInput!)\n  collectionUpdate(collectionId: ID!, collection: CollectionInput!)\n}\n\ninput CollectionInput {\n  title: String\n  ruleSet: CollectionRuleSetInput\n  image: ImageInput\n  description: String\n}\n```\n\n----------------------------------------\n\nTITLE: Designing Mutation Payloads with Error Handling\nDESCRIPTION: Mutation payload structure for collection creation that includes both the created resource and potential user errors. This pattern separates business logic errors from technical errors.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_15\n\nLANGUAGE: graphql\nCODE:\n```\ntype CollectionCreatePayload {\n  userErrors: [UserError!]!\n  collection: Collection\n}\n\ntype UserError {\n  message: String!\n\n  # Path to input field which caused the error.\n  field: [String!]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Simple Shared Behavior with Interfaces in GraphQL\nDESCRIPTION: This snippet demonstrates how to use interfaces in GraphQL to implement simple shared behavior across different types. It shows an example of a HasPublicUrl interface implemented by Product and Collection types.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_18\n\nLANGUAGE: graphql\nCODE:\n```\ninterface HasPublicUrl {\n  publicUrl: Url\n}\n\ntype Product implements HasPublicUrl {\n  publicUrl: Url\n  # some fields\n}\n\ntype Collection implements HasPublicUrl {\n  publicUrl: Url\n  # some other fields\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Complex Shared Behavior with Base Interfaces in GraphQL\nDESCRIPTION: This snippet shows how to use base interfaces to implement complex shared behavior in GraphQL. It demonstrates a ShippingPackage interface implemented by ShippingPackageBox and ShippingPackageTube types, illustrating inheritance-like behavior.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_19\n\nLANGUAGE: graphql\nCODE:\n```\ninterface ShippingPackage {\n  # Many common fields...\n}\n\ntype ShippingPackageBox implements ShippingPackage {\n  # Many common fields...\n  height: Float!\n  width: Float!\n  depth: Float!\n}\n\ntype ShippingPackageTube implements ShippingPackage {\n  # Many common fields...\n  length: Float!\n  diameter: Float!\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Business Logic in GraphQL Schema\nDESCRIPTION: An example of adding business logic to a GraphQL schema by providing a hasProduct field to efficiently check if a product belongs to a collection. This avoids having clients implement complex logic themselves.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_11\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection implements Node {\n  # ...\n  hasProduct(id: ID!): Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Union Types for Polymorphic GraphQL Relationships\nDESCRIPTION: Example of using a GraphQL union type to represent polymorphic relationships without shared behavior. This approach is used when types are semantically related but don't share specific fields.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_17\n\nLANGUAGE: graphql\nCODE:\n```\ntype Product {\n  # some fields\n}\n\ntype Collection {\n  # some other fields\n}\n\nunion SearchResult = Product | Collection\n```\n\n----------------------------------------\n\nTITLE: Implementing Push-Down Polymorphism in GraphQL\nDESCRIPTION: This snippet demonstrates the push-down polymorphism approach in GraphQL. It shows how to create a single concrete type (ShippingPackage) and push the polymorphism down to the field level using unions, allowing for more flexible and scalable type definitions.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_20\n\nLANGUAGE: graphql\nCODE:\n```\n# Only contains the fields that differed for ShippingPackageBox\ntype ShippingBoxDimensions {\n  height: Float!\n  width: Float!\n  depth: Float!\n}\n\n# Only contains the fields that differed for ShippingPackageTube\ntype ShippingTubeDimensions {\n  length: Float!\n  diameter: Float!\n}\n\nunion ShippingPackageDimensions = ShippingBoxDimensions | ShippingTubeDimensions\n\n# Only use one primary concrete type for all shipping packages\ntype ShippingPackage {\n  # Many common fields...\n\n  # Push down the differences to the field-level\n  dimensions: ShippingPackageDimensions!\n}\n```\n\n----------------------------------------\n\nTITLE: Refactored Mutations with Shared Input Structure\nDESCRIPTION: Improved mutation design that reduces duplication by using a shared CollectionInput type. This approach separates object selection parameters from the data being modified, making the schema more maintainable.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_KOREAN.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  # ...\n  collectionCreate(collection: CollectionInput!)\n  collectionUpdate(collectionId: ID!, collection: CollectionInput!)\n}\n\ninput CollectionInput {\n  title: String\n  ruleSet: CollectionRuleSetInput\n  image: ImageInput\n  description: String\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Update Mutation Payload Structure\nDESCRIPTION: Payload structure for collection update operations that follows the same pattern as create operations, maintaining consistency across the API.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_16\n\nLANGUAGE: graphql\nCODE:\n```\ntype CollectionUpdatePayload {\n  userErrors: [UserError!]!\n  collection: Collection\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection-Related Mutations in GraphQL\nDESCRIPTION: This snippet demonstrates how to structure GraphQL mutations for managing collections, including basic operations and relationship management with products. It shows simple ID-based mutations and the structure for rule inputs.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_12\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  collectionDelete(collectionId: ID!)\n  collectionPublish(collectionId: ID!)\n  collectionUnpublish(collectionId: ID!)\n  collectionAddProducts(collectionId: ID!, productIds: [ID!]!)\n  collectionRemoveProducts(collectionId: ID!, productIds: [ID!]!)\n  collectionCreate(title: String!, ruleSet: CollectionRuleSetInput, image: ImageInput, description: HTML!)\n}\n\ninput CollectionRuleSetInput {\n  rules: [CollectionRuleInput!]!\n  appliesDisjunctively: Boolean!\n}\n\ninput CollectionRuleInput {\n  field: CollectionRuleField!\n  relation: CollectionRuleRelation!\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Create and Update Mutations in GraphQL\nDESCRIPTION: Initial approach to designing collection mutation structure with separate arguments. This shows a basic mutation setup with individual parameters for creating and updating collections.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_13\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  # ...\n  collectionCreate(title: String!, ruleSet: CollectionRuleSetInput, image: ImageInput, description: String)\n  collectionUpdate(collectionId: ID!, title: String, ruleSet: CollectionRuleSetInput, image: ImageInput, description: String)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Collection Mutations in GraphQL\nDESCRIPTION: This snippet demonstrates a GraphQL schema for collection-related mutations, using the 'collection<Action>' naming pattern to group related mutations alphabetically. It includes simple ID-based mutations and more complex ones with structured inputs for collection rules.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_SPANISH.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  collectionDelete(collectionId: ID!)\n  collectionPublish(collectionId: ID!)\n  collectionUnpublish(collectionId: ID!)\n  collectionAddProducts(collectionId: ID!, productIds: [ID!]!)\n  collectionRemoveProducts(collectionId: ID!, productIds: [ID!]!)\n  collectionCreate(title: String!, ruleSet: CollectionRuleSetInput, image: ImageInput, description: HTML!)\n}\n\ninput CollectionRuleSetInput {\n  rules: [CollectionRuleInput!]!\n  appliesDisjunctively: Boolean!\n}\n\ninput CollectionRuleInput {\n  field: CollectionRuleField!\n  relation: CollectionRuleRelation!\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Initial Create and Update Mutations with Duplicated Arguments\nDESCRIPTION: An example showing how create and update mutations initially have duplicate argument structures, with the key difference being required fields and the collection identifier for updates.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_KOREAN.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  # ...\n  collectionCreate(title: String!, ruleSet: CollectionRuleSetInput, image: ImageInput, description: String)\n  collectionUpdate(collectionId: ID!, title: String, ruleSet: CollectionRuleSetInput, image: ImageInput, description: String)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Collection Mutations in GraphQL\nDESCRIPTION: Initial implementation of collection-related mutations with simple input structure. This demonstrates naming mutations with the resource as prefix and separating logical actions like delete, publish, and add/remove products.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_KOREAN.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Mutation {\n  collectionDelete(collectionId: ID!)\n  collectionPublish(collectionId: ID!)\n  collectionUnpublish(collectionId: ID!)\n  collectionAddProducts(collectionId: ID!, productIds: [ID!]!)\n  collectionRemoveProducts(collectionId: ID!, productIds: [ID!])\n  collectionCreate(title: String!, ruleSet: CollectionRuleSetInput, image: ImageInput, description: HTML!)\n}\n\ninput CollectionRuleSetInput {\n  rules: [CollectionRuleInput!]!\n  appliesDisjunctively: Boolean!\n}\n\ninput CollectionRuleInput {\n  field: CollectionRuleField!\n  relation: CollectionRuleRelation!\n  value: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Refined Collection Schema with Subobjects in GraphQL\nDESCRIPTION: Improved schema design that groups related fields into subobjects. Introduces CollectionRuleSet type to handle the relationship between rules and how they apply, solving nullable value problems for manual collections.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_SPANISH.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection implements Node {\n  id: ID!\n  ruleSet: CollectionRuleSet\n  products: [Product!]!\n  title: String!\n  imageId: ID\n  bodyHtml: String\n}\n\ntype CollectionRuleSet {\n  rules: [CollectionRule!]!\n  appliesDisjunctively: Boolean!\n}\n\ntype CollectionRule {\n  column: String!\n  relation: String!\n  condition: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Enhanced Collection Schema with RuleSet\nDESCRIPTION: Improved schema design with CollectionRuleSet type for better organization of related fields.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_7\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection implements Node {\n  id: ID!\n  ruleSet: CollectionRuleSet\n  products: [Product!]!\n  title: String!\n  imageId: ID\n  bodyHtml: String\n}\n\ntype CollectionRuleSet {\n  rules: [CollectionRule!]!\n  appliesDisjunctively: Boolean!\n}\n\ntype CollectionRule {\n  column: String!\n  relation: String!\n  condition: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Pagination Types for GraphQL Connection\nDESCRIPTION: Connection-based pagination types following the Relay Connection specification.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_8\n\nLANGUAGE: graphql\nCODE:\n```\ntype ProductConnection {\n  edges: [ProductEdge!]!\n  pageInfo: PageInfo!\n}\n\ntype ProductEdge {\n  cursor: String!\n  node: Product!\n}\n\ntype PageInfo {\n  hasNextPage: Boolean!\n  hasPreviousPage: Boolean!\n}\n```\n\n----------------------------------------\n\nTITLE: Final Simplified GraphQL Schema Design\nDESCRIPTION: Final schema design that removes the distinction between automatic and manual collections, treating rules as an optional feature of all collections.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection {\n  [CollectionRule]\n  Image\n  [Product]\n}\n\ntype CollectionRule { }\n```\n\n----------------------------------------\n\nTITLE: Refined GraphQL Schema Without Implementation Details\nDESCRIPTION: Improved schema design removing CollectionMembership implementation detail and exposing direct product relationships.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Collection {\n  Image\n  [Product]\n}\n\ntype AutomaticCollection implements Collection {\n  [AutomaticCollectionRule]\n  Image\n  [Product]\n}\n\ntype ManualCollection implements Collection {\n  Image\n  [Product]\n}\n\ntype AutomaticCollectionRule { }\n```\n\n----------------------------------------\n\nTITLE: Initial Collection Schema Design in GraphQL\nDESCRIPTION: A simplified GraphQL schema design for collections that focuses on the core business concept of grouping products, regardless of the implementation method used for product selection.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_SPANISH.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection {\n  [CollectionRule]\n  Image\n  [Product]\n}\n\ntype CollectionRule { }\n```\n\n----------------------------------------\n\nTITLE: Initial GraphQL Schema Design for Collections\nDESCRIPTION: First naive implementation of a GraphQL schema for collections, showing basic types and relationships including Collection interface, AutomaticCollection, ManualCollection, and CollectionMembership types.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_0\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Collection {\n  id: ID!\n  memberships: [CollectionMembership!]!\n  title: String!\n  imageId: ID\n  bodyHtml: String\n}\n\ntype AutomaticCollection implements Collection {\n  id: ID!\n  rules: [AutomaticCollectionRule!]!\n  rulesApplyDisjunctively: Boolean!\n  memberships: [CollectionMembership!]!\n  title: String!\n  imageId: ID\n  bodyHtml: String\n}\n\ntype ManualCollection implements Collection {\n  id: ID!\n  memberships: [CollectionMembership!]!\n  title: String!\n  imageId: ID\n  bodyHtml: String\n}\n\ntype AutomaticCollectionRule {\n  column: String!\n  relation: String!\n  condition: String!\n}\n\ntype CollectionMembership {\n  collectionId: ID!\n  productId: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Collection Type Definition in GraphQL\nDESCRIPTION: Initial implementation of Collection and CollectionRule types with basic fields.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_4\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection {\n  id: ID!\n  rules: [CollectionRule!]!\n  rulesApplyDisjunctively: Boolean!\n  products: [Product!]!\n  title: String!\n  imageId: ID\n  bodyHtml: String\n}\n\ntype CollectionRule {\n  column: String!\n  relation: String!\n  condition: String!\n}\n```\n\n----------------------------------------\n\nTITLE: High-Level GraphQL Schema Representation\nDESCRIPTION: Simplified version of the schema focusing on type relationships, removing scalar fields and implementation details for better overview of the system structure.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Collection {\n  Image\n  [CollectionMembership]\n}\n\ntype AutomaticCollection implements Collection {\n  [AutomaticCollectionRule]\n  Image\n  [CollectionMembership]\n}\n\ntype ManualCollection implements Collection {\n  Image\n  [CollectionMembership]\n}\n\ntype AutomaticCollectionRule { }\n\ntype CollectionMembership {\n  Collection\n  Product\n}\n```\n\n----------------------------------------\n\nTITLE: Node Interface Definition in GraphQL\nDESCRIPTION: Definition of the Node interface for identifiable business objects.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_5\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Node Interface Definition in GraphQL\nDESCRIPTION: The common Node interface used for persistent, retrievable objects with IDs. This interface helps clients manage local caches and identify primary business objects.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_SPANISH.md#2025-04-21_snippet_2\n\nLANGUAGE: graphql\nCODE:\n```\ninterface Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Collection with Node Implementation\nDESCRIPTION: Updated Collection type implementing the Node interface.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/TUTORIAL.md#2025-04-21_snippet_6\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection implements Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Collection Type with Node Implementation in GraphQL\nDESCRIPTION: Updated Collection type implementing the Node interface, which indicates this is a persistent object that can be retrieved by ID.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_SPANISH.md#2025-04-21_snippet_3\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection implements Node {\n  id: ID!\n}\n```\n\n----------------------------------------\n\nTITLE: Naive Collection Schema Implementation in GraphQL\nDESCRIPTION: A basic implementation of the collection schema with fields restored based on the new design approach. Includes CollectionRule type with basic properties.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/lang/TUTORIAL_SPANISH.md#2025-04-21_snippet_1\n\nLANGUAGE: graphql\nCODE:\n```\ntype Collection {\n  id: ID!\n  rules: [CollectionRule!]!\n  rulesApplyDisjunctively: Boolean!\n  products: [Product!]!\n  title: String!\n  imageId: ID\n  bodyHtml: String\n}\n\ntype CollectionRule {\n  column: String!\n  relation: String!\n  condition: String!\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Shopify Logo in Markdown\nDESCRIPTION: This code snippet embeds the Shopify logo image in the Markdown document. It specifies the source URL of the image and sets its width to 200 pixels.\nSOURCE: https://github.com/shopify/graphql-design-tutorial/blob/master/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\n<img src=\"https://cdn.shopify.com/shopify-marketing_assets/builds/19.0.0/shopify-full-color-black.svg\" width=\"200\" />\n```"
  }
]