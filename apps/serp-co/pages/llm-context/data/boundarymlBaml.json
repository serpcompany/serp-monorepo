[
  {
    "owner": "boundaryml",
    "repo": "baml",
    "content": "TITLE: Defining BAML Function for Resume Extraction\nDESCRIPTION: Demonstrates how to define a BAML function that extracts resume information using GPT-4. The function takes resume text as input and returns a structured Resume object.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/my-first-function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfunction ExtractResume(resume_text: string) -> Resume {\n  client \"openai/gpt-4o\"\n  // The prompt uses Jinja syntax.. more on this soon.\n  prompt #\"\n     Extract info from this text.\n\n    {# special macro to print the output schema + instructions #}\n    {{ ctx.output_format }}\n\n    Resume:\n    ---\n    {{ resume_text }}\n    ---\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Functions with Complex Object Inputs\nDESCRIPTION: Shows how to test a function that takes complex objects as input. The example defines a Message class and demonstrates how to pass an array of messages to a function, including multi-line string syntax.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nclass Message {\n  user string\n  content string\n}\n\nfunction ClassifyMessage(messages: Messages[]) -> Category {\n...\n}\n\ntest Test1 {\n  functions [ClassifyMessage]\n  args {\n    messages [\n      {\n        user \"hey there\"\n        // multi-line string using the #\"...\"# syntax\n        content #\"\n          You can also add a multi-line\n          string with the hashtags\n          Instead of ugly json with \\n\n        \"#\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Client with Custom Headers in BAML\nDESCRIPTION: Example showing how to configure an Ollama client with custom HTTP headers and model selection.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/ollama.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider ollama\n  options {\n    model \"llama3\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML Client in Python\nDESCRIPTION: Shows how to use the generated BAML client in Python to call the ExtractResume function and handle the typed response using Pydantic models.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/my-first-function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Import the baml client (We call it `b` for short)\nfrom baml_client import b\n# Import the Resume type, which is now a Pydantic model!\nfrom baml_client.types import Resume \n\ndef main():\nresume_text = \"\"\"Jason Doe\\nPython, Rust\\nUniversity of California, Berkeley, B.S.\\nin Computer Science, 2020\\nAlso an expert in Tableau, SQL, and C++\\n\"\"\"\n\n    # this function comes from the autogenerated \"baml_client\".\n    # It calls the LLM you specified and handles the parsing.\n    resume = b.ExtractResume(resume_text)\n\n    # Fully type-checked and validated!\n    assert isinstance(resume, Resume)\n```\n\n----------------------------------------\n\nTITLE: Implementing PII Extraction and Scrubbing in Python\nDESCRIPTION: This Python script implements PII extraction and scrubbing using the BAML-defined ExtractPII function. It includes functions for scrubbing PII from documents and restoring original text.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/pii-data-extraction.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_client.types import PIIExtraction\nfrom typing import Dict, Tuple\n\ndef scrub_document(text: str) -> Tuple[str, Dict[str, str]]:\n    # Extract PII from the document\n    result = b.ExtractPII(text)\n    \n    # Create a mapping of real values to scrubbed placeholders\n    scrubbed_text = text\n    pii_mapping = {}\n    \n    # Process each PII item and replace with a placeholder\n    for pii_item in result.privateData:\n        pii_type = pii_item.dataType.upper()\n        placeholder = f\"[{pii_type}_{pii_item.index}]\"\n        \n        # Store the mapping for reference\n        pii_mapping[placeholder] = pii_item.value\n        \n        # Replace the PII with the placeholder\n        scrubbed_text = scrubbed_text.replace(pii_item.value, placeholder)\n    \n    return scrubbed_text, pii_mapping\n\ndef restore_document(scrubbed_text: str, pii_mapping: Dict[str, str]) -> str:\n    \"\"\"Restore the original text using the PII mapping.\"\"\"\n    restored_text = scrubbed_text\n    for placeholder, original_value in pii_mapping.items():\n        restored_text = restored_text.replace(placeholder, original_value)\n    return restored_text\n\n# Example usage\ndocument = \"\"\"\nJohn Smith works at Tech Corp.\nYou can reach him at john.smith@techcorp.com\nor call 555-0123 during business hours.\nHis employee ID is TC-12345.\n\"\"\"\n\n# Scrub the document\nscrubbed_text, pii_mapping = scrub_document(document)\n\nprint(\"Original Document:\")\nprint(document)\nprint(\"\\nScrubbed Document:\")\nprint(scrubbed_text)\nprint(\"\\nPII Mapping:\")\nfor placeholder, original in pii_mapping.items():\n    print(f\"{placeholder}: {original}\")\n\n# If needed, restore the original document\nrestored_text = restore_document(scrubbed_text, pii_mapping)\nprint(\"\\nRestored Document:\")\nprint(restored_text)\n```\n\n----------------------------------------\n\nTITLE: Implementing PineconeStore Class for Vector Storage in Python\nDESCRIPTION: Defines a PineconeStore class that manages interactions with Pinecone. It handles index creation, document addition, and context retrieval using sentence embeddings.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/rag.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nclass PineconeStore:\n    def __init__(self, index_name: str):\n        self.index_name = index_name\n        self.encoder = SentenceTransformer('all-MiniLM-L6-v2')\n        \n        # Create index if it doesn't exist\n        if index_name not in pc.list_indexes().names():\n            pc.create_index(\n                name=index_name,\n                dimension=self.encoder.get_sentence_embedding_dimension(),\n                metric='cosine',\n                spec=ServerlessSpec(\n                    cloud='aws',\n                    region='us-east-1'\n                )\n            )\n        self.index = pc.Index(index_name)\n\n    def add_documents(self, documents: list[str], ids: list[str] = None):\n        if ids is None:\n            ids = [str(i) for i in range(len(documents))]\n        \n        # Create embeddings\n        embeddings = self.encoder.encode(documents)\n        \n        # Create vector records\n        vectors = [(id, emb.tolist(), {\"text\": doc}) \n                  for id, emb, doc in zip(ids, embeddings, documents)]\n        \n        # Upsert to Pinecone\n        self.index.upsert(vectors=vectors)\n\n    def retrieve_context(self, query: str, k: int = 2) -> str:\n        # Create query embedding\n        query_embedding = self.encoder.encode(query).tolist()\n        \n        # Query Pinecone\n        results = self.index.query(\n            vector=query_embedding,\n            top_k=k,\n            include_metadata=True\n        )\n        \n        # Extract and join the document texts\n        contexts = [match.metadata[\"text\"] for match in results.matches]\n        return \"\\n\".join(contexts)\n```\n\n----------------------------------------\n\nTITLE: Handling BAML Errors in Python\nDESCRIPTION: Example of catching BAML exceptions in Python using the BamlError base class and specific error subclasses. Shows how to access error properties like prompt, raw_output, and message when handling validation errors.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/error-handling.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py.errors import BamlError, BamlInvalidArgumentError, BamlClientError, BamlClientHttpError, BamlValidationError\n\ntry:\n  b.CallFunctionThatRaisesError()\nexcept BamlError as e:\n  print(e)\n\n\ntry:\n  b.CallFunctionThatRaisesError()\nexcept BamlValidationError as e:\n  # The original prompt sent to the LLM\n  print(e.prompt)\n  # The LLM response string\n  print(e.raw_output)\n  # A human-readable error message\n  print(e.message)\n```\n\n----------------------------------------\n\nTITLE: Basic BAML Function Declaration\nDESCRIPTION: Basic syntax example of declaring a BAML function with input parameters, return type, client, and prompt specification.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/function.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nfunction FunctionName(param: Type) -> ReturnType {\n    client ModelName\n    prompt #\"\n        Template content\n    \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BAML Test Structure\nDESCRIPTION: The minimal syntax for defining a BAML test with required components: test name, functions to test, and input arguments.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\ntest TestName {\n    functions [FunctionName]\n    args {\n        paramName \"value\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Template Strings for Message Classification in BAML\nDESCRIPTION: Demonstrates how to create and use template strings to format a list of messages and classify conversations. Uses PrintMessages template string to inject user/system messages into a prompt, and defines a ClassifyConversation function that utilizes GPT4Turbo.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/template_string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\n// Inject a list of \"system\" or \"user\" messages into the prompt.\ntemplate_string PrintMessages(messages: Message[]) #\"\n  {% for m in messages %}\n    {{ _.role(m.role) }}\n    {{ m.message }}\n  {% endfor %}\n\"#\n\nfunction ClassifyConversation(messages: Message[]) -> Category[] {\n  client GPT4Turbo\n  prompt #\"\n    Classify this conversation:\n    {{ PrintMessages(messages) }}\n\n    Use the following categories:\n    {{ ctx.output_format}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Flexible Reasoning Chain-of-Thought in BAML\nDESCRIPTION: This snippet demonstrates the recommended technique for chain-of-thought prompting, allowing for flexible reasoning. It uses a more open-ended prompt structure to encourage the model to provide relevant information without constraints.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/chain-of-thought.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nfunction GetOrderInfo(email: Email) -> OrderInfo {\n  client \"openai/gpt-\"\n  prompt #\"\n    extract everything from this email.\n\n\n    {{ ctx.output_format }}\n\n    Outline some relevant information before you answer.\n    Example:\n    - ...\n    - ...\n    ...\n    {\n      ... // schema\n    }\n\n    {{ _.role('user') }}\n\n    Sender: {{email.from_address}}\n    Email Subject: {{email.subject}}\n    Email Body: {{email.body}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Structure and Function in BAML\nDESCRIPTION: BAML code that defines the message structure, chat function using OpenAI's GPT-4o, and a test case. It includes a class for user messages, a function to process the chat history, and a sample test.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/chat-history.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass MyUserMessage {\n  role \"user\" | \"assistant\"\n  content string\n}\n\nfunction ChatWithLLM(messages: MyUserMessage[]) -> string {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Answer the user's questions based on the chat history:\n    {% for message in messages %}\n      {{ _.role(message.role) }} \n      {{ message.content }}\n    {% endfor %}\n\n    Answer:\n  \"#\n}\n\ntest TestName {\n  functions [ChatWithLLM]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"Hello!\"\n      }\n      {\n        role \"assistant\"\n        content \"Hi!\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Client with Environment Variable in BAML\nDESCRIPTION: This snippet demonstrates how to configure an LLM client in BAML using an environment variable for the API key. It sets up a GPT-4 client using the OpenAI provider and references the API key from an environment variable.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/environment-variables.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> GPT4o {\n  provider baml-openai-chat\n  options {\n    model gpt-4o\n    api_key env.OPENAI_API_KEY\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Agent with Tool Selection in Python\nDESCRIPTION: Python implementation of an agent that continuously processes user input, selects the appropriate tool using the BAML-defined SelectTool function, and executes the selected tool (either WeatherAPI or CalculatorAPI). The implementation includes handlers for both tools and a main loop for user interaction.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_15\n\nLANGUAGE: Python\nCODE:\n```\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI, CalculatorAPI\n\ndef handle_weather(weather: WeatherAPI):\n    # Simulate weather API call, but you can implement this with a real API call\n    return f\"The weather in {weather.city} at {weather.time} is sunny.\"\n\ndef handle_calculator(calc: CalculatorAPI):\n    numbers = calc.numbers\n    if calc.operation == \"add\":\n        result = sum(numbers)\n    elif calc.operation == \"subtract\":\n        result = numbers[0] - sum(numbers[1:])\n    elif calc.operation == \"multiply\":\n        result = 1\n        for n in numbers:\n            result *= n\n    elif calc.operation == \"divide\":\n        result = numbers[0]\n        for n in numbers[1:]:\n            result /= n\n    return f\"The result is {result}\"\n\ndef main():\n    print(\"Agent started! Type 'exit' to quit.\")\n    \n    while True:\n        # Get user input\n        user_input = input(\"You: \")\n        if user_input.lower() == 'exit':\n            break\n\n        # Call the BAML function to select tool\n        tool_response = b.SelectTool(user_input)\n\n        # Handle the tool response\n        if isinstance(tool_response, WeatherAPI):\n            result = handle_weather(tool_response)\n            print(f\"Agent (Weather): {result}\")\n        \n        elif isinstance(tool_response, CalculatorAPI):\n            result = handle_calculator(tool_response)\n            print(f\"Agent (Calculator): {result}\")\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Advanced LLM Client Configuration in BAML\nDESCRIPTION: Detailed configuration of a named LLM client with custom parameters including API key, temperature, base URL, and custom headers. Shows how to create a reusable client configuration for more complex scenarios.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/switching-llms.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai\"\n  options {\n    model \"gpt-4o\"\n    api_key env.OPENAI_API_KEY\n    // other params like temperature, top_p, etc.\n    temperature 0.0\n    base_url \"https://my-custom-endpoint.com/v1\"\n    // add headers\n    headers {\n      \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n    }\n  }\n\n}\n\nfunction MakeHaiku(topic: string) -> string {\n  client MyClient\n  prompt #\"\n    Write a haiku about {{ topic }}.\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining PII Data Schema in BAML\nDESCRIPTION: This snippet defines the data schema for PII extraction, including classes for individual PII data items and a container class for PII extraction results.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/pii-data-extraction.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass PIIData {\n  index int\n  dataType string\n  value string\n}\n\nclass PIIExtraction {\n  privateData PIIData[]\n  containsSensitivePII bool @description(\"E.g. SSN\")\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI LLM Client in BAML\nDESCRIPTION: Defines an OpenAI client configuration using BAML syntax. Specifies the client type as LLM, sets OpenAI as the provider, and configures model parameters including the GPT-4 model and API key from environment variables.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/clients/openai.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> OpenAI {\n  provider openai\n  options {\n    model gpt-4o\n    api_key env.OPENAI_API_KEY\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Assertions in BAML\nDESCRIPTION: Example of using @assert validation in BAML to ensure integer values fall within specific ranges. The first example shows field-level validation on a class property, while the second demonstrates function-level validation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  bar int @assert(between_0_and_10, {{ this > 0 and this < 10 }}) //this = Foo.bar value\n}\n\nfunction NextInt8(a: int) -> int @assert(ok_int8, {{ this >= -128 and this < 127 }}) {\n  client GPT4\n  prompt #\"Return the number after {{ a }}\"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BAML Functions for Story and Poem Generation\nDESCRIPTION: This snippet demonstrates how to define BAML functions that interact with LLMs. It includes two functions: TellMeAStory which takes no input, and WriteAPoemAbout which accepts a string input. Both use the GPT-4o model from OpenAI.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/client.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nfunction TellMeAStory() -> string {\n    client \"openai/gpt-4o\"\n    prompt #\"\n      Tell me a story\n    \"#\n}\n\nfunction WriteAPoemAbout(input: string) -> string {\n    client \"openai/gpt-4o\"\n    prompt #\"\n      Write a poem about {{ input }}\n    \"#\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Email Extraction Function\nDESCRIPTION: Example of a simple BAML function that extracts email addresses from text using GPT4Turbo.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nfunction ExtractEmail(text: string) -> string {\n    client GPT4Turbo\n    prompt #\"\n        Extract the email address from the following text:\n        {{ text }}\n        \n        {{ ctx.output_format }}\n    \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chain-of-Thought Prompting in BAML\nDESCRIPTION: This snippet demonstrates the first technique of chain-of-thought prompting, where the model is required to reason before outputting the structured object. It includes function and class definitions for extracting order information from an email.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/chain-of-thought.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nfunction GetOrderInfo(email: Email) -> OrderInfo {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    extract everything from this email.\n\n\n    {{ ctx.output_format }}\n\n    Before you answer, please explain your reasoning step-by-step. \n    \n    For example:\n    If we think step by step we can see that ...\n\n    Therefore the output is:\n    {\n      ... // schema\n    }\n\n    {{ _.role('user') }}\n\n    Sender: {{email.from_address}}\n    Email Subject: {{email.subject}}\n    Email Body: {{email.body}}\n  \"#\n}\n\nclass Email {\n    subject string\n    body string\n    from_address string\n}\n\n\nclass OrderInfo {\n    order_status \"ORDERED\" | \"SHIPPED\" | \"DELIVERED\" | \"CANCELLED\"\n    tracking_number string?\n    estimated_arrival_date string?\n}\n\ntest Test1 {\n  functions [GetOrderInfo]\n  args {\n    email {\n      from_address \"hello@amazon.com\"\n      subject \"Your Amazon.com order of 'Wood Dowel Rods...' has shipped!\"\n      body #\"\n        Hi Sam, your package will arrive:\n        Thurs, April 4\n        Track your package:\n        www.amazon.com/gp/your-account/ship-track?ie=23&orderId123\n\n        On the way:\n        Wood Dowel Rods...\n        Order #113-7540940\n        Ship to:\n            Sam\n            SEATTLE, WA\n\n        Shipment total:\n        $0.00\n    \"#\n\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring vLLM Client with OpenAI Compatible Interface in BAML\nDESCRIPTION: This code snippet demonstrates how to set up a BAML LLM client that connects to a locally running vLLM server using the OpenAI-compatible API. The configuration includes the base URL, API key, model selection, and default role setting which is required for vLLM integration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vllm.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:8000/v1\"\n    api_key \"token-abc123\"\n    model \"NousResearch/Meta-Llama-3-8B-Instruct\"\n    default_role \"user\" // Required for using VLLM\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Receipt Information in Python\nDESCRIPTION: Python code demonstrating three ways to use BAML's streaming capabilities: iterating through partial responses, using only the final response, and using the async client for streaming.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom baml_client import b, partial_types, types\n\n# Using a stream:\ndef example1(receipt: str):\n    stream = b.stream.ExtractReceiptInfo(receipt)\n\n    # partial is a Partial type with all Optional fields\n    for partial in stream:\n        print(f\"partial: parsed {len(partial.items)} items (object: {partial})\")\n\n    # final is the full, original, validated ReceiptInfo type\n    final = stream.get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\n# Using only get_final_response() of a stream\n#\n# In this case, you should just use b.ExtractReceiptInfo(receipt) instead,\n# which is slightly faster and more efficient.\ndef example2(receipt: str):\n    final = b.stream.ExtractReceiptInfo(receipt).get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\n# Using the async client:\nasync def example3(receipt: str):\n    # Note the import of the async client\n    from baml_client.async_client import b\n    stream = b.stream.ExtractReceiptInfo(receipt)\n    async for partial in stream:\n        print(f\"partial: parsed {len(partial.items)} items (object: {partial})\")\n\n    final = await stream.get_final_response()\n    print(f\"final: {len(final.items)} items (object: {final})\")\n\nreceipt = \"\"\"\n04/14/2024 1:05 pm\n\nTicket: 220000082489\nRegister: Shop Counter\nEmployee: Connor\nCustomer: Sam\nItem\t#\tPrice\nGuide leash (1 Pair) uni UNI\n1\t$34.95\nThe Index Town Walls\n1\t$35.00\nBoot Punch\n3\t$60.00\nSubtotal\t$129.95\nTax ($129.95 @ 9%)\t$11.70\nTotal Tax\t$11.70\nTotal\t$141.65\n\"\"\"\n\nif __name__ == '__main__':\n    asyncio.run(example1(receipt))\n    asyncio.run(example2(receipt))\n    asyncio.run(example3(receipt))\n```\n\n----------------------------------------\n\nTITLE: Defining Tool Schemas with BAML\nDESCRIPTION: Defines two tool schemas (WeatherAPI and CalculatorAPI) and a SelectTool function that uses GPT-4o to determine which tool to use based on user input. The schema includes data types and descriptions for parameters.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_14\n\nLANGUAGE: Rust\nCODE:\n```\nclass WeatherAPI {\n  city string\n  time string @description(\"Current time in ISO8601 format\")\n}\n\nclass CalculatorAPI {\n  operation \"add\" | \"subtract\" | \"multiply\" | \"divide\"\n  numbers float[]\n}\n\nfunction SelectTool(message: string) -> WeatherAPI | CalculatorAPI {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Given a message, extract info.\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} {{ message }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring an OpenAI LLM Client in BAML\nDESCRIPTION: Basic example of configuring an OpenAI client in BAML, setting the API key, model, and temperature.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/openai.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai\"\n  options {\n    api_key env.MY_OPENAI_KEY\n    model \"gpt-3.5-turbo\"\n    temperature 0.1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Weather API Tool in Python\nDESCRIPTION: This Python code demonstrates how to use the BAML-defined WeatherAPI tool. It calls the UseTool function with a user message, processes the returned WeatherAPI object, and uses it to get weather information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport datetime\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI\n\ndef get_weather(city: str, time_of_day: datetime.date):\n    ...\n\ndef main():\n    weather_info = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(weather_info)\n    assert isinstance(weather_info, WeatherAPI)\n    print(f\"City: {weather_info.city}\")\n    print(f\"Time of Day: {weather_info.time_of_day}\")\n    weather = get_weather(city=weather_info.city, time_of_day=weather_info.timeOfDay)\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring Google AI Client in BAML\nDESCRIPTION: Basic configuration of a BAML client using the Google AI provider with the gemini-1.5-flash model.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/google-ai.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider google-ai\n  options {\n    model \"gemini-1.5-flash\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML React hooks in a Component\nDESCRIPTION: Example showing how to use a BAML React hook in a functional component with streaming enabled. Demonstrates basic hook usage, error handling, and triggering the hook with a button click.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/react-nextjs/hook-output.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Component() {\n  const hook = useTestAws({\n    stream: true, // optional, defaults to true\n  })\n\n  return (\n    <div>\n      {hook.error && <div>Error: {hook.error.message}</div>}\n      <button onClick={() => hook.mutate(\"test\")} disabled={hook.isLoading}>\n        Submit\n      </button>\n    </div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Using baml_client in Python\nDESCRIPTION: Demonstrates how to use the generated baml_client to call a BAML function in Python. This snippet shows the simplicity of using the generated client to extract information from a resume.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-is-baml_client.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nresume_info = b.ExtractResume(\"....some text...\")\n```\n\n----------------------------------------\n\nTITLE: Concurrent Function Calls in Python\nDESCRIPTION: Demonstrates how to make concurrent ClassifyMessage function calls using Python's asyncio and gather functionality. The example shows processing multiple message classifications simultaneously.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/concurrent-calls.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\n\nfrom baml_client.async_client import b\nfrom baml_client.types import Category\n\nasync def main():\n    await asyncio.gather(\n        b.ClassifyMessage(\"I want to cancel my order\"),\n        b.ClassifyMessage(\"I want a refund\")\n    )\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Defining a Multi-modal BAML Function with Image Input\nDESCRIPTION: This example shows how to create a BAML function that accepts an image input and prompts a GPT-4o model to describe the image. It includes a test case using a sample image URL.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/multi-modal.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\n// \"image\" is a reserved keyword so we name the arg \"img\"\nfunction DescribeMedia(img: image) -> string {\n  client openai/gpt-4o\n  // Most LLM providers require images or audio to be sent as \"user\" messages.\n  prompt #\"\n    {{_.role(\"user\")}}\n    Describe this image: {{ img }}\n  \"#\n}\n\n// See the \"testing functions\" Guide for more on testing Multimodal functions\ntest Test {\n  functions [DescribeMedia]\n  args {\n    img {\n      url \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Chat Function in BAML\nDESCRIPTION: Creates a BAML function for chat completion using OpenAI GPT-4. Defines Message class structure and implements chat functionality with prompt template and test case.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/02-chatbot.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Message {\n  role \"user\" | \"assistant\"\n  content string\n}\n\nfunction Chat(messages: Message[]) -> string {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    You are a helpful and knowledgeable AI assistant engaging in a conversation.\n    Your responses should be:\n    - Clear and concise\n    - Accurate and informative\n    - Natural and conversational in tone\n    - Focused on addressing the user's needs\n\n    {{ ctx.output_format }}\n\n    {% for m in messages %}\n    {{ _.role(m.role)}}\n    {{m.content}}\n    {% endfor %}\n  \"#\n}\n\ntest TestName {\n  functions [Chat]\n  args {\n    messages [\n      {\n        role \"user\"\n        content \"help me understand Chobani's success\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BAML Function Testing Example\nDESCRIPTION: Demonstrates how to test a message classification function using a test snippet in BAML. The example shows a complete function definition with an enum, the function implementation, and a test case with an assertion.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nenum Category {\n    Refund\n    CancelOrder\n    TechnicalSupport\n    AccountIssue\n    Question\n}\n\nfunction ClassifyMessage(input: string) -> Category {\n  client GPT4Turbo\n  prompt #\"\n    ... truncated ...\n  \"#\n}\n\ntest Test1 {\n  functions [ClassifyMessage]\n  args {\n    // input is the first argument of ClassifyMessage\n    input \"Can't access my account using my usual login credentials, and each attempt results in an error message stating 'Invalid username or password.' I have tried resetting my password using the 'Forgot Password' link, but I haven't received the promised password reset email.\"\n  }\n  // 'this' is the output of the function\n  @@assert( {{ this == \"AccountIssue\" }})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure AI Foundary Client in BAML\nDESCRIPTION: Demonstrates how to set up a BAML LLM client for Azure AI Foundary using the openai-generic provider. The configuration includes the base URL for the Azure AI resource and API key authentication through environment variables.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/azure-ai-foundary.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://RESOURCE_NAME.REGION.models.ai.azure.com\"\n    api_key env.MY_API_KEY\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a ChatAgent Function in BAML\nDESCRIPTION: This snippet demonstrates how to define a function in BAML that takes message and tone parameters, uses the OpenAI GPT-4 model, and returns either a StopTool or ReplyTool. It includes a prompt template with Jinja-like syntax for dynamic content.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/README.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfunction ChatAgent(message: Message[], tone: \"happy\" | \"sad\") -> StopTool | ReplyTool {\n    client \"openai/gpt-4o-mini\"\n\n    prompt #\"\n        Be a {{ tone }} bot.\n\n        {{ ctx.output_format }}\n\n        {% for m in message %}\n        {{ _.role(m.role) }}\n        {{ m.content }}\n        {% endfor %}\n    \"#\n}\n\nclass Message {\n    role string\n    content string\n}\n\nclass ReplyTool {\n  response string\n}\n\nclass StopTool {\n  action \"stop\" @description(#\"\n    when it might be a good time to end the conversation\n  \"#)\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Type Transformations with Streaming Attributes in BAML\nDESCRIPTION: This code defines a stock recommendation system with streaming attributes. It includes enum and class definitions with various streaming attributes to control how types behave during streaming. The function 'Respond' generates responses based on conversation history.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_7\n\nLANGUAGE: baml\nCODE:\n```\nenum Stock {\n  APPL\n  MSFT\n  GOOG\n  BAML\n}\n\n// Make recommendations atomic - we do not want a recommendation to be\n// modified by streaming additional messages.\nclass Recommendation {\n  stock Stock\n  amount float\n  action \"buy\" | \"sell\"\n  @@stream.done\n}\n\nclass AssistantMessage {\n  message_type \"greeting\" | \"conversation\" | \"farewell\" @stream.not_null\n  message string @stream.with_state @stream.not_null\n}\n\nfunction Respond(\n  history: (UserMessage | AssistantMessage | Recommendation)[]\n) -> Message | Recommendation { \n  client DeepseekR1\n  prompt #\"\n    Make the message in the conversation, using a conversational\n    message or a stock recommendation, based on this conversation history:\n    {{ history }}.\n\n    {{ ctx.output_format }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML functions in TypeScript with async/await and streaming\nDESCRIPTION: Example demonstrating how to import and use BAML functions in TypeScript with both standard async/await and streaming patterns. Shows how to extract a Resume type from raw input.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_16\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from \"./baml_client\"\nimport type { Resume } from \"./baml_client/types\"\n\nasync function Example(raw_resume: string): Promise<Resume> {\n  // BAML's internal parser guarantees ExtractResume\n  // to be always return a Resume type\n  const response = await b.ExtractResume(raw_resume);\n  return response;\n}\n\nasync function ExampleStream(raw_resume: string): Promise<Resume> {\n  const stream = b.stream.ExtractResume(raw_resume);\n  for await (const msg of stream) {\n    console.log(msg) // This will be a Partial<Resume> type\n  }\n\n  // This is guaranteed to be a Resume type.\n  return await stream.getFinalResponse();\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RAG Function with Citations in BAML\nDESCRIPTION: This BAML code defines a new ResponseWithCitations class and RAGWithCitations function that includes citations in the output. It also includes a test case to verify the citation functionality.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/rag.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nclass ResponseWithCitations {\n  question string\n  answer string\n  citations string[]\n}\n\nfunction RAGWithCitations(question: string, context: string) -> ResponseWithCitations {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Answer the question in full sentences using the provided context. \n    If the statement contains information from the context, put the exact cited quotes in complete sentences in the citations array.\n    Do not make up an answer. If the information is not provided in the context, say so clearly.\n    \n    QUESTION: {{ question }}\n    RELEVANT CONTEXT: {{ context }}\n    {{ ctx.output_format }}\n    RESPONSE:\n  \"#\n}\n\ntest TestCitations {\n  functions [RAGWithCitations]\n  args {\n    question \"What can you tell me about SpaceX and its founder?\"\n    context #\"\n      SpaceX is an American spacecraft manufacturer and space transportation company founded by Elon Musk in 2002.\n      The company has developed several launch vehicles and spacecraft.\n      Einstein was born on March 14, 1879. \n    \"#\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Nesting Multiple Fallback Providers in BAML\nDESCRIPTION: Illustrates how to nest multiple fallback providers. This example creates a SuperDuperClient with a fallback strategy, then includes it in another fallback client called MegaClient.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/fallback.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> SuperDuperClient {\n  provider fallback\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}\n\nclient<llm> MegaClient {\n  provider fallback\n  options {\n    strategy [\n      SuperDuperClient\n      ClientD\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Story Generation with BAML and OpenAI\nDESCRIPTION: This BAML file defines a Story class with title and content properties, a WriteMeAStory function that uses OpenAI to generate a story based on a user prompt, and a test case for the function. The function formats the prompt with a storyteller context and user role.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/prompts/story.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Story {\n  title: string\n  content: string\n}\n\nfunction WriteMeAStory(prompt: string) -> Story {\n  client OpenAI\n  prompt #\"\n    Act as a storyteller.\n\n    { ctx.output_format }\n\n    { _.role('user') }\n    Once upon a time {prompt}\n  \"#\n}\n\ntest WriteMeAStory {\n  functions [WriteMeAStory]\n  args {\n    prompt \"The Universe\"\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Conditional Story Creation Function in BAML\nDESCRIPTION: This code defines a 'CreateStory' function that uses a boolean parameter to determine the story length. The function uses OpenAI's GPT-4o-mini model and includes two test cases - one for generating a long 10-paragraph story and another for a short 1-paragraph story.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/bool.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nfunction CreateStory(long: bool) -> string {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        Write a story that is {{ \"10 paragraphs\" if long else \"1 paragraph\" }} long.\n    \"#\n}\n\ntest LongStory {\n    functions [CreateStory]\n    args { long true }\n}\n\ntest ShortStory {\n    functions [CreateStory]\n    args { long false }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multi-Label Ticket Classification Function in BAML\nDESCRIPTION: Defines a function for classifying support tickets with multiple labels. Uses OpenAI's GPT-4o-mini model to analyze tickets and assign all applicable categories from the TicketLabel enum.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/classification.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nfunction ClassifyTicket(ticket: string) -> TicketClassification {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    You are a support agent at a tech company. Analyze the support ticket and select all applicable labels.\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }}\n    \n    {{ ticket }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Request Classification with BAML\nDESCRIPTION: This snippet demonstrates how to define a request classification function using BAML, including enum definitions and prompt engineering.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/marvin.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nenum RequestType {\n  SUPPORT @alias(\"support request\")\n  ACCOUNT @alias(\"account issue\") @description(\"A detailed description\")\n  INQUIRY @alias(\"general inquiry\")\n}\n\nfunction ClassifyRequest(input: string) -> RequestType {\n  client GPT4 // choose even open source models\n  prompt #\"\n    You are an expert classifier that always maintains as much semantic meaning\n    as possible when labeling text. Classify the provided data,\n    text, or information as one of the provided labels:\n\n    TEXT:\n    ---\n    {{ input }}\n    ---\n\n    {{ ctx.output_format }}\n\n    The best label for the text is:\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Reusable Chain-of-Thought Snippets in BAML\nDESCRIPTION: This snippet shows how to create a reusable chain-of-thought template using the template_string feature in BAML. It allows for customization of the reasoning prompt across multiple functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/chain-of-thought.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\ntemplate_string ChainOfThought(action: string?) #\"\n    Before you answer, please explain your reasoning step-by-step.\n    {% if action %}{{ action }}{% endif %}\n    \n    For example:\n    If we think step by step we can see that ...\n\n    Therefore the output is:\n    {\n      ... // schema\n    }\n\"#\n\nfunction GetOrderInfo(email: Email) -> OrderInfo {\n  client \"openai/gpt-\"\n  prompt #\"\n    Extract everything from this email.\n\n    {{ ctx.output_format }}\n\n    {{ ChainOfThought(\"focus on things related to shipping\") }}\n\n    {{ _.role('user') }}\n\n    Sender: {{email.from_address}}\n    Email Subject: {{email.subject}}\n    Email Body: {{email.body}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Using PineconeStore for RAG with BAML in Python\nDESCRIPTION: Demonstrates the usage of PineconeStore class to add documents, retrieve context, and perform RAG using BAML functions. It shows how to integrate Pinecone with BAML for question answering.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/rag.mdx#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nif __name__ == \"__main__\":\n    # Initialize Pinecone store\n    vector_store = PineconeStore(\"baml-rag-demo\")\n    \n    # Sample documents (same as before)\n    documents = [\n        \"SpaceX is an American spacecraft manufacturer and space transportation company founded by Elon Musk in 2002.\",\n        \"Fiji is a country in the South Pacific known for its rugged landscapes, palm-lined beaches, and coral reefs with clear lagoons.\",\n        \"Dunkirk is a 2017 war film depicting the Dunkirk evacuation of World War II, featuring intense aerial combat scenes with Spitfire aircraft.\",\n        \"BoundaryML is the company that makes BAML, the best way to get structured outputs with LLMs.\"\n    ]\n    \n    # Add documents to Pinecone\n    vector_store.add_documents(documents)\n    \n    # Test questions (same as before)\n    questions = [\n        \"What is BAML?\",\n        \"Which aircraft was featured in Dunkirk?\",\n        \"When was SpaceX founded?\",\n        \"Where is Fiji located?\",\n        \"What is the capital of Fiji?\"\n    ]\n\n    # Query using the same BAML functions\n    for question in questions:\n        context = vector_store.retrieve_context(question)\n        response = b.RAGWithCitations(question, context)\n        print(response)\n        print(\"-\" * 10)\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Generic Client for Reasoning Models in BAML\nDESCRIPTION: This snippet illustrates how to configure an openai-generic client for reasoning models like 'o1' or 'o1-mini'. It shows how to set the model and handle token limits correctly for these specific models.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/openai-generic.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> OpenAIo1 {\n  provider \"openai-generic\"\n  options {\n    model \"o1-mini\"\n    max_tokens null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution with BAML Client in Python\nDESCRIPTION: Demonstrates how to run multiple BAML functions in parallel while maintaining consistent configuration using asyncio. The example shows how to access results and usage data for each call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.async_client import b\nfrom baml_py import ClientRegistry, Collector\nimport asyncio\n\nasync def run():\n    collector = Collector(name=\"my-collector\")\n    my_b = b.with_options(collector=collector, client_registry=client_registry)\n\n    # Run multiple functions in parallel\n    res, invoice = await asyncio.gather(\n        my_b.ExtractResume(\"...\"),\n        my_b.ExtractInvoice(\"...\")\n    )\n\n    # Access results and logs\n    print(res)\n    print(invoice)\n    print(collector.id(res.id).usage)\n    print(collector.id(invoice.id).usage)\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Loop in Python\nDESCRIPTION: Python implementation of the chatbot using the BAML client. It initializes a message list, enters a loop to collect user input, sends messages to the LLM, and adds responses to the chat history for context.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/chat-history.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_client.types import MyUserMessage\n\ndef main():\n    messages: list[MyUserMessage] = []\n    \n    while True:\n        content = input(\"Enter your message (or 'quit' to exit): \")\n        if content.lower() == 'quit':\n            break\n        \n        messages.append(MyUserMessage(role=\"user\", content=content))\n        \n        agent_response = b.ChatWithLLM(messages=messages)\n        print(f\"AI: {agent_response}\")\n        print()\n        \n        # Add the agent's response to the chat history\n        messages.append(MyUserMessage(role=\"assistant\", content=agent_response))\n\nif __name__ == \"__main__\":\n    main()\n```\n\n----------------------------------------\n\nTITLE: Updating PII Extraction Function to Use Local LLM in BAML\nDESCRIPTION: This updated version of the ExtractPII function uses the locally defined SecureLocalLLM client instead of the OpenAI model, ensuring that PII processing remains within the organization's infrastructure.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/pii-data-extraction.mdx#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\nfunction ExtractPII(document: string) -> PIIExtraction {\n  // use a local model instead of openai\n  client SecureLocalLLM\n  prompt #\"\n    Extract all personally identifiable information (PII) from the given document. Look for items like:\n    - Names\n    - Email addresses\n    - Phone numbers\n    - Addresses\n    - Social security numbers\n    - Dates of birth\n    - Any other personal data\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} \n    \n    {{ document }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Client with AWS Bedrock Inference Parameters\nDESCRIPTION: BAML code snippet showing how to configure a client for AWS Bedrock with specific inference configuration parameters including token limits and temperature settings.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_22\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    inference_configuration {\n      max_tokens 1000\n      temperature 1.0\n      top_p 0.8\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Functions with Image Inputs - Base64 Method\nDESCRIPTION: Shows how to test a function that takes an image input using base64-encoded data. The test includes the media type specification to identify the image format.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\ntest Test1 {\n  args {\n    myImage {\n      base64 \"base64string\"\n      media_type \"image/png\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action Chat Interface in React\nDESCRIPTION: Enhanced React component implementation using custom server action for chat functionality with improved error handling and loading states.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/02-chatbot.mdx#2025-04-18_snippet_4\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useChat } from \"@/baml_client/react/hooks\";\nimport { streamChat } from \"../actions/chat\";\nimport { useState } from \"react\";\n\nexport function ChatInterface() {\n  const [messages, setMessages] = useState<Message[]>([]);\n  const [input, setInput] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<Error | null>(null);\n\n  const handleSubmit = async () => {\n    const newMessages = [\n      ...messages,\n      { role: \"user\", content: input }\n    ];\n    setInput(\"\");\n    setIsLoading(true);\n    setError(null);\n\n    try {\n      const stream = await streamChat(newMessages);\n\n      for await (const message of stream) {\n        setMessages((prev) => [...prev, message]);\n      }\n    } catch (error) {\n      setError(error as Error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div>\n      <div>\n        {messages.map((message, i) => (\n          <div key={i}>\n            {message.content}\n          </div>\n        ))}\n        {isLoading && <div>Typing...</div>}\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <div>\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            placeholder=\"Type your message...\"\n          />\n          <button type=\"submit\" disabled={isLoading}>\n            Send\n          </button>\n        </div>\n      </form>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Image Objects in TypeScript with BAML\nDESCRIPTION: This example shows various methods to create Image objects in TypeScript, including URL-based, Base64-based, and browser-specific methods (from File or Blob). It demonstrates how to use these objects with BAML client functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/image.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client'\nimport { Image } from \"@boundaryml/baml\"\n\n// Create an Image from a URL\nlet res = await b.TestImageInput(\n    Image.fromUrl('https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png')\n)\n\n// Create an Image from Base64 data\nconst image_b64 = \"iVB0xyz...\"\nres = await b.TestImageInput(\n    Image.fromBase64('image/png', image_b64)\n)\n\n// Browser-specific methods\nconst fileImage = await Image.fromFile(file)\nconst blobImage = await Image.fromBlob(blob, 'image/png')\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Template Logic in BAML\nDESCRIPTION: Example of using Jinja-style conditional statements within a BAML template function to generate different outputs based on a user's active status. The function takes a User object and returns a personalized string message.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/conditionals.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nfunction MyFunc(user: User) -> string {\n  prompt #\"\n    {% if user.is_active %}\n      Welcome back, {{ user.name }}!\n    {% else %}\n      Please activate your account.\n    {% endif %}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining RAG Functions and Tests in BAML\nDESCRIPTION: This BAML code defines the Response class, RAG function, and various test cases for the RAG implementation. It includes prompts for answering questions based on provided context and handling missing information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/rag.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Response {\n  question string\n  answer string\n}\n\nfunction RAG(question: string, context: string) -> Response {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Answer the question in full sentences using the provided context.\n    Do not make up an answer. If the information is not provided in the context, say so clearly.\n    \n    QUESTION: {{ question }}\n    RELEVANT CONTEXT: {{ context }}\n\n    {{ ctx.output_format }}\n\n    RESPONSE:\n  \"#\n}\n\ntest TestOne {\n  functions [RAG]\n  args {\n    question \"When was SpaceX founded?\"\n    context #\"\n      SpaceX is an American spacecraft manufacturer and space transportation company founded by Elon Musk in 2002.\n    \"#\n  }\n}\n\ntest TestTwo {\n  functions [RAG]\n  args {\n    question \"Where is Fiji located?\"\n    context #\"\n      Fiji is a country in the South Pacific known for its rugged landscapes, palm-lined beaches, and coral reefs with clear lagoons.\n    \"#\n  }\n}\n\ntest TestThree {\n  functions [RAG]\n  args {\n    question \"What is the primary product of BoundaryML?\"\n    context #\"\n      BoundaryML is the company that makes BAML, the best way to get structured outputs with LLMs.\n    \"#\n  }\n}\n\ntest TestMissingContext{\n  functions [RAG]\n  args {\n    question \"Who founded SpaceX?\"\n    context #\"\n      BoundaryML is the company that makes BAML, the best way to get structured with LLMs.\n    \"#\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Data Models for Action Items in BAML\nDESCRIPTION: Defines the data structures for representing tasks extracted from meeting transcripts, including a Subtask class, Priority enum, and a Ticket class with metadata fields.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/action-items.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Subtask {\n  id int\n  name string\n}\n\nenum Priority {\n  HIGH\n  MEDIUM\n  LOW\n}\n\nclass Ticket {\n  id int\n  name string \n  description string\n  priority Priority\n  assignees string[]\n  subtasks Subtask[]\n  dependencies int[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class with Cross-Field Assertion in BAML\nDESCRIPTION: This snippet defines a 'Person' class using BAML, demonstrating a block-level assertion that checks a dependency across multiple fields. It ensures that a person is either 18 or older, or not from the USA.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_16\n\nLANGUAGE: baml\nCODE:\n```\nclass Person {\n    name string @assert(valid_name, {{ this|length >= 2 }})\n    age int @assert(valid_age, {{ this >= 0 }})\n    address Address\n\n    @@assert(not_usa_minor, {{\n        this.age >= 18 or this.address.country != \"USA\",\n    }})\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Complex Type Definition and Parsing\nDESCRIPTION: Complex example showing custom type definitions with arrays and literal types, along with a parsing function implementation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/function.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclass Person {\n    name string\n    age int\n    contacts Contact[]\n}\n\nclass Contact {\n    type \"email\" | \"phone\"\n    value string\n}\n\nfunction ParsePerson(data: string) -> Person {\n    client \"openai/gpt-4o\"\n    prompt #\"\n        {{ ctx.output_format }}\n        \n        {{ _.role('user') }}\n        {{ data }}\n    \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing RAG with Custom Vector Store in Python\nDESCRIPTION: This Python code demonstrates how to use the custom VectorStore class and BAML client to implement a RAG pipeline. It creates a vector store from documents, processes a list of questions, and generates responses using the RAG function.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/rag.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\n\n# class VectorStore:\n# ...\n\nif __name__ == \"__main__\":\n    documents = [\n        \"SpaceX is an American spacecraft manufacturer and space transportation company founded by Elon Musk in 2002.\",\n        \"Fiji is a country in the South Pacific known for its rugged landscapes, palm-lined beaches, and coral reefs with clear lagoons.\",\n        \"Dunkirk is a 2017 war film depicting the Dunkirk evacuation of World War II, featuring intense aerial combat scenes with Spitfire aircraft.\",\n        \"BoundaryML is the company that makes BAML, the best way to get structured outputs with LLMs.\"\n    ]\n\n    vector_store = VectorStore.from_documents(documents)\n\n    questions = [\n        \"What is BAML?\",\n        \"Which aircraft was featured in Dunkirk?\",\n        \"When was SpaceX founded?\",\n        \"Where is Fiji located?\",\n        \"What is the capital of Fiji?\"\n    ]\n\n    for question in questions:\n        context = vector_store.retrieve_context(question)\n        response = b.RAG(question, context)\n        print(response)\n        print(\"-\" * 10)\n```\n\n----------------------------------------\n\nTITLE: Defining and Using a Named LLM Client in BAML\nDESCRIPTION: This snippet shows how to define a named LLM client 'MyClient' with specific provider and model options, and then use it in a function. It allows for more detailed configuration of the LLM client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/client-llm.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai\"\n  options {\n    model \"gpt-4o\"\n    // api_key defaults to env.OPENAI_API_KEY\n  }\n}\n\nfunction MakeHaiku(topic: string) -> string {\n  client MyClient\n  prompt #\"\n    Write a haiku about {{ topic }}.\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Symbol-Tuned Classification Function Implementation in BAML\nDESCRIPTION: Implements a classification system using symbol tuning technique where enum values are aliased to abstract symbols (k1-k5). The function uses GPT-4 to classify input text into predefined categories including refunds, order cancellations, technical support, account issues, and general questions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/symbol-tuning.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nenum MyClass {\n    Refund @alias(\"k1\")\n    @description(\"Customer wants to refund a product\")\n\n    CancelOrder @alias(\"k2\")\n    @description(\"Customer wants to cancel an order\")\n\n    TechnicalSupport @alias(\"k3\")\n    @description(\"Customer needs help with a technical issue unrelated to account creation or login\")\n\n    AccountIssue @alias(\"k4\")\n    @description(\"Specifically relates to account-login or account-creation\")\n\n    Question @alias(\"k5\")\n    @description(\"Customer has a question\")\n}\n\nfunction ClassifyMessageWithSymbol(input: string) -> MyClass {\n  client GPT4o\n\n  prompt #\"\n    Classify the following INPUT into ONE\n    of the following categories:\n\n    INPUT: {{ input }}\n\n    {{ ctx.output_format }}\n\n    Response:\n  \"#\n}\n\ntest Test1 {\n  functions [ClassifyMessageWithSymbol]\n  args {\n    input \"I can't access my account using my login credentials. I havent received the promised reset password email. Please help.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Retry Policy in BAML\nDESCRIPTION: This snippet shows how to define a basic retry policy in BAML. It sets the maximum number of retries to 3.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/retry.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nretry_policy MyPolicyName {\n  max_retries 3\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Vector Store in Python\nDESCRIPTION: This Python code implements a custom VectorStore class using scikit-learn's TfidfVectorizer for document embedding and cosine similarity for retrieval. It provides methods for creating a vector store from documents and retrieving relevant context.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/rag.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport numpy as np\n\nclass VectorStore:\n    \"\"\"\n    Adapted from https://github.com/MadcowD/ell/blob/main/examples/rag/rag.py\n    \"\"\"\n    def __init__(self, vectorizer, tfidf_matrix, documents):\n        self.vectorizer = vectorizer\n        self.tfidf_matrix = tfidf_matrix\n        self.documents = documents\n\n    @classmethod\n    def from_documents(cls, documents: list[str]) -> \"VectorStore\":\n        vectorizer = TfidfVectorizer()\n        tfidf_matrix = vectorizer.fit_transform(documents)\n        return cls(vectorizer, tfidf_matrix, documents)\n\n    def retrieve_with_scores(self, query: str, k: int = 2) -> list[dict]:\n        query_vector = self.vectorizer.transform([query])\n        similarities = cosine_similarity(query_vector, self.tfidf_matrix).flatten()\n        top_k_indices = np.argsort(similarities)[-k:][::-1]\n        return [\n            {\"document\": self.documents[i], \"relevance\": float(similarities[i])}\n            for i in top_k_indices\n        ]\n\n    def retrieve_context(self, query: str, k: int = 2) -> str:\n        documents = self.retrieve_with_scores(query, k)\n        return \"\\n\".join([item[\"document\"] for item in documents])\n```\n\n----------------------------------------\n\nTITLE: Defining and Testing Image Description Function in BAML\nDESCRIPTION: This snippet defines a function 'DescribeImage' that takes an image input and returns a string description. It also includes test cases demonstrating different ways to pass image data: URL, base64 encoded string, and file path.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/media.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\n// Pass in an image type\nfunction DescribeImage(image: image) -> string {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        Describe the image.\n        {{ image }}\n    \"#\n}\n\ntest ImageDescriptionFromURL {\n    functions [DescribeImage]\n    args {\n        image {\n            url \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"\n        }\n    }\n}\n\ntest ImageDescriptionFromBase64 {\n    functions [DescribeImage]\n    args { \n        image {\n            media_type \"image/png\"\n            base64 \"iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAQAAAC1HAwCAAAAC0lEQVR42mP8/x/AAzmH+UlvRkwAAAAASUVORK5CYII=\"\n        }\n    }\n}\n\ntest ImageDescriptionFromFile {\n    functions [DescribeImage]\n    args {\n        image {\n            file \"./shrek.png\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Deploying BAML Code to Boundary Functions\nDESCRIPTION: Command to deploy your BAML code to Boundary Functions. This should be run in your baml_src/ directory and will prompt you to create a new Boundary project.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/functions/get-started.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli deploy\n```\n\n----------------------------------------\n\nTITLE: Streaming Mode with BAML Client in TypeScript\nDESCRIPTION: Demonstrates how to use streaming mode with a configured BAML client in TypeScript. The example shows processing stream chunks and accessing the final result and usage data.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Collector } from \"@boundaryml/baml\"\n\nconst collector = new Collector(\"my-collector\")\nconst myB = b.withOptions({ collector, clientRegistry })\n\nconst stream = myB.stream.ExtractResume(\"...\")\nfor await (const chunk of stream) {\n    console.log(chunk)\n}\n\nconst result = await stream.getFinalResult()\nconsole.log(collector.id(stream.id)?.usage)\n```\n\n----------------------------------------\n\nTITLE: Using BAML functions in Python (Asynchronous)\nDESCRIPTION: Example of how to use BAML functions in Python asynchronously, including both regular and streaming calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.async_client import b\nfrom baml_client.types import Resume\n\nasync def example(raw_resume: str) -> Resume: \n  # BAML's internal parser guarantees ExtractResume\n  # to be always return a Resume type\n  response = await b.ExtractResume(raw_resume)\n  return response\n\nasync def example_stream(raw_resume: str) -> Resume:\n  stream = b.stream.ExtractResume(raw_resume)\n  async for msg in stream:\n    print(msg) # This will be a PartialResume type\n  \n  # This will be a Resume type\n  final = await stream.get_final_response()\n\n  return final\n```\n\n----------------------------------------\n\nTITLE: Defining Receipt Types and Extraction Function in BAML\nDESCRIPTION: A BAML function definition that extracts receipt information from an email using GPT-4o. It defines structured classes for receipt items and receipt information to be used in streaming.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nclass ReceiptItem {\n  name string\n  description string?\n  quantity int\n  price float\n}\n\nclass ReceiptInfo {\n    items ReceiptItem[]\n    total_cost float?\n}\n\nfunction ExtractReceiptInfo(email: string) -> ReceiptInfo {\n  client GPT4o\n  prompt #\"\n    Given the receipt below:\n\n    {{ email }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Field-Level Attributes in BAML\nDESCRIPTION: This snippet demonstrates the usage of field-level attributes in a BAML class. It shows how to apply @alias, @description, and @check attributes to modify individual fields.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/attributes-overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass MyClass {\n  property1 string @alias(\"name\") @description(\"The name of the object\")\n  age int? @check(positive, {{ this > 0 }})\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Reasoning as Comments in BAML\nDESCRIPTION: This snippet demonstrates how to ask the model to embed reasoning as comments in the structured object. It uses the @description attribute to instruct the model to list relevant clues from the email before the fields.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/chain-of-thought.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclass OrderInfo {\n    order_status \"ORDERED\" | \"SHIPPED\" | \"DELIVERED\" | \"CANCELLED\"\n      @description(#\"\n        before fields, in comments list out any relevant clues from the email\n      \"#)\n    tracking_number string?\n    estimated_arrival_date string?\n}\n\nfunction GetOrderInfo(email: Email) -> OrderInfo {\n  client \"openai/gpt-\"\n  prompt #\"\n    extract everything from this email.\n\n    {{ ctx.output_format }}\n\n    {{ _.role('user') }}\n\n    Sender: {{email.from_address}}\n    Email Subject: {{email.subject}}\n    Email Body: {{email.body}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Local LLM Client in BAML for Enhanced Security\nDESCRIPTION: This snippet defines a local LLM client using Ollama for organizations that need to keep PII processing within their infrastructure. It specifies the provider, base URL, model, and other options.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/pii-data-extraction.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> SecureLocalLLM {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:11434/v1\"\n    model \"llama3.1:latest\"\n    temperature 0 \n    default_role \"user\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML-generated Client in Python\nDESCRIPTION: This Python code demonstrates how to use the BAML-generated client to interact with the ChatAgent function. It implements a simple chat loop that continues until a StopTool is returned.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_client.types import Message, StopTool\n\nmessages = [Message(role=\"assistant\", content=\"How can I help?\")]\n\nwhile True:\n  print(messages[-1].content)\n  user_reply = input()\n  messages.append(Message(role=\"user\", content=user_reply))\n  tool = b.ChatAgent(messages, \"happy\")\n  if isinstance(tool, StopTool):\n    print(\"Goodbye!\")\n    break\n  else:\n    messages.append(Message(role=\"assistant\", content=tool.response))\n```\n\n----------------------------------------\n\nTITLE: Parsing Streaming LLM Responses with .parse_stream Pattern\nDESCRIPTION: Shows how to use the .parse_stream call pattern to incrementally parse responses from streaming LLM APIs. This allows for showing structured partial results as they become available.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/client.mdx#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom openai import AsyncOpenAI\nfrom baml_client.async_client import b\n\nasync def example():\n  client = AsyncOpenAI()\n\n  request = await b.stream_request.TellMeAStory()\n  stream = await client.chat.completions.create(**request.body.json())\n\n  llm_response: list[str] = []\n  async for chunk in stream:\n    if len(chunk.choices) > 0 and chunk.choices[0].delta.content is not None:\n      llm_response.append(chunk.choices[0].delta.content)\n      print(b.parse_stream.TellMeAStory(\"\".join(llm_response)))\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport OpenAI from 'openai'\nimport { b } from '../baml_client/async_client'\n\nasync function example() {\n    const client = new OpenAI()\n\n    const request = await b.stream_request.TellMeAStory()\n    const stream = await client.chat.completions.create(**request.body.json())\n\n    let llmResponse: string[] = []\n    for await (const chunk of stream) {\n        if (chunk.choices.length > 0 && chunk.choices[0].delta.content) {\n            llmResponse.push(chunk.choices[0].delta.content)\n            console.log(b.parse_stream.TellMeAStory(llmResponse.join('')))\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Class Definition in BAML with Python and TypeScript Equivalents\nDESCRIPTION: Demonstrates how to define a class named Foo with various property types including strings, optional integers, arrays, and enum types. Shows equivalent implementations in Python using Pydantic and TypeScript using Zod.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/class.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  property1 string\n  property2 int?\n  property3 Bar[]\n  property4 MyEnum\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom pydantic import BaseModel\nfrom path.to.bar import Bar\nfrom path.to.my_enum import MyEnum\n\nclass Foo(BaseModel):\n  property1: str\n  property2: Optional[int]= None\n  property3: List[Bar]\n  property4: MyEnum\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport z from \"zod\";\nimport { BarZod } from \"./path/to/bar\";\nimport { MyEnumZod } from \"./path/to/my_enum\";\n\nconst FooZod = z.object({\n  property1: z.string(),\n  property2: z.number().int().nullable().optional(),\n  property3: z.array(BarZod),\n  property4: MyEnumZod,\n});\n\ntype Foo = z.infer<typeof FooZod>;\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Policy with Constant Delay Strategy in BAML\nDESCRIPTION: This snippet shows how to define a retry policy with a constant delay strategy. It sets the maximum retries to 3 and uses a constant delay of 200 milliseconds between retries.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/retry.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nretry_policy MyPolicyName {\n  max_retries 3\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Task Extraction Function with GPT-4 in BAML\nDESCRIPTION: Implements a function that uses OpenAI's GPT-4 to analyze meeting transcripts and extract structured task information, returning an array of Ticket objects.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/action-items.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nfunction ExtractTasks(transcript: string) -> Ticket[] {\n  client \"openai/gpt-4\"\n  prompt #\"\n    You are an expert at analyzing meeting transcripts and extracting structured action items and tasks.\n    Extract all action items, tasks and subtasks from the meeting transcript below.\n    For each task:\n    - Generate a unique ID\n    - Include who is assigned to it\n    - Set appropriate priority level\n    - Identify subtasks if any\n    - Note any dependencies on other tasks\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} {{ transcript }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ctx.output_format in BAML Prompt\nDESCRIPTION: Example showing how to use ctx.output_format within a BAML function to extract resume information. The function takes resume text as input and returns a structured Resume object.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/output-format.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Resume {\n  name string\n  education Education[]\n}\nfunction ExtractResume(resume_text: string) -> Resume {\n  prompt #\"\n    Extract this resume:\n    ---\n    {{ resume_text }}\n    ---\n\n    {{ ctx.output_format }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Generator in BAML\nDESCRIPTION: Defines a generator that outputs TypeScript code. The configuration specifies the output directory, client mode preference (async in this case), and the version of runtime to use, which should match the installed @boundaryml/baml package version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/generator.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"async\"\n\n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.76.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Calling BAML Functions with Audio Inputs in TypeScript\nDESCRIPTION: This TypeScript code shows how to call BAML functions that take audio inputs. It demonstrates loading audio from both URLs and base64-encoded strings.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/multi-modal.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client'\nimport { Audio } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestAudioInput(\n    Audio.fromUrl('https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg'),\n  )\n\n  // Base64\n  const audio_base64 = \"..\"\n  let res = await b.TestAudioInput(\n    Audio.fromBase64('audio/ogg', audio_base64),\n  )\n  \n```\n\n----------------------------------------\n\nTITLE: Basic Test Declaration Syntax in BAML\nDESCRIPTION: The fundamental structure for declaring tests in BAML, defining the test name, functions to test, and parameter assignments.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\ntest name {\n    functions [function_list]\n    args {\n        parameter_assignments\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Function Declaration with Custom Types\nDESCRIPTION: Example showing how to define custom types using class declarations and using them in functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/function.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclass CustomType {\n    field1 string\n    field2 int\n    nested NestedType\n}\n\nfunction ProcessCustomType(data: CustomType) -> ResultType {\n    // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Handling BAML Errors in TypeScript\nDESCRIPTION: Example of catching BAML exceptions in TypeScript, showing how to distinguish between different error types and access error properties. Includes comments on error message formatting patterns for identifying error types.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/error-handling.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from './baml_client'\n// For catching parsing errors, you can import this\nimport { BamlValidationError, BamlClientFinishReasonError } from '@boundaryml/baml'\n// The rest of the BAML errors contain a string that is prefixed with:\n// \"BamlError:\"\n// Subclasses are sequentially appended to the string.\n// For example, BamlInvalidArgumentError is returned as:\n// \"BamlError: BamlInvalidArgumentError:\"\n// Or, BamlClientHttpError is returned as:\n// \"BamlError: BamlClientError: BamlClientHttpError:\"\n\n\nasync function example() {\n  try {\n    await b.CallFunctionThatRaisesError()\n  } catch (e) {\n    if (e instanceof BamlValidationError || e instanceof BamlClientFinishReasonError) {\n      // You should be lenient to these fields missing.\n      // The original prompt sent to the LLM\n      console.log(e.prompt)\n      // The LLM response string\n      console.log(e.raw_output)\n      // A human-readable error message\n      console.log(e.message)\n    } else {\n      // Handle other BAML errors\n      console.log(e)\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Provider for LLM Client in BAML\nDESCRIPTION: Demonstrates how to set up a fallback provider for an LLM client. It specifies a strategy with multiple client options to try in order.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/fallback.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> SuperDuperClient {\n  provider fallback\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Chat Loop in TypeScript\nDESCRIPTION: TypeScript implementation of the chatbot using the BAML client. It sets up a readline interface for user input, maintains a message array, and uses async/await for the chat loop with promises.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/chat-history.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b, MyUserMessage } from 'baml_client';\nimport * as readline from 'readline';\n\nconst rl = readline.createInterface({\n  input: process.stdin,\n  output: process.stdout\n});\n\nconst messages: MyUserMessage[] = [];\n\nfunction askQuestion(query: string): Promise<string> {\n  return new Promise((resolve) => {\n    rl.question(query, resolve);\n  });\n}\n\nasync function main() {\n\n  while (true) {\n    const content = await askQuestion(\"Enter your message (or 'quit' to exit): \");\n    if (content.toLowerCase() === 'quit') {\n      break;\n    }\n\n    messages.push({ role: \"user\", content });\n\n    const agentResponse = await b.ChatWithLLM({ messages });\n    console.log(`AI: ${agentResponse}`);\n    console.log();\n\n    // Add the agent's response to the chat history\n    messages.push({ role: \"assistant\", content: agentResponse });\n  }\n\n  rl.close();\n}\n\nmain();\n```\n\n----------------------------------------\n\nTITLE: Generating OpenAPI Specification from BAML\nDESCRIPTION: Defines a generator block in BAML to generate an OpenAPI specification. It includes a command to run after generation for creating an OpenAPI client using a specified generator type.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-is-baml_client.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\n    output_type \"rest/openapi\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.54.0\"\n\n    // 'baml-cli generate' will run this after generating openapi.yaml, to generate your OpenAPI client\n    // This command will be run from within $output_dir\n    on_generate \"npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g OPENAPI_CLIENT_TYPE -o .\"\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files and Extracting Data with Boundary ML API in Python\nDESCRIPTION: Python implementation for uploading files to the Boundary ML API and extracting data using a prompt. The function takes an API key, file paths, and a prompt, then makes a POST request to the API with the files and prompt as form data.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/extract/examples.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport requests\nfrom typing import List, Dict, Any\n\ndef extract_data(api_key: str, file_paths: List[str], prompt: str) -> Dict[str, Any]:\n    url = \"https://api2.boundaryml.com/v3/extract\"\n    headers = {\n        \"Authorization\": f\"Bearer {api_key}\"\n    }\n    files = [('files', open(file_path, 'rb')) for file_path in file_paths]\n    data = {\n        'prompt': prompt\n    }\n    response = requests.post(url, headers=headers, files=files, data=data)\n    response.raise_for_status()\n    return response.json()\n\n# Usage example\napi_key = 'your_api_key_here'\nfile_paths = ['path/to/file1.pdf', 'path/to/file2.png']\nprompt = 'Please extract the text content.'\n\nresult = extract_data(api_key, file_paths, prompt)\nprint(result)\n```\n\n----------------------------------------\n\nTITLE: Uploading Files and Extracting Data with Boundary ML API in TypeScript\nDESCRIPTION: TypeScript implementation for uploading files to the Boundary ML API and extracting data. The function uses axios for HTTP requests and FormData for handling multipart form data. It includes typed interfaces for the API response structure.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/extract/examples.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport axios, { AxiosResponse } from 'axios';\nimport * as FormData from 'form-data';\nimport * as fs from 'fs';\n\ninterface ExtractResponse {\n  extractions: Extraction[];\n  usage: Usage;\n  request_id: string;\n}\n\ninterface Extraction {\n  source: Source;\n  output: any;\n}\n\ninterface Source {\n  type: string;\n  name?: string;\n  page?: number;\n}\n\ninterface Usage {\n  consumed_chars: number;\n  produced_chars: number;\n  consumed_megapixels: number;\n}\n\nasync function extractData(apiKey: string, filePaths: string[], prompt: string): Promise<ExtractResponse> {\n  const url = 'https://api2.boundaryml.com/v3/extract';\n  const formData = new FormData();\n\n  filePaths.forEach(filePath => {\n    formData.append('files', fs.createReadStream(filePath));\n  });\n  formData.append('prompt', prompt);\n\n  const headers = {\n    ...formData.getHeaders(),\n    'Authorization': `Bearer ${apiKey}`,\n  };\n\n  const response: AxiosResponse<ExtractResponse> = await axios.post(url, formData, { headers });\n  return response.data;\n}\n\n// Usage example\nconst apiKey = 'your_api_key_here';\nconst filePaths = ['path/to/file1.pdf', 'path/to/file2.png'];\nconst prompt = 'Please extract the text content.';\n\nextractData(apiKey, filePaths, prompt)\n  .then(result => console.log(result))\n  .catch(error => console.error(error));\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Tracing in Python\nDESCRIPTION: Demonstrates how to implement function tracing in Python using the @trace decorator for monitoring book analysis operations. Includes preprocessing, sentiment analysis, and full book analysis functionality.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/07-observability/studio.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import baml\nfrom baml_client.types import Book, AuthorInfo\nfrom baml_client.tracing import trace\n\n# You can also add a custom name with trace(name=\"my_custom_name\")\n# By default, we use the function's name.\n@trace\ndef pre_process_text(text):\n    return text.replace(\"\\n\", \" \")\n\n\n@trace\nasync def full_analysis(book: Book):\n    sentiment = await baml.ClassifySentiment(\n        pre_process_text(book.content)\n    )\n    book_analysis = await baml.AnalyzeBook(book)\n    return book_analysis\n\n\n@trace\nasync def test_book1():\n    content = \"\"\"Before I could reply that he [Gatsby] was my neighbor...\n    \"\"\"\n    processed_content = pre_process_text(content)\n    return await full_analysis(\n        Book(\n            title=\"The Great Gatsby\",\n            author=AuthorInfo(firstName=\"F. Scott\", lastName=\"Fitzgerald\"),\n            content=processed_content,\n        ),\n    )\n```\n\n----------------------------------------\n\nTITLE: BAML Vertex AI Client with Custom Headers\nDESCRIPTION: Example of configuring a Vertex AI client in BAML with custom headers for the API request. Shows how to add additional headers to every call made by the client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_6\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n    // Additional headers\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Weather API Tool in BAML\nDESCRIPTION: This snippet defines a WeatherAPI class and a UseTool function in BAML. The WeatherAPI class represents the structure of the weather data, while the UseTool function uses GPT-4 to extract weather information from a user message.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass WeatherAPI {\n  city string @description(\"the user's city\")\n  timeOfDay string @description(\"As an ISO8601 timestamp\")\n}\n\nfunction UseTool(user_message: string) -> WeatherAPI {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Given a message, extract info.\n    {# special macro to print the functions return type. #}\n    {{ ctx.output_format }}\n\n    {{ _.role('user') }}\n    {{ user_message }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution with BAML Client in TypeScript\nDESCRIPTION: Shows how to run multiple BAML functions in parallel while maintaining consistent configuration in TypeScript using Promise.all. The example demonstrates accessing results and usage data for each call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Collector, ClientRegistry } from \"@boundaryml/baml\"\n\nconst collector = new Collector(\"my-collector\")\nconst myB = b.withOptions({ collector, clientRegistry })\n\n// Run multiple functions in parallel\nconst [\n    {data: res, id: resumeId},\n    {data: invoice, id: invoiceId}\n] = await Promise.all([\n    myB.raw.ExtractResume(\"...\"),\n    myB.raw.ExtractInvoice(\"...\")\n])\n\n// Access results and logs\nconsole.log(res)\nconsole.log(invoice)\nconsole.log(collector.id(resumeId)?.usage)\nconsole.log(collector.id(invoiceId)?.usage)\n```\n\n----------------------------------------\n\nTITLE: Using BAML Client in TypeScript\nDESCRIPTION: Demonstrates using the generated BAML client in TypeScript with async/await pattern and type checking.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/my-first-function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport b from 'baml_client'\nimport { Resume } from 'baml_client/types'\n\nasync function main() {\n  const resume_text = `Jason Doe\\nPython, Rust\\nUniversity of California, Berkeley, B.S.\\nin Computer Science, 2020\\nAlso an expert in Tableau, SQL, and C++`\n\n  // this function comes from the autogenerated \"baml_client\".\n  // It calls the LLM you specified and handles the parsing.\n  const resume = await b.ExtractResume(resume_text)\n\n  // Fully type-checked and validated!\n  resume.name === 'Jason Doe'\n  if (resume instanceof Resume) {\n    console.log('resume is a Resume')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating PII Extraction Function in BAML\nDESCRIPTION: This function uses GPT-4 to extract PII from a given document. It specifies the client model, provides extraction guidelines in the prompt, and returns a PIIExtraction object.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/pii-data-extraction.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nfunction ExtractPII(document: string) -> PIIExtraction {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Extract all personally identifiable information (PII) from the given document. Look for items like:\n    - Names\n    - Email addresses\n    - Phone numbers\n    - Addresses\n    - Social security numbers\n    - Dates of birth\n    - Any other personal data\n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} \n    \n    {{ document }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Multiple Functions in Sequence with BAML\nDESCRIPTION: A test that runs multiple functions with the same parameters to test an end-to-end workflow.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_13\n\nLANGUAGE: baml\nCODE:\n```\ntest EndToEndFlow {\n    functions [\n        ExtractInfo\n        ProcessInfo\n        ValidateResult\n    ]\n    args {\n        input \"test data\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Checks for Non-Exception Validations in BAML\nDESCRIPTION: Example of using @check for validations that don't raise exceptions but can be inspected at runtime. Shows how to define a check on an integer field in an array.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_8\n\nLANGUAGE: baml\nCODE:\n```\n( bar int @check(less_than_zero, {{ this < 0 }}) )[]\n```\n\n----------------------------------------\n\nTITLE: React Hook Usage Example in TypeScript\nDESCRIPTION: Demonstrates the basic usage of a BAML-generated React hook including streaming data handling, state tracking, and function execution.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/react-nextjs/use-function-name.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nimport { useWriteMeAStory } from \"@/baml_client/react/hooks\";\n\n// Basic usage with streaming enabled by default\nconst hook = useWriteMeAStory();\n\n// Access streaming and final data\nconst { data, streamData, finalData } = hook;\n\n// Track request state\nconst { isLoading, isStreaming, isPending, isSuccess, isError } = hook;\n\n// Execute the function\nawait hook.mutate(\"A story about a brave AI\");\n\n// Reset state if needed\nhook.reset();\n```\n\n----------------------------------------\n\nTITLE: Parallel Execution with BAML Client in Ruby\nDESCRIPTION: Demonstrates how to run multiple BAML functions in parallel in Ruby while maintaining consistent configuration. The example shows how to access results and usage data for each call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client'\nrequire 'async'\n\nAsync do\n    collector = Baml::Collector.new(name: \"my-collector\")\n    my_b = Baml.Client.with_options(collector: collector, client_registry: client_registry)\n    \n    # Run multiple functions in parallel\n    res, invoice = await [\n        my_b.ExtractResume(input: \"...\"),\n        my_b.ExtractInvoice(input: \"...\")\n    ]\n\n    # Access results and logs\n    print(res)\n    print(invoice)\n    print(collector.id(res.id).usage)\n    print(collector.id(invoice.id).usage)\nend\n```\n\n----------------------------------------\n\nTITLE: Writing Test Cases for Multi-Label Classification in BAML\nDESCRIPTION: Creates test cases for the multi-label support ticket classifier. Includes tests for both single-label scenarios and multi-label scenarios where a ticket falls into multiple categories.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/classification.mdx#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\ntest ClassifyTicketSingleLabel {\n  functions [ClassifyTicket]\n  args {\n    ticket \"I need help resetting my password\"\n  }\n}\n\ntest ClassifyTicketMultiLabel {\n  functions [ClassifyTicket]\n  args {\n    ticket \"My account is locked and I can't access my billing information\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML Client in Ruby\nDESCRIPTION: Shows how to use the generated BAML client in Ruby for making synchronous function calls with typed objects.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/my-first-function.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\nb = Baml.Client\n\n# Note this is not async\nres = b.TestFnNamedArgsSingleClass(\n    myArg: Baml::Types::Resume.new(\n        key: \"key\",\n        key_two: true,\n        key_three: 52,\n    )\n)\n```\n\n----------------------------------------\n\nTITLE: Defining Weather API Function in BAML\nDESCRIPTION: Defines a WeatherAPI class and UseTool function in BAML with OpenAI GPT-4 integration. The class includes city and timeOfDay fields with descriptions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-are-function-definitions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass WeatherAPI {\n  city string @description(\"the user's city\")\n  timeOfDay string @description(\"As an ISO8601 timestamp\")\n}\n\nfunction UseTool(user_message: string) -> WeatherAPI {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Extract.... {# we will explain the rest in the guides #}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Reasoning Models in BAML\nDESCRIPTION: Example showing how to properly configure OpenAI reasoning models (o1, o1-mini) by setting max_tokens to null as required by these models.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/openai.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> OpenAIo1 {\n  provider openai\n  options {\n    model \"o1-mini\"\n    max_tokens null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Text Classification Function with GPT-4 in BAML\nDESCRIPTION: Defines a function that uses OpenAI's GPT-4o-mini model to classify text messages as spam or not spam. The function takes a string input and returns a MessageType enum value.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/classification.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nfunction ClassifyText(input: string) -> MessageType {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Classify the message. \n\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\") }} \n    \n    {{ input }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Testing PII Extraction in BAML\nDESCRIPTION: This snippet includes test cases for the PII extraction function, covering both a document with PII and an empty document scenario.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/pii-data-extraction.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\ntest BasicPIIExtraction {\n  functions [ExtractPII]\n  args {\n    document #\"\n      John Doe was born on 01/02/1980. \n      His email is john.doe@email.com and phone is 555-123-4567.\n      He lives at 123 Main St, Springfield, IL 62704.\n    \"#\n  }\n}\n\ntest EmptyDocument {\n  functions [ExtractPII]\n  args {\n    document \"This document contains no PII data.\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Client Integration in Python\nDESCRIPTION: Example of using the generated BAML client in Python with type-safe access to results.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/function.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_client.types import Person\n\nasync def process() -> Person:\n    result = b.ParsePerson(\"John Doe, 30 years old...\")\n    print(result.name)  # Type-safe access\n    return result\n```\n\n----------------------------------------\n\nTITLE: Calling BAML Functions with Image Inputs in TypeScript\nDESCRIPTION: This TypeScript example shows how to call a BAML function that takes an image input. It demonstrates loading images from both URLs and base64-encoded strings.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/multi-modal.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client'\nimport { Image } from \"@boundaryml/baml\"\n...\n\n  // URL\n  let res = await b.TestImageInput(\n    Image.fromUrl('https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png'),\n  )\n\n  // Base64\n  const image_b64 = \"iVB0R...\"\n  let res = await b.TestImageInput(\n    Image.fromBase64('image/png', image_b64),\n  )\n  \n```\n\n----------------------------------------\n\nTITLE: Attaching a Retry Policy to an LLM Client in BAML\nDESCRIPTION: This example demonstrates how to attach a retry policy to an LLM client in BAML. It configures an Anthropic client with a specific model and API key, and applies the previously defined retry policy.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/retry.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider anthropic\n  retry_policy MyPolicyName\n  options {\n    model \"claude-3-sonnet-20240229\"\n    api_key env.ANTHROPIC_API_KEY\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum with Value-Level Attributes\nDESCRIPTION: Demonstrates how to add value-level attributes including aliases, descriptions, and skip flags. Shows various ways to customize individual enum values.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/enum.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nenum MyEnum {\n  Value1 @alias(\"complete_summary\") @description(\"Answer in 2 sentences\")\n  Value2\n  Value3 @skip\n  Value4 @description(#\"\n    This is a long description that spans multiple lines.\n    It can be useful for providing more context to the value.\n  \"#)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Type Guards with BAML Errors in TypeScript\nDESCRIPTION: This snippet shows how to handle BAML errors using TypeScript's instanceof operator for type checking. It demonstrates a try-catch pattern that distinguishes between different BAML error types for specific error handling.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/errors/overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\ntry {\n  // BAML operation\n} catch (error) {\n  if (error instanceof BamlValidationError) {\n    // Handle validation error\n  } else if (error instanceof BamlClientFinishReasonError) {\n    // Handle finish reason error\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Collectors in Python\nDESCRIPTION: Demonstrates how to use multiple Collectors in Python to track different aspects of an application, including using multiple collectors for the same function call and separately.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import Collector\n\ndef run():\n    # Create separate collectors for different parts of your application\n    collector_a = Collector(name=\"collector-a\")\n    collector_b = Collector(name=\"collector-b\")\n    \n    # Use both collectors for the same function call\n    res = b.ExtractResume(\"...\", baml_options={\"collector\": [collector_a, collector_b]})\n    \n    # Both collectors will have the same logs\n    assert collector_a.last.usage.input_tokens == collector_b.last.usage.input_tokens\n    \n    # Use only collector_a for another call\n    res2 = b.TestOpenAIGPT4oMini(\"another call\", baml_options={\"collector\": collector_a})\n    \n    # collector_a will have 2 logs, collector_b will still have 1\n    assert len(collector_a.logs) == 2\n    assert len(collector_b.logs) == 1\n```\n\n----------------------------------------\n\nTITLE: Adding cache_control metadata to messages in BAML function\nDESCRIPTION: BAML function that analyzes a book, demonstrating how to add 'cache_control' metadata to specific messages. The function sets the metadata parameter to indicate that the user's message should use ephemeral caching.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/prompt-caching.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nfunction AnalyzeBook(book: string) -> string {\n  client<llm> AnthropicClient\n  prompt #\"\n    {{ _.role(\"user\") }}\n    {{ book }}\n    {{ _.role(\"user\", cache_control={\"type\": \"ephemeral\"}) }}\n    Analyze the major themes in Pride and Prejudice.\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Together AI Client with OpenAI Compatibility in BAML\nDESCRIPTION: This snippet demonstrates how to configure a language model client for Together AI using the OpenAI-compatible interface. It overrides the base URL to point to Together AI's API endpoint, uses an environment variable for authentication, and specifies a Llama 3 model.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/together.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://api.together.ai/v1\"\n    api_key env.TOGETHER_API_KEY\n    model \"meta-llama/Llama-3-70b-chat-hf\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple LLM Model Configuration in BAML\nDESCRIPTION: Basic example of configuring a BAML function to use a specific LLM model from OpenAI or Anthropic. Uses environment variables for API keys and demonstrates a simple haiku generation function.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/switching-llms.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfunction MakeHaiku(topic: string) -> string {\n  client \"openai/gpt-4o\" // or anthropic/claude-3-5-sonnet-20240620\n  prompt #\"\n    Write a haiku about {{ topic }}.\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Calling a BAML Function via Boundary API\nDESCRIPTION: Example of how to call a deployed BAML function (ExtractResume) using curl. This shows how to authenticate with your Boundary API key and pass JSON data to the function.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/functions/get-started.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl https://api2.boundaryml.com/v3/functions/prod/call/ExtractResume \\\n  -H \"Authorization: Bearer $BOUNDARY_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n{\n  \"resume\": \"\n    Grace Hopper\n    grace.hopper@example.com\n\n    Experience:\n    - Rear Admiral, US Navy\n    - Senior Programmer, Eckert-Mauchly Computer Corporation\n    - Associate Professor, Vassar College\n\n    Skills:\n    - COBOL\n    - Compiler development\n  \"\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: AWS Bedrock Configuration for AWS Services\nDESCRIPTION: BAML configuration for AWS Bedrock when running in AWS services like Lambda, EC2, or ECS, which will automatically use the service's IAM role.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    region \"us-east-1\"  // Only region is required\n    model \"anthropic.claude-3-sonnet-20240229-v1:0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Semantic Streaming Attributes\nDESCRIPTION: BAML code examples showing how to use streaming attributes (@stream.done, @stream.not_null, @stream.with_state) to control how data streams with semantic validity.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclass ReceiptItem {\n  name string\n  quantity int\n  price float\n\n  // The entire ReceiptItem will only stream when complete\n  @@stream.done\n}\n\n// Receipts is a list of ReceiptItems,\n// each internal item will only stream when complete\ntype Receipts = ReceiptItem[]\n\nclass Person {\n  // Name will only appear when fully complete,\n  // until then it will be null\n  name string @stream.done     \n  // Numbers (floats and ints) will only appear\n  // when fully complete by default\n  age int                     \n  // Bio will stream token by token\n  bio string                  \n}\n```\n\nLANGUAGE: baml\nCODE:\n```\nclass Message {\n  // Message won't stream until type is known\n  type \"error\" | \"success\" | \"info\" @stream.not_null\n  // Timestamp will only appear when fully complete\n  // until then it will be null\n  timestamp string @stream.done                       \n  // Content can stream token by token\n  content string                                      \n}\n```\n\nLANGUAGE: baml\nCODE:\n```\nclass BlogPost {\n  // The blog post will only stream when title is known\n  title string @stream.done @stream.not_null\n  // The content will stream token by token, and include completion state\n  content string @stream.with_state \n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Collector in Python\nDESCRIPTION: Demonstrates how to create a Collector instance, use it with a BAML function call, and access logging information in Python.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import Collector\n\n# Create a collector with optional name\ncollector = Collector(name=\"my-collector\")\n\n# Use it with a function call\nresult = b.ExtractResume(\"...\", baml_options={\"collector\": collector})\n\n# Access logging information\nprint(collector.last.usage)  # Print usage metrics\nprint(collector.last.raw_llm_response)  # Print final response as string\n# since there may be retries, print the last http response received\nprint(collector.last.calls[-1].http_response) \n```\n\n----------------------------------------\n\nTITLE: Using BAML functions in Python (Synchronous)\nDESCRIPTION: Example of how to use BAML functions in Python synchronously, including both regular and streaming calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.sync_client import b\nfrom baml_client.types import Resume\n\ndef example(raw_resume: str) -> Resume: \n  # BAML's internal parser guarantees ExtractResume\n  # to be always return a Resume type\n  response = b.ExtractResume(raw_resume)\n  return response\n\ndef example_stream(raw_resume: str) -> Resume:\n  stream = b.stream.ExtractResume(raw_resume)\n  for msg in stream:\n    print(msg) # This will be a PartialResume type\n  \n  # This will be a Resume type\n  final = stream.get_final_response()\n\n  return final\n```\n\n----------------------------------------\n\nTITLE: Configuring Vertex AI Client in BAML\nDESCRIPTION: Demonstrates how to set up a Vertex AI client using BAML configuration. It specifies the provider, model, and location options.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    location us-central1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Enum Definition in Multiple Languages\nDESCRIPTION: Demonstrates the basic syntax for defining an enum in BAML with equivalent implementations in Python and TypeScript. Shows a simple enum with three values.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/enum.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nenum MyEnum {\n  Value1\n  Value2\n  Value3\n}\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import StrEnum\n\nclass MyEnum(StrEnum):\n  Value1 = \"Value1\"\n  Value2 = \"Value2\"\n  Value3 = \"Value3\"\n```\n\nLANGUAGE: typescript\nCODE:\n```\nenum MyEnum {\n  Value1 = \"Value1\",\n  Value2 = \"Value2\",\n  Value3 = \"Value3\",\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Receipt Information in TypeScript\nDESCRIPTION: TypeScript code showing how to use BAML's streaming capabilities with async iterators to process partial responses and get final validated objects.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from './baml_client'\n\n// Using both async iteration and getFinalResponse() from a stream\nconst example1 = async (receipt: string) => {\n  const stream = b.stream.ExtractReceiptInfo(receipt)\n\n  // partial is a Partial type with all Optional fields\n  for await (const partial of stream) {\n    console.log(`partial: ${partial.items?.length} items (object: ${partial})`)\n  }\n\n  // final is the full, original, validated ReceiptInfo type\n  const final = await stream.getFinalResponse()\n  console.log(`final: ${final.items.length} items (object: ${final})`)\n}\n\n// Using only async iteration of a stream\nconst example2 = async (receipt: string) => {\n  for await (const partial of b.stream.ExtractReceiptInfo(receipt)) {\n    console.log(`partial: ${partial.items?.length} items (object: ${partial})`)\n  }\n}\n\n// Using only getFinalResponse() of a stream\n//\n// In this case, you should just use b.ExtractReceiptInfo(receipt) instead,\n// which is faster and more efficient.\nconst example3 = async (receipt: string) => {\n  const final = await b.stream.ExtractReceiptInfo(receipt).getFinalResponse()\n  console.log(`final: ${final.items.length} items (object: ${final})`)\n}\n\nconst receipt = `\n04/14/2024 1:05 pm\n\nTicket: 220000082489\nRegister: Shop Counter\nEmployee: Connor\nCustomer: Sam\nItem\t#\tPrice\nGuide leash (1 Pair) uni UNI\n1\t$34.95\nThe Index Town Walls\n1\t$35.00\nBoot Punch\n3\t$60.00\nSubtotal\t$129.95\nTax ($129.95 @ 9%)\t$11.70\nTotal Tax\t$11.70\nTotal\t$141.65\n`\n\nif (require.main === module) {\n  example1(receipt)\n  example2(receipt)\n  example3(receipt)\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field Assertions in BAML\nDESCRIPTION: Demonstrates how to apply @assert attribute to fields in a BAML class. It shows both named and unnamed assertions, as well as applying assertions to array elements.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/assert.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  // @assert will be applied to the field with the name \"bar\"\n  bar int @assert(between_0_and_10, {{ this > 0 and this < 10 }})\n}\n```\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  // @assert will be applied to the field with no name\n  bar int @assert({{ this > 0 and this < 10 }})\n}\n```\n\nLANGUAGE: baml\nCODE:\n```\nclass MyClass {\n  // @assert will be applied to each element in the array\n  my_field (string @assert(is_valid_email, {{ this|regex_match(\"@\") }}))[]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _.role() in Template Strings for Reusable Components\nDESCRIPTION: This snippet demonstrates how to use _.role() within a template string component that can be reused across different functions, maintaining proper role assignments.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/role.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\ntemplate_string YouAreA(name: string, job: string) #\"\n  {{ _.role(\"system\") }} \n  You are an expert {{ name }}. {{ job }}\n\n  {{ ctx.output_format }}\n  {{ _.role(\"user\") }}\n\"#\n\nfunction CheckJobPosting(post: string) -> bool {\n  client GPT4o\n  prompt #\"\n    {{ YouAreA(\"hr admin\", \"You're role is to ensure every job posting is bias free.\") }}\n\n    {{ post }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Tools in TypeScript\nDESCRIPTION: This TypeScript code shows how to handle a BAML function that can return multiple tool types. It uses property checks to determine which tool was returned and processes it accordingly.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from './baml_client'\nimport { WeatherAPI, MyOtherAPI } from './baml_client/types'\n\nconst main = async () => {\n  const tool = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(tool)\n  \n  // BAML doesn't generate concrete types in TypeScript\n  // We check which tool by checking if certain fields exist\n  if (\"city\" in tool) {\n    console.log(\"Weather API called:\")\n    console.log(`City: ${tool.city}`)\n    console.log(`Time of Day: ${tool.timeOfDay}`)\n  } else if (\"operation\" in tool) {\n    console.log(\"MyOtherAPI called:\")\n    // Handle MyOtherAPI specific attributes here\n  }\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Implementing Direct Hook Chat Interface in React\nDESCRIPTION: React component implementation using the generated BAML hook directly for chat functionality. Includes state management and basic UI elements.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/02-chatbot.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\nimport { useChat } from \"@/baml_client/react/hooks\";\nimport { useState } from \"react\";\n\nexport function ChatInterface() {\n  const [input, setInput] = useState(\"\");\n\n  const chat = useChat();\n\n  const handleSubmit = async () => {\n    const newMessages = [\n      ...chat.data?.messages,\n      { role: \"user\", content: input }\n    ];\n\n    setInput(\"\");\n\n    await chat.mutate({ messages: newMessages });\n  };\n\n  return (\n    <div>\n      <div>\n        {chat.data?.messages.map((message, i) => (\n          <div key={i}>\n            {message.content}\n          </div>\n        ))}\n        {chat.isLoading && <div>Generating...</div>}\n      </div>\n\n      <form onSubmit={handleSubmit}>\n        <input\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          placeholder=\"Type your message...\"\n        />\n        <button type=\"submit\" disabled={chat.isLoading}>\n          Send\n        </button>\n      </form>\n    </div>\n  );\n```\n\n----------------------------------------\n\nTITLE: Using BAML functions in TypeScript with synchronous client\nDESCRIPTION: Example demonstrating how to use BAML functions with the synchronous client in TypeScript. Shows the simpler pattern for extracting a Resume type when asynchronous operation isn't needed.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_17\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from \"./baml_client/sync_client\"\nimport type { Resume } from \"./baml_client/types\"\n\nfunction Example(raw_resume: string): Resume {\n  // BAML's internal parser guarantees ExtractResume\n  // to be always return a Resume type\n  const response = b.ExtractResume(raw_resume);\n  return response;\n}\n\n// Streaming is not available in the sync_client.\n```\n\n----------------------------------------\n\nTITLE: Accessing Check Results in Python\nDESCRIPTION: Example of accessing check results in Python client code. Shows how to retrieve both the validated value and the status of each check that was performed.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_client.types import Citation, get_checks\n\ndef main():\n    citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n    # Access the value of the quote field\n    quote = citation.quote.value \n    print(f\"Quote: {quote}\")\n\n    # Access a particular check.\n    quote_match_check = citation.quote.checks['exact_citation_match'].status\n    print(f\"Citation match status: {quote_match_check})\")\n\n    # Access each check and its status.\n    for check in get_checks(citation.quote.checks):\n        print(f\"Check {check.name}: {check.status}\")\n```\n\n----------------------------------------\n\nTITLE: Using the Sync Client in Different Languages\nDESCRIPTION: Examples of using the BAML sync client in Python, TypeScript, and Ruby. The sync client provides a blocking interface to BAML functions, making it simpler to use in synchronous contexts.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/client.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.sync_client import b\n\ndef example():\n    # Call your BAML functions.\n    story = b.TellMeAStory()\n    poem = b.WriteAPoemAbout(\"Roses\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client/sync_client'\n\nfunction example() {\n    // Call your BAML functions.\n    const story = b.TellMeAStory()\n    const poem = b.WriteAPoemAbout(\"Roses\")\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client/client'\n\nb = Baml.Client\n\ndef example\n  # Call your BAML functions.\n  story = b.TellMeAStory()\n  poem = b.WriteAPoemAbout(\"Roses\")\nend\n```\n\n----------------------------------------\n\nTITLE: Creating BAML Clients with Default Options in TypeScript\nDESCRIPTION: Sets up a BAML client with default configuration options for collector and client registry in TypeScript. The configured client applies these options to all function calls but allows for overriding on specific calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from \"baml_client\"\nimport { Collector, ClientRegistry } from \"@boundaryml/baml\"\n\n// Set up default options for this client\nconst collector = new Collector(\"my-collector\")\nconst clientRegistry = new ClientRegistry()\nclientRegistry.setPrimary(\"openai/gpt-4o-mini\")\n\n// Create client with default options\nconst myB = b.withOptions({ collector, clientRegistry })\n\n// Uses the default options\nconst result = await myB.ExtractResume(\"...\")\n\n// Override options for a specific call\nconst otherCollector = new Collector(\"other-collector\")\nconst result2 = await myB.ExtractResume(\"...\", { collector: otherCollector })\n```\n\n----------------------------------------\n\nTITLE: HookInput TypeScript Type Definition\nDESCRIPTION: The complete TypeScript type definition for HookInput, which specifies the configuration options available for BAML React hooks including streaming options and callback functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/react-nextjs/hook-input.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype HookInput<FunctionName, Options extends { stream?: boolean } = { stream?: true }> = {\n  stream?: Options['stream']\n  onStreamData?: Options['stream'] extends false ? never : (response?: StreamDataType<FunctionName>) => void\n  onFinalData?: (response?: FinalDataType<FunctionName>) => void\n  onData?: (response?: StreamDataType<FunctionName> | FinalDataType<FunctionName>) => void\n  onError?: (error: BamlErrors) => void\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Assertions with Union Types in BAML\nDESCRIPTION: Shows how to apply assertions to different types within a union. Each type in the union can have its own specific assertion that's applied only when that specific type is present at runtime.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  bar (int @assert(positive, {{ this > 0 }}) | bool @assert(is_true, {{ this }}))\n}\n```\n\n----------------------------------------\n\nTITLE: Using Dynamic Tool Signature in Python\nDESCRIPTION: This Python code demonstrates how to dynamically define the signature of a BAML tool at runtime. It uses the TypeBuilder to construct the WeatherAPI type based on the signature of a Python function.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_13\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nimport inspect\n\nfrom baml_client import b\nfrom baml_client.type_builder import TypeBuilder\nfrom baml_client.types import WeatherAPI\n\nasync def get_weather(city: str, time_of_day: str):\n    print(f\"Getting weather for {city} at {time_of_day}\")\n    return 42\n\nasync def main():\n    tb = TypeBuilder()\n    type_map = {int: tb.int(), float: tb.float(), str: tb.string()}\n    signature = inspect.signature(get_weather)\n    for param_name, param in signature.parameters.items():\n        tb.WeatherAPI.add_property(param_name, type_map[param.annotation])\n    tool = b.UseTool(\"What's the weather like in San Francisco this afternoon?\", { \"tb\": tb })\n    print(tool)\n    weather = await get_weather(**tool.model_dump())\n    print(weather)\n\nif __name__ == '__main__':\n    asyncio.run(main())\n```\n\n----------------------------------------\n\nTITLE: Using Pinecone as Vector Database in Python\nDESCRIPTION: This Python code demonstrates how to use Pinecone as a production-ready vector database for the RAG implementation. It includes initialization of Pinecone, document embedding, and querying the vector database.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/rag.mdx#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nimport pinecone as pc\nfrom sentence_transformers import SentenceTransformer\nfrom pinecone import ServerlessSpec\nfrom baml_client import b\n```\n\n----------------------------------------\n\nTITLE: Defining BAML Story Generator Function\nDESCRIPTION: BAML function definition for generating stories using GPT-4 with streaming support and type definitions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/01-quick-start.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Story {\n  title string @stream.not_null\n  content string @stream.not_null\n}\n\nfunction WriteMeAStory(input: string) -> Story {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Tell me a story\n\n    {{ ctx.output_format() }}\n\n    {{ _.role(\"user\") }}\n\n    Topic: {{input}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Enum Definition in BAML\nDESCRIPTION: Example of defining an enumeration type with optional description annotations\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nenum Name {\n  Value1\n  Value2 @description(\"My optional description annotation\")\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Dynamic Classes in Python\nDESCRIPTION: Shows how to use TypeBuilder in Python to modify a dynamic User class by adding new properties at runtime, then using it in a BAML function call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  tb.User.add_property('email', tb.string())\n  tb.User.add_property('address', tb.string()).description(\"The user's address\")\n  res = await b.DynamicUserCreator(\"some user info\", { \"tb\": tb })\n  # Now res can have email and address fields\n  print(res)\n```\n\n----------------------------------------\n\nTITLE: Concurrent Function Calls in TypeScript\nDESCRIPTION: Shows how to implement concurrent ClassifyMessage function calls in TypeScript using Promise.all(). The example demonstrates parallel processing of multiple message classifications.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/concurrent-calls.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from './baml_client'\nimport { Category } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const category = await Promise.all(\n    b.ClassifyMessage('I want to cancel my order'),\n    b.ClassifyMessage('I want a refund'),\n  )\n}\n\nif (require.main === module) {\n  main()\n}\n```\n\n----------------------------------------\n\nTITLE: Defining BAML Function for Extracting Student Information\nDESCRIPTION: BAML function definition for extracting structured student information from text, with parameters for output class and model selection.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-lib/baml-core/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbaml add --function\n```\n\n----------------------------------------\n\nTITLE: Using Template Strings with Jinja in BAML\nDESCRIPTION: This example demonstrates how to create a reusable template_string called PrintMessages that iterates through an array of Message objects and formats them with appropriate roles. The template is then used in a ClassifyConversation function that calls GPT-4 Turbo to categorize conversations.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/reusing-prompt-snippets.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\n// Inject a list of \"system\" or \"user\" messages into the prompt.\n// Note the syntax -- there are no curlies. Just a string block.\ntemplate_string PrintMessages(messages: Message[]) #\"\n  {% for m in messages %}\n    {{ _.role(m.role) }}\n    {{ m.message }}\n  {% endfor %}\n\"#\n\nfunction ClassifyConversation(messages: Message[]) -> Category[] {\n  client GPT4Turbo\n  prompt #\"\n    Classify this conversation:\n    {{ PrintMessages(messages) }}\n\n    Use the following categories:\n    {{ ctx.output_format}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Tools Array in Python\nDESCRIPTION: This Python code demonstrates how to use a BAML function that returns an array of multiple tool types. It iterates through the returned tools and processes each based on its type.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI, MyOtherAPI\n\nasync def main():\n    tools = b.UseTool(\"What's the weather like in San Francisco and New York?\")\n    print(tools)  \n    \n    for tool in tools:\n        if isinstance(tool, WeatherAPI):\n            print(f\"Weather API called:\")\n            print(f\"City: {tool.city}\")\n            print(f\"Time of Day: {tool.timeOfDay}\")\n        elif isinstance(tool, MyOtherAPI):\n            print(f\"MyOtherAPI called:\")\n            # Handle MyOtherAPI specific attributes here\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenRouter LLM Client in BAML\nDESCRIPTION: This snippet shows how to set up an LLM client for OpenRouter using BAML. It configures the client to use the OpenAI-generic provider with custom options for OpenRouter, including the base URL, API key, model selection, and optional headers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/openrouter.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://openrouter.ai/api/v1\"\n    api_key env.OPENROUTER_API_KEY\n    model \"openai/gpt-3.5-turbo\"\n    headers {\n      \"HTTP-Referer\" \"YOUR-SITE-URL\" // Optional\n      \"X-Title\" \"YOUR-TITLE\" // Optional\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Weather API Tool in Ruby\nDESCRIPTION: This Ruby code demonstrates the usage of the BAML-defined WeatherAPI tool. It calls the UseTool function, validates the returned object type, and prints the weather information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  weather_info = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts weather_info\n  raise unless weather_info.is_a?(Baml::Types::WeatherAPI)\n  puts \"City: #{weather_info.city}\"\n  puts \"Time of Day: #{weather_info.timeOfDay}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Tools in BAML\nDESCRIPTION: This BAML snippet shows how to define a function that can choose between multiple tools (WeatherAPI and MyOtherAPI) using a union type.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nfunction UseTool(user_message: string) -> WeatherAPI | MyOtherAPI {\n  .... // same thing\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML Syntax for Dynamic Types in TypeScript\nDESCRIPTION: Demonstrates the higher-level API for creating dynamic types using BAML syntax directly in TypeScript. This allows defining multiple types and their relationships in a more declarative way.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_15\n\nLANGUAGE: typescript\nCODE:\n```\nconst tb = new TypeBuilder()\ntb.addBaml(`\n  // Creates a new class Address that does not exist in the BAML source.\n  class Address {\n    street string\n    city string\n    state string\n  }\n\n  // Modifies the existing @@dynamic User class to add the new address property.\n  dynamic class User {\n    address Address\n  }\n\n  // Modifies the existing @@dynamic Category enum to add a new variant.\n  dynmic enum Category {\n    VALUE5\n  }\n`)\n```\n\n----------------------------------------\n\nTITLE: Generated Python Code with Streaming Types\nDESCRIPTION: The Python code generated from the BAML definitions. It showcases how streaming attributes affect the resulting types, including the StreamState wrapper for fields with @stream.with_state and the handling of @stream.not_null and @stream.done attributes.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nclass StreamState(BaseModel, Generic[T]):\n  value: T,\n  state: Literal[\"Pending\", \"Incomplete\", \"Complete\"]\n\nclass Stock(str, Enum):\n    APPL = \"APPL\"\n    MSFT = \"MSFT\"\n    GOOG = \"GOOG\"\n    BAML = \"BAML\"\n\nclass Recommendation(BaseClass):\n    stock: Stock\n    amount: float\n    action: Literal[\"buy\", \"sell\"]\n\nclass Message(BaseClass):\n  message_type: Literal[\"gretting\",\"conversation\",\"farewell\"]\n  message: StreamState[string]\n```\n\n----------------------------------------\n\nTITLE: Creating BAML Clients with Default Options in Ruby\nDESCRIPTION: Sets up a BAML client with default configuration options for collector and client registry in Ruby. The configured client applies these options to all function calls but allows for overriding on specific calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client'\n\n# Set up default options for this client\ncollector = Baml::Collector.new(name: \"my-collector\")\nclient_registry = Baml::ClientRegistry.new\nclient_registry.set_primary(\"openai/gpt-4o-mini\")\n\n# Create client with default options\nmy_b = Baml.Client.with_options(collector: collector, client_registry: client_registry)\n\n# Uses the default options\nresult = my_b.ExtractResume(input: \"...\")\n\n# Override options for a specific call\nother_collector = Baml::Collector.new(name: \"other-collector\")\nresult2 = my_b.ExtractResume(input: \"...\", baml_options: { collector: other_collector })\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Environment Variables in TypeScript\nDESCRIPTION: This example demonstrates how to manually set environment variables for BAML in TypeScript using the resetBamlEnvVars function. This approach requires BAML version 0.57+ and allows for programmatic environment variable configuration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n// Wait to import the BAML client until after loading environment variables\nimport { b } from './baml_client'\nimport { resetBamlEnvVars } from './baml_client/config'\n\nresetBamlEnvVars({ \"OPENAI_API_KEY\": \"sk-super-secret-key\" })\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Dynamic Types in Python\nDESCRIPTION: Shows how to add descriptions to dynamic type properties in Python, which helps with documentation and improves prompt clarity.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\ntb = TypeBuilder()\ntb.User.add_property(\"email\", tb.string()).description(\"The user's email\")\n```\n\n----------------------------------------\n\nTITLE: Streaming Mode with BAML Client in Python\nDESCRIPTION: Shows how to use streaming mode with a configured BAML client in Python. The example demonstrates processing stream chunks and accessing the final result and usage data.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.async_client import b\nfrom baml_py import Collector\n\nasync def run():\n    collector = Collector(name=\"my-collector\")\n    my_b = b.with_options(collector=collector, client_registry=client_registry)\n\n    stream = my_b.stream.ExtractResume(\"...\")\n    async for chunk in stream:\n        print(chunk)\n    \n    result = await stream.get_final_result()\n    print(collector.id(stream.id).usage)\n```\n\n----------------------------------------\n\nTITLE: Image Processing Function in BAML\nDESCRIPTION: Demonstrates how to define a function that processes image input using GPT4Turbo\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nfunction DescribeImage(myImg: image) -> string {\n  client GPT4Turbo\n  prompt #\"\n    {{ _.role(\"user\")}}\n    Describe the image in four words:\n    {{ myImg }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Enum for Financial Categories in Python\nDESCRIPTION: Creates a custom Enum class to represent financial categories with names and descriptions for use in LLM classification prompts. Each enum value stores both a category name and its description.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nclass FinancialCategory(Enum):\n    technology = (\n        \"Technology\",\n        \"Companies involved in the development and production of technology products or services.\",\n    )\n    ...\n    real_estate = (\n        \"Real Estate\",\n        \"Includes real estate investment trusts (REITs) and companies involved in real estate development.\",\n    )\n\n    def __init__(self, category, description):\n        self._category = category\n        self._description = description\n\n    @property\n    def category(self):\n        return self._category\n\n    @property\n    def description(self):\n        return self._description\n```\n\n----------------------------------------\n\nTITLE: Configuring Groq LLM Client in BAML\nDESCRIPTION: This snippet demonstrates how to set up a Groq LLM client in BAML by using the openai-generic provider with a custom base URL pointing to Groq's API. It configures the API key from environment variables and specifies the LLM model to use.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/groq.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider openai-generic\n  options {\n    base_url \"https://api.groq.com/openai/v1\"\n    api_key env.GROQ_API_KEY\n    model \"llama3-70b-8192\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Google AI Client with Custom Headers in BAML\nDESCRIPTION: Advanced configuration of a BAML client with custom headers, model selection, and temperature settings for the Google AI provider.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/google-ai.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider google-ai\n  options {\n    model \"gemini-1.5-flash\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n    generationConfig {\n      temperature 0.5\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing an Anthropic LLM Client in BAML\nDESCRIPTION: Example of configuring a basic Anthropic LLM client using Claude 3.5 Sonnet model with temperature set to 0.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/anthropic.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider anthropic\n  options {\n    model \"claude-3-5-sonnet-20240620\"\n    temperature 0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Client in BAML\nDESCRIPTION: Example of setting up a basic Azure OpenAI client using the resource_name and deployment_id parameters. This configuration specifies the Azure OpenAI endpoint, API version, and authentication using an environment variable for the API key.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/azure.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider azure-openai\n  options {\n    resource_name \"my-resource-name\"\n    deployment_id \"my-deployment-id\"\n    // Alternatively, you can use the base_url field\n    // base_url \"https://my-resource-name.openai.azure.com/openai/deployments/my-deployment-id\"\n    api_version \"2024-02-01\"\n    api_key env.AZURE_OPENAI_API_KEY\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Weather API Implementation in Python\nDESCRIPTION: Python implementation of the weather API client using the generated BAML client. Demonstrates type-safe function calls and response handling.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-are-function-definitions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI\n\ndef main():\n    weather_info = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(weather_info)\n    assert isinstance(weather_info, WeatherAPI)\n    print(f\"City: {weather_info.city}\")\n    print(f\"Time of Day: {weather_info.timeOfDay}\")\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Tools in Python\nDESCRIPTION: This Python code demonstrates how to use a BAML function that can return multiple tool types. It uses isinstance checks to determine which tool was returned and processes it accordingly.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nimport asyncio\nfrom baml_client import b\nfrom baml_client.types import WeatherAPI, MyOtherAPI\n\nasync def main():\n    tool = b.UseTool(\"What's the weather like in San Francisco?\")\n    print(tool)\n    \n    if isinstance(tool, WeatherAPI):\n        print(f\"Weather API called:\")\n        print(f\"City: {tool.city}\")\n        print(f\"Time of Day: {tool.timeOfDay}\")\n    elif isinstance(tool, MyOtherAPI):\n        print(f\"MyOtherAPI called:\")\n        # Handle MyOtherAPI specific attributes here\n\nif __name__ == '__main__':\n    main()\n```\n\n----------------------------------------\n\nTITLE: Using BAML Syntax for Dynamic Types in Ruby\nDESCRIPTION: Demonstrates the higher-level API for creating dynamic types using BAML syntax directly in Ruby. This allows defining multiple types and their relationships in a more declarative way.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_16\n\nLANGUAGE: ruby\nCODE:\n```\ntb = Baml::TypeBuilder.new\ntb.add_baml(\"\n  // Creates a new class Address that does not exist in the BAML source.\n  class Address {\n    street string\n    city string\n    state string\n  }\n\n  // Modifies the existing @@dynamic User class to add the new address property.\n  dynamic class User {\n    address Address\n  }\n\n  // Modifies the existing @@dynamic Category enum to add a new variant.\n  dynmic enum Category {\n    VALUE5\n  }\n\")\n```\n\n----------------------------------------\n\nTITLE: Using ID with Streaming Responses in TypeScript\nDESCRIPTION: Demonstrates tracking streaming function calls in TypeScript with ID property, showing iteration through stream chunks and accessing final usage data.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from 'baml_client'\nimport { Collector } from \"@boundaryml/baml\"\n\nconst collector = new Collector(name=\"multi-function-collector\")\n\nconst { id: streamId, data: stream } = await b.id.stream.ExtractResume(\"...\", { collector })\n\nfor await (const chunk of stream) {\n    console.log(chunk)\n}\n\nconst result = await stream.getFinalResult()\nconsole.log(`Stream usage: ${collector.id(streamId)?.usage}`)\n```\n\n----------------------------------------\n\nTITLE: Configuring Role Metadata Forwarding in BAML\nDESCRIPTION: This snippet demonstrates how to configure role metadata forwarding for different LLM clients in BAML. It shows two client configurations: 'Foo' with allowed role metadata and 'FooWithout' without any role metadata forwarding. The template string exemplifies how role metadata is applied in prompts.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/allowed-role-metadata-basic.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> Foo {\n  provider openai\n  options {\n    allowed_role_metadata: [\"foo\", \"bar\"]\n  }\n}\n\nclient<llm> FooWithout {\n  provider openai\n  options {\n  }\n}\ntemplate_string Foo() #\"\n  {{ _.role('user', foo={\"type\": \"ephemeral\"}, bar=\"1\", cat=True) }}\n  This will be have foo and bar, but not cat metadata. But only for Foo, not FooWithout.\n  {{ _.role('user') }}\n  This will have none of the role metadata for Foo or FooWithout.\n\"#\n```\n\n----------------------------------------\n\nTITLE: Streaming Receipt Information in Ruby\nDESCRIPTION: Ruby code demonstrating how to use BAML's streaming capabilities in Ruby to iterate through partial responses and get the final validated response.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\n\n$b = Baml.Client\n\n# Using both iteration and get_final_response() from a stream\ndef example1(receipt)\n  stream = $b.stream.ExtractReceiptInfo(receipt)\n\n  stream.each do |partial|\n    puts \"partial: #{partial.items&.length} items\"\n  end\n\n  final = stream.get_final_response\n  puts \"final: #{final.items.length} items\"\nend\n\n# Using only iteration of a stream\ndef example2(receipt)\n  $b.stream.ExtractReceiptInfo(receipt).each do |partial|\n    puts \"partial: #{partial.items&.length} items\"\n  end\nend\n\n# Using only get_final_response() of a stream\n#\n# In this case, you should just use BamlClient.ExtractReceiptInfo(receipt) instead,\n# which is faster and more efficient.\ndef example3(receipt)\n  final = $b.stream.ExtractReceiptInfo(receipt).get_final_response\n  puts \"final: #{final.items.length} items\"\nend\n\nreceipt = <<~RECEIPT\n  04/14/2024 1:05 pm\n\n  Ticket: 220000082489\n  Register: Shop Counter\n  Employee: Connor\n  Customer: Sam\n  Item  #  Price\n  Guide leash (1 Pair) uni UNI\n  1 $34.95\n  The Index Town Walls\n  1 $35.00\n  Boot Punch\n  3 $60.00\n  Subtotal $129.95\n  Tax ($129.95 @ 9%) $11.70\n  Total Tax $11.70\n  Total $141.65\nRECEIPT\n\nif __FILE__ == $0\n  example1(receipt)\n  example2(receipt)\n  example3(receipt)\nend\n```\n\n----------------------------------------\n\nTITLE: Using ID with Streaming Responses in Ruby\nDESCRIPTION: Shows how to implement ID tracking with streaming responses in Ruby, processing stream chunks and accessing usage metrics after completion.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client'\n\ncollector = Baml::Collector.new(name: \"multi-function-collector\")\nstream_id, stream = Baml.Client.id.stream.ExtractResume(\"...\", baml_options: { collector: collector })\n\nstream.each do |chunk|\n    print(chunk)\nend\n\nresult = stream.get_final_result\nprint(\"Stream usage: #{collector.id(stream_id).usage}\")\n```\n\n----------------------------------------\n\nTITLE: Modifying Dynamic Classes in TypeScript\nDESCRIPTION: Shows how to use TypeBuilder in TypeScript to modify a dynamic User class by adding new properties at runtime, then using it in a BAML function call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport TypeBuilder from '../baml_client/type_builder'\nimport {\n  b\n} from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  tb.User.add_property('email', tb.string())\n  tb.User.add_property('address', tb.string()).description(\"The user's address\")\n  const res = await b.DynamicUserCreator(\"some user info\", { tb: tb })\n  // Now res can have email and address fields\n  console.log(res)\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Tools in Ruby\nDESCRIPTION: This Ruby code demonstrates how to use a BAML function that can return multiple tool types. It uses a case statement to determine which tool was returned and processes it accordingly.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  tool = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts tool\n  \n  case tool\n  when Baml::Types::WeatherAPI\n    puts \"Weather API called:\"\n    puts \"City: #{tool.city}\"\n    puts \"Time of Day: #{tool.timeOfDay}\"\n  when Baml::Types::MyOtherAPI\n    puts \"MyOtherAPI called:\"\n    # Handle MyOtherAPI specific attributes here\n  end\nend\n\nmain\n```\n\n----------------------------------------\n\nTITLE: Calling BAML Functions with Audio Inputs in Python\nDESCRIPTION: This Python example illustrates how to call a BAML function that requires an audio input. It shows how to load audio from a URL or from a base64-encoded string.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/multi-modal.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_py import Audio\nfrom baml_client import b\n\nasync def run():\n  # from URL\n  res = await b.TestAudioInput(\n      img=Audio.from_url(\n          \"https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg\"\n      )\n  )\n\n  # Base64\n  b64 = \"iVBORw0K....\"\n  res = await b.TestAudioInput(\n    audio=Audio.from_base64(\"audio/ogg\", b64)\n  )\n```\n\n----------------------------------------\n\nTITLE: Testing with Complex Objects in BAML\nDESCRIPTION: Example test showing how to structure nested objects as input arguments for more complex testing scenarios.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\ntest ComplexTest {\n    functions [ProcessMessage]\n    args {\n        message {\n            user \"john_doe\"\n            content \"Hello world\"\n            metadata {\n                timestamp 1234567890\n                priority \"high\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Generic Client with Custom Headers in BAML\nDESCRIPTION: This example shows how to configure an openai-generic client with additional custom headers. It demonstrates setting the base URL, model, and adding a custom header to the request.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/openai-generic.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://api.provider.com\"\n    model \"<provider-specified-format>\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Streaming Responses from BAML Functions\nDESCRIPTION: Examples of using the .stream call pattern to get partial responses as they are generated from the LLM. This allows for showing incremental results to users as they become available.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/client.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.async_client import b\n\nasync def example():\n    stream = b.stream.TellMeAStory()\n\n    async for partial in stream:\n        print(partial)\n\n    print(await stream.get_final_response())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client/async_client'\n\nasync function example() {\n    const stream = b.stream.TellMeAStory()\n\n    for await (const partial of stream) {\n        console.log(partial)\n    }\n\n    console.log(await stream.getFinalResponse())\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client/client'\n\nb = Baml.Client\n\ndef example\n  stream = b.stream.TellMeAStory\n\n  stream.each do |partial|\n    puts partial\n  end\n\n  puts stream.get_final_response\nend\n```\n\n----------------------------------------\n\nTITLE: Setting AWS Environment Variables for Authentication\nDESCRIPTION: Commands to set AWS credentials as environment variables for authenticating with AWS Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_ACCESS_KEY_ID=\"your_key\"\nexport AWS_SECRET_ACCESS_KEY=\"your_secret\"\nexport AWS_REGION=\"us-east-1\"\n```\n\n----------------------------------------\n\nTITLE: Configuring LMStudio Client in BAML\nDESCRIPTION: This BAML code snippet defines a custom LLM client named 'MyClient' using the openai-generic provider. It specifies the base URL for a local LMStudio server and sets the model to 'TheBloke/phi-2-GGUF'.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/lmstudio.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:1234/v1\"\n    model \"TheBloke/phi-2-GGUF\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Function Tracing in TypeScript\nDESCRIPTION: Shows how to implement function tracing in TypeScript using traceSync and traceAsync wrappers for monitoring book analysis operations.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/07-observability/studio.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { baml } from 'baml_client';\nimport { Book, AuthorInfo } from 'baml_client/types';\nimport { traceSync, traceAsync } from 'baml_client/tracing';\n\nconst preProcessText = traceSync(function(text: string): Promise<string> {\n    return text.replace(/\\n/g, \" \");\n});\n\nconst fullAnalysis = traceAsync(async function(book: Book): Promise<any> {\n    const sentiment = await baml.ClassifySentiment(\n        preProcessText(book.content)\n    );\n    const bookAnalysis = await baml.AnalyzeBook(book);\n    return bookAnalysis;\n});\n\nconst testBook1 = traceAsync(async function(): Promise<any> {\n    const content = `Before I could reply that he [Gatsby] was my neighbor...`;\n    const processedContent = preProcessText(content);\n    return await fullAnalysis(\n        new Book(\n            \"The Great Gatsby\",\n            new AuthorInfo(\"F. Scott\", \"Fitzgerald\"),\n            processedContent\n        )\n    );\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing BAML Student Information Extraction\nDESCRIPTION: Implementation code for the BAML function to extract student information. The function processes email text to identify student details in a structured way.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-lib/baml-core/README.md#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfunction ExtractStudentInfo(text: str) -> StudentInfo using gpt4:\n    \"\"\"Extract details about the student from this text.\"\"\"\n    examples:\n        - in: \"My name is John and I have a student email john@uni.edu\"\n          out: {\"name\": \"John\", \"email\": \"john@uni.edu\", \"is_verified_student_email\": True}\n```\n\n----------------------------------------\n\nTITLE: Defining Message Classification Function in BAML\nDESCRIPTION: Defines a ClassifyMessage function that uses GPT4 to categorize input messages into predefined categories. The function takes a string input and returns a Category enum value.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/concurrent-calls.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nenum Category {\n    Refund\n    CancelOrder\n    TechnicalSupport\n    AccountIssue\n    Question\n}\n\nfunction ClassifyMessage(input: string) -> Category {\n  client GPT4o\n  prompt #\"\n    Classify the following INPUT into ONE\n    of the following categories:\n\n    INPUT: {{ input }}\n\n    {{ ctx.output_format }}\n\n    Response:\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Person Class and Function with Simple Map in BAML\nDESCRIPTION: Shows how to define a Person class, a function to describe a person, and a test case using a simple map structure. The example includes string, integer, and boolean values in the map.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/map.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclass Person {\n    name string\n    age int\n    isEmployed bool\n}\n\nfunction DescribePerson(person: Person) -> string {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        Describe the person with the following details: {{ person }}.\n    \"#\n}\n\ntest PersonDescription {\n    functions [DescribePerson]\n    args { \n        person {\n            name \"John Doe\",\n            age 30,\n            isEmployed true\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: HookOutput Type Definition\nDESCRIPTION: The complete TypeScript definition of the HookOutput type and related types. Includes generic parameters for function name and streaming options, with conditional types that adapt to streaming configuration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/react-nextjs/hook-output.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\ntype HookOutput<FunctionName, Options extends { stream?: boolean } = { stream?: true }> = {\n  data?: Options['stream'] extends false ? FinalDataType<FunctionName> : FinalDataType<FunctionName> | StreamDataType<FunctionName>\n  finalData?: FinalDataType<FunctionName>\n  streamData?: Options['stream'] extends false ? never : StreamDataType<FunctionName>\n  error?: BamlErrors\n  isError: boolean\n  isLoading: boolean\n  isPending: boolean\n  isSuccess: boolean\n  isStreaming: Options['stream'] extends false ? never : boolean\n  status: HookStatus<Options>\n  mutate: (...args: Parameters<ServerAction>) => Options['stream'] extends false\n    ? Promise<FinalDataType<FunctionName>>\n    : Promise<ReadableStream<Uint8Array>>\n  reset: () => void\n}\n\ntype HookStatus<Options extends { stream?: boolean }> = Options['stream'] extends false\n  ? 'idle' | 'pending' | 'success' | 'error'\n  : 'idle' | 'pending' | 'streaming' | 'success' | 'error'\n```\n\n----------------------------------------\n\nTITLE: Using BAML React Hooks with Component Example\nDESCRIPTION: Example of using a BAML React hook within a functional component, demonstrating how to configure streaming options and various callback functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/react-nextjs/hook-input.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nfunction Component() {\n  const hook = useTestAws({\n    stream: true, // optional, defaults to true\n    onStreamData: (text) => console.log(\"Streaming:\", text),\n    onFinalData: (text) => console.log(\"Complete:\", text),\n    onData: (text) => console.log(\"Any update:\", text),\n    onError: (error) => console.error(\"Error:\", error)\n  })\n\n  return <div>{hook.data}</div>\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Vertex AI Client with Credentials as JSON String\nDESCRIPTION: Example of configuring a Vertex AI client in BAML using a string containing service account credentials in JSON format. Shows how to set the model, location, and provide credentials directly as a block string.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> Vertex {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    location us-central1\n    // credentials can be a block string containing service account credentials in JSON format\n    credentials #\"\n      {\n        \"type\": \"service_account\",\n        \"project_id\": \"my-project-id\",\n        \"private_key_id\": \"string\",\n        \"private_key\": \"-----BEGIN PRIVATE KEY-----string\\n-----END PRIVATE KEY-----\\n\",\n        \"client_email\": \"john_doe@gmail.com\",\n        \"client_id\": \"123456\",\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\",\n        \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n        \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/...\",\n        \"universe_domain\": \"googleapis.com\"\n      }\n    \"#\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Types with Python TypeBuilder\nDESCRIPTION: Python example showing how to use TypeBuilder to add properties to dynamic classes at runtime. Demonstrates adding email and address fields with descriptions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/dynamic.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  tb.MyClass.add_property('email', tb.string())\n  tb.MyClass.add_property('address', tb.string()).description(\"The user's address\")\n  res = await b.DynamicUserCreator(\"some user info\", { \"tb\": tb })\n  # Now res can have email and address fields\n  print(res)\n```\n\n----------------------------------------\n\nTITLE: Tracking Parallel Calls in Python\nDESCRIPTION: Demonstrates how to track multiple parallel function calls using IDs in Python, accessing individual call logs and total usage metrics.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import Collector\nimport asyncio\n\nasync def run():\n    collector = Collector(name=\"multi-function-collector\")\n    \n    # Run multiple functions in parallel\n    resume_id, resume = b.id.ExtractResume(\"...\", baml_options={\"collector\": collector})\n    invoice_id, invoice = b.id.ExtractInvoice(\"...\", baml_options={\"collector\": collector})\n    \n    # Access specific logs by id\n    print(f\"Resume usage: {collector.id(resume_id).usage}\")\n    print(f\"Invoice usage: {collector.id(invoice_id).usage}\")\n    \n    # Access all logs\n    print(f\"Total usage: {collector.usage}\")\n```\n\n----------------------------------------\n\nTITLE: Using BAML Functions with Streaming Settings in Python\nDESCRIPTION: Shows how to use BAML functions in Python with different streaming behaviors. The first example demonstrates how streaming works even when the client has disabled streaming support, while the second example shows the standard non-streaming usage.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/supports-streaming-openai.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This will be streamed from your python code perspective, \n# but under the hood it will call the non-streaming HTTP API\n# and then return a streamable response with a single event\nb.stream.MyFunction()\n\n# This will work exactly the same as before\nb.MyFunction()\n```\n\n----------------------------------------\n\nTITLE: Using Weather API Tool in TypeScript\nDESCRIPTION: This TypeScript code shows how to use the BAML-defined WeatherAPI tool. It calls the UseTool function asynchronously and processes the returned weather information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from './baml_client'\nimport { WeatherAPI } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const weatherInfo = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(weatherInfo)\n  // BAML doesn't generate concrete types in TypeScript\n  // so we can only validate the interfaces\n  assert(\"city\" in weatherInfo)\n  console.log(`City: ${weatherInfo.city}`)\n  console.log(`Time of Day: ${weatherInfo.timeOfDay}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Assertions and Checks in BAML\nDESCRIPTION: Example showing how to use both @check and @assert in the same class definition. This allows for a mix of strict and non-strict validations in the same data model.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_11\n\nLANGUAGE: baml\nCODE:\n```\nclass Citation {\n  quote string @check(\n      exact_citation_match,\n\t  {{ this|length > 0 }}\n  )\n  line_number string @assert(\n    has_line_number,\n    {{ this|length >= 0 }}\n  )\n}\n\nfunction GetCitation(full_text: string) -> Citation {\n  client GPT4 \n  prompt #\"\n    Generate a citation of the text below in MLA format:\n    {{full_text}}\n\n    {{ctx.output_format}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ID Property in Python\nDESCRIPTION: Shows how to get a unique identifier for function calls in Python and use it with a collector to track usage metrics.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import Collector\n\n# Get both id and result\nid, result = b.id.ExtractResume(\"...\")\n\n# Use id with collector\ncollector = Collector(name=\"multi-function-collector\")\nother_id, result = b.id.ExtractResume(\"...\", baml_options={\"collector\": collector})\nprint(collector.id(other_id).usage)  # Get usage for specific call\n```\n\n----------------------------------------\n\nTITLE: Complex Union Array Type Example\nDESCRIPTION: Demonstrates array type declaration containing union of optional integer, string array, and custom class types across BAML, Python, and TypeScript.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/types.mdx#2025-04-18_snippet_6\n\nLANGUAGE: baml\nCODE:\n```\n(int? | string[] | MyClass)[]\n```\n\nLANGUAGE: python\nCODE:\n```\nOptional[List[Union[Optional[int], List[str], MyClass]]]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n((number | null) | string[] | MyClass)[]\n```\n\n----------------------------------------\n\nTITLE: Weather API Implementation in TypeScript\nDESCRIPTION: TypeScript implementation using the generated BAML client, showing async/await pattern and type checking.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-are-function-definitions.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from './baml_client'\nimport { WeatherAPI } from './baml_client/types'\nimport assert from 'assert'\n\nconst main = async () => {\n  const weatherInfo = await b.UseTool(\"What's the weather like in San Francisco?\")\n  console.log(weatherInfo)\n  assert(weatherInfo instanceof WeatherAPI)\n  console.log(`City: ${weatherInfo.city}`)\n  console.log(`Time of Day: ${weatherInfo.timeOfDay}`)\n}\n```\n\n----------------------------------------\n\nTITLE: Image Input Function Definition in BAML\nDESCRIPTION: Shows how to define a function that takes an image as input in BAML. The function uses GPT4o to describe the contents of the provided image.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nfunction MyFunction(myImage: image) -> string {\n  client GPT4o\n  prompt #\"\n    Describe this image: {{myImage}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Class Definition in BAML\nDESCRIPTION: Shows how to define a class with properties and descriptions\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclass Car {\n  model string\n  year int @description(\"Year of manufacture\")\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Function Declaration with Simple Array\nDESCRIPTION: Shows how to define a function that processes an array of strings and includes a test case with a simple array of fruit names. Demonstrates integration with OpenAI's GPT model.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/array.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nfunction DescriptionGame(items: string[]) -> string {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        What 3 words best describe all of these: {{ items }}.\n    \"#\n}\n\ntest FruitList {\n    functions [DescriptionGame]\n    args { items [\"apple\", \"banana\", \"cherry\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Audio Objects in React Components\nDESCRIPTION: This snippet demonstrates how to use Audio objects within React components using BAML's React hooks. It shows the creation of an Audio object from a URL in a button click handler and how to submit it using the useTestAudioInput hook.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/audio.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTestAudioInput } from '../baml_client/react/hooks'\nimport { Audio } from \"../baml_client/react/media\"\n\nexport function TestAudioInput() {\n    const { mutate } = useTestAudioInput()\n\n    const handleClick = async () => {\n        const audio = await Audio.fromUrl('https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg')\n        mutate(audio)\n    }\n\n    return (\n      <div>\n          <button onClick={handleClick}>\n              Test Audio Input\n          </button>\n      </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Streaming HTTP Requests with .stream_request Pattern\nDESCRIPTION: Shows how to use the .stream_request call pattern to get the raw HTTP request configured for streaming. This is similar to .request but with streaming options enabled.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/client.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.async_client import b\n\nasync def example():\n    request = await b.stream_request.TellMeAStory()\n    print(request.url)\n    print(request.headers)\n    print(request.body.json())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client/async_client'\n\nasync function example() {\n    const request = await b.stream_request.TellMeAStory()\n    console.log(request.url)\n    console.log(request.headers)\n    console.log(request.body.json())\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client/client'\n\nb = Baml.Client\n\ndef example\n  request = b.stream_request.TellMeAStory\n  puts request.url\n  puts request.headers\n  puts request.body.json\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Company Class with Nested Map in BAML\nDESCRIPTION: Illustrates the use of a nested map within a class definition for a Company, including a location map. The example also shows how to use this structure in a function and test case.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/map.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclass Company {\n    name string\n    location map<string, string>\n    employeeCount int\n}\n\nfunction DescribeCompany(company: Company) -> string {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        Describe the company with the following details: {{ company }}.\n    \"#\n}\n\ntest CompanyDescription {\n    functions [DescribeCompany]\n    args { \n        company {\n            name \"TechCorp\",\n            location {\n                city \"San Francisco\",\n                state \"California\"\n            },\n            employeeCount 500\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration of BAML Client in Python\nDESCRIPTION: Demonstrates how to create a configured BAML client for consistent settings across multiple function calls in Python. The example shows how to access configuration and logs from the collector.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import ClientRegistry, Collector\n\ndef run():\n    # Configure options\n    collector = Collector(name=\"my-collector\")\n    client_registry = ClientRegistry()\n    client_registry.set_primary(\"openai/gpt-4o-mini\")\n\n    # Create configured client\n    my_b = b.with_options(collector=collector, client_registry=client_registry)\n\n    # All calls will use the configured options\n    res = my_b.ExtractResume(\"...\")\n    invoice = my_b.ExtractInvoice(\"...\")\n\n    # Access configuration\n    print(my_b.client_registry)\n    # Access logs from the collector\n    print(collector.logs)\n    print(collector.last)\n```\n\n----------------------------------------\n\nTITLE: Adding Nested Education Model\nDESCRIPTION: Extension of the basic implementation to include nested Education model and handle complex schema definitions in the prompt.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n...\n+class Education(BaseModel):\n+    school: str\n+    degree: str\n+    year: int\n\nclass Resume(BaseModel):\n    name: str\n    skills: List[str]\n+   education: List[Education]\n\ndef create_prompt(input_text: str) -> str:\n    additional_models = \"\"\n+    if \"$defs\" in Resume.model_json_schema():\n+        additional_models += f\"\\nUse these other schema definitions as +well:\\n{Resume.model_json_schema()['$defs']}\"\n    PROMPT_TEMPLATE = f\"\"\"Parse the following resume and return a structured representation of the data in the schema below.\nResume:\n---\n{input_text}\n---\n\nSchema:\n{Resume.model_json_schema()['properties']}\n\n+ {additional_models}\n\nOutput JSON:\n\"\"\".strip()\n    return PROMPT_TEMPLATE\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Usage Tracking in TypeScript with BAML\nDESCRIPTION: Shows usage tracking implementation using collectors in TypeScript with async/await pattern. Demonstrates collector creation and usage monitoring.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport {b} from 'baml_client'\nimport {Collector} from '@boundaryml/baml'\n\nasync function run() {\n    const collector_a = new Collector(\"collector-a\")\n    const res = await b.ExtractResume(\"...\", { collector: collector_a })\n\n    const collector_b = new Collector(\"collector-b\")\n    const res2 = await b.ExtractResume(\"...\", { collector: collector_b })\n    // The total usage of both logs is now available\n    console.log(collector_a.usage)\n    console.log(collector_b.usage)\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Test Assertions Example\nDESCRIPTION: Demonstrates how to use checks and assertions in BAML tests. The example shows various types of assertions including checking result length, compound checks, and latency constraints.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ntest MyTest {\n  functions [EchoString]\n  args {\n    input \"example input\"\n  }\n  @@check( nonempty, {{ this|length > 0 }} )\n  @@check( small_enough, {{ _.result|length < 1000 }} )\n  @@assert( {{ _.checks.nonempty and _.checks.small_enough }})\n  @@assert( {{ _.latency_ms < 1000 }})\n}\n```\n\n----------------------------------------\n\nTITLE: Resetting BAML Environment Variables in Python\nDESCRIPTION: Function to reset BAML environment variables to values provided in a dictionary, including logging-related variables if explicitly set.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef reset_baml_env_vars(env: Dict[str, str]):\n```\n\n----------------------------------------\n\nTITLE: Tracking Parallel Calls in TypeScript\nDESCRIPTION: Shows how to implement parallel function calls with ID tracking in TypeScript, using Promise.all and accessing logs by ID.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from 'baml_client'\nimport { Collector } from \"@boundaryml/baml\"\n\nconst collector = new Collector(name=\"multi-function-collector\")\n\n// Run multiple functions in parallel\nconst [\n    { id: resumeId, data: resume },\n    { id: invoiceId, data: invoice }\n] = await Promise.all([\n    b.id.ExtractResume(\"...\", { collector }),\n    b.id.ExtractInvoice(\"...\", { collector })\n])\n\n// Access specific logs by id\nconsole.log(`Resume usage: ${collector.id(resumeId)?.usage}`)\nconsole.log(`Invoice usage: ${collector.id(invoiceId)?.usage}`)\n\n// Access all logs\nconsole.log(`Total usage: ${collector.usage}`)\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Tool Signature in BAML\nDESCRIPTION: This BAML snippet defines a WeatherAPI class with a dynamic signature, allowing the parameters to be defined from code rather than in the BAML file.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_12\n\nLANGUAGE: baml\nCODE:\n```\nclass WeatherAPI {\n  @@dynamic // params defined from code\n}\n\nfunction UseTool(user_message: string) -> WeatherAPI {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Given a message, extract info.\n    {# special macro to print the functions return type. #}\n    {{ ctx.output_format }}\n\n    {{ _.role('user') }}\n    {{ user_message }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Tools Array in TypeScript\nDESCRIPTION: This TypeScript code shows how to handle a BAML function that returns an array of multiple tool types. It iterates through the returned tools and processes each based on its properties.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from './baml_client'\nimport { WeatherAPI, MyOtherAPI } from './baml_client/types'\n\nconst main = async () => {\n  const tools = await b.UseTool(\"What's the weather like in San Francisco and New York?\")\n  console.log(tools)\n  \n  tools.forEach(tool => {\n    if (\"city\" in tool) {\n      console.log(\"Weather API called:\")\n      console.log(`City: ${tool.city}`)\n      console.log(`Time of Day: ${tool.timeOfDay}`)\n    } else if (\"operation\" in tool) {\n      console.log(\"MyOtherAPI called:\")\n      // Handle MyOtherAPI specific attributes here\n    }\n  })\n}\n\nmain()\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Client with Shorthand Syntax in BAML\nDESCRIPTION: This snippet demonstrates how to use the shorthand syntax to configure an LLM client for a function in BAML. It uses the 'openai/gpt-4o' client to generate a haiku about a given topic.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/client-llm.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfunction MakeHaiku(topic: string) -> string {\n  client \"openai/gpt-4o\"\n  prompt #\"\n    Write a haiku about {{ topic }}.\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-Robin Provider for LLM Client in BAML\nDESCRIPTION: This snippet demonstrates how to set up a round-robin provider for an LLM client in BAML. It distributes requests across multiple clients specified in the strategy list.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/round-robin.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider round-robin\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Project Class with Multiline String in BAML Map\nDESCRIPTION: Demonstrates how to use a multiline string within a map structure for a Project class. The example includes a function to describe the project and a test case utilizing the multiline string.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/map.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nclass Project {\n    title string\n    description string\n}\n\nfunction DescribeProject(project: Project) -> string {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        Describe the project with the following details: {{ project }}.\n    \"#\n}\n\ntest ProjectDescription {\n    functions [DescribeProject]\n    args { \n        project {\n            title \"AI Research\",\n            description #\"\n                This project focuses on developing\n                advanced AI algorithms to improve\n                machine learning capabilities.\n            \"#\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with Collector in Python\nDESCRIPTION: Demonstrates basic logging functionality using Collector in Python, including creating a collector, using it with a function call, and accessing various logging information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import Collector  # Import the Collector class\n\ndef run():\n    # Create a collector instance with an optional name\n    collector = Collector(name=\"my-collector\")\n    # collector will be modified by the function to include all internal state\n    res = b.ExtractResume(\"...\", baml_options={\"collector\": collector})\n    # This will print the return type of the function\n    print(res)\n\n    # This is guaranteed to be set by the function\n    assert collector.last is not None\n\n    # This will print the id of the last request\n    print(collector.last.id)\n\n    # This will print the usage of the last request\n    # (This aggregates usage from all retries if there was usage emitted)\n    print(collector.last.usage)\n\n    # This will print the raw response of the last request\n    print(collector.last.calls[-1].http_response)\n\n    # This will print the raw text we used to run the parser.\n    print(collector.last.raw_llm_response)\n```\n\n----------------------------------------\n\nTITLE: Complex Transcript Extraction Result in JSON\nDESCRIPTION: The structured output from running the ExtractTasks function on the complex meeting transcript, showing extracted tickets with IDs, assignees, priorities, subtasks, and dependencies.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/action-items.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"id\": 1,\n    \"name\": \"Improve Authentication System\",\n    \"description\": \"Overhaul the authentication system focusing on both front-end and back-end aspects.\",\n    \"priority\": \"HIGH\",\n    \"assignees\": [\"Bob\", \"Carol\"],\n    \"subtasks\": [\n      {\n        \"id\": 2,\n        \"name\": \"Front-end Revamp\"\n      },\n      {\n        \"id\": 3,\n        \"name\": \"Back-end Optimization\"\n      }\n    ],\n    \"dependencies\": []\n  },\n  {\n    \"id\": 4,\n    \"name\": \"Develop Billing System\",\n    \"description\": \"Create a new billing system which will be integrated with the authentication system.\",\n    \"priority\": \"MEDIUM\",\n    \"assignees\": [\"Bob\"],\n    \"subtasks\": [],\n    \"dependencies\": [3]\n  },\n  {\n    \"id\": 5,\n    \"name\": \"Integrate Authentication System with Billing System\",\n    \"description\": \"Integrate the improved authentication system with the new billing system.\",\n    \"priority\": \"MEDIUM\",\n    \"assignees\": [\"Bob\"],\n    \"subtasks\": [],\n    \"dependencies\": [3, 4]\n  },\n  {\n    \"id\": 6,\n    \"name\": \"Update User Documentation\",\n    \"description\": \"Update the user documentation to reflect changes in the authentication and billing systems.\",\n    \"priority\": \"LOW\",\n    \"assignees\": [\"Carol\"],\n    \"subtasks\": [],\n    \"dependencies\": [2, 5]\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Applying Class-Level Assertions with @@assert in BAML\nDESCRIPTION: Demonstrates how to apply assertions to an entire class using the @@assert syntax, which allows for validations that compare multiple fields within the class.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclass Bar {\n  baz int\n  quux string\n  @@assert(length_limit, {{ this.quux|length < this.baz }})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClientRegistry in TypeScript\nDESCRIPTION: TypeScript implementation of ClientRegistry configuration showing how to create and set up an OpenAI client with custom parameters. Demonstrates client creation and primary client designation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/client-registry.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientRegistry } from '@boundaryml/baml'\n\nasync function run() {\n    const cr = new ClientRegistry()\n    // Creates a new client\n    cr.addLlmClient('MyAmazingClient', 'openai', {\n        model: \"gpt-4o\",\n        temperature: 0.7,\n        api_key: process.env.OPENAI_API_KEY\n    })\n    // Sets MyAmazingClient as the primary client\n    cr.setPrimary('MyAmazingClient')\n\n    // ExtractResume will now use MyAmazingClient as the calling client\n    const res = await b.ExtractResume(\"...\", { clientRegistry: cr })\n}\n```\n\n----------------------------------------\n\nTITLE: Image Testing with URL Reference in BAML\nDESCRIPTION: Testing a function with an image input specified by URL reference.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_7\n\nLANGUAGE: baml\nCODE:\n```\ntest ImageUrlTest {\n    functions [AnalyzeImage]\n    args {\n        param {\n            url \"https://example.com/image.jpg\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: BAML HookOutput Type Examples\nDESCRIPTION: Examples of HookOutput type instances for both streaming and non-streaming configurations. Shows all available properties with their potential values in different scenarios.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/react-nextjs/hook-output.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Streaming configuration\nconst streamingResult: HookOutput<'TestAws', { stream: true }> = {\n  data: \"Any response\",\n  finalData: \"Final response\",\n  streamData: \"Streaming response...\",\n  error: undefined,\n  isError: false,\n  isLoading: true,\n  isSuccess: false,\n  isStreaming: true,\n  isPending: false,\n  status: 'streaming',\n  mutate: async () => new ReadableStream(),\n  reset: () => void\n}\n\n// Non-streaming configuration\nconst nonStreamingResult: HookOutput<'TestAws', { stream: false }> = {\n  data: \"Final response\",\n  finalData: \"Final response\",\n  error: undefined,\n  isError: false,\n  isLoading: false,\n  isSuccess: true,\n  isPending: false,\n  status: 'success',\n  mutate: async () => \"Final response\",\n  reset: () => void\n}\n```\n\n----------------------------------------\n\nTITLE: Conditional Statements in BAML Prompt String Using Jinja\nDESCRIPTION: This example shows how to use Jinja conditional statements in a BAML prompt string. It checks if a user is active and outputs a welcome message or an activation request accordingly.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/what-is-jinja.mdx#2025-04-18_snippet_1\n\nLANGUAGE: Jinja\nCODE:\n```\nfunction MyFunc(user: User) -> string {\n  prompt #\"\n    {% if user.is_active %}\n      Welcome back, {{ user.name }}!\n    {% else %}\n      Please activate your account.\n    {% endif %}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration of BAML Client in Ruby\nDESCRIPTION: Shows how to create a configured BAML client with consistent settings across multiple function calls in Ruby. The example demonstrates accessing configuration and logs from the collector.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client'\n\ncollector = Baml::Collector.new(name: \"my-collector\")\nclient_registry = Baml::ClientRegistry.new\nclient_registry.set_primary(\"openai/gpt-4o-mini\")\n\nmy_b = Baml.Client.with_options(collector: collector, client_registry: client_registry)\n\n# All calls will use the configured options\nres = my_b.ExtractResume(input: \"...\")\ninvoice = my_b.ExtractInvoice(input: \"...\")\n\n# Access configuration\nprint(my_b.client_registry)\nprint(collector.logs)\nprint(collector.last.usage)\n```\n\n----------------------------------------\n\nTITLE: Setting Variables in BAML Prompt String Using Jinja\nDESCRIPTION: This snippet illustrates how to set and use variables within a Jinja template in a BAML prompt string. It calculates the total price of items by iterating over a list and accumulating the price.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/what-is-jinja.mdx#2025-04-18_snippet_2\n\nLANGUAGE: Jinja\nCODE:\n```\nfunction MyFunc(items: Item[]) -> string {\n  prompt #\"\n    {% set total_price = 0 %}\n    {% for item in items %}\n      {% set total_price = total_price + item.price %}\n    {% endfor %}\n    Total price: {{ total_price }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Enums in BAML\nDESCRIPTION: Defines a dynamic Category enum that can be modified at runtime. The enum is marked with @@dynamic and used in a function that categorizes input text.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nenum Category {\n  VALUE1 // normal static enum values that don't change\n  VALUE2\n  @@dynamic // this enum can have more values added at runtime\n}\n\n// The Category enum can now be modified at runtime!\nfunction DynamicCategorizer(input: string) -> Category {\n  client GPT4\n  prompt #\"\n    Given a string, classify it into a category\n    {{ input }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Functions with Audio Inputs - URL Method\nDESCRIPTION: Shows how to test a function that takes an audio input using a URL reference. The test specifies a publicly accessible URL from which the audio can be downloaded.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_8\n\nLANGUAGE: baml\nCODE:\n```\ntest Test1 {\n  functions [MyFunction]\n  args {\n    myAudio {\n      url \"https....\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Fallback Provider with Retry Policy in BAML\nDESCRIPTION: Shows how to add a retry policy to a fallback provider. The retry policy is applied after the entire fallback strategy has been attempted.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/fallback.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> SuperDuperClient {\n  provider fallback\n  retry_policy MyRetryPolicy\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Dynamic Types in Python\nDESCRIPTION: Demonstrates how to create entirely new types (Hobbies enum and Address class) at runtime using TypeBuilder in Python, and attach them to an existing User class.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.type_builder import TypeBuilder\nfrom baml_client.async_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  hobbies_enum = tb.add_enum(\"Hobbies\")\n  hobbies_enum.add_value(\"Soccer\")\n  hobbies_enum.add_value(\"Reading\")\n\n  address_class = tb.add_class(\"Address\")\n  address_class.add_property(\"street\", tb.string()).description(\"The user's street address\")\n\n  tb.User.add_property(\"hobby\", hobbies_enum.type().optional())\n  tb.User.add_property(\"address\", address_class.type().optional())\n  res = await b.DynamicUserCreator(\"some user info\", {\"tb\": tb})\n  # Now res might have the hobby property, which can be Soccer or Reading\n  print(res)\n```\n\n----------------------------------------\n\nTITLE: Implementing Usage Tracking in Ruby with BAML\nDESCRIPTION: Demonstrates usage tracking implementation in Ruby using BAML collectors. Shows how to create collectors and track function call usage.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_14\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\n\ndef run\n    collector_a = Baml::Collector.new(name: \"collector-a\")\n    res = Baml.Client.ExtractResume(input: 'First call', baml_options: { collector: collector_a })\n\n    collector_b = Baml::Collector.new(name: \"collector-b\")\n    res = Baml.Client.ExtractResume(input: 'Second call', baml_options: { collector: collector_b })\n\n\n    # The total usage of both logs is now available\n    print(collector_a.usage)\n    print(collector_b.usage)\nend\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Class and Test Structure in BAML\nDESCRIPTION: Implements a dynamic class definition with a static property, a function that returns the class instance, and a test case that includes type building and argument specifications. The class is marked as dynamic using the @@dynamic annotation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/dynamic-class-test.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass DynamicClass {\n    static_prop string\n    @@dynamic\n}\n\nfunction ReturnDynamicClass(input: string) -> DynamicClass {\n    // ...\n}\n\ntest DynamicClassTest {\n    functions [ReturnDynamicClass]\n    type_builder {\n        dynamic class DynamicClass {\n            new_prop_here string\n        }\n    }\n    args {\n        input \"test data\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling BAML Assertion Errors in TypeScript\nDESCRIPTION: Example of handling validation errors in TypeScript client code. Shows how to catch BamlValidationError exceptions and access check results.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b, BamlValidationError } from './baml_client';\nimport { Citation } from './baml_client/types';\n\nconst main = () => {\n    try {\n        const citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\");\n        \n        const quote = citation.quote.value;\n        console.log(`Quote: ${quote}`);\n\n        const checks = citation.quote.checks;\n        console.log(`Check exact_citation_found: ${checks.exact_citation_found.status}`);\n        for (const check of get_checks(checks)) {\n            console.log(`Check ${check.name}: ${check.status}`);\n        }\n\n        const author = citation.author;\n        console.log(`Author: ${author}`);\n    } catch (e) {\n        if (e instanceof BamlValidationError) {\n            console.log(`Validation error: ${e}`);\n        } else {\n            console.error(e);\n        }\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Tags in Python Tracing\nDESCRIPTION: Demonstrates how to add custom tags to traced functions for enhanced monitoring and log querying capabilities.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/07-observability/studio.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.tracing import set_tags, trace\nimport typing\n\n@trace\nasync def pre_process_text(text):\n    set_tags(userId=\"1234\")\n\n    # You can also create a dictionary and pass it in\n    tags_dict: typing.Dict[str, str] = {\"userId\": \"1234\"}\n    set_tags(**tags_dict) # \"**\" unpacks the dictionary\n    return text.replace(\"\\n\", \" \")\n```\n\n----------------------------------------\n\nTITLE: Audio Input Function Definition in BAML\nDESCRIPTION: Shows how to define a function that takes audio as input in BAML. The function uses GPT4o to describe the contents of the provided audio.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_6\n\nLANGUAGE: baml\nCODE:\n```\nfunction MyFunction(myAudio: audio) -> string {\n  client GPT4o\n  prompt #\"\n    Describe this audio: {{myAudio}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Streaming and Non-Streaming HookInput Types\nDESCRIPTION: Examples of how to configure HookInput for both streaming and non-streaming use cases, showing the appropriate callback functions for each scenario.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/react-nextjs/hook-input.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// Streaming configuration\nconst streamingInput: HookInput<'TestAws', { stream: true }> = {\n  stream: true,\n  onStreamData: (text) => console.log(\"Streaming:\", text),\n  onFinalData: (text) => console.log(\"Final:\", text),\n  onData: (text) => console.log(\"Any update:\", text),\n  onError: (error) => console.error(error),\n}\n\n// Non-streaming configuration\nconst nonStreamingInput: HookInput<'TestAws', { stream: false }> = {\n  stream: false,\n  onFinalData: (text) => console.log(\"Result:\", text),\n  onData: (text) => console.log(\"Result:\", text),\n  onError: (error) => console.error(error)\n}\n```\n\n----------------------------------------\n\nTITLE: Creating BAML Clients with Default Options in Python\nDESCRIPTION: Sets up a BAML client with default configuration options for collector and client registry. These options are applied to all function calls made through this client but can be overridden per call when needed.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import ClientRegistry, Collector\n\n# Set up default options for this client\ncollector = Collector(name=\"my-collector\")\nclient_registry = ClientRegistry()\nclient_registry.set_primary(\"openai/gpt-4o-mini\")\n\n# Create client with default options\nmy_b = b.with_options(collector=collector, client_registry=client_registry)\n\n# Uses the default options\nresult = my_b.ExtractResume(\"...\")\n\n# Override options for a specific call\nother_collector = Collector(name=\"other-collector\")\nresult2 = my_b.ExtractResume(\"...\", baml_options={\"collector\": other_collector})\n```\n\n----------------------------------------\n\nTITLE: Conditional Message Rendering in BAML Based on Provider\nDESCRIPTION: Demonstrates template string definition and functions that conditionally render messages in different formats based on the client provider. Uses XML tags for Anthropic provider and plain text for others. Includes two function implementations using different clients (GPT4o and Claude35).\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/ctx.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\ntemplate_string RenderConditionally(messages: Message[]) #\"\n  {% for message in messages %}\n    {%if ctx.client.provider == \"anthropic\" %}\n      <Message>{{ message.user_name }}: {{ message.content }}</Message>\n    {% else %}\n      {{ message.user_name }}: {{ message.content }}\n    {% endif %}\n  {% endfor %}\n\"#\n\nfunction MyFuncWithGPT4(messages: Message[]) -> string {\n  client GPT4o\n  prompt #\"\n    {{ RenderConditionally(messages)}}\n  \"#\n}\n\nfunction MyFuncWithAnthropic(messages: Message[]) -> string {\n  client Claude35\n  prompt #\"\n    {{ RenderConditionally(messages )}}\n  #\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Pydantic Implementation for Resume Parsing\nDESCRIPTION: Initial implementation of resume parsing using Pydantic and OpenAI's GPT-4. Demonstrates basic model definition and JSON validation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass Resume(BaseModel):\n    name: str\n    skills: List[str]\n\ndef create_prompt(input_text: str) -> str:\n    PROMPT_TEMPLATE = f\"\"\"Parse the following resume and return a structured representation of the data in the schema below.\nResume:\n---\n{input_text}\n---\n\nSchema:\n{Resume.model_json_schema()['properties']}\n\nOutput JSON:\n\"\"\"\n    return PROMPT_TEMPLATE\n\ndef extract_resume(input_text: str) -> Union[Resume, None]:\n    prompt = create_prompt(input_text)\n    chat_completion = client.chat.completions.create(\n        model=\"gpt-4\", messages=[{\"role\": \"system\", \"content\": prompt}]\n    )\n    try:\n        output = chat_completion.choices[0].message.content\n        if output:\n            return Resume.model_validate_json(output)\n        return None\n    except Exception as e:\n        raise e\n```\n\n----------------------------------------\n\nTITLE: Modifying Dynamic Enums in Python\nDESCRIPTION: Shows how to use TypeBuilder in Python to modify a dynamic Category enum by adding new values at runtime, then using it in a BAML function call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.type_builder import TypeBuilder\nfrom baml_client import b\n\nasync def run():\n  tb = TypeBuilder()\n  tb.Category.add_value('VALUE3')\n  tb.Category.add_value('VALUE4')\n  # Pass the typebuilder in the baml_options argument -- the last argument of the function.\n  res = await b.DynamicCategorizer(\"some input\", { \"tb\": tb })\n  # Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  print(res)\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Types with Ruby TypeBuilder\nDESCRIPTION: Ruby implementation example showing how to use TypeBuilder to modify dynamic classes at runtime. Demonstrates adding email and address fields with descriptions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/dynamic.mdx#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative 'baml_client/client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  tb.MyClass.add_property('email', tb.string)\n  tb.MyClass.add_property('address', tb.string).description(\"The user's address\")\n  \n  res = Baml::Client.dynamic_user_creator(input: \"some user info\", baml_options: {tb: tb})\n  # Now res can have email and address fields\n  puts res\nend\n```\n\n----------------------------------------\n\nTITLE: Enum with Class-Level Attributes\nDESCRIPTION: Shows how to define an enum with class-level attributes including custom alias and dynamic runtime modification support.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/enum.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nenum MyEnum {\n  Value1\n  Value2\n  Value3\n\n  @@alias(\"My Custom Enum\")\n  @@dynamic // allows me to later skip Value2 at runtime\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Block-Level Check in BAML\nDESCRIPTION: Shows how to implement a block-level validation check using @@check to compare the length of a string field against an integer field. This validation applies to multiple fields within the class.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/check.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclass Bar {\n  baz int\n  quux string\n  @@check(quux_limit, {{ this.quux|length < this.baz }})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring HuggingFace Client with OpenAI-Generic Provider in BAML\nDESCRIPTION: This snippet shows how to set up a BAML client for HuggingFace using the OpenAI-generic provider. It specifies the base URL for HuggingFace's Inference Endpoints and uses an environment variable for the API key.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/huggingface.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider openai-generic\n  options {\n    base_url \"https://api-inference.huggingface.co/v1\"\n    api_key env.HUGGINGFACE_API_KEY\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Function Definition\nDESCRIPTION: Defines a BAML function for story generation using GPT-4, including the output structure with streaming support for title and content fields.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/react-nextjs/use-function-name.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclass Story {\n  title string @stream.not_null\n  content string @stream.not_null\n}\n\nfunction WriteMeAStory(input: string) -> Story {\n  client openai/gpt-4\n  prompt #\"\n    Tell me a story.\n\n    {{ ctx.output_format() }}\n\n    {{ _.role(\"user\") }}\n\n    Topic: {{input}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Check Results in TypeScript\nDESCRIPTION: Example of accessing check results in TypeScript client code. Shows how to retrieve both the validated value and the status of each check that was performed.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_13\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b, get_checks } from './baml_client'\nimport { Citation } from './baml_client/types'\n\nconst main = () => {\n    const citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n    // Access the value of the quote field\n    const quote = citation.quote.value\n    console.log(`Quote: ${quote}`)\n\n    // Access a particular check.\n    const quote_match_check = citation.quote.checks.exact_citation_match.status;\n    console.log(`Exact citation status: ${quote_match_check}`);\n\n    // Access each check and its status.\n    for (const check of get_checks(citation.quote.checks)) {\n        console.log(`Check: ${check.name}, Status: ${check.status}`)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI Generic Client in BAML\nDESCRIPTION: This snippet demonstrates how to set up a client using the openai-generic provider in BAML. It shows how to specify the provider, set the base URL, and define the model to be used.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/openai-generic.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"https://api.provider.com\"\n    model \"<provider-specified-format>\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calling BAML Functions with Image Inputs in Python\nDESCRIPTION: This Python code demonstrates how to call a BAML function that requires an image input. It shows two methods: loading an image from a URL and from a base64-encoded string.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/multi-modal.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_py import Image\nfrom baml_client import b\n\nasync def test_image_input():\n  # from URL\n  res = await b.TestImageInput(\n      img=Image.from_url(\n          \"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\"\n      )\n  )\n\n  # Base64 image\n  image_b64 = \"iVBORw0K....\"\n  res = await b.TestImageInput(\n    img=Image.from_base64(\"image/png\", image_b64)\n  )\n```\n\n----------------------------------------\n\nTITLE: BAML Stream Hook Result Interface\nDESCRIPTION: TypeScript interface showing the structure of the object returned by BAML-generated React hooks, including data handling for streaming and final results, loading and error states, and the mutate function.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/nextjs-plugin/README.md#2025-04-18_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BamlStreamHookResult<T> {\n  data?: T;              // Final result\n  partialData?: T;       // Streaming result\n  isLoading: boolean;    // Loading state\n  error?: Error;         // Error state\n  mutate: (input: any) => Promise<void>; // Function to call the BAML function\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Prompt Template with Jinja Syntax\nDESCRIPTION: Demonstration of using Jinja templating for dynamic prompt generation in BAML, including conditional statements and variable usage.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/function.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nprompt #\"\n    Input data: {{ input_data }}\n    \n    {% if condition %}\n        Conditional content\n    {% endif %}\n    \n    {{ ctx.output_format }}\n\"#\n```\n\n----------------------------------------\n\nTITLE: Testing Action Item Extraction with Sample Transcripts in BAML\nDESCRIPTION: Defines test cases for the ExtractTasks function, including a simple transcript with a single task and a complex transcript with multiple tasks, priorities, dependencies, and assignees.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/action-items.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\ntest SimpleTranscript {\n  functions [ExtractTasks]\n  args {\n    transcript #\"\n        Alice: We need to update the website by next week. This is high priority.\n        Bob: I can handle that. I'll need Carol's help with the design though.\n        Carol: Sure, I can help with the design part.\n    \"#\n  }\n}\n\ntest ComplexTranscript {\n  functions [ExtractTasks]\n  args {\n    transcript #\"\n        Alice: Hey team, we have several critical tasks we need to tackle for the upcoming release. First, we need to work on improving the authentication system. It's a top priority.\n        Bob: Got it, Alice. I can take the lead on the authentication improvements. Are there any specific areas you want me to focus on?\n        Alice: Good question, Bob. We need both a front-end revamp and back-end optimization. So basically, two sub-tasks.\n        Carol: I can help with the front-end part of the authentication system.\n        Bob: Great, Carol. I'll handle the back-end optimization then.\n        Alice: Perfect. Now, after the authentication system is improved, we have to integrate it with our new billing system. That's a medium priority task.\n        Carol: Is the new billing system already in place?\n        Alice: No, it's actually another task. So it's a dependency for the integration task. Bob, can you also handle the billing system?\n        Bob: Sure, but I'll need to complete the back-end optimization of the authentication system first, so it's dependent on that.\n        Alice: Understood. Lastly, we also need to update our user documentation to reflect all these changes. It's a low-priority task but still important.\n        Carol: I can take that on once the front-end changes for the authentication system are done. So, it would be dependent on that.\n        Alice: Sounds like a plan. Let's get these tasks modeled out and get started.\n    \"#\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Function Definition with Literal Types in BAML\nDESCRIPTION: Example showing how to define a function with literal string return types using the union operator\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/types.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nfunction ClassifyIssue(issue_description: string) -> \"bug\" | \"enhancement\" {\n  client GPT4Turbo\n  prompt #\"\n    Classify the issue based on the following description:\n    {{ ctx.output_format }}\n\n    {{ _.role(\"user\")}}\n    {{ issue_description }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML Syntax for Dynamic Types in Python\nDESCRIPTION: Demonstrates the higher-level API for creating dynamic types using BAML syntax directly in Python. This allows defining multiple types and their relationships in a more declarative way.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_14\n\nLANGUAGE: python\nCODE:\n```\ntb = TypeBuilder()\ntb.add_baml(\"\"\"\n  // Creates a new class Address that does not exist in the BAML source.\n  class Address {\n    street string\n    city string\n    state string\n  }\n\n  // Modifies the existing @@dynamic User class to add the new address property.\n  dynamic class User {\n    address Address\n  }\n\n  // Modifies the existing @@dynamic Category enum to add a new variant.\n  dynmic enum Category {\n    VALUE5\n  }\n\"\"\")\n```\n\n----------------------------------------\n\nTITLE: Using ID with Streaming Responses in Python\nDESCRIPTION: Shows how to track streaming responses with ID property in Python, allowing monitoring of entire stream usage.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.async_client import b\n\nasync def run():\n    collector = Collector(name=\"multi-function-collector\")\n    stream_id, stream = b.id.stream.ExtractResume(\"...\", baml_options={\"collector\": collector})\n    \n    async for chunk in stream:\n        print(chunk)\n    \n    result = await stream.get_final_result()\n    print(f\"Stream usage: {collector.id(stream_id).usage}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring LLM Client with Streaming Options in BAML\nDESCRIPTION: Demonstrates how to create an LLM client with explicit streaming configuration in BAML. This example creates a client named 'MyClientWithoutStreaming' that uses the OpenAI provider with GPT-4o model but disables streaming support.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/supports-streaming-openai.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClientWithoutStreaming {\n  provider openai\n  options {\n    model gpt-4o\n    api_key env.OPENAI_API_KEY\n    supports_streaming false \n  }\n}\n\nfunction MyFunction() -> string {\n  client MyClientWithoutStreaming\n  prompt #\"Write a short story\"#\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Field-Level Check in BAML\nDESCRIPTION: Demonstrates how to add a field-level validation check using the @check attribute to verify if a value is less than zero. The validation is applied to an integer field without raising exceptions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/check.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  bar int @check(less_than_zero, {{ this < 0 }})\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Named Assertions for Custom Error Messages\nDESCRIPTION: Example of creating named assertions that provide specific error messages when validation fails. This helps with debugging by making error messages more descriptive.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\nclass Citation {\n  //@assert(<name>, <expr>)\n  quote string @assert(exact_citation_found,\n\t  {{ this|length > 0 }}\n  )\n\n  website_link string @assert(valid_link,\n    {{ this|regex_match(\"https://\") }}\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Processing Function in BAML\nDESCRIPTION: Shows how to define a function that processes audio input using GPT4Turbo\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfunction DescribeSound(myAudio: audio) -> string {\n  client GPT4Turbo\n  prompt #\"\n    {{ _.role(\"user\")}}\n    Describe the audio in four words:\n    {{ myAudio }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Embedding Reasoning in Structured Object in BAML\nDESCRIPTION: This snippet shows how to embed reasoning directly into the structured object by adding a 'clues' field to the OrderInfo class. This allows for capturing relevant quotes from the email related to shipping.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/chain-of-thought.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nclass OrderInfo {\n    clues string[] @description(#\"\n      relevant quotes from the email related to shipping\n    \"#)\n    order_status \"ORDERED\" | \"SHIPPED\" | \"DELIVERED\" | \"CANCELLED\"\n    tracking_number string?\n    estimated_arrival_date string?\n}\n\nfunction GetOrderInfo(email: Email) -> OrderInfo {\n  client \"openai/gpt-\"\n  prompt #\"\n    extract everything from this email.\n\n    {{ ctx.output_format }}\n\n    {{ _.role('user') }}\n\n    Sender: {{email.from_address}}\n    Email Subject: {{email.subject}}\n    Email Body: {{email.body}}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI Reasoning Model Client in BAML\nDESCRIPTION: Example configuration for reasoning models like o1 or o1-mini in Azure OpenAI. For these models, max_tokens must be set to null and max_completion_tokens should be used instead to control the output size.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/azure.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> AzureO1 {\n  provider azure-openai\n  options {\n    deployment_id \"o1-mini\"\n    max_tokens null\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClientRegistry in Python\nDESCRIPTION: Example of creating and configuring a ClientRegistry instance in Python to set up an OpenAI client with custom parameters. Shows how to add a new LLM client and set it as primary for function calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/client-registry.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport os\nfrom baml_py import ClientRegistry\n\nasync def run():\n    cr = ClientRegistry()\n    # Creates a new client\n    cr.add_llm_client(name='MyAmazingClient', provider='openai', options={\n        \"model\": \"gpt-4o\",\n        \"temperature\": 0.7,\n        \"api_key\": os.environ.get('OPENAI_API_KEY')\n    })\n    # Sets MyAmazingClient as the primary client\n    cr.set_primary('MyAmazingClient')\n\n    # ExtractResume will now use MyAmazingClient as the calling client\n    res = await b.ExtractResume(\"...\", { \"client_registry\": cr })\n```\n\n----------------------------------------\n\nTITLE: Configuring LiteLLM Client in BAML\nDESCRIPTION: This snippet demonstrates how to set up a LiteLLM client in BAML using the 'openai-generic' provider. It specifies the base URL for the LiteLLM Proxy server, sets the API key from an environment variable, and defines the model to use.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/litellm.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://0.0.0.0:4000\"\n    api_key env.LITELLM_API_KEY\n    model \"gpt-4o\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Objects in TypeScript\nDESCRIPTION: This snippet shows how to work with Audio objects in TypeScript, including creating them from URLs, Base64 data, files, blobs, and asynchronous URL fetching. It demonstrates various initialization methods available in the TypeScript client library.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/audio.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client'\nimport { Audio } from \"@boundaryml/baml\"\n\n// Create an Audio object from a URL\nlet res = await b.TestAudioInput(\n    Audio.fromUrl('https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg')\n)\n\n// Create an Audio object from Base64 data\nconst audio_b64 = \"iVB0xyz...\"\nres = await b.TestAudioInput(\n    Audio.fromBase64('audio/ogg', audio_b64)\n)\n\n// Browser-specific methods\nconst fileAudio = await Audio.fromFile(file)\nconst blobAudio = await Audio.fromBlob(blob, 'audio/ogg')\nconst fetchedAudio = await Audio.fromUrlAsync('https://example.com/audio.ogg')\n```\n\n----------------------------------------\n\nTITLE: Defining Multi-Label Classification Schema for Support Tickets in BAML\nDESCRIPTION: Creates a schema for multi-label classification of support tickets with three categories: ACCOUNT, BILLING, and GENERAL_QUERY. The schema allows for multiple labels to be assigned to a single ticket.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/classification.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nenum TicketLabel {\n  ACCOUNT\n  BILLING\n  GENERAL_QUERY\n}\n\nclass TicketClassification {\n  labels TicketLabel[]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining MessageType Enum for Spam Classification in BAML\nDESCRIPTION: Creates a simple enum schema with two possible classification labels: SPAM and NOT_SPAM. This defines the output structure for a spam classifier function.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/classification.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nenum MessageType {\n  SPAM\n  NOT_SPAM\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nested Fields in BAML Assertions\nDESCRIPTION: Shows how to access nested fields within assertions using dot notation. This example demonstrates validating a field based on a property of a nested object.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclass Resume {\n  name string\n  experience string[]\n\n}\n\nclass Person {\n  resume Resume @assert({{ this.experience|length > 0 }}, \"Nonzero experience\")\n  person_name name\n}\n```\n\n----------------------------------------\n\nTITLE: Generated TypeScript Code with Streaming Types\nDESCRIPTION: The TypeScript code generated from the BAML definitions. It demonstrates how streaming attributes are translated to TypeScript types, with StreamState interface for fields with @stream.with_state and proper handling of enums and literal types.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface StreamState<T> {\n  value: T,\n  state: \"Pending\" | \"Incomplete\" | \"Complete\"\n}\n\nexport enum Category {\n  APPL = \"APPl\",\n  MSFT = \"MSFT\",\n  GOOG = \"GOOG\",\n  BAML = \"BAML\",\n}\n\nexport interface Recommendation {\n  stock: Stock,\n  amount: float,\n  action: \"buy\" | \"sell\"\n}\n\nexport interface Message {\n  message_type: \"gretting\" | \"conversation\" | \"farewell\"\n  message: StreamState<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Type Alias Definitions in BAML\nDESCRIPTION: Examples of type aliases including recursive types and complex data structures\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/types.mdx#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\ntype Graph = map<string, string[]>\ntype DataStructure = string[] | Graph\ntype JsonValue = int | string | bool | float | JsonObject | JsonArray\ntype JsonObject = map<string, JsonValue>\ntype JsonArray = JsonValue[]\n```\n\n----------------------------------------\n\nTITLE: Applying Parameter Assertions in BAML Functions\nDESCRIPTION: Shows how to use the @assert attribute on function parameters in BAML. This example demonstrates a named assertion on an integer parameter.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/assert.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nfunction MyFunction(x: int @assert(between_0_and_10, {{ this > 0 and this < 10 }})) {\n  client \"openai/gpt-4o\"\n  prompt #\"Hello, world!\"#\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Collector in TypeScript\nDESCRIPTION: Shows how to create a Collector instance, use it with a BAML function call, and access logging information in TypeScript.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from 'baml_client'\nimport { Collector } from '@boundaryml/baml'\n\n// Create a collector with optional name\nconst collector = new Collector(\"my-collector\")\n\n// Use it with a function call\nconst result = await b.ExtractResume(\"...\", { collector })\n\n// Access logging information\nconsole.log(collector.last?.usage)  // Print usage metrics\nconsole.log(collector.last?.rawLlmResponse)  // Print final response\n// since there may be retries, print the last http response received\nconsole.log(collector.last?.calls[-1].httpResponse)\n```\n\n----------------------------------------\n\nTITLE: Declaring Basic Map Structure in BAML\nDESCRIPTION: Demonstrates the basic syntax for declaring a map in BAML, including nested key-value pairs. Keys and values are separated by spaces, and nested maps are enclosed in curly braces.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/map.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\n{\n  key1 value1,\n  key2 {\n    nestedKey1 nestedValue1,\n    nestedKey2 nestedValue2\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Round-Robin Provider with Retry Policy in BAML\nDESCRIPTION: This example shows how to configure a round-robin provider with a retry policy. The retry policy rotates the strategy list after each retry attempt.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/round-robin.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider round-robin\n  retry_policy MyRetryPolicy\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to OpenAI Client Configuration\nDESCRIPTION: Example showing how to set custom HTTP headers when configuring an OpenAI client in BAML.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/openai.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider openai\n  options {\n    api_key env.MY_OPENAI_KEY\n    model \"gpt-3.5-turbo\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Checks and Assertions in BAML\nDESCRIPTION: Example of chaining various checks and assertions on a single field, showing how multiple validations can be applied in sequence to enforce complex validation rules.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_14\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  bar string @check(bar_nonempty, {{ this|length > 0 }})\n  @assert(bar_no_foo, {{ this|contains(\"foo\") }})\n  @check(bar_no_fizzle, {{ this|contains(\"fizzle\") }})\n  @assert(bar_no_baz, {{ this|contains(\"baz\") }})\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Generator in BAML\nDESCRIPTION: Defines a generator that outputs OpenAPI specifications. The configuration specifies the output directory, version of runtime, and includes an on_generate hook that runs the OpenAPI client generator after creating the OpenAPI YAML file.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/generator.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    output_type \"rest/openapi\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.76.2\"\n\n    // 'baml-cli generate' will run this after generating openapi.yaml, to generate your OpenAPI client\n    // This command will be run from within $output_dir\n    on_generate \"npx @openapitools/openapi-generator-cli generate -i openapi.yaml -g OPENAPI_CLIENT_TYPE -o .\"\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Enum Return Types in BAML\nDESCRIPTION: This snippet demonstrates how to test a dynamic enum 'Category' by injecting a new variant 'Feedback' during testing. The type_builder block is used to inject the new enum variant into the dynamic part of the Category enum.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_18\n\nLANGUAGE: baml\nCODE:\n```\nenum Category {\n  Refund\n  CancelOrder\n  TechnicalSupport\n  AccountIssue\n  Question\n  @@dynamic // Marked as @@dynamic.\n}\n\n// Function that returns a dynamic enum.\nfunction ClassifyMessage(message: string) -> Category {\n  // Prompt\n}\n\ntest ReturnDynamicEnumTest {\n  functions [ClassifyMessage]\n  type_builder {\n    // Injects new variants into the `@@dynamic` part of the Category enum.\n    dynamic enum Category {\n      Feedback\n    }\n  }\n  args {\n\t  message \"I think the product is great!\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Collectors in Ruby\nDESCRIPTION: Illustrates how to use multiple Collectors in Ruby to track different aspects of an application, including using multiple collectors for the same function call and separately.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\nb = Baml.Client\ndef run\n    # Create separate collectors for different parts of your application\n    collector_a = Baml::Collector.new(name: \"collector-a\")\n    collector_b = Baml::Collector.new(name: \"collector-b\")\n    \n    # Use both collectors for the same function call\n    res = b.ExtractResume(input: 'hi there', baml_options: { collector: [collector_a, collector_b] })\n    \n    # Both collectors will have the same logs\n    raise \"Assertion failed\" unless collector_a.last.usage.input_tokens == collector_b.last.usage.input_tokens\n    \n    # Use only collector_a for another call\n    res2 = b.ExtractResume(input: 'another call', baml_options: { collector: collector_a })\n    \n    # collector_a will have 2 logs, collector_b will still have 1\n    raise \"Assertion failed\" unless collector_a.logs.length == 2\n    raise \"Assertion failed\" unless collector_b.logs.length == 1\nend\n```\n\n----------------------------------------\n\nTITLE: Uploading Files and Extracting Data with Boundary ML API in Go\nDESCRIPTION: Go implementation for uploading files to the Boundary ML API. This code uses Go's http and multipart packages to upload multiple files and a prompt. It includes typed structs for parsing the API response.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/extract/examples.mdx#2025-04-18_snippet_3\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/json\"\n\t\"fmt\"\n\t\"io\"\n\t\"mime/multipart\"\n\t\"net/http\"\n\t\"os\"\n)\n\ntype ExtractResponse struct {\n\tExtractions []Extraction `json:\"extractions\"`\n\tUsage       Usage        `json:\"usage\"`\n\tRequestID   string       `json:\"request_id\"`\n}\n\ntype Extraction struct {\n\tSource Source      `json:\"source\"`\n\tOutput interface{} `json:\"output\"`\n}\n\ntype Source struct {\n\tType string `json:\"type\"`\n\tName string `json:\"name,omitempty\"`\n\tPage int    `json:\"page,omitempty\"`\n}\n\ntype Usage struct {\n\tConsumedChars      int     `json:\"consumed_chars\"`\n\tProducedChars      int     `json:\"produced_chars\"`\n\tConsumedMegapixels float64 `json:\"consumed_megapixels\"`\n}\n\nfunc extractData(apiKey string, filePaths []string, prompt string) (ExtractResponse, error) {\n\turl := \"https://api2.boundaryml.com/v3/extract\"\n\tbody := &bytes.Buffer{}\n\twriter := multipart.NewWriter(body)\n\n\tfor _, filePath := range filePaths {\n\t\tfile, err := os.Open(filePath)\n\t\tif err != nil {\n\t\t\treturn ExtractResponse{}, err\n\t\t}\n\t\tdefer file.Close()\n\n\t\tpart, err := writer.CreateFormFile(\"files\", file.Name())\n\t\tif err != nil {\n\t\t\treturn ExtractResponse{}, err\n\t\t}\n\t\t_, err = io.Copy(part, file)\n\t\tif err != nil {\n\t\t\treturn ExtractResponse{}, err\n\t\t}\n\t}\n\n\t_ = writer.WriteField(\"prompt\", prompt)\n\terr := writer.Close()\n\tif err != nil {\n\t\treturn ExtractResponse{}, err\n\t}\n\n\treq, err := http.NewRequest(\"POST\", url, body)\n\tif err != nil {\n\t\treturn ExtractResponse{}, err\n\t}\n\treq.Header.Set(\"Authorization\", fmt.Sprintf(\"Bearer %s\", apiKey))\n\treq.Header.Set(\"Content-Type\", writer.FormDataContentType())\n\n\tclient := &http.Client{}\n\tresp, err := client.Do(req)\n\tif err != nil {\n\t\treturn ExtractResponse{}, err\n\t}\n\tdefer resp.Body.Close()\n\n\tif resp.StatusCode != http.StatusOK {\n\t\treturn ExtractResponse{}, fmt.Errorf(\"Request failed with status %s\", resp.Status)\n\t}\n\n\tvar extractResponse ExtractResponse\n\terr = json.NewDecoder(resp.Body).Decode(&extractResponse)\n\tif err != nil {\n\t\treturn ExtractResponse{}, err\n\t}\n\n\treturn extractResponse, nil\n}\n\nfunc main() {\n\tapiKey := \"your_api_key_here\"\n\tfilePaths := []string{\"path/to/file1.pdf\", \"path/to/file2.png\"}\n\tprompt := \"Please extract the text content.\"\n\n\tresult, err := extractData(apiKey, filePaths, prompt)\n\tif err != nil {\n\t\tfmt.Println(\"Error:\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"Result: %+v\\n\", result)\n}\n```\n\n----------------------------------------\n\nTITLE: React Story Form Component Implementation\nDESCRIPTION: React component using BAML-generated hook for story generation with loading and error states.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/01-quick-start.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\n'use client'\n\n  // ✅ Automatically generates a server action and React hook\n\nimport { useWriteMeAStory } from \"@/baml_client/react/hooks\";\n\nexport function StoryForm() {\n  const writeMeAStory = useWriteMeAStory();\n\n  return (\n    <div>\n      <button\n        onClick={() => writeMeAStory.mutate(\"About a cat in a hat\")}\n        disabled={writeMeAStory.isLoading}>\n        {writeMeAStory.isLoading ? 'Generating...' : 'Generate Story'}\n      </button>\n\n      <div>\n        <h4>{writeMeAStory.data?.title}</h4>\n        <p>{writeMeAStory.data?.content}</p>\n      </div>\n\n      {writeMeAStory.error && <div>Error: {writeMeAStory.error.message}</div>}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for BAML and App\nDESCRIPTION: Docker Compose configuration to run BAML-over-HTTP and the application side-by-side. It includes health checks and network configurations.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/deploying/openapi.mdx#2025-04-18_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  baml-over-http:\n    build:\n      context: .\n      dockerfile: baml.Dockerfile\n    networks:\n      - my-app-network\n    healthcheck:\n      test: [ \"CMD\", \"curl\", \"-f\", \"http://localhost:2024/_debug/ping\" ]\n      interval: 1s\n      timeout: 100ms\n      retries: 3\n    ports:\n      - \"2024:2024\"\n\n  my-app:\n    build:\n      context: .\n      dockerfile: my-app.Dockerfile\n    depends_on:\n      baml-over-http:\n        condition: service_healthy\n    environment:\n      - BAML_ENDPOINT=http://baml-over-http:2024\n\n  debug-container:\n    image: amazonlinux:latest\n    depends_on:\n      baml-over-http:\n        condition: service_healthy\n    command: sh -c 'curl -v \"$${BAML_ENDPOINT}/_debug/ping\"'\n    environment:\n      - BAML_ENDPOINT=http://baml-over-http:2024\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ID Property in Ruby\nDESCRIPTION: Shows how to implement the ID property in Ruby to get unique identifiers for function calls and track usage metrics.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client'\n\n# Get both id and result\nid, result = Baml.Client.id.ExtractResume(\"...\")\n\n# Use id with collector\ncollector = Baml::Collector.new(name: \"multi-function-collector\")\nother_id, result = Baml.Client.id.ExtractResume(\"...\", baml_options: { collector: collector })\nprint(collector.id(other_id).usage)  # Get usage for specific call\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Enum in BAML\nDESCRIPTION: Shows how to create an enum with the @@dynamic attribute to allow runtime value modifications.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/dynamic.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nenum MyEnum {\n  Value1\n  Value2\n\n  @@dynamic // allows modifying enum values dynamically at runtime\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Collector State in TypeScript\nDESCRIPTION: Shows how to manage Collector state in TypeScript, including clearing logs and reusing the collector for multiple function calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nimport {b} from 'baml_client'\nimport {Collector} from '@boundaryml/baml'\n\nasync function run() {\n    const collector = new Collector(\"reusable-collector\")\n    const res = await b.ExtractResume(\"...\", { collector })\n    // Remove all logs and free up memory\n    collector.clear()\n\n    // Reuse the same collector\n    const res2 = await b.ExtractResume(\"...\", { collector })\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Collector State in Ruby\nDESCRIPTION: Illustrates how to manage Collector state in Ruby, including clearing logs and reusing the collector for multiple function calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\nb = Baml.Client\n\ndef run\n    collector = Baml::Collector.new(name: \"reusable-collector\")\n    res = b.ExtractResume(input: 'First call', baml_options: { collector: collector })\n    # Remove all logs and free up memory\n    collector.clear()\n\n    # Reuse the same collector\n    res = b.ExtractResume(input: 'Second call', baml_options: { collector: collector })\nend\n```\n\n----------------------------------------\n\nTITLE: Nesting Multiple Round-Robin Clients in BAML\nDESCRIPTION: This snippet illustrates how to nest multiple round-robin clients. It creates a MegaClient that includes another round-robin client (MyClient) along with additional clients in its strategy.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/strategy/round-robin.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider round-robin\n  options {\n    strategy [\n      ClientA\n      ClientB\n      ClientC\n    ]\n  }\n}\n\nclient<llm> MegaClient {\n  provider round-robin\n  options {\n    strategy [\n      MyClient\n      ClientD\n      ClientE\n    ]\n  }\n}\n\n// Calling MegaClient will call:\n// MyClient(ClientA)\n// ClientD\n// ClientE\n// MyClient(ClientB)\n// etc.\n```\n\n----------------------------------------\n\nTITLE: Simple Test with Basic Input Type in BAML\nDESCRIPTION: Example test for a function with a single string input parameter.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\ntest SimpleTest {\n    functions [ClassifyMessage]\n    args {\n        input \"Can't access my account\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Location Data with Marvin in Python\nDESCRIPTION: This snippet demonstrates how to use Marvin to extract location information from a string and structure it into a Pydantic model.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/marvin.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport pydantic\n\nclass Location(pydantic.BaseModel):\n    city: str\n    state: str\n\nmarvin.extract(\"I moved from NY to CHI\", target=Location)\n```\n\n----------------------------------------\n\nTITLE: Setting API Key Using Environment Variables in BAML Client Configuration\nDESCRIPTION: Example showing how to configure an LLM client in BAML using an environment variable to securely store an API key. This demonstrates practical usage in a client configuration block.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/env-vars.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyCustomClient {\n    provider \"openai\"\n    options {\n        model \"gpt-4o-mini\"\n        // Set the API key using an environment variable\n        api_key env.MY_SUPER_SECRET_API_KEY\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML-generated Client for Resume Parsing\nDESCRIPTION: Shows how to use a BAML-generated client to extract structured data from a resume text. The example demonstrates BAML's simplicity compared to traditional approaches, with automatic deserialization.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import baml as b\n\nasync def main():\n  resume = await b.ExtractResume(resume_text=\"\"\"John Doe\nPython, Rust\nUniversity of California, Berkeley, B.S. in Computer Science, 2020\"\"\")\n\n  assert resume.name == \"John Doe\"\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Classes in BAML\nDESCRIPTION: Creates a dynamic User class that can be modified at runtime. The class is marked with @@dynamic and used in a function that extracts user information from text.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nclass User {\n  name string\n  age int\n  @@dynamic\n}\n\nfunction DynamicUserCreator(user_info: string) -> User {\n  client GPT4\n  prompt #\"\n    Extract the information from this chunk of text:\n    \"{{ user_info }}\"\n\n    {{ ctx.output_format }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Client in Go\nDESCRIPTION: Initializes a BAML client in Go with custom endpoint and API key from environment variables. Creates a new configuration instance and sets up authorization headers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/openapi-howto-rely-on-envvars.mdx#2025-04-18_snippet_0\n\nLANGUAGE: go\nCODE:\n```\nimport (\n    \"os\"\n    baml \"my-golang-app/baml_client\"\n)\n\nfunc main() {\n    cfg := baml.NewConfiguration()\n    if boundaryEndpoint := os.Getenv(\"BOUNDARY_ENDPOINT\"); boundaryEndpoint != \"\" {\n        cfg.BasePath = boundaryEndpoint\n    }\n    if boundaryApiKey := os.Getenv(\"BOUNDARY_API_KEY\"); boundaryApiKey != \"\" {\n        cfg.DefaultHeader[\"Authorization\"] = \"Bearer \" + boundaryApiKey\n    }\n    b := baml.NewAPIClient(cfg).DefaultAPI\n    // Use `b` to make API calls\n}\n```\n\n----------------------------------------\n\nTITLE: Using _.role() with Conditional Logic in For-Loops\nDESCRIPTION: This function alternates between user and assistant roles based on the message index in the array, demonstrating how to use _.role() with conditional logic.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/role.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfunction ChatMessages(messages: string[]) -> string {\n  client GPT4o\n  prompt #\"\n    {% for m in messages %}\n      {{ _.role(\"user\" if loop.index % 2 == 1 else \"assistant\") }}\n      {{ m }}\n    {% endfor %}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Vertex AI Client with Safety Settings\nDESCRIPTION: Example of configuring a Vertex AI client in BAML with safety settings to control content generation. Shows how to set category, threshold, and method for safety configurations.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_7\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n\n    safetySettings {\n      category HARM_CATEGORY_HATE_SPEECH\n      threshold BLOCK_LOW_AND_ABOVE\n      method SEVERITY\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Enum Parameters in BAML\nDESCRIPTION: This snippet demonstrates how to test a function that takes a dynamic enum 'Category' as an input parameter. The args block directly specifies a new variant 'Feedback' without needing a type_builder block.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_20\n\nLANGUAGE: baml\nCODE:\n```\nenum Category {\n  Refund\n  CancelOrder\n  TechnicalSupport\n  AccountIssue\n  Question\n  @@dynamic // Marked as @@dynamic.\n}\n\nfunction WriteCustomerMessage(category: Category) -> string {\n  // Prompt\n}\n\ntest DynamicEnumAsInputTest {\n  functions [WriteCustomerMessage]\n  args {\n    category Feedback // The enum is dynamic so it accepts a new variant.\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Array Declaration Syntax\nDESCRIPTION: Demonstrates basic array syntax in BAML including single-line arrays, multi-line arrays, and nested objects within arrays. Shows different ways to structure array data with key-value pairs.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/array.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\n{\n  key1 [value1, value2, value3],\n  key2 [\n    value1,\n    value2,\n    value3\n  ],\n  key3 [\n    {\n      subkey1 \"valueA\",\n      subkey2 \"valueB\"\n    },\n    {\n      subkey1 \"valueC\",\n      subkey2 \"valueD\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Tools Array in BAML\nDESCRIPTION: This BAML snippet defines a function that returns an array of multiple tool types (WeatherAPI or MyOtherAPI) using a union of a list.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_8\n\nLANGUAGE: baml\nCODE:\n```\nfunction UseTool(user_message: string) -> (WeatherAPI | MyOtherAPI)[] {\n  client \"openai/gpt-4o-mini\"\n  prompt #\"\n    Given a message, extract info.\n    {# special macro to print the functions return type. #}\n    {{ ctx.output_format }}\n\n    {{ _.role('user') }}\n    {{ user_message }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Dynamic Class Definition in BAML\nDESCRIPTION: Demonstrates how to create a dynamic class using the @@dynamic attribute, allowing for runtime addition of properties.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/class.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclass MyClass {\n  property1 string\n  property2 int?\n\n  @@dynamic // allows me to later propert3 float[] at runtime\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Round-Robin Testing in BAML\nDESCRIPTION: Demonstrates how to implement round-robin testing to distribute requests across multiple LLM providers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/baml_src/README.md#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> RoundRobin {\n  provider baml-round-robin\n  options {\n    start 0\n    strategy [\n      GPT35\n      Claude\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Starting BAML Server with Custom Settings\nDESCRIPTION: Example of starting the BAML server with a custom source directory and port specification.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/serve.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli serve --from /path/to/my/baml_src --port 3000 --preview\n```\n\n----------------------------------------\n\nTITLE: Creating and Using Image Objects in Python with BAML\nDESCRIPTION: This example demonstrates how to create Image objects from URLs and Base64 data in Python, then pass them to BAML functions. It shows the use of async/await pattern with the BAML client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/image.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_py import Image\nfrom baml_client import b\n\nasync def test_image_input():\n    # Create an Image from a URL\n    img = Image.from_url(\"https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png\")\n    res = await b.TestImageInput(img=img)\n\n    # Create an Image from Base64 data\n    image_b64 = \"iVB0xyz...\"\n    img = Image.from_base64(\"image/png\", image_b64)\n    res = await b.TestImageInput(img=img)\n```\n\n----------------------------------------\n\nTITLE: Creating Audio Objects in Python\nDESCRIPTION: This snippet demonstrates how to create Audio objects from URLs and Base64 data in Python, and use them with BAML functions. The example shows two different ways to instantiate Audio objects and pass them to a TestAudioInput function.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/audio.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_py import Audio\nfrom baml_client import b\n\nasync def test_audio_input():\n    # Create an Audio object from a URL\n    audio = Audio.from_url(\"https://actions.google.com/sounds/v1/emergency/beeper_emergency_call.ogg\")\n    res = await b.TestAudioInput(audio=audio)\n\n    # Create an Audio object from Base64 data\n    audio_b64 = \"iVB0xyz...\"\n    audio = Audio.from_base64(\"audio/ogg\", audio_b64)\n    res = await b.TestAudioInput(audio=audio)\n```\n\n----------------------------------------\n\nTITLE: Image Testing with File Reference in BAML\nDESCRIPTION: Testing a function with an image input specified by file path reference.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_6\n\nLANGUAGE: baml\nCODE:\n```\ntest ImageFileTest {\n    functions [AnalyzeImage]\n    args {\n        param {\n            file \"../images/test.png\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Dynamic Enums in TypeScript\nDESCRIPTION: Shows how to use TypeBuilder in TypeScript to modify a dynamic Category enum by adding new values at runtime, then using it in a BAML function call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\nimport TypeBuilder from '../baml_client/type_builder'\nimport {\n  b\n} from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  tb.Category.addValue('VALUE3')\n  tb.Category.addValue('VALUE4')\n  const res = await b.DynamicCategorizer(\"some input\", { tb: tb })\n  // Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  console.log(res)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Client in Java\nDESCRIPTION: Sets up a BAML client in Java using environment variables for endpoint and API key configuration. Initializes the API client and configures authentication headers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/openapi-howto-rely-on-envvars.mdx#2025-04-18_snippet_1\n\nLANGUAGE: java\nCODE:\n```\nimport com.boundaryml.baml_client.ApiClient;\nimport com.boundaryml.baml_client.ApiException;\nimport com.boundaryml.baml_client.Configuration;\nimport com.boundaryml.baml_client.api.DefaultApi;\nimport com.boundaryml.baml_client.auth.*;\n\npublic class ApiExample {\n    public static void main(String[] args) {\n        ApiClient apiClient = Configuration.getDefaultApiClient();\n\n        String boundaryEndpoint = System.getenv(\"BOUNDARY_ENDPOINT\");\n        if (boundaryEndpoint != null && !boundaryEndpoint.isEmpty()) {\n            apiClient.setBasePath(boundaryEndpoint);\n        }\n\n        String boundaryApiKey = System.getenv(\"BOUNDARY_API_KEY\");\n        if (boundaryApiKey != null && !boundaryApiKey.isEmpty()) {\n            apiClient.addDefaultHeader(\"Authorization\", \"Bearer \" + boundaryApiKey);\n        }\n\n        DefaultApi apiInstance = new DefaultApi(apiClient);\n        // Use `apiInstance` to make API calls\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendered Prompt with ctx.output_format\nDESCRIPTION: Example of how BAML renders the ctx.output_format in a prompt. This shows the actual text that would be sent to the LLM after template processing.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/output-format.mdx#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nExtract this resume\n---\nAaron V.\nBachelors CS, 2015\nUT Austin\n---\n\nAnswer in JSON using this schema: \n{\n  name: string\n  education: [\n    {\n      school: string\n      graduation_year: string\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Resource-Based Permissions for AWS Bedrock Models\nDESCRIPTION: JSON IAM policy that restricts AWS Bedrock model invocation to specific models (Anthropic Claude and Meta Llama), following the principle of least privilege.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_21\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock:InvokeModel\",\n        \"bedrock:InvokeModelWithResponseStream\"\n      ],\n      \"Resource\": [\n        \"arn:aws:bedrock:*:*:model/anthropic.claude-*\",\n        \"arn:aws:bedrock:*:*:model/meta.llama2-*\"\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Dynamic Types in Ruby\nDESCRIPTION: Shows how to add descriptions to dynamic type properties in Ruby, which helps with documentation and improves prompt clarity.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_13\n\nLANGUAGE: ruby\nCODE:\n```\ntb = Baml::TypeBuilder.new\ntb.User.add_property(\"email\", tb.string).description(\"The user's email\")\n```\n\n----------------------------------------\n\nTITLE: Defining the BamlValidationError Class in TypeScript\nDESCRIPTION: Type definition for the BamlValidationError class which extends the Error class. It includes properties for the error type, message, original prompt, and raw LLM output that failed validation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/errors/baml-validation-error.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BamlValidationError extends Error {\n  type: 'BamlValidationError'\n  message: string\n  prompt: string\n  raw_output: string\n}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Lists in BAML Prompt String Using Jinja\nDESCRIPTION: This snippet demonstrates how to use a Jinja for-loop to iterate over a list of messages in a BAML prompt string. It accesses and outputs each message's user name and content.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/what-is-jinja.mdx#2025-04-18_snippet_0\n\nLANGUAGE: Jinja\nCODE:\n```\nfunction MyFunc(messages: Message[]) -> string {\n  prompt #\"\n    {% for message in messages %}\n      {{ message.user_name }}: {{ message.content }}\n    {% endfor %}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Low Temperature in BAML Client\nDESCRIPTION: Setting the temperature parameter to 0.0 in a BAML client configuration to reduce model creativity and increase verbatim extraction accuracy.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/hallucinations.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider openai\n  options {\n    temperature 0.0\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ClientRegistry in Ruby\nDESCRIPTION: Ruby implementation for configuring ClientRegistry, showing how to create and set up an OpenAI client with custom parameters. Includes client creation and primary client designation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/client-registry.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\n\ndef run\n  cr = Baml::ClientRegistry.new\n\n  # Creates a new client\n  cr.add_llm_client(\n    'MyAmazingClient',\n    'openai',\n    {\n      model: 'gpt-4o',\n      temperature: 0.7,\n      api_key: ENV['OPENAI_API_KEY']\n    }\n  )\n\n  # Sets MyAmazingClient as the primary client\n  cr.set_primary('MyAmazingClient')\n\n  # ExtractResume will now use MyAmazingClient as the calling client\n  res = Baml.Client.extract_resume(input: '...', baml_options: { client_registry: cr })\nend\n\n# Call the asynchronous function\nrun\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of BAML Serve Command\nDESCRIPTION: The basic command syntax for starting the BAML-over-HTTP API server with the required preview flag.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/serve.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli serve [OPTIONS] --preview\n```\n\n----------------------------------------\n\nTITLE: BAML Enum With Value Descriptions\nDESCRIPTION: Example showing how to add descriptions to individual enum values using the @description attribute.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/description.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nenum MyEnum {\n  Value1 @description(\"The first value\")\n  Value2 @description(\"The second value\")\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nMyEnum\n---\nValue1 // The first value\nValue2 // The second value\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Messages Using Jinja in BAML\nDESCRIPTION: This snippet demonstrates how to iterate over a list of messages in BAML using Jinja syntax. It accesses each message's user_name and content attributes.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/loops.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jinja\nCODE:\n```\nfunction MyFunc(messages: Message[]) -> string {\n  prompt #\"\n    {% for message in messages %}\n      {{ message.user_name }}: {{ message.content }}\n    {% endfor %}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Using _.role() to Specify Message Roles in BAML Prompts\nDESCRIPTION: This snippet demonstrates how to explicitly set the role (system, user) for different sections of a BAML prompt, which affects how the messages are interpreted by the LLM provider.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/role.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nprompt #\"\n  {{ _.role(\"system\") }} Everything after\n  this element will be a system prompt!\n\n  {{ _.role(\"user\")}} \n  And everything after this\n  will be a user role\n\"#\n```\n\n----------------------------------------\n\nTITLE: Implementing Block Assertions in BAML Classes\nDESCRIPTION: Illustrates how to use block-level assertions in BAML classes. This example shows an assertion that references multiple fields within the class.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/assert.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  bar int\n  baz string\n  @@assert(baz_length_limit, {{ this.baz|length < this.bar }})\n}\n```\n\n----------------------------------------\n\nTITLE: Generating baml_client for Python using BAML\nDESCRIPTION: Defines a generator block in BAML to generate Python client code with Pydantic models. It specifies output type, directory, client mode, and version for the generated code.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-is-baml_client.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"sync\"\n\n    // Version of runtime to generate code for (should match installed baml-py version)\n    version \"0.54.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Recursive Class Example in BAML\nDESCRIPTION: Example of a BAML prompt using recursive class definitions for a linked list. The example demonstrates how hoisted classes are presented in the rendered prompt.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/output-format.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nclass Node {\n  data int\n  next Node?\n}\n\nclass LinkedList {\n  head Node?\n  len int\n}\n\nfunction BuildLinkedList(input: int[]) -> LinkedList {\n  prompt #\"\n    Build a linked list from the input array of integers.\n\n    INPUT: {{ input }}\n\n    {{ ctx.output_format }}    \n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Headers to Azure OpenAI Client in BAML\nDESCRIPTION: Example showing how to add custom headers to Azure OpenAI client requests. This is useful for adding additional authentication or tracking information to API calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/azure.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider azure-openai\n  options {\n    resource_name \"my-resource-name\"\n    deployment_id \"my-deployment-id\"\n    api_version \"2024-02-01\"\n    api_key env.AZURE_OPENAI_API_KEY\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Loop Index in Jinja Templates within BAML\nDESCRIPTION: This example shows how to use the 'loop' object in Jinja to access the current iteration index while iterating over items in a BAML prompt.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/loops.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jinja2\nCODE:\n```\nprompt #\"\n  {% for item in items %}\n    {{ loop.index }}: {{ item }}\n  {% endfor %}\n\"#\n```\n\n----------------------------------------\n\nTITLE: ParamField Configuration for Client Response Type in BAML\nDESCRIPTION: Defines a configuration parameter for specifying the client response type (openai, anthropic, google, or vertex) with a default of 'openai'. This parameter allows users to specify the expected response format from different AI providers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/client-response-type.mdx#2025-04-18_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<ParamField path=\"client_response_type\" type=\"openai | anthropic | google | vertex\" default=\"openai\">\n  <Warning>\n    Please let [us know on Discord](https://www.boundaryml.com/discord) if you have this use case! This is in alpha and we'd like to make sure we continue to cover your use cases.\n  </Warning>\n\n  The type of response to return from the client.\n\n  Sometimes you may expect a different response format than the provider default.\n  For example, using Azure you may be proxying to an endpoint that returns a different format than the OpenAI default.\n\n  **Default: `openai`**\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Class Definition with Field Attributes in BAML\nDESCRIPTION: Shows how to use field attributes like @alias and @description to provide additional context and naming alternatives for class properties.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/class.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclass MyClass {\n  property1 string @alias(\"name\") @description(\"The name of the object\")\n  age int? @description(\"The age of the object\")\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Prompt with Enum Categories and Descriptions\nDESCRIPTION: Defines functions to print all enum categories with descriptions and generate a prompt template for company classification. This allows the prompt to dynamically include all available categories.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef print_categories_and_descriptions():\n    for category in FinancialCategory:\n        print(f\"{category.category}: {category.description}\")\n\ndef create_prompt(text: str) -> str:\n    additional_models = \"\"\n    print_categories_and_descriptions()\n    PROMPT_TEMPLATE = f\"\"\"Classify the company described in this text into the best\nof the following categories:\n\nText:\n---\n{text}\n---\n\nCategories:\n{print_categories_and_descriptions()}\n\nThe best category is:\n\"\"\"\n    return PROMPT_TEMPLATE\n```\n\n----------------------------------------\n\nTITLE: Customizing Anthropic Client with Headers and API Key\nDESCRIPTION: Example showing how to customize an Anthropic client with a custom API key from an environment variable and additional headers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/anthropic.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider anthropic\n  options {\n    api_key env.MY_ANTHROPIC_KEY\n    model \"claude-3-5-sonnet-20240620\"\n    headers {\n      \"X-My-Header\" \"my-value\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Block-Level Attributes in BAML\nDESCRIPTION: This example illustrates the use of a block-level attribute in BAML. It shows how to apply the @@dynamic attribute to a class, allowing dynamic modification of fields at runtime.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/attributes-overview.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclass MyClass {\n  property1 string\n  property2 int?\n\n  @@dynamic // allows adding fields dynamically at runtime\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Dynamic Types in TypeScript\nDESCRIPTION: Demonstrates how to create entirely new types (Hobbies enum and Address class) at runtime using TypeBuilder in TypeScript, and attach them to an existing User class.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nimport TypeBuilder from '../baml_client/type_builder'\nimport { b } from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  const hobbiesEnum = tb.addEnum('Hobbies')\n  hobbiesEnum.addValue('Soccer')\n  hobbiesEnum.addValue('Reading')\n\n  const addressClass = tb.addClass('Address')\n  addressClass.addProperty('street', tb.string()).description(\"The user's street address\")\n\n\n  tb.User.addProperty('hobby', hobbiesEnum.type().optional())\n  tb.User.addProperty('address', addressClass.type())\n  const res = await b.DynamicUserCreator(\"some user info\", { tb: tb })\n  // Now res might have the hobby property, which can be Soccer or Reading\n  console.log(res)\n}\n```\n\n----------------------------------------\n\nTITLE: Including Block String Delimiters in BAML Strings\nDESCRIPTION: To include the block string delimiter \"# in the output, you can use a different count of # characters in the delimiter. This allows nesting of block string syntax within the content.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/string.mdx#2025-04-18_snippet_6\n\nLANGUAGE: baml\nCODE:\n```\n###\"\n  #\"Hello\"#\n\"###\n```\n\n----------------------------------------\n\nTITLE: Using BAML Generated Hooks in React Components\nDESCRIPTION: Shows how to use the BAML-generated React hooks in a client-side component. The hook provides loading states, data handling for both final and streaming results, and error handling.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/nextjs-plugin/README.md#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\n// app/components/story.tsx\n'use client'\n\nimport { useWriteMeAStoryAction } from \"@/baml_client/nextjs\";\n\nexport function StoryForm() {\n  const {\n    data: finalStory,\n    partialData: streamingStory,\n    isLoading,\n    isError,\n    error,\n    mutate\n  } = useWriteMeAStoryAction();\n\n  const story = isLoading ? streamingStory : finalStory;\n\n  return (\n    <div>\n      <button onClick={() => mutate(\"Once upon a time...\")}>\n        Generate Story\n      </button>\n      {isLoading && <p>Generating story...</p>}\n      {story && (\n        <div>\n          <h2>{story.title}</h2>\n          <p>{story.content}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Chaining Multiple Assertions in BAML\nDESCRIPTION: Demonstrates how to chain multiple assertions on a single field. This example shows two equivalent ways to implement multiple validations on integer fields.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nclass Foo {\n  bar int @assert(between_0_and_10, {{ this > 0 and this < 10 }})\n  baz int @assert(positive, {{ this > 0 }}) @assert(less_than_10, {{ this < 10 }})\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing AWS Bedrock Client in BAML\nDESCRIPTION: Basic configuration for an AWS Bedrock client in BAML, specifying the model and inference parameters like max tokens and temperature.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    model \"anthropic.claude-3-sonnet-20240229-v1:0\"\n    inference_configuration {\n      max_tokens 100\n      temperature 0.7\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding docstrings to BAML classes and properties\nDESCRIPTION: Shows how to add documentation strings to classes and properties using the '///' syntax. These docstrings are carried through to generated types but not forwarded to the LLM through prompts.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/comments.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\n/// This is a docstring for a class\nclass Foo {\n    /// This is a docstring for a property\n    property1 string\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Vertex AI Client with Credentials as JSON Object\nDESCRIPTION: Example of configuring a Vertex AI client in BAML using a JSON object for service account credentials directly in the BAML configuration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> Vertex {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    location us-central1\n    // credentials can be a block string containing service account credentials in JSON format\n    credentials {\n      type \"service_account\",\n      project_id \"my-project-id\",\n      private_key_id \"string\",\n      private_key \"-----BEGIN PRIVATE KEY-----string\\n-----END PRIVATE KEY-----\\n\",\n      client_email \"john_doe@gmail.com\",\n      client_id \"123456\",\n      auth_uri \"https://accounts.google.com/o/oauth2/auth\",\n      token_uri \"https://oauth2.googleapis.com/token\",\n      auth_provider_x509_cert_url \"https://www.googleapis.com/oauth2/v1/certs\",\n      client_x509_cert_url \"https://www.googleapis.com/robot/v1/metadata/...\",\n      universe_domain \"googleapis.com\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing _.role() in For-Loops with Message Objects\nDESCRIPTION: This example shows how to use _.role() with a for-loop to iterate through an array of Message objects, setting the appropriate role for each message.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/role.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nclass Message {\n  role string\n  message string\n}\n\nfunction ChatWithAgent(input: Message[]) -> string {\n  client GPT4o\n  prompt #\"\n    {% for m in messages %}\n      {{ _.role(m.role) }}\n      {{ m.message }}\n    {% endfor %}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Installing BAML package with npm\nDESCRIPTION: Command to install the BAML package using npm package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @boundaryml/baml\n```\n\n----------------------------------------\n\nTITLE: Implementing Circle Description Function with Numerical Parameters in BAML\nDESCRIPTION: Demonstrates a BAML function that accepts both integer and float parameters to describe a circle. The function uses GPT-4 to generate descriptions based on the radius and an optional pi value, showcasing type flexibility and default parameter handling.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/int-float.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nfunction DescribeCircle(radius: int | float, pi: float?) -> string {\n    client \"openai/gpt-4o-mini\"\n    prompt #\"\n        Describe a circle with a radius of {{ radius }} units.\n        Include the area of the circle using pi as {{ pi or 3.14159 }}.\n        \n        What are some properties of the circle?\n    \"#\n}\n\ntest CircleDescription {\n    functions [DescribeCircle]\n    // will be cast to int\n    args { radius 5 }\n}\n\ntest CircleDescription2 {\n    functions [DescribeCircle]\n    // will be cast to float\n    args { \n        radius 5.0 \n        pi 3.14\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing BAML Generate Command\nDESCRIPTION: The basic usage of the 'generate' command in the BAML CLI tool. This command is used to generate BAML clients based on BAML source files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/generate.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli generate [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: AWS SSO Login and Profile Usage in BAML\nDESCRIPTION: Example showing how to login with AWS SSO and then specify the profile directly in BAML configuration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# First, login with SSO\naws sso login --profile staging-profile\n\n# Then use the profile in your BAML config\n```\n\n----------------------------------------\n\nTITLE: Defining LLM Client and Retry Policy in BAML\nDESCRIPTION: Demonstrates how to define an LLM client with OpenAI provider and configure retry policies for error handling.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/baml_src/README.md#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> TestGPT {\n  provider openai\n  retry_policy TestRetry\n  options {\n    model gpt-4\n    api_key env.OPENAI_API_KEY\n  }\n}\n\nretry_policy TestRetry {\n  max_retries 3\n  strategy {\n    type exponential_backoff\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating baml_client for Ruby using BAML\nDESCRIPTION: Defines a generator block in BAML to generate Ruby client code with Sorbet. It specifies output type, directory, and version for the generated code. This is marked as beta.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-is-baml_client.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"ruby/sorbet\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.54.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Literal Union Type Example\nDESCRIPTION: Shows union type declaration with literal values including string, number, and boolean across BAML, Python, and TypeScript.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: baml\nCODE:\n```\n\"str\" | 1 | false\n```\n\nLANGUAGE: python\nCODE:\n```\nUnion[Literal[\"str\"], Literal[1], Literal[False]]\n```\n\nLANGUAGE: typescript\nCODE:\n```\n\"str\" | 1 | false\n```\n\n----------------------------------------\n\nTITLE: Handling BAML Assertion Errors in Python\nDESCRIPTION: Example of handling validation errors in Python client code. Shows how to catch BamlValidationError exceptions when assertions fail.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_client.types import Citation\n\ndef main():\n    try:\n        citation: Citation = b.GetCitation(\"SpaceX, is an American spacecraft manufacturer, launch service provider...\")\n\n        # Access the value of the quote field\n        quote = citation.quote\n        website_link = citation.website_link\n        print(f\"Quote: {quote} from {website_link}\")\n        \n    except BamlValidationError as e:\n        print(f\"Validation error: {str(e)}\")\n    except Exception as e:\n        print(f\"An unexpected error occurred: {e}\")\n\n```\n\n----------------------------------------\n\nTITLE: Advanced BAML Test with Optional Features\nDESCRIPTION: Extended test syntax including type builders, conditional checks, and assertions for more complex testing scenarios.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\ntest name {\n    functions [function_list]\n    type_builder {\n        class NewType {\n            // Props\n        }\n        dynamic class ExistingDynamicType {\n            new_prop NewType\n            // Inject Props Here\n        }\n    }\n    args {\n        parameter_assignments\n    }\n    @@check( check_length, {{ this.prop|length > 0 }} )\n    @@assert( {{ this.prop|length < 255 }})\n}\n```\n\n----------------------------------------\n\nTITLE: Using Template Variables in BAML Block Strings\nDESCRIPTION: Block strings in BAML support Jinja templating syntax for dynamic content generation. Variables and expressions can be included within double curly braces.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/string.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\ntemplate_string Greeting(name: string) #\"\n  Hello {{ name }}!\n\"#\n```\n\n----------------------------------------\n\nTITLE: Creating Server Actions with BAML Functions\nDESCRIPTION: Demonstrates how to create a Next.js server action that uses a BAML function with streaming support. The toStreamable method prepares the response for streaming to the client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/nextjs-plugin/README.md#2025-04-18_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// app/actions/story.ts\n'use server'\n\nimport { b } from \"@/baml_client\";\n\nexport async function writeMeAStoryAction(prompt: string) {\n  return b.WriteMeAStory.stream(prompt).toStreamable();\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Raw HTTP Requests with .request Pattern\nDESCRIPTION: Demonstrates using the .request call pattern to get the raw HTTP request without sending it. This is useful for inspecting or modifying the request before sending it manually.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/client.mdx#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.async_client import b\n\nasync def example():\n    request = await b.request.TellMeAStory()\n    print(request.url)\n    print(request.headers)\n    print(request.body.json())\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client/async_client'\n\nasync function example() {\n    const request = await b.request.TellMeAStory()\n    console.log(request.url)\n    console.log(request.headers)\n    console.log(request.body.json())\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client/client'\n\nb = Baml.Client\n\ndef example\n  request = b.request.TellMeAStory\n  puts request.url\n  puts request.headers\n  puts request.body.json\nend\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Functions with Image Inputs - URL Method\nDESCRIPTION: Shows how to test a function that takes an image input using a URL reference. The test specifies a publicly accessible URL from which the image can be downloaded.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\ntest Test1 {\n  functions [MyFunction]\n  args {\n    myImage {\n      url \"https....\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Tracking Parallel Calls in Ruby\nDESCRIPTION: Demonstrates asynchronous function calls with ID tracking in Ruby, showing how to access both individual and aggregated usage metrics.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client'\nrequire 'async'\n\nAsync do\n    collector = Baml::Collector.new(name: \"multi-function-collector\")\n    \n    # Run multiple functions in parallel\n    resume_id, resume = Baml.Client.id.ExtractResume(\"...\", baml_options: { collector: collector })\n    invoice_id, invoice = Baml.Client.id.ExtractInvoice(\"...\", baml_options: { collector: collector })\n    \n    # Access specific logs by id\n    print(\"Resume usage: #{collector.id(resume_id).usage}\")\n    print(\"Invoice usage: #{collector.id(invoice_id).usage}\")\n    \n    # Access all logs\n    print(\"Total usage: #{collector.usage}\")\nend\n```\n\n----------------------------------------\n\nTITLE: Using BAML Functions in Ruby\nDESCRIPTION: Demonstrates how to use BAML-generated functions in Ruby, including both standard and streaming implementations for resume extraction.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/ruby.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\n\ndef example(raw_resume)\n    # r is an instance of Baml::Types::Resume, defined in baml_client/types\n    r = Baml.Client.ExtractResume(resume: raw_resume)\n\n    puts \"ExtractResume response:\"\n    puts r.inspect\nend\n\ndef example_stream(raw_resume)\n    stream = Baml.Client.stream.ExtractResume(resume: raw_resume)\n\n    stream.each do |msg|\n        # msg is an instance of Baml::PartialTypes::Resume\n        # defined in baml_client/partial_types\n        puts msg.inspect\n    end\n\n    stream.get_final_response\nend\n\nexample 'Grace Hopper created COBOL'\nexample_stream 'Grace Hopper created COBOL'\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Client in Python Docker Environment\nDESCRIPTION: Docker command to generate BAML client code for Python applications using baml-cli. This should be run before the application build process.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/deploying/docker.mdx#2025-04-18_snippet_0\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN baml-cli generate --from path-to-baml_src\n```\n\n----------------------------------------\n\nTITLE: BAML Vertex AI Client with Generation Configuration\nDESCRIPTION: Example of configuring a Vertex AI client in BAML with generation configurations to control output tokens and temperature. These settings affect how the model generates responses.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_8\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    project_id my-project-id\n    location us-central1\n    \n    generationConfig {\n      maxOutputTokens 100\n      temperature 1\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BAML Configuration Functions in Python\nDESCRIPTION: Demonstrates how to import various configuration functions from the baml_client.config module in Python.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.config import set_from_env, set_log_level, \n                                 set_log_json_mode, set_log_max_message_length,\n                                 get_log_level, reset_baml_env_vars\n```\n\n----------------------------------------\n\nTITLE: Defining Book and Library Classes with Complex Assertions in BAML\nDESCRIPTION: This snippet defines 'Book' and 'Library' classes using BAML. It includes field-level assertions for validating book properties and a block-level assertion in the 'Library' class to ensure unique ISBNs across all books.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_15\n\nLANGUAGE: baml\nCODE:\n```\nclass Book {\n    title string @assert(this|length > 0)\n    author string @assert(this|length > 0)\n    isbn string @assert(\n        {{ this|regex_match(\"^(97(8|9))?\\d{9}(\\d|X)$\") }},\n        \"Invalid ISBN format\"\n    )\n    publication_year int @assert(valid_pub_year, {{ 1000 <= this <= 2100 }})\n    genres string[] @assert(valid_length, {{ 1 <= this|length <= 10 }})\n}\n\nclass Library {\n    name string\n    books Book[] @assert(nonempty_books, {{ this|length > 0 }})\n                 @assert(unique_isbn, {{ this|map(attribute='isbn')|unique()|length == this|length }} )\n}\n```\n\n----------------------------------------\n\nTITLE: Importing and Using BAML Function in Python\nDESCRIPTION: Python code example showing how to import and use the generated BAML client to call the ExtractStudentInfo function with sample data.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-lib/baml-core/README.md#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import ExtractStudentInfo\n\nresult = ExtractStudentInfo(\"My name is Jane and I have a student email jane@college.edu\")\nprint(result.model_dump_json())\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Collectors in TypeScript\nDESCRIPTION: Shows how to use multiple Collectors in TypeScript to track different aspects of an application, including using multiple collectors for the same function call and separately.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nimport {b} from 'baml_client'\nimport {Collector} from '@boundaryml/baml'\n\nasync function run() {\n    // Create separate collectors for different parts of your application\n    const collector_a = new Collector(\"collector-a\")\n    const collector_b = new Collector(\"collector-b\")\n    \n    // Use both collectors for the same function call\n    const res = await b.ExtractResume(\"...\", { collector: [collector_a, collector_b] })\n    \n    // Both collectors will have the same logs\n    assert(collector_a.last?.usage.inputTokens === collector_b.last?.usage.inputTokens)\n    \n    // Use only collector_a for another call\n    const res2 = await b.ExtractResume(\"...\", { collector: collector_a })\n    \n    // collector_a will have 2 logs, collector_b will still have 1\n    assert(collector_a.logs.length === 2)\n    assert(collector_b.logs.length === 1)\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Generator in BAML\nDESCRIPTION: Defines a generator that outputs Python code with Pydantic models. The configuration specifies the output directory, client mode preference (sync/async), and the version of runtime to use, which should match the installed baml-py version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/generator.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    output_type \"python/pydantic\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"sync\"\n\n    // Version of runtime to generate code for (should match installed baml-py version)\n    version \"0.76.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Boundary Studio Environment Variables\nDESCRIPTION: Sets up the required environment variables for connecting your application to Boundary Studio for monitoring and observability.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/07-observability/studio.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport BOUNDARY_PROJECT_ID=project_uuid\nexport BOUNDARY_SECRET=your_token\n```\n\n----------------------------------------\n\nTITLE: Configuring React/Next.js Generator in BAML\nDESCRIPTION: Defines a generator that outputs TypeScript code optimized for React applications. The configuration specifies the output directory, client mode preference (async), and the version of runtime to use, which should match the installed @boundaryml/baml package version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/generator.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    output_type \"typescript/react\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"async\"\n\n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.76.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with Collector in TypeScript\nDESCRIPTION: Shows basic logging functionality using Collector in TypeScript, including creating a collector, using it with a function call, and accessing various logging information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport {b} from 'baml_client'\nimport {Collector} from '@boundaryml/baml'\n\nasync function run() {\n    // Create a collector instance with an optional name\n    const collector = new Collector(\"my-collector\")\n    // collector will be modified by the function to include all internal state\n    const res = await b.ExtractResume(\"...\", { collector })\n    // This will print the return type of the function\n    console.log(res)\n\n    // This is guaranteed to be set by the function\n    assert(collector.last)\n\n    // This will print the id of the last request\n    console.log(collector.last.id)\n\n    // This will print the usage of the last request\n    // (This aggregates usage from all retries if there was usage emitted)\n    console.log(collector.last.usage)\n\n    // This will print the raw response of the last request\n    console.log(collector.last.calls[-1].httpResponse)\n\n    // This will print the raw text we used to run the parser.\n    console.log(collector.last.rawLlmResponse)\n}\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Functions with Audio Inputs - File Method\nDESCRIPTION: Demonstrates how to test a function that takes an audio input using a file path reference. The test specifies a relative path to an audio file within the project.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_7\n\nLANGUAGE: baml\nCODE:\n```\ntest Test1 {\n  functions [MyFunction]\n  args {\n    myAudio {\n      file \"../path/to/audio.mp3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of ID Property in TypeScript\nDESCRIPTION: Demonstrates how to use the ID property with TypeScript to track specific function calls and access usage metrics via a collector.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/id.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from 'baml_client'\n\n// Get both id and result\nconst { id, data: result } = await b.id.ExtractResume(\"...\")\n\n// Use id with collector\nconst collector = new Collector(name=\"multi-function-collector\")\nconst { id: otherId, data: result2 } = await b.id.ExtractResume(\"...\", { collector })\nconsole.log(collector.id(otherId)?.usage)  // Get usage for specific call\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Playground Proxy in VSCode settings.json\nDESCRIPTION: Example configuration to disable the BAML playground proxy in VSCode settings. This proxy is used to forward requests to LLM providers when browser-based requests are not supported. Setting this to false is recommended when running VSCode from a remote machine.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/vscode-ext/enablePlaygroundProxy.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baml.enablePlaygroundProxy\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Finish Reason Deny List in BAML Client\nDESCRIPTION: This snippet shows how to configure a BAML client with a finish_reason_deny_list. It sets up the client to deny the 'length' finish reason, allowing all other finish reasons except when the LLM response is cut off due to length limitations.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/finish-reason.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai\"\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n    // Finish reason deny list will allow all finish reasons except length\n    finish_reason_deny_list [\"length\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Credential Resolution with Explicit Configuration in BAML\nDESCRIPTION: Example of highest precedence credential configuration in BAML, explicitly specifying AWS credentials with custom environment variables.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_9\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    access_key_id env.MY_ACCESS_KEY      // Highest precedence\n    secret_access_key env.MY_SECRET_KEY\n    region \"us-east-1\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Writing Test Cases for Spam Classification in BAML\nDESCRIPTION: Creates test cases to verify the spam classifier's functionality. Includes a test for obvious spam content and another for legitimate messages to ensure proper classification.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/classification.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\ntest BasicSpamTest {\n  functions [ClassifyText]\n  args {\n    input \"Buy cheap watches now! Limited time offer!!!\"\n  }\n}\n\ntest NonSpamTest {\n  functions [ClassifyText]\n  args {\n    input \"Hey Sarah, can we meet at 3 PM tomorrow to discuss the project?\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Vertex AI Client with Credentials as File Path\nDESCRIPTION: Example of configuring a Vertex AI client in BAML using a file path to service account credentials. The path is resolved relative to the current working directory of the process.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> Vertex {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    location us-central1\n    credentials \"path/to/credentials.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Python Types Generated for Stream State\nDESCRIPTION: Python code showing the generated types for the @stream.with_state attribute in BAML, including a generic StreamState class.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass StreamState(BaseModel, Generic[T]):\n  value: T,\n  state: \"incomplete\" | \"complete\"\n\nclass BlogPost(BaseModel):\n  title: str\n  content: StreamState[str | None]\n```\n\n----------------------------------------\n\nTITLE: Update Schema WASM Script Execution\nDESCRIPTION: Command to run the update-schema-wasm.sh script for syncing changes in the local development environment\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-schema-wasm/nodejs/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n./prisma-schema-wasm/scripts/update-schema-wasm.sh\n```\n\n----------------------------------------\n\nTITLE: Generating baml_client for TypeScript using BAML\nDESCRIPTION: Defines a generator block in BAML to generate TypeScript client code. It specifies output type, directory, client mode, and version for the generated code.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-is-baml_client.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\"\n    output_type \"typescript\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // What interface you prefer to use for the generated code (sync/async)\n    // Both are generated regardless of the choice, just modifies what is exported\n    // at the top level\n    default_client_mode \"async\"\n\n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.54.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Server Action for Chat\nDESCRIPTION: Server-side action implementation for chat functionality with authentication and streaming support.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/02-chatbot.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ts\nCODE:\n```\n'use server'\n\nimport { b } from \"@/baml_client\";\nimport { Message } from \"@/baml_client/types\";\n\nexport async function streamChat(messages: Message[]) {\n  const user = await authUser();\n\n  if (!user) {\n    throw new Error(\"User not authenticated\");\n  }\n\n  return b.stream.Chat(messages).toStreamable();\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Ruby Generator in BAML (Beta)\nDESCRIPTION: Defines a beta generator that outputs Ruby code with Sorbet type checking. The configuration specifies the output directory and the version of runtime to use, which should match the installed Ruby baml package version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/generator.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\ngenerator target {\n    output_type \"ruby/sorbet\"\n\n    // Where the generated code will be saved (relative to baml_src/)\n    output_dir \"../\"\n\n    // Version of runtime to generate code for (should match installed `baml` package version)\n    version \"0.76.2\"\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Logging with Collector in Ruby\nDESCRIPTION: Illustrates basic logging functionality using Collector in Ruby, including creating a collector, using it with a function call, and accessing various logging information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\nb = Baml.Client\n\ndef run\n    # Create a collector instance\n    collector = Baml::Collector.new(name: \"my-collector\")\n    # The function will now use the collector to track internal state\n    res = b.ExtractResume(input: 'hi there', baml_options: { collector: collector })\n\n    # This will print the return type of the function\n    print(res)\n\n    # This is guaranteed to be set by the function\n    raise \"Assertion failed\" unless collector.last\n\n    # This will print the id of the last request\n    print(collector.last.id)\n\n    # This will print the usage of the last request\n    # (This aggregates usage from all retries if there was usage emitted)\n    print(collector.last.usage)\n\n    # This will print the raw response of the last request\n    print(collector.last.calls[-1].http_response)\n\n    # This will print the raw text we used to run the parser.\n    print(collector.last.raw_llm_response)\nend\n\n# Call the function\nrun\n```\n\n----------------------------------------\n\nTITLE: Image Testing with Base64 Data in BAML\nDESCRIPTION: Testing a function with an image input provided as base64-encoded data with specified media type.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_8\n\nLANGUAGE: baml\nCODE:\n```\ntest ImageBase64Test {\n    functions [AnalyzeImage]\n    args {\n        param {\n            base64 \"a41f...\"\n            media_type \"image/png\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Client in TypeScript Docker Environment\nDESCRIPTION: Docker command to generate BAML client code for TypeScript applications using npx baml-cli. This should be executed before transpiling TypeScript to JavaScript.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/deploying/docker.mdx#2025-04-18_snippet_1\n\nLANGUAGE: dockerfile\nCODE:\n```\n# Do this early on in the dockerfile script before transpiling to JS\nRUN npx baml-cli generate --from path-to-baml_src\n```\n\n----------------------------------------\n\nTITLE: Parsing LLM Responses with .parse Pattern\nDESCRIPTION: Examples of using the .parse call pattern to parse responses from LLM APIs. This is useful when manually handling requests and responses, allowing you to use BAML's parsing logic on raw LLM outputs.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/client.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n# requests is not async so for simplicity we'll use the sync client.\nfrom baml_client.sync_client import b\n\ndef example():\n    # Get the HTTP request.\n    request = b.request.TellMeAStory()\n\n    # Send the HTTP request.\n    response = requests.post(request.url, headers=request.headers, json=request.body.json())\n\n    # Parse the LLM response.\n    parsed = b.parse.TellMeAStory(response.json()[\"choices\"][0][\"message\"][\"content\"])\n\n    # Fully parsed response.\n    print(parsed)\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client/async_client'\n\nasync function example() {\n    // Get the HTTP request.\n    const request = await b.request.TellMeAStory()\n\n    // Send the HTTP request.\n    const response = await fetch(request.url, {\n        method: request.method,\n        headers: request.headers,\n        body: JSON.stringify(request.body.json())\n    })\n\n    // Parse the HTTP body.\n    const body = await response.json() as any\n\n    // Parse the LLM response.\n    const parsed = await b.parse.TellMeAStory(body.choices[0].message.content)\n\n    // Fully parsed response.\n    console.log(parsed)\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'net/http'\nrequire 'uri'\nrequire 'json'\n\nrequire_relative 'baml_client'\n\nb = Baml.Client\n\ndef run\n  # Get the HTTP request object.\n  baml_req = b.request.TellMeAStory()\n\n  # Construct the Ruby HTTP client.\n  uri = URI.parse(baml_req.url)\n  http = Net::HTTP.new(uri.host, uri.port)\n  http.use_ssl = uri.scheme == 'https'\n\n  # Construct the Ruby HTTP request.\n  req = Net::HTTP::Post.new(uri.path)\n  req.initialize_http_header(baml_req.headers)\n  req.body = baml_req.body.json.to_json\n\n  # Send the HTTP request.\n  response = http.request(req)\n\n  # Parse the LLM response.\n  parsed = b.parse.TellMeAStory(\n    llm_response: JSON.parse(response.body)[\"choices\"][0][\"message\"][\"content\"]\n  )\n\n  # Fully parsed Resume type.\n  puts parsed\nend\n```\n\n----------------------------------------\n\nTITLE: TypeScript Types Generated for Stream State\nDESCRIPTION: TypeScript interfaces generated for the @stream.with_state attribute in BAML, showing the StreamState generic interface.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/streaming.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\ninterface StreamState<T> {\n  value: T,\n  state: \"incomplete\" | \"complete\"\n}\n\ninterface BlogPost {\n  title: StreamState<string>\n  content: StreamState<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Collector State in Python\nDESCRIPTION: Demonstrates how to manage Collector state in Python, including clearing logs and reusing the collector for multiple function calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import Collector\n\ndef run():\n    collector = Collector(name=\"reusable-collector\")\n    res = b.ExtractResume(\"...\", baml_options={\"collector\": collector})\n    # Remove all logs and free up memory\n    collector.clear()\n\n    # Reuse the same collector\n    res = b.TestOpenAIGPT4oMini(\"Second call\", baml_options={\"collector\": collector})\n```\n\n----------------------------------------\n\nTITLE: Adding Descriptions to Dynamic Types in TypeScript\nDESCRIPTION: Shows how to add descriptions to dynamic type properties in TypeScript, which helps with documentation and improves prompt clarity.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_12\n\nLANGUAGE: typescript\nCODE:\n```\nconst tb = new TypeBuilder()\ntb.User.addProperty(\"email\", tb.string()).description(\"The user's email\")\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Class Return Types in BAML\nDESCRIPTION: This example shows how to test a dynamic class 'Resume' by adding an 'Experience' property to it during testing. The type_builder block defines a new Experience class and injects it into the dynamic part of the Resume class.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_17\n\nLANGUAGE: baml\nCODE:\n```\nclass Resume {\n  name string\n  skills string[]\n  @@dynamic // Marked as @@dynamic.\n}\n\n// Function that returns a dynamic class.\nfunction ExtractResume(from_text: string) -> Resume {\n  // Prompt\n}\n\ntest ReturnDynamicClassTest {\n  functions [ExtractResume]\n  type_builder {\n    // Defines a new type available only within this test block.\n    class Experience {\n      title string\n      company string\n      start_date string\n      end_date string\n    }\n\n    // Injects new properties into the `@@dynamic` part of the Resume class.\n    dynamic class Resume {\n      experience Experience[]\n    }\n  }\n  args {\n    from_text #\"\n      John Doe\n\n      Experience\n      - Software Engineer, Boundary, Sep 2022 - Sep 2023\n\n      Skills\n      - Python\n      - Java\n    \"#\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Configuration for Cross-Account Profile\nDESCRIPTION: BAML configuration that uses a cross-account AWS profile for authentication with AWS Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_16\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    profile \"target-role\"\n    model \"anthropic.claude-3-sonnet-20240229-v1:0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Dynamic Class Structure in BAML\nDESCRIPTION: Demonstrates how to create a class with the @@dynamic attribute to allow runtime field additions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/dynamic.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass MyClass {\n  property1 string\n  property2 int?\n\n  @@dynamic // allows adding fields dynamically at runtime\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Ruby Code from BAML Files\nDESCRIPTION: Converts BAML files into Ruby modules with type-safe interfaces.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/ruby.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Defining BAML Error Type Hierarchy in TypeScript\nDESCRIPTION: This snippet demonstrates the inheritance structure of BAML error classes. Each class extends the base JavaScript Error and includes a literal type field for identification, along with properties for storing the original prompt and raw output for debugging purposes.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/errors/overview.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\n// Base JavaScript Error class\nclass Error {\n  message: string\n  name: string\n  stack?: string\n}\n\n// BAML-specific error classes\nclass BamlValidationError extends Error {\n  type: 'BamlValidationError'\n  message: string\n  prompt: string\n  raw_output: string\n}\n\nclass BamlClientFinishReasonError extends Error {\n  type: 'BamlClientFinishReasonError'\n  message: string\n  prompt: string\n  raw_output: string\n}\n```\n\n----------------------------------------\n\nTITLE: Generating 'baml_client' Python module\nDESCRIPTION: Commands to generate the 'baml_client' Python module from .baml files, which includes auto-generated Python code for calling BAML functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli generate\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry run baml-cli generate\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv run baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Streaming LLM Client in BAML\nDESCRIPTION: Defines a BAML client configuration that disables internal streaming for the Anthropic provider. The client uses Claude 3 Haiku model with a maximum output of 1000 tokens while explicitly setting supports_streaming to false.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/supports-streaming.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClientWithoutStreaming {\n  provider anthropic\n  options {\n    model claude-3-haiku-20240307\n    api_key env.ANTHROPIC_API_KEY\n    max_tokens 1000\n    supports_streaming false\n  }\n}\n\nfunction MyFunction() -> string {\n  client MyClientWithoutStreaming\n  prompt #\"Write a short story\"#\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class With @alias Attribute in BAML\nDESCRIPTION: This snippet illustrates how to use the @alias attribute in a BAML class definition. It shows how a property can be renamed in the output format while maintaining the original name in the code.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/alias.mdx#2025-04-18_snippet_1\n\nLANGUAGE: BAML\nCODE:\n```\nclass MyClass {\n  property1 string @alias(\"name\")\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Multi-line Array Test Case\nDESCRIPTION: Demonstrates a test case using a multi-line array format for city names, showing how to structure longer arrays in a more readable format.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/array.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\ntest CityDescription {\n    functions [DescriptionGame]\n    args { items [\n            \"New York\",\n            \"Los Angeles\",\n            \"Chicago\"\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML CLI Init Command\nDESCRIPTION: Basic usage of the 'baml init' command with optional parameters for specifying destination, client type, and OpenAPI client type.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/init.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli init [OPTIONS]\n```\n\n----------------------------------------\n\nTITLE: JSON Comment Prompt Example with Contradiction\nDESCRIPTION: An example of a prompt that creates a contradiction by asking for comments in JSON (which doesn't support comments), demonstrating how LLMs can be biased toward valid JSON syntax.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/hallucinations.mdx#2025-04-18_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nAnswer in this JSON schema:\n\n\n\nBut when you answer, add some comments in the JSON indicating your reasoning for the field like this:\n\nExample:\n---\n{\n  // I used the name \"John\" because it's the name of the person who wrote the prompt\n  \"name\": \"John\"\n}\n\nJSON:\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Collector in Ruby\nDESCRIPTION: Illustrates how to create a Collector instance, use it with a BAML function call, and access logging information in Ruby.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\nb = Baml.Client\n\n# Create a collector with optional name\ncollector = Baml::Collector.new(name: \"my-collector\")\n\n# Use it with a function call\nres = b.ExtractResume(input: '...', baml_options: { collector: collector })\n\n# Access logging information\nprint(collector.last.usage)  # Print usage metrics\nprint(collector.last.calls[-1].http_response)  # Print final response\nprint(collector.last.raw_llm_response) # a string of the last response made\n```\n\n----------------------------------------\n\nTITLE: Using Unquoted Strings in BAML\nDESCRIPTION: BAML supports unquoted inline strings for simple configuration options. These strings cannot contain reserved characters like quotes, at-signs, braces, hashtags, parentheses, brackets, commas, or newlines.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/string.mdx#2025-04-18_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nHello World\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML CLI with Deno\nDESCRIPTION: This command initializes the BAML CLI using Deno. It uses the --unstable-sloppy-imports and -A flags for full permissions, and runs the CLI from an npm package.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/install/nodejs.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --unstable-sloppy-imports -A npm:@boundaryml/baml/baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Checking for BamlValidationError Type in TypeScript\nDESCRIPTION: Example demonstrating how to identify a BamlValidationError using TypeScript's instanceof operator for proper error handling.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/errors/baml-validation-error.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (error instanceof BamlValidationError) {\n  // Handle validation error\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Client Integration in TypeScript\nDESCRIPTION: Example of using the generated BAML client in TypeScript with type-safe access to results.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/function.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from 'baml-client';\nimport { Person } from 'baml-client/types';\n\nasync function process(): Promise<Person> {\n    const result = await b.ParsePerson(\"John Doe, 30 years old...\");\n    console.log(result.name);  // Type-safe access\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with dotenv in TypeScript\nDESCRIPTION: This example demonstrates how to load environment variables in a TypeScript application using the dotenv package. The code imports both the dotenv package and the BAML client, then configures dotenv to load environment variables.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport dotenv from 'dotenv'\nimport { b } from './baml_client'\n\n// This should \"just work\"!\ndotenv.config()\n```\n\n----------------------------------------\n\nTITLE: Extracting Money Values with Marvin in Python\nDESCRIPTION: This example shows how to use Marvin to extract monetary values from a string, with custom instructions to focus only on money.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/marvin.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmarvin.extract(\n    \"I paid $10 for 3 tacos and got a dollar and 25 cents back.\",\n    target=float,\n    instructions=\"Only extract money\"\n)\n\n#  [10.0, 1.25]\n```\n\n----------------------------------------\n\nTITLE: Installing BAML using pip, poetry, or uv\nDESCRIPTION: Commands to install the BAML Python package using different package managers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npip install baml-py\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry add baml-py\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv add baml-py\n```\n\n----------------------------------------\n\nTITLE: Basic IAM Permissions for AWS Bedrock\nDESCRIPTION: IAM policy JSON that grants the minimum permissions required for basic access to AWS Bedrock services.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_19\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock:InvokeModel\",\n        \"bedrock:InvokeModelWithResponseStream\"\n      ],\n      \"Resource\": \"arn:aws:bedrock:*:*:model/*\"\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Applying @alias to an Enum Value in BAML\nDESCRIPTION: This snippet shows how to use the @alias attribute on an individual enum value in BAML. It demonstrates how a specific enum value can be renamed in the output format.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/alias.mdx#2025-04-18_snippet_3\n\nLANGUAGE: BAML\nCODE:\n```\nenum MyEnum {\n  Value1 @alias(\"Something\")\n}\n```\n\n----------------------------------------\n\nTITLE: Using BAML functions in Jupyter Notebook\nDESCRIPTION: Example of how to call BAML functions in a Jupyter notebook using the imported client module.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nraw_resume = \"Here's some resume text\"\nclient.b.ExtractResume(raw_resume)\n```\n\n----------------------------------------\n\nTITLE: Modifying Dynamic Classes in Ruby\nDESCRIPTION: Shows how to use TypeBuilder in Ruby to modify a dynamic User class by adding new properties at runtime, then using it in a BAML function call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_7\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative 'baml_client/client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  tb.User.add_property('email', tb.string)\n  tb.User.add_property('address', tb.string).description(\"The user's address\")\n\n  res = Baml.Client.dynamic_user_creator(input: \"some user info\", baml_options: {tb: tb})\n  # Now res can have email and address fields\n  puts res\nend\n```\n\n----------------------------------------\n\nTITLE: Weather API Implementation in Ruby\nDESCRIPTION: Ruby implementation of the weather API client showing integration with BAML-generated code and type checking.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/what-are-function-definitions.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  weather_info = $b.UseTool(user_message: \"What's the weather like in San Francisco?\")\n  puts weather_info\n  raise unless weather_info.is_a?(Baml::Types::WeatherAPI)\n  puts \"City: #{weather_info.city}\"\n  puts \"Time of Day: #{weather_info.timeOfDay}\"\nend\n```\n\n----------------------------------------\n\nTITLE: Streaming Mode with BAML Client in Ruby\nDESCRIPTION: Shows how to use streaming mode with a configured BAML client in Ruby. The example demonstrates processing stream chunks and accessing the final result and usage data.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client'\n\ncollector = Baml::Collector.new(name: \"my-collector\")\nmy_b = Baml.Client.with_options(collector: collector, client_registry: client_registry)\n\nstream = my_b.stream.ExtractResume(input: \"...\")\nstream.each do |chunk|\n    print(chunk)\nend\n\nresult = stream.get_final_result\nprint(collector.id(stream.id).usage)\n```\n\n----------------------------------------\n\nTITLE: Configuring Syntax Highlighting for BAML in CodeMirror\nDESCRIPTION: This code defines a comprehensive syntax highlighting configuration for the BAML language in CodeMirror. It maps BAML syntax elements to specific highlighting tags and sets up a custom color scheme. The configuration includes highlighting for class declarations, identifiers, keywords, comments, and other language elements.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/codemirror-lang-baml/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { styleTags, tags as t } from \"@lezer/highlight\";\n\nexport const jsonHighlighting = styleTags({\n // String: t.string,\n\t\"ClassDecl\": t.keyword,\n\t\"ClassDecl/IdentifierDecl\": t.name,\n\t\"TestDecl/IdentifierDecl\": t.name,\n\t\"ClassField/IdentifierDecl\": t.propertyName,\n\t\"SimpleTypeExpr/IdentifierDecl\": t.name,\n\tPromptExpr: t.string,\n\t\"FieldAttribute/...\": t.annotation,\n\t\"FieldAttribute/LiteralDecl\": t.string,\n\t\"EnumDecl/IdentifierDecl\": t.name,\n\t\"EnumDecl\": t.keyword,\n\t\"BlockAttribute/...\": t.annotation,\n\t\"BlockAttribute/LiteralDecl\": t.string,\n\t\"EnumValueDecl/IdentifierDecl\": t.propertyName,\n\t\"MultilineComment\": t.comment,\n\t\"FunctionDecl\": t.keyword,\n\t\"IdentifierDecl\": t.name,\n\n\t//IdentifierDecl: t.variable,\n  Number: t.number,\n  \"True False\": t.bool,\n  PropertyName: t.propertyName,\n  Null: t.null,\n  \",\": t.separator,\n  \"[ ]\": t.squareBracket,\n  \"{ }\": t.brace,\n});\n\n// A very dim/dull syntax highlighting so you have something to look at, but also to trigger you to write your own ;)\n// Also shows that you can use `export let extension = [...]`, to add extensions to the \"demo text\" editor.\nimport { HighlightStyle, syntaxHighlighting } from \"@codemirror/language\";\nconst syntax_colors = syntaxHighlighting(\n  HighlightStyle.define(\n    [\n\t\t\t      { tag: t.brace, color: \"#a8a8a8\" },\n\t\t\t      { tag: t.annotation, color: \"#a8a8a8\" },\n\n      { tag: t.name, color: \"#a8a8a8\" },\n      { tag: t.propertyName, color: \"#966a6a\" },\n      { tag: t.comment, color: \"#4b4949\" },\n      { tag: t.atom, color: \"#a25496\" },\n\n      { tag: t.literal, color: \"#7b87b8\" },\n      { tag: t.unit, color: \"#7b87b8\" },\n      { tag: t.null, color: \"#7b87b8\" },\n\n      { tag: t.keyword, color: \"#585858\" },\n      { tag: t.punctuation, color: \"#585858\" },\n      { tag: t.derefOperator, color: \"#585858\" },\n      { tag: t.special(t.brace), fontWeight: 700 },\n\n      { tag: t.operator, color: \"white\" },\n      { tag: t.self, color: \"white\" },\n      { tag: t.function(t.punctuation), color: \"white\" },\n      { tag: t.special(t.logicOperator), color: \"white\", fontWeight: \"bold\" },\n      { tag: t.moduleKeyword, color: \"white\", fontWeight: \"bold\" },\n      { tag: t.controlKeyword, color: \"white\", fontWeight: \"bold\" },\n      { tag: t.controlOperator, color: \"white\", fontWeight: \"bold\" },\n    ],\n    { all: { color: \"#585858\" } }\n  )\n);\n\nexport let extensions = [syntax_colors];\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML Project in Current Directory\nDESCRIPTION: Example of initializing a BAML project in the current directory with default settings.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/init.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbaml init\n```\n\n----------------------------------------\n\nTITLE: Implementing Provider-Specific Tests in BAML\nDESCRIPTION: Shows how to create provider-specific tests including client definition, function implementation, and test assertions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/baml_src/README.md#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\n// 1. First, define your client\nclient<llm> TestAnthropic {\n  provider anthropic\n  options {\n    model claude-3-haiku-20240307\n    api_key env.ANTHROPIC_API_KEY\n    max_tokens 1000\n  }\n}\n\n// 2. Create a function that uses the client\nfunction TestAnthropicCompletion(input: string) -> string {\n  client TestAnthropic\n  prompt #\"\"\"\n    Respond to this input with a simple response.\n\n    Input: {{input}}\n  \"\"\"#\n}\n\n// 3. Create a test for the function\ntest TestAnthropicCompletion {\n  functions [TestAnthropicCompletion]\n  args {\n    input #\"What is the capital of France?\"#\n  }\n  assert response == \"Paris\"\n}\n\n// You can also test error cases\nfunction TestAnthropicError(input: string) -> string {\n  client TestAnthropic\n  prompt #\"\"\"\n    This is a test for error handling.\n    {{input}}\n  \"\"\"#\n}\n\ntest TestAnthropicError {\n  functions [TestAnthropicError]\n  args {\n    input #\"Test input\"#\n  }\n  expect_error true\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading Files and Extracting Data with Boundary ML API in Ruby\nDESCRIPTION: Ruby implementation for uploading files to the Boundary ML API. This function uses Ruby's native Net::HTTP library to create a multipart form post request with files and a prompt, then parses the JSON response.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/extract/examples.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'net/http'\nrequire 'uri'\nrequire 'json'\n\ndef extract_data(api_key, file_paths, prompt)\n  uri = URI.parse('https://api2.boundaryml.com/v3/extract')\n  request = Net::HTTP::Post.new(uri)\n  request['Authorization'] = \"Bearer #{api_key}\"\n\n  form_data = [['prompt', prompt]]\n  file_paths.each do |file_path|\n    form_data << ['files', File.open(file_path)]\n  end\n\n  request.set_form(form_data, 'multipart/form-data')\n\n  req_options = {\n    use_ssl: uri.scheme == 'https',\n  }\n\n  response = Net::HTTP.start(uri.hostname, uri.port, req_options) do |http|\n    http.request(request)\n  end\n\n  if response.is_a?(Net::HTTPSuccess)\n    JSON.parse(response.body)\n  else\n    raise \"Request failed: #{response.code} #{response.message}\"\n  end\nend\n\n# Usage example\napi_key = 'your_api_key_here'\nfile_paths = ['path/to/file1.pdf', 'path/to/file2.png']\nprompt = 'Please extract the text content.'\n\nresult = extract_data(api_key, file_paths, prompt)\nputs result\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with python-dotenv Function Import (Working)\nDESCRIPTION: This example demonstrates loading environment variables using the python-dotenv package with function import. This approach works because load_dotenv is imported after the BAML client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom dotenv import load_dotenv\n# This will work since load_dotenv is imported after baml_client\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Classifying Request Types with Marvin in Python\nDESCRIPTION: This snippet demonstrates how to use Marvin for classification tasks using enums, classifying a request into predefined categories.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/marvin.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom enum import Enum\nimport marvin\n\nclass RequestType(Enum):\n    SUPPORT = \"support request\"\n    ACCOUNT = \"account issue\"\n    INQUIRY = \"general inquiry\"\n\nrequest = marvin.classify(\"Reset my password\", RequestType)\nassert request == RequestType.ACCOUNT\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript client from BAML files with yarn\nDESCRIPTION: Command to generate the baml_client TypeScript package from .baml files using yarn. This creates TypeScript code for calling BAML functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nyarn baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: AWS Bedrock Configuration with Environment Authentication\nDESCRIPTION: BAML configuration for AWS Bedrock that relies on credentials from environment variables without explicitly specifying them.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_7\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    // No need to specify credentials - they'll be picked up from environment\n    model \"anthropic.claude-3-sonnet-20240229-v1:0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Both Streaming and Non-Streaming Interfaces in Python\nDESCRIPTION: Shows how to use the BAML client from Python with both streaming and non-streaming interfaces. Despite the client using non-streaming HTTP API internally, the streaming interface will still work by returning a single event.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/supports-streaming.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# This will be streamed from your python code perspective, \n# but under the hood it will call the non-streaming HTTP API\n# and then return a streamable response with a single event\nb.stream.MyFunction()\n\n# This will work exactly the same as before\nb.MyFunction()\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Client\nDESCRIPTION: Command to generate the BAML client for creating React hooks\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/02-chatbot.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Testing Dynamic Class Parameters in BAML\nDESCRIPTION: This example shows how to test a function that takes a dynamic class 'Resume' as input parameter. The args block directly specifies values for both standard properties and additional 'experience' property without needing a type_builder block.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_19\n\nLANGUAGE: baml\nCODE:\n```\nclass Resume {\n  name string\n  skills string[]\n  @@dynamic // Marked as @@dynamic.\n}\n\nfunction WriteResume(resume: Resume) -> string {\n  // Prompt\n}\n\ntest DynamicClassAsInputTest {\n  functions [WriteResume]\n  args {\n    resume {\n      name \"John Doe\"\n      skills [\"C++\", \"Java\"]\n      experience [\n        {\n          title \"Software Engineer\"\n          company \"Boundary\"\n          start_date \"2023-09-01\"\n          end_date \"2024-09-01\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Integration Tests\nDESCRIPTION: Various commands for running integration tests, including specific test patterns and environment configurations\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/typescript/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm integ-tests\npnpm integ-tests -t \"works with fallbacks\"\npnpm integ-tests:dotenv\npnpm integ-tests:ci\n```\n\n----------------------------------------\n\nTITLE: Using Image Objects in React Components with BAML\nDESCRIPTION: This React component example demonstrates how to use BAML's React hooks with Image objects. It shows loading an image from a URL and passing it to a mutation function when a button is clicked.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/image.mdx#2025-04-18_snippet_2\n\nLANGUAGE: tsx\nCODE:\n```\nimport { useTestImageInput } from '../baml_client/react/hooks'\nimport { Image } from \"../baml_client/react/media\"\n\nexport function TestImageInput() {\n    const { mutate } = useTestImageInput()\n\n    const handleClick = async () => {\n        const image = await Image.fromUrl('https://upload.wikimedia.org/wikipedia/en/4/4d/Shrek_%28character%29.png')\n        mutate(image)\n    }\n\n    return (\n      <div>\n          <button onClick={handleClick}>\n              Test Image Input\n          </button>\n      </div>\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Setting BAML Log Level with Environment Variable in Shell\nDESCRIPTION: Sets the logging verbosity level for BAML runtime through the BAML_LOG environment variable. The default level is 'warn', but this can be changed to various levels from 'off' to 'trace' depending on how much detail is needed.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/terminal-logs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# default is warn\nBAML_LOG=info\n```\n\n----------------------------------------\n\nTITLE: Environment Configuration\nDESCRIPTION: Environment variable setup for BAML with OpenAI and optional Boundary Studio integration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/01-quick-start.mdx#2025-04-18_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nOPENAI_API_KEY=sk-...\n\nBOUNDARY_PROJECT_ID=sk-...\nBOUNDARY_SECRET=sk-...\n```\n\n----------------------------------------\n\nTITLE: Using BAML Classification in Python\nDESCRIPTION: This example shows how to use the BAML-defined classification function in Python code, demonstrating type safety and assertion.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/marvin.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import baml as b\n\n...\nrequestType = await b.ClassifyRequest(\"Reset my password\")\n# fully typed output\nassert requestType == RequestType.ACCOUNT\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in BAML\nDESCRIPTION: Shows the basic syntax for accessing an environment variable value in BAML configurations using the env prefix.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/env-vars.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nenv.YOUR_VARIABLE_NAME\n```\n\n----------------------------------------\n\nTITLE: Adding Comments in BAML Prompts\nDESCRIPTION: Demonstrates how to add comments inside BAML prompt templates using the curly brace and hash syntax {# ... #}. Comments are ignored during prompt execution.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/comments.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\n{# ... #}\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with python-dotenv Module Import\nDESCRIPTION: This example shows how to load environment variables using the python-dotenv package with module import. This approach works regardless of import order because dotenv is imported as a module before being used.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport dotenv\nfrom baml_client import b\n# This will work regardless of import order, since dotenv is imported as a module\ndotenv.load_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Clients with Default Settings\nDESCRIPTION: An example of generating BAML clients using the default settings. This command will use './baml_src' as the source directory.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/generate.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli generate\n```\n\n----------------------------------------\n\nTITLE: BAML Vertex AI Client with Credentials Content\nDESCRIPTION: Example of configuring a Vertex AI client in BAML using credentials_content for service account credentials as a block string. This method is not recommended for production use.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> Vertex {\n  provider vertex-ai\n  options {\n    model gemini-1.5-pro\n    location us-central1\n    // credentials_content is a block string containing service account credentials in JSON format\n    credentials_content #\"\n      {\n        \"type\": \"service_account\",\n        \"project_id\": \"my-project-id\",\n        \"private_key_id\": \"string\",\n        \"private_key\": \"-----BEGIN PRIVATE KEY-----string\\n-----END PRIVATE KEY-----\\n\",\n        \"client_email\": \"john_doe@gmail.com\",\n        \"client_id\": \"123456\",\n        \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n        \"token_uri\": \"https://oauth2.googleapis.com/token\",\n        \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n        \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/...\",\n        \"universe_domain\": \"googleapis.com\"\n      }\n    \"#\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Block Strings in BAML\nDESCRIPTION: Block strings in BAML are defined using #\" and \"# delimiters and support multiple lines. They are automatically dedented and have the first and last newlines removed.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/string.mdx#2025-04-18_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n#\"\nHello\nWorld\n\"#\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Server Restart in VSCode BAML Extension\nDESCRIPTION: Example configuration for the 'baml.restartTSServerOnSave' setting in VSCode settings.json. This controls whether the TypeScript Language Server is automatically restarted when the BAML extension generates TypeScript client files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/vscode-ext/restartTSServerOnSave.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baml.restartTSServerOnSave\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Defining a Class Without @alias Attribute in BAML\nDESCRIPTION: This snippet shows a basic class definition in BAML without using the @alias attribute. It demonstrates the default output format for a simple string property.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/alias.mdx#2025-04-18_snippet_0\n\nLANGUAGE: BAML\nCODE:\n```\nclass MyClass {\n  property1 string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Client in Rust\nDESCRIPTION: Sets up a BAML client configuration in Rust using environment variables. Configures the base path and bearer access token for API authentication.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/openapi-howto-rely-on-envvars.mdx#2025-04-18_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet mut config = baml_client::apis::configuration::Configuration::default();\nif let Some(base_path) = std::env::var(\"BOUNDARY_ENDPOINT\").ok() {\n    config.base_path = base_path;\n}\nif let Some(api_key) = std::env::var(\"BOUNDARY_API_KEY\").ok() {\n    config.bearer_access_token = Some(api_key);\n}\n// Use `config` to make API calls\n```\n\n----------------------------------------\n\nTITLE: Customizing ctx.output_format with Parameters\nDESCRIPTION: Example of calling ctx.output_format as a function with custom parameters to modify the schema presentation in the prompt.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/output-format.mdx#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\n{{ ctx.output_format(prefix=\"If you use this schema correctly and I'll tip $400:\\n\", always_hoist_enums=true)}}\n```\n\n----------------------------------------\n\nTITLE: Handling Array Responses\nDESCRIPTION: Final implementation showing how to handle both single and array responses from the LLM using additional wrapper classes and type checking.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n+def extract_resume(input_text: str) -> Union[List[Resume], None]:\n+    prompt = create_prompt(input_text) # Also requires changes\n    chat_completion = client.chat.completions.create(\n        model=\"gpt-4\", messages=[{\"role\": \"system\", \"content\": prompt}]\n    )\n    try:\n        output = chat_completion.choices[0].message.content\n        if output:\n            # Extract JSON block using regex\n            json_match = re.search(r\"\\{.*?\\}\", output, re.DOTALL)\n            if json_match:\n                json_output = json_match.group(0)\n                try:\n+                  parsed = json.loads(json_output)\n+                  if isinstance(parsed, list):\n+                      return list(map(Resume.model_validate_json, parsed))\n+                  else:\n+                      return [ResumeArray(**parsed)]\n        return None\n    except Exception as e:\n        raise e\n```\n\n----------------------------------------\n\nTITLE: BAML Client Generation Commands\nDESCRIPTION: Various package manager commands for generating the BAML client code.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/01-quick-start.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx baml-cli generate\n\npnpm exec baml-cli generate\n\nyarn baml-cli generate\n\nbun baml-cli generate\n\ndeno run --unstable-sloppy-imports -A npm:@boundaryml/baml/baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Applying @alias to an Enum in BAML\nDESCRIPTION: This example demonstrates how to use the @@alias attribute on an entire enum in BAML. It shows that the alias is applied to the enum itself, not to individual values.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/alias.mdx#2025-04-18_snippet_2\n\nLANGUAGE: BAML\nCODE:\n```\nenum MyEnum {\n  Value1 \n  // Note that @@alias is applied to the enum itself, not the value\n  @@alias(\"My Name\")\n}\n```\n\n----------------------------------------\n\nTITLE: Type Guard Usage for BamlClientFinishReasonError\nDESCRIPTION: Example showing how to use TypeScript's instanceof operator to identify and handle BamlClientFinishReasonError instances in error handling code.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/errors/baml-client-finish-reason-error.mdx#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nif (error instanceof BamlClientFinishReasonError) {\n  // Handle finish reason error\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Testing with File Reference in BAML\nDESCRIPTION: Testing a function with an audio input specified by file path reference.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_9\n\nLANGUAGE: baml\nCODE:\n```\ntest AudioFileTest {\n    functions [TranscribeAudio]\n    args {\n        audio {\n            file \"../audio/sample.mp3\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing with Arrays in BAML\nDESCRIPTION: Example showing how to provide arrays of objects as input arguments for testing batch processing functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_5\n\nLANGUAGE: baml\nCODE:\n```\ntest ArrayTest {\n    functions [BatchProcess]\n    args {\n        messages [\n            {\n                user \"user1\"\n                content \"Message 1\"\n            }\n            {\n                user \"user2\"\n                content \"Message 2\"\n            }\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running BAML Code Generation with npm\nDESCRIPTION: Executes the BAML code generation command using npx with npm package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/generate.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Message Length in Python\nDESCRIPTION: Function to set the maximum length of log messages in Python. Use 0 for unlimited. Corresponds to the BAML_LOG_MAX_MESSAGE_LENGTH environment variable.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef set_log_max_message_length(length: int):\n```\n\n----------------------------------------\n\nTITLE: Basic Configuration of BAML Client in TypeScript\nDESCRIPTION: Shows how to create a configured BAML client with consistent settings across multiple function calls in TypeScript. The example demonstrates accessing configuration and logs from the collector.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/with_options.mdx#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from \"baml_client\"\nimport { Collector, ClientRegistry } from \"@boundaryml/baml\"\n\nconst collector = new Collector(\"my-collector\")\nconst clientRegistry = new ClientRegistry()\nclientRegistry.setPrimary(\"openai/gpt-4o-mini\")\n\nconst myB = b.withOptions({ collector, clientRegistry })\n\n// All calls will use the configured options\nconst res = await myB.ExtractResume(\"...\")\nconst invoice = await myB.ExtractInvoice(\"...\")\n\n// Access configuration\nconsole.log(myB.clientRegistry)\nconsole.log(collector.logs)\nconsole.log(collector.last?.usage)\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript client from BAML files with deno\nDESCRIPTION: Command to generate the baml_client TypeScript package from .baml files using deno. Requires the unstable-sloppy-imports flag for Node import compatibility.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --unstable-sloppy-imports -A npm:@boundaryml/baml/baml-cli generate\n# Note: ESM is especially important for Deno, so you must explicitly\n# allow our Node import style, with the `--unstable-sloppy-imports` flag\n# and in your Deno VSCode configuration:\n#\n# {\n#   \"deno.unstable\": [\"sloppy-imports\"]\n# }\n```\n\n----------------------------------------\n\nTITLE: Creating Dockerfile for BAML Functions\nDESCRIPTION: Dockerfile to host BAML functions in a Docker container. It installs the BAML CLI and sets up the command to serve BAML functions over HTTP.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/deploying/openapi.mdx#2025-04-18_snippet_0\n\nLANGUAGE: docker\nCODE:\n```\nFROM node:20\n\nWORKDIR /app\nCOPY baml_src/ .\n\n# If you want to pin to a specific version (which we recommend):\n# RUN npm install -g @boundaryml/baml@VERSION\nRUN npm install -g @boundaryml/baml\n\nCMD baml-cli serve --preview --port 2024\n```\n\n----------------------------------------\n\nTITLE: Initializing OpenAPI BAML Project with Go Client\nDESCRIPTION: Example of initializing a BAML project for OpenAPI with a Go client generator.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/init.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbaml init --client-type openapi --openapi-client-type go\n```\n\n----------------------------------------\n\nTITLE: Implementing comments in BAML block strings with Jinja syntax\nDESCRIPTION: Demonstrates how to add comments within block strings using the {# #} syntax. This allows for commenting inside multi-line string blocks without affecting the string content.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/comments.mdx#2025-04-18_snippet_2\n\nLANGUAGE: jinja\nCODE:\n```\n#\"\n    My string. {#\n        This is a comment\n    #}\n    hi!\n\"#\n```\n\n----------------------------------------\n\nTITLE: Securing BAML Server with Password\nDESCRIPTION: Bash command and Dockerfile modification to set a password for the BAML server using the BAML_PASSWORD environment variable.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/deploying/openapi.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nBAML_PASSWORD=sk-baml-your-secret-password \\\n  baml-cli serve --preview --port 2024\n```\n\nLANGUAGE: docker\nCODE:\n```\nFROM node:20\n\nWORKDIR /app\nRUN npm install -g @boundaryml/baml\nCOPY baml_src/ .\n\nENV BAML_PASSWORD=sk-baml-your-secret-password\nCMD baml-cli serve --preview --port 2024\n```\n\n----------------------------------------\n\nTITLE: Getting Current Log Level in Python\nDESCRIPTION: Function to retrieve the current log level setting in Python.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_log_level() -> \"INFO\" | \"DEBUG\" | \"TRACE\" | \"WARN\" | \"ERROR\" | \"OFF\":\n```\n\n----------------------------------------\n\nTITLE: BAML Class With Property Description\nDESCRIPTION: Example showing how to add a description to a class property using the @description attribute.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/description.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclass MyClass {\n  property1 string @description(\"The name of the object\")\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  // The name of the object\n  property1: string\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring AnthropicClient with allowed role metadata in BAML\nDESCRIPTION: BAML code that configures the Anthropic client to allow the 'cache_control' metadata in message roles and sets the required 'anthropic-beta' header for prompt caching functionality.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/prompt-caching.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> AnthropicClient {\n  provider \"anthropic\"\n  options {\n    model \"claude-3-5-sonnet-20241022\"\n    allowed_role_metadata [\"cache_control\"]\n    headers {\n      \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Client in Ruby Docker Environment\nDESCRIPTION: Docker commands to add BAML dependency and generate client code for Ruby applications. Includes both adding the baml gem and generating the client code.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/deploying/docker.mdx#2025-04-18_snippet_2\n\nLANGUAGE: dockerfile\nCODE:\n```\nRUN bundle add baml\nRUN bundle exec baml-cli generate --from path/to/baml_src\n```\n\n----------------------------------------\n\nTITLE: Configuring Finish Reason Allow List in BAML Client\nDESCRIPTION: This snippet demonstrates how to set up a BAML client with a finish_reason_allow_list. It configures the client to only allow the 'stop' finish reason, treating all others as failures that prevent fallbacks and retries.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/finish-reason.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai\"\n  options {\n    model \"gpt-4o-mini\"\n    api_key env.OPENAI_API_KEY\n    // Finish reason allow list will only allow the stop finish reason\n    finish_reason_allow_list [\"stop\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the BAML Dev Command\nDESCRIPTION: Command syntax for starting the BAML development server. This command watches BAML source files for changes and automatically reloads the server when changes are detected, requiring the --preview flag as it's a preview feature.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/dev.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli dev [OPTIONS] --preview\n```\n\n----------------------------------------\n\nTITLE: Setting Maximum Log Message Length in TypeScript\nDESCRIPTION: Function to set the maximum length of log messages in TypeScript. Use 0 for unlimited. Corresponds to the BAML_LOG_MAX_MESSAGE_LENGTH environment variable.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_9\n\nLANGUAGE: typescript\nCODE:\n```\nsetLogMaxMessageLength(length: number): void;\n```\n\n----------------------------------------\n\nTITLE: Improved JSON Comment Prompt with Explicit Permission\nDESCRIPTION: An improved version of the previous prompt that explicitly permits invalid JSON syntax with comments, showing how to override the model's bias toward valid JSON.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/hallucinations.mdx#2025-04-18_snippet_2\n\nLANGUAGE: text\nCODE:\n```\nAnswer in this JSON schema:\n\n\n\nBut when you answer, add some comments in the JSON indicating your reasoning for the field like this:\n---\n{\n  // I used the name \"John\" because it's the name of the person who wrote the prompt\n  \"name\": \"John\"\n}\n\nIt's ok if this isn't fully valid JSON, \nwe will fix it afterwards and remove the comments.\n\nJSON:\n```\n\n----------------------------------------\n\nTITLE: AWS Bedrock Client with Custom Environment Variables\nDESCRIPTION: BAML configuration that uses custom environment variable names for AWS authentication with Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_12\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    access_key_id env.MY_CUSTOM_AWS_KEY_ID\n    secret_access_key env.MY_CUSTOM_AWS_SECRET\n    session_token env.MY_CUSTOM_AWS_SESSION  // Optional\n    region env.MY_CUSTOM_AWS_REGION\n    model \"anthropic.claude-3-sonnet-20240229-v1:0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AWS Bedrock with Explicit Credentials in BAML\nDESCRIPTION: BAML configuration that explicitly specifies AWS credentials using environment variables for authentication with AWS Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_8\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    access_key_id env.AWS_ACCESS_KEY_ID\n    secret_access_key env.AWS_SECRET_ACCESS_KEY\n    region \"us-east-1\"\n    model \"anthropic.claude-3-sonnet-20240229-v1:0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML Project in Specific Directory\nDESCRIPTION: Example of initializing a BAML project in a specified directory path.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/init.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbaml init --dest /path/to/my/project\n```\n\n----------------------------------------\n\nTITLE: Importing BAML client in Jupyter Notebook\nDESCRIPTION: Example of how to import the BAML client module in a Jupyter notebook to work with the autoreload extension.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n# Assuming your baml_client is inside a dir called app/\nimport app.baml_client as client # you can name this \"llm\" or \"baml\" or whatever you want\n```\n\n----------------------------------------\n\nTITLE: Disabling BAML Formatting in a File\nDESCRIPTION: Shows how to add a comment to disable formatting for a specific BAML file. This can be placed anywhere in the file.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/fmt.mdx#2025-04-18_snippet_1\n\nLANGUAGE: baml\nCODE:\n```\n// baml-format: ignore\n```\n\n----------------------------------------\n\nTITLE: OpenAPI ClientRegistry Configuration\nDESCRIPTION: Example of ClientRegistry configuration in OpenAPI request body format, showing how to specify client parameters and set primary client through API calls.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/client-registry.mdx#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"resume\": \"Vaibhav Gupta\",\n    \"__baml_options__\": {\n        \"client_registry\": {\n            \"clients\": [\n                {\n                    \"name\": \"OpenAI\",\n                    \"provider\": \"openai\",\n                    \"retry_policy\": null,\n                    \"options\": {\n                        \"model\": \"gpt-4o-mini\",\n                        \"api_key\": \"sk-...\"\n                    }\n                }\n            ],\n            \"primary\": \"OpenAI\"\n        }\n    }\n}\n```\n\nLANGUAGE: shell\nCODE:\n```\ncurl -X POST http://localhost:2024/call/ExtractResume \\\n    -H 'Content-Type: application/json' -d @body.json\n```\n\n----------------------------------------\n\nTITLE: Basic BAML Class Without Description\nDESCRIPTION: Example of a basic BAML class definition without using the @description attribute.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/description.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclass MyClass {\n  property1 string\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n  property1: string\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Dynamic Types in Ruby\nDESCRIPTION: Demonstrates how to create entirely new types (Hobbies enum and Address class) at runtime using TypeBuilder in Ruby, and attach them to an existing User class.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_10\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative 'baml_client/client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  hobbies_enum = tb.add_enum('Hobbies')\n  hobbies_enum.add_value('Soccer')\n  hobbies_enum.add_value('Reading')\n\n  address_class = tb.add_class('Address')\n  address_class.add_property('street', tb.string)\n\n  tb.User.add_property('hobby', hobbies_enum.type.optional)\n  tb.User.add_property('address', address_class.type.optional)\n\n  res = Baml::Client.dynamic_user_creator(input: \"some user info\", baml_options: { tb: tb })\n  # Now res might have the hobby property, which can be Soccer or Reading\n  puts res\nend\n```\n\n----------------------------------------\n\nTITLE: Creating Indented Block Strings in BAML\nDESCRIPTION: Block strings in BAML automatically handle indentation by dedenting the content while preserving the relative indentation between lines. The extra spaces at the beginning of each line are removed.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/string.mdx#2025-04-18_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\n#\"\n    Hello\n    World\n\"#\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry Policies in BAML\nDESCRIPTION: Shows how to configure retry policies with exponential backoff and apply them to LLM clients.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/baml_src/README.md#2025-04-18_snippet_6\n\nLANGUAGE: baml\nCODE:\n```\nretry_policy TestRetry {\n  max_retries 3\n  strategy {\n    type exponential_backoff\n  }\n}\n\nclient<llm> RetryTest {\n  provider openai\n  retry_policy TestRetry\n  options {\n    model gpt-4\n    api_key env.OPENAI_API_KEY\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML with OpenAPI Clients\nDESCRIPTION: Commands to initialize BAML project with different OpenAPI client types\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/rest.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx @boundaryml/baml init \\\n  --client-type rest/openapi --openapi-client-type csharp\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript client from BAML files with pnpm\nDESCRIPTION: Command to generate the baml_client TypeScript package from .baml files using pnpm. This creates TypeScript code for calling BAML functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Setting Log JSON Mode in TypeScript\nDESCRIPTION: Function to switch log output between JSON and human-readable format in TypeScript. Corresponds to the BAML_LOG_JSON environment variable.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nsetLogJsonMode(enable: boolean): void;\n```\n\n----------------------------------------\n\nTITLE: Cross-Account Access with ClientRegistry in TypeScript\nDESCRIPTION: TypeScript code that uses AWS STS to assume a role in another account and configures a BAML ClientRegistry with the temporary credentials.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_18\n\nLANGUAGE: typescript\nCODE:\n```\nimport { ClientRegistry } from '@baml/core';\nimport { STSClient, AssumeRoleCommand } from '@aws-sdk/client-sts';\n\nconst sts = new STSClient({ region: 'us-east-1' });\nconst response = await sts.send(new AssumeRoleCommand({\n    RoleArn: 'arn:aws:iam::TARGET_ACCOUNT_ID:role/ROLE_NAME',\n    RoleSessionName: 'BamlSession',\n    ExternalId: 'YOUR_EXTERNAL_ID'\n}));\n\nconst registry = new ClientRegistry();\nregistry.addLlmClient('MyClient', 'aws-bedrock', {\n    accessKeyId: response.Credentials!.AccessKeyId,\n    secretAccessKey: response.Credentials!.SecretAccessKey,\n    sessionToken: response.Credentials!.SessionToken,\n    region: 'us-east-1'\n});\n```\n\n----------------------------------------\n\nTITLE: AWS Profile Configuration for Cross-Account Access\nDESCRIPTION: AWS profile configuration for cross-account access to AWS Bedrock and the corresponding BAML configuration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_15\n\nLANGUAGE: ini\nCODE:\n```\n# ~/.aws/config\n[profile target-role]\nrole_arn = arn:aws:iam::TARGET_ACCOUNT_ID:role/ROLE_NAME\nsource_profile = default\nregion = us-east-1\n```\n\n----------------------------------------\n\nTITLE: Using BAML Dev Command with Preview\nDESCRIPTION: Alternative command for development with hot-reload functionality, requiring the preview flag.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/serve.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli dev [OPTIONS] --preview\n```\n\n----------------------------------------\n\nTITLE: Using BAML-CLI fmt Command\nDESCRIPTION: Demonstrates the usage of the 'fmt' command in BAML-CLI to format one or multiple BAML files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/fmt.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli fmt [OPTIONS] [file.baml] [file2.baml] [file3.baml] ...\n```\n\n----------------------------------------\n\nTITLE: Running BAML Code Generation with bun\nDESCRIPTION: Executes the BAML code generation command using bun JavaScript runtime.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/generate.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Setting Log JSON Mode in Python\nDESCRIPTION: Function to switch log output between JSON and human-readable format in Python. Corresponds to the BAML_LOG_JSON environment variable.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef set_log_json_mode(enable: bool):\n```\n\n----------------------------------------\n\nTITLE: Implementing Usage Tracking in Python with BAML\nDESCRIPTION: Demonstrates how to track usage of BAML function calls using collectors in Python. Shows creation of multiple collectors and accessing their usage statistics.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/collector.mdx#2025-04-18_snippet_12\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_py import Collector\n\ndef run():\n    collector_a = Collector(name=\"collector-a\")\n    res = b.ExtractResume(\"...\", baml_options={\"collector\": collector_a})\n\n    collector_b = Collector(name=\"collector-b\")\n    res = b.ExtractResume(\"...\", baml_options={\"collector\": collector_b})\n\n    # The total usage of both logs is now available\n    print(collector_a.usage)\n    print(collector_b.usage)\n```\n\n----------------------------------------\n\nTITLE: Modifying Dynamic Enums in Ruby\nDESCRIPTION: Shows how to use TypeBuilder in Ruby to modify a dynamic Category enum by adding new values at runtime, then using it in a BAML function call.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/dynamic-types.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative '../baml_client'\n\ndef run\n  tb = Baml::TypeBuilder.new\n  tb.Category.add_value('VALUE3')\n  tb.Category.add_value('VALUE4')\n  res = Baml.Client.dynamic_categorizer(input: \"some input\", baml_options: {tb: tb})\n  # Now res can be VALUE1, VALUE2, VALUE3, or VALUE4\n  puts res\nend\n```\n\n----------------------------------------\n\nTITLE: Using Quoted Strings in BAML\nDESCRIPTION: Quoted strings in BAML are surrounded by double quotes and behave like regular strings in most programming languages. They support escape characters with backslash but cannot contain template variables or expressions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/string.mdx#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n\"Hello World\"\n\n\"\\n\"\n```\n\n----------------------------------------\n\nTITLE: Implementing Fallback Testing in BAML\nDESCRIPTION: Shows how to implement fallback testing with multiple LLM providers in a sequential strategy.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/baml_src/README.md#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> Resilient {\n  provider baml-fallback\n  options {\n    strategy [\n      GPT4\n      GPT35\n      Claude\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Code Generation in settings.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the 'baml.generateCodeOnSave' setting in settings.json. It allows users to control whether BAML automatically generates code for baml_client on every save or not.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/vscode-ext/generateCodeOnSave.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baml.generateCodeOnSave\": \"never\",\n}\n```\n\n----------------------------------------\n\nTITLE: BAML Enum With Type Description\nDESCRIPTION: Example showing how to add a description to the entire enum type using the @@description attribute.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/description.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nenum MyEnum {\n  Value1\n  Value2\n\n  @@description(\"This enum represents status codes\")\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nMyEnum: This enum represents status codes\n---\nValue1\nValue2\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Server Health\nDESCRIPTION: Curl command to check if the BAML server is running properly by pinging the health check endpoint.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/serve.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:2024/_debug/ping\n```\n\n----------------------------------------\n\nTITLE: BAML Vertex AI Client for Non-Google Publishers\nDESCRIPTION: Example of configuring a Vertex AI client in BAML for models from publishers other than Google, such as Meta's Llama. Shows how to specify the base_url for custom endpoints.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_9\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> VertexLlama {\n  provider vertex-ai\n  options {  \n    base_url \"https://${LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/${LOCATION}/endpoints/\"\n    location us-central1\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic BAML Enum Without Descriptions\nDESCRIPTION: Example of a basic enum definition without using the @description attribute.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/description.mdx#2025-04-18_snippet_2\n\nLANGUAGE: baml\nCODE:\n```\nenum MyEnum {\n  Value1\n  Value2\n}\n```\n\nLANGUAGE: text\nCODE:\n```\nMyEnum\n---\nValue1\nValue2\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML in a project with bun\nDESCRIPTION: Command to initialize a starter BAML setup in your project using bun. This creates a baml_src directory with template files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nbun baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Running BAML Code Generation with deno\nDESCRIPTION: Executes the BAML code generation command using deno runtime with necessary permissions and imports configuration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/generate.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeno run --unstable-sloppy-imports -A npm:@boundaryml/baml/baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Initializing Pinecone Client in Python\nDESCRIPTION: Creates a Pinecone client instance using an API key. This is the first step in setting up Pinecone for vector storage.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/rag.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\npc = Pinecone(api_key=\"YOUR_API_KEY\")\n```\n\n----------------------------------------\n\nTITLE: Audio Implementation in Ruby (In Development)\nDESCRIPTION: This placeholder indicates that Ruby implementation for handling audio in BAML is currently under development and not yet available.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/audio.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Ruby implementation is in development.\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Truncation Length in Shell\nDESCRIPTION: Sets the maximum character length for each part of a log entry using the BOUNDARY_MAX_LOG_CHUNK_CHARS environment variable. This feature is available since version 0.54.0 and helps manage verbose log output by truncating entries to a specified length.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/terminal-logs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nBOUNDARY_MAX_LOG_CHUNK_CHARS=3000\n```\n\n----------------------------------------\n\nTITLE: Cross-Account Access with AWS STS Assume Role\nDESCRIPTION: Commands to assume an IAM role in another AWS account and export the temporary credentials for use with AWS Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_17\n\nLANGUAGE: bash\nCODE:\n```\n# Assume role and export credentials\naws sts assume-role \\\n  --role-arn arn:aws:iam::TARGET_ACCOUNT_ID:role/ROLE_NAME \\\n  --role-session-name \"BamlSession\" \\\n  --external-id \"YOUR_EXTERNAL_ID\"\n\nexport AWS_ACCESS_KEY_ID=\"from-sts-output\"\nexport AWS_SECRET_ACCESS_KEY=\"from-sts-output\"\nexport AWS_SESSION_TOKEN=\"from-sts-output\"\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML in a project with yarn\nDESCRIPTION: Command to initialize a starter BAML setup in your project using yarn. This creates a baml_src directory with template files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nyarn baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Defining default_role Parameter in BAML Configuration\nDESCRIPTION: Specifies the default role to use when a message's role is not in the allowed_roles list. By default, this is set to 'user' for most models, but some specific models like OpenAI's gpt-4o use 'system' as the default role.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/role-selection.mdx#2025-04-18_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField\n  path=\"default_role\"\n  type=\"string\"\n>\n  The role to use if the role is not in the allowed_roles. **Default: `\"user\"` usually, but some models like OpenAI's `gpt-4o` will use `\"system\"`**\n\n  Picked the first role in `allowed_roles` if not \"user\", otherwise \"user\".\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: BAML Next.js Configuration Interface\nDESCRIPTION: TypeScript interface for the BamlNextConfig object that can be passed to the withBaml function, allowing customization of webpack configuration.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/nextjs-plugin/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ninterface BamlNextConfig {\n  webpack?: NextConfig['webpack']; // Custom webpack configuration\n}\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Clients Without Version Check\nDESCRIPTION: An example of generating BAML clients without performing a version check. This option skips the verification of generator versions against the CLI version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/generate.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli generate --no-version-check\n```\n\n----------------------------------------\n\nTITLE: Example LLM Classification Prompt Format\nDESCRIPTION: Shows the structure of a prompt used for classifying companies into financial categories. The prompt includes instructions, text to classify, and category descriptions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_9\n\nLANGUAGE: text\nCODE:\n```\nClassify the company described in this text into the best\nof the following categories:\n\nText:\n---\n{some_text}\n---\n\nCategories:\n- Technology: Companies involved in the development and production of technology products or services\n- Healthcare: Includes companies in pharmaceuticals, biotechnology, medical devices.\n- Real estate: Includes real estate investment trusts (REITs) and companies involved in real estate development.\n\nThe best category is:\n```\n\n----------------------------------------\n\nTITLE: Running BAML Code Generation with yarn\nDESCRIPTION: Executes the BAML code generation command using yarn package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/generate.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Using single-line and trailing comments in BAML\nDESCRIPTION: Demonstrates how to create single-line comments with '//' at the beginning of a line and trailing comments that follow code on the same line.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/comments.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\n// hello there!\nfoo // this is a trailing comment\n```\n\n----------------------------------------\n\nTITLE: Running Next.js Development Server with Package Managers\nDESCRIPTION: Commands to start the Next.js development server using different package managers including npm, yarn, pnpm, and bun. After running any of these commands, the application will be available at http://localhost:3000.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/fiddle-frontend/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Calling a BAML Function via HTTP\nDESCRIPTION: Example of how to invoke a BAML function through the HTTP API using curl with JSON payload.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/serve.mdx#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:2024/call/MyFunctionName -d '{\"arg1\": \"value1\", \"arg2\": \"value2\"}'\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Boundary Functions\nDESCRIPTION: Configures the environment variables needed to connect to Boundary Functions using an API key. The BOUNDARY_API_KEY is created in the Boundary Dashboard, and BOUNDARY_ENDPOINT points to the production Functions endpoint.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/functions/using-openapi.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nBOUNDARY_API_KEY=...\nBOUNDARY_ENDPOINT=https://api2.boundaryml.com/v3/functions/prod/\n```\n\n----------------------------------------\n\nTITLE: Starting BAML Server with Default Settings\nDESCRIPTION: Example of starting the BAML server using default configuration with the required preview flag.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/serve.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli serve --preview\n```\n\n----------------------------------------\n\nTITLE: Creating Python Client API for BAML Function\nDESCRIPTION: Command to generate a Python client API for the BAML function, which allows the function to be called from Python code.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-lib/baml-core/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nbaml generate -l python\n```\n\n----------------------------------------\n\nTITLE: Configuring AWS Bedrock with Explicit Profile in BAML\nDESCRIPTION: BAML configuration that explicitly specifies an AWS profile to use for authentication, which takes precedence over environment variables.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_4\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider aws-bedrock\n  options {\n    profile \"staging-profile\"\n    model \"anthropic.claude-3-sonnet-20240229-v1:0\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for BAML Tests\nDESCRIPTION: This snippet shows how to set up environment variables for BAML tests using a .env file. It includes the required OpenAI API key and placeholders for other provider keys.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_key_here\n# Add other provider keys as needed:\n# ANTHROPIC_API_KEY=your_key_here\n# AWS_ACCESS_KEY_ID=your_key_here\n# etc.\n```\n\n----------------------------------------\n\nTITLE: Running Local BAML Development Server\nDESCRIPTION: Command to start a local development server for BAML functions using the CLI. This requires setting necessary API keys as environment variables.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/functions/get-started.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nANTHROPIC_API_KEY=... OPENAI_API_KEY=... baml-cli dev\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Client in PHP\nDESCRIPTION: Configures a BAML client in PHP using environment variables. Sets up the client configuration with custom endpoint and authentication token.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/openapi-howto-rely-on-envvars.mdx#2025-04-18_snippet_2\n\nLANGUAGE: php\nCODE:\n```\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n$config = BamlClient\\Configuration::getDefaultConfiguration();\n\n$boundaryEndpoint = getenv('BOUNDARY_ENDPOINT');\n$boundaryApiKey = getenv('BOUNDARY_API_KEY');\n\nif ($boundaryEndpoint) {\n    $config->setHost($boundaryEndpoint);\n}\n\nif ($boundaryApiKey) {\n    $config->setAccessToken($boundaryApiKey);\n}\n\n$apiInstance = new OpenAPI\\Client\\Api\\DefaultApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n// Use `$apiInstance` to make API calls\n```\n\n----------------------------------------\n\nTITLE: Initializing Python BAML Project with Pydantic\nDESCRIPTION: Example of initializing a BAML project specifically for Python using Pydantic.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/init.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbaml init --client-type python/pydantic\n```\n\n----------------------------------------\n\nTITLE: CI Workflow for Building Docker Image\nDESCRIPTION: GitHub Actions workflow to build the BAML client and Docker image. It generates the BAML client before building the Docker image.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/deploying/openapi.mdx#2025-04-18_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  build:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v2\n      - name: Build the BAML client\n        run: |\n          set -eux\n          npx @boundaryml/baml generate\n          docker build -t my-app .\n```\n\n----------------------------------------\n\nTITLE: Implementing Company Classification Function with OpenAI\nDESCRIPTION: Defines an AI function that sends a prompt to GPT-4, processes the response, and returns the appropriate enum value. Includes error handling and uses the custom from_string method.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef classify_company(text: str) -> FinancialCategory:\n    prompt = create_prompt(text)\n    chat_completion = client.chat.completions.create(\n        model=\"gpt-4\", messages=[{\"role\": \"system\", \"content\": prompt}]\n    )\n    try:\n        output = chat_completion.choices[0].message.content\n        if output:\n            # Use our helper function!\n            return FinancialCategory.from_string(output)\n        return None\n    except Exception as e:\n        raise e\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with dotenv in Ruby\nDESCRIPTION: This example shows how to load environment variables in a Ruby application using the dotenv gem. It loads the dotenv module before importing the BAML client to ensure environment variables are properly configured.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'dotenv/load'\n\n# Wait to import the BAML client until after loading environment variables\n# reset_baml_env_vars is not yet implemented in the Ruby client\nrequire 'baml_client'\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in Python\nDESCRIPTION: Function to set the logging level in BAML using Python. Corresponds to the BAML_LOG environment variable.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef set_log_level(level: \"INFO\" | \"DEBUG\" | \"TRACE\" | \"WARN\" | \"ERROR\" | \"OFF\"):\n    ...\n```\n\n----------------------------------------\n\nTITLE: Next.js Configuration with BAML Plugin\nDESCRIPTION: Configuration for integrating BAML plugin with Next.js in various module formats.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/01-quick-start.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport { withBaml } from '@boundaryml/baml-nextjs-plugin';\nimport type { NextConfig } from 'next';\n\nconst nextConfig: NextConfig = {\n  // ... existing config\n};\n\nexport default withBaml()(nextConfig);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { withBaml } = require('@boundaryml/baml-nextjs-plugin');\n\n/** @type {import('next').NextConfig} */\nconst nextConfig = {\n  // ... existing config\n}\n\nmodule.exports = withBaml()(nextConfig)\n```\n\n----------------------------------------\n\nTITLE: AWS IAM Policy for Cross-Account Access\nDESCRIPTION: IAM policy JSON for the target account role that allows cross-account access to AWS Bedrock from a source account.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Principal\": {\n        \"AWS\": \"arn:aws:iam::SOURCE_ACCOUNT_ID:root\"\n      },\n      \"Action\": \"sts:AssumeRole\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"sts:ExternalId\": \"YOUR_EXTERNAL_ID\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML CLI with pnpm\nDESCRIPTION: This command uses pnpm to execute the BAML CLI initialization. It's appropriate for projects that use pnpm as the package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/install/nodejs.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML Project with CLI\nDESCRIPTION: Command to initialize a new BAML project using the CLI tool. This creates the basic project structure with necessary files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-lib/baml-core/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbaml init\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Functions with Image Inputs - File Method\nDESCRIPTION: Demonstrates how to test a function that takes an image input using a file path reference. The test specifies a relative path to an image file within the project.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\ntest Test1 {\n  functions [MyFunction]\n  args {\n    myImage {\n      file \"../path/to/image.png\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Making a request to Anthropic API with prompt caching metadata\nDESCRIPTION: A curl command demonstrating how to make a request to Anthropic's API with prompt caching metadata. The request includes the 'cache_control' parameter set to 'ephemeral' for the first message containing the entire text of Pride and Prejudice.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/prompt-caching.mdx#2025-04-18_snippet_0\n\nLANGUAGE: curl\nCODE:\n```\ncurl https://api.anthropic.com/v1/messages \\\n  -H \"content-type: application/json\" \\\n  -H \"anthropic-beta: prompt-caching-2024-07-31\" \\\n  -d '{\n    \"model\": \"claude-3-5-sonnet-20241022\",\n    \"max_tokens\": 1024,\n    \"messages\": [\n       {\n        \"type\": \"text\", \n        \"text\": \"<the entire contents of Pride and Prejudice>\",\n        \"cache_control\": {\"type\": \"ephemeral\"}\n      },\n      {\n        \"role\": \"user\",\n        \"content\": \"Analyze the major themes in Pride and Prejudice.\"\n      }\n    ]\n  }'\n```\n\n----------------------------------------\n\nTITLE: Logging into Boundary CLI\nDESCRIPTION: Command to log into Boundary using the BAML CLI tool. This is the first step after creating an account at the Boundary dashboard.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/functions/get-started.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli login\n```\n\n----------------------------------------\n\nTITLE: Constructing Base URL for Vertex AI API in BAML\nDESCRIPTION: Shows the default format used to construct the base URL for Vertex AI API requests. This is inferred from the project_id and location parameters.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/vertex.mdx#2025-04-18_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://{LOCATION}-aiplatform.googleapis.com/v1/projects/${PROJECT_ID}/locations/{LOCATION}/publishers/google/models/\n```\n\n----------------------------------------\n\nTITLE: Defining allowed_roles Parameter in BAML Configuration\nDESCRIPTION: Specifies which chat roles should be forwarded to the API. Most models use ['system', 'user', 'assistant'] as the default set of allowed roles, while some specific models like OpenAI's o1-mini only use ['user', 'assistant']. Roles not in this list are converted to the default_role.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/role-selection.mdx#2025-04-18_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ParamField\n  path=\"allowed_roles\"\n  type=\"string[]\"\n>\n  Which roles should we forward to the API? **Default: `[\"system\", \"user\", \"assistant\"]` usually, but some models like OpenAI's `o1-mini` will use `[\"user\", \"assistant\"]`**\n\n  When building prompts, any role not in this list will be set to the `default_role`.\n</ParamField>\n```\n\n----------------------------------------\n\nTITLE: Authenticating BAML API Requests\nDESCRIPTION: Curl commands demonstrating how to authenticate requests to the secured BAML server using HTTP basic auth or an API key header.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/deploying/openapi.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nexport BAML_PASSWORD=sk-baml-your-secret-password\ncurl \"http://baml:${BAML_PASSWORD}@localhost:2024/_debug/status\"\n```\n\nLANGUAGE: bash\nCODE:\n```\nexport BAML_PASSWORD=sk-baml-your-secret-password\ncurl \"http://localhost:2024/_debug/status\" -H \"X-BAML-API-KEY: ${BAML_PASSWORD}\"\n```\n\n----------------------------------------\n\nTITLE: Classifying Tasks with Marvin in Python\nDESCRIPTION: This example shows how to use Marvin for more complex classification tasks with custom instructions and project specifications.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/marvin.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n# Classifying a task based on project specifications\nproject_specs = {\n    \"Frontend\": \"Tasks involving UI design, CSS, and JavaScript.\",\n    \"Backend\": \"Tasks related to server, database, and application logic.\",\n    \"DevOps\": \"Tasks involving deployment, CI/CD, and server maintenance.\"\n}\n\ntask_description = \"Set up the server for the new application.\"\n\ntask_category = marvin.classify(\n    task_description,\n    labels=list(project_specs.keys()),\n    instructions=\"Match the task to the project category based on the provided specifications.\"\n)\nassert task_category == \"Backend\"\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Generator Version in generators.baml\nDESCRIPTION: This snippet demonstrates how to configure the TypescriptGenerator in the generators.baml file, specifically setting the version to match the @boundaryml/baml package version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/upgrade-baml-versions.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\ngenerator TypescriptGenerator {\n    output_type \"typescript\"\n    ....\n    // Version of runtime to generate code for (should match the package @boundaryml/baml version)\n    version \"0.62.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: VSCode Extension Development Commands\nDESCRIPTION: Commands for developing VSCode extension and language server components separately or together\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Terminal 1 - VSCode Extension\npnpm dev:vscode\n\n# Terminal 2 - Language Server\npnpm dev:language-server\n```\n\n----------------------------------------\n\nTITLE: Configuring package.json for BAML integration\nDESCRIPTION: JSON configuration for package.json to add BAML-related build scripts. This adds a baml-generate command and ensures it runs before the TypeScript build process.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    // Add a new command\n    \"baml-generate\": \"baml-cli generate\",\n    // Always call baml-generate on every build.\n    \"build\": \"npm run baml-generate && tsc --build\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript client from BAML files with bun\nDESCRIPTION: Command to generate the baml_client TypeScript package from .baml files using bun. This creates TypeScript code for calling BAML functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nbun baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Functions with Audio Inputs - Base64 Method\nDESCRIPTION: Shows how to test a function that takes an audio input using base64-encoded data. The test includes the media type specification to identify the audio format.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/testing-functions.mdx#2025-04-18_snippet_9\n\nLANGUAGE: baml\nCODE:\n```\ntest Test1 {\n  args {\n    myAudio {\n      base64 \"base64string\"\n      media_type \"audio/mp3\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing BAML Configuration Functions in TypeScript\nDESCRIPTION: Shows how to import various configuration functions from the @/baml_client/config module in TypeScript.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\nimport { setLogLevel, setLogJsonMode, \n           setLogMaxMessageLength, getLogLevel,\n           resetBamlEnvVars } from '@/baml_client/config';\n```\n\n----------------------------------------\n\nTITLE: Handling Escape Characters in BAML Block Strings\nDESCRIPTION: Escaped characters in BAML block strings are injected as-is into the output. The backslash character itself is preserved in the output string.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/string.mdx#2025-04-18_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\n#\"\\n\"#\n```\n\n----------------------------------------\n\nTITLE: Audio Testing with URL Reference in BAML\nDESCRIPTION: Testing a function with an audio input specified by URL reference.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_10\n\nLANGUAGE: baml\nCODE:\n```\ntest AudioUrlTest {\n    functions [TranscribeAudio]\n    args {\n        audio {\n            url \"https://example.com/audio.mp3\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Generating Client Code and Running Python Tests for BAML\nDESCRIPTION: This code snippet demonstrates how to generate client code and run Python integration tests for BAML. It uses the BAML CLI to generate code and pytest to run the tests.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run baml-cli generate --from ../baml_src\ndotenv -e ../.env -- uv run pytest  # or use infisical for internal BAML devs\n```\n\n----------------------------------------\n\nTITLE: Sample Agent Output\nDESCRIPTION: Example output from running the agent implementation, showing how the agent correctly identifies and processes both weather queries and calculation requests from the user input.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_16\n\nLANGUAGE: plaintext\nCODE:\n```\nAgent started! Type 'exit' to quit.\nYou: What's the weather in Seattle\nAgent (Weather): The weather in Seattle at 2023-10-02T12:00:00Z is sunny.\nYou: What's 5+2\nAgent (Calculator): The result is 7.0\n```\n\n----------------------------------------\n\nTITLE: AWS Profile Configuration for Authentication\nDESCRIPTION: Sample AWS configuration file demonstrating SSO login setup with profile information for AWS Bedrock authentication.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_1\n\nLANGUAGE: ini\nCODE:\n```\n[default]\nsso_start_url = https://your-sso-start-url.awsapps.com/start\nsso_region = us-west-2\nsso_account_id = 123456789012\nsso_role_name = YourSSORole\nregion = us-west-2\noutput = json\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Dependencies on macOS\nDESCRIPTION: Command to install npm and OpenAPI generator using Homebrew package manager\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/rest.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbrew install npm openapi-generator\n```\n\n----------------------------------------\n\nTITLE: Adding String Parsing Method to Financial Category Enum\nDESCRIPTION: Implements a class method to convert string output from an LLM into the appropriate enum value by matching against category names. Raises ValueError if no matching category is found.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n    @classmethod\n    def from_string(cls, category: str) -> \"FinancialCategory\":\n        for c in cls:\n            if c.category == category:\n                return c\n        raise ValueError(f\"Invalid category: {category}\")\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode User Settings for Python Type Checking\nDESCRIPTION: JSON configuration to enable basic type checking mode for Python in VSCode, improving autocomplete functionality.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.analysis.typeCheckingMode\": \"basic\"\n}\n```\n\n----------------------------------------\n\nTITLE: Go Implementation Example\nDESCRIPTION: Example Go code demonstrating how to use the generated BAML client to make API calls\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/rest.mdx#2025-04-18_snippet_5\n\nLANGUAGE: go\nCODE:\n```\npackage main\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"log\"\n  baml \"my-golang-app/baml_client\"\n)\n\nfunc main() {\n\tcfg := baml.NewConfiguration()\n\tb := baml.NewAPIClient(cfg).DefaultAPI\n\textractResumeRequest := baml.ExtractResumeRequest{\n\t\tResume: \"Ada Lovelace (@gmail.com) was an English mathematician and writer\",\n\t}\n\tresp, r, err := b.ExtractResume(context.Background()).ExtractResumeRequest(extractResumeRequest).Execute()\n\tif err != nil {\n\t\tfmt.Printf(\"Error when calling b.ExtractResume: %v\\n\", err)\n\t\tfmt.Printf(\"Full HTTP response: %v\\n\", r)\n\t\treturn\n\t}\n\tlog.Printf(\"Response from server: %v\\n\", resp)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript client from BAML files with npm\nDESCRIPTION: Command to generate the baml_client TypeScript package from .baml files using npm. This creates TypeScript code for calling BAML functions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nnpx baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Types with TypeScript TypeBuilder\nDESCRIPTION: TypeScript example demonstrating TypeBuilder usage for adding properties to dynamic classes at runtime. Shows email and address field additions with descriptions.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/attributes/dynamic.mdx#2025-04-18_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nimport TypeBuilder from '../baml_client/type_builder'\nimport { b } from '../baml_client'\n\nasync function run() {\n  const tb = new TypeBuilder()\n  tb.MyClass.addProperty('email', tb.string())\n  tb.MyClass.addProperty('address', tb.string()).description(\"The user's address\")\n  const res = await b.DynamicUserCreator(\"some user info\", { tb: tb })\n  // Now res can have email and address fields\n  console.log(res)\n}\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Clients from Specific Directory\nDESCRIPTION: An example of generating BAML clients from a specific directory. This command allows you to specify a custom path for the 'baml_src' directory.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/generate.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli generate --from /path/to/my/baml_src\n```\n\n----------------------------------------\n\nTITLE: Illustrating Check Types in TypeScript\nDESCRIPTION: Shows the TypeScript type signature for a BAML field with @check validation. This represents how checks are typed in the generated TypeScript client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\nChecked<int,\"less_than_zero\">[]\n```\n\n----------------------------------------\n\nTITLE: Audio Testing with Base64 Data in BAML\nDESCRIPTION: Testing a function with an audio input provided as base64-encoded data with specified media type.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_11\n\nLANGUAGE: baml\nCODE:\n```\ntest AudioBase64Test {\n    functions [TranscribeAudio]\n    args {\n        audio {\n            base64 \"...\"\n            media_type \"audio/mp3\"\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sample Integration Test\nDESCRIPTION: Example TypeScript test file demonstrating basic test structure and assertions for Anthropic completion testing\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/typescript/README.md#2025-04-18_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nimport { TestAnthropicCompletion } from '../baml_client/functions';\n\ndescribe('Anthropic Tests', () => {\n  it('should complete basic prompt', async () => {\n    const result = await TestAnthropicCompletion({\n      input: 'What is the capital of France?'\n    });\n    expect(result).toBe('Paris');\n  });\n\n  it('should handle errors', async () => {\n    await expect(TestAnthropicCompletion({\n      input: 'Test input'\n    })).rejects.toThrow();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Environment Variables for AWS Authentication\nDESCRIPTION: Commands to set custom environment variables for AWS authentication with Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\n# Your custom environment variables\nexport MY_CUSTOM_AWS_KEY_ID=\"your_key\"\nexport MY_CUSTOM_AWS_SECRET=\"your_secret\"\nexport MY_CUSTOM_AWS_REGION=\"us-east-1\"\nexport MY_CUSTOM_AWS_SESSION=\"optional_session_token\"\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables from Shell for BAML\nDESCRIPTION: This example shows how to set environment variables in the shell before running a BAML-enabled Python program. This is one of the default methods for providing environment variables to BAML applications.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nexport MY_SUPER_SECRET_API_KEY=\"...\"\npython my_program_using_baml.py\n```\n\n----------------------------------------\n\nTITLE: Installing OpenAPI Dependencies on Linux (apt)\nDESCRIPTION: Commands to install npm and Java dependencies using apt package manager\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/rest.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\napt install npm default-jdk -y\n```\n\n----------------------------------------\n\nTITLE: Implementing BamlClientFinishReasonError Class in TypeScript\nDESCRIPTION: Class definition for BamlClientFinishReasonError that extends the base Error class. Includes type identifier, error message, original prompt, and raw output properties.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/errors/baml-client-finish-reason-error.mdx#2025-04-18_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nclass BamlClientFinishReasonError extends Error {\n  type: 'BamlClientFinishReasonError'\n  message: string\n  prompt: string\n  raw_output: string\n}\n```\n\n----------------------------------------\n\nTITLE: Generating and Deploying Fern Documentation\nDESCRIPTION: Commands to install Fern CLI globally and generate documentation. This process automatically updates the hosted documentation when changes are pushed to the main branch.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/README.md#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -g fern-api # only required once\nfern generate --docs\n```\n\n----------------------------------------\n\nTITLE: Configuring Language Generators in BAML\nDESCRIPTION: Demonstrates how to configure generators for different programming languages with specific output types and directories.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/baml_src/README.md#2025-04-18_snippet_3\n\nLANGUAGE: baml\nCODE:\n```\ngenerator lang_typescript {\n  output_type typescript\n  output_dir \"../typescript\"\n  version \"0.72.0\"\n}\n\ngenerator lang_python {\n  output_type python/pydantic\n  output_dir \"../python\"\n  version \"0.72.0\"\n}\n\ngenerator lang_ruby {\n  output_type ruby/sorbet\n  output_dir \"../ruby\"\n  version \"0.72.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML in a project with npm\nDESCRIPTION: Command to initialize a starter BAML setup in your project using npm. This creates a baml_src directory with template files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Calling a BAML Function Locally\nDESCRIPTION: Example of how to call a BAML function running on the local development server using curl. The command structure is similar to the cloud version but uses localhost.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/functions/get-started.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl http://localhost:2024/functions/prod/call/ExtractResume \\\n  -H \"Authorization: Bearer $BOUNDARY_API_KEY\" \\\n  -H \"Content-Type: application/json\" \\\n  -d @- << EOF\n{\n  \"resume\": \"\n    Grace Hopper\n    grace.hopper@example.com\n\n    Experience:\n    - Rear Admiral, US Navy\n    - Senior Programmer, Eckert-Mauchly Computer Corporation\n    - Associate Professor, Vassar College\n\n    Skills:\n    - COBOL\n    - Compiler development\n  \"\n}\nEOF\n```\n\n----------------------------------------\n\nTITLE: Setting up autoreload in Jupyter Notebook\nDESCRIPTION: Python code to set up the autoreload extension in a Jupyter notebook, ensuring code changes are reflected without restarting the kernel.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n%load_ext autoreload\n%autoreload 2\n```\n\n----------------------------------------\n\nTITLE: Manually Setting Environment Variables in Python\nDESCRIPTION: This code shows how to manually set environment variables for BAML in Python using the reset_baml_env_vars function. This approach allows for programmatic setting of environment variables and requires BAML version 0.57+.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client import b\nfrom baml_client.config import reset_baml_env_vars\n\n# This will load the environment variables from the .env file\nreset_baml_env_vars({ \"OPENAI_API_KEY\": \"sk-super-secret-key\" })\n```\n\n----------------------------------------\n\nTITLE: Installing BAML Dependencies with Bundle\nDESCRIPTION: Adds BAML and Sorbet Runtime dependencies to the Ruby project using Bundler.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/ruby.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbundle add baml sorbet-runtime\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for AWS Authentication\nDESCRIPTION: List of standard AWS environment variables that can be used for authentication with AWS Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nAWS_ACCESS_KEY_ID\nAWS_SECRET_ACCESS_KEY\nAWS_SESSION_TOKEN    # Optional\nAWS_REGION\nAWS_PROFILE\n```\n\n----------------------------------------\n\nTITLE: Visualizing BAML Testing Architecture with Mermaid\nDESCRIPTION: A mermaid diagram showing the complete testing architecture flow from BAML source files through code generation to test execution and results reporting.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/README.md#2025-04-18_snippet_0\n\nLANGUAGE: mermaid\nCODE:\n```\ngraph TD\n    subgraph \"Source Files\"\n        A[BAML Source Files] --> |Generate| B[Test Definitions]\n        B1[clients.baml] --> B\n        B2[generators.baml] --> B\n        B3[test-files/*] --> B\n    end\n\n    subgraph \"Code Generation\"\n        B --> C[BAML CLI]\n        C --> D1[TypeScript Client]\n        C --> D2[Python Client]\n        C --> D3[Ruby Client]\n    end\n\n    subgraph \"Test Execution\"\n        D1 --> E1[TypeScript Tests]\n        D2 --> E2[Python Tests]\n        D3 --> E3[Ruby Tests]\n\n        E1 --> F[Test Runner]\n        E2 --> F\n        E3 --> F\n\n        F --> G{Results}\n\n        G --> |Success| H1[Report Success]\n        G --> |Failure| H2[Debug Output]\n    end\n\n    subgraph \"Environment\"\n        I[Infisical Secrets] --> E1\n        I --> E2\n        I --> E3\n\n        J[API Keys] --> I\n        K[Test Config] --> F\n    end\n\n    style C fill:#f9f,stroke:#333,stroke-width:2px\n    style F fill:#bbf,stroke:#333,stroke-width:2px\n    style I fill:#bfb,stroke:#333,stroke-width:2px\n```\n\n----------------------------------------\n\nTITLE: Handling LLM Output Formatting\nDESCRIPTION: Implementation of regex-based JSON extraction to handle cases where LLM outputs additional text around the JSON response.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/09-comparisons/pydantic.mdx#2025-04-18_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\ndef extract_resume(input_text: str) -> Union[Resume, None]:\n    prompt = create_prompt(input_text)\n    print(prompt)\n    chat_completion = client.chat.completions.create(\n        model=\"gpt-4\", messages=[{\"role\": \"system\", \"content\": prompt}]\n    )\n    try:\n        output = chat_completion.choices[0].message.content\n        print(output)\n        if output:\n+            # Extract JSON block using regex\n+            json_match = re.search(r\"\\{.*?\\}\", output, re.DOTALL)\n+            if json_match:\n+                json_output = json_match.group(0)\n                return Resume.model_validate_json(output)\n        return None\n    except Exception as e:\n        raise e\n```\n\n----------------------------------------\n\nTITLE: Illustrating Check Types in Python\nDESCRIPTION: Shows the Python type signature for a BAML field with @check validation. This represents how checks are typed in the generated Python client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/05-baml-advanced/checks-and-asserts.mdx#2025-04-18_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nList[Checked[int, Dict[Literal[\"less_than_zero\"]]]]\n```\n\n----------------------------------------\n\nTITLE: Sample Python Test File\nDESCRIPTION: Example of a Python test file demonstrating how to write tests for the BAML client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nimport pytest\nfrom baml_client.functions import TestAnthropicCompletion\n\nclass TestAnthropic:\n    @pytest.mark.asyncio\n    async def test_basic_completion(self):\n        result = await TestAnthropicCompletion(\n            input=\"What is the capital of France?\"\n        )\n        assert result == \"Paris\"\n\n    @pytest.mark.asyncio\n    async def test_error_handling(self):\n        with pytest.raises(Exception):\n            await TestAnthropicCompletion(\n                input=\"Test input\"\n            )\n```\n\n----------------------------------------\n\nTITLE: Configuring VPC Endpoint Permissions for AWS Bedrock\nDESCRIPTION: JSON IAM policy that restricts AWS Bedrock model invocation to requests originating from a specific VPC, ensuring secure access within your virtual private cloud environment.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_20\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Version\": \"2012-10-17\",\n  \"Statement\": [\n    {\n      \"Effect\": \"Allow\",\n      \"Action\": [\n        \"bedrock:InvokeModel\",\n        \"bedrock:InvokeModelWithResponseStream\"\n      ],\n      \"Resource\": \"arn:aws:bedrock:*:*:model/*\",\n      \"Condition\": {\n        \"StringEquals\": {\n          \"aws:SourceVpc\": \"vpc-xxxxxxxx\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Client Code\nDESCRIPTION: Command to generate the BAML client code using the BAML CLI.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nuv run baml-cli generate --from ../baml_src\n```\n\n----------------------------------------\n\nTITLE: Calling a BAML Function with API Key Authentication\nDESCRIPTION: Example showing how to call a BAML function with the required API key for authentication.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml-cli/serve.mdx#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST http://localhost:2024/call/MyFunctionName -H \"x-baml-api-key: ${BAML_PASSWORD}\" -d '{\"arg1\": \"value1\", \"arg2\": \"value2\"}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js for BAML Integration\nDESCRIPTION: Adds BAML support to Next.js configuration by using the withBaml wrapper function around the standard Next.js configuration object.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/nextjs-plugin/README.md#2025-04-18_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n// next.config.ts\nimport { withBaml } from '@boundaryml/nextjs';\nimport type { NextConfig } from 'next';\n\nconst nextConfig: NextConfig = {\n  // ... your existing config\n};\n\nexport default withBaml()(nextConfig);\n```\n\n----------------------------------------\n\nTITLE: Resetting BAML Environment Variables in TypeScript\nDESCRIPTION: Function to reset BAML environment variables to values provided in a record, including logging-related variables if explicitly set.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_11\n\nLANGUAGE: typescript\nCODE:\n```\nresetBamlEnvVars(env: Record<string, string | undefined>): void;\n```\n\n----------------------------------------\n\nTITLE: Running Specific BAML Ruby Test Case\nDESCRIPTION: Command to run a specific test case by name with verbose output using Rake, Infisical, and mise.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- mise exec -- rake test test_collector.rb TEST_OPTS=\"--name=/test_collector_no_stream_success/ -v\"\n```\n\n----------------------------------------\n\nTITLE: Running Specific Tests\nDESCRIPTION: Commands to run specific test files or individual tests using pytest.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- uv run pytest tests/test_functions.py\n```\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- uv run pytest tests/test_functions.py -k \"test_name\"\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Baml in Ruby\nDESCRIPTION: Commands to add the Baml Ruby gem to a project using Bundler and initialize a new Baml project structure. This creates the necessary files and directories to start working with Baml in Ruby.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/vscode-ext/packages/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbundle add baml\nbundle exec baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Runtime for BAML\nDESCRIPTION: This code snippet demonstrates the commands to build the TypeScript runtime for BAML. It includes changing to the correct directory and using pnpm to build in debug mode.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd engine/language_client_typescript\npnpm build:debug\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML in an existing project\nDESCRIPTION: Commands to initialize BAML in an existing project, creating starter BAML code in a 'baml_src' directory.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/python.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nbaml-cli init\n```\n\nLANGUAGE: bash\nCODE:\n```\npoetry run baml-cli init\n```\n\nLANGUAGE: bash\nCODE:\n```\nuv run baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Building Go SDK CFFI Layer\nDESCRIPTION: Commands to build the CFFI layer for the Go SDK using cargo-make. Includes both default and release mode builds.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/language_client_cffi/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd engine/language_client_cffi\n# default\ncargo make go-sdk\n# release build\nRELEASE_MODE=1 cargo make go-sdk\n```\n\n----------------------------------------\n\nTITLE: Multi-line String Input in BAML Tests\nDESCRIPTION: Testing with block string syntax for multi-line text inputs that preserve formatting and whitespace.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/test.mdx#2025-04-18_snippet_12\n\nLANGUAGE: baml\nCODE:\n```\ntest LongTextTest {\n    functions [AnalyzeText]\n    args {\n        content #\"\n            This is a multi-line\n            text input that preserves\n            formatting and whitespace\n        \"#\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Commit Messages in Markdown\nDESCRIPTION: Demonstrates how individual commit messages are formatted in the changelog, including the commit type, message, commit hash, and author.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CHANGELOG.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- make vscode proxy work again (#1806) - ([667851d](https://github.com/boundaryml/baml/commit/667851d2902c2eec26db3db7e98855ec3657ff8f)) - Samuel Lijin\n```\n\n----------------------------------------\n\nTITLE: Testing BAML Function with Input Data\nDESCRIPTION: Command to test the BAML function with sample input data to extract student information and verify functionality.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-lib/baml-core/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nbaml run --function ExtractStudentInfo --in \"My name is John and I have a student email john@uni.edu\"\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Python Client with Maturin\nDESCRIPTION: Command to build and install the Python client using Maturin, with a note about avoiding Conda conflicts.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv run maturin develop --uv --manifest-path ../../engine/language_client_python/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Package.json Scripts Configuration\nDESCRIPTION: NPM script configuration for BAML integration with build process.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/08-frameworks/01-react-nextjs/01-quick-start.mdx#2025-04-18_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"scripts\": {\n    \"prebuild\": \"npm run generate\",\n    \"generate\": \"baml-cli generate\",\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: VS Code Debug Configuration for Tests\nDESCRIPTION: JSON configuration for setting up test debugging in VS Code.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"name\": \"Debug Tests\",\n      \"type\": \"python\",\n      \"request\": \"launch\",\n      \"runtimeExecutable\": \"infisical\",\n      \"runtimeArgs\": [\n        \"run\",\n        \"--env=test\",\n        \"--\"\n      ],\n      \"program\": \"${workspaceFolder}/.venv/bin/pytest\",\n      \"args\": [\n        \"-v\",\n        \"-s\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"justMyCode\": false\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Current Log Level in TypeScript\nDESCRIPTION: Function to retrieve the current log level setting in TypeScript.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_10\n\nLANGUAGE: typescript\nCODE:\n```\ngetLogLevel(): \"INFO\" | \"DEBUG\" | \"TRACE\" | \"WARN\" | \"ERROR\" | \"OFF\";\n```\n\n----------------------------------------\n\nTITLE: Running Tests with .env File\nDESCRIPTION: Command to run tests using a .env file for environment variables instead of Infisical.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nuv run pytest\n```\n\n----------------------------------------\n\nTITLE: Running BAML Tests\nDESCRIPTION: Commands for executing and listing BAML tests, including options for additional help\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/baml-README.md#2025-04-18_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# To run tests\n$ baml test run\n\n# To list tests\n$ baml test\n\n# For more help\n$ baml test --help\n```\n\n----------------------------------------\n\nTITLE: Generating BAML Client Code\nDESCRIPTION: Command to generate the BAML client code from source files using the BAML CLI.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmise exec -- baml-cli generate --from ../baml_src\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Baml in Python\nDESCRIPTION: Commands to install the Baml Python library and initialize a new Baml project using the CLI. This sets up the necessary directory structure and example files to get started with Baml.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/vscode-ext/packages/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# If using your local installation, venv or conda:\npip install baml-py\nbaml-cli init\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML Project\nDESCRIPTION: Creates initial BAML configuration and starter code in the baml_src directory.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/ruby.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbundle exec baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Setting Up and Running TypeScript Integration Tests\nDESCRIPTION: This snippet shows the process of setting up and running TypeScript integration tests for BAML. It includes installing dependencies, generating necessary files, and running the tests with environment variables.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd integ-tests/typescript\npnpm install\npnpm generate\ndotenv -e ../.env -- pnpm integ-tests  # or use infisical for internal BAML devs\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexible String Parser in Rust\nDESCRIPTION: Core function that parses a string input according to specified output format and field type. Supports partial parsing, type casting, array handling, and schema constraints with flexible text positioning.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-lib/jsonish/README.md#2025-04-18_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub fn from_str(\n    of: &OutputFormatContent,\n    target: &FieldType,\n    raw_string: &str,\n    allow_partials: bool,\n) -> Result<BamlValueWithFlags>\n```\n\n----------------------------------------\n\nTITLE: Ruby Configuration Note\nDESCRIPTION: Indicates that Ruby implementation is not available and suggests using environment variables instead.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_12\n\nLANGUAGE: ruby\nCODE:\n```\n# not implemented yet\n# please use environment variables instead\n```\n\n----------------------------------------\n\nTITLE: Verifying Ruby Version with Mise\nDESCRIPTION: Commands to ensure mise is properly set up and using the correct Ruby version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nmise install\nmise exec -- ruby --version\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Generating Client Code\nDESCRIPTION: Commands for installing project dependencies and generating BAML client code\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/typescript/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\npnpm generate\n```\n\n----------------------------------------\n\nTITLE: Starting Next.js Development Server\nDESCRIPTION: Commands to start the Next.js development server using various package managers including npm, yarn, pnpm, and bun. The server will run on localhost:3000 by default.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/react/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Ollama Client with OpenAI Provider in BAML\nDESCRIPTION: Basic configuration for setting up an Ollama client using the openai-generic provider with custom base URL and model selection.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/ollama.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> MyClient {\n  provider \"openai-generic\"\n  options {\n    base_url \"http://localhost:11434/v1\"\n    model llama3\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Log Level in TypeScript\nDESCRIPTION: Function to set the logging level in BAML using TypeScript. Corresponds to the BAML_LOG environment variable.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/config.mdx#2025-04-18_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\nsetLogLevel(level: \"INFO\" | \"DEBUG\" | \"TRACE\" | \"WARN\" | \"ERROR\" | \"OFF\"): void;\n```\n\n----------------------------------------\n\nTITLE: Running Tests in CI Environment\nDESCRIPTION: Command to run tests in a CI environment without coverage reporting.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- uv run pytest --no-cov\n```\n\n----------------------------------------\n\nTITLE: Updating BAML Client Libraries\nDESCRIPTION: Command to synchronize client-side libraries for Python and TypeScript integrations\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/baml-README.md#2025-04-18_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ baml update-client\n```\n\n----------------------------------------\n\nTITLE: Running Ruby Integration Tests for BAML\nDESCRIPTION: This snippet shows how to run Ruby integration tests for BAML. It uses dotenv to load environment variables and rake to execute the tests.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndotenv -e ../.env -- mise exec -- rake test  # or use infisical for internal BAML devs\n```\n\n----------------------------------------\n\nTITLE: Running All Tests with Infisical\nDESCRIPTION: Command to run all tests using Infisical for environment variable management.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- uv run pytest\n```\n\n----------------------------------------\n\nTITLE: Installing BAML package with pnpm\nDESCRIPTION: Command to install the BAML package using pnpm package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm add @boundaryml/baml\n```\n\n----------------------------------------\n\nTITLE: Setting Up Ruby Environment for BAML Tests\nDESCRIPTION: This snippet shows how to set up the Ruby environment for BAML integration tests using mise for version management and building the Ruby client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd integ-tests/ruby\nmise install  # This will install Ruby version from .mise.toml\n(cd ../../engine/language_client_ruby && mise exec -- rake compile)\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Generating Ruby Client for BAML\nDESCRIPTION: This code snippet demonstrates how to install dependencies and generate the Ruby client for BAML tests. It uses bundle for dependency management and the BAML CLI for code generation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmise exec -- bundle install\nmise exec -- baml-cli generate --from ../baml_src\n```\n\n----------------------------------------\n\nTITLE: Loading Environment Variables with python-dotenv Function Import (Not Working)\nDESCRIPTION: This example shows a non-working approach to loading environment variables with python-dotenv. It fails because the BAML client is imported after load_dotenv is imported, causing environment variables to not be properly configured.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dotenv import load_dotenv\nfrom baml_client import b\n# This will not work as expected since baml_client is imported AFTER load_dotenv\nload_dotenv()\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Detailed BAML Client Logs\nDESCRIPTION: Command to run tests with trace-level logging enabled for the BAML client for detailed debugging information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nBAML_LOG=trace infisical run --env=test -- mise exec -- rake test\n```\n\n----------------------------------------\n\nTITLE: VS Code Debug Configuration\nDESCRIPTION: Launch configuration for debugging tests in VS Code with Jest and Infisical integration\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/typescript/README.md#2025-04-18_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"version\": \"0.2.0\",\n  \"configurations\": [\n    {\n      \"type\": \"node\",\n      \"request\": \"launch\",\n      \"name\": \"Debug Tests\",\n      \"runtimeExecutable\": \"infisical\",\n      \"runtimeArgs\": [\n        \"run\",\n        \"--env=test\",\n        \"--\"\n      ],\n      \"program\": \"${workspaceFolder}/node_modules/.bin/jest\",\n      \"args\": [\n        \"--runInBand\",\n        \"--testTimeout\",\n        \"30000\"\n      ],\n      \"console\": \"integratedTerminal\",\n      \"windows\": {\n        \"program\": \"${workspaceFolder}/node_modules/jest/bin/jest\"\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom BAML CLI Path in VSCode Settings JSON\nDESCRIPTION: This JSON snippet demonstrates how to set the 'baml.cliPath' property in the VSCode settings.json file. It specifies a custom path for the BAML CLI, which will be used instead of the packaged generator.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/vscode-ext/clipath.mdx#2025-04-18_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"baml.cliPath\": \"/path/to/baml-cli\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Unify AI Client with OpenAI-generic Provider in BAML\nDESCRIPTION: This snippet demonstrates how to set up a Unify AI client using the OpenAI-generic provider in BAML. It configures the base URL, API key, and specifies a model from Together AI.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/unify.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> UnifyClient {\n    provider \"openai-generic\"\n    options {\n        base_url \"https://api.unify.ai/v0\"\n        api_key env.MY_UNIFY_API_KEY\n        model \"llama-3.1-405b-chat@together-ai\"\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Client in Ruby\nDESCRIPTION: Initializes a BAML client in Ruby with environment-based configuration. Sets up the API client with custom host and authorization headers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/openapi-howto-rely-on-envvars.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\nrequire 'baml_client'\n\napi_client = BamlClient::ApiClient.new\n\nboundary_endpoint = ENV['BOUNDARY_ENDPOINT']\nif boundary_endpoint\n  api_client.host = boundary_endpoint\nend\n\nboundary_api_key = ENV['BOUNDARY_API_KEY']\nif boundary_api_key\n  api_client.default_headers['Authorization'] = \"Bearer #{boundary_api_key}\"\nend\nb = BamlClient::DefaultApi.new(api_client)\n# Use `b` to make API calls\n```\n\n----------------------------------------\n\nTITLE: Building TypeScript Runtime\nDESCRIPTION: Command to build the TypeScript runtime in debug mode\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/typescript/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd engine/language_client_typescript\npnpm build:debug\n```\n\n----------------------------------------\n\nTITLE: Installing and Initializing Baml in TypeScript\nDESCRIPTION: Commands to install the Baml TypeScript library via npm and initialize a new Baml project. The initialization script creates an example directory setup with necessary Baml files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/vscode-ext/packages/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# If using npm:\nnpm install @boundaryml/baml\nnpm run baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Building VSCode Extension\nDESCRIPTION: Command to build the VSCode extension using Turbo\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\nnpx turbo build --force\n```\n\n----------------------------------------\n\nTITLE: Installing BAML package with bun\nDESCRIPTION: Command to install the BAML package using bun package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun add @boundaryml/baml\n```\n\n----------------------------------------\n\nTITLE: Starting BAML Development Server\nDESCRIPTION: Command to start the BAML development server with preview mode enabled\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/rest.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx @boundaryml/baml dev --preview\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Playground UI\nDESCRIPTION: Commands for rebuilding the playground user interface components\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncd typescript/vscode-ext/packages/web-panel\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML in a project with pnpm\nDESCRIPTION: Command to initialize a starter BAML setup in your project using pnpm. This creates a baml_src directory with template files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Running Specific BAML Ruby Test File\nDESCRIPTION: Command to run a specific test file using Infisical for environment variables and mise for Ruby version management.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- mise exec -- ruby test_functions.rb\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML CLI with Yarn\nDESCRIPTION: This command initializes the BAML CLI using Yarn. It's suitable for projects that use Yarn as the package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/install/nodejs.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Configuring BAML Clients with Metadata Forwarding\nDESCRIPTION: Demonstrates setting up two BAML LLM clients - one with cache control metadata forwarding enabled and one without. Shows how to configure allowed role metadata and use it in template strings for conditional caching behavior.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/allowed-role-metadata.mdx#2025-04-18_snippet_0\n\nLANGUAGE: baml\nCODE:\n```\nclient<llm> ClaudeWithCaching {\n    provider anthropic\n    options {\n      model claude-3-haiku-20240307\n      api_key env.ANTHROPIC_API_KEY\n      max_tokens 1000\n      allowed_role_metadata [\"cache_control\"]\n      headers {\n        \"anthropic-beta\" \"prompt-caching-2024-07-31\"\n      }\n    }\n}\n\nclient<llm> FooWithout {\n    provider anthropic\n    options {\n    }\n}\n\ntemplate_string Foo() #\"\n    {{ _.role('user', cache_control={\"type\": \"ephemeral\"}) }}\n    This will be cached for ClaudeWithCaching, but not for FooWithout!\n    {{ _.role('user') }}\n    This will not be cached for Foo or FooWithout!\n\"#\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML CLI with npm\nDESCRIPTION: This command uses npx to run the BAML CLI initialization process. It's suitable for projects using npm as the package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/install/nodejs.mdx#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Diátaxis Compass Guide\nDESCRIPTION: A decision matrix table for identifying appropriate documentation types based on content type and user needs\nSOURCE: https://github.com/boundaryml/baml/blob/canary/foo.md#2025-04-18_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| If content...    | ...and serves the user's... | Then it belongs in... |\n|-----------------|---------------------------|---------------------|\n| Guides action   | Learning                 | Tutorials           |\n| Guides action   | Work                     | How-to guides       |\n| Explains theory | Work                     | Reference          |\n| Explains theory | Learning                 | Explanation        |\n```\n\n----------------------------------------\n\nTITLE: Running BAML Code Generation with pnpm\nDESCRIPTION: Executes the BAML code generation command using pnpm package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/generate.mdx#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm exec baml-cli generate\n```\n\n----------------------------------------\n\nTITLE: Installing Prerequisites with Homebrew\nDESCRIPTION: Bash commands for installing required tools and dependencies using Homebrew and other package managers.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Install Rust (required for building native clients)\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n\n# Install Node.js and pnpm (for TypeScript tests)\nbrew install node\nnpm install -g pnpm\n\n# Install Python 3.8+ and uv (for Python tests)\nbrew install python@3.8\nbrew install uv\n\n# Install mise for Ruby (for Ruby tests)\nbrew install mise\n```\n\n----------------------------------------\n\nTITLE: Installing BAML package with deno\nDESCRIPTION: Command to install the BAML package using deno runtime.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndeno install npm:@boundaryml/baml\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example environment variables configuration for local development using a .env file.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nOPENAI_API_KEY=your_test_key_here\nANTHROPIC_API_KEY=your_test_key_here\n# Add other required keys as needed\n```\n\n----------------------------------------\n\nTITLE: Initial Setup Commands for Local Development\nDESCRIPTION: Commands for setting up the local development environment including Rust installation, WASM target addition, and wasm-bindgen setup\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-schema-wasm/nodejs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Install the latest Rust version with `rustup`\n# or update the latest Rust version with `rustup`\nrustup update\nrustup target add wasm32-unknown-unknown\ncargo update -p wasm-bindgen\n# Check the version defined in `prisma-schema-wasm/cargo.toml` for `wasm-bindgen` and replace `version` below:\ncargo install -f wasm-bindgen-cli@version\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML in a project with deno\nDESCRIPTION: Command to initialize a starter BAML setup in your project using deno. This creates a baml_src directory with template files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ndeno run -A npm:@boundaryml/baml/baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Cleaning and Rebuilding Python Client\nDESCRIPTION: Commands to clean and rebuild the Python client in case of build issues.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf target/\nuv run maturin develop --uv --manifest-path ../../engine/language_client_python/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Installing BAML package with yarn\nDESCRIPTION: Command to install the BAML package using yarn package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/typescript.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn add @boundaryml/baml\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Verbose Output for Debugging\nDESCRIPTION: Command to run tests with verbose output for more detailed error information.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_15\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- mise exec -- rake test TESTOPTS=\"--verbose\"\n```\n\n----------------------------------------\n\nTITLE: Embedding BAML Examples in iframes with HTML\nDESCRIPTION: Shows how to create an iframe that embeds a BAML example. The example parameter in the URL specifies which example to load from the server.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/fiddle-frontend/public/_docs/README.md#2025-04-18_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<iframe src=\"https://your-domain.com/embed?example=example-name\" width=\"100%\" height=\"600px\"></iframe>\n```\n\n----------------------------------------\n\nTITLE: Building and Installing Python Client for BAML\nDESCRIPTION: This snippet shows the process of building and installing the Python client for BAML. It uses maturin to develop the client with uv package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Note: env -u CONDA_PREFIX is needed if using Conda\nuv run maturin develop --uv --manifest-path ../../engine/language_client_python/Cargo.toml\n```\n\n----------------------------------------\n\nTITLE: Rebuilding Playground Frontend\nDESCRIPTION: Command to rebuild the playground frontend after Rust compiler changes\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/README.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx turbo build --force --filter=fiddle-frontend\n```\n\n----------------------------------------\n\nTITLE: Initializing BAML CLI with Bun\nDESCRIPTION: This command uses Bun to run the BAML CLI initialization. It's appropriate for projects using Bun as the JavaScript runtime and package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/baml/cli/install/nodejs.mdx#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbun baml-cli init\n```\n\n----------------------------------------\n\nTITLE: Creating Test Data Class for Student Emails\nDESCRIPTION: A Python class definition for test data containing student email information with properties for name, email, and verification status.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-lib/baml-core/README.md#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass TestData:\n    name = \"John\"\n    email = \"john@uni.edu\"\n    is_verified_student_email = True\n```\n\n----------------------------------------\n\nTITLE: Setting Development Profile for Faster Ruby FFI Client Build\nDESCRIPTION: Environment variable setting to use the development profile for faster Cargo builds when compiling the Ruby FFI client.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport RB_SYS_CARGO_PROFILE=\"dev\"\n```\n\n----------------------------------------\n\nTITLE: Upgrading BAML Package Dependencies\nDESCRIPTION: Commands for upgrading BAML package dependencies in different environments: pip for Python, npm for Node.js, and gem for Ruby.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/03-development/upgrade-baml-versions.mdx#2025-04-18_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npip install --upgrade baml-py\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpm install @boundaryml/baml@latest\n```\n\nLANGUAGE: sh\nCODE:\n```\ngem install baml\n```\n\n----------------------------------------\n\nTITLE: Running Prisma Schema Version Check in Node.js\nDESCRIPTION: Example showing how to require and use the prisma-schema-wasm package to check its version in Node.js\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/baml-schema-wasm/nodejs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode -e \"const prismaSchema = require('@prisma/prisma-schema-wasm'); console.log(prismaSchema.version())\"\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Debug Logs\nDESCRIPTION: Command to run tests with print statements visible and detailed BAML client logs.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nBAML_LOG=trace infisical run --env=test -- uv run pytest -s\n```\n\n----------------------------------------\n\nTITLE: Verifying NPX and Java Installation on Windows\nDESCRIPTION: PowerShell commands to verify the installation of npx and java\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/rest.mdx#2025-04-18_snippet_2\n\nLANGUAGE: powershell\nCODE:\n```\nnpx -version\njava -version\n```\n\n----------------------------------------\n\nTITLE: Installing Ruby Dependencies for Tests\nDESCRIPTION: Command to install Ruby dependencies using bundle and mise for environment management.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmise exec -- bundle install\n```\n\n----------------------------------------\n\nTITLE: Building the Ruby FFI Client\nDESCRIPTION: Commands to build the Ruby FFI client for BAML, including changing directory, building with cargo, installing dependencies with bundle, and compiling with rake.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd ../engine/language_client_ruby\ncargo build\nmise exec -- bundle install\nmise exec -- rake compile\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Environment for BAML Tests\nDESCRIPTION: This code snippet demonstrates how to set up the Python environment for BAML integration tests. It uses the uv package manager to synchronize dependencies.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd integ-tests/python\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Installing BAML Dependencies with PNPM\nDESCRIPTION: Initial setup command to install all project dependencies using PNPM package manager\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Maven Dependencies Configuration\nDESCRIPTION: XML configuration for adding OpenAPI-generated client to Maven project\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/rest.mdx#2025-04-18_snippet_6\n\nLANGUAGE: xml\nCODE:\n```\n<dependency>\n  <groupId>org.openapitools</groupId>\n  <artifactId>openapi-java-client</artifactId>\n  <version>0.1.0</version>\n  <scope>compile</scope>\n</dependency>\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Local Environment File Instead of Infisical\nDESCRIPTION: Command to run tests using a local .env file with dotenv instead of Infisical for environment variables.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nmise exec -- rake test\n```\n\n----------------------------------------\n\nTITLE: Regenerating BAML Client\nDESCRIPTION: Commands to regenerate the BAML client in case of generation issues.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf baml_client\nuv run baml-cli generate --from ../baml_src\n```\n\n----------------------------------------\n\nTITLE: Categorizing Changes in Markdown\nDESCRIPTION: Shows how changes are categorized (e.g., Bug Fixes, Features, Documentation) using Markdown headers within each version section.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CHANGELOG.md#2025-04-18_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### Bug Fixes\n\n- make vscode proxy work again (#1806) - ([667851d](https://github.com/boundaryml/baml/commit/667851d2902c2eec26db3db7e98855ec3657ff8f)) - Samuel Lijin\n- BAML gem supports ruby 3.4 (#1804) - ([eae1cec](https://github.com/boundaryml/baml/commit/eae1cec03c5993ee6aff3dfe50a0202483b26412)) - Dimitri Roche\n```\n\n----------------------------------------\n\nTITLE: Installing BAML with Next.js Integration\nDESCRIPTION: Command to install both the BAML core package and the Next.js integration package using npm.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/nextjs-plugin/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install @boundaryml/baml @boundaryml/nextjs\n```\n\n----------------------------------------\n\nTITLE: Starting PromptFiddle Dev Server\nDESCRIPTION: Commands for navigating to and starting the PromptFiddle development server\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncd typescript/fiddle-frontend\npnpm dev\n```\n\n----------------------------------------\n\nTITLE: Running All BAML Ruby Tests with Environment Variables\nDESCRIPTION: Command to run all BAML Ruby tests using Infisical for environment variables and mise for Ruby version management.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- mise exec -- rake test\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies in TypeScript Directory\nDESCRIPTION: Initial setup commands for installing project dependencies in the TypeScript directory\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ncd typescript/\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Running OpenAPI Server Tests for BAML\nDESCRIPTION: This code snippet demonstrates how to run OpenAPI server tests for BAML. It uses Cargo to run the tests with the 'internal' feature flag.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CONTRIBUTING.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ncargo test --features internal\n```\n\n----------------------------------------\n\nTITLE: Ruby Support for Multi-modal BAML (Beta)\nDESCRIPTION: A placeholder indicating that Ruby support for multi-modal BAML functions is in development.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/multi-modal.mdx#2025-04-18_snippet_5\n\nLANGUAGE: ruby\nCODE:\n```\nwe're working on it!\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Mise Ruby Version Issues\nDESCRIPTION: Commands to fix mise trust and installation issues when it's not picking up the right Ruby version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\nmise trust\nmise install\n```\n\n----------------------------------------\n\nTITLE: Implementing BAML Version Check with JSON Output\nDESCRIPTION: This feature implements a new command 'baml version --check --output json' to check the BAML version and output the result in JSON format.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CHANGELOG.md#2025-04-18_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbaml version --check --output json\n```\n\n----------------------------------------\n\nTITLE: Running BAML Example Application\nDESCRIPTION: Command to execute the example Python application that demonstrates BAML code integration\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/baml-README.md#2025-04-18_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n$ python -m baml_example_app\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Ruby Debug Mode\nDESCRIPTION: Command to run tests with Ruby's debug mode for interactive debugging.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\ninfisical run --env=test -- mise exec -- ruby -rdebug test_functions.rb\n```\n\n----------------------------------------\n\nTITLE: Building BAML Packages\nDESCRIPTION: Command to build all TypeScript packages in the BAML project\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npnpm build\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Tools Array in Ruby\nDESCRIPTION: This Ruby code demonstrates how to use a BAML function that returns an array of multiple tool types. It iterates through the returned tools and processes each based on its type using a case statement.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/06-prompt-engineering/tools.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ruby\nCODE:\n```\nrequire_relative \"baml_client/client\"\n\n$b = Baml.Client\n\ndef main\n  tools = $b.UseTool(user_message: \"What's the weather like in San Francisco and New York?\")\n  puts tools\n  \n  tools.each do |tool|\n    case tool\n    when Baml::Types::WeatherAPI\n      puts \"Weather API called:\"\n      puts \"City: #{tool.city}\"\n      puts \"Time of Day: #{tool.timeOfDay}\"\n    when Baml::Types::MyOtherAPI\n      puts \"MyOtherAPI called:\"\n      # Handle MyOtherAPI specific attributes here\n    end\n  end\nend\n\nmain\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAPI Generator for Java Client Generation in Gradle\nDESCRIPTION: This Gradle configuration sets up OpenAPI code generation for a Java client. It specifies the input OpenAPI spec location, output directories, package names, and includes additional properties for Java 8 compatibility. The configuration also adds the generated source directory to the main source set and creates a dependency to ensure the code generation happens before Java compilation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/02-languages/rest.mdx#2025-04-18_snippet_7\n\nLANGUAGE: gradle\nCODE:\n```\n    generatorName.set(\"java\") // Change to 'kotlin', 'spring', etc. if needed\n    inputSpec.set(\"${projectDir}/baml_client/openapi.yaml\")\n    outputDir.set(\"$buildDir/generated-sources/openapi\")\n    apiPackage.set(\"com.boundaryml.baml_client.api\")\n    modelPackage.set(\"com.boundaryml.baml_client.model\")\n    invokerPackage.set(\"com.boundaryml.baml_client\")\n    additionalProperties.set(mapOf(\"java8\" to \"true\"))\n}\n\nsourceSets[\"main\"].java {\n    srcDir(\"$buildDir/generated-sources/openapi/src/main/java\")\n}\n\ntasks.named(\"compileJava\") {\n    dependsOn(\"openApiGenerate\")\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Ruby Integration Test\nDESCRIPTION: This snippet adds a Ruby test to the integration test suite for the BAML project. It ensures that Ruby functionality is working correctly.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CHANGELOG.md#2025-04-18_snippet_4\n\nLANGUAGE: ruby\nCODE:\n```\n# Ruby test code would be here, but it's not provided in the changelog\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting BAML Ruby Client Build Issues\nDESCRIPTION: Commands for cleaning and rebuilding the BAML Ruby client when encountering Rust compilation errors.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\n(cd ../../engine/language_client_ruby && mise exec -- rake clean compile)\n```\n\n----------------------------------------\n\nTITLE: Configuring ESLint parserOptions for TypeScript in React Vite Project\nDESCRIPTION: This snippet shows how to configure the top-level parserOptions in ESLint for a React TypeScript project using Vite. It sets the ECMAScript version, source type, and specifies TypeScript configuration files.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/vscode-ext/packages/web-panel/README.md#2025-04-18_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n   parserOptions: {\n    ecmaVersion: 'latest',\n    sourceType: 'module',\n    project: ['./tsconfig.json', './tsconfig.node.json'],\n    tsconfigRootDir: __dirname,\n   },\n```\n\n----------------------------------------\n\nTITLE: Running Local Fern Documentation Development Server\nDESCRIPTION: Command to start a local development server with hot-reloading for Fern documentation.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/README.md#2025-04-18_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nfern docs dev\n```\n\n----------------------------------------\n\nTITLE: Installing Python Dependencies with UV\nDESCRIPTION: Command to install Python dependencies using the UV package manager.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/python/README.md#2025-04-18_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nuv sync\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Ruby Bundler Issues\nDESCRIPTION: Command for reinstalling Ruby dependencies with a clean installation to resolve Bundler issues.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nmise exec -- bundle install --clean\n```\n\n----------------------------------------\n\nTITLE: Ruby Placeholder for BAML Error Handling\nDESCRIPTION: Placeholder for upcoming Ruby implementation of BAML error handling.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/01-guide/04-baml-basics/error-handling.mdx#2025-04-18_snippet_2\n\nLANGUAGE: ruby\nCODE:\n```\n# Example coming soon\n```\n\n----------------------------------------\n\nTITLE: Regenerating BAML Client for Troubleshooting\nDESCRIPTION: Commands to completely remove and regenerate the BAML client code to resolve generation issues.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\nrm -rf baml_client\nmise exec -- baml-cli generate --from ../baml_src\n```\n\n----------------------------------------\n\nTITLE: Placeholder for Manually Setting Environment Variables in Ruby\nDESCRIPTION: This is a placeholder that indicates the manual environment variable setting functionality is not yet implemented in the Ruby client for BAML. It requires BAML version 0.57+ when it becomes available.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/snippets/setting-env-vars.mdx#2025-04-18_snippet_8\n\nLANGUAGE: ruby\nCODE:\n```\n# not implemented yet\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Explicit Load Path\nDESCRIPTION: Command to run Ruby tests with an explicit include path to resolve load path issues.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/ruby/README.md#2025-04-18_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\nmise exec -- ruby -I. test_functions.rb\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Diátaxis Documentation Map\nDESCRIPTION: A markdown table showing the relationship between practical/theoretical and learning/work axes in documentation types\nSOURCE: https://github.com/boundaryml/baml/blob/canary/foo.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Axis      | Practical                | Theoretical              |\n|-----------|-------------------------|-------------------------|\n| Learning  | Tutorials               | Explanation             |\n| Work      | How-to Guides           | Reference              |\n```\n\n----------------------------------------\n\nTITLE: Displaying Version and Date in Markdown\nDESCRIPTION: Shows how version numbers and release dates are formatted in the changelog using Markdown syntax. It includes a link to compare changes with the previous version.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/CHANGELOG.md#2025-04-18_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## [0.84.4](https://github.com/boundaryml/baml/compare/0.84.3..0.84.4) - 2025-04-17\n```\n\n----------------------------------------\n\nTITLE: Including Templates in BAML Prompt String Using Jinja\nDESCRIPTION: This example demonstrates how to include other templates within a BAML prompt string using Jinja. It defines a template string for printing user info and then uses it within another function.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/prompt-syntax/what-is-jinja.mdx#2025-04-18_snippet_3\n\nLANGUAGE: BAML\nCODE:\n```\ntemplate_string PrintUserInfo(arg1: string, arg2: User) #\"\n  {{ arg1 }}\n  The user's name is: {{ arg2.name }}\n\"#\n\nfunction MyFunc(arg1: string, user: User) -> string {\n  prompt #\"\n    Here is the user info:\n    {{ PrintUserInfo(arg1, user) }}\n  \"#\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Async Client in Different Languages\nDESCRIPTION: Examples of using the BAML async client in Python, TypeScript, and Ruby to call BAML functions. Note that Ruby doesn't actually have an async client, so the example shows using the standard synchronous client instead.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/client.mdx#2025-04-18_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom baml_client.async_client import b\n\nasync def example():\n    # Call your BAML functions.\n    story = await b.TellMeAStory()\n    poem = await b.WriteAPoemAbout(\"Roses\")\n```\n\nLANGUAGE: typescript\nCODE:\n```\nimport { b } from '../baml_client/async_client'\n\nasync function example() {\n    // Call your BAML functions.\n    const story = await b.TellMeAStory()\n    const poem = await b.WriteAPoemAbout(\"Roses\")\n}\n```\n\nLANGUAGE: ruby\nCODE:\n```\n# Ruby doesn't have an async client.\nrequire 'baml_client/client'\n\ndef example\n  # Call your BAML functions.\n  story = b.TellMeAStory()\n  poem = b.WriteAPoemAbout(\"Roses\")\nend\n```\n\n----------------------------------------\n\nTITLE: Implementing Directory Structure in BAML\nDESCRIPTION: Shows the basic directory structure for organizing BAML source files, including client definitions, generators, and test cases.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/baml_src/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nbaml_src/\n├── clients.baml         # Main client definitions\n├── generators.baml      # Generator functions\n├── test-files/         # Test-specific BAML files\n│   ├── providers/      # Provider-specific tests\n│   ├── testing_pipeline/ # Pipeline test cases\n│   └── ...\n├── formatter/          # Formatter-specific tests\n└── fiddle-examples/    # Example BAML files for testing\n```\n\n----------------------------------------\n\nTITLE: Structuring BAML Example Directories\nDESCRIPTION: Demonstrates the required directory structure for organizing BAML examples. Each example should have a dedicated directory containing a baml_src subdirectory with a main.baml file.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/typescript/fiddle-frontend/public/_docs/README.md#2025-04-18_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n_docs/\n  example-name/\n    baml_src/\n      main.baml\n```\n\n----------------------------------------\n\nTITLE: AWS Configuration Files for Authentication\nDESCRIPTION: Examples of AWS configuration files (~/.aws/credentials and ~/.aws/config) used for authentication with AWS Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_11\n\nLANGUAGE: ini\nCODE:\n```\n# ~/.aws/credentials\n[default]\naws_access_key_id = ...\naws_secret_access_key = ...\n\n# ~/.aws/config\n[default]\nregion = us-east-1\n```\n\n----------------------------------------\n\nTITLE: Ruby Implementation Placeholder for BAML Image Handling\nDESCRIPTION: This placeholder indicates that Ruby implementation for BAML image handling is currently in development and not yet available.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml_client/image.mdx#2025-04-18_snippet_3\n\nLANGUAGE: ruby\nCODE:\n```\n# Ruby implementation is in development.\n```\n\n----------------------------------------\n\nTITLE: Using AWS Profile in Environment Variable\nDESCRIPTION: Command to set the AWS_PROFILE environment variable for authentication with AWS Bedrock.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/fern/03-reference/baml/clients/providers/aws-bedrock.mdx#2025-04-18_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport AWS_PROFILE=staging-profile\n```\n\n----------------------------------------\n\nTITLE: Repository Clone and Navigation Commands\nDESCRIPTION: Basic bash commands to clone the BAML repository and navigate to the integration tests directory.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/integ-tests/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/boundaryml/baml.git\ncd baml/integ-tests\n```\n\n----------------------------------------\n\nTITLE: Building and Running Integration Tests\nDESCRIPTION: Commands to build and execute the Go integration tests.\nSOURCE: https://github.com/boundaryml/baml/blob/canary/engine/language_client_cffi/README.md#2025-04-18_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd integ-tests/go\ngo build\n./integ-tests\n```"
  }
]