[
  {
    "owner": "biomejs",
    "repo": "biome",
    "content": "TITLE: Using Biome CLI Commands\nDESCRIPTION: Examples of common Biome CLI commands for various operations including formatting files, linting with auto-fixes, running all checks, and CI validation.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.zh-TW.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# 格式化文件\nnpx @biomejs/biome format --write ./src\n\n# 檢查文件並應用安全的修正\nnpx @biomejs/biome lint --write ./src\n\n# 執行格式化、檢查等並應用安全的修正\nnpx @biomejs/biome check --write ./src\n\n# 在 CI 環境中檢查所有文件的格式、檢查等\nnpx @biomejs/biome ci ./src\n```\n\n----------------------------------------\n\nTITLE: Editorconfig Support Configuration\nDESCRIPTION: Configuration example showing how to enable .editorconfig support in biome.json.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_17\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatter\": {\n    \"useEditorconfig\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Deprecated Lint Rule in Rust for Biome\nDESCRIPTION: This snippet shows how to declare a deprecated lint rule in Rust for the Biome project. It includes an example of the 'NoVar' rule with a deprecation notice, demonstrating how to specify the deprecation reason and other metadata.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_34\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_analyze::declare_lint_rule;\n\ndeclare_lint_rule! {\n    /// Disallow the use of `var`.\n    ///\n    /// ## Examples\n    ///\n    /// ### Invalid\n    ///\n    /// ```js,expect_diagnostic\n    /// var a, b;\n    /// ```\n    pub(crate) NoVar {\n        version: \"1.0.0\",\n        name: \"noVar\",\n        language: \"js\",\n        deprecated: \"Use the rule `noAnotherVar`\",\n        recommended: false,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Biome Linter Rules and Overrides in JSON\nDESCRIPTION: Example of configuring Biome linter rules globally and using overrides to adjust or disable rules for specific file patterns.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_133\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"recommended\": true\n    }\n  },\n  \"overrides\": [\n    {\n      \"include\": [\"lib/**\"],\n      \"linter\": {\n        \"rules\": {\n          \"suspicious\": {\n            \"noDebugger\": \"off\"\n          }\n        }\n      }\n    },\n    {\n      \"include\": [\"shims/**\"],\n      \"linter\": {\n        \"enabled\": false\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Using Biome JavaScript API\nDESCRIPTION: Example demonstrating how to initialize Biome, format code, and perform linting with the JavaScript API. Shows project setup, configuration application, code formatting, and diagnostic output.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/js-api/README.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport { Biome, Distribution } from \"@biomejs/js-api\";\n\nconst biome = await Biome.create({\n\tdistribution: Distribution.NODE, // Or BUNDLER / WEB depending on the distribution package you've installed\n});\n\nconst projectKey = biome.openProject('path/to/project/dir');\n\n// Optionally apply a Biome configuration (instead of biome.json)\nbiome.applyConfiguration(projectKey, {...});\n\nconst formatted = biome.formatContent(\"function f   (a, b) { return a == b; }\", {\n\tfilePath: \"example.js\",\n});\n\nconsole.log('Formatted content: ', formatted.content);\n\nconst result = biome.lintContent(formatted.content, {\n\tfilePath: \"example.js\",\n});\n\nconst html = biome.printDiagnostics(result.diagnostics, {\n\tfilePath: \"example.js\",\n\tfileSource: formatted.content,\n});\n\nconsole.log('Lint diagnostics: ', html);\n```\n\n----------------------------------------\n\nTITLE: Declaring and Documenting a Lint Rule in Rust for Biome\nDESCRIPTION: This snippet demonstrates how to declare and document a lint rule in Rust for the Biome project. It includes a full example of the 'NoVar' rule, which disallows the use of 'var' in JavaScript, along with explanations, examples, and metadata.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_31\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_analyze::declare_lint_rule;\ndeclare_lint_rule! {\n    /// Disallow the use of `var`.\n    ///\n    /// _ES2015_ allows to create variables with block scope instead of function scope\n    /// using the `let` and `const` keywords.\n    /// Block scope is common in many other programming languages and helps to avoid mistakes.\n    ///\n    /// Source: https://eslint.org/docs/latest/rules/no-var\n    ///\n    /// ## Examples\n    ///\n    /// ### Invalid\n    ///\n    /// ```js,expect_diagnostic\n    /// var foo = 1;\n    /// ```\n    ///\n    /// ```js,expect_diagnostic\n    /// var bar = 1;\n    /// ```\n    ///\n    /// ### Valid\n    ///\n    /// ```js\n    /// const foo = 1;\n    /// let bar = 1;\n    ///```\n    pub(crate) NoVar {\n        version: \"next\",\n        name: \"noVar\",\n        language: \"js\",\n        recommended: false,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Prettier Tests in Biome\nDESCRIPTION: Commands to run the Prettier test suite as part of the biome_js_formatter test suite, with options to generate comparison reports between Biome and Prettier outputs.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p biome_js_formatter --test prettier_tests\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Formatting Traits in Rust\nDESCRIPTION: Core trait implementations for formatting including AsFormat and IntoFormat traits along with iterator extensions. This code provides the fundamental formatting infrastructure that allows nodes to format themselves.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n/// Used to get an object that knows how to format this object.\npub(crate) trait AsFormat<Context> {\n    type Format<'a>: biome_formatter::Format<Context>\n    where\n        Self: 'a;\n\n    /// Returns an object that is able to format this object.\n    fn format(&self) -> Self::Format<'_>;\n}\n\n/// Implement [AsFormat] for references to types that implement [AsFormat].\nimpl<T, C> AsFormat<C> for &T\nwhere\n    T: AsFormat<C>,\n{\n    type Format<'a> = T::Format<'a> where Self: 'a;\n\n    fn format(&self) -> Self::Format<'_> {\n        AsFormat::format(&**self)\n    }\n}\n\n/// Implement [AsFormat] for [SyntaxResult] where `T` implements [AsFormat].\n///\n/// Useful to format mandatory AST fields without having to unwrap the value first.\nimpl<T, C> AsFormat<C> for biome_rowan::SyntaxResult<T>\nwhere\n    T: AsFormat<C>,\n{\n    type Format<'a> = biome_rowan::SyntaxResult<T::Format<'a>> where Self: 'a;\n\n    fn format(&self) -> Self::Format<'_> {\n        match self {\n            Ok(value) => Ok(value.format()),\n            Err(err) => Err(*err),\n        }\n    }\n}\n\n/// Implement [AsFormat] for [Option] when `T` implements [AsFormat]\n///\n/// Allows to call format on optional AST fields without having to unwrap the field first.\nimpl<T, C> AsFormat<C> for Option<T>\nwhere\n    T: AsFormat<C>,\n{\n    type Format<'a> = Option<T::Format<'a>> where Self: 'a;\n\n    fn format(&self) -> Self::Format<'_> {\n        self.as_ref().map(|value| value.format())\n    }\n}\n\n/// Used to convert this object into an object that can be formatted.\n///\n/// The difference to [AsFormat] is that this trait takes ownership of `self`.\npub(crate) trait IntoFormat<Context> {\n    type Format: biome_formatter::Format<Context>;\n\n    fn into_format(self) -> Self::Format;\n}\n\nimpl<T, Context> IntoFormat<Context> for biome_rowan::SyntaxResult<T>\nwhere\n    T: IntoFormat<Context>,\n{\n    type Format = biome_rowan::SyntaxResult<T::Format>;\n\n    fn into_format(self) -> Self::Format {\n        self.map(IntoFormat::into_format)\n    }\n}\n\n/// Implement [IntoFormat] for [Option] when `T` implements [IntoFormat]\n///\n/// Allows to call format on optional AST fields without having to unwrap the field first.\nimpl<T, Context> IntoFormat<Context> for Option<T>\nwhere\n    T: IntoFormat<Context>,\n{\n    type Format = Option<T::Format>;\n\n    fn into_format(self) -> Self::Format {\n        self.map(IntoFormat::into_format)\n    }\n}\n\n/// Formatting specific [Iterator] extensions\npub(crate) trait FormattedIterExt {\n    /// Converts every item to an object that knows how to format it.\n    fn formatted<Context>(self) -> FormattedIter<Self, Self::Item, Context>\n    where\n        Self: Iterator + Sized,\n        Self::Item: IntoFormat<Context>,\n    {\n        FormattedIter {\n            inner: self,\n            options: std::marker::PhantomData,\n        }\n    }\n}\n\nimpl<I> FormattedIterExt for I where I: std::iter::Iterator {}\n\npub(crate) struct FormattedIter<Iter, Item, Context>\nwhere\n    Iter: Iterator<Item = Item>,\n{\n    inner: Iter,\n    options: std::marker::PhantomData<Context>,\n}\n\nimpl<Iter, Item, Context> std::iter::Iterator for FormattedIter<Iter, Item, Context>\nwhere\n    Iter: Iterator<Item = Item>,\n    Item: IntoFormat<Context>,\n{\n    type Item = Item::Format;\n\n    fn next(&mut self) -> Option<Self::Item> {\n        Some(self.inner.next()?.into_format())\n    }\n}\n\nimpl<Iter, Item, Context> std::iter::FusedIterator for FormattedIter<Iter, Item, Context>\nwhere\n    Iter: std::iter::FusedIterator<Item = Item>,\n    Item: IntoFormat<Context>,\n{\n}\n\nimpl<Iter, Item, Context> std::iter::ExactSizeIterator for FormattedIter<Iter, Item, Context>\nwhere\n    Iter: Iterator<Item = Item> + std::iter::ExactSizeIterator,\n    Item: IntoFormat<Context>,\n{\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Lint Rule with Source Attribution\nDESCRIPTION: Example of defining a lint rule that's inspired by or equivalent to a rule from another linting tool like ESLint, with proper attribution.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_8\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_analyze::{declare_lint_rule, RuleSource};\n\ndeclare_lint_rule! {\n    /// Documentation\n    pub(crate) ExampleRule {\n        version: \"next\",\n        name: \"myRuleName\",\n        language: \"js\",\n        recommended: false,\n        sources: &[RuleSource::Eslint(\"no-debugger\")],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Rule Naming Conventions in Biome\nDESCRIPTION: Examples of naming conventions for forbidding and mandating concepts in Biome rules. The 'no' prefix is used for forbidding, while the 'use' prefix is for mandating concepts.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nno<Concept>\nuse<Concept>\n```\n\n----------------------------------------\n\nTITLE: Using Biome CLI Commands\nDESCRIPTION: Examples of Biome CLI commands for formatting, linting, checking, and CI environments. These commands demonstrate how to use Biome for various tasks on source files.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# format files\nnpx @biomejs/biome format --write ./src\n\n# lint files and apply the safe fixes\nnpx @biomejs/biome lint --write ./src\n\n# run format, lint, etc. and apply the safe fixes\nnpx @biomejs/biome check --write ./src\n\n# check all files against format, lint, etc. in CI environments\nnpx @biomejs/biome ci ./src\n```\n\n----------------------------------------\n\nTITLE: Installing required tools for Biome development\nDESCRIPTION: Command to install all the required development tools for Biome using the Just command runner.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\njust install-tools\n```\n\n----------------------------------------\n\nTITLE: Conventional Commit Examples\nDESCRIPTION: Examples of properly formatted commit messages following the conventional commit specification, showing different types of commits with their prefixes and descriptions.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_18\n\nLANGUAGE: txt\nCODE:\n```\nfeat(compiler): implement parsing for new type of files\nfix: fix nasty unhandled error\ndocs: fix link to website page\ntest(lint): add more cases to handle invalid rules\n```\n\n----------------------------------------\n\nTITLE: Implementing JSON Serialization for Rule Options\nDESCRIPTION: Shows how to implement JSON serialization and deserialization for rule options using serde-inspired macros and traits.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_16\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_deserialize_macros::Deserializable;\nuse serde::{Deserialize, Serialize};\n\n#[derive(Debug, Default, Clone, Serialize, Deserialize, Deserializable)]\n#[cfg_attr(feature = \"schemars\", derive(schemars::JsonSchema))]\n#[serde(rename_all = \"camelCase\", deny_unknown_fields, default)]\npub struct MyRuleOptions {\n    #[serde(default, skip_serializing_if = \"is_default\")]\n    main_behavior: Behavior,\n\n    #[serde(default, skip_serializing_if = \"is_default\")]\n    extra_behaviors: Vec<Behavior>,\n}\n\n#[derive(Debug, Default, Clone)]\n#[cfg_attr(feature = \"schemars\", derive(JsonSchema))]\npub enum Behavior {\n    #[default]\n    A,\n    B,\n    C,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Biome in CI environments\nDESCRIPTION: Command to run Biome's ci command on the src directory, which checks all files against formatting, linting, and other rules without making changes.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.hi.md#2025-04-14_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\nnpx @biomejs/biome ci ./src\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Fix Options in Biome JSON\nDESCRIPTION: Demonstrates how to configure the 'fix' option for different linter rules to control the type of code actions emitted. This includes disabling code actions, making them safe or unsafe for specific rules.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_41\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n      \"correctness\": {\n        \"noUnusedVariables\": {\n          \"level\": \"error\",\n          \"fix\": \"none\"\n        },\n        \"style\": {\n          \"useConst\": {\n            \"level\": \"warn\",\n            \"fix\": \"unsafe\"\n          },\n          \"useTemplate\": {\n            \"level\": \"warn\",\n            \"fix\": \"safe\"\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Biome CLI Commands\nDESCRIPTION: Examples of Biome CLI commands for formatting, linting, checking, and CI validation with explanatory comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.uk.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# форматування файлів\nnpx @biomejs/biome format --write ./src\n\n# лінтинг файлів та застосування безпечних виправлень\nnpx @biomejs/biome lint --write ./src\n\n# запуск форматування, лінтингу тощо та застосування безпечних виправлень\nnpx @biomejs/biome check --write ./src\n\n# перевірка всіх файлів на відповідність форматуванню, лінтингу тощо в середовищах CI\nnpx @biomejs/biome ci ./src\n```\n\n----------------------------------------\n\nTITLE: Executing New Biome Clean Command\nDESCRIPTION: Introduces the new 'clean' command to remove log files from the biome-logs directory.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_34\n\nLANGUAGE: shell\nCODE:\n```\nbiome clean\n```\n\n----------------------------------------\n\nTITLE: Creating Documentation Reference Links in Markdown\nDESCRIPTION: This snippet defines reference-style links to various Biome documentation pages. These links are used to direct readers to key Biome resources including the main website, philosophy documentation, language support information, and getting started guides.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.md#2025-04-14_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n[biomejs]: https://biomejs.dev/\n[biome-philosophy]: https://biomejs.dev/internals/philosophy/\n[language-support]: https://biomejs.dev/internals/language-support/\n[getting-started]: https://biomejs.dev/guides/getting-started/\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Semantic Query Rule in Rust\nDESCRIPTION: Rust implementation of a rule that analyzes variable references in a for loop using semantic queries. Shows how to access bindings and reference information.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_20\n\nLANGUAGE: rust\nCODE:\n```\nimpl Rule for ForLoopCountReferences {\n    type Query = Semantic<JsForStatement>;\n    type State = ();\n    type Signals = Option<Self::State>;\n    type Options = ();\n\n    fn run(ctx: &RuleContext<Self>) -> Self::Signals {\n        let node = ctx.query();\n\n        // The model holds all informations about the semantic, like scopes and declarations\n        let model = ctx.model();\n\n        // Here we are extracting the `let i = 0;` declaration in for loop\n        let initializer = node.initializer()?;\n        let declarators = initializer.as_js_variable_declaration()?.declarators();\n        let initializer = declarators.first()?.ok()?;\n        let initializer_id = initializer.id().ok()?;\n\n        // Now we have the binding of this declaration\n        let binding = initializer_id\n            .as_any_js_binding()?\n            .as_js_identifier_binding()?;\n\n        // How many times this variable appers in the code\n        let count = binding.all_references(model).count();\n\n        // Get all read references\n        let readonly_references = binding.all_reads(model);\n\n        // Get all write references\n        let write_references = binding.all_writes(model);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enum with Numeric Constant Expressions\nDESCRIPTION: Example showing how useLiteralEnumMembers now allows arbitrary numeric constant expressions in enum definitions.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_164\n\nLANGUAGE: typescript\nCODE:\n```\nenum FileAccess {\n  None = 0,\n  Read = 2**0,\n  Write = 2**1,\n  All = Read | Write,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing If Statement Parsing in Rust for Biome\nDESCRIPTION: This snippet demonstrates how to implement the parsing rule for an 'if' statement in Biome. It shows the use of various parser methods like expect(), parse_any_expression(), and parse_block_statement() to handle different parts of the if statement syntax.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_parser/CONTRIBUTING.md#2025-04-14_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nfn parse_if_statement(p: &mut Parser) -> ParsedSyntax {\n if !p.at(T![if]) {\n  return Absent;\n }\n\n let m = p.start();\n\n p.expect(T![if]);\n p.expect(T!['(']);\n parse_any_expression(p).or_add_diagnostic(p, js_parse_errors::expeced_if_statement);\n p.expect(T![')']);\n parse_block_statement(p).or_add_diagnostic(p, js_parse_errors::expected_block_statement);\n// the else block is optional, handle the marker by using `ok`\n parse_else_clause(p).ok();\n\n Present(m.complete(p, JS_IF_STATEMENT));\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing useExhaustiveDependencies Rule for Out-of-Scope Variables in React\nDESCRIPTION: Code example demonstrating the fix for issue #651 where useExhaustiveDependencies no longer reports out-of-scope dependencies in React component hooks. Variables defined outside the component scope are now handled correctly.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_124\n\nLANGUAGE: typescript\nCODE:\n```\nlet outer = false;\n\nconst Component = ({}) => {\n  useEffect(() => {\n    outer = true;\n  }, []);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Ignores in Biome JSON\nDESCRIPTION: Demonstrates how to configure file ignores in the Biome configuration file. Shows an example of ignoring a specific directory while including its parent.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_111\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": { \"ignore\": [\"./src/sub/\"] },\n  \"formatter\": { \"include\": [\"./src\"] }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Biome CLI for formatting and linting\nDESCRIPTION: Examples showing how to use Biome CLI commands for formatting, linting, checking, and CI verification of files. The --write flag is used to apply changes directly to files.\nSOURCE: https://github.com/biomejs/biome/blob/main/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# format files\nnpx @biomejs/biome format --write ./src\n\n# lint files and apply the safe fixes\nnpx @biomejs/biome lint --write ./src\n\n# run format, lint, etc. and apply the safe fixes\nnpx @biomejs/biome check --write ./src\n\n# check all files against format, lint, etc. in CI environments\nnpx @biomejs/biome ci ./src\n```\n\n----------------------------------------\n\nTITLE: Initializing Biome Fuzzers\nDESCRIPTION: Command to initialize the fuzzing environment by installing cargo-fuzz and downloading optional datasets for improved testing efficacy.\nSOURCE: https://github.com/biomejs/biome/blob/main/fuzz/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n./fuzz/init-fuzzers.sh\n```\n\n----------------------------------------\n\nTITLE: Enforcing Node.js Import Protocol\nDESCRIPTION: The useNodejsImportProtocol rule enforces the use of the 'node:' protocol when importing Node.js modules. It suggests adding the 'node:' prefix to built-in Node.js module imports.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_119\n\nLANGUAGE: diff\nCODE:\n```\n- import fs from \"fs\";\n+ import fs from \"node:fs\";\n```\n\n----------------------------------------\n\nTITLE: Navigating CST in Rust\nDESCRIPTION: Provides examples of how to navigate the Concrete Syntax Tree (CST) in rule implementations, handling Results and Options.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_17\n\nLANGUAGE: rust\nCODE:\n```\nfn run() -> Self::Signals {\n  let prev_val = js_object_member.value().ok()?;\n}\n\nfn run() -> Self::Signals {\n  let Ok(prev_val) = js_object_member.value() else {\n    return vec![]\n  };\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Naming Conventions in Biome JSON\nDESCRIPTION: Demonstrates how to enforce custom naming conventions using the useNamingConvention rule, specifically for private class members with a prefix.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_43\n\nLANGUAGE: json\nCODE:\n```\n{\n\t\"linter\": {\n\t\t\"rules\": {\n\t\t\t\"style\": {\n\t\t\t\t\"useNamingConvention\": {\n\t\t\t\t\t\"level\": \"error\",\n\t\t\t\t\t\"options\": {\n\t\t\t\t\t\t\"conventions\": [\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\"selector\": {\n\t\t\t\t\t\t\t\t\t\"kind\": \"classMember\",\n\t\t\t\t\t\t\t\t\t\"modifiers\": [\"private\"]\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\"match\": \"_(.*)\",\n                  \"formats\": [\"camelCase\"]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Advices Trait for Diagnostic Fields\nDESCRIPTION: This code shows how to implement the Advices trait for a type that will be used as an advice field in a diagnostic. The implementation demonstrates how to record log advices in the visitor.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_diagnostics/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nimpl Advices for UnhandledKind {\n    fn record(&self, visitor: &mut dyn Visit) -> io::Result<()> {\n        visitor.record_log(LogCategory::Info, self.advice_message())\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Rule's Action Method for Code Fixes\nDESCRIPTION: Optional implementation of the 'action' function that provides automatic code fixes for rule violations. This method creates a mutation to fix the issue automatically when the user applies the code action.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nimpl Rule for UseAwesomeTricks {\n    fn action(ctx: &RuleContext<Self>, _state: &Self::State) -> Option<JsRuleAction> {\n        let mut mutation = ctx.root().mutation();\n        Some(JsRuleAction::new(\n            ctx.action_category(ctx.category(), ctx.group()),\n            ctx.metadata().applicability(),\n            markup! { \"<MESSAGE>\" }.to_owned(),\n            mutation,\n        ))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Linter Rules in Rome JSON Configuration\nDESCRIPTION: Example configuration showing how to globally enable or disable linter rules. This demonstrates enabling all rules but disabling a specific group of rules (style rules in this example).\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n      \"all\": true,\n      \"style\" : {\n        \"all\": false\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Diagnostic Trait Using the Derive Macro\nDESCRIPTION: This code snippet demonstrates how to create a diagnostic using the #[derive(Diagnostic)] macro, showing the structure definition with various attribute annotations that define the diagnostic's properties.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_diagnostics/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n// The Diagnostic trait requires Debug to be implemented\n#[derive(Debug, Diagnostic)]\n// The category, severity, description, message, location and tags can be\n// specified statically on the type itself using the #[diagnostic] attribute\n#[diagnostic(severity = Warning, category = \"internalError/fs\")]\nstruct UnhandledDiagnostic {\n    // All the diagnostic properties can also be derived from fields of the\n    // struct using the corresponding attribute\n    // A single field may have multiple attributes, however most attributes can\n    // only be specified once either statically on the whole struct or on a\n    // single field. The only exception to this is #[advice] (and\n    // #[verbose_advice]), since all advices will be recorded into the\n    // diagnostic in the same order they are declared in the struct\n    #[message]\n    #[description]\n    #[advice]\n    file_kind: UnhandledKind\n}\n```\n\n----------------------------------------\n\nTITLE: Configuration for Parameter Decorators\nDESCRIPTION: Configuration to enable support for parameter decorators in class methods, which is a non-standard syntax feature that must be explicitly enabled.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_170\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"javascript\": {\n      \"parser\": {\n         \"unsafeParameterDecoratorsEnabled\": true\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: New Configuration for useExhaustiveDependencies\nDESCRIPTION: Example of the new configuration format for the useExhaustiveDependencies and useHookAtTopLevel rules that uses named properties for better readability and maintainability.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_168\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n     \"rules\": {\n        \"nursery\": {\n           \"useExhaustiveDependencies\": {\n              \"level\": \"error\",\n              \"options\": {\n                 \"hooks\": [\n                    {\n                       \"name\": \"useMyEffect\",\n                       \"closureIndex\": 0,\n                       \"dependenciesIndex\": 1\n                    }\n                 ]\n              }\n           }\n        }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Quotes in JSX Attributes\nDESCRIPTION: This snippet shows formatting changes for JSX attributes containing various types of quotes, with special focus on entity escaping for single and double quotes in attribute values.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_30\n\nLANGUAGE: jsx\nCODE:\n```\n<div id=\"&quot;'<>&amp;quot;\" />;\n<div id='\"&#39;<>&amp;quot;' />;\n<div id={\"'\\\"&quot;<>&amp;quot;\"} />;\n<div id=\"123\" />;\n-<div id='&#39;\"' />;\n+<div id=\"&#39;&quot;\" />;\n<div id={\"'\\\"\\\\'\"}/>;\n<div\n  single=\"foo\"\n  single2={\"foo\"}\n  double=\"bar\"\n  double2={\"bar\"}\n  singleDouble='\"'\n  singleDouble2={'\"'}\n  doubleSingle=\"'\"\n  doubleSingle2={\"'\"}\n  singleEscaped={\"'\"}\n-  singleEscaped2=\"'\"\n+  singleEscaped2=\"&apos;\"\n  doubleEscaped={'\"'}\n-  doubleEscaped2='\"'\n+  doubleEscaped2=\"&quot;\"\n  singleBothEscaped={\"'\\\"\"}\n-  singleBothEscaped2=\"'&quot;\"\n-  singleBoth=\"' &quot;\"\n+  singleBothEscaped2='&apos;\"'\n+  singleBoth='&apos; \"'\n  singleBoth2={\"' \\\"\"}\n-  singleBoth3=\"' ' &quot;\"\n+  singleBoth3='&apos; &apos; \"'\n  doubleBoth=\"&quot; '\"\n  doubleBoth2={\"\\\" '\"}\n-  doubleBoth3=\"&quot; ' '\"\n+  doubleBoth3=\"&quot; &apos; '\"\n/>;\n\n<p>\n  GitHub Desktop has encountered an unrecoverable error and will need to 1231231\n  restart. This has been reported to the team, but if youencounter this121312331\n  repeatedly please report this issue to the GitHub 12312312312312313{\"  \"}{\" \"}\n</p>;\n```\n\n----------------------------------------\n\nTITLE: Running tests for a specific crate\nDESCRIPTION: Commands to navigate to a specific crate and run its tests using Cargo.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ncd crates/biome_cli\n\n# it will run only the tests of the `biome_cli` crate\ncargo t\n```\n\n----------------------------------------\n\nTITLE: Running tests with Cargo\nDESCRIPTION: Commands to run tests using Cargo, either all tests or specific tests in the repository.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# run tests\ncargo test\n\n# or use the shortcut\ncargo t\n```\n\n----------------------------------------\n\nTITLE: Configuring File Ignore Patterns in JSONC\nDESCRIPTION: Demonstrates how to use git ignore patterns in Biome's configuration file to include or exclude specific file patterns.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_116\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"files\": {\n    \"ignore\": [\n      \"node_modules/**\",\n      \"!**/dist/**\"\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Import Organization in Rome JSON Configuration\nDESCRIPTION: Example configuration for enabling the experimental organize imports feature. Shows how to set up import organization in rome.json with an option to ignore specific files.\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"organizeImports\": {\n    \"enabled\": true,\n    \"ignore\": [\"trickyFile.js\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing useArrowFunction Rule for Function Expressions in Call Expressions\nDESCRIPTION: Code examples demonstrating the fix for issue #1436 where useArrowFunction now applies correct fixes when converting function expressions used in call expressions or member access, properly adding parentheses.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_129\n\nLANGUAGE: diff\nCODE:\n```\n- const called = function() {}();\n+ const called = () => {}();\n```\n\nLANGUAGE: diff\nCODE:\n```\n- const called = function() {}();\n+ const called = (() => {})();\n```\n\n----------------------------------------\n\nTITLE: Implementing the Rule's Diagnostic Method\nDESCRIPTION: Example implementation of the 'diagnostic' function that creates informative messages for rule violations. This function defines what error message the user will see when the rule is triggered.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nfn diagnostic(ctx: &RuleContext<Self>, _state: &Self::State) -> Option<RuleDiagnostic>\n    let node = ctx.query();\n    Some(\n        RuleDiagnostic::new(\n            rule_category!(),\n            node.range(),\n            markup! {\n                \"Use of a prohibited identifier name\"\n            },\n        )\n        .note(markup! {\n            \"This note will give you more information.\"\n        }),\n    )\n}\n```\n\n----------------------------------------\n\nTITLE: Using No Done Callback Rule\nDESCRIPTION: Example of code that would trigger the noDoneCallback rule, which checks for use of the done argument in hooks and tests.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nbeforeEach(done => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Building a production binary of Biome\nDESCRIPTION: Command to build a production binary of Biome with the required BIOME_VERSION environment variable.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_16\n\nLANGUAGE: bash\nCODE:\n```\nBIOME_VERSION=0.0.1 cargo build --bin biome --release\n```\n\n----------------------------------------\n\nTITLE: Using Optional Chaining with Method Calls\nDESCRIPTION: Diff showing how the useOptionalChain rule correctly handles logical AND chains where methods with the same name are invoked with different arguments.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_103\n\nLANGUAGE: diff\nCODE:\n```\n- tags && tags.includes('a') && tags.includes('b')\n+ tags?.includes('a') && tags.includes('b')\n```\n\n----------------------------------------\n\nTITLE: Configuring Rule Options in JSON\nDESCRIPTION: Shows how to set custom options for a rule in the biome.json configuration file. This example includes options for behavior, threshold, and exceptions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_13\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n      \"recommended\": true,\n      \"nursery\": {\n        \"my-rule\": {\n          \"options\": {\n            \"behavior\": \"A\",\n            \"threshold\": 30,\n            \"behaviorExceptions\": [\"f\"]\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing the Rule's Run Method\nDESCRIPTION: Example implementation of the 'run' function that analyzes code and determines if a rule violation exists. This example checks if an identifier has a prohibited name.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nfn run(ctx: &RuleContext<Self>) -> Self::Signals {\n    let binding = ctx.query();\n\n    if binding.name_token().ok()?.text() == \"prohibited_identifier\" {\n        Some(())\n    } else {\n        None\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Recursive Component Usage in React Hooks\nDESCRIPTION: This JSX code snippet shows a recursive component usage inside a React useMemo hook, illustrating how the component itself is considered stable and doesn't need to be added to the dependencies list.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_31\n\nLANGUAGE: jsx\nCODE:\n```\nimport { useMemo } from \"react\";\n\nfunction MyRecursiveComponent() {\n  // MyRecursiveComponent is stable, we don't need to add it to the dependencies list.\n  const children = useMemo(() => <MyRecursiveComponent />, []);\n  return <div>{children}</div>;\n}\n```\n\n----------------------------------------\n\nTITLE: Using Extended Configuration in Biome\nDESCRIPTION: JSON configuration example demonstrating how to use the new extends option to split configuration across multiple files.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_150\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": [\"../sharedFormatter.json\", \"linter.json\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Definite Assignment Assertions\nDESCRIPTION: Shows how Biome formats definite assignment assertions (!) in class properties and variable declarations, removing semicolons and adjusting positioning of comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  a!\n  #b!\n  static c!\n  [d]! = 1\n  'e'!\n}\n\nlet a! = x\nconst b! = x\nvar c/* */! = x\nexport const d! = x\n```\n\n----------------------------------------\n\nTITLE: Running Biome GraphQL Formatter Tests with Prettier Snapshots\nDESCRIPTION: Command to run the Prettier test suite as part of the biome_graphql_formatter tests. It also describes environment variables that can be set to control report generation.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_graphql_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo test -p biome_graphql_formatter --test prettier_tests\n```\n\n----------------------------------------\n\nTITLE: Formatting files with Biome\nDESCRIPTION: Command to format files in the src directory using Biome. The --write flag indicates that changes should be written to the files.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.hi.md#2025-04-14_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\nnpx @biomejs/biome format --write ./src\n```\n\n----------------------------------------\n\nTITLE: Parsing Const Modifier in TypeScript Method Signatures\nDESCRIPTION: Adds support for parsing the 'const' modifier in type parameters of method type signatures. Shows examples of valid usage in different contexts.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_109\n\nLANGUAGE: typescript\nCODE:\n```\ntype Foo = {\n  <const T>();\n  method<const T>();\n};\n```\n\n----------------------------------------\n\nTITLE: Declaring a Lint Rule with Metadata\nDESCRIPTION: Example of using the declare_lint_rule! macro to define a new rule with metadata like version, name, language, and recommendation status.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_analyze::declare_lint_rule;\n\ndeclare_lint_rule! {\n    /// Documentation\n    pub(crate) ExampleRule {\n        version: \"next\",\n        name: \"myRuleName\",\n        language: \"js\",\n        recommended: false,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Style Rules in Biome\nDESCRIPTION: Example configuration for enabling optional style rules in Biome's linter. Shows how to manually enable style rules that are no longer enabled by default.\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n        \"style\": {\n            \"useBlockStatements\": \"warn\"\n        }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting CSS-in-JS Template Literals in TypeScript\nDESCRIPTION: This snippet demonstrates formatting changes for CSS-in-JS template literals within a TypeScript function. It adjusts indentation for better readability of the CSS content.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_79\n\nLANGUAGE: diff\nCODE:\n```\nconst yesFrame = (\n  ...args: Interpolation<ThemedStyledProps<{}, Theme>>[]\n) => css`\n-  ${ChatRoot}[data-frame=\"yes\"] & {\n-    ${css({}, ...args)}\n-  }\n+    ${ChatRoot}[data-frame=\"yes\"] & {\n+        ${css({}, ...args)}\n+    }\n`;\n```\n\n----------------------------------------\n\nTITLE: Using New Write and Fix Options in Biome Commands\nDESCRIPTION: Demonstrates the usage of new --write, --fix, and --unsafe options with various Biome commands for applying changes.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_39\n\nLANGUAGE: shell\nCODE:\n```\nbiome <lint|check> --<write|fix> [--unsafe]\nbiome format --<write|fix>\nbiome migrate --<write|fix>\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Object Destructuring with Trailing Comma\nDESCRIPTION: Demonstrates adding a trailing comma to an object destructuring pattern with rest parameter for consistent style.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_84\n\nLANGUAGE: typescript\nCODE:\n```\nconst {\n  longKeySoThisWillGoOnMultipleLines,\n  longKeySoThisWillGoOnMultipleLines2,\n  longKeySoThisWillGoOnMultipleLines3,\n  ...rest,\n} = something;\n```\n\n----------------------------------------\n\nTITLE: Using Unicase Characters in Variable Names\nDESCRIPTION: JavaScript code showing valid variable and property names using unicase characters, now properly supported by the useNamingConvention rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nconst 안녕하세요 = { 안녕하세요: 0 };\n```\n\n----------------------------------------\n\nTITLE: Using Configured Hooks with Stable Results\nDESCRIPTION: Example of how configured hooks with stable results are validated by the useExhaustiveDependencies rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nconst [myState, setMyState] = useMyState();\nconst toggleMyState = useCallback(() => {\n  setMyState(!myState);\n}, [myState]); // Only `myState` needs to be specified here.\n```\n\n----------------------------------------\n\nTITLE: Updating RAST Snapshots for JavaScript Parser Tests\nDESCRIPTION: Command to update the .rast snapshots when running tests for the biome_js_parser package. This uses the UPDATE_EXPECT environment variable to trigger snapshot updates.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_parser/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nUPDATE_EXPECT=1 cargo test -p biome_js_parser\n```\n\n----------------------------------------\n\nTITLE: Implementing Format Node Rule Trait for HTML\nDESCRIPTION: Comprehensive trait implementation for formatting HTML syntax nodes, including comment handling and suppression logic.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) trait FormatNodeRule<N>\nwhere\n    N: AstNode<Language = HtmlLanguage>,\n{\n    fn fmt(&self, node: &N, f: &mut HtmlFormatter) -> FormatResult<()> {\n        if self.is_suppressed(node, f) {\n            return write!(f, [format_suppressed_node(node.syntax())]);\n        }\n\n        self.fmt_leading_comments(node, f)?\n        self.fmt_fields(node, f)?\n        self.fmt_dangling_comments(node, f)?\n        self.fmt_trailing_comments(node, f)\n    }\n\n    fn fmt_fields(&self, node: &N, f: &mut HtmlFormatter) -> FormatResult<()>;\n\n    fn is_suppressed(&self, node: &N, f: &HtmlFormatter) -> bool {\n        f.context().comments().is_suppressed(node.syntax())\n    }\n\n    fn fmt_leading_comments(&self, node: &N, f: &mut HtmlFormatter) -> FormatResult<()> {\n        format_leading_comments(node.syntax()).fmt(f)\n    }\n\n    fn fmt_dangling_comments(&self, node: &N, f: &mut HtmlFormatter) -> FormatResult<()> {\n        format_dangling_comments(node.syntax())\n            .with_soft_block_indent()\n            .fmt(f)\n    }\n\n    fn fmt_trailing_comments(&self, node: &N, f: &mut HtmlFormatter) -> FormatResult<()> {\n        format_trailing_comments(node.syntax()).fmt(f)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Type-Only Exports in TypeScript\nDESCRIPTION: The useExportType rule enforces the use of type-only exports for types in TypeScript. It suggests using the 'type' keyword for exporting types and interfaces.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_117\n\nLANGUAGE: diff\nCODE:\n```\n  interface A {}\n  interface B {}\n  class C {}\n\n- export type { A, C }\n+ export { type A, C }\n\n- export { type B }\n+ export type { B }\n```\n\n----------------------------------------\n\nTITLE: Fixing Arrow Function Formatting in JavaScript\nDESCRIPTION: Demonstrates a bug fix for the useArrowFunction rule, which now correctly handles functions returning comma sequence expressions by wrapping them in parentheses.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\n- f(function() { return 0, 1; }, \"\");\n+ f(() => (0, 1), \"\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Integer Range Deserializer in Rust\nDESCRIPTION: Complete example of implementing a custom deserializer for a Day type that validates integer values between 1 and 365. Includes implementation of necessary traits and error handling.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/README.md#2025-04-14_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nuse std::str::FromStr;\nuse biome_deserialize::{Deserializable, DeserializableValue, DeserializationDiagnostic, TextNumber};\n\n#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash, Ord, PartialOrd)]\npub struct Day(u16);\n\nimpl Day {\n    pub const MIN: Day = Day(1);\n    pub const MAX: Day = Day(365);\n    pub fn get(&self) -> u16 {\n        self.0\n    }\n}\n\nimpl Default for Day {\n    fn default() -> Self {\n        Self::MIN\n    }\n}\n\nimpl TryFrom<u16> for Day {\n    type Error = &'static str;\n    fn try_from(value: u16) -> Result<Self, Self::Error> {\n        if (Self::MIN.get()..=Self::MAX.get()).contains(&value) {\n            Ok(Self(value))\n        } else {\n            Err(\"A day must be between 1 and 365\")\n        }\n    }\n}\n\nimpl FromStr for Day {\n    type Err = &'static str;\n    fn from_str(s: &str) -> Result<Self, Self::Err> {\n        s.parse::<u16>()\n            .map_err(|_error| \"A day must be an integer between 1 and 365\")\n            .and_then(|value| Day::try_from(value))\n    }\n}\n\nimpl Deserializable for Day {\n    fn deserialize(\n        ctx: &mut impl DeserializationContext,\n        value: &impl DeserializableValue,\n        name: &str,\n    ) -> Option<Self> {\n        let value_text = TextNumber::deserialize(ctx, value, name)?;\n        value_text.parse::<Day>().map_err(|error| {\n            ctx.report(DeserializationDiagnostic::new(error).with_range(value.range()));\n        }).ok()\n    }\n}\n\nuse biome_deserialize::json::deserialize_from_json_str;\nuse biome_deserialize::Deserialized;\nuse biome_json_parser::JsonParserOptions;\n\nlet json = \"42\";\nlet Deserialized {\n    deserialized,\n    diagnostics,\n} = deserialize_from_json_str::<Day>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert_eq!(deserialized, Some(Day(42)));\nassert!(diagnostics.is_empty());\n\nlet json = \"999\";\nlet Deserialized {\n    deserialized,\n    diagnostics,\n} = deserialize_from_json_str::<Day>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert_eq!(deserialized, None);\nassert_eq!(diagnostics..len(), 1);\n```\n\n----------------------------------------\n\nTITLE: Preserving Comments in JavaScript Formatting\nDESCRIPTION: Example showing how comments are now preserved correctly by the formatter when they appear in certain contexts.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log((a,b/* comment */));\n```\n\n----------------------------------------\n\nTITLE: Simplifying String Literal Properties\nDESCRIPTION: Example showing how useLiteralKeys suggests simplifying string literal properties to static properties for better code readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_166\n\nLANGUAGE: diff\nCODE:\n```\n{\n-  \"a\": 0,\n+  a: 0,\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Import Namespace Handling in TypeScript\nDESCRIPTION: Shows how the noUndeclaredVariables and noUnusedImports rules now correctly handle import namespaces in TypeScript. Illustrates the difference between unused imports and valid references to import namespaces.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\n// Unused import\nimport * as Ns1 from \"\";\n// This doesn't reference the import namespace `Ns1`\ntype T1 = Ns1; // Undeclared variable `Ns1`\n\n// Unused import\nimport type * as Ns2 from \"\";\n// This doesn't reference the import namespace `Ns2`\ntype T2 = Ns2; // Undeclared variable `Ns2`\n\nimport type * as Ns3 from \"\";\n// This references the import namespace because it is a qualified name.\ntype T3 = Ns3.Inner;\n// This also references the import namespace.\nexport type { Ns3 }\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Generic Type Parameters in Variable Declarations\nDESCRIPTION: This snippet shows how type annotations with generic parameters are reformatted in TypeScript variable declarations, moving the generic type to a separate line for improved readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_33\n\nLANGUAGE: typescript\nCODE:\n```\n-const durabilityMetricsSelectable: Immutable.OrderedSet<SomeReportingMetric> =\n-  myExperienceSelectable.concat(otherDurabilityMetricsSelectable);\n+const durabilityMetricsSelectable: Immutable.OrderedSet<\n+  SomeReportingMetric,\n+> = myExperienceSelectable.concat(otherDurabilityMetricsSelectable);\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Enum Member Use Before Declaration in TypeScript\nDESCRIPTION: Shows an example of using an enum member before its declaration, which is now reported by the noInvalidUseBeforeDeclaration rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_26\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n  B = A << 1,\n  A = 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Running Quick Test with Cargo\nDESCRIPTION: Shell command for running a quick test for a custom rule in the biome_js_analyze crate using Cargo.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_27\n\nLANGUAGE: shell\nCODE:\n```\ncd crates/biome_js_analyze\ncargo t quick_test\n```\n\n----------------------------------------\n\nTITLE: Grammar Legend for Ungrammar DSL\nDESCRIPTION: Legend explaining the syntax and notation used in .ungram grammar definition files for defining language syntax structures.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_parser/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n// This grammar specifies the structure of [LANGUAGE]'s concrete syntax tree.\n// It does not specify parsing rules (ambiguities, precedence, etc are out of scope).\n// Tokens are processed -- contextual keywords are recognised, compound operators glued.\n//\n// Legend:\n//\n//   //                    -- comment\n//   Name =                -- non-terminal definition\n//   'ident'               -- token (terminal)\n//   A B                   -- sequence\n//   A | B                 -- alternation\n//   A*                    -- zero or more repetition\n//   (A (',' A)* ','?)            -- repetition of node A separated by ',' and allowing a trailing comma\n//   (A (',' A)*)             -- repetition of node A separated by ',' without a trailing comma\n//   A?                    -- zero or one repetition\n//   (A)                   -- same as A\n//   label:A               -- suggested name for field of AST node\n```\n\n----------------------------------------\n\nTITLE: Variable Scope Check Example\nDESCRIPTION: Example showing how to properly check for global vs local variable scope in lint rules.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(); // <-- This should be reported because `console` is a global variable\nconst console = { log() {} };\nconsole.log(); // <-- This should not be reported because `console` is redeclared as a local variable\n```\n\n----------------------------------------\n\nTITLE: Handling Ambient Computed Member Names in TypeScript\nDESCRIPTION: Demonstrates how the noUndeclaredVariables rule now correctly handles ambient computed member names in TypeScript, allowing constants to be imported as types and used in computed member names.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_45\n\nLANGUAGE: typescript\nCODE:\n```\nimport type { NAME } from \"./constants.js\";\ntype X = { [NAME]: number };\n```\n\n----------------------------------------\n\nTITLE: Installing Biome via npm\nDESCRIPTION: Command to install Biome as a development dependency with exact version pinning.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.uk.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev --save-exact @biomejs/biome\n```\n\n----------------------------------------\n\nTITLE: Configuring VCS Integration in Rome\nDESCRIPTION: Example configuration for enabling version control system (VCS) integration in Rome, including options for the client type, ignore file usage, and VCS root path.\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"vcs\": {\n    \"enabled\": true,\n    \"clientKind\": \"git\",\n    \"useIgnoreFile\": true,\n    \"root\": \"/path/to/vcs/root\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Const Type Parameters\nDESCRIPTION: Shows formatting of const type parameters including correct modifier ordering for interface declarations.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_87\n\nLANGUAGE: typescript\nCODE:\n```\ninterface L<in const T> {}\n```\n\n----------------------------------------\n\nTITLE: Running Biome CLI to format files\nDESCRIPTION: This command demonstrates how to use the Biome CLI to format all JavaScript and TypeScript files in the current directory and its subdirectories.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nbiome format .\n```\n\n----------------------------------------\n\nTITLE: Parsing Type Arguments in TypeScript Expressions\nDESCRIPTION: Fixes parsing of type arguments in expressions, particularly for comparison operations that could be mistaken for type arguments.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_110\n\nLANGUAGE: typescript\nCODE:\n```\n0 < (0 >= 1);\n```\n\n----------------------------------------\n\nTITLE: Fixing JavaScript in Vue File Script Blocks\nDESCRIPTION: Diff showing how Biome lints and fixes the script section of Vue files, converting delete operations to undefined assignments for better code quality.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_90\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\n- delete a.b\n+ a.b = undefined\n<script>\n\n<template></template>\n```\n\n----------------------------------------\n\nTITLE: Configuration Override Merging Example\nDESCRIPTION: Examples demonstrating how configuration overrides are merged when using extended configurations.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_18\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"overrides\": [\n    {\n      \"include\": [\"**/*.json\"],\n      // ...\n    }\n  ]\n}\n```\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"extends\": [\"./biome.shared.json\"],\n  \"overrides\": [\n    {\n      \"include\": [\"**/*.ts\"],\n      // ...\n    }\n  ]\n}\n```\n\nLANGUAGE: json5\nCODE:\n```\n{\n  \"extends\": [\"./biome.shared.json\"],\n  \"overrides\": [\n    {\n      \"include\": [\"**/*.json\"],\n      // ...\n    },\n    {\n      \"include\": [\"**/*.ts\"],\n      // ...\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Biome Cache Directory Command\nDESCRIPTION: Command to print the cache directory location where Biome stores its log files.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_cli/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nbiome __print_cache_dir\n```\n\n----------------------------------------\n\nTITLE: Configuring User-Provided React Hooks for Dependency Tracking\nDESCRIPTION: Example configuration for useExhaustiveDependencies rule to track stable results from user-provided React hooks.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_72\n\nLANGUAGE: json\nCODE:\n```\n\"useExhaustiveDependencies\": {\n    \"level\": \"error\",\n    \"options\": {\n        \"hooks\": [{\n            \"name\": \"useMyState\",\n            \"stableResult\": [\n                1\n            ]\n        }]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Literal Values in JavaScript\nDESCRIPTION: These functions check for specific literal values in AST nodes, including null, true, and false. They use the isLiteral function for comparison.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_4\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isNullLiteral(node) {\n  return isLiteral(node, null);\n}\n\nfunction isBooleanLiteral(node) {\n  return isLiteral(node, true) || isLiteral(node, false);\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSS Formatting and Linting in Biome Check\nDESCRIPTION: Shows how to enable CSS formatting and linting features using the new CLI options in the check command.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_38\n\nLANGUAGE: shell\nCODE:\n```\nbiome check --css-formatter-enabled=true --css-linter-enabled=true ./\n```\n\n----------------------------------------\n\nTITLE: Deserializing Common Types in Rust with biome_deserialize\nDESCRIPTION: Examples of deserializing basic types like boolean, integer arrays, and hash maps from JSON strings. Shows how to use the deserialize_from_json_str function with different data structures.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/README.md#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_deserialize::json::deserialize_from_json_str;\nuse biome_deserialize::Deserialized;\nuse biome_json_parser::JsonParserOptions;\n\nlet json = \"false\";\nlet Deserialized {\n    deserialized,\n    diagnostics,\n} = deserialize_from_json_str::<bool>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert_eq!(deserialized, Some(false));\nassert!(diagnostics.is_empty());\n\nlet json = \"[0, 1]\";\nlet Deserialized {\n    deserialized,\n    diagnostics,\n} = deserialize_from_json_str::<Vec<u8>>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert_eq!(deserialized, Some(vec![0, 1]));\nassert!(diagnostics.is_empty());\n\nuse std::collections::HashMap;\nlet json = r#\"{ \"a\": 0, \"b\": 1 }\"#;\nlet Deserialized {\n    deserialized,\n    diagnostics,\n} = deserialize_from_json_str::<HashMap<String, u8>>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert_eq!(deserialized, Some(HashMap::from([(\"a\".to_string(), 0), (\"b\".to_string(), 1)]));\nassert!(diagnostics.is_empty());\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Test Declaration with Generic Type Parameter\nDESCRIPTION: Shows how to format a test declaration with a generic type parameter, breaking the parameter into multiple lines for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_83\n\nLANGUAGE: typescript\nCODE:\n```\ntest(\"does something really long and complicated so I have to write a very long name for the test\", <\n  T,\n>(done) => {\n  console.log(\"hello!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Migrating from ESLint Configuration Example\nDESCRIPTION: Example of an ESLint configuration that can be migrated to Biome using the new `biome migrate eslint` command. This shows a typical ESLint config with ignore patterns, globals, rules, and overrides.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_59\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"ignore_patterns\": [\"**/*.test.js\"],\n      \"globals\": { \"var2\": \"readonly\" },\n      \"rules\": {\n          \"eqeqeq\": \"error\"\n      },\n      \"overrides\": [{\n          \"files\": [\"lib/*.js\"],\n          \"rules\": {\n            \"default-param-last\": \"off\"\n          }\n      }]\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Syntax Tree Visitor\nDESCRIPTION: Example of implementing a custom syntax tree visitor for efficient node traversal in lint rules.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_24\n\nLANGUAGE: rust\nCODE:\n```\n// First, create a visitor struct that holds a stack of function syntax nodes and booleans\n#[derive(Default)]\nstruct MissingYieldVisitor {\n    stack: Vec<(AnyFunctionLike, bool)>,\n}\n\n// Implement the `Visitor` trait for this struct\nimpl Visitor for MissingYieldVisitor {\n    type Language = JsLanguage;\n\n    fn visit(\n        &mut self,\n        event: &WalkEvent<SyntaxNode<Self::Language>>,\n        mut ctx: VisitorContext<Self::Language>,\n    ) {\n        match event {\n            WalkEvent::Enter(node) => {\n                // When the visitor enters a function node, push a new entry on the stack\n                if let Some(node) = AnyFunctionLike::cast_ref(node) {\n                    self.stack.push((node, false));\n                }\n\n                if let Some((_, has_yield)) = self.stack.last_mut() {\n                    // When the visitor enters a `yield` expression, set the\n                    // `has_yield` flag for the top entry on the stack to `true`\n                    if JsYieldExpression::can_cast(node.kind()) {\n                        *has_yield = true;\n                    }\n                }\n            }\n            WalkEvent::Leave(node) => {\n                // When the visitor exits a function, if it matches the node of the top-most\n                // entry of the stack and the `has_yield` flag is `false`, emit a query match\n                if let Some(exit_node) = AnyFunctionLike::cast_ref(node) {\n                    if let Some((enter_node, has_yield)) = self.stack.pop() {\n                        debug_assert_eq!(enter_node, exit_node);\n                        if !has_yield {\n                            ctx.match_query(MissingYield(enter_node));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Export Specifier Formatting in JavaScript\nDESCRIPTION: Shows changes in formatting blank lines between export specifiers with comments. The diff removes extra blank lines between commented export specifiers.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nexport {\n  // a\n  foo1,\n  // b\n  bar1,\n  baz1,\n} from \"mod\";\n\nconst foo2 = 1;\nconst bar2 = 1;\nconst baz2 = 1;\n\nexport {\n  // a\n  foo2,\n  // b\n  bar2,\n  baz2,\n};\n```\n\n----------------------------------------\n\nTITLE: Using Empty Object Type for Non-nullable Generics\nDESCRIPTION: Example demonstrating how noBannedTypes now allows the use of {} to denote non-nullable generic types.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_158\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f<T extends {}>(x: T) {\n    assert(x != null);\n}\n```\n\n----------------------------------------\n\nTITLE: Running Biome check with auto-fix\nDESCRIPTION: Command to run Biome's check command on the src directory, which includes formatting, linting, and applying safe fixes. The --write flag enables auto-fixing.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.hi.md#2025-04-14_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\nnpx @biomejs/biome check --write ./src\n```\n\n----------------------------------------\n\nTITLE: Configuring Biome Formatter Options in JSON\nDESCRIPTION: Example of configuring Biome formatter options including line width and quote style for specific file patterns using the overrides feature.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_132\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatter\": {\n    \"lineWidth\": 100\n  },\n  \"overrides\": [\n    {\n      \"include\": [\"generated/**\"],\n      \"formatter\": {\n        \"lineWidth\": 160\n      },\n      \"javascript\": {\n        \"formatter\": {\n          \"quoteStyle\": \"single\"\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Reporting Namespace Imports with noNamespaceImport Rule\nDESCRIPTION: Code example showing namespace imports that would be flagged by the noNamespaceImport rule. This rule encourages more specific imports instead of importing entire namespaces.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as foo from \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Defining Rule Options in Rust\nDESCRIPTION: Illustrates how to create Rust data structures to represent rule options. This includes using the Deserializable trait and custom types for options.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_14\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_deserialize_macros::Deserializable;\n\n#[derive(Clone, Debug, Default, Deserializable)]\npub struct MyRuleOptions {\n    behavior: Behavior,\n    threshold: u8,\n    behavior_exceptions: Box<[Box<str>]>\n}\n\n#[derive(Clone, Debug, Default, Deserializable)]\npub enum Behavior {\n    #[default]\n    A,\n    B,\n    C,\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Abstract Properties in TypeScript Classes\nDESCRIPTION: Demonstrates differences in formatting the ordering of 'abstract' and 'private' modifiers in class property declarations. The main change is in the order of modifiers, with 'abstract' being placed before 'private' in some cases, and single quotes being used for string literals instead of double quotes.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class Foo {\n-  private abstract a: 1;\n+  abstract private a: 1;\n   private abstract b: 2;\n   static abstract c: 3;\n-  private abstract [\"g\"];\n-  private abstract [\"h\"];\n-  static abstract [\"i\"];\n+  abstract private ['g'];\n+  private abstract ['h'];\n+  static abstract ['i'];\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting Imports with Protocol Specifiers\nDESCRIPTION: Example of how imports with protocol specifiers are sorted after npm: modules and before URL modules.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_74\n\nLANGUAGE: diff\nCODE:\n```\nimport express from \"npm:express\";\n- import Component from \"./component.js\"\n- import { sortBy } from \"virtual:utils\";\n+ import { sortBy } from \"virtual:utils\";\n+ import Component from \"./component.js\"\n```\n\n----------------------------------------\n\nTITLE: Simplifying Chain Expressions in TypeScript\nDESCRIPTION: Shows modifications to optional chaining and non-null assertions in member expressions and call expressions. The changes generally move non-null assertions closer to the accessed property.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_58\n\nLANGUAGE: typescript\nCODE:\n```\n-(a?.b)!.foo;\n-(a?.b)!.foo;\n+a?.b!.foo;\n+a?.b!.foo;\n(a!?.b).foo;\n```\n\n----------------------------------------\n\nTITLE: Using JSX Fragments with Text for Props\nDESCRIPTION: JavaScript code demonstrating valid usage of JSX fragments that contains only text in prop attributes, which the noUselessFragments rule now handles correctly.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nexport function SomeComponent() {\n  return <div x-some-prop={<>Foo</>} />;\n}\n```\n\n----------------------------------------\n\nTITLE: Breaking Configuration Change for Rules\nDESCRIPTION: Example showing the removal of nested rules field from configuration structure\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"linter\": {\n    \"enabled\": true,\n    \"rules\": {\n      \"js\": {\n+        \"noDebugger\": \"off\"\n-        \"rules\": {\n-          \"noDebugger\": \"off\"\n-        },\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling JSON Comments in Biome\nDESCRIPTION: JSON configuration example to enable parsing of comments inside JSON files.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_152\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json\": {\n    \"parser\": {\n      \"allowComments\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Linting files with Biome\nDESCRIPTION: Command to lint files in the src directory using Biome.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.hi.md#2025-04-14_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\nnpx @biomejs/biome lint ./src\n```\n\n----------------------------------------\n\nTITLE: Implementing Deserializable for Custom Struct in Rust\nDESCRIPTION: Complete example showing how to implement JSON deserialization for a Person struct using Biome's deserialization framework. Demonstrates visitor pattern implementation, custom field parsing, and error handling. Includes validation of input keys and type conversion for string and numeric fields.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/README.md#2025-04-14_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_deserialize::{DeserializationDiagnostic, Deserializable, DeserializationContext, DeserializableValue, DeserializationVisitor, Text, DeserializableTypes};\nuse biome_rowan::TextRange;\n\n#[derive(Debug, Default, Eq, PartialEq, Clone)]\npub struct Person { name: String, age: u8 }\n\nimpl Deserializable for Person {\n    fn deserialize(\n        ctx: &mut impl DeserializationContext,\n        value: &impl DeserializableValue,\n        name: &str,\n    ) -> Option<Self> {\n        // Delegate the deserialization to `PersonVisitor`.\n        // `value` will call the `PersonVisitor::viist_` method that corresponds to its type.\n        value.deserialize(ctx, PersonVisitor, name)\n    }\n}\n\nstruct PersonVisitor;\nimpl DeserializationVisitor for PersonVisitor {\n    // The visitor deserialize a [Person].\n    type Output = Person;\n\n    // We expect a `map` as data type.\n    const EXPECTED_TYPE: DeserializableTypes = DeserializableTypes::MAP;\n\n    // Because we expect a `map`, we have to implement the associated method `visit_map`.\n    fn visit_map(\n        self,\n        ctx: &mut impl DeserializationContext,\n        // Iterator of key-value pairs.\n        members: impl Iterator<Item = Option<(impl DeserializableValue, impl DeserializableValue)>>,\n        // range of the map in the source text.\n        range: TextRange,\n        _name: &str,\n    ) -> Option<Self::Output> {\n        let mut result = Person::default();\n        for (key, value) in members.flatten() {\n            // Try to deserialize the key as a string.\n            // We use `Text` to avoid an heap-allocation.\n            let Some(key_text) = Text::deserialize(ctx, &key, \"\") else {\n                // If this failed, then pass to the next key-value pair.\n                continue;\n            };\n            match key_text.text() {\n                \"name\" => {\n                    if let Some(name) = String::deserialize(ctx, &value, &key_text) {\n                        result.name = name;\n                    }\n                },\n                \"age\" => {\n                    if let Some(age) = u8::deserialize(ctx, &value, &key_text) {\n                        result.age = age;\n                    }\n                },\n                unknown_key => {\n                    const ALLOWED_KEYS: &[&str] = &[\"name\"];\n                    ctx.report(DeserializationDiagnostic::new_unknown_key(\n                        unknown_key,\n                        key.range(),\n                        ALLOWED_KEYS,\n                    ));\n                }\n            }\n        }\n        Some(result)\n    }\n}\n\nuse biome_deserialize::json::deserialize_from_json_str;\nuse biome_json_parser::JsonParserOptions;\n\nlet source = r#\"{ \"name\": \"Isaac Asimov\" }\"#;\nlet deserialized = deserialize_from_json_str::<Person>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert!(!deserialized.has_errors());\nassert_eq!(deserialized.into_deserialized(), Some(Person { name: \"Isaac Asimov\".to_string() }));\n```\n\n----------------------------------------\n\nTITLE: Checking for Literal Node Types in JavaScript\nDESCRIPTION: This function checks if a given AST node is a literal of a specific type. It supports checking for string, number, bigint, boolean, regex, and null literals.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isLiteral(node, value) {\n  return (\n    node.type === \"Literal\" &&\n    node.value === value &&\n    typeof node.value === typeof value\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring LSP client to use custom Biome binary\nDESCRIPTION: Example of configuring an LSP client (like VSCode or Zed) to use a custom Biome binary.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_15\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"biome.lspBin\": \"/Users/john/www/biome/target/debug/biome\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Tuple and Record Expressions\nDESCRIPTION: Shows how TypeScript cast expressions with tuples and records are formatted, changing the indentation and line breaks for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_56\n\nLANGUAGE: typescript\nCODE:\n```\nbreakAfterCast = <PermissionsChecker<any> | undefined>(\n  (<any>permissions)[receiverType]\n);\nbreakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);\n\ntestObjLiteral = <PermissionsChecker<any> | undefined>{ prop1: \"myPropVal\" };\ntestObjLiteral =  <PermissionsChecker<any> | undefined>\n#\n{\n  prop1: \"myPropVal\";\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring File Inclusion in Biome\nDESCRIPTION: Example showing how to configure file inclusion patterns in Biome's configuration file, specifically for including only the 'src' directory.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_79\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": {\n    \"include\": [\"src\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing noUselessElse Rule to Preserve Comments in JavaScript\nDESCRIPTION: Code examples showing the improvement for issue #1191 where noUselessElse now preserves comments from the else clause when applying automated fixes. Previously, comments would be removed with the else statement.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_125\n\nLANGUAGE: diff\nCODE:\n```\n  function f(x) {\n    if (x <0) {\n      return 0;\n    }\n-   // Comment\n-   else {\n      return x;\n-   }\n  }\n```\n\nLANGUAGE: diff\nCODE:\n```\n  function f(x) {\n    if (x <0) {\n      return 0;\n    }\n    // Comment\n-   else {\n      return x;\n-   }\n  }\n```\n\n----------------------------------------\n\nTITLE: Fixing Exponentiation Operator Suggestions in JavaScript\nDESCRIPTION: Example of the useExponentiationOperator rule suggestion, now correctly adding parentheses to maintain the original expression's meaning.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_144\n\nLANGUAGE: js\nCODE:\n```\n- 1 +Math.pow(++a, 2)\n+ 1 +(++a) ** 2\n```\n\n----------------------------------------\n\nTITLE: Valid Use of Delete with Dataset Properties\nDESCRIPTION: JavaScript code showing a valid use of the delete operator with dataset properties, which is now correctly handled by the noDelete rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\ndelete element.dataset.prop;\n```\n\n----------------------------------------\n\nTITLE: Running Prettier Tests with Cargo\nDESCRIPTION: Command to explicitly run the Prettier test suite within the biome_css_formatter package.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_css_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo test -p biome_css_formatter --test prettier_tests\n```\n\n----------------------------------------\n\nTITLE: Formatting Non-Block If Statements with Comments\nDESCRIPTION: This code example shows how Biome formats if statements with non-block bodies (like for loops and do-while loops) followed by comments, compared to Prettier.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n if (foo)\n   for (i = 2; i > 0; i--) console.log(i); // foo\n else bar();\n \n if (foo)\n   do {\n     console.log(i);\n-  } while (i--);\n-// foo\n+  } while (i--); // foo\n else bar();\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Valid Enum Member Reference in TypeScript\nDESCRIPTION: Shows a direct reference to an enum member that is no longer reported as an undeclared variable by the noUndeclaredVariables rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_28\n\nLANGUAGE: typescript\nCODE:\n```\nenum E {\n  A = 1,\n  B = A << 1,\n}\n```\n\n----------------------------------------\n\nTITLE: Preserving Comments in Exponentiation Operator Conversion\nDESCRIPTION: The useExponentiationOperator rule now preserves more comments when converting Math.pow() to the exponentiation operator. It maintains comments following optional trailing commas.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_122\n\nLANGUAGE: diff\nCODE:\n```\n- Math.pow(\n-    a, // a\n-    2, // 2\n-  );\n+\n+    a ** // a\n+    2 // 2\n+\n```\n\n----------------------------------------\n\nTITLE: Configuration Pattern Example - JSON\nDESCRIPTION: Example showing how to configure ignore patterns for formatter and linter using Unix shell style patterns in rome.json\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"formatter\": {\n    \"ignore\": [\"scripts/*.js\"]\n  },\n  \"linter\": {\n    \"ignore\": [\"src/**.test.{ts,js}\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Import Assertion Syntax in JavaScript\nDESCRIPTION: Example of the change in import assertion syntax from 'assert' to 'with' in JavaScript modules.\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n- import \"module\" assert {}\n+ import \"module\" with {}\n```\n\n----------------------------------------\n\nTITLE: Package Configuration for Biome Extensions\nDESCRIPTION: Example package.json configuration for resolving Biome configuration files from node_modules directory.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_82\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"name\": \"@org/configs\",\n  \"exports\": {\n    \"./biome\": \"./biome.json\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Member Chain Calls in JavaScript\nDESCRIPTION: This snippet shows changes to the formatting of long member chain calls, including handling of comments and line breaks between method calls.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nfooBar\n  .doSomething(\"Hello World\")\n  .doAnotherThing(\"Foo\", { foo: bar })\n\n  // App configuration.\n  .doOneMoreThing(config)\n\n  .run(() => console.log(\"Bar\"));\n\nbigDeal\n\n  .doSomething(\"Hello World\")\n\n  // Hello world\n  .doAnotherThing(\"Foo\", { foo: bar })\n\n  // App configuration.\n  .doOneMoreThing(config)\n\n  .run(() => console.log(\"Bar\"));\n\nfoo.bar.baz\n\n  .doSomething(\"Hello World\")\n\n  // Hello world\n  .foo.bar.doAnotherThing(\"Foo\", { foo: bar })\n\n  .doOneMoreThing(config)\n  .bar.run(() => console.log(\"Bar\"));\n\n(somethingGood ? thisIsIt : maybeNot)\n\n  // Hello world\n  .doSomething(\"Hello World\")\n\n  .doAnotherThing(\"Foo\", { foo: bar }) // Run this\n  .run(() => console.log(\"Bar\")); // Do this\n\nhelloWorld\n\n  .text()\n\n  .then((t) => t);\n\n(\n  veryLongVeryLongVeryLong ||\n  anotherVeryLongVeryLongVeryLong ||\n  veryVeryVeryLongError\n)\n\n  .map((tickets) => TicketRecord.createFromSomeLongString())\n\n  .filter((obj) => !!obj);\n\nconst sel = this.connections\n\n  .concat(this.activities.concat(this.operators))\n  .filter((x) => x.selected);\n\nObject.entries(obj).forEach((e) => console.log(e));\n\nthis.fetch(\"/foo\").then((response) => response.json());\n```\n\n----------------------------------------\n\nTITLE: Formatting JSDoc Comments in JavaScript\nDESCRIPTION: Shows the reformatting of multiple JSDoc comment blocks to improve readability by splitting adjacent comment blocks onto separate lines. Each comment block describes different aspects of a connection status system.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst CONNECTION_STATUS = (exports.CONNECTION_STATUS = {\n   CLOSED: Object.freeze({ kind: \"CLOSED\" }),\n   CONNECTED: Object.freeze({ kind: \"CONNECTED\" }),\n   CONNECTING: Object.freeze({ kind: \"CONNECTING\" }),\n   NOT_CONNECTED: Object.freeze({ kind: \"NOT_CONNECTED\" }),\n });\n\n/* A comment */\n/**\n  * A type that can be written to a buffer.\n */\n/**\n  * Describes the connection status of a ReactiveSocket/DuplexConnection.\n  * - NOT_CONNECTED: no connection established or pending.\n  * - CONNECTING: when `connect()` has been called but a connection is not yet\n  *   established.\n  * - CONNECTED: when a connection is established.\n  * - CLOSED: when the connection has been explicitly closed via `close()`.\n  * - ERROR: when the connection has been closed for any other reason.\n */\n/**\n  * A contract providing different interaction models per the [ReactiveSocket protocol]\n  * (https://github.com/ReactiveSocket/reactivesocket/blob/master/Protocol.md).\n */\n/**\n  * A single unit of data exchanged between the peers of a `ReactiveSocket`.\n */\n```\n\n----------------------------------------\n\nTITLE: Installing Biome via npm\nDESCRIPTION: Command to install Biome as a development dependency using npm. The --save-exact flag ensures the exact version is saved to package.json.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.hi.md#2025-04-14_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\nnpm install --save-dev --save-exact @biomejs/biome\n```\n\n----------------------------------------\n\nTITLE: Installing Node Dependencies for Benchmarks\nDESCRIPTION: Command to install the required Node.js dependencies using pnpm before running benchmarks.\nSOURCE: https://github.com/biomejs/biome/blob/main/benchmark/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm i\n```\n\n----------------------------------------\n\nTITLE: Handling Variable Usage Before Assignment in JavaScript\nDESCRIPTION: Example showing a variable that is read before its assignment, which is now correctly ignored by the useConst rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nlet x;\nx; // read\nx = 0; // write\n```\n\n----------------------------------------\n\nTITLE: Formatting For-In Loops with Initializers in JavaScript\nDESCRIPTION: This snippet shows formatting for for loops with 'in' expressions in initializers, demonstrating Biome's preferences for parentheses placement compared to Prettier's formatting.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_17\n\nLANGUAGE: diff\nCODE:\n```\n // https://github.com/babel/babel/blob/HEAD/packages/babel-generator/test/fixtures/parentheses/in-inside-for/input.js\n \n for (var a = (b in c) in {});\n-for (var a = (1 || b in c) in {});\n-for (var a = (1 + (2 || b in c)) in {});\n-for (var a = (() => b in c) in {});\n-for (var a = (1 || (() => b in c)) in {});\n-for (var a = (() => {\n+for (var a = 1 || (b in c) in {});\n+for (var a = 1 + (2 || (b in c)) in {});\n+for (var a = () => (b in c) in {});\n+for (var a = 1 || (() => (b in c)) in {});\n+for (var a = () => {\n   b in c;\n-}) in {});\n-for (var a = ([b in c]) in {});\n-for (var a = ({ b: b in c }) in {});\n+} in {});\n+for (var a = [(b in c)] in {});\n+for (var a = { b: (b in c) } in {});\n // Meriyah can't parse\n // for (var a = (x = b in c) => {} in {});\n-for (var a = (class extends (b in c) {}) in {});\n-for (var a = (function (x = b in c) {}) in {});\n+for (var a = class extends (b in c) {} in {});\n+for (var a = function (x = (b in c)) {} in {});\n```\n\n----------------------------------------\n\nTITLE: Simplifying Optional Chaining with Non-null Assertions\nDESCRIPTION: Shows formatting changes for optional chaining combined with non-null assertions, removing redundant parentheses while preserving the same functionality.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_52\n\nLANGUAGE: diff\nCODE:\n```\n a?.b!.c;\n a?.b!.c.d;\n a?.b.c!.d;\n a!.b?.c;\n a?.b!?.c;\n a?.b!.c?.c;\n-(a?.b)!.c;\n-(a?.b)!.c;\n+a?.b!.c;\n+a?.b!.c;\n \n a?.().b!.c;\n a?.().b!.c.d;\n a?.().b.c!.d;\n a?.().b!?.c;\n a?.().b!.c?.c;\n-(a?.().b)!.c;\n-(a?.().b)!.c;\n+a?.().b!.c;\n+a?.().b!.c;\n \n-(a?.b)![c?.d!];\n+a?.b![c?.d!];\n```\n\n----------------------------------------\n\nTITLE: Running Parser Benchmarks and Comparing Results in Bash\nDESCRIPTION: Series of commands to run parser benchmarks on main and PR branches, then compare results using critcmp. This can be used for both js_parser and css_parser.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ncargo bench --bench js_parser -- --save-baseline main # You can also use css_parser\ngit checkout -\ncargo bench --bench js_parser -- --save-baseline pr # You can also use css_parser\ncritcmp main pr\n```\n\n----------------------------------------\n\nTITLE: Configuring Fix Safety for Code Actions\nDESCRIPTION: Shows how to configure whether a rule's code actions are considered 'safe' or 'unsafe', which affects how automatically they can be applied.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_analyze::FixKind;\ndeclare_lint_rule!{\n  fix_kind: FixKind::Safe,\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Generic Arrow Functions\nDESCRIPTION: Demonstrates how TypeScript generic arrow functions are formatted, particularly removing trailing commas from type parameter lists and maintaining comment positioning.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo1 =\n  // comment\n    <T>() =>\n    () =>\n      1;\n\nconst foo2 =\n  // comment\n  () => () => 1;\n\nconst foo3 =\n  // comment\n  <T>() => 1;\n\nfoo(\n  // comment\n  <T>() =>\n    () =>\n      1,\n);\n\na ||\n  // comment\n  (<T>() =>\n    () =>\n      1);\n\nvoid (\n  // comment\n  (<T>() =>\n    () =>\n      1)\n);\n\ncond\n  ? // comment\n    <T>() =>\n      () =>\n        1\n  : // comment\n    <T>() =>\n      () =>\n        1;\n\nfoo4 =\n  // comment\n    <T>() =>\n    () =>\n      1;\n```\n\n----------------------------------------\n\nTITLE: Import Attribute Keyword Detection\nDESCRIPTION: Handles formatting of import statements with assert/with keywords and associated comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./test.json\" /* assert */ with { /* assert */ type: \"json\" };\nimport {} from \"./test.json\" /* assert */ with { /* assert */ type: \"json\" };\nimport \"./test.json\" /* with */ assert { /* with */ type: \"json\" };\nimport {} from \"./test.json\" /* with */ assert { /* with */ type: \"json\" };\n\nexport {} from \"./test.json\" /* assert */ with { /* assert */ type: \"json\" };\nexport {} from \"./test.json\" /* with */ assert { /* with */ type: \"json\" };\n\nexport * from \"./test.json\" /* assert */ with { /* assert */ type: \"json\" };\nexport * from \"./test.json\" /* with */ assert { /* with */ type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Using Focused Tests in JavaScript Testing Frameworks\nDESCRIPTION: Code example showing the focused test syntax that would be flagged by the noFocusedTests rule. This rule prevents developers from accidentally committing focused tests that skip other tests.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.only(\"test\", () => {});\nit.only(\"test\", () => {});\n```\n\n----------------------------------------\n\nTITLE: React Button Type Validation Example\nDESCRIPTION: Demonstrates valid usage of button type in React createElement calls that are no longer reported as errors.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nReact.createElement(\"button\", { type: \"button\" }, \"foo\")\n```\n\n----------------------------------------\n\nTITLE: Adjusting Import Attributes Formatting in JavaScript\nDESCRIPTION: This snippet shows changes in formatting import statements with attributes, particularly focusing on the placement of comments and the 'with' keyword.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nimport \"./test.json\" /* assert */ with { /* assert */ type: \"json\" };\nimport {} from \"./test.json\" /* assert */ with { /* assert */ type: \"json\" };\nimport \"./test.json\" /* with */ assert { /* with */ type: \"json\" };\nimport {} from \"./test.json\" /* with */ assert { /* with */ type: \"json\" };\n\nexport {} from \"./test.json\" /* assert */ with { /* assert */ type: \"json\" };\nexport {} from \"./test.json\" /* with */ assert { /* with */ type: \"json\" };\n\nexport * from \"./test.json\" /* assert */ with { /* assert */ type: \"json\" };\nexport * from \"./test.json\" /* with */ assert { /* with */ type: \"json\" };\n```\n\n----------------------------------------\n\nTITLE: Configuring Biome to Ignore Unknown Files\nDESCRIPTION: JSON configuration example to set Biome to ignore unknown files, preventing diagnostics for files it can't handle.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_148\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"files\": {\n      \"ignoreUnknown\": true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Biome CLI with Error on Warnings Option\nDESCRIPTION: Shell command example showing how to use the new --error-on-warnings option with the Biome check command.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_151\n\nLANGUAGE: shell\nCODE:\n```\nbiome check --error-on-warnings ./src\n```\n\n----------------------------------------\n\nTITLE: Preparing Prettier Tests for Biome\nDESCRIPTION: Node.js command to extract Prettier test snapshots into plain files for use in Rust tests. This script processes the Prettier repository and formats the tests for Biome's test suite.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_json_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode crates/biome_json_formatter/tests/specs/prettier/prepare_tests.js <prettier root directory>\n```\n\n----------------------------------------\n\nTITLE: Parameter Decorators in Class Methods\nDESCRIPTION: Example showing the newly supported syntax for decorators in class method parameters, which requires enabling via configuration as it's non-standard syntax.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_169\n\nLANGUAGE: javascript\nCODE:\n```\nclass AppController {\n   get(@Param() id) {}\n   // ^^^^^^^^ new supported syntax\n}\n```\n\n----------------------------------------\n\nTITLE: Merging Default Function Export with Interface in TypeScript\nDESCRIPTION: Example showing interface and default function export with the same name, which are now correctly merged and no longer reported as redeclarations.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_53\n\nLANGUAGE: typescript\nCODE:\n```\ninterface Foo {}\nexport default function Foo() {}\n```\n\n----------------------------------------\n\nTITLE: Checking for String Literal Node in JavaScript\nDESCRIPTION: This function determines if a given AST node is specifically a string literal. It checks both the node type and ensures the value is a string.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isStringLiteral(node) {\n  return node.type === \"Literal\" && typeof node.value === \"string\";\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Parameter Redeclaration in Function Bodies with TypeScript\nDESCRIPTION: Example showing parameter redeclaration detection in function bodies, which is now reported by the noRedeclare rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_51\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f<T>(a) {\n  type T = number; // redeclaration\n  const a = 0; // redeclaration\n}\n```\n\n----------------------------------------\n\nTITLE: Reformatting Conditional Statements in JavaScript\nDESCRIPTION: This snippet demonstrates changes in formatting conditional statements, particularly for if-else chains with inline comments and expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nif (a === 0)\n  doSomething(); // comment A1\nelse if (a === 1)\n  doSomethingElse(); // comment B1\nelse if (a === 2) doSomethingElse(); // comment C1\n\nif (a === 0) doSomething(); /* comment A2 */\nelse if (a === 1) doSomethingElse(); /* comment B2 */\nelse if (a === 2) doSomethingElse(); /* comment C2 */\n```\n\n----------------------------------------\n\nTITLE: Enhancing useTemplate Rule for Template Literal Concatenation\nDESCRIPTION: Code example showing the enhancement for issue #1456 where useTemplate now reports expressions that concatenate template literals with non-string expressions, improving template literal usage.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_128\n\nLANGUAGE: javascript\nCODE:\n```\n`a${1}` + 2;\n```\n\n----------------------------------------\n\nTITLE: Reformatting Ternary Expression with Await\nDESCRIPTION: This snippet shows a change in the formatting of a ternary expression involving an await statement, moving from a multi-line to a more compact format.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nstopDirectory = await (useCache\n  ? memoizedFindProjectRoot\n  : findProjectRootWithoutCache)(path.dirname(path.resolve(filePath)));\n```\n\n----------------------------------------\n\nTITLE: Configuring Biome to Disable Organize Imports\nDESCRIPTION: JSON configuration example to disable the organize imports feature in Biome, which is now enabled by default.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_145\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"organizeImports\": {\n    \"enabled\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Useless Type Qualifiers in Type Imports and Exports\nDESCRIPTION: Demonstrates the fix proposed by the useImportType and useExportType rules to remove redundant inline type qualifiers in import and export statements.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\n- import type { type A, B } from \"\";\n+ import type { A, B } from \"\";\n\n- export type { type C, D };\n+ export type { C, D };\n```\n\n----------------------------------------\n\nTITLE: Configuring File Ignore Patterns in Biome\nDESCRIPTION: Configuration example demonstrating how to properly ignore directories while including specific paths using both include and ignore patterns.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_80\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"files\": {\n    \"include\": [\"src\"],\n    \"ignore\": [\"test\"]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Optional Chaining and Non-null Assertions in TypeScript\nDESCRIPTION: Demonstrates how optional chaining (?.) and non-null assertions (!) are formatted when used together in various expression contexts, particularly simplifying parentheses.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_57\n\nLANGUAGE: typescript\nCODE:\n```\n// Member expressions\na?.b!();\na?.b!();\n(a!?.b)();\na.b?.c!();\na.b?.c!();\n(a.b!?.c)();\n(a!.b?.c)();\na?.b.c!();\na?.b.c!();\na?.b!.c();\n(a!?.b.c)();\na[b?.c]!();\na[b?.c]!();\na[b?.c!]();\na[b!?.c]();\n(a?.b).c!();\n(a?.b).c!();\n// FIXME: ((a?.b!).c)   ();\n(a!?.b).c();\na[b?.()]!();\na[b?.()]!();\na[b?.()!]();\na[b!?.()]();\na![b?.()]();\n(a?.b).c!();\n(a?.b).c!();\n// FIXME: ((a?.b)!.c)   ();\n// FIXME: ((a?.b!).c)   ();\n(a!?.b).c();\n(a?.()).b!();\n(a?.()).b!();\na?.()!.b();\na?.()!.b();\n(a!?.()).b();\n\n// Call expressions\na?.()!();\na?.()!();\n(a!?.())();\na.b.c?.()!();\na.b.c?.()!();\n(a.b.c!?.())();\na.b?.c()!();\na.b?.c()!();\n(a.b!?.c())();\na?.b.c()!();\na?.b.c()!();\na?.b!.c()();\na(b?.c)!();\na(b?.c)!();\na(b?.c!)();\n(a?.b)()!();\n(a?.b)()!();\na?.b!()();\na?.b!()();\n(a?.())()!();\n(a?.())()!();\na?.()!()();\na?.()!()();\n(a!?.())()();\n\n// Not `.callee`\nfoo(a?.b!);\n```\n\n----------------------------------------\n\nTITLE: Handling Function Overloads in TypeScript Object Types\nDESCRIPTION: Example showing function overloads in object types, which are now correctly handled and no longer reported as redeclarations by the noRedeclare rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_52\n\nLANGUAGE: typescript\nCODE:\n```\ntype Overloads = {\n  ({ a }: { a: number }): number,\n  ({ a }: { a: string }): string,\n};\n```\n\n----------------------------------------\n\nTITLE: Rome Formatter Configuration Example\nDESCRIPTION: JSON configuration example for customizing Rome's formatter defaults\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"root\": true,\n  \"formatter\": {\n    \"indentStyle\": \"space\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Barrel Files with noBarrelFile Rule\nDESCRIPTION: Code example showing barrel file pattern that would be flagged by the noBarrelFile rule. This rule discourages the use of files that re-export all from another module.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nexport * from \"foo\";\n```\n\n----------------------------------------\n\nTITLE: Using --only Option with Biome Lint Command\nDESCRIPTION: Demonstrates how to use the new --only option to run specific rules or rule groups with the lint command.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_35\n\nLANGUAGE: shell\nCODE:\n```\nbiome lint --only=style/useNamingConvention --only=style/noInferrableTypes\n```\n\n----------------------------------------\n\nTITLE: Formatting JSX with Await Expressions\nDESCRIPTION: This snippet demonstrates formatting changes for JSX fragments containing await expressions, particularly focusing on how long expressions are wrapped and parenthesized.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_29\n\nLANGUAGE: jsx\nCODE:\n```\nasync function testFunction() {\n  const short = (\n    <>\n      {await Promise.all(hierarchyCriticism)}\n      {await hierarchyCriticism.ic.me.oa.p}\n      {await hierarchyCriticism}\n\n      {Promise.all(hierarchyCriticism)}\n      {hierarchyCriticism.ic.me.oa.p}\n      {hierarchyCriticism}\n    </>\n  );\n\n  const long = (\n    <>\n-      {await Promise.all(\n-        hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter,\n-      )}\n      {\n+        await Promise.all(\n+          hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter,\n+        )\n+      }\n+      {\n        await hierarchyCriticism.IncongruousCooperate.MaterialEducation\n          .OriginalArticulate.Parameter\n      }\n      {\n        await hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter\n      }\n\n      {Promise.all(\n        hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter,\n      )}\n      {\n        hierarchyCriticism.IncongruousCooperate.MaterialEducation\n          .OriginalArticulate.Parameter\n      }\n      {\n        hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter\n      }\n    </>\n  );\n\n  const jsx = (\n    <>\n-      {await (\n-        <IncongruousCooperate>\n-          material education original articulate parameter\n-        </IncongruousCooperate>\n-      )}\n+      {\n+        await (\n+          <IncongruousCooperate>\n+            material education original articulate parameter\n+          </IncongruousCooperate>\n+        )\n+      }\n    </>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Updating useHookAtTopLevel Rule Configuration in JSON\nDESCRIPTION: Example of updating the configuration for the useHookAtTopLevel rule in Biome. The rule options are being deprecated in favor of a simpler configuration.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_131\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n      \"correctness\": {\n+        \"useHookAtTopLevel\": \"error\",\n-        \"useHookAtTopLevel\": {\n-          \"level\": \"error\",\n-          \"options\": {\n-            \"hooks\": [\n-              {\n-                \"name\": \"useLocation\",\n-                \"closureIndex\": 0,\n-                \"dependenciesIndex\": 1\n-              },\n-              { \"name\": \"useQuery\", \"closureIndex\": 1, \"dependenciesIndex\": 0 }\n-            ]\n-          }\n-        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: React Fragment Containing HTML Escapes in JSX\nDESCRIPTION: Example of a React fragment containing HTML entities inside expression escapes that is now correctly handled by the noUselessFragments rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\nfunction Component() {\n  return (\n    <div key={index}>{line || <>&nbsp;</>}</div>\n  )\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting JSDoc Nestled Comment Formatting\nDESCRIPTION: Separates nestled JSDoc comments by adding line breaks between consecutive comment blocks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n {\n   {\n     {\n       {\n         {\n           {\n             {\n               o = {\n                 /**\n                  * A\n-                 *//**\n+                 */\n+                /**\n                  * B\n                  */\n               };\n             }\n           }\n         }\n       }\n     }\n   }\n }\n\n```\n\n----------------------------------------\n\nTITLE: HTML Test Language Implementation\nDESCRIPTION: Basic implementation of the TestFormatLanguage trait for HTML formatting tests.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_12\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_formatter_test::TestFormatLanguage;\n\n#[derive(Default)]\npub struct HtmlTestFormatLanguage {\n}\n\nimpl TestFormatLanguage for HtmlTestFormatLanguage {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Biome via npm\nDESCRIPTION: Command to install Biome as a development dependency using npm. The --save-exact flag ensures the exact version is saved.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev --save-exact @biomejs/biome\n```\n\n----------------------------------------\n\nTITLE: Applying Fix for Linting with Biome Class\nDESCRIPTION: Support for applying lint fixes when calling the lintContent method of the Biome class, as contributed in PR #1956.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_67\n\nLANGUAGE: typescript\nCODE:\n```\n// Example usage of lintContent method with fix option\nconst biome = new Biome();\nconst result = await biome.lintContent(content, { fix: true });\n```\n\n----------------------------------------\n\nTITLE: Running Formatter Benchmark Suite\nDESCRIPTION: Command to execute the benchmark suite that compares formatting performance between Biome and other formatters.\nSOURCE: https://github.com/biomejs/biome/blob/main/benchmark/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnode bench.js formatter\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Conditional Type Aliases\nDESCRIPTION: Demonstrates proper line breaking and indentation for complex conditional type expressions to improve readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_86\n\nLANGUAGE: typescript\nCODE:\n```\ntype FallbackFlags<F extends Flags | undefined> = Equals<\n  NonNullableFlag<F>[\"flags\"],\n  {}\n> extends true\n  ? Dict<any>\n  : NonNullableFlag<F>[\"flags\"];\n\nexport type UnPromise<Type extends Promise<unknown>> = Type extends Promise<\n  infer Generic\n>\n  ? Generic\n  : never;\n\nexport type Equals<X, Y> = (<T>() => T extends X ? 1 : 2) extends <\n  T,\n>() => T extends Y ? 1 : 2\n  ? true\n  : false;\n\nexport type _Repeat<\n  A extends any,\n  N extends number,\n  L extends List = [],\n> = __Repeat<N, A, L> extends infer X ? Cast<X, List> : never;\n```\n\n----------------------------------------\n\nTITLE: Using Biome CLI with No Errors on Unmatched Option\nDESCRIPTION: Shell command example showing how to use the new --no-errors-on-unmatched option with the Biome format command.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_147\n\nLANGUAGE: shell\nCODE:\n```\nbiome format --no-errors-on-unmatched ./src\n```\n\n----------------------------------------\n\nTITLE: Adjusting Comment Placement in Arrow Functions\nDESCRIPTION: Shows proper formatting for comments after arrow function bodies, particularly moving trailing comments before the semicolon rather than after it.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_54\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn1 = () => {\n  return;\n} /* foo */;\n\nconst fn2 = () => {\n  return;\n};\n\n// foo\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused Variable Detection with Self-Writes in JavaScript\nDESCRIPTION: Example showing how the noUnusedVariables rule can detect unused variables even when they have self-write operations, which are operations that only modify the variable itself without using its value elsewhere.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_135\n\nLANGUAGE: javascript\nCODE:\n```\nlet a = 0;\na++;\na += 1;\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Interface Extensions and Breaks\nDESCRIPTION: Shows how Biome formats interfaces that extend other interfaces, particularly focusing on line breaks and trailing commas in generic type arguments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_48\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Environment1 extends GenericEnvironment<\n  SomeType,\n  AnotherType,\n  YetAnotherType,\n> {\n  m(): void;\n}\nexport class Environment2 extends GenericEnvironment<\n  SomeType,\n  AnotherType,\n  YetAnotherType,\n  DifferentType1,\n  DifferentType2,\n  DifferentType3,\n  DifferentType4,\n> {\n  m() {};\n}\n\n// Declare Interface Break\ndeclare interface ExtendsOne extends ASingleInterface {\n  x: string;\n}\n\ndeclare interface ExtendsLarge\n  extends ASingleInterfaceWithAReallyReallyReallyReallyLongName {\n  x: string;\n}\n\ndeclare interface ExtendsMany\n  extends Interface1,\n    Interface2,\n    Interface3,\n    Interface4,\n    Interface5,\n    Interface6,\n    Interface7 {\n  x: string;\n}\n\n// Interface declaration break\ninterface ExtendsOne extends ASingleInterface {\n  x: string;\n}\n\ninterface ExtendsLarge\n  extends ASingleInterfaceWithAReallyReallyReallyReallyLongName {\n  x: string;\n}\n\ninterface ExtendsMany\n  extends Interface1,\n    Interface2,\n    Interface3,\n    Interface4,\n    Interface5,\n    Interface6,\n    Interface7 {\n  s: string;\n}\n\n// Generic Types\ninterface ExtendsOne extends ASingleInterface<string> {\n  x: string;\n}\n\ninterface ExtendsLarge\n  extends ASingleInterfaceWithAReallyReallyReallyReallyLongName<string> {\n  x: string;\n}\n\ninterface ExtendsMany\n  extends ASingleGenericInterface<\n    Interface1,\n    Interface2,\n    Interface3,\n    Interface4,\n    Interface5,\n    Interface6,\n    Interface7\n  > {\n  x: string;\n}\n\ninterface ExtendsManyWithGenerics\n  extends InterfaceOne,\n    InterfaceTwo,\n    ASingleGenericInterface<\n      Interface1,\n      Interface2,\n      Interface3,\n      Interface4,\n      Interface5,\n      Interface6,\n      Interface7\n    >,\n    InterfaceThree {\n  x: string;\n}\n\nexport interface ExtendsLongOneWithGenerics\n  extends Bar<\n    SomeLongTypeSomeLongTypeSomeLongTypeSomeLongType,\n    ToBreakLineToBreakLineToBreakLine\n  > {}\n```\n\n----------------------------------------\n\nTITLE: Valid Use of Binding Patterns Before Declaration\nDESCRIPTION: JavaScript code showing valid use of binding patterns where values can reference previous bindings in the same pattern, now correctly handled by noInvalidUseBeforeDeclaration.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\nconst { a = 0, b = a } = {};\n```\n\n----------------------------------------\n\nTITLE: Sorting Imports in Astro Frontmatter\nDESCRIPTION: Example of how Biome sorts imports inside the frontmatter of Astro files, showing the diff between unsorted and sorted imports.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_68\n\nLANGUAGE: diff\nCODE:\n```\n---\n- import { getLocale } from \"astro:i18n\";\n- import { Code } from \"astro:components\";\n+ import { Code } from \"astro:components\";\n+ import { getLocale } from \"astro:i18n\";\n---\n\n<div></div>\n```\n\n----------------------------------------\n\nTITLE: Implementing Format Trait for Custom Node\nDESCRIPTION: Example implementation of the Format trait for a custom Buzz struct, demonstrating basic formatting functionality using the JsFormatter.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_js_formatter::prelude::*;\nuse biome_formatter::{write, format_args};\n\nstruct Buzz {\n blast: String\n}\n\nimpl Format for Buzz {\n fn fmt(&self, f: &mut JsFormatter) -> FormatResult<()> {\n \t// implementation goes here\n\t write!(f, [token(\"Hello\"), dynamic_token(&self.blast)])\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Resulting Biome Configuration After ESLint Migration\nDESCRIPTION: The resulting Biome configuration after running `biome migrate eslint --write` on the previous ESLint configuration. This demonstrates how ESLint rules are mapped to their Biome equivalents.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_60\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n      \"recommended\": false,\n      \"suspicious\": {\n        \"noDoubleEquals\": \"error\"\n      }\n    }\n  },\n  \"javascript\": { \"globals\": [\"var2\"] },\n  \"overrides\": [{\n    \"include\": [\"lib/*.js\"],\n    \"linter\": {\n      \"rules\": {\n        \"style\": {\n          \"useDefaultParameterLast\": \"off\"\n        }\n      }\n    }\n  }]\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing Coverage Between Branches\nDESCRIPTION: Example commands showing how to compare coverage results between different git branches using the cargo coverage compare command\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/coverage/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# (commit your code on pr branch, run)\ngit checkout main\ncargo coverage --json > base_results.json\ngit checkout <your branch>\ncargo coverage --json > new_results.json\ncargo coverage compare ./base_results.json ./new_results.json --markdown\n```\n\n----------------------------------------\n\nTITLE: Formatting Type Import/Export Statements\nDESCRIPTION: Demonstrates formatting rules for TypeScript type imports and exports including named exports, aliases and module imports.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_75\n\nLANGUAGE: typescript\nCODE:\n```\nexport type { SomeThing };\nexport type { A as B };\nexport type { B as C } from \"./a\";\nexport type { foo } from \"bar\";\nexport type { foo };\n\n// this should be treated as a normal import statement\nimport type from \"./foo\";\n\nimport type { SomeThing } from \"./some-module.js\";\nimport type { foo, bar } from \"baz\";\nimport type { foo as bar } from \"baz\";\nimport type * as foo from \"./bar\";\nimport type foo from \"bar\";\nimport type foo, { bar } from 'bar';\n```\n\n----------------------------------------\n\nTITLE: Comparing Arrow Function Formatting in JavaScript\nDESCRIPTION: Shows differences in handling arrow functions between Biome and Prettier, particularly with nested arrow functions and comments placement in curried functions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n Y(() => (a ? b : c));\n \n Y(() => () => (a ? b : c));\n \n Y(() => () => () => (a ? b : c));\n \n Y(() =>\n   longlonglonglonglonglonglonglonglonglongCondition\n     ? \"Prettier is an opinionated code formatter.\"\n     : \"Prettier takes your code and reprints it from scratch by taking the line length into account.\",\n );\n \n Y(\n   () => () =>\n     longlonglonglonglonglonglonglonglonglongCondition\n       ? \"Prettier is an opinionated code formatter.\"\n       : \"Prettier takes your code and reprints it from scratch by taking the line length into account.\",\n );\n \n Y(\n   () => () => () =>\n     longlonglonglonglonglonglonglonglonglongCondition\n       ? \"Prettier is an opinionated code formatter.\"\n       : \"Prettier takes your code and reprints it from scratch by taking the line length into account.\",\n );\n \n const x1 = () => [\n   \"The\",\n   \"green\",\n   \"dragon\",\n   \"liked\",\n   \"to\",\n   \"knit\",\n   \"sweaters\",\n   \"for\",\n   \"the\",\n   \"fluffy\",\n   \"clouds\",\n   \"in\",\n   \"the\",\n   \"sky.\",\n ];\n \n const x2 = () => () => [\n   \"The\",\n   \"green\",\n   \"dragon\",\n   \"liked\",\n   \"to\",\n   \"knit\",\n   \"sweaters\",\n   \"for\",\n   \"the\",\n   \"fluffy\",\n   \"clouds\",\n   \"in\",\n   \"the\",\n   \"sky.\",\n ];\n \n const x3 = () => () => () => [\n   \"The\",\n   \"green\",\n   \"dragon\",\n   \"liked\",\n   \"to\",\n   \"knit\",\n   \"sweaters\",\n   \"for\",\n   \"the\",\n   \"fluffy\",\n   \"clouds\",\n   \"in\",\n   \"the\",\n   \"sky.\",\n ];\n \n f((a) => (1, 2, 3) /* a */);\n f((a) => (b) => (1, 2, 3) /* b */ /* a */);\n-f((a) => (b) => (c) => (1, 2, 3) /* c */ /* b */ /* a */);\n+f((a) => (b) => (c) => (1, 2, 3) /* b */ /* c */ /* a */);\n \n f((a) => (1 ? 2 : 3) /* a */);\n f((a) => (b) => (1 ? 2 : 3) /* b */ /* a */);\n-f((a) => (b) => (c) => (1 ? 2 : 3) /* c */ /* b */ /* a */);\n+f((a) => (b) => (c) => (1 ? 2 : 3) /* b */ /* c */ /* a */);\n \n a(\n   \"\",\n   \"\",\n   ({}) =>\n     () =>\n     () =>\n     () =>\n     () =>\n     () =>\n     () =>\n       test,\n );\n a(\n   \"\",\n   \"\",\n   ({}) =>\n     () =>\n     () =>\n     () =>\n     () =>\n     () =>\n     () =>\n       test ? 1 : 2,\n );\n\n```\n\n----------------------------------------\n\nTITLE: GritQL Search Command Example\nDESCRIPTION: Example of using the new experimental search command with GritQL syntax to find console.log invocations.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_15\n\nLANGUAGE: shell\nCODE:\n```\nbiome search '`console.log($message)`'\n```\n\n----------------------------------------\n\nTITLE: Modifying Function Call Formatting in JavaScript\nDESCRIPTION: This snippet shows a change in the formatting of a function call, moving from a single-line to a multi-line format for the last call() statement.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\ncall(\n  1, 2,3\n);\n\ncall(1, 2, 3);\n\ncall(1, 2, 3);\n\ncall(\n  1, 2,3\n);\n```\n\n----------------------------------------\n\nTITLE: User-Defined Types with Banned Names\nDESCRIPTION: Example showing how noBannedTypes now allows user-defined types that reuse banned type names when imported from libraries.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_157\n\nLANGUAGE: typescript\nCODE:\n```\nimport { Number } from \"a-lib\";\ndeclare const v: Number;\n```\n\n----------------------------------------\n\nTITLE: Formatting Definite Assignment Assertions in TypeScript\nDESCRIPTION: Shows differences in handling definite assignment assertions (the '!' operator). The main change is the removal of semicolons after property declarations with definite assignment assertions, and changes in quote style for string literals from double to single quotes.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_73\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n-  a!;\n-  #b!;\n-  static c!;\n-  [d]! = 1;\n-  \"e\"!;\n+  a!\n+  #b!\n+  static c!\n+  [d]! = 1\n+  'e'!\n}\n\n-let a! = x;\n-const b! = x;\n-var c! /* */ = x;\n-export const d! = x;\n+let a! = x\n+const b! = x\n+var c/* */! = x\n+export const d! = x\n```\n\n----------------------------------------\n\nTITLE: Commenting Out IIFE and Function Expressions with Comments\nDESCRIPTION: Replaces immediately-invoked function expressions (IIFEs) and function expressions with comments marked as formatting issues to be fixed.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n function function_declaration() {\n   // this is a function\n   return 42;\n }\n \n-(function named() {\n-  // this is a function\n-  return 42;\n-})();\n+// FIXME\n+// TODO: reformat issue\n+// (function named()\n+// // this is a function\n+// {\n+//   return 42\n+// })();\n \n-(function () {\n-  // this is a function\n-  return 42;\n-})();\n+// FIXME\n+// TODO: reformat issue\n+// (function ()\n+// // this is a function\n+// {\n+//   return 42\n+// })();\n \n /* anonymous declaration */\n export default function () {\n   // this is a function\n   return 42;\n }\n \n+// FIXME\n+// TODO: reformat issue\n a = {\n   foo() {\n     // this is a function\n   },\n \n-  bar: function () {\n-    // this is a function\n-  },\n+  // bar: function()\n+  // // this is a function\n+  // {},\n };\n\n```\n\n----------------------------------------\n\nTITLE: Deriving Deserializable for Custom Structs in Rust\nDESCRIPTION: Example of using the Deserializable derive macro for custom structs with named fields. Shows basic struct definition with derive attributes.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/README.md#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[derive(Clone, Debug, Default, Deserializable)]\npub struct MyRuleOptions {\n    behavior: Behavior,\n    threshold: u8,\n    behavior_exceptions: Vec<String>\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Code Actions in Lint Rule\nDESCRIPTION: Implementation of the action function to provide code fixes in a lint rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_23\n\nLANGUAGE: rust\nCODE:\n```\nimpl Rule for ExampleRule {\n    fn action(ctx: &RuleContext<Self>, _state: &Self::State) -> Option<JsRuleAction> {\n      let mut mutation = ctx.root().begin();\n\n      Some(JsRuleAction::new(\n        ctx.action_category(ctx.category(), ctx.group()),\n        ctx.metadata().applicability(),\n        markup! { \"Remove the '\"{name.text_trimmed()}\"' element.\" }.to_owned(),\n        mutation,\n      ))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Enforcing Type-Only Imports in TypeScript\nDESCRIPTION: The useImportType rule enforces the use of type-only imports for types in TypeScript. It suggests using the 'type' keyword for importing types and groups type-only imports.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_118\n\nLANGUAGE: diff\nCODE:\n```\n- import { A, B } from \"./mod.js\";\n+ import { type A, B } from \"mod\";\n  let a: A;\n  const b: B = new B();\n```\n\nLANGUAGE: diff\nCODE:\n```\n- import { type A, type B } from \"./mod.js\";\n+ import type { A, B } from \"./mod.js\";\n```\n\n----------------------------------------\n\nTITLE: Formatting Export Statements with Comments in JavaScript\nDESCRIPTION: Demonstrates comment placement around export statements including named exports and re-exports.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nexport //comment\n{};\n\nexport /* comment */ {};\n\nconst foo = \"\";\nexport {\n  foo, // comment\n};\n\nconst bar = \"\";\nexport {\n  // comment\n  bar,\n};\n\nconst fooo = \"\";\nconst barr = \"\";\nexport {\n  fooo, // comment\n  barr, // comment\n};\n\nconst foooo = \"\";\nconst barrr = \"\";\nexport {\n  foooo,\n  // comment\n  barrr as baz,\n} from \"foo\";\n\nconst fooooo = \"\";\nconst barrrr = \"\";\nexport {\n  fooooo,\n  // comment\n  barrrr as bazz,\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting JSX Attributes with Comments\nDESCRIPTION: This snippet shows changes in formatting for JSX attributes with inline comments, adjusting the placement of comments and line breaks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_26\n\nLANGUAGE: jsx\nCODE:\n```\n<div attr=/* comment */ \"foo\"></div>;\n\n<div attr=/* comment */\n\"foo\"></div>;\n\n<div attr=/* comment */\n\"foo\"></div>;\n\n<div attr=/* comment */ \"foo\"></div>;\n\n<div attr=// comment\n\"foo\"></div>;\n\n<div attr=// comment\n\"foo\"></div>;\n```\n\n----------------------------------------\n\nTITLE: Sorting Imports in Vue Script Block\nDESCRIPTION: Example of how Biome sorts imports inside the script block of Vue files, showing the diff between unsorted and sorted imports.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_69\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\n- import Button from \"./components/Button.vue\";\n- import * as vueUse from \"vue-use\";\n+ import * as vueUse from \"vue-use\";\n+ import Button from \"./components/Button.vue\";\n</script/>\n\n<template></template>\n```\n\n----------------------------------------\n\nTITLE: Resource Management with Using Declarations\nDESCRIPTION: Tests for formatting await using declarations with escaped identifiers and comments placement.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n async function f() {\n-  await using ab = c;\n+  await using \\u0061b = c;\n }\n```\n\n----------------------------------------\n\nTITLE: Demonstrating globalThis.console.log Detection\nDESCRIPTION: Example showing how the noConsoleLog rule now detects console.log calls via the globalThis namespace, which was previously not caught by the rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_154\n\nLANGUAGE: javascript\nCODE:\n```\nglobalThis.console.log(\"log\")\n```\n\n----------------------------------------\n\nTITLE: Updating Prettier Snapshots for Biome Tests\nDESCRIPTION: Process to update Prettier snapshots for use in Biome's test suite, including installing dependencies and running the preparation script.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npnpm install\nnode prepare_tests.js <prettier root directory>\n```\n\n----------------------------------------\n\nTITLE: Empty Import Statement Formatting\nDESCRIPTION: Shows formatting of empty import statements with various comment placements.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"@types/googlemaps\";\nimport \"a\";\nimport /* comment */ \"a\";\nimport // comment\n\"a\";\nimport {/* comment */} from \"a\";\nimport /* comment */ {} from \"a\";\nimport {} /* comment */ from \"a\";\n```\n\n----------------------------------------\n\nTITLE: Adding Rule Domains in Rust\nDESCRIPTION: Demonstrates how to add domains to a rule declaration in Biome. Domains are used to categorize rules and enable automatic rule activation based on project dependencies.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_12\n\nLANGUAGE: diff\nCODE:\n```\n+ use biome_analyze::RuleDomain;\n\n\ndeclare_lint_rule! {\n    /// Documentation\n    pub(crate) ExampleRule {\n        version: \"next\",\n        name: \"myRuleName\",\n        language: \"js\",\n        recommended: true,\n+       domains: &[RuleDomain::Test],\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Empty Import Assertions\nDESCRIPTION: Demonstrates removal of empty assert blocks from import/export statements and preserves comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nexport * as foo from \"foo.json\";\nexport * as bar from \"bar.json\";\nexport * as baz from \"baz.json\" /* comment */;\n\nimport * as foo from \"foo.json\";\nimport * as bar from \"bar.json\";\nimport * as baz from \"baz.json\" /* comment */;\n```\n\n----------------------------------------\n\nTITLE: Deserializing Enum Variants from Strings with String Allocation in Rust\nDESCRIPTION: Implements the Deserializable trait for an enum that maps string values to enum variants. This implementation uses String deserialization with heap allocation and includes error reporting for unknown variants.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/README.md#2025-04-14_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_deserialize::{Deserializable, DeserializationContext, DeserializableValue, DeserializationDiagnostic};\n\n#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash, Ord, PartialOrd)]\npub enum Variant { A, B }\n\nimpl Deserializable for Variant {\n    fn deserialize(\n        ctx: &mut impl DeserializationContext,\n        value: &impl DeserializableValue,\n        name: &str,\n    ) -> Option<Self> {\n        match String::deserialize(ctx, value, name)? {\n            \"A\" => Some(Variant::A),\n            \"B\" => Some(Variant::B),\n            unknown_variant => {\n                const ALLOWED_VARIANTS: &[&str] = &[\"A\", \"B\"];\n                ctx.report(DeserializationDiagnostic::new_unknown_value(\n                    unknown_variant,\n                    value.range(),\n                    ALLOWED_VARIANTS,\n                ));\n                None\n            }\n        }\n    }\n}\n\nuse biome_deserialize::json::deserialize_from_json_str;\nuse biome_deserialize::Deserialized;\nuse biome_json_parser::JsonParserOptions;\n\nlet json = \"\\\"A\\\"\";\nlet Deserialized {\n    deserialized,\n    diagnostics,\n} = deserialize_from_json_str::<Day>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert_eq!(deserialized, Some(Variant::A));\nassert!(diagnostics.is_empty());\n```\n\n----------------------------------------\n\nTITLE: Running Biome CLI to lint files\nDESCRIPTION: This command shows how to use the Biome CLI to lint all JavaScript and TypeScript files in the current directory and its subdirectories.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nbiome lint .\n```\n\n----------------------------------------\n\nTITLE: Configuring Biome Linter Rules with Overrides\nDESCRIPTION: This JSON configuration demonstrates how to set up Biome linter rules with overrides for specific files. It showcases the issue where subsequent overrides could conceal previous settings.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_30\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n      \"suspicious\": { \"noDebugger\": \"off\" }\n    }\n  },\n  \"overrides\": [\n    {\n      \"include\": [\"index.js\"],\n      \"linter\": {\n        \"rules\": {\n          \"suspicious\": { \"noDebugger\": \"warn\" }\n        }\n      }\n    }, {\n      \"include\": [\"index.js\"],\n      \"linter\": {\n        \"rules\": {\n          \"suspicious\": { \"noDoubleEquals\": \"off\" }\n        }\n      }\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring ASCII Requirement for Naming Conventions\nDESCRIPTION: JSON configuration for specifying whether identifiers must be ASCII-only in the useNamingConvention and useFilenamingConvention rules.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_99\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n      \"style\": {\n        \"useNamingConvention\": { \"options\": { \"requireAscii\": false } }\n      },\n      \"nursery\": {\n        \"useFilenamingConvention\": { \"options\": { \"requireAscii\": false } }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Changing Modifier Order in Abstract Class Declarations\nDESCRIPTION: This code shows changes in the order of modifiers (public, protected, private, static) when used with the 'abstract' keyword in class method and property declarations, moving 'abstract' before the access modifiers.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_64\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class A {\n  abstract foo_a();\n\n  public abstract foo_b();\n  protected abstract foo_c();\n  private abstract foo_d();\n\n  abstract public foo_bb();\n  abstract protected foo_cc();\n  abstract private foo_dd();\n\n  abstract static foo_d();\n\n  static abstract foo_e();\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Use of Binding Patterns with Exports\nDESCRIPTION: JavaScript code showing valid binding patterns where values are used in exports, now correctly handled by noUnusedVariables rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nconst { a = 0, b = a } = {};\nexport { b };\n```\n\n----------------------------------------\n\nTITLE: Formatting Import Statements in JavaScript\nDESCRIPTION: This snippet shows changes to import statement formatting, including handling of empty imports, comments, and line breaks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nimport {} from \"@types/googlemaps\";\nimport \"a\";\nimport /* comment */ \"a\";\nimport // comment\n\"a\";\nimport {/* comment */} from \"a\";\nimport /* comment */ {} from \"a\";\nimport {} /* comment */ from \"a\";\nimport {} from /* comment */ \"a\";\nimport /* comment */ {/* comment */} /* comment */ from /* comment */ \"a\";\nimport {\n  // comment\n} from \"a\";\nimport // comment\n{} from \"a\";\nimport {} from // comment\n\"a\";\nimport {} from // comment\n\"a\";\nimport // comment\n{\n  // comment\n} from // comment\n// comment\n\"a\";\n\nimport // {} from\n\"a\";\nimport {} from // comment ends with from\n\"a\";\nimport {} from /* comment ends with from */ \"a\";\nimport {} from // comment not ends with from ___\n\"a\";\nimport {} from /* comment not ends with from ___ */ \"a\";\n\nimport // comment ends with from\n\"a\";\nimport /* comment ends with from */ \"a\";\nimport // comment not ends with from ___\n\"a\";\nimport /* comment not ends with from ___ */ \"a\";\n```\n\n----------------------------------------\n\nTITLE: Generating Difference Report Between Biome and Prettier\nDESCRIPTION: Environment variable configuration that generates a report.md file showing differences between Biome's JSON formatter output and Prettier's snapshots when running tests.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_json_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nREPORT_PRETTIER=1\n```\n\n----------------------------------------\n\nTITLE: Generated Rule Implementation Template in Rust\nDESCRIPTION: The boilerplate code generated for a new rule, showing the basic structure including Query types, State, Signals, Options, and the run/diagnostic functions that need implementation.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\n...\nimpl Rule for UseMyRuleName {\n    type Query = Ast<JsIdentifierBinding>;\n    type State = ();\n    type Signals = Option<Self::State>;\n    type Options = ();\n\n    fn run(ctx: &RuleContext<Self>) -> Self::Signals {\n        ...\n    }\n\n    fn diagnostic(ctx: &RuleContext<Self>, _state: &Self::State) -> Option<RuleDiagnostic> {\n        ...\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Parentheses in For Loops with 'in' Expressions\nDESCRIPTION: This snippet demonstrates how parentheses are formatted in various for loop contexts involving 'in' expressions, particularly when nested within other expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_18\n\nLANGUAGE: diff\nCODE:\n```\n // https://github.com/babel/babel/blob/HEAD/packages/babel-generator/test/fixtures/parentheses/in-inside-for/input.js\n \n for (var a = (b in c); ; );\n for (var a = 1 || (b in c); ; );\n for (var a = 1 + (2 || (b in c)); ; );\n for (var a = () => (b in c); ; );\n for (var a = 1 || (() => (b in c)); ; );\n for (\n   var a = () => {\n-    (b in c);\n+    b in c;\n   };\n   ;\n-\n );\n for (var a = [(b in c)]; ; );\n for (var a = { b: (b in c) }; ; );\n for (var a = (x = (b in c)) => {}; ; );\n for (var a = class extends (b in c) {}; ; );\n for (var a = function (x = (b in c)) {}; ; );\n \n for (var a in b in c);\n for (var a in 1 || b in c);\n for (var a in 1 + (2 || b in c));\n for (var a in () => b in c);\n for (var a in 1 || (() => b in c));\n for (var a in () => {\n   b in c;\n });\n for (var a in [b in c]);\n for (var a in { b: b in c });\n for (var a in (x = b in c) => {});\n for (var a in class extends (b in c) {});\n for (var a in function (x = b in c) {});\n \n for (; (a = b in c); );\n for (; (a = 1 || b in c); );\n for (; (a = 1 + (2 || b in c)); );\n for (; (a = () => b in c); );\n for (; (a = 1 || (() => b in c)); );\n for (\n   ;\n   (a = () => {\n     b in c;\n   });\n-\n );\n for (; (a = [b in c]); );\n for (; (a = { b: b in c }); );\n for (; (a = (x = b in c) => {}); );\n for (; (a = class extends (b in c) {}); );\n for (; (a = function (x = b in c) {}); );\n```\n\n----------------------------------------\n\nTITLE: Long Import Source Formatting\nDESCRIPTION: Shows formatting of import statements with long source paths and type assertions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nimport a10 from \"./aaaaaaaaaa.json\" with { type: \"json\" };\nimport a20 from \"./aaaaaaaaaaaaaaaaaaaa.json\" with { type: \"json\" };\nimport a30 from \"./aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\" with { type: \"json\" };\nimport a40 from \"./aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\" with {\n  type: \"json\",\n};\n```\n\n----------------------------------------\n\nTITLE: No Unused Variables Rule Ignoring Rest Spread Siblings\nDESCRIPTION: Example of how the noUnusedVariables rule now ignores unused rest spread siblings, allowing for the shown code pattern.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nconst { a, ...rest } = { a: 0, b: 1 };\nconsole.log(rest);\n```\n\n----------------------------------------\n\nTITLE: Using --skip Option with Biome Lint Command\nDESCRIPTION: Shows how to use the new --skip option to exclude specific groups or rules from the lint command execution.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_36\n\nLANGUAGE: shell\nCODE:\n```\nbiome lint --skip=style --skip=suspicious/noExplicitAny\n```\n\n----------------------------------------\n\nTITLE: Configuring noBlankTarget Rule in JSON\nDESCRIPTION: Demonstrates how to configure the noBlankTarget rule to allow specific domains as blank targets.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_25\n\nLANGUAGE: json\nCODE:\n```\n\"linter\": {\n  \"rules\": {\n    \"a11y\": {\n      \"noBlankTarget\": {\n      \"level\": \"error\",\n        \"options\": {\n           \"allowDomains\": [\"example.com\", \"example.org\"]\n          }\n        }\n      }\n    }\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Fixing useTemplate Rule for Complex Expressions in JavaScript\nDESCRIPTION: Code examples showing the fix for issue #1192 where useTemplate now correctly handles parenthesized expressions and respects type coercions when suggesting template literals in JavaScript code.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_127\n\nLANGUAGE: javascript\nCODE:\n```\n\"a\" + (1 + 2) // `a${1 + 2}`\n```\n\nLANGUAGE: javascript\nCODE:\n```\n1 + (2 + \"a\") // `${1}${2}a`\n```\n\n----------------------------------------\n\nTITLE: Generated Test Function Structure in Rust\nDESCRIPTION: Shows the structure of a test function automatically generated by the test macro. It includes the #[test] attribute, function name derived from the file name, and calls to the run_test function with appropriate file paths.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/tests_macros/README.md#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\n#[test]\npub fn somefilename()\n{\n    let test_file = \"<crate's cargo.toml full path>/tests/sometest.txt\";\n    let test_expected_file = \"<crate's cargo.toml full path>/tests/sometest.expected.txt\";\n    run_test(test_file, test_expected_file);\n}\n```\n\n----------------------------------------\n\nTITLE: Creating New Biome Crate\nDESCRIPTION: Command to create a new library crate in the Biome workspace using cargo. The --lib flag creates a library crate with src/lib.rs file structure.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_17\n\nLANGUAGE: shell\nCODE:\n```\ncargo new crates/biome_new_crate --lib\n```\n\n----------------------------------------\n\nTITLE: Formatting Import Statements with Attributes in JavaScript\nDESCRIPTION: This snippet shows changes in formatting import statements with attributes. Empty attribute objects are removed, and comments are repositioned for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nexport * as foo from \"foo.json\";\nexport * as bar from \"bar.json\";\nexport * as baz from \"baz.json\" /* comment */;\n\nimport * as foo from \"foo.json\";\nimport * as bar from \"bar.json\";\nimport * as baz from \"baz.json\" /* comment */;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Module Declaration Example\nDESCRIPTION: Example of TypeScript module declarations for image file types that previously caused false positives with the noRedeclare rule, now fixed.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_137\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare module '*.gif' {\n    const src: string;\n}\n\ndeclare module '*.bmp' {\n    const src: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Running Formatter Benchmarks and Comparing Results in Bash\nDESCRIPTION: Series of commands to run formatter benchmarks on main and PR branches, then compare results using critcmp. This can be used for both js_formatter and css_formatter.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ncargo bench --bench js_formatter -- --save-baseline main # You can also use css_formatter\ngit checkout -\ncargo bench --bench js_formatter -- --save-baseline pr # You can also use css_formatter\ncritcmp main pr\n```\n\n----------------------------------------\n\nTITLE: Adjusting Function Declaration in While Loop\nDESCRIPTION: This snippet shows a minor change in the formatting of a function declaration within a while loop, removing a space before the function body.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nwhile (false) function foo(){}\n```\n\n----------------------------------------\n\nTITLE: Formatting Function Calls with Skip Condition in JavaScript\nDESCRIPTION: This code shows how Biome formats conditional function calls with test frameworks. The example demonstrates the reformatting of ternary expressions and parameters in test function calls with timeout values.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n fs.readdirSync(suiteLoc).forEach(function (testName) {\n-  (skip ? it.skip : it)(\n-    testName,\n-    buildTest(binName, testName, opts),\n-    2_000_000,\n-  );\n+  (skip\n+    ? it.skip\n+    : it)(testName, buildTest(binName, testName, opts), 2_000_000);\n });\n \n {\n   (skip ? it.skip : it)(\n     testName,\n     buildTest(binName, testName, opts),\n     2_000_000,\n   );\n }\n```\n\n----------------------------------------\n\nTITLE: Valid Use of Void Type in TypeScript Conditional Types\nDESCRIPTION: TypeScript code showing a valid use of the void type in conditional types, which is no longer incorrectly flagged by the noConfusingVoidType rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_100\n\nLANGUAGE: typescript\nCODE:\n```\ntype Conditional<T> = T extends void ? Record<string, never> : T\n```\n\n----------------------------------------\n\nTITLE: Comparing Empty Statement Comment Handling in JavaScript\nDESCRIPTION: Shows how Biome and Prettier handle comments in empty statements differently. Biome tends to merge multiple consecutive comments, while Prettier preserves separate comment blocks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n-a; /* a */ // b\n-/* c */\n-foo; // first\n-// second\n-// third\n-function x() {} // first\n-// second\n+a; /* a */ /* c */ // b\n+\n+foo; // first // second // third\n+\n+function x() {} // first // second\n+\n a =\n-  b + // 1\n-  // 2\n-  c + // 3\n-  // 4\n-  d + // 5\n-  /* 6 */\n+  b + // 1 // 2\n+  c + // 3 // 4\n+  d /* 6 */ + // 5\n   e; // 7\n```\n\n----------------------------------------\n\nTITLE: Valid Number Formats with Extra Zeros\nDESCRIPTION: JavaScript code showing number formats with extra zeros that are now properly accepted by the noPrecisionLoss rule, avoiding false positives.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n.1230000000000000000000000;\n1230000000000000000000000.0;\n```\n\n----------------------------------------\n\nTITLE: Setting Rule Severity to Info Level in Biome JSON\nDESCRIPTION: Shows how to set the severity of a lint rule to 'info' level, which doesn't emit error codes and isn't affected by options like --error-on-warnings.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_42\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n    \"rules\": {\n      \"suspicious\": {\n        \"noDebugger\": \"info\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sorting CSS Utility Classes with useSortedClasses Rule\nDESCRIPTION: Diff showing the automatic sorting of CSS utility classes applied by the useSortedClasses rule. This improves code consistency by sorting class names alphabetically.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_87\n\nLANGUAGE: diff\nCODE:\n```\n- <div class=\"px-2 foo p-4 bar\" />\n+ <div class=\"foo bar p-4 px-2\" />\n```\n\n----------------------------------------\n\nTITLE: Formatting Object Types in TypeScript Declare Functions\nDESCRIPTION: Shows different approaches to formatting object type annotations in declare function parameters. The main difference is in the formatting of the 'this' parameter type, where the multiline object type is converted to a single line for better readability when the object is not too complex.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_68\n\nLANGUAGE: typescript\nCODE:\n```\n-declare function foo(this: {\n-  a: boolean;\n-  b: string;\n-  c: number;\n-}): Promise<Array<foo>>;\n+declare function foo(this: { a: boolean; b: string; c: number }): Promise<\n+  Array<foo>\n+>;\n \n declare function bazFlip({\n   a: boolean,\n   b: string,\n   c: number,\n }): Promise<Array<foo>>;\n \n declare function bar(\n   ...{ a: boolean, b: string, c: number }\n ): Promise<Array<foo>>;\n \n declare function bar(\n   ...x: { a: boolean; b: string; c: number }\n ): Promise<Array<foo>>;\n```\n\n----------------------------------------\n\nTITLE: Formatting Differences in Conditional Types and Parentheses in TypeScript\nDESCRIPTION: This code shows differences in formatting for conditional types in TypeScript, particularly around parentheses placement, line breaks, and spacing for generic type parameters. The changes affect how complex conditional types with 'infer' are formatted.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_62\n\nLANGUAGE: typescript\nCODE:\n```\n// #13275\ntype Foo<T> = T extends ((...a: any[]) => infer R extends string) ? R : never;\ntype Foo<T> = T extends (new (\n  ...a: any[]\n) => infer R extends string)\n  ? R\n  : never;\n\n// #14275\ntype Test<T> = T extends (\n  token: TSESTree.Token,\n) => token is infer U extends TSESTree.Token\n  ? U\n  : TSESTree.Token;\ntype Test<T> = T extends ((token: TSESTree.Token,) => asserts token is infer U extends TSESTree.Token)\n  ? U\n  : TSESTree.Token;\ntype Test<T> = T extends (new (\n  token: TSESTree.Token\n) => token is infer U extends TSESTree.Token\n)\n  ? U\n  : TSESTree.Token\n```\n\n----------------------------------------\n\nTITLE: While True Loop Pattern\nDESCRIPTION: Example showing the common while(true) pattern that is now allowed by the noConstantCondition rule, recognizing its legitimate use in web development.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_160\n\nLANGUAGE: javascript\nCODE:\n```\nwhile (true) {\n  if (cond) {\n    break;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simplifying Return Statement in JavaScript\nDESCRIPTION: This snippet demonstrates the simplification of a multi-line return statement into a single line, removing parentheses and line breaks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nreturn someVeryLongStringA && someVeryLongStringB && someVeryLongStringC && someVeryLongStringD\n```\n\n----------------------------------------\n\nTITLE: Running Analyzer Benchmarks and Comparing Results in Bash\nDESCRIPTION: Series of commands to run analyzer benchmarks on main and PR branches, then compare results using critcmp. This can be used for both js_analyzer and css_analyzer.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/README.md#2025-04-14_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout main\ncargo bench --bench js_analyzer -- --save-baseline main # You can also use css_analyzer\ngit checkout -\ncargo bench --bench js_analyzer -- --save-baseline pr # You can also use css_analyzer\ncritcmp main pr\n```\n\n----------------------------------------\n\nTITLE: Modifying variable formatting with range boundaries in JavaScript\nDESCRIPTION: Illustrates how range-based formatting affects variable declarations with floating-point values, showing which parts are modified based on position within the range.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n-foo = 1.0000;bar = 1.0;\n-baz = 1.0;\n+foo = 1.0000;bar = 1.0;baz=1.0000;\n // The range will be 13~26\n // `foo` ends at 13, should not format\n // `bar` ends at 26, should format\n\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Tuple and Record Casts\nDESCRIPTION: This snippet demonstrates formatting changes for TypeScript type casting expressions involving tuples and records, particularly adjusting parentheses and line breaks for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_34\n\nLANGUAGE: typescript\nCODE:\n```\nbreakAfterCast = <PermissionsChecker<any> | undefined>(\n  (<any>permissions)[receiverType]\n);\n-breakAfterCast = <PermissionsChecker<any> | undefined>(\n-  (<any>permissions)(#[receiverType])\n-);\n+breakAfterCast = <PermissionsChecker<any> | undefined>(<any>permissions)(#[receiverType]);\n\ntestObjLiteral = <PermissionsChecker<any> | undefined>{ prop1: \"myPropVal\" };\n-testObjLiteral = <PermissionsChecker<any> | undefined>#{ prop1: \"myPropVal\" };\n+testObjLiteral =  <PermissionsChecker<any> | undefined>\n+#\n+{\n+  prop1: \"myPropVal\";\n+}\n```\n\n----------------------------------------\n\nTITLE: Improved CSS-in-JS Template Literal Indentation\nDESCRIPTION: Demonstrates improved indentation for CSS-in-JS template literals using the css template tag, particularly for nested selectors with data attributes.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_51\n\nLANGUAGE: diff\nCODE:\n```\n const yesFrame = (\n   ...args: Interpolation<ThemedStyledProps<{}, Theme>>[]\n ) => css`\n-  ${ChatRoot}[data-frame=\"yes\"] & {\n-    ${css({}, ...args)}\n-  }\n+    ${ChatRoot}[data-frame=\"yes\"] & {\n+        ${css({}, ...args)}\n+    }\n `;\n```\n\n----------------------------------------\n\nTITLE: Printing Messages and Diagnostics with Biome Console in Rust\nDESCRIPTION: Demonstrates how to use the Console trait to print formatted messages with markup and diagnostics. Shows usage of markup elements for text styling and diagnostic error reporting.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_console/README.md#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nconsole.message(markup! {\n    <Info>\"Processed \"<Emphasis>{count}</Emphasis>\" files\"</Info>\n});\n\nconsole.diagnostic(\n    &mut files,\n    Diagnostics::error(file_id, code, title),\n);\n```\n\n----------------------------------------\n\nTITLE: Running Biome Check on Working Directory\nDESCRIPTION: Shows the new default behavior of executing Biome commands on the working directory without specifying a path.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_40\n\nLANGUAGE: shell\nCODE:\n```\nbiome check    # You can run the command without the path\n```\n\n----------------------------------------\n\nTITLE: Updating Prettier Test Snapshots for Biome\nDESCRIPTION: Step-by-step instructions for updating Prettier test snapshots used in Biome's GraphQL formatter tests. This includes cloning the Prettier repository, preparing the test environment, and running a Node.js script to extract snapshots.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_graphql_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\nLANGUAGE: shell\nCODE:\n```\nnode prepare_tests.js <prettier root directory>\n```\n\n----------------------------------------\n\nTITLE: Using Config Path Option in Rome CLI Commands\nDESCRIPTION: Examples showing how to use the --config-path option with Rome CLI commands to specify a configuration file location outside the current directory.\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\nrome format --config-path=../../other/path/\nrome check --config-path=../../other/path/\n```\n\n----------------------------------------\n\nTITLE: Formatting JSX Quotes and Attribute Values in JavaScript\nDESCRIPTION: Shows differences in how JSX attribute values with quotes are formatted, changing single quotes to HTML entities and adjusting escaped quotation patterns for better HTML compatibility.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_52\n\nLANGUAGE: jsx\nCODE:\n```\n<div id=\"&quot;'<>&amp;quot;\" />;\n<div id='\"&#39;<>&amp;quot;' />;\n<div id={\"'\\\"&quot;<>&amp;quot;\"} />;\n<div id=\"123\" />;\n<div id=\"&#39;&quot;\" />;\n<div id={\"'\\\"\\\\\\\"\"} />;\n<div\n  single=\"foo\"\n  single2={\"foo\"}\n  double=\"bar\"\n  double2={\"bar\"}\n  singleDouble='\"'\n  singleDouble2={\"\\\"\"}\n  doubleSingle=\"'\"\n  doubleSingle2={\"'\"}\n  singleEscaped={\"'\"}\n  singleEscaped2=\"&apos;\"\n  doubleEscaped={\"\\\"\"}\n  doubleEscaped2=\"&quot;\"\n  singleBothEscaped={\"'\\\"\"}\n  singleBothEscaped2='&apos;\"'\n  singleBoth='&apos; \"'\n  singleBoth2={\"' \\\"\"}\n  singleBoth3='&apos; &apos; \"'\n  doubleBoth=\"&quot; '\"\n  doubleBoth2={\"\\\" '\"}\n  doubleBoth3=\"&quot; &apos; '\"\n/>;\n\n<p>\n  GitHub Desktop has encountered an unrecoverable error and will need to 1231231\n  restart. This has been reported to the team, but if youencounter this121312331\n  repeatedly please report this issue to the GitHub 12312312312312313{\"  \"}{\" \"}\n</p>;\n```\n\n----------------------------------------\n\nTITLE: Generating Analyzer Code for Biome Lint Rules\nDESCRIPTION: This shell command uses the 'just' task runner to generate analyzer code for Biome lint rules. It simplifies the code generation process into a single command.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_32\n\nLANGUAGE: shell\nCODE:\n```\njust gen-analyzer\n```\n\n----------------------------------------\n\nTITLE: Handling Trailing Commas in TypeScript Function Rest Parameters\nDESCRIPTION: Demonstrates the difference in handling trailing commas in function rest parameters. The style changes from multiline parameter declarations to single-line declarations with trailing commas, affecting the readability of functions with long parameter names.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_69\n\nLANGUAGE: typescript\nCODE:\n```\n-declare function foo(...args: any[]);\n-declare function foo(\n-  ...long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_args: any[]\n-);\n+declare function foo(...args: any[], )\n+declare function foo(...long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_args: any[], )\n```\n\n----------------------------------------\n\nTITLE: Running a single test in a crate\nDESCRIPTION: Command to run a specific test within a crate using Cargo.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncd crates/biome_js_formatter\n\ncargo t quick_test\n```\n\n----------------------------------------\n\nTITLE: Adjusting Try-Catch Block Indentation in JavaScript\nDESCRIPTION: This snippet demonstrates a change in the indentation of code within a try-catch block, removing extra indentation for the if statement and its body.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\ntry {\n1;\nif (condition) {\n  body;\n}\n}\ncatch (err) {}\n```\n\n----------------------------------------\n\nTITLE: Example of Approximative Numeric Constants with Separators\nDESCRIPTION: JavaScript code showing examples of approximative numeric constants with digit separators that are now properly detected by the noApproximativeNumericConstant rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n3.14_15; // PI\n.4342; // LOG10E\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript OrderedSet Type Assignment\nDESCRIPTION: Demonstrates multiline formatting of a complex generic type in a variable assignment, wrapping the generic parameter for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_55\n\nLANGUAGE: typescript\nCODE:\n```\nconst durabilityMetricsSelectable: Immutable.OrderedSet<\n  SomeReportingMetric,\n> = myExperienceSelectable.concat(otherDurabilityMetricsSelectable);\n```\n\n----------------------------------------\n\nTITLE: Setting up Biome local development environment with Git\nDESCRIPTION: Initial commands to clone the Biome repository and navigate to the project directory.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/biomejs/biome\ncd biome\n```\n\n----------------------------------------\n\nTITLE: Ignoring Type-Only Imports in TypeScript\nDESCRIPTION: Demonstrates type-only imports that are now ignored by the noNodejsModules rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_27\n\nLANGUAGE: typescript\nCODE:\n```\nimport type assert from \"assert\";\nimport type * as assert2 from \"assert\";\n```\n\n----------------------------------------\n\nTITLE: Handling Comments in Template Literal Suggestions\nDESCRIPTION: Example of the useTemplate rule suggestion, now correctly handling leading and trailing comments when converting to template literals.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_143\n\nLANGUAGE: js\nCODE:\n```\n  // leading comment\n- 1 + \"+\" + 2 // trailing comment\n+ `${1}+${2}` // trailing comment\n```\n\n----------------------------------------\n\nTITLE: Importing Biome Markup Macro Example\nDESCRIPTION: Example showing how to properly import and use the biome_markup macro through the biome_console crate.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_markup/README.md#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_console::markup;\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Format Language Trait in Rust\nDESCRIPTION: Implementation of FormatLanguage trait for HTML formatting, defining core language types and context.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nimpl FormatLanguage for HtmlFormatLanguage {\n    type SyntaxLanguage = HtmlLanguage;\n    type Context = HtmlFormatContext;\n    type FormatRule = FormatHtmlSyntaxNode;\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Biome via npm\nDESCRIPTION: Command to install Biome as a development dependency in a Node.js project. Uses the --save-exact flag to ensure version consistency.\nSOURCE: https://github.com/biomejs/biome/blob/main/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev --save-exact @biomejs/biome\n```\n\n----------------------------------------\n\nTITLE: Invalid Export Namespace in CONSTANT_CASE Example\nDESCRIPTION: Example showing invalid CONSTANT_CASE export namespace syntax that is now rejected by the useNamingConvention rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_139\n\nLANGUAGE: javascript\nCODE:\n```\nexport * as MY_NAMESPACE from \"./lib.js\";\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Action Permissions in YAML\nDESCRIPTION: Shows how to set up permissions for GitHub Actions to allow writing to pull requests when using Biome's CI command with GitHub Workflow Commands.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_113\n\nLANGUAGE: yaml\nCODE:\n```\npermissions:\n  pull-requests: write\n```\n\n----------------------------------------\n\nTITLE: Modifying object property assignment expression in JavaScript\nDESCRIPTION: Formatting change for an object property assignment expression that removes parentheses around the assignment expression in a computed property key.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n a = {\n-  [(this.resource = resource)]: 1,\n+  [this.resource = resource]: 1,\n };\n\n```\n\n----------------------------------------\n\nTITLE: Fixing noRedeclare Rule for Export Default Function Overloads in TypeScript\nDESCRIPTION: Code example demonstrating the fix for issue #1061 where noRedeclare no longer reports overloads of export default function in TypeScript. Function overloads with different parameter types are now properly supported.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_123\n\nLANGUAGE: typescript\nCODE:\n```\nexport default function(a: boolean): boolean;\nexport default function(a: number): number;\nexport default function(a: number | boolean): number | boolean {\n  return a;\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Severity for Lint Rules\nDESCRIPTION: Shows how to define a custom severity level for a lint rule, allowing it to have a warning or error level instead of the default information level.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_diagnostics::Severity;\n\ndeclare_lint_rule! {\n    /// Documentation\n    pub(crate) ExampleRule {\n        version: \"next\",\n        name: \"myRuleName\",\n        language: \"js\",\n        recommended: false,\n        severity: Severity::Warning,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a single crate with Just\nDESCRIPTION: Command to test a specific crate using the Just command runner.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\njust test-crate biome_cli\n```\n\n----------------------------------------\n\nTITLE: Migrating from diagnostics to context in Deserializable implementation\nDESCRIPTION: Example showing how to migrate a Day deserializer implementation from using diagnostics parameter to the new DeserializationContext pattern. The code demonstrates replacing diagnostics reporting with context-based reporting.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n  impl Deserializable for Day {\n      fn deserialize(\n+         ctx: &mut impl DeserializationContext,\n          value: &impl DeserializableValue,\n          name: &str,\n-         diagnostics: &mut Vec<DeserializationDiagnostic>,\n      ) -> Option<Self> {\n          // We deserialize the value into a number represented as a string.\n          let value_text = TextNumber::deserialize(ctx, value, name)?;\n          // We attempt to convert the string into a `Day`.\n          value_text.parse::<Day>().map_err(|error| {\n              // If the conversion failed, then we report the error.\n-             diagnostics.push(DeserializationDiagnostic::new(error).with_range(value.range()));\n+             ctx.report(DeserializationDiagnostic::new(error).with_range(value.range()));\n          }).ok()\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Improving Template Literal Suggestions in JavaScript\nDESCRIPTION: Example of the useTemplate rule suggestion, now correctly handling the concatenation of variables and strings.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_142\n\nLANGUAGE: js\nCODE:\n```\n- a + b + \"px\"\n+ `${a + b}px`\n```\n\n----------------------------------------\n\nTITLE: Formatting Template Literals in JavaScript\nDESCRIPTION: This snippet demonstrates changes in formatting for template literals, including handling of long expressions, comments, and multi-line templates.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nconst long1 = `long ${\n  a.b //comment\n} long longlong ${a.b.c.d.e} long longlong ${a.b.c.d.e} long longlong ${a.b.c.d.e} long long`;\nconst long2 = `long ${a.b.c.d.e} long longlong ${loooooooooooooooooong} long longlong ${loooooooooooooooooong} long longlong ${loooooooooooooooooong} long long`;\n\nconst long3 = `long long long long long long long long long long long ${a.b.c.d.e} long long long long long long long long long long long long long`;\n\nconst description = `The value of the ${cssName} css of the ${this._name} element`;\n\nconst foo = `such a long template string ${foo.bar.baz} that prettier will want to wrap it`;\n\nconst shouldWrapForNow = `such a long template string ${foo().bar.baz} that prettier will want to wrap it`;\n\nconst shouldNotWrap = `simple expressions should not break ${this} ${variable} ${a.b.c} ${this.b.c} ${a[b].c} ${a.b[c]} ${a.b[\"c\"]} ${a?.b?.c}`;\n\nconsole.log(\n  chalk.white(\n    `Covered Lines below threshold: ${coverageSettings.lines}%. Actual: ${coverageSummary.total.lines.pct}%`,\n  ),\n);\n\nx = `mdl-textfield mdl-js-textfield ${className} ${\n  content.length > 0 ? \"is-dirty\" : \"\"\n} combo-box__input`;\n\nfunction testing() {\n  const p = {};\n  // faking some tabs since I can't paste my real code in\n  if (true) {\n    if (false) {\n      return `${process.env.OPENID_URL}/something/something/something?${Object.keys(\n        p,\n      )\n        .map((k) => `${encodeURIComponent(k)}=${encodeURIComponent(p[k])}`)\n        .join(\"&\")}`;\n    }\n  }\n}\n\nconsole.log(\n  `Trying update appcast for ${app.name} (${app.cask.appcast}) -> (${app.cask.appcastGenerated})`,\n);\n\nconsole.log(\n  `brew cask audit --download ${_.map(definitions, \"caskName\").join(\" \")}`,\n);\n\nconsole.log(\n  `\\nApparently jetbrains changed the release artifact for ${app.name}@${app.jetbrains.version}.\\n`,\n);\n\ndescirbe(\"something\", () => {\n  test(`{pass: false} expect(${small}).toBeGreaterThanOrEqual(${big})`, () => {});\n});\n\nthrow new Error(\n  `pretty-format: Option \"theme\" has a key \"${key}\" whose value \"${value}\" is undefined in ansi-styles.`,\n);\n\na = `${[[1, 2, 3], [4, 5, 6]]}`;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Comment Placement in Sequence Expression\nDESCRIPTION: This snippet shows a change in the placement of comments and parentheses in a sequence expression, improving readability while maintaining the original structure.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\n// prettier-ignore\n(\n    (\n       first\n     )\n     ,\n     (\n       last\n    )\n  );\n```\n\n----------------------------------------\n\nTITLE: Debugging with dbg! macro in Rust tests\nDESCRIPTION: Example of using the dbg! macro for debugging in Rust tests and how to show the output when running the test.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nfn some_function() -> &'static str {\n    let some_variable = \"some_variable\";\n    dbg!(&some_variable);\n    some_variable\n}\n#[test]\nfn test_some_function() {\n    let result = some_function();\n    assert_eq!(result, \"some_variable\")\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Input Using Rome CLI\nDESCRIPTION: Example of using Rome format command with stdin input and required file path argument\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\necho \"function f() { return {} }\" | rome format --stdin-file-path example.js\n```\n\n----------------------------------------\n\nTITLE: Modifying Parameter Modifier Order in TypeScript Class Constructors\nDESCRIPTION: This code diff shows a change in the ordering of modifiers for constructor parameters, switching 'public readonly' to 'readonly public'. The snippet demonstrates how TypeScript handles parameter properties with different access and readonly modifiers.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_66\n\nLANGUAGE: typescript\nCODE:\n```\n class C {\n   constructor(readonly x: number) {}\n }\n new C(1).x = 2;\n \n class E {\n-  constructor(public readonly x: number) {}\n+  constructor(readonly public x: number) {}\n }\n \n class F {\n   constructor(private readonly x: number) {}\n }\n new F(1).x;\n\n```\n\n----------------------------------------\n\nTITLE: Configuration for JSON Comments\nDESCRIPTION: Configuration to enable parsing of comments inside JSON files, which are not part of the JSON standard but are supported in many environments.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_171\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json\": {\n    \"parser\": {\n      \"allowComments\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying object property quotes in JavaScript\nDESCRIPTION: Formatting change that removes unnecessary quotes around an object property key that uses a non-ASCII character.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n const obj = {\n   a: true,\n   b: true,\n-  \"𐊧\": true,\n+  𐊧: true,\n };\n\n```\n\n----------------------------------------\n\nTITLE: Comparing React Hook Formatting in JavaScript\nDESCRIPTION: Shows differences in formatting React hooks, particularly useImperativeHandle. Biome and Prettier have different approaches to wrapping arguments and function bodies across lines.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n function helloWorld() {\n   useEffect(() => {\n     // do something\n   }, [props.value]);\n   useEffect(() => {\n     // do something\n   }, [\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n   ]);\n }\n \n function helloWorldWithReact() {\n   React.useEffect(() => {\n     // do something\n   }, [props.value]);\n   React.useEffect(() => {\n     // do something\n   }, [\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n   ]);\n }\n \n function MyComponent(props) {\n   useEffect(\n     () => {\n       console.log(\"some code\", props.foo);\n     },\n \n     // We need to disable the eslint warning here,\n     // because of some complicated reason.\n     // eslint-disable line react-hooks/exhaustive-deps\n     [],\n   );\n \n   return null;\n }\n \n function Comp1() {\n   const { firstName, lastName } = useMemo(\n     () => parseFullName(fullName),\n     [fullName],\n   );\n }\n \n function Comp2() {\n   const { firstName, lastName } = useMemo(\n     () => func(),\n     [\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n     ],\n   );\n }\n \n function Comp3() {\n   const { firstName, lastName } = useMemo(\n     (aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk) =>\n       func(aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk),\n     [foo, bar, baz],\n   );\n }\n \n function Comp4() {\n   const { firstName, lastName } = useMemo(\n     () =>\n       (foo && bar && baz) ||\n       baz ||\n       (foo && baz(foo) + bar(foo) + foo && bar && baz) ||\n       baz ||\n       (foo && baz(foo) + bar(foo)),\n     [foo, bar, baz],\n   );\n }\n \n function Comp5() {\n   const { firstName, lastName } = useMemo(() => func(), [foo]);\n }\n \n function Component1() {\n-  useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, []);\n-  useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, [props.value]);\n-  useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, [\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-  ]);\n+  useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [],\n+  );\n+  useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [props.value],\n+  );\n+  useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+    ],\n+  );\n }\n \n function Component2() {\n-  React.useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, []);\n-  React.useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, [props.value]);\n-  React.useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, [\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-  ]);\n+  React.useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [],\n+  );\n+  React.useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [props.value],\n+  );\n+  React.useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+    ],\n+  );\n }\n \n function Component3() {\n-  useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, []);\n+  useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [],\n+  );\n }\n\n```\n\n----------------------------------------\n\nTITLE: Preserving Parentheses with @satisfies Comment - TypeScript\nDESCRIPTION: Shows how Biome now preserves parentheses around objects preceded with a @satisfies JSDoc comment.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_23\n\nLANGUAGE: ts\nCODE:\n```\nexport const PROPS = /** @satisfies {Record<string, string>} */ ({\n  prop: 0,\n});\n```\n\n----------------------------------------\n\nTITLE: Markdown Project Header Structure\nDESCRIPTION: HTML and Markdown structure for the project header including centered logo, badges, and documentation links.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_json_formatter/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\">\n\t<img alt=\"Biome - Toolchain of the web\" width=\"400\" src=\"https://raw.githubusercontent.com/biomejs/resources/main/svg/slogan-light-transparent.svg\"/>\n</p>\n\n<div align=\"center\">\n\n[![Discord chat][discord-badge]][discord-url]\n[![cargo version][cargo-badge]][cargo-url]\n\n[discord-badge]: https://badgen.net/discord/online-members/BypW39g6Yc?icon=discord&label=discord&color=green\n[discord-url]: https://biomejs.dev/chat\n[cargo-badge]: https://badgen.net/crates/v/biome_json_formatter?&color=green\n[cargo-url]: https://crates.io/crates/biome_json_formatter/\n\n</div>\n\n# `biome_json_formatter`\n\nBiome's JSON formatter implementation. Follow the [documentation](https://docs.rs/biome_json_formatter/).\n```\n\n----------------------------------------\n\nTITLE: Example of a doctest in Rust\nDESCRIPTION: Example of how to write a doctest in Rust, which is code in doc comments that gets executed during testing.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\n/// I am a doc test\n/// ```\n/// assert_eq!(true, true) // this is a doc test, and the assertion must pass\n/// ```\nfn some_fn() {\n\n}\n```\n\n----------------------------------------\n\nTITLE: Debugging Formatter Output\nDESCRIPTION: Example using the dbg_write! macro to debug formatter output by printing IR elements to the console with source location information.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\ndbg_write!(f, [\n\ttoken(\"hello\"),\n\tspace_token(),\n\ttoken(\"world\")\n])?\n\n// Writes\n// [src/main.rs:1][0] = StaticToken(\"hello\")\n// [src/main.rs:1][1] = Space\n// [src/main.rs:1][0] = StaticToken(\"world\")\n```\n\n----------------------------------------\n\nTITLE: Simplifying Arrow Functions with Empty Type Parameters\nDESCRIPTION: Shows how Biome simplifies arrow function expressions with empty type parameters by removing parentheses around single parameters.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_63\n\nLANGUAGE: diff\nCODE:\n```\n-const xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxxxxxxxxxxxxxxx<> = (\n-  arg,\n-) => null;\n+const xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxxxxxxxxxxxxxxx<> =\n+  arg => null;\n \n const xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxxxxxxxxxxxxxxx</* comment */> =\n-  (arg) => null;\n+  arg => null;\n \n const xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxxxxxxxxxxxxxxx<\n   // comment\n-> = (arg) => null;\n+> =\n+  arg => null;\n```\n\n----------------------------------------\n\nTITLE: Fixing Unterminated Strings in Parser\nDESCRIPTION: Example showing unterminated strings followed by a newline and space, which no longer causes the parser to panic.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n\"\n \"\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Intersection Types with Comments\nDESCRIPTION: Demonstrates formatting rules for TypeScript intersection types with various comment placements and type combinations.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\ntype A = (number | string) & boolean;\ntype B = (number | string) & boolean;\ntype C = (number | string) & boolean;\ntype D = (number | string) & boolean;\n\nlet b1: C;\nlet b2: C;\nlet b3: C;\nlet b4: C;\nlet b5: C;\nlet b6: /*1*/ C;\nlet b7: /*1*/ C;\nlet b8: /*1*/ C;\nlet b9: /*1*/ C;\nlet b10: /*1*/ /*2*/ C;\n```\n\n----------------------------------------\n\nTITLE: Installing Biome via npm\nDESCRIPTION: Command to install Biome as a development dependency with an exact version specification, ensuring consistent behavior across environments.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.zh-TW.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --save-dev --save-exact @biomejs/biome\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Import Assertions in JavaScript\nDESCRIPTION: This snippet shows how Biome handles empty import assertions, removing them entirely when they contain no actual assertions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n-export * as bar from \"bar.json\" assert {};\n+export * as bar from \"bar.json\";\n```\n\n----------------------------------------\n\nTITLE: Adding Parentheses for Nullcoalescing in Ternaries - JavaScript\nDESCRIPTION: Shows how Biome now adds parentheses around nullcoalescing expressions in ternaries for clarity of operator precedence, aligning with Prettier 3.3.3.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n- foo ? bar ?? foo : baz;\n+ foo ? (bar ?? foo) : baz;\n```\n\n----------------------------------------\n\nTITLE: Reformatting member chain method calls with line preservation in JavaScript\nDESCRIPTION: Demonstrates changes to member chain formatting while preserving line structure. Two specific method chains are collapsed from multiline to single line format while the rest maintain their spacing and comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n fooBar\n   .doSomething(\"Hello World\")\n   .doAnotherThing(\"Foo\", { foo: bar })\n \n   // App configuration.\n   .doOneMoreThing(config)\n \n   .run(() => console.log(\"Bar\"));\n \n bigDeal\n \n   .doSomething(\"Hello World\")\n \n   // Hello world\n   .doAnotherThing(\"Foo\", { foo: bar })\n \n   // App configuration.\n   .doOneMoreThing(config)\n \n   .run(() => console.log(\"Bar\"));\n \n foo.bar.baz\n \n   .doSomething(\"Hello World\")\n \n   // Hello world\n   .foo.bar.doAnotherThing(\"Foo\", { foo: bar })\n \n   .doOneMoreThing(config)\n   .bar.run(() => console.log(\"Bar\"));\n \n (somethingGood ? thisIsIt : maybeNot)\n \n   // Hello world\n   .doSomething(\"Hello World\")\n \n   .doAnotherThing(\"Foo\", { foo: bar }) // Run this\n   .run(() => console.log(\"Bar\")); // Do this\n \n helloWorld\n \n   .text()\n \n   .then((t) => t);\n \n (\n   veryLongVeryLongVeryLong ||\n   anotherVeryLongVeryLongVeryLong ||\n   veryVeryVeryLongError\n )\n \n   .map((tickets) => TicketRecord.createFromSomeLongString())\n \n   .filter((obj) => !!obj);\n \n const sel = this.connections\n \n   .concat(this.activities.concat(this.operators))\n   .filter((x) => x.selected);\n \n-Object.entries(obj)\n+Object.entries(obj).forEach((e) => console.log(e));\n \n-  .forEach((e) => console.log(e));\n-\n-this.fetch(\"/foo\")\n-\n-  .then((response) => response.json());\n+this.fetch(\"/foo\").then((response) => response.json());\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Specific Node Types in JavaScript AST\nDESCRIPTION: These functions check for various node types in a JavaScript AST, including string literals, template literals, and specific identifiers like 'undefined'.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isStringLiteralOrTemplateLiteral(node) {\n  return isStringLiteral(node) || node.type === \"TemplateLiteral\";\n}\n\nfunction isUndefinedIdentifier(node) {\n  return node.type === \"Identifier\" && node.name === \"undefined\";\n}\n```\n\n----------------------------------------\n\nTITLE: Running Biome Lint Test Script\nDESCRIPTION: Shell script that executes the Biome lint command on source files. The script uses strict error checking with set -eu to fail on any command errors or undefined variables. It runs the Biome binary through cargo to perform linting on the src directory.\nSOURCE: https://github.com/biomejs/biome/blob/main/e2e-tests/README.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\n# fail if any command fail or if some variables are undefined\nset -eu\n\ncargo run --bin biome -- lint src\n\n```\n\n----------------------------------------\n\nTITLE: Reformatting Arrow Function with Dangling Comment in JavaScript\nDESCRIPTION: This snippet shows a change in formatting for an arrow function with a dangling comment, adjusting the placement of parentheses and comment.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nfoo(\n  (\n    // foo\n  ) => {},\n);\n```\n\n----------------------------------------\n\nTITLE: Fixing noConfusingVoidType Rule for Type Parameters in TypeScript\nDESCRIPTION: Code example demonstrating the fix for issue #1383 where noConfusingVoidType now correctly accepts the void type when used in type parameter lists in TypeScript code.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_126\n\nLANGUAGE: typescript\nCODE:\n```\nf<void>();\n```\n\n----------------------------------------\n\nTITLE: Preparing Prettier Tests\nDESCRIPTION: Command to run the test preparation script with the Prettier root directory as an argument.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_css_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnode prepare_tests.js <prettier root directory>\n```\n\n----------------------------------------\n\nTITLE: Formatting Union Types and Type Definitions with Comments in TypeScript\nDESCRIPTION: Demonstrates various ways to format union types with parentheses, type definitions with comments, and proper positioning of comments in type declarations. The code demonstrates the consistent placement of comments after type keywords rather than before the equals sign.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_67\n\nLANGUAGE: diff\nCODE:\n```\n export type A =\n   | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n   | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n \n export type B =\n   | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n   | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n \n export type C =\n   | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n   | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n \n export type D =\n   | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n   | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n \n export type Multi = (string | number)[];\n \n function f(): string | number {}\n \n var x: string | number;\n var y: string | number;\n \n class Foo<T extends string | number> {}\n \n interface Interface {\n   i: (X | Y) & Z;\n   j: Partial<X | Y>;\n }\n \n type State = {\n   sharedProperty: any;\n } & (\n   | { discriminant: \"FOO\"; foo: any }\n   | { discriminant: \"BAR\"; bar: any }\n   | { discriminant: \"BAZ\"; baz: any }\n );\n \n const foo1 = [abc, def, ghi, jkl, mno, pqr, stu, vwx, yz] as (\n   | string\n   | undefined\n )[];\n \n const foo2: (\n   | AAAAAAAAAAAAAAAAAAAAAA\n   | BBBBBBBBBBBBBBBBBBBBBB\n   | CCCCCCCCCCCCCCCCCCCCCC\n   | DDDDDDDDDDDDDDDDDDDDDD\n )[] = [];\n \n const foo3: keyof (\n   | AAAAAAAAAAAAAAAAAAAAAA\n   | BBBBBBBBBBBBBBBBBBBBBB\n   | CCCCCCCCCCCCCCCCCCCCCC\n   | DDDDDDDDDDDDDDDDDDDDDD\n ) = bar;\n \n const foo4:\n   | foo\n   | (\n       | AAAAAAAAAAAAAAAAAAAAAA\n       | BBBBBBBBBBBBBBBBBBBBBB\n       | CCCCCCCCCCCCCCCCCCCCCC\n       | DDDDDDDDDDDDDDDDDDDDDD\n     ) = bar;\n \n let a1: C;\n let a2: C;\n let a3: C;\n let a4: C;\n let a5: C;\n let a6: /*1*/ C;\n let a7: /*1*/ C;\n let a8: /*1*/ C;\n let a9: /*1*/ C;\n let a10: /*1*/ /*2*/ C;\n let a11: /*1*/ /*2*/ C;\n \n let aa1: /*1*/ /*2*/ C | D;\n let aa2: /*1*/ /*2*/ C | /*3*/ D;\n let aa3: /*1*/ /*2*/ C | /*3*/ D /*4*/;\n \n type A1 = C;\n type A2 = C;\n type A3 = C;\n type A4 = C;\n type A5 = C;\n-type A6 /*1*/ = C;\n-type A7 /*1*/ = C;\n-type A8 /*1*/ = C;\n-type A9 /*1*/ = C;\n-type A10 /*1*/ = /*2*/ C;\n-type A11 /*1*/ = /*2*/ C;\n-type A12 /*1*/ = C;\n+type A6 = /*1*/ C;\n+type A7 = /*1*/ C;\n+type A8 = /*1*/ C;\n+type A9 = /*1*/ C;\n+type A10 = /*1*/ /*2*/ C;\n+type A11 = /*1*/ /*2*/ C;\n+type A12 = /*1*/ C;\n type A13 = /*1*/ C;\n \n type Aa1 = /*1*/ /*2*/ C | D;\n type Aa2 = /*1*/ /*2*/ C | /*3*/ D;\n type Aa3 = /*1*/ /*2*/ C | /*3*/ D /*4*/;\n \n type C1 = /*1*/ a | b;\n type C2 = /*1*/ a | b;\n type C3 = /*1*/ a | b;\n-type C4 /*1*/ = a | b;\n+type C4 = /*1*/ a | b;\n type C5 = /*1*/ a | b;\n type C6 /*0*/ = /*1*/ a | b;\n \n type Ctor = (new () => X) | Y;\n```\n\n----------------------------------------\n\nTITLE: Demonstration of Object Literal with __proto__ Property\nDESCRIPTION: Shows the difference between computed and non-computed __proto__ property in an object literal, which is now handled correctly by the useLiteralKeys rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n{[\"__proto__\"]: null} // Sets a regular property\n{__proto__: null} // Sets the prototype of the object to null\n```\n\n----------------------------------------\n\nTITLE: Formatting Decorated Function Components in TypeScript React\nDESCRIPTION: This snippet shows formatting changes for decorated function components in TypeScript React. It improves readability by adjusting indentation and line breaks for decorated functions with props.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_78\n\nLANGUAGE: diff\nCODE:\n```\n-const Counter = decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  const p = useDefault(props, {\n-    initialCount: 0,\n-    label: \"Counter\",\n-  });\n+const Counter = decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    const p = useDefault(props, {\n+      initialCount: 0,\n+      label: \"Counter\",\n+    });\n \n-  const [s, set] = useState({ count: p.initialCount });\n-  const onClick = () => set(\"count\", (it) => it + 1);\n+    const [s, set] = useState({ count: p.initialCount });\n+    const onClick = () => set(\"count\", (it) => it + 1);\n \n-  return () => (\n-    <button onclick={onClick}>\n-      {p.label}: {s.count}\n-    </button>\n-  );\n-});\n+    return () => (\n+      <button onclick={onClick}>\n+        {p.label}: {s.count}\n+      </button>\n+    );\n+  },\n+);\n\n-const Counter2 = decorators.decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  return () => (\n-    <button onclick={onClick}>\n-      {p.label}: {s.count}\n-    </button>\n-  );\n-});\n+const Counter2 = decorators.decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    return () => (\n+      <button onclick={onClick}>\n+        {p.label}: {s.count}\n+      </button>\n+    );\n+  },\n+);\n\n-export default decorators.decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  return foo;\n-});\n+export default decorators.decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    return foo;\n+  },\n+);\n\n-export = decorators.decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  return foo;\n-});\n+export = decorators.decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    return foo;\n+  },\n+);\n\n-module.exports = decorators.decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  return foo;\n-});\n+module.exports = decorators.decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    return foo;\n+  },\n+);\n\nconst Counter = decorator(\"foo\")(\n  decorator(\"bar\")(\n    (props: {\n      loremFoo1: Array<Promise<any>>;\n      ipsumBarr2: Promise<number>;\n    }) => {\n      return <div />;\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Formatting Empty Import Attributes\nDESCRIPTION: Shows the removal of empty 'with' blocks from import/export statements.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nexport * as bar from \"bar.json\";\n```\n\n----------------------------------------\n\nTITLE: Enforcing Shorthand Function Types in TypeScript\nDESCRIPTION: The useShorthandFunctionType rule enforces using function types instead of object types with call signatures in TypeScript. It suggests simplifying interface definitions to type aliases with arrow function syntax.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_121\n\nLANGUAGE: diff\nCODE:\n```\n- interface Example {\n-   (): string;\n- }\n+ type Example = () => string\n```\n\n----------------------------------------\n\nTITLE: Invalid Variable Names with Consecutive Delimiters\nDESCRIPTION: JavaScript code showing an invalid constant name with consecutive underscores, which is now properly detected by the useNamingConvention rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nexport const MY__CONSTANT = 0;\n```\n\n----------------------------------------\n\nTITLE: Handling Type-Only Imports with Import Attributes in CommonJS TypeScript Files\nDESCRIPTION: Example of type-only imports with import attributes in CommonJS-enabled TypeScript files, which is supported since TypeScript 5.3 and allowed in files with the .cts extension.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_0\n\nLANGUAGE: cts\nCODE:\n```\nimport type { TypeFromRequire } from \"pkg\" with {\n    \"resolution-mode\": \"require\"\n};\n```\n\n----------------------------------------\n\nTITLE: Running Biome CLI Commands in Shell\nDESCRIPTION: Demonstrates various Biome CLI commands for formatting, explaining rules, and checking daemon logs.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_114\n\nLANGUAGE: shell\nCODE:\n```\nbiome format --write --changed\n\nbiome explain noDebugger\nbiome explain useAltText\n\nbiome explain daemon-logs\n```\n\n----------------------------------------\n\nTITLE: Removing CSS Formatter Configuration - JSON\nDESCRIPTION: Shows that the CSS formatter is now enabled by default, removing the need for explicit configuration in biome.json.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n{\n-  \"css\": {\n-    \"formatter\": {\n-      \"enabled\": true\n-    }\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Heap Profiling with dhat in Bash\nDESCRIPTION: Command to run heap profiling using dhat for the Biome project benchmarks.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncargo run -p xtask_bench --features dhat-heap --release-with-debug\n```\n\n----------------------------------------\n\nTITLE: Grouping Type Exports in Named Export Statements\nDESCRIPTION: Shows how the useExportType rule suggests converting individual type exports to a grouped type export statement for better code organization.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n- export { type A, type B } from \"\";\n+ export type { A, B } from \"\";\n```\n\n----------------------------------------\n\nTITLE: Formatting AST Node Fields\nDESCRIPTION: Example showing the correct way to format mandatory tokens from AST nodes using the proper token accessors.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nfn fmt_fields(node: Node, f: &mut JsFormatter) -> FormatResult<()> {\n\t write!(f, [node.l_paren_token().format()])?; // yes\n\t write!(f, [token(\"(\")])?; // no\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Interface Declarations\nDESCRIPTION: Shows formatting rules for TypeScript interfaces with extends clauses, generics and multiple inheritance. Includes handling of line breaks and indentation.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface Environment1 extends GenericEnvironment<\n  SomeType,\n  AnotherType,\n  YetAnotherType,\n> {\n  m(): void;\n}\nexport class Environment2 extends GenericEnvironment<\n  SomeType,\n  AnotherType,\n  YetAnotherType,\n  DifferentType1,\n  DifferentType2,\n  DifferentType3,\n  DifferentType4,\n> {\n  m() {};\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Type Parameters with Comments\nDESCRIPTION: Shows proper indentation for type parameters with comments, maintaining readability in complex generic type declarations.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_89\n\nLANGUAGE: typescript\nCODE:\n```\nfunction parseFunctionBodyAndFinish<\n  T extends // comment\n  N.Function | N.TSDeclareMethod | Baz,\n>();\n```\n\n----------------------------------------\n\nTITLE: Formatting Empty TypeScript Imports with Comments\nDESCRIPTION: Shows how Biome handles empty imports and type imports with various comment positions, particularly focusing on preserving comments in different locations.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_46\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {} from \"@types/googlemaps\";\nimport \"a\";\nimport /* comment */ \"a\";\nimport // comment\n\"a\";\nimport type {/* comment */} from \"a\";\nimport /* comment */ type {} from \"a\";\nimport type {} /* comment */ from \"a\";\nimport type {} from /* comment */ \"a\";\nimport /* comment */ type {/* comment */} /* comment */ from /* comment */ \"a\";\nimport type {\n  // comment\n} from \"a\";\nimport // comment\ntype {} from \"a\";\nimport type {} from // comment\n\"a\";\nimport type {} from // comment\n\"a\";\nimport type // comment\n{\n  // comment\n} from // comment\n// comment\n\"a\";\n\nimport // {} from\n\"a\";\nimport type {} from // comment ends with from\n\"a\";\nimport type {} from /* comment ends with from */ \"a\";\nimport type {} from // comment not ends with from ___\n\"a\";\nimport type {} from /* comment not ends with from ___ */ \"a\";\n\nimport // comment ends with from\n\"a\";\nimport /* comment ends with from */ \"a\";\nimport // comment not ends with from ___\n\"a\";\nimport /* comment not ends with from ___ */ \"a\";\n```\n\n----------------------------------------\n\nTITLE: Fixing Case-Insensitive JSX Props in React\nDESCRIPTION: Example of JSX code demonstrating case-sensitive properties in Material UI TextField component, which is now correctly handled by the noDuplicateJsxProps rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_140\n\nLANGUAGE: jsx\nCODE:\n```\n<TextField inputLabelProps=\"\" InputLabelProps=\"\"></TextField>\n```\n\n----------------------------------------\n\nTITLE: JSX Semantic Elements Example\nDESCRIPTION: Shows acceptable usage of div elements with img role for grouping images or creating composite images.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_14\n\nLANGUAGE: jsx\nCODE:\n```\n<div role=\"img\" aria-label=\"That cat is so cute\">\n  <p>&#x1F408; &#x1F602;</p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Empty Statements with Comments in JavaScript\nDESCRIPTION: Shows how multiple comments are consolidated and formatted around empty statements and function declarations.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\na; /* a */ /* c */ // b\n\nfoo; // first // second // third\n\nfunction x() {} // first // second\n\na =\n  b + // 1 // 2\n  c + // 3 // 4\n  d /* 6 */ + // 5\n  e; // 7\n```\n\n----------------------------------------\n\nTITLE: Formatting JSX End Tag Comments\nDESCRIPTION: This snippet demonstrates changes in formatting comments within JSX end tags. It adjusts the placement of line comments and block comments for better consistency.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_49\n\nLANGUAGE: JSX\nCODE:\n```\n```diff\n /* =========== before slash =========== */\n <a></\n   // line\n   a\n >;\n <a></ /* block */\n a>;\n \n <></\n   // line\n >;\n <></ /* block */>;\n \n /* =========== after slash =========== */\n <a></\n   // line\n   a\n >;\n <a></ /* block */\n a>;\n \n <></\n   // line\n >;\n <></ /* block */>;\n \n /* =========== after name =========== */\n-<a></a>; // line\n+<a></a // line\n+>;\n <a></a /* block */>;\n \n /* =========== block =========== */\n <a></a /* block */>;\n <></ /* block */>;\n \n /* =========== multiple ===========  */\n <a></\n   // line 1\n   // line 2\n   a\n >;\n <a></ /* block1 */ /* block2 */\n a>;\n <a></\n   /* block */ // line\n   a\n >;\n \n <></\n   // line 1\n   // line 2\n >;\n <></ /* block1 */\n   /* block2 */>;\n <></\n   /* block */\n   // line\n >;\n```\n```\n\n----------------------------------------\n\nTITLE: Public HTML Node Formatting Function\nDESCRIPTION: Public API function for formatting HTML syntax nodes using the formatter infrastructure.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\npub fn format_node(\n    options: HtmlFormatOptions,\n    root: &HtmlSyntaxNode,\n) -> FormatResult<Formatted<HtmlFormatContext>> {\n    biome_formatter::format_node(root, HtmlFormatLanguage::new(options))\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Multiple Signals in Semantic Rule\nDESCRIPTION: Extended implementation showing how to handle multiple signals in a semantic rule using boxed slices for memory efficiency.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_21\n\nLANGUAGE: rust\nCODE:\n```\nimpl Rule for ForLoopCountReferences {\n    type Query = Semantic<JsForStatement>;\n    type State = TextRange;\n    type Signals = Box<[Self::State]>;\n    type Options = ();\n\n    fn run(ctx: &RuleContext<Self>) -> Self::Signals {\n        let node = ctx.query();\n\n        let model = ctx.model();\n\n        ...\n\n        // Get all write references\n        let write_references = binding.all_writes(model);\n\n        // Find all places where variable is being written to and get node ranges\n        let write_ranges = write_references.into_iter().map(|write| {\n            let syntax = write.syntax();\n            let range = syntax.text_range();\n\n            Some(range)\n        }).collect::<Vec<_>>();\n\n        write_ranges.into_boxed_slice()\n    }\n\n    fn diagnostic(_: &RuleContext<Self>, range: &Self::State) -> Option<RuleDiagnostic> {\n        // This will be called for each vector item\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Test Reports\nDESCRIPTION: Instructions for setting environment variables to control the generation and format of test reports, including differences between biome_graphql_formatter output and Prettier snapshots.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_graphql_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nREPORT_PRETTIER=1\n```\n\nLANGUAGE: shell\nCODE:\n```\nREPORT_TYPE=json | markdown\n```\n\nLANGUAGE: shell\nCODE:\n```\nINCOMPATIBLE_ONLY=1\n```\n\n----------------------------------------\n\nTITLE: Handling Fragments in useJsxKeyInIterable Rule\nDESCRIPTION: Demonstrates how the useJsxKeyInIterable rule now handles more cases involving fragments, showing both valid and invalid examples of using keys in iterable JSX elements.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_47\n\nLANGUAGE: jsx\nCODE:\n```\n// valid\n[].map((item) => {\n\treturn <>{item.condition ? <div key={item.id} /> : <div key={item.id}>foo</div>}</>;\n});\n\n// invalid\n[].map((item) => {\n\treturn <>{item.condition ? <div /> : <div>foo</div>}</>;\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Import Statements with Comments\nDESCRIPTION: Shows formatting rules for TypeScript import statements with various comment placements and type imports. Includes empty imports and comment handling.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_74\n\nLANGUAGE: typescript\nCODE:\n```\nimport type {} from \"@types/googlemaps\";\nimport \"a\";\nimport /* comment */ \"a\";\nimport // comment\n\"a\";\nimport type {/* comment */} from \"a\";\nimport /* comment */ type {} from \"a\";\nimport type {} /* comment */ from \"a\";\nimport type {} from /* comment */ \"a\";\nimport /* comment */ type {/* comment */} /* comment */ from /* comment */ \"a\";\nimport type {\n  // comment\n} from \"a\";\nimport // comment\ntype {} from \"a\";\nimport type {} from // comment\n\"a\";\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Arrow Functions with Generic Type Parameters\nDESCRIPTION: This snippet shows formatting changes for TypeScript arrow functions that include generic type parameters, removing trailing commas from generic type parameter lists.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_31\n\nLANGUAGE: typescript\nCODE:\n```\nconst foo1 =\n  // comment\n-\n-    <T,>() =>\n+    <T>() =>\n    () =>\n      1;\n\nconst foo2 =\n  // comment\n  () => () => 1;\n\nconst foo3 =\n  // comment\n-  <T,>() => 1;\n+  <T>() => 1;\n\nfoo(\n  // comment\n-  <T,>() =>\n+  <T>() =>\n    () =>\n      1,\n);\n\na ||\n  // comment\n-  (<T,>() =>\n+  (<T>() =>\n    () =>\n      1);\n\nvoid (\n  // comment\n-  (<T,>() =>\n+  (<T>() =>\n    () =>\n      1)\n);\n\ncond\n  ? // comment\n-    <T,>() =>\n+    <T>() =>\n      () =>\n        1\n  : // comment\n-    <T,>() =>\n+    <T>() =>\n      () =>\n        1;\n\nfoo4 =\n  // comment\n-\n-    <T,>() =>\n+    <T>() =>\n    () =>\n      1;\n```\n\n----------------------------------------\n\nTITLE: Formatting Prettier-Ignore Directives with Parenthesized Expressions\nDESCRIPTION: This snippet shows how Biome formats parenthesized expressions with prettier-ignore directives, particularly when used with comma expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n oneArgument(\n   // prettier-ignore\n   (0, 1),\n );\n \n a =\n-  // prettier-ignore\n-  (0, 1);\n+  (\n+ // prettier-ignore\n+ (0, 1)\n+);\n```\n\n----------------------------------------\n\nTITLE: Handling Reactive Statements in Svelte Components\nDESCRIPTION: Shows how the noUnusedLabels and noConfusingLabels rules now ignore Svelte reactive statements in Svelte components.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_50\n\nLANGUAGE: svelte\nCODE:\n```\n<script>\n$: { /* reactive block */ }\n</script>\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Unused TypeScript Interface Detection\nDESCRIPTION: Example showing how the noUnusedVariables rule can detect unused TypeScript interfaces, even when the interface references itself in its own definition.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_136\n\nLANGUAGE: typescript\nCODE:\n```\ninterface I {\n  instance(): I\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Tagged Template Literals with Comments in JavaScript\nDESCRIPTION: Shows how comments are formatted around tagged template literals.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfoo``; // comment\n\nfoo // comment\n``;\n\nfoo // comment\n`\n`;\n\nfoo /* comment */`\n`;\n\nfoo /* comment */`\n`;\n```\n\n----------------------------------------\n\nTITLE: Handling Trailing Commas in Type Parameters vs Arguments\nDESCRIPTION: Shows how Biome handles trailing commas in type parameters in class instantiations, adjusting both indentation and trailing comma placement.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_60\n\nLANGUAGE: diff\nCODE:\n```\n class FooClass<A, B, C> {\n   a: A;\n   b: B;\n   c: C;\n }\n \n const instance = new FooClass<\n-  boolean,\n-  number,\n-  string // [ts] Trailing comma not allowed.\n->();\n+\tboolean,\n+\tnumber,\n+\tstring, // [ts] Trailing comma not allowed.\n+\t>();\n```\n\n----------------------------------------\n\nTITLE: Adding Trailing Commas in Object Destructuring\nDESCRIPTION: Shows how Biome adds trailing commas to object destructuring patterns for consistency, even when using rest patterns.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_59\n\nLANGUAGE: diff\nCODE:\n```\n export class BaseSingleLevelProfileTargeting<\n   T extends ValidSingleLevelProfileNode,\n > {}\n \n enum Enum {\n   x = 1,\n   y = 2,\n }\n \n const {\n   longKeySoThisWillGoOnMultipleLines,\n   longKeySoThisWillGoOnMultipleLines2,\n   longKeySoThisWillGoOnMultipleLines3,\n-  ...rest\n+  ...rest,\n } = something;\n```\n\n----------------------------------------\n\nTITLE: Using Config Path with Biome CLI\nDESCRIPTION: Example of using the `--config-path` flag to specify a configuration file path with Biome. This allows using a configuration file with any filename instead of relying on auto-resolution.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_62\n\nLANGUAGE: shell\nCODE:\n```\nbiome format --config-path=../biome.json ./src\n```\n\n----------------------------------------\n\nTITLE: Sorting Imports in Svelte Script Block\nDESCRIPTION: Example of how Biome sorts imports inside the script block of Svelte files, showing the diff between unsorted and sorted imports.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_70\n\nLANGUAGE: diff\nCODE:\n```\n<script setup lang=\"ts\">\n- import Button from \"./components/Button.svelte\";\n- import * as svelteUse from \"svelte-use\";\n+ import * as svelteUse from \"svelte-use\";\n+ import Button from \"./components/Button.svelte\";\n</script/>\n\n<div></div>\n```\n\n----------------------------------------\n\nTITLE: Using Skipped Tests in JavaScript Testing Frameworks\nDESCRIPTION: Code example showing the skipped test syntax that would be flagged by the noSkippedTests rule. This rule prevents developers from accidentally leaving tests in a skipped state.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\ndescribe.skip(\"test\", () => {});\nit.skip(\"test\", () => {});\n```\n\n----------------------------------------\n\nTITLE: Object Destructuring with Unconventional Variable Names\nDESCRIPTION: Example of object destructuring with an unusual variable naming style that is now accepted by the useNamingConvention rule to prevent runtime errors.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Strange_Style } = obj;\n```\n\n----------------------------------------\n\nTITLE: Formatting Comments in TypeScript Arrow Functions\nDESCRIPTION: This snippet shows changes to comment positioning in TypeScript arrow functions, specifically moving trailing comments to before the semicolon rather than after it.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_32\n\nLANGUAGE: typescript\nCODE:\n```\nconst fn1 = () => {\n  return;\n-}; /* foo */\n+} /* foo */;\n\nconst fn2 = () => {\n  return;\n};\n\n// foo\n```\n\n----------------------------------------\n\nTITLE: Committing Changes for a New Biome Lint Rule\nDESCRIPTION: These shell commands demonstrate how to stage, commit, and push changes for a new lint rule in the Biome project. They include the recommended commit message format for feature additions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_33\n\nLANGUAGE: shell\nCODE:\n```\n> git add -A\n> git commit -m 'feat(biome_js_analyze): myRuleName'\n```\n\n----------------------------------------\n\nTITLE: Declaring Lint Rule with Fix Kind\nDESCRIPTION: Example of declaring a lint rule with fix kind metadata for code actions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_22\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_analyze::{declare_lint_rule, FixKind};\n\ndeclare_lint_rule! {\n    /// Documentation\n    pub(crate) ExampleRule {\n        version: \"next\",\n        name: \"myRuleName\",\n        language: \"js\",\n        recommended: false,\n        fix_kind: FixKind::Safe,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Detecting Suspicious Semicolons in JSX with noSemicolonInJsx Rule\nDESCRIPTION: Code example showing potentially erroneous semicolons inside JSX elements that would be flagged by the noSemicolonInJsx rule. This catches syntax mistakes that might lead to unexpected behavior.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_91\n\nLANGUAGE: jsx\nCODE:\n```\nconst Component = () => {\n  return (\n    <div>\n      <div />;\n    </div>\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Modifying Escaped Using Binding in JavaScript\nDESCRIPTION: Demonstrates the formatting of an escaped identifier in an await using statement. Shows how Unicode escape sequences are handled in variable bindings.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nasync function f() {\n  await using \\u0061b = c;\n}\n```\n\n----------------------------------------\n\nTITLE: Removing CSS Linter Configuration in JSON\nDESCRIPTION: Shows the removal of explicit CSS linter configuration from biome.json, as the CSS linter is now enabled by default.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n{\n-  \"css\": {\n-    \"linter\": {\n-      \"enabled\": true\n-    }\n-  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Assert Calls inside waitFor in Testing\nDESCRIPTION: Example showing expect calls inside waitFor, which are now considered valid by the noMisplacedAssertions rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nimport { waitFor } from '@testing-library/react';\n\nawait waitFor(() => {\n  expect(111).toBe(222);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Empty Object Type for Non-nullable Intersection Types\nDESCRIPTION: Example showing how noBannedTypes allows using {} in type intersections to create non-nullable equivalent types.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_159\n\nLANGUAGE: typescript\nCODE:\n```\ntype NonNullableMyType = MyType & {};\n```\n\n----------------------------------------\n\nTITLE: Reformatting Long Import Statements with Attributes in JavaScript\nDESCRIPTION: This snippet demonstrates changes in formatting long import statements with attributes, breaking them into multiple lines for improved readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nimport a40 from \"./aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\" with {\n  type: \"json\",\n};\nimport a50 from \"./aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\" with {\n  type: \"json\",\n};\nimport a60 from \"./aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\" with {\n  type: \"json\",\n};\nimport a70 from \"./aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\" with {\n  type: \"json\",\n};\nimport a80 from \"./aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa.json\" with {\n  type: \"json\",\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Differences in Curried Arrow Functions in JavaScript\nDESCRIPTION: This diff shows significant formatting differences between Biome and Prettier when handling curried arrow functions. Biome formats certain curried functions more compactly by removing line breaks and adjusting indentation.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_4\n\nLANGUAGE: diff\nCODE:\n```\n const fn1 = (a) => 3;\n const fn2 = (a) => (b) => 3;\n const fn3 = (a) => (b) => (c) => 3;\n const fn4 = (a) => (b) => (c) => (d) => 3;\n const fn5 = (a) => (b) => (c) => (d) => (e) => 3;\n const fn6 = (a) => (b) => (c) => (d) => (e) => (g) => 3;\n const fn7 = (a) => (b) => (c) => (d) => (e) => (g) => (f) => 3;\n \n const fn8 = (a) => ({ foo: bar, bar: baz, baz: foo });\n const fn9 = (a) => (b) => ({ foo: bar, bar: baz, baz: foo });\n const fn10 = (a) => (b) => (c) => ({ foo: bar, bar: baz, baz: foo });\n const fn11 = (a) => (b) => (c) => (d) => ({ foo: bar, bar: baz, baz: foo });\n const fn12 = (a) => (b) => (c) => (d) => (e) => ({\n   foo: bar,\n   bar: baz,\n   baz: foo,\n });\n const fn13 = (a) => (b) => (c) => (d) => (e) => (g) => ({\n   foo: bar,\n   bar: baz,\n   baz: foo,\n });\n const fn14 = (a) => (b) => (c) => (d) => (e) => (g) => (f) => ({\n   foo: bar,\n   bar: baz,\n   baz: foo,\n });\n \n const curryTest =\n   (argument1) =>\n   (argument2) =>\n   (argument3) =>\n   (argument4) =>\n   (argument5) =>\n   (argument6) =>\n   (argument7) =>\n   (argument8) =>\n   (argument9) =>\n   (argument10) =>\n   (argument11) =>\n   (argument12) => ({\n     foo: argument1,\n     bar: argument2,\n   });\n \n let curryTest2 =\n   (argument1) =>\n   (argument2) =>\n   (argument3) =>\n   (argument4) =>\n   (argument5) =>\n   (argument6) =>\n   (argument7) =>\n   (argument8) =>\n   (argument9) =>\n   (argument10) =>\n   (argument11) =>\n   (argument12) => {\n     const foo = \"foo\";\n     return foo + \"bar\";\n   };\n \n curryTest2 =\n   (argument1) =>\n   (argument2) =>\n   (argument3) =>\n   (argument4) =>\n   (argument5) =>\n   (argument6) =>\n   (argument7) =>\n   (argument8) =>\n   (argument9) =>\n   (argument10) =>\n   (argument11) =>\n   (argument12) => {\n     const foo = \"foo\";\n     return foo + \"bar\";\n   };\n \n throw (argument1) =>\n   (argument2) =>\n   (argument3) =>\n   (argument4) =>\n   (argument5) =>\n   (argument6) =>\n   (argument7) =>\n   (argument8) =>\n   (argument9) =>\n   (argument10) =>\n   (argument11) =>\n   (argument12) => {\n     const foo = \"foo\";\n     return foo + \"bar\";\n   };\n \n foo(\n   (argument1) =>\n     (argument2) =>\n     (argument3) =>\n     (argument4) =>\n     (argument5) =>\n     (argument6) =>\n     (argument7) =>\n     (argument8) =>\n     (argument9) =>\n     (argument10) =>\n     (argument11) =>\n     (argument12) =>\n       3,\n );\n \n-foo(\n-  (argument1) =>\n-    (argument2) =>\n-    (argument3) =>\n-    (argument4) =>\n-    (argument5) =>\n-    (argument6) =>\n-    (argument7) =>\n-    (argument8) =>\n-    (argument9) =>\n-    (argument10) =>\n-    (argument11) =>\n-    (argument12) => ({\n-      foo: bar,\n-      bar: baz,\n-      baz: foo,\n-    }),\n-);\n+foo((argument1) =>\n+  (argument2) =>\n+  (argument3) =>\n+  (argument4) =>\n+  (argument5) =>\n+  (argument6) =>\n+  (argument7) =>\n+  (argument8) =>\n+  (argument9) =>\n+  (argument10) =>\n+  (argument11) =>\n+  (argument12) => ({\n+    foo: bar,\n+    bar: baz,\n+    baz: foo,\n+  }));\n \n-foo(\n-  (argument1) =>\n-    (argument2) =>\n-    (argument3) =>\n-    (argument4) =>\n-    (argument5) =>\n-    (argument6) =>\n-    (argument7) =>\n-    (argument8) =>\n-    (argument9) =>\n-    (argument10) =>\n-    (argument11) =>\n-    (argument12) => {\n-      const foo = \"foo\";\n-      return foo + \"bar\";\n-    },\n-);\n+foo((argument1) =>\n+  (argument2) =>\n+  (argument3) =>\n+  (argument4) =>\n+  (argument5) =>\n+  (argument6) =>\n+  (argument7) =>\n+  (argument8) =>\n+  (argument9) =>\n+  (argument10) =>\n+  (argument11) =>\n+  (argument12) => {\n+    const foo = \"foo\";\n+    return foo + \"bar\";\n+  });\n \n (\n   (argument1) =>\n   (argument2) =>\n   (argument3) =>\n   (argument4) =>\n   (argument5) =>\n   (argument6) =>\n   (argument7) =>\n   (argument8) =>\n   (argument9) =>\n   (argument10) =>\n   (argument11) =>\n   (argument12) =>\n     3\n )(3);\n \n bar(\n-  foo(\n-    (argument1) =>\n-      (argument2) =>\n-      (argument3) =>\n-      (argument4) =>\n-      (argument5) =>\n-      (argument6) =>\n-      (argument7) =>\n-      (argument8) =>\n-      (argument9) =>\n-      (argument10) =>\n-      (argument11) =>\n-      (argument12) => ({\n-        foo: bar,\n-        bar: baz,\n-      }),\n-  ),\n+  foo((argument1) =>\n+    (argument2) =>\n+    (argument3) =>\n+    (argument4) =>\n+    (argument5) =>\n+    (argument6) =>\n+    (argument7) =>\n+    (argument8) =>\n+    (argument9) =>\n+    (argument10) =>\n+    (argument11) =>\n+    (argument12) => ({\n+      foo: bar,\n+      bar: baz,\n+    })),\n );\n \n const baaaz =\n   (aaaaa1, bbbbb1) =>\n   (aaaaa2, bbbbb2) =>\n   (aaaaa3, bbbbb3) =>\n   (aaaaa4, bbbbb4) => ({\n     foo: bar,\n   });\n \n new Fooooooooooooooooooooooooooooooooooooooooooooooooooo(\n   (action) => (next) => (next) => (next) => (next) => (next) => (next) =>\n     dispatch(action),\n );\n \n foo?.Fooooooooooooooooooooooooooooooooooooooooooooooooooo(\n   (action) => (next) => (next) => (next) => (next) => (next) => (next) =>\n     dispatch(action),\n );\n \n foo((action) => (action) => action);\n \n-import(\n-  (argument1) =>\n-    (argument2) =>\n-    (argument3) =>\n-    (argument4) =>\n-    (argument5) =>\n-    (argument6) =>\n-    (argument7) =>\n-    (argument8) =>\n-    (argument9) =>\n-    (argument10) =>\n-    (argument11) =>\n-    (argument12) => {\n-      const foo = \"foo\";\n-      return foo + \"bar\";\n-    }\n-);\n+import((argument1) =>\n+  (argument2) =>\n+  (argument3) =>\n+  (argument4) =>\n+  (argument5) =>\n+  (argument6) =>\n+  (argument7) =>\n+  (argument8) =>\n+  (argument9) =>\n+  (argument10) =>\n+  (argument11) =>\n+  (argument12) => {\n+    const foo = \"foo\";\n+    return foo + \"bar\";\n+  });\n```\n\n----------------------------------------\n\nTITLE: Class Property Decorators and Comments\nDESCRIPTION: Shows changes to decorator and comment placement for various class property and method definitions, focusing on improving readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_60\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo {\n  @decorator\n  readonly /* comment */ propertyDefinition;\n\n  @decorator\n  abstract /* comment */ abstractPropertyDefinition;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeORM Entity Decorators\nDESCRIPTION: Shows differences in formatting TypeORM entity relationship decorators. The main change is splitting a single-line decorator with arrow functions into multiple lines for better readability, particularly for the OneToMany relationship decorator.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_71\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Board {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  theme: string;\n\n  @Column()\n  description: string;\n\n-  @OneToMany((type) => Topic, (topic) => topic.board)\n+  @OneToMany(\n+    (type) => Topic,\n+    (topic) => topic.board,\n+  )\n  topics: Topic[];\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Complex Ternary Expressions in JavaScript\nDESCRIPTION: Shows formatting patterns for nested ternary expressions with string concatenation, function calls, and complex conditions including proper indentation and line breaks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n const avatar = has_ordered\n   ? \"https://marmelab.com/posters/avatar/longer-word-that-breaks-consequent-\" +\n     numberOfCustomers +\n     \".jpeg\"\n   : undefined;\n\n const redirectUrl = pathName\n   ? pathName\n   : nextPathName + nextSearch ||\n     defaultAuthParams.afterLoginUrl.makeThisLongerSoItBreaks;\n```\n\n----------------------------------------\n\nTITLE: Fixing JavaScript in Astro File Frontmatter\nDESCRIPTION: Diff showing how Biome lints and fixes the frontmatter section of Astro files, converting delete operations to undefined assignments for better code quality.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_89\n\nLANGUAGE: diff\nCODE:\n```\n---\n- delete a.b\n+ a.b = undefined\n---\n\n<div></div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Await Using Statement Comments\nDESCRIPTION: Shows comment placement and formatting rules for await using statements in different contexts including for loops and blocks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nasync function f() {\n  {\n    /*0*/ await using /*1*/ /*2*/ b /*3*/ = /*4*/ f() /*5*/;\n  }\n  {\n    /*0*/ for (\n      /*1*/ /*2*/ await using /*3*/ /*4*/ b /*5*/ =\n          /*6*/ x /*7*/ /*8*/ /*9*/ /*10*/;\n      ;\n    );\n  }\n  {\n    /*0*/ for (/*1*/ /*2*/ await using /*3*/ /*4*/ b /*5*/ of /*6*/ x /*7*/ /*8*/);\n  }\n  {\n    /*0*/ for await (/*1*/ /*2*/ /*3*/ await using /*4*/ /*5*/ b /*6*/ of /*7*/ x /*8*/ /*9*/);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Quoted Member Names in JavaScript Objects\nDESCRIPTION: This JavaScript code snippet shows an object with a quoted member name that spans multiple lines, which is now ignored by the useLiteralKeys linter rule to avoid false positives.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_32\n\nLANGUAGE: js\nCODE:\n```\nconst a = {\n  [`line1\n  line2`]: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Enabling Unsafe Parameter Decorators in Biome\nDESCRIPTION: JSON configuration example to enable unsafe/experimental parameter decorators in JavaScript parsing.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_149\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"javascript\": {\n      \"parser\": {\n         \"unsafeParameterDecoratorsEnabled\": true\n      }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Arrow Function without Parenthesized Parameter\nDESCRIPTION: Example of an arrow function without a parenthesized parameter that still triggers the noConfusingArrow rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_162\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = a => 1 ? 2 : 3;\n```\n\n----------------------------------------\n\nTITLE: Parsing Delete Expressions in JavaScript\nDESCRIPTION: Fixes parsing of delete expressions with operands that are not simple member expressions. Shows examples of valid delete operations on different types of expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\ndelete(a.b);\ndelete console.log(1);\ndelete(() => {});\n```\n\n----------------------------------------\n\nTITLE: Implementing Array Element Parsing in Rust for Biome\nDESCRIPTION: This snippet shows how to implement parsing for array elements in Biome using the ParseSeparatedList trait. It includes methods for parsing individual elements, checking for the end of the list, and performing error recovery.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_parser/CONTRIBUTING.md#2025-04-14_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nstruct ArrayElementsList;\n\nimpl ParseSeparatedList for ArrayElementsList {\n    type ParsedElement = CompletedMarker;\n\n    fn parse_element(&mut self, p: &mut Parser) -> ParsedSyntax<Self::ParsedElement> {\n        parse_array_element(p)\n    }\n\n    fn is_at_list_end(&self, p: &mut Parser) -> bool {\n        p.at_ts(token_set![T![default], T![case], T!['}']))\n    }\n\n    fn recover(\n        &mut self,\n        p: &mut Parser,\n        parsed_element: ParsedSyntax<Self::ParsedElement>,\n    ) -> parser::RecoveryResult {\n        parsed_element.or_recover(\n            p,\n            &ParseRecoveryTokenSet::new(JS_BOGUS_STATEMENT, STMT_RECOVERY_SET),\n            js_parse_error::expected_statement,\n        )\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Async/Await in JSX\nDESCRIPTION: This snippet demonstrates changes in formatting async/await expressions within JSX. It adjusts the placement of await keywords and long expressions for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_51\n\nLANGUAGE: JSX\nCODE:\n```\n```diff\n async function testFunction() {\n   const short = (\n     <>\n       {await Promise.all(hierarchyCriticism)}\n       {await hierarchyCriticism.ic.me.oa.p}\n       {await hierarchyCriticism}\n \n       {Promise.all(hierarchyCriticism)}\n       {hierarchyCriticism.ic.me.oa.p}\n       {hierarchyCriticism}\n     </>\n   );\n \n   const long = (\n     <>\n-      {await Promise.all(\n-        hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter,\n-      )}\n       {\n+        await Promise.all(\n+          hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter,\n+        )\n+      }\n+      {\n         await hierarchyCriticism.IncongruousCooperate.MaterialEducation\n           .OriginalArticulate.Parameter\n       }\n       {\n         await hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter\n       }\n \n       {Promise.all(\n         hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter,\n       )}\n       {\n         hierarchyCriticism.IncongruousCooperate.MaterialEducation\n           .OriginalArticulate.Parameter\n       }\n       {\n         hierarchyCriticismIncongruousCooperateMaterialEducationOriginalArticulateParameter\n       }\n     </>\n   );\n \n   const jsx = (\n     <>\n-      {await (\n-        <IncongruousCooperate>\n-          material education original articulate parameter\n-        </IncongruousCooperate>\n-      )}\n+      {\n+        await (\n+          <IncongruousCooperate>\n+            material education original articulate parameter\n+          </IncongruousCooperate>\n+        )\n+      }\n     </>\n   );\n }\n```\n```\n\n----------------------------------------\n\nTITLE: Running tests with Just command runner\nDESCRIPTION: Commands to run tests using the Just command runner, which uses the same test runner as the CI.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\njust test\n```\n\n----------------------------------------\n\nTITLE: Running Tests Using Cargo Commands\nDESCRIPTION: Provides examples of cargo test commands to run tests at different levels of granularity, including all tests in all crates, tests for a specific crate, tests within a specific module, or a single test.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/tests_macros/README.md#2025-04-14_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n> cargo test                                            // all tests in all crates\n> cargo test -p crate-name                              // all tests of one crate\n> cargo test -p crate-name -- some_mod::                // all tests of one crate and one module\n> cargo test -p crate-name -- some_mod::somefilename    // just one test\n```\n\n----------------------------------------\n\nTITLE: Formatting React Hook Component Calls in JavaScript\nDESCRIPTION: Example showing the formatting differences for React hooks like useEffect, useMemo, and useImperativeHandle. The code demonstrates how parameters are broken into multiple lines when they exceed a certain length or complexity threshold.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n function helloWorld() {\n   useEffect(() => {\n     // do something\n   }, [props.value]);\n   useEffect(() => {\n     // do something\n   }, [\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n   ]);\n }\n \n function helloWorldWithReact() {\n   React.useEffect(() => {\n     // do something\n   }, [props.value]);\n   React.useEffect(() => {\n     // do something\n   }, [\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n     props.value,\n   ]);\n }\n \n function MyComponent(props) {\n   useEffect(\n     () => {\n       console.log(\"some code\", props.foo);\n     },\n \n     // We need to disable the eslint warning here,\n     // because of some complicated reason.\n     // eslint-disable line react-hooks/exhaustive-deps\n     [],\n   );\n \n   return null;\n }\n \n function Comp1() {\n   const { firstName, lastName } = useMemo(\n     () => parseFullName(fullName),\n     [fullName],\n   );\n }\n \n function Comp2() {\n   const { firstName, lastName } = useMemo(\n     () => func(),\n     [\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n       props.value,\n     ],\n   );\n }\n \n function Comp3() {\n   const { firstName, lastName } = useMemo(\n     (aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk) =>\n       func(aaa, bbb, ccc, ddd, eee, fff, ggg, hhh, iii, jjj, kkk),\n     [foo, bar, baz],\n   );\n }\n \n function Comp4() {\n   const { firstName, lastName } = useMemo(\n     () =>\n       (foo && bar && baz) ||\n       baz ||\n       (foo && baz(foo) + bar(foo) + foo && bar && baz) ||\n       baz ||\n       (foo && baz(foo) + bar(foo)),\n     [foo, bar, baz],\n   );\n }\n \n function Comp5() {\n   const { firstName, lastName } = useMemo(() => func(), [foo]);\n }\n \n function Component1() {\n-  useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, []);\n-  useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, [props.value]);\n-  useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, [\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-  ]);\n+  useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [],\n+  );\n+  useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [props.value],\n+  );\n+  useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+    ],\n+  );\n }\n \n function Component2() {\n-  React.useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, []);\n-  React.useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, [props.value]);\n-  React.useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, [\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-    props.value,\n-  ]);\n+  React.useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [],\n+  );\n+  React.useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [props.value],\n+  );\n+  React.useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+      props.value,\n+    ],\n+  );\n }\n \n function Component3() {\n-  useImperativeHandle(ref, () => {\n-    /* Function body */\n-  }, []);\n+  useImperativeHandle(\n+    ref,\n+    () => {\n+      /* Function body */\n+    },\n+    [],\n+  );\n }\n```\n\n----------------------------------------\n\nTITLE: CSS URL Function Formatting Fix\nDESCRIPTION: Example showing the formatting changes for CSS url() functions where whitespace around raw values is properly trimmed.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n.value {\n-  background: url(\n-   whitespace-around-string\n-  );\n+ background: url(whitespace-around-string);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Object Property Names in JavaScript\nDESCRIPTION: Shows object property name handling with unicode characters, demonstrating when quotes are needed.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  a: true,\n  b: true,\n  𐊧: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Angular Component Decorators\nDESCRIPTION: Demonstrates the formatting of Angular component decorators, particularly how whitespace is handled in template string interpolation expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_42\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: \"toh-hero-button\",\n  template: `<button>{{label}}</button>`,\n})\nexport class HeroButtonComponent {\n  @Output() change = new EventEmitter<any>();\n  @Input() label: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Combining --only and --skip Options in Biome Lint\nDESCRIPTION: Illustrates how to use both --only and --skip options together in the lint command, with --skip overriding --only.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_37\n\nLANGUAGE: shell\nCODE:\n```\nbiome lint --only=style --skip=style/useNamingConvention\n```\n\n----------------------------------------\n\nTITLE: Enforcing Number Namespace Usage\nDESCRIPTION: The useNumberNamespace rule enforces the use of Number properties instead of global ones. It suggests using Number.parseInt instead of parseInt and Number.NEGATIVE_INFINITY instead of -Infinity.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_120\n\nLANGUAGE: diff\nCODE:\n```\n- parseInt;\n+ Number.parseInt;\n- - Infinity;\n+ Number.NEGATIVE_INFINITY;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Ambient Enum Declarations\nDESCRIPTION: Example of ambient enum declarations in TypeScript that are now ignored by the useEnumInitializers rule, preventing false positives in declaration files.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_156\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare enum Weather {\n  Rainy,\n  Sunny,\n}\n```\n\n----------------------------------------\n\nTITLE: Valid Void Expression in Function Return\nDESCRIPTION: Example of a valid void expression in a function return statement that is now correctly accepted by the noVoidTypeReturn rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f(): void {\n  return void 0;\n}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Modifier Order in Generic Type Parameters\nDESCRIPTION: Shows how Biome modifies the order of 'const' and 'in' modifiers in generic type parameters for TypeScript interfaces.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_62\n\nLANGUAGE: diff\nCODE:\n```\n function a<const T>() {}\n function b<const T extends U>() {}\n function c<T, const U>() {}\n declare function d<const T>();\n <const T,>() => {};\n <const T extends U>() => {};\n (function <const T>() {});\n (function <const T extends U>() {});\n (function <T, const U>() {});\n \n class A<const T> {}\n class B<const T extends U> {}\n class C<T, const U> {}\n class D<const in T> {}\n class E<const in T> {}\n (class<const T> {});\n (class<const T extends U> {});\n (class<T, const U> {});\n (class<const in T> {});\n (class<const in T> {});\n \n interface I<const T> {}\n interface J<const T extends U> {}\n interface K<T, const U> {}\n-interface L<const in T> {}\n+interface L<in const T> {}\n interface M<const in T> {}\n \n class _ {\n   method<const T>() {}\n   method<const T extends U>() {}\n   method<T, const U>() {}\n }\n```\n\n----------------------------------------\n\nTITLE: Updating scripts to use local Biome binary\nDESCRIPTION: Example of updating package.json scripts to use a local Biome binary instead of the npm package.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n{\n  \"scripts\": {\n-    \"lint\": \"biome lint\",\n+    \"lint\": \"./biome lint\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Misleading 'No fixes needed' Message in Biome CLI\nDESCRIPTION: This code block shows the output of the Biome CLI with a misleading 'No fixes needed' message when there are still errors present in the files.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_29\n\nLANGUAGE: plaintext\nCODE:\n```\nChecked 2 files in <TIME>. No fixes needed.\nFound 2 errors.\n```\n\n----------------------------------------\n\nTITLE: Updating Import Assertion Syntax in Parser\nDESCRIPTION: Shows the change from the old import assertion grammar to the new import attribute assertion syntax. This diff demonstrates how the syntax has evolved from 'assert' to 'with' for module imports.\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n- import \"module\" assert {}\n+ import \"module\" with {}\n```\n\n----------------------------------------\n\nTITLE: Import Namespace in PascalCase Example\nDESCRIPTION: Example showing valid PascalCase import namespace syntax that is now accepted by the useNamingConvention rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_138\n\nLANGUAGE: javascript\nCODE:\n```\nimport * as React from \"react\";\n```\n\n----------------------------------------\n\nTITLE: Class Declaration with Variable in JavaScript\nDESCRIPTION: Shows formatting of a class declaration followed by variable declaration.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n\n\nclass a {\n  b() {}\n}\n\nlet    x\n```\n\n----------------------------------------\n\nTITLE: Formatting Optional Chaining with Non-null Assertions in TypeScript\nDESCRIPTION: This snippet shows formatting changes for optional chaining combined with non-null assertions in TypeScript. It removes unnecessary parentheses and adjusts the placement of non-null assertions for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_80\n\nLANGUAGE: diff\nCODE:\n```\na?.b!.c;\na?.b!.c.d;\na?.b.c!.d;\na!.b?.c;\na?.b!?.c;\na?.b!.c?.c;\n-(a?.b)!.c;\n-(a?.b)!.c;\n+a?.b!.c;\n+a?.b!.c;\n\na?.().b!.c;\na?.().b!.c.d;\na?.().b.c!.d;\na?.().b!?.c;\na?.().b!.c?.c;\n-(a?.().b)!.c;\n-(a?.().b)!.c;\n+a?.().b!.c;\n+a?.().b!.c;\n\n-(a?.b)![c?.d!];\n+a?.b![c?.d!];\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexer Structure in Rust\nDESCRIPTION: Basic structure definition for a lexer implementation in Biome, including source text handling and token processing.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_parser/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_beta_syntax::BetaSyntaxKind;\nuse biome_parser::ParseDiagnostic;\n\npub(crate) struct BetaLexer<'source> {\n    /// Source text\n    source: &'source str,\n\n    /// The start byte position in the source text of the next token.\n    position: usize,\n\n    /// the current token\n    current_kind: BetaSyntaxKind,\n\n    /// diagnostics emitted during the parsing phase\n    diagnostics: Vec<ParseDiagnostic>,\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Comments Type in Rust\nDESCRIPTION: Definition of HTML comments type that implements the CommentStyle trait for HTML language formatting. Creates a type alias for Comments using HtmlLanguage.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_formatter::comments::Comments;\nuse biome_html_syntax::HtmlLanguage;\n\npub type HtmlComments = Comments<HtmlLanguage>;\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Optional Chaining in Call Expressions\nDESCRIPTION: This snippet shows formatting changes for TypeScript optional chaining operators in call expressions, particularly focusing on the placement of non-null assertion operators and parentheses.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_35\n\nLANGUAGE: typescript\nCODE:\n```\n// Member expressions\na?.b!();\na?.b!();\n(a!?.b)();\na.b?.c!();\na.b?.c!();\n(a.b!?.c)();\n(a!.b?.c)();\na?.b.c!();\na?.b.c!();\n-(a?.b!.c)();\n+a?.b!.c();\n(a!?.b.c)();\na[b?.c]!();\na[b?.c]!();\na[b?.c!]();\na[b!?.c]();\n(a?.b).c!();\n(a?.b).c!();\n// FIXME: ((a?.b!).c)   ();\n(a!?.b).c();\na[b?.()]!();\na[b?.()]!();\na[b?.()!]();\na[b!?.()]();\na![b?.()]();\n(a?.b).c!();\n(a?.b).c!();\n// FIXME: ((a?.b)!.c)   ();\n// FIXME: ((a?.b!).c)   ();\n(a!?.b).c();\n(a?.()).b!();\n(a?.()).b!();\n-(a?.())!.b();\n-(a?.())!.b();\n+a?.()!.b();\n+a?.()!.b();\n(a!?.()).b();\n\n// Call expressions\na?.()!();\na?.()!();\n(a!?.())();\na.b.c?.()!();\na.b.c?.()!();\n(a.b.c!?.())();\na.b?.c()!();\na.b?.c()!();\n(a.b!?.c())();\na?.b.c()!();\na?.b.c()!();\n-(a?.b!.c())();\n+a?.b!.c()();\na(b?.c)!();\na(b?.c)!();\na(b?.c!)();\n(a?.b)()!();\n(a?.b)()!();\na?.b!()();\na?.b!()();\n(a?.())()!();\n(a?.())()!();\na?.()!()();\na?.()!()();\n(a!?.())()();\n\n// Not `.callee`\nfoo(a?.b!);\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Currying with Comments in JavaScript\nDESCRIPTION: Demonstrates differences in formatting curried arrow functions with trailing comments. The main differences are in comment ordering between multiple curried functions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n Y(() => (a ? b : c));\n \n Y(() => () => (a ? b : c));\n \n Y(() => () => () => (a ? b : c));\n \n Y(() =>\n   longlonglonglonglonglonglonglonglonglongCondition\n     ? \"Prettier is an opinionated code formatter.\"\n     : \"Prettier takes your code and reprints it from scratch by taking the line length into account.\",\n );\n \n Y(\n   () => () =>\n     longlonglonglonglonglonglonglonglonglongCondition\n       ? \"Prettier is an opinionated code formatter.\"\n       : \"Prettier takes your code and reprints it from scratch by taking the line length into account.\",\n );\n \n Y(\n   () => () => () =>\n     longlonglonglonglonglonglonglonglonglongCondition\n       ? \"Prettier is an opinionated code formatter.\"\n       : \"Prettier takes your code and reprints it from scratch by taking the line length into account.\",\n );\n \n const x1 = () => [\n   \"The\",\n   \"green\",\n   \"dragon\",\n   \"liked\",\n   \"to\",\n   \"knit\",\n   \"sweaters\",\n   \"for\",\n   \"the\",\n   \"fluffy\",\n   \"clouds\",\n   \"in\",\n   \"the\",\n   \"sky.\",\n ];\n \n const x2 = () => () => [\n   \"The\",\n   \"green\",\n   \"dragon\",\n   \"liked\",\n   \"to\",\n   \"knit\",\n   \"sweaters\",\n   \"for\",\n   \"the\",\n   \"fluffy\",\n   \"clouds\",\n   \"in\",\n   \"the\",\n   \"sky.\",\n ];\n \n const x3 = () => () => () => [\n   \"The\",\n   \"green\",\n   \"dragon\",\n   \"liked\",\n   \"to\",\n   \"knit\",\n   \"sweaters\",\n   \"for\",\n   \"the\",\n   \"fluffy\",\n   \"clouds\",\n   \"in\",\n   \"the\",\n   \"sky.\",\n ];\n \n f((a) => (1, 2, 3) /* a */);\n f((a) => (b) => (1, 2, 3) /* b */ /* a */);\n-f((a) => (b) => (c) => (1, 2, 3) /* c */ /* b */ /* a */);\n+f((a) => (b) => (c) => (1, 2, 3) /* b */ /* c */ /* a */);\n \n f((a) => (1 ? 2 : 3) /* a */);\n f((a) => (b) => (1 ? 2 : 3) /* b */ /* a */);\n-f((a) => (b) => (c) => (1 ? 2 : 3) /* c */ /* b */ /* a */);\n+f((a) => (b) => (c) => (1 ? 2 : 3) /* b */ /* c */ /* a */);\n \n a(\n   \"\",\n   \"\",\n   ({}) =>\n     () =>\n     () =>\n     () =>\n     () =>\n     () =>\n     () =>\n       test,\n );\n a(\n   \"\",\n   \"\",\n   ({}) =>\n     () =>\n     () =>\n     () =>\n     () =>\n     () =>\n     () =>\n       test ? 1 : 2,\n );\n\n```\n\n----------------------------------------\n\nTITLE: JSON Reporter Output Example\nDESCRIPTION: Example output from running `biome format` with the `--reporter=json` option. This shows the structured JSON output including the summary and diagnostics that would be printed to the terminal.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_61\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"summary\": {\n    \"changed\": 0,\n    \"unchanged\": 1,\n    \"errors\": 1,\n    \"warnings\": 0,\n    \"skipped\": 0,\n    \"suggestedFixesSkipped\": 0,\n    \"diagnosticsNotPrinted\": 0\n  },\n  \"diagnostics\": [\n    {\n      \"category\": \"format\",\n      \"severity\": \"error\",\n      \"description\": \"Formatter would have printed the following content:\",\n      \"message\": [\n        {\n          \"elements\": [],\n          \"content\": \"Formatter would have printed the following content:\"\n        }\n      ],\n      \"advices\": {\n        \"advices\": [\n          {\n            \"diff\": {\n              \"dictionary\": \"  statement();\\n\",\n              \"ops\": [\n                { \"diffOp\": { \"delete\": { \"range\": [0, 2] } } },\n                { \"diffOp\": { \"equal\": { \"range\": [2, 12] } } },\n                { \"diffOp\": { \"delete\": { \"range\": [0, 2] } } },\n                { \"diffOp\": { \"equal\": { \"range\": [12, 13] } } },\n                { \"diffOp\": { \"delete\": { \"range\": [0, 2] } } },\n                { \"diffOp\": { \"insert\": { \"range\": [13, 15] } } }\n              ]\n            }\n          }\n        ]\n      },\n      \"verboseAdvices\": { \"advices\": [] },\n      \"location\": {\n        \"path\": { \"file\": \"format.js\" },\n        \"span\": null,\n        \"sourceCode\": null\n      },\n      \"tags\": [],\n      \"source\": null\n    }\n  ],\n  \"command\": \"format\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Function Calls and Chain Access in TypeScript\nDESCRIPTION: Reformats function call parameters and property access chains for better readability while maintaining functionality.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n {\n   {\n-    const rotation1 = getTransformHandles(\n-      arrow,\n-      h.state.zoom,\n-      \"mouse\",\n-    ).rotation!;\n+    const rotation1 = getTransformHandles(arrow, h.state.zoom, \"mouse\")\n+      .rotation!;\n     const rotation2 = getTransformHandles(\n       arrow,\n       h.state.zoom,\n       \"mouse\",\n     ).rotation;\n     const rotation3 = getTransformHandles(\n       arrow,\n       h.state.zoom,\n       \"mouse\",\n     )?.rotation;\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Using Biome CLI with Ignore Unknown Files Option\nDESCRIPTION: Shell command example demonstrating how to use the new --files-ignore-unknown option with the Biome format command.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_146\n\nLANGUAGE: shell\nCODE:\n```\nbiome format --files-ignore-unknown ./src\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Query with JavaScript For Loop\nDESCRIPTION: Example JavaScript code showing a for loop that creates and uses an index variable, which will be analyzed by a semantic query.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfor (let i = 0; i < array.length; i++) {\n  array[i] = i\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Angular Component Template Interpolation\nDESCRIPTION: Shows a minor difference in formatting Angular component template string interpolation. The change removes spaces between the interpolation braces and the variable name, making the template more compact.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_70\n\nLANGUAGE: typescript\nCODE:\n```\n@Component({\n  selector: \"toh-hero-button\",\n-  template: `<button>{{ label }}</button>`,\n+  template: `<button>{{label}}</button>`,\n})\nexport class HeroButtonComponent {\n  @Output() change = new EventEmitter<any>();\n  @Input() label: string;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Angular Test Inject Function Calls in JavaScript\nDESCRIPTION: Shows a formatting change in Angular's inject function usage within test declarations. The diff simplifies the formatting of a multi-line parameter list in an inject function, converting it from parameters on separate lines to a single line.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_33\n\nLANGUAGE: diff\nCODE:\n```\n beforeEach(inject(($fooService, $barService) => {\n   // code\n }));\n \n afterAll(inject(($fooService, $barService) => {\n   console.log(\"Hello\");\n }));\n \n it(\"should create the app\", inject(($fooService, $barService) => {\n   //code\n }));\n \n it(\"does something really long and complicated so I have to write a very long name for the test\", inject(() => {\n   // code\n }));\n \n-it(\"does something really long and complicated so I have to write a very long name for the test\", inject((\n-  $fooServiceLongName,\n-  $barServiceLongName,\n-) => {\n+it(\"does something really long and complicated so I have to write a very long name for the test\", inject(($fooServiceLongName, $barServiceLongName) => {\n   // code\n }));\n \n /*\n  * isTestCall(parent) should only be called when parent exists\n  * and parent.type is CallExpression. This test makes sure that\n  * no errors are thrown when calling isTestCall(parent)\n  */\n function x() {\n   inject(() => {});\n }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring JSON Parser Trailing Commas in Biome\nDESCRIPTION: This snippet shows how to enable trailing commas in JSON parsing for Biome. It demonstrates the configuration option 'allowTrailingCommas' under the JSON parser settings.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_134\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"json\": {\n    \"parser\": {\n      \"allowTrailingCommas\": true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Macro in Rust Module\nDESCRIPTION: Demonstrates how to use the tests_macros::gen_tests! macro within a Rust module to generate tests from files matching a specified glob pattern. It includes a run_test function that handles individual test cases.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/tests_macros/README.md#2025-04-14_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nmod some_mod {\n    tests_macros::gen_tests!{\"tests/*.{js,json}\", run_test}\n\n    // input_file and expected_file are full paths\n    fn run_test(input_file: &str, expected_file: &str) {\n        println!(\"{:?} {:?}\", input_file, expected_file); \n    }\n}\n```\n\n----------------------------------------\n\nTITLE: JavaScript Regular Expression Formatting\nDESCRIPTION: Example of Biome's handling of regular expressions with unicode characters.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\ns(/🚀🚀/).s().s();\n```\n\n----------------------------------------\n\nTITLE: Class Constructor Parameter Modifiers in TypeScript\nDESCRIPTION: Shows various class constructor implementations with parameter modifiers like override, private, protected, public, and readonly.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_39\n\nLANGUAGE: diff\nCODE:\n```\n class C {\n   constructor(override a: number) {}\n }\n class D {\n   constructor(private a: number) {}\n }\n class E {\n   constructor(protected a: number) {}\n }\n class F {\n   constructor(public a: number) {}\n }\n class G {\n   constructor(readonly a: number) {}\n }\n \n class A {\n-  \"constructor\": typeof A;\n+  'constructor': typeof A\n   static Foo() {\n     return new A();\n   }\n }\n \n class B {\n   constructor<>() {}\n }\n```\n\n----------------------------------------\n\nTITLE: Generic Type Parameters and Function Parameter with Same Name\nDESCRIPTION: Example of code that is no longer reported by the noRedeclare rule, which handles type parameter and parameter with identical names.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_76\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f<a>(a: a) {}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Arrow Functions with Empty Type Parameters\nDESCRIPTION: Demonstrates how to format arrow functions with empty type parameters to improve readability and reduce code complexity.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_88\n\nLANGUAGE: typescript\nCODE:\n```\nconst xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxxxxxxxxxxxxxxx<> =\n  arg => null;\n\nconst xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxxxxxxxxxxxxxxx</* comment */> =\n  arg => null;\n\nconst xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx: xxxxxxxxxxxxxxxxxxxxxx<\n  // comment\n> =\n  arg => null;\n```\n\n----------------------------------------\n\nTITLE: Conditional Expression Comment Formatting\nDESCRIPTION: Illustrates comment placement and formatting in ternary expressions and conditional statements. Includes examples of multi-line comments and various indentation patterns.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nvar inspect =\n  4 === util.inspect.length\n    ? // node <= 0.8.x\n      function (v, colors) {\n        return util.inspect(v, void 0, void 0, colors);\n      }\n    : // node > 0.8.x\n      function (v, colors) {\n        return util.inspect(v, { colors: colors });\n      };\n```\n\n----------------------------------------\n\nTITLE: Formatting Function Range Boundaries in JavaScript\nDESCRIPTION: Demonstrates function call formatting within range boundaries.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nfunction a(\n){\na (\n);\nb();\nc(); d(\n);\n\n}\n```\n\n----------------------------------------\n\nTITLE: Fixing Unnecessary Trailing Comma in Type Parameter Lists (TypeScript)\nDESCRIPTION: This code snippet demonstrates a fix for an issue where the formatter was keeping unnecessary trailing commas in type parameter lists. The fix removes the trailing comma.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_130\n\nLANGUAGE: diff\nCODE:\n```\n- class A<T,> {}\n+ class A<T> {}\n```\n\n----------------------------------------\n\nTITLE: Formatting Union Types with prettier-ignore Comments\nDESCRIPTION: Shows changes to union type expressions with prettier-ignore comments, focusing on parentheses removal around intersections that are marked to be ignored by prettier.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_90\n\nLANGUAGE: diff\nCODE:\n```\n export type a =\n   // foo\n   | (foo1 & foo2)\n   // bar\n   | (bar1 & bar2)\n   // prettier-ignore\n-  | (qux1&qux2);\n+  | qux1&qux2;\n \n export type b =\n   // foo\n   | (foo1 & foo2)\n   // bar\n   | (bar1 & bar2)\n   // prettier-ignore\n-  | (qux1&qux2)\n+  | qux1&qux2\n   // baz\n   | (baz1 & baz2);\n \n export type c =\n   // prettier-ignore\n-  | (foo1&foo2)\n+  | foo1&foo2\n   // bar\n   | (bar1 & bar2)\n   // qux\n   | (qux1 & qux2);\n```\n\n----------------------------------------\n\nTITLE: Reformatting Throw Expressions in JavaScript\nDESCRIPTION: Shows multiple formatting changes for throw expressions, including in default parameters, arrow functions, ternary expressions, and class setters. The diff significantly changes the formatting of throw expressions, especially in multi-line conditional expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_34\n\nLANGUAGE: diff\nCODE:\n```\n-function save(filename = throw new TypeError(\"Argument required\")) {}\n+function save(filename = throw new TypeError(\"Argument required\")\n+)\n+{\n+}\n \n lint(ast, {\n-  with: () => throw new Error(\"avoid using 'with' statements.\"),\n+  with: () => throw new Error(\"avoid using 'with' statements.\")\n });\n \n function getEncoder(encoding) {\n-  const encoder =\n-    encoding === \"utf8\"\n-      ? new UTF8Encoder()\n-      : encoding === \"utf16le\"\n-        ? new UTF16Encoder(false)\n-        : encoding === \"utf16be\"\n-          ? new UTF16Encoder(true)\n-          : throw new Error(\"Unsupported encoding\");\n+  const encoder = encoding === \"utf8\" ? new UTF8Encoder()\n+                : encoding === \"utf16le\" ? new UTF16Encoder(false)\n+                : encoding === \"utf16be\" ? new UTF16Encoder(true)\n+                :\n+  throw new Error(\"Unsupported encoding\");\n }\n \n class Product {\n   get id() {\n     return this._id;\n   }\n   set id(value) {\n-    this._id = value || throw new Error(\"Invalid value\");\n+    this._id = value ||\n+    throw new Error(\"Invalid value\");\n   }\n }\n\n```\n\n----------------------------------------\n\nTITLE: Modifying function call formatting with boundaries in JavaScript\nDESCRIPTION: Changes the formatting of function calls within specific boundaries, demonstrating how range-based formatting works across multiple statement lines.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_36\n\nLANGUAGE: diff\nCODE:\n```\n a (\n );\n-b (\n-);                 c (\n-); d(\n+b();\n+c(); d(\n );\n\n```\n\n----------------------------------------\n\nTITLE: Subpath Exports Recognition in noUndeclaredDependencies\nDESCRIPTION: Example of import statements that no longer report errors if the parent packages are installed as dependencies.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_78\n\nLANGUAGE: typescript\nCODE:\n```\nimport Button from \"@mui/material/Button\";\nimport { fontFamily } from \"tailwindcss/defaultTheme\";\n```\n\n----------------------------------------\n\nTITLE: Importing std::path::PathBuf in Rust\nDESCRIPTION: Reference to the Rust standard library PathBuf struct that biome_fs wraps around, providing additional information and convenience methods.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_fs/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[`std::path::PathBuf`](https://doc.rust-lang.org/std/path/struct.PathBuf.html)\n```\n\n----------------------------------------\n\nTITLE: Example JSONC Test Case for Rules\nDESCRIPTION: JSONC format for defining multiple test cases in a single file, used for testing the 'noVar' rule with different invalid script examples.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_29\n\nLANGUAGE: jsonc\nCODE:\n```\n[\"var x = 1; foo(x);\", \"for (var x of [1,2,3]) { foo(x); }\"]\n```\n\n----------------------------------------\n\nTITLE: Fixing noExcessiveNestedTestSuites Rule for Non-Global Describe Calls\nDESCRIPTION: Shows how the noExcessiveNestedTestSuites rule no longer erroneously alerts on 'describe' calls that are not invoking the global 'describe' function.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// now valid\nz.object({})\n  .describe('')\n  .describe('')\n  .describe('')\n  .describe('')\n  .describe('')\n  .describe('');\n```\n\n----------------------------------------\n\nTITLE: Querying Multiple Node Types in Rust\nDESCRIPTION: Demonstrates how to use the declare_node_union! macro to query multiple node types simultaneously in the CST.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_18\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_rowan::{declare_node_union, AstNode};\nuse biome_js_syntax::{AnyJsFunction, JsMethodObjectMember, JsMethodClassMember};\n\ndeclare_node_union! {\n  pub AnyFunctionLike = AnyJsFunction | JsMethodObjectMember | JsMethodClassMember\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Biome JavaScript Bindings\nDESCRIPTION: NPM installation commands for the Biome JavaScript API and its required WASM distribution packages.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/js-api/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm i @biomejs/js-api\nnpm i @biomejs/wasm-<dist>\n```\n\n----------------------------------------\n\nTITLE: Renamed Exports for File Naming Convention\nDESCRIPTION: Example demonstrating how the useFilenamingConvention rule handles renamed exports when validating file names.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nclass A {}\nexport { A as Button }\n```\n\n----------------------------------------\n\nTITLE: Repositioning Comments with Satisfies Operator\nDESCRIPTION: Shows how Biome repositions trailing comments when using the satisfies operator in TypeScript, moving the comment to a more appropriate location.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_57\n\nLANGUAGE: diff\nCODE:\n```\n const t1 = {\n   prop1: 1,\n   prop2: 2,\n   prop3: 3,\n-} satisfies Record<string, number>; // Comment\n+} satisfies\n+  // Comment\n+  Record<string, number>;\n```\n\n----------------------------------------\n\nTITLE: Simplifying Chain Expression Operators in TypeScript\nDESCRIPTION: Updates optional chaining and non-null assertion operator formatting to remove redundant parentheses.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_37\n\nLANGUAGE: diff\nCODE:\n```\n-(a?.b)!.c;\n-(a?.())!.b;\n-(a?.b)!.c;\n-(a?.())!.b;\n+a?.b!.c;\n+a?.()!.b;\n+a?.b!.c;\n+a?.()!.b;\n```\n\n----------------------------------------\n\nTITLE: Empty Method Body Formatting in TypeScript Classes\nDESCRIPTION: Demonstrates changes to empty method body formatting, particularly around comment placement in class method declarations.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_59\n\nLANGUAGE: typescript\nCODE:\n```\nclass foo1 {\n-  bar /* bat */();\n+  bar() /* bat */;\n}\n\nclass Test {\n-  foo /* 3 */(/* 2 */);\n+  foo(/* 2 */) /* 3 */;\n}\n```\n\n----------------------------------------\n\nTITLE: Restructuring Consecutive JSDoc Comment Blocks\nDESCRIPTION: Modifies the formatting of consecutive JSDoc comment blocks by adding line breaks between them and adjusting spacing.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n const issues = {\n   see: \"#7724 and #12653\",\n-  /** Trailing comment 1 (not nestled as both comments should be multiline for that) */ /**\n+  /** Trailing comment 1 (not nestled as both comments should be multiline for that) */\n+  /**\n    * Trailing comment 2\n    */\n };\n \n /**\n  * @template T\n  * @param {Type} type\n  * @param {T} value\n  * @return {Value}\n- *//**\n+ */ /**\n  * @param {Type} type\n  * @return {Value}\n  */\n function value(type, value) {\n   if (arguments.length === 2) {\n     return new ConcreteValue(type, value);\n   } else {\n     return new Value(type);\n   }\n }\n \n /** Trailing nestled comment 1\n- *//** Trailing nestled comment 2\n- *//** Trailing nestled comment 3\n  */\n+/** Trailing nestled comment 2\n+ */\n+/** Trailing nestled comment 3\n+ */\n\n```\n\n----------------------------------------\n\nTITLE: Defining Documentation Links in Markdown\nDESCRIPTION: Markdown reference links that connect to various documentation sections of the Biome project website, including the main site, philosophy page, language support page, and getting started guide.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.fr.md#2025-04-14_snippet_1\n\nLANGUAGE: Markdown\nCODE:\n```\n[biomejs]: https://biomejs.dev/fr/\n[biome-philosophy]: https://biomejs.dev/fr/internals/philosophy/\n[language-support]: https://biomejs.dev/fr/internals/language-support/\n[getting-started]: https://biomejs.dev/fr/guides/getting-started/\n```\n\n----------------------------------------\n\nTITLE: For Loop Continue/Break Statement Formatting\nDESCRIPTION: Demonstrates formatting of continue and break statements in for loops with various comment styles. Shows changes in handling of labels and trailing comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nfor (;;) continue;\n// comment\n\nfor (;;) break;\n// comment\n\nfor (const f of []) continue;\n// comment\n\nfor (const f of []) break;\n// comment\n\nfor (const f in {}) continue;\n// comment\n\nfor (const f in {}) break;\n// comment\n\nfor (;;) continue; // comment\n\nfor (;;) break; // comment\n\nfor (const f of []) continue; // comment\n\nfor (const f of []) break; // comment\n\nfor (const f in {}) continue; // comment\n\nfor (const f in {}) break; // comment\n\nfor (;;) continue; /* comment */\n\nfor (;;) break; /* comment */\n\nfor (const f of []) continue; /* comment */\n\nfor (const f of []) break; /* comment */\n\nfor (const f in {}) continue; /* comment */\n\nfor (const f in {}) break; /* comment */\n\nfor (;;) continue;\n/* comment */\n\nfor (;;) break;\n/* comment */\n\nfor (const f of []) continue;\n/* comment */\n\nfor (const f of []) break;\n/* comment */\n\nfor (const f in {}) continue;\n/* comment */\n\nfor (const f in {}) break;\n/* comment */\n\nlabel1: for (;;) continue label1 /* comment */;\n\n// FIXME: TODO: reformat issue\n// label1: for (;;) continue label1\n// /* comment */\n// ;\n\n// label1: for (;;) continue label1 // comment\n// ;\n\n// label1: for (;;) continue label1\n// // comment\n// ;\n```\n\n----------------------------------------\n\nTITLE: Preserving Parentheses Around Yield in Type Assertion - TypeScript\nDESCRIPTION: Shows how Biome now preserves necessary parentheses around yield expressions inside type assertions, fixing a previous issue.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_21\n\nLANGUAGE: ts\nCODE:\n```\nfunction* f() {\n  return <T>(yield 0);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Prettier-Ignore for Matrix Initialization\nDESCRIPTION: This snippet shows how Biome handles prettier-ignore directives for Float32Array initialization in a matrix property, demonstrating differences in preserving the original formatting.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_25\n\nLANGUAGE: diff\nCODE:\n```\n export default function test() {\n   return {\n     matrix: // prettier-ignore\n-      new Float32Array([\n-      0, 0,\n-      1, 0,\n-      1, 1,\n-      0, 1\n-    ]),\n+      new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n   };\n }\n```\n\n----------------------------------------\n\nTITLE: Running Linter Benchmark Suite\nDESCRIPTION: Command to execute the benchmark suite that compares linting performance between Biome and ESLint.\nSOURCE: https://github.com/biomejs/biome/blob/main/benchmark/README.md#2025-04-14_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnode bench.js linter\n```\n\n----------------------------------------\n\nTITLE: Vue Generic Components Handling\nDESCRIPTION: Example showing Vue files with generic components, which Biome can now correctly handle and parse.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_58\n\nLANGUAGE: vue\nCODE:\n```\n<script generic=\"T extends Record<string, any>\" lang=\"ts\" setup>\n//...\n</script>\n```\n\n----------------------------------------\n\nTITLE: Improving prettier-ignore Placement in Mapped Types\nDESCRIPTION: Demonstrates better placement of prettier-ignore directives in TypeScript mapped types, ensuring the directive affects only the intended part of the code.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_54\n\nLANGUAGE: diff\nCODE:\n```\n type a = {\n     // prettier-ignore\n     [A in B]: C  |  D\n   };\n \n type a = {\n     [\n       // prettier-ignore\n       A in B\n     ]: C  |  D\n   };\n \n type a = {\n-  [A in B]: C | D; // prettier-ignore\n+  [A in B]: C | D;\n };\n \n type a = {\n-  A in B: C | D; // prettier-ignore\n+  [A in B]: // prettier-ignore\n+  C | D;\n };\n \n type a = {\n     [\n       /* prettier-ignore */\n       A in B\n     ]: C  |  D\n   };\n \n type a = {\n-  [A /* prettier-ignore */ in B]: C | D;\n+  [A in B]: C | D;\n };\n \n type a = {\n-  A in B /* prettier-ignore */: C | D;\n+  [A in B]: /* prettier-ignore */\n+  C | D;\n };\n \n type a = {\n     /* prettier-ignore */ [A in B]: C  |  D\n   };\n \n type a = {\n-    [/* prettier-ignore */ A in B ]: C  |  D\n-  };\n+  [/* prettier-ignore */ A in B]: C | D;\n+};\n \n type a = {\n   [A in /* prettier-ignore */ B]: C | D;\n };\n \n type a = {\n-  [A in B /* prettier-ignore */]: C | D;\n+  [A in B]: /* prettier-ignore */ C | D;\n };\n \n type a = {\n     /* prettier-ignore */\n     [A in B]: C  |  D\n   };\n```\n\n----------------------------------------\n\nTITLE: Handling Trailing Commas in TypeScript Function Rest Parameters\nDESCRIPTION: Shows how Biome formats function declarations with rest parameters, particularly the addition of trailing commas which differs from Prettier's approach.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_41\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(...args: any[], )\ndeclare function foo(...long_long_long_long_long_long_long_long_long_long_long_long_long_long_long_args: any[], )\n```\n\n----------------------------------------\n\nTITLE: Running Quick Test with Debug Output\nDESCRIPTION: Shell command for running a quick test with debug output displayed using the --show-output flag with Cargo.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_28\n\nLANGUAGE: shell\nCODE:\n```\ncargo t quick_test -- --show-output\n```\n\n----------------------------------------\n\nTITLE: Using Statement Syntax\nDESCRIPTION: Example of the new 'using' syntax which is now supported by the parser for resource management.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_172\n\nLANGUAGE: javascript\nCODE:\n```\nconst using = resource.lock();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Object Property Quotes in JavaScript\nDESCRIPTION: This snippet shows a change in the use of quotes for an object property with a non-ASCII character.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nconst obj = {\n  a: true,\n  b: true,\n  𐊧: true,\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting JSX FBT Components\nDESCRIPTION: This snippet shows formatting changes for FBT (Facebook Translation) components in JSX, focusing on whitespace handling between parameters and linebreaks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_28\n\nLANGUAGE: jsx\nCODE:\n```\nx = (\n  <fbt>\n-    <fbt:param>First</fbt:param>,\n-    <fbt:param>Second</fbt:param>\n+    <fbt:param>First</fbt:param>,<fbt:param>Second</fbt:param>\n  </fbt>\n);\n\nx = (\n  <fbt>\n-    <fbt:param>First</fbt:param>\n-    ,\n-    <fbt:param>Second</fbt:param>\n+    <fbt:param>First</fbt:param>,<fbt:param>Second</fbt:param>\n  </fbt>\n);\n\nx = (\n  <fbt>\n    <fbt:param>First</fbt:param>,<fbt:param>Second</fbt:param>\n  </fbt>\n);\n\nx = (\n  <fbt>\n    <fbt:param>First</fbt:param>,<fbt:param>Second</fbt:param>\n  </fbt>\n);\n\nx = (\n  <fbt desc=\"example 1\">\n    Prefix comes before\n    <fbt:param>\n      <b>suffix</b>\n    </fbt:param>\n  </fbt>\n);\n\nx = (\n  <fbt desc=\"example 2\">\n    Prefix comes before\n    <fbt:param name=\"bold stuff\">\n      <b>suffix</b>\n    </fbt:param>\n    <fbt:param name=\"a link\">\n      <link href=\"#\">suffix</link>\n    </fbt:param>\n  </fbt>\n);\n\nx = (\n  <fbt desc=\"example 3\">\n    Count Chocula knows the the number\n    <fbt:enum enum-range={[\"one\", \"two\", \"three\"]} value={getValue()} />\n    is awesome\n  </fbt>\n);\n\nx = (\n  <fbt>\n    {hour}:{minute}:{second}\n  </fbt>\n);\n\nx = (\n  <fbt>\n-    {hour}\n-    :\n-    {minute}\n-    :\n-    {second}\n+    {hour}:{minute}:{second}\n  </fbt>\n);\n\nx = (\n  <fbt>\n-    {hour}:\n-    {minute}:\n-    {second}\n+    {hour}:{minute}:{second}\n  </fbt>\n);\n\nfirst = (\n  <fbt>\n-    Text<br />\n-    More text<br />\n-    And more<br />\n+    Text\n+    <br />\n+    More text\n+    <br />\n+    And more\n+    <br />\n  </fbt>\n);\n\nsecond = (\n  <fbt>\n-    Text<br />More text<br />And more<br />\n+    Text\n+    <br />\n+    More text\n+    <br />\n+    And more\n+    <br />\n  </fbt>\n);\n\nthird = (\n  <fbt>\n    Text\n    <br />\n    More text\n    <br />\n    And more\n    <br />\n  </fbt>\n);\n```\n\n----------------------------------------\n\nTITLE: Reformatting Decorated Functions in TypeScript/React\nDESCRIPTION: Shows formatting changes for decorated React function components, moving from inline parameter declarations to a cleaner structure with proper indentation and closing parentheses placement.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_50\n\nLANGUAGE: diff\nCODE:\n```\n-const Counter = decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  const p = useDefault(props, {\n-    initialCount: 0,\n-    label: \"Counter\",\n-  });\n+const Counter = decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    const p = useDefault(props, {\n+      initialCount: 0,\n+      label: \"Counter\",\n+    });\n \n-  const [s, set] = useState({ count: p.initialCount });\n-  const onClick = () => set(\"count\", (it) => it + 1);\n+    const [s, set] = useState({ count: p.initialCount });\n+    const onClick = () => set(\"count\", (it) => it + 1);\n \n-  return () => (\n-    <button onclick={onClick}>\n-      {p.label}: {s.count}\n-    </button>\n-  );\n-});\n+    return () => (\n+      <button onclick={onClick}>\n+        {p.label}: {s.count}\n+      </button>\n+    );\n+  },\n+);\n \n-const Counter2 = decorators.decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  return () => (\n-    <button onclick={onClick}>\n-      {p.label}: {s.count}\n-    </button>\n-  );\n-});\n+const Counter2 = decorators.decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    return () => (\n+      <button onclick={onClick}>\n+        {p.label}: {s.count}\n+      </button>\n+    );\n+  },\n+);\n \n-export default decorators.decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  return foo;\n-});\n+export default decorators.decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    return foo;\n+  },\n+);\n \n-export = decorators.decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  return foo;\n-});\n+export = decorators.decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    return foo;\n+  },\n+);\n \n-module.exports = decorators.decorator(\"my-counter\")((props: {\n-  initialCount?: number;\n-  label?: string;\n-}) => {\n-  return foo;\n-});\n+module.exports = decorators.decorator(\"my-counter\")(\n+  (props: { initialCount?: number; label?: string }) => {\n+    return foo;\n+  },\n+);\n \nconst Counter = decorator(\"foo\")(\n  decorator(\"bar\")(\n    (props: {\n      loremFoo1: Array<Promise<any>>;\n      ipsumBarr2: Promise<number>;\n    }) => {\n      return <div />;\n    },\n  ),\n);\n```\n\n----------------------------------------\n\nTITLE: Checking for Numeric Node Types in JavaScript AST\nDESCRIPTION: This function determines if a node represents a numeric value, including number literals, unary negation of numbers, and bigint literals.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isNumericOrBigIntLiteral(node) {\n  return (\n    isNumericLiteral(node) ||\n    isBigIntLiteral(node) ||\n    (node.type === \"UnaryExpression\" &&\n      node.operator === \"-\" &&\n      isNumericOrBigIntLiteral(node.argument))\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Prettier with xargs\nDESCRIPTION: Example command showing how to run Prettier in parallel using xargs with 8 processes for comparison benchmarking.\nSOURCE: https://github.com/biomejs/biome/blob/main/benchmark/README.md#2025-04-14_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nfind lib/ examples declarations benchmark -name '*.js' -print0 | xargs -P8 -0 -n 200 npx prettier --write --loglevel=error\n```\n\n----------------------------------------\n\nTITLE: Running Biome Fuzzers\nDESCRIPTION: Command to execute a specific fuzzer with timeout settings and dead code stripping. The -s none parameter must be omitted for Apple M1 devices using nightly compiler.\nSOURCE: https://github.com/biomejs/biome/blob/main/fuzz/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo fuzz run --strip-dead-code -s none name_of_fuzzer -- -timeout=1\n```\n\n----------------------------------------\n\nTITLE: Example of code violating the useGetterReturn rule in JavaScript\nDESCRIPTION: This example demonstrates code that would be flagged by the useGetterReturn rule, which enforces the presence of non-empty return statements in getter methods.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_153\n\nLANGUAGE: javascript\nCODE:\n```\nclass Person {\n    get firstName() {}\n}\n```\n\n----------------------------------------\n\nTITLE: Positioning Comments in TypeScript Type Intersections\nDESCRIPTION: Shows how Biome handles comments in type annotations and type aliases, particularly focusing on the positioning of comments in intersection types.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ntype A = (number | string) & boolean;\ntype B = (number | string) & boolean;\ntype C = (number | string) & boolean;\ntype D = (number | string) & boolean;\n\nlet b1: C;\nlet b2: C;\nlet b3: C;\nlet b4: C;\nlet b5: C;\nlet b6: /*1*/ C;\nlet b7: /*1*/ C;\nlet b8: /*1*/ C;\nlet b9: /*1*/ C;\nlet b10: /*1*/ /*2*/ C;\nlet b11: /*1*/ /*2*/ C;\n\nlet bb1: /*1*/ /*2*/ C & D;\nlet bb2: /*1*/ /*2*/ C & /*3*/ D;\nlet bb3: /*1*/ /*2*/ C & /*3*/ D /*5*/;\n\ntype B2 = C;\ntype B3 = C;\ntype B4 = C;\ntype B5 = C;\ntype B6 = /*1*/ C;\ntype B7 = /*1*/ C;\ntype B8 = /*1*/ C;\ntype B9 = /*1*/ C;\ntype B10 = /*1*/ /*2*/ C;\ntype B11 = /*1*/ /*2*/ C;\ntype B12 = /*1*/ C;\n\ntype Bb1 = /*1*/ /*2*/ C & D;\ntype Bb2 = /*1*/ /*2*/ C & /*3*/ D;\ntype Bb3 = /*1*/ /*2*/ C & /*3*/ D /*4*/;\n\ntype D1 = /*1*/ a & b;\ntype D2 = /*1*/ a & b;\ntype D3 = /*1*/ a & b;\ntype D4 = /*1*/ a & b;\ntype D5 = /*1*/ a & b;\ntype D6 /*0*/ = /*1*/ a & b;\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeORM Entity Decorators\nDESCRIPTION: Shows how Biome formats TypeORM entity decorators, particularly for OneToMany relationships with arrow functions as parameters, breaking them into multiple lines.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_43\n\nLANGUAGE: typescript\nCODE:\n```\n@Entity()\nexport class Board {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  slug: string;\n\n  @Column()\n  name: string;\n\n  @Column()\n  theme: string;\n\n  @Column()\n  description: string;\n\n  @OneToMany(\n    (type) => Topic,\n    (topic) => topic.board,\n  )\n  topics: Topic[];\n}\n```\n\n----------------------------------------\n\nTITLE: Using JSX Fragments with Expression Children\nDESCRIPTION: JavaScript code demonstrating JSX fragments with expression children, showing where noUselessFragments rule properly handles code fixes for these scenarios.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n<>\n  <Hello leftIcon={<>{provider?.icon}</>} />\n  {<>{provider?.icon}</>}\n  <>{provider?.icon}</>\n</>\n```\n\n----------------------------------------\n\nTITLE: Implementing With Statement Parsing with Conditional Syntax in Rust for Biome\nDESCRIPTION: This snippet demonstrates how to implement parsing for a 'with' statement in Biome, including handling conditional syntax for strict mode. It shows the use of StrictMode.excluding_syntax to handle syntax that is only valid in certain contexts.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_parser/CONTRIBUTING.md#2025-04-14_snippet_7\n\nLANGUAGE: rust\nCODE:\n```\nfn parse_with_statement(p: &mut Parser) -> ParsedSyntax {\n if !p.at(T![with]) {\n  return Absent;\n }\n\n let m = p.start();\n p.bump(T![with]); // with\n parenthesized_expression(p).or_add_diagnostic(p, js_errors::expected_parenthesized_expression);\n parse_statement(p).or_add_diagnostic(p, js_error::expected_statement);\n let with_stmt = m.complete(p, JS_WITH_STATEMENT);\n\n let conditional = StrictMode.excluding_syntax(p, with_stmt, |p, marker| {\n  p.err_builder(\"`with` statements are not allowed in strict mode\", marker.range(p))\n });\n\n\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSX Comments in End Tags\nDESCRIPTION: This snippet shows formatting changes for JSX comments placed in end tags, including handling of line and block comments before and after tag names.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_27\n\nLANGUAGE: jsx\nCODE:\n```\n/* =========== before slash =========== */\n<a></\n  // line\n  a\n>;\n<a></ /* block */\na>;\n\n<></\n  // line\n>;\n<></ /* block */>;>\n\n/* =========== after slash =========== */\n<a></\n  // line\n  a\n>;\n<a></ /* block */\na>;\n\n<></\n  // line\n>;\n<></ /* block */>;>\n\n/* =========== after name =========== */\n-<a></a>; // line\n+<a></a // line\n+>;\n<a></a /* block */>;>\n\n/* =========== block =========== */\n<a></a /* block */>;>\n<></ /* block */>;>\n\n/* =========== multiple ===========  */\n<a></\n  // line 1\n  // line 2\n  a\n>;\n<a></ /* block1 */ /* block2 */\na>;\n<a></\n  /* block */ // line\n  a\n>;\n\n<></\n  // line 1\n  // line 2\n>;\n<></ /* block1 */\n  /* block2 */>;>\n<></\n  /* block */\n  // line\n>;\n```\n\n----------------------------------------\n\nTITLE: Ignoring 'this' in JSX Components\nDESCRIPTION: Shows how the noUndeclaredVariables rule now ignores 'this' in JSX components, no longer reporting it as an undeclared variable in React component classes.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_46\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Component } from 'react';\n\nexport class MyComponent extends Component {\n  render() {\n    return <this.foo />\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Parentheses to prettier-ignore Type Declarations\nDESCRIPTION: Shows how Biome adds parentheses around type declarations marked with prettier-ignore to maintain consistent formatting while preserving the directive's effect.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_56\n\nLANGUAGE: diff\nCODE:\n```\n type Foo =\n   // prettier-ignore\n-  aa;\n+  (\n+    aa\n+  );\n```\n\n----------------------------------------\n\nTITLE: Formatting Await Expressions with Prettier-Ignore Comments\nDESCRIPTION: This snippet demonstrates how Biome formats await expressions with prettier-ignore comments in async functions, showing differences in parentheses and indentation compared to Prettier.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n async function foo() {\n-  // prettier-ignore\n-  // b\n-  (await thing()).blah;\n+  (\n+  \t// prettier-ignore\n+  \t// b\n+\tawait thing()\n+).blah\n }\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Generic Class Instantiation\nDESCRIPTION: Shows proper indentation and trailing comma handling in generic type arguments for class instantiation.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_85\n\nLANGUAGE: typescript\nCODE:\n```\nconst instance = new FooClass<\n\tboolean,\n\tnumber,\n\tstring, // [ts] Trailing comma not allowed.\n\t>();\n```\n\n----------------------------------------\n\nTITLE: Installing critcmp for Benchmark Comparison in Bash\nDESCRIPTION: Command to install critcmp, a tool used to compare benchmarks between branches.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo install critcmp\n```\n\n----------------------------------------\n\nTITLE: TypeScript Ambient Declarations in noInnerDeclarations\nDESCRIPTION: Example of TypeScript ambient declarations that are no longer reported as errors by the noInnerDeclarations rule, avoiding false positives.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_155\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare var foo;\n```\n\n----------------------------------------\n\nTITLE: Handling prettier-ignore Comments in Union Types with Intersection Types\nDESCRIPTION: Demonstrates how prettier-ignore comments affect formatting of union types containing intersection types. When a line is marked with prettier-ignore, parentheses around intersection types are removed to preserve the original formatting.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_65\n\nLANGUAGE: diff\nCODE:\n```\n export type a =\n   // foo\n   | (foo1 & foo2)\n   // bar\n   | (bar1 & bar2)\n   // prettier-ignore\n-  | (qux1&qux2);\n+  | qux1&qux2;\n \n export type b =\n   // foo\n   | (foo1 & foo2)\n   // bar\n   | (bar1 & bar2)\n   // prettier-ignore\n-  | (qux1&qux2)\n+  | qux1&qux2\n   // baz\n   | (baz1 & baz2);\n \n export type c =\n   // prettier-ignore\n-  | (foo1&foo2)\n+  | foo1&foo2\n   // bar\n   | (bar1 & bar2)\n   // qux\n   | (qux1 & qux2);\n```\n\n----------------------------------------\n\nTITLE: CSS Custom Property with Emoji\nDESCRIPTION: Example of CSS code using emoji in custom property names, which is now correctly parsed by the CSS parser.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_7\n\nLANGUAGE: css\nCODE:\n```\np {\n  --✨-color: red;\n  color: var(--✨-color);\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Object Types in TypeScript Declare Functions\nDESCRIPTION: Shows formatting differences for object types inside function declarations, particularly how multiline object types are handled in parameter lists.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_40\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare function foo(this: { a: boolean; b: string; c: number }): Promise<\n  Array<foo>\n>;\n\ndeclare function bazFlip({\n  a: boolean,\n  b: string,\n  c: number,\n}): Promise<Array<foo>>;\n\ndeclare function bar(\n  ...{ a: boolean, b: string, c: number }\n): Promise<Array<foo>>;\n\ndeclare function bar(\n  ...x: { a: boolean; b: string; c: number }\n): Promise<Array<foo>>;\n```\n\n----------------------------------------\n\nTITLE: Handling TypeScript const Modifier in new Signatures\nDESCRIPTION: Demonstrates how the Biome parser now correctly accepts the 'const' modifier for type parameters in TypeScript 'new' signatures.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_49\n\nLANGUAGE: typescript\nCODE:\n```\ninterface I {\n  new<const T>(x: T): T\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Function Call with Ternary Expression in JavaScript\nDESCRIPTION: Shows a formatting change in a function call that contains a ternary operator in its arguments. The diff adjusts the indentation of a condition in a function call, moving from aligned indentation to standard indentation for the ternary operator.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_32\n\nLANGUAGE: diff\nCODE:\n```\n fn(\n   bifornCringerMoshedPerplexSawder,\n   askTrovenaBeenaDependsRowans,\n   glimseGlyphsHazardNoopsTieTie === averredBathersBoxroomBuggyNurl &&\n-    anodyneCondosMalateOverateRetinol\n+  anodyneCondosMalateOverateRetinol\n     ? annularCooeedSplicesWalksWayWay\n     : kochabCooieGameOnOboleUnweave,\n );\n // TODO(rattrayalex): try to indent consequent/alternate here.\n\n```\n\n----------------------------------------\n\nTITLE: Example of React Component Variable with PascalCase\nDESCRIPTION: Demonstrates a local variable in PascalCase that holds a component, which is now accepted by the useNamingConvention rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_63\n\nLANGUAGE: tsx\nCODE:\n```\nfunction loadComponent() {\n  const Component = getComponent();\n  return <Component />;\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for BigInt Literal Node in JavaScript\nDESCRIPTION: This function determines if a given AST node is a BigInt literal. It checks the node type and ensures the value is a bigint.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isBigIntLiteral(node) {\n  return node.type === \"Literal\" && typeof node.value === \"bigint\";\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Optional Chaining in Member Expressions\nDESCRIPTION: This snippet shows formatting changes for TypeScript optional chaining operators in member expressions, focusing on simplifying expressions by removing unnecessary parentheses and adjusting the placement of non-null assertion operators.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_36\n\nLANGUAGE: typescript\nCODE:\n```\n// Member expressions\n-(a?.b)!.foo;\n-(a?.b)!.foo;\n+a?.b!.foo;\n+a?.b!.foo;\n(a!?.b).foo;\n-(a.b?.c)!.foo;\n-(a.b?.c)!.foo;\n+a.b?.c!.foo;\n+a.b?.c!.foo;\n(a.b!?.c).foo;\n(a!.b?.c).foo;\n-(a?.b.c)!.foo;\n-(a?.b.c)!.foo;\n-(a?.b!.c).foo;\n+a?.b.c!.foo;\n+a?.b.c!.foo;\n+a?.b!.c.foo;\n(a!?.b.c).foo;\na[b?.c]!.foo;\na[b?.c]!.foo;\na[b?.c!].foo;\na[b!?.c].foo;\n(a?.b).c!.foo;\n(a?.b).c!.foo;\n-(a?.b)!.c.foo;\n+a?.b!.c.foo;\n(a!?.b).c.foo;\na[b?.()]!.foo;\na[b?.()]!.foo;\na[b?.()!].foo;\na[b!?.()].foo;\na![b?.()].foo;\n(a?.b).c!.foo;\n(a?.b).c!.foo;\n-(a?.b)!.c.foo;\n-(a?.b)!.c.foo;\n+a?.b!.c.foo;\n+a?.b!.c.foo;\n(a!?.b).c.foo;\n(a?.()).b!.foo;\n(a?.()).b!.foo;\n-(a?.())!.b.foo;\n-(a?.())!.b.foo;\n+a?.()!.b.foo;\n+a?.()!.b.foo;\n(a!?.()).b.foo;\n\n// Call expressions\n-(a?.())!.foo;\n-(a?.())!.foo;\n+a?.()!.foo;\n+a?.()!.foo;\n(a!?.()).foo;\n-(a.b.c?.())!.foo;\n-(a.b.c?.())!.foo;\n+a.b.c?.()!.foo;\n+a.b.c?.()!.foo;\n(a.b.c!?.()).foo;\n-(a.b?.c())!.foo;\n-(a.b?.c())!.foo;\n+a.b?.c()!.foo;\n+a.b?.c()!.foo;\n(a.b!?.c()).foo;\n-(a?.b.c())!.foo;\n-(a?.b.c())!.foo;\n-(a?.b!.c()).foo;\n+a?.b.c()!.foo;\n+a?.b.c()!.foo;\n+a?.b!.c().foo;\na(b?.c)!.foo;\na(b?.c)!.foo;\na(b?.c!).foo;\n(a?.b)()!.foo;\n(a?.b)()!.foo;\na?.b!().foo;\na?.b!().foo;\n(a?.())()!.foo;\n(a?.())()!.foo;\na?.()!().foo;\na?.()!().foo;\n(a!?.())().foo;\n\n// Not `.object`\n_[a?.b!](\n  // Computed\n  a?.b!,\n)[foo];\n```\n\n----------------------------------------\n\nTITLE: Reformatting Union Types with prettier-ignore Comments\nDESCRIPTION: Shows how Biome reformats nested union types with prettier-ignore directives, improving readability while preserving the intended formatting exceptions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_55\n\nLANGUAGE: diff\nCODE:\n```\n export type a =\n   // foo\n   | (foo1 & foo2)\n   // bar\n   | (bar1 & bar2)\n   // prettier-ignore\n-  | (| aaaaaaaaaaaaa&1\n-    // b\n-    | bbbbbbbbbbbbb&2)\n+  | (\n+      | (aaaaaaaaaaaaa & 1)\n+      // b\n+      | (bbbbbbbbbbbbb & 2)\n+    )\n   // baz\n   | (baz1 & baz2);\n \n export type b =\n   // foo\n   | (foo1 & foo2)\n   // bar\n   | (bar1 & bar2)\n   // prettier-ignore\n-  | (| aaaaaaaaaaaaa&1\n-    // b\n-    | bbbbbbbbbbbbb&2)\n+  | (\n+      | (aaaaaaaaaaaaa & 1)\n+      // b\n+      | (bbbbbbbbbbbbb & 2)\n+    )\n   // baz\n   | (baz1 & baz2);\n```\n\n----------------------------------------\n\nTITLE: Updating class declaration and variable initialization formatting in JavaScript\nDESCRIPTION: Shows changes to whitespace around a class declaration and variable declaration, adding blank lines before the class and adjusting spacing in the variable declaration.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_38\n\nLANGUAGE: diff\nCODE:\n```\n+\n+\n class a {\n   b() {}\n }\n \n-let x;\n+let    x\n\n```\n\n----------------------------------------\n\nTITLE: Minimizing Fuzzer Crash Input\nDESCRIPTION: Command to minimize the input that triggered a crash while still maintaining the crash behavior, useful for debugging purposes.\nSOURCE: https://github.com/biomejs/biome/blob/main/fuzz/README.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo fuzz tmin --strip-dead-code -s none name_of_fuzzer artifacts/name_of_fuzzer/crash-...\n```\n\n----------------------------------------\n\nTITLE: Arrow Function with Parenthesized Parameter\nDESCRIPTION: Example of an arrow function with a parenthesized parameter that is no longer flagged by the noConfusingArrow rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_161\n\nLANGUAGE: javascript\nCODE:\n```\nvar x = (a) => 1 ? 2 : 3;\n```\n\n----------------------------------------\n\nTITLE: Implementing Rule Options in Rust\nDESCRIPTION: Demonstrates how to implement the Rule trait with custom options and how to retrieve these options within a rule's context.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_15\n\nLANGUAGE: rust\nCODE:\n```\nimpl Rule for MyRule {\n    type Query = Semantic<JsCallExpression>;\n    type State = Fix;\n    type Signals = Vec<Self::State>;\n    type Options = MyRuleOptions;\n}\n\n// Retrieving options\nlet options = ctx.options();\n```\n\n----------------------------------------\n\nTITLE: JavaScript Function Parameter Pattern Example\nDESCRIPTION: Shows how unused parameters inside object patterns with rest parameters are handled by the linter.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nfunction f({ a, ...rest }) {\n  return rest;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting FBT JSX Elements\nDESCRIPTION: This snippet shows changes in formatting FBT (Facebook Translate) JSX elements. It adjusts the placement of child elements and whitespace for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_50\n\nLANGUAGE: JSX\nCODE:\n```\n```diff\n x = (\n   <fbt>\n-    <fbt:param>First</fbt:param>,\n-    <fbt:param>Second</fbt:param>\n+    <fbt:param>First</fbt:param>,<fbt:param>Second</fbt:param>\n   </fbt>\n );\n \n x = (\n   <fbt>\n-    <fbt:param>First</fbt:param>\n-    ,\n-    <fbt:param>Second</fbt:param>\n+    <fbt:param>First</fbt:param>,<fbt:param>Second</fbt:param>\n   </fbt>\n );\n \n x = (\n   <fbt>\n     <fbt:param>First</fbt:param>,<fbt:param>Second</fbt:param>\n   </fbt>\n );\n \n x = (\n   <fbt>\n     <fbt:param>First</fbt:param>,<fbt:param>Second</fbt:param>\n   </fbt>\n );\n \n x = (\n   <fbt desc=\"example 1\">\n     Prefix comes before\n     <fbt:param>\n       <b>suffix</b>\n     </fbt:param>\n   </fbt>\n );\n \n x = (\n   <fbt desc=\"example 2\">\n     Prefix comes before\n     <fbt:param name=\"bold stuff\">\n       <b>suffix</b>\n     </fbt:param>\n     <fbt:param name=\"a link\">\n       <link href=\"#\">suffix</link>\n     </fbt:param>\n   </fbt>\n );\n \n x = (\n   <fbt desc=\"example 3\">\n     Count Chocula knows the the number\n     <fbt:enum enum-range={[\"one\", \"two\", \"three\"]} value={getValue()} />\n     is awesome\n   </fbt>\n );\n \n x = (\n   <fbt>\n     {hour}:{minute}:{second}\n   </fbt>\n );\n \n x = (\n   <fbt>\n-    {hour}\n-    :\n-    {minute}\n-    :\n-    {second}\n+    {hour}:{minute}:{second}\n   </fbt>\n );\n \n x = (\n   <fbt>\n-    {hour}:\n-    {minute}:\n-    {second}\n+    {hour}:{minute}:{second}\n   </fbt>\n );\n \n first = (\n   <fbt>\n-    Text<br />\n-    More text<br />\n-    And more<br />\n+    Text\n+    <br />\n+    More text\n+    <br />\n+    And more\n+    <br />\n   </fbt>\n );\n \n second = (\n   <fbt>\n-    Text<br />More text<br />And more<br />\n+    Text\n+    <br />\n+    More text\n+    <br />\n+    And more\n+    <br />\n   </fbt>\n );\n \n third = (\n   <fbt>\n     Text\n     <br />\n     More text\n     <br />\n     And more\n     <br />\n   </fbt>\n );\n```\n```\n\n----------------------------------------\n\nTITLE: Invalid Mixing of Unicase with Cased Characters\nDESCRIPTION: JavaScript code showing rejected variable names that mix unicase characters with lowercase or uppercase characters, which is still invalid per useNamingConvention rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nconst A안녕하세요 = { a안녕하세요: 0 };\n```\n\n----------------------------------------\n\nTITLE: Template Literal Assignment Formatting\nDESCRIPTION: Shows formatting changes for object property assignments using template literals, particularly focusing on computed property access patterns.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n-params[\"redirectTo\"] =\n-  `${window.location.pathname}${window.location.search}${window.location.hash}`;\n+params[\n+  \"redirectTo\"\n+] = `${window.location.pathname}${window.location.search}${window.location.hash}`;\n```\n\n----------------------------------------\n\nTITLE: Parameter with Constructor Type Using Same Parameter Name\nDESCRIPTION: Example showing a function where a parameter name is reused in a constructor type parameter, which should not trigger the unused parameter warning.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nexport class Foo {\n  bar(name: string, _class: new (name: string) => any) {\n    return name\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Analyzing JavaScript AST for Specific Patterns\nDESCRIPTION: These functions check for specific patterns in JavaScript AST, such as object properties, function parameters, and array elements. They help in identifying structure and content of code elements.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_8\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isObjectProperty(node) {\n  return (\n    node.type === \"Property\" ||\n    (node.type === \"ObjectProperty\" && !node.computed)\n  );\n}\n\nfunction isSimpleTemplateLiteral(node) {\n  return (\n    node.type === \"TemplateLiteral\" &&\n    node.quasis.length === 1 &&\n    node.expressions.length === 0\n  );\n}\n\nfunction isSimpleArrayNode(node) {\n  return (\n    node.type === \"ArrayExpression\" &&\n    node.elements.length === 0\n  );\n}\n\nfunction isFunctionOrArrowExpression(node) {\n  return (\n    node.type === \"FunctionExpression\" ||\n    node.type === \"ArrowFunctionExpression\"\n  );\n}\n\nfunction isFunctionOrArrowExpressionWithBody(node) {\n  return (\n    node.type === \"FunctionExpression\" ||\n    (node.type === \"ArrowFunctionExpression\" &&\n      node.body.type === \"BlockStatement\")\n  );\n}\n\nfunction isTemplateLiteral(node) {\n  return node.type === \"TemplateLiteral\";\n}\n\nfunction isCallExpression(node) {\n  return node.type === \"CallExpression\";\n}\n\nfunction isMemberExpression(node) {\n  return node.type === \"MemberExpression\";\n}\n```\n\n----------------------------------------\n\nTITLE: Method Types Interface Formatting\nDESCRIPTION: Updates the formatting of method types in interfaces, focusing on comment placement and optional method syntax.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_61\n\nLANGUAGE: typescript\nCODE:\n```\ninterface foo1 {\n  bar3 /* foo */(/* baz */); // bat\n-  bar /* foo */ /* bar */?(/* baz */) /* bat */;\n+  bar /* foo */?/* bar */ (/* baz */) /* bat */;\n}\n```\n\n----------------------------------------\n\nTITLE: Repositioning Comments in Single Types\nDESCRIPTION: Demonstrates changes in comment positioning for type definitions, moving comments from after the type name to before the type declaration.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_91\n\nLANGUAGE: diff\nCODE:\n```\n-type A1 /* 2 */ = /* 1 */ /* 3 */ /* 4 */ {\n-  key: string;\n-};\n+type A1 =\n+  /* 1 */ /* 2 */\n+  /* 3 */ /* 4 */ {\n+    key: string;\n+  };\n```\n\n----------------------------------------\n\nTITLE: Old Configuration for useExhaustiveDependencies\nDESCRIPTION: Example of the old configuration format for the useExhaustiveDependencies and useHookAtTopLevel rules that used array indices for hook configuration.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_167\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"linter\": {\n     \"rules\": {\n        \"nursery\": {\n           \"useExhaustiveDependencies\": {\n              \"level\": \"error\",\n              \"options\": {\n                 \"hooks\": [\n                    [\"useMyEffect\", 0, 1]\n                 ]\n              }\n           }\n        }\n     }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Filtering Rules in Quick Test for Rust\nDESCRIPTION: Code snippet for filtering rules in the quick test file to test a custom rule named 'useAwesomeTrick' in the 'nursery' category.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_26\n\nLANGUAGE: rust\nCODE:\n```\nlet rule_filter = RuleFilter::Rule(\"nursery\", \"useAwesomeTrick\");\n```\n\n----------------------------------------\n\nTITLE: Duplicate Type Parameters Detection\nDESCRIPTION: Example of type parameters that are now reported as a redeclaration by the noRedeclare rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_77\n\nLANGUAGE: typescript\nCODE:\n```\nfunction f<T, T>() {}\n```\n\n----------------------------------------\n\nTITLE: Defining a Constructor Type in TypeScript\nDESCRIPTION: This TypeScript code defines a constructor type, demonstrating a case where the noUnusedVariables and noUnusedFunctionParameters rules no longer report the constructor parameters as unused.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_33\n\nLANGUAGE: ts\nCODE:\n```\nexport type Classlike = new (arg: unknown) => string;\n```\n\n----------------------------------------\n\nTITLE: Adjusting Comment Placement in Multi-Comments on Same Line\nDESCRIPTION: Changes the spacing between multiple comments on the same line and adjusts their positioning relative to code statements.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n /*========= All on same line =========*/\n a;\n /*1*/ /*2*/ /*3*/\n b;\n \n a; /*1*/ /*2*/ /*3*/\n b;\n \n a;\n /*1*/ /*2*/ /*3*/ b;\n \n a;\n /*\n 1*/ /*2*/ /*3\n  */\n b;\n \n a; /*\n 1*/ /*2*/ /*3\n  */\n b;\n \n-a;\n-/*\n+a; /*\n 1*/ /*2*/ /*3\n- */ b;\n+ */\n+b;\n \n /*========= First two on same line =========*/\n a;\n /*1*/ /*2*/\n /*3*/\n b;\n \n a; /*1*/ /*2*/\n /*3*/\n b;\n \n a;\n /*1*/ /*2*/\n /*3*/ b;\n \n a;\n /*\n 1*/ /*2*/\n /*3\n  */\n b;\n \n a; /*\n 1*/ /*2*/\n /*3\n  */\n b;\n \n a; /*\n 1*/ /*2*/\n /*3\n  */ b;\n \n /*========= Last two on same line =========*/\n a;\n /*1*/\n /*2*/ /*3*/\n b;\n \n a; /*1*/\n /*2*/ /*3*/\n b;\n \n a;\n /*1*/\n /*2*/ /*3*/ b;\n \n a;\n /*\n 1*/\n /*2*/ /*3\n  */\n b;\n \n a; /*\n 1*/\n /*2*/ /*3\n  */\n b;\n \n a; /*\n 1*/\n /*2*/ /*3\n  */ b;\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Differences in Negative Number Arrays in JavaScript\nDESCRIPTION: This diff shows formatting differences between Biome and Prettier when handling arrays with negative numbers and comments. The main differences are in line breaking and indentation patterns.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n const numbers1 = [\n   -2017, -506252, -744011292, -7224, -70.4, -83353.6, -708.4, -174023963.52,\n   -40385,\n   // comment1\n-  -380014, -253951682, -728, -15.84, -2058467564.56, -43, -33, -85134845,\n-  -67092, -1, -78820379, -2371.6, -16, 7,\n+  -380014,\n+  -253951682, -728, -15.84, -2058467564.56, -43, -33, -85134845, -67092, -1,\n+  -78820379, -2371.6, -16, 7,\n   // comment2\n-  -62454, -4282239912, -10816495.36, 0.88, -100622682, 8.8, -67087.68000000001,\n+  -62454,\n+  -4282239912, -10816495.36, 0.88, -100622682, 8.8, -67087.68000000001,\n   -3758276, -25.5211, -54, -1184265243, -46073628, -280423.44, -41833463,\n   -27961.12, -305.36, -199875.28,\n ];\n \n const numbers2 = [\n   -234,\n   -342, // comment3\n   -223,\n   -333333.33,\n   12345,\n ];\n```\n\n----------------------------------------\n\nTITLE: Currying Arrow Functions - Request Handler Formatting\nDESCRIPTION: Shows formatting changes for curried arrow functions in HTTP request handlers, with focus on improving readability of nested arrow functions and long parameter names.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\nconst a = (x) => (y) => (z) =>\n   x / 0.123456789 + (y * calculateSomething(z)) / Math.PI;\n \n request.get(\"https://preview-9992--prettier.netlify.app\", (head) => (body) => {\n   console.log(head, body);\n });\n \n-request.get(\n-  \"https://preview-9992--prettier.netlify.app\",\n-  (head) => (body) => (mody) => {\n+request.get(\"https://preview-9992--prettier.netlify.app\", (head) =>\n+  (body) =>\n+  (mody) => {\n     console.log(head, body);\n-  },\n-);\n+  });\n```\n\n----------------------------------------\n\nTITLE: Handling Multibyte Characters in Regular Expressions\nDESCRIPTION: Fixes handling of multibyte characters in regular expressions for various linter rules. Demonstrates correct parsing of Unicode characters in regex literals.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n/[\\u200E\\u2066-\\u2069]/gu;\n```\n\n----------------------------------------\n\nTITLE: Simplifying Array Representation in Template Literal\nDESCRIPTION: This snippet demonstrates the simplification of a multi-line array representation within a template literal into a single line.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\na = `${[[1, 2, 3], [4, 5, 6]]}`;\n```\n\n----------------------------------------\n\nTITLE: Installing Biome CLI globally using npm\nDESCRIPTION: This command installs the Biome CLI globally using npm, making it available system-wide.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/CHANGELOG.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install --global @biomejs/biome\n```\n\n----------------------------------------\n\nTITLE: Deserializing Union Types with Type Inspection in Rust\nDESCRIPTION: Implements the Deserializable trait for a Union enum that can contain either a boolean or string value. The implementation checks the value type before deciding which deserializer to use. Includes test cases for both boolean and string deserialization.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/README.md#2025-04-14_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_deserialize::{DeserializationDiagnostic, Deserializable, DeserializationContext, DeserializableValue, DeserializationVisitor, Text, DeserializableTypes};\nuse biome_rowan::TextRange;\n\n#[derive(Debug, Eq, PartialEq)]\nenum Union {\n    Bool(bool),\n    Str(String),\n}\n\nimpl Deserializable for Union {\n    fn deserialize(\n        ctx: &mut impl DeserializationContext,\n        value: &impl DeserializableValue,\n        name: &str,\n    ) -> Option<Self> {\n        if value.visitable_type()? == DeserializableType::Bool {\n            biome_deserialize::Deserializable::deserialize(ctx, value, name)\n                .map(Self::Bool)\n        } else {\n            biome_deserialize::Deserializable::deserialize(ctx, value, name)\n                .map(Self::Str)\n        }\n    }\n}\n\nuse biome_deserialize::json::deserialize_from_json_str;\nuse biome_json_parser::JsonParserOptions;\n\nlet source = r#\" \"string\" \"#;\nlet deserialized = deserialize_from_json_str::<Union>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert!(!deserialized.has_errors());\nassert_eq!(deserialized.into_deserialized(), Some(Union::Str(\"string\".to_string())));\n\nlet source = \"true\";\nlet deserialized = deserialize_from_json_str::<Union>(&source, JsonParserOptions::default(), \"path/to.json\");\nassert!(!deserialized.has_errors());\nassert_eq!(deserialized.into_deserialized(), Some(Union::Bool(true)));\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Syntax Node Formatting in Rust\nDESCRIPTION: Low-level implementation of syntax node formatting for HTML, including trait implementations for FormatRule, AsFormat, and IntoFormat.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse crate::prelude::*;\nuse biome_formatter::{FormatOwnedWithRule, FormatRefWithRule, FormatResult};\nuse biome_html_syntax::{map_syntax_node, HtmlSyntaxNode};\n\n#[derive(Debug, Copy, Clone, Default)]\npub struct FormatHtmlSyntaxNode;\n\nimpl FormatRule<HtmlSyntaxNode> for FormatHtmlSyntaxNode {\n    type Context = HtmlFormatContext;\n\n    fn fmt(&self, node: &HtmlSyntaxNode, f: &mut HtmlFormatter) -> FormatResult<()> {\n        map_syntax_node!(node.clone(), node => node.format().fmt(f))\n    }\n}\n\nimpl AsFormat<HtmlFormatContext> for HtmlSyntaxNode {\n    type Format<'a> = FormatRefWithRule<'a, HtmlSyntaxNode, FormatHtmlSyntaxNode>;\n\n    fn format(&self) -> Self::Format<'_> {\n        FormatRefWithRule::new(self, FormatHtmlSyntaxNode)\n    }\n}\n\nimpl IntoFormat<HtmlFormatContext> for HtmlSyntaxNode {\n    type Format = FormatOwnedWithRule<HtmlSyntaxNode, FormatHtmlSyntaxNode>;\n\n    fn into_format(self) -> Self::Format {\n        FormatOwnedWithRule::new(self, FormatHtmlSyntaxNode)\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Parsing Global Declarations in TypeScript\nDESCRIPTION: Fixes parsing of global declarations when the opening brace is on a new line after the 'global' keyword. Demonstrates correct parsing of global declarations in different contexts.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_106\n\nLANGUAGE: typescript\nCODE:\n```\ndeclare global\n{ }\n\ndeclare module foo {\n  global\n  { }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Prettier Ignore Comments in TypeScript\nDESCRIPTION: This snippet demonstrates changes in handling Prettier ignore comments in TypeScript code. It adjusts the placement of ignore comments and formatting of surrounding code to improve readability while respecting the ignore directives.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_81\n\nLANGUAGE: diff\nCODE:\n```\n-export const foo = // prettier-ignore\n-  (bar as Baz).qux;\n+export const foo =\n+  (\n+  // prettier-ignore\n+  bar as Baz\n+).qux;\n```\n\nLANGUAGE: diff\nCODE:\n```\ntype a = {\n    // prettier-ignore\n    [A in B]: C  |  D\n  };\n\ntype a = {\n    [\n      // prettier-ignore\n      A in B\n    ]: C  |  D\n  };\n\ntype a = {\n-  [A in B]: C | D; // prettier-ignore\n+  [A in B]: C | D;\n};\n\ntype a = {\n-  A in B: C | D; // prettier-ignore\n+  [A in B]: // prettier-ignore\n+  C | D;\n};\n\ntype a = {\n    [\n      /* prettier-ignore */\n      A in B\n    ]: C  |  D\n  };\n\ntype a = {\n-  [A /* prettier-ignore */ in B]: C | D;\n+  [A in B]: C | D;\n};\n\ntype a = {\n-  A in B /* prettier-ignore */: C | D;\n+  [A in B]: /* prettier-ignore */\n+  C | D;\n};\n\ntype a = {\n    /* prettier-ignore */ [A in B]: C  |  D\n  };\n\ntype a = {\n-    [/* prettier-ignore */ A in B ]: C  |  D\n-  };\n+  [/* prettier-ignore */ A in B]: C | D;\n+};\n\ntype a = {\n  [A in /* prettier-ignore */ B]: C | D;\n};\n\ntype a = {\n-  [A in B /* prettier-ignore */]: C | D;\n+  [A in B]: /* prettier-ignore */ C | D;\n};\n\ntype a = {\n    /* prettier-ignore */\n    [A in B]: C  |  D\n  };\n```\n\nLANGUAGE: diff\nCODE:\n```\nexport type a =\n  // foo\n  | (foo1 & foo2)\n  // bar\n  | (bar1 & bar2)\n  // prettier-ignore\n-  | (| aaaaaaaaaaaaa&1\n-    // b\n-    | bbbbbbbbbbbbb&2)\n+  | (\n+      | (aaaaaaaaaaaaa & 1)\n+      // b\n+      | (bbbbbbbbbbbbb & 2)\n+    )\n  // baz\n  | (baz1 & baz2);\n\nexport type b =\n  // foo\n  | (foo1 & foo2)\n  // bar\n  | (bar1 & bar2)\n  // prettier-ignore\n-  | (| aaaaaaaaaaaaa&1\n-    // b\n-    | bbbbbbbbbbbbb&2)\n+  | (\n+      | (aaaaaaaaaaaaa & 1)\n+      // b\n+      | (bbbbbbbbbbbbb & 2)\n+    )\n  // baz\n  | (baz1 & baz2);\n```\n\nLANGUAGE: diff\nCODE:\n```\ntype Foo =\n  // prettier-ignore\n-  aa;\n+  (\n+    aa\n+  );\n```\n\n----------------------------------------\n\nTITLE: Handling Comma Operators in For Loop Updates in JavaScript\nDESCRIPTION: Example of a for loop using multiple comma operators in the update expression, which is now correctly ignored by the noCommaOperator rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_141\n\nLANGUAGE: js\nCODE:\n```\nfor (\n  let i = 0, j = 1, k = 2;\n  i < 100;\n  i++, j++, k++\n) {}\n```\n\n----------------------------------------\n\nTITLE: Adjusting Object Property Assignment in JavaScript\nDESCRIPTION: This snippet demonstrates a change in formatting for an object property assignment using computed property syntax.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\na = {\n  [this.resource = resource]: 1,\n};\n```\n\n----------------------------------------\n\nTITLE: Formatting Conditional Expressions with Comments\nDESCRIPTION: Demonstrates the formatting of complex conditional expressions and ternary operators with inline comments. Shows various patterns for handling comments within conditional logic and function calls.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nconst delayedDataProvider = new Proxy(restProvider, {\n   get: (target, name, self) =>\n    name === \"then\"\n      ? // as we await for the dataProvider, JS calls then on it. We must trap that call or else the dataProvider will be called with the then method\n        self\n      : (resource, params) =>\n          new Promise((resolve) =>\n            setTimeout(\n              () => resolve(restProvider[name](resource, params)),\n              500,\n            ),\n          ),\n});\n```\n\n----------------------------------------\n\nTITLE: Formatting Conditional Statements with Comments in JavaScript\nDESCRIPTION: Demonstrates various patterns of ternary expressions with multi-line comments, focusing on proper alignment and formatting of comments within conditional logic.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n var inspect =\n   4 === util.inspect.length\n     ? // node <= 0.8.x\n       function (v, colors) {\n         return util.inspect(v, void 0, void 0, colors);\n       }\n     : // node > 0.8.x\n       function (v, colors) {\n         return util.inspect(v, { colors: colors });\n       };\n```\n\n----------------------------------------\n\nTITLE: Modifying Comment Placement in Console Log Statement\nDESCRIPTION: This snippet demonstrates changes in the placement of comments within a console.log statement, adding extra line breaks for improved readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log(\n  /* 1 */\n\n  /* 2 */\n\n  /* 3 */\n  (first,\n  /* 4 */\n  /* 5 */\n  /* 6 */\n\n  /* 7 */\n  last),\n  /* 8 */\n  /* 9 */\n  /* 10 */\n);\n```\n\n----------------------------------------\n\nTITLE: CDN Links for Popular CSS Frameworks\nDESCRIPTION: A collection of CDN links that can be used to include popular CSS frameworks in web projects. These links point to specific versions of Bootstrap, Pure CSS, Bulma, Foundation, and Tachyons hosted on CDN services like jsdelivr.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-css.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.css\nhttps://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure.css\nhttps://cdn.jsdelivr.net/gh/jgthms/bulma@5c09f18f5fb998a40bc730d7e1fa89227e5c5464/css/bulma.css\nhttps://cdn.jsdelivr.net/gh/foundation/foundation-sites@c2db616af8ab0071927c62c429ed3b1920dc62ba/dist/css/foundation.css\nhttps://cdn.jsdelivr.net/gh/tachyons-css/tachyons@0fafaa66edcbe4169eb4dd5c6c91cff289ba58e7/css/tachyons.css\n```\n\n----------------------------------------\n\nTITLE: Implementing Parser Structure in Rust\nDESCRIPTION: Basic structure definition for a parser implementation in Biome, including context and token source handling.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_parser/CONTRIBUTING.md#2025-04-14_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) struct BetaParser<'source> {\n    context: ParserContext<BetaSyntaxKind>,\n    source: BetaTokenSource<'source>,\n    // optional, only if the parser is meant to have some options\n    options: BetaParserOptions,\n}\n```\n\n----------------------------------------\n\nTITLE: Code Generation Command\nDESCRIPTION: Shell command for generating initial formatter code from grammar.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_8\n\nLANGUAGE: shell\nCODE:\n```\njust gen-formatter\n```\n\n----------------------------------------\n\nTITLE: Running Biome CLI in development mode\nDESCRIPTION: Command to run the Biome CLI in development mode using Cargo.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# This is like running \"biome --help\"\ncargo biome-cli-dev --help\n```\n\n----------------------------------------\n\nTITLE: Changing function call formatting in range-based formatting\nDESCRIPTION: Demonstrates how range-based formatting affects specific regions of code, particularly modifying the formatting of function calls while keeping others intact.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_35\n\nLANGUAGE: diff\nCODE:\n```\n function a(\n ){\n-  a();\n-  b();\n-  c();\n-  d();\n+a (\n+);\n+b();\n+c(); d(\n+);\n+\n }\n\n```\n\n----------------------------------------\n\nTITLE: Biome Configuration Extension\nDESCRIPTION: Example of extending Biome configuration from an external package.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_83\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"extends\": \"@org/configs/biome\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Comments in JavaScript Return Statements\nDESCRIPTION: Demonstrates various scenarios for handling comments in return statements including JSX, unary operations, numeric literals, logical operations, and function calls. Shows proper formatting for both single-line and multi-line block comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction jsx() {\n  return (\n    // Comment\n    <div />\n  );\n}\n\nfunction unary() {\n  return (\n    // Comment\n    !!x\n  );\n}\n\n/* Additional functions omitted for brevity */\n```\n\n----------------------------------------\n\nTITLE: Handling Inline Comments in if/else Statements in JavaScript\nDESCRIPTION: This code demonstrates how Biome formats if/else statements with inline comments. The example includes single-line and multi-line comments at the end of each condition and expression.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_20\n\nLANGUAGE: diff\nCODE:\n```\n if (a === 0) doSomething(); // comment A1\n else if (a === 1) doSomethingElse(); // comment B1\n else if (a === 2) doSomethingElse(); // comment C1\n \n if (a === 0) doSomething(); /* comment A2 */\n else if (a === 1) doSomethingElse(); /* comment B2 */\n else if (a === 2) doSomethingElse(); /* comment C2 */\n \n if (a === 0) expr; // comment A3\n else if (a === 1) expr; // comment B3\n else if (a === 2) expr; // comment C3\n \n if (a === 0) expr; /* comment A4 */\n else if (a === 1) expr; /* comment B4 */\n else if (a === 2) expr; /* comment C4 */\n \n if (a === 0)\n   looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment A5\n else if (a === 1)\n   looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment B5\n else if (a === 2)\n   looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment C5\n \n function a() {\n   if (a) return /* comment 6a */;\n   else return 2;\n \n   if (a) return 1 /* comment 6b */;\n   else return 2;\n \n   if (a) throw e /* comment 6d */;\n   else return 2;\n \n   // TODO[@fisker]: fix this\n   // if (a) var a = 1; /* comment 6e */\n   // else return 2;\n \n   if (a)\n-    if (b /* comment 6f */);\n+    if (b);/* comment 6f */\n     else return 2;\n }\n```\n\n----------------------------------------\n\nTITLE: Formatting If Statements with Expressions and Comments\nDESCRIPTION: This snippet shows how if-else statements with expressions and same-line comments are formatted in Biome, with particular focus on comment placement and indentation.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_19\n\nLANGUAGE: diff\nCODE:\n```\n if (a === 0)\n   doSomething(); // comment A1\n else if (a === 1)\n   doSomethingElse(); // comment B1\n else if (a === 2) doSomethingElse(); // comment C1\n \n if (a === 0) doSomething(); /* comment A2 */\n else if (a === 1) doSomethingElse(); /* comment B2 */\n else if (a === 2) doSomethingElse(); /* comment C2 */\n \n if (a === 0)\n   expr; // comment A3\n else if (a === 1)\n   expr; // comment B3\n else if (a === 2) expr; // comment C3\n \n if (a === 0) expr; /* comment A4 */\n else if (a === 1) expr; /* comment B4 */\n else if (a === 2) expr; /* comment C4 */\n \n if (a === 0)\n   looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment A5\n else if (a === 1)\n   looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment B5\n else if (a === 2)\n   looooooooooooooooooooooooooooooooooooooooooooooooooooooooooooong; // comment C5\n \n function a() {\n   if (a) return; /* comment 6a */\n   else return 2;\n \n   if (a) return 1; /* comment 6b */\n   else return 2;\n \n   if (a) throw e; /* comment 6d */\n   else return 2;\n \n   if (a) var a = 1; /* comment 6e */\n   else return 2;\n \n   if (a)\n-    if (b /* comment 6f */);\n+    if (b); /* comment 6f */\n     else return 2;\n }\n```\n\n----------------------------------------\n\nTITLE: For Loop Control Flow Formatting\nDESCRIPTION: Test cases for formatting continue and break statements with trailing comments in for loops.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_14\n\nLANGUAGE: diff\nCODE:\n```\n for (;;) continue;\n // comment\n\n for (;;) break;\n // comment\n```\n\n----------------------------------------\n\nTITLE: Cargo Coverage Command Usage\nDESCRIPTION: Comprehensive documentation of the cargo coverage command syntax, including available subcommands and options for running parser conformance tests\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/coverage/README.md#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nRun coverage command.\nUSAGE:\n    cargo coverage <SUBCOMMAND> [option]\nSUBCOMMANDS:\n    compare             Compares output between two --json outputs\nOPTIONS\n    --markdown          Emits supported output into markdown format. Supported by `compare` subcommand.\n    --json              Prints the test results in JSON. This mode will send all other test output and user messages to stderr.\n    --detailed=[debug]  Prints a detailed summary at the end for all failing tests. Includes in depth details if set to `debug`.\n    --suites=<IDS>      Runs the specified tests suites. Use comma as separator.\n                        Valid values are:\n                            *: will run all suites\n                            js: will run all javascript suites; Same as \"js/262\";\n                            ts: will run all typescript suites; Same as \"ts/microsoft,ts/babel\";\n                            jsx: will run all jsx suites; Same as \"jsx/babel\";\n                            js/262: will run https://github.com/tc39/test262/tree/main/test;\n                            ts/microsoft: will run https://github.com/microsoft/Typescript/tree/main/tests/cases\n                            ts/babel: will run https://github.com/babel/babel/tree/main/packages/babel-parser/test/fixtures/typescript\n                            jsx/babel: will run https://github.com/babel/babel/tree/main/packages/babel-parser/test/fixtures/jsx/basic\n                        Default is \"*\".\n    --filter=<file>     Filters out tests that don't match the query.\n    --help              Prints this help.\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Source in Rust\nDESCRIPTION: Implementation of a token source with buffered lexer support for handling lookahead and checkpoints.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_parser/CONTRIBUTING.md#2025-04-14_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_parser::lexer::BufferedLexer;\nuse biome_beta_syntax::BetaSyntaxKind;\nuse crate::lexer::{BetaLexer};\n\npub(crate) struct BetaTokenSource<'src> {\n    lexer: BufferedLexer<BetaSyntaxKind, BetaLexer<'src>>,\n}\n\nimpl<'source> TokenSourceWithBufferedLexer<BetaLexer<'source>> for BetaTokenSource<'source> {\n    fn lexer(&mut self) -> &mut BufferedLexer<BetaSyntaxKind, BetaLexer<'source>> {\n        &mut self.lexer\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Lexer Trait in Rust\nDESCRIPTION: Implementation of the Lexer trait for the BetaLexer structure.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_parser/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nimpl<'source> Lexer<'source> for BetaLexer<'source> {}\n```\n\n----------------------------------------\n\nTITLE: Building a debug binary of Biome\nDESCRIPTION: Command to build a debug binary of Biome, useful for triaging issues or debugging LSP clients.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --bin biome\n```\n\n----------------------------------------\n\nTITLE: Formatting JSX Comments in Attributes\nDESCRIPTION: This snippet shows changes in formatting JSX comments within element attributes. It adjusts the placement of comments to improve readability and consistency.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_48\n\nLANGUAGE: JSX\nCODE:\n```\n```diff\n <div attr=/* comment */ \"foo\"></div>;\n \n <div attr=/* comment */\n \"foo\"></div>;\n \n-<div attr /* comment */=\"foo\"></div>;\n+<div attr=/* comment */\n+\"foo\"></div>;\n \n <div attr=/* comment */ \"foo\"></div>;\n \n <div attr=// comment\n \"foo\"></div>;\n \n-<div attr=\"foo\"></div>; // comment\n+<div attr=// comment\n+\"foo\"></div>;\n```\n```\n\n----------------------------------------\n\nTITLE: Adding indexmap feature to Cargo.toml\nDESCRIPTION: Update to Cargo.toml configuration to enable the now-optional indexmap feature for biome_deserialize. This change is required if you need to deserialize IndexMap or IndexSet types.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/CHANGELOG.md#2025-04-14_snippet_1\n\nLANGUAGE: diff\nCODE:\n```\n  [dependencies]\n- biome_deserialize = { version = \"<version>\" }\n+ biome_deserialize = { version = \"<version>\", features = [\"indexmap\"] }\n```\n\n----------------------------------------\n\nTITLE: Reformatting Conditional Types for Better Readability\nDESCRIPTION: Shows how Biome improves formatting of complex conditional types in TypeScript, moving type parameters to multiple lines for better readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_61\n\nLANGUAGE: diff\nCODE:\n```\n-type FallbackFlags<F extends Flags | undefined> =\n-  Equals<NonNullableFlag<F>[\"flags\"], {}> extends true\n-    ? Dict<any>\n-    : NonNullableFlag<F>[\"flags\"];\n+type FallbackFlags<F extends Flags | undefined> = Equals<\n+  NonNullableFlag<F>[\"flags\"],\n+  {}\n+> extends true\n+  ? Dict<any>\n+  : NonNullableFlag<F>[\"flags\"];\n \n-export type UnPromise<Type extends Promise<unknown>> =\n-  Type extends Promise<infer Generic> ? Generic : never;\n+export type UnPromise<Type extends Promise<unknown>> = Type extends Promise<\n+  infer Generic\n+>\n+  ? Generic\n+  : never;\n \n-export type Equals<X, Y> =\n-  (<T>() => T extends X ? 1 : 2) extends <T>() => T extends Y ? 1 : 2\n-    ? true\n-    : false;\n+export type Equals<X, Y> = (<T>() => T extends X ? 1 : 2) extends <\n+  T,\n+>() => T extends Y ? 1 : 2\n+  ? true\n+  : false;\n \n-export type _Repeat<A extends any, N extends number, L extends List = []> =\n-  __Repeat<N, A, L> extends infer X ? Cast<X, List> : never;\n+export type _Repeat<\n+  A extends any,\n+  N extends number,\n+  L extends List = [],\n+> = __Repeat<N, A, L> extends infer X ? Cast<X, List> : never;\n \n export type Repeat<\n   A extends any,\n   N extends number,\n   L extends List = [],\n > = N extends unknown ? (L extends unknown ? _Repeat<A, N, L> : never) : never;\n \n export type Intersect<U1 extends any, U2 extends any> = U1 extends unknown\n   ? U2 extends unknown\n     ? { 1: U1; 0: never }[Equals<U1, U2>]\n     : never\n   : never;\n```\n\n----------------------------------------\n\nTITLE: TypeScript Resolution Mode in Import Types\nDESCRIPTION: Examples of TypeScript's resolution-mode attribute in Import Types, allowing specification of import or require resolution strategies.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport type Fs = typeof import('fs', { with: { 'resolution-mode': 'import' } });\nexport type TypeFromRequire =\n  import(\"pkg\", { with: { \"resolution-mode\": \"require\" } }).TypeFromRequire;\nexport type TypeFromImport =\n  import(\"pkg\", { with: { \"resolution-mode\": \"import\" } }).TypeFromImport;\n```\n\n----------------------------------------\n\nTITLE: Simplifying Computed Properties\nDESCRIPTION: Example showing how useLiteralKeys suggests simplifying computed properties to string literal properties, improving code readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_165\n\nLANGUAGE: diff\nCODE:\n```\n{\n-  [\"1+1\"]: 2,\n+  \"1+1\": 2,\n}\n```\n\n----------------------------------------\n\nTITLE: Executing ARIA Data Extraction Script in Shell\nDESCRIPTION: This command runs the Node.js script 'generate-aria-data.js' with the ARIA specification version 'wai-aria-1.2' as an argument. The output is redirected to a JSON file named 'wai-aria-1-2.json'.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/aria-data/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnode generate-aria-data.js wai-aria-1.2 >| wai-aria-1-2.json\n```\n\n----------------------------------------\n\nTITLE: Formatter Test Dependencies Configuration\nDESCRIPTION: Cargo.toml configuration for test dependencies required by the HTML formatter.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_9\n\nLANGUAGE: toml\nCODE:\n```\n[dev-dependencies]\nbiome_formatter_test = { path = \"../biome_formatter_test\" }\nbiome_html_factory     = { path = \"../biome_html_factory\" }\nbiome_html_parser      = { path = \"../biome_html_parser\" }\nbiome_parser         = { path = \"../biome_parser\" }\nbiome_service        = { path = \"../biome_service\" }\ncountme              = { workspace = true, features = [\"enable\"] }\niai                  = \"0.1.1\"\nquickcheck           = { workspace = true }\nquickcheck_macros    = { workspace = true }\ntests_macros         = { path = \"../tests_macros\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Prettier Dependencies\nDESCRIPTION: Command to install Prettier dependencies using pnpm package manager.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_css_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\npnpm install\n```\n\n----------------------------------------\n\nTITLE: Using the rule_category! Macro in Diagnostics\nDESCRIPTION: Example showing how to use the rule_category! macro when creating diagnostics for better static checking and more efficient category handling.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\ndeclare_lint_rule! {\n    /// Documentation\n    pub(crate) ExampleRule {\n        version: \"next\",\n        name: \"myRuleName\",\n        language: \"js\",\n        recommended: false,\n    }\n}\n\nimpl Rule for ExampleRule {\n    fn diagnostic(ctx: &RuleContext<Self>, _state: &Self::State) -> Option<RuleDiagnostic> {\n        Some(RuleDiagnostic::new(\n            rule_category!(),\n            ctx.query().text_trimmed_range(),\n            \"message\",\n        ))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking for Number Literal Node in JavaScript\nDESCRIPTION: This function checks if a given AST node is a number literal. It verifies both the node type and that the value is a number.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isNumericLiteral(node) {\n  return node.type === \"Literal\" && typeof node.value === \"number\";\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a Lint Rule with Inspired Source Attribution\nDESCRIPTION: Example showing how to indicate that a rule is inspired by (but not identical to) a rule from another tool, using the RuleSourceKind enum.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_9\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_analyze::{declare_lint_rule, RuleSource, RuleSourceKind};\n\ndeclare_lint_rule! {\n    /// Documentation\n    pub(crate) ExampleRule {\n        version: \"next\",\n        name: \"myRuleName\",\n        language: \"js\",\n        recommended: false,\n        sources: &[RuleSource::Eslint(\"no-debugger\")],\n        source_kind: RuleSourceKind::Inspired,\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Spacing Changes in Abstract Class Property Declarations\nDESCRIPTION: This code shows minor formatting changes in abstract class property and method declarations, specifically adding spaces around the colon in type annotations for private abstract members.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_65\n\nLANGUAGE: typescript\nCODE:\n```\nabstract class A {\n  abstract x: number;\n  public abstract y: number;\n  protected abstract z: number;\n  private abstract w : number;\n\n  abstract m: () => void;\n\n  abstract foo_x(): number;\n  public abstract foo_y(): number;\n  protected abstract foo_z(): number;\n  private abstract foo_w() : number;\n}\n```\n\n----------------------------------------\n\nTITLE: Deserializing Union Types with Custom Visitor in Rust\nDESCRIPTION: Implements the Deserializable trait for a Union enum using a custom visitor pattern. The UnionVisitor implements DeserializationVisitor with methods for handling both boolean and string values, showing an alternative approach to union type deserialization.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/README.md#2025-04-14_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nimpl Deserializable for Union {\n    fn deserialize(\n        ctx: &mut impl DeserializationContext,\n        value: &impl DeserializableValue,\n        name: &str,\n    ) -> Option<Self> {\n        // Delegate deserialization to `UnionVisitor`\n        value.deserialize(ctx, UnionVisitor, name)\n    }\n}\n\nstruct UnionVisitor;\nimpl DeserializationVisitor for UnionVisitor {\n    type Output = Union;\n\n    // We expect a `bool` or a `str` as data type.\n    const EXPECTED_TYPE: DeserializableTypes = DeserializableTypes::BOOL.union(DeserializableTypes::STR);\n\n    // Because we expect a `bool` or a `str`, we have to implement the associated method `visit_bool`.\n    fn visit_bool(\n        self,\n        _ctx: &mut impl DeserializationContext,\n        value: bool,\n        range: TextRange,\n        _name: &str,\n    ) -> Option<Self::Output> {\n        Some(Union::Bool(value))\n    }\n\n    // Because we expect a `bool` or a `str`, we have to implement the associated method `visit_str`.\n    fn visit_str(\n        self,\n        _ctx: &mut impl DeserializationContext,\n        value: Text,\n        range: TextRange,\n        _name: &str,\n    ) -> Option<Self::Output> {\n        Some(Union::Str(value.text().to_string()))\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Comparing HTML-Like Comment Handling in JavaScript\nDESCRIPTION: Shows difference in handling HTML-like comments between Biome and Prettier. The difference is in the trailing semicolon after the alert statement.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n <!--\n-alert(1); \n+alert(1)\n -->\n```\n\n----------------------------------------\n\nTITLE: Astro Frontmatter with Illegal Return Statement\nDESCRIPTION: Demonstrates an Astro component with a return statement in the frontmatter, which the parser now handles without throwing an error.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_66\n\nLANGUAGE: astro\nCODE:\n```\n---\nconst condition = true;\nif (condition) {\n  return \"Something\";\n}\n---\n<div></div>\n```\n\n----------------------------------------\n\nTITLE: Enum with Referenced Members\nDESCRIPTION: Example of an enum with members that reference previous enum members, which is now allowed by the useLiteralEnumMembers rule to support common enum flag patterns.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_163\n\nLANGUAGE: typescript\nCODE:\n```\nenum FileAccess {\n  None = 0,\n  Read = 1,\n  Write = 1 << 1,\n  All = Read | Write,\n}\n```\n\n----------------------------------------\n\nTITLE: Running doctests with Just\nDESCRIPTION: Command to run only the doctests in the project using Just.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\njust test-doc\n```\n\n----------------------------------------\n\nTITLE: Building Biome Benchmark Docker Container\nDESCRIPTION: Command to build a Docker container for running Biome benchmarks. Should be executed from the root directory of the project, not from the benchmark directory.\nSOURCE: https://github.com/biomejs/biome/blob/main/benchmark/README.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build --rm -f Dockerfile.benchmark . --progress plain\n```\n\n----------------------------------------\n\nTITLE: CSS Framework CDN URLs\nDESCRIPTION: CDN links for loading various CSS frameworks directly from jsdelivr.net. Includes specific versions and commit hashes for framework stability.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/libs-css.txt#2025-04-14_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.css\nhttps://cdn.jsdelivr.net/npm/daisyui@3.9.2/dist/full.css\nhttps://cdn.jsdelivr.net/npm/purecss@3.0.0/build/pure.css\nhttps://cdn.jsdelivr.net/gh/Dogfalo/materialize@824e78248b3de81e383445e76ffb04cc3264fe7d/dist/css/materialize.css\nhttps://cdn.jsdelivr.net/gh/jgthms/bulma@5c09f18f5fb998a40bc730d7e1fa89227e5c5464/css/bulma.css\nhttps://cdn.jsdelivr.net/gh/foundation/foundation-sites@c2db616af8ab0071927c62c429ed3b1920dc62ba/dist/css/foundation.css\nhttps://cdn.jsdelivr.net/gh/Semantic-Org/Semantic-UI@47acaa0ce4c8dcde6c76080483cf8a3566576770/dist/semantic.css\nhttps://cdn.jsdelivr.net/gh/tachyons-css/tachyons@0fafaa66edcbe4169eb4dd5c6c91cff289ba58e7/css/tachyons.css\n```\n\n----------------------------------------\n\nTITLE: Formatting Return Statements with Comments in JavaScript\nDESCRIPTION: Shows comment placement in return statements with different expressions including JSX, unary operations, and binary expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nfunction jsx() {\n  return (\n    // Comment\n    <div />\n  );\n}\n\nfunction unary() {\n  return (\n    // Comment\n    !!x\n  );\n}\n\nfunction numericLiteralNoParen() {\n  return 1337; // Comment\n}\n\nfunction logical() {\n  return (\n    // Reason for 42\n    42 && 84\n  );\n}\n\nfunction binary() {\n  return (\n    // Reason for 42\n    42 * 84\n  );\n}\n\nfunction binaryInBinaryLeft() {\n  return (\n    // Reason for 42\n    42 * 84 + 2\n  );\n}\n\nfunction binaryInBinaryRight() {\n  return (\n    // Reason for 42\n    42 + 84 * 2\n  );\n}\n\nfunction conditional() {\n  return (\n    // Reason for 42\n    42 ? 1 : 2\n  );\n}\n\nfunction binaryInConditional() {\n  return (\n    // Reason for 42\n    42 * 3 ? 1 : 2\n  );\n}\n\nfunction call() {\n  return (\n    // Reason for a\n    a()\n  );\n}\n\nfunction memberInside() {\n  return (\n    // Reason for a.b\n    a.b.c\n  );\n}\n\nfunction memberOutside() {\n  return (\n    // Reason for a\n    a.b.c\n  );\n}\n\nfunction memberInAndOutWithCalls() {\n  return (\n    // Reason for a\n    aFunction\n      .b()\n      .c.d()\n  );\n}\n\nfunction excessiveEverything() {\n  return (\n    // Reason for stuff\n    a.b() * 3 + 4 ? ((a`hi`, 1) ? 1 : 1) : 1\n  );\n}\n\nfunction sequenceExpressionInside() {\n  return (\n    // Reason for a\n    a, b\n  );\n}\n\nfunction taggedTemplate() {\n  return (\n    // Reason for a\n    a`b`\n  );\n}\n\nfunction inlineComment() {\n  return /* hi */ 42 || 42;\n}\n\nfunction multilineBlockSameLine() {\n  return (\n    /**\n     * @type {string}\n     */ \"result\"\n  );\n}\n\nfunction multilineBlockNextLine() {\n  return (\n    /**\n     * @type {string}\n     */\n    \"result\"\n  );\n}\n\nfunction multilineBlockSameLineJsx() {\n  return (\n    /**\n     * JSX Same line\n     */ <div></div>\n  );\n}\n\nfunction multilineBlockNextLineJsx() {\n  return (\n    /**\n     * JSX Next line\n     */\n    <div></div>\n  );\n}\n\nfunction singleLineBlockSameLine() {\n  return /** Result -> */ \"result\";\n}\n\nfunction singleLineBlockNextLine() {\n  return (\n    /** Result below */\n    \"result\"\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Bronze Sponsors Table in HTML/Markdown\nDESCRIPTION: This snippet creates a responsive table to display bronze-level sponsors of the Biome project. Each cell contains a company logo with a link to the sponsor's website, including UTM parameters for tracking.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.md#2025-04-14_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://nanabit.dev/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://images.opencollective.com/nanabit/d15fd98/logo/256.png?height=80\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://vital.io/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/25357309?s=200\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://coderabbit.ai/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/132028505?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://forge42.dev/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/161314831?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"http://rstudio.org/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/513560?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://pennylane.com/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/57875210?s=200&v=4\" width=\"80\"></a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Deserializing Enum Variants from Strings with Text Borrowing in Rust\nDESCRIPTION: Optimized implementation of the Deserializable trait for an enum that maps string values to enum variants. This version uses Text instead of String to avoid heap allocation by borrowing directly from the source.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_deserialize/README.md#2025-04-14_snippet_6\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_deserialize::{Deserializable, DeserializationContext, DeserializableValue, DeserializationDiagnostic, Text};\n\n#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash, Ord, PartialOrd)]\npub enum Variant { A, B }\n\nimpl Deserializable for Variant {\n    fn deserialize(\n        ctx: &mut impl DeserializationContext,\n        value: &impl DeserializableValue,\n        name: &str,\n    ) -> Option<Self> {\n        match Text::deserialize(ctx, value, name)?.text() {\n            \"A\" => Some(Variant::A),\n            \"B\" => Some(Variant::B),\n            unknown_variant => {\n                const ALLOWED_VARIANTS: &[&str] = &[\"A\", \"B\"];\n                ctx.report(DeserializationDiagnostic::new_unknown_value(\n                    unknown_variant,\n                    value.range(),\n                    ALLOWED_VARIANTS,\n                ));\n                None\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Ignored Expressions with Comments in Function Calls\nDESCRIPTION: This snippet demonstrates Biome's handling of prettier-ignore directives within nested expressions and function calls, particularly with ESLint directives.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n function HelloWorld(x) {\n-  // prettier-ignore\n-  // eslint-disable-next-line\n-  (x.a |\n-    x.b).call(null);\n+  (\n+    // prettier-ignore\n+    // eslint-disable-next-line\n+    x.a |\n+    x.b\n+  ).call(null)\n }\n \n function HelloWorld(x) {\n   // prettier-ignore\n+\n   (\n     // eslint-disable-next-line\n     x.a |\n     x.b\n   ).call(null)\n }\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Type Import Modifiers\nDESCRIPTION: Shows how Biome formats various forms of type imports in TypeScript, switching between single and double quotes for string literals.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_47\n\nLANGUAGE: typescript\nCODE:\n```\nexport type { SomeThing };\nexport type { A as B };\nexport type { B as C } from \"./a\";\nexport type { foo } from \"bar\";\nexport type { foo };\n\n// this should be treated as a normal import statement\nimport type from \"./foo\";\n\nimport type { SomeThing } from \"./some-module.js\";\nimport type { foo, bar } from \"baz\";\nimport type { foo as bar } from \"baz\";\nimport type * as foo from \"./bar\";\nimport type foo from \"bar\";\nimport type foo, { bar } from 'bar';\n```\n\n----------------------------------------\n\nTITLE: Formatting Class Expression Decorators with Prettier Ignore\nDESCRIPTION: This snippet shows how Biome formats class expression decorators with prettier-ignore comments, focusing on the placement of comments relative to the expression.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n-// prettier-ignore\n (\n+  // prettier-ignore\n   @decorator\n   class {}\n );\n```\n\n----------------------------------------\n\nTITLE: CSS Media Query Formatting Fix\nDESCRIPTION: Demonstrates the correction of media query formatting to properly handle spacing around comparison operators.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n.class {\n-  @media (1024px <= width <=1280px) {\n+  @media (1024px <= width <= 1280px) {\n     color: red;\n     }\n}\n```\n\n----------------------------------------\n\nTITLE: Referencing biome_diagnostics Crate in Markdown\nDESCRIPTION: This code snippet is a Markdown header that introduces the biome_diagnostics crate. It uses backticks to format the crate name as inline code.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_diagnostics/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# `biome_diagnostics`\n```\n\n----------------------------------------\n\nTITLE: Spec Tests Generation Setup\nDESCRIPTION: Test module configuration for generating HTML formatter specification tests.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_10\n\nLANGUAGE: rust\nCODE:\n```\nmod spec_test;\n\nmod formatter {\n    mod html_module {\n        tests_macros::gen_tests! {\"tests/specs/html/**/*.html\", crate::spec_test::run, \"\"}\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running tests with output display\nDESCRIPTION: Command to run a specific test and show debug output using Cargo.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ncargo t test_some_function --show-output\n```\n\n----------------------------------------\n\nTITLE: Formatting Arrays with Holes and Comments in JavaScript\nDESCRIPTION: Shows differences in formatting arrays with holes and comments between formatting tools. Main differences are in the placement of empty lines around holes and comment positioning.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n const numberWithHoles1 = [\n   7234932941,\n   7234932722,\n   7234932312,\n   ,\n   // comment before a hole 1\n   7234932841,\n   ,\n   7234932843,\n   ,\n   // comment after a hole 1\n   7234932436,\n ];\n \n const numberWithHoles2 = [\n   0x234932941,\n   0x234932722,\n   0x234932312,\n-\n   ,\n   // comment before a hole 2\n   0x234932841,\n   ,\n   0x234932843,\n   ,\n+\n   // comment after a hole 2\n   0x234932436,\n ];\n\n```\n\n----------------------------------------\n\nTITLE: Spec Test Runner Implementation\nDESCRIPTION: Implementation of the test runner function for HTML formatter specification tests.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_11\n\nLANGUAGE: rust\nCODE:\n```\nuse biome_formatter_test::spec::{SpecSnapshot, SpecTestFile};\nuse std::path::Path;\n\nmod language {\n    include!(\"language.rs\");\n}\n\npub fn run(spec_input_file: &str, _expected_file: &str, test_directory: &str, _file_type: &str) {\n    let root_path = Utf8Path::new(concat!(env!(\"CARGO_MANIFEST_DIR\"), \"/tests/specs/\"));\n\n    let Some(test_file) = SpecTestFile::try_from_file(spec_input_file, root_path) else {\n        return;\n    };\n\n    let options = HtmlFormatOptions::default();\n    let language = language::HtmlTestFormatLanguage::default();\n\n    let snapshot = SpecSnapshot::new(\n        test_file,\n        test_directory,\n        language,\n        HtmlFormatLanguage::new(options),\n    );\n\n    snapshot.test()\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Type Parameters with Extended Types in TypeScript\nDESCRIPTION: Shows how type parameters with multiple extended types should be formatted with proper line breaks after the 'extends' keyword. The format includes indentation for type union members and handles comments within the type definition.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_64\n\nLANGUAGE: diff\nCODE:\n```\n a = {\n   parseFunctionBodyAndFinish<\n     T extends\n       | N.Function\n       | N.TSDeclareMethod\n       | N.TSDeclareFunction\n       | N.ClassPrivateMethod,\n   >() {},\n };\n \n function parseFunctionBodyAndFinish<\n   T extends\n     | N.Function\n     | N.TSDeclareMethod\n     | N.TSDeclareFunction\n     | N.ClassPrivateMethod\n     | Foo\n     | Bar\n     | Baz,\n >();\n \n function parseFunctionBodyAndFinish<\n   T extends // comment\n-    N.Function | N.TSDeclareMethod | Baz,\n+  N.Function | N.TSDeclareMethod | Baz,\n >();\n \n function makeChainWalker<\n   ArgT extends {\n     options: ValidatedOptions;\n     dirname: string;\n     filepath?: string;\n   },\n >() {}\n```\n\n----------------------------------------\n\nTITLE: Implementing HTML Format Context in Rust\nDESCRIPTION: Implementation of the format context structure for HTML formatting that maintains comments and source map information. Required for the formatting infrastructure.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\npub struct HtmlFormatContext {\n    /// The comments of the nodes and tokens in the program.\n    comments: Rc<HtmlComments>,\n    source_map: Option<TransformSourceMap>,\n}\n\nimpl HtmlFormatContext {\n    pub fn new(comments: HtmlComments) -> Self {\n        Self {\n            comments: Rc::new(comments),\n            source_map: None,\n        }\n    }\n\n    pub fn with_source_map(mut self, source_map: Option<TransformSourceMap>) -> Self {\n        self.source_map = source_map;\n        self\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Differences in Arrays with Holes in JavaScript\nDESCRIPTION: This diff demonstrates how Biome and Prettier handle arrays with explicit holes (empty elements) and comments. The key difference is in whitespace positioning around the holes.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n const numberWithHoles1 = [\n   7234932941,\n   7234932722,\n   7234932312,\n   ,\n   // comment before a hole 1\n   7234932841,\n   ,\n   7234932843,\n   ,\n   // comment after a hole 1\n   7234932436,\n ];\n \n const numberWithHoles2 = [\n   0x234932941,\n   0x234932722,\n   0x234932312,\n-\n   ,\n   // comment before a hole 2\n   0x234932841,\n   ,\n   0x234932843,\n   ,\n+\n   // comment after a hole 2\n   0x234932436,\n ];\n```\n\n----------------------------------------\n\nTITLE: GitLab Code Quality Reporter Output\nDESCRIPTION: Example output format for the new GitLab reporter that emits diagnostics using GitLab Code Quality report format.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n[\n  {\n    \"description\": \"Use === instead of ==. == is only allowed when comparing against `null`\",\n    \"check_name\": \"lint/suspicious/noDoubleEquals\",\n    \"fingerprint\": \"6143155163249580709\",\n    \"severity\": \"critical\",\n    \"location\": {\n      \"path\": \"main.ts\",\n      \"lines\": {\n        \"begin\": 4\n      }\n    }\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying Bronze Sponsors Table in HTML\nDESCRIPTION: This HTML snippet creates a table to showcase bronze-level sponsors for the Biome project. It includes sponsor logos as images with links to their websites, using specific UTM parameters for tracking.\nSOURCE: https://github.com/biomejs/biome/blob/main/README.md#2025-04-14_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://nanabit.dev/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://images.opencollective.com/nanabit/d15fd98/logo/256.png?height=80\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://vital.io/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/25357309?s=200\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://coderabbit.ai/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/132028505?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://forge42.dev/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/161314831?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"http://rstudio.org/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/513560?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://pennylane.com/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/57875210?s=200&v=4\" width=\"80\"></a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Installing Just command runner with Cargo\nDESCRIPTION: Command to install the Just command runner using Cargo, which is used for running scripts and tasks in the project.\nSOURCE: https://github.com/biomejs/biome/blob/main/CONTRIBUTING.md#2025-04-14_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncargo install just\n```\n\n----------------------------------------\n\nTITLE: Formatting Break and Continue Statements with Comments in JavaScript\nDESCRIPTION: This snippet demonstrates the formatting of continue and break statements in various for loop types with different comment styles (line comments, block comments) and positions (inline, after statement).\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_16\n\nLANGUAGE: diff\nCODE:\n```\n for (;;) continue;\n // comment\n \n for (;;) break;\n // comment\n \n for (const f of []) continue;\n // comment\n \n for (const f of []) break;\n // comment\n \n for (const f in {}) continue;\n // comment\n \n for (const f in {}) break;\n // comment\n \n for (;;) continue; // comment\n \n for (;;) break; // comment\n \n for (const f of []) continue; // comment\n \n for (const f of []) break; // comment\n \n for (const f in {}) continue; // comment\n \n for (const f in {}) break; // comment\n \n for (;;) continue; /* comment */\n \n for (;;) break; /* comment */\n \n for (const f of []) continue; /* comment */\n \n for (const f of []) break; /* comment */\n \n for (const f in {}) continue; /* comment */\n \n for (const f in {}) break; /* comment */\n \n for (;;) continue;\n /* comment */\n \n for (;;) break;\n /* comment */\n \n for (const f of []) continue;\n /* comment */\n \n for (const f of []) break;\n /* comment */\n \n for (const f in {}) continue;\n /* comment */\n \n for (const f in {}) break;\n /* comment */\n \n-label1: for (;;) continue label1 /* comment */;\n+label1: for (;;) continue label1; /* comment */\n \n label1: for (;;) continue label1;\n /* comment */\n \n label1: for (;;) continue label1; // comment\n \n label1: for (;;) continue label1;\n // comment\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Test Reports\nDESCRIPTION: Environment variable configurations to control report generation and format when comparing Biome formatter output with Prettier snapshots.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nREPORT_PRETTIER=1\nREPORT_TYPE=json | markdown\nINCOMPATIBLE_ONLY=1\n```\n\n----------------------------------------\n\nTITLE: Formatting Decorator Comments in TypeScript Classes\nDESCRIPTION: Shows differences in handling comments within decorated class properties. The primary change is in the indentation of comments and the handling of abstract property declarations, affecting the readability of comments that appear between decorators and class members.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_72\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo1 {\n  @foo\n  // comment\n  async method() {}\n}\n\nclass Foo2 {\n  @foo\n  // comment\n  private method() {}\n}\n\nclass Foo3 {\n  @foo\n  // comment\n  *method() {}\n}\n\nclass Foo4 {\n  @foo\n  // comment\n  async *method() {}\n}\n\nclass Something {\n  @foo()\n  // comment\n  readonly property: Array<string>;\n}\n\nclass Something2 {\n  @foo()\n-  // comment\n-  abstract property: Array<string>;\n+    // comment\n+    abstract property: Array<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Generating a new Lint Rule with Just Commands\nDESCRIPTION: Shows how to use the 'just' command to scaffold the boilerplate for a new lint rule in various languages. The command creates the necessary files and directory structure for implementing the rule.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n# Example: Create a new JS lint rule\njust new-js-lintrule useMyRuleName\n\n# Or, to create a new lint/assist rule for JSON/CSS/GraphQL/..: \n# $ just new-css-lintrule useMyRuleName\n# $ just new-graphql-lintrule useMyRuleName\n# $ just new-js-assistrule useMyRuleName\n# $ just new-json-assistrule useMyRuleName\n```\n\n----------------------------------------\n\nTITLE: Formatting Multiple Comments on Same Line in JavaScript\nDESCRIPTION: Demonstrates formatting of multiple block comments appearing on the same line or across lines.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n/*========= All on same line =========*/\na;\n/*1*/ /*2*/ /*3*/\nb;\n\na; /*1*/ /*2*/ /*3*/\nb;\n\na;\n/*1*/ /*2*/ /*3*/ b;\n\na;\n/*\n1*/ /*2*/ /*3\n */\nb;\n\na; /*\n1*/ /*2*/ /*3\n */\nb;\n\na; /*\n1*/ /*2*/ /*3\n */\nb;\n\n/*========= First two on same line =========*/\na;\n/*1*/ /*2*/\n/*3*/\nb;\n\na; /*1*/ /*2*/\n/*3*/\nb;\n\na;\n/*1*/ /*2*/\n/*3*/ b;\n\na;\n/*\n1*/ /*2*/\n/*3\n */\nb;\n\na; /*\n1*/ /*2*/\n/*3\n */\nb;\n\na; /*\n1*/ /*2*/\n/*3\n */ b;\n```\n\n----------------------------------------\n\nTITLE: GritQL Query Matching Async Functions\nDESCRIPTION: Example of a GritQL query that specifically matches non-async functions by capturing the async keyword in a metavariable and asserting its emptiness.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_9\n\nLANGUAGE: grit\nCODE:\n```\n$async function foo() {} where $async <: .\n```\n\n----------------------------------------\n\nTITLE: Removing Whitespace in JavaScript File\nDESCRIPTION: This snippet shows the removal of a blank line, which could be part of a code cleanup or formatting process.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n\n```\n\n----------------------------------------\n\nTITLE: Minor Spacing Change in Abstract Class Method Declaration\nDESCRIPTION: This code diff shows a minor formatting change in an abstract class declaration where spacing around the colon in the method declaration is adjusted for the 'baz' method.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_63\n\nLANGUAGE: typescript\nCODE:\n```\nclass A {}\n\nabstract class B {\n  foo(): number {\n    return this.bar();\n  }\n  abstract bar(): number;\n}\n\nnew B();\n\nvar BB: typeof B = B;\nvar AA: typeof A = BB;\nnew AA();\n\nfunction constructB(Factory: typeof B) {\n  new Factory();\n}\n\nvar BB = B;\nnew BB();\n\nvar x: any = C;\nnew x();\n\nclass C extends B {}\n\nabstract class D extends B {}\n\nclass E extends B {\n  bar() {\n    return 1;\n  }\n}\n\nabstract class F extends B {\n  abstract foo(): number;\n  bar() {\n    return 2;\n  }\n}\n\nabstract class G {\n  abstract qux(x: number): string;\n  abstract qux(): number;\n  y: number;\n  abstract quz(x: number, y: string): boolean;\n\n  abstract nom(): boolean;\n  nom(x: number): boolean;\n}\n\nclass H {\n  abstract baz() : number;\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Ternary Expressions in JavaScript\nDESCRIPTION: Test cases showing formatting rules for nested ternary operators, including string concatenation, function calls, and object properties.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_11\n\nLANGUAGE: diff\nCODE:\n```\n // concatened string in consequent should be visually distinguishable from alternate\n const avatar = has_ordered\n   ? \"https://marmelab.com/posters/avatar/longer-word-that-breaks-consequent-\" +\n     numberOfCustomers +\n     \".jpeg\"\n   : undefined;\n```\n\n----------------------------------------\n\nTITLE: Running Biome Daemon - CLI Commands\nDESCRIPTION: Commands to start the Biome daemon for debugging and testing purposes. The daemon writes logs to the cache folder and can be interacted with using CLI commands.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_service/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin=biome -- start\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --bin=biome -- lint --use-server <path>\n```\n\n----------------------------------------\n\nTITLE: Configuring File Ignore Settings in JSONC\nDESCRIPTION: Shows how to configure Biome to ignore unknown file types using the configuration file.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_115\n\nLANGUAGE: jsonc\nCODE:\n```\n{\n  \"files\": {\n    \"ignoreUnknown\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Displaying Bronze Sponsors Table in HTML/Markdown\nDESCRIPTION: A responsive HTML table embedded in Markdown that showcases bronze-level sponsors of the Biome project. Each sponsor is displayed with its logo and a link to its website with UTM tracking parameters.\nSOURCE: https://github.com/biomejs/biome/blob/main/packages/@biomejs/biome/README.fr.md#2025-04-14_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<table>\n  <tbody>\n    <tr>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://nanabit.dev/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://images.opencollective.com/nanabit/d15fd98/logo/256.png?height=80\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://vital.io/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/25357309?s=200\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://coderabbit.ai/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/132028505?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://forge42.dev/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/161314831?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"http://rstudio.org/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/513560?s=200&v=4\" width=\"80\"></a>\n      </td>\n      <td align=\"center\" valign=\"middle\">\n        <a href=\"https://pennylane.com/?utm_source=biome&utm_medium=readme\" target=\"_blank\"><img src=\"https://avatars.githubusercontent.com/u/57875210?s=200&v=4\" width=\"80\"></a>\n      </td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Formatting Differences in Arrays with Trailing Comments in JavaScript\nDESCRIPTION: This diff shows different line breaking strategies between Biome and Prettier when formatting large numeric arrays with trailing comments. Biome introduces more line breaks for readability.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_3\n\nLANGUAGE: diff\nCODE:\n```\n const lazyCatererNumbers = [\n   1, 2, 4, 7, 11, 16, 22, 29, 37, 46, 56, 67, 79, 92, 106, 121, 137, 154, 172,\n   191, 211, 232, 254, 277, 301, 326, 352, 379, 407, 436, 466 /*block*/,\n   // line\n-  497, 529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991, 1036,\n-  1082, 1129, 1177, 1226,\n+  497,\n+  529, 562, 596, 631, 667, 704, 742, 781, 821, 862, 904, 947, 991, 1036, 1082,\n+  1129, 1177, 1226,\n   // line 2\n-  1276, 1327, 1379,\n+  1276,\n+  1327, 1379,\n ];\n```\n\n----------------------------------------\n\nTITLE: Comment Positioning in Nested Function Call in JavaScript\nDESCRIPTION: This diff shows how Biome repositions comments in nested function calls. The example demonstrates differences in handling prettier-ignore and eslint-disable-next-line comments within function parameters.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_21\n\nLANGUAGE: diff\nCODE:\n```\n function HelloWorld(x) {\n-  // prettier-ignore\n-  // eslint-disable-next-line\n-  (x.a |\n-    x.b).call(null);\n+  (\n+    // prettier-ignore\n+    // eslint-disable-next-line\n+    x.a |\n+    x.b\n+  ).call(null)\n }\n \n function HelloWorld(x) {\n   // prettier-ignore\n+\n   (\n     // eslint-disable-next-line\n     x.a |\n     x.b\n   ).call(null)\n }\n```\n\n----------------------------------------\n\nTITLE: Defining HTML Formatter Type in Rust\nDESCRIPTION: Type definition for the HTML formatter with a lifetime parameter.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_formatter/CONTRIBUTING.md#2025-04-14_snippet_5\n\nLANGUAGE: rust\nCODE:\n```\npub(crate) type HtmlFormatter<'buf> = Formatter<'buf, HtmlFormatContext>;\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Newline Formatting in JavaScript\nDESCRIPTION: Shows differences in handling newlines before arrow functions. One formatter preserves the arrow function while the other splits it into separate lines.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-async (x) => x;\n+async;\n+x;\n+=> x\n\n```\n\n----------------------------------------\n\nTITLE: Checking for Regular Expression Literal in JavaScript\nDESCRIPTION: This function checks if a given AST node is a regular expression literal. It verifies the node type and the presence of a regex pattern and flags.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/analyzer-libs-js.txt#2025-04-14_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nfunction isRegExpLiteral(node) {\n  return (\n    node.type === \"Literal\" &&\n    Object.prototype.hasOwnProperty.call(node, \"regex\") &&\n    typeof node.regex === \"object\" &&\n    typeof node.regex.pattern === \"string\" &&\n    typeof node.regex.flags === \"string\"\n  );\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting TypeScript Satisfies Operators with Comments\nDESCRIPTION: This snippet shows formatting changes for TypeScript satisfies operators with comments. It adjusts the placement of comments and line breaks to improve readability while maintaining the satisfies operator functionality.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_82\n\nLANGUAGE: diff\nCODE:\n```\nconst t1 = {\n  prop1: 1,\n  prop2: 2,\n  prop3: 3,\n-} satisfies Record<string, number>; // Comment\n+} satisfies\n+  // Comment\n+  Record<string, number>;\n```\n\n----------------------------------------\n\nTITLE: Improving Generic Type Parameter Formatting in Test Declarations\nDESCRIPTION: Shows how Biome improves formatting of generic type parameters in test function declarations with long test names, breaking the type parameter into a separate line.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_58\n\nLANGUAGE: diff\nCODE:\n```\n-test(\"does something really long and complicated so I have to write a very long name for the test\", <T>(done) => {\n+test(\"does something really long and complicated so I have to write a very long name for the test\", <\n+  T,\n+>(done) => {\n   console.log(\"hello!\");\n });\n```\n\n----------------------------------------\n\nTITLE: Comparing Comment Handling in Export Statements\nDESCRIPTION: Shows differences in handling comments around export statements. The main difference is in whitespace between the export keyword, comment, and opening brace.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_5\n\nLANGUAGE: diff\nCODE:\n```\n export //comment\n- {};\n+{};\n \n export /* comment */ {};\n \n const foo = \"\";\n export {\n   foo, // comment\n };\n \n const bar = \"\";\n export {\n   // comment\n   bar,\n };\n \n const fooo = \"\";\n const barr = \"\";\n export {\n   fooo, // comment\n   barr, // comment\n };\n \n const foooo = \"\";\n const barrr = \"\";\n export {\n   foooo,\n   // comment\n   barrr as baz,\n } from \"foo\";\n \n const fooooo = \"\";\n const barrrr = \"\";\n export {\n   fooooo,\n   // comment\n   barrrr as bazz,\n };\n```\n\n----------------------------------------\n\nTITLE: Formatting Arrow Functions with Comments in JavaScript\nDESCRIPTION: This code demonstrates how Biome repositions comments within arrow functions. The example shows a significant restructuring of the code placing comments before the arrow function parameters rather than within the function body.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_24\n\nLANGUAGE: diff\nCODE:\n```\n-foo(() =>\n-  // foo\n-  {},\n+foo(\n+  (\n+    // foo\n+  ) => {},\n );\n```\n\n----------------------------------------\n\nTITLE: Installing Hyperfine Benchmark Tool\nDESCRIPTION: Command to install the Hyperfine benchmarking tool using Cargo, which is required for running local benchmarks.\nSOURCE: https://github.com/biomejs/biome/blob/main/benchmark/README.md#2025-04-14_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install hyperfine\n```\n\n----------------------------------------\n\nTITLE: Tagged Template Literal Comment Formatting\nDESCRIPTION: Shows proper formatting of comments around tagged template literals in JavaScript. Includes examples of both inline and line-separated comment placement.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nfoo``; // comment\n\nfoo // comment\n``;\n\nfoo // comment\n`\n`;\n\nfoo /* comment */`\n`;\n\nfoo /* comment */`\n`;\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Logo in Markdown\nDESCRIPTION: Renders the Biome project logo using HTML within a Markdown file. The image is centered and sized appropriately.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_css_formatter/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\">\n\t<img alt=\"Biome - Toolchain of the web\" width=\"400\" src=\"https://raw.githubusercontent.com/biomejs/resources/main/svg/slogan-light-transparent.svg\"/>\n</p>\n```\n\n----------------------------------------\n\nTITLE: JavaScript String Formatting Examples\nDESCRIPTION: Demonstrates Rome's string literal formatting capabilities including quote handling\nSOURCE: https://github.com/biomejs/biome/blob/main/ROME_CHANGELOG.md#2025-04-14_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// original code\nlet a = {\n    \"something\": 3\n}\nlet b = \"cool isn\\'t it\";\nlet c = \"\\\"content\\\" ' \";\n\n// formatted code\nlet a = {\n    something: 3\n}\nlet b = \"cool isn't it\";\nlet c = '\"content\" \\' ';\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Logo and Badges in Markdown\nDESCRIPTION: This snippet shows how to center-align an image and display project badges using Markdown and HTML. It includes links to the project's Discord chat and Cargo package.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_css_parser/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\">\n\t<img alt=\"Biome - Toolchain of the web\" width=\"400\" src=\"https://raw.githubusercontent.com/biomejs/resources/main/svg/slogan-light-transparent.svg\"/>\n</p>\n\n<div align=\"center\">\n\n[![Discord chat][discord-badge]][discord-url]\n[![cargo version][cargo-badge]][cargo-url]\n\n[discord-badge]: https://badgen.net/discord/online-members/BypW39g6Yc?icon=discord&label=discord&color=green\n[discord-url]: https://biomejs.dev/chat\n[cargo-badge]: https://badgen.net/crates/v/biome_css_parser?&color=green\n[cargo-url]: https://crates.io/crates/biome_css_parser/\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: For-in Loop Expression Formatting\nDESCRIPTION: Tests for formatting complex initializer expressions in for-in loops with nested operators and functions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n for (var a = (b in c) in {});\n-for (var a = (1 || b in c) in {});\n+for (var a = 1 || (b in c) in {});\n```\n\n----------------------------------------\n\nTITLE: HTML Template Configuration for Vue.js Application\nDESCRIPTION: Main HTML template that sets up the document structure, includes meta tags for SEO and mobile responsiveness, and configures the entry point for a Vue.js application using Vite as the build tool.\nSOURCE: https://github.com/biomejs/biome/blob/main/xtask/bench/benches/libs-html.txt#2025-04-14_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1.0\">\n    <link rel=\"icon\" href=\"/favicon.ico\">\n    <title>OpenTogetherTube</title>\n  </head>\n  <body>\n    <noscript>\n      <strong>We're sorry but this app doesn't work properly without JavaScript enabled. Please enable it to continue.</strong>\n    </noscript>\n    <div id=\"app\"></div>\n    <script type=\"module\" src=\"/src/main.ts\"></script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Comparing Newline Before Arrow Syntax in JavaScript\nDESCRIPTION: Shows significant difference in handling newlines before arrow tokens between Biome and Prettier. Biome seems to interpret it as separate tokens while Prettier maintains it as an arrow function.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_2\n\nLANGUAGE: diff\nCODE:\n```\n-async (x) => x;\n+async;\n+x;\n+=> x\n\n```\n\n----------------------------------------\n\nTITLE: Removing Unnecessary Parentheses in Decorators - TypeScript\nDESCRIPTION: Shows how Biome now removes unnecessary parentheses around expressions in decorators, matching Prettier's behavior.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n  class {\n-   @(decorator)\n+   @decorator\n      method() {}\n  },\n  class {\n-   @(decorator())\n+   @decorator()\n      method() {}\n  },\n  class {\n    @(decorator?.())\n    method() {}\n  },\n```\n\n----------------------------------------\n\nTITLE: Formatting Differences in Array Structure with Long Lines in JavaScript\nDESCRIPTION: This diff shows how Biome and Prettier format arrays containing numeric values differently. The main differences appear in line breaking strategy for long arrays with comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n {   for (const srcPath of [src, `${src}.js`, `${src}/index`, `${src}/index.js`]) {   } }\n {   for (const srcPath of [123, 123_123_123, 123_123_123_1, 13_123_3123_31_43]) {   } }\n {\n-  for (const srcPath of [123, 123_123_123, 123_123_123_1, 13_123_3123_31_432]) {\n+  for (const srcPath of [\n+    123, 123_123_123, 123_123_123_1, 13_123_3123_31_432,\n+  ]) {\n   }\n }\n {\n   for (const srcPath of [\n     123, 123_123_123, 123_123_123_1, 13_123_3123_31_4321,\n   ]) {\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Formatting HTML-Like Comments in JavaScript\nDESCRIPTION: Shows handling of HTML-style comments in JavaScript code.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n<!--\nalert(1)\n-->\n```\n\n----------------------------------------\n\nTITLE: Consolidating Comment Lines in Empty Statements\nDESCRIPTION: Merges consecutive single-line comments into single lines and adjusts comment placement in expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_9\n\nLANGUAGE: diff\nCODE:\n```\n-a; /* a */ // b\n-/* c */\n-foo; // first\n-// second\n-// third\n-function x() {} // first\n-// second\n+a; /* a */ /* c */ // b\n+\n+foo; // first // second // third\n+\n+function x() {} // first // second\n+\n a =\n-  b + // 1\n-  // 2\n-  c + // 3\n-  // 4\n-  d + // 5\n-  /* 6 */\n+  b + // 1 // 2\n+  c + // 3 // 4\n+  d /* 6 */ + // 5\n   e; // 7\n\n```\n\n----------------------------------------\n\nTITLE: Arrow Function Array Formatting\nDESCRIPTION: Demonstrates formatting changes for arrow functions returning array literals and handling of multiple arrow function levels with comments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_6\n\nLANGUAGE: diff\nCODE:\n```\n-const x2 = () => () => [\n-  \"The\",\n-  \"green\",\n-  \"dragon\",\n-  \"liked\",\n-  \"to\",\n-  \"knit\",\n-  \"sweaters\",\n-  \"for\",\n-  \"the\",\n-  \"fluffy\",\n-  \"clouds\",\n-  \"in\",\n-  \"the\",\n-  \"sky.\",\n-];\n+const x2 = () => () =>\n+  [\n+    \"The\",\n+    \"green\",\n+    \"dragon\",\n+    \"liked\",\n+    \"to\",\n+    \"knit\",\n+    \"sweaters\",\n+    \"for\",\n+    \"the\",\n+    \"fluffy\",\n+    \"clouds\",\n+    \"in\",\n+    \"the\",\n+    \"sky.\",\n+  ];\n```\n\n----------------------------------------\n\nTITLE: Formatting Ignored Expressions with Parentheses in JavaScript\nDESCRIPTION: This code shows how Biome handles prettier-ignore directives with parenthesized expressions. The example demonstrates the reformatting of ignored comma expressions in function arguments and assignments.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_22\n\nLANGUAGE: diff\nCODE:\n```\n oneArgument(\n   // prettier-ignore\n   (0, 1),\n );\n \n a =\n-  // prettier-ignore\n-  (0, 1);\n+  (\n+ // prettier-ignore\n+ (0, 1)\n+);\n```\n\n----------------------------------------\n\nTITLE: Modifying Object Wrapping in JSDoc Satisfies Annotation\nDESCRIPTION: Changes the format of an object with a JSDoc @satisfies annotation by removing parentheses around the object literal.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_8\n\nLANGUAGE: diff\nCODE:\n```\n-module.exports = /** @satisfies {Record<string, string>} */ ({\n+module.exports = /** @satisfies {Record<string, string>} */ {\n   hello: 1337,\n-});\n+};\n\n```\n\n----------------------------------------\n\nTITLE: Handling prettier-ignore with Float32Array Initialization in JavaScript\nDESCRIPTION: This snippet shows how Biome formats code with prettier-ignore directive for Float32Array initialization. The formatter converts a multi-line array initialization to a single line, despite the ignore directive.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_23\n\nLANGUAGE: diff\nCODE:\n```\n export default function test() {\n   return {\n     matrix: // prettier-ignore\n-      new Float32Array([\n-      0, 0,\n-      1, 0,\n-      1, 1,\n-      0, 1\n-    ]),\n+      new Float32Array([0, 0, 1, 0, 1, 1, 0, 1]),\n   };\n }\n```\n\n----------------------------------------\n\nTITLE: Adjusting Comment Spacing in Tagged Template Literals\nDESCRIPTION: Modifies the spacing between comments and template literals in tagged template expressions.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_15\n\nLANGUAGE: diff\nCODE:\n```\n foo``; // comment\n \n foo // comment\n ``;\n \n foo // comment\n `\n `;\n \n-foo/* comment */ `\n+foo /* comment */`\n `;\n \n-foo/* comment */ `\n+foo /* comment */`\n `;\n\n```\n\n----------------------------------------\n\nTITLE: Formatting Object Property Assignment Expression in JavaScript\nDESCRIPTION: This diff shows how Biome handles object property assignment expressions. The example demonstrates the removal of parentheses around an assignment expression in a computed property name.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_26\n\nLANGUAGE: diff\nCODE:\n```\n a = {\n-  [(this.resource = resource)]: 1,\n+  [this.resource = resource]: 1,\n };\n```\n\n----------------------------------------\n\nTITLE: Comparing Array Formatting with Holes in JavaScript\nDESCRIPTION: Shows how Biome and Prettier handle arrays with holes and comments differently. The main differences are in the placement of whitespace around holes in arrays with hexadecimal numbers.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_0\n\nLANGUAGE: diff\nCODE:\n```\n const numberWithHoles1 = [\n   7234932941,\n   7234932722,\n   7234932312,\n   ,\n   // comment before a hole 1\n   7234932841,\n   ,\n   7234932843,\n   ,\n   // comment after a hole 1\n   7234932436,\n ];\n \n const numberWithHoles2 = [\n   0x234932941,\n   0x234932722,\n   0x234932312,\n-\n   ,\n   // comment before a hole 2\n   0x234932841,\n   ,\n   0x234932843,\n   ,\n+\n   // comment after a hole 2\n   0x234932436,\n ];\n\n```\n\n----------------------------------------\n\nTITLE: Export Statement Formatting with Comments\nDESCRIPTION: Demonstrates formatting rules for export statements with inline comments between specifiers.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nexport {\n  // a\n  foo1,\n  // b\n  bar1,\n  baz1,\n} from \"mod\";\n\nconst foo2 = 1;\nconst bar2 = 1;\nconst baz2 = 1;\n\nexport {\n  // a\n  foo2,\n  // b\n  bar2,\n  baz2,\n};\n```\n\n----------------------------------------\n\nTITLE: Comparing Multiple Comments on Same Line in JavaScript\nDESCRIPTION: Shows how Biome and Prettier handle multiple comments on the same line. They differ in whitespace handling and line breaking of consecutive comment blocks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_7\n\nLANGUAGE: diff\nCODE:\n```\n /*========= All on same line =========*/\n a;\n /*1*/ /*2*/ /*3*/\n b;\n \n a; /*1*/ /*2*/ /*3*/\n b;\n \n a;\n /*1*/ /*2*/ /*3*/ b;\n \n a;\n /*\n 1*/ /*2*/ /*3\n  */\n b;\n \n a; /*\n 1*/ /*2*/ /*3\n  */\n b;\n \n-a;\n-/*\n+a; /*\n 1*/ /*2*/ /*3\n- */ b;\n+ */\n+b;\n \n /*========= First two on same line =========*/\n a;\n /*1*/ /*2*/\n /*3*/\n b;\n \n a; /*1*/ /*2*/\n /*3*/\n b;\n \n a;\n /*1*/ /*2*/\n /*3*/ b;\n \n a;\n /*\n 1*/ /*2*/\n /*3\n  */\n b;\n \n a; /*\n 1*/ /*2*/\n /*3\n  */\n b;\n \n a; /*\n 1*/ /*2*/\n /*3\n  */ b;\n \n /*========= Last two on same line =========*/\n a;\n /*1*/\n /*2*/ /*3*/\n b;\n \n a; /*1*/\n /*2*/ /*3*/\n b;\n \n a;\n /*1*/\n /*2*/ /*3*/ b;\n \n a;\n /*\n 1*/\n /*2*/ /*3\n  */\n b;\n \n a; /*\n 1*/\n /*2*/ /*3\n  */\n b;\n \n a; /*\n 1*/\n /*2*/ /*3\n  */ b;\n```\n\n----------------------------------------\n\nTITLE: Export Statement Formatting\nDESCRIPTION: Test cases for formatting export statements with comments and blank lines between specifiers.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_13\n\nLANGUAGE: diff\nCODE:\n```\n export {\n   // a\n   foo1,\n-\n   // b\n   bar1,\n   baz1,\n } from \"mod\";\n```\n\n----------------------------------------\n\nTITLE: Repositioning prettier-ignore Comments with Type Assertions\nDESCRIPTION: Shows how Biome repositions the prettier-ignore directive when used with type assertions, placing the comment directly adjacent to the affected code segment.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_53\n\nLANGUAGE: diff\nCODE:\n```\n-export const foo = // prettier-ignore\n-  (bar as Baz).qux;\n+export const foo =\n+  (\n+  // prettier-ignore\n+  bar as Baz\n+).qux;\n```\n\n----------------------------------------\n\nTITLE: Positioning Comments in Class Decorators\nDESCRIPTION: Shows how Biome handles comments positioned between decorators and class methods or properties, maintaining their placement relative to decorated elements.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_44\n\nLANGUAGE: typescript\nCODE:\n```\nclass Foo1 {\n  @foo\n  // comment\n  async method() {}\n}\n\nclass Foo2 {\n  @foo\n  // comment\n  private method() {}\n}\n\nclass Foo3 {\n  @foo\n  // comment\n  *method() {}\n}\n\nclass Foo4 {\n  @foo\n  // comment\n  async *method() {}\n}\n\nclass Something {\n  @foo()\n  // comment\n  readonly property: Array<string>;\n}\n\nclass Something2 {\n  @foo()\n    // comment\n    abstract property: Array<string>\n}\n```\n\n----------------------------------------\n\nTITLE: Biome Parse Error Example\nDESCRIPTION: Example of a Biome parsing diagnostic for duplicate private class members.\nSOURCE: https://github.com/biomejs/biome/blob/main/CHANGELOG_v1.md#2025-04-14_snippet_81\n\nLANGUAGE: text\nCODE:\n```\ncheck.js:1:17 parse/noDuplicatePrivateClassMembers ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\n\n    × Duplicate private class member \"#foo\"\n\n    > 1 │ class A { #foo; #foo }\n        │                 ^^^^\n\n```\n\n----------------------------------------\n\nTITLE: Basic Using Binding with Escaped Identifier\nDESCRIPTION: Shows formatting of using statement with an escaped identifier using Unicode escape sequence.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  using \\u0061b = c;\n}\n```\n\n----------------------------------------\n\nTITLE: Minor Adjustment to Export Comment Formatting\nDESCRIPTION: Changes the formatting of an empty object export with a comment by removing a space before the closing brace.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_10\n\nLANGUAGE: diff\nCODE:\n```\n export //comment\n- {};\n+{};\n \n export /* comment */ {};\n \n const foo = \"\";\n export {\n   foo, // comment\n };\n \n const bar = \"\";\n export {\n   // comment\n   bar,\n };\n \n const fooo = \"\";\n const barr = \"\";\n export {\n   fooo, // comment\n   barr, // comment\n };\n \n const foooo = \"\";\n const barrr = \"\";\n export {\n   foooo,\n   // comment\n   barrr as baz,\n } from \"foo\";\n \n const fooooo = \"\";\n const barrrr = \"\";\n export {\n   fooooo,\n   // comment\n   barrrr as bazz,\n };\n\n```\n\n----------------------------------------\n\nTITLE: Range Boundary Formatting in JavaScript\nDESCRIPTION: Shows formatting of numeric assignments with different precision levels within range boundaries.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nfoo = 1.0000;bar = 1.0;baz=1.0000;\n// The range will be 13~26\n// `foo` ends at 13, should not format\n// `bar` ends at 26, should format\n```\n\n----------------------------------------\n\nTITLE: Installing Biome JS Formatter Dependencies\nDESCRIPTION: Internal installation configuration for the biome_js_formatter dependency using local path reference.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/CONTRIBUTING.md#2025-04-14_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nbiome_js_formatter = { version = \"0.0.1\", path = \"../biome_js_formatter\" }\n```\n\n----------------------------------------\n\nTITLE: Multiple Statement Call Formatting in JavaScript\nDESCRIPTION: Demonstrates formatting of multiple function calls with different argument styles.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-es2015.md#2025-04-14_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\ncall(\n  1, 2,3\n);\n\ncall(1, 2, 3);\n\ncall(1, 2, 3);\n\ncall(\n  1, 2,3\n);\n```\n\n----------------------------------------\n\nTITLE: Adding Status Badges in Markdown\nDESCRIPTION: Displays status badges for Discord chat and Cargo version using Markdown syntax and HTML alignment. The badges are linked to their respective resources.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_css_formatter/README.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<div align=\"center\">\n\n[![Discord chat][discord-badge]][discord-url]\n[![cargo version][cargo-badge]][cargo-url]\n\n[discord-badge]: https://badgen.net/discord/online-members/BypW39g6Yc?icon=discord&label=discord&color=green\n[discord-url]: https://biomejs.dev/chat\n[cargo-badge]: https://badgen.net/crates/v/biome_css_formatter?&color=green\n[cargo-url]: https://crates.io/crates/biome_css_formatter/\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Markdown Horizontal Rule Variations\nDESCRIPTION: Shows six different valid Markdown syntax patterns for creating horizontal rules. Each pattern produces the same visual output of a horizontal line when rendered.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_markdown_parser/tests/md_test_suite/ok/thematic_break_block.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n***\n ***\n - - -\n___\n\n _ _ _\n\n* * *\n```\n\n----------------------------------------\n\nTITLE: Adding Project Badges in Markdown\nDESCRIPTION: Uses HTML and Markdown to display centered project badges for Discord chat and Cargo version, with links to respective pages.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_graphql_formatter/README.md#2025-04-14_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n<div align=\"center\">\n\n[![Discord chat][discord-badge]][discord-url]\n[![cargo version][cargo-badge]][cargo-url]\n\n[discord-badge]: https://badgen.net/discord/online-members/BypW39g6Yc?icon=discord&label=discord&color=green\n[discord-url]: https://biomejs.dev/chat\n[cargo-badge]: https://badgen.net/crates/v/biome_graphql_formatter?&color=green\n[cargo-url]: https://crates.io/crates/biome_graphql_formatter/\n\n</div>\n```\n\n----------------------------------------\n\nTITLE: Formatting Union Types with Comments\nDESCRIPTION: Shows formatting changes for TypeScript union types with associated comments, primarily moving comments that were positioned after the type name to before the equals sign.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report.md#2025-04-14_snippet_92\n\nLANGUAGE: diff\nCODE:\n```\n export type A =\n   | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n   | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n \n export type B =\n   | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n   | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n \n export type C =\n   | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n   | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n \n export type D =\n   | aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\n   | bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb;\n \n export type Multi = (string | number)[];\n \n function f(): string | number {}\n \n var x: string | number;\n var y: string | number;\n \n class Foo<T extends string | number> {}\n \n interface Interface {\n   i: (X | Y) & Z;\n   j: Partial<X | Y>;\n }\n \n type State = {\n   sharedProperty: any;\n } & (\n   | { discriminant: \"FOO\"; foo: any }\n   | { discriminant: \"BAR\"; bar: any }\n   | { discriminant: \"BAZ\"; baz: any }\n );\n \n const foo1 = [abc, def, ghi, jkl, mno, pqr, stu, vwx, yz] as (\n   | string\n   | undefined\n )[];\n \n const foo2: (\n   | AAAAAAAAAAAAAAAAAAAAAA\n   | BBBBBBBBBBBBBBBBBBBBBB\n   | CCCCCCCCCCCCCCCCCCCCCC\n   | DDDDDDDDDDDDDDDDDDDDDD\n )[] = [];\n \n const foo3: keyof (\n   | AAAAAAAAAAAAAAAAAAAAAA\n   | BBBBBBBBBBBBBBBBBBBBBB\n   | CCCCCCCCCCCCCCCCCCCCCC\n   | DDDDDDDDDDDDDDDDDDDDDD\n ) = bar;\n \n const foo4:\n   | foo\n   | (\n       | AAAAAAAAAAAAAAAAAAAAAA\n       | BBBBBBBBBBBBBBBBBBBBBB\n       | CCCCCCCCCCCCCCCCCCCCCC\n       | DDDDDDDDDDDDDDDDDDDDDD\n     ) = bar;\n \n let a1: C;\n let a2: C;\n let a3: C;\n let a4: C;\n let a5: C;\n let a6: /*1*/ C;\n let a7: /*1*/ C;\n let a8: /*1*/ C;\n let a9: /*1*/ C;\n let a10: /*1*/ /*2*/ C;\n let a11: /*1*/ /*2*/ C;\n \n let aa1: /*1*/ /*2*/ C | D;\n let aa2: /*1*/ /*2*/ C | /*3*/ D;\n let aa3: /*1*/ /*2*/ C | /*3*/ D /*4*/;\n \n type A1 = C;\n type A2 = C;\n type A3 = C;\n type A4 = C;\n type A5 = C;\n-type A6 /*1*/ = C;\n-type A7 /*1*/ = C;\n-type A8 /*1*/ = C;\n-type A9 /*1*/ = C;\n-type A10 /*1*/ = /*2*/ C;\n-type A11 /*1*/ = /*2*/ C;\n-type A12 /*1*/ = C;\n+type A6 = /*1*/ C;\n+type A7 = /*1*/ C;\n+type A8 = /*1*/ C;\n+type A9 = /*1*/ C;\n+type A10 = /*1*/ /*2*/ C;\n+type A11 = /*1*/ /*2*/ C;\n+type A12 = /*1*/ C;\n type A13 = /*1*/ C;\n \n type Aa1 = /*1*/ /*2*/ C | D;\n type Aa2 = /*1*/ /*2*/ C | /*3*/ D;\n type Aa3 = /*1*/ /*2*/ C | /*3*/ D /*4*/;\n \n type C1 = /*1*/ a | b;\n type C2 = /*1*/ a | b;\n type C3 = /*1*/ a | b;\n-type C4 /*1*/ = a | b;\n+type C4 = /*1*/ a | b;\n type C5 = /*1*/ a | b;\n type C6 /*0*/ = /*1*/ a | b;\n \n type Ctor = (new () => X) | Y;\n```\n\n----------------------------------------\n\nTITLE: Formatting Single Type with Comments in TypeScript\nDESCRIPTION: Shows how a simple type definition with multiple comments should be formatted. The format changes from inline comments to placing comments before the type definition with proper line breaks.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report_incompatible.md#2025-04-14_snippet_66\n\nLANGUAGE: diff\nCODE:\n```\n-type A1 /* 2 */ = /* 1 */ /* 3 */ /* 4 */ {\n-  key: string;\n-};\n+type A1 =\n+  /* 1 */ /* 2 */\n+  /* 3 */ /* 4 */ {\n+    key: string;\n+  };\n```\n\n----------------------------------------\n\nTITLE: Running Prettier Tests for Biome's JSON Formatter\nDESCRIPTION: Command to explicitly run Prettier test suite as part of Biome's JSON formatter testing. These tests compare Biome's formatting output with Prettier's snapshots.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_json_formatter/tests/specs/prettier/README.md#2025-04-14_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\ncargo test -p biome_json_formatter --test prettier_tests\n```\n\n----------------------------------------\n\nTITLE: Installing Biome Nightly Version via npm\nDESCRIPTION: Command to install the latest nightly release of Biome (version 1.3.3-nightly.ced82da) as a development dependency using npm.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_js_formatter/report-challenge.md#2025-04-14_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpm install -D @biomejs/biome@1.3.3-nightly.ced82da\n```\n\n----------------------------------------\n\nTITLE: Running Snapshot Tests with Just\nDESCRIPTION: Shell command for running snapshot tests for a specific lint rule using the 'just' command runner.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_analyze/CONTRIBUTING.md#2025-04-14_snippet_30\n\nLANGUAGE: shell\nCODE:\n```\njust test-lintrule myRuleName\n```\n\n----------------------------------------\n\nTITLE: Displaying Project Logo in Markdown\nDESCRIPTION: Uses HTML within Markdown to center-align and display the Biome project logo image.\nSOURCE: https://github.com/biomejs/biome/blob/main/crates/biome_graphql_formatter/README.md#2025-04-14_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<p align=\"center\">\n\t<img alt=\"Biome - Toolchain of the web\" width=\"400\" src=\"https://raw.githubusercontent.com/biomejs/resources/main/svg/slogan-light-transparent.svg\"/>\n</p>\n```"
  }
]