[
  {
    "owner": "spinframework",
    "repo": "spin",
    "content": "TITLE: Defining WebSocket WIT Interfaces and World for Spin\nDESCRIPTION: Defines the WebSocket WIT interfaces and world for Spin. Includes types for WebSocket frames, error handling, and APIs for sending and receiving frames. Designed to work with Spin's short-lived component model.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/016-inbound-websockets.md#2025-04-21_snippet_0\n\nLANGUAGE: wit\nCODE:\n```\npackage fermyon:spin;\n\ninterface websocket-types {\n  use wasi:io/poll.{pollable};\n  \n  variant error-code {\n    // Indicates the connection to the client was lost prior to or\n    // while attempting to send a frame.\n    connection-lost\n  }\n  \n  // From https://datatracker.ietf.org/doc/html/rfc6455#section-7.4.1\n  variant close-code {\n    normal,\n    protocol,\n    unsupported,\n    status,\n    abnormal,\n    invalid,\n    policy,\n    size,\n    extension,\n    error,\n    restart,\n    again\n  }\n\n  // From https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\n  record close-frame {\n    code: close-code,\n    reason: option<string>\n  }\n\n  // From https://datatracker.ietf.org/doc/html/rfc6455#section-5.2\n  variant frame {\n    text(string),\n    binary(list<u8>),\n    ping(list<u8>),\n    pong(list<u8>),\n    close(option<close-frame>)\n  }\n  \n  // Represents a frame received from the client\n  record received-frame {\n    // Sequence number assigned to this frame\n    //\n    // Each frame received from the client is assigned a sequence\n    // number that determines its order with respect to other frames.\n    // This may be useful when logging frames in an\n    // eventually-consistent data store, for example.\n    sequence-number: u64,\n    \n    // The content of the frame\n    frame: frame\n  }\n  \n  // Represents a future representing the completion or failure of\n  // sending a frame to a client.\n  resource future-send-frame {\n    // Returns a pollable which becomes ready when either the frame\n    // has been sent, or an error has occurred. When this pollable is\n    // ready, the `get` method will return `some`.\n    subscribe: func() -> pollable;\n    \n    // Returns the result of sending a frame to a client, once it\n    // has either completed successfully or errored.\n    //\n    // The outer `option` represents future readiness. Users can wait\n    // on this `option` to become `some` using the `subscribe` method.\n    //\n    // The outer `result` is used to retrieve the response or error\n    // at most once. It will be success on the first call in which the\n    // outer option is `some`, and error on subsequent calls.\n    //\n    // The inner `result` represents that either the frame was sent\n    // successfully, or that an error occurred.\n    //\n    // Note that a success result from this function does *not*\n    // guarantee that the client received the frame (or that it ever\n    // will). The frame will be sent asynchronously and might not\n    // be delivered due to an unexpected close event or network\n    // failure. Applications which require delivery confirmation\n    // must handle that themselves.\n    get: func() -> option<result<result<_, error-code>>>;\n}\n\ninterface inbound-websocket-receive {\n  use wasi:http/types.{incoming-request, response-outparam};\n  use websocket-types.{frame, close-frame};\n\n  // Construct a new handler for the specified request, which the\n  // client has requested to be upgraded to a WebSocket.\n  //\n  // - `token`: a globally unique identifier which may be used to\n  //   send frames to this WebSocket using\n  //   `outgoing-websocket#send-frame`. Note that any application\n  //   may use this `token` to send frames to the WebSocket for as\n  //   long as it is connected, which means it should be treated as\n  //   a secret and shared only with trusted parties.\n  //\n  // - `request`: a resource providing the request's method, path,\n  //   headers, etc.\n  //\n  // - `response-out`: a resource which may be used to send a\n  //   response to the client. If (and only if) the response has a\n  //   status code of 101, then the connection will be upgraded to a\n  //   WebSocket.\n  handle-new: func(token: string, request: incoming-request, response-out: response-outparam);\n\n  // Handle the most recent frames received for the specified\n  // WebSocket.\n  handle-frames: func(token: string, frames: list<received-frame>);\n}\n\ninterface inbound-websocket-send {\n  use websocket-types.{frame, future-send-frame};\n\n  // Attempt to send the specified frame to specified WebSocket.\n  //\n  // This will fail if the WebSocket is no longer open. Otherwise,\n  // if the frame is an instance of `close`, the connection will\n  // be closed after sending the frame.\n  send-frame: func(token: string, frame: frame) -> future-send-frame;\n}\n\nworld inbound-websocket-handler {\n  // Incoming requests which do not request a WebSocket upgrade\n  // will be passed to `wasi:http/incoming-handler#handle`\n  include wasi:http/proxy;\n\n  // Incoming requests which request a WebSocket upgrade will be\n  // passed to `incoming-websocket-receive#handle-new`.\n  export inbound-websocket-receive;\n\n  import inbound-websocket-send;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining SQLite Interface in WIT\nDESCRIPTION: WIT interface definition for SQLite database operations including connection handling, query execution, and error handling. Includes resource types, error variants, and function definitions for basic database operations.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/013-sqlite.md#2025-04-21_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n// A handle to an open sqlite instance\ntype connection = u32\n\n// The set of errors which may be raised by functions in this interface\nvariant error {\n  // A database with the supplied name does not exist\n  no-such-database,\n  // The requesting component does not have access to the specified database (which may or may not exist).\n  access-denied,\n  // The provided connection is not valid\n  invalid-connection,\n  // The database has reached its capacity\n  database-full,\n  // Some implementation-specific error has occurred (e.g. I/O)\n  io(string)\n}\n\n// Open a connection to a named database instance.\n//\n// If `database` is \"default\", the default instance is opened.\n//\n// `error::no-such-database` will be raised if the `name` is not recognized.\nopen: func(name: string) -> expected<connection, error>\n\n// Execute a statement\nexecute: func(conn: connection, statement: string, parameters: list<value>) -> expected<unit, error>\n\n// Query data\nquery: func(conn: connection, query: string, parameters: list<value>) -> expected<query-result, error>\n\n// Close the specified `connection`.\nclose: func(conn: connection)\n\n// A result of a query\nrecord query-result {\n  // The names of the columns retrieved in the query\n  columns: list<string>,\n  // The row results each containing the values for all the columns for a given row\n  rows: list<row-result>,\n}\n\n// A set of values for each of the columns in a query-result\nrecord row-result {\n  values: list<value>\n}\n\n// The values used in statements/queries and returned in query results\nvariant value {\n  integer(s64),\n  real(float64),\n  text(string),\n  blob(list<u8>),\n  null\n}\n```\n\n----------------------------------------\n\nTITLE: Building and Running a Spin Application\nDESCRIPTION: Commands to build a Spin application using 'spin build' and then run it locally with 'spin up'. The build process compiles the Rust code to WebAssembly, and 'spin up' starts a local web server.\nSOURCE: https://github.com/spinframework/spin/blob/main/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Compile to Wasm by executing the `build` command.\n$ spin build\nExecuting the build command for component hello-rust: cargo build --target wasm32-wasip1 --release\n    Finished release [optimized] target(s) in 0.03s\nSuccessfully ran the build command for the Spin components.\n\n# Run the application locally.\n$ spin up\nLogging component stdio to \".spin/logs/\"\n\nServing http://127.0.0.1:3000\nAvailable Routes:\n  hello-rust: http://127.0.0.1:3000 (wildcard)\n```\n\n----------------------------------------\n\nTITLE: Defining LLM Interface in WIT\nDESCRIPTION: WIT interface definition for LLM functionality, including inferencing and embedding generation capabilities. Defines core types, parameters, error handling, and primary functions for model interaction.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/015-llm.md#2025-04-21_snippet_0\n\nLANGUAGE: wit\nCODE:\n```\ninterface llm {\n\ttype inferencing-model = string\n\n\trecord inferencing-params {\n\t\tmax-tokens: u32,\n\t\trepeat-penalty: float32,\n\t\trepeat-penalty-last-n-token-count: u32,\n\t\ttemperature: float32,\n\t\ttop-k: u32,\n\t\ttop-p: float32\n\t}\n\n\tvariant error {\n\t\tmodel-not-supported,\n\t\truntime-error(string),\n\t\tinvalid-input(string)\n\t}\n\n\trecord inferencing-result {\n\t\ttext: string,\n\t\tusage: inferencing-usage\n\t}\n\n\trecord inferencing-usage {\n\t\tprompt-token-count: u32,\n\t\tgenerated-token-count: u32\n\t}\n\n\tinfer: func(model: inferencing-model, prompt: string, params: option<inferencing-params>) -> result<inferencing-result, error>\n\n\ttype embedding-model = string\n\n\tgenerate-embeddings: func(model: embedding-model, text: list<string>) -> result<embeddings-result, error>\n\n\trecord embeddings-result {\n\t\tembeddings: list<list<float32>>,\n\t\tusage: embeddings-usage\n\t}\n\n\trecord embeddings-usage {\n\t\tprompt-token-count: u32,\n\t}\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Spin Framework via Terminal\nDESCRIPTION: Commands to download and install the Spin framework using a bash script. This script downloads the installer and places the spin binary in the /usr/local/bin directory for system-wide access.\nSOURCE: https://github.com/spinframework/spin/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -fsSL https://spinframework.dev/downloads/install.sh | bash\nsudo mv ./spin /usr/local/bin/spin\n```\n\n----------------------------------------\n\nTITLE: Implementing Core Factor Traits in Rust\nDESCRIPTION: Defines the core trait interfaces for the Spin Factors framework, including Factor and FactorInstanceBuilder traits. These traits handle runtime configuration, application state management, and instance building with lifecycle hooks for runtime startup and configuration.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/021-spin-factors.md#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\npub trait Factor {\n    // Runtime configuration\n    type RuntimeConfig;\n    // Application-wide state; may be reused between instances\n    type AppState;\n    // Builds instance state\n    type InstanceBuilder: FactorInstanceBuilder;\n\n    // Init is the runtime startup lifecycle hook.\n    //\n    // The `InitContext` type here gives the factor the ability to update global\n    // engine configuration, most notably the `Linker`. This takes the place of\n    // `HostComponent::add_to_linker`.\n    fn init(&mut self, ctx: InitContext) -> Result<()> {\n        Ok(())\n    }\n\n    // Validates application configuration and prepares AppState.\n    //\n    // Takes the place of `DynamicHostComponent::validate_app`.\n    fn configure_app(&self, ctx: ConfigureAppContext) -> Result<Self::AppState>;\n\n    // Prepares InstanceState. This can access other Factors' InstanceBuilders\n    // to implement inter-factor dependencies.\n    fn prepare(\n      &self,\n      ctx: PrepareContext,\n      builders: &mut InstanceBuilders,\n    ) --> Result<Self::InstanceBuilder>\n}\n\npub trait FactorInstanceBuilder {\n  // Per-instance state, equivalent to `HostComponent::Data`.\n  type InstanceState;\n\n  // Builds the InstanceState.\n  //\n  // Takes the place of `HostComponent::build_data` and\n  // `DynamicHostComponent::update_data`.\n  fn build(self) -> Result<Self::InstanceState>;\n}\n```\n\n----------------------------------------\n\nTITLE: Testing a Spin Application with cURL\nDESCRIPTION: Command to test a running Spin application by sending an HTTP request to the local endpoint using cURL. The example shows a successful response with the \"Hello World!\" message.\nSOURCE: https://github.com/spinframework/spin/blob/main/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Send a request to the application.\n$ curl -i 127.0.0.1:3000\nHTTP/1.1 200 OK\ncontent-type: text/plain\ntransfer-encoding: chunked\ndate: Sun, 02 Mar 2025 20:09:11 GMT\n\nHello World!\n```\n\n----------------------------------------\n\nTITLE: Spin Configuration WebAssembly Interface\nDESCRIPTION: Defines the WebAssembly Interface Type (WIT) for the spin-config component interface, allowing components to access their configuration through a function call.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/002-app-config.md#2025-04-21_snippet_4\n\nLANGUAGE: wit\nCODE:\n```\n// Unknown key is a runtime error\nget-config: function(key: string) -> expect<string>\n```\n\n----------------------------------------\n\nTITLE: Configuring Key-Value Stores in Runtime Configuration\nDESCRIPTION: TOML configuration example for defining and configuring key-value stores in Spin's runtime configuration file. Shows how to override the default store configuration and set up additional stores with different backends.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/010-key-value.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# The `default` config can be overridden\n[key_value_store.default]\ntype = \"spin\"\npath = \".spin/sqlite_key_value.db\"\n\n# Example of a possible Redis-backed KV store type\n[key_value_store.user_data]\ntype = \"redis\"\nurl = \"redis://localhost\"\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Databases in Spin Framework Runtime Config\nDESCRIPTION: This snippet shows how to define multiple SQLite database configurations in the runtime config file using TOML. It demonstrates overriding the default database configuration and creating additional named database configurations.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/013-sqlite.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n# The `default` config can be overridden\n[sqlite_database.default]\npath = \".spin/some-other-database.db\"\n\n[sqlite_database.other]\npath = \".spin/yet-another-database.db\"\n```\n\n----------------------------------------\n\nTITLE: OCI Registry Push/Pull Commands\nDESCRIPTION: Example commands for pushing and pulling Spin applications to/from GitHub Container Registry.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/008-using-oci-registries.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ spin oci push ghcr.io/radu-matei/spin-example:v1\nINFO spin_publish::oci::client: Pushed \"https://ghcr.io/v2/radu-matei/spin-example/manifests/sha256:8f86a27fbc457416701c4d18680083f598076d0a52dca2a5936e92754a845ed1\"\n\n$ spin oci pull ghcr.io/radu-matei/spin-example:v1\nINFO spin_publish::oci::client: Pulled ghcr.io/radu-matei/spin-example:v1@sha256:8f86a27fbc457416701c4d18680083f598076d0a52dca2a5936e92754a845ed1\n```\n\n----------------------------------------\n\nTITLE: Pushing, Pulling, and Running Spin Applications with OCI Registries\nDESCRIPTION: Demonstrates the proposed user experience for pushing a Spin application to an OCI registry, pulling it locally, and running it. The commands show interaction with GitHub Container Registry (ghcr.io).\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/008-using-oci-registries.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ spin oci push ghcr.io/<username>/my-spin-application:v1\nINFO spin_publish::oci::client: Pushed \"https://ghcr.io/v2/<username>/my-spin-application/manifests/sha256:9f4e7eebb27c0174fe6654ef5e0f908f1edc8f625324a9f49967ccde44a6516b\"\n\n$ spin oci pull ghcr.io/<username>/my-spin-application:v1\nINFO spin_publish::oci::client: Pulled ghcr.io/<username>/my-spin-application:v1@sha256:9f4e7eebb27c0174fe6654ef5e0f908f1edc8f625324a9f49967ccde44a6516b\n\n$ spin up --oci ghcr.io/<username>/my-spin-application:v1\nINFO spin_publish::oci::client: Pulled ghcr.io/<username>/my-spin-application:v1@sha256:9f4e7eebb27c0174fe6654ef5e0f908f1edc8f625324a9f49967ccde44a6516b\nServing http://127.0.0.1:3000\n```\n\n----------------------------------------\n\nTITLE: Authenticating Spin CLI with OCI Registry\nDESCRIPTION: Shows the proposed 'spin oci login' command for authenticating the Spin CLI with an OCI registry. It provides two methods: direct password input and password input via stdin for improved security.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/008-using-oci-registries.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ spin oci login --username <username> --password <password>\n# OR\n$ echo $CONTAINER_REGISTRY_PASSWORD | spin oci login --username <username> --password-stdin\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Build Command in spin.toml\nDESCRIPTION: This TOML snippet demonstrates how to configure a component's build command in the spin.toml manifest file. It specifies the component ID, source file path, and the build command to be executed.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/004-spin-build.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[component]]\nid = \"hello\"\nsource = \"target/wasm32-wasi/release/spinhelloworld.wasm\"\n\n[[component.build]]\ncommand = \"cargo build --target wasm32-wasi --release\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Spin Framework Component with Key-Value Store\nDESCRIPTION: This TOML configuration defines a Spin framework component. It specifies the WebAssembly source, component ID, key-value store usage, and a variable for credentials. The configuration uses template placeholders for project name and secret management.\nSOURCE: https://github.com/spinframework/spin/blob/main/crates/templates/tests/templates/add-variables/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[component.{{project-name | kebab_case}}]\nsource = { url = \"https://example.com/spin-kv-explorer.wasm\", digest = \"sha256:12345\" }\nid = \"{{ project-name | kebab_case }}\"\nkey_value_stores = [\"default\"]\n[component.{{project-name | kebab_case}}.variables]\n{% raw %}kv_credentials = \"{{ secret }}\"{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Building and Running Spin Application\nDESCRIPTION: Commands to build and start the Spin application using the spin CLI tool.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/http-cpp/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspin build\nspin up\n```\n\n----------------------------------------\n\nTITLE: Configuring Spin Plugin with TOML\nDESCRIPTION: Configuration file for the Spin pluginify tool that defines metadata for a timer trigger plugin. Includes package name, description, version compatibility, and licensing information.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/spin-timer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nname= \"trigger-timer\"\ndescription= \"Run Spin components at timed intervals\"\nhomepage= \"https://github.com/spinframework/spin/tree/main/examples/spin-timer\"\nversion= \"0.1.0\"\nspin_compatibility= \">=2.0\"\nlicense= \"Apache-2.0\"\npackage= \"./target/release/trigger-timer\"\n```\n\n----------------------------------------\n\nTITLE: Testing HTTP Trigger\nDESCRIPTION: Command to test the HTTP trigger endpoint using curl, sending a request to the local development server.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/http-cpp/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncurl -v http://127.0.0.1:3000/hello\n```\n\n----------------------------------------\n\nTITLE: Provider Configuration in TOML\nDESCRIPTION: Demonstrates how to configure different configuration providers, such as JSON files and environment variables, which will be used to resolve configuration values at runtime.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/002-app-config.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[[config-provider]]\ntype = \"json_file\"\npath = \"config.json\"\n\n[[config-provider]]\ntype = \"env\"\nprefix = \"MY_APP_\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Component Access to Key-Value Stores in spin.toml\nDESCRIPTION: TOML configuration snippet showing how to grant a component access to key-value stores in a Spin application's spin.toml file. Components must be explicitly given permission to access stores.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/010-key-value.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nkey_value_stores = [\"<store 1>\", \"<store 2>\", ...]\n```\n\n----------------------------------------\n\nTITLE: Defining WIT Interface for Key-Value Storage in Spin\nDESCRIPTION: The WIT file definition for the key-value storage interface in Spin. It models stores as pseudo-resource handles with operations for opening, closing, and manipulating key-value pairs. The interface supports get, set, delete, exists, and get-keys operations.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/010-key-value.md#2025-04-21_snippet_0\n\nLANGUAGE: fsharp\nCODE:\n```\n// A handle to an open key-value store\ntype store = u32\n\n// The set of errors which may be raised by functions in this interface\nvariant error {\n  // Too many stores have been opened simultaneously. Closing one or more\n  // stores prior to retrying may address this.\n  store-table-full,\n\n  // The host does not recognize the store name requested.  Defining and\n  // configuring a store with that name in a runtime configuration file\n  // may address this.\n  no-such-store,\n\n  // The requesting component does not have access to the specified store\n  // (which may or may not exist).\n  access-denied,\n\n  // The store handle provided is not recognized, i.e. it was either never\n  // opened or has been closed.\n  invalid-store,\n\n  // No key-value tuple exists for the specified key in the specified\n  // store.\n  no-such-key,\n\n  // Some implementation-specific error has occurred (e.g. I/O)\n  io(string)\n}\n\n// Open the store with the specified name.\n//\n// If `name` is the string \"default\", the default store is opened.\n// Otherwise, `name` must refer to a store defined and configured in a\n// runtime configuration file supplied with the application.\n//\n// `error::no-such-store` will be raised if the `name` is not recognized.\nopen: func(name: string) -> expected<store, error>\n\n// Get the value associated with the specified `key` from the specified\n// `store`.\n//\n// `error::invalid-store` will be raised if `store` is not a valid handle\n// to an open store, and `error::no-such-key` will be raised if there is no\n// tuple for `key` in `store`.\nget: func(store: store, key: string) -> expected<list<u8>, error>\n\n// Set the `value` associated with the specified `key` in the specified\n// `store`, overwriting any existing value.\n//\n// `error::invalid-store` will be raised if `store` is not a valid handle\n// to an open store.\nset: func(store: store, key: string, value: list<u8>) -> expected<unit, error>\n\n// Delete the tuple with the specified `key` from the specified `store`.\n//\n// `error::invalid-store` will be raised if `store` is not a valid handle\n// to an open store.  No error is raised if a tuple did not previously\n// exist for `key`.\ndelete: func(store: store, key: string) -> expected<unit, error>\n\n// Return whether a tuple exists for the specified `key` in the specified\n// `store`.\n//\n// `error::invalid-store` will be raised if `store` is not a valid handle\n// to an open store.\nexists: func(store: store, key: string) -> expected<bool, error>\n\n// Return a list of all the keys in the specified `store`.\n//\n// `error::invalid-store` will be raised if `store` is not a valid handle\n// to an open store.\nget-keys: func(store: store) -> expected<list<string>, error>\n\n// Close the specified `store`.\n//\n// This has no effect if `store` is not a valid handle to an open store.\nclose: func(store: store)\n```\n\n----------------------------------------\n\nTITLE: Configuration with Template References in spin.toml\nDESCRIPTION: Illustrates how to reference different levels of configuration keys using template strings, including top-level, sibling, and ancestor references in a Spin application configuration.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/002-app-config.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[variables]\napp_root = { default = \"/app\" }\nlog_file = { default = \"{{ app_root }}/log.txt\" }\n...\n[[component.config]]\nwork_root = \"{{ app_root }}/work\"      # -> \"/app/work\"\nwork_out = \"{{ .work_root }}/output\"   # -> \"/app/work/output\"\n[[component.dependencies.dep1.config]]\ndep_root = \"{{ ..work_root }}/dep\"     # -> \"/app/work/dep\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Trigger and Component in Spin Framework (TOML)\nDESCRIPTION: This snippet defines an HTTP trigger and component configuration for a Spin Framework project. It sets up a route, specifies the component name, and configures the WebAssembly source and file mappings.\nSOURCE: https://github.com/spinframework/spin/blob/main/templates/static-fileserver/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.http]]\nroute = \"{{ http-path | http_wildcard }}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = { url = \"https://github.com/spinframework/spin-fileserver/releases/download/v0.3.0/spin_static_fs.wasm\", digest = \"sha256:ef88708817e107bf49985c7cefe4dd1f199bf26f6727819183d5c996baa3d148\" }\nfiles = [{ source = \"{{ files-path }}\", destination = \"/\" }]\n```\n\n----------------------------------------\n\nTITLE: Using Local Component Dependencies in Spin\nDESCRIPTION: Demonstrates how to specify components from disk to satisfy dependencies in a Spin application. The snippet shows how to reference dependencies by import name, with optional export name specification.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/020-component-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[component.\"infra-dashboard\".dependencies]\n# Components can satisfy dependencies by import name (e.g., \"aws:client/s3\")\n# using a component from disk. It is implicitly assumed that the\n# `my_aws_client.wasm` component exports an instance of the\n# `aws:client/s3` interface.\n\"aws:client/s3\" = { path = \"my_aws_client.wasm\" }\n\n# Optionally, explicitly specify the export name to use to satisfy the `aws:client/s3` interface.\n\"aws:client/s3\" = { path = \"my_aws_client.wasm\", export = \"my-s3-client\" }\n\n# Without an interface name, attempt to resolve every import of the \"aws:client\" package.\n\"aws:client\" = { path = \"my_aws_client.wasm\" }\n```\n\n----------------------------------------\n\nTITLE: Configuring Spin Application in TOML\nDESCRIPTION: Example spin.toml configuration file defining a Spin application with HTTP trigger and component settings.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/008-using-oci-registries.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\nspin_version = \"1\"\nauthors = [\"Radu Matei <radu.matei@fermyon.com>\"]\ndescription = \"\"\nname = \"github-stars-webhook\"\ntrigger = { type = \"http\", base = \"/\" }\nversion = \"0.1.0\"\n\n[[component]]\nid = \"github-star-webhook\"\nsource = \"target/spin-http-js.wasm\"\nfiles = [\"my-file.json\"]\nallowed_http_hosts = [\"https://hooks.slack.com\"]\n[component.trigger]\nroute = \"/...\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Trigger and Component Build in SPIN Framework\nDESCRIPTION: TOML configuration that defines a Redis trigger channel and component configuration including build settings for a WASM project. Specifies build command, working directory, and file watching patterns for the component.\nSOURCE: https://github.com/spinframework/spin/blob/main/templates/redis-rust/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.redis]]\nchannel = \"{{redis-channel}}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = \"{{ output-path }}/target/wasm32-wasip1/release/{{project-name | snake_case}}.wasm\"\nallowed_outbound_hosts = []\n[component.{{project-name | kebab_case}}.build]\ncommand = \"cargo build --target wasm32-wasip1 --release\"\nworkdir = \"{{ output-path }}\"\nwatch = [\"src/**/*.rs\", \"Cargo.toml\"]\n```\n\n----------------------------------------\n\nTITLE: New Global Trigger Configuration\nDESCRIPTION: Example of the new application metadata and global trigger configuration structure.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/005-manifest-redesign.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[application]\nname = \"hello-world\"\n[application.trigger.http]\nbase = \"/hello\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Inheritance in Spin\nDESCRIPTION: Demonstrates how to enable configuration inheritance for dependencies in a Spin component. This allows dependencies to access capabilities defined in the parent component, such as outbound HTTP access.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/020-component-dependencies.md#2025-04-21_snippet_2\n\nLANGUAGE: toml\nCODE:\n```\n[component.\"infra-dashboard\"]\n# ...\nallowed_outbound_hosts = [\"https://s3.us-west-2.amazonaws.com\"]\ndependencies_inherit_configuration = true\n\n[component.\"infra-dashboard\".dependencies]\n\"aws:client\" = \"1.0.0\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Trigger and Component for Spin Framework\nDESCRIPTION: This TOML configuration defines an HTTP trigger and component settings for a Spin Framework application. It includes placeholder variables for customization, build commands for compiling to WebAssembly, and file watching patterns for development.\nSOURCE: https://github.com/spinframework/spin/blob/main/templates/http-rust/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.http]]\nroute = \"{{http-path}}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = \"{{ output-path }}/target/wasm32-wasip1/release/{{project-name | snake_case}}.wasm\"\nallowed_outbound_hosts = []\n[component.{{project-name | kebab_case}}.build]\ncommand = \"cargo build --target wasm32-wasip1 --release\"\nworkdir = \"{{ output-path }}\"\nwatch = [\"src/**/*.rs\", \"Cargo.toml\"]\n```\n\n----------------------------------------\n\nTITLE: Version 1 to Version 2 Manifest Transformation\nDESCRIPTION: Complete example showing equivalent configurations between old and new manifest formats for backward compatibility.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/005-manifest-redesign.md#2025-04-21_snippet_6\n\nLANGUAGE: toml\nCODE:\n```\ntrigger = { type = \"http\", base = \"/\" }\n[[component]]\nid = \"hello\"\nsource = \"hello.wasm\"\n[component.trigger]\nroute = \"/hello\"\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Plugin Auto-Installation for Spin Cloud Commands\nDESCRIPTION: This console snippet shows the proposed user experience when a user executes a cloud command without having the plugin installed. The system automatically installs the plugin and proceeds with the deployment process.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/014-cloud-plugin.md#2025-04-21_snippet_0\n\nLANGUAGE: console\nCODE:\n```\n$ spin deploy\nThe `cloud` plugin is required. Installing now.\nPlugin 'cloud' was installed successfully!\nUploading cloud_start version 0.1.0+XXXXXXXX...\nDeploying...\nWaiting for application to become ready... ready\nAvailable Routes:\n  cloud-start: https://cloud-start-xxxxxxxx.fermyon.app/ (wildcard)\n```\n\n----------------------------------------\n\nTITLE: Configuring SQLite Database Access in TOML\nDESCRIPTION: TOML configuration example showing how to grant SQLite database access to Spin components through the spin.toml manifest file.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/013-sqlite.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nsqlite_databases = [\"<database 1>\", \"<database 2>\"]\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Models in spin.toml\nDESCRIPTION: TOML configuration example showing how to specify allowed AI models for a Spin component in the spin.toml configuration file.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/015-llm.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[[component]]\nid = \"ai\"\nsource = \"ai.wasm\"\nai_models = [\"llama2-chat\"]\n```\n\n----------------------------------------\n\nTITLE: Starting Spin Application\nDESCRIPTION: Launches the Spin application with trace-level logging enabled using the spin.toml configuration file.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/spin-wagi-http/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nRUST_LOG=spin=trace spin up -f spin.toml\n```\n\n----------------------------------------\n\nTITLE: Building Rust HTTP Component\nDESCRIPTION: Compiles the Rust HTTP component to WebAssembly using Cargo with release optimizations.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/spin-wagi-http/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd http-rust\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Application Name and Version Configuration\nDESCRIPTION: Example TOML configuration showing how to specify application name and version for OCI registry push.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/008-using-oci-registries.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\nname = \"myregistry.com/myusername/myapp\"\nversion = \"1.2.3\"\n```\n\n----------------------------------------\n\nTITLE: Building C++ HTTP Component\nDESCRIPTION: Compiles the C++ HTTP component to WebAssembly using Make build system.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/spin-wagi-http/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncd ../wagi-http-cpp\nmake build\n```\n\n----------------------------------------\n\nTITLE: Locked Application Configuration\nDESCRIPTION: JSON configuration for a locked Spin application with component and trigger definitions.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/008-using-oci-registries.md#2025-04-21_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"spin_lock_version\": 0,\n  \"metadata\": {\n    \"description\": \"\",\n    \"name\": \"github-stars-webhook\",\n    \"trigger\": {\n      \"base\": \"/\",\n      \"type\": \"http\"\n    },\n    \"version\": \"0.1.0\"\n  },\n  \"triggers\": [\n    {\n      \"id\": \"trigger--github-star-webhook\",\n      \"trigger_type\": \"http\",\n      \"trigger_config\": {\n        \"component\": \"github-star-webhook\",\n        \"executor\": null,\n        \"route\": \"/...\"\n      }\n    }\n  ],\n  \"components\": [\n    {\n      \"id\": \"github-star-webhook\",\n      \"metadata\": {\n        \"allowed_http_hosts\": [\"https://hooks.slack.com\"]\n      },\n      \"source\": {\n        \"content_type\": \"application/wasm\",\n        \"digest\": \"sha256:55c29ad4b0ad0c6bd8ec1ffc8f04e63342e5901280037ef706b1b114475d3cbb\"\n      },\n      \"files\": [\n        {\n          \"digest\": \"sha256:a4699e4f9ef3f4922f38f0d017aa26438908f38caf020a739e0ee27fe796eb02\",\n          \"path\": \"my-file.json\"\n        }\n      ]\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Component-Level Tracing in TOML\nDESCRIPTION: Example configuration for controlling component-level tracing in spin.toml. This demonstrates how to enable context propagation for a specific component, with comments indicating potential future configuration options.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/018-adding-otel-tracing-to-spin.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[component.my-component.tracing]\ncontext_propagation = true # This is all or nothing. If you disable propagation no context will be propagated. By default this is false.\n# Opportunity to add fields in the future to\n# - Disable tracing for performance reasons\n# - Customize span names\n# - Add additional metadata\n# - More complex allow-listing mechanism for what spans propagate\n# - etc.\n```\n\n----------------------------------------\n\nTITLE: Setting up Rust WebAssembly Target for Spin\nDESCRIPTION: Command to add the WebAssembly WASI (wasm32-wasip1) target to the Rust toolchain, which is required for building Spin applications in Rust.\nSOURCE: https://github.com/spinframework/spin/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ rustup target add wasm32-wasip1\n```\n\n----------------------------------------\n\nTITLE: Defining Configuration Slots in TOML\nDESCRIPTION: Demonstrates how to define configuration slots in TOML format, including required fields, optional fields with default values, and secret fields that require special handling.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/002-app-config.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[variables]\nrequired_key = { required = true }\noptional_key = { default = \"default_value\" }\nsecret_key = { required = true, secret = true }\n```\n\n----------------------------------------\n\nTITLE: Creating a New Spin Application from Template\nDESCRIPTION: Command to create a new Spin application named 'hello-rust' using the HTTP Rust template. The --accept-defaults flag automatically uses default values for all template parameters.\nSOURCE: https://github.com/spinframework/spin/blob/main/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new Spin application named 'hello-rust' based on the Rust http template, accepting all defaults\n$ spin new --accept-defaults -t http-rust hello-rust\n```\n\n----------------------------------------\n\nTITLE: Current Manifest Format in TOML\nDESCRIPTION: Example of the current (version 1) manifest format showing basic HTTP trigger and component configuration.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/005-manifest-redesign.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\nspin_manifest_version = \"1\"\nname = \"hello-world\"\ntrigger = { type = \"http\", base = \"/hello\" }\n\n[[component]]\nid = \"hello\"\n# ...\n[component.trigger]\nroute = \"/hello\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redirect Component in Spin Application\nDESCRIPTION: This TOML configuration sets up a redirect component for a Spin application. It specifies the WebAssembly source from a GitHub release, defines a component ID based on the project name, configures an environment variable for the destination URL, and sets up the trigger route for the redirect.\nSOURCE: https://github.com/spinframework/spin/blob/main/crates/templates/tests/templates/add-only-redirect/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[component]]\nsource = { url = \"https://github.com/fermyon/spin-redirect/releases/download/v0.1.0/redirect.wasm\", digest = \"sha256:8bee959843f28fef2a02164f5840477db81d350877e1c22cb524f41363468e52\" }\nid = \"{{ project-name | kebab_case }}\"\nenvironment = { DESTINATION = \"{{ redirect-to }}\" }\n[component.trigger]\nroute = \"{{ redirect-from }}\"\n```\n\n----------------------------------------\n\nTITLE: Typed Configuration in TOML (Future Option)\nDESCRIPTION: Shows how typed configuration might be implemented in the future, with types either inferred from default values or explicitly specified for different data types.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/002-app-config.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n# Type can be inferred from default value:\nnumber_key = { default = 123 }\n# equivalent to:\nnumber_key = { type = \"number\", default = 123 }\n\nrequired_string = { type = \"string\", required = true }\n# \"bytes\" would require e.g. base64 encoding in some places\nencryption_key = { type = \"bytes\", required = true, secret = true}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Redirection in Spin Framework\nDESCRIPTION: This configuration sets up an HTTP trigger that redirects requests from a templated source route to a destination URL. It uses a pre-built redirect component from the Fermyon GitHub repository with specific environment variables for configuration.\nSOURCE: https://github.com/spinframework/spin/blob/main/templates/redirect/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.http]]\nroute = \"{{ redirect-from }}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = { url = \"https://github.com/fermyon/spin-redirect/releases/download/v0.1.0/redirect.wasm\", digest = \"sha256:8bee959843f28fef2a02164f5840477db81d350877e1c22cb524f41363468e52\" }\nenvironment = { DESTINATION = \"{{ redirect-to }}\" }\n```\n\n----------------------------------------\n\nTITLE: Defining Spin Plugin Command Usage in Bash\nDESCRIPTION: Shows the usage and subcommands for the 'spin plugin' command, including install, uninstall, and upgrade options.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/006-spin-plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nCommands for working with Spin plugins.\n\nUSAGE:\n    spin plugin <SUBCOMMAND>\n\nSUBCOMMANDS:\n    install      Install plugin as described by a remote or local plugin manifest.\n    uninstall    Uninstall a plugin.\n    upgrade      Upgrade one or all plugins to the latest or specified version.\n```\n\n----------------------------------------\n\nTITLE: Decoupled Trigger Configuration\nDESCRIPTION: New trigger configuration format separating triggers from components.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/005-manifest-redesign.md#2025-04-21_snippet_4\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.http]]\nroute = \"/hello\"\nhandler = \"hello\"\n[component.hello]\n# ...\n```\n\n----------------------------------------\n\nTITLE: Signing Artifacts with Cosign in Keyless Mode\nDESCRIPTION: Command for signing Spin release artifacts using Cosign's keyless mode. This process generates a certificate and signature file that will be included with the release.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/012-signing-spin-releases.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign sign-blob \\\n    # write the output certificate to a file that will be later added to the release\n    --output-certificate out/spin-v1.0.0-linux-amd64-keyless.pem \\\n    # write the signature to a file that will be later added to the release\n    --output-signature out/spin-v1.0.0-linux-amd64-keyless.sig \\\n    # skip interactive confirmation\n    --yes \\\n    spin\n```\n\n----------------------------------------\n\nTITLE: New Component ID Format\nDESCRIPTION: Updated component configuration format using section header for component ID.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/005-manifest-redesign.md#2025-04-21_snippet_3\n\nLANGUAGE: toml\nCODE:\n```\n[component.hello-world]\n# instead of id = \"hello-world\"\n```\n\n----------------------------------------\n\nTITLE: OCI Manifest Structure\nDESCRIPTION: JSON manifest defining the Spin application artifact structure with config and layers.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/008-using-oci-registries.md#2025-04-21_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"schemaVersion\": 2,\n  \"config\": {\n    \"mediaType\": \"application/vnd.fermyon.spin.application.v1+config\",\n    \"digest\": \"sha256:b36160facea3076ad136c09bd4975a429805945ad313b4674363841d5a7f66a0\",\n    \"size\": 643\n  },\n  \"layers\": [\n    {\n      \"mediaType\": \"application/vnd.wasm.content.layer.v1+wasm\",\n      \"digest\": \"sha256:55c29ad4b0ad0c6bd8ec1ffc8f04e63342e5901280037ef706b1b114475d3cbb\",\n      \"size\": 2147122\n    },\n    {\n      \"mediaType\": \"application/vnd.wasm.content.layer.v1+data\",\n      \"digest\": \"sha256:a4699e4f9ef3f4922f38f0d017aa26438908f38caf020a739e0ee27fe796eb02\",\n      \"size\": 178\n    }\n  ]\n}\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Workflow for Keyless Signing\nDESCRIPTION: GitHub Actions workflow example for implementing keyless signing with Cosign. This workflow installs Cosign, creates an artifact, signs it using GitHub's OIDC token, and uploads the resulting files.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/012-signing-spin-releases.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\njobs:\n  sign:\n    runs-on: ubuntu-latest\n\n    permissions:\n      id-token: write \n\n    name: Sign artifact and publish signature and certificate\n    steps:\n      - uses: actions/checkout@master\n        with:\n          fetch-depth: 1\n\n      - name: Install Cosign\n        uses: sigstore/cosign-installer@main\n        with:\n          cosign-release: v2.0.0\n\n      - name: Create an artifact\n        run: |\n          mkdir out\n          echo 'hello world' > out/artifact\n          \n      - name: Sign the artifact with GitHub OIDC token\n        run: cosign sign-blob --output-certificate out/crt.pem --output-signature out/artifact.sig out/artifact --yes\n\n      - name: Upload assets as GitHub artifact\n        uses: actions/upload-artifact@v3\n        with:\n          name: artifact\n          path: out/*\n      ...(continue with adding artifacts to the release)\n```\n\n----------------------------------------\n\nTITLE: Defining Spin Plugin Install Command Usage in Bash\nDESCRIPTION: Describes the usage and options for the 'spin plugin install' command, including file and URL options for specifying plugin manifests.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/006-spin-plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nInstall a Spin plugin using a plugin manifest file. \nBy default, looks for the plugin manifest named <name>.json\nin the Spin plugins repository https://github.com/fermyon/spin-plugins.\n\nUSAGE:\n    spin plugin install <name>\n\nOPTIONS:\n    -f, --file                       Path to local plugin manifest.\n    -u, --url                        Address of remote plugin manifest.\n    -v, --version                    Version of plugin to be installed. Defaults to latest.\n    -y, --yes                        Assume yes to all queries.\n```\n\n----------------------------------------\n\nTITLE: Verifying Spin Release Signature Using Cosign\nDESCRIPTION: Command to verify the cryptographic signature of a Spin release using cosign. Requires cosign to be installed and access to the signature file, certificate, and binary.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/release-notes-template.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncosign verify-blob \\\n    --signature spin.sig --certificate crt.pem \\\n    --certificate-identity https://github.com/spinframework/spin/.github/workflows/release.yml@refs/tags/<version> \\\n    --certificate-oidc-issuer https://token.actions.githubusercontent \\\n    --certificate-github-workflow-sha <commit_sha> \\\n    --certificate-github-workflow-repository spinframework/spin \\\n    spin\n```\n\nLANGUAGE: plaintext\nCODE:\n```\nVerified OK\n```\n\n----------------------------------------\n\nTITLE: Verifying Signatures with Cosign\nDESCRIPTION: Commands for verifying the authenticity of Spin release artifacts using Cosign. This process validates the signature against the certificate and ensures the certificate was issued to the correct GitHub repository.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/012-signing-spin-releases.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n$ tree .\n├── artifact\n├── artifact.sig\n└── crt.pem\n\n$ cosign verify-blob \\\n    --signature artifact.sig --certificate crt.pem \\\n    # the identity for the certificate is tied to the official repository of the Spin project\n    --certificate-identity https://github.com/fermyon/spin/.github/workflows/release-sign.yml@refs/heads/main \\\n    --certificate-oidc-issuer https://token.actions.githubusercontent.com \\\n    artifact\n\nVerified OK\n```\n\n----------------------------------------\n\nTITLE: Defining Spin Plugin Upgrade Command Usage in Bash\nDESCRIPTION: Describes the usage and options for the 'spin plugin upgrade' command, including options to upgrade all plugins or a specific one.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/006-spin-plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nUpgrade one or all installed Spin plugins.\n\nUSAGE:\n    spin plugin upgrade [OPTIONS]\n\nOPTIONS:\n    -a, --all        Upgrade all installed plugins to latest versions (cannot be used with any other option).\n    -p, --plugin     Name of plugin to upgrade.\n    -v, --version    Desired version to upgrade the plugin to. Defaults to latest. \n    -f, --file       Path to local manifest (mutex with `-u`).\n    -u, --url        Address of remote manifest (mutex with `-f`).\n    -d, --downgrade  Enables downgrading a plugin to an older specified version.\n```\n\n----------------------------------------\n\nTITLE: Full Integration Test Suite\nDESCRIPTION: Executes the complete integration test suite including tests that require Docker and additional compiler toolchains like Swift and Zig.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nmake test-integration-full\n```\n\n----------------------------------------\n\nTITLE: Defining Spin Plugin Uninstall Command Usage in Bash\nDESCRIPTION: Shows the usage for the 'spin plugin uninstall' command to remove a specified plugin.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/006-spin-plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nUninstall a Spin plugin.\n\nUSAGE:\n    spin plugin uninstall <name>\n```\n\n----------------------------------------\n\nTITLE: Testing Vault Integration with curl\nDESCRIPTION: Command to test the Spin application's Vault integration by sending a request with the token and verifying the authentication response.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/vault-variable-test/README.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ curl localhost:3000 --data $TOKEN\n{\"authentication\": \"accepted\"}\n```\n\n----------------------------------------\n\nTITLE: Running Spin Runtime Tests\nDESCRIPTION: Executes runtime tests with external dependency testing features enabled to verify runtime behavior conformance.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo test runtime_tests -F extern-dependencies-tests\n```\n\n----------------------------------------\n\nTITLE: Starting Vault Server in Development Mode\nDESCRIPTION: Command to start a Vault server in development mode with a predefined root token for testing purposes.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/vault-variable-test/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nvault server -dev -dev-root-token-id root\n```\n\n----------------------------------------\n\nTITLE: Programmatic Device Authentication API\nDESCRIPTION: Example of non-interactive device authentication flow for programmatic usage, showing the steps to get and check device codes.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/007-deployment-auth.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ spin login --url foo --get-device-code\n{ \"verificationUrl\" : \"...\", \"deviceCode\" : \"...\", \"userCode\": \" ...\" }\n\n$ spin login --url foo --check-device-code bar\n{ \"status\" : \"waiting\" }\n\n# user enters code into browser\n\n$ spin login --url foo --check-device-code bar\n{ \"status\" : \"authorized\", \"token\" : \"...\" }\n```\n\n----------------------------------------\n\nTITLE: Installing Rust Wasm Targets for Spin Componentize\nDESCRIPTION: Commands to add necessary WebAssembly targets for the Rust toolchain. These targets are required for building the spin-componentize library.\nSOURCE: https://github.com/spinframework/spin/blob/main/crates/componentize/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nrustup target add wasm32-wasip1\nrustup target add wasm32-unknown-unknown\n```\n\n----------------------------------------\n\nTITLE: Running Spin Documentation Website Locally\nDESCRIPTION: Command to start the Spin documentation website using the Spin framework. This should be run from the project directory after building Spin according to the contributing guide.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ spin up\n```\n\n----------------------------------------\n\nTITLE: Interactive Device Authentication Flow\nDESCRIPTION: Example of interactive device authentication prompt showing the user code and browser authorization flow.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/007-deployment-auth.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ spin login --url https://example.com\nCopy your one-time code: tWOJCFhY\nPress Enter to open https://example.com/device-authorization in your browser\n# ...user hits Enter...\nWaiting for device authorization...\nWaiting for device authorization...\nDevice authorized!\nLogin successful.\n```\n\n----------------------------------------\n\nTITLE: Template Variable Syntax in Spin.toml\nDESCRIPTION: Demonstrates the syntax for template variables used in spin.toml manifest files for runtime tests. Supports interpolation of source components and port numbers using %{key=value} format.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/runtime-tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n%{source=sqlite}\n%{port=1234}\n```\n\n----------------------------------------\n\nTITLE: Migrating Spin Applications from Bindle to OCI Registry\nDESCRIPTION: Illustrates the proposed 'spin bindle2oci' plugin command for migrating Spin applications from Bindle to an OCI registry. It includes parameters for Bindle server details, application name, and the new OCI reference.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/008-using-oci-registries.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspin bindle2oci \\\n    --bindle-server <server> \\\n    --bindle-username <username> \\\n    --bindle-password <password> \\\n    ---bindle <name> \\\n    --oci <new-reference>\n```\n\n----------------------------------------\n\nTITLE: Exporting Version Information in WIT for Spin Components\nDESCRIPTION: This code snippet demonstrates the proposed naming convention for exporting core WASM functions to embed version information in Spin components. It includes functions for SDK version, language, and commit hash.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/011-component-versioning.md#2025-04-21_snippet_0\n\nLANGUAGE: wit\nCODE:\n```\nspin-sdk-version-$MAJOR-$MINOR\nspin-sdk-language-$LANGUAGE\nspin-sdk-commit-$HASH\n```\n\n----------------------------------------\n\nTITLE: Defining Spin Framework Configuration Variables in HCL\nDESCRIPTION: This snippet defines two configuration variables for a Spin framework application. It specifies a required secret and sets a default URL using a template variable.\nSOURCE: https://github.com/spinframework/spin/blob/main/crates/templates/tests/templates/add-variables/metadata/snippets/variables.txt#2025-04-21_snippet_0\n\nLANGUAGE: HCL\nCODE:\n```\nsecret = { required = true }\nurl = { default = \"{{ service-url }}\" }\n```\n\n----------------------------------------\n\nTITLE: New Manifest Version Declaration\nDESCRIPTION: Updated manifest version declaration changing from string to integer format.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/005-manifest-redesign.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\nspin_manifest_version = 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Address for SPIN Framework Application Triggers\nDESCRIPTION: This TOML configuration snippet defines the Redis connection address for application triggers in the SPIN framework. The address value uses a template variable {{redis-address}} which would be substituted with the actual Redis server address during deployment or runtime.\nSOURCE: https://github.com/spinframework/spin/blob/main/templates/redis-rust/metadata/snippets/application-trigger.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[application.trigger.redis]\naddress = \"{{redis-address}}\"\n```\n\n----------------------------------------\n\nTITLE: Inline Component Configuration\nDESCRIPTION: Example of inline component configuration within trigger definition.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/005-manifest-redesign.md#2025-04-21_snippet_5\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.http]]\nroute = \"/hello\"\nhandler = { source = \"hello.wasm\" }\n```\n\n----------------------------------------\n\nTITLE: SQLite Transaction Query Example\nDESCRIPTION: Example of SQLite transaction syntax for ensuring strict serializability when querying data. The BEGIN IMMEDIATE transaction ensures that queries see all completed writes up to that point.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/016-inbound-websockets.md#2025-04-21_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\nBEGIN IMMEDIATE\n```\n\n----------------------------------------\n\nTITLE: Defining Spin Plugin Manifest Schema in JSON\nDESCRIPTION: Provides the JSON Schema for a Spin Plugin Manifest, including required fields like name, version, spinCompatibility, and packages.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/006-spin-plugins.md#2025-04-21_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"$schema\": \"https://json-schema.org/draft/2019-09/schema\",\n    \"$id\": \"https://github.com/fermyon/spin-plugins/json-schema/spin-plugin-manifest-schema-0.1.json\",\n    \"type\": \"object\",\n    \"title\": \"spin-plugin-manifest-schema-0.1\",\n    \"required\": [\n        \"name\",\n        \"description\",\n        \"version\",\n        \"spinCompatibility\",\n        \"license\",\n        \"packages\"\n    ],\n    \"properties\": {\n        \"name\": {\n            \"type\": \"string\"\n        },\n        \"description\": {\n            \"type\": \"string\"\n        },\n        \"homepage\": {\n            \"type\": \"string\"\n        },\n        \"version\": {\n            \"type\": \"string\"\n        },\n        \"spinCompatibility\": {\n            \"type\": \"string\",\n            \"pattern\": \"^([><~^*]?[=]?v?(0|[1-9]\\\\d*)(\\\\.(0|[1-9]\\\\d*))?(\\\\.(0|[1-9]\\\\d*))?(-(0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\\\.(0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\\\+[0-9a-zA-Z-]+(\\\\.[0-9a-zA-Z-]+)*)?)(?:, *([><~^*]?[=]?v?(0|[1-9]\\\\d*)(\\\\.(0|[1-9]\\\\d*))?(\\\\.(0|[1-9]\\\\d*))?(-(0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*)(\\\\.(0|[1-9]\\\\d*|\\\\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\\\\+[0-9a-zA-Z-]+(\\\\.[0-9a-zA-Z-]+)*)?))*$\"\n        },\n        \"license\": {\n            \"type\": \"string\"\n        },\n        \"packages\": {\n            \"type\": \"array\",\n            \"minItems\": 1,\n            \"items\": {\n                \"type\": \"object\",\n                \"required\": [\n                    \"os\",\n                    \"arch\",\n                    \"url\",\n                    \"sha256\"\n                ],\n                \"properties\": {\n                    \"os\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"linux\",\n                            \"macos\",\n                            \"windows\"\n                        ]\n                    },\n                    \"arch\": {\n                        \"type\": \"string\",\n                        \"enum\": [\n                            \"amd64\",\n                            \"aarch64\"\n                        ]\n                    },\n                    \"url\": {\n                        \"type\": \"string\"\n                    },\n                    \"sha256\": {\n                        \"type\": \"string\"\n                    }\n                },\n                \"additionalProperties\": false\n            }\n        }\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Using Template Strings in Configuration Values\nDESCRIPTION: Shows how to use template strings to reference other configuration slots within default values, allowing for dynamic configuration based on other values.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/002-app-config.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[variables]\nkey1 = { required = true }\nkey2 = { default = \"prefix-{{ key1 }}-suffix\" }\n```\n\n----------------------------------------\n\nTITLE: Running a Spin Application with Runtime Configuration\nDESCRIPTION: Command to start a Spin application with a specified runtime configuration file that contains Vault connection details.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/vault-variable-test/README.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nspin up --runtime-config-file runtime_config.toml\n```\n\n----------------------------------------\n\nTITLE: Installing wit-bindgen CLI Tool\nDESCRIPTION: Command to install a specific version of wit-bindgen CLI tool from GitHub using cargo. This tool is required for WebAssembly interface bindings.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/http-cpp/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncargo install --git https://github.com/bytecodealliance/wit-bindgen --rev cb871cfa1ee460b51eb1d144b175b9aab9c50aba wit-bindgen-cli\n```\n\n----------------------------------------\n\nTITLE: Using Remote Component Dependencies from Registry in Spin\nDESCRIPTION: Shows how to use components from a registry to satisfy dependencies in a Spin application. The snippet demonstrates shorthand version notation and explicit registry specification.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/020-component-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: toml\nCODE:\n```\n[component.\"infra-dashboard\".dependencies]\n# Equivalent to { version = \"1.0.0\" , package = \"aws:client\"}\n\"aws:client\" = \"1.0.0\"\n\n# Use the `aws:client` component package to satisfy any number of \"wasi:blobstore\" imports ...\n\"wasi:blobstore\" = { registry = \"my-registry.io\", version = \"0.1.0\", package = \"aws:client\" }\n```\n\n----------------------------------------\n\nTITLE: Generating Component Path Constants in Rust\nDESCRIPTION: The build script generates constants in lib.rs for each test component, providing paths to the built component binaries. It also creates a helper function 'path' for dynamic lookups of binary paths based on package names.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/test-components/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Rust\nCODE:\n```\nFOO_COMPONENT\n```\n\n----------------------------------------\n\nTITLE: Installing WASI SDK on Linux\nDESCRIPTION: Commands to download, extract, and install the WASI SDK toolchain to /opt/wasi-sdk directory. This SDK is required for C++ WebAssembly compilation.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/http-cpp/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -OL https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-14/wasi-sdk-14.0-linux.tar.gz\ntar xf wasi-sdk-14.0-linux.tar.gz\nsudo mv wasi-sdk-14.0 /opt/wasi-sdk\n```\n\n----------------------------------------\n\nTITLE: Example Spin Plugin Shell Script\nDESCRIPTION: Example shell script that serves as a test plugin for the Spin framework. Used to validate plugin functionality in integration tests and demonstrates plugin packaging workflow.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/testcases/plugin/README.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nexample.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Spin Framework with HTTP Trigger and WASM Component\nDESCRIPTION: Defines a Spin Framework configuration with an HTTP trigger route and a WebAssembly component. The configuration includes build settings for TinyGo to compile Go code into a WebAssembly module targeting WASI. Template variables are used for dynamic configuration.\nSOURCE: https://github.com/spinframework/spin/blob/main/templates/http-go/metadata/snippets/component.txt#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\n[[trigger.http]]\nroute = \"{{http-path}}\"\ncomponent = \"{{project-name | kebab_case}}\"\n\n[component.{{project-name | kebab_case}}]\nsource = \"{{ output-path }}/main.wasm\"\nallowed_outbound_hosts = []\n[component.{{project-name | kebab_case}}.build]\ncommand = \"tinygo build -target=wasip1 -gc=leaking -buildmode=c-shared -no-debug -o main.wasm .\"\nworkdir = \"{{ output-path }}\"\nwatch = [\"**/*.go\", \"go.mod\"]\n```\n\n----------------------------------------\n\nTITLE: Basic Integration Testing\nDESCRIPTION: Runs the basic integration test suite that requires only Rust and Python toolchains.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nmake test-integration\n```\n\n----------------------------------------\n\nTITLE: Setting Vault Environment Variables and Storing a Secret\nDESCRIPTION: Commands to set Vault environment variables, define a token, and store it as a secret in Vault's key-value store. Also includes verification of the stored secret.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/vault-variable-test/README.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nexport VAULT_TOKEN=root\nexport VAULT_ADDR=http://127.0.0.1:8200\nexport TOKEN=eyMyJWTToken...\nvault kv put secret/secret value=$TOKEN\nvault kv get secret/secret\n```\n\n----------------------------------------\n\nTITLE: Executing Spin Unit Tests\nDESCRIPTION: Runs unit tests for a specific crate within the Spin framework using Cargo, the Rust package manager.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo test -p $CRATE_NAME\n```\n\n----------------------------------------\n\nTITLE: Creating a Modsurfer Checkfile for Spin HTTP Applications\nDESCRIPTION: A YAML checkfile that references remote validation rules specific to Spin HTTP templates. This ensures compatibility with Fermyon Spin framework requirements.\nSOURCE: https://github.com/spinframework/spin/blob/main/tools/modsurfer/README.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nvalidate:\n  url: https://raw.githubusercontent.com/fermyon/spin/main/tools/modsurfer/http/mod.yaml\n```\n\n----------------------------------------\n\nTITLE: Documenting Key-Value Store Test Requirements in Markdown\nDESCRIPTION: Markdown documentation outlining test component expectations regarding store permissions and initial state. The component requires access to a 'default' store while being restricted from a 'forbidden' store, and expects an empty initial state.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/test-components/components/wasi-key-value/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Key Value\n\nTests the key/value interface.\n\n## Expectations\n\nThis test component expects the following to be true:\n* It is given permission to open a connection to the \"default\" store.\n* It does not have permission to access a store named \"forbidden\".\n* It is empty\n```\n\n----------------------------------------\n\nTITLE: Failed Signature Verification Example\nDESCRIPTION: Example of Cosign signature verification failure when attempting to verify a modified artifact. This demonstrates how the system detects tampering with release artifacts.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/012-signing-spin-releases.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign verify-blob \\\n    --signature artifact.sig --certificate crt.pem \\\n    --certificate-identity https://github.com/fermyon/spin/.github/workflows/release-sign.yml@refs/heads/main \\\n    --certificate-oidc-issuer https://token.actions.githubusercontent.com \\\n    fake-artifact\n\nError: verifying blob [fake-artifact]: searching log query: [POST /api/v1/log/entries/retrieve][400] searchLogQueryBadRequest  &{Code:400 Message:unmarshalling entry: verifying signature: invalid signature when validating ASN.1 encoded signature}\n```\n\n----------------------------------------\n\nTITLE: Environment and Setup Requirements\nDESCRIPTION: Specifies the test component's requirements including environment variables and HTTP server configuration. The component expects a URL environment variable and access to an HTTP server that echoes POST request bodies.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/test-components/components/wasi-http-v0.2.0-rc-2023-11-10/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n* It is provided the env variable `URL`\n* It has access to an HTTP server at $URL (where $URL is the url provided above) that accepts POST requests and returns the same bytes in the response body as in the request body.\n```\n\n----------------------------------------\n\nTITLE: Failed Identity Verification Example\nDESCRIPTION: Example of Cosign signature verification failure when using incorrect identity parameters. This demonstrates how the system ensures signatures come from authorized sources.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/012-signing-spin-releases.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ cosign verify-blob \\\n    --signature artifact.sig --certificate crt.pem \\\n    # the identity for the certificate is tied to the official repository of the Spin project\n    --certificate-identity <another-identity> \\\n    --certificate-oidc-issuer <another-oidc-issuer> \\\n    artifact\n\nError: verifying blob [artifact]: none of the expected identities matched what was in the certificate, got subjects [https://github.com/fermyon/spin/.github/workflows/release-sign.yml@refs/heads/main] with issuer https://token.actions.githubusercontent.com\n```\n\n----------------------------------------\n\nTITLE: SQLite Data Modification Commands\nDESCRIPTION: Common SQLite data modification statements that are guaranteed to be linearized across all database connections.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/016-inbound-websockets.md#2025-04-21_snippet_2\n\nLANGUAGE: sql\nCODE:\n```\nINSERT\nUPDATE\nDELETE\n```\n\n----------------------------------------\n\nTITLE: Running Cargo Vet Audit Check\nDESCRIPTION: Example showing cargo-vet's output when unvetted dependencies are detected, displaying the recommended audit actions and estimated backlog.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/009-auditing-third-party-dependencies.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo vet\n  Vetting Failed!\n\n  3 unvetted dependencies:\n      bar:1.5 missing [\"safe-to-deploy\"]\n      baz:1.3 missing [\"safe-to-deploy\"]\n      foo:1.2.1 missing [\"safe-to-deploy\"]\n\n  recommended audits for safe-to-deploy:\n      cargo vet diff foo 1.2 1.2.1  (10 lines)\n      cargo vet diff bar 2.1.1 1.5  (253 lines)\n      cargo vet inspect baz 1.3     (2033 lines)\n\n  estimated audit backlog: 2296 lines\n\n  Use |cargo vet certify| to record the audits.\n```\n\n----------------------------------------\n\nTITLE: Building a Spin Application\nDESCRIPTION: Command to build a Spin application which will use the Vault integration.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/vault-variable-test/README.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nspin build\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions Workflow for Modsurfer Validation\nDESCRIPTION: A GitHub Actions workflow configuration that runs Modsurfer validation on push and pull requests. It uses the modsurfer-validate-action to check WebAssembly modules against specified validation rules.\nSOURCE: https://github.com/spinframework/spin/blob/main/tools/modsurfer/README.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Modsurfer Validate - Fermyon\non: [push, pull_request]\njobs:\n  check-validate:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: modsurfer validate\n        uses: dylibso/modsurfer-validate-action@main\n        with:\n            path: path/to/your/module.wasm\n            check: mod.yaml\n```\n\n----------------------------------------\n\nTITLE: Building Test Components Crate in Rust\nDESCRIPTION: Instructions for building the test components crate using Cargo, the Rust package manager.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/test-components/README.md#2025-04-21_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Configuring Services in a Test Directory\nDESCRIPTION: Example of how to configure a test to use the 'tcp-echo.py' service by specifying it in the 'services' file within a test directory. Each line in this file represents a service that needs to run during the test.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/testing-framework/README.md#2025-04-21_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\ntcp-echo\n```\n\n----------------------------------------\n\nTITLE: Goodbye Route Response\nDESCRIPTION: Example HTTP response from calling the /goodbye route showing headers and body.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/spin-wagi-http/README.md#2025-04-21_snippet_4\n\nLANGUAGE: http\nCODE:\n```\n$ curl -i localhost:3000/goodbye\nHTTP/1.1 200 OK\nfoo: bar\ncontent-length: 7\ndate: Thu, 10 Mar 2022 21:38:58 GMT\n\nGoodbye\n```\n\n----------------------------------------\n\nTITLE: Referencing Test Cases in Spin Framework\nDESCRIPTION: Code reference showing the specific test cases (rust-case-02 and rust-case-08) that verify compatibility between different wit-bindgen versions (0.2 and 0.8) when running through spin_componentize.\nSOURCE: https://github.com/spinframework/spin/blob/main/crates/componentize/tests/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nrust-case-02 and rust-case-08\n```\n\n----------------------------------------\n\nTITLE: Hello Route Response\nDESCRIPTION: Example HTTP response from calling the /hello route showing headers and body.\nSOURCE: https://github.com/spinframework/spin/blob/main/examples/spin-wagi-http/README.md#2025-04-21_snippet_3\n\nLANGUAGE: http\nCODE:\n```\n$ curl -i localhost:3000/hello\nHTTP/1.1 200 OK\ncontent-type: application/text\ncontent-length: 7\ndate: Thu, 10 Mar 2022 21:38:34 GMT\n\nHello\n```\n\n----------------------------------------\n\nTITLE: Building Deny-All Adapter for Spin Framework using Cargo\nDESCRIPTION: This command builds the deny-all adapter for the Spin framework using Cargo. It compiles the component in release mode, optimizing for performance.\nSOURCE: https://github.com/spinframework/spin/blob/main/crates/compose/deny-all/README.md#2025-04-21_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\ncargo component build --release\n```\n\n----------------------------------------\n\nTITLE: Applying studly_caps and clappy Filters in Twig Templates\nDESCRIPTION: This snippet demonstrates the application of custom Twig filters to input parameters. The studly_caps filter is applied to two different variables (p1 and p2), likely converting their values to StudlyCase format. The clappy filter is applied to p1 and may insert clap emojis or spacing between words.\nSOURCE: https://github.com/spinframework/spin/blob/main/crates/templates/tests/templates/testing-custom-filter/content/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: twig\nCODE:\n```\np1/studly = {{p1 | studly_caps }}\np2/studly = {{p2 | studly_caps }}\np1/clappy = {{p1 | clappy }}\n```\n\n----------------------------------------\n\nTITLE: Setting TOML Metadata for SIP 003 Document\nDESCRIPTION: This TOML snippet defines metadata for the SIP 003 document, including the title, template, and creation date.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/003-trigger-executors.md#2025-04-21_snippet_0\n\nLANGUAGE: toml\nCODE:\n```\ntitle = \"SIP 003 - Trigger Executors\"\ntemplate = \"main\"\ndate = \"2022-04-29T14:53:30Z\"\n```\n\n----------------------------------------\n\nTITLE: Applying lol_snort Filter in Spinframework Template\nDESCRIPTION: Demonstrates using the lol_snort filter on variable p1 with pipe syntax in template format. The lol_snort filter is applied to transform the p1 variable output.\nSOURCE: https://github.com/spinframework/spin/blob/main/crates/templates/tests/templates/bad-non-existent-filter/content/test.txt#2025-04-21_snippet_0\n\nLANGUAGE: template\nCODE:\n```\np1/lolsnort = {{p1 | lol_snort }}\n```\n\n----------------------------------------\n\nTITLE: MySQL Connection Error in Spin Framework\nDESCRIPTION: An error message showing a failed connection attempt to a MySQL database. The error indicates the connection string 'mysql://spin:spin@localhost:3306/spin_dev' is not permitted, which could be due to configuration issues, authentication failures, or network restrictions.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/runtime-tests/tests/outbound-mysql-no-permission/error.txt#2025-04-21_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nError::ConnectionFailed(\"address mysql://spin:spin@localhost:3306/spin_dev is not permitted\")\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Connection Error in Rust\nDESCRIPTION: Error output showing a failed connection attempt to a PostgreSQL database. The error indicates that the connection string 'postgres://spin:spin@localhost:5432/spin_dev' is not permitted.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/runtime-tests/tests/outbound-postgres-no-permission/error.txt#2025-04-21_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nError::ConnectionFailed(\"address postgres://spin:spin@localhost:5432/spin_dev is not permitted\")\n```\n\n----------------------------------------\n\nTITLE: Performing Package Inspection and Certification\nDESCRIPTION: Demonstration of the cargo-vet inspection and certification process for a specific package version.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/009-auditing-third-party-dependencies.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ cargo vet inspect baz 1.3\nYou are about to inspect version 1.3 of 'baz', likely to certify it for \"safe-to-deploy\", which means:\n   ...\nYou can inspect the crate here: https://sourcegraph.com/crates/baz@v1.3\n\n(press ENTER to open in your browser, or re-run with --mode=local)\n\n$ cargo vet certify baz 1.3\n\n  I, Alice, certify that I have audited version 1.3 of baz in accordance with\n  the following criteria:\n\n  ...\n\n (type \"yes\" to certify): yes\n\n  Recorded full audit of baz version 1.3\n```\n\n----------------------------------------\n\nTITLE: Transformed Version 2 Manifest\nDESCRIPTION: The equivalent Version 2 format of the previous Version 1 manifest.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/005-manifest-redesign.md#2025-04-21_snippet_7\n\nLANGUAGE: toml\nCODE:\n```\n[application.trigger.http]\nbase = \"/\"\n[[trigger.http]]\nroute = \"/hello\"\nhandler = \"hello\"\n[component.hello]\nsource = \"hello.wasm\"\n```\n\n----------------------------------------\n\nTITLE: Testing Variable Interface Requirements Documentation\nDESCRIPTION: Documents the test requirements for validating that only a specific variable named 'variable' exists with value 'value'. Used for verifying proper variable interface implementation.\nSOURCE: https://github.com/spinframework/spin/blob/main/tests/test-components/components/variables/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n# Variables\n\nTests the variable interface.\n\n## Expectations\n\nThis test component expects the following to be true:\n* Only the variable named \"variable\" is defined with value \"value\"\n```\n\n----------------------------------------\n\nTITLE: SQLite Basic Query\nDESCRIPTION: Basic SQLite SELECT query mentioned in the context of consistency guarantees and visibility of previous writes.\nSOURCE: https://github.com/spinframework/spin/blob/main/docs/content/sips/016-inbound-websockets.md#2025-04-21_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT\n```"
  }
]