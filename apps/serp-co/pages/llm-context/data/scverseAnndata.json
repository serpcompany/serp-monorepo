[
  {
    "owner": "scverse",
    "repo": "anndata",
    "content": "TITLE: Loading PBMC3K Dataset with Scanpy\nDESCRIPTION: Loads the PBMC3K dataset, a common single-cell RNA sequencing dataset, using Scanpy's built-in datasets module. This creates an AnnData object containing the dataset.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/benchmark-read-write.ipynb#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nadata = sc.datasets.pbmc3k()\n```\n\n----------------------------------------\n\nTITLE: Importing AnnData and Scanpy Libraries in Python\nDESCRIPTION: Imports the necessary libraries for working with AnnData objects. Scanpy (sc) is used for data handling and analysis, while AnnData (ad) provides the core data structure.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/benchmark-read-write.ipynb#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom __future__ import annotations\n\nimport scanpy as sc\n\nimport anndata as ad\n```\n\n----------------------------------------\n\nTITLE: Basic AnnData Concatenation Example\nDESCRIPTION: Demonstrates basic concatenation of AnnData objects split by clusters and then recombined using merge='same' strategy.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n>>> import scanpy as sc, anndata as ad, numpy as np, pandas as pd\n>>> from scipy import sparse\n>>> from anndata import AnnData\n>>> pbmc = sc.datasets.pbmc68k_reduced()\n>>> groups = pbmc.obs.groupby(\"louvain\", observed=True).indices\n>>> pbmc_concat = ad.concat([pbmc[inds] for inds in groups.values()], merge=\"same\")\n>>> assert np.array_equal(pbmc.X, pbmc_concat[pbmc.obs_names].X)\n```\n\n----------------------------------------\n\nTITLE: Interacting with On-Disk Sparse Arrays in AnnData\nDESCRIPTION: Demonstrates the use of new public API functions for interacting with on-disk sparse arrays in AnnData. These functions provide efficient access to large sparse datasets.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.10.0.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nfrom anndata.io import sparse_dataset\nfrom anndata.abc import CSRDataset, CSCDataset\n```\n\n----------------------------------------\n\nTITLE: Annotating Data Sources in AnnData\nDESCRIPTION: Demonstrates how to track data sources using label, keys, and index_unique parameters when concatenating AnnData objects.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\n>>> adatas = {\n...     \"a\": ad.AnnData(\n...         sparse.random(3, 50, format=\"csr\", density=0.1),\n...         obs=pd.DataFrame(index=[f\"a-{i}\" for i in range(3)])\n...     ),\n...     \"b\": ad.AnnData(\n...         sparse.random(5, 50, format=\"csr\", density=0.1),\n...         obs=pd.DataFrame(index=[f\"b-{i}\" for i in range(5)])\n...     ),\n... }\n>>> ad.concat(adatas, label=\"dataset\").obs\n```\n\n----------------------------------------\n\nTITLE: AnnData Inner and Outer Joins\nDESCRIPTION: Shows how to perform inner and outer joins when concatenating AnnData objects with different variables.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\n>>> a = AnnData(sparse.eye(3, format=\"csr\"), var=pd.DataFrame(index=list(\"abc\")))\n>>> b = AnnData(sparse.eye(2, format=\"csr\"), var=pd.DataFrame(index=list(\"ba\")))\n>>> ad.concat([a, b], join=\"inner\").X.toarray()\n>>> ad.concat([a, b], join=\"outer\").X.toarray()\n```\n\n----------------------------------------\n\nTITLE: Using Out-of-Core Concatenation in AnnData\nDESCRIPTION: Shows how to use the new experimental function for concatenating on-disk AnnData objects. This function allows for efficient handling of large datasets that don't fit in memory.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.10.0.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nfrom anndata.experimental import concat_on_disk\n```\n\n----------------------------------------\n\nTITLE: Examining AnnData HDF5 File Structure\nDESCRIPTION: Demonstrates how to open and inspect an AnnData file stored in HDF5 format, showing the top-level keys and attributes that define the object structure.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n>>> import h5py\n>>> store = h5py.File(\"for-ondisk-docs/cart-164k-processed.h5ad\", mode=\"r\")\n>>> list(store.keys())\n['X', 'layers', 'obs', 'obsm', 'obsp', 'uns', 'var', 'varm', 'varp']\n```\n\n----------------------------------------\n\nTITLE: Examining AnnData Zarr File Structure\nDESCRIPTION: Shows how to open and explore an AnnData file stored in Zarr format, displaying the top-level keys that match the HDF5 structure.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n>>> import zarr\n>>> store = zarr.open(\"for-ondisk-docs/cart-164k-processed.zarr\", mode=\"r\")\n>>> list(store.keys())\n['X', 'layers', 'obs', 'obsm', 'obsp', 'uns', 'var', 'varm', 'varp']\n```\n\n----------------------------------------\n\nTITLE: Displaying AnnData Object\nDESCRIPTION: Displays the AnnData object to show its structure and contents. This simple command returns a representation of the AnnData object including dimensions and available annotations.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/benchmark-read-write.ipynb#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nadata\n```\n\n----------------------------------------\n\nTITLE: Configuring Zarrs-Python Integration\nDESCRIPTION: Code to set up the Rust-based Zarrs implementation for improved performance in Zarr operations. Includes installation via pip and configuration of the codec pipeline.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/tutorials/zarr-v3.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nimport zarrs\nzarr.config.set({\"codec_pipeline.path\": \"zarrs.ZarrsCodecPipeline\"})\n```\n\n----------------------------------------\n\nTITLE: Writing AnnData Object to H5AD File\nDESCRIPTION: Saves the AnnData object to AnnData's native HDF5 format (.h5ad) with execution time measurement. The %%time magic command measures the execution time of this operation.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/benchmark-read-write.ipynb#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n%%time\nadata.write(\"test.h5ad\")\n```\n\n----------------------------------------\n\nTITLE: Reading AnnData Object from H5AD File\nDESCRIPTION: Loads an AnnData object from a previously saved H5AD file with execution time measurement. This demonstrates the read performance of AnnData's native format.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/benchmark-read-write.ipynb#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n%%time\nadata = ad.read_h5ad(\"test.h5ad\")\n```\n\n----------------------------------------\n\nTITLE: Reconstructing Awkward Arrays from AnnData Storage\nDESCRIPTION: Demonstrates how to reconstruct awkward arrays from their stored components using ak.from_buffers, and shows examples of accessing the data structure and its contents.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_23\n\nLANGUAGE: python\nCODE:\n```\n>>> import awkward as ak\n>>> from anndata.io import read_elem\n>>> awkward_group = store[\"varm/transcript\"]\n>>> ak.from_buffers(\n...     awkward_group.attrs[\"form\"],\n...     awkward_group.attrs[\"length\"],\n...     {k: read_elem(v) for k, v in awkward_group.items()}\n... )\n>>> transcript_models[:5]\n[{tx_id: 'ENST00000450305', seq_name: '1', exon_seq_start: [...], ...},\n {tx_id: 'ENST00000488147', seq_name: '1', exon_seq_start: [...], ...},\n {tx_id: 'ENST00000473358', seq_name: '1', exon_seq_start: [...], ...},\n {tx_id: 'ENST00000477740', seq_name: '1', exon_seq_start: [...], ...},\n {tx_id: 'ENST00000495576', seq_name: '1', exon_seq_start: [...], ...}]\n-----------------------------------------------------------------------\ntype: 5 * {\n    tx_id: ?string,\n    seq_name: ?string,\n    exon_seq_start: option[var * ?int64],\n    exon_seq_end: option[var * ?int64],\n    ensembl_id: ?string\n}\n>>> transcript_models[0]\n{tx_id: 'ENST00000450305',\n seq_name: '1',\n exon_seq_start: [12010, 12179, 12613, 12975, 13221, 13453],\n exon_seq_end: [12057, 12227, 12697, 13052, 13374, 13670],\n ensembl_id: 'ENSG00000223972'}\n------------------------------------------------------------\ntype: {\n    tx_id: ?string,\n    seq_name: ?string,\n    exon_seq_start: option[var * ?int64],\n    exon_seq_end: option[var * ?int64],\n    ensembl_id: ?string\n}\n```\n\n----------------------------------------\n\nTITLE: Using AnnData.to_memory Method in Python\nDESCRIPTION: New method added to return an in-memory object from a backed AnnData object. This feature improves flexibility in handling AnnData objects.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.7.6.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nanndata.AnnData.to_memory\n```\n\n----------------------------------------\n\nTITLE: Reading Loom Files with AnnData in Python\nDESCRIPTION: Changes to the read_loom function, including deprecation of positional arguments except path, and replacement of obsm_names and varm_names with obsm_mapping and varm_mapping.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.7.6.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nanndata.io.read_loom\n```\n\n----------------------------------------\n\nTITLE: Reading Loom Files in AnnData (Python)\nDESCRIPTION: Function for lossless reading of .loom files into AnnData objects. This allows for preserving layer information from loom files.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.6.x.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nanndata.io.read_loom\n```\n\n----------------------------------------\n\nTITLE: Chunked Data Access in AnnData (Python)\nDESCRIPTION: Methods for iterating over chunks of data in AnnData objects. These functions allow for processing large datasets in smaller, manageable pieces.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.6.x.md#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\nAnnData.chunked_X\nAnnData.chunk_X\n```\n\n----------------------------------------\n\nTITLE: Examining Sparse Array Components in Zarr\nDESCRIPTION: Shows how to explore the components of a sparse matrix (data, indices, indptr) stored in Zarr format.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"X\"].visititems(print)\ndata <zarr.core.Array '/X/data' (495079432,) float32 read-only>\nindices <zarr.core.Array '/X/indices' (495079432,) int32 read-only>\nindptr <zarr.core.Array '/X/indptr' (164115,) int32 read-only>\n```\n\n----------------------------------------\n\nTITLE: Writing AnnData to H5AD File (Python)\nDESCRIPTION: Function for writing AnnData objects to H5AD files. The default compression has been changed to None to improve read and write speed.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.6.x.md#2025-04-16_snippet_4\n\nLANGUAGE: Python\nCODE:\n```\nAnnData.write_h5ad\n```\n\n----------------------------------------\n\nTITLE: AnnData Merging Strategies\nDESCRIPTION: Shows different merging strategies (same, unique) when concatenating AnnData objects with varying aligned elements.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_3\n\nLANGUAGE: Python\nCODE:\n```\n>>> import scanpy as sc\n>>> blobs = sc.datasets.blobs(n_variables=30, n_centers=5)\n>>> sc.pp.pca(blobs)\n>>> adatas = []\n>>> for group, idx in blobs.obs.groupby(\"blobs\").indices.items():\n...     sub_adata = blobs[idx].copy()\n...     sub_adata.obsm[\"qc\"], sub_adata.varm[f\"{group}_qc\"] = sc.pp.calculate_qc_metrics(\n...         sub_adata, percent_top=(), inplace=False, log1p=False\n...     )\n...     adatas.append(sub_adata)\n>>> ad.concat(adatas)\n>>> ad.concat(adatas, merge=\"same\")\n>>> ad.concat(adatas, merge=\"unique\")\n```\n\n----------------------------------------\n\nTITLE: Reading Zarr Files in AnnData (Python)\nDESCRIPTION: Function for reading zarr files into AnnData objects. This adds support for the zarr file format in AnnData.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.6.x.md#2025-04-16_snippet_2\n\nLANGUAGE: Python\nCODE:\n```\nanndata.io.read_zarr\n```\n\n----------------------------------------\n\nTITLE: Initializing AnnData Objects with Unstructured Data in Python\nDESCRIPTION: Creates three AnnData objects with different unstructured data (uns) for demonstration purposes. Each object has a 10x10 zero matrix as the main data and varying contents in the uns attribute.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> a = AnnData(np.zeros((10, 10)), uns={\"a\": 1, \"b\": 2, \"c\": {\"c.a\": 3, \"c.b\": 4}})\n>>> b = AnnData(np.zeros((10, 10)), uns={\"a\": 1, \"b\": 3, \"c\": {\"c.b\": 4}})\n>>> c = AnnData(np.zeros((10, 10)), uns={\"a\": 1, \"b\": 4, \"c\": {\"c.a\": 3, \"c.b\": 4, \"c.c\": 5}})\n```\n\n----------------------------------------\n\nTITLE: Concatenating AnnData Objects with 'same' UNS Merge Strategy in Python\nDESCRIPTION: Shows the result of using the 'same' merge strategy, which keeps only the key-value pairs that are identical across all input objects. This strategy is useful for preserving shared metadata.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(ad.concat([a, b, c], uns_merge=\"same\").uns)\n{'a': 1, 'c': {'c.b': 4}}\n```\n\n----------------------------------------\n\nTITLE: Concatenating AnnData Objects with 'first' UNS Merge Strategy in Python\nDESCRIPTION: Demonstrates the 'first' merge strategy, which keeps all keys and uses the value from the first object that has each key. This strategy preserves the most information but may not be suitable for all use cases.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(ad.concat([a, b, c], uns_merge=\"first\").uns)\n{'a': 1, 'b': 2, 'c': {'c.a': 3, 'c.b': 4, 'c.c': 5}}\n```\n\n----------------------------------------\n\nTITLE: Concatenating AnnData Objects with 'unique' UNS Merge Strategy in Python\nDESCRIPTION: Demonstrates the 'unique' merge strategy, which keeps all unique key-value pairs from all input objects. This is useful when objects contain specific metadata that should be preserved.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(ad.concat([a, b, c], uns_merge=\"unique\").uns)\n{'a': 1, 'c': {'c.a': 3, 'c.b': 4, 'c.c': 5}}\n```\n\n----------------------------------------\n\nTITLE: Concatenating AnnData Objects with 'only' UNS Merge Strategy in Python\nDESCRIPTION: Shows the result of the 'only' merge strategy, which keeps only the key-value pairs that appear in exactly one input object. This can be used to identify unique metadata across objects.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_8\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(ad.concat([a, b, c], uns_merge=\"only\").uns)\n{'c': {'c.c': 5}}\n```\n\n----------------------------------------\n\nTITLE: Storing Nullable Integers in HDF5 and Zarr\nDESCRIPTION: Illustrates how nullable integers are stored in AnnData using separate arrays for values and mask, demonstrating the process for both HDF5 and Zarr formats.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_18\n\nLANGUAGE: python\nCODE:\n```\n>>> from anndata import write_elem\n>>> null_store = h5py.File(\"tmp.h5\", mode=\"w\")\n>>> int_array = pd.array([1, None, 3, 4])\n>>> int_array\n<IntegerArray>\n[1, <NA>, 3, 4]\nLength: 4, dtype: Int64\n\n>>> write_elem(null_store, \"nullable_integer\", int_array)\n\n>>> null_store.visititems(print)\nnullable_integer <HDF5 group \"/nullable_integer\" (2 members)>\nnullable_integer/mask <HDF5 dataset \"mask\": shape (4,), type \"|b1\">\nnullable_integer/values <HDF5 dataset \"values\": shape (4,), type \"<i8\">\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> from anndata import write_elem\n>>> null_store = zarr.open()\n>>> int_array = pd.array([1, None, 3, 4])\n>>> int_array\n<IntegerArray>\n[1, <NA>, 3, 4]\nLength: 4, dtype: Int64\n\n>>> write_elem(null_store, \"nullable_integer\", int_array)\n\n>>> null_store.visititems(print)\nnullable_integer <zarr.hierarchy.Group '/nullable_integer'>\nnullable_integer/mask <zarr.core.Array '/nullable_integer/mask' (4,) bool>\nnullable_integer/values <zarr.core.Array '/nullable_integer/values' (4,) int64>\n```\n\n----------------------------------------\n\nTITLE: Examining Dense Array in HDF5 Format\nDESCRIPTION: Demonstrates accessing a dense array (PCA reduction) stored in the obsm group of an HDF5 file, showing its shape and data type.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_3\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"obsm/X_pca\"]\n<HDF5 dataset \"X_pca\": shape (164114, 50), type \"<f4\">\n```\n\n----------------------------------------\n\nTITLE: Fixing ufuncs on views in AnnData in Python\nDESCRIPTION: Bug fix for ufuncs like .cov() when applied to views of AnnData objects, which previously returned views instead of the expected computation results.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.9.2.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nadata.X[:10].cov(axis=0)\n```\n\n----------------------------------------\n\nTITLE: Examining Dense Array in Zarr Format\nDESCRIPTION: Shows how to access a dense array (PCA reduction) stored in the obsm group of a Zarr file, displaying its shape and data type.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_4\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"obsm/X_pca\"]\n<zarr.core.Array '/obsm/X_pca' (164114, 50) float32 read-only>\n```\n\n----------------------------------------\n\nTITLE: Fixing AnnData initialization with DataFrame in Python\nDESCRIPTION: Bug fix for initializing AnnData objects when .X is a DataFrame with an integer-valued index, which previously caused issues.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.9.2.md#2025-04-16_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nanndata.io.read_zarr\n```\n\n----------------------------------------\n\nTITLE: Accessing Dense Array Metadata\nDESCRIPTION: Shows how to retrieve the metadata attributes of a dense array, which specify its encoding type and version.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(store[\"obsm\"][\"X_pca\"].attrs)\n{'encoding-type': 'array', 'encoding-version': '0.2.0'}\n```\n\n----------------------------------------\n\nTITLE: Accessing 1D Arrays in AnnData (Python)\nDESCRIPTION: New convenience accessors for 1D arrays in AnnData objects. These methods allow easy access to observation and variable vectors.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.6.x.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nAnnData.obs_vector\nAnnData.var_vector\n```\n\n----------------------------------------\n\nTITLE: Examining Sparse Array Metadata\nDESCRIPTION: Shows how to access the metadata for a sparse matrix, displaying its encoding type, version, and shape information.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(store[\"X\"].attrs)\n{'encoding-type': 'csr_matrix',\n 'encoding-version': '0.1.0',\n 'shape': [164114, 40145]}\n```\n\n----------------------------------------\n\nTITLE: Writing Loom Files with AnnData in Python\nDESCRIPTION: Enhanced write_loom method to use the Index's .name attribute for writing obs_names and var_names, if set. This improves the consistency of metadata handling.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.7.6.md#2025-04-16_snippet_1\n\nLANGUAGE: Python\nCODE:\n```\nanndata.AnnData.write_loom\n```\n\n----------------------------------------\n\nTITLE: Examining Sparse Array Components in HDF5\nDESCRIPTION: Demonstrates inspecting the components of a sparse matrix (data, indices, indptr) stored in HDF5 format.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_7\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"X\"].visititems(print)\ndata <HDF5 dataset \"data\": shape (495079432,), type \"<f4\">\nindices <HDF5 dataset \"indices\": shape (495079432,), type \"<i4\">\nindptr <HDF5 dataset \"indptr\": shape (164115,), type \"<i4\">\n```\n\n----------------------------------------\n\nTITLE: Inspecting DataFrame Components in HDF5\nDESCRIPTION: Demonstrates how to explore the columnar structure of a DataFrame stored in HDF5 format, showing the index and categorical columns.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_10\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"var\"].visititems(print)\nensembl_id <HDF5 dataset \"ensembl_id\": shape (40145,), type \"|O\">\nfeature_biotype <HDF5 group \"/var/feature_biotype\" (2 members)>\nfeature_biotype/categories <HDF5 dataset \"categories\": shape (1,), type \"|O\">\nfeature_biotype/codes <HDF5 dataset \"codes\": shape (40145,), type \"|i1\">\nfeature_is_filtered <HDF5 dataset \"feature_is_filtered\": shape (40145,), type \"|b1\">\n...\n```\n\n----------------------------------------\n\nTITLE: Checking AnnData Encoding Metadata\nDESCRIPTION: Shows how to access and inspect the encoding metadata attributes that identify an AnnData object in storage, including its type and version.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(store.attrs)\n{'encoding-type': 'anndata', 'encoding-version': '0.1.0'}\n```\n\n----------------------------------------\n\nTITLE: Inspecting DataFrame Components in Zarr\nDESCRIPTION: Shows how to explore the columnar structure of a DataFrame stored in Zarr format, displaying the index and categorical columns.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_11\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"var\"].visititems(print)\nensembl_id <zarr.core.Array '/var/ensembl_id' (40145,) object read-only>\nfeature_biotype <zarr.hierarchy.Group '/var/feature_biotype' read-only>\nfeature_biotype/categories <zarr.core.Array '/var/feature_biotype/categories' (1,) object read-only>\nfeature_biotype/codes <zarr.core.Array '/var/feature_biotype/codes' (40145,) int8 read-only>\nfeature_is_filtered <zarr.core.Array '/var/feature_is_filtered' (40145,) bool read-only>\n...\n```\n\n----------------------------------------\n\nTITLE: Inspecting Mappings in HDF5 and Zarr Formats\nDESCRIPTION: Demonstrates how mappings are stored as Groups in HDF5 and Zarr formats, showing the structure of the 'uns' group.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_13\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"uns\"].visititems(print)\n[...]\npca <HDF5 group \"/uns/pca\" (3 members)>\npca/variance <HDF5 dataset \"variance\": shape (50,), type \"<f8\">\npca/variance_ratio <HDF5 dataset \"variance_ratio\": shape (50,), type \"<f8\">\n[...]\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"uns\"].visititems(print)\n[...]\npca <zarr.hierarchy.Group '/uns/pca' read-only>\npca/variance <zarr.core.Array '/uns/pca/variance' (50,) float64 read-only>\npca/variance_ratio <zarr.core.Array '/uns/pca/variance_ratio' (50,) float64 read-only>\n[...]\n```\n\n----------------------------------------\n\nTITLE: Inspecting Scalars in HDF5 and Zarr Formats\nDESCRIPTION: Shows how scalar values are stored in the 'uns' group for both HDF5 and Zarr formats, focusing on the 'neighbors/params' subgroup.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_14\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"uns/neighbors/params\"].visititems(print)\nmethod <HDF5 dataset \"method\": shape (), type \"|O\">\nmetric <HDF5 dataset \"metric\": shape (), type \"|O\">\nn_neighbors <HDF5 dataset \"n_neighbors\": shape (), type \"<i8\">\nrandom_state <HDF5 dataset \"random_state\": shape (), type \"<i8\">\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"uns/neighbors/params\"].visititems(print)\nmethod <zarr.core.Array '/uns/neighbors/params/method' () <U4 read-only>\nmetric <zarr.core.Array '/uns/neighbors/params/metric' () <U9 read-only>\nn_neighbors <zarr.core.Array '/uns/neighbors/params/n_neighbors' () int64 read-only>\nrandom_state <zarr.core.Array '/uns/neighbors/params/random_state' () int64 read-only>\n```\n\n----------------------------------------\n\nTITLE: Examining Dataframe Column Metadata\nDESCRIPTION: Shows how to access the encoding metadata for both categorical and regular array columns in a DataFrame.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_12\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(store[\"var\"][\"feature_name\"].attrs)\n{'encoding-type': 'categorical', 'encoding-version': '0.2.0', 'ordered': False}\n\n>>> dict(store[\"var\"][\"feature_is_filtered\"].attrs)\n{'encoding-type': 'array', 'encoding-version': '0.2.0'}\n```\n\n----------------------------------------\n\nTITLE: Accessing Scalar Values and Attributes\nDESCRIPTION: Demonstrates how to access scalar values and their attributes, showing the encoding metadata for a string scalar.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_15\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"uns/neighbors/params/metric\"][()] \n'euclidean'\n>>> dict(store[\"uns/neighbors/params/metric\"].attrs)\n{'encoding-type': 'string', 'encoding-version': '0.2.0'}\n```\n\n----------------------------------------\n\nTITLE: Examining DataFrame Metadata\nDESCRIPTION: Shows how to access the metadata for a DataFrame (var), displaying its index field, column order, and encoding information.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_9\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(store[\"var\"].attrs)\n{'_index': 'ensembl_id',\n 'column-order': ['highly_variable',\n  'means',\n  'variances',\n  'variances_norm',\n  'feature_is_filtered',\n  'feature_name',\n  'feature_reference',\n  'feature_biotype',\n  'mito'],\n 'encoding-type': 'dataframe',\n 'encoding-version': '0.2.0'}\n```\n\n----------------------------------------\n\nTITLE: Inspecting Categorical Arrays\nDESCRIPTION: Shows the structure and attributes of categorical arrays in AnnData, including the encoding metadata and the separate storage of categories and codes.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_16\n\nLANGUAGE: python\nCODE:\n```\n>>> categorical = store[\"obs\"][\"development_stage\"]\n>>> dict(categorical.attrs)\n{'encoding-type': 'categorical', 'encoding-version': '0.2.0', 'ordered': False}\n>>> categorical.visititems(print)\ncategories <HDF5 dataset \"categories\": shape (7,), type \"|O\">\ncodes <HDF5 dataset \"codes\": shape (164114,), type \"|i1\">\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> categorical = store[\"obs\"][\"development_stage\"]\n>>> dict(categorical.attrs)\n{'encoding-type': 'categorical', 'encoding-version': '0.2.0', 'ordered': False}\n>>> categorical.visititems(print)\ncategories <zarr.core.Array '/obs/development_stage/categories' (7,) object read-only>\ncodes <zarr.core.Array '/obs/development_stage/codes' (164114,) int8 read-only>\n```\n\n----------------------------------------\n\nTITLE: Concatenating AnnData Objects with Default UNS Merge Strategy in Python\nDESCRIPTION: Demonstrates the default behavior of concatenating AnnData objects, which results in an empty uns dictionary. This is the simplest merge strategy that doesn't preserve any unstructured data.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/concatenation.rst#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n>>> ad.concat([a, b, c]).uns == {}\nTrue\n```\n\n----------------------------------------\n\nTITLE: Inspecting String Arrays\nDESCRIPTION: Demonstrates how string arrays are stored in AnnData for both HDF5 and Zarr formats, showing the encoding metadata for string arrays.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_17\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"var\"][store[\"var\"].attrs[\"_index\"]]\n<HDF5 dataset \"ensembl_id\": shape (40145,), type \"|O\">\n>>> dict(categorical[\"categories\"].attrs)\n{'encoding-type': 'string-array', 'encoding-version': '0.2.0'}\n```\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"var\"][store[\"var\"].attrs[\"_index\"]]\n<zarr.core.Array '/var/ensembl_id' (40145,) object read-only>\n>>> dict(categorical[\"categories\"].attrs)\n{'encoding-type': 'string-array', 'encoding-version': '0.2.0'}\n```\n\n----------------------------------------\n\nTITLE: Accessing Nullable Integer Attributes\nDESCRIPTION: Shows how to access the attributes of a nullable integer group, displaying the encoding metadata.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_19\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(null_store[\"nullable_integer\"].attrs)\n{'encoding-type': 'nullable-integer', 'encoding-version': '0.1.0'}\n```\n\n----------------------------------------\n\nTITLE: Inspecting HDF5 Storage Structure for Awkward Arrays in AnnData\nDESCRIPTION: Example showing how to visit and print the constituent arrays of an awkward array stored in an HDF5 file within an AnnData object's varm attribute.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_20\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"varm/transcript\"].visititems(print)\nnode1-mask <HDF5 dataset \"node1-mask\": shape (5019,), type \"|u1\">\nnode10-data <HDF5 dataset \"node10-data\": shape (250541,), type \"<i8\">\nnode11-mask <HDF5 dataset \"node11-mask\": shape (5019,), type \"|u1\">\nnode12-offsets <HDF5 dataset \"node12-offsets\": shape (40146,), type \"<i8\">\nnode13-mask <HDF5 dataset \"node13-mask\": shape (250541,), type \"|i1\">\nnode14-data <HDF5 dataset \"node14-data\": shape (250541,), type \"<i8\">\nnode16-offsets <HDF5 dataset \"node16-offsets\": shape (40146,), type \"<i8\">\nnode17-data <HDF5 dataset \"node17-data\": shape (602175,), type \"|u1\">\nnode2-offsets <HDF5 dataset \"node2-offsets\": shape (40146,), type \"<i8\">\nnode3-data <HDF5 dataset \"node3-data\": shape (600915,), type \"|u1\">\nnode4-mask <HDF5 dataset \"node4-mask\": shape (5019,), type \"|u1\">\nnode5-offsets <HDF5 dataset \"node5-offsets\": shape (40146,), type \"<i8\">\nnode6-data <HDF5 dataset \"node6-data\": shape (59335,), type \"|u1\">\nnode7-mask <HDF5 dataset \"node7-mask\": shape (5019,), type \"|u1\">\nnode8-offsets <HDF5 dataset \"node8-offsets\": shape (40146,), type \"<i8\">\nnode9-mask <HDF5 dataset \"node9-mask\": shape (250541,), type \"|i1\">\n```\n\n----------------------------------------\n\nTITLE: Inspecting Zarr Storage Structure for Awkward Arrays in AnnData\nDESCRIPTION: Example showing how to visit and print the constituent arrays of an awkward array stored in a Zarr file within an AnnData object's varm attribute.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_21\n\nLANGUAGE: python\nCODE:\n```\n>>> store[\"varm/transcript\"].visititems(print)\nnode1-mask <zarr.core.Array '/varm/transcript/node1-mask' (5019,) uint8 read-only>\nnode10-data <zarr.core.Array '/varm/transcript/node10-data' (250541,) int64 read-only>\nnode11-mask <zarr.core.Array '/varm/transcript/node11-mask' (5019,) uint8 read-only>\nnode12-offsets <zarr.core.Array '/varm/transcript/node12-offsets' (40146,) int64 read-only>\nnode13-mask <zarr.core.Array '/varm/transcript/node13-mask' (250541,) int8 read-only>\nnode14-data <zarr.core.Array '/varm/transcript/node14-data' (250541,) int64 read-only>\nnode16-offsets <zarr.core.Array '/varm/transcript/node16-offsets' (40146,) int64 read-only>\nnode17-data <zarr.core.Array '/varm/transcript/node17-data' (602175,) uint8 read-only>\nnode2-offsets <zarr.core.Array '/varm/transcript/node2-offsets' (40146,) int64 read-only>\nnode3-data <zarr.core.Array '/varm/transcript/node3-data' (600915,) uint8 read-only>\nnode4-mask <zarr.core.Array '/varm/transcript/node4-mask' (5019,) uint8 read-only>\nnode5-offsets <zarr.core.Array '/varm/transcript/node5-offsets' (40146,) int64 read-only>\nnode6-data <zarr.core.Array '/varm/transcript/node6-data' (59335,) uint8 read-only>\nnode7-mask <zarr.core.Array '/varm/transcript/node7-mask' (5019,) uint8 read-only>\nnode8-offsets <zarr.core.Array '/varm/transcript/node8-offsets' (40146,) int64 read-only>\nnode9-mask <zarr.core.Array '/varm/transcript/node9-mask' (250541,) int8 read-only>\n```\n\n----------------------------------------\n\nTITLE: Fetching benchmark data using Python script\nDESCRIPTION: References a Python script (fetch_datasets.py) that needs to be executed to download required test datasets for benchmarking.\nSOURCE: https://github.com/scverse/anndata/blob/main/benchmarks/README.md#2025-04-16_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nfetch_datasets.py\n```\n\n----------------------------------------\n\nTITLE: Examining Awkward Array Metadata Attributes in AnnData Storage\nDESCRIPTION: Shows how to retrieve and display the metadata attributes for an awkward array stored in AnnData, including the encoding type, version, form structure, and array length.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/fileformat-prose.md#2025-04-16_snippet_22\n\nLANGUAGE: python\nCODE:\n```\n>>> dict(store[\"varm/transcript\"].attrs)\n{'encoding-type': 'awkward-array',\n 'encoding-version': '0.1.0',\n 'form': '{\"class\": \"RecordArray\", \"fields\": [\"tx_id\", \"seq_name\", '\n         '\"exon_seq_start\", \"exon_seq_end\", \"ensembl_id\"], \"contents\": '\n         '[{\"class\": \"BitMaskedArray\", \"mask\": \"u8\", \"valid_when\": true, '\n         '\"lsb_order\": true, \"content\": {\"class\": \"ListOffsetArray\", '\n         '\"offsets\": \"i64\", \"content\": {\"class\": \"NumpyArray\", \"primitive\": '\n         '\"uint8\", \"inner_shape\": [], \"parameters\": {\"__array__\": \"char\"}, '\n         '\"form_key\": \"node3\"}, \"parameters\": {\"__array__\": \"string\"}, '\n         '\"form_key\": \"node2\"}, \"parameters\": {}, \"form_key\": \"node1\"}, '\n        ...\n 'length': 40145}\n```\n\n----------------------------------------\n\nTITLE: Implementing Sharded Writing with Zarr v3 in AnnData\nDESCRIPTION: A function that implements sharded writing for AnnData objects using Zarr v3. It handles both array and sparse matrix data types with configurable shard sizes based on data dimensions.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/tutorials/zarr-v3.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nimport zarr\nimport anndata as ad\nfrom collections.abc import Mapping\nfrom typing import Any\n\nad.settings.zarr_write_format = 3 # Absolutely crucial! Sharding is only for the v3 file format!\n\ndef write_sharded(group: zarr.Group, adata: ad.AnnData):\n    def callback(\n        func: ad.experimental.Write,\n        g: zarr.Group,\n        k: str,\n        elem: ad.typing.RWAble,\n        dataset_kwargs: Mapping[str, Any],\n        iospec: ad.experimental.IOSpec,\n    ):\n        if iospec.encoding_type in {\"array\"}:\n            dataset_kwargs = {\n                \"shards\": tuple(int(2 ** (16 / len(elem.shape))) for _ in elem.shape),\n                **dataset_kwargs,\n            }\n            dataset_kwargs[\"chunks\"] = tuple(i // 2 for i in dataset_kwargs[\"shards\"])\n        elif iospec.encoding_type in {\"csr_matrix\", \"csc_matrix\"}:\n            dataset_kwargs = {\"shards\": (2**16,), \"chunks\": (2**8,), **dataset_kwargs}\n        func(g, k, elem, dataset_kwargs=dataset_kwargs)\n\n    return ad.experimental.write_dispatched(group, \"/\", adata, callback=callback)\n```\n\n----------------------------------------\n\nTITLE: Viewing benchmark results in a web browser\nDESCRIPTION: Commands for publishing benchmark results and viewing them in a web browser preview.\nSOURCE: https://github.com/scverse/anndata/blob/main/benchmarks/README.md#2025-04-16_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nasv publish\nasv preview\n```\n\n----------------------------------------\n\nTITLE: Indexing Operations in AnnData Python\nDESCRIPTION: Code examples showing fixed indexing operations in AnnData including empty column selection, masked access to backed arrays, and compressed sparse dataset handling.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.10.4.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nCategorical.map(na_action=...)\n```\n\nLANGUAGE: python\nCODE:\n```\nAnnData.__sizeof__()\n```\n\nLANGUAGE: python\nCODE:\n```\nadata[:, []]\n```\n\nLANGUAGE: python\nCODE:\n```\nadata.X[mask]\n```\n\nLANGUAGE: python\nCODE:\n```\nadata.X[...]\n```\n\n----------------------------------------\n\nTITLE: Running AnnData benchmarks for a specific commit\nDESCRIPTION: Command for running benchmarks against a specific Git commit with step size of 1 and filtering through benchmarks.\nSOURCE: https://github.com/scverse/anndata/blob/main/benchmarks/README.md#2025-04-16_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nasv run {commit} --steps 1 -b\n```\n\n----------------------------------------\n\nTITLE: Release Notes Documentation in Markdown\nDESCRIPTION: Release notes for AnnData v0.11.4 detailing bug fixes and development changes made to the library, including warning implementations, dask version constraints, concatenation fixes, and parameter additions.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.11.4.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n(v0.11.4)=\n### 0.11.4 {small}`2025-03-26`\n\n#### Bug fixes\n\n- Raise {class}`~anndata.ImplicitModificationWarning` when setting `X` on a view. {user}`ilan-gold` ({pr}`1853`)\n- Bound `dask` due to {issue}`dask/dask#11752` {user}`ilan-gold` ({pr}`1859`)\n- Fix concatenation of {class}`anndata.AnnData` objects along `var` using `join=\"outer\"` when `varm` is not empty. {user}`ilia-kats` ({pr}`1911`)\n- Add `convert_strings_to_categoricals` parameter also to {meth}`~anndata.AnnData.write_h5ad` and {meth}`~anndata.AnnData.write_zarr` as intended {user}`flying-sheep` ({pr}`1914`)\n- Allow initialization of {class}`anndata.AnnData` objects without `X` (since they could be constructed previously by deleting `X`) {user}`ilan-gold` ({pr}`1941`)\n\n#### Development Process\n\n- Fix version number inference in development environments (CI and local) {user}`flying-sheep` ({pr}`1831`)\n```\n\n----------------------------------------\n\nTITLE: Breaking Changes Warning for AnnData 0.7.0\nDESCRIPTION: Warning block detailing breaking changes between version 0.6.22.post1 and 0.7.0, including changes to dimensionality reduction behavior, internal module accessibility, and removal of deprecated attributes.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.7.0.md#2025-04-16_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nwarning\nBreaking changes introduced between `0.6.22.post1` and `0.7`:\n\n- Elements of {class}`~anndata.AnnData`s don't have their dimensionality reduced when the main object is subset.\n  This is to maintain consistency when subsetting. See discussion in {issue}`145`.\n- Internal modules like `anndata.core` are private and their contents are not stable: See {issue}`174`.\n- The old deprecated attributes `.smp*`. `.add` and `.data` have been removed.\n```\n\n----------------------------------------\n\nTITLE: Warning Block for File Format Update\nDESCRIPTION: RestructuredText warning directive notifying users about the updated on-disk format of AnnData objects and potential compatibility issues with previous versions.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.8.0.md#2025-04-16_snippet_0\n\nLANGUAGE: restructuredtext\nCODE:\n```\n{warning}\nThe on disk format of AnnData objects has been updated with this release.\nPrevious releases of `anndata` will not be able to read all files written by this version.\n\nFor discussion of possible future solutions to this issue, see {issue}`698`\n```\n\n----------------------------------------\n\nTITLE: Writing AnnData Object to Loom File\nDESCRIPTION: Saves the AnnData object to a Loom file format with execution time measurement. This allows comparison with the H5AD format performance.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/benchmark-read-write.ipynb#2025-04-16_snippet_5\n\nLANGUAGE: python\nCODE:\n```\n%%time\nadata.write_loom(\"test.loom\")\n```\n\n----------------------------------------\n\nTITLE: Reading AnnData Object from Loom File\nDESCRIPTION: Loads an AnnData object from a previously saved Loom file with execution time measurement. This demonstrates that reading from Loom is slower than from H5AD format.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/benchmark-read-write.ipynb#2025-04-16_snippet_6\n\nLANGUAGE: python\nCODE:\n```\n%%time\nadata = ad.io.read_loom(\"test.loom\")\n```\n\n----------------------------------------\n\nTITLE: Running AnnData benchmarks for a range of commits\nDESCRIPTION: Command for running benchmarks against all commits between two specific Git commits.\nSOURCE: https://github.com/scverse/anndata/blob/main/benchmarks/README.md#2025-04-16_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nasv run {commit1}..{commit2}\n```\n\n----------------------------------------\n\nTITLE: Checking available benchmark results with pattern filtering\nDESCRIPTION: Example showing how to use asv show with a pattern filter to view available benchmark results.\nSOURCE: https://github.com/scverse/anndata/blob/main/benchmarks/README.md#2025-04-16_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n$ asv show -b \"views\"\nCommits with results:\n\nMachine    : mimir.mobility.unimelb.net.au\nEnvironment: conda-py3.7-h5py-memory_profiler-natsort-numpy-pandas-scipy\n\n    61eb5bb7\n    e9ccfc33\n    22f12994\n    0ebe187e\n```\n\n----------------------------------------\n\nTITLE: Viewing benchmark results for a specific commit\nDESCRIPTION: Example showing detailed benchmark results for a specific commit with the views filter pattern.\nSOURCE: https://github.com/scverse/anndata/blob/main/benchmarks/README.md#2025-04-16_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n$ asv show -b \"views\" 0ebe187e\nCommit: 0ebe187e <views-of-views>\n\nviews.SubsetMemorySuite.track_repeated_subset_memratio [mimir.mobility.unimelb.net.au/conda-py3.7-h5py-memory_profiler-natsort-numpy-pandas-scipy]\n  ok\n  ======= ======= ========== ============ ===================== ====================== ======================\n  --                                                                   index_kind\n  --------------------------------------- -------------------------------------------------------------------\n   n_obs   n_var   attr_set   subset_dim         intarray             boolarray                slice\n  ======= ======= ========== ============ ===================== ====================== ======================\n    100     100     X-csr        obs               2.84           1.7916666666666667            0.5\n    100     100     X-csr        var        2.5357142857142856    1.8695652173913044     0.5652173913043478\n    100     100    X-dense       obs        3.1739130434782608    1.6538461538461537            0.6\n...\n```\n\n----------------------------------------\n\nTITLE: Comparing benchmark results between two commits\nDESCRIPTION: Example demonstrating how to compare benchmark performance between two different commits.\nSOURCE: https://github.com/scverse/anndata/blob/main/benchmarks/README.md#2025-04-16_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n$ asv compare e9ccfc 0ebe187e\nAll benchmarks:\n\n       before           after         ratio\n     [e9ccfc33]       [0ebe187e]\n     <master>         <views-of-views>\n-            2.16  1.7916666666666667     0.83  views.SubsetMemorySuite.track_repeated_subset_memratio(100, 100, 'X-csr', 'obs', 'boolarray')\n+ 2.533333333333333             2.84     1.12  views.SubsetMemorySuite.track_repeated_subset_memratio(100, 100, 'X-csr', 'obs', 'intarray')\n- 1.1923076923076923              0.5     0.42  views.SubsetMemorySuite.track_repeated_subset_memratio(100, 100, 'X-csr', 'obs', 'slice')\n  1.9615384615384615  1.8695652173913044     0.95  views.SubsetMemorySuite.track_repeated_subset_memratio(100, 100, 'X-csr', 'var', 'boolarray')\n```\n\n----------------------------------------\n\nTITLE: Toctree Directive for Read-Write Benchmark in Sphinx Documentation\nDESCRIPTION: A Sphinx toctree directive that links to a read-write benchmark page with maxdepth set to 1. This directive organizes documentation by including the specified benchmark document in the current page's table of contents.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/benchmarks.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nbenchmark-read-write\n```\n```\n\n----------------------------------------\n\nTITLE: Including Release Notes with Sphinx Directive in Markdown\nDESCRIPTION: This code snippet demonstrates how to use the release-notes Sphinx directive to automatically include release notes. The directive targets the current directory (indicated by the '.') to pull in release information.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{release-notes} .\n```\n```\n\n----------------------------------------\n\nTITLE: Generating Sphinx Documentation for AnnData Classes using Jinja2\nDESCRIPTION: This template creates a Sphinx documentation page for an AnnData class. It includes the class name, attributes, and methods. The template uses Jinja2 syntax to dynamically generate the documentation structure.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/_templates/autosummary/class.rst#2025-04-16_snippet_0\n\nLANGUAGE: jinja2\nCODE:\n```\n{{ fullname | escape | underline}}\n\n.. currentmodule:: {{ module }}\n\n.. add toctree option to make autodoc generate the pages\n\n.. autoclass:: {{ objname }}\n\n   {% block attributes %}\n   {% if attributes %}\n   .. rubric:: Attributes\n\n   .. autosummary::\n      :toctree: .\n   {% for item in attributes %}\n      ~{{ name }}.{{ item }}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n\n   {% block methods %}\n   {% if methods %}\n   .. rubric:: Methods\n\n   .. autosummary::\n      :toctree: .\n   {% for item in methods %}\n      {%- if item != '__init__' %}\n      ~{{ name }}.{{ item }}\n      {%- endif -%}\n   {%- endfor %}\n   {% endif %}\n   {% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Tutorial Table of Contents in Markdown\nDESCRIPTION: A toctree directive that organizes links to various AnnData tutorials, including getting started guides, annloader, anncollection, and specialized array handling notebooks.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/tutorials/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:maxdepth: 1\n\nnotebooks/getting-started\nnotebooks/annloader\nnotebooks/anncollection\nnotebooks/anncollection-annloader\nnotebooks/anndata_dask_array\nnotebooks/awkward-arrays\nnotebooks/{read,write}_dispatched\nnotebooks/read_lazy\nzarr-v3\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Hidden Toctree in Markdown Documentation\nDESCRIPTION: This snippet creates a hidden table of contents (toctree) in the documentation. It includes various sections of the documentation, such as tutorials, API reference, and release notes.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/index.md#2025-04-16_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n```{toctree}\n:hidden: true\n:maxdepth: 1\n\ntutorials/index\napi\nconcatenation\nfileformat-prose\ninteroperability\nbenchmarks\ncontributing\nrelease-notes/index\nreferences\n```\n```\n\n----------------------------------------\n\nTITLE: Including News in Markdown Documentation\nDESCRIPTION: This snippet includes the content of the news.md file in the current documentation page. It uses a Markdown-specific include directive to add the latest news to the documentation.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/index.md#2025-04-16_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n```{include} news.md\n```\n```\n\n----------------------------------------\n\nTITLE: Including README in Markdown Documentation\nDESCRIPTION: This snippet includes the content of the README.md file in the current documentation page. It uses a Markdown-specific include directive.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/index.md#2025-04-16_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n```{include} ../README.md\n```\n```\n\n----------------------------------------\n\nTITLE: Specifying Minimum Numba Version Requirement\nDESCRIPTION: This line specifies that the project requires numba version 0.56 or higher. It's typically used in requirements.txt or similar dependency specification files.\nSOURCE: https://github.com/scverse/anndata/blob/main/ci/constraints.txt#2025-04-16_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nnumba>=0.56\n```\n\n----------------------------------------\n\nTITLE: Importing CuPy for GPU Support in Python\nDESCRIPTION: Demonstrates how to import CuPy for GPU support in AnnData. CuPy is a NumPy-compatible array library for GPU-accelerated computing with Python.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/release-notes/0.10.0.md#2025-04-16_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\nimport cupy\n```\n\n----------------------------------------\n\nTITLE: Including Key Contributors RST File\nDESCRIPTION: RST directive to include a separate file containing key contributor information into the documentation.\nSOURCE: https://github.com/scverse/anndata/blob/main/docs/contributing.md#2025-04-16_snippet_0\n\nLANGUAGE: rst\nCODE:\n```\n.. include:: _key_contributors.rst\n```"
  }
]