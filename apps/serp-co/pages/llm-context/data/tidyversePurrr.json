[
  {
    "owner": "tidyverse",
    "repo": "purrr",
    "content": "TITLE: Using Parallel Map Operations in purrr\nDESCRIPTION: Example showing the new parallel mapping capability in purrr powered by the mirai package. The .parallel argument enables parallel processing in map(), map2(), pmap() and variants.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nmap(data, fn, .parallel = TRUE)\nmap2(data1, data2, fn, .parallel = TRUE)\npmap(list(data1, data2, data3), fn, .parallel = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Installing purrr Package in R\nDESCRIPTION: Different methods for installing the purrr package, either as part of the tidyverse or standalone, including development version installation from GitHub.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/README.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n# The easiest way to get purrr is to install the whole tidyverse:\ninstall.packages(\"tidyverse\")\n\n# Alternatively, install just purrr:\ninstall.packages(\"purrr\")\n\n# Or the the development version from GitHub:\n# install.packages(\"pak\")\npak::pak(\"tidyverse/purrr\")\n```\n\n----------------------------------------\n\nTITLE: Using as_mapper() with partial function application in R\nDESCRIPTION: Example showing how as_mapper() transforms primitive functions to closures with standardized argument names, enabling proper argument matching in partial function application.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_8\n\nLANGUAGE: R\nCODE:\n```\nmap(1:10, partial(`-`, .x = 5))\n```\n\n----------------------------------------\n\nTITLE: Using map*() Functions with Custom C Code in R (purrr)\nDESCRIPTION: The map*() family of functions now use custom C code rather than relying on lapply() and mapply(), allowing greater control over the output while maintaining similar performance.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_15\n\nLANGUAGE: r\nCODE:\n```\nmap*()\n```\n\n----------------------------------------\n\nTITLE: Using attr_getter() to extract attributes from objects in R\nDESCRIPTION: Example demonstrating how to use attr_getter() to extract specific attributes from a list of objects in R.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_9\n\nLANGUAGE: R\nCODE:\n```\nmap(list(iris, mtcars), attr_getter(\"row.names\"))\n```\n\n----------------------------------------\n\nTITLE: Replacing accumulate_right() with accumulate() in R\nDESCRIPTION: Example demonstrating how to use the new .dir parameter of accumulate() to replace the soft-deprecated accumulate_right() function. This follows the right reduction standard where the accumulated value is passed to the right.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\n# Before:\naccumulate_right(1:3, f)\n\n# After:\naccumulate(1:3, f, .dir = \"backward\")\n```\n\n----------------------------------------\n\nTITLE: Migrating from rerun() to map() with Multiple Expressions in R\nDESCRIPTION: Shows how to replace the deprecated rerun() function with map() when working with multiple expressions. The new approach uses map() with a sequence and returns a list of results.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-rerun.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\n# Previously\nrerun(5, rnorm(1), rnorm(2))\n\n# Now\nmap(1:5, ~ list(rnorm(1), rnorm(2)))\n```\n\n----------------------------------------\n\nTITLE: Error Handling with purrr_error_indexed\nDESCRIPTION: Demonstrates the error handling system in purrr 1.0.1+ where errors from .f are wrapped in a purrr_error_indexed class containing location and name information.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\n# Error structure\nclass: \"purrr_error_indexed\"\nfields: location, name\n```\n\n----------------------------------------\n\nTITLE: Testing modify_if() predicate function requirements\nDESCRIPTION: Test case showing that predicate functions used with modify_if() must return TRUE or FALSE, not NA. This demonstrates purrr's validation of predicate function outputs.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/modify.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nmodify_if(list(1, 2), ~NA, ~\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Using zap() instead of NULL in list_modify() in R\nDESCRIPTION: Example showing how to use the zap() sentinel from rlang instead of NULL to remove elements in list_modify(). This resolves the ambiguity of NULL which can be both a deletion sentinel and a valid list value.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_7\n\nLANGUAGE: r\nCODE:\n```\n# Before:\nlist_modify(x, foo = NULL)\n\n# After:\nlist_modify(x, foo = zap())\n```\n\n----------------------------------------\n\nTITLE: Testing Type Enforcement in R purrr map_vec()\nDESCRIPTION: Demonstrates how map_vec() handles type enforcement with .ptype parameter\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nmap_vec(1:2, ~ factor(\"x\"), .ptype = integer())\n```\n\n----------------------------------------\n\nTITLE: Checking for Duplicate Argument Names in list_merge() in R\nDESCRIPTION: Shows that list_merge() requires unique names for all named arguments and reports the positions of duplicate names.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-modify.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nlist_merge(list(x = 1), x = 2, x = 3)\n```\n\n----------------------------------------\n\nTITLE: Testing Result Type and Length Validation in pmap_int() and pmap_vec()\nDESCRIPTION: This code snippet demonstrates error handling in pmap_int() and pmap_vec() when the returned values are of incorrect types or lengths. It shows errors for string-to-integer coercion, returning vectors longer than length 1, and type conversion issues.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pmap.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\npmap_int(list(1), ~\"x\")\n```\n\nLANGUAGE: r\nCODE:\n```\npmap_int(list(1), ~ 1:2)\n```\n\nLANGUAGE: r\nCODE:\n```\npmap_vec(list(1), ~1, .ptype = character())\n```\n\n----------------------------------------\n\nTITLE: Testing Size Enforcement in list_cbind() Function in R\nDESCRIPTION: This snippet demonstrates how list_cbind() handles size enforcement. It attempts to recycle input to a specified size, which fails when the sizes are incompatible.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nlist_cbind(list(df1), size = 3)\n```\n\n----------------------------------------\n\nTITLE: Testing Strict Simplification Errors in list_simplify in R\nDESCRIPTION: Tests that list_simplify correctly errors when simplifying lists with non-vectors, mixed types, inconsistent sizes, and type conversion issues when strict=TRUE.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-simplify.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(list(mean))\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(list(1, \"a\"))\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(list(1, 1:2))\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(list(data.frame(x = 1), data.frame(x = 1:2)))\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(list(1, 2), ptype = character())\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_type() with invalid arg parameter\nDESCRIPTION: Demonstrates error handling when stop_bad_type() receives an invalid arg parameter (a symbol instead of a string or NULL), resulting in an error from what_bad_object().\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_type(NA, \"`NULL`\", arg = quote(.foo))\n```\n\n----------------------------------------\n\nTITLE: Using as_function() in R (purrr)\nDESCRIPTION: The as_function() function, which converts formulas to functions, is now exported for public use.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_12\n\nLANGUAGE: r\nCODE:\n```\nas_function()\n```\n\n----------------------------------------\n\nTITLE: Data Processing with purrr map Functions in R\nDESCRIPTION: Example demonstrating purrr's map functions to split a dataset, fit linear models, and extract R-squared values, showing type-stability and pipe-friendly syntax.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/README.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlibrary(purrr)\n\nmtcars |> \n  split(mtcars$cyl) |>  # from base R\n  map(\\(df) lm(mpg ~ wt, data = df)) |> \n  map(summary) |>\n  map_dbl(\"r.squared\")\n#>         4         6         8 \n#> 0.5086326 0.4645102 0.4229655\n```\n\n----------------------------------------\n\nTITLE: Testing ptype Enforcement in list_simplify in R\nDESCRIPTION: Tests that list_simplify enforces the specified prototype type (ptype) when simplifying a list. The function correctly errors when attempting to convert numeric values to characters.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-simplify.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(list(1, 2), ptype = character())\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(list(1, 2), ptype = character(), strict = FALSE)\n```\n\n----------------------------------------\n\nTITLE: Validating Inputs in where_at() Function (R)\nDESCRIPTION: This snippet tests the input validation of the where_at() function. It demonstrates the error message when an empty list is provided as an argument, which is not a valid input type.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/utils.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nwhere_at(x, list())\n```\n\n----------------------------------------\n\nTITLE: Testing Type Coercion and Length Validation in map2_int\nDESCRIPTION: Tests error handling in map2_int function when the function returns incompatible types (string instead of integer) or results with incorrect length.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map2.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmap2_int(1, 1, ~\"x\")\n```\n\nLANGUAGE: r\nCODE:\n```\nmap2_int(1, 1, ~ 1:2)\n```\n\nLANGUAGE: r\nCODE:\n```\nmap2_vec(1, 1, ~1, .ptype = character())\n```\n\n----------------------------------------\n\nTITLE: Testing Internal Function Validation in list_simplify_internal in R\nDESCRIPTION: Tests that the internal list_simplify_internal function validates that simplify is TRUE, FALSE, or NA, and that ptype isn't specified when simplify=FALSE.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-simplify.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify_internal(list(), simplify = 1)\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify_internal(list(), simplify = FALSE, ptype = integer())\n```\n\n----------------------------------------\n\nTITLE: Error Handling for Unsupported Types in pluck Function in R\nDESCRIPTION: Shows error messages when attempting to use pluck() with unsupported R types such as symbols, calls, and expression vectors. Each case produces a specific error message indicating the problematic type.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\npluck(quote(x), 1)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(quote(f(x, 1)), 1)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(expression(1), 1)\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Sleep Validity Check in R\nDESCRIPTION: Demonstrates error handling when attempting to use rate_sleep with an invalid rate configuration.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/rate.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nrate_sleep(rate)\n```\n\n----------------------------------------\n\nTITLE: Environment Indexing in pluck/chuck Functions in R\nDESCRIPTION: Tests error handling when plucking or chucking from environments, including non-existent objects, NA names, and invalid index types.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_8\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, \"y\")\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, NA_character_)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(environment(), 1)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(environment(), letters)\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Sleep Failure with Delay in R\nDESCRIPTION: Tests error handling when rate_sleep fails after maximum attempts with rate_delay configuration.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/rate.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nrate_sleep(rate)\n```\n\n----------------------------------------\n\nTITLE: Testing modify2() argument recycling errors\nDESCRIPTION: Test cases showing how modify2() handles mismatched argument sizes. These examples demonstrate that arguments need to have compatible lengths for recycling rules.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/modify.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nmodify2(1:3, integer(), `+`)\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify2(1:3, 1:4, `+`)\n```\n\n----------------------------------------\n\nTITLE: Testing accumulate() with incompatible types\nDESCRIPTION: Tests that accumulate() fails when attempting to simplify results of incompatible types. The function cannot combine a numeric value with a character value when simplification is enabled.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/reduce.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\naccumulate(list(1, \"a\"), ~.y, .simplify = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Recreating exact reduce_right() behavior in R\nDESCRIPTION: Example showing how to achieve the exact same computation as the original reduce_right() by using reverse() with a standard left reduction. This maintains the original reduction order.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n# Before:\nreduce_right(1:3, f)\n\n# After:\nreduce(rev(1:3), f)\n```\n\n----------------------------------------\n\nTITLE: Testing Type Enforcement in list_rbind() Function in R\nDESCRIPTION: This snippet demonstrates how list_rbind() handles type enforcement. It creates a character prototype and attempts to convert a numeric column to match it, which should result in an error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nptype <- data.frame(x = character(), stringsAsFactors = FALSE)\nlist_rbind(list(df1), ptype = ptype)\n```\n\n----------------------------------------\n\nTITLE: Testing modify_depth with Additional Arguments\nDESCRIPTION: Tests modify_depth with an arithmetic operation and an additional integer argument when the specified depth exceeds the list nesting.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-depth.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nmodify_depth(x, 5, `+`, 10L)\n```\n\n----------------------------------------\n\nTITLE: Using the null coalescing operator in R\nDESCRIPTION: Example of the %||% infix operator in purrr, which returns the right-hand side if the left-hand side is NULL, otherwise returns the left-hand side.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_10\n\nLANGUAGE: R\nCODE:\n```\nx %||% y\n```\n\n----------------------------------------\n\nTITLE: Testing reduce() with empty input\nDESCRIPTION: Tests that reduce() throws an error when given an empty list without an init value. The function requires an initial value when the input is empty.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/reduce.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nreduce(list())\n```\n\n----------------------------------------\n\nTITLE: Validating Unnamed Arguments in pluck/chuck Functions in R\nDESCRIPTION: Tests that pluck() and chuck() functions properly validate that arguments in ... must be passed by position, not by name. Both functions produce errors when named arguments are provided.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_2\n\nLANGUAGE: R\nCODE:\n```\npluck(1, a = 1)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(1, a = 1)\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Partial Function Application with Quasiquotation in R\nDESCRIPTION: Examples of using the updated partial() function with quasiquotation to control evaluation timing. This replaces the deprecated .lazy argument for more flexible control over argument evaluation.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_2\n\nLANGUAGE: R\nCODE:\n```\n# Before\npartial(fn, u = runif(1), n = rnorm(1), .lazy = FALSE)\n\n# After\npartial(fn, u = !!runif(1), n = !!rnorm(1))  # All constant\npartial(fn, u = !!runif(1), n = rnorm(1))    # First constant\n```\n\n----------------------------------------\n\nTITLE: Testing modify functions with data frames that don't preserve size\nDESCRIPTION: Test cases showing errors when attempting to modify data frames with values that don't match the original size. This demonstrates how purrr's modify functions maintain size integrity.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/modify.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmodify(df1, ~ integer())\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify(df1, ~ 1:4)\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_at(df1, 2, ~ integer())\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify2(df1, list(1, 1:3), ~.y)\n```\n\n----------------------------------------\n\nTITLE: Testing Input Validation in list_simplify in R\nDESCRIPTION: Tests that list_simplify properly validates its inputs, including checking that x is a list and that strict is a logical TRUE or FALSE.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-simplify.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(1:5)\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_simplify(list(), strict = NA)\n```\n\n----------------------------------------\n\nTITLE: Validating Input Types for list_modify() in R\nDESCRIPTION: Shows that list_modify() requires a list as input and throws an error when provided with a non-list type such as an integer vector.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-modify.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlist_modify(1:3)\n```\n\n----------------------------------------\n\nTITLE: Testing assign_in() function error handling in R\nDESCRIPTION: This code snippet demonstrates that the assign_in() function from the purrr package requires at least one element in the 'where' parameter. When NULL is passed as the location, the function throws an error indicating that 'where' must contain at least one element.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck-assign.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nassign_in(x, NULL, value = \"foo\")\n```\n\n----------------------------------------\n\nTITLE: Validating Input Types for list_merge() in R\nDESCRIPTION: Demonstrates that list_merge() requires a list as input and throws an error when provided with a non-list type such as an integer vector.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-modify.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nlist_merge(1:3)\n```\n\n----------------------------------------\n\nTITLE: Testing Input Type Validation for List Functions with Data Frame Input in R\nDESCRIPTION: This snippet tests how list functions validate their inputs when given a data frame directly. It passes mtcars data frame instead of a list to list_c(), list_rbind(), and list_cbind(), which should result in appropriate error messages.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_7\n\nLANGUAGE: r\nCODE:\n```\nlist_c(mtcars)\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_rbind(mtcars)\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_cbind(mtcars)\n```\n\n----------------------------------------\n\nTITLE: Updating detect() with new direction parameter in R\nDESCRIPTION: Example showing how to replace the soft-deprecated .right parameter with the new .dir parameter in detect() and detect_index() functions for consistency with other purrr functions.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_6\n\nLANGUAGE: r\nCODE:\n```\n# Before\ndetect(x, f, .right = TRUE)\n\n# After\ndetect(x, f, .dir = \"backward\")\n```\n\n----------------------------------------\n\nTITLE: Using the attribute extraction operator in R\nDESCRIPTION: Example of the %@% infix operator in purrr, which provides a shorthand for accessing attributes from an object.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_11\n\nLANGUAGE: R\nCODE:\n```\nx %@% \"a\"\n```\n\n----------------------------------------\n\nTITLE: Testing modify_depth with Invalid Negative Depth\nDESCRIPTION: Tests modify_depth when provided with an excessively negative depth value, resulting in an error with bounds checking.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-depth.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nmodify_depth(x1, -5, length)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling for Invalid Subsetting in where_at() Function (R)\nDESCRIPTION: This snippet tests the error handling of the where_at() function when provided with invalid subsetting vectors. It checks for proper error messages when using incorrect logical subscripts, missing values, and out-of-bounds indices.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/utils.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nwhere_at(x, c(FALSE, TRUE))\nwhere_at(x, NA_real_)\nwhere_at(x, 4)\n```\n\n----------------------------------------\n\nTITLE: Testing map_depth with Invalid Negative Depth\nDESCRIPTION: Tests map_depth function when given an excessively negative depth value, resulting in an error indicating that negative depths must be within bounds.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-depth.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nmap_depth(x1, -5, length)\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Return Type in lmap Function\nDESCRIPTION: Tests error handling when lmap receives an invalid return type (number instead of list).\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/lmap.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlmap(list(1), ~1)\n```\n\n----------------------------------------\n\nTITLE: Using reduce() with backward direction in R\nDESCRIPTION: Example showing how to replace the soft-deprecated reduce_right() function with the new .dir parameter of reduce(). The backward direction computation now follows the standard way of reducing from the right.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\n# Before:\nreduce_right(1:3, f)\n\n# After:\nreduce(1:3, f, .dir = \"backward\")\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Vector Input Handling in R purrr map()\nDESCRIPTION: Demonstrates how map() fails when given non-vector inputs like environments and symbols\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmap(environment(), identity)\nmap(quote(a), identity)\n```\n\n----------------------------------------\n\nTITLE: Testing Type Compatibility in list_c() Function in R\nDESCRIPTION: This snippet tests how list_c() handles incompatible types. It attempts to concatenate a character and a numeric value, which should result in an error message explaining the type incompatibility.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlist_c(list(\"a\", 1))\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated invoke_map_raw() Function in R\nDESCRIPTION: Example of using the deprecated invoke_map_raw() function with a corresponding deprecation warning. The function should be replaced with map_raw() + exec() as of purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-invoke.md#2025-04-21_snippet_6\n\nLANGUAGE: r\nCODE:\n```\n. <- invoke_map_raw(identity, list())\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_type() with simple parameters\nDESCRIPTION: Demonstrates using stop_bad_type() to validate that an object is NULL. When given NA instead, it throws an error with a formatted message.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_type(NA, \"`NULL`\")\n```\n\n----------------------------------------\n\nTITLE: Using map_lgl() with .f Argument in R (purrr)\nDESCRIPTION: The map_lgl() function now uses .f as its second argument instead of .p, making it consistent with other map functions.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_16\n\nLANGUAGE: r\nCODE:\n```\nmap_lgl()\n```\n\n----------------------------------------\n\nTITLE: Demonstrating deprecated lift functions in purrr (R)\nDESCRIPTION: This code snippet shows the usage of various deprecated lift functions in purrr. Each function call triggers a deprecation warning indicating that the function was deprecated in purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-lift.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n. <- lift_dl(function() { })\n```\n\nLANGUAGE: R\nCODE:\n```\n. <- lift_dv(function() { })\n```\n\nLANGUAGE: R\nCODE:\n```\n. <- lift_vl(function() { })\n```\n\nLANGUAGE: R\nCODE:\n```\n. <- lift_vd(function() { })\n```\n\nLANGUAGE: R\nCODE:\n```\n. <- lift_ld(function() { })\n```\n\nLANGUAGE: R\nCODE:\n```\n. <- lift_lv(function() { })\n```\n\n----------------------------------------\n\nTITLE: Testing flatten() with symbol in list\nDESCRIPTION: Tests that flatten() properly errors when given a list containing a symbol (created with quote()). The function should throw an error indicating that the list item must be a vector, not a symbol.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-flatten.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nflatten(list(quote(a)))\n```\n\n----------------------------------------\n\nTITLE: Using update_list() with Element Named 'x' in R (purrr)\nDESCRIPTION: The update_list() function can now modify list elements named 'x'.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_14\n\nLANGUAGE: r\nCODE:\n```\nupdate_list()\n```\n\n----------------------------------------\n\nTITLE: Testing transpose() with mixed valid and invalid elements in R\nDESCRIPTION: This code demonstrates the error when transpose() is called with a list containing both a valid empty list and an invalid environment object. The function checks all elements and reports the first non-vector it encounters.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-transpose.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ntranspose(list(list(), environment()))\n```\n\n----------------------------------------\n\nTITLE: Composing Multiple Functions in R\nDESCRIPTION: This snippet shows how to use the compose function with multiple input functions in R. It displays the output of the composed function, which includes the definitions of both input functions in order of composition.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/adverb-compose.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\n# Multiple inputs\ncompose(fn1, fn2)\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Sleep Failure with Backoff in R\nDESCRIPTION: Tests error handling when rate_sleep fails after maximum attempts with rate_backoff configuration.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/rate.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nrate_sleep(rate)\n```\n\n----------------------------------------\n\nTITLE: Testing keep() Function with Invalid Predicate in R\nDESCRIPTION: This snippet demonstrates the error thrown when using keep() with a predicate function that returns NA instead of TRUE or FALSE.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/keep.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nkeep(1:3, ~NA)\n```\n\n----------------------------------------\n\nTITLE: Testing Double Coercion Failures in R\nDESCRIPTION: Tests for coerce_dbl() function that attempt to coerce a string to a double value, verifying appropriate error message is produced.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/coerce.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\ncoerce_dbl(\"1.5\")\n```\n\n----------------------------------------\n\nTITLE: Testing list_transpose simplification failures\nDESCRIPTION: Tests demonstrating error conditions when simplification fails due to type incompatibility or size mismatch when trying to combine elements.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-transpose.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(list(list(x = 1), list(x = \"b\")), simplify = TRUE)\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(list(list(x = 1), list(x = 2:3)), simplify = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Testing Character Coercion with Deprecation Warnings in R\nDESCRIPTION: Tests for coerce_chr() function that demonstrate successful but deprecated automatic coercions from logical, integer, and double values to character strings.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/coerce.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nexpect_equal(coerce_chr(TRUE), \"TRUE\")\n```\n\nLANGUAGE: r\nCODE:\n```\nexpect_equal(coerce_chr(1L), \"1\")\n```\n\nLANGUAGE: r\nCODE:\n```\nexpect_equal(coerce_chr(1.5), \"1.500000\")\n```\n\n----------------------------------------\n\nTITLE: Testing Limitation with Regular S4 Objects in map Function (R)\nDESCRIPTION: This snippet demonstrates that regular S4 objects are not compatible with the map function in purrr. It shows the error message when attempting to use map with an S4 object.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/utils.md#2025-04-21_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nmap(foo(), identity)\n```\n\n----------------------------------------\n\nTITLE: Testing prepend() error when before parameter equals list length\nDESCRIPTION: This snippet shows that prepend() throws an error when the 'before' parameter equals 1 when applied to an empty list. The error occurs because the function requires before to be NULL or between 1 and the length of x.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-prepend.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nprepend(list(), 1, before = 1)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in array_branch with Incorrect Margins for Vectors in R\nDESCRIPTION: Demonstrates the error message generated when array_branch is called with an invalid margin (2) on a one-dimensional vector (1:3). The function correctly throws an error indicating that margin must be NULL or 1 for 1D arrays.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/arrays.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\narray_branch(1:3, 2)\n```\n\n----------------------------------------\n\nTITLE: Composing Single Function in R\nDESCRIPTION: This snippet demonstrates how to use the compose function with a single input function in R. It shows the output of the composed function, which includes the original function definition.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/adverb-compose.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n# Single input\ncompose(fn1)\n```\n\n----------------------------------------\n\nTITLE: Testing Output Requirements in R purrr map_vec()\nDESCRIPTION: Shows how map_vec() enforces output length and type consistency requirements\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nmap_vec(1:2, ~ rep(1, .x))\nmap_vec(1:2, ~ if (.x == 1) factor(\"x\") else 1)\n```\n\n----------------------------------------\n\nTITLE: Testing auto_browse() Error with Primitive Function in R\nDESCRIPTION: This snippet demonstrates that the auto_browse() function in purrr correctly throws an error when used with a primitive function like log(). The test validates that the proper error message is displayed when attempting to call auto_browse(log)(NULL).\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/adverb-auto-browse.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nauto_browse(log)(NULL)\n```\n\n----------------------------------------\n\nTITLE: Testing list_transpose on data frames\nDESCRIPTION: Test showing that list_transpose function cannot accept data frames as input and will throw an appropriate error message.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-transpose.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(df)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for rdunif with Multi-Length Arguments in R\nDESCRIPTION: This snippet demonstrates the error when rdunif is called with an argument 'a' that has length greater than 1.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-utils.md#2025-04-21_snippet_2\n\nLANGUAGE: R\nCODE:\n```\nrdunif(1000, 1, c(0.5, 0.2))\n```\n\n----------------------------------------\n\nTITLE: Error Demonstration for map_if() with NA Predicate Result in R\nDESCRIPTION: This snippet shows that map_if() requires predicate functions to return TRUE or FALSE values, and will error when the predicate returns NA. The error message clearly states that the predicate function must return a single TRUE or FALSE value.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-if-at.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmap_if(1:3, ~NA, ~\"foo\")\n```\n\n----------------------------------------\n\nTITLE: Handling NULL Values in pluck/chuck Functions in R\nDESCRIPTION: Demonstrates error handling when attempting to pluck or chuck from NULL values in R. The chuck() function throws an appropriate error message when trying to extract from NULL.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nchuck(NULL, 1)\n```\n\n----------------------------------------\n\nTITLE: Testing Logical Coercion Failures in R\nDESCRIPTION: Tests for coerce_lgl() function that attempt to coerce values of incorrect types to logical, verifying appropriate error messages are produced.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/coerce.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ncoerce_lgl(2L)\n```\n\nLANGUAGE: r\nCODE:\n```\ncoerce_lgl(1.5)\n```\n\nLANGUAGE: r\nCODE:\n```\ncoerce_lgl(\"true\")\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_element_length() with custom argument and what parameters\nDESCRIPTION: Shows stop_bad_element_length() with both custom argument name and what parameter, though the what parameter doesn't affect the error message in this case.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_9\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_element_length(1:3, 8, 10, arg = \".foo\", what = \"Result\")\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated Functions rdunif and rbernoulli in R\nDESCRIPTION: This snippet demonstrates the use of deprecated functions rdunif and rbernoulli, which trigger deprecation warnings as of purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-utils.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n. <- rdunif(10, 1)\n```\n\nLANGUAGE: R\nCODE:\n```\n. <- rbernoulli(10)\n```\n\n----------------------------------------\n\nTITLE: Testing list_transpose with mixed named and unnamed vectors\nDESCRIPTION: Test showing that list_transpose cannot process a mix of named and unnamed vectors together.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-transpose.md#2025-04-21_snippet_7\n\nLANGUAGE: r\nCODE:\n```\ntest_list_transpose()\n```\n\n----------------------------------------\n\nTITLE: Testing Input Recycling Rules in map2\nDESCRIPTION: Tests error handling when map2 cannot properly recycle inputs due to incompatible lengths.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map2.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nmap2(1:2, 1:3, `+`)\n```\n\nLANGUAGE: r\nCODE:\n```\nmap2(1:2, integer(), `+`)\n```\n\n----------------------------------------\n\nTITLE: Testing discard() Function with Invalid Predicate in R\nDESCRIPTION: This snippet shows the error thrown when using discard() with a predicate function that returns NA instead of TRUE or FALSE.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/keep.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ndiscard(1:3, ~NA)\n```\n\n----------------------------------------\n\nTITLE: Testing list_transpose input validation\nDESCRIPTION: Tests for basic input validation in list_transpose, showing errors for non-list inputs and invalid template parameters.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-transpose.md#2025-04-21_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(10)\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(list(1), template = mean)\n```\n\n----------------------------------------\n\nTITLE: Testing detect() with Invalid Predicate Function in R\nDESCRIPTION: Shows error handling when using detect() with is.na() predicate function that returns a logical vector instead of a single TRUE/FALSE value.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/detect.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ndetect(list(1:2, 2), is.na)\n```\n\n----------------------------------------\n\nTITLE: Testing reduce2() with unequal length vectors\nDESCRIPTION: Tests that reduce2() throws an error when the second input vector doesn't have the required length. For reduce2(), the .y vector must have one less element than .x.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/reduce.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nreduce2(1:3, 1, `+`)\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_type() with custom argument name\nDESCRIPTION: Shows how stop_bad_type() can include a custom argument name in the error message, which helps identify which parameter had the incorrect type.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_type(NA, \"`NULL`\", arg = \".foo\")\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_element_type() with custom argument name\nDESCRIPTION: Shows how stop_bad_element_type() includes a custom argument name in the error message, making it clear which object contains the problematic element.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_element_type(1:3, 3, \"a foobaz\", arg = \"..arg\")\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid Function Input in lmap\nDESCRIPTION: Tests error handling when lmap receives an environment instead of a function as the second argument.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/lmap.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlmap(list(1), environment())\n```\n\n----------------------------------------\n\nTITLE: Position-based Indexing Validation in chuck Function in R\nDESCRIPTION: Demonstrates error handling for position-based indexing in the chuck() function, including validation of zero, out-of-bounds indices, and negative indices. Each case produces an appropriate error message.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, 0)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, 4)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, -4)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, -5)\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_element_length() with custom argument name\nDESCRIPTION: Demonstrates stop_bad_element_length() with a custom argument name that clarifies which object contains the element with incorrect length.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_element_length(1:3, 8, 10, arg = \".foo\")\n```\n\n----------------------------------------\n\nTITLE: Validating Argument Naming Consistency in list_modify() in R\nDESCRIPTION: Demonstrates that list_modify() requires all arguments to be either named or unnamed, not a mixture of both.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-modify.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlist_modify(list(a = 1), 2, a = 2)\n```\n\n----------------------------------------\n\nTITLE: Testing list_transpose with invalid default parameter names\nDESCRIPTION: Test showing an error when providing unknown names in the default parameter.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-transpose.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(x, default = list(c = NA))\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_element_type() with custom what parameter\nDESCRIPTION: Demonstrates how stop_bad_element_type() can customize the description of what contains the element using the what parameter.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_element_type(1:3, 3, \"a foobaz\", what = \"Result\")\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Backoff Print Method in R\nDESCRIPTION: Shows the print output format for default rate_backoff configuration with 3 max attempts and exponential backoff parameters.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/rate.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nrate_backoff()\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_element_type() with basic parameters\nDESCRIPTION: Shows how stop_bad_element_type() validates a specific element's type in a vector, generating an appropriate error message when the element has the wrong type.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_element_type(1:3, 3, \"a foobaz\")\n```\n\n----------------------------------------\n\nTITLE: Using rerun() with Proper Scoping in R (purrr)\nDESCRIPTION: The rerun() function now has fixed scoping issues.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_13\n\nLANGUAGE: r\nCODE:\n```\nrerun()\n```\n\n----------------------------------------\n\nTITLE: Replacing map_n() and walk_n() in R (purrr)\nDESCRIPTION: The map_n() function is deprecated in favor of pmap(), and walk_n() is deprecated in favor of pwalk().\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_19\n\nLANGUAGE: r\nCODE:\n```\nmap_n() -> pmap(); walk_n() -> pwalk()\n```\n\n----------------------------------------\n\nTITLE: Checking for Duplicate Argument Names in list_modify() in R\nDESCRIPTION: Shows that list_modify() requires unique names for all named arguments and reports the positions of duplicate names.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-modify.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlist_modify(list(x = 1), x = 2, x = 3)\n```\n\n----------------------------------------\n\nTITLE: Replacing map_call() with invoke() in R (purrr)\nDESCRIPTION: The map_call() function is deprecated in favor of invoke().\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_18\n\nLANGUAGE: r\nCODE:\n```\nmap_call() -> invoke()\n```\n\n----------------------------------------\n\nTITLE: Using rerun() with a Single Expression in R\nDESCRIPTION: Example of using the deprecated rerun() function with a single expression (rnorm(1)) that generates 5 random samples. A warning is shown explaining how to migrate to using map() instead.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-rerun.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n. <- rerun(5, rnorm(1))\n```\n\n----------------------------------------\n\nTITLE: Testing Size Compatibility in list_cbind() Function in R\nDESCRIPTION: This snippet tests how list_cbind() handles data frames of incompatible sizes. It attempts to column-bind data frames with different numbers of rows, which should result in a recycling error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlist_cbind(list(df1, df3))\n```\n\n----------------------------------------\n\nTITLE: Testing Error Location Reporting in R purrr map_int()\nDESCRIPTION: Shows how map_int() reports the location of errors including index position and type coercion failures\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nmap_int(1:3, ~ fail_at_3(.x, 2:1))\nmap_int(1:3, ~ fail_at_3(.x, \"x\"))\nmap(1:3, ~ fail_at_3(.x, stop(\"Doesn't work\")))\n```\n\n----------------------------------------\n\nTITLE: Migrating from rerun() to map() with a Single Expression in R\nDESCRIPTION: Shows how to replace the deprecated rerun() function with map() when working with a single expression. The new approach uses map() with a sequence and an anonymous function.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-rerun.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\n# Previously\nrerun(5, rnorm(1))\n\n# Now\nmap(1:5, ~ rnorm(1))\n```\n\n----------------------------------------\n\nTITLE: Testing Type Enforcement in list_c() Function in R\nDESCRIPTION: This snippet demonstrates how list_c() handles type enforcement. It attempts to convert a character value to an integer type, which should fail with an appropriate error message.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlist_c(list(\"a\"), ptype = integer())\n```\n\n----------------------------------------\n\nTITLE: Using rerun() with Multiple Expressions in R\nDESCRIPTION: Example of using the deprecated rerun() function with multiple expressions (rnorm(1), rnorm(2)) to generate 5 samples of each. A warning is shown explaining the migration path.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-rerun.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n. <- rerun(5, rnorm(1), rnorm(2))\n```\n\n----------------------------------------\n\nTITLE: Testing Named Vector Error Handling in R purrr map_int()\nDESCRIPTION: Demonstrates how map_int() includes named vector information in error messages when present\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nmap_int(c(a = 1, b = 2, c = 3), ~ fail_at_3(.x, stop(\"Error\")))\nmap_int(c(a = 1, b = 2, 3), ~ fail_at_3(.x, stop(\"Error\")))\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated invoke_map_chr() Function in R\nDESCRIPTION: Example of using the deprecated invoke_map_chr() function with a corresponding deprecation warning. The function should be replaced with map_chr() + exec() as of purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-invoke.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\n. <- invoke_map_chr(identity, list())\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated invoke_map_int() Function in R\nDESCRIPTION: Example of using the deprecated invoke_map_int() function with a corresponding deprecation warning. The function should be replaced with map_int() + exec() as of purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-invoke.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\n. <- invoke_map_int(identity, list())\n```\n\n----------------------------------------\n\nTITLE: Testing Quosure Squashing in Partial Function - R\nDESCRIPTION: Tests how partial() handles quosures in output printing, showing the simplified function representation with partially applied arguments.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/adverb-partial.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nfoo\n# Output:\n# <partialised>\n# function (...) \n# foo(y = 3, ...)\n```\n\n----------------------------------------\n\nTITLE: Testing zap() error handling in modify functions\nDESCRIPTION: Test cases showing how purrr handles attempts to use zap() in different contexts. The zap() function is intended to remove elements but can't be used with certain modify functions or to change output size.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/modify.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nmodify_at(1, 1, ~ zap())\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_at(list(1), 1, ~ zap())\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_at(data.frame(x = 1), 1, ~ zap())\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_at(lm(mpg ~ wt, data = mtcars), 1, ~ zap())\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated invoke_map() Function in R\nDESCRIPTION: Example of using the deprecated invoke_map() function with a corresponding deprecation warning. The function should be replaced with map() + exec() as of purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-invoke.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\n. <- invoke_map(identity, list())\n```\n\n----------------------------------------\n\nTITLE: Testing Input Recycling Error Handling in pmap()\nDESCRIPTION: This code snippet demonstrates how pmap() handles errors when inputs of incompatible sizes are provided. It shows error messages when vectors of different lengths cannot be recycled to match each other.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pmap.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\npmap(list(1:2, 1:3), `+`)\n```\n\nLANGUAGE: r\nCODE:\n```\npmap(list(1:2, integer()), `+`)\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated flatten_raw Function in R\nDESCRIPTION: Demonstrates the use of the deprecated flatten_raw() function and the resulting warning message. The function is deprecated in purrr 1.0.0, but no specific alternative is suggested in the warning.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-raw.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n. <- flatten_raw(list())\n```\n\n----------------------------------------\n\nTITLE: Function Accessor Error Handling in pluck Function in R\nDESCRIPTION: Shows error handling when using function accessors with the pluck() function. Functions with incorrect signatures or missing arguments trigger appropriate errors.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_7\n\nLANGUAGE: R\nCODE:\n```\npluck(1:3, function() NULL)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(1:3, function(x, y) y)\n```\n\n----------------------------------------\n\nTITLE: Testing Column Type Compatibility in list_rbind() Function in R\nDESCRIPTION: This snippet tests how list_rbind() handles data frames with incompatible column types. It attempts to row-bind data frames where the same column has different types, which should result in an error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nlist_rbind(list(df1, df3))\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated splice() Function in R with purrr\nDESCRIPTION: This code snippet demonstrates the use of the deprecated splice() function from the purrr package in R. When executed, it triggers a warning message indicating that splice() is deprecated as of purrr 1.0.0 and suggests using list_flatten() as an alternative.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-splice.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n. <- splice()\n```\n\n----------------------------------------\n\nTITLE: Testing reduce2() with empty input\nDESCRIPTION: Tests that reduce2() throws an error when given an empty list without an init value. Like reduce(), reduce2() requires an initial value for empty inputs.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/reduce.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nreduce2(list())\n```\n\n----------------------------------------\n\nTITLE: Testing detect_index() with Deprecated .right Argument in R\nDESCRIPTION: Demonstrates the deprecation warning when using the .right argument in detect_index(), which has been replaced by the .dir argument since purrr 0.3.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/detect.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\n. <- detect_index(1:2, ~TRUE, .right = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Testing type conversion errors in modify functions\nDESCRIPTION: Test cases showing how purrr handles attempts to modify vectors with values of incompatible types. These examples demonstrate the error messages when trying to convert between different R data types.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/modify.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nmodify(1:3, ~\"foo\")\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_at(1:3, 1, ~\"foo\")\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_if(1:3, is_integer, ~\"foo\")\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify2(1:3, \"foo\", ~.y)\n```\n\n----------------------------------------\n\nTITLE: Testing Input Type Validation for List Functions with Numeric Input in R\nDESCRIPTION: This snippet tests how list functions validate their inputs. It passes a numeric value instead of a list to list_c(), list_rbind(), and list_cbind(), which should result in appropriate error messages.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_6\n\nLANGUAGE: r\nCODE:\n```\nlist_c(1)\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_rbind(1)\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_cbind(1)\n```\n\n----------------------------------------\n\nTITLE: Testing deprecated right-oriented reduction functions\nDESCRIPTION: Tests that deprecated right-oriented functions (reduce_right, reduce2_right, accumulate_right) issue appropriate deprecation warnings with suggestions for alternatives.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/reduce.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n. <- reduce_right(1:3, c)\n```\n\nLANGUAGE: r\nCODE:\n```\n. <- reduce2_right(1:3, 1:2, c)\n```\n\nLANGUAGE: r\nCODE:\n```\n. <- accumulate_right(1:3, c)\n```\n\n----------------------------------------\n\nTITLE: Index Type and Length Validation in pluck Function in R\nDESCRIPTION: Demonstrates validation of indices in the pluck() function, ensuring they have length 1 and are of the correct type. Various invalid index types trigger appropriate error messages.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_6\n\nLANGUAGE: R\nCODE:\n```\npluck(1, 1:2)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(1, integer())\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(1, NULL)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(1, TRUE)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(NULL, 1:2)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(NULL, TRUE)\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - New Problems\nDESCRIPTION: A markdown table showing 2 packages with new issues that emerged in dependency checks.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/revdep/README.md#2025-04-21_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n|package  |version |error  |warning |note     |\n|:--------|:-------|:------|:-------|:--------|\n|[meta](problems.md#meta)|8.0-2   |       |        |1 __+1__ |\n|[waywiser](problems.md#waywiser)|0.6.0   |__+1__ |        |1        |\n```\n\n----------------------------------------\n\nTITLE: Testing head_while with NA return value in R\nDESCRIPTION: This test verifies that head_while throws an appropriate error when the predicate function returns NA instead of a boolean value. The function should detect invalid predicate return values and provide clear error messages.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/head-tail.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nhead_while(1:3, ~NA)\n```\n\n----------------------------------------\n\nTITLE: Testing Integer Coercion Failures in R\nDESCRIPTION: Tests for coerce_int() function that attempt to coerce values of incorrect types to integer, verifying appropriate error messages are produced.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/coerce.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ncoerce_int(1.5)\n```\n\nLANGUAGE: r\nCODE:\n```\ncoerce_int(\"1\")\n```\n\n----------------------------------------\n\nTITLE: Method Dispatching in pluck Function in R\nDESCRIPTION: Tests error handling when pluck() dispatches on vector methods, including validation of length and handling of named indices on unnamed vectors.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_10\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, 1, 1)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, 1, \"b\", 1)\n```\n\n----------------------------------------\n\nTITLE: Testing insistently() function with invalid numeric rate parameter in R\nDESCRIPTION: This snippet tests the validation behavior of insistently() when provided with a numeric value for the rate parameter instead of a rate object. It expects an error message indicating that the rate must be a rate object, not a number.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/adverb-insistently.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ninsistently(mean, 10)\n```\n\n----------------------------------------\n\nTITLE: Testing Environment Capture in Coercion Errors with R\nDESCRIPTION: Tests that verify error messages capture the correct environment context when coercion happens, including through indirect function calls.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/coerce.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nmap_chr(1:4, identity)\n```\n\nLANGUAGE: r\nCODE:\n```\nindirect()\n```\n\n----------------------------------------\n\nTITLE: Testing Rate Delay Print Method in R\nDESCRIPTION: Demonstrates the print output format for rate_delay configuration with infinite max attempts and 20 second delay.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/rate.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nrate_delay(20, max_times = Inf)\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_element_length() with basic parameters\nDESCRIPTION: Shows how stop_bad_element_length() validates that a specific element has the expected length, throwing an error when the length is incorrect.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_7\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_element_length(1:3, 8, 10)\n```\n\n----------------------------------------\n\nTITLE: Testing Expression Coercion Failure in R\nDESCRIPTION: Test for coerce() function that attempts to coerce a list to an expression, verifying appropriate error message is produced.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/coerce.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\ncoerce(list(1), \"expression\")\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated Arguments in Partial Function - R\nDESCRIPTION: Demonstrates the deprecated .lazy, .env, and .first arguments in partial(), showing warning messages for each deprecated parameter.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/adverb-partial.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\n. <- partial(list, \"foo\", .lazy = TRUE)\n. <- partial(list, \"foo\", .env = env())\n. <- partial(list, \"foo\", .first = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_element_length() with recycle parameter\nDESCRIPTION: Demonstrates how stop_bad_element_length() can use the recycle parameter to allow elements of length 1 as valid, which is useful for operations that recycle vectors.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_10\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_element_length(1:3, 8, 10, arg = \".foo\", what = \"Result\", recycle = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Testing list_transpose with invalid ptype parameter\nDESCRIPTION: Tests showing errors when using list_transpose with incompatible ptype parameters. The first example tries to convert a double to a list, and the second shows a length mismatch error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-transpose.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(x, ptype = list())\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(x, ptype = list(integer()))\n```\n\n----------------------------------------\n\nTITLE: Using stop_bad_element_type() with custom actual type\nDESCRIPTION: Demonstrates stop_bad_element_type() with a custom description for the actual type, though this parameter doesn't appear to affect the error message in this example.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/conditions.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nstop_bad_element_type(1:3, 3, \"a foobaz\", actual = \"a quux\")\n```\n\n----------------------------------------\n\nTITLE: Testing detect() with Deprecated .right Argument in R\nDESCRIPTION: Demonstrates the deprecation warning when using the .right argument in detect(), which has been replaced by the .dir argument since purrr 0.3.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/detect.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n. <- detect(1:2, ~TRUE, .right = TRUE)\n```\n\n----------------------------------------\n\nTITLE: Testing list_transpose with invalid simplify parameter names\nDESCRIPTION: Test showing an error when providing unknown names in the simplify parameter.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-transpose.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(x, simplify = list(c = FALSE))\n```\n\n----------------------------------------\n\nTITLE: Replacing map3() and walk3() in R (purrr)\nDESCRIPTION: The map3() and walk3() functions are deprecated; users should now use map_n() or pwalk() with lists of arguments.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_20\n\nLANGUAGE: r\nCODE:\n```\nmap3(x, y, z) -> map_n(list(x, y, z)); walk3(x, y, z) -> pwalk(list(x, y, z))\n```\n\n----------------------------------------\n\nTITLE: Testing Element Type Validation in Row and Column Binding Functions in R\nDESCRIPTION: This snippet tests how list_rbind() and list_cbind() validate the types of elements within the input list. It passes a list containing non-data frame elements, which should result in errors specifying which elements are problematic.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-combine.md#2025-04-21_snippet_8\n\nLANGUAGE: r\nCODE:\n```\nlist_rbind(list(1, mtcars, 3))\n```\n\nLANGUAGE: r\nCODE:\n```\nlist_cbind(list(1, mtcars, 3))\n```\n\n----------------------------------------\n\nTITLE: Testing list_transpose with invalid ptype parameter names\nDESCRIPTION: Test showing an error when providing unknown names in the ptype parameter.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-transpose.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nlist_transpose(x, ptype = list(c = integer()))\n```\n\n----------------------------------------\n\nTITLE: Special Number Validation in chuck Function in R\nDESCRIPTION: Shows how the chuck() function handles special numeric values like NA, NaN, Inf, and -Inf. Each special value triggers an appropriate error message indicating that indices must be finite.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, NA_integer_)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, NA_real_)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, NaN)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, Inf)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, -Inf)\n```\n\n----------------------------------------\n\nTITLE: Testing map_depth with Excessive Depth\nDESCRIPTION: Tests map_depth function when provided depth exceeds the nesting level of the list, resulting in an error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-depth.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmap_depth(x1, 6, length)\n```\n\n----------------------------------------\n\nTITLE: Name-based Indexing Validation in chuck Function in R\nDESCRIPTION: Tests error handling for name-based indexing in chuck() function, including non-existent names, NA names, and empty string names. Each case produces an appropriate error message.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_5\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, \"b\")\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, NA_character_)\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, \"\")\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, \"a\")\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, \"\")\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(x, NA_character_)\n```\n\n----------------------------------------\n\nTITLE: S4 Object Indexing in pluck/chuck Functions in R\nDESCRIPTION: Demonstrates error handling when plucking or chucking from S4 objects, including non-existent slots, NA names, and invalid index types.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck.md#2025-04-21_snippet_9\n\nLANGUAGE: R\nCODE:\n```\nchuck(A, \"b\")\n```\n\nLANGUAGE: R\nCODE:\n```\nchuck(A, NA_character_)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(A, 1)\n```\n\nLANGUAGE: R\nCODE:\n```\npluck(A, letters)\n```\n\n----------------------------------------\n\nTITLE: Testing map_depth with Insufficient List Depth\nDESCRIPTION: Tests map_depth when attempting to reach a depth level that doesn't exist in the provided list, resulting in an error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-depth.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nmap_depth(x, 2, class)\n```\n\n----------------------------------------\n\nTITLE: Testing unsupported input types in modify functions\nDESCRIPTION: Test cases showing error messages when attempting to use modify functions with unsupported input types (functions in this case). These examples demonstrate input validation in purrr's modify family of functions.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/modify.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\nmodify(mean, identity)\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_if(mean, TRUE, identity)\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_at(mean, \"x\", identity)\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify2(mean, 1, identity)\n```\n\n----------------------------------------\n\nTITLE: Testing modify_depth with Excessive Depth\nDESCRIPTION: Tests modify_depth function when the specified depth exceeds the nesting level of the list, resulting in an error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-depth.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nmodify_depth(x1, 5, length)\n```\n\n----------------------------------------\n\nTITLE: Testing Depth Parameter Validation\nDESCRIPTION: Tests the check_depth function with an invalid input (a function instead of a number), resulting in a type validation error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-depth.md#2025-04-21_snippet_6\n\nLANGUAGE: r\nCODE:\n```\ncheck_depth(mean)\n```\n\n----------------------------------------\n\nTITLE: Testing modify_tree Function with Invalid is_node Parameter in R\nDESCRIPTION: This code snippet demonstrates two error cases for the modify_tree function. The first case tests when is_node is a function that returns a number instead of a boolean. The second case tests when is_node is a numeric value instead of a function.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/modify-tree.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nmodify_tree(list(), is_node = ~1)\n```\n\nLANGUAGE: r\nCODE:\n```\nmodify_tree(list(), is_node = 1)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for rdunif with Multi-Length 'b' Argument in R\nDESCRIPTION: This snippet demonstrates the error when rdunif is called with an argument 'b' that has length greater than 1.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-utils.md#2025-04-21_snippet_4\n\nLANGUAGE: R\nCODE:\n```\nrdunif(1000, c(2, 3), 2)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for rdunif with Non-Numeric Arguments in R\nDESCRIPTION: This snippet shows the error thrown when rdunif is called with a non-numeric argument 'a'.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-utils.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\nrdunif(1000, 1, \"a\")\n```\n\n----------------------------------------\n\nTITLE: Testing Input Validation for List Requirements in pmap()\nDESCRIPTION: This code snippet tests pmap()'s validation that inputs must be lists of vectors. It shows the error messages when trying to use an environment directly or a list containing an environment.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pmap.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\npmap(environment(), identity)\n```\n\nLANGUAGE: r\nCODE:\n```\npmap(list(environment()), identity)\n```\n\n----------------------------------------\n\nTITLE: Testing prepend() error with pipe operator and invalid before parameter\nDESCRIPTION: This snippet demonstrates using the pipe operator with prepend() and a 'before' parameter value of 0, which triggers an error because 'before' must be NULL or between 1 and the length of x.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-prepend.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nx %>% prepend(4, before = 0)\n```\n\n----------------------------------------\n\nTITLE: Testing Non-Logical Filter Return in cross3 Function (R)\nDESCRIPTION: This snippet tests the error handling when a filter function returns a non-logical value (integer in this case) in the cross3 function.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-cross.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\ncross3(1:3, 1:3, 1:3, .filter = filter)\n```\n\n----------------------------------------\n\nTITLE: Testing tail_while with vector return value in R\nDESCRIPTION: This test verifies that tail_while throws an appropriate error when the predicate function returns a logical vector instead of a single boolean value. The function expects predicates to return exactly one TRUE or FALSE value.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/head-tail.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ntail_while(1:3, ~ c(TRUE, FALSE))\n```\n\n----------------------------------------\n\nTITLE: Testing deprecated prepend() function with deprecation warning in R\nDESCRIPTION: This snippet demonstrates that the prepend() function is deprecated in purrr 1.0.0 and shows the warning message advising users to use append(after = 0) instead.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-prepend.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n. <- prepend(1, 2)\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated map_raw Function in R\nDESCRIPTION: Demonstrates the use of the deprecated map_raw() function and the resulting warning message. The function is deprecated in purrr 1.0.0, and users are advised to use map_vec() instead.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-raw.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n. <- map_raw(list(), ~.x)\n```\n\n----------------------------------------\n\nTITLE: Testing Invalid .else Parameter in lmap\nDESCRIPTION: Tests error handling when lmap receives an environment instead of a function for the .else parameter.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/lmap.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\nlmap(list(1), ~1, .else = environment())\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated map2_raw Function in R\nDESCRIPTION: Demonstrates the use of the deprecated map2_raw() function and the resulting warning message. The function is deprecated in purrr 1.0.0, and users are advised to use map2_vec() instead.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-raw.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\n. <- map2_raw(list(), list(), ~.x)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling in 'when' Function with Pipe Operator in R\nDESCRIPTION: This snippet tests the error handling of the 'when' function when used with the pipe operator. It demonstrates the case where named arguments have no matching conditions, resulting in an error.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-when.md#2025-04-21_snippet_1\n\nLANGUAGE: R\nCODE:\n```\n1:5 %>% when(a = sum(.) < 5 ~ 3)\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated pmap_raw Function in R\nDESCRIPTION: Demonstrates the use of the deprecated pmap_raw() function and the resulting warning message. The function is deprecated in purrr 1.0.0, and users are advised to use pmap_vec() instead.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-raw.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\n. <- pmap_raw(list(), ~.x)\n```\n\n----------------------------------------\n\nTITLE: Testing Error Handling for list_flatten with Non-List Input in R\nDESCRIPTION: This snippet tests the error handling of the list_flatten function when provided with an integer vector instead of a list. The function correctly throws an error stating that 'x' must be a list, not an integer vector.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-flatten.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nlist_flatten(1:2)\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecated 'when' Function in R\nDESCRIPTION: This snippet demonstrates the usage of the deprecated 'when' function from the purrr package. It applies a condition to a vector and assigns values based on the condition. The code also captures the deprecation warning.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-when.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\n. <- when(1:5 < 3 ~ 1, ~0)\n```\n\n----------------------------------------\n\nTITLE: Using deprecated list_along function in R purrr package\nDESCRIPTION: Example of using the deprecated list_along() function with a warning message indicating it was deprecated in purrr 1.0.0. The warning recommends using rep_along(x, list()) as an alternative.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-along.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n. <- list_along(1:4)\n```\n\n----------------------------------------\n\nTITLE: Using Defunct at_depth() Function in R\nDESCRIPTION: This snippet shows what happens when attempting to use the at_depth() function that has been removed from the purrr package. The function was deprecated in version 0.3.0 and is now completely defunct, with users directed to use map_depth() instead.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-map.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nat_depth()\n```\n\n----------------------------------------\n\nTITLE: Testing Input Validation for Slowly Function in R\nDESCRIPTION: This code tests the error handling of the 'slowly' function when provided with an invalid input. It expects an error to be thrown when a number is passed instead of a rate object for the 'rate' parameter.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/adverb-slowly.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\nslowly(mean, 10)\n```\n\n----------------------------------------\n\nTITLE: Testing detect_index() with Invalid Predicate Function in R\nDESCRIPTION: Shows error handling when using detect_index() with is.na() predicate function that returns a logical vector instead of a single TRUE/FALSE value.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/detect.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ndetect_index(list(1:2, 2), is.na)\n```\n\n----------------------------------------\n\nTITLE: Testing transpose() with non-vector element in R\nDESCRIPTION: This code shows the error when transpose() is called with a list containing an environment object. The function requires all elements in the list to be vectors, not environments.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-transpose.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\ntranspose(list(environment()))\n```\n\n----------------------------------------\n\nTITLE: Testing Input Validation in Partial Function - R\nDESCRIPTION: Tests input validation in partial() function, showing error handling when passing invalid input (number instead of function).\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/adverb-partial.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\npartial(1)\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecation Warning for tidyselect 'at' in purrr (R)\nDESCRIPTION: This snippet demonstrates the deprecation warning for using vars() in the .at argument of where_at() function. It shows how the warning is triggered when using the deprecated syntax.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/utils.md#2025-04-21_snippet_2\n\nLANGUAGE: R\nCODE:\n```\n. <- where_at(data.frame(x = 1), vars(\"x\"), user_env = globalenv())\n```\n\n----------------------------------------\n\nTITLE: Handling Deprecated update_list() Function in R\nDESCRIPTION: Demonstrates that using the update_list() function produces a deprecation warning since it was deprecated in purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/list-modify.md#2025-04-21_snippet_5\n\nLANGUAGE: r\nCODE:\n```\n. <- update_list(list())\n```\n\n----------------------------------------\n\nTITLE: Testing Vector Input Requirements in map2\nDESCRIPTION: Tests that map2 functions properly validate inputs and reject non-vector inputs like environments.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map2.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nmap2(environment(), \"a\", identity)\n```\n\nLANGUAGE: r\nCODE:\n```\nmap2(\"a\", environment(), \"a\", identity)\n```\n\n----------------------------------------\n\nTITLE: Testing Deprecation Warnings for Pairlists, Expressions, and Calls in purrr (R)\nDESCRIPTION: These snippets show deprecation warnings for using pairlists, expressions, and calls in map functions of purrr. They demonstrate how these data types are no longer supported and suggest using as.list() for explicit coercion.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/utils.md#2025-04-21_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nx <- vctrs_vec_compat(expression(1, 2), globalenv())\nx <- vctrs_vec_compat(pairlist(1, 2), globalenv())\nx <- vctrs_vec_compat(quote(f(a, b = 1)), globalenv())\n```\n\n----------------------------------------\n\nTITLE: Testing transpose() with non-list input in R\nDESCRIPTION: This code demonstrates the error when transpose() is called with an integer vector instead of a list. The function expects its input parameter to be a list.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-transpose.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\ntranspose(1:3)\n```\n\n----------------------------------------\n\nTITLE: Running R Command for Package Details - Waywiser\nDESCRIPTION: Command to retrieve more details about the waywiser package using the revdepcheck package.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/revdep/problems.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nrevdepcheck::cloud_details(, \"waywiser\")\n```\n\n----------------------------------------\n\nTITLE: Testing transpose() with expression vectors in R\nDESCRIPTION: This code shows the error when transpose() is called with a list containing an expression vector. The function cannot transpose expression vectors, as they are a special type in R that doesn't work with the transpose operation.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-transpose.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\ntranspose(list(expression(a)))\n```\n\n----------------------------------------\n\nTITLE: Running R Command for Package Details\nDESCRIPTION: Command to retrieve more details about the meta package using the revdepcheck package.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/revdep/problems.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nrevdepcheck::cloud_details(, \"meta\")\n```\n\n----------------------------------------\n\nTITLE: Markdown Table - Failed Dependency Checks\nDESCRIPTION: A markdown table listing 51 packages that failed dependency checks with their versions and issue types.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/revdep/README.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n|package          |version |error |warning |note |\n|:----------------|:-------|:-----|:-------|:----|\n|AovBay           |0.1.0   |1     |        |     |\n|arealDB          |0.9.4   |1     |        |     |\n|autoReg          |?       |      |        |     |\n```\n\n----------------------------------------\n\nTITLE: Testing flatten() with non-list input\nDESCRIPTION: Tests that flatten() properly errors when given a number instead of a list input. The function should throw an error indicating that .x must be a list, not a number.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-flatten.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\nflatten(1)\n```\n\n----------------------------------------\n\nTITLE: Displaying Reverse Dependency Check Results in Markdown\nDESCRIPTION: This code snippet shows the formatted results of a reverse dependency check for the purrr package. It includes the number of packages checked, new problems encountered, and a list of packages that failed to check.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/revdep/cran.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n## revdepcheck results\n\nWe checked 1943 reverse dependencies (1937 from CRAN + 6 from Bioconductor), comparing R CMD check results across CRAN and dev versions of this package.\n\n * We saw 2 new problems\n * We failed to check 45 packages\n\nIssues with CRAN packages are summarised below.\n\n### New problems\n(This reports the first line of each new failure)\n\n* meta\n  checking installed package size ... NOTE\n\n* waywiser\n  checking running R code from vignettes ... ERROR\n\n### Failed to check\n\n* AovBay           (NA)\n* arealDB          (NA)\n* autoReg          (NA)\n* bayesCT          (NA)\n* bspcov           (NA)\n* censored         (NA)\n* CGPfunctions     (NA)\n* CSCNet           (NA)\n* dartR.base       (NA)\n* dartR.popgen     (NA)\n* deeptrafo        (NA)\n* DR.SC            (NA)\n* epizootic        (NA)\n* GseaVis          (NA)\n* hettx            (NA)\n* immcp            (NA)\n* invivoPKfit      (NA)\n* jsmodule         (NA)\n* lnmixsurv        (NA)\n* lsirm12pl        (NA)\n* metajam          (NA)\n* miWQS            (NA)\n* multinma         (NA)\n* nesRdata         (NA)\n* obliqueRSF       (NA)\n* ontologics       (NA)\n* OVtool           (NA)\n* pammtools        (NA)\n* pathwayTMB       (NA)\n* pencal           (NA)\n* quid             (NA)\n* rdflib           (NA)\n* robber           (NA)\n* RVA              (NA)\n* scCustomize      (NA)\n* scpi             (NA)\n* SCpubr           (NA)\n* SEERaBomb        (NA)\n* SimplyAgree      (NA)\n* ssdGSA           (NA)\n* SSHAARP          (NA)\n* stabiliser       (NA)\n* tidyseurat       (NA)\n* TriDimRegression (NA)\n* WRTDStidal       (NA)\n```\n\n----------------------------------------\n\nTITLE: Testing flatten_dbl() with non-list input\nDESCRIPTION: Tests that flatten_dbl() properly errors when given a number instead of a list input. The function should throw an error indicating that .x must be a list, not a number.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-flatten.md#2025-04-21_snippet_1\n\nLANGUAGE: r\nCODE:\n```\nflatten_dbl(1)\n```\n\n----------------------------------------\n\nTITLE: Testing flatten() with expression in list\nDESCRIPTION: Tests that flatten() properly errors when given a list containing an expression vector. The function should throw an error indicating that the list item must be a vector, not an expression vector.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-flatten.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nflatten(list(expression(a)))\n```\n\n----------------------------------------\n\nTITLE: Testing flatten_lgl() with non-list input\nDESCRIPTION: Tests that flatten_lgl() properly errors when given a number instead of a list input. The function should throw an error indicating that .x must be a list, not a number.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/superseded-flatten.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\nflatten_lgl(1)\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated vec_depth() Function in R\nDESCRIPTION: This snippet demonstrates the use of the deprecated vec_depth() function from the purrr package and shows the resulting deprecation warning. The function is being called on an empty list, and users are advised to use pluck_depth() instead.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/pluck-depth.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n. <- vec_depth(list())\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated imap_raw Function in R\nDESCRIPTION: Demonstrates the use of the deprecated imap_raw() function and the resulting warning message. The function is deprecated in purrr 1.0.0, and users are advised to use imap_vec() instead.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/map-raw.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n. <- imap_raw(list(), ~.x)\n```\n\n----------------------------------------\n\nTITLE: Error Handling for rdunif with Non-Numeric 'b' Argument in R\nDESCRIPTION: This snippet shows the error thrown when rdunif is called with a non-numeric argument 'b'.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-utils.md#2025-04-21_snippet_3\n\nLANGUAGE: R\nCODE:\n```\nrdunif(1000, FALSE, 2)\n```\n\n----------------------------------------\n\nTITLE: Testing prepend() error when before parameter exceeds list length\nDESCRIPTION: This snippet demonstrates using the pipe operator with prepend() and a 'before' parameter value of 4, which triggers an error because the value exceeds the length of x.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-prepend.md#2025-04-21_snippet_3\n\nLANGUAGE: r\nCODE:\n```\nx %>% prepend(4, before = 4)\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated invoke() Function in R\nDESCRIPTION: Example of using the deprecated invoke() function with a corresponding deprecation warning. The function should be replaced with exec() as of purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-invoke.md#2025-04-21_snippet_0\n\nLANGUAGE: r\nCODE:\n```\n. <- invoke(identity, 1)\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated invoke_map_lgl() Function in R\nDESCRIPTION: Example of using the deprecated invoke_map_lgl() function with a corresponding deprecation warning. The function should be replaced with map_lgl() + exec() as of purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-invoke.md#2025-04-21_snippet_2\n\nLANGUAGE: r\nCODE:\n```\n. <- invoke_map_lgl(identity, list())\n```\n\n----------------------------------------\n\nTITLE: Using Deprecated invoke_map_dbl() Function in R\nDESCRIPTION: Example of using the deprecated invoke_map_dbl() function with a corresponding deprecation warning. The function should be replaced with map_dbl() + exec() as of purrr 1.0.0.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-invoke.md#2025-04-21_snippet_4\n\nLANGUAGE: r\nCODE:\n```\n. <- invoke_map_dbl(identity, list())\n```\n\n----------------------------------------\n\nTITLE: Testing Filter Predicate Vector Return in cross2 Function (R)\nDESCRIPTION: This snippet tests the error handling when a filter predicate returns a logical vector instead of a single boolean in the cross2 function.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/tests/testthat/_snaps/deprec-cross.md#2025-04-21_snippet_0\n\nLANGUAGE: R\nCODE:\n```\ncross2(1:3, 1:3, .filter = ~ c(TRUE, TRUE))\n```\n\n----------------------------------------\n\nTITLE: Replacing flatmap() with map() and flatten() in R (purrr)\nDESCRIPTION: The flatmap() function is deprecated; users should now use map() followed by the appropriate flatten() function.\nSOURCE: https://github.com/tidyverse/purrr/blob/main/NEWS.md#2025-04-21_snippet_17\n\nLANGUAGE: r\nCODE:\n```\nflatmap() -> use map() followed by the appropriate flatten()\n```"
  }
]