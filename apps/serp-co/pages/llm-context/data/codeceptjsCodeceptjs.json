[
  {
    "owner": "codeceptjs",
    "repo": "codeceptjs",
    "content": "TITLE: Creating Dynamic CodeceptJS Configuration in JavaScript\nDESCRIPTION: This snippet shows how to create a dynamic CodeceptJS configuration using a JavaScript file (codecept.conf.js). It demonstrates loading environment variables and modularizing configuration components.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  helpers: {\n    WebDriver: {\n      // load variables from the environment and provide defaults\n      url: process.env.CODECEPT_URL || 'http://localhost:3000',\n\n      user: process.env.CLOUDSERVICE_USER,\n      key: process.env.CLOUDSERVICE_KEY,\n\n      coloredLogs: true,\n      waitForTimeout: 10000,\n    },\n  },\n\n  // don't build monolithic configs\n  mocha: require('./mocha.conf.js') || {},\n  include: {\n    I: './src/steps_file.js',\n    loginPage: './src/pages/login_page',\n    dashboardPage: new DashboardPage(),\n  },\n\n  // here goes config as it was in codecept.conf.ts\n  // ....\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Driven Tests in CodeceptJS\nDESCRIPTION: Shows how to create and execute data-driven tests using DataTable in CodeceptJS. Demonstrates creating test scenarios that run with different data sets.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/advanced.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet accounts = new DataTable(['login', 'password']);\naccounts.add(['davert', '123456']);\naccounts.add(['admin', '123456']);\n\naccounts.xadd(['admin', '23456'])\n\nData(accounts).Scenario('Test Login', ({ I, current }) => {\n  I.fillField('Username', current.login);\n  I.fillField('Password', current.password);\n  I.click('Sign In');\n  I.see('Welcome '+ current.login);\n});\n```\n\n----------------------------------------\n\nTITLE: Navigating to Web Pages in CodeceptJS (JavaScript)\nDESCRIPTION: Shows how to navigate to different web pages using the amOnPage method in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n```\n\n----------------------------------------\n\nTITLE: Configuring OpenAI GPT for CodeceptJS\nDESCRIPTION: Sample configuration for using OpenAI's GPT model in CodeceptJS. This setup requires the 'openai' package and an OpenAI API key set as an environment variable.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  request: async messages => {\n    const OpenAI = require('openai')\n    const openai = new OpenAI({ apiKey: process.env['OPENAI_API_KEY'] })\n\n    const completion = await openai.chat.completions.create({\n      model: 'gpt-3.5-turbo',\n      messages,\n    })\n\n    return completion?.choices[0]?.message?.content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the Secret Function to Mask Sensitive Data\nDESCRIPTION: Demonstrates how to use the 'secret' function to mask sensitive fields in objects when sending requests. This prevents sensitive data like passwords from appearing in logs and reports.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendPostRequest('/auth', secret({ name: 'jon', password: '123456' }, 'password'))\n```\n\n----------------------------------------\n\nTITLE: Complete CodeceptJS checkout test scenario\nDESCRIPTION: A full example of a CodeceptJS test scenario for testing a checkout process, including product selection, form filling, and order verification.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('test the checkout form', async ({ I }) => {\n  // we select one product and switched to checkout project\n  I.amOnPage('/');\n  I.click('Coffee Cup');\n  I.click('Purchase');\n  I.click('Checkout');\n\n  // fill in the shipping address\n  I.fillField('First Name', 'John');\n  I.fillField('Last Name', 'Doe');\n  I.fillField('Address', '123 Main St.');\n  I.fillField('City', 'New York');\n  I.selectOption('State', 'New York');\n  I.fillField('Zip Code', '10001');\n\n  // select a payment method\n  I.click('#credit-card-option');\n  I.fillField('Card Number', '1234-5678-9012-3456');\n  I.fillField('Expiration Date', '12/22');\n  I.fillField('Security Code', '123');\n\n  // click the checkout button\n  I.click('Checkout');\n\n  // verify that the checkout was successful\n  I.see('Your order has been placed successfully!');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Test Execution in CodeceptJS\nDESCRIPTION: Configuration for running tests in parallel using multiple processes. Specifies the number of chunks (processes) and which browsers to use for all tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\n\"multiple\": {\n  \"parallel\": {\n    // run in 2 processes\n    \"chunks\": 2,\n    // run all tests in chrome\n    \"browsers\": [\"chrome\"]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Retry Mechanism for Steps in CodeceptJS\nDESCRIPTION: Examples of using the retry mechanism to handle flaky tests by retrying individual steps with customizable retry counts, timeouts, and conditional retries based on error messages.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\n// retry action once on failure\nI.retry().see('Hello')\n\n// retry action 3 times on failure\nI.retry(3).see('Hello')\n\n// retry action 3 times waiting for 0.1 second before next try\nI.retry({ retries: 3, minTimeout: 100 }).see('Hello')\n\n// retry action 3 times waiting no more than 3 seconds for last retry\nI.retry({ retries: 3, maxTimeout: 3000 }).see('Hello')\n\n// retry 2 times if error with message 'Node not visible' happens\nI.retry({\n  retries: 2,\n  when: err => err.message === 'Node not visible',\n}).seeElement('#user')\n```\n\n----------------------------------------\n\nTITLE: Sending GET Request in CodeceptJS REST Helper\nDESCRIPTION: Example of sending a GET request using the REST helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendGetRequest('/api/users.json');\n```\n\n----------------------------------------\n\nTITLE: Querying GPT About a Specific Page Fragment in JavaScript\nDESCRIPTION: Shows how to use the askGptOnPageFragment method to ask GPT about a specific part of the page. This method sends only the selected HTML fragment to GPT, allowing for more focused queries.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/OpenAI.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.askGptOnPageFragment('describe features of this screen', '.screen');\n```\n\n----------------------------------------\n\nTITLE: Simplified Test Scenario in CodeceptJS\nDESCRIPTION: Illustrates a simplified test scenario using autoLogin, ApiDataFactory, and page objects to focus on the core test functionality.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('editing a metric', async ({ I, loginAs, metricPage }) => {\n  // login via autoLogin\n  loginAs('admin');\n  // create data with ApiDataFactory\n  const metric = await I.have('metric', { type: 'memory', duration: 'day' })\n  // use page object to open a page\n  metricPage.open(metric.id);\n  I.click('Edit');\n  I.see('Editing Metric');\n  // using a custom step\n  I.selectFromDropdown('duration', 'week');\n  I.click('Save');\n  I.see('Duration: Week', '.summary');\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Playwright API in CodeceptJS Tests\nDESCRIPTION: This code demonstrates how to access the Playwright API inside a CodeceptJS test using the 'usePlaywrightTo' method, allowing direct interaction with Playwright objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePlaywrightTo('emulate offline mode', async ({ browser, browserContext, page }) => {\n  // use browser, page, context objects inside this function\n  await browserContext.setOffline(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Using CSS selector with CodeceptJS click action\nDESCRIPTION: Example of using a CSS selector to locate and click on a specific element in a CodeceptJS test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nI.click('div.products a.product-name[title=\"Coffee Cup\"]');\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeceptJS\nDESCRIPTION: Initialize CodeceptJS in an existing NPM project and install required dependencies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/installation.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs init\n```\n\n----------------------------------------\n\nTITLE: Implementing Before/After Hooks in CodeceptJS\nDESCRIPTION: Shows how to use Before and Background hooks for common test preparation steps like page navigation. Includes example scenarios demonstrating form testing and title verification.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('CodeceptJS Demonstration')\n\nBefore(({ I }) => {\n  // or Background\n  I.amOnPage('/documentation')\n})\n\nScenario('test some forms', ({ I }) => {\n  I.click('Create User')\n  I.see('User is valid')\n  I.dontSeeInCurrentUrl('/documentation')\n})\n\nScenario('test title', ({ I }) => {\n  I.seeInTitle('Example application')\n})\n```\n\n----------------------------------------\n\nTITLE: Form Filling Test Example - Using Labels\nDESCRIPTION: Shows how to interact with form elements using label text to locate fields, demonstrating filling input fields, selecting options, and submitting forms.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.fillField('Name', 'Miles')\nI.fillField('user[email]', 'miles@davis.com')\nI.selectOption('Role', 'Admin')\nI.checkOption('Accept')\nI.click('Save')\n```\n\n----------------------------------------\n\nTITLE: Implementing a Checkout Page Object in CodeceptJS\nDESCRIPTION: Example of a Checkout Page Object implementation in CodeceptJS, including methods for filling shipping address, credit card details, and completing checkout.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I } = inject();\n\nmodule.exports = {\n\n  fillShippingAddress(name, address, city, state, zip) {\n    I.fillField('Name', name);\n    I.fillField('Address', address);\n    I.fillField('City', city);\n    I.fillField('State', state);\n    I.fillField('Zip', zip);\n  },\n\n  fillValidCreditCard() {\n    I.click('#credit-card-option');\n    I.fillField('Card Number', '1234-5678-9012-3456');\n    I.fillField('Expiration Date', '12/22');\n    I.fillField('Security Code', '123');\n  },\n\n  checkout() {\n    I.click('Checkout');\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CodeceptJS Test Example\nDESCRIPTION: Demonstrates the basic structure of a CodeceptJS test using BDD-style syntax. Shows how to define a feature and scenario to check a welcome page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('CodeceptJS demo')\n\nScenario('check Welcome page on site', ({ I }) => {\n  I.amOnPage('/')\n  I.see('Welcome')\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Conditional Retries in CodeceptJS Custom Helper\nDESCRIPTION: Example of implementing conditional retries in a CodeceptJS custom helper to handle specific errors. This demonstrates how to use the global promise recorder to retry steps on certain conditions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n_before() {\n  const recorder = require('codeceptjs').recorder;\n  recorder.retry({\n    retries: 2,\n    when: err => err.message.indexOf('Cannot find context with specified id') > -1,\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Object Pattern in CodeceptJS\nDESCRIPTION: Example of a page object implementation with field selectors and helper methods for form interactions. Shows how to structure page objects for maintainable test code.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I } = inject()\n\nmodule.exports = {\n  fields: {\n    email: '#user_basic_email',\n    password: '#user_basic_password',\n  },\n  submitButton: { css: '#new_user_basic input[type=submit]' },\n\n  sendForm(email, password) {\n    I.fillField(this.fields.email, email)\n    I.fillField(this.fields.password, password)\n    I.click(this.submitButton)\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Dynamic Configuration in CodeceptJS\nDESCRIPTION: Shows how to dynamically configure test scenarios and features with different settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/advanced.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('should be executed in firefox', ({ I }) => {\n  // I.amOnPage(..)\n}).config({ browser: 'firefox' })\n\nScenario('should create data via v2 version of API', ({ I }) => {\n  // I.amOnPage(..)\n}).config('REST', { endpoint: 'https://api.mysite.com/v2' })\n```\n\n----------------------------------------\n\nTITLE: Sending GraphQL Mutations\nDESCRIPTION: Example of sending a GraphQL mutation with variables to create a user.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQL.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendMutation(`\n      mutation createUser($user: UserInput!) {\n         createUser(user: $user) {\n           id\n           name\n           email\n         }\n       }\n   `,\n  { user: {\n      name: 'John Doe',\n      email: 'john@xmail.com'\n    }\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Creating a Todo Item Test in CodeceptJS\nDESCRIPTION: An example of a CodeceptJS test that creates a todo item in a TodoMVC application, demonstrating various actions and assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('TodoMVC');\n\nScenario('create todo item', ({ I }) => {\n  I.amOnPage('/examples/vue/');\n  I.waitForElement('.new-todo');\n  I.fillField('.new-todo', 'Write a test')\n  I.pressKey('Enter');\n  I.see('1 item left', '.todo-count');\n});\n```\n\n----------------------------------------\n\nTITLE: Enabling Device Emulation in CodeceptJS with Playwright\nDESCRIPTION: This code shows how to enable device emulation in CodeceptJS globally using Playwright's predefined devices list. It demonstrates emulating an iPhone 6 for all tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nconst { devices } = require('playwright');\n\nhelpers: {\n  Playwright: {\n    // regular config goes here\n    emulate: devices['iPhone 6'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Locators in CodeceptJS\nDESCRIPTION: Shows how to implement custom locator strategies in CodeceptJS using the internal API. This example demonstrates creating custom strict locators and custom string locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/locators.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncodeceptjs.locator.addFilter((providedLocator, locatorObj) => {\n  if (providedLocator.data) {\n    locatorObj.type = 'css';\n    locatorObj.value = `[data-element=${providedLocator.data}]`\n  }\n});\n\nI.click({ data: 'user-login' });\n\ncodecepts.locator.addFilter((providedLocator, locatorObj) => {\n    if (typeof providedLocator === 'string') {\n      if (providedLocator[0] === '=') {\n        locatorObj.value = `.//*[text()=\"${providedLocator.substring(1)}\"]`;\n        locatorObj.type = 'xpath';\n      }\n    }\n});\n\nI.click('=Login');\n```\n\n----------------------------------------\n\nTITLE: Checking Input Field Values with CodeceptJS\nDESCRIPTION: Uses the seeInField method to verify that a given input field or textarea equals a specific value. Fields can be located by label text, name attribute, CSS, or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n```\n\n----------------------------------------\n\nTITLE: Mocking Network Traffic in CodeceptJS\nDESCRIPTION: Intercepts and mocks network requests using Playwright's route handling.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nI.mockRoute(/(.png$)|(.jpg$)/, route => route.abort());\n\nI.mockTraffic('/api/users/1', '{ id: 1, name: \\'John Doe\\' }');\nI.mockTraffic('/api/users/*', JSON.stringify({ id: 1, name: 'John Doe' }));\nI.mockTraffic([/^https://api.example.com/v1/, 'https://api.example.com/v2/**'], 'Internal Server Error', 'text/html');\n```\n\n----------------------------------------\n\nTITLE: Basic API Testing with CodeceptJS\nDESCRIPTION: Demonstrates basic API testing features including sending GET requests and performing assertions on the response.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendGetRequest('/users/1');\n// returns { \"user\": { \"name\": \"jon\" }, \"projects\": [] }\nI.seeResponseCodeIsSuccessful();\nI.seeResponseContainsKeys(['user', 'projects']);\nI.seeResponseContainsJson({ user: { name: 'jon' } });\nI.seeResponseMatchesJsonSchema($ => {\n  return $.object(\n    user: $.object({\n      name: $.string(),\n    }),\n    projects: $.array()\n  )\n});\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Browser Sessions in CodeceptJS Test\nDESCRIPTION: Demonstrates how to create and manage multiple browser sessions in a chat application test scenario. Shows switching between sessions and handling communication between different users.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('test app', ({ I }) => {\n  I.amOnPage('/chat')\n  I.fillField('name', 'davert')\n  I.click('Sign In')\n  I.see('Hello, davert')\n  session('john', () => {\n    // another session started\n    I.amOnPage('/chat')\n    I.fillField('name', 'john')\n    I.click('Sign In')\n    I.see('Hello, john')\n  })\n  // switching back to default session\n  I.fillField('message', 'Hi, john')\n  // there is a message from current user\n  I.see('me: Hi, john', '.messages')\n  session('john', () => {\n    // let's check if john received it\n    I.see('davert: Hi, john', '.messages')\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Complete CodeceptJS Test Example\nDESCRIPTION: Sample test scenario that navigates to GitHub and verifies page content\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/quickstart.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('My First Test');\n\nScenario('test something', ({ I }) => {\n  I.amOnPage('https://github.com');\n  I.see('GitHub');\n});\n```\n\n----------------------------------------\n\nTITLE: Writing a Login Test with CodeceptJS\nDESCRIPTION: This snippet demonstrates how to write a simple login test using CodeceptJS. It includes steps for navigating to a page, filling in form fields, clicking a button, and verifying the result.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('login');\n\nScenario('login test', ({ I }) => {\n  I.amOnPage('/login');\n  I.fillField('Username', 'john');\n  I.fillField('Password', '123456');\n  I.click('Login');\n  I.see('Welcome, John');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Helper in CodeceptJS\nDESCRIPTION: This snippet demonstrates how to configure the WebDriver helper in CodeceptJS. It includes settings for browser, window size, timeouts, and other options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Page Objects in CodeceptJS\nDESCRIPTION: Shows how to include page objects for dependency injection in test scenarios, allowing access to custom steps and page modules.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ninclude: {\n  I: \"./custom_steps.js\",\n  loginPage: \"./pages/Login.js\",\n  User: \"./pages/User.js\",\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('test', { I, loginPage, User })\n```\n\n----------------------------------------\n\nTITLE: Using Async Helper Functions in CodeceptJS\nDESCRIPTION: Demonstrates the correct usage of async functions in CodeceptJS, emphasizing the importance of using 'await' when calling functions that include grab actions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// a helper function\nasync function getAllUsers(I) {\n  const users = await I.grabTextFrom('.users')\n  return users.filter(u => u.includes('active'))\n}\n\n// a test\nScenario('try helper functions', async ({ I }) => {\n  // we call function with await because it includes `grab`\n  const users = await getAllUsers(I)\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element in CodeceptJS Test\nDESCRIPTION: Demonstrates how to use the waitForElement method to handle delays in rendering client-side elements before interacting with them.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForElement('#agree_button', 30) // secs\n// clicks a button only when it is visible\nI.click('#agree_button')\n```\n\n----------------------------------------\n\nTITLE: Customizing AI Prompts in CodeceptJS Configuration\nDESCRIPTION: JavaScript configuration for customizing AI prompts in CodeceptJS, including functions for writing steps, healing steps, and generating PageObjects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  prompts: {\n    writeStep: (html, input) => [{ role: 'user', content: 'As a test engineer...' }],\n    healStep: (html, { step, error, prevSteps }) => [{ role: 'user', content: 'As a test engineer...' }],\n    generatePageObject: (html, extraPrompt = '', rootLocator = null) => [{ role: 'user', content: 'As a test engineer...' }]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Browser Profiles in CodeceptJS\nDESCRIPTION: Configuration example for setting up multiple browser profiles in codecept.conf.js, allowing tests to run in parallel across different browsers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  helpers: {\n    WebDriver: {\n      url: 'http://localhost:3000',\n      desiredCapabilties: {}\n    }\n  },\n  multiple: {\n    profile1: {\n      browsers: [\n        {\n          browser: \"firefox\",\n          desiredCapabilties: {\n            // override capabilties related to firefox\n          }\n        },\n        {\n          browser: \"chrome\",\n          desiredCapabilties: {\n            // override capabilties related to chrome\n          }\n        }\n      ]\n    }, \n    profile2: {\n      browsers: [\n        {\n          browser: \"safari\",\n          desiredCapabilties: {\n            // override capabilties related to safari\n          }\n        }\n      ]\n    }\n  }\n};\n```\n\n----------------------------------------\n\nTITLE: Verifying Exact Page Title in CodeceptJS\nDESCRIPTION: Checks that the page title exactly matches the provided string. Unlike seeInTitle, this requires a complete match, not just a substring.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeTitleEquals('Test title.');\n```\n\n----------------------------------------\n\nTITLE: Using Grabbers in Async CodeceptJS Test\nDESCRIPTION: Shows how to use 'await' with grabbers like grabTitle to retrieve information from a running test and use it in assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('try grabbers', async ({ I }) => {\n  let title = await I.grabTitle()\n})\n\nvar title = await I.grabTitle()\nvar assert = require('assert')\nassert.equal(title, 'CodeceptJS')\n```\n\n----------------------------------------\n\nTITLE: Using Playwright API in CodeceptJS Tests\nDESCRIPTION: Shows how to use Playwright API directly within CodeceptJS tests for advanced browser control.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePlaywrightTo('emulate offline mode', async ({ browserContext }) => {\n  await browserContext.setOffline(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Basic Structure of a Custom Helper in CodeceptJS\nDESCRIPTION: Template for creating a custom helper class in CodeceptJS. It shows the basic structure including hooks and where to add custom methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst Helper = require('@codeceptjs/helper');\n\nclass MyHelper extends Helper {\n\n  // before/after hooks\n  _before() {\n    // remove if not used\n  }\n\n  _after() {\n    // remove if not used\n  }\n\n  // add custom methods here\n  // If you need to access other helpers\n  // use: this.helpers['helperName']\n\n}\n\nmodule.exports = MyHelper;\n```\n\n----------------------------------------\n\nTITLE: Sending GraphQL Queries\nDESCRIPTION: Examples of sending GraphQL queries with and without variables, and handling the response.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQL.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst response = await I.sendQuery('{ users { name email }}');\n// with variables\nconst response = await I.sendQuery(\n 'query getUser($id: ID) { user(id: $id) { name email }}',\n { id: 1 },\n)\nconst user = response.data.data;\n```\n\n----------------------------------------\n\nTITLE: Configuring Helpers in CodeceptJS\nDESCRIPTION: Demonstrates how to enable and configure helpers, such as Playwright, including setting the URL and browser type.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  Playwright: {\n    url: 'https://mysite.com',\n    browser: 'firefox'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Login Page Object\nDESCRIPTION: Complete example of a login page object implementation with locators and methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I, registerPage } = inject();\n\nmodule.exports = {\n\n  // setting locators\n  fields: {\n    email: '#user_basic_email',\n    password: '#user_basic_password'\n  },\n  submitButton: {css: '#new_user_basic input[type=submit]'},\n\n  // introducing methods\n  sendForm(email, password) {\n    I.fillField(this.fields.email, email);\n    I.fillField(this.fields.password, password);\n    I.click(this.submitButton);\n  },\n\n  register(email, password) {\n    // use another page object inside current one\n    registerPage.registerUser({ email, password });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing a new CodeceptJS project\nDESCRIPTION: Command to initialize a new CodeceptJS project, which will create necessary configuration files and directory structure.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs init\n```\n\n----------------------------------------\n\nTITLE: Grabbing Browser Logs in JavaScript with Playwright\nDESCRIPTION: This function retrieves JavaScript logs from the browser and filters for error messages. It uses the grabBrowserLogs method and returns a Promise resolving to an array of log entries.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nconst logs = await I.grabBrowserLogs();\nconst errors = logs.map(l => ({ type: l.type(), text: l.text() })).filter(l => l.type === 'error');\nconsole.log(JSON.stringify(errors));\n```\n\n----------------------------------------\n\nTITLE: Using Page Objects in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to inject and use page objects in test scenarios. Shows integration with Before hooks and actual test implementation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('CodeceptJS Demonstration')\n\nBefore(({ I }) => {\n  // or Background\n  I.amOnPage('http://simple-form-bootstrap.plataformatec.com.br/documentation')\n})\n\nScenario('test some forms', ({ I, docsPage }) => {\n  docsPage.sendForm('hello@world.com', '123456')\n  I.see('User is valid')\n  I.dontSeeInCurrentUrl('/documentation')\n})\n```\n\n----------------------------------------\n\nTITLE: Complex CodeceptJS Test Scenario with Multiple Features\nDESCRIPTION: A comprehensive example of a CodeceptJS test scenario. It demonstrates the use of third-party libraries, page objects, custom methods, retries for flaky steps, explicit waiters, and assertions. The scenario creates a new store and verifies its creation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/index.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { faker } = require('@faker-js/faker');                               // Use 3rd-party JS code\n\nFeature('Store');\n\nScenario('Create a new store', async ({ I, login, SettingsPage }) => {\n  const storeName = faker.lorem.slug();\n  login('customer');                                          // Login customer from saved cookies\n  SettingsPage.open();                                        // Use Page objects\n  I.dontSee(storeName, '.settings');                          // Assert text not present inside an element (located by CSS)\n  I.click('Add', '.settings');                                // Click link by text inside element (located by CSS)\n  I.fillField('Store Name', storeName);                       // Fill fields by labels or placeholders\n  I.fillField('Email', faker.internet.email());\n  I.fillField('Telephone', faker.phone.phoneNumberFormat());\n  I.selectInDropdown('Status', 'Active');                     // Use custom methods\n  I.retry(2).click('Create');                                 // Retry flaky step\n  I.waitInUrl('/settings/setup/stores');                      // Explicit waiter\n  I.see(storeName, '.settings');                              // Assert text present inside an element (located by CSS)\n  const storeId = await I.grabTextFrom('#store-id');          // Use await to get information from browser\n  I.say(`Created a store with ${storeId}`);                   // Print custom comments\n}).tag('stores');\n```\n\n----------------------------------------\n\nTITLE: Using Page Objects in CodeceptJS Tests\nDESCRIPTION: Example of refactoring tests to use Page Objects for better organization and reusability of code.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/testcafe.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('Create a new todo item', async ({ I, TodosPage }) => {\n  I.say('Given I have an empty todo list')\n\n  I.say('When I create a todo \"foo\"')\n  TodosPage.enterTodo('foo')\n\n  I.say('Then I see the new todo on my list')\n  TodosPage.seeNumberOfTodos(1)\n\n  I.saveScreenshot('create-todo-item.png')\n})\n\nScenario('Create multiple todo items', async ({ I, TodosPage }) => {\n  I.say('Given I have an empty todo list')\n\n  I.say('When I create todos \"foo\", \"bar\" and \"baz\"')\n  TodosPage.enterTodo('foo')\n  TodosPage.enterTodo('bar')\n  TodosPage.enterTodo('baz')\n\n  I.say('Then I have these 3 todos on my list')\n  TodosPage.seeNumberOfTodos(3)\n\n  I.saveScreenshot('create-multiple-todo-items.png')\n})\n```\n\n----------------------------------------\n\nTITLE: Using Within Context in CodeceptJS\nDESCRIPTION: Demonstrates how to use the within function to specify exact areas on a page for actions, including iframe support and nested contexts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('https://github.com')\nwithin('.js-signup-form', () => {\n  I.fillField('user[login]', 'User')\n  I.fillField('user[email]', 'user@user.com')\n  I.fillField('user[password]', 'user@user.com')\n  I.click('button')\n})\nI.see('There were problems creating your account.')\n```\n\n----------------------------------------\n\nTITLE: Implementing Page Object in CodeceptJS\nDESCRIPTION: Demonstrates how to create a flexible page object for a checkout form, allowing for easy reuse and maintenance.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nclass CheckoutForm {\n\n  fillBillingInformation(data = {}) {\n    // take data in a flexible format\n    // iterate over fields to fill them all\n    for (let key of Object.keys(data)) {\n      I.fillField(key, data[key]); // like this one\n    }\n  }\n\n}\nmodule.exports = new CheckoutForm();\nmodule.exports.CheckoutForm = CheckoutForm; // for inheritance\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic CodeceptJS Test Scenario in JavaScript\nDESCRIPTION: This snippet demonstrates how to create a simple CodeceptJS test scenario that checks for the presence of 'Welcome' text on a webpage. It showcases the basic structure of a CodeceptJS test using the Feature and Scenario syntax.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('CodeceptJS demo')\n\nScenario('check Welcome page on site', ({ I }) => {\n  I.amOnPage('/')\n  I.see('Welcome')\n})\n```\n\n----------------------------------------\n\nTITLE: Grabbing Chrome Performance Metrics in JavaScript with Playwright\nDESCRIPTION: This function retrieves performance metrics from the Chrome CDP session. It returns a Promise resolving to an array of objects containing metric names and values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nconst metrics = await I.grabMetrics();\n\n// returned metrics\n\n[\n  { name: 'Timestamp', value: 1584904.203473 },\n  { name: 'AudioHandlers', value: 0 },\n  { name: 'AudioWorkletProcessors', value: 0 },\n  { name: 'Documents', value: 22 },\n  { name: 'Frames', value: 10 },\n  { name: 'JSEventListeners', value: 366 },\n  { name: 'LayoutObjects', value: 1240 },\n  { name: 'MediaKeySessions', value: 0 },\n  { name: 'MediaKeys', value: 0 },\n  { name: 'Nodes', value: 4505 },\n  { name: 'Resources', value: 141 },\n  { name: 'ContextLifecycleStateObservers', value: 34 },\n  { name: 'V8PerContextDatas', value: 4 },\n  { name: 'WorkerGlobalScopes', value: 0 },\n  { name: 'UACSSResources', value: 0 },\n  { name: 'RTCPeerConnections', value: 0 },\n  { name: 'ResourceFetchers', value: 22 },\n  { name: 'AdSubframes', value: 0 },\n  { name: 'DetachedScriptStates', value: 2 },\n  { name: 'ArrayBufferContents', value: 1 },\n  { name: 'LayoutCount', value: 0 },\n  { name: 'RecalcStyleCount', value: 0 },\n  { name: 'LayoutDuration', value: 0 },\n  { name: 'RecalcStyleDuration', value: 0 },\n  { name: 'DevToolsCommandDuration', value: 0.000013 },\n  { name: 'ScriptDuration', value: 0 },\n  { name: 'V8CompileDuration', value: 0 },\n  { name: 'TaskDuration', value: 0.000014 },\n  { name: 'TaskOtherDuration', value: 0.000001 },\n  { name: 'ThreadTime', value: 0.000046 },\n  { name: 'ProcessTime', value: 0.616852 },\n  { name: 'JSHeapUsedSize', value: 19004908 },\n  { name: 'JSHeapTotalSize', value: 26820608 },\n  { name: 'FirstMeaningfulPaint', value: 0 },\n  { name: 'DomContentLoaded', value: 1584903.690491 },\n  { name: 'NavigationStart', value: 1584902.841845 }\n]\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Configuration Example\nDESCRIPTION: Shows the basic structure of a CodeceptJS configuration file, including sections for helpers, plugins, and include objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  helpers: {\n    // enabled helpers with their configs\n  },\n  plugins: {\n    // list of used plugins\n  },\n  include: {\n    // current actor and page objects\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using AI Helper for Page Documentation in CodeceptJS\nDESCRIPTION: This code snippet demonstrates how to use the AI helper to generate documentation for a specific page fragment. It's useful for creating dynamic page descriptions or documentation during test execution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// use it inside test or inside interactive pause\n// pretend you are technical writer asking for documentation\nconst pageDoc = await I.askGptOnPageFragment('Act as technical writer, describe what is this page for', '#container')\n```\n\n----------------------------------------\n\nTITLE: Setting Bearer Authentication in CodeceptJS REST Helper\nDESCRIPTION: Example of setting Bearer authentication for REST requests in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// we use secret function to hide token from logs\nI.amBearerAuthenticated(secret('heregoestoken'))\n```\n\n----------------------------------------\n\nTITLE: Using Locator Builder in CodeceptJS\nDESCRIPTION: Shows how to use the locator builder to create complex, readable locators for non-standard elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// clicks element <span class=\"button\">Click me</span>\nI.click(locate('.button').withText('Click me'));\n```\n\n----------------------------------------\n\nTITLE: Blocking Network Traffic in Playwright\nDESCRIPTION: This snippet demonstrates how to block specific network requests and verify the resulting behavior using Playwright helper methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\n// block the traffic\nI.blockTraffic('https://reqres.in/api/comments/*')\nawait I.amOnPage('/form/fetch_call')\nawait I.startRecordingTraffic()\nawait I.click('GET COMMENTS')\nawait I.see('Can not load data!')\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Native Element Functions in CodeceptJS\nDESCRIPTION: Example usage of new Els API functions for direct element interactions, including element(), eachElement(), expectElement(), expectAnyElement(), and expectAllElements().\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { element, eachElement, expectElement, expectAnyElement, expectAllElements } = require('codeceptjs/els')\n\n// ...\n\nScenario('element functions demo', async ({ I }) => {\n  // Get attribute of first button\n  const attr = await element('.button', async el => await el.getAttribute('data-test'))\n\n  // Log text of each list item\n  await eachElement('.list-item', async (el, idx) => {\n    console.log(`Item ${idx}: ${await el.getText()}`)\n  })\n\n  // Assert first submit button is enabled\n  await expectElement('.submit', async el => await el.isEnabled())\n\n  // Assert at least one product is in stock\n  await expectAnyElement('.product', async el => {\n    return (await el.getAttribute('data-status')) === 'in-stock'\n  })\n\n  // Assert all required fields have required attribute\n  await expectAllElements('.required', async el => {\n    return (await el.getAttribute('required')) !== null\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection in CodeceptJS Tests\nDESCRIPTION: Shows how to inject dependencies globally or within specific test scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// globally inject objects by name\nconst { I, myPage, mySteps } = inject();\n\n// inject objects for a test by name\nScenario('sample test', ({ I, myPage, mySteps }) => {\n  // ...\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Element Presence in DOM with CodeceptJS\nDESCRIPTION: Uses the seeElementInDOM method to check if a given element is present in the DOM. The element is located by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElementInDOM('#modal');\n```\n\n----------------------------------------\n\nTITLE: Generating PageObject Template\nDESCRIPTION: Shows the command to generate a PageObject template and its basic structure.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpx codeceptjs gpo\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I, otherPage } = inject();\n\nmodule.exports = {\n\n  // insert your locators and methods here\n}\n```\n\n----------------------------------------\n\nTITLE: Mocking Requests with Polly.js and Puppeteer Helpers\nDESCRIPTION: Example of how to use Polly.js with Puppeteer helper to mock API requests in tests. The code shows how to mock both GET and POST requests with different responses.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// use Polly & Puppeteer helpers\nI.mockRequest('GET', '/api/users', 200)\nI.mockRequest('POST', '/users', { user: { name: 'fake' } })\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom WebDriver Helper in CodeceptJS\nDESCRIPTION: Implementation of a custom helper class that extends WebDriver functionality with methods for drag and drop operations, browser restart, and navigation. It handles both WebDriver and JSON Wire protocols for browser compatibility.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst Helper = codeceptjs.helper;\n\nclass Web extends Helper {\n\n  // method to drag an item to coordinates\n  async dragToPoint(el, x, y) {\n    // access browser object from WebDriver\n    const browser = this.helpers.WebDriver.browser;\n    await this.helpers.WebDriver.moveCursorTo(el);\n\n    if (browser.isW3C) {\n      // we use WebDriver protocol\n      return browser.performActions([\n        {\"type\": \"pointerDown\", \"button\": 0},\n        {\"type\": \"pointerMove\", \"origin\": \"pointer\", \"duration\": 1000, x, y },\n        {\"type\": \"pointerUp\", \"button\": 0}\n      ]);\n    }\n\n    // we use JSON Wire protocol\n    await browser.buttonDown(0);\n    await browser.moveToElement(null, x, y);\n    await browser.buttonUp(0);\n  }\n\n  // method which restarts browser\n  async restartBrowser() {\n    const browser = this.helpers.WebDriver.browser;\n    await browser.reloadSession();\n    await browser.maximizeWindow();\n  }\n\n  // method which goes to previous page\n  async backToPreviousPage() {\n    const browser = this.helpers.WebDriver.browser;\n    await browser.back();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using tryTo Effect in JavaScript\nDESCRIPTION: Demonstrates the usage of tryTo effect to handle optional steps that may fail without stopping test execution. It includes error handling and conditional logic based on the success of the tryTo block.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/effects.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { tryTo } = require('codeceptjs/effects')\n\n// inside a test\nconst success = await tryTo(() => {\n  // These steps may fail but won't stop the test\n  I.see('Cookie banner')\n  I.click('Accept cookies')\n})\n\nif (!success) {\n  I.say('Cookie banner was not found')\n}\n```\n\n----------------------------------------\n\nTITLE: Using React Locators in CodeceptJS\nDESCRIPTION: Demonstrates various ways to use the special 'react' locator to select elements by component name, props, and state.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/react.md#2025-04-21_snippet_3\n\nLANGUAGE: js\nCODE:\n```\n{ react: 'MyComponent' }\n{ react: 'Button', props: { title: 'Click Me' }}\n{ react: 'Button', state: { some: 'state' }}\n{ react: 'Input', state: 'valid'}\n```\n\n----------------------------------------\n\nTITLE: Writing a Full Mobile Test Scenario\nDESCRIPTION: A complete example of a mobile test scenario in CodeceptJS, demonstrating various interactions and assertions for a user registration flow.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('test registration', ({ I }) => {\n  I.click('~startUserRegistrationCD');\n  I.fillField('~inputUsername', 'davert');\n  I.fillField('~inputEmail', 'davert@codecept.io');\n  I.fillField('~inputPassword', '123456');\n  I.hideDeviceKeyboard();\n  I.click('~input_preferredProgrammingLanguage');\n  I.click('Javascript');\n  I.checkOption('#io.demo.testapp:id/input_adds');\n  I.click('Register User (verify)');\n  I.swipeUp(\"#io.selendroid.testapp:id/LinearLayout1\");\n  I.see('Javascript'); // see on the screen\n  I.see('davert', '~label_username_data'); // see in element\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Tables with Headers in CodeceptJS\nDESCRIPTION: Example showing how to work with tables that include headers using DataTableArgument. Demonstrates the hashes() and rows() methods for accessing data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_9\n\nLANGUAGE: gherkin\nCODE:\n```\n  Given I have an employee card\n    | name  | surname | position |\n    | Harry | Potter  | Seeker   |\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTableArgument } = require('codeceptjs');\n//...\nGiven('I have an employee card', (table) => {\n  const dataTableArgument = new DataTableArgument(table);\n  const hashes = dataTableArgument.hashes(); \n  // hashes = [{ name: 'Harry', surname: 'Potter', position: 'Seeker' }];\n  const rows = dataTableArgument.rows();\n  // rows = [['Harry', 'Potter', Seeker]];\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Shell Session with Generated PageObject\nDESCRIPTION: Example of a CodeceptJS shell session using a generated PageObject, demonstrating method execution and locator usage.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_16\n\nLANGUAGE: shell\nCODE:\n```\nPage object for login is saved to .../output/loginPage-1718579784751.js\nPage object registered for this session as `page` variable\nUse `=>page.methodName()` in shell to run methods of page object\nUse `click(page.locatorName)` to check locators of page object\n\n I.=>page.clickSignUp()\n I.click(page.signUpLink)\n I.=> page.enterPassword('asdasd')\n I.=> page.clickSignIn()\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Recorder API Usage with Promises\nDESCRIPTION: Example demonstrating how to use the recorder API to add asynchronous functions to the global promise chain, including API calls.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst event = require('codeceptjs').event;\nconst recorder = require('codeceptjs').recorder;\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    const request = require('request');\n\n    recorder.add('create fixture data via API', function() {\n      return new Promise((doneFn, errFn) => {\n        request({\n          baseUrl: 'http://api.site.com/',\n          method: 'POST',\n          url: '/users',\n          json: { name: 'john', email: 'john@john.com' }\n        }), (err, httpResponse, body) => {\n          if (err) return errFn(err);\n          doneFn();\n        }\n      });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Improving Readability in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to improve test readability by using semantic selectors instead of raw CSS or XPath locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// it's fine but...\nI.click({css: 'nav.user .user-login'});\n// can be better\nI.click('Login', 'nav.user');\n```\n\n----------------------------------------\n\nTITLE: Complete Detox Test Scenario\nDESCRIPTION: Full example of a CodeceptJS test scenario using Detox, demonstrating cross-platform testing capabilities and various assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/detox.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('My Detox App');\n\nScenario('save in application', ({ I }) => {\n  I.setLandscapeOrientation();\n  I.fillField('#text', 'a new text');\n  I.see('a new text', '#textValue');\n  I.dontSeeElement('#createdAndVisibleText');\n  I.click({ ios: '#GoButton', android: 'Button' });\n  I.waitForElement('#createdAndVisibleText', 20);\n  I.seeElement('#createdAndVisibleText');\n  I.runOnAndroid(() => {\n    I.click('Save');\n    I.see('Text Saved', '#message');\n  });\n  I.runOnIOS(() => {\n    I.click('SAVE');\n    I.see('SAVED!');\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: REST API Test Example\nDESCRIPTION: Example of creating a user via REST API with authentication and assertions\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Users endpoint')\n\nScenario('create user', ({ I }) => {\n    // this way we pass Bearer token\n  I.amBearerAuthenticated(secret('token-is-here'));\n  // for custom authorization with headers use\n  // I.haveRequestHeaders method\n\n  // here we send a POST request\n  const response = await I.sendPostRequest('/users', {\n    name: 'joe',\n    email: 'joe@mail.com'\n  });\n  // usually we won't need direct access to response object for API testing \n  // but you can obtain it from request\n\n  // check the last request was successful\n  // this method introduced by JSONResponse helper\n  I.seeResponseCodeIsSuccessful();\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeceptJS Using JavaScript Configuration File\nDESCRIPTION: Starting from version 0.4.3, CodeceptJS configuration can be set via a JavaScript file (codecept.conf.js) instead of JSON. The configuration file should export a config object containing all settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_125\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\nexports.config = {\n  // contents of codecept.js\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Gherkin Features in CodeceptJS\nDESCRIPTION: Shows how to enable and configure BDD features using Gherkin syntax. This includes specifying feature file locations and step definition files.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ngherkin: {\n  features: \"./features/*.feature\",\n  steps: [\"./step_definitions/steps.js\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Recording WebSocket Messages in CodeceptJS\nDESCRIPTION: Examples of recording and managing WebSocket messages in tests, including starting recording, grabbing messages, and flushing recorded messages.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n      I.startRecordingWebSocketMessages();\n      I.amOnPage('https://websocketstest.com/');\n      I.waitForText('Work for You!');\n      const wsMessages = I.grabWebSocketMessages();\n      expect(wsMessages.length).to.greaterThan(0);\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper in CodeceptJS\nDESCRIPTION: Configuration code for the Playwright helper in the CodeceptJS config file. This sets up the testing environment with the specified URL, browser, and display options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ // ..\n  helpers: {\n    Playwright: {\n      url: \"http://localhost\",\n      show: true,\n      browser: 'chromium'\n    }\n  }\n  // ..\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Playwright API with CodeceptJS API\nDESCRIPTION: This snippet shows how to combine Playwright API calls with CodeceptJS API methods within a test, demonstrating the flexibility of the 'usePlaywrightTo' method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePlaywrightTo('emulate offline mode', async (Playwright) => {\n  // access internal objects browser, page, context of helper\n  await Playwright.browserContext.setOffline(true);\n  // call a method of helper, await is required here\n  await Playwright.click('Reload');\n});\n```\n\n----------------------------------------\n\nTITLE: HAR Replay in CodeceptJS\nDESCRIPTION: Replays network requests from HAR files for API mocking.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nI.replayFromHar('./output/har/something.har', { url: \"*/**/api/v1/fruits\" });\nI.amOnPage('https://demo.playwright.dev/api-mocking');\nI.see('CodeceptJS');\n```\n\n----------------------------------------\n\nTITLE: Defining Factory for User Data Generation\nDESCRIPTION: Example of creating a factory module for generating user data using Rosie Factory and Faker. The factory generates random user names and emails.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// factories/post.js\nvar Factory = require('rosie').Factory\nvar faker = require('@faker-js/faker')\n\nmodule.exports = new Factory((buildObj) => {\n  return {\n    input: { ...buildObj },\n  }\n})\n  .attr('name', () => faker.person.findName())\n  .attr('email', () => faker.internet.email())\n```\n\n----------------------------------------\n\nTITLE: Masking Sensitive Data in REST Helper (JavaScript)\nDESCRIPTION: New feature to mask sensitive data from log messages when sending requests with the REST helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendPatchRequest('/api/users.json', secret({ email: 'user@user.com' }))\n```\n\n----------------------------------------\n\nTITLE: Implementing Before/After Hooks in CodeceptJS\nDESCRIPTION: Shows how to use Before hooks for common test setup steps like page navigation. Includes multiple test scenarios demonstrating form testing and title verification.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I } = inject()\n\nFeature('CodeceptJS Demonstration')\n\nBefore(() => {\n  // or Background\n  I.amOnPage('http://simple-form-bootstrap.plataformatec.com.br/documentation')\n})\n\nScenario('test some forms', () => {\n  I.click('Create User')\n  I.see('User is valid')\n  I.dontSeeInCurrentUrl('/documentation')\n})\n\nScenario('test title', () => {\n  I.seeInTitle('Example application')\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements to Become Invisible in Browser\nDESCRIPTION: Waits for an element to be removed or become invisible on a page. By default, it waits for 1 second, but the wait time can be customized. The element can be located using CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForInvisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Creating an Authentication Helper for WebDriver in CodeceptJS\nDESCRIPTION: Example of a custom helper for WebDriver in CodeceptJS that checks for authentication cookies. This demonstrates how to access and assert on browser cookies using WebDriver.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst Helper = require('@codeceptjs/helper');\n\n// use any assertion library you like\nconst assert = require('assert');\n\nclass MyHelper extends Helper {\n  /**\n   * checks that authentication cookie is set\n   */\n  async seeAuthentication() {\n    // access current browser of WebDriver helper\n    const { WebDriver } = this.helpers\n    const { browser } = WebDriver;\n\n    // get all cookies according to https://webdriver.io/api/protocol/cookie.html\n    // any helper method should return a value in order to be added to promise chain\n    const res = await browser.cookie();\n    // get values\n    let cookies = res.value;\n    for (let k in cookies) {\n      // check for a cookie\n      if (cookies[k].name != 'logged_in') continue;\n      assert.equal(cookies[k].value, 'yes');\n      return;\n    }\n    assert.fail(cookies, 'logged_in', \"Auth cookie not set\");\n  }\n}\n\nmodule.exports = MyHelper;\n```\n\n----------------------------------------\n\nTITLE: Basic CodeceptJS Test Example for Vue\nDESCRIPTION: A simple CodeceptJS test snippet demonstrating basic interactions with a Vue application. It shows how to navigate to a page, click a button, verify content, and add a custom message.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/vue.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('/');\nI.click('My Component Button');\nI.see('My Component');\nI.say('I am happy!');\n// that's right, this is a valid test!\n```\n\n----------------------------------------\n\nTITLE: Using Grabbers in CodeceptJS with Playwright\nDESCRIPTION: A test script demonstrating how to grab element values within a test. This uses async/await to retrieve the count of todo items and verify it using an assertion.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nScenario('get value of current tasks', async ({ I }) => {\n  I.fillField('.todo', 'my first item');\n  I.pressKey('Enter')\n  I.fillField('.todo', 'my second item');\n  I.pressKey('Enter')\n  let numTodos = await I.grabTextFrom('.todo-count strong');\n  assert.equal(2, numTodos);\n});\n```\n\n----------------------------------------\n\nTITLE: Using Page Objects in Test Scenarios\nDESCRIPTION: Demonstrates how to use page objects within test scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('login', ({ I, loginPage }) => {\n  loginPage.sendForm('john@doe.com','123456');\n  I.see('Hello, John');\n});\n```\n\n----------------------------------------\n\nTITLE: Using WebDriver API in CodeceptJS Tests\nDESCRIPTION: Uses the useWebDriverTo method to access the WebDriver API directly within a test. Allows for more complex interactions not covered by helper methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nI.useWebDriverTo('open multiple windows', async ({ browser }) {\n   // create new window\n   await browser.newWindow('https://webdriver.io');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Grabbers in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to use grabber methods to extract and verify page title values in tests. Uses async/await pattern with the Expect helper for assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('CodeceptJS Demonstration')\n\nScenario('test page title', async ({ I }) => {\n  I.amOnPage('http://simple-form-bootstrap.plataformatec.com.br/documentation')\n  const title = await I.grabTitle()\n  I.expectEqual(title, 'Example application with SimpleForm and Twitter Bootstrap') // Avaiable with Expect helper. -> https://codecept.io/helpers/Expect/\n})\n```\n\n----------------------------------------\n\nTITLE: Shadow DOM Locator Syntax Examples\nDESCRIPTION: Examples showing the syntax for shadow DOM locators in CodeceptJS, demonstrating how to target nested elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/shadow.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{ shadow: ['my-app', 'recipe-hello', 'button'] }\n{ shadow: ['my-app', 'recipe-hello-binding', 'ui-input', 'input.input'] }\n```\n\n----------------------------------------\n\nTITLE: Class-based Page Object Implementation\nDESCRIPTION: Example of implementing a page object as a class with inheritance support.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { expect } = require('chai');\nconst { I } = inject();\n\nclass AttachFile {\n  constructor() {\n    this.inputFileField = 'input[name=fileUpload]';\n    this.fileSize = '.file-size';\n    this.fileName = '.file-name'\n  }\n\n  async attachFileFrom(path) {\n    await I.waitForVisible(this.inputFileField)\n    await I.attachFile(this.inputFileField, path)\n  }\n\n  async hasFileSize(fileSizeText) {\n    await I.waitForElement(this.fileSize)\n    const size = await I.grabTextFrom(this.fileSize)\n    expect(size).toEqual(fileSizeText)\n  }\n\n  async hasFileSizeInPosition(fileNameText, position) {\n    await I.waitNumberOfVisibleElements(this.fileName, position)\n    const text = await I.grabTextFrom(this.fileName)\n    expect(text[position - 1]).toEqual(fileNameText)\n  }\n}\n\n// For inheritance\nmodule.exports = new AttachFile();\nmodule.exports.AttachFile = AttachFile;\n```\n\n----------------------------------------\n\nTITLE: Waiting for Clickable Elements with CodeceptJS\nDESCRIPTION: Uses the waitForClickable method to wait for an element to become clickable. Elements can be located by CSS or XPath. Can specify custom wait time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForClickable('.btn.continue');\nI.waitForClickable('.btn.continue', 5); // wait for 5 secs\n```\n\n----------------------------------------\n\nTITLE: Mocking Network Requests with Playwright in CodeceptJS\nDESCRIPTION: This code demonstrates how to mock network requests and responses using Playwright's route API in CodeceptJS, including examples of request fulfillment and abortion.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nI.mockRoute('/api/**', route => {\n  if (route.request().postData().includes('my-string'))\n    route.fulfill({ body: 'mocked-data' });\n  else\n    route.continue();\n});\n\nI.mockRoute('**/*.{png,jpg,jpeg}', route => route.abort());\n\n// To disable mocking for a route call `stopMockingRoute`\n// for previously mocked URL\nI.stopMockingRoute('**/*.{png,jpg,jpeg}'\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap Function in CodeceptJS\nDESCRIPTION: Demonstrates how to set up a bootstrap function to execute code before tests are run. This can be an async function or a reference to a JavaScript module file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nbootstrap: async () => server.launch(),\n```\n\nLANGUAGE: javascript\nCODE:\n```\nbootstrap: 'bootstrap.js',\n```\n\n----------------------------------------\n\nTITLE: Writing Feature Scenario in Gherkin\nDESCRIPTION: Example of writing a feature scenario using Gherkin syntax, showing proper Feature and Scenario structure with Given-When-Then steps.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_1\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: checkout process\n  In order to buy products\n  As a customer\n  I want to be able to buy several products\n\n  Scenario:\n    Given I have product with $600 price in my cart\n    And I have product with $1000 price\n    When I go to checkout process\n    Then I should see that total number of products is 2\n    And my order amount is $1600\n```\n\n----------------------------------------\n\nTITLE: Sharing Data Between CodeceptJS Workers\nDESCRIPTION: Demonstrates how to access and update shared data across workers using the inject() and share() functions. Shows implementation of conditional data sharing based on existing values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// get current value of userData\nlet { userData } = inject();\n// if userData is still empty - update it\nif (!userData) {\n  userData = { name: 'user', password: '123456' };\n  // now new userData will be shared accross all workers\n  share({userData : userData});\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Gherkin Feature File in CodeceptJS BDD\nDESCRIPTION: Example of a Gherkin feature file in CodeceptJS BDD syntax. This defines a business feature with a scenario for testing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_104\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Business rules\n  In order to achieve my goals\n  As a persona\n  I want to be able to interact with a system\n\n  Scenario: do anything in my life\n    Given I need to open Google\n```\n\n----------------------------------------\n\nTITLE: Using DataTableArgument in CodeceptJS BDD\nDESCRIPTION: Demonstrates how to use the DataTableArgument class to work with table data structures in BDD-style tests, including converting to hashes and rows.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTableArgument } = require('codeceptjs');\n//...\nGiven('I have an employee card', (table) => {\n  const dataTableArgument = new DataTableArgument(table);\n  const hashes = dataTableArgument.hashes();\n  // hashes = [{ name: 'Harry', surname: 'Potter', position: 'Seeker' }];\n  const rows = dataTableArgument.rows();\n  // rows = [['Harry', 'Potter', Seeker]];\n  }\n```\n\n----------------------------------------\n\nTITLE: Using the 'expectElement' Function in CodeceptJS\nDESCRIPTION: This snippet demonstrates various ways to use the 'expectElement' function for assertions on elements. It shows examples of checking if a button is enabled, verifying element text content, and checking for a specific attribute value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/els.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// Check if a button is enabled\nawait expectElement('.submit-button', async el => {\n  return await el.isEnabled();\n});\n\n// Verify element has specific text content\nawait expectElement('.header', async el => {\n  const text = await el.getText();\n  return text === 'Welcome';\n});\n\n// Check for specific attribute value\nawait expectElement('#user-profile', async el => {\n  const role = await el.getAttribute('role');\n  return role === 'button';\n});\n```\n\n----------------------------------------\n\nTITLE: Using Fuzzy Locators in CodeceptJS\nDESCRIPTION: Shows how to use fuzzy locators in CodeceptJS. Fuzzy locators are strings that CodeceptJS interprets using various heuristics to locate elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/locators.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.fillField('input[type=password]', '123456');\nI.fillField({ css: 'input[type=password]' }, '123456');\n```\n\n----------------------------------------\n\nTITLE: Complete ToDo-MVC Test Example with Playwright\nDESCRIPTION: A full test script for a ToDo application. This test creates a new todo item and verifies it appears in the list and updates the item count.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('ToDo');\n\nScenario('create todo item', ({ I }) => {\n  I.amOnPage('http://todomvc.com/examples/react/');\n  I.dontSeeElement('.todo-count');\n  I.fillField('What needs to be done?', 'Write a guide');\n  I.pressKey('Enter');\n  I.see('Write a guide', '.todo-list');\n  I.see('1 item left', '.todo-count');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONResponse Helper with Playwright in CodeceptJS\nDESCRIPTION: This code demonstrates how to configure the JSONResponse helper to work with Playwright in CodeceptJS for API testing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\n{\n  helpers: {\n    Playwright: {\n      // current config\n    },\n    JSONResponse: {\n      requestHelper: 'Playwright',\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Reusable Component Objects in CodeceptJS\nDESCRIPTION: Shows how to create reusable component objects for common UI elements like dropdowns and date pickers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nclass DropDownComponent {\n\n  selectFirstItem(locator) {\n    I.click(locator);\n    I.click('#dropdown-items li');\n  }\n\n  selectItemByName(locator, name) {\n    I.click(locator);\n    I.click(locate('li').withText(name), '#dropdown-items');\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I } = inject();\n\n/**\n * Calendar works\n */\nclass DatePicker {\n\n  selectToday(locator) {\n    I.click(locator);\n    I.click('.currentDate', '.date-picker');\n  }\n\n  selectInNextMonth(locator, date = '15') {\n    I.click(locator);\n    I.click('show next month', '.date-picker')\n    I.click(date, '.date-picker')\n  }\n\n}\n\n\nmodule.exports = new DatePicker();\nmodule.exports.DatePicker = DatePicker; // for inheritance\n```\n\n----------------------------------------\n\nTITLE: Saving Element Screenshots with CodeceptJS\nDESCRIPTION: Demonstrates how to capture and save a screenshot of a specific element to the output folder with a specified filename.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveElementScreenshot(`#submit`,'debug.png');\n```\n\n----------------------------------------\n\nTITLE: Enabling Trace Recording for Failed Tests in CodeceptJS\nDESCRIPTION: This code demonstrates how to enable trace recording for failed tests in CodeceptJS using Playwright, configuring the trace option in the helper settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  helpers: {\n    Playwright: {\n      // ...\n      trace: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using retryTo Effect in JavaScript\nDESCRIPTION: Shows how to use the retryTo effect to retry a set of steps multiple times until they succeed. It includes an example with custom retry count and interval.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/effects.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { retryTo } = require('codeceptjs/effects')\n\n// Retry up to 5 times with 200ms between attempts\nawait retryTo(() => {\n  I.switchTo('#editor-frame')\n  I.fillField('textarea', 'Hello world')\n}, 5)\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements in CodeceptJS\nDESCRIPTION: Demonstrates various ways to click on elements using different locator strategies and contexts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n```\n\n----------------------------------------\n\nTITLE: Using BeforeSuite/AfterSuite in CodeceptJS\nDESCRIPTION: Demonstrates how to use BeforeSuite and AfterSuite hooks for complex setup and teardown operations before all tests. These hooks have access to the I object but not the browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nBeforeSuite(({ I }) => {\n  I.syncDown('testfolder')\n})\n\nAfterSuite(({ I }) => {\n  I.syncUp('testfolder')\n  I.clearDir('testfolder')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugins in CodeceptJS\nDESCRIPTION: Shows how to enable and configure CodeceptJS plugins, such as the autoDelay plugin.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n  autoDelay: {\n    enabled: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic CodeceptJS Test with Puppeteer\nDESCRIPTION: A sample test script demonstrating basic actions like navigation, clicking, and form filling using CodeceptJS with Puppeteer.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('https://github.com');\nI.click('Sign in', '//html/body/div[1]/header');\nI.see('Sign in to GitHub', 'h1');\nI.fillField('Username or email address', 'something@totest.com');\nI.fillField('Password', '123456');\nI.click('Sign in');\nI.see('Incorrect username or password.', '.flash-error');\n```\n\n----------------------------------------\n\nTITLE: Complete ToDo-MVC Test with CodeceptJS\nDESCRIPTION: A complete test scenario for a ToDo application using CodeceptJS with Puppeteer.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('ToDo');\n\nScenario('create todo item', ({ I }) => {\n  I.amOnPage('http://todomvc.com/examples/react/');\n  I.dontSeeElement('.todo-count');\n  I.fillField('What needs to be done?', 'Write a guide');\n  I.pressKey('Enter');\n  I.see('Write a guide', '.todo-list');\n  I.see('1 item left', '.todo-count');\n});\n```\n\n----------------------------------------\n\nTITLE: Grabbing Number of Visible Elements in JavaScript with Playwright\nDESCRIPTION: This function retrieves the number of visible elements matching a given locator. It returns a Promise resolving to the number of visible elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nlet numOfElements = await I.grabNumberOfVisibleElements('p');\n```\n\n----------------------------------------\n\nTITLE: Using REST Helper for API Requests in CodeceptJS\nDESCRIPTION: This example demonstrates how to use the REST helper to send API requests, create data, and clean up after tests in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nlet postId = null\n\nScenario('check post page', async ({ I }) => {\n  // valid access token\n  I.haveRequestHeaders({ auth: '1111111' })\n  // get the first user\n  let user = await I.sendGetRequest('/api/users/1')\n  // create a post and save its Id\n  postId = await I.sendPostRequest('/api/posts', { author: user.id, body: 'some text' })\n  // open browser page of new post\n  I.amOnPage('/posts/2.html')\n  I.see('some text', 'p.body')\n})\n\n// cleanup created data\nAfter(({ I }) => {\n  I.sendDeleteRequest('/api/posts/' + postId)\n})\n```\n\n----------------------------------------\n\nTITLE: Pressing Keyboard Keys in CodeceptJS\nDESCRIPTION: Simulates keyboard key presses. Supports individual keys, key combinations with modifiers, and special keys. Uses 'CommandOrControl' for OS-agnostic keyboard shortcuts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKey('Backspace');\n```\n\n----------------------------------------\n\nTITLE: Extending Actor with Custom Steps\nDESCRIPTION: Example of extending the I object with custom login functionality.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function() {\n  return actor({\n\n    login: function(email, password) {\n      this.fillField('Email', email);\n      this.fillField('Password', password);\n      this.click('Submit');\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Running Selenium Chrome Container\nDESCRIPTION: Launch a Selenium standalone Chrome instance in a Docker container with host network access.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/installation.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --net=host selenium/standalone-chrome\n```\n\n----------------------------------------\n\nTITLE: Basic Feature File Template in Gherkin\nDESCRIPTION: Default template for a feature file created by codeceptjs gherkin:init command showing basic structure.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_2\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Business rules\n  In order to achieve my goals\n  As a persona\n  I want to be able to interact with a system\n\n  Scenario: do something\n    Given I have a defined step\n```\n\n----------------------------------------\n\nTITLE: Running Tests with CodeceptJS\nDESCRIPTION: Executes tests using the 'run' command. Requires codecept.conf.js config to be present in the provided path. Various options are available for running specific tests, using different configurations, and generating reports.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run -c test\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --grep \"signin\"\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --grep \"@IEOnly\" --invert\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run github_test.js\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run github_test.js --steps\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run github_test.js --debug\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run -c my.codecept.conf.js\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --config path/to/codecept.conf.js\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --override '{ \"helpers\": {\"WebDriver\": {\"browser\": \"chrome\"}}}'\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --reporter xunit\n```\n\n----------------------------------------\n\nTITLE: Waiting in CodeceptJS Tests\nDESCRIPTION: Demonstrates various waiting methods in CodeceptJS, including waiting for elements, conditions, and specific time periods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nI.wait(2); // wait 2 secs\n\nI.waitForClickable('.btn.continue');\nI.waitForClickable('.btn.continue', 5); // wait for 5 secs\n\nI.waitForCookie(\"token\");\n\nI.waitForDetached('#popup');\n\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n\nI.waitForFunction(() => window.requests == 0);\nI.waitForFunction(() => window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) => window.requests == count, [3], 5) // pass args and wait for 5 sec\n```\n\n----------------------------------------\n\nTITLE: Using retryTo Plugin in CodeceptJS\nDESCRIPTION: Shows how to use the retryTo plugin to rerun a set of steps on failure, useful for handling flaky operations like interacting with iframes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// editing in text in iframe\n// if iframe was not loaded - retry 5 times\nawait retryTo(() => {\n  I.switchTo('#editor frame')\n  I.fillField('textarea', 'value')\n}, 5)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Responses\nDESCRIPTION: Waits for a specific network response to be received. Can wait for a response from a specific URL or use a predicate function to match responses based on URL, status code, or other properties.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForResponse('http://example.com/resource');\nI.waitForResponse(response => response.url() === 'https://example.com' && response.status() === 200);\n```\n\n----------------------------------------\n\nTITLE: Using the 'eachElement' Function in CodeceptJS\nDESCRIPTION: This example shows how to use the 'eachElement' function in a test scenario. It demonstrates iterating over multiple elements that match a locator and performing operations on each one. The function can be used with or without an explicit purpose.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/els.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('my test', async ({ I }) => {\n  // combine element function with standard steps:\n  I.click('/hotels');\n\n  // iterate over elements but don't forget to put await\n  await eachElement(\n    'validate list items', // explain your actions for future review\n    '.list-item', // locator\n    async (el, index) => {\n      const text = await el.getText();\n      console.log(`Item ${index}: ${text}`);\n    },\n  );\n\n  // Or simply check if all checkboxes are checked\n  await eachElement('input[type=\"checkbox\"]', async el => {\n    const isChecked = await el.isSelected();\n    if (!isChecked) {\n      throw new Error('Found unchecked checkbox');\n    }\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Grabbing Page Title in JavaScript with Playwright\nDESCRIPTION: This function retrieves the page title. It returns a Promise resolving to the page title as a string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nlet title = await I.grabTitle();\n```\n\n----------------------------------------\n\nTITLE: Counting Element Occurrences with CodeceptJS\nDESCRIPTION: Uses the seeNumberOfElements method to assert that an element appears a given number of times in the DOM. Elements can be located by label, name, CSS, or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeNumberOfElements('#submitBtn', 1);\n```\n\n----------------------------------------\n\nTITLE: Creating an iPhone Emulation Helper for Puppeteer in CodeceptJS\nDESCRIPTION: Example of a custom helper for Puppeteer in CodeceptJS that emulates an iPhone browser. This demonstrates how to use Puppeteer's device emulation feature within a custom helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst Helper = require('@codeceptjs/helper');\nconst puppeteer = require('puppeteer');\nconst iPhone = puppeteer.devices['iPhone 6'];\n\nclass MyHelper extends Helper {\n\n  async emulateIPhone() {\n    const { page } = this.helpers.Puppeteer;\n    await page.emulate(iPhone);\n  }\n\n}\n\nmodule.exports = MyHelper;\n```\n\n----------------------------------------\n\nTITLE: Testing Form Interactions with CodeceptJS in JavaScript\nDESCRIPTION: This example illustrates how to use CodeceptJS to interact with form elements, fill fields, check options, and perform assertions. It demonstrates various methods like fillField, checkOption, click, see, and dontSeeInCurrentUrl.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('CodeceptJS Demonstration')\n\nScenario('test some forms', ({ I }) => {\n  I.amOnPage('http://simple-form-bootstrap.plataformatec.com.br/documentation')\n  I.fillField('Email', 'hello@world.com')\n  I.fillField('Password', secret('123456'))\n  I.checkOption('Active')\n  I.checkOption('Male')\n  I.click('Create User')\n  I.see('User is valid')\n  I.dontSeeInCurrentUrl('/documentation')\n})\n```\n\n----------------------------------------\n\nTITLE: Navigating to Pages with Puppeteer\nDESCRIPTION: Examples of using amOnPage to navigate to different URLs in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Tests in Parallel with Workers\nDESCRIPTION: Command for running tests in parallel using workers in CodeceptJS. This is a faster alternative to run-multiple that requires NodeJS v12 or higher.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_70\n\nLANGUAGE: bash\nCODE:\n```\n# run all tests in parallel using 3 workers\nnpx codeceptjs run-workers 3\n```\n\n----------------------------------------\n\nTITLE: Implementing Interactive Pause in CodeceptJS Test\nDESCRIPTION: Demonstrates how to use the 'pause()' function in a CodeceptJS test scenario. This allows for interactive test writing by pausing execution and allowing manual input of commands.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/index.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('Checkout test', ({ I }) => {\n  I.amOnPage('/checkout');\n  pause();\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Requests\nDESCRIPTION: Waits for a specific network request to be made. Can wait for a specific URL or use a predicate function to match requests based on URL, method, or other properties.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForRequest('http://example.com/resource');\nI.waitForRequest(request => request.url() === 'http://example.com' && request.method() === 'GET');\n```\n\n----------------------------------------\n\nTITLE: Returning Values from Session\nDESCRIPTION: Shows how to return and use values from a session in the main test flow using async/await syntax.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nconst val = await session('john', () => {\n  I.amOnPage('/info')\n  return I.grabTextFrom({ css: 'h1' })\n})\nI.fillField('Description', val)\n```\n\n----------------------------------------\n\nTITLE: Using Effects in CodeceptJS Scenarios\nDESCRIPTION: Demonstration of using tryTo and retryTo effects imported from codeceptjs/effects module for handling potentially failing actions and retrying steps.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { tryTo, retryTo } = require('codeceptjs/effects')\n\nScenario(..., ({ I }) => {\n  I.amOnPage('/')\n  // tryTo returns boolean if code in function fails\n  // use it to execute actions that may fail but not affect the test flow\n  // for instance, for accepting cookie banners\n  const isItWorking = tryTo(() => I.see('It works'))\n\n  // run multiple steps and retry on failure\n  retryTo(() => {\n    I.click('Start Working!');\n    I.see('It works')\n  }, 5);\n})\n```\n\n----------------------------------------\n\nTITLE: Interacting with Elements using CSS and XPath Locators in CodeceptJS\nDESCRIPTION: Demonstrates how to use CSS and XPath locators to interact with elements on a page using CodeceptJS actions like click and fillField.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// search for link or button\nI.click('Login');\n// locate field by its label\nI.fillField('Name', 'Miles');\n// we can use input name\nI.fillField('user[email]','miles@davis.com');\n```\n\n----------------------------------------\n\nTITLE: Using Different Locator Strategies in CodeceptJS\nDESCRIPTION: This snippet shows various ways to locate and interact with form elements in CodeceptJS using different locator strategies such as name, CSS, and explicitly specified locator types.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// by name\nI.fillField('user_basic[email]', 'hello@world.com')\n// by CSS\nI.fillField('#user_basic_email', 'hello@world.com')\n// don't make us guess locator type, specify it\nI.fillField({ css: '#user_basic_email' }, 'hello@world.com')\n```\n\n----------------------------------------\n\nTITLE: Setting Timeouts in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to set global, test-level, and step-level timeouts in CodeceptJS tests using configuration options and the limitTime method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// set timeout for every test in suite to 10 secs\nFeature('tests with timeout', { timeout: 10 })\n\n// set timeout for this test to 20 secs\nScenario('a test with timeout', { timeout: 20 }, ({ I }) => {})\n\n// set step timeout to 5 secs\nI.limitTime(5).click('Link')\n```\n\n----------------------------------------\n\nTITLE: Generating CodeceptJS Components\nDESCRIPTION: Commands for generating new tests, page objects, and helpers in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs generate:test\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs generate:pageobject\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs generate:helper\n```\n\n----------------------------------------\n\nTITLE: Grabbing Web Elements in CodeceptJS\nDESCRIPTION: Retrieves WebElement objects for given locators using CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nconst webElement = await I.grabWebElement('#button');\n\nconst webElements = await I.grabWebElements('#button');\n```\n\n----------------------------------------\n\nTITLE: Grabbing Text from Multiple Elements in JavaScript with Playwright\nDESCRIPTION: This function retrieves text from all elements matching a given locator. It returns a Promise resolving to an array of text contents.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nlet pins = await I.grabTextFromAll('#pin li');\n```\n\n----------------------------------------\n\nTITLE: Checking Current URL with CodeceptJS\nDESCRIPTION: Shows how to verify that the current URL matches an expected value, supporting both absolute and relative URL formats.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n```\n\n----------------------------------------\n\nTITLE: Accessing CodeceptJS Container in JavaScript\nDESCRIPTION: Shows how to retrieve helpers, support objects, and plugins from the CodeceptJS container, as well as how to append new objects to it.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/internal-api.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { container } = require('codeceptjs');\n\n// get object with all helpers\nconst helpers = container.helpers();\n\n// get helper by name\nconst { WebDriver } = container.helpers();\n\n// get support objects\nconst supportObjects = container.support();\n\n// get support object by name\nconst { UserPage } = container.support();\n\n// get all registered plugins\nconst plugins = container.plugins();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { container } = require('codeceptjs');\n\ncontainer.append({\n  helpers: { // add helper\n    MyHelper: new MyHelper({ config1: 'val1' });\n  },\n  support: { // add page object\n    UserPage: require('./pages/user');\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Custom CodeceptJS Runner in JavaScript\nDESCRIPTION: Demonstrates how to create a custom runner for CodeceptJS. This includes initializing Codecept with a custom configuration, loading tests, and running them. It also shows how to handle errors and perform teardown operations.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nconst { codecept: Codecept } = require('codeceptjs');\n\nconst config = { helpers: { WebDriver: { browser: 'chrome', url: 'http://localhost' } } };\nconst opts = { steps: true };\n\nconst codecept = new Codecept(config, options);\ncodecept.init(testRoot);\n\n// run tests\ntry {\n  await codecept.bootstrap();\n  codecept.loadTests('*_test.js');\n  await codecept.run(test);\n} catch (err) {\n  printError(err);\n  process.exitCode = 1;\n} finally {\n  await codecept.teardown();\n}\n```\n\n----------------------------------------\n\nTITLE: Retrying Actions in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to use the retry syntax to repeat actions on failure with various options like number of retries, timeout, and conditional retrying.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_87\n\nLANGUAGE: JavaScript\nCODE:\n```\n// retry action once on failure\nI.retry().see('Hello')\n\n// retry action 3 times on failure\nI.retry(3).see('Hello')\n\n// retry action 3 times waiting for 0.1 second before next try\nI.retry({ retries: 3, minTimeout: 100 }).see('Hello')\n\n// retry action 3 times waiting no more than 3 seconds for last retry\nI.retry({ retries: 3, maxTimeout: 3000 }).see('Hello')\n\n// retry 2 times if error with message 'Node not visible' happens\nI.retry({\n  retries: 2,\n  when: err => err.message === 'Node not visible',\n}).seeElement('#user')\n```\n\n----------------------------------------\n\nTITLE: Passing Data to Tests Using Container in CodeceptJS\nDESCRIPTION: Illustrates how to pass data from the configuration to tests using the CodeceptJS container.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept conf file\nbootstrap: () => {\n  codeceptjs.container.append({\n    testUser: {\n      email: 'test@test.com',\n      password: '123456'\n    }\n  });\n}\n// now `testUser` can be injected into a test\n```\n\n----------------------------------------\n\nTITLE: Inspecting Network Traffic with Query Parameters in CodeceptJS\nDESCRIPTION: Verifies network requests by checking URL with query parameters. Requires starting traffic recording before assertion and can match specific request properties.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\n// checking the request url contains certain query strings\nI.amOnPage('https://openai.com/blog/chatgpt');\nI.startRecordingTraffic();\nawait I.seeTraffic({\n    name: 'sentry event',\n    url: 'https://images.openai.com/blob/cf717bdb-0c8c-428a-b82b-3c3add87a600',\n    parameters: {\n    width: '1919',\n    height: '1138',\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Examples in Test Titles with Data Tables\nDESCRIPTION: Shows how to include example data in scenario outline titles. This feature allows for more descriptive test titles that incorporate the specific data being used in each test iteration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nWhen test title doesn't have the data in examples:\n\nFeature: Faker examples\n\n  Scenario Outline: Below are the users\n    Examples:\n      | user   | role |\n      | John  | admin |\n      | Tim   | client  |\n\nFaker examples --\n    [1]  Starting recording promises\n    Timeouts:\n  Below are the users {\"user\":\"John\",\"role\":\"admin\"}\n  ✔ OK in 4ms\n\n  Below are the users {\"user\":\"Tim\",\"role\":\"client\"}\n  ✔ OK in 1ms\n\nWhen test title includes the data in examples:\n\n\nFeature: Faker examples\n\n  Scenario Outline: Below are the users - <user> - <role>\n    Examples:\n      | user   | role |\n      | John  | admin |\n      | Tim   | client  |\n\n\nFaker examples --\n    [1]  Starting recording promises\n    Timeouts:\n  Below are the users - John - admin\n  ✔ OK in 4ms\n\n  Below are the users - Tim - client\n  ✔ OK in 1ms\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenoid Plugin in JavaScript\nDESCRIPTION: Example configuration for the Selenoid plugin in CodeceptJS. It shows how to enable the plugin and set various options for automatic container creation and video recording.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    selenoid: {\n      enabled: true,\n      deletePassed: true,\n      autoCreate: true,\n      autoStart: true,\n      sessionTimeout: '30m',\n      enableVideo: true,\n      enableLog: true,\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Performing Right-Click Actions in CodeceptJS\nDESCRIPTION: Shows different ways to perform right-click actions on elements using various locator strategies, including ID selectors, text content, and nested contexts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n// right click element with id el\nI.rightClick('#el');\n// right click link or button with text \"Click me\"\nI.rightClick('Click me');\n// right click button with text \"Click me\" inside .context\nI.rightClick('Click me', '.context');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Text Content in CodeceptJS\nDESCRIPTION: Waits for specific text to appear on the page with optional context and timeout. Can narrow search using CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n```\n\n----------------------------------------\n\nTITLE: Configuring Dependency Injection in CodeceptJS\nDESCRIPTION: Demonstrates how to configure object dependencies in CodeceptJS configuration for injection into tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n  include: {\n    I: \"./custom_steps.js\",\n    Smth: \"./pages/Smth.js\",\n    loginPage: \"./pages/Login.js\",\n    signinFragment: \"./fragments/Signin.js\"\n  }\n```\n\n----------------------------------------\n\nTITLE: Multi-Session Testing with Playwright in CodeceptJS\nDESCRIPTION: Example demonstrating how to use multiple browser contexts (sessions) in a test. This allows testing scenarios that require different user contexts, such as logged-in and anonymous users.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('I try to open this site as anonymous user', ({ I }) => {\n  I.amOnPage('/');\n  I.dontSee('Agree to cookies');\n  session('anonymous user', () => {\n    I.amOnPage('/');\n    I.see('Agree to cookies');\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Using After and Fail Hooks in Gherkin Step Definitions\nDESCRIPTION: Example showing how to use After and Fail hooks in step definition files. After hooks are used for cleanup, while Fail hooks allow executing code when a test fails.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nAfter(async () => {\n  await someService.cleanup();\n});\n\nFail((test, err) => {\n  // test didn't\n  console.log('Failed with', err);\n  pause();\n});\n```\n\n----------------------------------------\n\nTITLE: Using GraphQL Helper for Queries and Mutations in CodeceptJS\nDESCRIPTION: This example shows how to use the GraphQL helper to send queries and mutations, create data, and clean up after tests in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nlet postData = null\n\nScenario('check post page', async ({ I }) => {\n  // valid access token\n  I.haveRequestHeaders({ auth: '1111111' })\n  // get the first user\n  let response = await I.sendQuery('{ user(id:1) { id }}')\n  let user = response.data\n  // create a post and save its Id\n  response = await I.sendMutation('mutation createPost($input: PostInput!) { createPost(input: $input) { id }}', {\n    input: {\n      author: user.data.id,\n      body: 'some text',\n    },\n  })\n  postData = response.data.data['createPost']\n  // open browser page of new post\n  I.amOnPage(`/posts/${postData.slug}.html`)\n  I.see(postData.body, 'p.body')\n})\n\n// cleanup created data\nAfter(({ I }) => {\n  I.sendMutation('mutation deletePost($id: ID!) { deletePost(id: $id) }', { id: postData.id })\n})\n```\n\n----------------------------------------\n\nTITLE: Using tryTo Method for Conditional Actions in CodeceptJS\nDESCRIPTION: Demonstrates the tryTo plugin for conditional action execution in tests. It allows checking if an element exists first before performing actions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nconst isSeen = await tryTo(() => {\n  I.see('Some text')\n})\n// we are not sure if cookie bar is displayed, but if so - accept cookies\ntryTo(() => I.click('Accept', '.cookies'))\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL Changes in CodeceptJS\nDESCRIPTION: Shows how to wait for URL changes in Single Page Applications.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitInUrl('/info', 2);\n```\n\n----------------------------------------\n\nTITLE: Implementing Basic Page Reload Healing Recipe in JavaScript\nDESCRIPTION: Example of a basic healing recipe that reloads the page when a click action fails. This recipe has a priority of 10 and only triggers on click steps.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/heal.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nheal.addRecipe('reload', {\n  priority: 10,\n  steps: ['click'],\n  fn: async () => {\n    return ({ I }) => {\n      I.refreshPage();\n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Setting Up Custom Locators with Data Attributes\nDESCRIPTION: Examples of configuring and using custom locators with data-test-id and data-qa attributes\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n customLocator: {\n   enabled: true,\n   prefix: '=',\n   attribute: ['data-qa', 'data-test'],\n   strategy: 'css'\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Right Click on Elements in CodeceptJS\nDESCRIPTION: Performs a right click on a clickable element matched by semantic locator, CSS, or XPath. Accepts an optional context parameter to narrow the search scope.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\n// right click element with id el\nI.rightClick('#el');\n// right click link or button with text \"Click me\"\nI.rightClick('Click me');\n// right click button with text \"Click me\" inside .context\nI.rightClick('Click me', '.context');\n```\n\n----------------------------------------\n\nTITLE: Creating a Geolocation Helper for Playwright in CodeceptJS\nDESCRIPTION: Example of a custom helper for Playwright in CodeceptJS that allows setting geolocation. This demonstrates how to leverage Playwright's API within a custom helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst Helper = require('@codeceptjs/helper');\n\nclass MyHelper extends Helper {\n\n  async setGeoLocation(longitude, latitude) {\n    const { browserContext } = this.helpers.Playwright;\n    await browserContext.setGeolocation({ longitude, latitude });\n    await Playwright.refreshPage();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements to Become Visible\nDESCRIPTION: Waits for an element to become visible on a page. By default, it waits for 1 second, but the wait time can be customized. Supports React selectors as well as CSS and XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForVisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Mocking Network Requests in CodeceptJS\nDESCRIPTION: Intercepts and mocks network requests matching a URL pattern. Can be used to abort requests, modify responses, or simulate network conditions. Uses Puppeteer's Request Interception.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nI.mockRoute(/(.png$)|(.jpg$)/, route => route.abort());\n```\n\n----------------------------------------\n\nTITLE: Sync Script Execution in CodeceptJS\nDESCRIPTION: Executes synchronous JavaScript in browser context with return value support.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nI.executeScript(function() {\n  // now we are inside browser context\n  $('date').datetimepicker('setDate', new Date());\n});\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await in CodeceptJS Scenarios\nDESCRIPTION: Demonstrates the usage of async/await syntax in CodeceptJS tests, which is recommended over generators for NodeJS v8.9.1 and above.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_89\n\nLANGUAGE: JavaScript\nCODE:\n```\n;async () => {\n  I.amOnPage('/page')\n  const url = await I.grabTextFrom('.nextPage')\n  I.amOnPage(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Request Modification Example\nDESCRIPTION: Example showing how to modify requests on the fly using the onRequest function to add session cookies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQLDataFactory.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nonRequest: async (request) => {\n    let cookie = await codeceptjs.container.helpers('WebDriver').grabCookie('session');\n    request.headers = { Cookie: `session=${cookie.value}` };\n  }\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Visibility in CodeceptJS\nDESCRIPTION: Example of waiting for an element to become visible on the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForVisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Using Semantic Locators in CodeceptJS\nDESCRIPTION: Shows how to use semantic locators in CodeceptJS, which allows the framework to guess the element's locator from context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/locators.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.click('Sign In');\nI.fillField('Username', 'davert');\n```\n\n----------------------------------------\n\nTITLE: Expect Helper Configuration and Available Methods\nDESCRIPTION: Documentation for the new Expect helper that allows performing assertions based on Chai. The snippet shows how to configure the helper with zero configuration and lists all available assertion methods for use in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\n * This helper allows performing assertions based on Chai.\n *\n * ### Examples\n *\n * Zero-configuration when paired with other helpers like REST, Playwright:\n *\n * ```js\n * // inside codecept.conf.js\n *{\n *   helpers: {\n *     Playwright: {...},\n *     ExpectHelper: {},\n *   }\n\n  Expect Helper\n    #expectEqual\n    #expectNotEqual\n    #expectContain\n    #expectNotContain\n    #expectStartsWith\n    #expectNotStartsWith\n    #expectEndsWith\n    #expectNotEndsWith\n    #expectJsonSchema\n    #expectHasProperty\n    #expectHasAProperty\n    #expectToBeA\n    #expectToBeAn\n    #expectMatchRegex\n    #expectLengthOf\n    #expectTrue\n    #expectEmpty\n    #expectFalse\n    #expectAbove\n    #expectBelow\n    #expectLengthAboveThan\n    #expectLengthBelowThan\n    #expectLengthBelowThan\n    #expectDeepMembers\n    #expectDeepIncludeMembers\n    #expectDeepEqualExcluding\n    #expectLengthBelowThan\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Patterns in CodeceptJS\nDESCRIPTION: Demonstrates how to specify patterns for locating test files, including examples for both JavaScript and TypeScript tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\ntests: 'tests/**.test.js'\n```\n\nLANGUAGE: javascript\nCODE:\n```\ntests: 'tests/**.test.ts'\n```\n\n----------------------------------------\n\nTITLE: Implementing custom error handling in WebDriverIO helper\nDESCRIPTION: Shows how to implement custom error handling for JavaScript errors in a WebDriverIO helper using _before and _afterStep hooks.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_118\n\nLANGUAGE: javascript\nCODE:\n```\n_before() {\n  this.err = null;\n  this.helpers['WebDriverIO'].browser.on('error', (e) => this.err = e);\n}\n\n_afterStep() {\n if (this.err) throw new Error('Browser JS error '+this.err);\n}\n```\n\n----------------------------------------\n\nTITLE: Execute Async Script in Browser Context\nDESCRIPTION: Executes asynchronous JavaScript in the browser context with callback support. Useful for waiting on framework-specific operations like Vue.js nextTick.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nI.executeAsyncScript(function(done) {\n  Vue.nextTick(done); // waiting for next tick\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet val = await I.executeAsyncScript(function(url, done) {\n  // in browser context\n  $.ajax(url, { success: (data) => done(data); }\n}, 'http://ajax.callback.url/');\n```\n\n----------------------------------------\n\nTITLE: Double-Clicking Elements in CodeceptJS\nDESCRIPTION: Shows how to perform a double-click on elements using various locator strategies and contexts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n```\n\n----------------------------------------\n\nTITLE: Grabbing Form Values in CodeceptJS\nDESCRIPTION: Retrieves value from form elements using CSS or XPath selectors. Must be used with await in async functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nlet email = await I.grabValueFrom('input[name=email]');\n```\n\n----------------------------------------\n\nTITLE: Configuring ApiDataFactory Helper in CodeceptJS\nDESCRIPTION: This example demonstrates how to configure the ApiDataFactory helper in CodeceptJS, setting up the endpoint, headers, and factories for data generation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n ApiDataFactory: {\n   endpoint: \"http://user.com/api\",\n   headers: {\n     'Content-Type': 'application/json',\n     'Accept': 'application/json',\n   },\n   factories: {\n     user: {\n        uri: \"/users\",\n        factory: \"./factories/user\"\n     }\n   }\n }\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Parallel with CodeceptJS\nDESCRIPTION: Executes tests in parallel threads using the 'run-workers' command. This can significantly speed up test execution for large test suites.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run-workers 3\n```\n\n----------------------------------------\n\nTITLE: Configuring Coverage Plugin for Playwright/Puppeteer\nDESCRIPTION: Configuration example for the coverage plugin to dump code coverage after tests\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n   coverage: {\n     enabled: true,\n     debug: true,\n     name: 'CodeceptJS Coverage Report',\n     outputDir: 'output/coverage'\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording WebSocket Messages in CodeceptJS\nDESCRIPTION: Demonstrates how to start and stop recording WebSocket messages in CodeceptJS tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.startRecordingWebSocketMessages();\n\n// Later in the test\nawait I.stopRecordingWebSocketMessages();\n```\n\n----------------------------------------\n\nTITLE: Using CSS and XPath Locators in CodeceptJS\nDESCRIPTION: Demonstrates how to use CSS and XPath locators in CodeceptJS, both as guessed locators and strict locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/locators.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElement('.user .profile');\nI.seeElement('#user-name');\nI.seeElement('//table/tr/td[position()=3]');\n\nI.seeElement({ css: 'button' });\nI.seeElement({ xpath: 'descendant::table/tr' });\n```\n\n----------------------------------------\n\nTITLE: Waiting for Number of Browser Tabs\nDESCRIPTION: Waits until the browser has the expected number of tabs open. Takes two parameters: the expected number of tabs and an optional number of seconds to wait.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForNumberOfTabs(2);\n```\n\n----------------------------------------\n\nTITLE: Mocking HTTP Requests in CodeceptJS Tests\nDESCRIPTION: Examples of using the mockRequest method to intercept and mock various HTTP requests during testing. This shows how to block analytics calls, return empty responses, or provide mock data for API endpoints.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// block all Google Analytics calls\nI.mockRequest('/google-analytics/*path', 200);\n// return an empty successful response\nI.mockRequest('GET', '/api/users', 200);\n// block post requests to /api/users and return predefined object\nI.mockRequest('POST', '/api/users', { user: 'davert' });\n// return error request with body\nI.mockRequest('GET', '/api/users/1', 404, { error: 'User not found' });\n```\n\n----------------------------------------\n\nTITLE: Injecting Test Object into CodeceptJS Scenario and Hooks\nDESCRIPTION: Demonstration of how to access the test object directly inside Scenario or hooks to add metadata or artifacts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nBeforeSuite(({ suite }) => {\n  // no test object here, test is not created yet\n})\n\nBefore(({ test }) => {\n  // add artifact to test\n  test.artifacts.myScreenshot = 'screenshot'\n})\n\nScenario('test store-test-and-suite test', ({ test }) => {\n  // add custom meta data\n  test.meta.browser = 'chrome'\n})\n\nAfter(({ test }) => {})\n```\n\n----------------------------------------\n\nTITLE: Filling Form Fields with CodeceptJS\nDESCRIPTION: Fills text fields or textareas with given values after clearing existing content. Fields can be located by label, name, CSS, or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', secret('123456'));\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n```\n\n----------------------------------------\n\nTITLE: Combining Bootstrap and BootstrapAll with Worker Thread Detection\nDESCRIPTION: Advanced example showing how to combine bootstrap and bootstrapAll hooks with worker thread detection to avoid duplicate server initialization in parallel execution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bootstrap.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\n\n// detect if we are in a worker thread\nconst { isMainThread } = require('worker_threads');\n\nasync function startServer() {\n  // implement starting server logic here\n}\nasync function stopServer() {\n  // and stop server too\n}\n\n\nexports.config = {\n  // codeceptjs config goes here\n\n  async bootstrapAll() {\n    await startServer();\n  },\n  async bootstrap() {\n    // start a server only if we are not in worker\n    if (isMainThread) return startServer();\n  }\n\n  async teardown() {\n    // start a server only if we are not in worker\n    if (isMainThread) return stopServer();\n  }\n\n  async teardownAll() {\n    await stopServer();\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Using Within Block in Playwright Tests\nDESCRIPTION: Example of using 'within' block to scope actions to a specific container element. This helps organize tests by grouping actions that occur within a specific part of the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nawait within('.todoapp', () => {\n  I.fillField('.todo', 'my new item');\n  I.pressKey('Enter')\n  I.see('1 item left', '.todo-count');\n  I.click('.todo-list input.toggle');\n});\nI.see('0 items left', '.todo-count');\n```\n\n----------------------------------------\n\nTITLE: Complete Shadow DOM Test Scenario\nDESCRIPTION: Complete CodeceptJS test scenario demonstrating navigation and interaction with shadow DOM elements on a Lightning Web Components page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/shadow.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Shadow Dom Locators');\n\nScenario('should fill input field within shadow elements', ({I}) => {\n\n  // navigate to LWC webpage containing shadow dom\n  I.amOnPage('https://recipes.lwc.dev/');\n\n  // click Click Me! button\n  I.click({ shadow: ['my-app', 'recipe-hello', 'button'] });\n\n  // fill the input field\n  I.fillField({ shadow: ['my-app', 'recipe-hello-binding', 'ui-input', 'input.input'] }, 'value');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring AI in CodeceptJS Configuration File\nDESCRIPTION: JavaScript configuration for AI features in CodeceptJS, including custom request handling, prompt redefinition, and HTML processing options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  request: (messages) => {\n    // ...\n  },\n  prompts: {\n    // {}\n  },\n  html: {\n    // {}\n  },\n  maxTokens: 100000\n}\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop in CodeceptJS\nDESCRIPTION: Implements drag and drop functionality between two elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nI.dragAndDrop('#dragHandle', '#container');\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Helper with HTTPS Agent in CodeceptJS\nDESCRIPTION: Example configuration for the REST helper in CodeceptJS with an HTTPS agent, including SSL certificate setup.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    REST: {\n      endpoint: 'http://site.com/api',\n      prettyPrintJson: true,\n      httpAgent: {\n         key: fs.readFileSync(__dirname + '/path/to/keyfile.key'),\n         cert: fs.readFileSync(__dirname + '/path/to/certfile.cert'),\n         rejectUnauthorized: false,\n         keepAlive: true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grabbing Values from Multiple Form Elements in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves values from multiple form elements located by CSS or XPath and returns them to the test. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nlet inputs = await I.grabValueFromAll('//form/input');\n```\n\n----------------------------------------\n\nTITLE: Using Grabbers in CodeceptJS for Extracting Values\nDESCRIPTION: Demonstrates how to use grabbers in CodeceptJS to extract values from elements and perform assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nScenario('get value of current tasks', async ({ I }) => {\n  I.fillField('.todo', 'my first item');\n  I.pressKey('Enter')\n  I.fillField('.todo', 'my second item');\n  I.pressKey('Enter')\n  let numTodos = await I.grabTextFrom('.todo-count strong');\n  assert.equal(2, numTodos);\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Custom Functions in CodeceptJS\nDESCRIPTION: Shows how to wait for custom functions to return true in browser context. Supports passing arguments and custom timeout values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForFunction(fn[, [args[, timeout]]);\n\nI.waitForFunction(() => window.requests == 0);\nI.waitForFunction(() => window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) => window.requests == count, [3], 5) // pass args and wait for 5 sec\n```\n\n----------------------------------------\n\nTITLE: Using within Effect in JavaScript\nDESCRIPTION: Illustrates the usage of the within effect to perform multiple steps within a specific context, such as an iframe or modal.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/effects.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { within } = require('codeceptjs/effects')\n\n// inside a test...\n\nwithin('.modal', () => {\n  I.see('Modal title')\n  I.click('Close')\n})\n```\n\n----------------------------------------\n\nTITLE: Using CodeceptJS Locator Builder for React Elements\nDESCRIPTION: Shows how to create a more semantic and stable locator using the CodeceptJS Locator Builder to target elements by role and text content.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/react.md#2025-04-21_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nlocate('[role=tab]').withText('Click Me!');\n```\n\n----------------------------------------\n\nTITLE: Basic WebDriver Configuration in CodeceptJS\nDESCRIPTION: Basic configuration example for WebDriver helper showing common settings like smartWait, browser type, window size and timeouts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Self-Healing Tests in CodeceptJS\nDESCRIPTION: This configuration snippet shows how to enable the 'heal' plugin in CodeceptJS for self-healing tests. It includes the heal recipes and sets up the plugin in the config file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('./heal')\n\nexports.config = {\n  // ... your codeceptjs config\n  plugins: {\n    heal: {\n      enabled: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Bootstrap and Teardown in CodeceptJS\nDESCRIPTION: Basic example of configuring bootstrap and teardown functions in CodeceptJS config file to launch and stop a server before and after tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bootstrap.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nvar server = require('./app_server');\n\nexports.config = {\n  tests: \"./*_test.js\",\n  helpers: {},\n\n  // adding bootstrap/teardown\n  async bootstrap() {\n    await server.launch();\n  },\n  async teardown() {\n    await server.stop();\n  }\n  // ...\n  // other config options\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Mocha Instance in CodeceptJS Container\nDESCRIPTION: Demonstrates how to access the current Mocha instance from the CodeceptJS container. This can be useful for interacting with Mocha directly in your tests or custom configurations.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet mocha = container.mocha();\n```\n\n----------------------------------------\n\nTITLE: Locating Elements with Class Attribute\nDESCRIPTION: Shows how to use the new withClassAttr method to locate elements based on their class attribute.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// find div with class contains 'form'\nlocate('div').withClassAttr('text')\n```\n\n----------------------------------------\n\nTITLE: Locating Elements in Mobile Tests\nDESCRIPTION: Examples of different locator strategies for finding elements in mobile applications, including XPath, accessibility ID, and element ID.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElement('//android.widget.ScrollView/android.widget.LinearLayout')\nI.seeElement('~startUserRegistrationButton');\nI.seeElement('#io.selendroid.testapp:id/inputUsername');\nI.tap('Click me!');\nI.click('Click me!');\n```\n\n----------------------------------------\n\nTITLE: Configuring multiple users with autoLogin plugin in CodeceptJS\nDESCRIPTION: Configuration for the autoLogin plugin with multiple user types (user and admin). This setup defines separate login and verification procedures for each user role.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nauth: {\n  enabled: true,\n  saveToFile: true,\n  inject: 'loginAs', // use `loginAs` instead of login\n  users: {\n    user: {\n      login: (I) => {\n         I.amOnPage('/login');\n         I.fillField('email', 'user@site.com');\n         I.fillField('password', '123456');\n         I.click('Login');\n      },\n      check: (I) => {\n         I.amOnPage('/');\n         I.see('User', '.navbar');\n      },\n    },\n    admin: {\n      login: (I) => {\n         I.amOnPage('/login');\n         I.fillField('email', 'admin@site.com');\n         I.fillField('password', '123456');\n         I.click('Login');\n      },\n      check: (I) => {\n         I.amOnPage('/');\n         I.see('Admin', '.navbar');\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Injecting Test Object into CodeceptJS Scenario\nDESCRIPTION: Shows how to access the test object directly inside a Scenario or hook to add metadata or artifacts. This provides more control over test execution and reporting.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nBeforeSuite(({ suite }) => {\n  // no test object here, test is not created yet\n})\n\nBefore(({ test }) => {\n  // add artifact to test\n  test.artifacts.myScreenshot = 'screenshot'\n})\n\nScenario('test store-test-and-suite test', ({ test }) => {\n  // add custom meta data\n  test.meta.browser = 'chrome'\n})\n\nAfter(({ test }) => {})\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Browser Sessions in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to run multiple browser sessions in a single test using the 'session' command. This allows testing different user scenarios simultaneously.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_106\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('run in different browsers', I => {\n  I.amOnPage('/hello')\n  I.see('Hello!')\n  session('john', () => {\n    I.amOnPage('/bye')\n    I.dontSee('Hello')\n    I.see('Bye')\n  })\n  I.see('Hello')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpectHelper in CodeceptJS\nDESCRIPTION: This snippet demonstrates how to configure and use the new ExpectHelper in CodeceptJS. It shows the helper configuration in the codecept.conf.js file and lists the available assertion methods provided by the helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\n * This helper allows performing assertions based on Chai.\n *\n * ### Examples\n *\n * Zero-configuration when paired with other helpers like REST, Playwright:\n *\n * ```js\n * // inside codecept.conf.js\n *{\n *   helpers: {\n *     Playwright: {...},\n *     ExpectHelper: {},\n *   }\n\n  Expect Helper\n    #expectEqual\n    #expectNotEqual\n    #expectContain\n    #expectNotContain\n    #expectStartsWith\n    #expectNotStartsWith\n    #expectEndsWith\n    #expectNotEndsWith\n    #expectJsonSchema\n    #expectHasProperty\n    #expectHasAProperty\n    #expectToBeA\n    #expectToBeAn\n    #expectMatchRegex\n    #expectLengthOf\n    #expectTrue\n    #expectEmpty\n    #expectFalse\n    #expectAbove\n    #expectBelow\n    #expectLengthAboveThan\n    #expectLengthBelowThan\n    #expectLengthBelowThan\n    #expectDeepMembers\n    #expectDeepIncludeMembers\n    #expectDeepEqualExcluding\n    #expectLengthBelowThan\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper with Network Idle Wait\nDESCRIPTION: Example configuration for the Playwright helper in CodeceptJS, setting the base URL, restart strategy, wait for navigation, and wait for action time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Playwright : {\n       url: \"http://localhost\",\n       restart: false,\n       waitForNavigation: \"networkidle0\",\n       waitForAction: 500\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing WebDriverIO Native API in CodeceptJS\nDESCRIPTION: Demonstrates how to access and use the native WebDriverIO browser API within a CodeceptJS test using the useWebDriverTo method. This provides access to functionality not directly exposed by CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nI.useWebDriverTo('do something with native webdriverio api', async ({ browser }) => {\n  // use browser object here\n});\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements to Hide\nDESCRIPTION: Waits for an element to become hidden on a page. By default, it waits for 1 second, but the wait time can be customized. The element can be located using CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitToHide('#popup');\n```\n\n----------------------------------------\n\nTITLE: Implementing Advanced Healing Recipe with Context\nDESCRIPTION: Detailed example of a healing recipe that includes context preparation, test filtering, and conditional healing logic based on URL.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/heal.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nheal.addRecipe('reloadPageOnUserAccount', {\n  priority: 10,\n  steps: [\n    'click',\n  ],\n  prepare: {\n    url: ({ I }) => I.grabCurrentUrl(),\n    html: ({ I }) => I.grabHTMLFrom('body'),\n  },\n  grep: '@flaky',\n  fn: async ({ \n    step, test, error, prevSteps,\n    html, url,\n    }) => {\n    const stepArgs = step.args;\n    if (!url.includes('/user/acccount')) return;\n    return ({ I }) => {\n      I.reloadPage();\n      I.wait(1); \n    };\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Resemble Visual Test Example\nDESCRIPTION: JavaScript example showing how to implement visual testing using ResembleHelper to compare screenshots of a webpage\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/visual.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('To test screen comparison with resemble Js Example test');\n\nScenario('Compare CodeceptIO Home Page @visual-test', async ({ I }) => {\n    I.amOnPage(\"/\");\n    I.saveScreenshot(\"Codecept_IO_Screenshot_Image.png\");\n    I.seeVisualDiff(\"Codecept_IO_Screenshot_Image.png\", {tolerance: 2, prepareBaseImage: false});\n});\n```\n\n----------------------------------------\n\nTITLE: Using Custom Steps API in CodeceptJS\nDESCRIPTION: Examples of using the new Custom Steps API to group steps into sections, including hidden sections and BDD-style pre-defined sections.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Section } = require('codeceptjs/steps');\n\nScenario({ I } => {\n  I.amOnPage('/projects');\n\n  // start section \"Create project\"\n  Section('Create a project');\n  I.click('Create');\n  I.fillField('title', 'Project 123')\n  I.click('Save')\n  I.see('Project created')\n  // calling Section with empty param closes previous section\n  Section()\n\n  // previous section automatically closes\n  // when new section starts\n  Section('open project')\n  // ...\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Section, EndSection } = require('codeceptjs/steps');\n\n// ...\nScenario(..., ({ I }) =>  // ...\n\n  Section('Create a project').hidden()\n  // next steps are not printed:\n  I.click('Create');\n  I.fillField('title', 'Project 123')\n  EndSection()\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Given, When, Then } = require('codeceptjs/steps');\n\n// ...\nScenario(..., ({ I }) =>  // ...\n\n  Given('I have a project')\n  // next steps are not printed:\n  I.click('Create');\n  I.fillField('title', 'Project 123')\n\n  When('I open project');\n  // ...\n\n  Then('I should see analytics in a project')\n  //....\n```\n\n----------------------------------------\n\nTITLE: JavaScript Execution in CodeceptJS\nDESCRIPTION: Executes JavaScript code in the browser context with support for parameters and Promise resolution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nI.executeScript(() => window.alert('Hello world'));\n\nI.executeScript(({x, y}) => x + y, {x, y});\n\nI.executeScript(([x, y]) => x + y, [x, y]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Locator Strategy in CodeceptJS\nDESCRIPTION: This snippet shows how to define a custom locator strategy in the CodeceptJS configuration file. It defines a custom strategy function and adds it to the WebDriver helper configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/locators.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// in codecept.conf.js\n\nconst myStrat = (selector) => {\n  return document.querySelectorAll(selector)\n}\n\n// under WebDriver Helpers Configuration\nWebDriver: {\n  ...\n  customLocatorStrategies: {\n    custom: myStrat\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic Request Mocking in CodeceptJS\nDESCRIPTION: Example of basic request mocking in passthrough mode to intercept API calls.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockRequest.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.mockRequest('GET', '/api/users', '[]');\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver in CodeceptJS\nDESCRIPTION: This snippet demonstrates a more detailed configuration for WebDriver in CodeceptJS. It includes settings for URL, browser, host, port, window size, and desired capabilities for Chrome.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  helpers: {\n    WebDriver: {\n      url: 'https://myapp.com',\n      browser: 'chrome',\n      host: '127.0.0.1',\n      port: 4444,\n      restart: false,\n      windowSize: '1920x1680',\n      desiredCapabilities: {\n        chromeOptions: {\n          args: [ /*\"--headless\",*/ \"--disable-gpu\", \"--no-sandbox\" ]\n        }\n      }\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Using Detox Helper Methods in CodeceptJS Tests\nDESCRIPTION: Examples of using various Detox helper methods in CodeceptJS tests for interacting with mobile app elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.appendField('name', 'davert');\n\nI.checkIfElementExists('~edit');\nI.checkIfElementExists('~edit', '#menu');\n\nI.clearField('~name');\n\nI.click('Login');\nI.click('~nav-1');\nI.click('#user');\nI.click('Login', '#nav');\nI.click({ ios: 'Save', android: 'SAVE' }, '#main');\n\nI.clickAtPoint('Save', 10, 10);\nI.clickAtPoint('~save', 10, 10);\n\nI.dontSee('Record created');\nI.dontSee('Record updated', '#message');\nI.dontSee('Record deleted', '~message');\n\nI.dontSeeElement('~edit');\nI.dontSeeElement('~edit', '#menu');\n\nI.dontSeeElementExist('~edit');\nI.dontSeeElementExist('~edit', '#menu');\n\nI.fillField('Username', 'davert');\nI.fillField('~name', 'davert');\nI.fillField({ android: 'NAME', ios: 'name' }, 'davert');\n\nI.goBack();\n\nconst platform = await I.grabPlatform();\n\nI.installApp();\n\nI.launchApp();\n\nI.longPress('Login', 2);\nI.longPress('~nav', 1);\nI.longPress('Update', 2, '#menu');\n\nI.multiTap('Login', 2);\nI.multiTap('~nav', 2);\nI.multiTap('#user', 2);\nI.multiTap('Update', 2, '#menu');\n\nI.relaunchApp();\n\nI.runOnAndroid(() => {\n   I.click('Button');\n   I.see('Hi, Android');\n});\n\nI.runOnIOS(() => {\n   I.click('Button');\n   I.see('Hi, IOS');\n});\n\nI.saveScreenshot('main-window.png');\n\nI.scrollDown('#container');\n\nI.scrollLeft('#container');\n\nI.scrollRight('#container');\n\nI.scrollUp('#container');\n\nI.see('Record created');\nI.see('Record updated', '#message');\nI.see('Record deleted', '~message');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements in CodeceptJS Detox\nDESCRIPTION: These snippets show various waiting methods: waiting for a specific duration, waiting for an element to exist, waiting for an element to become visible, and waiting for an element to hide.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nI.wait(2); // waits for 2 seconds\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForElement('#message', 1); // wait for 1 second\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForElementVisible('#message', 1); // wait for 1 second\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitToHide('#message', 2); // wait for 2 seconds\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL to Exactly Match\nDESCRIPTION: Waits for the entire URL to exactly match the expected value. Can be used with relative or absolute URLs. Takes parameters for the URL to match and an optional wait time in seconds.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_110\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Specific Elements with CodeceptJS\nDESCRIPTION: Shows how to scroll to specific elements on the page with optional X and Y offsets to fine-tune the scroll position.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollTo('footer');\nI.scrollTo('#submit', 5, 5);\n```\n\n----------------------------------------\n\nTITLE: Multi-Platform Locators in CodeceptJS\nDESCRIPTION: Shows how to specify locators for web, iOS, and Android platforms in a single test, enabling truly cross-platform testing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nI.click({web: '#login', ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'});\n```\n\n----------------------------------------\n\nTITLE: Using Puppeteer API within CodeceptJS Tests\nDESCRIPTION: The usePuppeteerTo method enables direct access to the Puppeteer API within a test. It takes a description string and an async function that receives page and browser objects from the Puppeteer API.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePuppeteerTo('emulate offline mode', async ({ page }) {\n  await page.setOfflineMode(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Maintaining State Between Steps with Before Hooks\nDESCRIPTION: Example showing how to maintain state between steps using a Before hook to initialize a shared state object. This allows data sharing across multiple step definitions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet state = {};\n\n// inside step_definitions\nBefore(() => {\n  state = {};\n});\n\nGiven('have a user', async () => {\n  state.user = await I.have('user');\n});\n\nWhen('I open account page', () => {\n  I.amOnPage(`/user/${state.user.slug}`);\n})\n```\n\n----------------------------------------\n\nTITLE: Using askGptOnPage Method in CodeceptJS\nDESCRIPTION: Example of using askGptOnPage method to query the AI about the current page content.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/AI.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.askGptOnPage('what does this page do?');\n```\n\n----------------------------------------\n\nTITLE: Using Playwright Click with Advanced Position Options\nDESCRIPTION: Demonstrates how to use advanced Playwright options to click at specific coordinates within an element, allowing for more precise interactions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\n// use Playwright click options as 3rd argument\nI.click('canvas', '.model', { position: { x: 20, y: 40 } })\n// check option also has options\nI.checkOption('Agree', '.signup', { position: { x: 5, y: 5 } })\n```\n\n----------------------------------------\n\nTITLE: Grabbing Recorded Network Traffic in JavaScript with Playwright\nDESCRIPTION: This function retrieves the recorded network traffic. It returns an array of recorded network traffic objects, including URL, response status, and body.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nconst traffics = await I.grabRecordedNetworkTraffics();\nexpect(traffics[0].url).to.equal('https://reqres.in/api/comments/1');\nexpect(traffics[0].response.status).to.equal(200);\nexpect(traffics[0].response.body).to.contain({ name: 'this was mocked' });\n```\n\n----------------------------------------\n\nTITLE: Adding Objects to CodeceptJS Container in JavaScript\nDESCRIPTION: Shows how to add new helpers and support objects to the CodeceptJS container at runtime. This is useful for extending the functionality of CodeceptJS with custom components.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet container = require('codeceptjs').container;\n\ncontainer.append({\n  helpers: { // add helper\n    MyHelper: new MyHelper({ config1: 'val1' });\n  },\n  support: { // add page object\n    UserPage: require('./pages/user');\n  }\n})\n```\n\n----------------------------------------\n\nTITLE: Handling Events in Run-Workers Mode in CodeceptJS\nDESCRIPTION: Example showing how to handle events differently when running in workers mode versus normal mode, using the RUNS_WITH_WORKERS environment variable.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { event } = require('codeceptjs');\n\nmodule.exports = function() {\n    // this event would trigger the  `_publishResultsToTestrail` when running `run-workers` command\n  event.dispatcher.on(event.workers.result, async () => {\n    await _publishResultsToTestrail();\n  });\n  \n  // this event would not trigger the  `_publishResultsToTestrail` multiple times when running `run-workers` command\n  event.dispatcher.on(event.all.result, async () => {\n      // when running `run` command, this env var is undefined\n    if (!process.env.RUNS_WITH_WORKERS) await _publishResultsToTestrail();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Mocha Reporter in CodeceptJS\nDESCRIPTION: Demonstrates how to configure additional Mocha reporters, such as mocha-junit-reporter, including options for output files and attachments.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nmocha: {\n  \"mocha-junit-reporter\": {\n    stdout: \"./output/console.log\",\n    options: {\n      mochaFile: \"./output/result.xml\",\n      attachments: true //add screenshot for a failed test\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Importing Effects in JavaScript\nDESCRIPTION: Shows how to import effects directly from CodeceptJS. This is the recommended way to use effects starting from v3.7.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/effects.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { tryTo, retryTo, within } = require('codeceptjs/effects')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom CodeceptJS Runner in JavaScript\nDESCRIPTION: Demonstrates how to create a custom runner script to execute CodeceptJS tests programmatically, including configuration, initialization, and error handling.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/internal-api.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { codecept: Codecept } = require('codeceptjs');\n\n// define main config\nconst config = { \n  helpers: { \n    WebDriver: { \n      browser: 'chrome', \n      url: 'http://localhost' \n    }\n  }\n};\n\nconst opts = { steps: true };\n\n// run CodeceptJS inside async function\n(async () => {\n  const codecept = new Codecept(config, options);\n  codecept.init(__dirname);\n\n  try {\n    await codecept.bootstrap();\n    codecept.loadTests('**_test.js');\n    // run tests\n    await codecept.run(test);\n  } catch (err) {\n    printError(err);\n    process.exitCode = 1;\n  } finally {\n    await codecept.teardown();\n  }    \n})();\n```\n\n----------------------------------------\n\nTITLE: JSON Schema Validation Example\nDESCRIPTION: Example of validating JSON response against a schema using Joi\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst Joi = require('joi');\n\n// create schema definition using Joi API\nconst schema = Joi.object().keys({\n  email: Joi.string().email().required(),\n  phone: Joi.string().regex(/^\\d{3}-\\d{3}-\\d{4}$/).required(),\n  birthday: Joi.date().max('1-1-2004').iso()\n});\n\n// check that response matches that schema\nI.seeResponseMatchesJsonSchema(schema);\n```\n\n----------------------------------------\n\nTITLE: WebDriver Configuration with Browser Version\nDESCRIPTION: Configuration example showing how to specify browser version including support for different Chrome channels.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       browserVersion: '116.0.5793.0',\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Playwright Client in Custom Helpers (JavaScript)\nDESCRIPTION: Demonstrates how to access Playwright client objects (browser, page, browserContext) from custom helpers in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst { browser } = this.helpers.Playwright;\nawait browser.pages(); // List of pages in the browser\n\n// get current page\nconst { page } = this.helpers.Playwright;\nawait page.url(); // Get the url of the current page\n\nconst { browserContext } = this.helpers.Playwright;\nawait browserContext.cookies(); // get current browser context\n```\n\n----------------------------------------\n\nTITLE: Using Playwright Locators in CodeceptJS\nDESCRIPTION: Demonstration of using Playwright-specific locators including React selectors and data-testid attributes for element selection.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('using playwright locator', () => {\n  I.amOnPage('https://codecept.io/test-react-calculator/');\n  I.click('7');\n  I.click({ pw: '_react=t[name = \"=\"]' });\n  I.seeElement({ pw: '_react=t[value = \"7\"]' });\n  I.click({ pw: '_react=t[name = \"+\"]' });\n  I.click({ pw: '_react=t[name = \"3\"]' });\n  I.click({ pw: '_react=t[name = \"=\"]' });\n  I.seeElement({ pw: '_react=t[value = \"10\"]' });\n});\n```\n\n----------------------------------------\n\nTITLE: Typing Text into Fields in CodeceptJS\nDESCRIPTION: The type method allows typing text into active fields with optional typing delay. It accepts strings, arrays of characters, or secret values, and is useful when the fillField method isn't suitable.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// passing in a string\nI.type('Type this out.');\n\n// typing values with a 100ms interval\nI.type('4141555311111111', 100);\n\n// passing in an array\nI.type(['T', 'E', 'X', 'T']);\n\n// passing a secret\nI.type(secret('123456'));\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for CodeceptJS with Playwright\nDESCRIPTION: This YAML snippet shows how to set up GitHub Actions to run CodeceptJS tests with Playwright. It uses the official Microsoft Playwright GitHub action to install necessary dependencies before executing the tests in headless mode.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\n# from workflows/tests.yml\n- uses: microsoft/playwright-github-action@v1\n- name: run CodeceptJS tests\n  run: npx codeceptjs run\n```\n\n----------------------------------------\n\nTITLE: Checking Response Keys\nDESCRIPTION: Examples of using seeResponseContainsKeys method to validate presence of keys in JSON response.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/JSONResponse.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// response.data == { user: { name: 'jon', email: 'jon@doe.com' } }\n\nI.seeResponseContainsKeys(['user']);\n\n// response.data == [{ user: 'jon' }, { user: 'matt'}]\n\nI.seeResponseContainsKeys(['user']);\n```\n\n----------------------------------------\n\nTITLE: Checking Element Attributes with CodeceptJS\nDESCRIPTION: Shows how to verify that elements have specific attribute values using the seeAttributesOnElements method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeAttributesOnElements('//form', { method: \"post\"});\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies with CodeceptJS\nDESCRIPTION: Uses the setCookie method to set one or multiple cookies using Selenium's JSON cookie format. Can accept a single cookie object or an array of cookie objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nI.setCookie({name: 'auth', value: true});\n\n// as array\nI.setCookie([\n  {name: 'auth', value: true},\n  {name: 'agree', value: true}\n]);\n```\n\n----------------------------------------\n\nTITLE: Rerunning Flaky Tests with CodeceptJS\nDESCRIPTION: Runs tests multiple times to detect and fix flaky tests using the 'run-rerun' command. This feature requires specific configuration in the codecept.conf.js file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run-rerun\n```\n\n----------------------------------------\n\nTITLE: Verifying Form Field Values in CodeceptJS\nDESCRIPTION: Checks that an input field or textarea contains the expected value. Fields can be located by label text, name attribute, CSS, or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n```\n\n----------------------------------------\n\nTITLE: Verifying Checkbox State with CodeceptJS\nDESCRIPTION: Demonstrates how to check if a checkbox is checked using various locator strategies, including label text, ID selector, and CSS selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n```\n\n----------------------------------------\n\nTITLE: Using Interactive Pause in CodeceptJS Tests\nDESCRIPTION: A test script with interactive pause functionality. This allows developers to open a page and interactively build a test case by typing commands in the terminal during test execution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Sample Test');\n\nScenario('open my website', ({ I }) => {\n  I.amOnPage('http://todomvc.com/examples/react/');\n  pause();\n});\n```\n\n----------------------------------------\n\nTITLE: Printing CodeceptJS Test Steps\nDESCRIPTION: Shows how to structure a CodeceptJS test scenario with multiple steps. When run with the '--steps' flag, each step will be printed to the console.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/index.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('Checkout test', ({ I }) => {\n  I.amOnPage('/checkout');\n  I.fillField('First name', 'davert');\n  I.fillField('#lastName', 'mik');\n  I.fillField('Promo code', '123345')\n  //...\n})\n```\n\n----------------------------------------\n\nTITLE: Using Els API for Element Interactions\nDESCRIPTION: Demonstrates the usage of new Els API functions for direct element manipulation including element(), eachElement(), and various expect functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst { element, eachElement, expectElement, expectAnyElement, expectAllElements } = require('codeceptjs/els')\n\n// ...\n\nScenario('element functions demo', async ({ I }) => {\n  // Get attribute of first button\n  const attr = await element('.button', async el => await el.getAttribute('data-test'))\n\n  // Log text of each list item\n  await eachElement('.list-item', async (el, idx) => {\n    console.log(`Item ${idx}: ${await el.getText()}`)\n  })\n\n  // Assert first submit button is enabled\n  await expectElement('.submit', async el => await el.isEnabled())\n\n  // Assert at least one product is in stock\n  await expectAnyElement('.product', async el => {\n    return (await el.getAttribute('data-status')) === 'in-stock'\n  })\n\n  // Assert all required fields have required attribute\n  await expectAllElements('.required', async el => {\n    return (await el.getAttribute('required')) !== null\n  })\n})\n```\n\n----------------------------------------\n\nTITLE: Adding a Custom Method to a Helper in CodeceptJS\nDESCRIPTION: Example of adding a custom method to a helper class in CodeceptJS. This method can then be called using the 'I' object in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst Helper = require('@codeceptjs/helper');\n\nclass MyHelper extends Helper {\n\n  doAwesomeThings() {\n    console.log('Hello from MyHelpr');\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Making API Requests in CodeceptJS\nDESCRIPTION: Performs API requests using current browser session cookies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nconst users = await I.makeApiRequest('GET', '/api/users', { params: { page: 1 }});\nusers[0]\nI.makeApiRequest('PATCH', )\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Element Selection in CodeceptJS\nDESCRIPTION: This code snippet demonstrates how to select elements cross-platform in CodeceptJS, using XPath for Android (with view-tag) and testID for iOS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile-react-native-locators.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.tap({android: '//*[@view-tag=\"someButton\"]', ios: '~someButton'})\n```\n\n----------------------------------------\n\nTITLE: Handling Multiple Browser Windows in CodeceptJS Tests\nDESCRIPTION: This example demonstrates how to handle multiple browser windows in CodeceptJS, including opening new windows, switching between them, and closing tabs. It uses assertions to verify window handles and URL changes throughout the process.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\n\nScenario('should open main page of configured site, open a popup, switch to main page, then switch to popup, close popup, and go back to main page', async ({ I }) => {\n    I.amOnPage('/');\n    const handleBeforePopup = await I.grabCurrentWindowHandle();\n    const urlBeforePopup = await I.grabCurrentUrl();\n    const allHandlesBeforePopup = await I.grabAllWindowHandles();\n    assert.equal(allHandlesBeforePopup.length, 1, 'Single Window');\n\n    await I.executeScript(() => {\n        window.open('https://www.w3schools.com/', 'new window', 'toolbar=yes,scrollbars=yes,resizable=yes,width=400,height=400');\n    });\n\n    const allHandlesAfterPopup = await I.grabAllWindowHandles();\n    assert.equal(allHandlesAfterPopup.length, 2, 'Two Windows');\n\n    await I.switchToWindow(allHandlesAfterPopup[1]);\n    const urlAfterPopup = await I.grabCurrentUrl();\n    assert.equal(urlAfterPopup, 'https://www.w3schools.com/', 'Expected URL: Popup');\n\n    assert.equal(handleBeforePopup, allHandlesAfterPopup[0], 'Expected Window: Main Window');\n    await I.switchToWindow(handleBeforePopup);\n    const currentURL = await I.grabCurrentUrl();\n    assert.equal(currentURL, urlBeforePopup, 'Expected URL: Main URL');\n\n    await I.switchToWindow(allHandlesAfterPopup[1]);\n    const urlAfterSwitchBack = await I.grabCurrentUrl();\n    assert.equal(urlAfterSwitchBack, 'https://www.w3schools.com/', 'Expected URL: Popup');\n    await I.closeCurrentTab();\n\n    const allHandlesAfterPopupClosed = await I.grabAllWindowHandles();\n    assert.equal(allHandlesAfterPopupClosed.length, 1, 'Single Window');\n    const currentWindowHandle = await I.grabCurrentWindowHandle();\n    assert.equal(currentWindowHandle, allHandlesAfterPopup[0], 'Expected Window: Main Window');\n\n});\n```\n\n----------------------------------------\n\nTITLE: Mouse and Cursor Control in CodeceptJS\nDESCRIPTION: Controls mouse cursor movement with optional offset positioning.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n```\n\n----------------------------------------\n\nTITLE: Using Effects Module for Flow Control\nDESCRIPTION: Example of using the new Effects module for handling test flow control with tryTo and retryTo functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { tryTo, retryTo } = require('codeceptjs/effects')\n\nScenario(..., ({ I }) => {\n  I.amOnPage('/')\n  // tryTo returns boolean if code in function fails\n  // use it to execute actions that may fail but not affect the test flow\n  // for instance, for accepting cookie banners\n  const isItWorking = tryTo(() => I.see('It works'))\n\n  // run multiple steps and retry on failure\n  retryTo(() => {\n    I.click('Start Working!');\n    I.see('It works')\n  }, 5);\n})\n```\n\n----------------------------------------\n\nTITLE: Grabbing Performance Timing Data in JavaScript with Playwright\nDESCRIPTION: This function retrieves performance timing data using the Navigation Timing API. It returns an object containing response time, DOM interactive time, DOM content loaded time, and load event end time in milliseconds.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.amOnPage('https://example.com');\nlet data = await I.grabDataFromPerformanceTiming();\n//Returned data\n{ // all results are in [ms]\n  responseEnd: 23,\n  domInteractive: 44,\n  domContentLoadedEventEnd: 196,\n  loadEventEnd: 241\n}\n```\n\n----------------------------------------\n\nTITLE: Writing a Basic Mobile Test in CodeceptJS\nDESCRIPTION: Example of a simple mobile test script using CodeceptJS syntax. It demonstrates various actions like clicking elements, filling fields, and assertions for both Android and iOS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeAppIsInstalled(\"io.super.app\");\nI.click('~startUserRegistrationCD');\nI.fillField('~email of the customer', 'Nothing special');\nI.see('davert@codecept.io', '~email of the customer');\nI.clearField('~email of the customer');\nI.dontSee('Nothing special', '~email of the customer');\nI.seeElement({\n  android: 'android.widget.Button',\n  ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CustomLocator Plugin with Multiple Attributes\nDESCRIPTION: Configure the customLocator plugin to use multiple attributes for locating elements. This example sets up the plugin to use both 'data-qa' and 'data-test' attributes with a '$' prefix.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n customLocator: {\n   enabled: true,\n   prefix: '$',\n   attribute: ['data-qa', 'data-test'],\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Helper with Specific Browser Version\nDESCRIPTION: This snippet shows how to configure the WebDriver helper with a specific browser version or channel. It demonstrates setting up Chrome with a particular version or using predefined channels.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       browserVersion: '116.0.5793.0', // or 'stable', 'beta', 'dev' or 'canary'\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserStack Configuration for Mobile Testing with CodeceptJS\nDESCRIPTION: This code shows how to configure BrowserStack capabilities for mobile testing with CodeceptJS. It includes settings for Appium, device specifications, app details, and various timeouts and options for Android testing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nexport const caps = {\n    androidCaps: {\n        appiumV2: true,\n        host: \"hub-cloud.browserstack.com\",\n        port: 4444,\n        user: process.env.BROWSERSTACK_USER,\n        key: process.env.BROWSERSTACK_KEY,\n        'app': `bs://c700ce60cf13ae8ed97705a55b8e022f1hjhkjh3c5827c`,\n        browser: '',\n        desiredCapabilities: {\n            'appPackage': data.packageName,\n            'deviceName': process.env.DEVICE || 'Google Pixel 3',\n            'platformName': process.env.PLATFORM || 'android',\n            'platformVersion': process.env.OS_VERSION || '10.0',\n            'automationName': process.env.ENGINE || 'UIAutomator2',\n            'newCommandTimeout': 300000,\n            'androidDeviceReadyTimeout': 300000,\n            'androidInstallTimeout': 90000,\n            'appWaitDuration': 300000,\n            'autoGrantPermissions': true,\n            'gpsEnabled': true,\n            'isHeadless': false,\n            'noReset': false,\n            'noSign': true,\n            'bstack:options' : {\n                \"appiumVersion\" : \"2.0.1\",\n            },\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Pressing Keys in Browser with CodeceptJS\nDESCRIPTION: Demonstrates how to press keys in the browser, including single keys and key combinations with modifier keys. This is useful for keyboard navigation and shortcuts when interacting with web pages.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKey('Backspace');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKey(['Control', 'Z']);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKey(['CommandOrControl', 'Z']);\n```\n\n----------------------------------------\n\nTITLE: Configuring MockServer Helper in CodeceptJS\nDESCRIPTION: Example configuration for the MockServer Helper in the codecept.conf.js file. It shows how to set up the helper with default options including port, host, and HTTPS options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockServer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    REST: {...},\n    MockServer: {\n      // default mock server config\n      port: 9393,\n      host: '0.0.0.0',\n      httpsOpts: {\n        key: '',\n        cert: '',\n      },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Email Assertions and Link Extraction\nDESCRIPTION: Example demonstrating email assertions and extracting URLs from email body\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/email.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// clicking a link in email\nconst email = await I.waitForLatestEmail()\n// extract a link by RegExp\nconst url = email.body.match(/http(s):\\/\\/(.*?)\\s/)[0]\n// open URL\nI.amOnPage(url)\n```\n\n----------------------------------------\n\nTITLE: Checking Page Title in CodeceptJS\nDESCRIPTION: Verifies that the page title contains the specified text. Useful for confirming you're on the expected page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInTitle('Home Page');\n```\n\n----------------------------------------\n\nTITLE: Waiting Methods in CodeceptJS\nDESCRIPTION: These methods allow waiting for various conditions: pausing execution, waiting for elements to be clickable, detached, present, or enabled, waiting for cookies, and waiting for custom functions to return true.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nI.wait(2); // wait 2 secs\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForClickable('.btn.continue');\nI.waitForClickable('.btn.continue', 5); // wait for 5 secs\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForCookie(\"token\");\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForDetached('#popup');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForFunction(() => window.requests == 0);\nI.waitForFunction(() => window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) => window.requests == count, [3], 5) // pass args and wait for 5 sec\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements in Playwright/Puppeteer for CodeceptJS Custom Helper\nDESCRIPTION: Example of how to access and interact with web elements using Playwright or Puppeteer in a custom CodeceptJS helper. This method clicks on every element matching a given locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nasync clickOnEveryElement(locator) {\n  const { Playwright } = this.helpers;\n  const els = await Playwright._locate(locator);\n\n  for (let el of els) {\n    await el.click();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Complex Array Responses with JSONResponse Helper\nDESCRIPTION: Demonstrates how to validate array responses using the JSONResponse helper, which can iterate over array items and check for specific keys and values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n// response.data == [\n//   { user: { name: 'jon', email: 'jon@doe.com' } },\n//   { user: { name: 'matt', email: 'matt@doe.com' } },\n//]\n\nI.seeResponseContainsKeys(['user'])\nI.seeResponseContainsJson({ user: { email: 'jon@doe.com' } })\nI.seeResponseContainsJson({ user: { email: 'matt@doe.com' } })\nI.dontSeeResponseContainsJson({ user: 2 })\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Helper with DevTools Protocol in CodeceptJS\nDESCRIPTION: Example of setting up WebDriver Helper in CodeceptJS to use Chrome with DevTools protocol and headless mode.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       url: \"http://localhost\",\n       browser: \"chrome\",\n       devtoolsProtocol: true,\n       desiredCapabilities: {\n         chromeOptions: {\n           args: [ \"--headless\", \"--disable-gpu\", \"--no-sandbox\" ]\n         }\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic API Data Factory Usage in JavaScript\nDESCRIPTION: Example showing basic usage of ApiDataFactory helper to create test data records using the have() method\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/ApiDataFactory.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.have('user', { login: 'davert', email: 'davert@mail.com' });\nlet id = await I.have('post', { title: 'My first post'});\nI.haveMultiple('comment', 3, {post_id: id});\n```\n\n----------------------------------------\n\nTITLE: Using Soft Assertions in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to use soft assertions in CodeceptJS tests. Soft assertions allow multiple checks without stopping test execution immediately on failure.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\n{\n  helpers: {\n    Playwright: {...},\n    SoftExpectHelper: {},\n  }\n}\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// in scenario\nI.softExpectEqual('a', 'b')\nI.flushSoftAssertions() // Throws an error if any soft assertions have failed. The error message contains all the accumulated failures.\n```\n\n----------------------------------------\n\nTITLE: Handling File Downloads in CodeceptJS\nDESCRIPTION: Manages file downloads by specifying filename and save location in output directory.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nI.handleDownloads('downloads/avatar.jpg');\nI.click('Download Avatar');\nI.amInPath('output/downloads');\nI.waitForFile('avatar.jpg', 5);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Form Field Value in CodeceptJS\nDESCRIPTION: Gets the value of a form input element matching a CSS or XPath selector. If multiple elements match, returns value from the first element. Should be used with await operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nlet email = await I.grabValueFrom('input[name=email]');\n```\n\n----------------------------------------\n\nTITLE: Using secret() Function for Sensitive Data\nDESCRIPTION: Example of using the global secret() function to fill in sensitive data in tests, which helps to handle passwords and other confidential information.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nI.fillField('password', secret('123456'))\n```\n\n----------------------------------------\n\nTITLE: Generating a Page Object in CodeceptJS\nDESCRIPTION: Command to generate a new Page Object file in CodeceptJS for better test organization and reusability.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs gpo\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI with Bearer Token for CodeceptJS\nDESCRIPTION: Configuration for using Azure OpenAI service with a bearer token in CodeceptJS. This setup requires the '@azure/openai' and '@azure/identity' packages, along with Azure credentials.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  request: async messages => {\n    try {\n      const { OpenAIClient } = require('@azure/openai')\n      const { DefaultAzureCredential } = require('@azure/identity')\n\n      const endpoint = process.env.API_ENDPOINT\n      const deploymentId = process.env.DEPLOYMENT_ID\n\n      const client = new OpenAIClient(endpoint, new DefaultAzureCredential())\n      const result = await client.getCompletions(deploymentId, {\n        prompt: messages,\n        model: 'gpt-3.5-turbo', // your preferred model\n      })\n\n      return result.choices[0]?.text\n    } catch (error) {\n      console.error('Error calling API:', error)\n      throw error\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Elements in WebDriver for CodeceptJS Custom Helper\nDESCRIPTION: Example of how to access and interact with web elements using WebDriver in a custom CodeceptJS helper. This method clicks on every element matching a given locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nasync clickOnEveryElement(locator) {\n  const { WebDriver } = this.helpers;\n  const els = await WebDriver._locate(locator);\n\n  for (let el of els) {\n    await el.click();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Customizing Test Result Reporting in Workers\nDESCRIPTION: Example showing how to access and customize the reporting of test results from worker threads, including statistics and individual test statuses.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nworkers.on(event.all.result, (status, completedTests, workerStats) => {\n  // print output\n  console.log('Test status : ', status ? 'Passes' : 'Failed ');\n\n  // print stats\n  console.log(`Total tests : ${workerStats.tests}`);\n  console.log(`Passed tests : ${workerStats.passes}`);\n  console.log(`Failed test tests : ${workerStats.failures}`);\n\n  // If you don't want to listen for failed and passed test separately, use completedTests object\n  for (const test of Object.values(completedTests)) {\n    console.log(`Test status: ${test.err===null}, `, `Test : ${test.title}`);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Page Source Content with CodeceptJS\nDESCRIPTION: Uses the seeInSource method to check if the current page's raw source code contains a given string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInSource('<h1>Green eggs &amp; ham</h1>');\n```\n\n----------------------------------------\n\nTITLE: Clearing Input Fields in CodeceptJS\nDESCRIPTION: Illustrates how to clear the value of a textarea or text input element using different locator strategies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nI.clearField('Email');\nI.clearField('user[email]');\nI.clearField('#email');\n```\n\n----------------------------------------\n\nTITLE: Switching to WebView Context in CodeceptJS\nDESCRIPTION: Demonstrates how to switch to a WebView context within a mobile app using CodeceptJS. It shows the use of the 'within' function to execute commands in the WebView context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nI.click('~startWebView');\nwithin('webview', () => {\n  I.see('Preferred car');\n  I.click('Send me your name!');\n});\n```\n\n----------------------------------------\n\nTITLE: Async/Await in Page Objects\nDESCRIPTION: Example of using async/await pattern in page objects for handling asynchronous operations.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I } = inject();\n\nmodule.exports = {\n\n  // setting locators\n  container: \"//div[@class = 'numbers']\",\n  mainItem: {\n    number: \".//div[contains(@class, 'numbers__main-number')]\",\n    title: \".//div[contains(@class, 'numbers__main-title-block')]\"\n  },\n\n  // introducing methods\n  async openMainArticle() {\n    I.waitForVisible(this.container)\n    let _this = this\n    let title;\n    await within(this.container, async () => {\n      title = await I.grabTextFrom(_this.mainItem.number);\n      let subtitle = await I.grabTextFrom(_this.mainItem.title);\n      title = title + \" \" + subtitle.charAt(0).toLowerCase() + subtitle.slice(1);\n      await I.click(_this.mainItem.title)\n    })\n    return title;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing API Tests with Playwright and JSONResponse in CodeceptJS\nDESCRIPTION: This snippet shows how to use the JSONResponse helper with Playwright to perform API tests, including checking status codes and response content.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.makeApiRequest('GET', '/users/1');\nI.seeResponseCodeIs(200);\nI.seeResponseContainsKeys(['user']);\n```\n\n----------------------------------------\n\nTITLE: Handling Simple Tables with DataTableArgument\nDESCRIPTION: Example of handling a simple table without headers using DataTableArgument. Shows how to access raw data and transpose the table structure.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_8\n\nLANGUAGE: gherkin\nCODE:\n```\n  Given I have a short employees card\n    | Harry | Potter  |\n    | Chuck | Norris  |\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTableArgument } = require('codeceptjs');\n//...\nGiven('I have a short employees card', (table) => {\n  const dataTableArgument = new DataTableArgument(table);\n  const raw = dataTableArgument.raw(); \n  // row = [['Harry', 'Potter'], ['Chuck', 'Norris']]\n  dataTableArgument.transpose();\n  const transposedRaw = dataTableArgument.raw();\n  // transposedRaw = [['Harry', 'Chuck'], ['Potter', 'Norris']];\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in CodeceptJS\nDESCRIPTION: Demonstrates how to use dotenv to load sensitive data from .env files in CodeceptJS configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('dotenv').config({ path: '.env' });\n```\n\n----------------------------------------\n\nTITLE: Waiting for a Specific Number of Visible Elements\nDESCRIPTION: Waits until a specified number of elements matching the locator are visible on the page. Takes parameters for the element locator, the expected number of elements, and an optional wait time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitNumberOfVisibleElements('a', 3);\n```\n\n----------------------------------------\n\nTITLE: Checking Element Presence in DOM with CodeceptJS\nDESCRIPTION: Verifies that a given element is present in the DOM, regardless of visibility. The element can be located by CSS, XPath, or strict locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElementInDOM('#modal');\n```\n\n----------------------------------------\n\nTITLE: Recording Network Traffic in WebDriver\nDESCRIPTION: Examples showing how to record and verify network traffic using the new WebDriver traffic manipulation features\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n// recording traffics and verify the traffic\nI.startRecordingTraffic()\nI.amOnPage('https://codecept.io/')\nI.seeTraffic({ name: 'traffics', url: 'https://codecept.io/img/companies/BC_LogoScreen_C.jpg' })\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Visibility with CodeceptJS\nDESCRIPTION: Demonstrates how to check if an element is visible on the page using the seeElement method with CSS or XPath locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElement('#modal');\n```\n\n----------------------------------------\n\nTITLE: Capturing Full Page Screenshots in CodeceptJS\nDESCRIPTION: Saves a screenshot to the output folder with options to capture the entire page by resizing to the full scrollable area. The filename is relative to the output folder specified in the configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png', true) //resizes to available scrollHeight and scrollWidth before taking screenshot\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL to Contain Specific Text\nDESCRIPTION: Waits for the URL to contain a specific string. Useful in single-page applications to detect page changes. Takes parameters for the URL part to check for and an optional wait time in seconds.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_107\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitInUrl('/info', 2);\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeceptJS for Parallel Execution with Workers\nDESCRIPTION: Docker Compose configuration for running CodeceptJS tests in parallel using multiple workers, with additional debug output.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  codeceptjs:\n    image: codeception/codeceptjs\n    environment:\n      - NO_OF_WORKERS=3\n      - CODECEPT_ARGS=--debug\n    volumes:\n      - .:/tests\n```\n\n----------------------------------------\n\nTITLE: REST Authentication Configuration\nDESCRIPTION: Configuration for REST helper with authentication headers\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  REST: {\n    defaultHeaders: {\n      // use Bearer Authorization\n      'Authorization': 'Bearer 11111',\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'expectAllElements' Function in CodeceptJS\nDESCRIPTION: This example demonstrates the usage of the 'expectAllElements' function in a test scenario. It shows various assertions to ensure that all elements in a collection meet specific criteria, such as verifying required fields, checking all checkboxes, ensuring non-empty text, and confirming all buttons are enabled.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/els.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('validate all elements meet criteria', async ({ I }) => {\n  // Navigate to the page\n  I.amOnPage('/dashboard');\n\n  // Verify all required fields have the required attribute\n  await expectAllElements('.required-field', async el => {\n    const required = await el.getAttribute('required');\n    return required !== null;\n  });\n\n  // Check if all checkboxes in a form are checked\n  await expectAllElements('input[type=\"checkbox\"]', async el => {\n    return await el.isSelected();\n  });\n\n  // Verify all items in a list have non-empty text\n  await expectAllElements('.list-item', async el => {\n    const text = await el.getText();\n    return text.trim().length > 0;\n  });\n\n  // Ensure all buttons in a section are enabled\n  await expectAllElements('#action-section button', async el => {\n    return await el.isEnabled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Appending Text to Input Fields in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to append text to input fields or textareas in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nI.appendField('#myTextField', 'appended');\n// typing secret\nI.appendField('password', secret('123456'));\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeceptJS Project with Language Selection\nDESCRIPTION: Command to create a new CodeceptJS project with an option to select a language for test localization.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs init\n```\n\n----------------------------------------\n\nTITLE: Using Comments and Say Function in CodeceptJS\nDESCRIPTION: Shows how to add informative comments to test scenarios using the say command, with optional color parameters for output formatting.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.say('I am going to publish post')\nI.say('I enter title and body')\nI.say('I expect post is visible on site')\n\nI.say('This is red', 'red') //red is used\nI.say('This is blue', 'blue') //blue is used\nI.say('This is by default') //cyan is used\n```\n\n----------------------------------------\n\nTITLE: Checking Element Presence in DOM using CodeceptJS\nDESCRIPTION: Verifies that a specified element is present in the DOM, regardless of visibility. This method is useful for checking hidden elements or elements that may become visible later.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElementInDOM('#modal');\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Helper in CodeceptJS\nDESCRIPTION: This snippet demonstrates how to configure the GraphQL helper in CodeceptJS config file, setting up the endpoint and default headers for GraphQL requests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  GraphQL: {\n    endpoint: \"http://localhost/graphql/\",\n    defaultHeaders: {\n      'Auth': '11111',\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n  },\n  WebDriver : {\n    url: 'http://localhost',\n    browser: 'chrome'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with Playwright using npx\nDESCRIPTION: Command to install CodeceptJS with Playwright in the current directory using npx.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-codeceptjs .\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Named Sessions\nDESCRIPTION: Demonstrates how to create multiple named sessions and switch between them during test execution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('test', ({ I }) => {\n  // opens 3 additional browsers\n  session('john');\n  session('mary');\n  session('jane');\n\n  I.amOnPage('/');\n\n  // switch to session by its name\n  session('mary', () => {\n    I.amOnPage('/login');\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuration for Element Highlighting Behavior in CodeceptJS\nDESCRIPTION: This snippet shows the configuration options for element highlighting in CodeceptJS with different combinations of verbose and highlight settings. It demonstrates how the element highlighting behavior changes based on these settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n  verbose/ highlight\tTRUE\tTRUE -> highlight element\n  verbose/ highlight\tTRUE\tFALSE -> no highlight element\n  verbose/ highlight\tFALSE\tTRUE -> no highlight element\n  verbose/ highlight\tFALSE\tFALSE -> no highlight element\n```\n\n----------------------------------------\n\nTITLE: Grabbing Text from Element in CodeceptJS Test\nDESCRIPTION: Demonstrates how to retrieve text from an element and use it in subsequent steps of a test scenario. The example shows logging in with a generated password.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('login with generated password', async ({ I }) => {\n  I.fillField('email', 'miles@davis.com')\n  I.click('Generate Password')\n  const password = await I.grabTextFrom('#password')\n  I.click('Login')\n  I.fillField('email', 'miles@davis.com')\n  I.fillField('password', password)\n  I.click('Log in!')\n  I.see('Hello, Miles')\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing Recorded Network Traffic in CodeceptJS\nDESCRIPTION: Retrieves recorded network traffic information including request URLs, response status codes, and response bodies. Useful for validating API calls and mocked responses.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst traffics = await I.grabRecordedNetworkTraffics();\nexpect(traffics[0].url).to.equal('https://reqres.in/api/comments/1');\nexpect(traffics[0].response.status).to.equal(200);\nexpect(traffics[0].response.body).to.contain({ name: 'this was mocked' });\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from an Element in CodeceptJS\nDESCRIPTION: Retrieves text content from a single element matching a CSS or XPath selector. If multiple elements match, returns text from the first element. Should be used with await operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nlet pin = await I.grabTextFrom('#pin');\n```\n\n----------------------------------------\n\nTITLE: Tab Management in CodeceptJS\nDESCRIPTION: Opens and manages new browser tabs with optional device emulation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nI.openNewTab();\n\n// enable mobile\nI.openNewTab({ isMobile: true });\n```\n\n----------------------------------------\n\nTITLE: Attaching Files in CodeceptJS (JavaScript)\nDESCRIPTION: Shows how to attach files to elements in tests using relative file paths.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n```\n\n----------------------------------------\n\nTITLE: Getting Multiple Element Attributes in CodeceptJS\nDESCRIPTION: Method to retrieve attribute values from multiple elements matching a locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nlet hints = await I.grabAttributeFromAll('.tooltip', 'title');\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Healing Recipe in CodeceptJS\nDESCRIPTION: Demonstrates how to create a healing recipe that reloads the page when a modal visibility error occurs. The recipe includes error checking and recovery steps.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nheal.addRecipe('reloadPageIfModalIsNotVisisble', {\n  steps: ['click'],\n  fn: async ({ error, step }) => {\n    if (error.message.include('modal is not visible')) return\n\n    return async ({ I }) => {\n      I.reloadPage()\n      I.wait(1)\n      await step.run()\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONResponse Helper with REST\nDESCRIPTION: Example configuration for using JSONResponse helper with REST helper in CodeceptJS configuration file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/JSONResponse.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\n{\n  helpers: {\n    REST: {\n      endpoint: 'http://site.com/api',\n    },\n    JSONResponse: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Plugin in CodeceptJS Config\nDESCRIPTION: JSON configuration showing how to enable a custom plugin in CodeceptJS config file by specifying the module path and enabled status.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": {\n  \"myPlugin\": {\n    \"require\": \"./path/to/my/module\",\n    \"enabled\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Simple autoLogin plugin configuration in CodeceptJS\nDESCRIPTION: Basic configuration for the autoLogin plugin with a single admin user. The plugin manages authentication by saving and restoring cookies between test runs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nauth: {\n  enabled: true,\n  saveToFile: true,\n  inject: 'login',\n  users: {\n    admin: {\n      // loginAdmin function is defined in `steps_file.js`\n      login: (I) => I.loginAdmin(),\n      // if we see `Admin` on page, we assume we are logged in\n      check: (I) => {\n         I.amOnPage('/');\n         I.see('Admin');\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing BootstrapAll and TeardownAll with Temp Folder Management\nDESCRIPTION: Example showing how to implement bootstrapAll and teardownAll hooks for parallel execution, managing temporary folder creation and cleanup across test workers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bootstrap.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst tempFolder = process.cwd() + '/tmpFolder';\n\nexports.config = {\n  tests: \"./*_test.js\",\n  helpers: {},\n\n  // adding bootstrapAll/teardownAll\n  async bootstrapAll() {\n    fs.mkdirSync(tempFolder);\n  },\n\n  async bootstrap() {\n    console.log('Do some pretty suite setup stuff');\n  },\n\n  async teardown() {\n    console.log('Cool, one of the workers have finished');\n  },\n\n  async teardownAll() {\n    console.log('All workers have finished running tests so we should clean up the temp folder');\n    fs.rmdirSync(tempFolder);\n  },\n\n  // ...\n  // other config options\n}\n```\n\n----------------------------------------\n\nTITLE: Extracting Text from Multiple Elements in CodeceptJS\nDESCRIPTION: Retrieves text content from all elements matching a CSS or XPath selector. Returns an array of strings containing each element's text. Should be used with await operator in async functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nlet pins = await I.grabTextFromAll('#pin li');\n```\n\n----------------------------------------\n\nTITLE: File Download Testing Example\nDESCRIPTION: Shows how to test file downloads using Puppeteer helper combined with FileSystem helper\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileName = await I.downloadFile('a.file-link')\nI.amInPath('output')\nI.seeFile(fileName)\n```\n\n----------------------------------------\n\nTITLE: Using waitForElement in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for an element to be present on page. This method accepts a locator and optional wait time in seconds (defaults to 1 second).\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n```\n\n----------------------------------------\n\nTITLE: Grabbing Text from Element in JavaScript with Playwright\nDESCRIPTION: This function retrieves text from an element located by CSS or XPath. It returns a Promise resolving to the text content as a string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nlet pin = await I.grabTextFrom('#pin');\n```\n\n----------------------------------------\n\nTITLE: Using Grabbed Text in CodeceptJS Test\nDESCRIPTION: Shows how to use the 'await' keyword with the grabTextFrom action to synchronize the step with the scenario. The test should be written inside an async function.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('use page title', async ({ I }) => {\n  // ...\n  const password = await I.grabTextFrom('#password')\n  I.fillField('password', password)\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Helper in CodeceptJS\nDESCRIPTION: Example configuration for the REST helper in CodeceptJS, including endpoint, pretty printing, and custom request handling.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    REST: {\n      endpoint: 'http://site.com/api',\n      prettyPrintJson: true,\n      onRequest: (request) => {\n        request.headers.auth = '123';\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grabbing Current URL in JavaScript with Playwright\nDESCRIPTION: This function retrieves the current URL from the browser. It uses the grabCurrentUrl method and returns a Promise resolving to the current URL as a string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nlet url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Plugin for Database Population\nDESCRIPTION: Plugin example demonstrating how to execute database population code before tests marked with a specific tag using event listeners.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// populate database for slow tests\nconst event = require('codeceptjs').event;\n\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    if (test.tags.indexOf('@populate') >= 0) {\n      recorder.add('populate database', async () => {\n        // populate database for this test\n      })\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Absence in DOM in CodeceptJS\nDESCRIPTION: Demonstrates how to check that an element is not present in the page DOM, regardless of visibility.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeElementInDOM('.nav'); // checks that element is not on page visible or not\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeceptJS with @codeceptjs/configure\nDESCRIPTION: Demonstrates how to use the @codeceptjs/configure package to set common configuration options like window size and headless mode across different helpers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setHeadlessWhen, setWindowSize } = require('@codeceptjs/configure')\n\n// run headless when CI environment variable set\nsetHeadlessWhen(process.env.CI)\n// set window size for any helper: Puppeteer, WebDriver, TestCafe\nsetWindowSize(1600, 1200)\n\nexports.config = {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Empty Todo Test\nDESCRIPTION: Shows the simplest form of creating a todo test without implementation details.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nScenario.todo('Test')\n```\n\n----------------------------------------\n\nTITLE: Using CodeceptJS Event Listeners in JavaScript\nDESCRIPTION: Demonstrates how to use the event dispatcher to listen for pre-defined CodeceptJS events and execute custom code.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/internal-api.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { event } = require('codeceptjs');\n\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    console.log('--- I am before test --');\n\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Visible Text on Page in CodeceptJS\nDESCRIPTION: Checks that a page contains visible text. Supports an optional context parameter to narrow down the search area using CSS, XPath, or strict locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n```\n\n----------------------------------------\n\nTITLE: Capturing Browser Logs in CodeceptJS\nDESCRIPTION: Method to retrieve JavaScript logs from the browser. The log buffer is reset after each request.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nlet logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))\n```\n\n----------------------------------------\n\nTITLE: Locating Clickable Elements (JavaScript)\nDESCRIPTION: Shows how to find a clickable element using human-readable text in custom helpers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['Playwright']._locateClickable('Next page').then // ...\n```\n\n----------------------------------------\n\nTITLE: Switching Between Native and Web Contexts in CodeceptJS\nDESCRIPTION: Demonstrates the use of 'switchToWeb' and 'switchToNative' methods to switch between native and web contexts in a mobile app test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nI.click('~startWebView');\nI.switchToWeb();\nI.see('Preferred car');\nI.click('Send me your name!');\nI.switchToNative();\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request in CodeceptJS REST Helper\nDESCRIPTION: Example of sending a POST request with payload using the REST helper in CodeceptJS, including an option to mask sensitive data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendPostRequest('/api/users.json', { \"email\": \"user@user.com\" });\n\n// To mask the payload in logs\nI.sendPostRequest('/api/users.json', secret({ \"email\": \"user@user.com\" }));\n```\n\n----------------------------------------\n\nTITLE: Using DataTableArgument in BDD Tests\nDESCRIPTION: Demonstrates how to work with table data structures in BDD-style tests using the DataTableArgument class to handle data transformations.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTableArgument } = require('codeceptjs');\n//...\nGiven('I have an employee card', (table) => {\n  const dataTableArgument = new DataTableArgument(table);\n  const hashes = dataTableArgument.hashes();\n  // hashes = [{ name: 'Harry', surname: 'Potter', position: 'Seeker' }];\n  const rows = dataTableArgument.rows();\n  // rows = [['Harry', 'Potter', Seeker]];\n  })\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with Docker Locally\nDESCRIPTION: Demonstrates how to run CodeceptJS tests using Docker locally, mounting the current directory and executing with various options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/docker.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --net=host -v $PWD:/tests codeceptjs/codeceptjs\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --net=host -v $PWD:/tests codeceptjs/codeceptjs codeceptjs run --steps\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --net=host -v $PWD:/tests codeceptjs/codeceptjs codeceptjs run --grep \"@user\"\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQLDataFactory Helper\nDESCRIPTION: Configuration example for GraphQLDataFactory helper showing endpoint setup, cleanup settings, headers, and factory definitions with mutation queries.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nGraphQLDataFactory: {\n  endpoint: \"http://user.com/graphql\",\n  cleanup: true,\n  headers: {\n    'Content-Type': 'application/json',\n    'Accept': 'application/json',\n  },\n  factories: {\n    createUser: {\n      query: 'mutation createUser($input: UserInput!) { createUser(input: $input) { id name }}',\n      factory: './factories/users',\n      revert: (data) => ({\n        query: 'mutation deleteUser($id: ID!) { deleteUser(id: $id) }',\n        variables: { id : data.id},\n      }),\n    },\n  }\n```\n\n----------------------------------------\n\nTITLE: Configuring Retries for Tests\nDESCRIPTION: Example of configuring retries for a feature and a scenario to handle flaky tests by automatically re-running them when they fail.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Complex JS Stuff', { retries: 3 })\n\nScenario('Not that complex', { retries: 1 }, I => {\n  // test goes here\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing Internationalization in Gherkin Scenarios\nDESCRIPTION: This snippet shows how to use internationalization (i18n) in Gherkin scenarios. It demonstrates a scenario outline written in German, including translated keywords and steps for a checkout process.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_41\n\nLANGUAGE: gherkin\nCODE:\n```\n#language: de\nFunktionalität: Checkout-Prozess\n  Um Produkte zu kaufen\n  Als Kunde\n  Möchte ich in der Lage sein, mehrere Produkte zu kaufen\n\n  @i18n\n  Szenariogrundriss: Bestellrabatt\n    Angenommen ich habe ein Produkt mit einem Preis von <price>$ in meinem Warenkorb\n    Und der Rabatt für Bestellungen über $20 beträgt 10 %\n    Wenn ich zur Kasse gehe\n    Dann sollte ich den Gesamtpreis von \"<total>\" $ sehen\n\n    Beispiele:\n      | price | total |\n      | 10    | 10.0  |\n```\n\n----------------------------------------\n\nTITLE: Inspecting Network Traffic with POST Data in CodeceptJS\nDESCRIPTION: Verifies network requests by checking for specific POST data. This method can inspect request payload data after starting traffic recording.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n// checking the request url contains certain post data\nI.amOnPage('https://openai.com/blog/chatgpt');\nI.startRecordingTraffic();\nawait I.seeTraffic({\n    name: 'event',\n    url: 'https://cloudflareinsights.com/cdn-cgi/rum',\n    requestPostData: {\n    st: 2,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Using Locator Builder for Complex Element Selection in CodeceptJS\nDESCRIPTION: Example of using the Locator Builder to create a complex locator that combines CSS and XPath selectors to find specific elements in a structured hierarchy.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_108\n\nLANGUAGE: javascript\nCODE:\n```\n// select 'Edit' link inside 2nd row of a table\nlocate('//table').find('tr').at(2).find('a').withText('Edit')\n```\n\n----------------------------------------\n\nTITLE: Accessing CodeceptJS Container in JavaScript\nDESCRIPTION: Demonstrates how to retrieve helpers, support objects, and plugins from the CodeceptJS container. This snippet shows various methods to access different components of the container.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nlet container = require('codeceptjs').container;\n\n// get object with all helpers\nlet helpers = container.helpers();\n\n// get helper by name\nlet WebDriver = container.helpers('WebDriver');\n\n// get support objects\nlet support = container.support();\n\n// get support object by name\nlet UserPage = container.support('UserPage');\n\n// get all registered plugins\nlet plugins = container.plugins();\n```\n\n----------------------------------------\n\nTITLE: Using Data Filtering in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to filter data sets and use generators for data-driven testing in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/advanced.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nData(function*() {\n  yield { user: 'davert'};\n  yield { user: 'andrey'};\n}).Scenario() // ...\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Detachment in CodeceptJS\nDESCRIPTION: Waits for an element to be removed from the DOM. This method is useful for checking the disappearance of elements, such as loading indicators or dismissed popups.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForDetached('#popup');\n```\n\n----------------------------------------\n\nTITLE: Using @codeceptjs/configure for Common Configuration Patterns\nDESCRIPTION: This snippet demonstrates how to use the @codeceptjs/configure package to set up common configuration patterns such as headless mode and window size.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setHeadlessWhen, setWindowSize } = require('@codeceptjs/configure')\n\nsetHeadlessWhen(process.env.CI)\nsetWindowSize(1600, 1200)\n\nexports.config = {\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Visibility in CodeceptJS\nDESCRIPTION: Verifies that a given element is visible on the page. The element can be located by CSS, XPath, or strict locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElement('#modal');\n```\n\n----------------------------------------\n\nTITLE: Feature and Scenario Configuration with Fluent API in CodeceptJS\nDESCRIPTION: Examples of configuring features and scenarios using the fluent API introduced in version 1.2.0. Shows how to set timeout, retry, browser configuration, and expected errors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('checkout').timeout(3000).retry(2)\n\nScenario('user can order in firefox', I => {\n  // see dynamic configuration\n})\n  .config({ browser: 'firefox' })\n  .timeout(20000)\n\nScenario('this test should throw error', I => {\n  // I.amOnPage\n}).throws(new Error())\n```\n\n----------------------------------------\n\nTITLE: Network Request Mocking in CodeceptJS Puppeteer\nDESCRIPTION: Demonstrates how to mock network requests and responses using Puppeteer's request interception API.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nI.mockRoute('https://reqres.in/api/comments/1', request => {\n  request.respond({\n    status: 200,\n    headers: { 'Access-Control-Allow-Origin': '*' },\n    contentType: 'application/json',\n    body: '{\"name\": \"this was mocked\" }',\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Exact URL Match in CodeceptJS\nDESCRIPTION: Waits for the entire URL to exactly match the expected value. Supports both relative and absolute URLs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');\n```\n\n----------------------------------------\n\nTITLE: Executing Sync Scripts in Browser with CodeceptJS\nDESCRIPTION: Executes synchronous JavaScript in the browser context, supporting jQuery operations and value returns. Can pass arguments to the executed function and return values using await.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nI.executeScript(function() {\n  // now we are inside browser context\n  $('date').datetimepicker('setDate', new Date());\n});\n\nlet date = await I.executeScript(function(el) {\n  // only basic types can be returned\n  return $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Invisibility in CodeceptJS\nDESCRIPTION: Example of waiting for an element to become invisible or be removed from the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForInvisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: URL Validation in CodeceptJS\nDESCRIPTION: Validates that current URL does not match a specified path, supporting both relative and absolute URLs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCurrentUrlEquals('/login'); // relative url are ok\nI.dontSeeCurrentUrlEquals('http://mysite.com/login'); // absolute urls are also ok\n```\n\n----------------------------------------\n\nTITLE: Helper Function for Cross-Platform TestID Selection\nDESCRIPTION: This function simplifies cross-platform element selection by generating the appropriate locator string for both Android and iOS based on a given testID.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile-react-native-locators.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nfunction tid(id) {\n  return {\n    android: `//*[@view-tag=\"${id}\"]`,\n    ios: '~' + id\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI with API Key for CodeceptJS\nDESCRIPTION: Configuration for using Azure OpenAI service with an API key in CodeceptJS. This setup requires the '@azure/openai' package and Azure OpenAI credentials.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  request: async messages => {\n    const { OpenAIClient, AzureKeyCredential } = require('@azure/openai')\n\n    const client = new OpenAIClient('https://<resource name>.openai.azure.com/', new AzureKeyCredential('<Azure API key>'))\n    const { choices } = await client.getCompletions('<deployment ID>', messages)\n\n    return choices[0]?.message?.content\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Performing Assertions in CodeceptJS\nDESCRIPTION: This example demonstrates how to perform assertions in CodeceptJS using the 'see' method. It shows both a general assertion and a more specific one targeting a particular CSS selector.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('User is valid')\n// better to specify context:\nI.see('User is valid', '.alert-success')\n```\n\n----------------------------------------\n\nTITLE: Overriding configuration options via CLI\nDESCRIPTION: Demonstrates how to override configuration options dynamically using the --override or -o flag when running tests via the CLI.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_123\n\nLANGUAGE: bash\nCODE:\n```\ncodeceptjs run -o '{ \"bootstrap\": \"bootstrap.js\"}'\ncodecepjs run -o '{ \"helpers\": {\"WebDriverIO\": {\"browser\": \"chrome\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in CodeceptJS\nDESCRIPTION: The setCookie method enables setting single or multiple cookies. It accepts either a single cookie object with name and value properties or an array of cookie objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nI.setCookie({name: 'auth', value: true});\n\n// as array\nI.setCookie([\n  {name: 'auth', value: true},\n  {name: 'agree', value: true}\n]);\n```\n\n----------------------------------------\n\nTITLE: Creating a Factory for User Generation in CodeceptJS\nDESCRIPTION: This snippet shows how to create a factory module for generating user data using Rosie and Faker libraries in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// factories/post.js\nvar Factory = require('rosie').Factory\nvar faker = require('@faker-js/faker')\n\nmodule.exports = new Factory().attr('name', () => faker.person.findName()).attr('email', () => faker.internet.email())\n```\n\n----------------------------------------\n\nTITLE: Waiting for Text in CodeceptJS\nDESCRIPTION: Demonstrates waiting for specific text to appear, with optional context element and timeout.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n```\n\n----------------------------------------\n\nTITLE: Mocking Network Routes in CodeceptJS Puppeteer\nDESCRIPTION: Examples of mocking network requests and responses using Puppeteer's request interception API, including handling specific URLs and file types.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nI.mockRoute('https://reqres.in/api/comments/1', request => {\n  request.respond({\n    status: 200,\n    headers: { 'Access-Control-Allow-Origin': '*' },\n    contentType: 'application/json',\n    body: '{\"name\": \"this was mocked\" }',\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Helper with Print Curl Feature\nDESCRIPTION: Configuration example for enabling curl command printing in REST helper requests\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_9\n\nLANGUAGE: json\nCODE:\n```\nConfig:\n\n...\nREST: {\n ...\n printCurl: true,\n ...\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Implementing Data Access Object in CodeceptJS\nDESCRIPTION: Demonstrates how to create a Data Access Object for customizing API interactions and providing test data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst { faker } = require('@faker-js/faker');\nconst { I } = inject();\nconst { output } = require('codeceptjs');\n\nclass InterfaceData {\n\n  async getLanguages() {\n      const { data } = await I.sendGetRequest('/api/languages');\n      const { records } = data;\n      output.debug(`Languages ${records.map(r => r.language)}`);\n      return records;\n  }\n\n  async getUsername() {\n    return faker.user.name();\n  }\n}\n\nmodule.exports = new InterfaceData;\n```\n\n----------------------------------------\n\nTITLE: Verifying Exact Text Content with CodeceptJS\nDESCRIPTION: Uses the seeTextEquals method to check that text is exactly equal to the provided value within a specified context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeTextEquals('text', 'h1');\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Test with Promise-Based Typings\nDESCRIPTION: Example of a CodeceptJS test rewritten to use await with promise-based typings for better control and TypeScript compliance.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/typescript.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.amOnPage('/')\nawait I.click('Login')\nawait I.see('Hello!')\n```\n\n----------------------------------------\n\nTITLE: Blocking Network Traffic in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to block network traffic for specific URLs or patterns in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nI.blockTraffic('http://example.com/css/style.css');\nI.blockTraffic('http://example.com/css/*.css');\nI.blockTraffic('http://example.com/**');\nI.blockTraffic(/.css$/);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.blockTraffic(['http://example.com/css/style.css', 'http://example.com/css/*.css']);\n```\n\n----------------------------------------\n\nTITLE: Scrolling Elements into View with CodeceptJS\nDESCRIPTION: Demonstrates various ways to scroll elements into the viewport, including basic scrolling, alignment options, and smooth scrolling behavior.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollIntoView('#submit');\nI.scrollIntoView('#submit', true);\nI.scrollIntoView('#submit', { behavior: \"smooth\", block: \"center\", inline: \"center\" });\n```\n\n----------------------------------------\n\nTITLE: Checking URL Contains Fragment in CodeceptJS\nDESCRIPTION: Verifies that the current URL contains the provided fragment. Useful for confirming you're on the expected page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInCurrentUrl('/register'); // we are on registration page\n```\n\n----------------------------------------\n\nTITLE: Switching Windows with CodeceptJS\nDESCRIPTION: Uses the switchToWindow method to switch to a window with a specified handle. Requires grabbing window handles first.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nconst windows = await I.grabAllWindowHandles();\n// ... do something\nawait I.switchToWindow( windows[0] );\n\nconst window = await I.grabCurrentWindowHandle();\n// ... do something\nawait I.switchToWindow( window );\n```\n\n----------------------------------------\n\nTITLE: Setting Puppeteer Request Headers in CodeceptJS\nDESCRIPTION: The setPuppeteerRequestHeaders method allows setting custom headers for all subsequent network requests made through Puppeteer.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nI.setPuppeteerRequestHeaders({\n   'X-Sent-By': 'CodeceptJS',\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared Browser Session for API Requests\nDESCRIPTION: Configuration example showing how to share browser cookies with API requests for maintaining session state across browser and API tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet cookies; // share cookies\n\nexports.config = {\nhelpers: {\n  ApiDataFactory: {\n    endpoint: 'http://local.app/api',\n    cleanup: true,\n    headers: {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n    factories: {\n      user: {\n          uri: \"/users\",\n          factory: \"./factories/user\",\n      }\n    },\n    onRequest: async (request) => {\n      // get a cookie if it's not obtained yet\n      if (cookies) cookies = await codeceptjs.container.helpers('WebDriver').grabCookie();\n      // add cookies to request for a current request\n      request.headers = { Cookie: cookies.map(c => `${c.name}=${c.value}`).join('; ') };\n    },\n  }\n  WebDriver: {\n    url: 'https://local.app/',\n    browser: 'chrome',\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Selecting Dropdown Options with CodeceptJS\nDESCRIPTION: Uses the selectOption method to select an option in a dropdown. Fields can be located by label, name, CSS, or XPath. Options can be selected by visible text or value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n// Selecting multiple options\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n```\n\n----------------------------------------\n\nTITLE: Using Within Block in CodeceptJS for Scoped Actions\nDESCRIPTION: Shows how to use the within block in CodeceptJS to perform actions within a specific element or context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait within('.todoapp', () => {\n  I.fillField('.todo', 'my new item');\n  I.pressKey('Enter')\n  I.see('1 item left', '.todo-count');\n  I.click('.todo-list input.toggle');\n});\nI.see('0 items left', '.todo-count');\n```\n\n----------------------------------------\n\nTITLE: Recording and Verifying Network Traffic in Playwright\nDESCRIPTION: This snippet shows how to record network traffic and verify specific requests using the new Playwright helper methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// recording traffics and verify the traffic\nawait I.startRecordingTraffic()\nI.amOnPage('https://codecept.io/')\nawait I.seeTraffic({ name: 'traffics', url: 'https://codecept.io/img/companies/BC_LogoScreen_C.jpg' })\n```\n\n----------------------------------------\n\nTITLE: Email Assertions Example\nDESCRIPTION: Comprehensive example showing various email assertion methods\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/email.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForLatestEmail()\nI.seeEmailIsFrom('@mysite.com')\nI.seeInEmailSubject('Awesome Proposal!')\nI.seeInEmailBody('To unsubscribe click here')\nI.seeNumberOfEmailAttachments(2)\nI.seeEmailAttachment('Attachment_1.pdf')\nI.seeEmailAttachment('Attachment_2.pdf')\n```\n\n----------------------------------------\n\nTITLE: Filling Input Fields in CodeceptJS\nDESCRIPTION: Fills a text field or textarea with the given string after clearing its value. Fields can be located by label, name, CSS, XPath, or other locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', secret('123456'));\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n```\n\n----------------------------------------\n\nTITLE: Getting Cookie Values in CodeceptJS\nDESCRIPTION: Method to retrieve a cookie object by name or all cookies if no name is provided.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nlet cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element to Hide in CodeceptJS\nDESCRIPTION: Shows how to wait for an element to hide on the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitToHide('#popup');\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper with DOMContentLoaded Wait\nDESCRIPTION: Example configuration for the Playwright helper, setting the base URL, restart strategy, wait for DOMContentLoaded event, and wait for action time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Playwright : {\n       url: \"http://localhost\",\n       restart: false,\n       waitForNavigation: \"domcontentloaded\",\n       waitForAction: 500\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing AI-Based Healing Recipe\nDESCRIPTION: Recipe configuration for AI-powered test healing that uses page HTML content to generate healing suggestions for various test actions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/heal.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nheal.addRecipe('ai', {\n  priority: 10,\n  prepare: {\n    html: ({ I }) => I.grabHTMLFrom('body'),\n  },\n  steps: [\n    'click',\n    'fillField',\n    'appendField',\n    'selectOption',\n    'attachFile',\n    'checkOption',\n    'uncheckOption',\n    'doubleClick',\n  ],\n  fn: async (args) => {\n    return ai.healFailedStep(args);\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing Puppeteer API in CodeceptJS\nDESCRIPTION: Example of accessing and using Puppeteer API directly within a CodeceptJS test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePuppeteerTo('emulate offline mode', async ({ page, browser }) => {\n  await page.setOfflineMode(true);\n});\n```\n\n----------------------------------------\n\nTITLE: Form Field Population in CodeceptJS\nDESCRIPTION: Fills form fields with specified values after clearing existing content.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', secret('123456'));\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n```\n\n----------------------------------------\n\nTITLE: Mocking Network Requests in CodeceptJS with Puppeteer\nDESCRIPTION: Examples of mocking network requests and responses using Puppeteer in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nI.mockRoute('https://reqres.in/api/comments/1', request => {\n  request.respond({\n    status: 200,\n    headers: { 'Access-Control-Allow-Origin': '*' },\n    contentType: 'application/json',\n    body: '{\"name\": \"this was mocked\" }',\n  });\n})\n\nI.mockRoute('**/*.{png,jpg,jpeg}', route => route.abort());\n\n// To disable mocking for a route call `stopMockingRoute`\n// for previously mocked URL\nI.stopMockingRoute('**/*.{png,jpg,jpeg}'\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements with CodeceptJS\nDESCRIPTION: Performs clicks on various elements using different locator strategies. Can click links, buttons and elements using text content, CSS selectors, XPath or strict locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n```\n\n----------------------------------------\n\nTITLE: Configuring the analyze plugin in CodeceptJS\nDESCRIPTION: Example configuration for the analyze plugin in codecept.conf.js. This plugin uses AI to analyze test failures, providing insights and clustering similar failures.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// in codecept.conf.js\nexports.config = {\n  plugins: {\n    analyze: {\n      enabled: true,\n      clusterize: 5,\n      analyze: 2,\n      vision: false,\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Attributes in CodeceptJS\nDESCRIPTION: Verifies that all elements matching a locator have specified attributes. This method checks for the presence of given attributes and their values on multiple elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeAttributesOnElements('//form', { method: \"post\"});\n```\n\n----------------------------------------\n\nTITLE: Using Locator Builder in CodeceptJS\nDESCRIPTION: Demonstrates how to use the locator builder in CodeceptJS to compose custom locators using JavaScript.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/locators.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nlocate('a')\n  .withAttr({ href: '#' })\n  .inside(locate('label').withText('Hello'));\n\nlocate('//table')\n  .find('a')\n  .withText('Edit')\n  .as('edit button')\n```\n\n----------------------------------------\n\nTITLE: Tapping Elements in CodeceptJS Detox\nDESCRIPTION: This snippet shows how to tap on elements using various locator strategies such as text, accessibility id, or element id. It also demonstrates locating elements within a specific context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nI.tap('Login'); // locate by text\nI.tap('~nav-1'); // locate by accessibility label\nI.tap('#user'); // locate by id\nI.tap('Login', '#nav'); // locate by text inside #nav\nI.tap({ ios: 'Save', android: 'SAVE' }, '#main'); // different texts on iOS and Android\n```\n\n----------------------------------------\n\nTITLE: Grabbing Traffic URL in CodeceptJS\nDESCRIPTION: Retrieves full URL of network requests matching a string or regex pattern. Returns a Promise.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nI.grabTrafficUrl('https://api.example.com/session');\nI.grabTrafficUrl(/session.*start/);\n```\n\n----------------------------------------\n\nTITLE: Unchecking Options in CodeceptJS\nDESCRIPTION: Unselects a checkbox or radio button using the uncheckOption method. The element can be located by label, name, CSS, or XPath. An optional context parameter can be provided to narrow the search.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nI.uncheckOption('#agree');\nI.uncheckOption('I Agree to Terms and Conditions');\nI.uncheckOption('agree', '//form');\n```\n\n----------------------------------------\n\nTITLE: Verifying Exact Text Match in CodeceptJS\nDESCRIPTION: Checks that the text in an element exactly matches the provided string. Supports an optional context parameter for narrowing the search scope.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeTextEquals('text', 'h1');\n```\n\n----------------------------------------\n\nTITLE: Clicking Links and Waiting for Navigation in CodeceptJS\nDESCRIPTION: Shows how to click a link and wait for navigation before proceeding.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.clickLink('Logout', '#nav');\n```\n\n----------------------------------------\n\nTITLE: Accessing WebDriver Client in Custom Helpers\nDESCRIPTION: Demonstrates how to access the WebDriver client from a custom helper in CodeceptJS by retrieving the browser property from the WebDriver helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { WebDriver } = this.helpers;\nconst browser = WebDriver.browser\n```\n\n----------------------------------------\n\nTITLE: Wait for File Download Example in CodeceptJS\nDESCRIPTION: Shows how to wait for a specific file to appear in the downloads directory\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/FileSystem.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nI.handleDownloads('downloads/largeFilesName.txt');\nI.click('Download large File');\nI.amInPath('output/downloads');\nI.waitForFile('largeFilesName.txt', 10); // wait 10 seconds for file\n```\n\n----------------------------------------\n\nTITLE: Waiting for Text Appearance in CodeceptJS\nDESCRIPTION: Waits for specific text to appear on the page using the waitForText method. The search can be narrowed down by providing a context locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n```\n\n----------------------------------------\n\nTITLE: Grabbing Cookie Value in JavaScript with Playwright\nDESCRIPTION: This function retrieves a cookie object by name or all cookies if no name is provided. It uses the grabCookie method and returns a Promise resolving to the cookie value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nlet cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Helper with Automatic Driver Management\nDESCRIPTION: Configuration example for WebDriver Helper that uses WebdriverIO's automatic driver management feature. This simplified configuration eliminates the need for separate driver services, as WebdriverIO will handle downloading and managing the appropriate driver.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Timeouts in CodeceptJS\nDESCRIPTION: Shows how to set timeouts at feature and scenario level using configuration options. Feature timeouts apply to all tests in a suite while scenario timeouts are specific to individual tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\n// set timeout for every test in suite to 10 secs\nFeature('tests with timeout', { timeout: 10 })\n\n// set timeout for this test to 20 secs\nScenario('a test with timeout', { timeout: 20 }, ({ I }) => {})\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in Drop-down Menus with CodeceptJS\nDESCRIPTION: Demonstrates how to select options in drop-down menus using various locator strategies and handling multiple selections.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_89\n\nLANGUAGE: javascript\nCODE:\n```\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n// Selecting multiple options\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n```\n\n----------------------------------------\n\nTITLE: Implementing Worker Message Communication in CodeceptJS\nDESCRIPTION: Demonstrates how to set up event listeners in the main process to handle messages from child workers. Shows handling of both custom messages and test result events.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// inside main process\n// listen for any non test related events\nworkers.on('message', (data) => {\n  console.log(data)\n});\n\nworkers.on(event.all.result, (status, completedTests, workerStats) => {\n  // logic\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Input Field Values in CodeceptJS\nDESCRIPTION: Verifies that an input field or textarea contains a specific value. This method supports various locator strategies including label text, name attribute, CSS, and XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n```\n\n----------------------------------------\n\nTITLE: Fill Form Fields in CodeceptJS\nDESCRIPTION: Examples of filling form fields using different locator strategies including labels, names, CSS selectors, and strict locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', secret('123456'));\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Cookies with CodeceptJS\nDESCRIPTION: Uses the waitForCookie method to wait for a specific cookie to be present. Can specify custom wait time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForCookie(\"token\");\n```\n\n----------------------------------------\n\nTITLE: Clicking Elements in CodeceptJS (JavaScript)\nDESCRIPTION: Shows various ways to click elements in tests using different locator strategies and options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n// simple link\nI.click('Logout');\n// button of form\nI.click('Submit');\n// CSS button\nI.click('#form input[type=submit]');\n// XPath\nI.click('//form/*[@type=submit]');\n// link in context\nI.click('Logout', '#nav');\n// using strict locator\nI.click({css: 'nav a.login'});\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// click on element at position\nI.click('canvas', '.model', { position: { x: 20, y: 40 } })\n\n// make ctrl-click\nI.click('.edit', null, { modifiers: ['Ctrl'] } )\n```\n\n----------------------------------------\n\nTITLE: Asking GPT a Question on the Current Page in JavaScript\nDESCRIPTION: Demonstrates how to use the askGptOnPage method to ask GPT a question about the current page's content. This method sends the entire page HTML to GPT for context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/OpenAI.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.askGptOnPage('what does this page do?');\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Tests with AI and Debug Mode\nDESCRIPTION: This command shows how to run CodeceptJS tests with AI features and debug mode enabled, which allows for interactive pausing and AI-assisted test writing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs run --debug --ai\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Modules in CodeceptJS\nDESCRIPTION: This snippet demonstrates how to configure required modules in CodeceptJS, including ts-node for TypeScript support and assertion libraries like 'should'.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  tests: './*_test.js',\n  timeout: 10000,\n  output: '',\n  helpers: {},\n  include: {},\n  bootstrap: false,\n  mocha: {},\n  // require modules\n  require: ['ts-node/register', 'should'],\n}\n```\n\n----------------------------------------\n\nTITLE: Locating Clickable Elements in WebDriver Helper\nDESCRIPTION: Shows how to use the _locateClickable method to find clickable elements by providing human-readable text, with an optional context parameter.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst els = await this.helpers.WebDriver._locateClickable('Next page');\nconst els = await this.helpers.WebDriver._locateClickable('Next page', '.pages');\n```\n\n----------------------------------------\n\nTITLE: Using eachElement Plugin to Iterate Over Elements\nDESCRIPTION: Example of using the eachElement plugin to iterate over a collection of elements and perform actions on each one using the direct engine API.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nawait eachElement('click all links in .list', '.list a', (el) => {\n  await el.click();\n})\n```\n\n----------------------------------------\n\nTITLE: Locating Elements Using WebDriver Helper in CodeceptJS\nDESCRIPTION: Examples of using the _locate method in the WebDriver helper to find elements using different locator types, including strict locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['WebDriver']._locate({name: 'password'}).then //...\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Parameter Types in Gherkin\nDESCRIPTION: Example showing how to define custom parameter types for Cucumber expressions. This allows for automatic conversion of specific patterns in steps to custom values or objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nDefineParameterType({\n  name: 'popup_type',\n  regexp: /critical|non-critical/,\n  transformer: (match) => {\n    return match === 'critical' ? '[class$=\"error\"]' \n    : '[class$=\"warning\"]';\n  },\n};);\n\nGiven('I see {popup_type} popup', (popup) => {\n  I.seeElement(popup);\n});\n```\n\nLANGUAGE: gherkin\nCODE:\n```\n  Scenario: Display error message if user doesn't have permissions\n    Given I on \"Main\" page without permissons\n    Then I see error popup\n```\n\n----------------------------------------\n\nTITLE: Using Before Hooks in Gherkin Step Definitions\nDESCRIPTION: Example showing how to use Before hooks in step definition files to perform setup actions before scenarios. Hooks receive the current test as a parameter for additional configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\n// inside step_definitions\nBefore((test) => {\n  // perform your code\n  test.retries(3); // retry test 3 times\n});\n```\n\n----------------------------------------\n\nTITLE: Advanced Network Traffic Verification in CodeceptJS\nDESCRIPTION: Shows how to check network traffic with advanced parameters including URL and request parameters.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('https://openai.com/blog/chatgpt')\nI.startRecordingTraffic()\nI.seeTraffic({\n  name: 'sentry event',\n  url: 'https://images.openai.com/blob/cf717bdb-0c8c-428a-b82b-3c3add87a600',\n  parameters: {\n    width: '1919',\n    height: '1138',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Element Attributes in CodeceptJS\nDESCRIPTION: Verifies that all elements matching the given locator have the specified attributes. Accepts CSS, XPath, or strict locators for finding elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeAttributesOnElements('//form', { method: \"post\"});\n```\n\n----------------------------------------\n\nTITLE: Starting CodeceptUI in Server Mode\nDESCRIPTION: Command to start CodeceptUI as a web server, suitable for CI environments\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ui.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpx codecept-ui\n```\n\n----------------------------------------\n\nTITLE: Overriding CodeceptJS Configuration via Command Line\nDESCRIPTION: This shell command demonstrates how to override CodeceptJS configuration values at runtime using the --override or -o option, passing a JSON string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_9\n\nLANGUAGE: shell\nCODE:\n```\ncodeceptjs run -o '{ \"helpers\": {\"WebDriver\": {\"browser\": \"firefox\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Using SoftExpectHelper in a Scenario\nDESCRIPTION: Example of how to use SoftExpectHelper methods in a test scenario, including making a soft assertion and flushing assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/SoftExpectHelper.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// in scenario\nI.softExpectEqual('a', 'b')\nI.flushSoftAssertions() // Throws an error if any soft assertions have failed. The error message contains all the accumulated failures.\n```\n\n----------------------------------------\n\nTITLE: Injecting Angular Module in JavaScript with CodeceptJS\nDESCRIPTION: Injects an Angular module into the current page context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nI.haveModule('modName', function() {\n  angular.module('modName', []).value('foo', 'bar');\n});\n```\n\n----------------------------------------\n\nTITLE: Keyboard Interaction in CodeceptJS\nDESCRIPTION: Handles keyboard input including key combinations and modifier keys.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKey('Backspace');\nI.pressKey(['Control', 'Z']);\nI.pressKey(['CommandOrControl', 'Z']);\n\nI.pressKeyDown('Control');\nI.click('#element');\nI.pressKeyUp('Control');\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Bottom of Page in CodeceptJS\nDESCRIPTION: Scrolls the page to the bottom of the document. Returns an automatically synchronized promise through the recorder.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToBottom();\n```\n\n----------------------------------------\n\nTITLE: Grabbing Page Scroll Position in JavaScript with Playwright\nDESCRIPTION: This function retrieves the current page scroll position. It returns a Promise resolving to an object with x and y coordinates.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nlet { x, y } = await I.grabPageScrollPosition();\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom PDF Render Action in Puppeteer Helper\nDESCRIPTION: Example of creating a custom helper method that renders the current page to PDF using Puppeteer's page object. The method accesses the Puppeteer helper instance and uses page.pdf() to generate the PDF file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// inside a MyPuppeteer helper\nasync renderPageToPdf() {\n  const page = this.helpers['Puppeteer'].page;\n  await page.emulateMedia('screen');\n  return page.pdf({path: 'page.pdf'});\n}\n```\n\n----------------------------------------\n\nTITLE: Using Profile to Dynamically Change CodeceptJS Configuration\nDESCRIPTION: This shell command and JavaScript snippet show how to use the --profile option to dynamically change configuration values, such as the browser type.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\ncodeceptjs run --profile firefox\n```\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  helpers: {\n    WebDriver: {\n      url: 'http://localhost:3000',\n      // load value from `profile`\n      browser: process.env.profile || 'firefox',\n    },\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Visibility\nDESCRIPTION: Verifies that an element is not visible in the DOM using CSS selector.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeElement('.modal'); // modal is not shown\n```\n\n----------------------------------------\n\nTITLE: Grabbing Form Values with CodeceptJS\nDESCRIPTION: Retrieves an array of values from form inputs matching a locator. Must be used with await operator inside async function.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet inputs = await I.grabValueFromAll('//form/input');\n```\n\n----------------------------------------\n\nTITLE: Async Script Execution in CodeceptJS\nDESCRIPTION: Executes asynchronous JavaScript in the browser context with callback support.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nI.executeAsyncScript(function(done) {\n  Vue.nextTick(done); // waiting for next tick\n});\n```\n\n----------------------------------------\n\nTITLE: Changing Browser Timezone in CodeceptJS Playwright Tests\nDESCRIPTION: This code demonstrates how to change the browser timezone for testing purposes using CodeceptJS with Playwright. It restarts the browser with a specified timezoneId value, runs the test, and then resets the timezone to the default one from the operating system.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nScenario(\"Test in a different timezone\", ({ I }) => {\n  I.restartBrowser({ timezoneId: 'America/Phoenix' });\n  I.amOnPage(\"/\");\n  // ...\n  // Reset timezone to default one (taken from OS)\n  I.restartBrowser();\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQL Helper Configuration\nDESCRIPTION: Configuration setup for GraphQL helper with JSONResponse in codecept.conf.js\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  helpers: {\n    GraphQL: {\n      endpoint: 'http://localhost:3000/graphql'\n    },\n    // .. add JSONResponse helper here\n    JSONResponse: {\n      requestHelper: 'GraphQL',\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Platform-Specific Code Execution in CodeceptJS\nDESCRIPTION: Shows how to run specific code blocks for Android and iOS platforms using 'runOnAndroid' and 'runOnIOS' methods in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.runOnAndroid(() => {\n  I.click('Hello Android');\n});\nI.runOnIOS(() => {\n  I.click('Hello iOS');\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing Healer Recipe in CodeceptJS\nDESCRIPTION: Example of creating a healer recipe that reloads the page if a modal is not visible. The healer will only execute if the error message matches the condition and attempts to recover by reloading the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nheal.addRecipe('reloadPageIfModalIsNotVisisble', {\n  steps: ['click'],\n  fn: async ({ error, step }) => {\n    if (error.message.include('modal is not visible')) return\n\n    return async ({ I }) => {\n      I.reloadPage()\n      I.wait(1)\n      await step.run()\n    }\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Schema with Joi\nDESCRIPTION: Example of using seeResponseMatchesJsonSchema method to validate JSON structure using Joi library.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/JSONResponse.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// response.data is { name: 'jon', id: 1 }\n\nI.seeResponseMatchesJsonSchema(joi => {\n  return joi.object({\n    name: joi.string(),\n    id: joi.number()\n  })\n});\n\n// or pass a valid schema\nconst joi = require('joi');\n\nI.seeResponseMatchesJsonSchema(joi.object({\n  name: joi.string(),\n  id: joi.number();\n});\n```\n\n----------------------------------------\n\nTITLE: Using tryTo Plugin for Conditional Actions (JavaScript)\nDESCRIPTION: New tryTo plugin introduced to allow conditional action execution in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nconst isSeen = await tryTo(() => {\n  I.see('Some text')\n})\n// we are not sure if cookie bar is displayed, but if so - accept cookies\ntryTo(() => I.click('Accept', '.cookies'))\n```\n\n----------------------------------------\n\nTITLE: Selecting Options in Dropdown Fields in CodeceptJS\nDESCRIPTION: The selectOption method allows selecting options in dropdown selects. It supports selection by visible text or value, and can locate fields using label, name, CSS, or XPath selectors. Multiple options can be selected by providing an array.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n```\n\n----------------------------------------\n\nTITLE: Grabbing Current URL in CodeceptJS\nDESCRIPTION: Gets the current URL from the browser and returns it to the test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nlet url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);\n```\n\n----------------------------------------\n\nTITLE: Using retryTo Plugin for Step Retries\nDESCRIPTION: Shows how to use the retryTo plugin to retry a set of steps on failure, useful for handling flaky operations like iframe interactions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\n// editing in text in iframe\n// if iframe was not loaded - retry 5 times\nawait retryTo(() => {\n  I.switchTo('#editor frame')\n  I.fillField('textarea', 'value')\n}, 5)\n```\n\n----------------------------------------\n\nTITLE: Configuring Trace Recording in Puppeteer Helper\nDESCRIPTION: This snippet shows how to configure trace recording for Puppeteer in CodeceptJS. It explains the options for enabling trace recording for failed tests and keeping traces for passed tests, with traces being saved to the output/trace folder.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\n[Trace Recording Customization]\nTrace recording provides complete information on test execution and includes screenshots, and network requests logged during run. Traces will be saved to output/trace\n\ntrace: enables trace recording for failed tests; trace are saved into output/trace folder\nkeepTraceForPassedTests: - save trace for passed tests\n```\n\n----------------------------------------\n\nTITLE: Grabbing Text from Element in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves text from an element located by CSS or XPath and returns it to the test. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nlet pin = await I.grabTextFrom('#pin');\n```\n\n----------------------------------------\n\nTITLE: Unchecking Options in CodeceptJS\nDESCRIPTION: Unselects a checkbox or radio button. This method supports various locator strategies and can operate within a specific context to narrow the search.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nI.uncheckOption('#agree');\nI.uncheckOption('I Agree to Terms and Conditions');\nI.uncheckOption('agree', '//form');\n```\n\n----------------------------------------\n\nTITLE: Recording and Grabbing WebSocket Messages in Playwright\nDESCRIPTION: These snippets demonstrate how to record, flush, and grab WebSocket messages using the new Playwright helper methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.startRecordingWebSocketMessages()\nI.amOnPage('https://websocketstest.com/')\nI.waitForText('Work for You!')\nI.flushNetworkTraffics()\nconst wsMessages = I.grabWebSocketMessages()\nexpect(wsMessages.length).to.equal(0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.startRecordingWebSocketMessages()\nawait I.amOnPage('https://websocketstest.com/')\nI.waitForText('Work for You!')\nconst wsMessages = I.grabWebSocketMessages()\nexpect(wsMessages.length).to.greaterThan(0)\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.startRecordingWebSocketMessages()\nawait I.amOnPage('https://websocketstest.com/')\nI.waitForText('Work for You!')\nconst wsMessages = I.grabWebSocketMessages()\nawait I.stopRecordingWebSocketMessages()\nawait I.amOnPage('https://websocketstest.com/')\nI.waitForText('Work for You!')\nconst afterWsMessages = I.grabWebSocketMessages()\nexpect(wsMessages.length).to.equal(afterWsMessages.length)\n```\n\n----------------------------------------\n\nTITLE: Grabbing Element Properties with CodeceptJS\nDESCRIPTION: Methods for retrieving element attributes, CSS properties, and HTML content from web elements using various selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nlet hint = await I.grabAttributeFrom('#tooltip', 'title');\nlet hints = await I.grabAttributeFromAll('.tooltip', 'title');\nlet logs = await I.grabBrowserLogs();\nlet cookie = await I.grabCookie('auth');\nconst value = await I.grabCssPropertyFrom('h3', 'font-weight');\nlet url = await I.grabCurrentUrl();\nlet postHTML = await I.grabHTMLFrom('#post');\n```\n\n----------------------------------------\n\nTITLE: Step Definitions in JavaScript\nDESCRIPTION: Example of implementing step definitions in JavaScript that map Gherkin steps to actual test code using CodeceptJS syntax.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I, productPage } = inject();\n\nGiven(/I have product with \\$(\\d+) price/, (price) => {\n  I.amOnPage('/products');\n  productPage.create({ price });\n  I.click('Add to cart');\n});\n\nWhen('I go to checkout process', () => {\n  I.click('Checkout');\n});\n\nThen('I should see that total number of products is {int}', (num) => {\n  I.see(num, '.cart');\n});\nThen('my order amount is ${int}', (sum) => { // eslint-disable-line\n  I.see('Total: ' + sum);\n});\n```\n\n----------------------------------------\n\nTITLE: Save Full Page Screenshot in CodeceptJS\nDESCRIPTION: Saves full page screenshot to output folder with option to capture entire scrollable page content.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png', true) //resizes to available scrollHeight and scrollWidth before taking screenshot\n```\n\n----------------------------------------\n\nTITLE: Implementing Nested Test Steps with CommentStep Plugin\nDESCRIPTION: Shows how to add descriptive nested steps to tests using Given/When/Then structure with the commentStep plugin\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('project update test', async I => {\n  __`Given`\n  const projectId = await I.have('project')\n\n  __`When`\n  projectPage.update(projectId, { title: 'new title' })\n\n  __`Then`\n  projectPage.open(projectId)\n  I.see('new title', 'h1')\n})\n```\n\n----------------------------------------\n\nTITLE: Switching Frames in CodeceptJS\nDESCRIPTION: Switches focus to a specified frame or back to the main page. This method is essential for interacting with elements inside iframes or returning to the main content.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchTo('iframe'); // switch to first iframe\nI.switchTo(); // switch back to main page\n```\n\n----------------------------------------\n\nTITLE: Cross-Platform Locators in CodeceptJS\nDESCRIPTION: Demonstrates how to specify different locators for Android and iOS platforms in a single test, allowing for cross-platform testing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nI.click({android: '//android.widget.Button', ios: '//UIAApplication[1]/UIAWindow[1]/UIAButton[1]'});\n```\n\n----------------------------------------\n\nTITLE: Grabbing Text from Alert/Confirm/Prompt Popups in CodeceptJS\nDESCRIPTION: Retrieves the text content from the currently displayed browser popup dialog. Returns null if no popup is visible. Should be used with await operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.grabPopupText();\n```\n\n----------------------------------------\n\nTITLE: Customizing PageObject Generation in CodeceptJS\nDESCRIPTION: Examples of customizing PageObject generation by adding specific implementation requests or limiting the scope to a part of the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nI.askForPageObject('login', 'implement signIn(username, password) method')\n\nI.askForPageObject('login', '', '#auth')\n```\n\n----------------------------------------\n\nTITLE: Asserting Visible Text in CodeceptJS\nDESCRIPTION: Checks for visible text on page with optional context parameter to narrow search scope.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n```\n\n----------------------------------------\n\nTITLE: Record-Replay Mode Implementation\nDESCRIPTION: Example showing how to record and replay HTTP requests for a specific page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockRequest.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.startMocking();\nI.amOnPage('/users');\nI.stopMocking();\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Test Scenarios in CodeceptJS\nDESCRIPTION: Demonstrates how to add tags to a test scenario using the tag() method, which helps in organizing tests and can be used for filtering tests during execution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_103\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('update user profile', () => {\n  // test goes here\n}).tag('@slow')\n```\n\n----------------------------------------\n\nTITLE: Accessing Other Helpers in a Custom Helper for CodeceptJS\nDESCRIPTION: Demonstrates how to access other enabled helpers within a custom helper method. This example shows how to use the Playwright helper to perform a click action.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndoAwesomeThingsWithPlaywright() {\n  const { Playwright } = this.helpers;\n  Playwright.click('Awesome');    \n}\n```\n\n----------------------------------------\n\nTITLE: Using waitForVisible() method in CodeceptJS (JavaScript)\nDESCRIPTION: Shows how to wait for an element to become visible on a page using the waitForVisible() method. The method waits for 1 second by default and accepts a locator that can be defined by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForVisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Configuring MailSlurp Helper in CodeceptJS\nDESCRIPTION: Configuration setup for the MailSlurp helper in codecept.conf.js file, requiring API key configuration\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/email.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n\n  MailSlurp: {\n    require: '@codeceptjs/mailslurp-helper',\n    apiKey: '<apiKeyFromMailSlurp>'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Locator Builder in CodeceptJS\nDESCRIPTION: Example of using the locator builder to create complex locators with a simple API. This example selects an 'Edit' link inside the 2nd row of a table.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\n// select 'Edit' link inside 2nd row of a table\nlocate('//table').find('tr').at(2).find('a').withText('Edit')\n```\n\n----------------------------------------\n\nTITLE: Executing Function in Browser Context with Wait\nDESCRIPTION: Executes a function in the browser context and waits for it to complete. Can accept either a function or string representation, along with optional arguments and wait time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\n// Not provided in the example, but would be used like:\nI.waitForFunction(() => document.querySelector('#element').offsetHeight > 0, 5);\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver for BrowserStack (iOS)\nDESCRIPTION: This snippet shows a sample configuration for running tests on BrowserStack using an iOS mobile browser. It includes authentication and device-specific settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n helpers: {\n   WebDriver: {\n     host: 'hub.browserstack.com',\n     path: '/wd/hub',\n     url: 'http://WEBSITE:8080/renderer',\n     user: 'xx', // credentials\n     key: 'xx', // credentials\n     browser: 'iphone',\n     desiredCapabilities: {\n       'os_version' : '11',\n       'device' : 'iPhone 8', // you can select device\n       'real_mobile' : 'true', // real or emulated\n       'browserstack.local' : 'true',\n       'browserstack.debug' : 'true',\n       'browserstack.networkLogs' : 'true',\n       'browserstack.appium_version' : '1.9.1',\n       'browserstack.user' : 'xx', // credentials\n       'browserstack.key' : 'xx' // credentials\n     }\n   }\n```\n\n----------------------------------------\n\nTITLE: Grabbing Number of Visible Elements in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves the number of visible elements that match a given locator. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nlet numOfElements = await I.grabNumberOfVisibleElements('p');\n```\n\n----------------------------------------\n\nTITLE: Force Right Click in CodeceptJS\nDESCRIPTION: Emulates right-click on elements using JavaScript, working with hidden or inactive elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\n// simple link\nI.forceRightClick('Menu');\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Text in CodeceptJS\nDESCRIPTION: Shows how to check that specific text is not present on a page, optionally within a given context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSee('Login'); // assume we are already logged in.\nI.dontSee('Login', '.nav'); // no login inside .nav element\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Helper with Additional Options in CodeceptJS\nDESCRIPTION: Example of configuring a custom helper in CodeceptJS with additional custom configuration parameters. This demonstrates how to pass and access custom config options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  // here goes standard helpers:\n  // WebDriver, Playwright, etc...\n  // and their configuration\n  MyHelper: {\n    require: \"./my_helper.js\", // path to module\n    defaultHost: \"http://mysite.com\" // custom config param\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium with Espresso Driver for Android\nDESCRIPTION: This configuration snippet shows how to set up Appium with the Espresso driver for Android in CodeceptJS. It includes settings for the app path, platform, and desired capabilities.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile-react-native-locators.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  //...\n  helpers: {\n    Appium: {\n      app: '/path/to/apk.apk',\n      platform: 'Android',\n      desiredCapabilities: {\n        automationName: 'Espresso',\n        platformVersion: '9',\n        deviceName: 'Android Emulator'\n      }\n    }\n  }\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer v2.1.0 for Firefox in CodeceptJS\nDESCRIPTION: This configuration snippet shows how to set up Puppeteer v2.1.0 to use Firefox in the codecept.conf.js file. It's similar to the earlier configuration but works with the new version of Puppeteer that supports stock Firefox.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer-firefox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n        Puppeteer: {\n            browser: process.env.BROWSER || 'firefox',\n            url: process.env.BASE_URL || 'https://example.com',\n            chrome: {\n                args: [\n                    '--ignore-certificate-errors',\n                ],\n            },\n            firefox: {\n                args: [\n                    '--ignore-certificate-errors'\n                ],\n            },\n        },\n```\n\n----------------------------------------\n\nTITLE: Implementing React Locators in Test Actions\nDESCRIPTION: Shows practical examples of using React locators in CodeceptJS test actions like click and seeElement, targeting components by their names and props.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/react.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\nI.click({ react: 'Tab', props: { title: 'Click Me!' }});\nI.seeElement({ react: 't', props: { title: 'Clicked' }});\n```\n\n----------------------------------------\n\nTITLE: Switching Frames in CodeceptJS\nDESCRIPTION: Shows how to switch to an iframe and back to the main page in CodeceptJS tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchTo('iframe'); // switch to first iframe\nI.switchTo(); // switch back to main page\n```\n\n----------------------------------------\n\nTITLE: Custom Helper Definition in TypeScript\nDESCRIPTION: Example of defining a custom helper class in TypeScript with a custom method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/typescript.md#2025-04-21_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\n// customHelper.ts\nexport class CustomHelper extends Helper {\n  printMessage(msg: string) {\n    console.log(msg)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL Parts in CodeceptJS\nDESCRIPTION: Waits for a specific part of the URL to match the expected value. Useful for Single Page Applications to verify page changes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitInUrl('/info', 2);\n```\n\n----------------------------------------\n\nTITLE: Moving Cursor to an Element in CodeceptJS\nDESCRIPTION: Moves the mouse cursor to an element matching a CSS or XPath selector. Optional offsetX and offsetY parameters can specify position relative to the element's top-left corner.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Navigation Waiting Strategy\nDESCRIPTION: Extended configuration for Playwright helper that includes the waitForNavigation option. This controls when Playwright should consider a page navigation to be complete.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  helpers: {\n    Playwright: {\n      url: \"http://localhost\",\n      show: true,\n      browser: 'chromium',\n      waitForNavigation: \"networkidle0\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Checking Page Source Code in CodeceptJS\nDESCRIPTION: Verifies that the current page's raw HTML source code contains the specified string. Useful for checking elements that might not be visible but exist in the DOM.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInSource('<h1>Green eggs &amp; ham</h1>');\n```\n\n----------------------------------------\n\nTITLE: Switching Tabs in CodeceptJS\nDESCRIPTION: Switches focus to the next or a specific tab. This method waits for tab loading before switching, ensuring proper interaction with multi-tab scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchToNextTab();\nI.switchToNextTab(2);\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer with Multiple Navigation Conditions\nDESCRIPTION: Example of configuring Puppeteer to wait for both DOMContentLoaded event and 0 network connections before proceeding.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Puppeteer : {\n       url: \"http://localhost\",\n       restart: false,\n       waitForNavigation: [ \"domcontentloaded\", \"networkidle0\" ],\n       waitForAction: 500\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Input Fields in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to clear text from input elements, textareas, or contenteditable elements in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nI.clearField('.text-area')\n\n// if this doesn't work use force option\nI.clearField('#submit', { force: true })\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeceptJS Project\nDESCRIPTION: Command to initialize a new CodeceptJS project. This interactive command will guide you through the setup process where you can select Playwright as your testing helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs init\n```\n\n----------------------------------------\n\nTITLE: Checking for Visible Text in JavaScript with CodeceptJS\nDESCRIPTION: Checks that a page contains visible text. An optional context parameter can be used to narrow down the search area.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n```\n\n----------------------------------------\n\nTITLE: Counting DOM Elements in CodeceptJS\nDESCRIPTION: Verifies that a specified number of elements matching a locator are present in the DOM. This method is useful for checking the presence of multiple similar elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeNumberOfElements('#submitBtn', 1);\n```\n\n----------------------------------------\n\nTITLE: Verifying Page Text\nDESCRIPTION: Checks that specific text is not present on the page, optionally within a context element.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSee('Login'); // assume we are already logged in.\nI.dontSee('Login', '.nav'); // no login inside .nav element\n```\n\n----------------------------------------\n\nTITLE: Configuring retryFailedStep Plugin in JavaScript\nDESCRIPTION: Example configuration for the retryFailedStep plugin in CodeceptJS. It shows how to enable the plugin and specify custom steps to ignore during retries.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    retryFailedStep: {\n        enabled: true,\n        ignoredSteps: [\n          'scroll*', // ignore all scroll steps\n          /Cookie/, // ignore all steps with a Cookie in it (by regexp)\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Finding Clickable Elements with Puppeteer\nDESCRIPTION: Example of using _locateClickable to find a clickable element by its text content.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['Puppeteer']._locateClickable('Next page').then // ...\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Agent for REST Helper\nDESCRIPTION: Demonstrates how to configure an HTTP agent with SSL/TLS options for the REST helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    REST: {\n      endpoint: 'http://site.com/api',\n      prettyPrintJson: true,\n      httpAgent: {\n         key: fs.readFileSync(__dirname + '/path/to/keyfile.key'),\n         cert: fs.readFileSync(__dirname + '/path/to/certfile.cert'),\n         rejectUnauthorized: false,\n         keepAlive: true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Typing Text with CodeceptJS\nDESCRIPTION: Uses the type method to type out given text into an active field. Can control typing speed and accept various input formats including arrays and secrets.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// passing in a string\nI.type('Type this out.');\n\n// typing values with a 100ms interval\nI.type('4141555311111111', 100);\n\n// passing in an array\nI.type(['T', 'E', 'X', 'T']);\n\n// passing a secret\nI.type(secret('123456'));\n```\n\n----------------------------------------\n\nTITLE: Configuring BrowserStack Android Capabilities\nDESCRIPTION: Configuration object for BrowserStack Android automated testing with Appium V2 support. Includes device capabilities, timeouts and BrowserStack specific options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nexport const caps = {\n    androidCaps: {\n        appiumV2: true,\n        host: \"hub-cloud.browserstack.com\",\n        port: 4444,\n        user: process.env.BROWSERSTACK_USER,\n        key: process.env.BROWSERSTACK_KEY,\n        'app': `bs://c700ce60cf13ae8ed97705a55b8e022f1hjhkjh3c5827c`,\n        browser: '',\n        desiredCapabilities: {\n            'appPackage': data.packageName,\n            'deviceName': process.env.DEVICE || 'Google Pixel 3',\n            'platformName': process.env.PLATFORM || 'android',\n            'platformVersion': process.env.OS_VERSION || '10.0',\n            'automationName': process.env.ENGINE || 'UIAutomator2',\n            'newCommandTimeout': 300000,\n            'androidDeviceReadyTimeout': 300000,\n            'androidInstallTimeout': 90000,\n            'appWaitDuration': 300000,\n            'autoGrantPermissions': true,\n            'gpsEnabled': true,\n            'isHeadless': false,\n            'noReset': false,\n            'noSign': true,\n            'bstack:options' : {\n                \"appiumVersion\" : \"2.0.1\",\n            },\n        }\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Selenoid Configuration\nDESCRIPTION: Configuration for using Selenoid with VNC enablement for running Selenium in Docker containers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       url: \"http://localhost\",\n       browser: \"chrome\",\n       desiredCapabilities: {\n         selenoidOptions: {\n           enableVNC: true,\n         }\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Existence in CodeceptJS Detox\nDESCRIPTION: This snippet shows how to check for the existence of an element, whether visible or not, using the seeElementExists method. It can locate elements by accessibility id or within a specific context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElementExists('~edit'); // located by accessibility id\nI.seeElementExists('~edit', '#menu'); // element inside #menu\n```\n\n----------------------------------------\n\nTITLE: Using Playwright API Directly in CodeceptJS Tests\nDESCRIPTION: Shows how to access the Playwright API directly within CodeceptJS tests using the usePlaywrightTo method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePlaywrightTo('do something special', async ({ page }) => {\n  // use page or browser objects here\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Page Source Does Not Contain Text in CodeceptJS\nDESCRIPTION: Verifies that the current page's raw source code does not contain the specified string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInSource('<!--'); // no comments in source\n```\n\n----------------------------------------\n\nTITLE: Using Puppeteer Locators in Custom Helpers\nDESCRIPTION: Example of using the _locate method to find elements using different locator types in custom helpers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst elements = await this.helpers['Puppeteer']._locate({name: 'password'});\n```\n\n----------------------------------------\n\nTITLE: Switching Frames with CodeceptJS\nDESCRIPTION: Uses the switchTo method to switch to an iframe or back to the main page. The frame can be located by CSS, XPath, or strict locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchTo('iframe'); // switch to first iframe\nI.switchTo(); // switch back to main page\n```\n\n----------------------------------------\n\nTITLE: Text Assertions in CodeceptJS\nDESCRIPTION: Methods to verify presence of text and element attributes on page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeAttributesOnElements('//form', { method: \"post\"});\n```\n\n----------------------------------------\n\nTITLE: Using Tables in Gherkin with CodeceptJS\nDESCRIPTION: Example showing how to define tables in Gherkin scenarios to pass structured data. Tables provide a readable way to include arrays of data in test scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_5\n\nLANGUAGE: gherkin\nCODE:\n```\n  Given I have products in my cart\n    | name         | category    | price  |\n    | Harry Potter | Books       | 5      |\n    | iPhone 5     | Smartphones | 1200   |\n    | Nuclear Bomb | Weapons     | 100000 |\n```\n\n----------------------------------------\n\nTITLE: Attaching Files with Puppeteer\nDESCRIPTION: Examples of using attachFile to upload files in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n```\n\n----------------------------------------\n\nTITLE: Making API Requests with Playwright in CodeceptJS\nDESCRIPTION: This snippet shows how to use Playwright's API for making requests in CodeceptJS, which uses cookies from the browser session for authentication.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nI.makeApiRequest('GET', '/users')\n```\n\n----------------------------------------\n\nTITLE: Waiting for Specific Number of Visible Elements with CodeceptJS\nDESCRIPTION: Waits for a specified number of elements to be visible on the page. Elements can be located by CSS or XPath. By default, it waits for 1 second.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitNumberOfVisibleElements('a', 3);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Number of Tabs in CodeceptJS\nDESCRIPTION: Shows how to wait for a specific number of browser tabs to be open.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForNumberOfTabs(2);\n```\n\n----------------------------------------\n\nTITLE: Using Protractor API in CodeceptJS\nDESCRIPTION: Allows the use of Protractor API within a CodeceptJS test. This method provides access to Protractor's browser object, enabling advanced browser interactions and assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\nI.useProtractorTo('change url via in-page navigation', async ({ browser }) {\n   await browser.setLocation('api');\n});\n```\n\n----------------------------------------\n\nTITLE: Accessing WebElements in CodeceptJS\nDESCRIPTION: Retrieves raw WebElement objects matching a CSS or XPath selector. Useful for performing custom operations not covered by CodeceptJS helper methods. Should be used with await operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nconst webElements = await I.grabWebElements('#button');\n```\n\n----------------------------------------\n\nTITLE: Configuring Docker Compose for CodeceptJS\nDESCRIPTION: Shows a Docker Compose configuration for running CodeceptJS tests with dependencies on Firefox and a web service.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/docker.md#2025-04-21_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  codeceptjs:\n    image: codeceptjs/codeceptjs\n    depends_on:\n      - firefox\n      - web\n    volumes:\n      - .:/tests\n  web:\n    image: node\n    command: node app/server.js\n    volumes:\n      - .:/app\n  firefox:\n    image: selenium/standalone-firefox-debug:2.53.0\n    ports:\n      - '4444'\n      - '5900'\n```\n\n----------------------------------------\n\nTITLE: Using Dependency Injection with inject() Function\nDESCRIPTION: Demonstrates the improved way to require actor and page objects using dependency injection, which is recommended for page objects, step definition files, and support objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\n// old way\nconst I = actor()\nconst myPage = require('../page/myPage')\n\n// new way\nconst { I, myPage } = inject()\n```\n\n----------------------------------------\n\nTITLE: Selecting Checkboxes and Radio Buttons in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to select checkboxes or radio buttons in tests using various locator strategies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// click on element at position\nI.checkOption('Agree', '.signup', { position: { x: 5, y: 5 } })\n```\n\n----------------------------------------\n\nTITLE: Verifying Field Values\nDESCRIPTION: Checks that input field values do not match expected text using name or CSS selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInField('email', 'user@user.com'); // field by name\nI.dontSeeInField({ css: 'form input.email' }, 'user@user.com'); // field by CSS\n```\n\n----------------------------------------\n\nTITLE: Waiting for Visible Elements in CodeceptJS\nDESCRIPTION: Waits for an element to become visible on the page with a default timeout of 1 second. Supports CSS and XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForVisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Configuring Testomat.io Reporter in CodeceptJS\nDESCRIPTION: Plugin configuration for integrating CodeceptJS with Testomat.io, a test management tool. Enables sending test results to Testomat.io dashboard.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n  testomatio: {\n    enabled: true,\n    require: '@testomatio/reporter/lib/adapter/codecept',\n    apiKey: process.env.TESTOMATIO,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Asynchronous JavaScript in CodeceptJS\nDESCRIPTION: Executes asynchronous JavaScript in the browser context. The function should call the provided callback to signal completion. Can return values to the test by passing them to the done function.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.executeAsyncScript(function(done) {\n  Vue.nextTick(done); // waiting for next tick\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet val = await I.executeAsyncScript(function(url, done) {\n  // in browser context\n  $.ajax(url, { success: (data) => done(data); }\n}, 'http://ajax.callback.url/');\n```\n\n----------------------------------------\n\nTITLE: Using waitForVisible in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for an element to become visible on a page. Element can be located by CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForVisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Configuring Retry for Before and BeforeSuite Hooks in JavaScript\nDESCRIPTION: Example configuration showing how to retry Before and BeforeSuite hooks when they fail, specifying retry counts directly in the Feature definition.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('flaky Before & BeforeSuite', { retryBefore: 2, retryBeforeSuite: 3 })\n```\n\n----------------------------------------\n\nTITLE: Element Visibility Check in CodeceptJS\nDESCRIPTION: Verifies element visibility and presence in DOM using CSS or XPath locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElement('#modal');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElementInDOM('#modal');\n```\n\n----------------------------------------\n\nTITLE: Recording and Verifying Network Traffic in Playwright\nDESCRIPTION: Example demonstrating how to record and verify network traffic using the new Playwright network traffic commands\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\n// recording traffics and verify the traffic\nawait I.startRecordingTraffic()\nI.amOnPage('https://codecept.io/')\nawait I.seeTraffic({ name: 'traffics', url: 'https://codecept.io/img/companies/BC_LogoScreen_C.jpg' })\n```\n\n----------------------------------------\n\nTITLE: Saving Page Screenshots with CodeceptJS\nDESCRIPTION: Shows how to capture and save screenshots of the current page to the output folder, with an option to capture the full page by resizing the viewport to the entire scrollable area.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png', true) //resizes to available scrollHeight and scrollWidth before taking screenshot\n```\n\n----------------------------------------\n\nTITLE: Configuring Detox in package.json for iOS Simulator\nDESCRIPTION: Example configuration for Detox in package.json, specifying iOS simulator device and app build settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"detox\": {\n  \"configurations\": {\n    \"ios.sim.debug\": {\n      \"device\": \"simulator\",\n      \"app\": \"ios.debug\"\n    }\n  },\n  \"apps\": {\n    \"ios.debug\": {\n      \"type\": \"ios.app\",\n      \"binaryPath\": \"../test/ios/build/Build/Products/Debug-iphonesimulator/MyTestApp.app\",\n      \"build\": \"xcodebuild -workspace ../test/ios/MyTestApp.xcworkspace -scheme MyTestApp -configuration Debug -sdk iphonesimulator -derivedDataPath ../test/ios/build\"\n    }\n  },\n  \"devices\": {\n    \"simulator\": {\n      \"type\": \"ios.simulator\",\n      \"device\": {\n        \"type\": \"iPhone 15\"\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying CSS Properties in CodeceptJS\nDESCRIPTION: Checks that all elements matching a locator have specified CSS properties. This method is useful for verifying styling and layout of elements on a page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCssPropertiesOnElements('h3', { 'font-weight': \"bold\"});\n```\n\n----------------------------------------\n\nTITLE: Using Helper Function for Element Tapping in CodeceptJS\nDESCRIPTION: This snippet shows how to use the tid helper function to create a concise, cross-platform element tapping command in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile-react-native-locators.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nI.tap(tid('someButton'));\n```\n\n----------------------------------------\n\nTITLE: Saving Full Page Screenshot in CodeceptJS\nDESCRIPTION: Saves full page screenshot to output folder. Can optionally resize window to capture entire page scrollHeight and scrollWidth.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png', true) //resizes to available scrollHeight and scrollWidth before taking screenshot\n```\n\n----------------------------------------\n\nTITLE: Adding Tags to Test Scenarios in CodeceptJS\nDESCRIPTION: Example of using the tag() method to add tags to a test scenario. Tags can be used to filter tests during execution or for reporting purposes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('update user profile', () => {\n  // test goes here\n}).tag('@slow')\n```\n\n----------------------------------------\n\nTITLE: Bearer Authentication in GraphQL Requests\nDESCRIPTION: Example of adding Bearer authentication token to GraphQL requests using the amBearerAuthenticated method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQL.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// we use secret function to hide token from logs\nI.amBearerAuthenticated(secret('heregoestoken'))\n```\n\n----------------------------------------\n\nTITLE: Waiting for Disabled Elements in Playwright Helper\nDESCRIPTION: Demonstrates how to use the new waitForDisabled method in the Playwright helper to wait for form elements to become disabled or enabled.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nit('should wait for input text field to be disabled', () =>\n      I.amOnPage('/form/wait_disabled').then(() => I.waitForDisabled('#text', 1)))\n\n    it('should wait for input text field to be enabled by xpath', () =>\n      I.amOnPage('/form/wait_disabled').then(() => I.waitForDisabled(\"//*[@name = 'test']\", 1)))\n\n    it('should wait for a button to be disabled', () =>\n      I.amOnPage('/form/wait_disabled').then(() => I.waitForDisabled('#text', 1)))\n```\n\n----------------------------------------\n\nTITLE: Retrieving Values from Multiple Form Fields in CodeceptJS\nDESCRIPTION: Gets values from all form input elements matching a CSS or XPath selector. Returns an array of strings containing each field's value. Should be used with await operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nlet inputs = await I.grabValueFromAll('//form/input');\n```\n\n----------------------------------------\n\nTITLE: Configuring TestCafe Helper with Remote Browser\nDESCRIPTION: Configuration example for setting up TestCafe with remote browser connection, useful for testing on remote computers and mobile devices.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     TestCafe : {\n       url: \"http://localhost\",\n       waitForTimeout: 15000,\n       browser: \"remote\"\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Closing Tabs in CodeceptJS\nDESCRIPTION: Demonstrates methods for closing the current tab or all other tabs except the current one.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nI.closeCurrentTab();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.closeOtherTabs();\n```\n\n----------------------------------------\n\nTITLE: Using local storage with autoLogin plugin in CodeceptJS\nDESCRIPTION: Configuration for handling authentication based on local storage instead of cookies. This setup implements custom fetch and restore methods to interact with localStorage.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n   auth: {\n    admin: {\n      login: (I) => I.loginAsAdmin(),\n      check: (I) => I.see('Admin', '.navbar'),\n      fetch: (I) => {\n        return I.executeScript(() => localStorage.getItem('session_id'));\n      },\n      restore: (I, session) => {\n        I.amOnPage('/');\n        I.executeScript((session) => localStorage.setItem('session_id', session), session);\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Presence in CodeceptJS\nDESCRIPTION: Waits for an element to be present on the page using the waitForElement method. The element can be located by CSS or XPath, and an optional timeout can be specified.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n```\n\n----------------------------------------\n\nTITLE: Using waitForFunction in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for a function to return true while running in browser context. Supports passing arguments to the function and specifying a custom timeout.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForFunction(fn[, [args[, timeout]]])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForFunction(() => window.requests == 0);\nI.waitForFunction(() => window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) => window.requests == count, [3], 5) // pass args and wait for 5 sec\n```\n\n----------------------------------------\n\nTITLE: Switching to Specific WebView Context in CodeceptJS\nDESCRIPTION: Shows how to switch to a specific WebView context by providing its identifier. This is useful when there are multiple WebViews in the application.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nwithin({webview: 'MyWEBVIEW_com.my.app'}, () => {});\n```\n\n----------------------------------------\n\nTITLE: Using the eachElement Plugin for Element Iteration\nDESCRIPTION: Use the eachElement plugin to iterate over a collection of elements and perform actions on each one. This example demonstrates clicking all links within a list container using Playwright's element API.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nawait eachElement('click all links in .list', '.list a', (el) => {\n  await el.click();\n})\n```\n\n----------------------------------------\n\nTITLE: Implementing waitForDisabled Feature in CodeceptJS\nDESCRIPTION: Example showing how to use the waitForDisabled helper function to wait for form elements to become disabled/enabled. It demonstrates usage with both CSS and XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nit('should wait for input text field to be disabled', () =>\n      I.amOnPage('/form/wait_disabled').then(() => I.waitForDisabled('#text', 1)))\n\n    it('should wait for input text field to be enabled by xpath', () =>\n      I.amOnPage('/form/wait_disabled').then(() => I.waitForDisabled(\"//*[@name = 'test']\", 1)))\n\n    it('should wait for a button to be disabled', () =>\n      I.amOnPage('/form/wait_disabled').then(() => I.waitForDisabled('#text', 1)))\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request with Payload in REST Helper\nDESCRIPTION: Demonstrates how to send a DELETE request with a payload using the sendDeleteRequestWithPayload method in the REST helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendDeleteRequestWithPayload('/api/users/1', { author: 'john' })\n```\n\n----------------------------------------\n\nTITLE: Sending PATCH Request in CodeceptJS REST Helper\nDESCRIPTION: Example of sending a PATCH request with payload using the REST helper in CodeceptJS, including an option to mask sensitive data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendPatchRequest('/api/users.json', { \"email\": \"user@user.com\" });\n\n// To mask the payload in logs\nI.sendPatchRequest('/api/users.json', secret({ \"email\": \"user@user.com\" }));\n```\n\n----------------------------------------\n\nTITLE: Waiting for Number of Visible Elements in CodeceptJS\nDESCRIPTION: Waits until a specific number of elements matching the locator are visible on the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_87\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitNumberOfVisibleElements('a', 3);\n```\n\n----------------------------------------\n\nTITLE: Grabbing HTML from Elements in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves the innerHTML from elements located by CSS or XPath and returns it to the test. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nlet postHTMLs = await I.grabHTMLFromAll('.post');\n```\n\n----------------------------------------\n\nTITLE: Scrolling Elements Into View\nDESCRIPTION: Scrolls elements into viewport with optional behavior configurations.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollIntoView('#submit');\nI.scrollIntoView('#submit', true);\nI.scrollIntoView('#submit', { behavior: \"smooth\", block: \"center\", inline: \"center\" });\n```\n\n----------------------------------------\n\nTITLE: Configuring Gherkin in CodeceptJS with Single Feature Path\nDESCRIPTION: Example configuration for Gherkin in CodeceptJS showing how to specify the path to feature files and step definitions. This setup points to a single feature path pattern.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\"gherkin\": {\n  \"features\": \"./features/*.feature\",\n  \"steps\": [\n    \"./step_definitions/steps.js\"\n  ]\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request with Payload in CodeceptJS REST Helper\nDESCRIPTION: Example of sending a DELETE request with a payload using the REST helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendDeleteRequestWithPayload('/api/users/1', { author: 'john' });\n```\n\n----------------------------------------\n\nTITLE: Using Nested iframes in WebDriverIO Helper\nDESCRIPTION: Example of working with nested iframes in the WebDriverIO helper, introduced in version 1.1.0. This allows interacting with elements inside multiple levels of iframes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_113\n\nLANGUAGE: javascript\nCODE:\n```\nwithin({frame: ['#wrapperId', '[name=content]']}, () => {\n  I.click('Sign in!');\n  I.see('Email Address');\n});\nI.see('Nested Iframe test');\nI.dontSee('Email Address');\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Checkbox State in CodeceptJS\nDESCRIPTION: Verifies that specified checkbox is checked using various locator strategies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n```\n\n----------------------------------------\n\nTITLE: Shared Cookies Configuration\nDESCRIPTION: Setup for sharing cookies between browser and API tests\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nconst { setSharedCookies } = require('@codeceptjs/configure');\n\n// add this before exports.config\nsetSharedCookies();\n\nexports.config = {\n  // ...\n  helpers: {  \n    // also works with Playwright or Puppeteer\n    WebDriver: {\n      //... \n    },\n\n    REST: { \n      // ...\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Checkbox Is Not Checked in CodeceptJS\nDESCRIPTION: Verifies that a specified checkbox is not checked. The checkbox can be located by ID, label, or name attribute.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCheckboxIsChecked('#agree'); // located by ID\nI.dontSeeCheckboxIsChecked('I agree to terms'); // located by label\nI.dontSeeCheckboxIsChecked('agree'); // located by name\n```\n\n----------------------------------------\n\nTITLE: Using Shadow DOM Selectors in WebDriver\nDESCRIPTION: Example of using the new Shadow DOM selector format in WebDriver helper to click elements within a Shadow DOM tree.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nI.click({ shadow: ['my-app', 'recipe-hello', 'button'] })\n```\n\n----------------------------------------\n\nTITLE: GraphQL Query Example\nDESCRIPTION: Example of querying user data via GraphQL with assertions\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Users endpoint')\n\nScenario('get user by query', ({ I }) => {\n  // make GraphQL query or mutation\n  const resp = await I.sendQuery('{ user(id: 0) { id name email }}');\n  I.seeResponseCodeIsSuccessful();\n\n  // GraphQL always returns key data as part of response\n  I.seeResponseContainsKeys(['data']);\n\n  // check data for partial inclusion\n  I.seeResponseContainsJson({\n    data: {\n      user: {\n        name: 'john doe',\n        email: 'johnd@mutex.com',\n      },\n    },\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking JavaScript Popup Content in CodeceptJS\nDESCRIPTION: Verifies that the active JavaScript popup (alert, confirm, or prompt) contains the expected text. Works with window.alert, window.confirm, and window.prompt dialogs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInPopup('Popup text');\n```\n\n----------------------------------------\n\nTITLE: Waiting for URL Part Match with CodeceptJS\nDESCRIPTION: Waits for a part of the URL to match the expected value. This is useful for Single Page Applications to verify page changes. By default, it waits for 1 second.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitInUrl('/info', 2);\n```\n\n----------------------------------------\n\nTITLE: Secret Data Input Example\nDESCRIPTION: Demonstrates using the global secret() function to handle sensitive data input\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_99\n\nLANGUAGE: javascript\nCODE:\n```\nI.fillField('password', secret('123456'))\n```\n\n----------------------------------------\n\nTITLE: Counting Elements in DOM with CodeceptJS\nDESCRIPTION: Asserts that an element appears a specific number of times in the DOM. Elements can be located by label, name, CSS, or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeNumberOfElements('#submitBtn', 1);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Number of Visible Elements in CodeceptJS\nDESCRIPTION: Demonstrates waiting for a specific number of visible elements matching a locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitNumberOfVisibleElements('a', 3);\n```\n\n----------------------------------------\n\nTITLE: Element Visibility Check in CodeceptJS\nDESCRIPTION: Verifies that an element is not visible in the DOM using CSS/XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeElement('.modal'); // modal is not shown\n```\n\n----------------------------------------\n\nTITLE: Verifying CSS Properties on Elements in CodeceptJS\nDESCRIPTION: Checks that all elements matching the given locator have the specified CSS properties. Supports CSS, XPath, or strict locators for finding elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCssPropertiesOnElements('h3', { 'font-weight': \"bold\"});\n```\n\n----------------------------------------\n\nTITLE: Accessing TestCafe API in CodeceptJS Tests\nDESCRIPTION: Example of using the TestCafe API within a CodeceptJS test using the I.useTestCafeTo method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/testcafe.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nI.useTestCafeTo('do some things using native webdriverio api', async ({ t }) => {\n  await t.click() // use testcafe api here\n});\n```\n\n----------------------------------------\n\nTITLE: Using selectOption() method to choose from dropdowns in CodeceptJS (JavaScript)\nDESCRIPTION: Shows how to select dropdown options using the selectOption() method. The field can be located by label, name, CSS, XPath, or strict locator. Options can be selected by visible text or value, and multiple options can be selected using arrays.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n```\n\n----------------------------------------\n\nTITLE: Dragging Sliders in CodeceptJS\nDESCRIPTION: Shows how to drag the scrubber of a slider to a given position using different locator strategies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nI.dragSlider('#slider', 30);\nI.dragSlider('#slider', -70);\n```\n\n----------------------------------------\n\nTITLE: Configuring BasicAuth in WebDriver and Puppeteer Helpers\nDESCRIPTION: Example configuration for basic authentication in WebDriver and Puppeteer helpers. This allows specifying username and password credentials for websites requiring basic HTTP authentication.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nbasicAuth: {username: 'username', password: 'password'}\n```\n\n----------------------------------------\n\nTITLE: Using withTextEquals() Locator Method in CodeceptJS\nDESCRIPTION: Example of using the new withTextEquals() locator method to find an element with exact text in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nlocate('button').withTextEquals('Add')\n```\n\n----------------------------------------\n\nTITLE: Creating Todo Tests with Implementation Plan\nDESCRIPTION: Demonstrates how to create todo tests with a planned implementation outline using Scenario.todo.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nScenario.todo('Test', I => {\n  /**\n   * 1. Click to field\n   * 2. Fill field\n   *\n   * Result:\n   * 3. Field contains text\n   */\n})\n```\n\n----------------------------------------\n\nTITLE: Using WebDriver API Directly in CodeceptJS Tests\nDESCRIPTION: Shows how to access the WebDriverIO API directly within CodeceptJS tests using the useWebDriverTo method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nI.useWebDriverTo('do something special', async ({ browser }) => {\n  // use browser object here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Features and Scenarios with Fluent API in CodeceptJS\nDESCRIPTION: Examples of applying configuration to Features and Scenarios using fluent API, including timeout settings, retry policies, browser configuration, and expected exceptions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_109\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('checkout').timeout(3000).retry(2)\n\nScenario('user can order in firefox', I => {\n  // see dynamic configuration\n})\n  .config({ browser: 'firefox' })\n  .timeout(20000)\n\nScenario('this test should throw error', I => {\n  // I.amOnPage\n}).throws(new Error())\n```\n\n----------------------------------------\n\nTITLE: Handling Key-Value Tables with rowsHash()\nDESCRIPTION: Example showing how to parse a key-value formatted table using the rowsHash() method. This format is useful for representing object properties in a more readable way.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_10\n\nLANGUAGE: gherkin\nCODE:\n```\n  Given I have a formatted employee card\n    | name     | Harry  |\n    | surname  | Potter |\n    | position | Seeker |\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { DataTableArgument } = require('codeceptjs');\n//...\nGiven('I have a formatted employee card', (table) => {\n  const dataTableArgument = new DataTableArgument(table);\n  const rawHash = dataTableArgument.rowsHash();\n  // rawHash = { name: 'Harry', surname: 'Potter', position: 'Seeker' };\n  }\n);\n```\n\n----------------------------------------\n\nTITLE: File Download Handling with Puppeteer\nDESCRIPTION: Example of using the downloadFile action with FileSystem helper to test file downloads. The code shows how to download a file and verify it exists in the output directory.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nconst fileName = await I.downloadFile('a.file-link')\nI.amInPath('output')\nI.seeFile(fileName)\n```\n\n----------------------------------------\n\nTITLE: Sending PUT Request in CodeceptJS REST Helper\nDESCRIPTION: Example of sending a PUT request with payload using the REST helper in CodeceptJS, including an option to mask sensitive data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendPutRequest('/api/users.json', { \"email\": \"user@user.com\" });\n\n// To mask the payload in logs\nI.sendPutRequest('/api/users.json', secret({ \"email\": \"user@user.com\" }));\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Responses in CodeceptJS\nDESCRIPTION: Waits for specific network responses to occur. Can wait for exact URLs or use a predicate function to match response properties.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForResponse('http://example.com/resource');\nI.waitForResponse(response => response.url() === 'http://example.com' && response.request().method() === 'GET');\n```\n\n----------------------------------------\n\nTITLE: Grabbing HTML Content from Element in CodeceptJS\nDESCRIPTION: Retrieves the innerHTML from an element. If multiple elements match the locator, returns the HTML from the first element.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nlet postHTML = await I.grabHTMLFrom('#post');\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Reporters with Mocha-Multi\nDESCRIPTION: Configuration for using multiple reporters simultaneously using mocha-multi. This example configures CLI reporter, mochawesome HTML reporter, and JUnit XML reporter to work together.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_16\n\nLANGUAGE: json\nCODE:\n```\n  \"mocha\": {\n    \"reporterOptions\": {\n      \"codeceptjs-cli-reporter\": {\n        \"stdout\": \"-\",\n        \"options\": {\n          \"verbose\": true,\n          \"steps\": true,\n        }\n      },\n      \"mochawesome\": {\n        \"stdout\": \"./output/console.log\",\n        \"options\": {\n          \"reportDir\": \"./output\",\n          \"reportFilename\": \"report\"\n        }\n      },\n      \"mocha-junit-reporter\": {\n        \"stdout\": \"./output/console.log\",\n        \"options\": {\n          \"mochaFile\": \"./output/result.xml\",\n          \"attachments\": true //add screenshot for a failed test\n        }\n      }\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Using dtslint to Test TypeScript Typings in CodeceptJS\nDESCRIPTION: Shows an example of testing TypeScript typings using dtslint to verify return types and property types. The code demonstrates type checking for the grabPageScrollPosition method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_82\n\nLANGUAGE: typescript\nCODE:\n```\nconst psp = wd.grabPageScrollPosition() // $ExpectType Promise<PageScrollPosition>\npsp.then(result => {\n  result.x // $ExpectType number\n  result.y // $ExpectType number\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Existence in CodeceptJS\nDESCRIPTION: Verifies that a cookie with a given name exists in the browser. This method is useful for testing authentication and session management.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCookie('Auth');\n```\n\n----------------------------------------\n\nTITLE: Implementing Gherkin Feature File in CodeceptJS\nDESCRIPTION: Example of a basic Gherkin feature file that defines business rules and a scenario for opening Google. This represents the Cucumber-style BDD feature introduced in version 1.3.0.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_81\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Business rules\n  In order to achieve my goals\n  As a persona\n  I want to be able to interact with a system\n\n  Scenario: do anything in my life\n    Given I need to open Google\n```\n\n----------------------------------------\n\nTITLE: Using waitForInvisible() method in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to wait for an element to be removed or become invisible on a page using the waitForInvisible() method. The method waits for 1 second by default and accepts a locator defined by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForInvisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Cookie Validation in CodeceptJS\nDESCRIPTION: Checks that a cookie with given name does not exist.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCookie('auth'); // no auth cookie\n```\n\n----------------------------------------\n\nTITLE: Importing Page Objects and Components in CodeceptJS Config\nDESCRIPTION: Shows how to organize and include page objects and components in the CodeceptJS configuration file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/best.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n  include: {\n      I: './steps_file',\n      ...require('./config/pages'), // require POs and DOs for module\n      ...require('./config/components'), // require all components\n  },\n```\n\n----------------------------------------\n\nTITLE: Blocking Network Traffic in Playwright\nDESCRIPTION: Example showing how to block specific network traffic and verify error handling\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\n// block the traffic\nI.blockTraffic('https://reqres.in/api/comments/*')\nawait I.amOnPage('/form/fetch_call')\nawait I.startRecordingTraffic()\nawait I.click('GET COMMENTS')\nawait I.see('Can not load data!')\n```\n\n----------------------------------------\n\nTITLE: Waiting for Input Value in CodeceptJS\nDESCRIPTION: Shows how to wait for a specific value to appear in an input field.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForValue('//input', \"GoodValue\");\n```\n\n----------------------------------------\n\nTITLE: Accessing JSONResponse from Custom Helper\nDESCRIPTION: Example of accessing the response object from JSONResponse helper within a custom helper implementation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/JSONResponse.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n// inside custom helper\nconst response = this.helpers.JSONResponse.response;\n```\n\n----------------------------------------\n\nTITLE: Using Modifier Keys with Key Combinations in CodeceptJS\nDESCRIPTION: Demonstrates pressing key combinations with modifier keys. All modifier keys are automatically released after the operation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKey(['Control', 'Z']);\n```\n\n----------------------------------------\n\nTITLE: Using Auth Plugin with Playwright in CodeceptJS\nDESCRIPTION: Example of using the renamed auth plugin (formerly autoLogin) with Playwright to load authorization cookies at the start of a browser session.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nBeforeSuite(({ loginAs }) => loginAs('user'))\n```\n\n----------------------------------------\n\nTITLE: Verifying Checkbox Status in CodeceptJS\nDESCRIPTION: Checks that a specified checkbox is checked. The checkbox can be located by label, name, CSS, XPath, or strict locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n```\n\n----------------------------------------\n\nTITLE: Configuring screenshotOnFail Plugin in JavaScript\nDESCRIPTION: Example configuration for the screenshotOnFail plugin in CodeceptJS. It demonstrates how to enable the plugin and set options like unique screenshot names and full page screenshots.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n  screenshotOnFail: {\n    enabled: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting timeouts for Features and Scenarios\nDESCRIPTION: Shows how to set custom timeouts for Features and Scenarios using the timeout option to handle long-running tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_122\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Complex JS Stuff', { timeout: 5000 })\n\nScenario('Not that complex', { timeout: 1000 }, I => {\n  // test goes here\n})\n```\n\n----------------------------------------\n\nTITLE: Waiting for Function Execution in CodeceptJS\nDESCRIPTION: Waits for a function to return true using the waitForFunction method. The function is executed in the browser context, and optional arguments and timeout can be provided.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForFunction(() => window.requests == 0);\nI.waitForFunction(() => window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) => window.requests == count, [3], 5) // pass args and wait for 5 sec\n```\n\n----------------------------------------\n\nTITLE: Form Element Validations in CodeceptJS\nDESCRIPTION: Methods to check form elements like checkboxes and input fields.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n```\n\n----------------------------------------\n\nTITLE: Using Step Options in CodeceptJS Tests\nDESCRIPTION: Demonstrates how to use the new syntax for setting step options like timeout and retry in CodeceptJS tests. This replaces the previous limitTime() and retry() syntax.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst step = require('codeceptjs/steps');\n\nScenario(..., ({ I }) =>  // ...\n  I.click('Create', step.timeout(10).retry(2));\n  //....\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { stepTimeout, stepRetry } = require('codeceptjs/steps');\n\nScenario(..., ({ I }) =>  // ...\n  I.click('Create', stepTimeout(10));\n  I.see('Created', stepRetry(2));\n  //....\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { stepOpts } = require('codeceptjs/steps')\n\nI.see('SIGN IN', stepOpts({ ignoreCase: true }))\n```\n\n----------------------------------------\n\nTITLE: Including Custom Attributes in CodeceptJS AI HTML Processing\nDESCRIPTION: JavaScript configuration to include custom data attributes (e.g., data-qa) in HTML processing for CodeceptJS AI features.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  // inside codecept.conf.js\n  ai: {\n    html: {\n      allowedAttrs: ['data-qa', 'id', 'for', 'class', 'name', 'type', 'value', 'aria-labelledby', 'aria-label', 'label', 'placeholder', 'title', 'alt', 'src', 'role']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Cookie in WebAPI\nDESCRIPTION: Example showing usage of the new waitForCookie method to wait for a specific cookie to be present\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForCookie('token')\n```\n\n----------------------------------------\n\nTITLE: Using Custom Locator Strategy in CodeceptJS Tests\nDESCRIPTION: This snippet demonstrates how to use the custom locator strategy in a CodeceptJS test. It uses the 'custom' strategy to locate and click an element.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/locators.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nI.click({custom: 'my-shadow-element-unique-css'})\n```\n\n----------------------------------------\n\nTITLE: Frame and Tab Navigation in CodeceptJS\nDESCRIPTION: These methods handle switching between frames and browser tabs. switchTo allows moving focus between iframes or back to the main page, while switchToNextTab and switchToPreviousTab navigate between browser tabs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchTo('iframe'); // switch to first iframe\nI.switchTo(); // switch back to main page\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchToNextTab();\nI.switchToNextTab(2);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchToPreviousTab();\nI.switchToPreviousTab(2);\n```\n\n----------------------------------------\n\nTITLE: Accessing CodeceptJS Config in JavaScript\nDESCRIPTION: Shows how to access the CodeceptJS configuration object. This can be used to conditionally execute code based on configuration values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet config = require('codeceptjs').config.get();\n\nif (config.myKey == 'value') {\n  // run hook\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Helper for iOS Mobile Web Testing on BrowserStack\nDESCRIPTION: Example configuration for testing a website on iOS Safari using BrowserStack with the Appium helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\nhelpers: {\n  Appium: {\n    host: \"hub-cloud.browserstack.com\",\n    port: 4444,\n    user: process.env.BROWSERSTACK_USER,\n    key: process.env.BROWSERSTACK_KEY,\n    platform: \"iOS\",\n    url: \"https://the-internet.herokuapp.com/\",\n    desiredCapabilities: {\n      realMobile: \"true\",\n      device: \"iPhone 8\",\n      os_version: \"12\",\n      browserName: \"safari\"\n    }\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies in CodeceptJS (JavaScript)\nDESCRIPTION: Shows how to clear specific cookies or all cookies in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.clearCookie();\nI.clearCookie('test');\n```\n\n----------------------------------------\n\nTITLE: Configuring Test File Patterns in CodeceptJS\nDESCRIPTION: Shows how to configure multiple test file patterns in the CodeceptJS configuration file using the tests property.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  tests: ['./*_test.js', './sampleTest.js'],\n  // ...\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying URL is Not Equal in CodeceptJS\nDESCRIPTION: Checks that the current URL is not equal to the provided URL. Supports both relative and absolute URLs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCurrentUrlEquals('/login'); // relative url are ok\nI.dontSeeCurrentUrlEquals('http://mysite.com/login'); // absolute urls are also ok\n```\n\n----------------------------------------\n\nTITLE: Debugging CodeceptJS Tests\nDESCRIPTION: Commands for running tests in debug mode, with verbose output, or with internal logs printed. These options help in troubleshooting and understanding test execution in detail.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --debug\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --verbose\n```\n\nLANGUAGE: sh\nCODE:\n```\nDEBUG=codeceptjs:* npx codeceptjs run\n```\n\n----------------------------------------\n\nTITLE: Using waitForText() method in CodeceptJS (JavaScript)\nDESCRIPTION: Shows how to wait for text to appear on a page using the waitForText() method. The method waits for 1 second by default and can narrow down the search by providing a context element locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n```\n\n----------------------------------------\n\nTITLE: Accepting Popups with Puppeteer\nDESCRIPTION: Example of setting up automatic acceptance of JavaScript popups and triggering the acceptance.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nI.amAcceptingPopups();\nI.click('#triggerPopup');\nI.acceptPopup();\n```\n\n----------------------------------------\n\nTITLE: Enabling Code Coverage in CodeceptJS\nDESCRIPTION: This snippet shows how to enable code coverage capture in CodeceptJS by configuring the coverage plugin in the project configuration file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: {\n    coverage: {\n      enabled: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Right Click Element Using CodeceptJS\nDESCRIPTION: Performs right click on elements using various locator strategies like CSS, XPath or semantic locators. Can be used with context to narrow down element selection.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// right click element with id el\nI.rightClick('#el');\n// right click link or button with text \"Click me\"\nI.rightClick('Click me');\n// right click button with text \"Click me\" inside .context\nI.rightClick('Click me', '.context');\n```\n\n----------------------------------------\n\nTITLE: Configuring Electron Testing in CodeceptJS with Electron Forge\nDESCRIPTION: This configuration example shows how to set up CodeceptJS for testing Electron applications built with electron-forge. It specifies the Electron executable path and arguments to run the application under test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require('path')\n\nexports.config = {\n  helpers: {\n    Playwright: {\n      browser: 'electron',\n      electron: {\n        executablePath: require('electron'),\n        args: [path.join(__dirname, '.webpack/main/index.js')],\n      },\n    },\n  },\n  // rest of config\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests in Multiple Browsers with Custom Worker Configuration\nDESCRIPTION: Advanced example of custom parallel execution that runs tests in 2 browsers (Firefox and Chrome) across 4 threads, with event listeners for test results.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nconst workerConfig = {\n  testConfig: './test/data/sandbox/codecept.customworker.js',\n};\n\n// don't initialize workers in constructor\nconst workers = new Workers(null, workerConfig);\n// split tests by suites in 2 groups\nconst testGroups = workers.createGroupsOfSuites(2);\n\nconst browsers = ['firefox', 'chrome'];\n\nconst configs = browsers.map(browser => {\n  return {\n    helpers: {\n      WebDriver: { browser }\n    }\n  };\n});\n\nfor (const config of configs) {\n  for (group of testGroups) {\n    const worker = workers.spawn();\n    worker.addTests(group);\n    worker.addConfig(config);\n  }\n}\n\n// Listen events for failed test\nworkers.on(event.test.failed, (failedTest) => {\n  console.log('Failed : ', failedTest.title);\n});\n\n// Listen events for passed test\nworkers.on(event.test.passed, (successTest) => {\n  console.log('Passed : ', successTest.title);\n});\n\n// test run status will also be available in event\nworkers.on(event.all.result, () => {\n  // Use printResults() to display result with standard style\n  workers.printResults();\n});\n\n// run workers as async function\nrunWorkers();\n\nasync function runWorkers() {\n  try {\n    // run bootstrapAll\n    await workers.bootstrapAll();\n    // run tests\n    await workers.run();\n  } finally {\n    // run teardown All\n    await workers.teardownAll();\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Gherkin Background Feature Example\nDESCRIPTION: Example of using Background section in Gherkin to define common steps that should be executed before each scenario.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_4\n\nLANGUAGE: gherkin\nCODE:\n```\nFeature: Dashboard\n  In order to view current state of business\n  As an owner\n  I need to be able to see reports on dashboard\n\n  Background:\n    Given I am logged in as administrator\n    And I open dashboard page\n```\n\n----------------------------------------\n\nTITLE: Recording and Verifying Network Traffic in CodeceptJS\nDESCRIPTION: These methods allow for recording network traffic and verifying specific requests. startRecordingTraffic() begins recording while seeTraffic() verifies that specific requests with matching URLs and parameters exist in the recorded traffic.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// checking the request url contains certain query strings\nI.amOnPage('https://openai.com/blog/chatgpt');\nI.startRecordingTraffic();\nawait I.seeTraffic({\n    name: 'sentry event',\n    url: 'https://images.openai.com/blob/cf717bdb-0c8c-428a-b82b-3c3add87a600',\n    parameters: {\n    width: '1919',\n    height: '1138',\n    },\n  });\n```\n\nLANGUAGE: javascript\nCODE:\n```\n// checking the request url contains certain post data\nI.amOnPage('https://openai.com/blog/chatgpt');\nI.startRecordingTraffic();\nawait I.seeTraffic({\n    name: 'event',\n    url: 'https://cloudflareinsights.com/cdn-cgi/rum',\n    requestPostData: {\n    st: 2,\n    },\n  });\n```\n\n----------------------------------------\n\nTITLE: Form Field Value Verification in CodeceptJS\nDESCRIPTION: Checks that an input field or textarea does not contain a specific value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInField('email', 'user@user.com'); // field by name\nI.dontSeeInField({ css: 'form input.email' }, 'user@user.com'); // field by CSS\n```\n\n----------------------------------------\n\nTITLE: Counting Visible Elements in CodeceptJS\nDESCRIPTION: Asserts that an element is visible a specific number of times on the page. Elements can be located by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeNumberOfVisibleElements('.buttons', 3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Timeout for Tests\nDESCRIPTION: Example of configuring timeouts for a feature and a scenario to specify maximum execution time for tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Complex JS Stuff', { timeout: 5000 })\n\nScenario('Not that complex', { timeout: 1000 }, I => {\n  // test goes here\n})\n```\n\n----------------------------------------\n\nTITLE: Locating Checkable Elements in WebDriver Helper\nDESCRIPTION: Demonstrates using the _locateCheckable method to find a checkbox by providing human-readable text in the WebDriver helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['WebDriver']._locateCheckable('I agree with terms and conditions').then // ...\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Existence in CodeceptJS\nDESCRIPTION: Verifies that a cookie with the given name exists in the current session. Takes the cookie name as a parameter.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCookie('Auth');\n```\n\n----------------------------------------\n\nTITLE: Grabbing Number of Open Tabs in JavaScript with Playwright\nDESCRIPTION: This function retrieves the number of open tabs in the browser. It returns a Promise resolving to the number of open tabs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nlet tabs = await I.grabNumberOfOpenTabs();\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Worker Data Sharing in CodeceptJS\nDESCRIPTION: Shows how to limit data sharing to within the same worker using the local option in the share() function.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nshare({ userData: false }, {local: true });\n```\n\n----------------------------------------\n\nTITLE: Form Field Validation in CodeceptJS\nDESCRIPTION: Checks that an input field or textarea does not contain a specific value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInField('email', 'user@user.com'); // field by name\nI.dontSeeInField({ css: 'form input.email' }, 'user@user.com'); // field by CSS\n```\n\n----------------------------------------\n\nTITLE: Unchecking Options with CodeceptJS\nDESCRIPTION: Uses the uncheckOption method to unselect a checkbox or radio button. Elements can be located by label, name, CSS, or XPath. Can specify a context to narrow the search.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\nI.uncheckOption('#agree');\nI.uncheckOption('I Agree to Terms and Conditions');\nI.uncheckOption('agree', '//form');\n```\n\n----------------------------------------\n\nTITLE: Basic GraphQL Data Mutation Examples\nDESCRIPTION: Examples showing how to use the GraphQLDataFactory helper to create and mutate data using GraphQL queries.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQLDataFactory.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.mutateData('createUser', { name: 'davert', email: 'davert@mail.com' });\nlet user = await I.mutateData('createUser', { name: 'davert'});\nI.mutateMultiple('createPost', 3, {post_id: user.id});\n```\n\n----------------------------------------\n\nTITLE: Displaying Local Environment Information for CodeceptJS\nDESCRIPTION: Prints debugging information concerning the local environment using the 'info' command.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs info\n```\n\n----------------------------------------\n\nTITLE: Typing Text in CodeceptJS\nDESCRIPTION: Shows various ways to type text into active fields, including typing with delays and using arrays of characters.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// passing in a string\nI.type('Type this out.');\n\n// typing values with a 100ms interval\nI.type('4141555311111111', 100);\n\n// passing in an array\nI.type(['T', 'E', 'X', 'T']);\n\n// passing a secret\nI.type(secret('123456'));\n```\n\n----------------------------------------\n\nTITLE: Complex Custom Locator Type Definition\nDESCRIPTION: Example of defining more complex custom locator types with multiple optional properties.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/typescript.md#2025-04-21_snippet_7\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types='codeceptjs' />\n...\n\ndeclare namespace CodeceptJS {\n  ...\n\n  interface CustomLocators {\n    data: { data: string, value?: number, flag?: boolean };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating JavaScript Configuration File\nDESCRIPTION: Example of creating a JavaScript configuration file instead of JSON for more dynamic configuration options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\nexports.config = {\n  // contents of codecept.js\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring retries for Features and Scenarios\nDESCRIPTION: Demonstrates how to configure retry attempts for flaky tests at both the Feature and Scenario level using the retries option.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_121\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Complex JS Stuff', { retries: 3 })\n\nScenario('Not that complex', { retries: 1 }, I => {\n  // test goes here\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Flexible Timeouts in CodeceptJS\nDESCRIPTION: Configuration for setting custom timeout values for specific test categories. Allows setting a default timeout and overriding it for tests matching specific patterns.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\ntimeout: [\n  10, // default timeout is 10secs\n  {\n    // but increase timeout for slow tests\n    grep: '@slow',\n    Feature: 50,\n  },\n]\n```\n\n----------------------------------------\n\nTITLE: Clearing Cookies in CodeceptJS\nDESCRIPTION: Shows how to clear all cookies or a specific cookie by name.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nI.clearCookie();\nI.clearCookie('test');\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeceptJS for Electron Testing with Playwright\nDESCRIPTION: Configuration for testing an Electron application with Playwright in CodeceptJS. This sets up the Playwright helper to use the Electron browser and points to the Electron application's main file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\n\nexports.config = {\n  helpers: {\n    Playwright: {\n      browser: \"electron\",\n      electron: {\n        executablePath: require(\"electron\"),\n        args: [path.join(__dirname, \"main.js\")],\n      },\n    },\n  },\n  // rest of config\n}\n```\n\n----------------------------------------\n\nTITLE: Element Focus and Force Click in CodeceptJS\nDESCRIPTION: Methods for focusing on elements and performing emulated clicks using JavaScript, working with hidden or inactive elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSee('#add-to-cart-btn');\nI.focus('#product-tile')\nI.see('#add-to-cart-bnt');\n\n// Force Click Examples\n// simple link\nI.forceClick('Logout');\n// button of form\nI.forceClick('Submit');\n// CSS button\nI.forceClick('#form input[type=submit]');\n// XPath\nI.forceClick('//form/*[@type=submit]');\n// link in context\nI.forceClick('Logout', '#nav');\n// using strict locator\nI.forceClick({css: 'nav a.login'});\n```\n\n----------------------------------------\n\nTITLE: Execute JavaScript in Browser Context\nDESCRIPTION: Shows how to execute JavaScript code in the browser context, including examples of jQuery DatePicker manipulation and returning values to the test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\n// change date of jQuery DatePicker\nI.executeScript(function() {\n  // now we are inside browser context\n  $('date').datetimepicker('setDate', new Date());\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet date = await I.executeScript(function(el) {\n  // only basic types can be returned\n  return $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector\n```\n\n----------------------------------------\n\nTITLE: Switching Browser Tabs with CodeceptJS\nDESCRIPTION: Uses the switchToNextTab and switchToPreviousTab methods to switch focus between browser tabs. Can specify the number of tabs to move and wait time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchToNextTab();\nI.switchToNextTab(2);\n\nI.switchToPreviousTab();\nI.switchToPreviousTab(2);\n```\n\n----------------------------------------\n\nTITLE: Scroll Page Operations in CodeceptJS\nDESCRIPTION: Methods for scrolling page to top or bottom.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToBottom();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToTop();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollTo('footer');\nI.scrollTo('#submit', 5, 5);\n```\n\n----------------------------------------\n\nTITLE: Type Checking with softExpectToBeAn\nDESCRIPTION: A soft assertion method that validates if the provided data matches an expected type. Takes a target value, expected type string, and optional custom error message. Does not break test execution on failure.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/SoftExpectHelper.md#2025-04-21_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n### softExpectToBeAn\n\nSoftly asserts that the target data is of a specific type (alternative for articles).\n\n#### Parameters\n\n- `targetData` **any** The data to check.\n- `type` **[string][3]** The expected type (e.g., 'string', 'number').\n- `customErrorMsg` **[string][3]** A custom error message to display if the assertion fails.\n```\n\n----------------------------------------\n\nTITLE: Checking Page Title in CodeceptJS\nDESCRIPTION: Verifies that the page title contains a specified text. This method is useful for ensuring correct page navigation and content loading.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInTitle('Home Page');\n```\n\n----------------------------------------\n\nTITLE: Using Within Block in CodeceptJS\nDESCRIPTION: Example of using the 'within' block to narrow the scope of actions in a CodeceptJS test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait within('.todoapp', () => {\n  I.fillField('.todo', 'my new item');\n  I.pressKey('Enter')\n  I.see('1 item left', '.todo-count');\n  I.click('.todo-list input.toggle');\n});\nI.see('0 items left', '.todo-count');\n```\n\n----------------------------------------\n\nTITLE: Network Traffic and WebSocket Recording in CodeceptJS\nDESCRIPTION: These methods handle starting and stopping recording of network traffic and WebSocket messages. They reset previously recorded data when starting a new recording session.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nI.startRecordingTraffic();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.startRecordingWebSocketMessages();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.stopMockingRoute(/(.png$)|(.jpg$)/);\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.stopRecordingTraffic();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.stopRecordingWebSocketMessages();\n```\n\n----------------------------------------\n\nTITLE: Using see() method to check for visible text in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to use the see() method to check for visible text on a page. The method can check text in the entire page or within a specific context narrowed by CSS selector, XPath, or strict locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in CodeceptJS\nDESCRIPTION: Shows how to set single or multiple cookies using the setCookie method in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_90\n\nLANGUAGE: javascript\nCODE:\n```\nI.setCookie({name: 'auth', value: true});\n\n// as array\nI.setCookie([\n  {name: 'auth', value: true},\n  {name: 'agree', value: true}\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper for Electron Testing\nDESCRIPTION: Example configuration for launching Electron tests using Playwright helper, specifying the executable path and arguments.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n{\n helpers: {\n    Playwright: {\n      browser: 'electron',\n      electron: {\n        executablePath: require(\"electron\"),\n        args: [path.join('../', \"main.js\")],\n      },\n    }\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Helper in CodeceptJS\nDESCRIPTION: Example of how to configure a custom helper in the CodeceptJS configuration file. This snippet shows how to include the helper and pass additional configuration options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  WebDriver: {  },\n  MyHelper: {\n    require: './path/to/module'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using waitForText in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for specified text to appear on page. Can limit the search to a specific context element and customize wait time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n```\n\n----------------------------------------\n\nTITLE: Using Cross-Platform Keyboard Shortcuts in CodeceptJS\nDESCRIPTION: Demonstrates using the 'CommandOrControl' key for creating OS-agnostic keyboard shortcuts. Uses Command on macOS and Control on other platforms.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_60\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKey(['CommandOrControl', 'Z']);\n```\n\n----------------------------------------\n\nTITLE: Configuring TestingBot Service with WebdriverIO in CodeceptJS\nDESCRIPTION: Configures the TestingBot service using WebdriverIO in CodeceptJS. Requires installing @wdio/testingbot-service and enabling the wdio plugin with TestingBot credentials.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n  wdio: {\n      enabled: true,\n      services: ['testingbot'],\n      user: ... ,// testingbot key\n      key: ... // testingbot secret\n      // additional config, from testingbot service\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Managing Downloads in CodeceptJS\nDESCRIPTION: Sets up file download handling and specifies the directory for downloaded files. Works with FileSystem helper to verify downloads. Clears download directory on each call.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nI.handleDownloads();\nI.click('Download Avatar');\nI.amInPath('output/downloads');\nI.seeFile('avatar.jpg');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Text to Appear\nDESCRIPTION: Waits for specific text to appear on the page. By default, it waits for 1 second, but the wait time can be customized. The search can be narrowed down by providing a context element.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_104\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n```\n\n----------------------------------------\n\nTITLE: Configuring Code Coverage in CodeceptJS\nDESCRIPTION: Configuration snippet for enabling code coverage plugin in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  plugins: {\n    coverage: {\n      enabled: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS tests in headless mode\nDESCRIPTION: Commands to run CodeceptJS tests in headless mode for both Unix-like systems and Windows.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nHEADLESS=true codeceptjs run\n```\n\nLANGUAGE: bash\nCODE:\n```\nset HEADLESS=true&& codeceptjs run\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS tests with debug options\nDESCRIPTION: Command to run CodeceptJS tests with debug output and pause on fail option for easier troubleshooting.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs run --debug -p pauseOnFail\n```\n\n----------------------------------------\n\nTITLE: Grabbing Page Source in JavaScript with Playwright\nDESCRIPTION: This function retrieves the page source. It returns a Promise resolving to the page source code as a string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nlet pageSource = await I.grabSource();\n```\n\n----------------------------------------\n\nTITLE: Environment Information Output\nDESCRIPTION: Detailed environment information output including CodeceptJS version, Node version, OS info, browser versions and configured helpers and plugins.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_47\n\nLANGUAGE: plaintext\nCODE:\n```\nEnvironment information:-\n\ncodecepVersion:  \"3.5.4\"\nnodeInfo:  18.16.0\nosInfo:  macOS 13.5\ncpuInfo:  (8) arm64 Apple M1 Pro\nchromeInfo:  116.0.5845.179\nedgeInfo:  116.0.1938.69\nfirefoxInfo:  Not Found\nsafariInfo:  16.6\nhelpers:  {\n\"Playwright\": {\n\"url\": \"https://github.com\",\n\"show\": false,\n\"browser\": \"chromium\",\n\"waitForNavigation\": \"load\",\n\"waitForTimeout\": 30000,\n\"trace\": false,\n\"keepTraceForPassedTests\": true\n},\n\"CDPHelper\": {\n\"require\": \"./helpers/CDPHelper.ts\"\n},\n\"OpenAI\": {\n\"chunkSize\": 8000\n},\n\"ExpectHelper\": {\n\"require\": \"codeceptjs-expect\"\n},\n\"REST\": {\n\"endpoint\": \"https://reqres.in\",\n\"timeout\": 20000\n},\n\"AllureHelper\": {\n\"require\": \"./helpers/AllureHelper.ts\"\n}\n}\nplugins:  {\n\"screenshotOnFail\": {\n\"enabled\": true\n},\n\"tryTo\": {\n\"enabled\": true\n},\n\"retryFailedStep\": {\n\"enabled\": true\n},\n\"retryTo\": {\n\"enabled\": true\n},\n\"eachElement\": {\n\"enabled\": true\n},\n\"pauseOnFail\": {}\n}\n```\n\n----------------------------------------\n\nTITLE: Force Click in CodeceptJS\nDESCRIPTION: Performs JavaScript-emulated clicks on elements, working with hidden or inactive elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\n// simple link\nI.forceClick('Logout');\n// button of form\nI.forceClick('Submit');\n// CSS button\nI.forceClick('#form input[type=submit]');\n// XPath\nI.forceClick('//form/*[@type=submit]');\n// link in context\nI.forceClick('Logout', '#nav');\n// using strict locator\nI.forceClick({css: 'nav a.login'});\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Steps in CodeceptJS\nDESCRIPTION: Shows different ways to implement retry functionality for individual steps, including retry count and custom retry conditions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nI.retry().see('Welcome')\n\nI.retry(3).see('Welcome')\n\n// retry action 3 times waiting for 0.1 second before next try\nI.retry({ retries: 3, minTimeout: 100 }).see('Hello')\n\n// retry action 3 times waiting no more than 3 seconds for last retry\nI.retry({ retries: 3, maxTimeout: 3000 }).see('Hello')\n\n// retry 2 times if error with message 'Node not visible' happens\nI.retry({\n  retries: 2,\n  when: err => err.message === 'Node not visible',\n}).seeElement('#user')\n```\n\n----------------------------------------\n\nTITLE: Waiting for Input Value in CodeceptJS\nDESCRIPTION: Waits for an input field to have a specific value. Supports locating elements by CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForValue('//input', \"GoodValue\");\n```\n\n----------------------------------------\n\nTITLE: Counting Open Browser Tabs in CodeceptJS\nDESCRIPTION: Retrieves the number of currently open browser tabs. Returns a promise resolving to a number. Should be used with await operator in async functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nlet tabs = await I.grabNumberOfOpenTabs();\n```\n\n----------------------------------------\n\nTITLE: Web-Specific Code Execution in CodeceptJS\nDESCRIPTION: Demonstrates how to run code specifically for web applications using the 'runInWeb' method, which is useful for shared tests across mobile and web platforms.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.runInWeb(() => {\n  I.amOnPage('/login'); // not available for mobile\n  I.fillField('name', 'jon');\n  I.fillField('password', '123456');\n  I.click('Login');\n  I.waitForElement('#success'); // no available for mobile\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Selenium Standalone Service in CodeceptJS\nDESCRIPTION: This snippet demonstrates how to enable and configure the Selenium Standalone service in CodeceptJS. It requires the @wdio/selenium-standalone-service package to be installed and compatible with the current WebdriverIO version.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n   wdio: {\n       enabled: true,\n       services: ['selenium-standalone']\n       // additional config for service can be passed here\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Options in CodeceptJS\nDESCRIPTION: Demonstrates how to select a checkbox or radio button using different locator strategies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n```\n\n----------------------------------------\n\nTITLE: Configuring Basic Protractor Settings\nDESCRIPTION: Basic configuration example for Protractor helper showing essential settings like URL, browser type, and smart wait functionality.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"helpers\": {\n     \"Protractor\" : {\n       \"url\": \"http://localhost\",\n       \"browser\": \"chrome\",\n       \"smartWait\": 5000,\n       \"restart\": false\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Basic Test Scenario in CodeceptJS with TestCafe\nDESCRIPTION: Example of a test scenario for creating a todo item in the TodoMVC application using CodeceptJS with TestCafe.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/testcafe.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('TodoMVC');\n\nScenario('create todo item', ({ I }) => {\n  I.amOnPage('http://todomvc.com/examples/angularjs/#/');\n  I.fillField('.new-todo', todo)\n  I.pressKey('Enter');\n  I.seeNumberOfVisibleElements('.todo-list li', 1);\n  I.see('1 item left', '.todo-count');\n});\n```\n\n----------------------------------------\n\nTITLE: ReactJS WebDriver Locator Example\nDESCRIPTION: Demonstrates how to use experimental ReactJS locators with WebDriver to find elements by component name, props and state\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\n// locating React element by name, prop, state\nI.click({ react: 'component-name', props: {}, state: {} })\nI.seeElement({ react: 'component-name', props: {}, state: {} })\n```\n\n----------------------------------------\n\nTITLE: Filling Form Fields\nDESCRIPTION: Fills text fields or textareas with given values after clearing existing content. Supports multiple locator strategies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', secret('123456'));\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n```\n\n----------------------------------------\n\nTITLE: Saving Element Screenshots in CodeceptJS\nDESCRIPTION: Saves a screenshot of the specified element to the output folder configured in the codecept config file. The filename is relative to the output folder.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveElementScreenshot(`#submit`,'debug.png');\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper for Debug Mode\nDESCRIPTION: Example configuration for running Playwright helper in debug mode with visible browser window.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Playwright : {\n       url: \"http://localhost\",\n       show: true\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Exact URL Match with CodeceptJS\nDESCRIPTION: Waits for the entire URL to match the expected value. This can be used with both relative and absolute URLs. By default, it waits for 1 second.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');\n```\n\n----------------------------------------\n\nTITLE: Form Field Interaction Examples in JavaScript\nDESCRIPTION: Examples showing how to append text to fields and attach files\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.appendField('#myTextField', 'appended');\n// typing secret\nI.appendField('password', secret('123456'));\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.attachFile('Avatar', 'data/avatar.jpg');\nI.attachFile('form input[name=avatar]', 'data/avatar.jpg');\n```\n\n----------------------------------------\n\nTITLE: Save Element Screenshot in CodeceptJS\nDESCRIPTION: Captures and saves screenshot of a specific element to the output folder specified in config file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveElementScreenshot(`#submit`,'debug.png');\n```\n\n----------------------------------------\n\nTITLE: Page Title Validation in CodeceptJS\nDESCRIPTION: Verifies that page title does not contain specified text.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInTitle('Error');\n```\n\n----------------------------------------\n\nTITLE: Switching to Previous Tab in CodeceptJS\nDESCRIPTION: Switches focus to the previous or a specific previous tab. This method waits for tab loading before switching, ensuring proper interaction with multi-tab scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchToPreviousTab();\nI.switchToPreviousTab(2);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Function Execution in Browser Context with CodeceptJS\nDESCRIPTION: Waits for a function to return true in the browser context. It accepts a function, optional arguments, and a timeout. The function can be passed as a string or a JavaScript function.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForFunction(fn[, [args[, timeout]])\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForFunction(() => window.requests == 0);\nI.waitForFunction(() => window.requests == 0, 5); // waits for 5 sec\nI.waitForFunction((count) => window.requests == count, [3], 5) // pass args and wait for 5 sec\n```\n\n----------------------------------------\n\nTITLE: Performing Swipe Gestures in CodeceptJS Detox\nDESCRIPTION: These snippets demonstrate how to perform swipe gestures (up, down, left, right) within an element. The speed can be set to 'slow' or 'fast'.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nI.swipeUp('#container');\n```\n\n----------------------------------------\n\nTITLE: Grabbing Multiple Form Values in CodeceptJS\nDESCRIPTION: Retrieves array of values from multiple form elements using CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nlet inputs = await I.grabValueFromAll('//form/input');\n```\n\n----------------------------------------\n\nTITLE: Additional Examples of Masking Passwords in CodeceptJS\nDESCRIPTION: These examples show different ways to use the 'secret' function with various CodeceptJS methods like fillField, append, and type.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/secrets.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.fillField('password', secret('123456'));\nI.append('password', secret('123456'));\nI.type('password', secret('123456'));\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Specific Elements in CodeceptJS\nDESCRIPTION: Scrolls to an element matched by locator with optional X and Y offsets. Supports CSS, XPath, and strict locators for finding elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollTo('footer');\nI.scrollTo('#submit', 5, 5);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Network Requests in CodeceptJS\nDESCRIPTION: Waits for specific network requests to occur. Can wait for exact URLs or use a predicate function to match request properties.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForRequest('http://example.com/resource');\nI.waitForRequest(request => request.url() === 'http://example.com' && request.method() === 'GET');\n```\n\n----------------------------------------\n\nTITLE: Detox Helper Configuration\nDESCRIPTION: CodeceptJS configuration setup for Detox helper, including React Native support option.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/detox.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n   Detox: {\n     require: '@codeceptjs/detox-helper',\n     configuration: '<detox app configuration name>',\n     reloadReactNative: true,\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Unchecking Options in CodeceptJS\nDESCRIPTION: Demonstrates how to uncheck checkboxes or radio buttons using various locator strategies in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_97\n\nLANGUAGE: javascript\nCODE:\n```\nI.uncheckOption('#agree');\nI.uncheckOption('I Agree to Terms and Conditions');\nI.uncheckOption('agree', '//form');\n\n// click on element at position\nI.uncheckOption('Agree', '.signup', { position: { x: 5, y: 5 } })\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Output Module Usage\nDESCRIPTION: Example showing how to use the output module for different verbosity levels of logging and information display.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = require('codeceptjs').output;\n\noutput.print('This is basic information');\noutput.debug('This is debug information');\noutput.log('This is verbose logging information');\n```\n\n----------------------------------------\n\nTITLE: Verifying Text Visibility with CodeceptJS\nDESCRIPTION: Demonstrates how to check if text is visible on the page, with options to narrow the search to specific elements or contexts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_48\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('Welcome'); // text welcome on a page\nI.see('Welcome', '.content'); // text inside .content div\nI.see('Register', {css: 'form.register'}); // use strict locator\n```\n\n----------------------------------------\n\nTITLE: Checking Network Traffic with Advanced Parameters in Playwright\nDESCRIPTION: This snippet shows how to check network traffic with advanced parameters such as URL and query parameters using Playwright helper methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\n// check the traffic with advanced params\nI.amOnPage('https://openai.com/blog/chatgpt')\nawait I.startRecordingTraffic()\nawait I.seeTraffic({\n  name: 'sentry event',\n  url: 'https://images.openai.com/blob/cf717bdb-0c8c-428a-b82b-3c3add87a600',\n  parameters: {\n    width: '1919',\n    height: '1138',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Verifying Current URL Inequality in CodeceptJS\nDESCRIPTION: Demonstrates how to check that the current URL is not equal to a provided URL, supporting both relative and absolute URLs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCurrentUrlEquals('/login'); // relative url are ok\nI.dontSeeCurrentUrlEquals('http://mysite.com/login'); // absolute urls are also ok\n```\n\n----------------------------------------\n\nTITLE: Sample Playwright Test in CodeceptJS\nDESCRIPTION: A simple test script demonstrating how to automate GitHub login functionality using Playwright with CodeceptJS. The test navigates to GitHub, attempts to sign in with invalid credentials, and verifies the error message.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('https://github.com');\nI.click('Sign in', '//html/body/div[1]/header');\nI.see('Sign in to GitHub', 'h1');\nI.fillField('Username or email address', 'something@totest.com');\nI.fillField('Password', '123456');\nI.click('Sign in');\nI.see('Incorrect username or password.', '.flash-error');\n```\n\n----------------------------------------\n\nTITLE: Using Strict Locators with switchTo and within\nDESCRIPTION: Examples of using strict CSS locators with switchTo and within methods for iframe navigation and form interactions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchTo({ css: 'iframe[id^=number-frame]' }) // support the strict locator\n\nI.amOnPage('/iframe');\nwithin({\n  frame: { css: '#number-frame-1234' }, // support the strict locator\n}, () => {\n  I.fillField('user[login]', 'User');\n  I.fillField('user[email]', 'user@user.com');\n  I.fillField('user[password]', 'user@user.com');\n  I.click('button');\n});\n```\n\n----------------------------------------\n\nTITLE: Text and Element Assertions in CodeceptJS\nDESCRIPTION: Methods for verifying visible text, elements, checkboxes, and cookies on the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('Welcome');\nI.see('Welcome', '.content');\nI.see('Register', {css: 'form.register'});\nI.seeCheckboxIsChecked('Agree');\nI.seeCookie('Auth');\n```\n\n----------------------------------------\n\nTITLE: Enhancing AutoLogin Plugin with Session Checking\nDESCRIPTION: This snippet demonstrates an improved implementation of the AutoLogin plugin in CodeceptJS. It shows how to use the session object in the check method to verify the logged-in user, throwing an error if the wrong user is detected.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nautoLogin: {\n  enabled: true,\n  saveToFile: true,\n  inject: 'login',\n  users: {\n    admin: {\n      login: async (I) => {  // If you use async function in the autoLogin plugin\n         const phrase = await I.grabTextFrom('#phrase')\n         I.fillField('username', 'admin'),\n         I.fillField('password', 'password')\n         I.fillField('phrase', phrase)\n      },\n      check: (I, session) => {\n         // Throwing an error in `check` will make CodeceptJS perform the login step for the user\n         if (session.profile.email !== the.email.you.expect@some-mail.com) {\n              throw new Error ('Wrong user signed in');\n        }\n      },\n    }\n  }\n}\nScenario('login', async ( {I, login} ) => {\n  await login('admin') // you should use `await`\n})\n```\n\n----------------------------------------\n\nTITLE: Form Field Value Verification in CodeceptJS\nDESCRIPTION: Checks input field or textarea values using various locator strategies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInField('Username', 'davert');\nI.seeInField({css: 'form textarea'},'Type your comment here');\nI.seeInField('form input[type=hidden]','hidden_value');\nI.seeInField('#searchform input','Search');\n```\n\n----------------------------------------\n\nTITLE: Grabbing Element Bounding Rectangle in JavaScript with Playwright\nDESCRIPTION: This function retrieves the width, height, and location of a given locator. It returns an object with x, y, width, and height properties, or a single metric if specified.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = await I.grabElementBoundingRect('h3');\n// value is like { x: 226.5, y: 89, width: 527, height: 220 }\n\nconst width = await I.grabElementBoundingRect('h3', 'width');\n// width == 527\n```\n\n----------------------------------------\n\nTITLE: Setting Playwright Request Headers in CodeceptJS\nDESCRIPTION: Demonstrates how to set custom headers for all subsequent Playwright requests in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nI.setPlaywrightRequestHeaders({\n   'X-Sent-By': 'CodeceptJS',\n});\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Custom Splitting Logic in CodeceptJS\nDESCRIPTION: Example of running tests in parallel with a custom function that determines how tests are distributed across worker threads, useful for balancing long-running tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n/*\n Define a function to split your tests.\n\n function should return an array with this format [[file1, file2], [file3], ...]\n\n where file1 and file2 will run in a worker thread and file3 will run in a worker thread\n*/\nconst splitTests = () => {\n  const files = [\n    ['./test/data/sandbox/guthub_test.js', './test/data/sandbox/devto_test.js'],\n    ['./test/data/sandbox/longrunnig_test.js']\n  ];\n\n  return files;\n}\n\nconst workerConfig = {\n  testConfig: './test/data/sandbox/codecept.customworker.js',\n  by: splitTests\n};\n\n// don't initialize workers in constructor\nconst customWorkers = new Workers(null,  workerConfig);\n\ncustomWorkers.run();\n\n// You can use event listeners similar to above example.\ncustomWorkers.on(event.all.result, () => {\n  workers.printResults();\n});\n```\n\n----------------------------------------\n\nTITLE: Opening Interactive Web Test Runner for CodeceptJS\nDESCRIPTION: Command to open the interactive web-based test runner for CodeceptJS, allowing visual review and execution of tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/vue.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e:open\n```\n\n----------------------------------------\n\nTITLE: Moving Cursor to Element in JavaScript with CodeceptJS\nDESCRIPTION: Moves the cursor to an element matched by a locator. Additional offset can be specified with offsetX and offsetY parameters.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Helper Configuration\nDESCRIPTION: Configuration setup for MockRequest helper with Puppeteer.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockRequest.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n   Puppeteer: {\n     // regular Puppeteer config here\n   },\n   MockRequestHelper: {\n     require: '@codeceptjs/mock-request',\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Checkbox State\nDESCRIPTION: Checks that specified checkboxes are not checked using various locator strategies like ID, label text or name attribute.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCheckboxIsChecked('#agree'); // located by ID\nI.dontSeeCheckboxIsChecked('I agree to terms'); // located by label\nI.dontSeeCheckboxIsChecked('agree'); // located by name\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Helper with Custom Options in CodeceptJS\nDESCRIPTION: Example configuration for WebDriver Helper in CodeceptJS, showing how to set custom options like smartWait, browser type, and timeouts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Event Listener Example\nDESCRIPTION: Example showing how to create an event listener for test events using the CodeceptJS event system.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst event = require('codeceptjs').event;\n\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    console.log('--- I am before test --');\n\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definition for Gherkin in CodeceptJS\nDESCRIPTION: Shows how to implement a step definition for Gherkin BDD in CodeceptJS. This example creates a Given step that opens Google.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nconst I = actor()\n\nGiven('I need to open Google', () => {\n  I.amOnPage('https://google.com')\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Helper for iOS Mobile Web Testing\nDESCRIPTION: Example configuration for testing a website on iOS Safari using the Appium helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\nhelpers: {\n  Appium: {\n    platform: \"iOS\",\n    url: \"https://the-internet.herokuapp.com/\",\n    desiredCapabilities: {\n      deviceName: \"iPhone X\",\n      platformVersion: \"12.0\",\n      browserName: \"safari\"\n    }\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Helper in CodeceptJS\nDESCRIPTION: This snippet shows how to configure the REST helper in CodeceptJS config file. It sets up the endpoint and default headers for API requests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  REST: {\n    endpoint: \"http://localhost/api/v1/\",\n    defaultHeaders: {\n      'Auth': '11111',\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n    },\n  },\n  WebDriver : {\n    url: 'http://localhost',\n    browser: 'chrome'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Helper with Custom HTTP Agent\nDESCRIPTION: Shows how to configure the REST helper with a custom HTTP agent, including CA certificate and other options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    REST: {\n      endpoint: 'http://site.com/api',\n      prettyPrintJson: true,\n      httpAgent: {\n         ca: fs.readFileSync(__dirname + '/path/to/ca.pem'),\n         rejectUnauthorized: false,\n         keepAlive: true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Grabbing Text from Multiple Elements in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves text from all elements located by CSS or XPath and returns them to the test. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nlet pins = await I.grabTextFromAll('#pin li');\n```\n\n----------------------------------------\n\nTITLE: Configuring TestCafe Helper with Chrome Browser\nDESCRIPTION: Example configuration for TestCafe helper showing how to set up Chrome browser with specific timeout and display settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     TestCafe : {\n       url: \"http://localhost\",\n       waitForTimeout: 15000,\n       show: true,\n       browser: \"chrome\"\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Element Invisibility in CodeceptJS\nDESCRIPTION: Shows how to check that an element is not visible or not present in the DOM.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeElement('.modal'); // modal is not shown\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with WebDriverIO\nDESCRIPTION: Install CodeceptJS and WebDriverIO testing framework into the current directory using create-codeceptjs installer with webdriverio flag.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/installation.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-codeceptjs . --webdriverio\n```\n\n----------------------------------------\n\nTITLE: Grabbing CSS Property in JavaScript with Playwright\nDESCRIPTION: This function retrieves the CSS property value for a given locator. It uses the grabCssPropertyFrom method and returns a Promise resolving to the CSS value as a string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = await I.grabCssPropertyFrom('h3', 'font-weight');\n```\n\n----------------------------------------\n\nTITLE: HTML Content with Non-Breaking Space in CodeceptJS Tests\nDESCRIPTION: This example shows how CodeceptJS handles non-breaking spaces (&nbsp;) in HTML content when using the I.see() method. It demonstrates that the see method works with both regular spaces and non-breaking spaces.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n// HTML code uses &nbsp; instead of space\n<div class=\"dJHe_\" style=\"color: rgb(255, 255, 255);\">\n  My&nbsp;Text!\n</div>\n\nI.see('My Text!') // this test would work with both &nbsp; and space\n```\n\n----------------------------------------\n\nTITLE: Using Grabbers in CodeceptJS\nDESCRIPTION: Example of using grabbers to extract values from the page in a CodeceptJS test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nconst assert = require('assert');\nScenario('get value of current tasks', async ({ I }) => {\n  I.fillField('.todo', 'my first item');\n  I.pressKey('Enter')\n  I.fillField('.todo', 'my second item');\n  I.pressKey('Enter')\n  let numTodos = await I.grabTextFrom('.todo-count strong');\n  assert.equal(2, numTodos);\n});\n```\n\n----------------------------------------\n\nTITLE: Closing Browser Tabs in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to close the current tab or all other tabs in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nI.closeCurrentTab();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.closeOtherTabs();\n```\n\n----------------------------------------\n\nTITLE: AutoLogin Plugin Configuration with Session Check\nDESCRIPTION: Enhanced configuration for the autoLogin plugin that allows checking user session in addition to login verification. The example shows how to use async functions in login and how to verify a user by checking session data rather than page elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nInstead of asserting on page elements for the current user in check, you can use the session you saved in fetch\n\nautoLogin: {\n  enabled: true,\n  saveToFile: true,\n  inject: 'login',\n  users: {\n    admin: {\n      login: async (I) => {  // If you use async function in the autoLogin plugin\n         const phrase = await I.grabTextFrom('#phrase')\n         I.fillField('username', 'admin'),\n         I.fillField('password', 'password')\n         I.fillField('phrase', phrase)\n      },\n      check: (I, session) => {\n         // Throwing an error in `check` will make CodeceptJS perform the login step for the user\n         if (session.profile.email !== the.email.you.expect@some-mail.com) {\n              throw new Error ('Wrong user signed in');\n        }\n      },\n    }\n  }\n}\nScenario('login', async ( {I, login} ) => {\n  await login('admin') // you should use `await`\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Detox Helper in CodeceptJS Configuration\nDESCRIPTION: Example of enabling and configuring the Detox helper in the CodeceptJS configuration file (codecept.conf.js).\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n   Detox: {\n     require: '@codeceptjs/detox-helper',\n     configuration: '<detox-configuration-name>',\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Cookies in CodeceptJS\nDESCRIPTION: Shows how to check that a cookie with a given name does not exist.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCookie('auth'); // no auth cookie\n```\n\n----------------------------------------\n\nTITLE: Grabbing HTML Content from Multiple Elements in CodeceptJS\nDESCRIPTION: Retrieves innerHTML from all elements matching a CSS or XPath selector. Returns an array of strings containing HTML code. Should be used with await operator in async functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nlet postHTMLs = await I.grabHTMLFromAll('.post');\n```\n\n----------------------------------------\n\nTITLE: Network Traffic Verification in CodeceptJS\nDESCRIPTION: Verifies that certain network requests are not present in the traffic.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeTraffic({ name: 'Unexpected API Call', url: 'https://api.example.com' });\nI.dontSeeTraffic({ name: 'Unexpected API Call of \"user\" endpoint', url: /api.example.com.*user/ });\n```\n\n----------------------------------------\n\nTITLE: Validating Response JSON Content\nDESCRIPTION: Examples of using dontSeeResponseContainsJson method to check JSON response data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/JSONResponse.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// response.data == { data: { user: 1 } }\n\nI.dontSeeResponseContainsJson({ user: 2 });\n\n// response.data == [{ user: 1 }, { user: 3 }]\n\nI.dontSeeResponseContainsJson({ user: 2 });\n```\n\n----------------------------------------\n\nTITLE: Replaying API Requests from HAR in Playwright\nDESCRIPTION: Shows how to replay API requests from a HAR file in Playwright tests. This allows mocking network requests using recorded HAR data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nI.replayFromHar('./output/har/something.har', { url: \"*/**/api/v1/fruits\" });\nI.amOnPage('https://demo.playwright.dev/api-mocking');\nI.see('CodeceptJS');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element to be Clickable in CodeceptJS\nDESCRIPTION: Waits for an element to become clickable for a specified number of seconds. This method is useful for ensuring interactive elements are ready before interaction attempts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForClickable('#link');\n```\n\n----------------------------------------\n\nTITLE: Using Scenario Outlines with Examples in Gherkin\nDESCRIPTION: Example of a scenario outline with examples in Gherkin. This format allows the same scenario logic to be executed with different sets of data, reducing duplication in test code.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_11\n\nLANGUAGE: gherkin\nCODE:\n```\n  Scenario Outline: order discount\n    Given I have product with price <price>$ in my cart\n    And discount for orders greater than $20 is 10 %\n    When I go to checkout\n    Then I should see overall price is \"<total>\" $\n\n    Examples:\n      | price | total |\n      | 10    | 10    |\n      | 20    | 20    |\n      | 21    | 18.9  |\n      | 30    | 27    |\n      | 50    | 45    |\n```\n\n----------------------------------------\n\nTITLE: Unchecking Options in Forms with CodeceptJS\nDESCRIPTION: The uncheckOption method unselects checkboxes or radio buttons. Elements can be located by label, name, CSS, or XPath. An optional context parameter can narrow the search scope.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nI.uncheckOption('#agree');\nI.uncheckOption('I Agree to Terms and Conditions');\nI.uncheckOption('agree', '//form');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element to Hide in CodeceptJS\nDESCRIPTION: Waits for an element to become hidden on the page with a default timeout of 1 second. Supports CSS and XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitToHide('#popup');\n```\n\n----------------------------------------\n\nTITLE: Accessing Appium Client in Custom Helper\nDESCRIPTION: Example of how to access the Appium client from a custom helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nlet browser = this.helpers['Appium'].browser\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with WebdriverIO\nDESCRIPTION: npm command to install CodeceptJS with WebdriverIO support for mobile testing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm install codeceptjs webdriverio@8.6.3 --save\n```\n\n----------------------------------------\n\nTITLE: Switching Web Context in Appium\nDESCRIPTION: Switches to web context in a mobile application. Can switch to first detected web context or a specific named context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n// switch to first web context\nI.switchToWeb();\n\n// or set the context explicitly\nI.switchToWeb('WEBVIEW_io.selendroid.testapp');\n```\n\n----------------------------------------\n\nTITLE: Using waitUrlEquals in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for the entire URL to match the expected string. Can wait for both relative and absolute URLs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Operation in CodeceptJS\nDESCRIPTION: Implements drag and drop functionality between elements with optional source positioning.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\n// specify coordinates for source position\nI.dragAndDrop('img.src', 'img.dst', { sourcePosition: {x: 10, y: 10} })\n\nI.dragAndDrop('#dragHandle', '#container');\n```\n\n----------------------------------------\n\nTITLE: Using the Same Example Value Multiple Times\nDESCRIPTION: Example showing how to reuse the same example value multiple times in a single step. This can be useful when the same data needs to be referenced in different parts of a step.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_12\n\nLANGUAGE: gherkin\nCODE:\n```\n  Scenario Outline: check parameter substitution\n    Given I have a defined step\n    When I see \"<text>\" text and \"<text>\" is not \"xyz\"\n    Examples:\n      | text   |\n      | Google |\n```\n\n----------------------------------------\n\nTITLE: Accessing Puppeteer API in Tests (JavaScript)\nDESCRIPTION: New method to directly access Puppeteer API within tests using usePuppeteerTo.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePuppeteerTo('do something special', async ({ page, browser }) => {\n  // use page or browser objects here\n})\n```\n\n----------------------------------------\n\nTITLE: Accessing WebDriver API in Tests (JavaScript)\nDESCRIPTION: New method to directly access WebDriver API within tests using useWebDriverTo.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nI.useWebDriverTo('do something special', async ({ browser }) => {\n  // use browser object here\n})\n```\n\n----------------------------------------\n\nTITLE: Vue-specific Locators in CodeceptJS\nDESCRIPTION: Examples of using Vue-specific locators in CodeceptJS tests to select elements by component name and props. This demonstrates how to interact with Vue components in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/vue.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{ vue: 'MyComponent' }\n{ vue: 'Button', props: { title: 'Click Me' }}\n\nI.click({ vue: 'Tab', props: { title: 'Click Me!' }});\nI.seeElement({ vue: 't', props: { title: 'Clicked' }});\n```\n\n----------------------------------------\n\nTITLE: Migrating CodeceptJS Configuration\nDESCRIPTION: Migrates the current codecept.json to codecept.conf.js using the 'migrate' command.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs migrate\n```\n\n----------------------------------------\n\nTITLE: Saving Screenshots for Multiple Sessions\nDESCRIPTION: Illustrates how to save screenshots for different sessions in WebDriverIO, Puppeteer, and Playwright helpers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('should save screenshot for sessions WebDriverIO Puppeteer Playwright', async ({ I }) => {\n  await I.amOnPage('/form/bug1467');\n  await I.saveScreenshot('original.png');\n  await I.amOnPage('/');\n  await I.saveScreenshot('main_session.png');\n  session('john', async () => {\n    await I.amOnPage('/form/bug1467');\n    event.dispatcher.emit(event.test.failed, this);\n  });\n\n  const fileName = clearString('should save screenshot for active session WebDriverIO Puppeteer Playwright');\n  const [original, failed] = await I.getSHA256Digests([\n    `${output_dir}/original.png`,\n    `${output_dir}/john_${fileName}.failed.png`,\n  ]);\n\n  // Assert that screenshots of same page in same session are equal\n  await I.expectEqual(original, failed);\n\n  // Assert that screenshots of sessions are created\n  const [main_original, session_failed] = await I.getSHA256Digests([\n    `${output_dir}/main_session.png`,\n    `${output_dir}/john_${fileName}.failed.png`,\n  ]);\n  await I.expectNotEqual(main_original, session_failed);\n});\n```\n\n----------------------------------------\n\nTITLE: Execute Synchronous Script in Browser Context\nDESCRIPTION: Executes synchronous JavaScript in the browser context. Can return values and accept parameters. Useful for direct DOM manipulation or framework-specific operations.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nI.executeScript(function() {\n  // now we are inside browser context\n  $('date').datetimepicker('setDate', new Date());\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet date = await I.executeScript(function(el) {\n  // only basic types can be returned\n  return $(el).datetimepicker('getDate').toString();\n}, '#date');\n```\n\n----------------------------------------\n\nTITLE: Advanced Network Traffic Verification in Playwright\nDESCRIPTION: Example showing how to verify network traffic with advanced parameters including URL and request parameters\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('https://openai.com/blog/chatgpt')\nawait I.startRecordingTraffic()\nawait I.seeTraffic({\n  name: 'sentry event',\n  url: 'https://images.openai.com/blob/cf717bdb-0c8c-428a-b82b-3c3add87a600',\n  parameters: {\n    width: '1919',\n    height: '1138',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Chrome Settings\nDESCRIPTION: Configuration for running tests in headless Chrome mode with specific Chrome options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"helpers\": {\n     \"Protractor\" : {\n       \"url\": \"http://localhost\",\n       \"browser\": \"chrome\",\n       \"capabilities\": {\n         \"chromeOptions\": {\n           \"args\": [ \"--headless\", \"--disable-gpu\", \"--no-sandbox\" ]\n         }\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Switching Tabs in CodeceptJS\nDESCRIPTION: Demonstrates how to switch to the next or previous tab in CodeceptJS tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchToNextTab();\nI.switchToNextTab(2);\n\nI.switchToPreviousTab();\nI.switchToPreviousTab(2);\n```\n\n----------------------------------------\n\nTITLE: Passing Command-line Options to CodeceptJS in Docker\nDESCRIPTION: Example of passing command-line options to CodeceptJS when running in a Docker container.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v $PWD:/tests codeception/codeceptjs codeceptjs run --debug\n```\n\n----------------------------------------\n\nTITLE: Running Parallel Tests with Workers in CodeceptJS\nDESCRIPTION: Command to execute tests in parallel using multiple worker processes. Requires NodeJS v12.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_94\n\nLANGUAGE: shell\nCODE:\n```\n# run all tests in parallel using 3 workers\nnpx codeceptjs run-workers 3\n```\n\n----------------------------------------\n\nTITLE: Request Modification with onRequest\nDESCRIPTION: Example showing how to modify requests on the fly using onRequest function to add session cookies\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/ApiDataFactory.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nonRequest: async (request) => {\n    // using global codeceptjs instance\n    let cookie = await codeceptjs.container.helpers('WebDriver').grabCookie('session');\n    request.headers = { Cookie: `session=${cookie.value}` };\n  }\n```\n\n----------------------------------------\n\nTITLE: Accessing WebDriver Helper in CodeceptJS\nDESCRIPTION: Shows how to access the WebDriver helper instance within a test to utilize internal methods like _locateClickable for advanced interactions with page elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nI.useWebDriverTo('click all Save buttons', async (WebDriver) => {\n  const els = await WebDriver._locateClickable('Save');\n  for (let el of els) {\n    await el.click();\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: REST Helper Configuration\nDESCRIPTION: Configuration setup for REST helper with JSONResponse in codecept.conf.js\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  helpers: {\n    REST: {\n      endpoint: 'http://localhost:3000/api'\n    },\n    // .. add JSONResponse helper here\n    JSONResponse: {}\n  }\n```\n\n----------------------------------------\n\nTITLE: Overriding Configuration via Command Line\nDESCRIPTION: Examples of using the --override or -o option to dynamically override configuration options when running tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_99\n\nLANGUAGE: bash\nCODE:\n```\ncodeceptjs run -o '{ \"bootstrap\": \"bootstrap.js\"}'\ncodecept.js run -o '{ \"helpers\": {\"WebDriverIO\": {\"browser\": \"chrome\"}}}'\n```\n\n----------------------------------------\n\nTITLE: Right Click Actions in CodeceptJS\nDESCRIPTION: Performs right click on elements located by CSS, XPath or text content, with optional context parameter.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n// right click element with id el\nI.rightClick('#el');\n// right click link or button with text \"Click me\"\nI.rightClick('Click me');\n// right click button with text \"Click me\" inside .context\nI.rightClick('Click me', '.context');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Detachment with CodeceptJS\nDESCRIPTION: Uses the waitForDetached method to wait for an element to become detached from the DOM. Elements can be located by CSS or XPath. Can specify custom wait time.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForDetached('#popup');\n```\n\n----------------------------------------\n\nTITLE: Element Visibility Check in CodeceptJS\nDESCRIPTION: Verifies that an element is not visible or present in the DOM.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeElement('.modal'); // modal is not shown\n```\n\n----------------------------------------\n\nTITLE: Using waitForNumberOfTabs Method in CodeceptJS\nDESCRIPTION: Example of using the new waitForNumberOfTabs method to wait for a specific number of browser tabs in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForNumberOfTabs(2)\n```\n\n----------------------------------------\n\nTITLE: Waiting for Tab Count in CodeceptJS\nDESCRIPTION: Waits for a specific number of browser tabs to be open. Takes the expected number of tabs and optionally the wait duration in seconds.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_80\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForNumberOfTabs(2);\n```\n\n----------------------------------------\n\nTITLE: Generating PageObjects in CodeceptJS\nDESCRIPTION: Command to generate a new page object file using CodeceptJS CLI.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/README.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\nnpx codeceptjs generate pageobject\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Element in CodeceptJS\nDESCRIPTION: Scrolls to specified element with optional X and Y offset parameters.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollTo('footer');\nI.scrollTo('#submit', 5, 5);\n```\n\n----------------------------------------\n\nTITLE: Verifying Current URL Fragment with CodeceptJS\nDESCRIPTION: Uses the seeInCurrentUrl method to check if the current URL contains a provided fragment. This is useful for confirming the current page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInCurrentUrl('/register'); // we are on registration page\n```\n\n----------------------------------------\n\nTITLE: Building CodeceptJS Docker Image\nDESCRIPTION: Provides commands for building the CodeceptJS Docker image, including an option to specify a custom Node.js version.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/docker.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t codeceptjs/codeceptjs .\n```\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t codeceptjs/codeceptjs . --build-arg NODE_VERSION=12.10.0\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Page in CodeceptJS\nDESCRIPTION: Demonstrates how to refresh the current page in a CodeceptJS test using the refreshPage method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nI.refreshPage();\n```\n\n----------------------------------------\n\nTITLE: Masking a String Password in CodeceptJS\nDESCRIPTION: This snippet demonstrates how to use the 'secret' function to mask a password when filling a field. The sensitive data is replaced with asterisks in the output.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/secrets.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.fillField('password', secret('123456'));\n```\n\n----------------------------------------\n\nTITLE: Configuring Anthropic Claude for CodeceptJS\nDESCRIPTION: Configuration for using Anthropic's Claude model in CodeceptJS. This setup requires the '@anthropic-ai/sdk' package and a Claude API key set as an environment variable.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  request: async messages => {\n    const Anthropic = require('@anthropic-ai/sdk')\n\n    const anthropic = new Anthropic({\n      apiKey: process.env.CLAUDE_API_KEY,\n    })\n\n    const resp = await anthropic.messages.create({\n      model: 'claude-2.1',\n      max_tokens: 1024,\n      messages,\n    })\n    return resp.content.map(c => c.text).join('\\n\\n')\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Element Focus in CodeceptJS\nDESCRIPTION: Triggers focus event on specified elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSee('#add-to-cart-btn');\nI.focus('#product-tile')\nI.see('#add-to-cart-bnt');\n```\n\n----------------------------------------\n\nTITLE: Creating Basic CodeceptJS Plugin with Default Config\nDESCRIPTION: Example showing how to create a basic plugin module with default configuration options that can be overridden.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst defaultConfig = {\n  someDefaultOption: true\n}\n\nmodule.exports = function(config) {\n  config = Object.assign(defaultConfig, config);\n  // do stuff\n}\n```\n\n----------------------------------------\n\nTITLE: Handling Popups in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to set automatic responses for JavaScript popups in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.amAcceptingPopups();\nI.click('#triggerPopup');\nI.acceptPopup();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.amCancellingPopups();\nI.click('#triggerPopup');\nI.cancelPopup();\n```\n\n----------------------------------------\n\nTITLE: Enabling Device Emulation for Specific Test in CodeceptJS\nDESCRIPTION: This code demonstrates how to create an additional browser session with device emulation for a specific test scenario using Playwright's devices list.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nconst { devices } = require('playwright');\n\nScenario('website looks nice on iPhone', () => {\n  session('mobile user', devices['iPhone 6'], () => {\n    I.amOnPage('/');\n    I.see('Hello, iPhone user!')\n  })\n});\n```\n\n----------------------------------------\n\nTITLE: Linking Selenium Container for WebDriverIO in Docker\nDESCRIPTION: Shell commands to run a Selenium standalone container and link it to the CodeceptJS container for WebDriverIO tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -d -P --name selenium-chrome selenium/standalone-chrome\n\n# Alternatively, selenium/standalone-firefox can be used\n\n$ docker run -it --rm -v /<path_to_codeceptjs_test_dir>/:/tests/ --link selenium-chrome:selenium codeception/codeceptjs\n```\n\n----------------------------------------\n\nTITLE: Double-clicking Elements in CodeceptJS\nDESCRIPTION: Performs a double-click on an element. The element can be located by text, CSS, XPath, or other locators, and an optional context parameter can narrow the search.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n```\n\n----------------------------------------\n\nTITLE: Refactored CodeceptJS checkout test using Page Object\nDESCRIPTION: An updated version of the checkout test scenario using the newly created Checkout Page Object for improved code organization and reusability.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('test the checkout form', async ({I, checkoutPage}) => {\n  I.amOnPage('/');\n  I.click('Coffee Cup');\n  I.click('Purchase');\n  I.click('Checkout');\n\n  // fill in the shipping address using the page object\n  checkoutPage.fillShippingAddress('John', 'Doe', '123 Main St.', 'New York', 'New York', '10001');\n  checkoutPage.fillValidCreditCard();\n  checkoutPage.checkout();\n\n  // verify that the checkout was successful\n  I.see('Your order has been placed successfully!');\n});\n```\n\n----------------------------------------\n\nTITLE: Basic CodeceptJS Test in Synchronous Mode\nDESCRIPTION: Example of a simple CodeceptJS test written in synchronous mode without using await.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/typescript.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('/')\nI.click('Login')\nI.see('Hello!')\n```\n\n----------------------------------------\n\nTITLE: Finding Checkable Elements (JavaScript)\nDESCRIPTION: Demonstrates how to find a checkbox using human-readable text in custom helpers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['Playwright']._locateCheckable('I agree with terms and conditions').then // ...\n```\n\n----------------------------------------\n\nTITLE: Generating a Custom Helper in CodeceptJS\nDESCRIPTION: Command to generate a basic helper using CodeceptJS CLI. This creates a new helper file and appends it to the helpers section of the config file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs gh\n```\n\n----------------------------------------\n\nTITLE: Executing REST Request in CodeceptJS Helper\nDESCRIPTION: Example of sending a REST request from within a custom helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['REST']._executeRequest({\n   url,\n   data,\n});\n```\n\n----------------------------------------\n\nTITLE: Disabling retryFailedStep Plugin for a Specific Test in JavaScript\nDESCRIPTION: Example of how to disable the retryFailedStep plugin for a specific test scenario using scenario configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('scenario tite', { disableRetryFailedStep: true }, () => {\n  // test goes here\n})\n```\n\n----------------------------------------\n\nTITLE: URL Verification in CodeceptJS\nDESCRIPTION: Checks if current URL exactly matches expected URL, supporting both absolute and relative paths.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n```\n\n----------------------------------------\n\nTITLE: Using eachElement for Iterating Over Elements in Playwright\nDESCRIPTION: Example of using the eachElement function to perform actions on multiple matching elements. This allows performing the same action on each checkbox found by the selector.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nawait eachElement(\n  'tick all checkboxes', \n  'input.custom-checkbox', \n  async (el, index) => {\n    await el.check();\n  });\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring Gherkin Features in CodeceptJS\nDESCRIPTION: Configuration example for specifying multiple Gherkin feature file locations in CodeceptJS config. This allows including feature files from different directories.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\n\"features\": [\n  \"./features/*.feature\",\n  \"./features/api_features/*.feature\"\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper for iPhone 6 Emulation\nDESCRIPTION: Example configuration for launching tests emulating iPhone 6 using Playwright's device emulation feature.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { devices } = require('playwright');\n\n{\n helpers: {\n   Playwright: {\n     url: \"http://localhost\",\n     emulate: devices['iPhone 6'],\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Form Structure Example\nDESCRIPTION: Shows the HTML structure of a sample form used to demonstrate form interaction testing with CodeceptJS. Includes various input types and form elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<form method=\"post\" action=\"/update\" id=\"update_form\">\n  <label for=\"user_name\">Name</label>\n  <input type=\"text\" name=\"user[name]\" id=\"user_name\" /><br />\n  <label for=\"user_email\">Email</label>\n  <input type=\"text\" name=\"user[email]\" id=\"user_email\" /><br />\n  <label for=\"user_role\">Role</label>\n  <select id=\"user_role\" name=\"user[role]\">\n    <option value=\"0\">Admin</option>\n    <option value=\"1\">User</option></select\n  ><br />\n  <input type=\"checkbox\" id=\"accept\" /> <label for=\"accept\">Accept changes</label>\n  <div>\n    <input type=\"submit\" name=\"submitButton\" class=\"btn btn-primary\" value=\"Save\" />\n  </div>\n</form>\n```\n\n----------------------------------------\n\nTITLE: Verifying Exact Page Title with CodeceptJS\nDESCRIPTION: Uses the seeTitleEquals method to check that the page title is exactly equal to the provided value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeTitleEquals('Test title.');\n```\n\n----------------------------------------\n\nTITLE: Setting Network Connection in Appium\nDESCRIPTION: Controls device network connection settings including airplane mode, wifi, and data. Android-only support.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nI.setNetworkConnection(0) // airplane mode off, wifi off, data off\nI.setNetworkConnection(1) // airplane mode on, wifi off, data off\nI.setNetworkConnection(2) // airplane mode off, wifi on, data off\nI.setNetworkConnection(4) // airplane mode off, wifi off, data on\nI.setNetworkConnection(6) // airplane mode off, wifi on, data on\n```\n\n----------------------------------------\n\nTITLE: Using waitInUrl in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for part of the URL to match the expected string. Useful for Single Page Applications to detect page changes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_81\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitInUrl('/info', 2);\n```\n\n----------------------------------------\n\nTITLE: Opening New Browser Tab in CodeceptJS\nDESCRIPTION: Method to open a new browser tab and automatically switch to it.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nI.openNewTab();\n```\n\n----------------------------------------\n\nTITLE: Configuring Applitools Helper\nDESCRIPTION: JavaScript configuration for setting up ApplitoolsHelper with WebDriver in codecept.conf.js\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/visual.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    WebDriver: {\n      url: 'https://applitools.com/helloworld',\n      browser: 'chrome',\n      desiredCapabilities: {\n        chromeOptions: {\n          args: [ '--headless', '--disable-extensions', '--disable-gpu', '--no-sandbox', '--disable-dev-shm-usage']\n        }\n      },\n      windowSize: '1920x600',\n      smartWait: 5000,\n      timeouts: {\n        'script': 60000,\n        'page load': 10000\n      },\n    },\n    ApplitoolsHelper: {\n      require: 'codeceptjs-applitoolshelper',\n      applitoolsKey: 'YOUR_API_KEY'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Text Appearance with CodeceptJS\nDESCRIPTION: Waits for a specific text to appear on the page. The search can be narrowed down by providing a context element. By default, it waits for 1 second.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForText('Thank you, form has been submitted');\nI.waitForText('Thank you, form has been submitted', 5, '#modal');\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper with Color Scheme Option\nDESCRIPTION: Configure the Playwright helper with a color scheme option. This example shows how to set the color scheme to 'dark' mode for all Playwright tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_71\n\nLANGUAGE: javascript\nCODE:\n```\n helpers: {\n  Playwright : {\n    url: \"http://localhost\",\n    colorScheme: \"dark\",\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Native Detox Test Example\nDESCRIPTION: Example showing how to write a test using native Detox syntax for checking element visibility and interactions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/detox.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nawait expect(element(by.text('Welcome'))).toBeVisible();\nawait expect(element(by.id('createdAndVisibleText'))).toNotExist();\nawait element(by.id('GoButton')).tap();\nawait waitFor(element(by.id('createdAndVisibleText'))).toExist().withTimeout(20000);\nawait expect(element(by.id('createdAndVisibleText'))).toExist();\n```\n\n----------------------------------------\n\nTITLE: Using Strict Locators in CodeceptJS\nDESCRIPTION: Demonstrates how to use strict locators in CodeceptJS. Strict locators are objects with a single key-value pair, where the key specifies the locator type and the value is the locator itself.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/locators.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{ id: 'foo' }\n{ name: 'foo' }\n{ css: 'input[type=input][value=foo]' }\n{ xpath: \"//input[@type='submit'][contains(@value, 'foo')]\" }\n{ class: 'foo' }\n{ pw: '_react=t[name = \"=\"]' }\n```\n\n----------------------------------------\n\nTITLE: Using waitForNumberOfTabs Method\nDESCRIPTION: Example of using the waitForNumberOfTabs method that pauses test execution until the browser has the specified number of tabs open. This is useful for scenarios involving multiple browser tabs or windows.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForNumberOfTabs(2)\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Helper with Specific Browser Version in CodeceptJS\nDESCRIPTION: Example of configuring WebDriver Helper in CodeceptJS to use a specific Chrome version or channel (stable, beta, dev, canary).\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       browserVersion: '116.0.5793.0', // or 'stable', 'beta', 'dev' or 'canary'\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Grabbing HTML Content in JavaScript with Playwright\nDESCRIPTION: This function retrieves the innerHTML from an element located by CSS or XPath. It returns a Promise resolving to the HTML code as a string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nlet postHTML = await I.grabHTMLFrom('#post');\n```\n\n----------------------------------------\n\nTITLE: Importing CodeceptJS Internal API in JavaScript\nDESCRIPTION: Demonstrates how to import internal CodeceptJS objects using both local module and global object approaches.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/internal-api.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// via module\nconst { recorder, event, output } = require('codeceptjs');\n// or using global object\nconst { recorder, event, output } = codeceptjs;\n```\n\n----------------------------------------\n\nTITLE: Waiting for Exact URL Match in CodeceptJS\nDESCRIPTION: Demonstrates waiting for the entire URL to match an expected value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_86\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitUrlEquals('/info', 2);\nI.waitUrlEquals('http://127.0.0.1:8000/info');\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with Profile Parameter\nDESCRIPTION: Example of running parallel tests with the --profile option to specify a browser profile (e.g., Firefox).\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_91\n\nLANGUAGE: bash\nCODE:\n```\nnpx codecept run-workers 2 --profile firefox\n```\n\n----------------------------------------\n\nTITLE: Source Code Validation in CodeceptJS\nDESCRIPTION: Checks that page source code does not contain specified string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInSource('<!--'); // no comments in source\n```\n\n----------------------------------------\n\nTITLE: Creating Data with GraphQL Mutations\nDESCRIPTION: Example showing how to create test data using GraphQL mutations within an async function. Demonstrates creating a post and multiple associated comments.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/data.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n// inside async function\nlet post = await I.mutateData('createPost')\nI.mutateMultiple('createComment', 5, { postId: post.id })\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Existence with CodeceptJS\nDESCRIPTION: Shows how to verify that a cookie with a specific name exists in the browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCookie('Auth');\n```\n\n----------------------------------------\n\nTITLE: Verifying Current URL in CodeceptJS\nDESCRIPTION: Checks that the current URL exactly matches the provided URL. Supports both absolute and relative URLs, automatically prepending the configured base URL to relative paths.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_75\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n```\n\n----------------------------------------\n\nTITLE: Using Interactive Pause in CodeceptJS\nDESCRIPTION: Example of using interactive pause in a CodeceptJS test for debugging and test writing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Sample Test');\n\nScenario('open my website', ({ I }) => {\n  I.amOnPage('http://todomvc.com/examples/react/');\n  pause();\n});\n```\n\n----------------------------------------\n\nTITLE: Using waitForElement() method in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to wait for an element to be present on a page using the waitForElement() method. The method accepts a locator (CSS or XPath) and an optional time in seconds to wait (defaults to 1 second).\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n```\n\n----------------------------------------\n\nTITLE: Configuring Tests with Glob Pattern for run-workers in CodeceptJS\nDESCRIPTION: Example configuration showing how to use glob patterns with the run-workers command to specify multiple test files. This allows running distributed tests across worker processes using a pattern matching approach.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_93\n\nLANGUAGE: javascript\nCODE:\n```\n// Example:\nexports.config = {\n  tests: '{./workers/base_test.workers.js,./workers/test_grep.workers.js}',\n}\n```\n\n----------------------------------------\n\nTITLE: Exposing WebElements in CodeceptJS\nDESCRIPTION: Demonstrates how to grab and interact with WebElements returned by the WebHelper in CodeceptJS. This allows making subsequent actions on the returned elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('/form/focus_blur_elements');\nconst webElements = await I.grabWebElements('#button');\nwebElements[0].click();\n```\n\n----------------------------------------\n\nTITLE: Grabbing Metrics in Playwright\nDESCRIPTION: This snippet shows how to grab performance metrics using the new Playwright helper method and the structure of the returned metrics object.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nconst metrics = await I.grabMetrics()\n\n// returned metrics\n\n;[\n  { name: 'Timestamp', value: 1584904.203473 },\n  { name: 'AudioHandlers', value: 0 },\n  { name: 'AudioWorkletProcessors', value: 0 },\n  { name: 'Documents', value: 22 },\n  { name: 'Frames', value: 10 },\n  { name: 'JSEventListeners', value: 366 },\n  { name: 'LayoutObjects', value: 1240 },\n  { name: 'MediaKeySessions', value: 0 },\n  { name: 'MediaKeys', value: 0 },\n  { name: 'Nodes', value: 4505 },\n  { name: 'Resources', value: 141 },\n  { name: 'ContextLifecycleStateObservers', value: 34 },\n  { name: 'V8PerContextDatas', value: 4 },\n  { name: 'WorkerGlobalScopes', value: 0 },\n  { name: 'UACSSResources', value: 0 },\n  { name: 'RTCPeerConnections', value: 0 },\n  { name: 'ResourceFetchers', value: 22 },\n  { name: 'AdSubframes', value: 0 },\n  { name: 'DetachedScriptStates', value: 2 },\n  { name: 'ArrayBufferContents', value: 1 },\n  { name: 'LayoutCount', value: 0 },\n  { name: 'RecalcStyleCount', value: 0 },\n  { name: 'LayoutDuration', value: 0 },\n  { name: 'RecalcStyleDuration', value: 0 },\n  { name: 'DevToolsCommandDuration', value: 0.000013 },\n  { name: 'ScriptDuration', value: 0 },\n  { name: 'V8CompileDuration', value: 0 },\n  { name: 'TaskDuration', value: 0.000014 },\n  { name: 'TaskOtherDuration', value: 0.000001 },\n  { name: 'ThreadTime', value: 0.000046 },\n  { name: 'ProcessTime', value: 0.616852 },\n  { name: 'JSHeapUsedSize', value: 19004908 },\n  { name: 'JSHeapTotalSize', value: 26820608 },\n  { name: 'FirstMeaningfulPaint', value: 0 },\n  { name: 'DomContentLoaded', value: 1584903.690491 },\n  { name: 'NavigationStart', value: 1584902.841845 },\n]\n```\n\n----------------------------------------\n\nTITLE: Using eachElement in CodeceptJS\nDESCRIPTION: Example of using the eachElement function to perform actions on multiple elements in a CodeceptJS test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nawait eachElement(\n  'click all checkboxes', \n  'input.custom-checkbox', \n  async (el, index) => {\n    await el.click();\n  });\n);\n```\n\n----------------------------------------\n\nTITLE: Setting Video Recording Resolution in Playwright\nDESCRIPTION: Demonstrates how to configure the video recording resolution for Playwright tests in the configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\n  url: siteUrl,\n  windowSize: '300x500',\n  show: false,\n  restart: true,\n  browser: 'chromium',\n  trace: true,\n  video: true,\n  recordVideo: {\n    size: {\n      width: 400,\n      height: 600,\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Title in CodeceptJS\nDESCRIPTION: Gets the title of the current page. Returns a promise resolving to a string containing the page title. Should be used with await operator in async functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nlet title = await I.grabTitle();\n```\n\n----------------------------------------\n\nTITLE: Executing Async Scripts in Browser with CodeceptJS\nDESCRIPTION: Executes asynchronous JavaScript in the browser context, with support for Vue.js nextTick and AJAX calls. Function takes a callback parameter to signal completion and can return values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nI.executeAsyncScript(function(done) {\n  Vue.nextTick(done); // waiting for next tick\n});\n\nlet val = await I.executeAsyncScript(function(url, done) {\n  // in browser context\n  $.ajax(url, { success: (data) => done(data); }\n}, 'http://ajax.callback.url/');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element to Hide with CodeceptJS\nDESCRIPTION: Waits for an element to hide on the page. The element can be located by CSS or XPath. By default, it waits for 1 second.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitToHide('#popup');\n```\n\n----------------------------------------\n\nTITLE: Configuring Loose Body Matching in MockServer\nDESCRIPTION: Demonstrates how to set up a loose match on the request body in the mock server. This example shows a POST request where the body is partially matched when 'strict' is set to false.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockServer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.addInteractionToMockServer({\n  strict: false,\n  request: {\n    method: 'POST',\n    path: '/api/users',\n    body: {\n      name: 'john'\n    }\n  },\n  response: {\n    status: 200\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring a Custom Helper in CodeceptJS\nDESCRIPTION: Configuration example for adding a custom helper to extend WebDriver functionality in CodeceptJS. The helper is loaded from a local file and enabled in the config.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  helpers: {\n    WebDriver: { /* WebDriver config goes here */ },\n    WebHelper: {\n      // load custom helper\n      require: './web_helper.js'\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring stepTimeout Plugin in JavaScript\nDESCRIPTION: Example configuration for the stepTimeout plugin in CodeceptJS. It demonstrates how to set global step timeouts and customize timeout behavior for specific steps.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n    stepTimeout: {\n        enabled: true,\n        overrideStepLimits: true,\n        noTimeoutSteps: [\n          'scroll*', // ignore all scroll steps\n          /Cookie/, // ignore all steps with a Cookie in it (by regexp)\n        ],\n        customTimeoutSteps: [\n          ['myFlakyStep*', 1],\n          ['scrollWhichRequiresTimeout', 5],\n        ]\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Advanced retryTo Usage with Retry Count in JavaScript\nDESCRIPTION: Demonstrates advanced usage of retryTo effect, where the callback function receives the current retry count as an argument. This allows for custom logic or logging based on the number of attempts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/effects.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { retryTo } = require('codeceptjs/effects')\n\n// inside a test...\nawait retryTo(tries => {\n  I.say(`Attempt ${tries}`)\n  I.click('Submit')\n  I.see('Success')\n}, 3)\n```\n\n----------------------------------------\n\nTITLE: Puppeteer Trace Recording Configuration Options\nDESCRIPTION: Configuration options for enabling trace recording in Puppeteer helper. The trace recording captures complete test execution information including screenshots and network requests, with options to save traces for failed tests and keep traces for passed tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\n[Trace Recording Customization]\nTrace recording provides complete information on test execution and includes screenshots, and network requests logged during run. Traces will be saved to output/trace\n\ntrace: enables trace recording for failed tests; trace are saved into output/trace folder\nkeepTraceForPassedTests: - save trace for passed tests\n```\n\n----------------------------------------\n\nTITLE: Using the autoLogin plugin in CodeceptJS tests\nDESCRIPTION: Example of using the autoLogin plugin inside a test file. This plugin allows injecting login functions to authenticate users at the beginning of tests or scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// inside a test file\n// use login to inject auto-login function\nFeature('Login')\n\nBefore(({ login }) => {\n  login('user') // login using user session\n})\n\n// Alternatively log in for one scenario.\nScenario('log me in', ({ I, login }) => {\n  login('admin')\n  I.see('I am logged in')\n})\n```\n\n----------------------------------------\n\nTITLE: Grabbing Element Attribute in CodeceptJS\nDESCRIPTION: Retrieves an attribute from an element and returns it to the test. If multiple elements match the locator, returns the attribute from the first element.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nlet hint = await I.grabAttributeFrom('#tooltip', 'title');\n```\n\n----------------------------------------\n\nTITLE: Configuring Rerun Feature in CodeceptJS\nDESCRIPTION: Configuration options for the rerun feature in the codecept.conf.js file. It allows setting the minimum number of successful runs and maximum number of reruns.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_4\n\nLANGUAGE: js\nCODE:\n```\n{\n  // inside codecept.conf.js\n  rerun: {\n    // how many times all tests should pass\n    minSuccess: 2,\n\n    // how many times to try to rerun all tests\n    maxReruns: 4,\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Plugin in CodeceptJS\nDESCRIPTION: This snippet shows how to enable the WebDriver plugin in the CodeceptJS configuration file. It uses the @wdio/selenium-standalone-service to automatically install and start Selenium Server.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  // ...\n  // inside condecept.conf.js\n  plugins: {\n    wdio: {\n      enabled: true,\n      services: ['selenium-standalone']\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Secret Values with Form Field Validation in CodeceptJS\nDESCRIPTION: This code demonstrates how to use the secret() function in CodeceptJS to mask sensitive data when checking form field values. It shows both seeInField and dontSeeInField methods with secret values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.amOnPage('/form/field_values');\nawait I.dontSeeInField('checkbox[]', secret('not seen one'));\nawait I.seeInField('checkbox[]', secret('see test one'));\nawait I.dontSeeInField('checkbox[]', secret('not seen two'));\nawait I.seeInField('checkbox[]', secret('see test two'));\nawait I.dontSeeInField('checkbox[]', secret('not seen three'));\nawait I.seeInField('checkbox[]', secret('see test three'));\n```\n\n----------------------------------------\n\nTITLE: Using Async/Await Pattern in CodeceptJS Tests\nDESCRIPTION: Example of using the native async-await pattern in CodeceptJS tests introduced in version 1.1.0, which requires NodeJS v8.9.1 or higher. This pattern replaces the previous generator-based approach.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_112\n\nLANGUAGE: javascript\nCODE:\n```\n;async () => {\n  I.amOnPage('/page')\n  const url = await I.grabTextFrom('.nextPage')\n  I.amOnPage(url)\n}\n```\n\n----------------------------------------\n\nTITLE: Counting Visible Elements in CodeceptJS\nDESCRIPTION: Counts the number of visible elements matching a CSS or XPath selector. Returns a promise resolving to a number. Should be used with await operator in async functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nlet numOfElements = await I.grabNumberOfVisibleElements('p');\n```\n\n----------------------------------------\n\nTITLE: Double Click Implementation in CodeceptJS\nDESCRIPTION: Demonstrates how to perform double-click actions on elements using various locator strategies including text, CSS selectors, and custom objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer with Basic Authentication\nDESCRIPTION: Example of setting up Puppeteer with basic authentication for the target URL.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Puppeteer : {\n       url: 'http://localhost',\n       basicAuth: {username: 'username', password: 'password'},\n       show: true\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Grab Attribute from Element\nDESCRIPTION: Shows how to retrieve attribute values from elements using CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nlet hint = await I.grabAttributeFrom('#tooltip', 'title');\n```\n\n----------------------------------------\n\nTITLE: Configuring Tests to Use Glob Pattern with run-workers in CodeceptJS\nDESCRIPTION: Example configuration for using glob pattern with run-workers command in CodeceptJS. This allows specifying multiple worker files using pattern matching.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\n// Example:\nexports.config = {\n  tests: '{./workers/base_test.workers.js,./workers/test_grep.workers.js}',\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Input Field Value is Not Equal in CodeceptJS\nDESCRIPTION: Verifies that the value of an input field or textarea does not equal the given value. Field can be located by name, CSS, or other locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInField('email', 'user@user.com'); // field by name\nI.dontSeeInField({ css: 'form input.email' }, 'user@user.com'); // field by CSS\n```\n\n----------------------------------------\n\nTITLE: Using Playwright Locators in CodeceptJS\nDESCRIPTION: Example of using Playwright-specific locators including React components and data-testid attributes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('using playwright locator @Playwright', () => {\n  I.amOnPage('https://codecept.io/test-react-calculator/');\n  I.click('7');\n  I.click({ pw: '_react=t[name = \"=\"]' });\n  I.seeElement({ pw: '_react=t[value = \"7\"]' });\n  I.click({ pw: '_react=t[name = \"+\"]' });\n  I.click({ pw: '_react=t[name = \"3\"]' });\n  I.click({ pw: '_react=t[name = \"=\"]' });\n  I.seeElement({ pw: '_react=t[value = \"10\"]' });\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper with Specific User Locale\nDESCRIPTION: Example configuration for launching tests with a specific user locale in Playwright helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n helpers: {\n  Playwright : {\n    url: \"http://localhost\",\n    locale: \"fr-FR\",\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in CodeceptJS\nDESCRIPTION: Sets single or multiple cookies using the setCookie method. Accepts a single cookie object or an array of cookie objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nI.setCookie({name: 'auth', value: true});\n\n// as array\nI.setCookie([\n  {name: 'auth', value: true},\n  {name: 'agree', value: true}\n]);\n```\n\n----------------------------------------\n\nTITLE: Using waitForValue in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for the specified value to be present in the value attribute of an input field.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForValue('//input', \"GoodValue\");\n```\n\n----------------------------------------\n\nTITLE: Select Option Handling in CodeceptJS\nDESCRIPTION: Selects dropdown options by text or value, supporting single and multiple selections.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n```\n\n----------------------------------------\n\nTITLE: Grabbing Window Handles in CodeceptJS\nDESCRIPTION: Method to retrieve all window handles in the browser. Used for switching between windows in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst windows = await I.grabAllWindowHandles();\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Invisibility in CodeceptJS\nDESCRIPTION: Waits for an element to be removed or become invisible on the page using the waitForInvisible method. The element can be located by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForInvisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiremote Capabilities in CodeceptJS WebDriver Helper\nDESCRIPTION: Sets up multiremote capabilities to control two browsers simultaneously using the WebDriver helper in CodeceptJS. This example configures Chrome and Firefox browsers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    helpers: {\n        WebDriver: {\n            \"multiremote\": {\n                \"MyChrome\": {\n                    \"desiredCapabilities\": {\n                        \"browserName\": \"chrome\"\n                     }\n                },\n                \"MyFirefox\": {\n                   \"desiredCapabilities\": {\n                       \"browserName\": \"firefox\"\n                   }\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Puppeteer API Directly in CodeceptJS Tests\nDESCRIPTION: Shows how to access the Puppeteer API directly within CodeceptJS tests using the usePuppeteerTo method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_85\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePuppeteerTo('do something special', async ({ page, browser }) => {\n  // use page or browser objects here\n})\n```\n\n----------------------------------------\n\nTITLE: Updating ExecuteScript Method in Playwright v0.12\nDESCRIPTION: Example showing how to update the executeScript method implementation to work with Playwright 0.12, which only accepts a single argument instead of multiple arguments.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_88\n\nLANGUAGE: javascript\nCODE:\n```\n// Old style, does not work anymore:\nI.executeScript((x, y) => x + y, x, y)\n// New style, passing an object:\nI.executeScript(({ x, y }) => x + y, { x, y })\n```\n\n----------------------------------------\n\nTITLE: Importing Element Access Functions in CodeceptJS\nDESCRIPTION: This snippet shows how to import the element access functions from the 'els' module in CodeceptJS. These functions provide low-level element manipulation capabilities for more granular control in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/els.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst { element, eachElement, expectElement, expectAnyElement, expectAllElements } = require('codeceptjs/els');\n```\n\n----------------------------------------\n\nTITLE: Adding Custom Context to Mochawesome Reports in CodeceptJS\nDESCRIPTION: Example of using the addMochawesomeContext method to add different types of context (string, URL, image, object) to the Mochawesome HTML report for better test documentation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.addMochawesomeContext('simple string');\nI.addMochawesomeContext('http://www.url.com/pathname');\nI.addMochawesomeContext('http://www.url.com/screenshot-maybe.jpg');\nI.addMochawesomeContext({title: 'expected output',\n                         value: {\n                           a: 1,\n                           b: '2',\n                           c: 'd'\n                         }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper with Specific Color Scheme\nDESCRIPTION: Example configuration for launching tests with a specific color scheme (dark mode) in Playwright helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n helpers: {\n  Playwright : {\n    url: \"http://localhost\",\n    colorScheme: \"dark\",\n  }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Faker Data in Gherkin Scenarios with CodeceptJS\nDESCRIPTION: Example of using the fakerTransform plugin to generate dynamic test data in Gherkin scenarios. This allows using Faker.js placeholders in Example tables.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_79\n\nLANGUAGE: gherkin\nCODE:\n```\nScenario Outline: ...\n  Given ...\n  When ...\n  Then ...\n\n  Examples:\n  | productName          | customer              | email              | anythingMore |\n  | {{commerce.product}} | Dr. {{name.findName}} | {{internet.email}} | staticData   |\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Elements with Puppeteer\nDESCRIPTION: Examples of using blur to remove focus from elements in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nI.blur('.text-area')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n//element `#product-tile` is focused\nI.see('#add-to-cart-btn');\nI.blur('#product-tile')\nI.dontSee('#add-to-cart-btn');\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop Operation in CodeceptJS\nDESCRIPTION: Drags an element to a destination element. Both elements need to be located using CSS, XPath, or other locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.dragAndDrop('#dragHandle', '#container');\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with Puppeteer\nDESCRIPTION: Command to install CodeceptJS and Puppeteer packages using npm.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install codeceptjs puppeteer --save\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with Multiple Reporters\nDESCRIPTION: Command to execute CodeceptJS tests with the mocha-multi reporter configuration, enabling output in multiple formats simultaneously.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --reporter mocha-multi\n```\n\n----------------------------------------\n\nTITLE: Using I.say for test comments\nDESCRIPTION: Shows how to use the I.say method to add arbitrary comments within tests for improved readability and documentation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_120\n\nLANGUAGE: javascript\nCODE:\n```\nI.say('I am going to publish post')\nI.say('I enter title and body')\nI.say('I expect post is visible on site')\n```\n\n----------------------------------------\n\nTITLE: Configuring Polly Helper in CodeceptJS\nDESCRIPTION: This snippet shows how to enable the Polly helper in the CodeceptJS configuration file. It demonstrates the configuration alongside the Puppeteer helper, but notes that it can also be used with the WebDriver helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Polly.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n   Puppeteer: {\n     // regular Puppeteer config here\n   },\n   Polly: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Network Traffic in CodeceptJS\nDESCRIPTION: Demonstrates how to check that certain network requests are not part of the traffic, using URL matching.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeTraffic({ name: 'Unexpected API Call', url: 'https://api.example.com' });\nI.dontSeeTraffic({ name: 'Unexpected API Call of \"user\" endpoint', url: /api.example.com.*user/ });\n```\n\n----------------------------------------\n\nTITLE: Aria-Label Selection with Tilde Locator in WebDriverIO\nDESCRIPTION: Example of using the tilde (~) locator to find elements by aria-label in WebDriverIO and Appium helpers, introduced in version 1.1.0. This is useful for testing cross-platform React apps.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_114\n\nLANGUAGE: html\nCODE:\n```\n<Text accessibilityLabel=\"foobar\"> CodeceptJS is awesome </Text>\n```\n\n----------------------------------------\n\nTITLE: Headless Chrome Configuration\nDESCRIPTION: Configuration for running Chrome in headless mode with additional Chrome options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       url: \"http://localhost\",\n       browser: \"chrome\",\n       desiredCapabilities: {\n         chromeOptions: {\n           args: [ \"--headless\", \"--disable-gpu\", \"--no-sandbox\" ]\n         }\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with Playwright\nDESCRIPTION: Install CodeceptJS and Playwright testing framework into the current directory using create-codeceptjs installer.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/installation.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-codeceptjs .\n```\n\n----------------------------------------\n\nTITLE: Saving Element Screenshot in JavaScript with CodeceptJS\nDESCRIPTION: Saves a screenshot of the specified element to the output folder. The filename is relative to the output folder.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveElementScreenshot(`#submit`,'debug.png');\n```\n\n----------------------------------------\n\nTITLE: Writing CodeceptJS Test in Portuguese\nDESCRIPTION: Example of a CodeceptJS test scenario written in Portuguese using translated keywords and methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nCenário('Efetuar login', ({ Eu }) => {\n    Eu.estouNaPagina('http://minhaAplicacao.com.br');\n    Eu.preenchoOCampo(\"login\", \"usuario@minhaAplicacao.com.br\");\n    Eu.preenchoOCampo(\"senha\", \"123456\");\n    Eu.clico(\"Entrar\");\n    Eu.vejo(\"Seja bem vindo usuário!\");\n});\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Plugin for Async Bootstrap\nDESCRIPTION: Plugin example showing how to execute asynchronous bootstrap code before all tests using the recorder API to manage promises.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/hooks.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { recorder } = require('codeceptjs');\n\nmodule.exports = function(options) {\n\n  event.dispatcher.on(event.all.before, function () {\n    recorder.startUnlessRunning(); // start recording promises\n    recorder.add('do some async stuff', async () => {\n      // your code\n    });\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution in CodeceptJS Tests\nDESCRIPTION: Uses the wait method to pause test execution for a specified number of seconds.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nI.wait(2); // wait 2 secs\n```\n\n----------------------------------------\n\nTITLE: Using CodeceptJS Recorder for Asynchronous Operations in JavaScript\nDESCRIPTION: Shows how to use the recorder object to add asynchronous functions to the global promises chain, particularly useful for setup operations before tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/internal-api.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst { event, recorder } = require('codeceptjs');\n\nmodule.exports = function() {\n\n  event.dispatcher.on(event.test.before, function (test) {\n\n    const request = require('request');\n\n    recorder.add('create fixture data via API', function() {\n      return new Promise((doneFn, errFn) => {\n        request({\n          baseUrl: 'http://api.site.com/',\n          method: 'POST',\n          url: '/users',\n          json: { name: 'john', email: 'john@john.com' }\n        }), (err, httpResponse, body) => {\n          if (err) return errFn(err);\n          doneFn();\n        }\n      });\n    }\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Configuration for CodeceptJS\nDESCRIPTION: Docker Compose YAML configuration for setting up CodeceptJS with dependencies like Firefox and a web server.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  codeceptjs:\n    image: codeception/codeceptjs\n    depends_on:\n      - firefox\n      - web\n    volumes:\n      - .:/tests\n  web:\n    image: node\n    command: node app/server.js\n    volumes:\n      - .:/app\n  firefox:\n    image: selenium/standalone-firefox-debug:2.53.0\n    ports:\n      - '4444'\n      - '5900'\n```\n\n----------------------------------------\n\nTITLE: Pressing and Holding Keys in CodeceptJS\nDESCRIPTION: Demonstrates pressing and holding a key for use with other interactions. Often used with modifier keys to perform composite actions like Ctrl+Click.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKeyDown('Control');\nI.click('#element');\nI.pressKeyUp('Control');\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer Wait Strategy\nDESCRIPTION: Configuration snippet for setting the wait strategy for page navigation in Puppeteer helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n  helpers: {\n    Puppeteer: {\n      url: \"http://localhost\",\n      show: true,\n      waitForNavigation: \"networkidle0\"\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Dynamic Dependency Injection in Tests\nDESCRIPTION: Shows how to inject dependencies dynamically for specific test scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/pageobjects.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('search @grop', ({ I, Data }) => {\n  I.fillField('Username', Data.username);\n  I.pressKey('Enter');\n}).injectDependencies({ Data: require('./data.js') });\n```\n\n----------------------------------------\n\nTITLE: HTML Structure Example with Shadow DOM Elements\nDESCRIPTION: Example HTML structure showing nested web components with shadow DOM, including custom elements from Salesforce's Lightning Web Components.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/shadow.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<body>\n  <my-app>\n    <recipe-hello>\n      <button>Click Me!</button>\n    </recipe-hello>\n    <recipe-hello-binding>\n      <ui-input>\n        <input type=\"text\" class=\"input\">\n      </ui-input>\n    </recipe-hello-binding>\n  </my-app>\n</body>\n```\n\n----------------------------------------\n\nTITLE: Using askGptOnPageFragment Method in CodeceptJS\nDESCRIPTION: Example of using askGptOnPageFragment method to query the AI about a specific element on the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/AI.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.askGptOnPageFragment('describe features of this screen', '.screen');\n```\n\n----------------------------------------\n\nTITLE: Verifying Unchecked Checkboxes in CodeceptJS (JavaScript)\nDESCRIPTION: Demonstrates how to verify that specific checkboxes are not checked in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCheckboxIsChecked('#agree'); // located by ID\nI.dontSeeCheckboxIsChecked('I agree to terms'); // located by label\nI.dontSeeCheckboxIsChecked('agree'); // located by name\n```\n\n----------------------------------------\n\nTITLE: Scrolling Page to Top in CodeceptJS\nDESCRIPTION: Demonstrates how to scroll the current page to the top using the scrollPageToTop method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToTop();\n```\n\n----------------------------------------\n\nTITLE: Configuring Query Parameter Matching in MockServer\nDESCRIPTION: Shows how to set up different responses based on query parameters in the mock server. This example demonstrates handling two different GET requests with different 'id' query parameters.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockServer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.addInteractionToMockServer({\n  request: {\n    method: 'GET',\n    path: '/api/users',\n    queryParams: {\n      id: 1\n    }\n  },\n  response: {\n    status: 200,\n    body: 'user 1'\n  }\n});\n\nI.addInteractionToMockServer({\n  request: {\n    method: 'GET',\n    path: '/api/users',\n    queryParams: {\n      id: 2\n    }\n  },\n  response: {\n    status: 200,\n    body: 'user 2'\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver for Headless Chrome\nDESCRIPTION: This snippet shows how to configure WebDriver to run Chrome in headless mode using desired capabilities.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\ndesiredCapabilities: {\n  chromeOptions: {\n    args: [ \"--headless\", \"--disable-gpu\", \"--window-size=1200,1000\", \"--no-sandbox\" ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using async functions in autoLogin plugin with CodeceptJS\nDESCRIPTION: Configuration for the autoLogin plugin using async functions. When using async login functions, the login method must be called with await in test scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nauth: {\n  enabled: true,\n  saveToFile: true,\n  inject: 'login',\n  users: {\n    admin: {\n      login: async (I) => {  // If you use async function in the auth plugin\n         const phrase = await I.grabTextFrom('#phrase')\n         I.fillField('username', 'admin'),\n         I.fillField('password', 'password')\n         I.fillField('phrase', phrase)\n      },\n      check: (I) => {\n         I.amOnPage('/');\n         I.see('Admin');\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Form Filling Test Example - Using CSS Selectors\nDESCRIPTION: Alternative approach to form interaction using CSS selectors to locate elements, showing how to fill fields and submit forms using specific selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.fillField('#user_name', 'Miles')\nI.fillField('#user_email', 'miles@davis.com')\nI.selectOption('#user_role', '1')\nI.click('submitButton', '#update_form')\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Verbose Output Example\nDESCRIPTION: Example of verbose output when running CodeceptJS tests, showing detailed information about test execution including promises, hooks, and emitted events.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nGitHub --\n register\n   [1] Starting recording promises\n   Emitted | test.before\n > WebDriver._before\n   [1] Queued | hook WebDriver._before()\n   [1] Queued | amOnPage: https://github.com\n   Emitted | step.before (I am on page \"https://github.com\")\n • I am on page \"https://github.com\"\n   Emitted | step.after (I am on page \"https://github.com\")\n   Emitted | test.start ([object Object])\n...\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Dry Run with Debug Option\nDESCRIPTION: Command to run dry-run with debug option to see steps and substeps without performing real actions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nnpx codecepjs dry-run --debug\n```\n\n----------------------------------------\n\nTITLE: Running Tests Across All Browser Profiles in CodeceptJS\nDESCRIPTION: Command to run tests in parallel across all configured browser profiles, specifying the number of worker threads and using a specific configuration file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs run-workers 3 all -c codecept.conf.js\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Helper for Android App Testing with AppiumV2 on BrowserStack\nDESCRIPTION: Example configuration for testing an Android app using AppiumV2 on BrowserStack with the Appium helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\nhelpers: {\n  Appium: {\n        appiumV2: true, // By default is true, set to false if you want to run against Appium v1\n        host: \"hub-cloud.browserstack.com\",\n        port: 4444,\n        user: process.env.BROWSERSTACK_USER,\n        key: process.env.BROWSERSTACK_KEY,\n        app: `bs://c700ce60cf1gjhgjh3ae8ed9770ghjg5a55b8e022f13c5827cg`,\n        browser: '',\n        desiredCapabilities: {\n            'appPackage': data.packageName,\n            'deviceName': process.env.DEVICE || 'Google Pixel 3',\n            'platformName': process.env.PLATFORM || 'android',\n            'platformVersion': process.env.OS_VERSION || '10.0',\n            'automationName': process.env.ENGINE || 'UIAutomator2',\n            'newCommandTimeout': 300000,\n            'androidDeviceReadyTimeout': 300000,\n            'androidInstallTimeout': 90000,\n            'appWaitDuration': 300000,\n            'autoGrantPermissions': true,\n            'gpsEnabled': true,\n            'isHeadless': false,\n            'noReset': false,\n            'noSign': true,\n            'bstack:options' : {\n                \"appiumVersion\" : \"2.0.1\",\n            },\n        }\n  }\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Text in Page Source in CodeceptJS\nDESCRIPTION: Demonstrates how to check that the current page's raw source code does not contain a given string.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInSource('<!--'); // no comments in source\n```\n\n----------------------------------------\n\nTITLE: Checking Page Title with CodeceptJS\nDESCRIPTION: Uses the seeInTitle method to verify that the page title contains specific text.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInTitle('Home Page');\n```\n\n----------------------------------------\n\nTITLE: Using Step Options in CodeceptJS\nDESCRIPTION: Examples of using the new step options syntax to set timeout, retry, and other options for specific steps in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst step = require('codeceptjs/steps');\n\nScenario(..., ({ I }) =>  // ...\n  I.click('Create', step.timeout(10).retry(2));\n  //....\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { stepTimeout, stepRetry } = require('codeceptjs/steps');\n\nScenario(..., ({ I }) =>  // ...\n  I.click('Create', stepTimeout(10));\n  I.see('Created', stepRetry(2));\n  //....\n```\n\nLANGUAGE: javascript\nCODE:\n```\nconst { stepOpts } = require('codeceptjs/steps')\n\nI.see('SIGN IN', stepOpts({ ignoreCase: true }))\n```\n\n----------------------------------------\n\nTITLE: Extending Playwright Helper in CodeceptJS\nDESCRIPTION: This code demonstrates how to extend the Playwright helper in CodeceptJS to create custom actions, such as grabbing page dimensions and setting permissions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// inside a MyPlaywright helper\nasync grabDimensionsOfCurrentPage() {\n  const { page } = this.helpers.Playwright;\n  await page.goto('https://www.example.com/');\n  return page.evaluate(() => {\n    return {\n      width: document.documentElement.clientWidth,\n      height: document.documentElement.clientHeight,\n      deviceScaleFactor: window.devicePixelRatio\n    }\n  })\n}\n\n// inside a MyPlaywright helper\nasync setPermissions() {\n  const { browser } = this.helpers.Playwright;\n  const context = browser.defaultContext()\n  return context.setPermissions('https://html5demos.com', ['geolocation']);\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Reporter Configuration for Mochawesome\nDESCRIPTION: Configuration for the mochawesome reporter to generate HTML test reports. Specifies the output directory for the HTML report files.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n  \"mocha\": {\n    \"reporterOptions\": {\n        \"reportDir\": \"output\"\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Writing CodeceptJS Test in Japanese\nDESCRIPTION: Example of a CodeceptJS test scenario written in Japanese using translated keywords and methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('ログインできる', ({ 私は }) => {\n    私は.ページを移動する('/login');\n    私は.フィールドに入力する(\"Eメール\", \"foo@example.com\");\n    私は.フィールドに入力する(\"パスワード\", \"p@ssword\");\n    私は.クリックする('ログイン');\n    私は.待つ(1);\n    私は.URLに含まれるか確認する('/home');\n});\n```\n\n----------------------------------------\n\nTITLE: Using the 'element' Function in CodeceptJS\nDESCRIPTION: This example demonstrates how to use the 'element' function in a test scenario. It shows two ways of using the function: with an explicit purpose and without. The function allows for custom operations on the first matching element found by a locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/els.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('my test', async ({ I }) => {\n  // combine element function with standard steps:\n  I.amOnPage('/cart');\n\n  // but use await every time you use element function\n  await element(\n    // with explicit purpose\n    'check custom attribute',\n    '.button',\n    async el => await el.getAttribute('data-test'),\n  );\n\n  // or simply\n  await element('.button', async el => {\n    return await el.isEnabled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Sending Emails via MailSlurp\nDESCRIPTION: Example showing how to send emails using the MailSlurp helper\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/email.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendEmail({\n  to: ['user@site.com'],\n  subject: 'Hello',\n  body: 'World',\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver with DevTools Protocol\nDESCRIPTION: Configuration example for WebDriver Helper that enables Chrome DevTools Protocol integration. This allows for deeper browser automation capabilities and additional debugging options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       url: \"http://localhost\",\n       browser: \"chrome\",\n       devtoolsProtocol: true,\n       desiredCapabilities: {\n         chromeOptions: {\n           args: [ \"--headless\", \"--disable-gpu\", \"--no-sandbox\" ]\n         }\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: WebDriver Configuration with Basic Authentication\nDESCRIPTION: Configuration example showing how to include basic authentication credentials in WebDriver setup.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       basicAuth: {username: 'username', password: 'password'},\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Cookies in CodeceptJS\nDESCRIPTION: Sets one or multiple cookies in the browser. This method accepts either a single cookie object or an array of cookie objects, allowing for flexible cookie management.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nI.setCookie({name: 'auth', value: true});\n\n// as array\nI.setCookie([\n  {name: 'auth', value: true},\n  {name: 'agree', value: true}\n]);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Invisible Elements in CodeceptJS\nDESCRIPTION: Waits for an element to be removed or become invisible on a page with a default timeout of 1 second. Elements can be located using CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForInvisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Grabbing CSS Property from Element in CodeceptJS\nDESCRIPTION: Retrieves a CSS property value from an element. If multiple elements match the locator, returns the value from the first element.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nconst value = await I.grabCssPropertyFrom('h3', 'font-weight');\n```\n\n----------------------------------------\n\nTITLE: Adding TypeScript Types for CodeceptJS Config\nDESCRIPTION: Add TypeScript type annotation to CodeceptJS configuration file to enable intellisense when writing config files. This helps with autocompletion and type checking for configuration options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_67\n\nLANGUAGE: javascript\nCODE:\n```\n/**@type {CodeceptJS.MainConfig}**/\nexports.config = {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Using eachElement Function in CodeceptJS for Multiple Element Actions\nDESCRIPTION: Demonstrates how to use the eachElement function to perform actions on multiple elements matching a locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nawait eachElement(\n  'click all checkboxes', \n  'input.custom-checkbox', \n  async (el, index) => {\n    await el.click();\n  });\n);\n```\n\n----------------------------------------\n\nTITLE: Configuring ExpectHelper in CodeceptJS\nDESCRIPTION: Example configuration showing how to set up ExpectHelper alongside other helpers like Playwright in CodeceptJS configuration file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/ExpectHelper.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\n{\n  helpers: {\n    Playwright: {...},\n    ExpectHelper: {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element Visibility in CodeceptJS\nDESCRIPTION: Verifies that a specified element is visible on the page. The element can be located using CSS, XPath, or strict locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElement('#modal');\n```\n\n----------------------------------------\n\nTITLE: Flushing WebSocket Messages in CodeceptJS Puppeteer\nDESCRIPTION: Demonstrates how to flush recorded WebSocket messages and verify the messages were cleared.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n      I.startRecordingWebSocketMessages();\n      I.amOnPage('https://websocketstest.com/');\n      I.waitForText('Work for You!');\n      I.flushWebSocketMessages();\n      const wsMessages = I.grabWebSocketMessages();\n      expect(wsMessages.length).to.equal(0);\n```\n\n----------------------------------------\n\nTITLE: Keeping cookies between tests with autoLogin plugin in CodeceptJS\nDESCRIPTION: Configuration for maintaining persistent cookies between tests. This setup disables fetch and restore methods while enabling the keepCookies option in WebDriver helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n   WebDriver: {\n     // config goes here\n     keepCookies: true; // keep cookies for all tests\n   }\n},\nplugins: {\n   auth: {\n     users: {\n       admin: {\n         login: (I) => {\n           I.amOnPage('/login');\n           I.fillField('email', 'admin@site.com');\n           I.fillField('password', '123456');\n           I.click('Login');\n         },\n         check: (I) => {\n           I.amOnPage('/dashboard');\n           I.see('Admin', '.navbar');\n         },\n         fetch: () => {}, // empty function\n         restore: () => {}, // empty funciton\n       }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Page Refresh in CodeceptJS\nDESCRIPTION: Reloads the current page in the browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nI.refreshPage();\n```\n\n----------------------------------------\n\nTITLE: Saving Element Screenshot in CodeceptJS\nDESCRIPTION: Saves screenshot of a specified element to output folder. Takes locator and filename as parameters.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveElementScreenshot(`#submit`,'debug.png');\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Source in CodeceptJS\nDESCRIPTION: Gets the full HTML source of the current page. Returns a promise resolving to a string containing the page source. Should be used with await operator in async functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nlet pageSource = await I.grabSource();\n```\n\n----------------------------------------\n\nTITLE: Configuring Required Modules in CodeceptJS Configuration\nDESCRIPTION: Example of using the 'require' parameter in CodeceptJS configuration to load Node modules before executing tests. Shows how to register TypeScript parser and should-style assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_79\n\nLANGUAGE: javascript\nCODE:\n```\n\"require\": [\"ts-node/register\", \"should\"]\n```\n\n----------------------------------------\n\nTITLE: Customizing CodeceptJS Execution in Docker\nDESCRIPTION: Examples of running CodeceptJS with custom parameters in a Docker container, such as enabling steps output or filtering tests by name.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\n# run tests with steps\ndocker run --net=host -v $PWD:/tests codeception/codeceptjs codeceptjs run --steps\n\n# run tests with @user in a name\ndocker run --net=host -v $PWD:/tests codeception/codeceptjs codeceptjs run --grep \"@user\"\n```\n\n----------------------------------------\n\nTITLE: Creating PageObject Examples Using AI Helper in CodeceptJS\nDESCRIPTION: Examples of using askForPageObject method to generate page objects for entire pages or specific elements with optional custom prompts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/AI.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// create page object for whole page\nI.askForPageObject('home');\n\n// create page object with extra prompt\nI.askForPageObject('home', 'implement signIn(username, password) method');\n\n// create page object for a specific element\nI.askForPageObject('home', null, '.detail');\n```\n\n----------------------------------------\n\nTITLE: URL and Page Source Retrieval\nDESCRIPTION: Examples of getting current URL and page source code from the browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nlet url = await I.grabCurrentUrl();\nconsole.log(`Current URL is [${url}]`);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Visibility with CodeceptJS\nDESCRIPTION: Waits for an element to become visible on a page. The element can be located by CSS or XPath. By default, it waits for 1 second.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForVisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Refreshing Page in JavaScript with CodeceptJS\nDESCRIPTION: Reloads the current page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_41\n\nLANGUAGE: javascript\nCODE:\n```\nI.refreshPage();\n```\n\n----------------------------------------\n\nTITLE: Accessing GraphQL Helper Methods\nDESCRIPTION: Shows how to access the _executeQuery method from other helpers to send GraphQL requests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQL.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['GraphQL']._executeQuery({\n   url,\n   data,\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Browser Configuration for Selenoid in JSON\nDESCRIPTION: Example of a browsers.json file used to configure browser versions and Docker images for Selenoid.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\n{\n \"chrome\": {\n   \"default\": \"latest\",\n   \"versions\": {\n     \"latest\": {\n       \"image\": \"selenoid/chrome:latest\",\n       \"port\": \"4444\",\n       \"path\": \"/\"\n     }\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Dry Run Output Example\nDESCRIPTION: Example output of the dry-run command, showing all available test suites and tests without executing them.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nTests from /home/davert/projects/codeceptjs/examples:\n\nBusiness rules --\n  ☐ do something\nGoogle --\n  ☐ test @123\nGitHub -- /home/davert/projects/codeceptjs/examples/github_test.js\n  ☐ Visit Home Page @retry\n  ☐ search @grop\n  ☐ signin @normal @important @slow\n  ☐ signin2\n  ☐ register\n\n  Total: 3 suites | 7 tests\n\n--- DRY MODE: No tests were executed ---\n```\n\n----------------------------------------\n\nTITLE: Writing CodeceptJS Test in French\nDESCRIPTION: Example of a CodeceptJS test scenario written in French using translated keywords and methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('Se connecter sur GitHub', (Je) => {\n    Je.suisSurLaPage('https://github.com/login');\n    Je.remplisLeChamp(\"Username or email address\", \"jean-dupond\");\n    Je.remplisLeChamp(\"Password\", \"*********\");\n    Je.cliqueSur(\"Sign in\");\n    Je.vois(\"Learn Git and GitHub without any code!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Gherkin in CodeceptJS with Multiple Feature Paths\nDESCRIPTION: Example configuration for Gherkin in CodeceptJS showing how to specify multiple paths to feature files. This allows organizing features in different directories.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n...\n\"gherkin\": {\n  \"features\": [\n      \"./features/*.feature\",\n      \"./features/api_features/*.feature\"\n    ],\n  \"steps\": [\n    \"./step_definitions/steps.js\"\n  ]\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with Multiple Workers in Docker Compose\nDESCRIPTION: Demonstrates how to configure CodeceptJS to run with multiple workers and additional parameters using Docker Compose.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/docker.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  codeceptjs:\n    image: codeceptjs/codeceptjs\n    environment:\n      - NO_OF_WORKERS=3\n      - CODECEPT_ARGS=--debug\n    volumes:\n      - .:/tests\n```\n\n----------------------------------------\n\nTITLE: Handling Request Mocking Across Page Navigations\nDESCRIPTION: Example showing the limitation of request mocking in WebDriver when navigating between pages. Mocking must be re-established after each page load.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('/xyz');\nI.mockRequest({ ... })\nI.click('Go to Next Page');\n// new page is loaded, mocking is disabled now. We need to set it up again\n// in WebDriver as we can't detect that the page was reloaded, so no mocking :(\n```\n\n----------------------------------------\n\nTITLE: Configuring Sensitive Data Masking in CodeceptJS\nDESCRIPTION: Shows how to enable masking of sensitive data in logs by setting the maskSensitiveData config option to true.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexport const config: CodeceptJS.MainConfig = {\n  tests:  '**/*.e2e.test.ts',\n  retry: 4,\n  output: './output',\n  maskSensitiveData: true,\n  emptyOutputFolder: true,\n...\n```\n\n----------------------------------------\n\nTITLE: Using waitForInvisible in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for an element to be removed or become invisible on a page. Element can be located by CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_77\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForInvisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Custom Strict Locator Type Definition\nDESCRIPTION: Example of defining custom strict locator types in the steps.d.ts file for use in CodeceptJS methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/typescript.md#2025-04-21_snippet_6\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types='codeceptjs' />\n...\n\ndeclare namespace CodeceptJS {\n  ...\n\n  interface CustomLocators {\n    data: { data: string };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Parallel Execution in CodeceptJS\nDESCRIPTION: Configuration for parallel test execution in CodeceptJS. Specifies running tests in 2 parallel processes using Chrome browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_84\n\nLANGUAGE: javascript\nCODE:\n```\n\"multiple\": {\n  \"parallel\": {\n    // run in 2 processes\n    \"chunks\": 2,\n    // run all tests in chrome\n    \"browsers\": [\"chrome\"]\n  },\n}\n```\n\n----------------------------------------\n\nTITLE: Data Management with REST API in CodeceptJS\nDESCRIPTION: Example of using data management helpers in CodeceptJS 1.0. This code demonstrates how to create test data using factories and REST API, then use it in a login test flow.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n// create a user using data factories and REST API\nI.have('user', { name: 'davert', password: '123456' })\n// use it to login\nI.amOnPage('/login')\nI.fillField('login', 'davert')\nI.fillField('password', '123456')\nI.click('Login')\nI.see('Hello, davert')\n// user will be removed after the test\n```\n\n----------------------------------------\n\nTITLE: Setting Step Timeouts with limitTime\nDESCRIPTION: Demonstrates how to set timeouts for individual test steps using the limitTime method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\n// set step timeout to 5 secs\nI.limitTime(5).click('Link')\n```\n\n----------------------------------------\n\nTITLE: DOM Element Check in CodeceptJS\nDESCRIPTION: Verifies that an element does not exist in the page DOM.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeElementInDOM('.nav'); // checks that element is not on page visible or not\n```\n\n----------------------------------------\n\nTITLE: Configuring the autoDelay plugin in CodeceptJS\nDESCRIPTION: Configuration for the autoDelay plugin which improves test reliability by adding small delays before and after action commands like clicking or filling fields.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n  autoDelay: {\n    enabled: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: BrowserStack Configuration for Mobile Testing\nDESCRIPTION: Configuration example for using BrowserStack's Automated Mobile App Testing platform with CodeceptJS and Appium.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  Appium: {\n    app: \"bs://<hashed app-id>\",\n    host: \"hub-cloud.browserstack.com\",\n    port: 4444,\n    platform: \"ios\",\n    user: \"BROWSERSTACK_USER\",\n    key: \"BROWSERSTACK_KEY\",\n    device: \"iPhone 7\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper with Color Scheme Option\nDESCRIPTION: Shows how to configure the Playwright helper with a color scheme option to test websites in different display modes like dark mode.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_55\n\nLANGUAGE: javascript\nCODE:\n```\n helpers: {\n  Playwright : {\n    url: \"http://localhost\",\n    colorScheme: \"dark\",\n  }\n }\n```\n\n----------------------------------------\n\nTITLE: Configuring MockRequest Helper in CodeceptJS\nDESCRIPTION: Configuration example for setting up the MockRequest helper alongside WebDriver in CodeceptJS. This enables the ability to mock HTTP requests during testing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n   WebDriver: {\n     // regular WebDriver config here\n   },\n   MockRequest: {}\n}\n```\n\n----------------------------------------\n\nTITLE: ApiDataFactory Configuration Example\nDESCRIPTION: Configuration example showing how to set up ApiDataFactory with endpoints, headers, and factory definitions\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/ApiDataFactory.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nApiDataFactory: {\n   endpoint: \"http://user.com/api\",\n   cleanup: true,\n   headers: {\n     'Content-Type': 'application/json',\n     'Accept': 'application/json',\n   },\n   factories: {\n     post: {\n       uri: \"/posts\",\n       factory: \"./factories/post\",\n     },\n     comment: {\n       factory: \"./factories/comment\",\n       create: { post: \"/comments/create\" },\n       delete: { post: \"/comments/delete/{id}\" },\n       fetchId: (data) => data.result.id\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver for Alert Handling\nDESCRIPTION: This snippet demonstrates how to configure WebDriver to handle unexpected alert popups by dismissing them.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ndesiredCapabilities: {\n  // close all unexpected popups\n  unexpectedAlertBehaviour: 'dismiss',\n}\n```\n\n----------------------------------------\n\nTITLE: Running Parallel End-to-End Tests with CodeceptJS\nDESCRIPTION: Examples of npm commands to run end-to-end tests in parallel using CodeceptJS, with options to specify the number of workers and start a dev server.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/vue.md#2025-04-21_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e:parallel\nnpm run test:e2e:parallel -- 3\nnpm run test:e2e:parallel -- 3 --serve\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Helper in CodeceptJS\nDESCRIPTION: JavaScript configuration for the Appium helper in CodeceptJS, specifying the app package, platform, and desired capabilities.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  Appium: {\n    app: \"my_app.apk\",\n    platform: \"Android\",\n    desiredCapabilities: {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Removing Focus from Elements in CodeceptJS (JavaScript)\nDESCRIPTION: Shows how to remove focus from elements using the blur method in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nI.blur('.text-area')\n```\n\nLANGUAGE: javascript\nCODE:\n```\n//element `#product-tile` is focused\nI.see('#add-to-cart-btn');\nI.blur('#product-tile')\nI.dontSee('#add-to-cart-btn');\n```\n\n----------------------------------------\n\nTITLE: Using Strict Locators in CodeceptJS for Element Interaction\nDESCRIPTION: Shows how to use strict locators in CodeceptJS to specify exact locator types for interacting with elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nI.click({css: 'button.red'});\nI.fillField({name: 'user[email]'},'miles@davis.com');\nI.seeElement({xpath: '//body/header'});\n```\n\n----------------------------------------\n\nTITLE: Launching CodeceptJS Shell with AI\nDESCRIPTION: Command to start CodeceptJS interactive shell with AI helper enabled.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_13\n\nLANGUAGE: shell\nCODE:\n```\nnpx codeceptjs shell --ai\n```\n\n----------------------------------------\n\nTITLE: Using Strict Locators with SwitchTo and Within in CodeceptJS\nDESCRIPTION: This code example demonstrates how to use strict locators with the switchTo and within methods in CodeceptJS. It shows how to specify CSS selectors for iframes when switching context for interaction.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_49\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchTo({ css: 'iframe[id^=number-frame]' }) // support the strict locator\n\nI.amOnPage('/iframe');\nwithin({\n  frame: { css: '#number-frame-1234' }, // support the strict locator\n}, () => {\n  I.fillField('user[login]', 'User');\n  I.fillField('user[email]', 'user@user.com');\n  I.fillField('user[password]', 'user@user.com');\n  I.click('button');\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Run-multiple for Parallel Browser Testing\nDESCRIPTION: This snippet demonstrates how to set up parallel testing with both Chrome and Firefox browsers in the codecept.conf.js file. It specifies the number of chunks and browser configurations.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer-firefox.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n multiple: {\n        parallel: {\n            chunks: process.env.THREADS || 30,\n            browsers: [{\n                browser: 'chrome',\n                windowSize: '1920x1080',\n            }, {\n                browser: 'firefox',\n                windowSize: '1920x1080',\n            }],\n        },\n    },\n```\n\n----------------------------------------\n\nTITLE: Configuring TypeScript Types for CodeceptJS Config\nDESCRIPTION: Demonstrates how to add TypeScript type definitions to a CodeceptJS configuration file to get intellisense support when writing configuration options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n/**@type {CodeceptJS.MainConfig}**/\nexports.config = {\n  //...\n}\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Worker Threads in CodeceptJS\nDESCRIPTION: Basic command to run tests in parallel using CodeceptJS worker threads, which distributes test scenarios across the specified number of workers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs run-workers 2\n```\n\n----------------------------------------\n\nTITLE: Configuring Result Analysis Plugin in CodeceptJS\nDESCRIPTION: This configuration snippet demonstrates how to set up the 'analyze' plugin in CodeceptJS. It includes options for detailed analysis, failure clustering, and optional screenshot analysis.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n  analyze: {\n    enabled: true,\n    // analyze up to 3 failures in detail\n    analyze: 3,\n    // group similar failures when 5 or more tests fail\n    clusterize: 5,\n    // enable screenshot analysis (requires modal that can analyze  screenshots)\n    vision: false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using Generated PageObject in CodeceptJS Shell\nDESCRIPTION: Examples of using a generated PageObject in CodeceptJS shell for clicking elements and executing methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.click(page.signInButton)\n\n=> page.clickForgotPassword()\n```\n\n----------------------------------------\n\nTITLE: Using Element Iterator with eachElement Plugin\nDESCRIPTION: Demonstrates how to iterate over elements to perform actions using the eachElement plugin\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nawait eachElement('click all checkboxes', 'form input[type=checkbox]', async el => {\n  await el.click()\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Exact Page Title in CodeceptJS\nDESCRIPTION: Verifies that the page title exactly matches a specified string. This method is useful for ensuring precise page identification.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeTitleEquals('Test title.');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Detachment in CodeceptJS\nDESCRIPTION: Waits for an element to become detached from the DOM using the waitForDetached method. The element can be located by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForDetached('#popup');\n```\n\n----------------------------------------\n\nTITLE: Checking Current URL in CodeceptJS\nDESCRIPTION: Verifies that the current URL matches a provided URL. This method supports both absolute and relative URLs, automatically handling base URL configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCurrentUrlEquals('/register');\nI.seeCurrentUrlEquals('http://my.site.com/register');\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with JUnit Reporter\nDESCRIPTION: Command to execute CodeceptJS tests with the mocha-junit-reporter to generate XML reports for CI/CD pipeline integration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\ncodeceptjs run --reporter mocha-junit-reporter\n```\n\n----------------------------------------\n\nTITLE: Configuring Node Modules with require Parameter in CodeceptJS\nDESCRIPTION: Shows how to use the require parameter in CodeceptJS config to load Node modules before test execution. This example demonstrates loading TypeScript support and should-style assertions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_102\n\nLANGUAGE: javascript\nCODE:\n```\n\"require\": [\"ts-node/register\", \"should\"]\n```\n\n----------------------------------------\n\nTITLE: Switching Native Context in Appium\nDESCRIPTION: Switches to native context in a mobile application. Defaults to NATIVE_APP context unless otherwise specified.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nI.switchToNative();\n\n// or set context explicitly\nI.switchToNative('SOME_OTHER_CONTEXT');\n```\n\n----------------------------------------\n\nTITLE: Finding Checkable Elements with Puppeteer\nDESCRIPTION: Example of using _locateCheckable to find a checkbox by its label text.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['Puppeteer']._locateCheckable('I agree with terms and conditions').then // ...\n```\n\n----------------------------------------\n\nTITLE: Creating a Test for AI Features in CodeceptJS\nDESCRIPTION: This snippet demonstrates how to create a test file to explore AI features in CodeceptJS. It uses the 'Scenario.only' syntax to focus on a single test case.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('ai')\n\nScenario.only('test ai features', ({ I }) => {\n  I.amOnPage('https://getbootstrap.com/docs/5.1/examples/checkout/')\n  pause()\n})\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Host in CodeceptJS\nDESCRIPTION: Demonstrates how to configure the WebDriver helper in CodeceptJS to use an environment variable for the Selenium host.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/docker.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n  ...\n  helpers: {\n    WebDriver: {\n      ...\n      host: process.env.HOST\n      ...\n    }\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Complex Request Mocking Example\nDESCRIPTION: Comprehensive example showing various request mocking patterns including server mocking.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockRequest.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nI.startMocking(); // optionally\nI.mockRequest('/google-analytics/*path', 200);\n// return an empty successful response \nI.mockRequest('GET', '/api/users', 200);\n// mock users api\nI.mockServer(server => {\n  server.get('https://server.com/api/users*').\n    intercept((req, res) => { res.status(200).json(users);\n  });\n});\nI.click('Get users);\nI.stopMocking();\n```\n\n----------------------------------------\n\nTITLE: Cookie Management\nDESCRIPTION: Shows how to retrieve cookie information by name or get all cookies for the current domain.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nlet cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');\n```\n\n----------------------------------------\n\nTITLE: Configuring JSONResponse Helper with Playwright\nDESCRIPTION: Example configuration for using JSONResponse helper with Playwright helper in CodeceptJS configuration file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/JSONResponse.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\n// ...\n  helpers: {\n    Playwright: {\n      url: 'https://localhost',\n      browser: 'chromium',\n    },\n    JSONResponse: {\n      requestHelper: 'Playwright',\n    }\n  }\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright v0.12 Dependency for CodeceptJS\nDESCRIPTION: Command to upgrade the Playwright dependency to version 0.12 for use with CodeceptJS 2.6.0.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_87\n\nLANGUAGE: bash\nCODE:\n```\nnpm i playwright@^0.12 --save\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer Helper in CodeceptJS\nDESCRIPTION: Configuration snippet for enabling and setting up the Puppeteer helper in the CodeceptJS config file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{ // ..\n  helpers: {\n    Puppeteer: {\n      url: \"http://localhost\",\n      show: true\n    }\n  }\n  // ..\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer for Firefox in CodeceptJS\nDESCRIPTION: This code snippet shows how to configure Puppeteer to use Firefox in the codecept.conf.js file. It sets the browser to Firefox and includes ignore-certificate-errors arguments for both Chrome and Firefox.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer-firefox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n        Puppeteer: {\n            browser: process.env.BROWSER || 'firefox',\n            url: process.env.BASE_URL || 'https://example.com',\n            chrome: {\n                args: [\n                    '--ignore-certificate-errors',\n                ],\n            },\n            firefox: {\n                args: [\n                    '--ignore-certificate-errors'\n                ],\n            },\n        },\n```\n\n----------------------------------------\n\nTITLE: Asserting Absence of Text in CodeceptJS (JavaScript)\nDESCRIPTION: Shows how to verify that specific text is not present on a page in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSee('Login'); // assume we are already logged in.\nI.dontSee('Login', '.nav'); // no login inside .nav element\n```\n\n----------------------------------------\n\nTITLE: Using the CommentStep Plugin for Test Annotations\nDESCRIPTION: Example of using the commentStep plugin to annotate logical parts of a test with Given/When/Then structure for better readability.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\n__`Given`\nI.amOnPage('/profile')\n\n__`When`\nI.click('Logout')\n\n__`Then`\nI.see('You are logged out')\n```\n\n----------------------------------------\n\nTITLE: Checkbox Handling Examples in JavaScript\nDESCRIPTION: Examples demonstrating how to interact with checkboxes and radio buttons\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.checkOption('#agree');\nI.checkOption('I Agree to Terms and Conditions');\nI.checkOption('agree', '//form');\n```\n\n----------------------------------------\n\nTITLE: Validating JSON Response Data with JSONResponse Helper\nDESCRIPTION: Example of validating JSON responses using the JSONResponse helper. This shows how to check for keys and JSON content within array responses, with the helper automatically iterating over array items.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_70\n\nLANGUAGE: javascript\nCODE:\n```\n// response.data == [\n//   { user: { name: 'jon', email: 'jon@doe.com' } },\n//   { user: { name: 'matt', email: 'matt@doe.com' } },\n//]\n\nI.seeResponseContainsKeys(['user'])\nI.seeResponseContainsJson({ user: { email: 'jon@doe.com' } })\nI.seeResponseContainsJson({ user: { email: 'matt@doe.com' } })\nI.dontSeeResponseContainsJson({ user: 2 })\n```\n\n----------------------------------------\n\nTITLE: Cookie Management Examples in JavaScript\nDESCRIPTION: Examples showing cookie clearing operations\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nI.clearCookie();\nI.clearCookie('test');\n```\n\n----------------------------------------\n\nTITLE: GitHub Actions Configuration for CodeceptJS Check\nDESCRIPTION: YAML configuration for GitHub Actions showing how to use the new check command before running tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  # ...\n  - name: check configuration and browser\n    run: npx codeceptjs check\n\n  - name: run codeceptjs tests\n    run: npx codeceptjs run-workers 4\n```\n\n----------------------------------------\n\nTITLE: Defining React Native Button Component with TestID\nDESCRIPTION: This snippet shows how to define a React Native Button component with a testID attribute, which is used for element selection in automated tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile-react-native-locators.md#2025-04-21_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<Button testID='someButton'>My button</Button>\n```\n\n----------------------------------------\n\nTITLE: Linking Docker Containers for CodeceptJS and Selenium\nDESCRIPTION: Shows how to link a CodeceptJS container with a Selenium Standalone container for WebDriver tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/docker.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n$ docker run -d -P --name selenium-chrome selenium/standalone-chrome\n\n# Alternatively, selenium/standalone-firefox can be used\n\n$ docker run -it --rm -v /<path_to_codeceptjs_test_dir>/:/tests/ --link selenium-chrome:selenium codeceptjs/codeceptjs\n```\n\n----------------------------------------\n\nTITLE: Using waitToHide in CodeceptJS (JavaScript)\nDESCRIPTION: Waits for an element to hide on a page. Element can be located by CSS or XPath selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitToHide('#popup');\n```\n\n----------------------------------------\n\nTITLE: Grabbing Recorded Network Traffic in Playwright\nDESCRIPTION: This snippet demonstrates how to grab and assert on recorded network traffic using the new Playwright helper methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nconst traffics = await I.grabRecordedNetworkTraffics()\nexpect(traffics[0].url).to.equal('https://reqres.in/api/comments/1')\nexpect(traffics[0].response.status).to.equal(200)\nexpect(traffics[0].response.body).to.contain({ name: 'this was mocked' })\n\nexpect(traffics[1].url).to.equal('https://reqres.in/api/comments/1')\nexpect(traffics[1].response.status).to.equal(200)\nexpect(traffics[1].response.body).to.contain({ name: 'this was another mocked' })\n```\n\n----------------------------------------\n\nTITLE: Verifying Checkbox Status in CodeceptJS\nDESCRIPTION: Checks if a specified checkbox is checked. This method can locate checkboxes using various selectors including labels, names, CSS, XPath, or strict locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCheckboxIsChecked('Agree');\nI.seeCheckboxIsChecked('#agree'); // I suppose user agreed to terms\nI.seeCheckboxIsChecked({css: '#signup_form input[type=checkbox]'});\n```\n\n----------------------------------------\n\nTITLE: Double Click Action in CodeceptJS\nDESCRIPTION: Performs double-click action on elements located by various selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with Mochawesome HTML Reporter\nDESCRIPTION: Command to execute CodeceptJS tests with the mochawesome reporter to generate HTML test reports with visualization.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\ncodeceptjs run --reporter mochawesome\n```\n\n----------------------------------------\n\nTITLE: Adding Interactions to MockServer in CodeceptJS\nDESCRIPTION: Demonstrates how to add an interaction to the mock server using the I.addInteractionToMockServer() method. This example sets up a GET request and its corresponding response.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockServer.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.addInteractionToMockServer({\n   request: {\n     method: 'GET',\n     path: '/api/hello'\n   },\n   response: {\n     status: 200,\n     body: {\n       'say': 'hello to mock server'\n     }\n   }\n});\n```\n\n----------------------------------------\n\nTITLE: Grabbing Popup Text in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves the text within a visible popup. If no popup is visible, it will return null.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.grabPopupText();\n```\n\n----------------------------------------\n\nTITLE: Grabbing Popup Text in JavaScript with Playwright\nDESCRIPTION: This function retrieves the text within a visible popup. If no popup is visible, it returns null. It returns a Promise resolving to the popup text or null.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.grabPopupText();\n```\n\n----------------------------------------\n\nTITLE: Proxy Configuration\nDESCRIPTION: Example of configuring WebDriver to connect through a proxy server with authentication.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    helpers: {\n        WebDriver: {\n            capabilities: {\n                proxy: {\n                    \"proxyType\": \"manual\",\n                    \"httpProxy\": \"http://corporate.proxy:8080\",\n                    \"socksUsername\": \"codeceptjs\",\n                    \"socksPassword\": \"secret\",\n                    \"noProxy\": \"127.0.0.1,localhost\"\n                }\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Browser Sessions in CodeceptJS Test\nDESCRIPTION: Example of using the session command to run multiple browser sessions in a single test. This demonstrates how to maintain different browser contexts within one test case.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_83\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('run in different browsers', I => {\n  I.amOnPage('/hello')\n  I.see('Hello!')\n  session('john', () => {\n    I.amOnPage('/bye')\n    I.dontSee('Hello')\n    I.see('Bye')\n  })\n  I.see('Hello')\n})\n```\n\n----------------------------------------\n\nTITLE: Drag and Drop in CodeceptJS\nDESCRIPTION: Demonstrates how to drag an element to a destination element using locators.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nI.dragAndDrop('#dragHandle', '#container');\n```\n\n----------------------------------------\n\nTITLE: Shadow DOM Element Interaction Examples\nDESCRIPTION: Examples of using shadow DOM locators to interact with elements, including filling fields and clicking buttons.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/shadow.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.fillField({ shadow: ['my-app', 'recipe-hello-binding', 'ui-input', 'input.input'] }, 'value');\nI.click({ shadow: ['my-app', 'recipe-hello', 'button'] });\n```\n\n----------------------------------------\n\nTITLE: Configuring Browser Session with Custom Options\nDESCRIPTION: Shows how to create a session with custom browser configuration, specifically using Firefox instead of the default browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/basics.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nsession('john', { browser: 'firefox' }, () => {\n  // run this steps in firefox\n  I.amOnPage('/')\n})\n```\n\n----------------------------------------\n\nTITLE: Masking Sensitive Data in REST Helper\nDESCRIPTION: Shows how to use the secret() function to mask sensitive data in REST API request logs, preventing exposure of confidential information in test reports.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_81\n\nLANGUAGE: JavaScript\nCODE:\n```\nI.sendPatchRequest('/api/users.json', secret({ email: 'user@user.com' }))\n```\n\n----------------------------------------\n\nTITLE: Configuring GraphQL Helper in CodeceptJS\nDESCRIPTION: Example configuration for the GraphQL helper showing how to set the endpoint and add request headers through the onRequest hook.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQL.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nGraphQL: {\n   endpoint: 'http://site.com/graphql/',\n   onRequest: (request) => {\n     request.headers.auth = '123';\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Dry Run of CodeceptJS Tests\nDESCRIPTION: Prints test scenarios without executing them using the 'dry-run' command. It can be used with various options to enable specific plugins or bootstrap scripts.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs dry-run\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs dry-run --steps\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs dry-run --steps -p allure\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs dry-run --steps -p allure,customLocator\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs dry-run --steps -p all\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs dry-run --steps --bootstrap\n```\n\n----------------------------------------\n\nTITLE: Verifying Cookie Non-Existence in CodeceptJS\nDESCRIPTION: Checks that a cookie with a specific name does not exist in the browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCookie('auth'); // no auth cookie\n```\n\n----------------------------------------\n\nTITLE: Gherkin Internationalization Example with German and Data Tables\nDESCRIPTION: Example showing Gherkin feature file using German language specification and data tables for test parameters. The example demonstrates how to specify the language using #language directive and structure scenarios with data tables.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_38\n\nLANGUAGE: gherkin\nCODE:\n```\n#language: de\nFunktionalität: Faker examples\n\n   Szenariogrundriss: Atualizar senha do usuário\n        Angenommen que estou logado via REST com o usuário \"<customer>\"\n          | protocol             | https:               |\n          | hostname             | https://cucumber.io/docs/gherkin/languages/            |\n\n\nFaker examples --\n  Atualizar senha do usuário {\"product\":\"{{vehicle.vehicle}}\",\"customer\":\"Dr. {{name.findName}}\",\"price\":\"{{commerce.price}}\",\"cashier\":\"cashier 2\"}\n   On Angenommen: que estou logado via rest com o usuário \"dr. {{name.find name}}\"\n    protocol        | https:\n    hostname        | https://cucumber.io/docs/gherkin/languages/\n\nDr. {{name.findName}}\n  ✔ OK in 13ms\n```\n\n----------------------------------------\n\nTITLE: Cookie Management in CodeceptJS\nDESCRIPTION: Sets single or multiple cookies using cookie objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nI.setCookie({name: 'auth', value: true});\n\n// as array\nI.setCookie([\n  {name: 'auth', value: true},\n  {name: 'agree', value: true}\n]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Azure OpenAI with Direct API Request for CodeceptJS\nDESCRIPTION: Configuration for using Azure OpenAI service with a direct API request in CodeceptJS. This setup includes functions for obtaining an access token and making API requests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  request: async (messages) => {\n    try {\n      const endpoint = process.env.API_ENDPOINT;\n      const deploymentId = process.env.DEPLOYMENT_ID;\n\n      const result = await makeApiRequest(endpoint, deploymentId, messages)\n\n      return result.choices[0]?.message.content\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      throw error;\n    }\n  }\n}\n...\n\nasync function getAccessToken() {\n  const credential = new DefaultAzureCredential();\n  const scope = \"https://cognitiveservices.azure.com/.default\";\n\n  try {\n    const accessToken = await credential.getToken(scope);\n    return `Bearer ${accessToken.token}`;\n  } catch (err) {\n    console.error(\"Failed to get access token:\", err);\n  }\n}\n\nasync function makeApiRequest(endpoint, deploymentId, messages) {\n  const token = await getAccessToken();\n  const url = `${endpoint}/openai/deployments/${deploymentId}/chat/completions?api-version=2024-06-01`;\n\n  const data = { messages };\n\n  try {\n    const response = await axios.post(url, data, {\n      headers: {\n        'Authorization': `${token}`\n      }\n    });\n    return response.data\n  } catch (err) {\n    console.error(\"API request failed:\", err.response);\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording Network Traffic in CodeceptJS\nDESCRIPTION: Shows how to start and stop recording network traffic in CodeceptJS tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_92\n\nLANGUAGE: javascript\nCODE:\n```\nI.startRecordingTraffic();\n\n// Later in the test\nI.stopRecordingTraffic();\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Shell with Custom Config\nDESCRIPTION: Command to run CodeceptJS shell with a custom configuration file. This allows specifying a different config file than the default.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_80\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs shell -c foo.conf.js\n```\n\n----------------------------------------\n\nTITLE: Initializing NPM Package\nDESCRIPTION: Create a new NPM package in the current directory with default settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/installation.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpm init -y\n```\n\n----------------------------------------\n\nTITLE: Exposing WebElements in WebHelper for Playwright\nDESCRIPTION: Example showing how to use the newly exposed WebElements feature that allows performing subsequent actions on elements returned by the WebHelper. This feature enables direct interaction with Playwright Locator objects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\n// Playwright helper would return the Locator\n\nI.amOnPage('/form/focus_blur_elements');\nconst webElements = await I.grabWebElements('#button');\nwebElements[0].click();\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Parallel Execution Script in CodeceptJS\nDESCRIPTION: Basic setup for a custom parallel execution script in CodeceptJS, which will be extended with specific parallelization logic.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n#!/usr/bin/env node\nconst { Workers, event } = require('codeceptjs');\n// here will go magic\n```\n\n----------------------------------------\n\nTITLE: Gherkin i18n Support with German Language Example\nDESCRIPTION: Example demonstrating Gherkin's internationalization support using German language. The snippet shows how to specify the language with #language directive and structure a German feature file with scenario outline and examples table.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_43\n\nLANGUAGE: gherkin\nCODE:\n```\n#language: de\nFunktionalität: Checkout-Prozess\n  Um Produkte zu kaufen\n  Als Kunde\n  Möchte ich in der Lage sein, mehrere Produkte zu kaufen\n\n  **[i18n](https://github.com/i18n)**\n  Szenariogrundriss: Bestellrabatt\n    Angenommen ich habe ein Produkt mit einem Preis von <price>$ in meinem Warenkorb\n    Und der Rabatt für Bestellungen über $20 beträgt 10 %\n    Wenn ich zur Kasse gehe\n    Dann sollte ich den Gesamtpreis von \"<total>\" $ sehen\n\n    Beispiele:\n      | price | total |\n      | 10    | 10.0  |\n```\n\n----------------------------------------\n\nTITLE: Network Traffic Recording and Verification in CodeceptJS\nDESCRIPTION: Examples of recording and verifying network traffic, including checking specific traffic patterns and parameters.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.startRecordingTraffic()\nI.amOnPage('https://codecept.io/')\nI.seeTraffic({ name: 'traffics', url: 'https://codecept.io/img/companies/BC_LogoScreen_C.jpg' })\n```\n\n----------------------------------------\n\nTITLE: Counting Visible Elements in CodeceptJS\nDESCRIPTION: Verifies that a specified number of elements matching a locator are visible on the page. This method is useful for checking the visibility of multiple similar elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeNumberOfVisibleElements('.buttons', 3);\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element to Hide in CodeceptJS\nDESCRIPTION: Waits for an element to hide on the page using the waitToHide method. The element can be located by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitToHide('#popup');\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Visibility in CodeceptJS\nDESCRIPTION: Waits for an element to become visible on the page using the waitForVisible method. The element can be located by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForVisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Test Patterns in CodeceptJS\nDESCRIPTION: This snippet shows how to configure an array of test patterns in CodeceptJS, allowing for multiple test file patterns to be specified.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  tests: ['./*_test.js', './sampleTest.js'],\n  timeout: 10000,\n  output: '',\n  helpers: {},\n  include: {},\n  bootstrap: false,\n  mocha: {},\n  // require modules\n  require: ['ts-node/register', 'should'],\n}\n```\n\n----------------------------------------\n\nTITLE: Running Multiple Suites with CodeceptJS\nDESCRIPTION: Executes multiple test suites using the 'run-multiple' command. It can be used to run tests in different browsers or environments simultaneously.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run-multiple smoke:chrome regression:firefox\n```\n\n----------------------------------------\n\nTITLE: Using Secret Data with REST Helper in Form Encoded Requests\nDESCRIPTION: Example showing how to use the secret() function to mask sensitive form-encoded data in REST API requests, preventing the data from appearing in logs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_66\n\nLANGUAGE: javascript\nCODE:\n```\nconst secretData = secret('name=john&password=123456')\nconst response = await I.sendPostRequest('/user', secretData)\n```\n\n----------------------------------------\n\nTITLE: Launching Appium Server\nDESCRIPTION: Command to start the Appium server with a specific base path, which is necessary for compatibility with Appium v2.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nnpx appium --base-path=/wd/hub\n```\n\n----------------------------------------\n\nTITLE: Cancelling Popups with Puppeteer\nDESCRIPTION: Example of setting up automatic cancellation of JavaScript popups and triggering the cancellation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nI.amCancellingPopups();\nI.click('#triggerPopup');\nI.cancelPopup();\n```\n\n----------------------------------------\n\nTITLE: TestCafe Integration in CodeceptJS\nDESCRIPTION: Enables use of TestCafe API within tests for advanced browser control.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nI.useTestCafeTo('handle browser dialog', async ({ t }) {\n  await t.setNativeDialogHandler(() => true);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper for Chromium Extensions\nDESCRIPTION: Example configuration for testing with Chromium extensions in Playwright helper, including setting up user data directory and extension arguments.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n helpers: {\n   Playwright: {\n     url: \"http://localhost\",\n     show: true // headless mode not supported for extensions\n     chromium: {\n       // Note: due to this would launch persistent context, so to avoid the error when running tests with run-workers a timestamp would be appended to the defined folder name. For instance: playwright-tmp_1692715649511\n       userDataDir: '/tmp/playwright-tmp', // necessary to launch the browser in normal mode instead of incognito,\n       args: [\n          `--disable-extensions-except=${pathToExtension}`,\n          `--load-extension=${pathToExtension}`\n       ]\n     }\n   }\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Boolean Validation with softExpectTrue\nDESCRIPTION: A soft assertion method that checks if a provided value is true. Takes a target value and optional custom error message. Continues test execution even if the assertion fails.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/SoftExpectHelper.md#2025-04-21_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n### softExpectTrue\n\nSoftly asserts that the target data is true.\n\n#### Parameters\n\n- `targetData` **any** The data to check.\n- `customErrorMsg` **[string][3]** A custom error message to display if the assertion fails.\n```\n\n----------------------------------------\n\nTITLE: Grabbing All Contexts in CodeceptJS\nDESCRIPTION: Shows how to retrieve a list of all available contexts in a mobile app using the 'grabAllContexts' method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlet contexts = await I.grabAllContexts();\n```\n\n----------------------------------------\n\nTITLE: Testing Mobile Applications with Appium in CodeceptJS\nDESCRIPTION: Sample test code demonstrating mobile application testing capabilities introduced in CodeceptJS 1.0. This snippet shows how to interact with mobile app elements using the Appium helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_91\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeAppIsInstalled(\"io.super.app\");\nI.click('~startUserRegistrationCD');\nI.fillField('~email of the customer', 'Nothing special'));\nI.see('davert@codecept.io', '~email of the customer'));\nI.clearField('~email of the customer'));\nI.dontSee('Nothing special', '~email of the customer'));\n```\n\n----------------------------------------\n\nTITLE: CLI Reporter Output with Steps Option\nDESCRIPTION: Example output when running CodeceptJS with the --steps option. It shows detailed step-by-step execution information including actions and assertions performed during the test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nGitHub --\n search\n • I am on page \"https://github.com\"\n • I am on page \"https://github.com/search\"\n • I fill field \"Search GitHub\", \"CodeceptJS\"\n • I press key \"Enter\"\n • I see \"Codeception/CodeceptJS\", \"a\"\n ✓ OK in 2681ms\n\n signin\n • I am on page \"https://github.com\"\n • I click \"Sign in\"\n • I see \"Sign in to GitHub\"\n • I fill field \"Username or email address\", \"something@totest.com\"\n • I fill field \"Password\", \"123456\"\n • I click \"Sign in\"\n • I see \"Incorrect username or password.\", \".flash-error\"\n ✓ OK in 2252ms\n\n register\n • I am on page \"https://github.com\"\n   Within .js-signup-form:\n   • I fill field \"user[login]\", \"User\"\n   • I fill field \"user[email]\", \"user@user.com\"\n   • I fill field \"user[password]\", \"user@user.com\"\n   • I fill field \"q\", \"aaa\"\n ✖ FAILED in 1260ms\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Events in CodeceptJS Plugins\nDESCRIPTION: Demonstrates how to handle worker events in CodeceptJS plugins, including distinguishing between run and run-workers commands.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nconst { event } = require('codeceptjs');\n\nmodule.exports = function() {\n  event.dispatcher.on(event.workers.result, async () => {\n    await _publishResultsToTestrail();\n  });\n\n  event.dispatcher.on(event.all.result, async () => {\n    if (!process.env.RUNS_WITH_WORKERS) await _publishResultsToTestrail();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Checking Element is Not in DOM in CodeceptJS\nDESCRIPTION: Verifies that an element is not present in the DOM, regardless of visibility.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeElementInDOM('.nav'); // checks that element is not on page visible or not\n```\n\n----------------------------------------\n\nTITLE: Checking Element is Not Visible in CodeceptJS\nDESCRIPTION: Verifies that an element specified by the locator is not visible or not in the DOM.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeElement('.modal'); // modal is not shown\n```\n\n----------------------------------------\n\nTITLE: File Name Matching Example in CodeceptJS\nDESCRIPTION: Demonstrates how to check for files matching a specific pattern in downloads\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/FileSystem.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.handleDownloads();\nI.click('Download as PDF');\nI.amInPath('output/downloads');\nI.seeFileNameMatching('.pdf');\n```\n\n----------------------------------------\n\nTITLE: Running End-to-End Tests with CodeceptJS\nDESCRIPTION: Examples of npm commands to run end-to-end tests using CodeceptJS in different modes, including with a visible browser, headlessly, and with a dev server.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/vue.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm run test:e2e\nnpm run test:e2e -- --headless\nnpm run test:e2e -- --serve\n```\n\n----------------------------------------\n\nTITLE: Locating Field Elements in WebDriver Helper\nDESCRIPTION: Demonstrates using the _locateFields method to find field elements by providing human-readable text in the WebDriver helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['WebDriver']._locateFields('Your email').then // ...\n```\n\n----------------------------------------\n\nTITLE: Generating PageObject with AI in CodeceptJS\nDESCRIPTION: JavaScript command to generate a PageObject for a login page using AI in CodeceptJS shell.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.askForPageObject('login')\n```\n\n----------------------------------------\n\nTITLE: Environment Information Display in CodeceptJS Verbose Mode\nDESCRIPTION: This code shows the detailed environment information that CodeceptJS displays in verbose mode. It includes versions of CodeceptJS, Node.js, the operating system, browsers, as well as configured helpers and plugins.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nEnvironment information:-\n\ncodecept_version:  \"3.5.4\"\nnodeInfo:  18.16.0\nosInfo:  macOS 13.5\ncpuInfo:  (8) arm64 Apple M1 Pro\nchromeInfo:  116.0.5845.179\nedgeInfo:  116.0.1938.69\nfirefoxInfo:  Not Found\nsafariInfo:  16.6\nhelpers:  {\n\"Playwright\": {\n\"url\": \"https://github.com\",\n\"show\": false,\n\"browser\": \"chromium\",\n\"waitForNavigation\": \"load\",\n\"waitForTimeout\": 30000,\n\"trace\": false,\n\"keepTraceForPassedTests\": true\n},\n\"CDPHelper\": {\n\"require\": \"./helpers/CDPHelper.ts\"\n},\n\"OpenAI\": {\n\"chunkSize\": 8000\n},\n\"ExpectHelper\": {\n\"require\": \"codeceptjs-expect\"\n},\n\"REST\": {\n\"endpoint\": \"https://reqres.in\",\n\"timeout\": 20000\n},\n\"AllureHelper\": {\n\"require\": \"./helpers/AllureHelper.ts\"\n}\n}\nplugins:  {\n\"screenshotOnFail\": {\n\"enabled\": true\n},\n\"tryTo\": {\n\"enabled\": true\n},\n\"retryFailedStep\": {\n\"enabled\": true\n},\n\"retryTo\": {\n\"enabled\": true\n},\n\"eachElement\": {\n\"enabled\": true\n},\n\"pauseOnFail\": {}\n}\n***************************************\nIf you have questions ask them in our Slack: http://bit.ly/chat-codeceptjs\nOr ask them on our discussion board: https://codecept.discourse.group/\nPlease copy environment info when you report issues on GitHub: https://github.com/Codeception/CodeceptJS/issues\n***************************************\nCodeceptJS v3.5.4 #StandWithUkraine\n```\n\n----------------------------------------\n\nTITLE: Moving Cursor in CodeceptJS\nDESCRIPTION: Method to move the cursor to an element with optional X and Y offset values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_36\n\nLANGUAGE: javascript\nCODE:\n```\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n```\n\n----------------------------------------\n\nTITLE: Checking Exact Text Content in CodeceptJS\nDESCRIPTION: Verifies that the text content of an element exactly matches a specified string. This method is useful for precise text comparisons within a specific context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeTextEquals('text', 'h1');\n```\n\n----------------------------------------\n\nTITLE: Double Click Operation in CodeceptJS\nDESCRIPTION: Performs double-click action on elements located by various selectors like link, button, label, CSS or XPath. Context parameter can be used to narrow down the search scope.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n```\n\n----------------------------------------\n\nTITLE: Executing Code Only on Android Devices\nDESCRIPTION: Example of using the runOnAndroid method to execute code specifically on Android devices.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nI.runOnAndroid(() => {\n   I.click('io.selendroid.testapp:id/buttonTest');\n});\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS in Dry Run Mode\nDESCRIPTION: Command to list all tests and their steps without actually executing them, useful for reviewing available tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs dry-run\n```\n\n----------------------------------------\n\nTITLE: Configuring Headless Mode in Electron with CodeceptJS\nDESCRIPTION: This snippet demonstrates how to set up headless mode in Electron when creating a window, as CodeceptJS's 'show' configuration parameter doesn't work with Electron.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nfunction createWindow() {\n  const window = new BrowserWindow({ width: 800, height: 600, show: false });\n  window.loadURL(\"https://example.com\");\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom CodeceptJS Configuration File Location\nDESCRIPTION: This shell command shows how to specify a custom location or name for the CodeceptJS configuration file using the --config or -c option.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/configuration.md#2025-04-21_snippet_11\n\nLANGUAGE: shell\nCODE:\n```\ncodeceptjs run --config=./path/to/my/config.js\n```\n\n----------------------------------------\n\nTITLE: Using waitNumberOfVisibleElements in CodeceptJS (JavaScript)\nDESCRIPTION: Waits until a specified number of elements matching the given locator are visible on the page.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitNumberOfVisibleElements('a', 3);\n```\n\n----------------------------------------\n\nTITLE: Custom Request Configuration\nDESCRIPTION: Example of custom request configuration for create and delete operations\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/ApiDataFactory.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ncreate: (data) => ({ method: 'post', url: '/posts', data }),\ndelete: (id) => ({ method: 'delete', url: '/posts', data: { id } })\n```\n\n----------------------------------------\n\nTITLE: Customizing Browser Settings for Device Emulation in CodeceptJS\nDESCRIPTION: This snippet shows how to adjust browser settings for device emulation by passing custom options to the Playwright helper in CodeceptJS configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  Playwright: {\n    // regular config goes here\n    // put on mobile device\n    emulate: { isMobile: true, deviceScaleFactor: 2 }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Element Location Methods\nDESCRIPTION: Examples of locating elements using SmartWait and custom selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['Protractor']._locate({name: 'password'}).then //...\nthis.helpers['Protractor']._locate({name: 'password'}, true).then //...\n```\n\n----------------------------------------\n\nTITLE: Retrieving Page Scroll Position in CodeceptJS\nDESCRIPTION: Gets the current page scroll position as x and y coordinates. Returns a promise resolving to an object with x and y properties. Should be used with await operator in async functions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_44\n\nLANGUAGE: javascript\nCODE:\n```\nlet { x, y } = await I.grabPageScrollPosition();\n```\n\n----------------------------------------\n\nTITLE: Refreshing the Current Page in CodeceptJS\nDESCRIPTION: Reloads the current page. Useful for testing state changes, reloading data, or resetting page conditions during a test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_62\n\nLANGUAGE: javascript\nCODE:\n```\nI.refreshPage();\n```\n\n----------------------------------------\n\nTITLE: Grabbing Text Content\nDESCRIPTION: Retrieves text content from multiple elements matching a locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nlet pins = await I.grabTextFromAll('#pin li');\n```\n\n----------------------------------------\n\nTITLE: Applitools Test Example\nDESCRIPTION: JavaScript example demonstrating how to implement visual testing using Applitools helper\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/visual.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I } = inject();\n\nFeature('Applitools functionality');\n\nBefore(() => {\n    I.amOnPage('https://applitools.com/helloworld');\n});\n\nScenario('Check home page @test', async ({  }) => {\n    await I.eyeCheck('Homepage');\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Page Title Does Not Contain Text in CodeceptJS\nDESCRIPTION: Verifies that the page title does not contain the specified text.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInTitle('Error');\n```\n\n----------------------------------------\n\nTITLE: Accessing WebDriverIO Client\nDESCRIPTION: Example of accessing the WebDriverIO client from a custom helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['Protractor'].browser\n```\n\n----------------------------------------\n\nTITLE: Custom Response Validation with Callback\nDESCRIPTION: Example of using seeResponseValidByCallback method to perform custom validation of response data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/JSONResponse.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeResponseValidByCallback(({ data, status }) => {\n  assert.strictEqual(status, 200);\n  assert('user' in data);\n  assert('company' in data);\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeceptJS Arguments in Docker Compose\nDESCRIPTION: Shows how to set CodeceptJS arguments using environment variables in a Docker Compose configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/docker.md#2025-04-21_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  codeceptjs:\n    image: codeceptjs/codeceptjs\n    environment:\n      - CODECEPT_ARGS=--debug\n    volumes:\n      - .:/tests\n```\n\n----------------------------------------\n\nTITLE: Waiting for Elements in CodeceptJS\nDESCRIPTION: Demonstrates how to wait for elements to be present on a page using CSS or XPath selectors. Supports optional timeout parameter.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_76\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForElement('.btn.continue');\nI.waitForElement('.btn.continue', 5); // wait for 5 secs\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver Helper for Docker Environment\nDESCRIPTION: JavaScript configuration for the WebDriver helper in CodeceptJS to use the correct Selenium host when running in Docker.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n  ...\n  helpers: {\n    WebDriver: {\n      ...\n      host: process.env.HOST\n      ...\n    }\n  }\n  ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer for Debugging in Window Mode\nDESCRIPTION: Example of setting up Puppeteer to show the browser window for debugging purposes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Puppeteer : {\n       url: \"http://localhost\",\n       show: true\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Uploading App to BrowserStack\nDESCRIPTION: cURL command to upload an Android or iOS app to BrowserStack servers for testing.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_6\n\nLANGUAGE: shell\nCODE:\n```\ncurl -u \"USERNAME:ACCESS_KEY\" \\\n-X POST \"https://api-cloud.browserstack.com/app-automate/upload\" \\\n-F \"file=@/path/to/app/file/Application-debug.apk\"\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Tests in Dry Run Mode\nDESCRIPTION: Command for executing tests in dry-run mode, which prints the steps of test scenarios without actually running them. This is useful for verifying test flow without execution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_71\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs dry-run\n```\n\n----------------------------------------\n\nTITLE: Double Click Action in CodeceptJS\nDESCRIPTION: Performs double-click on elements located by various selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_22\n\nLANGUAGE: javascript\nCODE:\n```\nI.doubleClick('Edit');\nI.doubleClick('Edit', '.actions');\nI.doubleClick({css: 'button.accept'});\nI.doubleClick('.btn.edit');\n```\n\n----------------------------------------\n\nTITLE: Scrolling Page to Bottom in CodeceptJS\nDESCRIPTION: Demonstrates how to scroll the current page to the bottom using the scrollPageToBottom method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToBottom();\n```\n\n----------------------------------------\n\nTITLE: Fill Form Fields in CodeceptJS\nDESCRIPTION: Fills text fields or textareas with given values after clearing existing content. Fields can be located by name, label, CSS, or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\n// by label\nI.fillField('Email', 'hello@world.com');\n// by name\nI.fillField('password', secret('123456'));\n// by CSS\nI.fillField('form#login input[name=username]', 'John');\n// or by strict locator\nI.fillField({css: 'form#login input[name=username]'}, 'John');\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions for CodeceptJS\nDESCRIPTION: Commands for generating TypeScript definitions to enable autocompletion in IDEs when writing CodeceptJS tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs def\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs def --config path/to/codecept.conf.js\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs def --output ./tests/typings\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs def -o ./tests/typings\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Tests with Steps\nDESCRIPTION: Command to run CodeceptJS tests with step-by-step output.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs run --steps\n```\n\n----------------------------------------\n\nTITLE: Updating CodeceptJS Type Definitions for Custom Helpers\nDESCRIPTION: Command to update CodeceptJS Type Definitions after creating a custom helper. This enables IDE features like autocomplete for TypeScript tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/custom-helpers.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs def .\n```\n\n----------------------------------------\n\nTITLE: AI and HTML Processing Improvements in CodeceptJS\nDESCRIPTION: Outlines improvements to AI-related functionality and HTML processing in CodeceptJS, including security fixes and refactoring of the heal plugin.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nreplaced minify library with a modern and more secure fork. Fixes html-minifier@4.0.0 Regular Expression Denial of Service vulnerability [#3829](https://github.com/codeceptjs/CodeceptJS/issues/3829)\nAI class is implemented as singleton\nrefactored heal.js plugin to work on edge cases\nadd configuration params on number of fixes performed by ay heal\nimproved recorder class to add more verbose log\nimproved recorder class to ignore some of errors\n```\n\n----------------------------------------\n\nTITLE: Using Long Strings in Gherkin Scenarios\nDESCRIPTION: Example showing how to include multi-line text blocks in Gherkin scenarios using triple quotes. This is useful for including JSON, XML, or other structured text in test scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_13\n\nLANGUAGE: gherkin\nCODE:\n```\n  Then i see in file \"codecept.json\"\n\"\"\"\n{\n  \"output\": \"./output\",\n  \"helpers\": {\n    \"Puppeteer\": {\n      \"url\": \"http://localhost\",\n      \"restart\": true,\n      \"windowSize\": \"1600x1200\"\n    }\n\"\"\"\n```\n\nLANGUAGE: javascript\nCODE:\n```\nThen('Then i see in file {string}', (file, text) => {\n  // file is a value of {string} from a title\n  const fileContent = fs.readFileSync(file).toString();\n  fileContent.should.include(text.content); // text.content is a value\n});\n```\n\n----------------------------------------\n\nTITLE: Page Navigation Example in JavaScript\nDESCRIPTION: Examples showing how to navigate to different pages using amOnPage method\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('/'); // opens main page of website\nI.amOnPage('https://github.com'); // opens github\nI.amOnPage('/login'); // opens a login page\n```\n\n----------------------------------------\n\nTITLE: Managing Multiple Mailboxes in Tests\nDESCRIPTION: Example showing how to create and switch between multiple mailboxes in tests\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/email.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst mailbox1 = await I.haveNewMailbox()\nconst mailbox2 = await I.haveNewMailbox()\n// mailbox2 is now default mailbox\n// switch back to mailbox1\nI.openMailbox(mailbox1)\n```\n\n----------------------------------------\n\nTITLE: Sending DELETE Request in CodeceptJS REST Helper\nDESCRIPTION: Example of sending a DELETE request using the REST helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendDeleteRequest('/api/users/1');\n```\n\n----------------------------------------\n\nTITLE: Grabbing CSS Properties from Multiple Elements in CodeceptJS\nDESCRIPTION: Retrieves an array of CSS property values from all elements that match the provided locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nconst values = await I.grabCssPropertyFromAll('h3', 'font-weight');\n```\n\n----------------------------------------\n\nTITLE: Mocking HTTP Requests in CodeceptJS\nDESCRIPTION: Example of mocking HTTP GET and POST requests using Polly helper with Puppeteer.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\n// use Polly & Puppeteer helpers\nI.mockRequest('GET', '/api/users', 200)\nI.mockRequest('POST', '/users', { user: { name: 'fake' } })\n```\n\n----------------------------------------\n\nTITLE: Using Effects with TypeScript\nDESCRIPTION: Demonstrates how to use CodeceptJS effects with TypeScript, showcasing proper type support and async/await usage.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/effects.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\nimport { tryTo, retryTo, within } from 'codeceptjs/effects'\n\nconst success = await tryTo(async () => {\n  await I.see('Element')\n})\n```\n\n----------------------------------------\n\nTITLE: Nested iFrame Support in WebDriverIO Helper\nDESCRIPTION: Illustrates how to interact with elements inside nested iframes using the within block in WebDriverIO helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_90\n\nLANGUAGE: JavaScript\nCODE:\n```\nwithin({frame: ['#wrapperId', '[name=content]']}, () => {\n  I.click('Sign in!');\n  I.see('Email Address');\n});\nI.see('Nested Iframe test');\nI.dontSee('Email Address');\n});\n```\n\n----------------------------------------\n\nTITLE: Grabbing Page Title in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves the page title and returns it to the test. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nlet title = await I.grabTitle();\n```\n\n----------------------------------------\n\nTITLE: Configuring Mochawesome Helper for Screenshots\nDESCRIPTION: Configuration for the Mochawesome helper to enable unique screenshot names for failed tests, preventing overrides when tests with the same name exist in different suites.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_14\n\nLANGUAGE: json\nCODE:\n```\n  \"helpers\": {\n    \"Mochawesome\": {\n        \"uniqueScreenshotNames\": \"true\"\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Grab Browser Logs\nDESCRIPTION: Demonstrates how to retrieve JavaScript console logs from the browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))\n```\n\n----------------------------------------\n\nTITLE: Locating Elements in Custom Helpers (JavaScript)\nDESCRIPTION: Shows how to use the _locate method to find elements using different locator types in custom helpers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst elements = await this.helpers['Playwright']._locate({name: 'password'});\n```\n\n----------------------------------------\n\nTITLE: Cloud Provider Configuration (BrowserStack)\nDESCRIPTION: Configuration for connecting to BrowserStack cloud testing service.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n    helpers:{\n        WebDriver: {\n            url: \"YOUR_DESIRED_HOST\",\n            user: \"YOUR_BROWSERSTACK_USER\",\n            key: \"YOUR_BROWSERSTACK_KEY\",\n            capabilities: {\n                \"browserName\": \"chrome\"\n            }\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Recording HAR Files in Playwright Tests\nDESCRIPTION: Demonstrates how to configure HAR recording in Playwright tests. This allows saving network requests to a HAR file for later analysis or replay.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nrecordHar: {\n    mode: 'minimal', // possible values: 'minimal'|'full'.\n    content: 'embed' // possible values:  \"omit\"|\"embed\"|\"attach\".\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Factory for Posts in JavaScript\nDESCRIPTION: Example of creating a factory file for generating post data using Rosie and Faker\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/ApiDataFactory.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Factory } = require('rosie');\nconst { faker } = require('@faker-js/faker');\n\nmodule.exports = new Factory()\n   // no need to set id, it will be set by REST API\n   .attr('author', () => faker.person.findName())\n   .attr('title', () => faker.lorem.sentence())\n   .attr('body', () => faker.lorem.paragraph());\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Top of Page in CodeceptJS\nDESCRIPTION: Scrolls the page to the top of the document. Returns an automatically synchronized promise through the recorder.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_68\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToTop();\n```\n\n----------------------------------------\n\nTITLE: Installing Appium and Dependencies\nDESCRIPTION: Shell commands for installing Appium and its dependencies, including the appium-doctor tool for system checks and specific drivers for Android and iOS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i -g appium-doctor\nnpm i -g appium\nappium driver install xcuitest\nappium driver install uiautomator2\n```\n\n----------------------------------------\n\nTITLE: Verifying Field Value Inequality in CodeceptJS\nDESCRIPTION: Shows how to check that the value of an input field or textarea does not equal a given value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInField('email', 'user@user.com'); // field by name\nI.dontSeeInField({ css: 'form input.email' }, 'user@user.com'); // field by CSS\n```\n\n----------------------------------------\n\nTITLE: Extending Vocabulary for Translations in CodeceptJS\nDESCRIPTION: Example of creating a custom vocabulary file to add localized aliases for actions in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  actions: {\n    // add action aliases, translating method name to your language\n    rightClick: 'Rechtsklick'\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing CodeceptJS Config in JavaScript\nDESCRIPTION: Demonstrates how to access the CodeceptJS configuration object to read custom configuration values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/internal-api.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nconst { config } = require('codeceptjs');\n\n// config object has access to all values of the current config file\n\nif (config.get().myKey == 'value') {\n  // run something\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeceptJS Project\nDESCRIPTION: Command to initialize a basic CodeceptJS project.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs init\n```\n\n----------------------------------------\n\nTITLE: Debugging CodeceptJS AI Features\nDESCRIPTION: Shell commands to enable debugging for CodeceptJS AI features when running tests or in shell mode.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_23\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=\"codeceptjs:ai\" npx codeceptjs run --ai\n```\n\nLANGUAGE: shell\nCODE:\n```\nDEBUG=\"codeceptjs:ai\" npx codeceptjs shell --ai\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with Playwright\nDESCRIPTION: Command to install CodeceptJS with Playwright dependencies using npm. This is required before setting up a new testing project.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm install codeceptjs playwright --save\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Page Object template\nDESCRIPTION: Basic structure of a CodeceptJS Page Object file, which can be used to define reusable functions for common page interactions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nconst { I } = inject();\n\nmodule.exports = {\n\n  // insert your locators and methods here\n}\n```\n\n----------------------------------------\n\nTITLE: Using await with async login function in CodeceptJS tests\nDESCRIPTION: Example of using the login function from the autoLogin plugin when it contains async operations. The login function must be called with await to properly handle asynchronous authentication.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('login', async ({ I, login }) => {\n  await login('admin') // you should use `await`\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Element Visibility in CodeceptJS Detox\nDESCRIPTION: This snippet demonstrates how to check for the visibility of an element using the seeElement method. It can locate elements by accessibility id or within a specific context.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeElement('~edit'); // located by accessibility id\nI.seeElement('~edit', '#menu'); // element inside #menu\n```\n\n----------------------------------------\n\nTITLE: Using I.say with Color Parameters in JavaScript\nDESCRIPTION: Example of using the I.say method with color parameters to print colorful comments in test output. The method accepts a second parameter to specify color.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_78\n\nLANGUAGE: javascript\nCODE:\n```\nI.say('This is red', 'red') //red is used\nI.say('This is blue', 'blue') //blue is used\nI.say('This is by default') //cyan is used\n```\n\n----------------------------------------\n\nTITLE: Running Tests with Workers by Suites in CodeceptJS\nDESCRIPTION: Command to run tests in parallel by assigning entire test suites to workers, rather than individual test scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs run-workers --suites 2\n```\n\n----------------------------------------\n\nTITLE: Handling Worker Test Results with Event Listeners in CodeceptJS\nDESCRIPTION: JavaScript code that shows how to implement an event listener to capture and process test results from worker threads, including detailed test statistics.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { event } = require('codeceptjs');\n\nmodule.exports = function() {\n\n  event.dispatcher.on(event.workers.result, function (result) {\n\n    console.log(result);\n\n  });\n}\n\n// in console log\nFAIL  | 7 passed, 1 failed, 1 skipped   // 2s\n{\n  \"tests\": {\n  \"passed\": [\n    {\n      \"type\": \"test\",\n      \"title\": \"Assert @C3\",\n      \"body\": \"() => { }\",\n      \"async\": 0,\n      \"sync\": true,\n      \"_timeout\": 2000,\n      \"_slow\": 75,\n      \"_retries\": -1,\n      \"timedOut\": false,\n      \"_currentRetry\": 0,\n      \"pending\": false,\n      \"opts\": {},\n      \"tags\": [\n        \"@C3\"\n      ],\n      \"uid\": \"xe4q1HdqpRrZG5dPe0JG+A\",\n      \"workerIndex\": 3,\n      \"retries\": -1,\n      \"duration\": 493,\n      \"err\": null,\n      \"parent\": {\n        \"title\": \"My\",\n        \"ctx\": {},\n        \"suites\": [],\n        \"tests\": [],\n        \"root\": false,\n        \"pending\": false,\n        \"_retries\": -1,\n        \"_beforeEach\": [],\n        \"_beforeAll\": [],\n        \"_afterEach\": [],\n        \"_afterAll\": [],\n        \"_timeout\": 2000,\n        \"_slow\": 75,\n        \"_bail\": false,\n        \"_onlyTests\": [],\n        \"_onlySuites\": [],\n        \"delayed\": false\n      },\n      \"steps\": [\n        {\n          \"actor\": \"I\",\n          \"name\": \"amOnPage\",\n          \"status\": \"success\",\n          \"args\": [\n            \"https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST\"\n          ],\n          \"startedAt\": 1698760652610,\n          \"startTime\": 1698760652611,\n          \"endTime\": 1698760653098,\n          \"finishedAt\": 1698760653098,\n          \"duration\": 488\n        },\n        {\n          \"actor\": \"I\",\n          \"name\": \"grabCurrentUrl\",\n          \"status\": \"success\",\n          \"args\": [],\n          \"startedAt\": 1698760653098,\n          \"startTime\": 1698760653098,\n          \"endTime\": 1698760653099,\n          \"finishedAt\": 1698760653099,\n          \"duration\": 1\n        }\n      ]\n    }\n  ],\n    \"failed\": [],\n    \"skipped\": []\n}\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring GitHub Actions for CodeceptJS Check Command\nDESCRIPTION: YAML configuration for running the new 'codeceptjs check' command in GitHub Actions to verify test setup before running actual tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nsteps:\n  # ...\n  - name: check configuration and browser\n    run: npx codeceptjs check\n\n  - name: run codeceptjs tests\n    run: npx codeceptjs run-workers 4\n```\n\n----------------------------------------\n\nTITLE: Configuring WebDriver with Specific Browser Version\nDESCRIPTION: Configuration example for WebDriver Helper that specifies a particular Chrome browser version or channel. WebdriverIO will download and use the specified browser version automatically.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       smartWait: 5000,\n       browser: \"chrome\",\n       browserVersion: '116.0.5793.0', // or 'stable', 'beta', 'dev' or 'canary'\n       restart: false,\n       windowSize: \"maximize\",\n       timeouts: {\n         \"script\": 60000,\n         \"page load\": 10000\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Grabbing Value from Form Element in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves a value from a form element located by CSS or XPath and returns it to the test. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nlet email = await I.grabValueFrom('input[name=email]');\n```\n\n----------------------------------------\n\nTITLE: Configuring Mixtral via Groq Cloud for CodeceptJS\nDESCRIPTION: Configuration for using the Mixtral model through Groq Cloud in CodeceptJS. This setup requires the 'groq-sdk' package and a Groq API key set as an environment variable.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  request: async messages => {\n    const Groq = require('groq-sdk')\n\n    const client = new Groq({\n      apiKey: process.env['GROQ_API_KEY'], // This is the default and can be omitted\n    })\n\n    const chatCompletion = await groq.chat.completions.create({\n      messages,\n      model: 'mixtral-8x7b-32768',\n    })\n    return chatCompletion.choices[0]?.message?.content || ''\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Initializing Shared Data Container in CodeceptJS Config\nDESCRIPTION: Shows how to initialize shared data in the bootstrap function of the CodeceptJS configuration file. This setup is required before data can be shared between workers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\nexports.config = {\n  bootstrap() {\n    // append empty userData to container\n    share({ userData: false });\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Extending CodeceptJS Functionality with Custom Helper\nDESCRIPTION: Example of creating a custom helper to extend CodeceptJS functionality with TestCafe-specific methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/testcafe.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst Helper = codeceptjs.helper;\n\nclass MyTestCafe extends Helper {\n\n  slowlyFillField(field, text) {\n    // import test controller from TestCafe helper\n    const { t } = this.helpers.TestCafe;\n    // use TestCafe API here\n    return t.setTestSpeed(0.1)\n        .typeText(field, text);\n  }\n\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Helper for Remote Browser Connection\nDESCRIPTION: Example configuration for connecting to a remote browser using a WebSocket endpoint in Playwright helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Playwright: {\n       url: \"http://localhost\",\n       chromium: {\n         browserWSEndpoint: 'ws://localhost:9222/devtools/browser/c5aa6160-b5bc-4d53-bb49-6ecb36cd2e0a',\n         cdpConnection: false // default is false\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling CSP Bypass in Playwright Helper for CodeceptJS\nDESCRIPTION: This configuration snippet shows how to enable Content Security Policy (CSP) bypass in the Playwright helper for CodeceptJS, which allows the browser to ignore content security policies of the website being tested.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_51\n\nLANGUAGE: javascript\nCODE:\n```\n  helpers: {\n    Playwright: {\n      bypassCSP: true\n    }\n```\n\n----------------------------------------\n\nTITLE: Passing Options to CodeceptJS in Docker\nDESCRIPTION: Demonstrates how to pass command-line options to CodeceptJS when running in a Docker container.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/docker.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker run -v $PWD:/tests codeceptjs/codeceptjs codeceptjs run --debug\n```\n\n----------------------------------------\n\nTITLE: Advanced Traffic Checking in WebDriver\nDESCRIPTION: Example demonstrating advanced network traffic verification with parameters like width and height\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nI.amOnPage('https://openai.com/blog/chatgpt')\nI.startRecordingTraffic()\nI.seeTraffic({\n  name: 'sentry event',\n  url: 'https://images.openai.com/blob/cf717bdb-0c8c-428a-b82b-3c3add87a600',\n  parameters: {\n    width: '1919',\n    height: '1138',\n  },\n})\n```\n\n----------------------------------------\n\nTITLE: Using session validation in autoLogin plugin with CodeceptJS\nDESCRIPTION: Configuration for validating user sessions rather than page elements in the check function. This approach allows for more specific authentication validation based on user data.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nauth: {\n  enabled: true,\n  saveToFile: true,\n  inject: 'login',\n  users: {\n    admin: {\n      login: async (I) => {  // If you use async function in the auth plugin\n         const phrase = await I.grabTextFrom('#phrase')\n         I.fillField('username', 'admin'),\n         I.fillField('password', 'password')\n         I.fillField('phrase', phrase)\n      },\n      check: (I, session) => {\n         // Throwing an error in `check` will make CodeceptJS perform the login step for the user\n         if (session.profile.email !== the.email.you.expect@some-mail.com) {\n              throw new Error ('Wrong user signed in');\n        }\n      },\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using the 'expectAnyElement' Function in CodeceptJS\nDESCRIPTION: This example illustrates how to use the 'expectAnyElement' function in a test scenario. It shows various assertions where at least one element from a collection should satisfy the given condition, such as checking for in-stock products, prices below a certain threshold, and enabled buttons.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/els.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('validate any element matches criteria', async ({ I }) => {\n  // Navigate to the page\n  I.amOnPage('/products');\n\n  // Check if any product is marked as \"in stock\"\n  await expectAnyElement('.product-item', async el => {\n    const status = await el.getAttribute('data-status');\n    return status === 'in-stock';\n  });\n\n  // Verify at least one price is below $100\n  await expectAnyElement('.price-tag', async el => {\n    const price = await el.getText();\n    return parseFloat(price.replace('$', '')) < 100;\n  });\n\n  // Check if any button in the list is enabled\n  await expectAnyElement('.action-button', async el => {\n    return await el.isEnabled();\n  });\n});\n```\n\n----------------------------------------\n\nTITLE: Checking Response Code\nDESCRIPTION: Example of using dontSeeResponseCodeIs method to validate response codes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/JSONResponse.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeResponseCodeIs(500);\n```\n\n----------------------------------------\n\nTITLE: Verifying CSS Properties with CodeceptJS\nDESCRIPTION: Demonstrates how to check that elements have specific CSS property values using the seeCssPropertiesOnElements method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCssPropertiesOnElements('h3', { 'font-weight': \"bold\"});\n```\n\n----------------------------------------\n\nTITLE: Implementing Async Bootstrap Function\nDESCRIPTION: Example of implementing an asynchronous bootstrap file with a callback function to perform setup operations before tests run.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_100\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (done) {\n  // async instructions\n  // call done() to continue execution\n  // otherwise call done('error description')\n}\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with Steps Option\nDESCRIPTION: Command to run CodeceptJS with steps option, which displays each step of the test execution in the console output.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --steps\n```\n\n----------------------------------------\n\nTITLE: Testing HTML Processing for CodeceptJS AI Features\nDESCRIPTION: NodeJS script to test HTML processing configuration for CodeceptJS AI features, allowing customization of interactive elements and attributes.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nconst { removeNonInteractiveElements } = require('codeceptjs/lib/html')\nconst fs = require('fs')\n\nconst htmlOpts = {\n  interactiveElements: ['a', 'input', 'button', 'select', 'textarea', 'label', 'option'],\n  allowedAttrs: ['id', 'for', 'class', 'name', 'type', 'value', 'aria-labelledby', 'aria-label', 'label', 'placeholder', 'title', 'alt', 'src', 'role'],\n  textElements: ['label', 'h1', 'h2'],\n  allowedRoles: ['button', 'checkbox', 'search', 'textbox', 'tab'],\n}\n\nhtml = fs.readFileSync('saved.html', 'utf8')\nconst result = removeNonInteractiveElements(html, htmlOpts)\n\nconsole.log(result)\n```\n\n----------------------------------------\n\nTITLE: Page Scrolling in CodeceptJS\nDESCRIPTION: Methods for scrolling page to top, bottom, or to specific elements with offset options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToBottom();\nI.scrollPageToTop();\nI.scrollTo('footer');\nI.scrollTo('#submit', 5, 5);\n```\n\n----------------------------------------\n\nTITLE: Configuring VS Code Debug Settings for CodeceptJS\nDESCRIPTION: Visual Studio Code launch configuration for debugging CodeceptJS tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/advanced.md#2025-04-21_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"type\": \"node\",\n  \"request\": \"launch\",\n  \"name\": \"codeceptjs\",\n  \"args\": [\"run\", \"--grep\", \"@your_test_tag\"],\n  \"program\": \"${workspaceFolder}/node_modules/codeceptjs/bin/codecept.js\"\n}\n```\n\n----------------------------------------\n\nTITLE: Masking Object Properties in CodeceptJS POST Request\nDESCRIPTION: This example demonstrates how to use the 'secret' function with an object, specifically masking the 'password' field in a POST request payload.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/secrets.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendPostRequest('/login', secret({\n  name: 'davert',\n  password: '123456'\n}, 'password'))\n```\n\n----------------------------------------\n\nTITLE: Basic CodeceptJS test structure in JavaScript\nDESCRIPTION: A basic structure of a CodeceptJS test scenario, including a Feature and a Scenario with an empty test case.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Checkout');\n\nScenario('test something', ({ I }) => {\n});\n```\n\n----------------------------------------\n\nTITLE: Cookie Verification in CodeceptJS\nDESCRIPTION: Checks existence of cookie with given name.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeCookie('Auth');\n```\n\n----------------------------------------\n\nTITLE: Displaying CLI Reporter Output with Failures\nDESCRIPTION: This shows the default CLI reporter output in CodeceptJS, displaying test results with failures. It shows test names, execution times, and detailed error information for failed tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nGitHub --\n ✓ search in 2577ms\n ✓ signin in 2170ms\n ✖ register in 1306ms\n\n-- FAILURES:\n\n  1) GitHub: register:\n      Field q not found by name|text|CSS|XPath\n\n  Scenario Steps:\n\n  - I.fillField(\"q\", \"aaa\") at examples/github_test.js:29:7\n  - I.fillField(\"user[password]\", \"user@user.com\") at examples/github_test.js:28:7\n  - I.fillField(\"user[email]\", \"user@user.com\") at examples/github_test.js:27:7\n  - I.fillField(\"user[login]\", \"User\") at examples/github_test.js:26:7\n\n\n\n  Run with --verbose flag to see NodeJS stacktrace\n```\n\n----------------------------------------\n\nTITLE: Grabbing Number of Open Tabs in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves the number of open tabs in the browser. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_27\n\nLANGUAGE: javascript\nCODE:\n```\nlet tabs = await I.grabNumberOfOpenTabs();\n```\n\n----------------------------------------\n\nTITLE: Grabbing Browser Logs in CodeceptJS\nDESCRIPTION: Retrieves JavaScript logs from the browser. The log buffer is reset after each request.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nlet logs = await I.grabBrowserLogs();\nconsole.log(JSON.stringify(logs))\n```\n\n----------------------------------------\n\nTITLE: XML Reporter Configuration for CodeceptJS\nDESCRIPTION: Configuration for mocha-junit-reporter to generate XML test reports for Jenkins CI integration. Specifies the output file location for XML reports.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n  \"mocha\": {\n    \"reporterOptions\": {\n        \"mochaFile\": \"output/result.xml\"\n    }\n  },\n```\n\n----------------------------------------\n\nTITLE: Checking URL Fragment in CodeceptJS\nDESCRIPTION: Verifies that the current URL contains a specified fragment. This method is useful for checking navigation within a single-page application or specific sections of a website.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_56\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInCurrentUrl('/register'); // we are on registration page\n```\n\n----------------------------------------\n\nTITLE: Using CodeceptJS Output Methods in JavaScript\nDESCRIPTION: Shows how to use the output module to print information at different verbosity levels, replacing console.log for better integration with CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/internal-api.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst output = require('codeceptjs').output;\n\noutput.print('This is basic information');\noutput.debug('This is debug information');\noutput.log('This is verbose logging information');\n```\n\n----------------------------------------\n\nTITLE: Dynamic Capability Checking in Appium Tests\nDESCRIPTION: Shows how to use runOnAndroid and runOnIOS methods with a function to dynamically check capabilities before running platform-specific code.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_88\n\nLANGUAGE: JavaScript\nCODE:\n```\nI.runOnAndroid(\n  caps => caps.platformVersion >= 7,\n  () => {\n    // run code only on Android 7+\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Basic CodeceptJS Test Structure\nDESCRIPTION: Example of a basic CodeceptJS test file structure with an empty scenario\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/quickstart.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('My First Test');\n\nScenario('test something', ({ I }) => {\n\n});\n```\n\n----------------------------------------\n\nTITLE: Grabbing Cookies in CodeceptJS\nDESCRIPTION: Gets a cookie object by name, or all cookies if no name is provided. Returns the cookie in JSON format.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nlet cookie = await I.grabCookie('auth');\nassert(cookie.value, '123456');\n```\n\n----------------------------------------\n\nTITLE: Touch Actions in Appium\nDESCRIPTION: Performs touch actions like tap, press, and release. Supports both Android and iOS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\nI.touchPerform([{\n    action: 'press',\n    options: {\n      x: 100,\n      y: 200\n    }\n}, {action: 'release'}])\n\nI.touchPerform([{\n   action: 'tap',\n   options: {\n       element: '1', // json web element was queried before\n       x: 10,   // x offset\n       y: 20,   // y offset\n       count: 1 // number of touches\n   }\n}]);\n```\n\n----------------------------------------\n\nTITLE: Configuring Appium Helper for Android App Testing\nDESCRIPTION: Example configuration for testing an Android app using the Appium helper in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n      Appium: {\n          platform: \"Android\",\n          desiredCapabilities: {\n              appPackage: \"com.example.android.myApp\",\n              appActivity: \"MainActivity\",\n              deviceName: \"OnePlus3\",\n              platformVersion: \"6.0.1\"\n          }\n      }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Step Definition for Gherkin in CodeceptJS\nDESCRIPTION: Example of a step definition for the 'Given I need to open Google' step in Gherkin. Uses the actor pattern to define the implementation for the step.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_82\n\nLANGUAGE: javascript\nCODE:\n```\nconst I = actor()\n\nGiven('I need to open Google', () => {\n  I.amOnPage('https://google.com')\n})\n```\n\n----------------------------------------\n\nTITLE: Focus Element Handling\nDESCRIPTION: Demonstrates how to set focus on elements and verify visibility changes after focus events.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSee('#add-to-cart-btn');\nI.focus('#product-tile')\nI.see('#add-to-cart-bnt');\n```\n\n----------------------------------------\n\nTITLE: GraphQL Timeout Configuration\nDESCRIPTION: Example of configuring timeout settings for GraphQL requests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQLDataFactory.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"GraphQLDataFactory\": {\n   \"GraphQL\": {\n     \"timeout\": \"100000\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Portuguese Translation in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable Portuguese (Brazil) translation in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation: \"pt-BR\"\n```\n\n----------------------------------------\n\nTITLE: Form Field Interactions in CodeceptJS\nDESCRIPTION: Methods for checking form field values and selecting dropdown options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInField('Username', 'davert');\nI.selectOption('Choose Plan', 'Monthly');\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n```\n\n----------------------------------------\n\nTITLE: Using Table Parse Methods in CodeceptJS\nDESCRIPTION: Example showing how to use the parse() method to obtain simpler versions of table data. This approach uses the hashes() method to create an array of objects where each row is converted to an object.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\nGiven('I have products in my cart', (table) => { // eslint-disable-line\n  //parse the table by header\n  const tableByHeader = table.parse().hashes();\n  for (const row of tableByHeader) {\n\n    // take values\n    const name = row.name;\n    const category = row.category;\n    const price = row.price;\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Generate TypeScript Definitions\nDESCRIPTION: Command to generate TypeScript definitions for auto-completion\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs def\n```\n\n----------------------------------------\n\nTITLE: Selecting Dropdown Options in CodeceptJS\nDESCRIPTION: Selects one or multiple options in a dropdown select element. This method supports various locator strategies and can select options by visible text or value.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_65\n\nLANGUAGE: javascript\nCODE:\n```\nI.selectOption('Choose Plan', 'Monthly'); // select by label\nI.selectOption('subscription', 'Monthly'); // match option by text\nI.selectOption('subscription', '0'); // or by value\nI.selectOption('//form/select[@name=account]','Premium');\nI.selectOption('form select[name=account]', 'Premium');\nI.selectOption({css: 'form select[name=account]'}, 'Premium');\n\n// Selecting multiple options\nI.selectOption('Which OS do you use?', ['Android', 'iOS']);\n```\n\n----------------------------------------\n\nTITLE: Generated Type Definitions for Custom Helper\nDESCRIPTION: Automatically generated type definitions in steps.d.ts file for a custom helper and PageObjects.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/typescript.md#2025-04-21_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n/// <reference types='codeceptjs' />\ntype CustomHelper = import('./CustomHelper');\n\ndeclare namespace CodeceptJS {\n  interface SupportObject { I: I }\n  interface Methods extends Puppeteer, CustomHelper {}\n  interface I extends WithTranslation<Methods> {}\n  namespace Translation {\n    interface Actions {}\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Code Only in Web Mode\nDESCRIPTION: Example of using the runInWeb method to execute code specifically in web testing mode.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nI.runInWeb(() => {\n   I.waitForElement('#data');\n   I.seeInCurrentUrl('/data');\n});\n```\n\n----------------------------------------\n\nTITLE: Using Secret Function to Mask Sensitive Fields in Objects\nDESCRIPTION: Shows how to use the secret function to mask sensitive information like passwords when sending requests. This keeps sensitive data hidden in logs and reports.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_52\n\nLANGUAGE: javascript\nCODE:\n```\nI.sendPostRequest('/auth', secret({ name: 'jon', password: '123456' }, 'password'))\n```\n\n----------------------------------------\n\nTITLE: Starting Android Activity in Appium\nDESCRIPTION: Starts an arbitrary Android activity during a test session. Android-only support.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nI.startActivity('io.selendroid.testapp', '.RegisterUserActivity');\n```\n\n----------------------------------------\n\nTITLE: Writing CodeceptJS Test in Polish\nDESCRIPTION: Example of a CodeceptJS test scenario written in Polish using translated keywords and methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_8\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('Zakładanie konta free trial na stronie głównej GetResponse', ({ Ja }) => {\n    Ja.jestem_na_stronie('https://getresponse.com');\n    Ja.wypełniam_pole(\"Email address\", \"sjakubowski@getresponse.com\");\n    Ja.wypełniam_pole(\"Password\", \"digital-marketing-systems\");\n    Ja.klikam('Sign up');\n    Ja.czekam(1);\n    Ja.widzę_w_adresie_url('/account_free_created.html');\n});\n```\n\n----------------------------------------\n\nTITLE: GraphQLDataFactory Configuration\nDESCRIPTION: Configuration example for the GraphQLDataFactory helper showing endpoint setup, cleanup options, and factory definitions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQLDataFactory.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nGraphQLDataFactory: {\n   endpoint: \"http://user.com/graphql\",\n   cleanup: true,\n   headers: {\n     'Content-Type': 'application/json',\n     'Accept': 'application/json',\n   },\n   factories: {\n     createUser: {\n       query: 'mutation createUser($input: UserInput!) { createUser(input: $input) { id name }}',\n       factory: './factories/users',\n       revert: (data) => ({\n         query: 'mutation deleteUser($id: ID!) { deleteUser(id: $id) }',\n         variables: { id : data.id},\n       }),\n     },\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Resemble Helper\nDESCRIPTION: JSON configuration for setting up ResembleHelper in codecept.conf.js with screenshot, base, and diff folder paths\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/visual.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"helpers\": {\n     \"ResembleHelper\" : {\n       \"require\": \"codeceptjs-resemblehelper\",\n       \"screenshotFolder\" : \"./tests/output/\",\n       \"baseFolder\": \"./tests/screenshots/base/\",\n       \"diffFolder\": \"./tests/screenshots/diff/\"\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Output Example of Masked Password in CodeceptJS\nDESCRIPTION: This snippet shows how the masked password appears in the test output. The actual password is replaced with asterisks for security.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/secrets.md#2025-04-21_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nI fill field \"password\" \"*****\"\n```\n\n----------------------------------------\n\nTITLE: Checking Page Source in CodeceptJS\nDESCRIPTION: Verifies that the current page's raw source code contains a specified string. This method is useful for checking HTML content that may not be visible or easily accessible through the DOM.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_59\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInSource('<h1>Green eggs &amp; ham</h1>');\n```\n\n----------------------------------------\n\nTITLE: Data Management with REST API in CodeceptJS\nDESCRIPTION: Sample test showcasing the new data management capabilities using REST API and data factories introduced in CodeceptJS 1.0.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_116\n\nLANGUAGE: javascript\nCODE:\n```\n// create a user using data factories and REST API\nI.have('user', { name: 'davert', password: '123456' })\n// use it to login\nI.amOnPage('/login')\nI.fillField('login', 'davert')\nI.fillField('password', '123456')\nI.click('Login')\nI.see('Hello, davert')\n// user will be removed after the test\n```\n\n----------------------------------------\n\nTITLE: Creating a New CodeceptJS Test\nDESCRIPTION: Command to generate a new test file using CodeceptJS CLI.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs gt\n```\n\n----------------------------------------\n\nTITLE: Enabling Promise-Based Typings in CodeceptJS Config\nDESCRIPTION: Configuration setting in codecept.conf.ts to enable promise-based typings for better TypeScript integration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/typescript.md#2025-04-21_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfullPromiseBased: true;\n```\n\n----------------------------------------\n\nTITLE: Faker Transform Plugin Configuration\nDESCRIPTION: Setup for using faker.js to generate fake data in Gherkin scenario examples\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n  fakerTransform: {\n    enabled: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Taking Screenshots\nDESCRIPTION: Saves a screenshot to the output folder with specified filename.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveScreenshot('debug.png');\n```\n\n----------------------------------------\n\nTITLE: Configuring Non-Angular Application Settings\nDESCRIPTION: Configuration for testing non-Angular applications by disabling Angular-specific functionality.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n   \"helpers\": {\n     \"Protractor\" : {\n       \"url\": \"http://localhost\",\n       \"browser\": \"chrome\",\n       \"angular\": false\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Vocabulary in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable a custom vocabulary file for translations in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js or codecept.conf.ts\n// ...\n  translation: 'de_DE',\n  vocabularies: ['my_translation_file.js'],\n```\n\n----------------------------------------\n\nTITLE: Enabling CSP Bypass in Playwright\nDESCRIPTION: Configuration to enable Content Security Policy bypass in Playwright helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\n  helpers: {\n    Playwright: {\n      bypassCSP: true\n    }\n```\n\n----------------------------------------\n\nTITLE: Checking JavaScript Popup Content in CodeceptJS\nDESCRIPTION: Verifies that the active JavaScript popup (alert, confirm, or prompt) contains a specified string. This method is useful for testing user interactions that trigger browser dialogs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_58\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeInPopup('Popup text');\n```\n\n----------------------------------------\n\nTITLE: Configuring FileSystem Helper in CodeceptJS\nDESCRIPTION: Shows how to enable the FileSystem helper in the CodeceptJS configuration file\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/FileSystem.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n    FileSystem: {},\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Helper with CA Certificate in CodeceptJS\nDESCRIPTION: Example configuration for the REST helper in CodeceptJS with a custom CA certificate.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    REST: {\n      endpoint: 'http://site.com/api',\n      prettyPrintJson: true,\n      httpAgent: {\n         ca: fs.readFileSync(__dirname + '/path/to/ca.pem'),\n         rejectUnauthorized: false,\n         keepAlive: true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Tesults Plugin for CodeceptJS\nDESCRIPTION: Command to install the codeceptjs-tesults plugin via NPM for enabling automatic test result submission to Tesults platform after test runs complete.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nnpm i codeceptjs-tesults --save\n```\n\n----------------------------------------\n\nTITLE: Enabling Polish Translation in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable Polish translation in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation: \"pl-PL\"\n```\n\n----------------------------------------\n\nTITLE: Executing Dry Run in CodeceptJS\nDESCRIPTION: Command to print test scenario steps without actual execution. Cannot execute scenarios with grab* methods or custom code.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_95\n\nLANGUAGE: shell\nCODE:\n```\nnpx codeceptjs dry-run\n```\n\n----------------------------------------\n\nTITLE: Tapping Return Key in CodeceptJS Detox\nDESCRIPTION: This snippet demonstrates how to tap the return key on a specific input field. The field can be located by text, accessibility id, or id.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nI.tapReturnKey('Username');\nI.tapReturnKey('~name');\nI.tapReturnKey({ android: 'NAME', ios: 'name' });\n```\n\n----------------------------------------\n\nTITLE: Verifying Unchecked Checkboxes in CodeceptJS\nDESCRIPTION: Demonstrates how to verify that a checkbox is not checked using different locator strategies.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCheckboxIsChecked('#agree'); // located by ID\nI.dontSeeCheckboxIsChecked('I agree to terms'); // located by label\nI.dontSeeCheckboxIsChecked('agree'); // located by name\n```\n\n----------------------------------------\n\nTITLE: Multiple Browser Configuration in CodeceptJS with Trace Support\nDESCRIPTION: This configuration demonstrates how to set up multiple browser profiles in CodeceptJS with Playwright. It includes settings for tracing, wait timeouts, and browser selection for running tests in parallel.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_54\n\nLANGUAGE: javascript\nCODE:\n```\n  helpers: {\n    Playwright: {\n      url: 'https://github.com',\n      show: false,\n      browser: 'chromium',\n      waitForNavigation: 'load',\n      waitForTimeout: 30_000,\n      trace: true,\n      keepTraceForPassedTests: true\n    },\n  },\n  multiple: {\n    profile1: {\n      browsers: [\n        {\n          browser: \"chromium\",\n        }\n      ]\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Setting HTTP Headers in CodeceptJS\nDESCRIPTION: Adds or clears header overrides for HTTP requests. Can set custom headers or reset all headers to default.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nI.haveHeader('x-my-custom-header', 'some value');\nI.haveHeader(); // clear headers\n```\n\n----------------------------------------\n\nTITLE: Including Custom Step Files\nDESCRIPTION: Configuration example showing how to include custom step files in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\n  include: {\n    Je: './steps_file.js'\n  }\n```\n\n----------------------------------------\n\nTITLE: Implementing custom error handling in Nightmare helper\nDESCRIPTION: Demonstrates how to implement custom error handling for JavaScript errors in a Nightmare helper using _before and _afterStep hooks.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_119\n\nLANGUAGE: javascript\nCODE:\n```\n_before() {\n  this.err = null;\n  this.helpers['Nightmare'].browser.on('page', (type, message, stack) => {\n    this.err = `${message} ${stack}`;\n  });\n}\n\n_afterStep() {\n if (this.err) throw new Error('Browser JS error '+this.err);\n}\n```\n\n----------------------------------------\n\nTITLE: Interactive Pause in CodeceptJS for Test Writing\nDESCRIPTION: Demonstrates how to use interactive pause in CodeceptJS to facilitate test writing by allowing manual interaction with the browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/webdriver.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Sample Test');\n\nScenario('open my website', ({ I }) => {\n  I.amOnPage('/');\n  pause();\n});\n```\n\n----------------------------------------\n\nTITLE: Scrolling Page in JavaScript with CodeceptJS\nDESCRIPTION: Provides methods to scroll the page to the top or bottom.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToBottom();\nI.scrollPageToTop();\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions with CodeceptJS\nDESCRIPTION: Command for generating TypeScript definition files for the 'I' object to provide IDE autocompletion support. This feature was introduced in version 0.3.5 by @kaflan.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_102\n\nLANGUAGE: bash\nCODE:\n```\ncodeceptjs def\n```\n\n----------------------------------------\n\nTITLE: Browser Management in CodeceptJS\nDESCRIPTION: Controls browser restart and context configuration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\nI.restartBrowser({ timezoneId: 'America/Phoenix' });\nI.amOnPage('/');\nI.restartBrowser({ permissions: ['clipboard-read', 'clipboard-write'] });\n```\n\n----------------------------------------\n\nTITLE: Using Conditional Runner for Platform-Specific Code in Appium\nDESCRIPTION: Example of using 'runOnAndroid' to conditionally execute code only on specific Android platform versions by checking capabilities dynamically.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_111\n\nLANGUAGE: javascript\nCODE:\n```\nI.runOnAndroid(\n  caps => caps.platformVersion >= 7,\n  () => {\n    // run code only on Android 7+\n  },\n)\n```\n\n----------------------------------------\n\nTITLE: Printing cURL Commands in REST Helper\nDESCRIPTION: Shows how to enable printing of cURL commands for REST API requests in the configuration file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nConfig:\n\n...\nREST: {\n ...\n printCurl: true,\n ...\n}\n...\n\n› [CURL Request] curl --location --request POST https://httpbin.org/post -H ...\n```\n\n----------------------------------------\n\nTITLE: Example of Problematic React HTML Output\nDESCRIPTION: Shows a typical example of generated HTML from React applications with complex class names and nested spans, demonstrating why traditional selectors can be challenging to use.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/react.md#2025-04-21_snippet_0\n\nLANGUAGE: js\nCODE:\n```\n<div class=\"jss607 jss869 jss618 jss871 jss874 jss876\" tabindex=\"0\" role=\"tab\" aria-selected=\"true\" style=\"pointer-events: auto;\">\n  <span class=\"jss877\">\n    <span class=\"jss878\">\n      <span class=\"jss879\">Click Me!</span>\n    </span>\n  </span>\n<span class=\"jss610\"></span></div>\n```\n\n----------------------------------------\n\nTITLE: Setting Device Orientation in CodeceptJS Detox\nDESCRIPTION: These snippets demonstrate how to switch the device orientation to landscape or portrait mode using setLandscapeOrientation and setPortraitOrientation methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nI.setLandscapeOrientation();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.setPortraitOrientation();\n```\n\n----------------------------------------\n\nTITLE: Updating Device Settings in Appium\nDESCRIPTION: Updates current settings on the device. Supports both Android and iOS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.setSettings({cyberdelia: 'open'});\n```\n\n----------------------------------------\n\nTITLE: Connecting Puppeteer to Remote Browser\nDESCRIPTION: Example of configuring Puppeteer to connect to a remote browser instance using a WebSocket endpoint.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Puppeteer: {\n       url: \"http://localhost\",\n       chrome: {\n         browserWSEndpoint: \"ws://localhost:9222/devtools/browser/c5aa6160-b5bc-4d53-bb49-6ecb36cd2e0a\"\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Tests with Directory Specification\nDESCRIPTION: Command to run a specific test file within a specific directory by providing the configuration path.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_93\n\nLANGUAGE: bash\nCODE:\n```\ncodeceptjs run users_test.js -c tests\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Installation Command\nDESCRIPTION: Command to install CodeceptJS via npm package manager\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i codeceptjs --save-dev\n```\n\n----------------------------------------\n\nTITLE: Launching CodeceptUI in Application Mode\nDESCRIPTION: Command to start CodeceptUI as an Electron application in desktop window mode\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ui.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx codecept-ui --app\n```\n\n----------------------------------------\n\nTITLE: Implementing a Page Object for TodoMVC\nDESCRIPTION: Example of a Page Object implementation for the TodoMVC application, containing reusable methods for common actions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/testcafe.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n// inside todos_page.js\nconst { I } = inject();\n\nmodule.exports = {\n    goto() {\n        I.amOnPage('http://todomvc.com/examples/angularjs/#/')\n    },\n\n    enterTodo(todo) {\n        I.fillField('.new-todo', todo)\n        I.pressKey('Enter')\n    },\n\n    seeNumberOfTodos(numberOfTodos) {\n        I.seeNumberOfVisibleElements('.todo-list li', numberOfTodos)\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Applitools Helper Packages\nDESCRIPTION: Commands to install required packages for Applitools integration\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/visual.md#2025-04-21_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nnpm i codeceptjs-applitoolshelper --save\nnpm i webdriverio@5 --save\n```\n\n----------------------------------------\n\nTITLE: Locate Elements Example in JavaScript\nDESCRIPTION: Example showing how to locate elements and get their values using the Nightmare helper's _locate method\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nlet browser = this.helpers['Nightmare'].browser;\nlet value = this.helpers['Nightmare']._locate({name: 'password'}).then(function(els) {\n  return browser.evaluate(function(el) {\n    return codeceptjs.fetchElement(el).value;\n  }, els[0]);\n});\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with Verbose Option\nDESCRIPTION: Command to run CodeceptJS with verbose option, showing more technical details including error stack traces, global promises, and events.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --verbose\n```\n\n----------------------------------------\n\nTITLE: Screenshot Capture in CodeceptJS\nDESCRIPTION: Saves screenshots of elements or full page to output folder with specified filename.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveElementScreenshot(`#submit`,'debug.png');\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png', true)\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with Puppeteer\nDESCRIPTION: Install CodeceptJS and Puppeteer testing framework into the current directory using create-codeceptjs installer with puppeteer flag.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/installation.md#2025-04-21_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-codeceptjs . --puppeteer\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Translation File for CodeceptJS\nDESCRIPTION: Example of creating a custom translation file with localized keywords and action names for CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = {\n  I: 'Ya',\n  contexts: {\n    Feature: 'Feature',\n    Scenario: 'Szenario',\n    Before: 'Vor',\n    After: 'Nach',\n    BeforeSuite: 'vor_der_suite',\n    AfterSuite: 'nach_der_suite',\n  },\n  actions: {\n    click: 'Klicken',\n    wait: 'Wartenn',\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Accessing TestCafe Controller Methods\nDESCRIPTION: Example showing how to directly access TestCafe controller methods for advanced interactions like hovering and clicking.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst testcafeTestController = this.helpers['TestCafe'].t;\nconst comboBox = Selector('.combo-box');\nawait testcafeTestController\n  .hover(comboBox) // hover over combo box\n  .click('#i-prefer-both') // click some other element\n```\n\n----------------------------------------\n\nTITLE: Implementing async bootstrap in CodeceptJS\nDESCRIPTION: Shows how to implement an asynchronous bootstrap file in CodeceptJS using a function that accepts a done callback.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_124\n\nLANGUAGE: javascript\nCODE:\n```\nmodule.exports = function (done) {\n  // async instructions\n  // call done() to continue execution\n  // otherwise call done('error description')\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Sauce Labs Service in CodeceptJS\nDESCRIPTION: This snippet shows how to enable and configure the Sauce Labs service in CodeceptJS. It requires the @wdio/sauce-service package to be installed and compatible with the current WebdriverIO version. The configuration includes Sauce Labs username and API key.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n   wdio: {\n       enabled: true,\n       services: ['sauce'],\n       user: ... ,// saucelabs username\n       key: ... // saucelabs api key\n       // additional config, from sauce service\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Executing Synchronous JavaScript in CodeceptJS\nDESCRIPTION: Executes synchronous JavaScript in the browser context. Additional parameters can be passed to the function, and the function can return values to the test.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\n// change date of jQuery DatePicker\nI.executeScript(function() {\n  // now we are inside browser context\n  $('date').datetimepicker('setDate', new Date());\n});\n```\n\nLANGUAGE: javascript\nCODE:\n```\nlet date = await I.executeScript(function(el) {\n  // only basic types can be returned\n  return $(el).datetimepicker('getDate').toString();\n}, '#date'); // passing jquery selector\n```\n\n----------------------------------------\n\nTITLE: Installing Testrail Plugin for CodeceptJS\nDESCRIPTION: Command to install the codeceptjs-testrail plugin via NPM for enabling Testrail integration with CodeceptJS. This plugin allows automatic test run creation and failed test screenshot attachments.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nnpm i codeceptjs-testrail --save\n```\n\n----------------------------------------\n\nTITLE: Setting Request Timeout in CodeceptJS REST Helper\nDESCRIPTION: Example of setting a custom timeout for REST requests in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/REST.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nI.setRequestTimeout(10000); // In milliseconds\n```\n\n----------------------------------------\n\nTITLE: Running Tests on a Specific Browser Profile in CodeceptJS\nDESCRIPTION: Command to run tests in parallel on a specific browser profile, using a defined number of worker threads.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/parallel.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs run-workers 2 profile1 -c codecept.conf.js\n```\n\n----------------------------------------\n\nTITLE: URL Comparison in CodeceptJS\nDESCRIPTION: Verifies that current URL does not match the provided URL, supporting both relative and absolute URLs.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCurrentUrlEquals('/login'); // relative url are ok\nI.dontSeeCurrentUrlEquals('http://mysite.com/login'); // absolute urls are also ok\n```\n\n----------------------------------------\n\nTITLE: Colored Console Output with I.say()\nDESCRIPTION: Example showing how to use I.say() method with color parameters to output colored text to console during test execution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_101\n\nLANGUAGE: javascript\nCODE:\n```\nI.say('This is red', 'red') //red is used\nI.say('This is blue', 'blue') //blue is used\nI.say('This is by default') //cyan is used\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Helper in CodeceptJS\nDESCRIPTION: This configuration snippet shows how to enable the AI helper in CodeceptJS. It allows for arbitrary AI prompts and interactions during test execution or in interactive mode.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf\nhelpers: {\n  // Playwright, Puppeteer, or WebDrver helper should be enabled too\n  Playwright: {\n  },\n\n  AI: {}\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Settings in Appium\nDESCRIPTION: Gets all currently specified settings from the device.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\nlet settings = await I.grabSettings();\n```\n\n----------------------------------------\n\nTITLE: Recording Network Traffic in CodeceptJS\nDESCRIPTION: Example of recording and verifying network traffic for specific resources.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_17\n\nLANGUAGE: javascript\nCODE:\n```\nI.startRecordingTraffic()\nI.amOnPage('https://codecept.io/')\nI.seeTraffic({ name: 'traffics', url: 'https://codecept.io/img/companies/BC_LogoScreen_C.jpg' })\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Puppeteer Sandbox Issues\nDESCRIPTION: Example of disabling the sandbox when running Puppeteer on CI to resolve 'No usable sandbox!' errors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n     Puppeteer: {\n        url: 'http://localhost',\n        show: false,\n        chrome: {\n          args: ['--no-sandbox', '--disable-setuid-sandbox']\n        }\n      },\n    }\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Detox Test Example\nDESCRIPTION: Equivalent test written using CodeceptJS syntax, demonstrating simplified and more readable test code.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/detox.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.see('Welcome');\nI.dontSeeElement('#createdAndVisibleText');\nI.click('#GoButton');\nI.waitForElement('#createdAndVisibleText', 20);\nI.seeElement('#createdAndVisibleText');\n```\n\n----------------------------------------\n\nTITLE: Scrolling to Element in JavaScript with CodeceptJS\nDESCRIPTION: Scrolls to an element matched by a locator. Additional offset can be specified with offsetX and offsetY parameters.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollTo('footer');\nI.scrollTo('#submit', 5, 5);\n```\n\n----------------------------------------\n\nTITLE: Using DataTable with Secret Passwords in CodeceptJS\nDESCRIPTION: This code demonstrates how to use DataTable in CodeceptJS with secret passwords. It creates a table with role, username, and password columns, and shows how to mask sensitive data in test output using the secret() function.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_46\n\nLANGUAGE: javascript\nCODE:\n```\nconst accounts = new DataTable(['role', 'username', 'password']);\naccounts.add([\n  'ROLE_A',\n  process.env['FIRST_USERNAME'],\n  secret(process.env['FIRST_PASSWORD']),\n]);\naccounts.add([\n  'ROLE_B',\n  process.env['SECOND_USERNAME'],\n  secret(process.env['SECOND_PASSWORD']),\n]);\n\nData(accounts)\n  .Scenario(\n    'ScenarioTitle',\n    ({ I, pageObject, current }) => {\n      I.say(\"Given I'am logged in\");\n      I.amOnPage('/');\n      loginPage.**sendForm**(current.username, current.password);\n  )\n\n\n // output\n The test feature --\n  The scenario | {\"username\":\"Username\",\"password\": ***}\n      'The real password: theLoggedPasswordInCleartext'\n      I.fillField('somePasswordLocator', '****')\n  ✔ OK in 7ms\n\n  The scenario | {\"username\":\"theSecondUsername\",\"password\": ***}\n      'The real password: theLoggedPasswordInCleartext'\n      I.fillField('somePasswordLocator', '****')\n  ✔ OK in 1ms\n```\n\n----------------------------------------\n\nTITLE: React Locator Pattern in WebDriver\nDESCRIPTION: Example of using experimental React component locators in WebDriver. This allows targeting React elements by component name, props, and state.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_74\n\nLANGUAGE: javascript\nCODE:\n```\n// locating React element by name, prop, state\nI.click({ react: 'component-name', props: {}, state: {} })\nI.seeElement({ react: 'component-name', props: {}, state: {} })\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with create-codeceptjs\nDESCRIPTION: Command to install CodeceptJS along with demo project and Playwright using the all-in-one installer\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/quickstart.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx create-codeceptjs .\n```\n\n----------------------------------------\n\nTITLE: Mobile Testing with Appium in CodeceptJS\nDESCRIPTION: Sample test demonstrating mobile app testing capabilities added in CodeceptJS 1.0 using Appium helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_115\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeAppIsInstalled(\"io.super.app\");\nI.click('~startUserRegistrationCD');\nI.fillField('~email of the customer', 'Nothing special'));\nI.see('davert@codecept.io', '~email of the customer'));\nI.clearField('~email of the customer'));\nI.dontSee('Nothing special', '~email of the customer'));\n```\n\n----------------------------------------\n\nTITLE: Initializing CodeceptJS Project\nDESCRIPTION: Creates a codecept.conf.js file in the current or specified directory using the 'init' command.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs init\n```\n\nLANGUAGE: sh\nCODE:\n```\nnpx codecept init test\n```\n\n----------------------------------------\n\nTITLE: Pressing Keys in JavaScript with CodeceptJS\nDESCRIPTION: Presses a key or combination of keys on a focused element. Special keys and modifier keys are supported.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKey('Enter');\nI.pressKey(['Control','a']);\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeceptJS Heal Plugin\nDESCRIPTION: Configuration snippet showing how to enable the heal plugin in CodeceptJS config file after requiring the recipes file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/heal.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nrequire('./heal')\n\nexports.config = {\n  // ...\n  plugins: {\n    heal: {\n      enabled: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS with TypeScript Support\nDESCRIPTION: Command to initialize a new CodeceptJS project with TypeScript support using npx.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/typescript.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs init\n```\n\n----------------------------------------\n\nTITLE: Appending Text to Fields with Puppeteer\nDESCRIPTION: Examples of using appendField to add text to input fields or textareas.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.appendField('#myTextField', 'appended');\n// typing secret\nI.appendField('password', secret('123456'));\n```\n\n----------------------------------------\n\nTITLE: Enabling French Translation in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable French translation in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation: \"fr-FR\"\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution in CodeceptJS\nDESCRIPTION: Pauses the test execution for a specified number of seconds using the wait method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nI.wait(2); // wait 2 secs\n```\n\n----------------------------------------\n\nTITLE: Configuring Mochawesome Helper in CodeceptJS\nDESCRIPTION: This snippet shows how to configure the Mochawesome helper in the CodeceptJS configuration file. It includes options for output directory, inline assets, and autoOpen feature.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Mochawesome.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n\"helpers\": {\n  \"Mochawesome\" : {\n    \"uniqueScreenshotNames\": \"true\"\n  }\n},\n\"mocha\": {\n  \"reporterOptions\": {\n    \"reportDir\": \"output\",\n    \"inlineAssets\": true,\n    \"autoOpen\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Language Support in CodeceptJS\nDESCRIPTION: This configuration example shows how to set up CodeceptJS to use a custom language for test steps. It demonstrates including a custom steps file with a different actor name (Je instead of I).\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_50\n\nLANGUAGE: javascript\nCODE:\n```\n  include: {\n    Je: './steps_file.js'\n  }\n```\n\n----------------------------------------\n\nTITLE: Creating Selenoid Container with Docker CLI\nDESCRIPTION: Command to create a Selenoid container using Docker CLI, specifying volume mounts and environment variables.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_20\n\nLANGUAGE: bash\nCODE:\n```\ndocker create                                    \\\n--name selenoid                                  \\\n-p 4444:4444                                     \\\n-v /var/run/docker.sock:/var/run/docker.sock     \\\n-v `pwd`/:/etc/selenoid/:ro                      \\\n-v `pwd`/output/video/:/opt/selenoid/video/      \\\n-e OVERRIDE_VIDEO_OUTPUT_DIR=`pwd`/output/video/ \\\naerokube/selenoid:latest-release\n```\n\n----------------------------------------\n\nTITLE: Configuring stepByStepReport Plugin in JavaScript\nDESCRIPTION: Example configuration for the stepByStepReport plugin in CodeceptJS. It shows how to enable the plugin for generating step-by-step reports with screenshots.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\n\"plugins\": {\n   \"stepByStepReport\": {\n     \"enabled\": true\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Video Recording for Failed Tests in CodeceptJS\nDESCRIPTION: This snippet shows how to enable video recording for failed tests in CodeceptJS using Playwright, configuring the video option in the helper settings.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nexports.config = {\n  helpers: {\n    Playwright: {\n      // ...\n      video: true\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Basic FileSystem Helper Usage in CodeceptJS\nDESCRIPTION: Demonstrates basic usage of FileSystem helper methods for checking files and their contents\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/FileSystem.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nI.amInPath('test');\nI.seeFile('codecept.js');\nI.seeInThisFile('FileSystem');\nI.dontSeeInThisFile(\"WebDriver\");\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS and TestCafe\nDESCRIPTION: Command to install CodeceptJS and TestCafe via NPM. This is the first step to set up the testing environment.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/testcafe.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i codeceptjs testcafe --save-dev\n```\n\n----------------------------------------\n\nTITLE: Improved API Factory Loading in CodeceptJS\nDESCRIPTION: This snippet demonstrates the new syntax for using API factories in CodeceptJS. It shows three different ways to export a factory, including using ES6 export, default export, and CommonJS module.exports.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_38\n\nLANGUAGE: javascript\nCODE:\n```\nexport = new Factory()\n   .attr('name', () => faker.name.findName())\n   .attr('job', () => 'leader');\n\nexport default new Factory()\n   .attr('name', () => faker.name.findName())\n   .attr('job', () => 'leader');\n\nmodules.export = new Factory()\n   .attr('name', () => faker.name.findName())\n   .attr('job', () => 'leader');\n```\n\n----------------------------------------\n\nTITLE: Renaming Helper Methods in Puppeteer and Playwright\nDESCRIPTION: This snippet shows the renaming of the haveRequestHeaders method in Puppeteer and Playwright helpers to avoid confusion with the REST helper. The new method names are setPuppeteerRequestHeaders and setPlaywrightRequestHeaders respectively.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_37\n\nLANGUAGE: javascript\nCODE:\n```\nRenamed haveRequestHeaders of Puppeteer, Playwright helper so that it would not confuse the REST helper.\nPuppeteer: setPuppeteerRequestHeaders\nPlaywright: setPlaywrightRequestHeaders\n```\n\n----------------------------------------\n\nTITLE: Recording WebSocket Messages in CodeceptJS Puppeteer\nDESCRIPTION: Shows how to record and verify WebSocket messages during test execution using Puppeteer helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_15\n\nLANGUAGE: javascript\nCODE:\n```\n      I.startRecordingWebSocketMessages();\n      I.amOnPage('https://websocketstest.com/');\n      I.waitForText('Work for You!');\n      const wsMessages = I.grabWebSocketMessages();\n      expect(wsMessages.length).to.greaterThan(0);\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Community Helpers Markdown\nDESCRIPTION: Markdown document listing various community helpers and plugins for CodeceptJS with links and descriptions organized by category.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/community-helpers.md#2025-04-21_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n---\npermalink: /community-helpers\ntitle: Community Helpers\neditLink: false\n---\n\n# Community Helpers\n> Share your helpers at our [Wiki Page](https://github.com/codeceptjs/CodeceptJS/wiki/Community-Helpers)\n\nHere is the list of helpers created by our community.\nPlease **add your own** by editing this page.\n## Webhooks\n\n* [codeceptjs-webhook-helper](https://github.com/onemolegames/codeceptjs-webhook-helper) - to check webhook calls during the tests.\n\n## Email Checking\n\n* [MailCatcher](https://gist.github.com/schmkr/026732dfa1627b927ff3a08dc31ee884) - to check emails via Mailcatcher locally.\n* [codeceptjs-mailhog-helper](https://github.com/tsuemura/codeceptjs-mailhog-helper) - to check emails via Mailhog locally.\n* [codeceptjs-testmailapp-helper](https://github.com/pavkam/codeceptjs-testmailapp-helper) - to check emails via Testmail.app service.\n* [codeceptjs-mailosaurhelper](https://github.com/yurkovychv/codeceptjs-mailosaur) - to check emails via [Mailosaur](https://mailosaur.com/) service.\n\n## Data Sources\n\n* [codeceptjs-httpmock](https://github.com/testphony/codeceptjs-httpMock) -  a helper which wraps mockttp library to manage http mock in tests.\n* [codeceptjs-http](https://github.com/testphony/codeceptjs-http) - a helper which wraps then-request library to process HTTP requests. It's alternative helper that provides more flexible request management.\n* [codeceptjs-dbhelper](https://github.com/thiagodp/codeceptjs-dbhelper) - allows you to execute queries or commands to databases using database-js. \n\n## Cloud Providers\n* [codeceptjs-saucehelper](https://github.com/puneet0191/codeceptjs-saucehelper/) - a helper which updates `Test Names` & `Test Results` on Saucelabs \n* [codeceptjs-bshelper](https://github.com/PeterNgTr/codeceptjs-bshelper) - a helper which updates `Test Names` & `Test Results` on Browserstack \n* [codeceptjs-tbhelper](https://github.com/testingbot/codeceptjs-tbhelper) - a helper which updates `Test Names` & `Test Results` on TestingBot \n\n## Visual-Testing\n* [codeceptjs-resemblehelper](https://github.com/puneet0191/codeceptjs-resemblehelper) - a helper which helps with visual testing using resemble.js. \n* [codeceptjs-applitoolshelper](https://www.npmjs.com/package/codeceptjs-applitoolshelper) - a helper which helps interaction with [Applitools](https://applitools.com)\n* [codeceptjs-pixelmatchhelper](https://github.com/stracker-phil/codeceptjs-pixelmatchhelper) - a helper that integrates pixelmatch for visual testing. \n\n## Reporters\n* [codeceptjs-rphelper](https://github.com/reportportal/agent-js-codecept) is a CodeceptJS helper which can publish tests results on ReportPortal after execution.\n* [codeceptjs-xray-helper](https://www.npmjs.com/package/codeceptjs-xray-helper) is a CodeceptJS helper which can publish tests results on [XRAY](https://confluence.xpand-it.com/display/XRAYCLOUD/Import+Execution+Results+-+REST).\n* [codeceptjs-xray-cloud-helper](https://www.npmjs.com/package/codeceptjs-xray-cloud-helper) is a helper that automatically retrieves the result of CodeceptJS tests and sends them to XRAY/JIRA(cloud version) via [XRAY Cloud API](https://docs.getxray.app/display/XRAYCLOUD/Import+Execution+Results+-+REST+v2#ImportExecutionResultsRESTv2-XrayJSONresults).\n* [codeceptjs-slack-reporter](https://www.npmjs.com/package/codeceptjs-slack-reporter) Get a Slack notification when one or more scenarios fail.\n* [codeceptjs-browserlogs-plugin](https://github.com/pavkam/codeceptjs-browserlogs-plugin) Record the browser logs for failed tests.\n* [codeceptjs-testrail](https://github.com/PeterNgTr/codeceptjs-testrail) - a plugin to integrate with [Testrail](https://www.gurock.com/testrail)\n* [codeceptjs-monocart-coverage](https://github.com/cenfun/codeceptjs-monocart-coverage) - a plugin to generate coverage reports, it integrate with [monocart coverage reports](https://github.com/cenfun/monocart-coverage-reports)\n\n## Browser request control\n* [codeceptjs-resources-check](https://github.com/luarmr/codeceptjs-resources-check) Load a URL with Puppeteer and listen to the requests while the page is loading. Enabling count the number or check the sizes of the requests.\n\n## Assertion & Validations\n* [codeceptjs-chai](https://www.npmjs.com/package/codeceptjs-chai) is a CodeceptJS helper which wraps\n[chai](https://www.chaijs.com/) library to complete chai assertion steps with CodeceptJS logging.\n\n## Other\n\n* [codeceptjs-cmdhelper](https://github.com/thiagodp/codeceptjs-cmdhelper) allows you to run commands in the terminal/console\n* [eslint-plugin-codeceptjs](https://www.npmjs.com/package/eslint-plugin-codeceptjs) Eslint rules for CodeceptJS.\n* [codeceptjs-datalayer-helper](https://github.com/kobenguyent/codeceptjs-datalayer-helper) CodeceptJS DataLayer helper helps you to get the datalayer JavaScript array that is used to store information and send this data to the tag manager.\n* [codeceptjs-a11y-helper](https://github.com/kobenguyent/codeceptjs-a11y-helper) accessibility tests integrated with CodeceptJS - Playwright-axe\n* [codeceptjs-lighthouse-helper](https://github.com/kobenguyent/codeceptjs-lighthouse-helper) lighthouse audit integrated with CodeceptJS - Playwright\n* [Snowplow Data analytics](https://www.npmjs.com/package/@viasat/codeceptjs-snowplow-helper) - Test your Snowplow events implementations with CodeceptJS and Snowplow Micro.\n* [codeceptjs-failure-logger](https://github.com/kobenguyent/codeceptjs-failure-logger) - Log failed CodeceptJS tests to file\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Locator Plugin with Multiple Attributes\nDESCRIPTION: Example configuration for the customLocator plugin allowing the specification of multiple attributes to use as selectors with a custom prefix.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_53\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n customLocator: {\n   enabled: true,\n   prefix: '$',\n   attribute: ['data-qa', 'data-test'],\n }\n}\n```\n\n----------------------------------------\n\nTITLE: Running Dry Run with Grep Pattern in CodeceptJS CLI\nDESCRIPTION: Shows how to use the dry-run command with a grep pattern to filter tests in the CodeceptJS CLI.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\n> codeceptjs dry-run --steps --grep \"(?=.*Checkout process)\"\n```\n\n----------------------------------------\n\nTITLE: Invoking CodeceptJS Installer for Vue Project\nDESCRIPTION: Command to add CodeceptJS to a Vue project using the Vue CLI plugin system.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/vue.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nvue invoke vue-cli-plugin-codeceptjs-puppeteer\n```\n\n----------------------------------------\n\nTITLE: Listing CodeceptJS Commands\nDESCRIPTION: Prints all available methods of 'I' object to the console using the 'list' command.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs list\n```\n\n----------------------------------------\n\nTITLE: Aborting Image Requests in CodeceptJS Puppeteer\nDESCRIPTION: Shows how to mock and abort specific types of network requests using pattern matching.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_21\n\nLANGUAGE: javascript\nCODE:\n```\nI.mockRoute('**/*.{png,jpg,jpeg}', route => route.abort());\n\n// To disable mocking for a route call `stopMockingRoute`\n// for previously mocked URL\nI.stopMockingRoute('**/*.{png,jpg,jpeg}');\n```\n\n----------------------------------------\n\nTITLE: Enabling Italian Translation in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable Italian translation in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation: \"it-IT\"\n```\n\n----------------------------------------\n\nTITLE: Counting Visible Elements with CodeceptJS\nDESCRIPTION: Uses the seeNumberOfVisibleElements method to assert that an element is visible a specific number of times. Elements are located by CSS or XPath.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_61\n\nLANGUAGE: javascript\nCODE:\n```\nI.seeNumberOfVisibleElements('.buttons', 3);\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Translation in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable a custom translation file in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_18\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation: \"MyLang\",\nvocabularies: [\"./relative/path/to/your/translation.js\"]\n```\n\n----------------------------------------\n\nTITLE: French Translation Keywords and Wait Command Fix for CodeceptJS\nDESCRIPTION: This commit note explains changes to French translation keywords in CodeceptJS and fixes an issue with the 'waitForClickable' command having the same translation as 'wait', which caused it to use the deprecated version.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_47\n\nLANGUAGE: javascript\nCODE:\n```\n- Add some french keywords for translation\n- I.waitForClickable has the same \"attends\" than I.wait. Using \"attends\" leads to use the deprecated waitForClickable. Fix it by using different words.\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Docker Container Locally\nDESCRIPTION: Command to run CodeceptJS Docker container locally, mounting the current directory to /tests in the container.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ndocker run --net=host -v $PWD:/tests codeception/codeceptjs\n```\n\n----------------------------------------\n\nTITLE: Writing CodeceptJS Test in Chinese (Simplified)\nDESCRIPTION: Example of a CodeceptJS test scenario written in Chinese (Simplified) using translated keywords and methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('CodeceptJS 演示');\n\nScenario('成功提交表单', ({ 我 }) => {\n    我.在页面('/documentation')\n    我.填写字段('电邮', 'hello@world.com')\n    我.填写字段('密码', '123456')\n    我.勾选选项('激活')\n    我.勾选选项('男');\n    我.单击('创建用户')\n    我.看到('用户名可用')\n    我.在当前网址中看不到('/documentation')\n});\n```\n\n----------------------------------------\n\nTITLE: Writing CodeceptJS Test in Italian\nDESCRIPTION: Example of a CodeceptJS test scenario written in Italian using translated keywords and methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nCaratteristica('Effettuare il Login su GitHub', (io) => {\n    io.sono_sulla_pagina('https://github.com/login');\n    io.compilo_il_campo(\"Username or email address\", \"giuseppe-santoro\");\n    io.compilo_il_campo(\"Password\", \"*********\");\n    io.faccio_click_su(\"Sign in\");\n    io.vedo(\"Learn Git and GitHub without any code!\");\n});\n```\n\n----------------------------------------\n\nTITLE: Configuring SoftExpectHelper in CodeceptJS\nDESCRIPTION: Example of how to configure SoftExpectHelper in the CodeceptJS configuration file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/SoftExpectHelper.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\n{\n  helpers: {\n    Playwright: {...},\n    SoftExpectHelper: {},\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Dependency Injection Example\nDESCRIPTION: Shows how to use the global inject() function to require actor and page objects using dependency injection\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_98\n\nLANGUAGE: javascript\nCODE:\n```\n// old way\nconst I = actor()\nconst myPage = require('../page/myPage')\n\n// new way\nconst { I, myPage } = inject()\n```\n\n----------------------------------------\n\nTITLE: Installing vue-cli-plugin-codeceptjs-puppeteer\nDESCRIPTION: Command to install the CodeceptJS plugin for Vue CLI using npm. This installs CodeceptJS, CodeceptUI, and Puppeteer with Chrome browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/vue.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm i vue-cli-plugin-codeceptjs-puppeteer --save-dev\n```\n\n----------------------------------------\n\nTITLE: Implementing Flexible Retry Configuration in CodeceptJS\nDESCRIPTION: Advanced retry configuration that allows different retry settings for different test categories using grep patterns. Enables granular control over retry attempts for various hooks and scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nretry: [\n  {\n    // enable this config only for flaky tests\n    grep: '@flaky',\n    Before: 3 // retry Before 3 times\n    Scenario: 3 // retry Scenario 3 times\n  },\n  {\n    // retry less when running slow tests\n    grep: '@slow'\n    Scenario: 1\n    Before: 1\n  }, {\n    // retry all BeforeSuite 3 times\n    BeforeSuite: 3\n  }\n]\n```\n\n----------------------------------------\n\nTITLE: Displaying CodeceptJS Environment Information\nDESCRIPTION: Example output of the improved CLI info command showing installed versions, browsers, and helper configurations.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n➜  helloworld npx codeceptjs info\nEnvironment information:\n\ncodecepVersion:  \"3.7.2\"\nnodeInfo:  18.19.0\nosInfo:  macOS 14.4\ncpuInfo:  (8) x64 Apple M1 Pro\nosBrowsers:  \"chrome: 133.0.6943.143, edge: 133.0.3065.92, firefox: not installed, safari: 17.4\"\nplaywrightBrowsers:  \"chromium: 133.0.6943.16, firefox: 134.0, webkit: 18.2\"\nhelpers:  {\n\"Playwright\": {\n\"url\": \"http://localhost\",\n...\n```\n\n----------------------------------------\n\nTITLE: ApiFactory Export Patterns for Factory Creation\nDESCRIPTION: Multiple export patterns for creating and exporting factories in CodeceptJS. The snippet demonstrates three different syntax options for exporting a Factory object with attributes using ES modules and CommonJS formats.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_40\n\nLANGUAGE: javascript\nCODE:\n```\nexport = new Factory()\n   .attr('name', () => faker.name.findName())\n   .attr('job', () => 'leader');\n\nexport default new Factory()\n   .attr('name', () => faker.name.findName())\n   .attr('job', () => 'leader');\n\nmodules.export = new Factory()\n   .attr('name', () => faker.name.findName())\n   .attr('job', () => 'leader');\n```\n\n----------------------------------------\n\nTITLE: Electron App Main File for Playwright Testing\nDESCRIPTION: Sample Electron application main file for testing with Playwright. This creates a basic Electron window that loads an example website.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nconst { app, BrowserWindow } = require(\"electron\");\n\nfunction createWindow() {\n  const window = new BrowserWindow({ width: 800, height: 600 });\n  window.loadURL(\"https://example.com\");\n}\n\napp.whenReady().then(createWindow);\n```\n\n----------------------------------------\n\nTITLE: Finding Field Elements (JavaScript)\nDESCRIPTION: Illustrates how to locate field elements using human-readable text in custom helpers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['Playwright']._locateFields('Your email').then // ...\n```\n\n----------------------------------------\n\nTITLE: Saving Page Screenshot in JavaScript with CodeceptJS\nDESCRIPTION: Saves a screenshot of the current page to the output folder. Optionally can capture the full page by scrolling.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_45\n\nLANGUAGE: javascript\nCODE:\n```\nI.saveScreenshot('debug.png');\nI.saveScreenshot('debug.png', true) //resizes to available scrollHeight and scrollWidth before taking screenshot\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS Tests with Steps Output\nDESCRIPTION: Command to run CodeceptJS tests with detailed step output. This is useful for seeing each step of the test execution in the terminal.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs run --steps\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeceptJS Arguments via Environment Variables\nDESCRIPTION: Docker Compose configuration demonstrating how to pass arguments to CodeceptJS using the CODECEPT_ARGS environment variable.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nversion: '2'\nservices:\n  codeceptjs:\n    image: codeception/codeceptjs\n    environment:\n      - CODECEPT_ARGS=--debug\n    volumes:\n      - .:/tests\n```\n\n----------------------------------------\n\nTITLE: Resizing Window in JavaScript with CodeceptJS\nDESCRIPTION: Resizes the current window to the provided width and height. The first parameter can be set to 'maximize' to maximize the window.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_42\n\nLANGUAGE: javascript\nCODE:\n```\nI.resizeWindow(800, 600);\n```\n\n----------------------------------------\n\nTITLE: Configuring AI Provider in CodeceptJS\nDESCRIPTION: Basic configuration for setting up an AI provider in CodeceptJS. This snippet shows how to implement the 'request' function in the 'ai' section of the codecept.conf file.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  request: async messages => {\n    // implement OpenAI or any other provider like this\n    const ai = require('my-ai-provider')\n    return ai.send(messages)\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: WebDriver Session Screenshot Management\nDESCRIPTION: Example demonstrating how to save and manage screenshots across different WebDriver sessions for debugging purposes\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nScenario('should save screenshot for sessions @WebDriverIO @Puppeteer @Playwright', async ({ I }) => {\n  await I.amOnPage('/form/bug1467');\n  await I.saveScreenshot('original.png');\n  await I.amOnPage('/');\n  await I.saveScreenshot('main_session.png');\n  session('john', async () => {\n    await I.amOnPage('/form/bug1467');\n    event.dispatcher.emit(event.test.failed, this);\n  });\n\n  const fileName = clearString('should save screenshot for active session @WebDriverIO @Puppeteer @Playwright');\n  const [original, failed] = await I.getSHA256Digests([\n    `${output_dir}/original.png`,\n    `${output_dir}/john_${fileName}.failed.png`,\n  ]);\n\n  await I.expectEqual(original, failed);\n\n  const [main_original, session_failed] = await I.getSHA256Digests([\n    `${output_dir}/main_session.png`,\n    `${output_dir}/john_${fileName}.failed.png`,\n  ]);\n  await I.expectNotEqual(main_original, session_failed);\n});\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptJS in Custom Directory\nDESCRIPTION: Install CodeceptJS and WebDriverIO testing framework into a specific directory named 'e2e-tests'.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/installation.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx create-codeceptjs e2e-tests --webdriverio\n```\n\n----------------------------------------\n\nTITLE: Configuring subtitles Plugin in JavaScript\nDESCRIPTION: Example configuration for the subtitles plugin in CodeceptJS. It shows how to enable the plugin for automatically capturing steps as subtitles for failed test videos.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/plugins.md#2025-04-21_snippet_23\n\nLANGUAGE: javascript\nCODE:\n```\nplugins: {\n  subtitles: {\n    enabled: true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling Japanese Translation in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable Japanese translation in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation: \"ja-JP\"\n```\n\n----------------------------------------\n\nTITLE: Writing CodeceptJS Test in Chinese (Traditional)\nDESCRIPTION: Example of a CodeceptJS test scenario written in Chinese (Traditional) using translated keywords and methods.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('CodeceptJS 演示');\n\nScenario('成功提交表單', ({ 我 }) => {\n    我.在頁面('/documentation')\n    我.填寫欄位('電郵', 'hello@world.com')\n    我.填寫欄位('密碼', '123456')\n    我.勾選選項('活化')\n    我.勾選選項('男');\n    我.單擊('建立用戶')\n    我.看到('用戶名可用')\n    我.在當前網址中看不到('/documentation')\n});\n```\n\n----------------------------------------\n\nTITLE: Using CodeceptJS Interactive Shell\nDESCRIPTION: Launches an interactive shell that allows trying 'I.' commands in runtime using the 'shell' command.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/commands.md#2025-04-21_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs shell\n```\n\n----------------------------------------\n\nTITLE: User Factory Definition\nDESCRIPTION: Example of creating a factory file for generating user data using Rosie and Faker libraries.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQLDataFactory.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst { Factory } = require('rosie').Factory;\nconst { faker } = require('@faker-js/faker');\n\nmodule.exports = new Factory((buildObj) => ({\n   input: { ...buildObj },\n}))\n   .attr('name', () => faker.person.findName())\n   .attr('email', () => faker.interact.email())\n```\n\n----------------------------------------\n\nTITLE: Installing CodeceptUI via NPM\nDESCRIPTION: Command to install CodeceptUI package as a project dependency\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ui.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @codeceptjs/ui --save\n```\n\n----------------------------------------\n\nTITLE: Fix for waitForText Locator Issue with Playwright\nDESCRIPTION: Fixes an error that occurred when using waitForText with certain locator patterns in Playwright. This fix resolves unexpected token errors when parsing selectors containing specific text patterns.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_33\n\nLANGUAGE: javascript\nCODE:\n```\nFixed this error:\n\nlocator.isVisible: Unexpected token \"s\" while parsing selector \":has-text('Were you able to resolve the resident's issue?') >> nth=0\"\n      at Playwright.waitForText (node_modules\\codeceptjs\\lib\\helper\\Playwright.js:2584:79)\n```\n\n----------------------------------------\n\nTITLE: Advanced Polly Configuration\nDESCRIPTION: Extended configuration example with Polly options for recording and persistence.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/MockRequest.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nhelpers: {\n  MockRequestHelper: {\n     require: '@codeceptjs/mock-request',\n     mode: record,\n     recordIfMissing: true,\n     recordFailedRequests: false,\n     expiresIn: null,\n     persisterOptions: {\n       keepUnusedRequests: false\n       fs: {\n         recordingsDir: './data/requests',\n       },\n    },\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AI Helper Improvements and Security Fixes\nDESCRIPTION: List of improvements to the AI functionality in CodeceptJS, including security vulnerability fixes, implementing AI class as a singleton, refactoring the heal.js plugin, and enhancing the recorder class for better error handling.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nreplaced minify library with a modern and more secure fork. Fixes html-minifier@4.0.0 Regular Expression Denial of Service vulnerability #3829\nAI class is implemented as singleton\nrefactored heal.js plugin to work on edge cases\nadd configuration params on number of fixes performed by ay heal\nimproved recorder class to add more verbose log\nimproved recorder class to ignore some of errors\n```\n\n----------------------------------------\n\nTITLE: Using I.say Method in Tests\nDESCRIPTION: Example of using I.say method to add comments to test output for better readability and documentation.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_96\n\nLANGUAGE: javascript\nCODE:\n```\nI.say('I am going to publish post')\nI.say('I enter title and body')\nI.say('I expect post is visible on site')\n```\n\n----------------------------------------\n\nTITLE: Adding Metadata to CodeceptJS Scenarios\nDESCRIPTION: Demonstration of attaching meta information to Scenarios for providing additional context in test reporting.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n// add Jira issue to scenario\nScenario('...', () => {\n  // ...\n}).meta('JIRA', 'TST-123')\n\n// or pass meta info in the beginning of scenario:\nScenario('my test linked to Jira', meta: { issue: 'TST-123' }, () => {\n  // ...\n})\n```\n\n----------------------------------------\n\nTITLE: Checking Node.js and npm versions in Bash\nDESCRIPTION: Commands to verify the installation of Node.js and npm by checking their versions in the terminal.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnode --version\nnpm --version\n```\n\n----------------------------------------\n\nTITLE: File Name Grabbing Example in CodeceptJS\nDESCRIPTION: Shows how to grab file names in the current directory after handling downloads\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/FileSystem.md#2025-04-21_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nI.handleDownloads();\nI.click('Download Files');\nI.amInPath('output/downloads');\nconst downloadedFileNames = I.grabFileNames();\n```\n\n----------------------------------------\n\nTITLE: Verifying Absence of Text in Page Title in CodeceptJS\nDESCRIPTION: Shows how to check that the page title does not contain specific text.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeInTitle('Error');\n```\n\n----------------------------------------\n\nTITLE: Installing Resemble Helper Package\nDESCRIPTION: Command to install the codeceptjs-resemblehelper package via npm\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/visual.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install codeceptjs-resemblehelper --save\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptUI in NPM Script\nDESCRIPTION: Command to start CodeceptUI using npm script defined in package.json\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ui.md#2025-04-21_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nnpm run codeceptjs:ui\n```\n\n----------------------------------------\n\nTITLE: Using Extended Playwright Click Method with Position Options\nDESCRIPTION: Example of using Playwright's extended click method with additional options. This shows how to specify click position coordinates when clicking on elements, which is useful for canvas or precise targeting.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_73\n\nLANGUAGE: javascript\nCODE:\n```\n// use Playwright click options as 3rd argument\nI.click('canvas', '.model', { position: { x: 20, y: 40 } })\n// check option also has options\nI.checkOption('Agree', '.signup', { position: { x: 5, y: 5 } })\n```\n\n----------------------------------------\n\nTITLE: Shaking Device in CodeceptJS Detox\nDESCRIPTION: This snippet shows how to simulate shaking the device using the shakeDevice method.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Detox.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nI.shakeDevice();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies via NPM\nDESCRIPTION: Command to install required Rosie and Faker libraries for data generation\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/ApiDataFactory.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i rosie @faker-js/faker --save-dev\n```\n\n----------------------------------------\n\nTITLE: Running specific test file with CodeceptJS CLI\nDESCRIPTION: Demonstrates how to run a specific test file named users_test.js located in the tests directory using the CodeceptJS CLI.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_117\n\nLANGUAGE: bash\nCODE:\n```\ncodeceptjs run users_test.js -c tests\n```\n\n----------------------------------------\n\nTITLE: Executing Code Only on iOS Devices\nDESCRIPTION: Example of using the runOnIOS method to execute code specifically on iOS devices.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nI.runOnIOS(() => {\n   I.click('//UIAApplication[1]/UIAWindow[1]/UIAButton[1]');\n   I.see('Hi, IOS', '~welcome');\n});\n```\n\n----------------------------------------\n\nTITLE: Tapping Element Using TestID in CodeceptJS\nDESCRIPTION: This code demonstrates how to tap an element using its testID in a CodeceptJS test. While this works on iOS, it causes issues on Android with UIAutomator2.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/mobile-react-native-locators.md#2025-04-21_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nI.tap('~someButton')\n```\n\n----------------------------------------\n\nTITLE: Generating TypeScript Definitions\nDESCRIPTION: Command to regenerate TypeScript definitions for autocomplete support\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/email.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs def\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Helper with HTTP Agent\nDESCRIPTION: Configuration example for setting up TSL connection using httpAgent in REST helper with custom certificates\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    REST: {\n      endpoint: 'http://site.com/api',\n      prettyPrintJson: true,\n      httpAgent: {\n         key: fs.readFileSync(__dirname + '/path/to/keyfile.key'),\n         cert: fs.readFileSync(__dirname + '/path/to/certfile.cert'),\n         rejectUnauthorized: false,\n         keepAlive: true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Moving Cursor in CodeceptJS\nDESCRIPTION: Moves cursor to specified element with optional X and Y offset values.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Nightmare.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\nI.moveCursorTo('.tooltip');\nI.moveCursorTo('#submit', 5,5);\n```\n\n----------------------------------------\n\nTITLE: Enabling Chinese (Traditional) Translation in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable Chinese (Traditional) translation in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation: \"zh-TW\"\n```\n\n----------------------------------------\n\nTITLE: Right-Clicking Elements in JavaScript with CodeceptJS\nDESCRIPTION: Performs a right-click on a clickable element matched by a locator. Optionally, a context can be provided to narrow down the search.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_43\n\nLANGUAGE: javascript\nCODE:\n```\nI.rightClick('#el');\nI.rightClick('Click me');\nI.rightClick('Click me', '.context');\n```\n\n----------------------------------------\n\nTITLE: Demonstrating Faker Usage in Gherkin Scenario Outline\nDESCRIPTION: This snippet shows a Gherkin scenario outline in German, using Faker to generate dynamic test data for updating a user's password. It demonstrates how to use Faker expressions within Gherkin steps and data tables.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_36\n\nLANGUAGE: gherkin\nCODE:\n```\n#language: de\nFunktionalität: Faker examples\n\n   Szenariogrundriss: Atualizar senha do usuário\n        Angenommen que estou logado via REST com o usuário \"<customer>\"\n          | protocol             | https:               |\n          | hostname             | https://cucumber.io/docs/gherkin/languages/            |\n\n\nFaker examples --\n  Atualizar senha do usuário {\"product\":\"{{vehicle.vehicle}}\",\"customer\":\"Dr. {{name.findName}}\",\"price\":\"{{commerce.price}}\",\"cashier\":\"cashier 2\"}\n   On Angenommen: que estou logado via rest com o usuário \"dr. {{name.find name}}\"\n    protocol        | https:\n    hostname        | https://cucumber.io/docs/gherkin/languages/\n\nDr. {{name.findName}}\n  ✔ OK in 13ms\n```\n\n----------------------------------------\n\nTITLE: Selecting Options by Partial String in Playwright\nDESCRIPTION: Shows how to select an option from a dropdown using a partial string match in Playwright tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_35\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.amOnPage('/form/select');\nawait I.selectOption('Select your age', '21-');\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Hooks in Nightmare Helper\nDESCRIPTION: Example of implementing _before and _afterStep hooks in a custom helper to catch JavaScript errors in the browser using Nightmare.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_95\n\nLANGUAGE: javascript\nCODE:\n```\n_before() {\n  this.err = null;\n  this.helpers['Nightmare'].browser.on('page', (type, message, stack) => {\n    this.err = `${message} ${stack}`;\n  });\n}\n\n_afterStep() {\n if (this.err) throw new Error('Browser JS error '+this.err);\n}\n```\n\n----------------------------------------\n\nTITLE: Installing MailSlurp Helper via NPM\nDESCRIPTION: Command to install the MailSlurp helper package as a development dependency\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/email.md#2025-04-21_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @codeceptjs/mailslurp-helper --save-dev\n```\n\n----------------------------------------\n\nTITLE: Installing WebDriverIO v6 Dependency for CodeceptJS\nDESCRIPTION: Command to upgrade the WebDriverIO dependency to version 6 for use with CodeceptJS 2.6.0.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_89\n\nLANGUAGE: bash\nCODE:\n```\nnpm i webdriverio@^6.0 --save\n```\n\n----------------------------------------\n\nTITLE: Adding a page navigation action to CodeceptJS test\nDESCRIPTION: Demonstrates how to add a page navigation action to a CodeceptJS test scenario using the 'I' object.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/tutorial.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nFeature('Checkout');\n\nScenario('test something', ({ I }) => {\n  I.amOnPage('/')\n});\n```\n\n----------------------------------------\n\nTITLE: Element Location with Class Attribute\nDESCRIPTION: Example showing how to locate elements using the withClassAttr method to find elements by their class attribute\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_12\n\nLANGUAGE: javascript\nCODE:\n```\nlocate('div').withClassAttr('text')\n```\n\n----------------------------------------\n\nTITLE: Internet Explorer Configuration\nDESCRIPTION: Configuration specific to Internet Explorer browser with IE-specific options.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     WebDriver : {\n       url: \"http://localhost\",\n       browser: \"internet explorer\",\n       desiredCapabilities: {\n         ieOptions: {\n           \"ie.browserCommandLineSwitches\": \"-private\",\n           \"ie.usePerProcessProxy\": true,\n           \"ie.ensureCleanSession\": true,\n         }\n       }\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Building Custom CodeceptJS Docker Image\nDESCRIPTION: Commands to build a custom CodeceptJS Docker image, including an option to specify a custom Node.js version.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docker/README.md#2025-04-21_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ndocker build -t codeception/codeceptjs .\n\n# To build with a specific Node version:\ndocker build -t codeception/codeceptjs . --build-arg NODE_VERSION=12.10.0\n```\n\n----------------------------------------\n\nTITLE: Using Custom Locator Plugin in CodeceptJS\nDESCRIPTION: Example of using the customLocator plugin in CodeceptJS to simplify element selection. This plugin allows using special test attributes with a simplified syntax instead of complex CSS selectors.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_69\n\nLANGUAGE: javascript\nCODE:\n```\n// when data-test-id is a special test attribute\n// enable and configure plugin to replace this\nI.click({ css: '[data-test-id=register_button]');\n// with this\nI.click('$register_button');\n```\n\n----------------------------------------\n\nTITLE: Configuring Playwright Video Recording Resolution\nDESCRIPTION: Configuration example for setting custom video recording resolution in Playwright helper\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_13\n\nLANGUAGE: javascript\nCODE:\n```\n  url: siteUrl,\n  windowSize: '300x500',\n  show: false,\n  restart: true,\n  browser: 'chromium',\n  trace: true,\n  video: true,\n  recordVideo: {\n    size: {\n      width: 400,\n      height: 600,\n    },\n  },\n```\n\n----------------------------------------\n\nTITLE: Installing Appium via npm\nDESCRIPTION: Command to install Appium globally using npm.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install -g appium\n```\n\n----------------------------------------\n\nTITLE: REST Timeout Configuration\nDESCRIPTION: Example showing how to configure REST timeout settings in ApiDataFactory\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/ApiDataFactory.md#2025-04-21_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\n\"ApiDataFactory\": {\n   \"REST\": {\n     \"timeout\": \"100000\",\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Markdown Page Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the page layout, defining permalink, layout type, sidebar settings and title\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/books.md#2025-04-21_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\npermalink: /books\nlayout: Section\nsidebar: false\ntitle: Books & Posts\neditLink: false\n---\n```\n\n----------------------------------------\n\nTITLE: Opening New Tab in JavaScript with CodeceptJS\nDESCRIPTION: Opens a new tab in the browser and switches to it.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nI.openNewTab();\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Initialization Command\nDESCRIPTION: Command to initialize CodeceptJS project\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/api.md#2025-04-21_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nnpx codeceptjs init\n```\n\n----------------------------------------\n\nTITLE: Implementing Test Hooks in JavaScript Helper\nDESCRIPTION: Example of implementing _before and _afterStep hooks in a custom helper to catch JavaScript errors in the browser using WebDriverIO.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_94\n\nLANGUAGE: javascript\nCODE:\n```\n_before() {\n  this.err = null;\n  this.helpers['WebDriverIO'].browser.on('error', (e) => this.err = e);\n}\n\n_afterStep() {\n if (this.err) throw new Error('Browser JS error '+this.err);\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring CodeceptJS for Electron-Forge Applications\nDESCRIPTION: Configuration for testing an Electron application built with electron-forge. This adjusts the path to point to the webpack-compiled main file in the .webpack directory.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/playwright.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nconst path = require(\"path\");\n\nexports.config = {\n  helpers: {\n    Playwright: {\n      browser: \"electron\",\n      electron: {\n        executablePath: require(\"electron\"),\n        args: [path.join(__dirname, \".webpack/main/index.js\")],\n      },\n    },\n  },\n  // rest of config\n}\n```\n\n----------------------------------------\n\nTITLE: Combining Modifier Keys with Click Actions in CodeceptJS\nDESCRIPTION: Shows how to use modifier keys (like Control) with click actions by pressing the key down, performing the action, and releasing the key afterward.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nI.pressKeyDown('Control');\nI.click('#element');\nI.pressKeyUp('Control');\n```\n\n----------------------------------------\n\nTITLE: Running CodeceptJS with Debug Option\nDESCRIPTION: Command to run CodeceptJS with debug option, providing additional information about test execution.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/reports.md#2025-04-21_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs run --debug\n```\n\n----------------------------------------\n\nTITLE: Renaming haveRequestHeaders Methods in Puppeteer and Playwright Helpers\nDESCRIPTION: Code comment explaining the renaming of haveRequestHeaders methods in Puppeteer and Playwright helpers to avoid confusion with the REST helper. The new method names are setPuppeteerRequestHeaders and setPlaywrightRequestHeaders.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_39\n\nLANGUAGE: javascript\nCODE:\n```\nRenamed haveRequestHeaders of Puppeteer, Playwright helper so that it would not confuse the REST helper.\nPuppeteer: setPuppeteerRequestHeaders\nPlaywright: setPlaywrightRequestHeaders\n```\n\n----------------------------------------\n\nTITLE: Grabbing Page Source in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves the page source and returns it to the test. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nlet pageSource = await I.grabSource();\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies\nDESCRIPTION: Shell commands for installing required dependencies Rosie and Faker.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/GraphQLDataFactory.md#2025-04-21_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nnpm i rosie @faker-js/faker --save-dev\n```\n\n----------------------------------------\n\nTITLE: Grabbing Page Scroll Position in JavaScript with CodeceptJS\nDESCRIPTION: Retrieves the current page scroll position and returns it to the test. This function should be used inside an async function with the 'await' operator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nlet { x, y } = await I.grabPageScrollPosition();\n```\n\n----------------------------------------\n\nTITLE: Grabbing Attributes from Multiple Elements in CodeceptJS\nDESCRIPTION: Retrieves an array of attributes from all elements that match the provided locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_19\n\nLANGUAGE: javascript\nCODE:\n```\nlet hints = await I.grabAttributeFromAll('.tooltip', 'title');\n```\n\n----------------------------------------\n\nTITLE: Checking Cookie Absence in CodeceptJS\nDESCRIPTION: Verifies that a cookie with the specified name doesn't exist in the browser.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nI.dontSeeCookie('auth'); // no auth cookie\n```\n\n----------------------------------------\n\nTITLE: Event Handling with Workers in CodeceptJS\nDESCRIPTION: Demonstrates how to handle events when running tests with the run-workers command. CodeceptJS now exposes the RUNS_WITH_WORKERS environment variable and introduces the event.workers.result event for better plugin/helper integration.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_31\n\nLANGUAGE: javascript\nCODE:\n```\nconst { event } = require('codeceptjs');\n\nmodule.exports = function() {\n    // this event would trigger the  `_publishResultsToTestrail` when running `run-workers` command\n  event.dispatcher.on(event.workers.result, async () => {\n    await _publishResultsToTestrail();\n  });\n\n  // this event would not trigger the  `_publishResultsToTestrail` multiple times when running `run-workers` command\n  event.dispatcher.on(event.all.result, async () => {\n      // when running `run` command, this env var is undefined\n    if (!process.env.RUNS_WITH_WORKERS) await _publishResultsToTestrail();\n  });\n}\n```\n\n----------------------------------------\n\nTITLE: Replaying API Requests from HAR in Playwright\nDESCRIPTION: Demonstrates how to replay API requests from a HAR file in Playwright. This functionality allows matching responses from the HAR or aborting requests if nothing matches, useful for API mocking in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_28\n\nLANGUAGE: javascript\nCODE:\n```\n// Replay API requests from HAR.\n// Either use a matching response from the HAR,\n// or abort the request if nothing matches.\n  I.replayFromHar('./output/har/something.har', { url: \"*/**/api/v1/fruits\" });\n  I.amOnPage('https://demo.playwright.dev/api-mocking');\n  I.see('CodeceptJS');\n[Parameters]\nharFilePath [string](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String) Path to recorded HAR file\nopts [object](https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object)? [Options for replaying from HAR](https://playwright.dev/docs/api/class-page#page-route-from-har)\n```\n\n----------------------------------------\n\nTITLE: Recording HAR Files with Playwright\nDESCRIPTION: Shows how to configure HAR recording in Playwright. HAR files capture HTTP Archive information including network requests, headers, cookies, and timings, useful for mocking network requests in tests.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_29\n\nLANGUAGE: javascript\nCODE:\n```\nA HAR file is an HTTP Archive file that contains a record of all the network requests that are made when a page is loaded.\nIt contains information about the request and response headers, cookies, content, timings, and more.\nYou can use HAR files to mock network requests in your tests. HAR will be saved to output/har.\nMore info could be found here https://playwright.dev/docs/api/class-browser#browser-new-context-option-record-har.\n\n...\nrecordHar: {\n    mode: 'minimal', // possible values: 'minimal'|'full'.\n    content: 'embed' // possible values:  \"omit\"|\"embed\"|\"attach\".\n}\n...\n```\n\n----------------------------------------\n\nTITLE: Finding Form Fields with Puppeteer\nDESCRIPTION: Example of using _locateFields to find form field elements by their label text.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\nthis.helpers['Puppeteer']._locateFields('Your email').then // ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Puppeteer Browser and Page Objects\nDESCRIPTION: Example of accessing the Puppeteer browser and page objects from a custom helper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst { browser } = this.helpers.Puppeteer;\nawait browser.pages(); // List of pages in the browser\n\nconst { page } = this.helpers.Puppeteer;\nawait page.url(); // Get the url of the current page\n```\n\n----------------------------------------\n\nTITLE: Parsing Table Data in Step Definitions\nDESCRIPTION: Shows how to iterate through a data table within a step definition. This example demonstrates accessing individual cell values by iterating through rows and cells.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nGiven('I have products in my cart', (table) => { // eslint-disable-line\n  for (const id in table.rows) {\n    if (id < 1) {\n      continue; // skip a header of a table\n    }\n\n    // go by row cells\n    const cells = table.rows[id].cells;\n\n    // take values\n    const name = cells[0].value;\n    const category = cells[1].value;\n    const price = cells[2].value;\n    // ...\n  }\n});\n```\n\n----------------------------------------\n\nTITLE: Opening a New Browser Tab in CodeceptJS\nDESCRIPTION: Creates a new browser tab and automatically switches to it. Useful for testing multi-tab scenarios or opening links that target new windows.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_57\n\nLANGUAGE: javascript\nCODE:\n```\nI.openNewTab();\n```\n\n----------------------------------------\n\nTITLE: Slider Interaction in CodeceptJS\nDESCRIPTION: Controls slider elements by dragging to specified positions.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_24\n\nLANGUAGE: javascript\nCODE:\n```\nI.dragSlider('#slider', 30);\nI.dragSlider('#slider', -70);\n```\n\n----------------------------------------\n\nTITLE: Retrieving Element Attributes in CodeceptJS\nDESCRIPTION: Method to get an attribute value from an element specified by CSS or XPath locator.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/WebDriver.md#2025-04-21_snippet_32\n\nLANGUAGE: javascript\nCODE:\n```\nlet hint = await I.grabAttributeFrom('#tooltip', 'title');\n```\n\n----------------------------------------\n\nTITLE: Configuring REST Helper with Custom HTTP Agent in CodeceptJS\nDESCRIPTION: Shows how to configure the REST helper in CodeceptJS with a custom HTTP agent, including options for SSL certificates and connection keep-alive.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n{\n  helpers: {\n    REST: {\n      endpoint: 'http://site.com/api',\n      prettyPrintJson: true,\n      httpAgent: {\n         ca: fs.readFileSync(__dirname + '/path/to/ca.pem'),\n         rejectUnauthorized: false,\n         keepAlive: true\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Using withTextEquals() Locator Method\nDESCRIPTION: Example of using the new withTextEquals() locator method that finds elements with exact text match. Unlike withText() which uses partial matching, this ensures the element contains the exact specified text.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_25\n\nLANGUAGE: javascript\nCODE:\n```\nlocate('button').withTextEquals('Add')\n```\n\n----------------------------------------\n\nTITLE: Waiting for Element Invisibility with CodeceptJS\nDESCRIPTION: Waits for an element to be removed or become invisible on a page. The element can be located by CSS or XPath. By default, it waits for 1 second.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_26\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForInvisible('#popup');\n```\n\n----------------------------------------\n\nTITLE: Scrolling Page in CodeceptJS\nDESCRIPTION: Methods for scrolling page to top or bottom.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_14\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToBottom();\n```\n\nLANGUAGE: javascript\nCODE:\n```\nI.scrollPageToTop();\n```\n\n----------------------------------------\n\nTITLE: Configuring Puppeteer Helper in CodeceptJS\nDESCRIPTION: Example configuration for the Puppeteer helper in the CodeceptJS config file. Shows how to set options like URL, authentication, and browser behavior.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer.md#2025-04-21_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n{\n   helpers: {\n     Puppeteer : {\n       url: \"http://localhost\",\n       restart: false,\n       waitForNavigation: \"networkidle0\",\n       waitForAction: 500\n     }\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Using TestCafe Locate Method\nDESCRIPTION: Example of using the _locate helper method to find elements using different locator types.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/TestCafe.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nconst elements = await this.helpers['TestCafe']._locate('.item');\n```\n\n----------------------------------------\n\nTITLE: Example of Poor XPath Locator Strategy\nDESCRIPTION: Demonstrates a brittle XPath selector that would likely break with minor UI changes, representing a non-recommended approach to locating elements.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/react.md#2025-04-21_snippet_1\n\nLANGUAGE: js\nCODE:\n```\n//*[@id=\"document\"]/div[2]/div/div[2]/div\n```\n\n----------------------------------------\n\nTITLE: Updated Scenario Syntax (JavaScript)\nDESCRIPTION: Breaking change in version 3.0.0 that modifies the syntax for writing test scenarios.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_63\n\nLANGUAGE: javascript\nCODE:\n```\n// Previous\nScenario('title', (I, loginPage) => {})\n\n// Current\nScenario('title', ({ I, loginPage }) => {})\n```\n\n----------------------------------------\n\nTITLE: Configuring Soft Assertions in CodeceptJS\nDESCRIPTION: Demonstrates how to configure and use soft assertions in CodeceptJS tests using the SoftExpectHelper.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/changelog.md#2025-04-21_snippet_11\n\nLANGUAGE: javascript\nCODE:\n```\n// inside codecept.conf.js\n{\n  helpers: {\n    Playwright: {...},\n    SoftExpectHelper: {},\n  }\n}\n\n// in scenario\nI.softExpectEqual('a', 'b')\nI.flushSoftAssertions()\n```\n\n----------------------------------------\n\nTITLE: Writing Basic User Story in Plain Text\nDESCRIPTION: Example of writing a simple user story in plain text format describing a product purchase scenario.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/bdd.md#2025-04-21_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nAs a customer I want to buy several products\nI put first product with $600 price to my cart\nAnd then another one with $1000 price\nWhen I go to checkout process\nI should see that total number of products I want to buy is 2\nAnd my order amount is $1600\n```\n\n----------------------------------------\n\nTITLE: CodeceptJS Init Configuration Sample\nDESCRIPTION: Example output of CodeceptJS initialization process showing default configuration options\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/quickstart.md#2025-04-21_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\n? Do you plan to write tests in TypeScript? 'No'\n? Where are your tests located? '**./*_test.js'\n? What helpers do you want to use? 'Playwright'\n? Where should logs, screenshots, and reports to be stored? '**./output**'\n? Do you want to enable localization for tests? 'English (no localization)'\n```\n\n----------------------------------------\n\nTITLE: Accessing Playwright API in Tests (JavaScript)\nDESCRIPTION: New method to directly access Playwright API within tests using usePlaywrightTo.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_64\n\nLANGUAGE: javascript\nCODE:\n```\nI.usePlaywrightTo('do something special', async ({ page }) => {\n  // use page or browser objects here\n})\n```\n\n----------------------------------------\n\nTITLE: Fixing RetryFailedStep Plugin Integration with Helpers\nDESCRIPTION: Fixes an issue where retries from the retryFailedStep plugin weren't properly respected in helpers. Introduces a process.env.FAILED_STEP_RETIRES environment variable for better communication between plugins and helpers.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_34\n\nLANGUAGE: javascript\nCODE:\n```\nCurrently inside the _before() of helpers for example Playwright, the retries is set there, however, when retryFailedStep plugin is enabled, the retries of recorder is still using the value from _before() not the value from retryFailedStep plugin.\n\nFix:\n\n- introduce the process.env.FAILED_STEP_RETIRES which could be access everywhere as the helper won't know anything about the plugin.\n- set default retries of Playwright to 3 to be on the same page with Puppeteer.\n```\n\n----------------------------------------\n\nTITLE: Supporting Partial String Selection in Playwright\nDESCRIPTION: Example of the improved selectOption feature in Playwright that now supports matching options with partial strings, making it easier to select dropdown options based on a portion of the text.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/CHANGELOG.md#2025-04-21_snippet_30\n\nLANGUAGE: javascript\nCODE:\n```\nawait I.amOnPage('/form/select');\nawait I.selectOption('Select your age', '21-');\n```\n\n----------------------------------------\n\nTITLE: Enabling Chinese (Simplified) Translation in CodeceptJS Config\nDESCRIPTION: Configuration snippet to enable Chinese (Simplified) translation in CodeceptJS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/translation.md#2025-04-21_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\ntranslation: \"zh-CN\"\n```\n\n----------------------------------------\n\nTITLE: Generating Custom Helper with CodeceptJS CLI\nDESCRIPTION: Command to generate a new helper file using CodeceptJS generate helper command\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/puppeteer.md#2025-04-21_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nnpx codeceptjs gh\n```\n\n----------------------------------------\n\nTITLE: Pausing Execution in CodeceptJS\nDESCRIPTION: Pauses test execution for a specified number of seconds. This method is useful for debugging or waiting for specific time-dependent events.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Protractor.md#2025-04-21_snippet_72\n\nLANGUAGE: javascript\nCODE:\n```\nI.wait(2); // wait 2 secs\n```\n\n----------------------------------------\n\nTITLE: File Operations in Appium\nDESCRIPTION: Pulls files from the device to a specified destination. Supports both Android and iOS.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Appium.md#2025-04-21_snippet_16\n\nLANGUAGE: javascript\nCODE:\n```\nI.pullFile('/storage/emulated/0/DCIM/logo.png', 'my/path');\n// save file to output dir\nI.pullFile('/storage/emulated/0/DCIM/logo.png', output_dir);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTML Processing for AI in CodeceptJS\nDESCRIPTION: JavaScript configuration for HTML processing options used in AI features of CodeceptJS, including element filtering and attribute allowlisting.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/ai.md#2025-04-21_snippet_20\n\nLANGUAGE: javascript\nCODE:\n```\nai: {\n  html: {\n    maxLength: 50000,\n    simplify: true,\n    minify: true,\n    interactiveElements: ['a', 'input', 'button', 'select', 'textarea', 'option'],\n    textElements: ['label', 'h1', 'h2'],\n    allowedAttrs: ['id', 'for', 'class', 'name', 'type', 'value', 'tabindex', 'aria-labelledby', 'aria-label', 'label', 'placeholder', 'title', 'alt', 'src', 'role'],\n    allowedRoles: ['button', 'checkbox', 'search', 'textbox', 'tab'],\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Waiting for Input Field Values\nDESCRIPTION: Waits for an input field to have a specific value. Takes parameters for the field locator, the expected value, and an optional wait time in seconds (default is 1 second).\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Playwright.md#2025-04-21_snippet_105\n\nLANGUAGE: javascript\nCODE:\n```\nI.waitForValue('//input', \"GoodValue\");\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer v2.1.0 for Firefox Support\nDESCRIPTION: This command installs Puppeteer version 2.1.0, which introduces experimental support for stock Firefox without custom patches.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer-firefox.md#2025-04-21_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\nnpm i puppeteer@v2.1.0\n```\n\n----------------------------------------\n\nTITLE: Installing Puppeteer-firefox via npm\nDESCRIPTION: This command installs the puppeteer-firefox package using npm.\nSOURCE: https://github.com/codeceptjs/codeceptjs/blob/3.x/docs/helpers/Puppeteer-firefox.md#2025-04-21_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nnpm install puppeteer-firefox\n```"
  }
]