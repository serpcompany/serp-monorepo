[
  {
    "owner": "inventree",
    "repo": "inventree",
    "content": "TITLE: Creating InvenTree Admin Account\nDESCRIPTION: Creates a superuser (admin) account for the InvenTree installation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\ninvoke superuser\n```\n\n----------------------------------------\n\nTITLE: Creating Supplier and Manufacturer Part Associations in InvenTree\nDESCRIPTION: Demonstrates linking supplier and manufacturer information to a part. This example creates supplier part and manufacturer part records that associate the couch with specific supplier and manufacturer data.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.company import SupplierPart\n\n...\n\nSupplierPart.create(api,{\n    'part':couch.pk,\n    'supplier':xstore.pk,\n    'SKU':'some_code',\n    'link':'https://www.xst.bla/products/stock?...'\n})\nManufacturerPart.create(api,{\n    'part':couch.pk,\n    'manufacturer':acme.pk,\n    'MPN':'Part code of the manufacturer'\n})\n```\n\n----------------------------------------\n\nTITLE: Cloning InvenTree Source Code\nDESCRIPTION: Downloads the InvenTree source code from GitHub into the src directory.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/inventree/inventree src\n```\n\n----------------------------------------\n\nTITLE: Creating a Bill of Materials (BOM) in InvenTree\nDESCRIPTION: Shows how to create a Bill of Materials for an assembly part. This example creates BOM items that define what components (sub-parts) are needed to make a sofa, including quantities and reference designators.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_11\n\nLANGUAGE: python\nCODE:\n```\nBomItem.create(api, data={'part':sofa_id, 'sub_part':back_id, 'quantity':1, 'reference':'p1'})\nBomItem.create(api, data={'part':sofa_id, 'sub_part':seat_id, 'quantity':1, 'reference':'p2'})\nBomItem.create(api, data={'part':sofa_id, 'sub_part':armrest_id, 'quantity':2, 'reference':'p3, p4'})\n```\n\n----------------------------------------\n\nTITLE: Creating New Items with InvenTree Python API\nDESCRIPTION: Demonstrates how to create new PartCategory and Part objects in the InvenTree database using the 'create' method. The example creates a furniture category and a couch part within that category.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.part import Part, PartCategory\nfrom inventree.stock import StockItem\n\n## Create a new PartCategory object,\n## underneath the existing category with pk 7. Leave the parent empty for a top level category\nfurniture = PartCategory.create(api, {\n    'name': 'Furniture',\n    'description': 'Chairs, tables, etc',\n    'parent': 7,\n})\n\n## Create a new Part\n## Use the pk (primary-key) of the newly created category\ncouch = Part.create(api, {\n    'name': 'Couch',\n    'description': 'Long thing for sitting on',\n    'category': furniture.pk,\n    'active': True,\n    'virtual': False,\n    ## Note - You do not have to fill out *all* fields\n})\n```\n\n----------------------------------------\n\nTITLE: Creating Stock Locations and Items in InvenTree\nDESCRIPTION: Demonstrates creating hierarchical stock locations and adding stock items to these locations. The example creates a nested structure of locations (aisle, shelf, boxes) and adds couch items with different quantities and status flags.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.stock import StockLocation\nfrom inventree.stock import StockItem\n\n...\n\n## Create the stock locations. Leave the parent empty for top level hierarchy\nAisle3 = StockLocation.create(api, {'name':'Aisle 3','description':'Aisle for sofas','parent':''})\nShelve43 = StockLocation.create(api, {'name':'Shelve 43','description':'Shelve for sofas','parent':Aisle3.pk})\nBox12 = StockLocation.create(api, {'name':'Box 12','description':'green box','parent':Shelve43.pk})\nBox13 = StockLocation.create(api, {'name':'Box 13','description':'red box','parent':Shelve43.pk})\n\n## Now fill them with items\nId1 = StockItem.create(api, { 'part': sofa.pk, 'quantity': 10, 'notes': 'new ones', 'location': Box12.pk, 'status':10 })\nId2 = StockItem.create(api, { 'part': sofa.pk, 'quantity': 3, 'notes': 'old ones', 'location': Box13.pk, 'status':55 })\n```\n\n----------------------------------------\n\nTITLE: Updating Part Attributes with InvenTree Python API\nDESCRIPTION: Shows how to update part attributes using the 'save' method. This example connects to an InvenTree server, retrieves a part by its primary key, updates its description and minimum stock level, and then displays the updated information.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.api import InvenTreeAPI\nfrom inventree.part import Part\n\napi = InvenTreeAPI(host='http://localhost:8000', username='admin', password='inventree')\n\n# Retrieve part instance with primary-key of 1\npart = Part(api, pk=1)\n\n# Update specified part parameters\npart.save(data={\n    \"description\": \"New part description\",\n    \"minimum_stock\": 250,\n})\n\n# Reload data from remote server\npart.reload()\n\n# Display updated data\nprint(\"Part Name:\", part.name)\nprint(\"Description:\", part.description)\nprint(\"Minimum stock:\", part.minimum_stock)\n```\n\n----------------------------------------\n\nTITLE: Adding Parameters to InvenTree Parts\nDESCRIPTION: Demonstrates how to create parameter templates and add parameters to a part. This example creates length and weight parameter templates, then assigns specific values to a couch part using these templates.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.part import Parameter\nfrom inventree.part import ParameterTemplate\n\nLengthTemplate = ParameterTemplate.create(api, { 'name' : 'Length', 'units' : 'Meters' })\nWeightTemplate = ParameterTemplate.create(api, { 'name' : 'Weight', 'units' : 'kg' })\n\nParameterLength = Parameter.create(api, { 'part': couch.pk, 'template': LengthTemplate.pk, 'data' : 2 })\nParameterWeight = Parameter.create(api, { 'part': couch.pk, 'template': WeightTemplate.pk, 'data' : 60 })\n```\n\n----------------------------------------\n\nTITLE: Setting up InvenTree Development Environment on Bare Metal\nDESCRIPTION: Commands to set up an InvenTree development environment directly on your system without containerization. Includes cloning the repository, creating a virtual environment, and installing dependencies.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/inventree/InvenTree.git && cd InvenTree\npython3 -m venv env && source env/bin/activate\npip install --upgrade --ignore-installed invoke\ninvoke install\ninvoke update\ninvoke dev.setup-dev --tests\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Barcode Scanning Plugin in Python for InvenTree\nDESCRIPTION: Example of a custom barcode scanning plugin that processes barcodes starting with 'PART-' to retrieve Part objects from the database. It demonstrates plugin structure, barcode parsing, and database interaction.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/barcode.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plugin import InvenTreePlugin\nfrom plugin.mixins import BarcodeMixin\nfrom part.models import Part\n\nclass InvenTreeBarcodePlugin(BarcodeMixin, InvenTreePlugin):\n\n    NAME = \"MyBarcode\"\n    TITLE = \"My Barcodes\"\n    DESCRIPTION = \"support for barcodes\"\n    VERSION = \"0.0.1\"\n    AUTHOR = \"Michael\"\n\n    def scan(self, barcode_data):\n        if barcode_data.startswith(\"PART-\"):\n            try:\n                pk = int(barcode_data.split(\"PART-\")[1])\n                instance = Part.objects.get(pk=pk)\n                label = Part.barcode_model_type()\n\n                return {label: instance.format_matched_response()}\n            except Part.DoesNotExist:\n                pass\n```\n\n----------------------------------------\n\nTITLE: Implementing a Sample Action Plugin for InvenTree\nDESCRIPTION: This example demonstrates how to create a basic InvenTree plugin using the ActionMixin. It adds a new action endpoint at '/api/action/sample' and includes metadata for the plugin.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/how_to.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\n# -*- coding: utf-8 -*-\n\"\"\"sample implementation for ActionPlugin\"\"\"\nfrom plugin import InvenTreePlugin\nfrom plugin.mixins import ActionMixin\n\n\nclass SampleActionPlugin(ActionMixin, InvenTreePlugin):\n    \"\"\"Use docstrings for everything.\"\"\"\n\n    NAME = \"SampleActionPlugin\"\n    ACTION_NAME = \"sample\"\n\n    # metadata\n    AUTHOR = \"Sample Author\"\n    DESCRIPTION = \"A very basic plugin with one mixin\"\n    PUBLISH_DATE = \"2222-02-22\"\n    VERSION = \"1.2.3\"  # We recommend semver and increase the major version with each new major release of InvenTree\n    WEBSITE = \"https://example.com/\"\n    LICENSE = \"MIT\"  # use what you want - OSI approved is &hearts;\n\n    # Everything form here is for the ActionMixin\n    def perform_action(self):\n        print(\"Action plugin in action!\")\n\n    def get_info(self):\n        return {\n            \"user\": self.user.username,\n            \"hello\": \"world\",\n        }\n\n    def get_result(self):\n        return True  # This is returned to the client\n```\n\n----------------------------------------\n\nTITLE: Adding Manufacturers and Suppliers in InvenTree\nDESCRIPTION: Shows how to create manufacturer and supplier companies and associate them with parts. This example creates two companies with different roles and links them to a couch part via supplier part and manufacturer part relationships.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.company import Company\n\n...\n\nacme = Company.create(api, {\n    'name' : 'ACME',\n    'description':'A Company that makes everything',\n    'website':'https://www.acme.bla',\n    'is_customer':0,\n    'is_manufacturer':1,\n    'is_supplier':0\n})\nxstore = Company.create(api, {\n    'name' : 'X-Store',\n    'description':'A really cool online store',\n    'website':'https://www.xst.bla',\n    'is_customer':0,\n    'is_manufacturer':0,\n    'is_supplier':1\n})\n```\n\n----------------------------------------\n\nTITLE: Importing Plugin Base Classes and Utilities in Python\nDESCRIPTION: Example of importing key classes and objects for InvenTree plugin development, including the base plugin class, registry, and error types.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n# Management objects\nregistry                    # Object that manages all plugin states and integrations\n\n# Base classes\nInvenTreePlugin             # Base class for all plugins\n\n# Errors\nMixinImplementationError    # Is raised if a mixin is implemented wrong (default not overwritten for example)\nMixinNotImplementedError    # Is raised if a mixin was not implemented (core mechanisms are missing from the plugin)\n```\n\n----------------------------------------\n\nTITLE: Managing Tags via Python Plugin Interface\nDESCRIPTION: Demonstrates how to access, add, remove, and filter tags using Python plugin code in InvenTree. Shows various operations including viewing existing tags, adding new tags, removing tags, and filtering objects by tags.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/tags.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom part.models import Part\n\n# Show tags for a particular Part instance\npart = Part.objects.get(pk=100)\nprint(part.tags)\n\n> {['Tag1', 'Another Tag']}\n\n# Tags can also be accessed via tags.all()\nprint(part.tags.all())\n\n> {['Tag1', 'Another Tag']}\n\n# Add tag\npart.tags.add('Tag 2')\nprint(part.tags)\n\n> {['Tag1', 'Tag 2', 'Another Tag']}\n\n# Remove tag\npart.tags.remove('Tag1')\nprint(part.tags)\n\n> {['Tag 2', 'Another Tag']}\n\n# Filter by tags\nPart.objects.filter(tags__name__in=[\"Tag1\", \"Tag 2\"]).distinct()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Barcode Generation Plugin in Python for InvenTree\nDESCRIPTION: Example of a custom barcode generation plugin that creates a custom internal barcode format. It overrides the generate method to produce a barcode string combining the model type and primary key.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/barcode.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom InvenTree.models import InvenTreeBarcodeMixin\nfrom plugin import InvenTreePlugin\nfrom plugin.mixins import BarcodeMixin\n\nclass InvenTreeBarcodePlugin(BarcodeMixin, InvenTreePlugin):\n    NAME = \"MyInternalBarcode\"\n    TITLE = \"My Internal Barcodes\"\n    DESCRIPTION = \"support for custom internal barcodes\"\n    VERSION = \"0.0.1\"\n    AUTHOR = \"InvenTree contributors\"\n\n    def generate(self, model_instance: InvenTreeBarcodeMixin):\n        return f'{model_instance.barcode_model_type()}: {model_instance.pk}'\n```\n\n----------------------------------------\n\nTITLE: Using Item Methods\nDESCRIPTION: Examples of using helper methods to access related objects and perform actions\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\npart = Part(api, 25)\nstock_items = part.getStockItems()\n\nstock_item = StockItem(api, 1001)\nstock_item.uploadTestResult(\"Firmware\", True, value=\"0x12345678\", attachment=\"device_firmware.bin\")\n```\n\n----------------------------------------\n\nTITLE: Implementing Settings in InvenTree Plugin\nDESCRIPTION: Example implementation of a plugin with various setting types including boolean flags, API keys, URLs, dropdown choices, numeric validators, and model references. Shows how to define settings with validation, default values, and descriptions.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/settings.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PluginWithSettings(SettingsMixin, InvenTreePlugin):\n\n    NAME = \"PluginWithSettings\"\n\n    SETTINGS = {\n        'API_ENABLE': {\n            'name': 'API Functionality',\n            'description': 'Enable remote API queries',\n            'validator': bool,\n            'default': True,\n        },\n        'API_KEY': {\n            'name': 'API Key',\n            'description': 'Security key for accessing remote API',\n            'default': '',\n            'required': True,\n        },\n        'API_URL': {\n            'name': _('API URL'),\n            'description': _('Base URL for remote server'),\n            'default': 'http://remote.url/api',\n        },\n        'CONNECTION': {\n            'name': _('Printer Interface'),\n            'description': _('Select local or network printer'),\n            'choices': [('local','Local printer e.g. USB'),('network','Network printer with IP address')],\n            'default': 'local',\n        },\n        'NUMBER': {\n            'name': _('A Name'),\n            'description': _('Describe me here'),\n            'default': 6,\n            'validator': [\n                int,\n                MinValueValidator(2),\n                MaxValueValidator(25)\n            ]\n        },\n        'ASSEMBLY': {\n            'name': _('Assembled Part'),\n            'description': _('Settings can point to internal database models'),\n            'model': 'part.part',\n            'model_filters': {\n                'active': True,\n                'assembly': True\n            }\n        },\n        'GROUP': {\n            'name': _('User Group'),\n            'description': _('Select a group of users'),\n            'model': 'auth.group'\n        },\n        'HIDDEN_SETTING': {\n            'name': _('Hidden Setting'),\n            'description': _('This setting is hidden from the automatically generated plugin settings page'),\n            'hidden': True,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Inspecting Model Fields\nDESCRIPTION: Example of viewing available fields and their metadata for a database model\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.api import InvenTreeAPI\nfrom inventree.part import Part\n\napi = InvenTreeAPI(\"http://localhost:8000\", username=\"admin\", password=\"inventree\")\n\nfields = Part.fieldNames(api)\n\nfor field in Part.fieldNames(api):\n    print(field, '->', Part.fieldInfo(field, api))\n```\n\n----------------------------------------\n\nTITLE: Installing System Packages for InvenTree on Debian\nDESCRIPTION: Installs required system packages for InvenTree on a Debian-based system. Includes Python, Git, and other dependencies.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\nsudo apt-get install \\\n    python3 python3-dev python3-pip python3-invoke python3-venv \\\n    git gcc g++ gettext gnupg \\\n    poppler-utils libpango-1.0-0 libpangoft2-1.0-0 \\\n    libjpeg-dev webp\n```\n\n----------------------------------------\n\nTITLE: Uploading Part Image with InvenTree API\nDESCRIPTION: Shows how to upload an image for a part. This simple example uploads an image file to be associated with a couch part.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ncouch.uploadImage('my_nice_couch.jpg')\n```\n\n----------------------------------------\n\nTITLE: Token Authentication\nDESCRIPTION: Example of connecting to InvenTree server using an access token\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\napi = InvenTreeAPI(SERVER_ADDRESS, token=MY_TOKEN)\n```\n\n----------------------------------------\n\nTITLE: Uploading Attachments to Parts in InvenTree\nDESCRIPTION: Demonstrates two methods for uploading file attachments to a part. The first method uses the PartAttachment class directly, while the second method uses a method on the Part instance.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_10\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.part import PartAttachment\n\n# The ID of the Part to attach the files to\npart_id = 47\n\nPartAttachment.upload(api, part_id, 'manual.pdf', comment='Datasheet')\nPartAttachment.upload(api, part_id, 'sofa.dxf', comment='Drawing')\n```\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.part import Part\n\npart = Part(api, pk=47)\n\npart.uploadAttachment('data.txt', comment='A data file')\n```\n\n----------------------------------------\n\nTITLE: Creating a Custom Driver for ABC Machine Type in Python\nDESCRIPTION: This example shows how to create a custom driver called 'abc' for the 'xyz' machine type. It demonstrates the basic structure of a driver plugin and how to inherit from the base driver.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/machines/overview.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom plugin import InvenTreePlugin\nfrom plugin.machine.machine_types import ABCBaseDriver\n\nclass MyXyzAbcDriverPlugin(InvenTreePlugin):\n    NAME = \"XyzAbcDriver\"\n    SLUG = \"xyz-driver\"\n    TITLE = \"Xyz Abc Driver\"\n    # ...\n\nclass XYZDriver(ABCBaseDriver):\n    SLUG = 'my-xyz-driver'\n    NAME = 'My XYZ driver'\n    DESCRIPTION = 'This is an awesome XYZ driver for a ABC machine'\n```\n\n----------------------------------------\n\nTITLE: Filtering by Parent Category\nDESCRIPTION: Examples of filtering tree-based models by parent relationship\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.part import PartCategory\n\nchild_categories = PartCategory.list(api, parent=10)\nparent_categories = PartCategory.list(api, parent='')\n```\n\n----------------------------------------\n\nTITLE: Implementing NavigationMixin in Python for InvenTree Custom Navigation\nDESCRIPTION: This snippet demonstrates how to create a custom navigation plugin by subclassing NavigationMixin and InvenTreePlugin. It shows the structure of the NAVIGATION constant, which defines custom navigation links, and optional constants for customizing the parent navigation tab.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/navigation.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyNavigationPlugin(NavigationMixin, InvenTreePlugin):\n\n    NAME = \"NavigationPlugin\"\n\n    NAVIGATION = [\n        {'name': 'SampleIntegration', 'link': 'plugin:sample:hi', 'icon': 'ti ti-box'},\n    ]\n\n    NAVIGATION_TAB_NAME = \"Sample Nav\"\n    NAVIGATION_TAB_ICON = 'ti ti-plus-circle'\n```\n\n----------------------------------------\n\nTITLE: Retrieving Global Settings\nDESCRIPTION: This code snippet is used to retrieve various global settings from the InvenTree database. These settings are displayed in different configuration tables, allowing staff users to modify application behavior based on key parameters.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/settings/global.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"INVENTREE_BASE_URL\") }}\n{{ globalsetting(\"INVENTREE_COMPANY_NAME\") }}\n{{ globalsetting(\"INVENTREE_INSTANCE\") }}\n{{ globalsetting(\"INVENTREE_INSTANCE_TITLE\") }}\n{{ globalsetting(\"INVENTREE_RESTRICT_ABOUT\") }}\n{{ globalsetting(\"DISPLAY_FULL_NAMES\") }}\n{{ globalsetting(\"INVENTREE_UPDATE_CHECK_INTERVAL\") }}\n{{ globalsetting(\"INVENTREE_DOWNLOAD_FROM_URL\") }}\n{{ globalsetting(\"INVENTREE_DOWNLOAD_IMAGE_MAX_SIZE\") }}\n{{ globalsetting(\"INVENTREE_DOWNLOAD_FROM_URL_USER_AGENT\") }}\n{{ globalsetting(\"INVENTREE_STRICT_URLS\") }}\n{{ globalsetting(\"INVENTREE_BACKUP_ENABLE\") }}\n{{ globalsetting(\"INVENTREE_BACKUP_DAYS\") }}\n{{ globalsetting(\"INVENTREE_DELETE_TASKS_DAYS\") }}\n{{ globalsetting(\"INVENTREE_DELETE_ERRORS_DAYS\") }}\n{{ globalsetting(\"INVENTREE_DELETE_NOTIFICATIONS_DAYS\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"LOGIN_ENABLE_PWD_FORGOT\") }}\n{{ globalsetting(\"LOGIN_MAIL_REQUIRED\") }}\n{{ globalsetting(\"LOGIN_ENFORCE_MFA\") }}\n{{ globalsetting(\"LOGIN_ENABLE_REG\") }}\n{{ globalsetting(\"LOGIN_SIGNUP_MAIL_TWICE\") }}\n{{ globalsetting(\"LOGIN_SIGNUP_PWD_TWICE\") }}\n{{ globalsetting(\"SIGNUP_GROUP\") }}\n{{ globalsetting(\"LOGIN_SIGNUP_MAIL_RESTRICTION\") }}\n{{ globalsetting(\"LOGIN_ENABLE_SSO\") }}\n{{ globalsetting(\"LOGIN_ENABLE_SSO_REG\") }}\n{{ globalsetting(\"LOGIN_SIGNUP_SSO_AUTO\") }}\n{{ globalsetting(\"LOGIN_ENABLE_SSO_GROUP_SYNC\") }}\n{{ globalsetting(\"SSO_GROUP_MAP\") }}\n{{ globalsetting(\"SSO_GROUP_KEY\") }}\n{{ globalsetting(\"SSO_REMOVE_GROUPS\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"BARCODE_ENABLE\") }}\n{{ globalsetting(\"BARCODE_INPUT_DELAY\") }}\n{{ globalsetting(\"BARCODE_WEBCAM_SUPPORT\") }}\n{{ globalsetting(\"BARCODE_SHOW_TEXT\") }}\n{{ globalsetting(\"BARCODE_GENERATION_PLUGIN\") }}\n{{ globalsetting(\"BARCODE_STORE_RESULTS\") }}\n{{ globalsetting(\"BARCODE_RESULTS_MAX_NUM\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"INVENTREE_DEFAULT_CURRENCY\") }}\n{{ globalsetting(\"CURRENCY_CODES\") }}\n{{ globalsetting(\"PRICING_DECIMAL_PLACES_MIN\") }}\n{{ globalsetting(\"PRICING_DECIMAL_PLACES\") }}\n{{ globalsetting(\"PRICING_UPDATE_DAYS\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"PART_INTERNAL_PRICE\") }}\n{{ globalsetting(\"PART_BOM_USE_INTERNAL_PRICE\") }}\n{{ globalsetting(\"PRICING_USE_SUPPLIER_PRICING\") }}\n{{ globalsetting(\"PRICING_PURCHASE_HISTORY_OVERRIDES_SUPPLIER\") }}\n{{ globalsetting(\"PRICING_USE_STOCK_PRICING\") }}\n{{ globalsetting(\"PRICING_STOCK_ITEM_AGE_DAYS\") }}\n{{ globalsetting(\"PRICING_USE_VARIANT_PRICING\") }}\n{{ globalsetting(\"PRICING_ACTIVE_VARIANTS\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"REPORT_ENABLE\") }}\n{{ globalsetting(\"REPORT_DEFAULT_PAGE_SIZE\") }}\n{{ globalsetting(\"REPORT_DEBUG_MODE\") }}\n{{ globalsetting(\"REPORT_LOG_ERRORS\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"PART_IPN_REGEX\") }}\n{{ globalsetting(\"PART_ALLOW_DUPLICATE_IPN\") }}\n{{ globalsetting(\"PART_ALLOW_EDIT_IPN\") }}\n{{ globalsetting(\"PART_ALLOW_DELETE_FROM_ASSEMBLY\") }}\n{{ globalsetting(\"PART_ENABLE_REVISION\") }}\n{{ globalsetting(\"PART_REVISION_ASSEMBLY_ONLY\") }}\n{{ globalsetting(\"PART_NAME_FORMAT\") }}\n{{ globalsetting(\"PART_SHOW_RELATED\") }}\n{{ globalsetting(\"PART_CREATE_INITIAL\") }}\n{{ globalsetting(\"PART_CREATE_SUPPLIER\") }}\n{{ globalsetting(\"PART_TEMPLATE\") }}\n{{ globalsetting(\"PART_ASSEMBLY\") }}\n{{ globalsetting(\"PART_COMPONENT\") }}\n{{ globalsetting(\"PART_TRACKABLE\") }}\n{{ globalsetting(\"PART_PURCHASEABLE\") }}\n{{ globalsetting(\"PART_SALABLE\") }}\n{{ globalsetting(\"PART_VIRTUAL\") }}\n{{ globalsetting(\"PART_COPY_BOM\") }}\n{{ globalsetting(\"PART_COPY_PARAMETERS\") }}\n{{ globalsetting(\"PART_COPY_TESTS\") }}\n{{ globalsetting(\"PART_CATEGORY_PARAMETERS\") }}\n{{ globalsetting(\"PART_CATEGORY_DEFAULT_ICON\") }}\n{{ globalsetting(\"PART_PARAMETER_ENFORCE_UNITS\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"SERIAL_NUMBER_GLOBALLY_UNIQUE\") }}\n{{ globalsetting(\"SERIAL_NUMBER_AUTOFILL\") }}\n{{ globalsetting(\"STOCK_DELETE_DEPLETED_DEFAULT\") }}\n{{ globalsetting(\"STOCK_BATCH_CODE_TEMPLATE\") }}\n{{ globalsetting(\"STOCK_ENABLE_EXPIRY\") }}\n{{ globalsetting(\"STOCK_STALE_DAYS\") }}\n{{ globalsetting(\"STOCK_ALLOW_EXPIRED_SALE\") }}\n{{ globalsetting(\"STOCK_ALLOW_EXPIRED_BUILD\") }}\n{{ globalsetting(\"STOCK_OWNERSHIP_CONTROL\") }}\n{{ globalsetting(\"STOCK_LOCATION_DEFAULT_ICON\") }}\n{{ globalsetting(\"STOCK_SHOW_INSTALLED_ITEMS\") }}\n{{ globalsetting(\"STOCK_ENFORCE_BOM_INSTALLATION\") }}\n{{ globalsetting(\"STOCK_ALLOW_OUT_OF_STOCK_TRANSFER\") }}\n{{ globalsetting(\"TEST_STATION_DATA\") }}\n{{ globalsetting(\"TEST_UPLOAD_CREATE_TEMPLATE\") }}\n```\n\nLANGUAGE: markdown\nCODE:\n```\n{{ globalsetting(\"PLUGIN_ON_STARTUP\") }}\n{{ globalsetting(\"PLUGIN_UPDATE_CHECK\") }}\n{{ globalsetting(\"ENABLE_PLUGINS_URL\") }}\n{{ globalsetting(\"ENABLE_PLUGINS_NAVIGATION\") }}\n{{ globalsetting(\"ENABLE_PLUGINS_APP\") }}\n{{ globalsetting(\"ENABLE_PLUGINS_SCHEDULE\") }}\n{{ globalsetting(\"ENABLE_PLUGINS_EVENTS\") }}\n{{ globalsetting(\"ENABLE_PLUGINS_INTERFACE\") }}\n```\n\n----------------------------------------\n\nTITLE: Setting up InvenTree Development Environment with Docker\nDESCRIPTION: Commands to clone the InvenTree repository, install dependencies, and set up a development environment using Docker. This creates a complete development server with demo data.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/inventree/InvenTree.git && cd InvenTree\ndocker compose --project-directory . -f contrib/container/dev-docker-compose.yml run --rm inventree-dev-server invoke install\ndocker compose --project-directory . -f contrib/container/dev-docker-compose.yml run --rm inventree-dev-server invoke dev.setup-test --dev\ndocker compose --project-directory . -f contrib/container/dev-docker-compose.yml up -d\n```\n\n----------------------------------------\n\nTITLE: Complete Label Printer Plugin Example\nDESCRIPTION: A complete example implementation of a label printing plugin showing the basic structure and required methods for interfacing with a dummy printer backend.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/label.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom dummy_printer import printer_backend\n\nclass MyLabelPrinter(LabelPrintingMixin, InvenTreePlugin):\n    \"\"\"\n    A simple example plugin which provides support for a dummy printer.\n\n    A more complex plugin would communicate with an actual printer!\n    \"\"\"\n\n    NAME = \"MyLabelPrinter\"\n    SLUG = \"mylabel\"\n    TITLE = \"A dummy printer\"\n\n    # Set BLOCKING_PRINT to false to return immediately\n    BLOCKING_PRINT = False\n\n    def print_label(self, **kwargs):\n        \"\"\"\n        Send the label to the printer\n\n        kwargs:\n            pdf_data: Raw PDF data of the rendered label\n            filename: The filename of this PDF label\n            label_instance: The instance of the label model which triggered the print_label() method\n            item_instance: The instance of the database model against which the label is printed\n            user: The user who triggered this print job\n            width: The expected width of the label (in mm)\n            height: The expected height of the label (in mm)\n            printing_options: The printing options set for this print job defined in the PrintingOptionsSerializer\n        \"\"\"\n\n        width = kwargs['width']\n        height = kwargs['height']\n\n        # This dummy printer supports printing of raw image files\n        printer_backend.print(png_file, w=width, h=height)\n```\n\n----------------------------------------\n\nTITLE: Performing Stock Adjustments with InvenTree API\nDESCRIPTION: Shows various stock adjustment operations including counting, adding, removing, and transferring stock. This example demonstrates fetching a stock item by ID and performing different stock operations on it.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.stock import StockItem, StockLocation\n\n# Fetch item from the server\nitem = StockItem(api, pk=99)\n\n# Count stock\nitem.countStock(500)\n\n# Add stock to the item\nitem.addStock(15)\n\n# Remove stock from the item\nitem.removeStock(25)\n\n# Transfer partial quantity to another location\nloc = StockLocation(api, pk=12)\nitem.transferStock(loc, quantity=50)\n```\n\n----------------------------------------\n\nTITLE: Accessing Model Metadata via Python API\nDESCRIPTION: Shows how to retrieve and set metadata for a Part model using the InvenTree Python API library.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/metadata.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.api import InvenTreeAPI\nfrom inventree.part import Part\n\napi = InvenTreeAPI(\"http://localhost:8000\", username=\"admin\", password=\"inventree\")\n\npart = Part(api, pk=100)\n\nprint(part.getMetadata())\n\n> {'foo': 'bar', 'hello': 'world'}\n\npart.setMetadata(\"abc\", \"xyz\")\n\nprint(part.getMetadata())\n\n> {'abc': 'xyz', 'foo': 'bar', 'hello': 'world'}\n\npart.setMetadata({\"aaa\": \"ABC\"}, overwrite=True)\n\nprint(part.getMetadata())\n> {'aaa': 'ABC'}\n```\n\n----------------------------------------\n\nTITLE: Defining Custom URL Patterns for InvenTree Plugin (Python)\nDESCRIPTION: This snippet demonstrates how to use the UrlsMixin class to define custom URL patterns for an InvenTree plugin. It shows how to set up a URL pattern that maps to a view function.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/urls.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass MyUrlsPlugin(UrlsMixin, InvenTreePlugin):\n\n    NAME = \"UrlsMixin\"\n\n    URLS = [\n        re_path(r'increase/(?P<location>\\d+)/(?P<pk>\\d+)/', self.view_increase, name='increase-level'),\n    ]\n```\n\n----------------------------------------\n\nTITLE: Accessing Plugin Settings\nDESCRIPTION: Examples of how to get, set and validate plugin settings using the provided helper methods. Shows usage of get_setting with cache control, set_setting for value updates, and check_settings for validation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/settings.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\napi_url = self.get_setting('API_URL', cache = False)\nself.set_setting('API_URL', 'some value')\nis_valid, missing_settings = self.check_settings()\n```\n\n----------------------------------------\n\nTITLE: Deleting a Part in InvenTree\nDESCRIPTION: Demonstrates how to delete a part from the InvenTree database. This example shows that a part must be marked as inactive before it can be deleted.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.part import Part\n\npart = Part(api, pk=10)\npart.save(data={'active': False})\npart.delete()\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Currency Exchange Plugin in Python\nDESCRIPTION: Example implementation of a custom currency exchange plugin that demonstrates how to extend the CurrencyExchangeMixin and InvenTreePlugin classes. The plugin generates random exchange rates for demonstration purposes. The update_exchange_rates method must be implemented to return a dictionary of exchange rates for given currency symbols.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/currency.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plugin import InvenTreePlugin\nfrom plugin.mixins import CurrencyExchangeMixin\n\nclass MyFirstCurrencyExchangePlugin(CurrencyExchangeMixin, InvenTreePlugin):\n    \"\"\"Sample currency exchange plugin\"\"\"\n\n    ...\n\n    def update_exchange_rates(self, base_currency: str, symbols: list[str]) -> dict:\n        \"\"\"Update currency exchange rates.\n\n        This method *must* be implemented by the plugin class.\n\n        Arguments:\n            base_currency: The base currency to use for exchange rates\n            symbols: A list of currency symbols to retrieve exchange rates for\n\n        Returns:\n            A dictionary of exchange rates, or None if the update failed\n\n        Raises:\n            Can raise any exception if the update fails\n        \"\"\"\n\n        rates = {\n            'base_currency': 1.00\n        }\n\n        for sym in symbols:\n            rates[sym] = random.randrange(5, 15) * 0.1\n\n        return rates\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Entry Points in setup.cfg\nDESCRIPTION: Example of how to define entry points for an InvenTree plugin in a setup.cfg file. This configuration exposes the plugin class to InvenTree's plugin discovery mechanism.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/how_to.md#2025-04-22_snippet_0\n\nLANGUAGE: ini\nCODE:\n```\n[options.entry_points]\ninventree_plugins =\n        ShopifyIntegrationPlugin = path.to.source:ShopifyIntegrationPluginClass\n```\n\n----------------------------------------\n\nTITLE: Implementing Scheduled Tasks with ScheduleMixin in Python\nDESCRIPTION: This code snippet demonstrates how to create a plugin class that uses the ScheduleMixin to schedule tasks. It shows the structure of a plugin class and how to define scheduled methods.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/schedule.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plugin import InvenTreePlugin\nfrom plugin.mixins import ScheduleMixin\n\n\nclass ScheduledTaskPlugin(InvenTreePlugin, ScheduleMixin):\n    \"\"\"\n    A sample plugin which implements the ScheduleMixin,\n    to enable scheduled tasks\n    \"\"\"\n\n    NAME = \"ScheduledTaskPlugin\"\n    TITLE = \"Scheduled Task Demo\"\n    DESCRIPTION = \"Demonstrate scheduling of tasks at regular intervals\"\n    VERSION = \"0.1\"\n\n    def scheduled_task(self):\n        print(\"I run every minute!\")\n\n    def custom_task(self):\n        print(\"This is a custom task!\")\n\n    def setup_schedule(self):\n\n        self.every_minute(\n            \"scheduled_task\",\n            self.scheduled_task,\n            kwargs={},\n        )\n\n        self.every_day(\n            \"custom_daily_task\",\n            \"plugin.samples.integration.scheduled_task.ScheduledTaskPlugin.custom_task\",\n        )\n```\n\n----------------------------------------\n\nTITLE: InvenTree Configuration File Template\nDESCRIPTION: YAML template for the InvenTree configuration file (config.yaml). This file contains various settings for customizing the InvenTree server installation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/config.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{{ includefile(\"src/backend/InvenTree/config_template.yaml\", \"Configuration File Template\", fmt=\"yaml\") }}\n```\n\n----------------------------------------\n\nTITLE: Defining Machine Settings for a Custom Driver in Python\nDESCRIPTION: This snippet demonstrates how to define machine-specific settings for a custom driver. It shows the structure of the MACHINE_SETTINGS dictionary and how to specify required settings.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/machines/overview.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nclass MyXYZDriver(ABCBaseDriver):\n    MACHINE_SETTINGS = {\n        'SERVER': {\n            'name': _('Server'),\n            'description': _('IP/Hostname to connect to the cups server'),\n            'default': 'localhost',\n            'required': True,\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Custom Validation Plugin in Python\nDESCRIPTION: Example of a custom validation plugin that implements the validate_model_instance method. It enforces rules for part names, categories, and descriptions.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/validation.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plugin import InvenTreePlugin\nfrom plugin.mixins import ValidationMixin\n\nimport part.models\n\n\nclass MyValidationMixin(ValidationMixin, InvenTreePlugin):\n    \"\"\"Custom validation plugin.\"\"\"\n\n    def validate_model_instance(self, instance, deltas=None):\n        \"\"\"Custom model validation example.\n\n        - A part name and category name must have the same starting letter\n        - A PartCategory description field cannot be shortened after it has been created\n        \"\"\"\n\n        if isinstance(instance, part.models.Part):\n            if category := instance.category:\n                if category.name[0] != part.name[0]:\n                    self.raise_error({\n                        \"name\": \"Part name and category name must start with the same letter\"\n                    })\n\n        if isinstance(instance, part.models.PartCategory):\n            if deltas and 'description' in deltas:\n                d_new = deltas['description']['new']\n                d_old = deltas['description']['old']\n\n                if len(d_new) < len(d_old):\n                    self.raise_error({\n                        \"description\": \"Description cannot be shortened\"\n                    })\n```\n\n----------------------------------------\n\nTITLE: Configuring Plugin Entry Points in setup.py\nDESCRIPTION: Example of how to define entry points for an InvenTree plugin in a setup.py file. This configuration exposes the plugin class to InvenTree's plugin discovery mechanism using setuptools.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/how_to.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nimport setuptools\n\n# ...\n\nsetuptools.setup(\n    name='ShopifyIntegrationPlugin'\n    # ..\n\n    entry_points={\"inventree_plugins\": [\"ShopifyIntegrationPlugin = path.to.source:ShopifyIntegrationPluginClass\"]}\n)\n```\n\n----------------------------------------\n\nTITLE: Python API Token Authentication Example\nDESCRIPTION: Example of making an authenticated GET request to the InvenTree API using Python requests library and token authentication\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport requests\n\ntoken = 'MY-TOKEN-VALUE-HERE'\ndata = { ... }\nheaders = {\n    'AUTHORIZATION': f'Token {token}'\n}\nresponse = request.get('http://localhost:8080/api/part/', data=data, headers=headers)\n```\n\n----------------------------------------\n\nTITLE: Running Invoke Task in Docker\nDESCRIPTION: This command demonstrates how to run an invoke task within a Docker container using docker compose. It uses `docker compose run` to execute the `update` task within the `inventree-server` service. This command should be executed from the directory containing the `docker-compose.yml` file.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/invoke.md#2025-04-22_snippet_3\n\nLANGUAGE: Shell\nCODE:\n```\ndocker compose run --rm inventree-server invoke update\n```\n\n----------------------------------------\n\nTITLE: Implementing ReportMixin in Python for InvenTree Plugins\nDESCRIPTION: This code snippet demonstrates a sample plugin class that implements the ReportMixin to add custom context data to report templates in InvenTree. It shows the structure of a plugin class and includes placeholders for the add_report_context and add_label_context methods.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/report.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SampleReportPlugin(ReportMixin, SettingsMixin, UrlsMixin, AppMixin, NavigationMixin):\n    \"\"\"\n    A sample plugin which provides some custom context data to the report templates\n    \"\"\"\n\n    NAME = \"Sample Report Plugin\"\n    SLUG = \"reportpluginsample\"\n    TITLE = \"Report Plugin Sample\"\n\n    SETTINGS = {\n        'TEST_SETTING': {\n            'name': 'Test Setting',\n            'description': 'A test setting for demonstrating how to use settings in a plugin',\n            'default': 'This is a test setting',\n        },\n    }\n\n    def add_report_context(self, report_instance, model_instance, request, context):\n        \"\"\"\n        Add plugin-specific context to a report\n        \"\"\"\n\n        # Add some sample data to the report context\n        context['plugin_sample_data'] = {\n            'foo': 'bar',\n            'test_value': InvenTreeSetting.get_setting('REPORTPLUGINSAMPLE_TEST_SETTING'),\n        }\n\n        return context\n\n    def add_label_context(self, label_instance, model_instance, request, context):\n        \"\"\"\n        Add plugin-specific context to a label\n        \"\"\"\n\n        # Add some sample data to the label context\n        context['plugin_sample_data'] = {\n            'foo': 'bar',\n            'test_value': InvenTreeSetting.get_setting('REPORTPLUGINSAMPLE_TEST_SETTING'),\n        }\n\n        return context\n```\n\n----------------------------------------\n\nTITLE: Basic InvenTree Plugin Test Structure\nDESCRIPTION: Basic structure for creating a plugin unit test class that inherits from InvenTreeTestCase\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/test.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Basic unit tests for the plugin\nfrom InvenTree.unit_test import InvenTreeTestCase\n\nclass TestMyPlugin(InvenTreeTestCase):\n    def test_my_function(self):\n        do some work here...\n```\n\n----------------------------------------\n\nTITLE: Defining Plugin Metadata in Python\nDESCRIPTION: Example of setting metadata options for an InvenTree plugin, including name, version, author, and compatibility information.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/index.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nNAME = '' # Used as a general reference to the plugin\nSLUG = None  # Used in URLs, setting-names etc. when a unique slug as a reference is needed -> the plugin name is used if not set\nTITLE = None  # A nice human friendly name for the plugin -> used in titles, as plugin name etc.\n\nAUTHOR = None  # Author of the plugin, git commit information is used if not present\nPUBLISH_DATE = None  # Publishing date of the plugin, git commit information is used if not present\nWEBSITE = None  # Website for the plugin, developer etc. -> is shown in plugin overview if set\n\nVERSION = None  # Version of the plugin\nMIN_VERSION = None  # Lowest InvenTree version number that is supported by the plugin\nMAX_VERSION = None  # Highest InvenTree version number that is supported by the plugin\n```\n\n----------------------------------------\n\nTITLE: Implementing SampleLocatePlugin Class in Python\nDESCRIPTION: This code snippet demonstrates a sample implementation of a locate plugin using the LocateMixin class. It defines methods for locating stock items and stock locations, as well as configuration options for the plugin.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/locate.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SampleLocatePlugin(LocateMixin, SettingsMixin, InvenTreePlugin):\n    \"\"\"\n    A sample plugin which implements location functionality\n    \"\"\"\n\n    NAME = \"SampleLocate\"\n    TITLE = \"Sample Locate Plugin\"\n    DESCRIPTION = \"A sample plugin which implements stock location functionality\"\n    VERSION = \"0.1\"\n\n    SETTINGS = {\n        'WEB_HOOK_URL': {\n            'name': 'Web Hook URL',\n            'description': 'API endpoint for locate functionality',\n            'default': 'http://localhost:1234/locate/',\n        },\n        'DELAY': {\n            'name': 'Locate Delay',\n            'description': 'Delay time (in seconds)',\n            'validator': [int, float],\n            'default': 3,\n        }\n    }\n\n    def locate_stock_item(self, item, request, data=None):\n        \"\"\"\n        Locate a stock item\n        \"\"\"\n\n        if item:\n            logger.info(f\"SampleLocate Plugin: Locate stock item {item}\")  # noqa: F821\n\n        # Here, we could send a message to our remote system\n\n        delay = float(self.get_setting('DELAY'))\n\n        # Wait for specified delay\n        sleep(delay)\n\n        return {\n            'success': True,\n            'message': f\"Located stock item {item.pk}\"\n        }\n\n    def locate_stock_location(self, location, request, data=None):\n        \"\"\"\n        Locate a stock location\n        \"\"\"\n\n        if location:\n            logger.info(f\"SampleLocate Plugin: Locate stock location {location}\")  # noqa: F821\n\n        # Here, we could send a message to our remote system\n\n        delay = float(self.get_setting('DELAY'))\n\n        # Wait for specified delay\n        sleep(delay)\n\n        return {\n            'success': True,\n            'message': f\"Located stock location {location.pk}\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Specifying Primary Keys for Bulk Deletion in InvenTree API\nDESCRIPTION: This snippet demonstrates how to specify multiple items for deletion by providing an array of primary key values in the 'items' variable. This allows targeting specific records for removal in a single API request.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/bulk_delete.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"items\": [1, 10, 50, 99]\n}\n```\n\n----------------------------------------\n\nTITLE: Triggering Generic Object Updated Event in Python\nDESCRIPTION: Shows how a generic 'object updated' event is triggered when a Part object is updated in the database. The event includes the model class and the primary key of the updated object.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/event.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ntrigger_event('part_part.saved', model='part', id=123)\n```\n\n----------------------------------------\n\nTITLE: Implementing a Simple Action Plugin in Python\nDESCRIPTION: This code snippet shows the implementation of a sample action plugin named SimpleActionPlugin. It serves as a template for creating custom action plugins in InvenTree.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/action.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n::: plugin.samples.integration.simpleactionplugin.SimpleActionPlugin\n    options:\n        show_bases: False\n        show_root_heading: False\n        show_root_toc_entry: False\n        show_source: True\n        members: []\n```\n\n----------------------------------------\n\nTITLE: Importing InvenTree Data from JSON\nDESCRIPTION: This command imports InvenTree data from a JSON file into the database. The `-c` option clears existing data from the database before importing, and the `-f` option specifies the input filename. Use this command to restore a database from a backup or migrate data to a new installation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/migrate.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\n\"invoke import-records -c -f data.json\"\n```\n\n----------------------------------------\n\nTITLE: Accessing and Updating Model Metadata in Python\nDESCRIPTION: Demonstrates how to access and update the metadata field of a Part model instance using Python in an InvenTree plugin.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/metadata.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom part.models import Part\n\n# Show metadata value against a particular Part instance\npart = Part.objects.get(pk=100)\nprint(part.metadata)\n\n> {'foo': 'bar'}\n\npart.metadata['hello'] = 'world'\nprint(part.metadata)\n\n> {'foo': 'bar', 'hello': 'world'}\n```\n\n----------------------------------------\n\nTITLE: Non-Blocking Print Configuration\nDESCRIPTION: Example showing how to configure a label printing plugin to use non-blocking background printing by setting the BLOCKING_PRINT class attribute.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/label.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MyPrinterPlugin(LabelPrintingMixin, InvenTreePlugin):\n    BLOCKING_PRINT = False\n```\n\n----------------------------------------\n\nTITLE: Implementing API Integration with APICallMixin in Python\nDESCRIPTION: Example implementation of a plugin class that uses APICallMixin to make API calls to external services. The plugin shows basic structure for API integration including plugin registration and configuration.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/api.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom plugin import InvenTreePlugin\nfrom plugin.base.integration import APICallMixin\n\nclass SampleApiCallerPlugin(APICallMixin, InvenTreePlugin):\n    \"\"\"\n    A sample plugin which demonstrates basic functionality of the APICallMixin class\n    \"\"\"\n\n    NAME = \"Sample API Caller\"\n    SLUG = \"sample-api-caller\"\n    TITLE = \"Sample API Caller Plugin\"\n    DESCRIPTION = \"A sample plugin which makes API calls to a remote server\"\n```\n\n----------------------------------------\n\nTITLE: Updating InvenTree Database\nDESCRIPTION: Performs database updates and migrations after updating InvenTree source code.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_14\n\nLANGUAGE: bash\nCODE:\n```\ninvoke update\n```\n\n----------------------------------------\n\nTITLE: Using IconPackMixin Class in InvenTree Plugins\nDESCRIPTION: The IconPackMixin class enables plugins to expose custom icon packs in the InvenTree UI. It's particularly useful for adding specialized icons like different types of storage containers, ESD bags, and other custom elements not available in the standard tabler icons library.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/icon.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SampleIconPlugin:\n    options:\n        show_bases: False\n        show_root_heading: False\n        show_root_toc_entry: False\n        show_source: True\n        members: []\n```\n\n----------------------------------------\n\nTITLE: Initializing CurrencyManager and Accessing Currency Data in Python\nDESCRIPTION: This snippet demonstrates how to create a CurrencyManager instance and retrieve base currency and exchange rate data. It requires a valid InvenTreeAPI instance.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/currency.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.currency import CurrencyManager\n\n# The manager class must be passed a valid InvenTreeAPI instance\nmanager = CurrencyManager(api)\n\n# Access the 'base currency' data\nbase_currency = manager.getBaseCurrency()\n\n# Access the 'exchange rate' data\nrates = manager.getExchangeRates()\n```\n\n----------------------------------------\n\nTITLE: Implementing Translations in HTML Templates for InvenTree\nDESCRIPTION: This snippet shows how to use Django's templating engine to include translatable strings in HTML and JavaScript files. It uses the 'trans' template tag to mark strings for translation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{ % load i18n % }\n\n<span>{ % trans \"This string will be translated\" % } - this string will not!</span>\n```\n\n----------------------------------------\n\nTITLE: Implementing get_ui_dashboard_items Method in UserInterfaceMixin\nDESCRIPTION: This method returns a list of custom dashboard items for the InvenTree dashboard. It should be overridden to provide custom dashboard functionality.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef get_ui_dashboard_items(self, context: dict = None) -> List[UIFeature]:\n    \"\"\"Return a list of custom dashboard items for this plugin.\"\"\"\n    return []\n```\n\n----------------------------------------\n\nTITLE: Defining CustomDashboardItemOptions Class for Dashboard Items\nDESCRIPTION: This class defines the options available for custom dashboard items in InvenTree plugins. It includes properties for minimum and maximum sizes, as well as refresh intervals.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass CustomDashboardItemOptions:\n    \"\"\"Options for custom dashboard items\"\"\"\n\n    min_width: int = 4\n    max_width: int = 12\n    min_height: int = 4\n    max_height: int = 12\n    refresh_interval: int = 0\n```\n\n----------------------------------------\n\nTITLE: Defining CustomPanelOptions Class for Panels\nDESCRIPTION: This class defines the options available for custom panels in InvenTree plugins. It includes properties for panel type, location, and refresh interval.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nclass CustomPanelOptions:\n    \"\"\"Options for custom panels\"\"\"\n\n    type: str = 'custom'\n    location: str = 'panel'\n    refresh_interval: int = 0\n```\n\n----------------------------------------\n\nTITLE: Filtering Items for Bulk Deletion in InvenTree API\nDESCRIPTION: This snippet shows how to use the 'filters' parameter to specify conditions for bulk deletion. Items matching these filter criteria will be targeted for removal, enabling deletion based on properties rather than specific IDs.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/bulk_delete.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"filters\": {\n        \"active\": False,\n        \"category\": 7.\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing get_ui_features Method in UserInterfaceMixin\nDESCRIPTION: This method extracts available user interface features from the plugin based on the requested feature type. It calls other methods to gather specific feature types.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_ui_features(self, feature_type: str = None, context: dict = None) -> List[UIFeature]:\n    \"\"\"Return a list of UI features for this plugin.\"\"\"\n\n    features = []\n\n    if feature_type == 'panel' or feature_type is None:\n        features += self.get_ui_panels(context=context)\n\n    if feature_type == 'dashboard' or feature_type is None:\n        features += self.get_ui_dashboard_items(context=context)\n\n    if feature_type == 'template_editor' or feature_type is None:\n        features += self.get_ui_template_editors(context=context)\n\n    if feature_type == 'template_preview' or feature_type is None:\n        features += self.get_ui_template_previews(context=context)\n\n    return features\n```\n\n----------------------------------------\n\nTITLE: Generating Report Context for Parts in Python\nDESCRIPTION: This method returns the context dictionary for Part reports, including various attributes of the Part object.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/context_variables.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef report_context(self):\n    \"\"\"Return some basic context information for this part\"\"\"\n\n    return {\n        'part': self,\n        'name': self.full_name,\n        'description': self.description,\n        'IPN': self.IPN,\n        'revision': self.revision,\n        'category': self.category,\n        'stock': self.total_stock,\n        'URL': self.get_absolute_url(),\n    }\n```\n\n----------------------------------------\n\nTITLE: Basic Authentication with Username/Password\nDESCRIPTION: Example of connecting to InvenTree server using username and password authentication\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.api import InvenTreeAPI\n\nSERVER_ADDRESS = 'http://127.0.0.1:8000'\nMY_USERNAME = 'not_my_real_username'\nMY_PASSWORD = 'not_my_real_password'\n\napi = InvenTreeAPI(SERVER_ADDRESS, username=MY_USERNAME, password=MY_PASSWORD)\n```\n\n----------------------------------------\n\nTITLE: Rendering Markdown Content in InvenTree Reports using HTML\nDESCRIPTION: Example demonstrating how to render markdown-formatted content in InvenTree reports using the markdownify filter from django-markdownify. This allows markdown content like notes to be properly formatted in generated PDF reports.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_21\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n\n{% load markdownify %}\n\n<h3>Part Notes</h3>\n<p>\n    {{ part.notes | markdownify }}\n</p>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: JavaScript API Token Authentication Example\nDESCRIPTION: Example of making an authenticated GET request to the InvenTree API using jQuery and token authentication\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/index.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nvar token = \"MY-TOKEN-VALUE-HERE\";\n\n$.ajax({\n  url: \"http://localhost:8080/api/part/\",\n  type: 'GET',\n  headers: {\"Authorization\": `Token ${token}`}\n});\n```\n\n----------------------------------------\n\nTITLE: Including Report Assets in InvenTree Reports using HTML\nDESCRIPTION: Example demonstrating how to include user-uploaded report assets (such as custom images) in reports using the asset template tag. This is useful for adding company-specific graphics to reports and labels.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_19\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<!-- Load the report helper functions -->\n{% load report %}\n<img src=\"{% asset 'my_awesome_logo.png' %}\"/>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: API Metadata Access Examples (PUT vs PATCH)\nDESCRIPTION: Illustrates the difference between PUT and PATCH requests when updating metadata via the API, showing how PUT overwrites existing data while PATCH merges with it.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/metadata.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n// Initial Data:\n{\"foo\": \"bar\", \"hello\": \"world\"}\n\n// Payload:\n{\"xyz\": \"XYZ\"}\n\n// Result of PUT request:\n{\"xyz: XYZ\"}\n\n// Result of PATCH request:\n{\"foo\": \"bar\", \"hello\": \"world\", \"xyz\": \"XYZ\"}\n```\n\n----------------------------------------\n\nTITLE: Label Printer Base Driver API Methods\nDESCRIPTION: Core interface methods for implementing label printer drivers including print_label, print_labels, get_printers and rendering functions for various output formats like PDF, HTML, and PNG.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/machines/label_printer.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nmachine.machine_types.LabelPrinterBaseDriver\n```\n\n----------------------------------------\n\nTITLE: Implementing get_ui_panels Method in UserInterfaceMixin\nDESCRIPTION: This method returns a list of custom panels for InvenTree pages. It should be overridden to provide custom panel functionality.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef get_ui_panels(self, context: dict = None) -> List[UIFeature]:\n    \"\"\"Return a list of custom panels for this plugin.\"\"\"\n    return []\n```\n\n----------------------------------------\n\nTITLE: Performing Bulk Delete Operations in InvenTree\nDESCRIPTION: Shows how to delete multiple database entries in a single operation. This example demonstrates deleting all stock items in a specific category using the bulkDelete method with filters.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/examples.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.stock import StockItem\n\n# Delete all items in a particular category\nStockItem.bulkDelete(api, filters={'category': 3})\n```\n\n----------------------------------------\n\nTITLE: Mathematical Operations in HTML Template\nDESCRIPTION: Shows how to use various mathematical operations like add, subtract, multiply, and divide in a template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<!-- Load the report helper functions -->\n{% load report %}\n\n{% add 1 3 %} <!-- Add two numbers together -->\n{% subtract 4 3 %} <!-- Subtract 3 from 4 -->\n{% multiply 1.2 3.4 %} <!-- Multiply two numbers -->\n{% divide 10 2  as division_result %} <!-- Divide 10 by 2 -->\n\nDivision Result: {{ division_result }}\n\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Filtering Database Model in HTML Template\nDESCRIPTION: Shows how to use the filter_db_model function to filter a database model and generate a list of active customers.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n\n{% filter_db_model company.company is_customer=True active=True as active_customers %}\n\n<ul>\n    {% for customer in active_customers %}\n    <li>{{ customer.name }}</li>\n    {% endfor %}\n</ul>\n\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Assigning Variables in HTML Template Using render_currency\nDESCRIPTION: Shows how to use the render_currency helper function and assign its output to a variable for later use in the template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n\n{% load report %}\n\n{% render_currency 12.3 currency='USD' as myvar %}\n...\n...\nResult: {{ myvar }}\n\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Invoking Superuser Command\nDESCRIPTION: This snippet shows how to create a superuser account using the `invoke` command. This process establishes a user with administrative rights within the InvenTree system.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/accounts.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninvoke superuser\n```\n\n----------------------------------------\n\nTITLE: Updating Exchange Rates in InvenTree using Python\nDESCRIPTION: This snippet demonstrates how to manually request an update of currency data from the server using the CurrencyManager class.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/currency.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.currency import CurrencyManager\n\nmanager = CurrencyManager(api)\nmanager.refreshExchangeRates()\n```\n\n----------------------------------------\n\nTITLE: Implementing Serial Number Validation in Python\nDESCRIPTION: Example of a custom serial number validation method that ensures all serial numbers are valid hexadecimal values.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/validation.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef validate_serial_number(self, serial: str, part: Part, stock_item: StockItem = None):\n    \"\"\"Validate the supplied serial number\n\n    Arguments:\n        serial: The proposed serial number (string)\n        part: The Part instance for which this serial number is being validated\n        stock_item: The StockItem instance for which this serial number is being validated\n    \"\"\"\n\n    try:\n        # Attempt integer conversion\n        int(serial, 16)\n    except ValueError:\n        raise ValidationError(\"Serial number must be a valid hex value\")\n```\n\n----------------------------------------\n\nTITLE: Part Update Check Class\nDESCRIPTION: Plugin class for checking if a part should be updated based on its properties\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/test.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nclass MySupplier():\n\n    def should_be_updated(self, my_part):\n\n        ...\n        return True/False\n```\n\n----------------------------------------\n\nTITLE: Modifying docker-compose.yml for Custom Images\nDESCRIPTION: This snippet shows how to modify the docker-compose.yml file to build a custom Docker image for the InvenTree server and worker services. It includes changing the image tag to include '-custom' and adding build context and arguments.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndiff --git a/docker-compose.yml b/docker-compose.yml\nindex 8adee63..dc3993c 100644\n--- a/docker-compose.yml\n+++ b/docker-compose.yml\n@@ -69,7 +69,14 @@ services:\n    # Uses gunicorn as the web server\n    inventree-server:\n        # If you wish to specify a particular InvenTree version, do so here\n-        image: inventree/inventree:${INVENTREE_TAG:-stable}\n+        image: inventree/inventree:${INVENTREE_TAG:-stable}-custom\n+        pull_policy: never\n+        build:\n+          context: .\n+          dockerfile: Dockerfile\n+          target: production\n+          args:\n+            INVENTREE_TAG: ${INVENTREE_TAG:-stable}\n        # Only change this port if you understand the stack.\n        # If you change this you have to change:\n        # - the proxy settings (on two lines)\n@@ -88,7 +95,8 @@ services:\n    # Background worker process handles long-running or periodic tasks\n    inventree-worker:\n        # If you wish to specify a particular InvenTree version, do so here\n-        image: inventree/inventree:${INVENTREE_TAG:-stable}\n+        image: inventree/inventree:${INVENTREE_TAG:-stable}-custom\n+        pull_policy: never\n        command: invoke worker\n        depends_on:\n            - inventree-server\n```\n\n----------------------------------------\n\nTITLE: Using getindex Function in HTML Template\nDESCRIPTION: Demonstrates the usage of the getindex function to access an element at a specific index in a list-like container.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% getindex my_list 1 as value %}\nItem: {{ value }}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Defining a Custom Machine Type in Python\nDESCRIPTION: This snippet demonstrates how to create a custom machine type called 'ABC' with a base driver and custom status codes. It defines required methods and inherits from BaseMachineType.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/machines/overview.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\nfrom generic.states import ColorEnum\nfrom plugin.machine import BaseDriver, BaseMachineType, MachineStatus\n\nclass ABCBaseDriver(BaseDriver):\n    \"\"\"Base xyz driver.\"\"\"\n\n    machine_type = 'abc'\n\n    def my_custom_required_method(self):\n        \"\"\"This function must be overridden.\"\"\"\n        raise NotImplementedError('The `my_custom_required_method` function must be overridden!')\n\n    def my_custom_method(self):\n        \"\"\"This function can be overridden.\"\"\"\n        raise NotImplementedError('The `my_custom_method` function can be overridden!')\n\n    required_overrides = [my_custom_required_method]\n\nclass ABCMachine(BaseMachineType):\n    SLUG = 'abc'\n    NAME = _('ABC')\n    DESCRIPTION = _('This is an awesome machine type for ABC.')\n\n    base_driver = ABCBaseDriver\n\n    class ABCStatus(MachineStatus):\n        CONNECTED = 100, _('Connected'), ColorEnum.success\n        STANDBY = 101, _('Standby'), ColorEnum.success\n        PRINTING = 110, _('Printing'), ColorEnum.primary\n\n    MACHINE_STATUS = ABCStatus\n    default_machine_status = ABCStatus.DISCONNECTED\n```\n\n----------------------------------------\n\nTITLE: Loading Report Helper Functions in HTML Template\nDESCRIPTION: Demonstrates how to load the report helper functions at the start of an InvenTree report template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<!-- Load the report helper functions -->\n{% load report %}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Multiple Items with Filters\nDESCRIPTION: Example of querying multiple database items with filter parameters\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.part import Part\nfrom inventree.stock import StockItem\n\nparts = Part.list(api, category=10, assembly=True)\nitems = StockItem.list(api, location=4, part=24)\n```\n\n----------------------------------------\n\nTITLE: Triggering Generic Object Created Event in Python\nDESCRIPTION: Demonstrates how a generic 'object created' event is triggered when a new Part object is created in the database. The event includes the model class and the primary key of the created object.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/event.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ntrigger_event('part_part.created', model='part', id=123)\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree via Shell Script\nDESCRIPTION: Single line installation command that downloads and executes the InvenTree installer script. Supports specific Linux distributions and provides automated setup functionality.\nSOURCE: https://github.com/inventree/inventree/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO install.sh https://get.inventree.org && bash install.sh\n```\n\n----------------------------------------\n\nTITLE: Starting InvenTree Docker Containers\nDESCRIPTION: This command launches the InvenTree containers, including the database, web server, background worker, proxy server, and cache server.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose up -d\n```\n\n----------------------------------------\n\nTITLE: Restoring from Backup in InvenTree\nDESCRIPTION: Command to initiate a restore operation from a previous backup in InvenTree. This should be run within the virtual environment if one is configured.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/backup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninvoke restore\n```\n\n----------------------------------------\n\nTITLE: Installing Invoke with pip\nDESCRIPTION: This command uses pip to install or upgrade the invoke tool to the latest version. It ensures that the invoke tool is available for running InvenTree administration tasks.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/invoke.md#2025-04-22_snippet_0\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U invoke\n```\n\n----------------------------------------\n\nTITLE: Downloading Stock Items by Location in CSV Format\nDESCRIPTION: This example demonstrates how to download a list of all stock items in a specific location (ID: 10) in CSV format using the InvenTree API endpoint.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/download.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n<host>/api/stock/?format=csv&location=10\n```\n\n----------------------------------------\n\nTITLE: Performing Currency Conversion in Python with InvenTree\nDESCRIPTION: This code shows how to use the CurrencyManager to convert between different currencies. It requires valid exchange rate information for both the source and target currencies.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/currency.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.currency import CurrencyManager\n\nmanager = CurrencyManager(api)\n\n# Convert from AUD to CAD\ncad = manager.convertCurrency(12.54, 'AUD', 'CAD')\n\n# Convert from NZD to USD\nusd = manager.convertCurrency(99.99, 'NZD', 'USD')\n```\n\n----------------------------------------\n\nTITLE: Database Configuration Variables\nDESCRIPTION: Environment variables for configuring database connection parameters across multiple database backends\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/config.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment Variable | Configuration File | Description | Default |\n| --- | --- | --- | --- |\n| INVENTREE_DB_ENGINE | database.ENGINE | Database backend | *Not specified* |\n| INVENTREE_DB_NAME | database.NAME | Database name | *Not specified* |\n| INVENTREE_DB_USER | database.USER | Database username (if required) | *Not specified* |\n| INVENTREE_DB_PASSWORD | database.PASSWORD | Database password (if required) | *Not specified* |\n| INVENTREE_DB_HOST | database.HOST | Database host address (if required) | *Not specified* |\n| INVENTREE_DB_PORT | database.PORT | Database host port (if required) | *Not specified* |\n```\n\n----------------------------------------\n\nTITLE: Updating InvenTree Docker Images\nDESCRIPTION: This command pulls down the latest version of the InvenTree docker image to ensure the containers are running the latest version of the InvenTree source code.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose pull\n```\n\n----------------------------------------\n\nTITLE: Running InvenTree Development Server on Local Machine\nDESCRIPTION: Command to start the InvenTree development server on the local machine, making it accessible at http://127.0.0.1:8000. This setup only allows access from the same computer.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_dev.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n(env) invoke dev.server\n```\n\n----------------------------------------\n\nTITLE: Implementing View and URL Setup for InvenTree Plugin (Python)\nDESCRIPTION: This code shows how to implement a view function and set up URL patterns in an InvenTree plugin. It demonstrates rendering a template and configuring the URL route.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/urls.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef view_test(self, request):\n    return render(request, 'test.html', context)\n\ndef setup_urls(self):\n    return [\n        path('test/', self.view_test, name='test')\n    ]\n```\n\n----------------------------------------\n\nTITLE: Installing Supervisor for InvenTree in Bash\nDESCRIPTION: Command to install Supervisor using apt-get. Supervisor is used as a process monitor to ensure the web server and background worker processes are automatically started and managed.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_prod.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install supervisor\n```\n\n----------------------------------------\n\nTITLE: Defining Build Status Codes in Python\nDESCRIPTION: This code snippet defines the BuildStatus class, which contains status codes for build orders in InvenTree. It includes statuses such as PENDING, PRODUCTION, CANCELLED, and COMPLETED.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/manufacturing/build.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n::: build.status_codes.BuildStatus\n    options:\n        show_bases: False\n        show_root_heading: False\n        show_root_toc_entry: False\n        show_source: True\n        members: []\n```\n\n----------------------------------------\n\nTITLE: Defining and Setting Machine Status Codes in Python\nDESCRIPTION: This example shows how to define custom status codes for a machine type and how to set the status from within a driver. It demonstrates the use of the MachineStatus class and setting both status codes and free text status.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/machines/overview.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\nfrom plugin.machine import MachineStatus, BaseMachineType\n\nclass XYZStatus(MachineStatus):\n    CONNECTED = 100, _('Connected'), 'success'\n    STANDBY = 101, _('Standby'), 'success'\n    DISCONNECTED = 400, _('Disconnected'), 'danger'\n\nclass XYZMachineType(BaseMachineType):\n    # ...\n\n    MACHINE_STATUS = XYZStatus\n    default_machine_status = XYZStatus.DISCONNECTED\n\nclass MyXYZDriver(ABCBaseDriver):\n    # ...\n    def init_machine(self, machine):\n        # ... do some init stuff here\n        machine.set_status(XYZMachineType.MACHINE_STATUS.CONNECTED)\n        machine.set_status_text(\"Paper missing\")\n```\n\n----------------------------------------\n\nTITLE: Administrator Site Configuration Variables\nDESCRIPTION: Environment variables for configuring the Django administrative interface and administrator account settings\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/config.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n| Environment Variable | Configuration File | Description | Default |\n| --- | --- | --- | --- |\n| INVENTREE_ADMIN_ENABLED | admin_enabled | Enable the django administrator interface | True |\n| INVENTREE_ADMIN_URL | admin_url | URL for accessing the admin interface | admin |\n| INVENTREE_ADMIN_USER | admin_user | Admin account username | *Not specified* |\n| INVENTREE_ADMIN_PASSWORD | admin_password | Admin account password | *Not specified* |\n| INVENTREE_ADMIN_PASSWORD_FILE | admin_password_file | Admin account password file | *Not specified* |\n| INVENTREE_ADMIN_EMAIL | admin_email |Admin account email address | *Not specified* |\n```\n\n----------------------------------------\n\nTITLE: Creating Superuser in Docker Container\nDESCRIPTION: This command creates a new superuser account within an InvenTree Docker container. It requires the Docker environment to be configured and running with access to the `invoke` command.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/accounts.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker exec -rm -it inventree-server invoke superuser\n```\n\n----------------------------------------\n\nTITLE: Creating InvenTree User and Directories\nDESCRIPTION: Creates a dedicated user account for running InvenTree and sets up necessary directories.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo useradd -m -d /home/inventree -s /bin/bash inventree\nsudo su inventree\n```\n\n----------------------------------------\n\nTITLE: Defining Purchase Order Status Codes in Python\nDESCRIPTION: This code snippet defines the status codes for purchase orders in InvenTree. It includes various states such as pending, in progress, on hold, complete, cancelled, lost, and returned.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/purchasing/purchase_order.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass PurchaseOrderStatus:\n    # Order status codes\n    PENDING = 10  # Order is pending / draft\n    PLACED = 20  # Order has been placed with supplier\n    COMPLETE = 30  # Order has been completed\n    CANCELLED = 40  # Order was cancelled\n    LOST = 50  # Order was lost\n    RETURNED = 60  # Order was returned\n\n    # Order status colors\n    PENDING_COLOR = 'secondary'\n    PLACED_COLOR = 'primary'\n    COMPLETE_COLOR = 'success'\n    CANCELLED_COLOR = 'danger'\n    LOST_COLOR = 'warning'\n    RETURNED_COLOR = 'warning'\n\n    # Order status labels\n    PENDING_LABEL = 'Pending'\n    PLACED_LABEL = 'Placed'\n    COMPLETE_LABEL = 'Complete'\n    CANCELLED_LABEL = 'Cancelled'\n    LOST_LABEL = 'Lost'\n    RETURNED_LABEL = 'Returned'\n```\n\n----------------------------------------\n\nTITLE: Defining Sales Order Status Codes in Python\nDESCRIPTION: This code snippet defines the status codes for sales orders in InvenTree. It includes statuses such as PENDING, IN_PROGRESS, SHIPPED, and CANCELLED, among others. Each status has an associated integer value and a display name.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/sales/sales_order.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nclass SalesOrderStatus(models.TextChoices):\n    PENDING = 10, _('Pending')\n    IN_PROGRESS = 15, _('In Progress')\n    SHIPPED = 20, _('Shipped')\n    CANCELLED = 40, _('Cancelled')\n    LOST = 50, _('Lost')\n    RETURNED = 60, _('Returned')\n```\n\n----------------------------------------\n\nTITLE: Setting InvenTree Trusted Origins via Environment Variable\nDESCRIPTION: Example of how to specify a list of trusted origins for InvenTree using an environment variable. This is useful for configuring CSRF and CORS settings.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/config.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nINVENTREE_TRUSTED_ORIGINS='https://inventree.example.com:8443,https://stock.example.com:8443'\n```\n\n----------------------------------------\n\nTITLE: Initializing InvenTree Database\nDESCRIPTION: Runs database migrations and creates initial database schema for InvenTree.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ncd /home/inventree/src\ninvoke update\n```\n\n----------------------------------------\n\nTITLE: Cloning the InvenTree Repository Using Git\nDESCRIPTION: Command to clone the InvenTree repository from GitHub using git. This is the first step in setting up the development environment with devcontainers.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/devcontainer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/inventree/InvenTree.git\n```\n\n----------------------------------------\n\nTITLE: Defining PluginContext Interface for InvenTree Plugins\nDESCRIPTION: This TypeScript interface defines the structure of the context object passed to plugin rendering functions. It includes properties for various InvenTree entities and user information.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_8\n\nLANGUAGE: typescript\nCODE:\n```\nexport interface PluginContext {\n    user: {\n        username: string,\n        first_name: string,\n        last_name: string,\n        email: string,\n    },\n    part?: {\n        pk: number,\n        name: string,\n        description: string,\n        IPN: string,\n    },\n    stockitem?: {\n        pk: number,\n        quantity: number,\n        serial: string,\n        batch: string,\n        location_detail: {\n            pk: number,\n            name: string,\n            pathstring: string,\n        },\n    },\n    stocklocation?: {\n        pk: number,\n        name: string,\n        description: string,\n        pathstring: string,\n    },\n    build?: {\n        pk: number,\n        title: string,\n        reference: string,\n        quantity: number,\n    },\n    purchaseorder?: {\n        pk: number,\n        reference: string,\n        description: string,\n    },\n    salesorder?: {\n        pk: number,\n        reference: string,\n        description: string,\n    },\n    returnorder?: {\n        pk: number,\n        reference: string,\n        description: string,\n    },\n}\n```\n\n----------------------------------------\n\nTITLE: Running Playwright Tests with UI\nDESCRIPTION: Command to run Playwright tests in interactive mode with a UI. This launches both backend and frontend servers before running tests.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/react-frontend.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd src/frontend\nnpx playwright test --ui\n```\n\n----------------------------------------\n\nTITLE: Starting Supervisor Daemon for InvenTree in Bash\nDESCRIPTION: Command to start the Supervisor daemon, which will begin managing the InvenTree processes as defined in the configuration file.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_prod.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo supervisord\n```\n\n----------------------------------------\n\nTITLE: Loading Part Parameters in InvenTree Reports using HTML\nDESCRIPTION: Example showing how to load and display part parameters within an InvenTree report using the part_parameter template tag. This allows access to parameter values, units, and other attributes for a specific part.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_20\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n\n{% part_parameter part \"length\" as length %}\n\nPart: {{ part.name }}<br>\nLength: {{ length.data }} [{{ length.units }}]\n\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: File Generation with LabelOutput Example\nDESCRIPTION: Example showing how to generate and save a label file to the database using LabelOutput and return a JsonResponse with the file URL.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/label.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# Save the generated file to the database\noutput = LabelOutput.objects.create(\n    label=output_file,\n    user=request.user\n)\n\nreturn JsonResponse({\n    'file': output.label.url,\n    'success': True,\n    'message': f'{len(items)} labels generated'\n})\n```\n\n----------------------------------------\n\nTITLE: Creating PostgreSQL Database and User for InvenTree\nDESCRIPTION: Sets up a PostgreSQL database and user account for InvenTree to use.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_6\n\nLANGUAGE: sql\nCODE:\n```\ncreate database inventree;\ncreate user myuser with encrypted password 'mypass';\ngrant all privileges on database inventree to myuser;\n```\n\n----------------------------------------\n\nTITLE: Performing Manual Backup in InvenTree\nDESCRIPTION: Command to initiate a manual backup operation with default parameters in InvenTree. This uses the 'invoke' command-line tool.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/backup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninvoke backup\n```\n\n----------------------------------------\n\nTITLE: Reference Pattern Variable Substitution Examples\nDESCRIPTION: Advanced examples showing how to use variables and formatting in reference patterns. Demonstrates usage of ref variable formatting, wildcards, and date formatting.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/settings/reference.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nPO-{ref}                    # Basic reference - outputs PO-123\nPO-{ref:05d}                # 5-digit padded reference - outputs PO-00123\nPO-{ref:05d}-{?:A}           # Reference with wildcard suffix - outputs PO-00123-A\nPO-{ref:05d}-{date:%Y-%m-%d} # Reference with date - outputs PO-00123-2023-01-17\n```\n\n----------------------------------------\n\nTITLE: Default Reference Pattern Examples\nDESCRIPTION: Examples of default reference patterns used by InvenTree for different order types. These patterns use Python string formatting with a required {ref} variable that auto-increments.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/settings/reference.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPO-{ref:04d}  # Purchase Order pattern - outputs PO-0001\nSO-{ref:04d}  # Sales Order pattern - outputs SO-0123\nBO-{ref:04d}  # Build Order pattern - outputs BO-1234\nRMA-{ref:04d} # Return Order pattern - outputs RMA-0987\n```\n\n----------------------------------------\n\nTITLE: Rendering Company Images in InvenTree Reports using HTML\nDESCRIPTION: Example showing how to use the company_image template tag to render an image associated with a Company instance in an InvenTree report. Similar to part_image, this tag generates the appropriate image URL.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_15\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<!-- Load the report helper functions -->\n{% load report %}\n<img src='{% company_image company %}'/>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Running InvenTree Tests for Specific Modules\nDESCRIPTION: Command for running tests only for a specific module, which is useful when working on a particular component of the system.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ninvoke dev.test --runtest order\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Python Bindings for InvenTree\nDESCRIPTION: Installs Python packages required for InvenTree to interact with PostgreSQL.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npip3 install psycopg pgcli\n```\n\n----------------------------------------\n\nTITLE: Displaying Backup Options in InvenTree\nDESCRIPTION: Command to show all available options for the backup operation in InvenTree. This provides information on customizing the backup process.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/backup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninvoke backup --help\n```\n\n----------------------------------------\n\nTITLE: Setting Up InvenTree Demo Dataset Locally Using Invoke\nDESCRIPTION: This command installs the InvenTree demo dataset into a local InvenTree instance. It uses the invoke tool to run the dev.setup-test task with the -i flag. Warning: this will delete all existing data in the instance.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/demo.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninvoke dev.setup-test -i\n```\n\n----------------------------------------\n\nTITLE: Defining UIFeature Class for InvenTree Plugins\nDESCRIPTION: The UIFeature class defines the structure for user interface features in InvenTree plugins. It includes properties for name, title, description, icon, and various options.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass UIFeature:\n    \"\"\"A class for defining a UI feature\"\"\"\n\n    def __init__(self, name: str, title: str, **kwargs):\n        self.name = name\n        self.title = title\n        self.description = kwargs.get('description', '')\n        self.icon = kwargs.get('icon', '')\n        self.options = kwargs.get('options', {})\n        self.source = kwargs.get('source', '')\n        self.context = kwargs.get('context', {})\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree with Sudo Permissions (Bash)\nDESCRIPTION: If the installation script fails due to permission errors, this command runs the installer with sudo privileges to overcome permission issues.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsudo wget -qO install.sh https://get.inventree.org && sudo bash install.sh\n```\n\n----------------------------------------\n\nTITLE: Number Formatting in HTML Template\nDESCRIPTION: Demonstrates the usage of format_number function for formatting numeric values with various options.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n{% format_number 3.14159265359 decimal_places=5, leading=3 %}\n<!-- output: 0003.14159 -->\n{% format_number 3.14159265359 integer=True %}\n<!-- output: 3 -->\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Single Item\nDESCRIPTION: Example of retrieving a single item from the database using its primary key\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom inventree.part import PartCategory\n\ncategory = PartCategory(api, 10)\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL/MariaDB for InvenTree\nDESCRIPTION: Installs MySQL or MariaDB database system and required packages for use with InvenTree.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install mysql-server libmysqlclient-dev\n```\n\n----------------------------------------\n\nTITLE: Exporting InvenTree Data to JSON\nDESCRIPTION: This command exports the InvenTree database contents to a JSON file. The `-f` option specifies the output filename. This is used for backing up or migrating data to a new InvenTree installation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/migrate.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n\"invoke export-records -f data.json\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Task Information\nDESCRIPTION: This command displays detailed information about a specific invoke task, including its parameters and usage instructions. The `--help` flag provides a comprehensive overview of the task's functionality.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/invoke.md#2025-04-22_snippet_7\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke update --help\n```\n\n----------------------------------------\n\nTITLE: Running Invoke Task in Installer Mode\nDESCRIPTION: This command shows how to run an invoke task when InvenTree is installed using the package installer. It prefixes the `invoke` command with `inventree run` to ensure it's executed within the InvenTree environment.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/invoke.md#2025-04-22_snippet_5\n\nLANGUAGE: Shell\nCODE:\n```\ninventree run invoke update\n```\n\n----------------------------------------\n\nTITLE: Rendering 1D Barcode with Custom Format in Django\nDESCRIPTION: Demonstrates how to generate a 1D barcode using a specific format (Code39) in a Django template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/barcodes.md#2025-04-22_snippet_2\n\nLANGUAGE: django\nCODE:\n```\n{% raw %}\n\n{% load barcode %}\n\n<img class='custom_class' src='{% barcode \"12345678\" barcode_class=\"Code39\" %}>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Installing and Running InvenTree Plugin Creator\nDESCRIPTION: Commands to install the InvenTree plugin creator tool and run it to scaffold a new plugin.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip install inventree-plugin-creator\ncreate-inventree-plugin\n```\n\n----------------------------------------\n\nTITLE: Setting Up Python Virtual Environment for InvenTree\nDESCRIPTION: Creates and activates a Python virtual environment for installing InvenTree dependencies.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\nsource ./env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Deleting Existing InvenTree Database in Docker Environment\nDESCRIPTION: This command completely removes the existing InvenTree database, allowing for a fresh start if needed.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm inventree-server invoke dev.delete-data\n```\n\n----------------------------------------\n\nTITLE: Running InvenTree Invoke Commands (Bash)\nDESCRIPTION: This command demonstrates how to run InvenTree administration operations using the invoke tool, specifically showing how to print version information.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_11\n\nLANGUAGE: bash\nCODE:\n```\ninventree run invoke version\n```\n\n----------------------------------------\n\nTITLE: Generating Report Context for Stock Items in Python\nDESCRIPTION: This method returns the context dictionary for Stock Item reports, including various attributes of the StockItem object.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/context_variables.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\ndef report_context(self):\n    \"\"\"Return some basic context information for this stock item\"\"\"\n\n    return {\n        'item': self,\n        'part': self.part,\n        'location': self.location,\n        'quantity': self.quantity,\n        'serial': self.serial,\n        'batch': self.batch,\n        'status': self.status_label(),\n        'URL': self.get_absolute_url(),\n        'tests': self.testresult_set.all(),\n    }\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for InvenTree (Bash)\nDESCRIPTION: This command shows how to set environment variables for InvenTree using the CLI, which will be used when executing the app server or workers.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\ninventree config:set ENV_VAR=123\n```\n\n----------------------------------------\n\nTITLE: Base Label Template Structure in HTML\nDESCRIPTION: Shows the base template structure used for all default InvenTree labels, including page setup and basic styling\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/labels.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<head>\n    <style>\n        @page {\n            size: {{ width }}mm {{ height }}mm;\n            {% block margin %}\n            margin: 0mm;\n            {% endblock %}\n        }\n\n        img {\n            display: inline-block;\n            image-rendering: pixelated;\n        }\n\n        {% block style %}\n        {% endblock %}\n\n    </style>\n</head>\n\n<body>\n    {% block content %}\n    <!-- Label data rendered here! -->\n    {% endblock %}\n</body>\n```\n\n----------------------------------------\n\nTITLE: Exporting InvenTree Database to JSON in Docker Environment\nDESCRIPTION: This command exports the InvenTree database to an agnostic JSON file, storing it in the mounted volume directory.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm inventree-server invoke export-records -f /home/inventree/data/data.json\n```\n\n----------------------------------------\n\nTITLE: Creating Python Virtual Environment for InvenTree\nDESCRIPTION: Command to create a Python virtual environment for InvenTree installation. This isolates the InvenTree Python dependencies from the system-wide Python installation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npython3 -m venv env\n```\n\n----------------------------------------\n\nTITLE: Removing Existing Docker Volume for InvenTree\nDESCRIPTION: Command to remove existing volume bindings for InvenTree, useful when starting a fresh installation or troubleshooting persistence issues.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker volume rm -f inventree-production_inventree_data\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree Package (Bash)\nDESCRIPTION: This command installs the InvenTree package itself, which may take several minutes to complete.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install inventree\n```\n\n----------------------------------------\n\nTITLE: Updating Package Index (Bash)\nDESCRIPTION: This command updates the local package index to include the newly added InvenTree repository.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get update\n```\n\n----------------------------------------\n\nTITLE: Verifying Invoke Installation in Virtual Environment\nDESCRIPTION: Command to check if the Invoke package is correctly installed in the Python virtual environment. This ensures that Invoke commands will be executed from within the virtual environment.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nwhich invoke\n```\n\n----------------------------------------\n\nTITLE: Configuring VSCode for Plugin Development with InvenTree\nDESCRIPTION: VSCode settings configuration that adds the InvenTree core code to the Python analysis path, enabling proper IntelliSense and code completion for plugin development.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/devcontainer.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"python.analysis.extraPaths\": [\"/workspaces/InvenTree/InvenTree\"]\n}\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree using Quick Script (Bash)\nDESCRIPTION: This command downloads and executes the InvenTree installer script, automating the installation process without user input. The installation may take 5-10 minutes to complete.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO install.sh https://get.inventree.org && bash install.sh\n```\n\n----------------------------------------\n\nTITLE: Activating Python Virtual Environment for InvenTree\nDESCRIPTION: Commands to activate the Python virtual environment for InvenTree. This ensures that the correct Python binaries and libraries are used for InvenTree operations.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/index.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsource env/bin/activate\n```\n\nLANGUAGE: bash\nCODE:\n```\n. env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Testing Gunicorn Server for InvenTree in Bash\nDESCRIPTION: Commands to activate the Python virtual environment, navigate to the InvenTree directory, and start the Gunicorn server for testing purposes. This snippet demonstrates how to run the Gunicorn server as a foreground process.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_prod.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncd /home/InvenTree\nsource ./env/bin/activate\n\ncd src/InvenTree\n/home/inventree/env/bin/gunicorn -c gunicorn.conf.py InvenTree.wsgi -b 127.0.0.1:8000\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree from Custom Branch and Publisher (Bash)\nDESCRIPTION: This command demonstrates how to install InvenTree from a specific branch (master) and publisher (matmair).\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninstall master matmair\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with SHA256 Hashes\nDESCRIPTION: Detailed listing of Python package dependencies with specific versions and SHA256 hashes for security verification. Includes dependencies like python3-saml, pytz, pyyaml, qrcode, and rapidfuzz with their respective version constraints and hash values.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements.txt#2025-04-22_snippet_5\n\nLANGUAGE: plaintext\nCODE:\n```\npython3-saml==1.16.0 \\\n    --hash=sha256:20b97d11b04f01ee22e98f4a38242e2fea2e28fbc7fbc9bdd57cab5ac7fc2d0d \\\n    --hash=sha256:97c9669aecabc283c6e5fb4eb264f446b6e006f5267d01c9734f9d8bffdac133 \\\n    --hash=sha256:c49097863c278ff669a337a96c46dc1f25d16307b4bb2679d2d1733cc4f5176a\n    # via django-allauth\npytz==2025.1 \\\n    --hash=sha256:89dd22dca55b46eac6eda23b2d72721bf1bdfef212645d81513ef5d03038de57 \\\n    --hash=sha256:c2db42be2a2518b28e65f9207c4d05e6ff547d1efa4086469ef855e4ab70178e\n    # via django-dbbackup\n```\n\n----------------------------------------\n\nTITLE: Mounting Plugin Repository in Devcontainer Configuration\nDESCRIPTION: JSON configuration to mount an external plugin repository into the InvenTree devcontainer workspace. This enables plugin development within the same container.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/devcontainer.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"mounts\": [\n  \"source=/path/to/your/local/inventree-plugin,target=/workspaces/inventree-plugin,type=bind,consistency=cached\"\n],\n```\n\n----------------------------------------\n\nTITLE: Changing User Password via Command Line\nDESCRIPTION: Resets the password for a specified user account via the command line using Django's management command `changepassword`. This requires access to the InvenTree server's backend and the Django environment.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/accounts.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ncd src/backend/InvenTree\npython ./manage.py changepassword <username>\n```\n\n----------------------------------------\n\nTITLE: Installing Invoke Package in Virtual Environment\nDESCRIPTION: Command to install the Invoke package inside the Python virtual environment. This is crucial for running InvenTree administrative tasks correctly within the isolated environment.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/index.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade --ignore-installed invoke\n```\n\n----------------------------------------\n\nTITLE: Configuring Supervisor for InvenTree in Bash\nDESCRIPTION: Command to copy the Supervisor configuration file for InvenTree to the system-wide Supervisor configuration directory. This sets up Supervisor to manage InvenTree processes.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_prod.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo cp /home/inventree/src/contrib/deploy/supervisord.conf /etc/supervisord.conf\n```\n\n----------------------------------------\n\nTITLE: LDAP User Attribute Mapping Configuration in YAML\nDESCRIPTION: Default YAML configuration for mapping LDAP user attributes to InvenTree user attributes. This mapping specifies how LDAP user properties correspond to InvenTree user fields.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/advanced.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\"first_name\": \"givenName\", \"last_name\": \"sn\", \"email\": \"mail\"}\n```\n\n----------------------------------------\n\nTITLE: LDAP Group Configuration in YAML\nDESCRIPTION: Default YAML configuration for LDAP group type settings in InvenTree. Specifies keyword arguments for group type class configuration.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/advanced.md#2025-04-22_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n{\"name_attr\": \"cn\"}\n```\n\n----------------------------------------\n\nTITLE: Running InvenTree Tests Locally\nDESCRIPTION: Commands for running the test suite locally during development. Shows the basic test command and an example of running tests for a specific module.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninvoke dev.test\n```\n\n----------------------------------------\n\nTITLE: Updating Python and Django Syntax\nDESCRIPTION: Commands to automatically upgrade deprecated Python and Django syntax to newer versions, using the pyupgrade and django-upgrade tools.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\npyupgrade `find . -name \"*.py\"`\ndjango-upgrade --target-version {{ config.extra.django_version }} `find . -name \"*.py\"`\n```\n\n----------------------------------------\n\nTITLE: Starting InvenTree Background Worker\nDESCRIPTION: Command to start the InvenTree background worker, which is necessary for running background tasks. This should be run in a separate shell from the main server.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_dev.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n(env) invoke worker\n```\n\n----------------------------------------\n\nTITLE: Executing Invoke Task within Docker Container\nDESCRIPTION: This command demonstrates how to execute an invoke task directly within a running Docker container. It uses `docker exec` to run the `update` task inside the `inventree-server` container, providing an interactive terminal.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/invoke.md#2025-04-22_snippet_4\n\nLANGUAGE: Shell\nCODE:\n```\ndocker exec -it inventree-server invoke update\n```\n\n----------------------------------------\n\nTITLE: Using Standard InvenTree Logo in Reports using HTML\nDESCRIPTION: Example showing how to explicitly use the standard InvenTree logo in a report even if a custom logo is configured, by using the custom=False parameter with the logo_image template tag.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_18\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n<img src='{% logo_image custom=False %}'/>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Running Initial Database Setup for InvenTree Docker Installation\nDESCRIPTION: This command performs the initial database setup for InvenTree, including creating the database, performing schema updates, and updating static files.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm inventree-server invoke update\n```\n\n----------------------------------------\n\nTITLE: Implementing SampleUserInterfacePlugin Class\nDESCRIPTION: This sample plugin class demonstrates how to implement custom user interface functionality in InvenTree. It includes methods for custom dashboard items and panels.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_9\n\nLANGUAGE: python\nCODE:\n```\nclass SampleUserInterfacePlugin(UserInterfaceMixin, SettingsMixin, UrlsMixin, AppMixin):\n    \"\"\"A sample plugin class for demonstrating user interface functionality\"\"\"\n\n    NAME = \"SampleUserInterfacePlugin\"\n    SLUG = \"sampleuiplugin\"\n    TITLE = \"Sample User Interface Plugin\"\n\n    def get_ui_panels(self, context: dict = None) -> List[UIFeature]:\n        panels = []\n\n        panels.append(\n            UIFeature(\n                'sample-panel',\n                'Sample Panel',\n                description='A sample panel for demonstrating custom UI functionality',\n                icon='fas fa-boxes',\n                source='js/sample-panel.js',\n                options={\n                    'type': 'custom',\n                    'location': 'panel',\n                    'refresh_interval': 5000,\n                }\n            )\n        )\n\n        return panels\n\n    def get_ui_dashboard_items(self, context: dict = None) -> List[UIFeature]:\n        features = []\n\n        features.append(\n            UIFeature(\n                'sample-dashboard-item',\n                'Sample Dashboard Item',\n                description='A sample dashboard item for demonstrating custom UI functionality',\n                icon='fas fa-info-circle',\n                source='js/sample-dashboard-item.js',\n                options={\n                    'min_width': 4,\n                    'max_width': 12,\n                    'min_height': 4,\n                    'max_height': 12,\n                    'refresh_interval': 5000,\n                }\n            )\n        )\n\n        return features\n```\n\n----------------------------------------\n\nTITLE: Setting Up InvenTree Development Tools\nDESCRIPTION: Command to install and configure development tools required for contributing to InvenTree. This sets up pre-commit hooks to run code checks before each commit.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninvoke dev.setup-dev\n```\n\n----------------------------------------\n\nTITLE: Debug Mode Configuration Variables\nDESCRIPTION: Environment variables that are automatically adjusted in debug mode to facilitate easier development and testing\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/config.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n| Setting | Value in Debug Mode | Description |\n| --- | --- | --- |\n| `INVENTREE_ALLOWED_HOSTS` | `*` | Allow all host in debug mode |\n| `CSRF_TRUSTED_ORIGINS` | Value is appended to allow `http://*.localhost:*` | Allow all connections from localhost, for development purposes |\n| `INVENTREE_COOKIE_SAMESITE` | `False` | Disable all same-site cookie checks in debug mode |\n| `INVENTREE_SESSION_COOKIE_SECURE` | `False` | Disable secure session cookies in debug mode (allow non-https cookies) |\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree from Master Branch (Bash)\nDESCRIPTION: This command installs the latest InvenTree code from the master branch, using the 'inventree' publisher.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ninstall master inventree\n```\n\n----------------------------------------\n\nTITLE: Cloning InvenTree Source Code from GitHub\nDESCRIPTION: Git command to clone the latest version of InvenTree source code from GitHub. This is the recommended method for downloading the source code as it allows for easy updates.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/index.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/inventree/inventree/\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Context for Label Templates in Python\nDESCRIPTION: This method returns the base context dictionary for label templates, including global variables and label-specific variables.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/context_variables.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\ndef get_context(self, request):\n    \"\"\"Return the context data for this label template.\n\n    - Base context is provided by ReportTemplateBase.base_context()\n    - Label context is provided by LabelTemplate.context()\n    \"\"\"\n\n    ctx = self.base_context(request)\n\n    ctx.update(self.context())\n\n    return ctx\n```\n\n----------------------------------------\n\nTITLE: Debugging Playwright Test Launch Issues\nDESCRIPTION: Command to run Playwright tests in debug mode, which outputs detailed error information to help troubleshoot testing problems.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/react-frontend.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright test --debug\n```\n\n----------------------------------------\n\nTITLE: Configuring Feature Flags via Environment Variable\nDESCRIPTION: Allows administrators to enable additional feature flags through the INVENTREE_FLAGS environment key, providing a flexible mechanism for feature management.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/settings/experimental.md#2025-04-22_snippet_0\n\nLANGUAGE: configuration\nCODE:\n```\nINVENTREE_FLAGS\n```\n\n----------------------------------------\n\nTITLE: Scaling InvenTree Worker Instances (Bash)\nDESCRIPTION: This command demonstrates how to scale the number of InvenTree worker instances to 3 using the CLI.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ninventree scale worker=3\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL for InvenTree\nDESCRIPTION: Installs PostgreSQL database system and required packages for use with InvenTree.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt-get install postgresql postgresql-contrib libpq-dev\nsudo service postgresql start\n```\n\n----------------------------------------\n\nTITLE: Warning Block for AppMixin Usage\nDESCRIPTION: A warning message highlighting the risks of using AppMixin and recommending proper testing before deployment. The warning emphasizes the need for understanding Django's app system and potential consequences of deep integration.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/app.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n!!! warning \"Danger Zone\"\n    Only use this mixin if you have an understanding of Django's [app system]({% include \"django.html\" %}/ref/applications). Plugins with this mixin are deeply integrated into InvenTree and can cause difficult to reproduce or long-running errors. Use the built-in testing functions of Django to make sure your code does not cause unwanted behaviour in InvenTree before releasing.\n```\n\n----------------------------------------\n\nTITLE: Creating Administrator Account for InvenTree Docker Installation\nDESCRIPTION: This command runs the process to create an admin (superuser) account for the InvenTree database. It prompts for user input to set up the account details.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run inventree-server invoke superuser\n```\n\n----------------------------------------\n\nTITLE: Running Frontend Server Command\nDESCRIPTION: Command to launch the frontend development server after installation. This command runs in the foreground and occupies the terminal window.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/react-frontend.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninvoke dev.frontend-server\n```\n\n----------------------------------------\n\nTITLE: Installing MySQL Python Bindings for InvenTree\nDESCRIPTION: Installs Python packages required for InvenTree to interact with MySQL or MariaDB.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\npip3 install mysqlclient mariadb\n```\n\n----------------------------------------\n\nTITLE: Updating Invoke with pip\nDESCRIPTION: This command updates the invoke tool to the latest version using pip. It's essential to keep invoke updated to avoid compatibility issues with InvenTree.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/invoke.md#2025-04-22_snippet_2\n\nLANGUAGE: Shell\nCODE:\n```\npip install -U invoke\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree Python Packages\nDESCRIPTION: Installs required Python packages for InvenTree using pip and the invoke tool.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\npip install --upgrade --ignore-installed invoke\ninvoke install\n```\n\n----------------------------------------\n\nTITLE: ReturnOrderStatus Code Block - Python\nDESCRIPTION: Source code reference showing Return Order status codes implementation in InvenTree system. References order.status_codes.ReturnOrderStatus class with display options.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/sales/return_order.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\norder.status_codes.ReturnOrderStatus\n    options:\n        show_bases: False\n        show_root_heading: False\n        show_root_toc_entry: False\n        show_source: True\n        members: []\n```\n\n----------------------------------------\n\nTITLE: Implementing Serial Number Increment Logic in Python\nDESCRIPTION: Example implementation of the increment_serial_number method for handling hexadecimal serial numbers. The method takes a serial number string, converts it to an integer using base 16, increments it, and returns the next value in the sequence as an uppercase hexadecimal string. Returns None if conversion fails.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/validation.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef increment_serial_number(self, serial: str):\n    \"\"\"Provide the next hexadecimal number in sequence\"\"\"\n\n    try:\n        val = int(serial, 16) + 1\n        val = hex(val).upper()[2:]\n    except ValueError:\n        val = None\n\n    return val\n```\n\n----------------------------------------\n\nTITLE: Installing React Frontend Dependencies with Docker\nDESCRIPTION: Command to install the required packages for running the React frontend on an InvenTree development server using Docker.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/react-frontend.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run inventree-dev-server invoke int.frontend-compile\n```\n\n----------------------------------------\n\nTITLE: Updating InvenTree Source Code\nDESCRIPTION: Updates the InvenTree source code to the latest version using Git.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_13\n\nLANGUAGE: bash\nCODE:\n```\ngit pull origin master\n```\n\n----------------------------------------\n\nTITLE: Checking Invoke Version\nDESCRIPTION: These commands determine the version of the installed invoke tool. Knowing the version is important to ensure compatibility with InvenTree.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/invoke.md#2025-04-22_snippet_1\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke --version\n```\n\nLANGUAGE: Shell\nCODE:\n```\npython -m invoke --version\n```\n\n----------------------------------------\n\nTITLE: Activating Virtual Environment for InvenTree\nDESCRIPTION: Commands to navigate to the InvenTree directory and activate the virtual environment. This is required before starting the background worker.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_dev.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ncd /home/inventree\nsource ./env/bin/activate\n```\n\n----------------------------------------\n\nTITLE: Loading Stock Location Label Template\nDESCRIPTION: Template include statement for the stock location label template with QR code and text\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"label/stocklocation_qr_and_text.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Generating Report Context for Build Orders in Python\nDESCRIPTION: This method returns the context dictionary for Build Order reports, including various attributes of the Build Order object.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/context_variables.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ndef report_context(self):\n    \"\"\"Return some basic context information for this build order\"\"\"\n\n    return {\n        'build': self,\n        'part': self.part,\n        'reference': self.reference,\n        'quantity': self.quantity,\n        'title': self.title,\n        'target_date': self.target_date,\n        'creation_date': self.creation_date,\n        'completion_date': self.completion_date,\n        'issued_by': self.issued_by,\n        'responsible': self.responsible,\n        'completed_by': self.completed_by,\n        'priority': self.priority,\n        'URL': self.get_absolute_url(),\n        'active': self.is_active,\n        'status': self.get_status_display(),\n        'notes': self.notes,\n    }\n```\n\n----------------------------------------\n\nTITLE: Loading Stock Item Label Template\nDESCRIPTION: Template include statement for the stock item label template with QR code\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"label/stockitem_qr.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Initializing/Updating InvenTree Database\nDESCRIPTION: This command updates the InvenTree database schema to the latest version. It ensures that all necessary database tables exist and are at the correct schema version. This step is crucial before importing data or upgrading to a newer version of InvenTree.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/migrate.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\n\"invoke update\"\n```\n\n----------------------------------------\n\nTITLE: Managing Tags via API Interface\nDESCRIPTION: Shows the JSON format for updating tags through the API interface. Tags can be modified using PATCH or POST requests, with tags provided as a JSON-formatted list of strings.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/tags.md#2025-04-22_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"tags\": '[\"foo\", \"bar\"]'\n}\n```\n\n----------------------------------------\n\nTITLE: Installing Playwright Dependencies for Frontend Testing\nDESCRIPTION: Commands to install Playwright and its dependencies for running frontend tests. Includes system-level dependencies and the Playwright test runner.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/react-frontend.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd src/frontend\nsudo npx playwright install-deps\nnpx playwright install\n```\n\n----------------------------------------\n\nTITLE: Adding InvenTree Package Key (Bash)\nDESCRIPTION: This command adds the necessary key for validating InvenTree packages during manual installation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nwget -qO- https://dl.packager.io/srv/inventree/InvenTree/key | sudo apt-key add -\n```\n\n----------------------------------------\n\nTITLE: Loading Return Order Report Template\nDESCRIPTION: Template include statement for the return order report template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"report/inventree_return_order_report.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Exporting InvenTree Data to JSON (Docker)\nDESCRIPTION: This command exports InvenTree database contents to a JSON file within a Docker container, ensuring the file persists in the Docker volume used for backups. This is required when running InvenTree using Docker containers.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/migrate.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n\"docker compose run inventree-server invoke export-records -f data/backup/data.json\"\n```\n\n----------------------------------------\n\nTITLE: Creating Label Template with QR Code and Location Info in HTML/CSS\nDESCRIPTION: Example template showing how to create a label with QR code and location information. Demonstrates styling, positioning, and context variable usage.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/labels.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<style>\n    @page {\n        width: 75mm;\n        height: 24mm;\n        padding: 1mm;\n\tmargin: 0px 0px 0px 0px;\n    }\n\n    .location {\n        padding: 5px;\n        font-weight: bold;\n        font-family: Arial, Helvetica, sans-serif;\n        height: 100%;\n        vertical-align: middle;\n        float: right;\n        display: inline;\n        font-size: 125%;\n        position: absolute;\n        top: 0mm;\n        left: 23mm;\n        white-space: nowrap;\n        overflow: hidden;\n        text-overflow: ellipsis;\n    }\n\n    .qr {\n        margin: 2px;\n        width: 22mm;\n        height: 22mm;\n    }\n\n</style>\n{% load barcode %}\n<img class='qr' src=\"{% qrcode location.format_barcode %}\"/>\n\n<div class='location'>\n\t{{ location.name }}\n\t<br>\n\t<br>\n\t<hr>\n\tLocation ID: {{ location.id }}\n\t</div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Viewing Playwright Test Reports\nDESCRIPTION: Command to view a downloaded Playwright test report, which allows inspection of test results and detailed examination of failed tests.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/react-frontend.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nnpx playwright show-report path/to/report\n```\n\n----------------------------------------\n\nTITLE: Retrieving Base Context for Report Templates in Python\nDESCRIPTION: This method returns the base context dictionary for report templates, including global variables and report-specific variables.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/context_variables.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\ndef get_context(self, request):\n    \"\"\"Return the context data for this report template.\n\n    - Base context is provided by ReportTemplateBase.base_context()\n    - Report context is provided by ReportTemplate.context()\n    \"\"\"\n\n    ctx = self.base_context(request)\n\n    ctx.update(self.context())\n\n    return ctx\n```\n\n----------------------------------------\n\nTITLE: Templating Stock Expiry Image Inclusion\nDESCRIPTION: Django/Jinja2 template syntax for including stock expiry related images with metadata\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/stock/expiry.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% with id=\"stock_expiry\", url=\"stock/enable_stock_expiry.png\", description=\"Enable stock expiry feature\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Part Details Using Django Template Variables in HTML\nDESCRIPTION: Example showing how to use Django template variables to display part information in a custom report template. Demonstrates accessing part name and description properties using double curly brace syntax.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/report.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Template variables use {{ double_curly_braces }} -->\n<h2>Part: {{ part.name }}</h3>\n<p><i>\n  Description:<br>\n  {{ part.description }}\n</p></i>\n```\n\n----------------------------------------\n\nTITLE: SSO Configuration File Example\nDESCRIPTION: Example YAML configuration showing SSO backend setup for Google, GitHub and Microsoft providers with specific Microsoft provider settings\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/settings/SSO.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nsocial_backends:\n  - allauth.socialaccount.providers.google\n  - allauth.socialaccount.providers.github\n  - allauth.socialaccount.providers.microsoft\n\nsocial_providers:\n  microsoft:\n    SCOPE: [\"User.Read\"]\n    TENANT: \"common\"\n```\n\n----------------------------------------\n\nTITLE: Adding InvenTree Package Repository (Bash)\nDESCRIPTION: This command adds the InvenTree package repository to the system's package manager source list for manual installation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nsudo wget -O /etc/apt/sources.list.d/inventree.list https://dl.packager.io/srv/inventree/InvenTree/stable/installer/ubuntu/20.04.repo\n```\n\n----------------------------------------\n\nTITLE: Creating Data Matrix Code in Django Label Template\nDESCRIPTION: Demonstrates how to generate a Data Matrix code within a Django label template, including styling and custom background color.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/barcodes.md#2025-04-22_snippet_5\n\nLANGUAGE: django\nCODE:\n```\n{% raw %}\n{% extends \"label/label_base.html\" %}\n\n{% load l10n i18n barcode %}\n\n{% block style %}\n\n.qr {\n    position: absolute;\n    left: 0mm;\n    top: 0mm;\n    {% localize off %}\n    height: {{ height }}mm;\n    width: {{ height }}mm;\n    {% endlocalize %}\n}\n\n{% endblock style %}\n\n{% block content %}\n\n\n<img class='qr' src='{% datamatrix \"Foo Bar\" back_color=\"yellow\" %}'>\n\n{% endblock content %}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Viewing InvenTree Test Command Options\nDESCRIPTION: Command to display all available options for the test command, providing developers with information about testing capabilities.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ninvoke dev.test --help\n```\n\n----------------------------------------\n\nTITLE: Date and Datetime Formatting in HTML Template\nDESCRIPTION: Shows how to use format_date and format_datetime functions to format date and datetime values in a template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\nDate: {% format_date my_date timezone=\"Australia/Sydney\" %}\nDatetime: {% format_datetime my_datetime format=\"%d-%m-%Y %H:%M%S\" %}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Template Include Image for Global Navigation\nDESCRIPTION: A template snippet for including an image showing the global navigation actions with specified parameters.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/navigation.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"global_nav\", url=\"app/app_global_navigation.png\", maxheight=\"240px\", description=\"Global navigation actions\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Referencing Stock Status Codes in Inventree\nDESCRIPTION: This snippet shows how to include the source code for stock status codes in the documentation. It provides options to control the display of the source code, such as whether to show base classes, root headings, and the table of contents. This functionality is crucial for maintaining clear and structured documentation within the Inventree framework.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/stock/status.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n::: stock.status_codes.StockStatus\n    options:\n        show_bases: False\n        show_root_heading: False\n        show_root_toc_entry: False\n        show_source: True\n        members: []\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code in Django Label Template\nDESCRIPTION: Illustrates how to create a QR code within a Django label template, including styling and custom colors.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/barcodes.md#2025-04-22_snippet_4\n\nLANGUAGE: django\nCODE:\n```\n{% raw %}\n{% extends \"label/label_base.html\" %}\n\n{% load l10n i18n barcode %}\n\n{% block style %}\n\n.qr {\n    position: absolute;\n    left: 0mm;\n    top: 0mm;\n    {% localize off %}\n    height: {{ height }}mm;\n    width: {{ height }}mm;\n    {% endlocalize %}\n}\n\n{% endblock style %}\n\n{% block content %}\n<img class='qr' src='{% qrcode \"Hello world!\" fill_color=\"white\" back_color=\"blue\" %}'>\n{% endblock content %}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree Python Module\nDESCRIPTION: Installation command for the InvenTree Python package using pip package manager\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npip3 install inventree\n```\n\n----------------------------------------\n\nTITLE: Using getkey Function in HTML Template\nDESCRIPTION: Shows how to use the getkey function to access elements in a dictionary-like container using keys.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<ul>\n    {% for key in keys %}\n    {% getkey my_container key as value %}\n    <li>{{ key }} = {{ value }}</li>\n    {% endfor %}\n</ul>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image in Markdown with Custom Template\nDESCRIPTION: This snippet demonstrates how to include an image in the documentation using a custom template. It sets an ID, URL, maximum height, and description for the image.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/settings.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"settings_view\", url=\"app/settings.png\", maxheight=\"240px\", description=\"Settings view\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Implementing Translations in Python for InvenTree\nDESCRIPTION: This snippet demonstrates how to use Django's translation function for user-facing strings in Python code. It imports the gettext_lazy function and wraps the translatable string with it.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_8\n\nLANGUAGE: python\nCODE:\n```\nfrom django.utils.translation import gettext_lazy as _\n\nuser_facing_string = _('This string will be exposed to the translation engine!')\n```\n\n----------------------------------------\n\nTITLE: Adding Sidebar Item for InvenTree Plugin Panel (HTML)\nDESCRIPTION: This HTML code shows how to add a sidebar item that corresponds to a panel in an InvenTree plugin. It uses the sidebar_item.html template to create the item.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/urls.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% trans \"Loaning\" as text %}\n{% include \"sidebar_item.html\" with label='loans' text=text icon=\"fa-sitemap\" %}\n```\n\n----------------------------------------\n\nTITLE: Custom Printing Options Serializer\nDESCRIPTION: Implementation of a custom serializer to add configurable printing options like orientation selection that are exposed in the UI and passed to the print methods.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/label.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom rest_framework import serializers\n\nclass MyLabelPrinter(LabelPrintingMixin, InvenTreePlugin):\n    ...\n\n    class PrintingOptionsSerializer(serializers.Serializer):\n        orientation = serializers.ChoiceField(choices=[\n            (\"landscape\", \"Landscape\"),\n            (\"portrait\", \"Portrait\"),\n        ])\n\n    def print_label(self, **kwargs):\n        print(kwargs[\"printing_options\"]) # -> {\"orientation\": \"landscape\"}\n        ...\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Authentication\nDESCRIPTION: Example of connecting to InvenTree server using environment variables for authentication\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/python/index.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\napi = InvenTreeAPI()\n```\n\n----------------------------------------\n\nTITLE: Rendering Part Image Variations in InvenTree Reports using HTML\nDESCRIPTION: Example showing how to use the preview and thumbnail variations of part images in InvenTree reports. These variations (256x256 and 128x128 respectively) can reduce the generated file size while maintaining appropriate image quality.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_14\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n<!-- Render the \"preview\" image variation -->\n<img src='{% part_image part preview=True %}'>\n\n<!-- Render the \"thumbnail\" image variation -->\n<img src='{% part_image part thumbnail=True %}'>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Price Formatting Test Implementation\nDESCRIPTION: Unit test implementation for testing price string reformatting with multiple test cases\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/test.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nfrom .myplugin import MySupplier\n\ndef test_reformat_price(self):\n\n    self.assertEqual(MySupplier.reformat_price(self, '1.456,34 €'), 1456.34)\n    self.assertEqual(MySupplier.reformat_price(self, '1,45645 €'), 1.45645)\n    self.assertEqual(MySupplier.reformat_price(self, '1,56 $'), 1.56)\n    self.assertEqual(MySupplier.reformat_price(self, ''), 0)\n    self.assertEqual(MySupplier.reformat_price(self, 'Mumpitz'), 0)\n```\n\n----------------------------------------\n\nTITLE: Implementing get_ui_template_editors Method in UserInterfaceMixin\nDESCRIPTION: This method returns a list of custom template editors for InvenTree. It should be overridden to provide custom template editor functionality.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_6\n\nLANGUAGE: python\nCODE:\n```\ndef get_ui_template_editors(self, context: dict = None) -> List[UIFeature]:\n    \"\"\"Return a list of custom template editors for this plugin.\"\"\"\n    return []\n```\n\n----------------------------------------\n\nTITLE: Using Stock Table Template with Snippets\nDESCRIPTION: Shows how to use template snippets to create reusable components, specifically for rendering a stock table with location items.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/index.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n<table class='stock-table'>\n  <thead>\n    <!-- table header data -->\n  </thead>\n  <tbody>\n    {% for item in location.stock_items %}\n    {% include 'snippets/stock_row.html' with item=item %}\n    {% endfor %}\n  </tbody>\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Hash Verification\nDESCRIPTION: This snippet shows how Python package dependencies are specified with exact versions and SHA256 hash values for security. It includes packages like Pillow, pint, pip-licenses, and others required for the InvenTree backend.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements.txt#2025-04-22_snippet_4\n\nLANGUAGE: plaintext\nCODE:\n```\npint==0.24.4 \\\n    --hash=sha256:35275439b574837a6cd3020a5a4a73645eb125ce4152a73a2f126bf164b91b80 \\\n    --hash=sha256:aa54926c8772159fcf65f82cc0d34de6768c151b32ad1deb0331291c38fe7659\n    # via -r src/backend/requirements.in\npip-licenses==5.0.0 \\\n    --hash=sha256:0633a1f9aab58e5a6216931b0e1d5cdded8bcc2709ff563674eb0e2ff9e77e8e \\\n    --hash=sha256:82c83666753efb86d1af1c405c8ab273413eb10d6689c218df2f09acf40e477d\n    # via -r src/backend/requirements.in\nplatformdirs==4.3.6 \\\n    --hash=sha256:357fb2acbc885b0419afd3ce3ed34564c13c9b95c89360cd9563f73aa5e2b907 \\\n    --hash=sha256:73e575e1408ab8103900836b97580d5307456908a03e92031bab39e4554cc3fb\n    # via pint\nppf-datamatrix==0.2 \\\n    --hash=sha256:819be65eae444b760e178d5761853f78f8e5fca14fec2809b5e3369978fa9244 \\\n    --hash=sha256:8f034d9c90e408f60f8b10a273baab81014c9a81c983dc1ebdc31d4ca5ac5582\n    # via -r src/backend/requirements.in\n```\n\n----------------------------------------\n\nTITLE: Loading Barcode Template Tags in Django\nDESCRIPTION: Demonstrates how to load the custom barcode template tags at the top of a Django template file for use in reports or labels.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/barcodes.md#2025-04-22_snippet_0\n\nLANGUAGE: django\nCODE:\n```\n{% raw %}\n<!-- Load the barcode helper functions -->\n{% load barcode %}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Creating MySQL Database and User for InvenTree\nDESCRIPTION: Sets up a MySQL database and user account for InvenTree to use.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/install.md#2025-04-22_snippet_10\n\nLANGUAGE: sql\nCODE:\n```\nCREATE DATABASE inventree;\nCREATE USER 'myuser'@'%' IDENTIFIED WITH mysql_native_password BY 'mypass';\nGRANT ALL ON inventree.* TO 'myuser'@'%';\nFLUSH PRIVILEGES;\n```\n\n----------------------------------------\n\nTITLE: OAuth2 Scope Examples\nDESCRIPTION: Examples of OAuth2 scope formats used in InvenTree for different permission levels\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/index.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\na:superuser\ng:read\nr:change:part\nr:delete:stock\n```\n\n----------------------------------------\n\nTITLE: Displaying Restore Options in InvenTree\nDESCRIPTION: Command to show all available options for the restore operation in InvenTree. This provides information on customizing the restore process.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/backup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ninvoke restore --help\n```\n\n----------------------------------------\n\nTITLE: Specifying Python Package Dependencies with Hashes\nDESCRIPTION: This snippet shows how to define Python package dependencies including their versions and multiple hash values to verify integrity during installation. It is intended for use with the pip package manager, typically from a requirements file. The snippet includes packages like 'asgiref', 'async-timeout', 'attrs', etc. Each package's version and hash values are crucial for reproducibility and security.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: Python\nCODE:\n```\n# uv pip compile src/backend/requirements.in -o src/backend/requirements.txt --no-strip-extras --generate-hashes\nasgiref==3.8.1 \\\n    --hash=sha256:3e1e3ecc849832fe52ccf2cb6686b7a55f82bb1d6aee72a58826471390335e47 \\\n    --hash=sha256:c343bd80a0bec947a9860adb4c432ffa7db769836c64238fc34bdc3fec84d590\n    # via\n    #   django\n    #   django-allauth\n    #   django-cors-headers\n    #   django-structlog\nasync-timeout==5.0.1 \\\n    --hash=sha256:39e3809566ff85354557ec2398b55e096c8364bacac9405a7a1fa429e77fe76c \\\n    --hash=sha256:d9321a7a3d5a6a5e187e824d2fa0793ce379a202935782d555d6e9d2735677d3\n    # via redis\nattrs==25.1.0 \\\n    --hash=sha256:1c97078a80c814273a76b2a298a932eb681c87415c11dee0a6921de7f1b02c3e \\\n    --hash=sha256:c75a69e28a550a7e93789579c22aa26b0f5b83b75dc4e08fe092980051e1090a\n    # via\n    #   jsonschema\n    #   referencing\nbabel==2.17.0 \\\n    --hash=sha256:0c54cffb19f690cdcc52a3b50bcbf71e07a808d1c80d549f2459b9d2cf0afb9d \\\n    --hash=sha256:4d0b53093fdfb4b21c92b5213dba5a1b23885afa8383709427046b21c366e5f2\n    # via py-moneyed\nbleach[css]==6.2.0 \\\n    --hash=sha256:117d9c6097a7c3d22fd578fcd8d35ff1e125df6736f554da4e432fdd63f31e5e \\\n    --hash=sha256:123e894118b8a599fd80d3ec1a6d4cc7ce4e5882b1317a7e1ba69b56e95f991f\n    # via django-markdownify\nbrotli==1.1.0 \\\n    --hash=sha256:03d20af184290887bdea3f0f78c4f737d126c74dc2f3ccadf07e54ceca3bf208 \\\n    --hash=sha256:0541e747cce78e24ea12d69176f6a7ddb690e62c425e01d31cc065e69ce55b48 \\\n    --hash=sha256:069a121ac97412d1fe506da790b3e69f52254b9df4eb665cd42460c837193354 \\\n    --hash=sha256:0737ddb3068957cf1b054899b0883830bb1fec522ec76b1098f9b6e0f02d9419 \\\n    --hash=sha256:0b63b949ff929fbc2d6d3ce0e924c9b93c9785d877a21a1b678877ffbbc4423a \\\n    --hash=sha256:0c6244521dda65ea562d5a69b9a26120769b7a9fb3db2fe9545935ed6735b128 \\\n    --hash=sha256:11d00ed0a83fa22d29bc6b64ef636c4552ebafcef57154b4ddd132f5638fbd1c \\\n    --hash=sha256:141bd4d93984070e097521ed07e2575b46f817d08f9fa42b16b9b5f27b5ac088 \\\n    --hash=sha256:19c116e796420b0cee3da1ccec3b764ed2952ccfcc298b55a10e5610ad7885f9 \\\n    --hash=sha256:1ab4fbee0b2d9098c74f3057b2bc055a8bd92ccf02f65944a241b4349229185a \\\n    --hash=sha256:1ae56aca0402a0f9a3431cddda62ad71666ca9d4dc3a10a142b9dce2e3c0cda3 \\\n    --hash=sha256:1b2c248cd517c222d89e74669a4adfa5577e06ab68771a529060cf5a156e9757 \\\n    --hash=sha256:1e9a65b5736232e7a7f91ff3d02277f11d339bf34099a56cdab6a8b3410a02b2 \\\n    --hash=sha256:224e57f6eac61cc449f498cc5f0e1725ba2071a3d4f48d5d9dffba42db196438 \\\n    --hash=sha256:22fc2a8549ffe699bfba2256ab2ed0421a7b8fadff114a3d201794e45a9ff578 \\\n    --hash=sha256:23032ae55523cc7bccb4f6a0bf368cd25ad9bcdcc1990b64a647e7bbcce9cb5b \\\n    --hash=sha256:2333e30a5e00fe0fe55903c8832e08ee9c3b1382aacf4db26664a16528d51b4b \\\n    --hash=sha256:2954c1c23f81c2eaf0b0717d9380bd348578a94161a65b3a2afc62c86467dd68 \\\n    --hash=sha256:2a24c50840d89ded6c9a8fdc7b6ed3692ed4e86f1c4a4a938e1e92def92933e0 \\\n    --hash=sha256:2de9d02f5bda03d27ede52e8cfe7b865b066fa49258cbab568720aa5be80a47d \\\n    --hash=sha256:2feb1d960f760a575dbc5ab3b1c00504b24caaf6986e2dc2b01c09c87866a943 \\\n    --hash=sha256:30924eb4c57903d5a7526b08ef4a584acc22ab1ffa085faceb521521d2de32dd \\\n    --hash=sha256:316cc9b17edf613ac76b1f1f305d2a748f1b976b033b049a6ecdfd5612c70409 \\\n    --hash=sha256:32d95b80260d79926f5fab3c41701dbb818fde1c9da590e77e571eefd14abe28 \\\n    --hash=sha256:38025d9f30cf4634f8309c6874ef871b841eb3c347e90b0851f63d1ded5212da \\\n    --hash=sha256:39da8adedf6942d76dc3e46653e52df937a3c4d6d18fdc94a7c29d263b1f5b50 \\\n    --hash=sha256:3c0ef38c7a7014ffac184db9e04debe495d317cc9c6fb10071f7fefd93100a4f \\\n    --hash=sha256:3d7954194c36e304e1523f55d7042c59dc53ec20dd4e9ea9d151f1b62b4415c0 \\\n    --hash=sha256:3ee8a80d67a4334482d9712b8e83ca6b1d9bc7e351931252ebef5d8f7335a547 \\\n    --hash=sha256:4093c631e96fdd49e0377a9c167bfd75b6d0bad2ace734c6eb20b348bc3ea180 \\\n    --hash=sha256:43395e90523f9c23a3d5bdf004733246fba087f2948f87ab28015f12359ca6a0 \\\n    --hash=sha256:43ce1b9935bfa1ede40028054d7f48b5469cd02733a365eec8a329ffd342915d \\\n    --hash=sha256:4410f84b33374409552ac9b6903507cdb31cd30d2501fc5ca13d18f73548444a \\\n    --hash=sha256:494994f807ba0b92092a163a0a283961369a65f6cbe01e8891132b7a320e61eb \\\n    --hash=sha256:4d4a848d1837973bf0f4b5e54e3bec977d99be36a7895c61abb659301b02c112 \\\n    --hash=sha256:4ed11165dd45ce798d99a136808a794a748d5dc38511303239d4e2363c0695dc \\\n    --hash=sha256:4f3607b129417e111e30637af1b56f24f7a49e64763253bbc275c75fa887d4b2 \\\n    --hash=sha256:510b5b1bfbe20e1a7b3baf5fed9e9451873559a976c1a78eebaa3b86c57b4265 \\\n    --hash=sha256:524f35912131cc2cabb00edfd8d573b07f2d9f21fa824bd3fb19725a9cf06327 \\\n    --hash=sha256:587ca6d3cef6e4e868102672d3bd9dc9698c309ba56d41c2b9c85bbb903cdb95 \\\n    --hash=sha256:58d4b711689366d4a03ac7957ab8c28890415e267f9b6589969e74b6e42225ec \\\n    --hash=sha256:5b3cc074004d968722f51e550b41a27be656ec48f8afaeeb45ebf65b561481dd \\\n    --hash=sha256:5dab0844f2cf82be357a0eb11a9087f70c5430b2c241493fc122bb6f2bb0917c \\\n    --hash=sha256:5e55da2c8724191e5b557f8e18943b1b4839b8efc3ef60d65985bcf6f587dd38 \\\n    --hash=sha256:5eeb539606f18a0b232d4ba45adccde4125592f3f636a6182b4a8a436548b914 \\\n    --hash=sha256:5f4d5ea15c9382135076d2fb28dde923352fe02951e66935a9efaac8f10e81b0 \\\n    --hash=sha256:5fb2ce4b8045c78ebbc7b8f3c15062e435d47e7393cc57c25115cfd49883747a \\\n    --hash=sha256:6172447e1b368dcbc458925e5ddaf9113477b0ed542df258d84fa28fc45ceea7 \\\n    --hash=sha256:6967ced6730aed543b8673008b5a391c3b1076d834ca438bbd70635c73775368 \\\n    --hash=sha256:6974f52a02321b36847cd19d1b8e381bf39939c21efd6ee2fc13a28b0d99348c \\\n    --hash=sha256:6c3020404e0b5eefd7c9485ccf8393cfb75ec38ce75586e046573c9dc29967a0 \\\n    --hash=sha256:6c6e0c425f22c1c719c42670d561ad682f7bfeeef918edea971a79ac5252437f \\\n    --hash=sha256:70051525001750221daa10907c77830bc889cb6d865cc0b813d9db7fefc21451 \\\n    --hash=sha256:7905193081db9bfa73b1219140b3d315831cbff0d8941f22da695832f0dd188f \\\n    --hash=sha256:7bc37c4d6b87fb1017ea28c9508b36bbcb0c3d18b4260fcdf08b200c74a6aee8 \\\n    --hash=sha256:7c4855522edb2e6ae7fdb58e07c3ba9111e7621a8956f481c68d5d979c93032e \\\n    --hash=sha256:7e4c4629ddad63006efa0ef968c8e4751c5868ff0b1c5c40f76524e894c50248 \\\n    --hash=sha256:7eedaa5d036d9336c95915035fb57422054014ebdeb6f3b42eac809928e40d0c \\\n    --hash=sha256:7f4bf76817c14aa98cc6697ac02f3972cb8c3da93e9ef16b9c66573a68014f91 \\\n    --hash=sha256:81de08ac11bcb85841e440c13611c00b67d3bf82698314928d0b676362546724 \\\n    --hash=sha256:832436e59afb93e1836081a20f324cb185836c617659b07b129141a8426973c7 \\\n    --hash=sha256:861bf317735688269936f755fa136a99d1ed526883859f86e41a5d43c61d8966 \\\n    --hash=sha256:87a3044c3a35055527ac75e419dfa9f4f3667a1e887ee80360589eb8c90aabb9 \\\n    --hash=sha256:890b5a14ce214389b2cc36ce82f3093f96f4cc730c1cffdbefff77a7c71f2a97 \\\n    --hash=sha256:89f4988c7203739d48c6f806f1e87a1d96e0806d44f0fba61dba81392c9e474d \\\n    --hash=sha256:8bf32b98b75c13ec7cf774164172683d6e7891088f6316e54425fde1efc276d5 \\\n    --hash=sha256:8dadd1314583ec0bf2d1379f7008ad627cd6336625d6679cf2f8e67081b83acf \\\n    --hash=sha256:901032ff242d479a0efa956d853d16875d42157f98951c0230f69e69f9c09bac \\\n    --hash=sha256:9011560a466d2eb3f5a6e4929cf4a09be405c64154e12df0dd72713f6500e32b \\\n    --hash=sha256:906bc3a79de8c4ae5b86d3d75a8b77e44404b0f4261714306e3ad248d8ab0951 \\\n    --hash=sha256:919e32f147ae93a09fe064d77d5ebf4e35502a8df75c29fb05788528e330fe74 \\\n    --hash=sha256:91d7cc2a76b5567591d12c01f019dd7afce6ba8cba6571187e21e2fc418ae648 \\\n    --hash=sha256:929811df5462e182b13920da56c6e0284af407d1de637d8e536c5cd00a7daf60 \\\n    --hash=sha256:949f3b7c29912693cee0afcf09acd6ebc04c57af949d9bf77d6101ebb61e388c \\\n    --hash=sha256:a090ca607cbb6a34b0391776f0cb48062081f5f60ddcce5d11838e67a01928d1 \\\n    --hash=sha256:a1fd8a29719ccce974d523580987b7f8229aeace506952fa9ce1d53a033873c8 \\\n    --hash=sha256:a37b8f0391212d29b3a91a799c8e4a2855e0576911cdfb2515487e30e322253d \\\n    --hash=sha256:a3daabb76a78f829cafc365531c972016e4aa8d5b4bf60660ad8ecee19df7ccc \\\n    --hash=sha256:a469274ad18dc0e4d316eefa616d1d0c2ff9da369af19fa6f3daa4f09671fd61 \\\n    --hash=sha256:a599669fd7c47233438a56936988a2478685e74854088ef5293802123b5b2460 \\\n    --hash=sha256:a743e5a28af5f70f9c080380a5f908d4d21d40e8f0e0c8901604d15cfa9ba751 \\\n    --hash=sha256:a77def80806c421b4b0af06f45d65a136e7ac0bdca3c09d9e2ea4e515367c7e9 \\\n    --hash=sha256:a7e53012d2853a07a4a79c00643832161a910674a893d296c9f1259859a289d2 \\\n    --hash=sha256:a93dde851926f4f2678e704fadeb39e16c35d8baebd5252c9fd94ce8ce68c4a0 \\\n    --hash=sha256:aac0411d20e345dc0920bdec5548e438e999ff68d77564d5e9463a7ca9d3e7b1 \\\n    --hash=sha256:ae15b066e5ad21366600ebec29a7ccbc86812ed267e4b28e860b8ca16a2bc474 \\\n    --hash=sha256:aea440a510e14e818e67bfc4027880e2fb500c2ccb20ab21c7a7c8b5b4703d75 \\\n    --hash=sha256:af6fa6817889314555aede9a919612b23739395ce767fe7fcbea9a80bf140fe5 \\\n    --hash=sha256:b760c65308ff1e462f65d69c12e4ae085cff3b332d894637f6273a12a482d09f \\\n    --hash=sha256:be36e3d172dc816333f33520154d708a2657ea63762ec16b62ece02ab5e4daf2 \\\n    --hash=sha256:c247dd99d39e0338a604f8c2b3bc7061d5c2e9e2ac7ba9cc1be5a69cb6cd832f \\\n    --hash=sha256:c5529b34c1c9d937168297f2c1fde7ebe9ebdd5e121297ff9c043bdb2ae3d6fb \\\n    --hash=sha256:c8146669223164fc87a7e3de9f81e9423c67a79d6b3447994dfb9c95da16e2d6 \\\n    --hash=sha256:c8fd5270e906eef71d4a8d19b7c6a43760c6abcfcc10c9101d14eb2357418de9 \\\n    --hash=sha256:ca63e1890ede90b2e4454f9a65135a4d387a4585ff8282bb72964fab893f2111 \\\n    --hash=sha256:caf9ee9a5775f3111642d33b86237b05808dafcd6268faa492250e9b78046eb2 \\\n    --hash=sha256:cb1dac1770878ade83f2ccdf7d25e494f05c9165f5246b46a621cc849341dc01 \\\n    --hash=sha256:cdad5b9014d83ca68c25d2e9444e28e967ef16e80f6b436918c700c117a85467 \\\n    --hash=sha256:cdbc1fc1bc0bff1cef838eafe581b55bfbffaed4ed0318b724d0b71d4d377619 \\\n    --hash=sha256:ceb64bbc6eac5a140ca649003756940f8d6a7c444a68af170b3187623b43bebf \\\n    --hash=sha256:d0c5516f0aed654134a2fc936325cc2e642f8a0e096d075209672eb321cff408 \\\n    --hash=sha256:d143fd47fad1db3d7c27a1b1d66162e855b5d50a89666af46e1679c496e8e579\n```\n\n----------------------------------------\n\nTITLE: Extending Base Label Template in HTML\nDESCRIPTION: Example showing how to extend the base label template for custom implementations\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/labels.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% extends \"label/label_base.html\" %}\n\n{% block style %}\n<!-- You can write custom CSS here -->\n{% endblock %}\n\n{% block content %}\n<!-- HTML content goes here! -->\n{% endblock %}\n```\n\n----------------------------------------\n\nTITLE: Installing InvenTree UI Package via NPM\nDESCRIPTION: Command to install the InvenTree UI package for plugin development using npm package manager. This package provides interface types and hooks for creating custom UI plugins.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/frontend/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm i @inventreedb/ui\n```\n\n----------------------------------------\n\nTITLE: Stopping InvenTree Docker Containers\nDESCRIPTION: This command stops all running InvenTree containers as part of the update process.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose down\n```\n\n----------------------------------------\n\nTITLE: Managing Python Dependencies with Hash Verification\nDESCRIPTION: This snippet shows package dependency specifications with their corresponding SHA-256 hash values. Each package has a version constraint and multiple hash values to verify package integrity during installation. The file includes comments indicating dependent packages.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--hash=sha256:d192f0f30804e55db0d0e0a35d83a9fead0e9a359a9ed0285dbacea60cc10a84 \\\n--hash=sha256:d2b35ca2c7f81d173d2fadc2f4f31e88cc5f7a39ae5b6db5513cf3383b0e0ec7 \\\n--hash=sha256:d342778ef319e1026af243ed0a07c97acf3bad33b9f29e7ae6a1f68fd083e90c \\\n--hash=sha256:d487f5432bf35b60ed625d7e1b448e2dc855422e87469e3f450aa5552b0eb284 \\\n--hash=sha256:d7702622a8b40c49bffb46e1e3ba2e81268d5c04a34f460978c6b5517a34dd52 \\\n--hash=sha256:db85ecf4e609a48f4b29055f1e144231b90edc90af7481aa731ba2d059226b1b \\\n--hash=sha256:de6551e370ef19f8de1807d0a9aa2cdfdce2e85ce88b122fe9f6b2b076837e59 \\\n--hash=sha256:e1140c64812cb9b06c922e77f1c26a75ec5e3f0fb2bf92cc8c58720dec276752 \\\n--hash=sha256:e4fe605b917c70283db7dfe5ada75e04561479075761a0b3866c081d035b01c1 \\\n--hash=sha256:e6a904cb26bfefc2f0a6f240bdf5233be78cd2488900a2f846f3c3ac8489ab80 \\\n--hash=sha256:e79e6520141d792237c70bcd7a3b122d00f2613769ae0cb61c52e89fd3443839 \\\n--hash=sha256:e84799f09591700a4154154cab9787452925578841a94321d5ee8fb9a9a328f0 \\\n--hash=sha256:e93dfc1a1165e385cc8239fab7c036fb2cd8093728cbd85097b284d7b99249a2 \\\n--hash=sha256:efa8b278894b14d6da122a72fefcebc28445f2d3f880ac59d46c90f4c13be9a3 \\\n--hash=sha256:f0d8a7a6b5983c2496e364b969f0e526647a06b075d034f3297dc66f3b360c64 \\\n--hash=sha256:f0db75f47be8b8abc8d9e31bc7aad0547ca26f24a54e6fd10231d623f183d089 \\\n--hash=sha256:f296c40e23065d0d6650c4aefe7470d2a25fffda489bcc3eb66083f3ac9f6643 \\\n--hash=sha256:f31859074d57b4639318523d6ffdca586ace54271a73ad23ad021acd807eb14b \\\n--hash=sha256:f66b5337fa213f1da0d9000bc8dc0cb5b896b726eefd9c6046f699b169c41b9e \\\n--hash=sha256:f733d788519c7e3e71f0855c96618720f5d3d60c3cb829d8bbb722dddce37985 \\\n--hash=sha256:fce1473f3ccc4187f75b4690cfc922628aed4d3dd013d047f95a9b3919a86596 \\\n--hash=sha256:fd5f17ff8f14003595ab414e45fce13d073e0762394f957182e69035c9f3d7c2 \\\n--hash=sha256:fdc3ff3bfccdc6b9cc7c342c03aa2400683f0cb891d46e94b64a197910dc4064\n# via fonttools\ncertifi==2025.1.31 \\\n--hash=sha256:3d5da6925056f6f18f119200434a4780a94263f10d1c21d032a6f6b2baa20651 \\\n--hash=sha256:ca78db4565a652026a4db2bcdf68f2fb589ea80d0be70e03929ed730746b84fe\n# via\n#   requests\n#   sentry-sdk\ncffi==1.17.1 \\\n--hash=sha256:045d61c734659cc045141be4bae381a41d89b741f795af1dd018bfb532fd0df8 \\\n--hash=sha256:0984a4925a435b1da406122d4d7968dd861c1385afe3b45ba82b750f229811e2 \\\n--hash=sha256:0e2b1fac190ae3ebfe37b979cc1ce69c81f4e4fe5746bb401dca63a9062cdaf1 \\\n--hash=sha256:0f048dcf80db46f0098ccac01132761580d28e28bc0f78ae0d58048063317e15 \\\n--hash=sha256:1257bdabf294dceb59f5e70c64a3e2f462c30c7ad68092d01bbbfb1c16b1ba36 \\\n--hash=sha256:1c39c6016c32bc48dd54561950ebd6836e1670f2ae46128f67cf49e789c52824 \\\n--hash=sha256:1d599671f396c4723d016dbddb72fe8e0397082b0a77a4fab8028923bec050e8 \\\n--hash=sha256:28b16024becceed8c6dfbc75629e27788d8a3f9030691a1dbf9821a128b22c36 \\\n--hash=sha256:2bb1a08b8008b281856e5971307cc386a8e9c5b625ac297e853d36da6efe9c17 \\\n--hash=sha256:30c5e0cb5ae493c04c8b42916e52ca38079f1b235c2f8ae5f4527b963c401caf \\\n--hash=sha256:31000ec67d4221a71bd3f67df918b1f88f676f1c3b535a7eb473255fdc0b83fc \\\n--hash=sha256:386c8bf53c502fff58903061338ce4f4950cbdcb23e2902d86c0f722b786bbe3 \\\n--hash=sha256:3edc8d958eb099c634dace3c7e16560ae474aa3803a5df240542b305d14e14ed \\\n--hash=sha256:45398b671ac6d70e67da8e4224a065cec6a93541bb7aebe1b198a61b58c7b702 \\\n--hash=sha256:46bf43160c1a35f7ec506d254e5c890f3c03648a4dbac12d624e4490a7046cd1 \\\n--hash=sha256:4ceb10419a9adf4460ea14cfd6bc43d08701f0835e979bf821052f1805850fe8 \\\n--hash=sha256:51392eae71afec0d0c8fb1a53b204dbb3bcabcb3c9b807eedf3e1e6ccf2de903 \\\n--hash=sha256:5da5719280082ac6bd9aa7becb3938dc9f9cbd57fac7d2871717b1feb0902ab6 \\\n--hash=sha256:610faea79c43e44c71e1ec53a554553fa22321b65fae24889706c0a84d4ad86d \\\n--hash=sha256:636062ea65bd0195bc012fea9321aca499c0504409f413dc88af450b57ffd03b \\\n--hash=sha256:6883e737d7d9e4899a8a695e00ec36bd4e5e4f18fabe0aca0efe0a4b44cdb13e \\\n--hash=sha256:6b8b4a92e1c65048ff98cfe1f735ef8f1ceb72e3d5f0c25fdb12087a23da22be \\\n--hash=sha256:6f17be4345073b0a7b8ea599688f692ac3ef23ce28e5df79c04de519dbc4912c \\\n--hash=sha256:706510fe141c86a69c8ddc029c7910003a17353970cff3b904ff0686a5927683 \\\n--hash=sha256:72e72408cad3d5419375fc87d289076ee319835bdfa2caad331e377589aebba9 \\\n--hash=sha256:733e99bc2df47476e3848417c5a4540522f234dfd4ef3ab7fafdf555b082ec0c \\\n--hash=sha256:7596d6620d3fa590f677e9ee430df2958d2d6d6de2feeae5b20e82c00b76fbf8 \\\n--hash=sha256:78122be759c3f8a014ce010908ae03364d00a1f81ab5c7f4a7a5120607ea56e1 \\\n--hash=sha256:805b4371bf7197c329fcb3ead37e710d1bca9da5d583f5073b799d5c5bd1eee4 \\\n--hash=sha256:85a950a4ac9c359340d5963966e3e0a94a676bd6245a4b55bc43949eee26a655 \\\n--hash=sha256:8f2cdc858323644ab277e9bb925ad72ae0e67f69e804f4898c070998d50b1a67 \\\n--hash=sha256:9755e4345d1ec879e3849e62222a18c7174d65a6a92d5b346b1863912168b595 \\\n--hash=sha256:98e3969bcff97cae1b2def8ba499ea3d6f31ddfdb7635374834cf89a1a08ecf0 \\\n--hash=sha256:a08d7e755f8ed21095a310a693525137cfe756ce62d066e53f502a83dc550f65 \\\n--hash=sha256:a1ed2dd2972641495a3ec98445e09766f077aee98a1c896dcb4ad0d303628e41 \\\n--hash=sha256:a24ed04c8ffd54b0729c07cee15a81d964e6fee0e3d4d342a27b020d22959dc6 \\\n--hash=sha256:a45e3c6913c5b87b3ff120dcdc03f6131fa0065027d0ed7ee6190736a74cd401 \\\n--hash=sha256:a9b15d491f3ad5d692e11f6b71f7857e7835eb677955c00cc0aefcd0669adaf6 \\\n--hash=sha256:ad9413ccdeda48c5afdae7e4fa2192157e991ff761e7ab8fdd8926f40b160cc3 \\\n--hash=sha256:b2ab587605f4ba0bf81dc0cb08a41bd1c0a5906bd59243d56bad7668a6fc6c16 \\\n--hash=sha256:b62ce867176a75d03a665bad002af8e6d54644fad99a3c70905c543130e39d93 \\\n--hash=sha256:c03e868a0b3bc35839ba98e74211ed2b05d2119be4e8a0f224fba9384f1fe02e \\\n--hash=sha256:c59d6e989d07460165cc5ad3c61f9fd8f1b4796eacbd81cee78957842b834af4 \\\n--hash=sha256:c7eac2ef9b63c79431bc4b25f1cd649d7f061a28808cbc6c47b534bd789ef964 \\\n--hash=sha256:c9c3d058ebabb74db66e431095118094d06abf53284d9c81f27300d0e0d8bc7c \\\n--hash=sha256:ca74b8dbe6e8e8263c0ffd60277de77dcee6c837a3d0881d8c1ead7268c9e576 \\\n--hash=sha256:caaf0640ef5f5517f49bc275eca1406b0ffa6aa184892812030f04c2abf589a0 \\\n--hash=sha256:cdf5ce3acdfd1661132f2a9c19cac174758dc2352bfe37d98aa7512c6b7178b3 \\\n--hash=sha256:d016c76bdd850f3c626af19b0542c9677ba156e4ee4fccfdd7848803533ef662 \\\n--hash=sha256:d01b12eeeb4427d3110de311e1774046ad344f5b1a7403101878976ecd7a10f3 \\\n--hash=sha256:d63afe322132c194cf832bfec0dc69a99fb9bb6bbd550f161a49e9e855cc78ff \\\n--hash=sha256:da95af8214998d77a98cc14e3a3bd00aa191526343078b530ceb0bd710fb48a5 \\\n--hash=sha256:dd398dbc6773384a17fe0d3e7eeb8d1a21c2200473ee6806bb5e6a8e62bb73dd \\\n--hash=sha256:de2ea4b5833625383e464549fec1bc395c1bdeeb5f25c4a3a82b5a8c756ec22f \\\n--hash=sha256:de55b766c7aa2e2a3092c51e0483d700341182f08e67c63630d5b6f200bb28e5 \\\n--hash=sha256:df8b1c11f177bc2313ec4b2d46baec87a5f3e71fc8b45dab2ee7cae86d9aba14 \\\n--hash=sha256:e03eab0a8677fa80d646b5ddece1cbeaf556c313dcfac435ba11f107ba117b5d \\\n--hash=sha256:e221cf152cff04059d011ee126477f0d9588303eb57e88923578ace7baad17f9 \\\n--hash=sha256:e31ae45bc2e29f6b2abd0de1cc3b9d5205aa847cafaecb8af1476a609a2f6eb7 \\\n--hash=sha256:edae79245293e15384b51f88b00613ba9f7198016a5948b5dddf4917d4d26382 \\\n--hash=sha256:f1e22e8c4419538cb197e4dd60acc919d7696e5ef98ee4da4e01d3f8cfa4cc5a \\\n--hash=sha256:f3a2b4222ce6b60e2e8b337bb9596923045681d71e5a082783484d845390938e \\\n--hash=sha256:f6a16c31041f09ead72d69f583767292f750d24913dadacf5756b966aacb3f1a \\\n--hash=sha256:f75c7ab1f9e4aca5414ed4d8e5c0e303a34f4421f8a0d47a4d019ceff0ab6af4 \\\n--hash=sha256:f79fc4fc25f1c8698ff97788206bb3c2598949bfe0fef03d299eb1b5356ada99 \\\n--hash=sha256:f7f5baafcc48261359e14bcd6d9bff6d4b28d9103847c9e136694cb0501aef87 \\\n--hash=sha256:fc48c783f9c87e60831201f2cce7f3b2e4846bf4d8728eabe54d60700b318a0b\n# via\n#   cryptography\n#   weasyprint\ncharset-normalizer==3.4.1 \\\n--hash=sha256:0167ddc8ab6508fe81860a57dd472b2ef4060e8d378f0cc555707126830f2537 \\\n--hash=sha256:01732659ba9b5b873fc117534143e4feefecf3b2078b0a6a2e925271bb6f4cfa \\\n--hash=sha256:01ad647cdd609225c5350561d084b42ddf732f4eeefe6e678765636791e78b9a \\\n--hash=sha256:04432ad9479fa40ec0f387795ddad4437a2b50417c69fa275e212933519ff294 \\\n--hash=sha256:0907f11d019260cdc3f94fbdb23ff9125f6b5d1039b76003b5b0ac9d6a6c9d5b \\\n--hash=sha256:0924e81d3d5e70f8126529951dac65c1010cdf117bb75eb02dd12339b57749dd \\\n--hash=sha256:09b26ae6b1abf0d27570633b2b078a2a20419c99d66fb2823173d73f188ce601 \\\n--hash=sha256:09b5e6733cbd160dcc09589227187e242a30a49ca5cefa5a7edd3f9d19ed53fd \\\n--hash=sha256:0af291f4fe114be0280cdd29d533696a77b5b49cfde5467176ecab32353395c4 \\\n--hash=sha256:0f55e69f030f7163dffe9fd0752b32f070566451afe180f99dbeeb81f511ad8d \\\n--hash=sha256:1a2bc9f351a75ef49d664206d51f8e5ede9da246602dc2d2726837620ea034b2 \\\n--hash=sha256:22e14b5d70560b8dd51ec22863f370d1e595ac3d024cb8ad7d308b4cd95f8313 \\\n--hash=sha256:234ac59ea147c59ee4da87a0c0f098e9c8d169f4dc2a159ef720f1a61bbe27cd \\\n--hash=sha256:2369eea1ee4a7610a860d88f268eb39b95cb588acd7235e02fd5a5601773d4fa \\\n--hash=sha256:237bdbe6159cff53b4f24f397d43c6336c6b0b42affbe857970cefbb620911c8 \\\n--hash=sha256:28bf57629c75e810b6ae989f03c0828d64d6b26a5e205535585f96093e405ed1 \\\n--hash=sha256:2967f74ad52c3b98de4c3b32e1a44e32975e008a9cd2a8cc8966d6a5218c5cb2 \\\n--hash=sha256:2a75d49014d118e4198bcee5ee0a6f25856b29b12dbf7cd012791f8a6cc5c496 \\\n--hash=sha256:2bdfe3ac2e1bbe5b59a1a63721eb3b95fc9b6817ae4a46debbb4e11f6232428d \\\n--hash=sha256:2d074908e1aecee37a7635990b2c6d504cd4766c7bc9fc86d63f9c09af3fa11b \\\n--hash=sha256:2fb9bd477fdea8684f78791a6de97a953c51831ee2981f8e4f583ff3b9d9687e \\\n--hash=sha256:311f30128d7d333eebd7896965bfcfbd0065f1716ec92bd5638d7748eb6f936a \\\n--hash=sha256:329ce159e82018d646c7ac45b01a430369d526569ec08516081727a20e9e4af4 \\\n\n```\n\n----------------------------------------\n\nTITLE: Conditional Formatting Example in HTML Template\nDESCRIPTION: Demonstrates how to implement conditional formatting in label templates using Django template syntax\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/labels.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% if item.in_stock %}\nQuantity: {{ item.quantity }}\n{% else %}\nOUT OF STOCK\n{% endif %}\n```\n\n----------------------------------------\n\nTITLE: Generating Report Context for Stock Locations in Python\nDESCRIPTION: This method returns the context dictionary for Stock Location reports, including various attributes of the StockLocation object.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/context_variables.md#2025-04-22_snippet_5\n\nLANGUAGE: python\nCODE:\n```\ndef report_context(self):\n    \"\"\"Return some basic context information for this stock location\"\"\"\n\n    return {\n        'location': self,\n        'name': self.name,\n        'description': self.description,\n        'parent': self.parent,\n        'URL': self.get_absolute_url(),\n        'items': self.stock_items.all(),\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Report Context for Build Lines in Python\nDESCRIPTION: This method returns the context dictionary for Build Line reports, including various attributes of the BuildLine object.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/context_variables.md#2025-04-22_snippet_3\n\nLANGUAGE: python\nCODE:\n```\ndef report_context(self):\n    \"\"\"Return some basic context information for this build order\"\"\"\n\n    return {\n        'buildline': self,\n        'build': self.build,\n        'part': self.part,\n        'reference': self.reference,\n        'quantity': self.quantity,\n        'allocated': self.allocated,\n        'available': self.available,\n        'required': self.required,\n    }\n```\n\n----------------------------------------\n\nTITLE: InvenTree Directory Structure Overview in Bash\nDESCRIPTION: A comprehensive tree-style listing of the InvenTree project directory structure, showing the organization of frontend, backend, documentation, and supporting files. The structure highlights key directories including DevOps configurations, GitHub workflows, deployment assets, and source code locations.\nSOURCE: https://github.com/inventree/inventree/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nInvenTree/\n├─ .devops/                            # Files for Azure DevOps\n├─ .github/                            # Files for GitHub\n│  ├─ actions/                         # Reused actions\n│  ├─ ISSUE_TEMPLATE/                  # Templates for issues and pull requests\n│  ├─ workflows/                       # CI/CD flows\n│  ├─ scripts/                         # CI scripts\n├─ .vscode/                            # Settings for Visual Code IDE\n├─ assets/                             # General project assets\n├─ contrib/                            # Files needed for deployments\n│  ├─ container/                       # Files related to building container images\n│  ├─ installer/                       # Files needed to build single-file installer\n│  ├─ packager.io/                     # Files needed for Debian/Ubuntu packages\n├─ docs/                               # Directory for documentation / General helper files\n│  ├─ ci/                              # CI for documentation\n│  ├─ docs/                            # Source for documentation\n├─ src/                                # Source for application\n│  ├─ backend/                         # Directory for backend parts\n│  │  ├─ InvenTree/                    # Source for backend\n│  │  ├─ requirements.txt              # Dependencies for backend\n│  │  ├─ package.json                  # Dependencies for backend HTML linting\n│  ├─ frontend/                        # Directory for frontend parts\n│  │  ├─ src/                          # Source for frontend\n│  │  │  ├─ main.tsx                   # Entry point for frontend\n│  │  ├─ tests/                        # Tests for frontend\n│  │  ├─ netlify.toml                  # Settings for frontend previews (Netlify)\n│  │  ├─ package.json                  # Dependencies for frontend\n│  │  ├─ playwright.config.ts          # Settings for frontend tests\n│  │  ├─ tsconfig.json                 # Settings for frontend compilation\n├─ .pkgr.yml                           # Build definition for Debian/Ubuntu packages\n├─ .pre-commit-config.yaml             # Code formatter/linter configuration\n├─ CONTRIBUTING.md                     # Contribution guidelines and overview\n├─ Procfile                            # Process definition for Debian/Ubuntu packages\n├─ README.md                           # General project information and overview\n├─ runtime.txt                         # Python runtime settings for Debian/Ubuntu packages build\n├─ SECURITY.md                         # Project security policy\n├─ tasks.py                            # Action definitions for development, testing and deployment\n```\n\n----------------------------------------\n\nTITLE: Listing Available Invoke Tasks\nDESCRIPTION: This command displays a list of available InvenTree administration actions using the invoke tool. It provides a summary of each task and its purpose.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/invoke.md#2025-04-22_snippet_6\n\nLANGUAGE: Shell\nCODE:\n```\ninvoke --list\n```\n\n----------------------------------------\n\nTITLE: Package Requirements with SHA256 Hashes\nDESCRIPTION: Package dependency declarations with pinned versions and corresponding SHA256 hash values for security verification. Each package includes multiple hash values to verify package integrity across different distributions.\nSOURCE: https://github.com/inventree/inventree/blob/master/contrib/dev_reqs/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n--hash=sha256:01179a4a8559ab5de078078f37e5c1a30d76bb88519906844fd7bdea1b7729ff \\\n--hash=sha256:0833f8694549e586547b576dcfaba4a6b55b9e96098b36cdc7ebefe667dfed48 \\\n# via -r contrib/dev_reqs/requirements.in\nrequests==2.32.3 \\\n--hash=sha256:55365417734eb18255590a9ff9eb97e9e1da868d4ccd6402399eaf68af20a760 \\\n--hash=sha256:70761cfe03c773ceb22aa2f671b4757976145175cdfca038c02654d061d6dcc6\n# via -r contrib/dev_reqs/requirements.in\n```\n\n----------------------------------------\n\nTITLE: Label Printer Status API Definition\nDESCRIPTION: Class specifying the available status codes for label printers in InvenTree. Status codes track the operational state of label printers in the system.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/machines/label_printer.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nmachine.machine_types.label_printer.LabelPrinterStatus\n```\n\n----------------------------------------\n\nTITLE: Listing Package Dependencies with SHA256 Hashes\nDESCRIPTION: This snippet shows a list of package dependencies with their corresponding SHA256 hashes. It includes hashes for multiple versions of each package to ensure integrity and security when installing dependencies.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements.txt#2025-04-22_snippet_3\n\nLANGUAGE: Text\nCODE:\n```\n--hash=sha256:5c54afdcbb0182d06836cc3d1be921e540be3ebdf8b8a51ee3ef987537455f84 \\\n--hash=sha256:5d6a6972b93c426ace71e0be9a6f4b2cfae9b1baed2eed2006076a746692288c \\\n--hash=sha256:609251a0ca4770e5a8768ff902aa02bf636339c5a93f9349b48eb1f606f7f3e9 \\\n--hash=sha256:62d172f358f33a26d6b41b28c170c63886742f5b6772a42b59b4f0fa10526cb1 \\\n--hash=sha256:62f7fdb0d1ed2065451f086519865b4c90aa19aed51081979ecd05a21eb4d1be \\\n--hash=sha256:658f2aa69d31e09699705949b5fc4719cbecbd4a97f9656a232e7d6c7be1a367 \\\n--hash=sha256:65ab5685d56914b9a2a34d67dd5488b83213d680b0c5d10b47f81da5a16b0b0e \\\n--hash=sha256:68934b242c51eb02907c5b81d138cb977b2129a0a75a8f8b60b01cb8586c7b21 \\\n--hash=sha256:68b87753c784d6acb8a25b05cb526c3406913c9d988d51f80adecc2b0775d6aa \\\n--hash=sha256:69959bd3167b993e6e710b99051265654133a98f20cec1d9b493b931942e9c16 \\\n--hash=sha256:6a7095eeec6f89111d03dabfe5883a1fd54da319c94e0fb104ee8f23616b572d \\\n--hash=sha256:6b038cc86b285e4f9fea2ba5ee76e89f21ed1ea898e287dc277a25884f3a7dfe \\\n--hash=sha256:6ba0d3dcac281aad8a0e5b14c7ed6f9fa89c8612b47939fc94f80b16e2e9bc83 \\\n--hash=sha256:6e91cf736959057f7aac7adfc83481e03615a8e8dd5758aa1d95ea69e8931dba \\\n--hash=sha256:6ee8c39582d2652dcd516d1b879451500f8db3fe3607ce45d7c5957ab2596040 \\\n--hash=sha256:6f651ebd0b21ec65dfca93aa629610a0dbc13dbc13554f19b0113da2e61a4763 \\\n--hash=sha256:71a8dd38fbd2f2319136d4ae855a7078c69c9a38ae06e0c17c73fd70fc6caad8 \\\n--hash=sha256:74068c601baff6ff021c70f0935b0c7bc528baa8ea210c202e03757c68c5a4ff \\\n--hash=sha256:7437237c6a66b7ca341e868cda48be24b8701862757426852c9b3186de1da8a2 \\\n--hash=sha256:747a3d3e98e24597981ca0be0fd922aebd471fa99d0043a3842d00cdcad7ad6a \\\n--hash=sha256:74bcb423462233bc5d6066e4e98b0264e7c1bed7541fff2f4e34fe6b21563c8b \\\n--hash=sha256:78d9b952e07aed35fe2e1a7ad26e929595412db48535921c5013edc8aa4a35ce \\\n--hash=sha256:7b1cd427cb0d5f7393c31b7496419da594fe600e6fdc4b105a54f82405e6626c \\\n--hash=sha256:7d3d1ca42870cdb6d0d29939630dbe48fa511c203724820fc0fd507b2fb46577 \\\n--hash=sha256:7e2f58095acc211eb9d8b5771bf04df9ff37d6b87618d1cbf85f92399c98dae8 \\\n--hash=sha256:7f41026c1d64043a36fda21d64c5026762d53a77043e73e94b71f0521939cc71 \\\n--hash=sha256:81b4e48da4c69313192d8c8d4311e5d818b8be1afe68ee20f6385d0e96fc9512 \\\n--hash=sha256:86a6b24b19eaebc448dc56b87c4865527855145d851f9fc3891673ff97950540 \\\n--hash=sha256:874a216bf6afaf97c263b56371434e47e2c652d215788396f60477540298218f \\\n--hash=sha256:89e043f1d9d341c52bf2af6d02e6adde62e0a46e6755d5eb60dc6e4f0b8aeca2 \\\n--hash=sha256:8c72e9563347c7395910de6a3100a4840a75a6f60e05af5e58566868d5eb2d6a \\\n--hash=sha256:8dc2c0395bea8254d8daebc76dcf8eb3a95ec2a46fa6fae5eaccee366bfe02ce \\\n--hash=sha256:8f0de2d390af441fe8b2c12626d103540b5d850d585b18fcada58d972b74a74e \\\n--hash=sha256:92e67a0be1639c251d21e35fe74df6bcc40cba445c2cda7c4a967656733249e2 \\\n--hash=sha256:94d6c3782907b5e40e21cadf94b13b0842ac421192f26b84c45f13f3c9d5dc27 \\\n--hash=sha256:97acf1e1fd66ab53dacd2c35b319d7e548380c2e9e8c54525c6e76d21b1ae3b1 \\\n--hash=sha256:9ada35dd21dc6c039259596b358caab6b13f4db4d4a7f8665764d616daf9cc1d \\\n--hash=sha256:9c52100e2c2dbb0649b90467935c4b0de5528833c76a35ea1a2691ec9f1ee7a1 \\\n--hash=sha256:9e41506fec7a7f9405b14aa2d5c8abbb4dbbd09d88f9496958b6d00cb4d45330 \\\n--hash=sha256:9e4b47ac0f5e749cfc618efdf4726269441014ae1d5583e047b452a32e221920 \\\n--hash=sha256:9fb81d2824dff4f2e297a276297e9031f46d2682cafc484f49de182aa5e5df99 \\\n--hash=sha256:a0eabd0a81625049c5df745209dc7fcef6e2aea7793e5f003ba363610aa0a3ff \\\n--hash=sha256:a3d819eb6f9b8677f57f9664265d0a10dd6551d227afb4af2b9cd7bdc2ccbf18 \\\n--hash=sha256:a87de7dd873bf9a792bf1e58b1c3887b9264036629a5bf2d2e6579fe8e73edff \\\n--hash=sha256:aa617107a410245b8660028a7483b68e7914304a6d4882b5ff3d2d3eb5948d8c \\\n--hash=sha256:aac0bbd3e8dd2d9c45ceb82249e8bdd3ac99131a32b4d35c8af3cc9db1657179 \\\n--hash=sha256:ab6dd83b970dc97c2d10bc71aa925b84788c7c05de30241b9e96f9b6d9ea3080 \\\n--hash=sha256:ace2c2326a319a0bb8a8b0e5b570c764962e95818de9f259ce814ee666603f19 \\\n--hash=sha256:ae5fe5c4b525aa82b8076c1a59d642c17b6e8739ecf852522c6321852178119d \\\n--hash=sha256:b11a5d918a6216e521c715b02749240fb07ae5a1fefd4b7bf12f833bc8b4fe70 \\\n--hash=sha256:b1c8c20847b9f34e98080da785bb2336ea982e7f913eed5809e5a3c872900f32 \\\n--hash=sha256:b369d3db3c22ed14c75ccd5af429086f166a19627e84a8fdade3f8f31426e52a \\\n--hash=sha256:b710bc2b8292966b23a6a0121f7a6c51d45d2347edcc75f016ac123b8054d3f2 \\\n--hash=sha256:bd96517ef76c8654446fc3db9242d019a1bb5fe8b751ba414765d59f99210b79 \\\n--hash=sha256:c00f323cc00576df6165cc9d21a4c21285fa6b9989c5c39830c3903dc4303ef3 \\\n--hash=sha256:c162b216070f280fa7da844531169be0baf9ccb17263cf5a8bf876fcd3117fa5 \\\n--hash=sha256:c1a69e58a6bb2de65902051d57fde951febad631a20a64572677a1052690482f \\\n--hash=sha256:c1f794c02903c2824fccce5b20c339a1a14b114e83b306ff11b597c5f71a1c8d \\\n--hash=sha256:c24037349665434f375645fa9d1f5304800cec574d0310f618490c871fd902b3 \\\n--hash=sha256:c300306673aa0f3ed5ed9372b21867690a17dba38c68c44b287437c362ce486b \\\n--hash=sha256:c56a1d43b2f9ee4786e4658c7903f05da35b923fb53c11025712562d5cc02753 \\\n--hash=sha256:c6379f35350b655fd817cd0d6cbeef7f265f3ae5fedb1caae2eb442bbeae9ab9 \\\n--hash=sha256:c802e1c2ed9f0c06a65bc4ed0189d000ada8049312cfeab6ca635e39c9608957 \\\n--hash=sha256:cb83f8a875b3d9b458cada4f880fa498646874ba4011dc974e071a0a84a1b033 \\\n--hash=sha256:cf120cce539453ae086eacc0130a324e7026113510efa83ab42ef3fcfccac7fb \\\n--hash=sha256:dd36439be765e2dde7660212b5275641edbc813e7b24668831a5c8ac91180656 \\\n--hash=sha256:dd5350b55f9fecddc51385463a4f67a5da829bc741e38cf689f38ec9023f54ab \\\n--hash=sha256:df5c7333167b9674aa8ae1d4008fa4bc17a313cc490b2cca27838bbdcc6bb15b \\\n--hash=sha256:e63601ad5cd8f860aa99d109889b5ac34de571c7ee902d6812d5d9ddcc77fa7d \\\n--hash=sha256:e92ce66cd919d18d14b3856906a61d3f6b6a8500e0794142338da644260595cd \\\n--hash=sha256:e99f5507401436fdcc85036a2e7dc2e28d962550afe1cbfc07c40e454256a859 \\\n--hash=sha256:ea2e2f6f801696ad7de8aec061044d6c8c0dd4037608c7cab38a9a4d316bfb11 \\\n--hash=sha256:eafa2c8658f4e560b098fe9fc54539f86528651f61849b22111a9b107d18910c \\\n--hash=sha256:ecd4ad8453ac17bc7ba3868371bffb46f628161ad0eefbd0a855d2c8c32dd81a \\\n--hash=sha256:ee70d08fd60c9565ba8190f41a46a54096afa0eeb8f76bd66f2c25d3b1b83005 \\\n--hash=sha256:eec1bb8cdbba2925bedc887bc0609a80e599c75b12d87ae42ac23fd199445654 \\\n--hash=sha256:ef0c1fe22171dd7c7c27147f2e9c3e86f8bdf473fed75f16b0c2e84a5030ce80 \\\n--hash=sha256:f2901429da1e645ce548bf9171784c0f74f0718c3f6150ce166be39e4dd66c3e \\\n--hash=sha256:f422a209d2455c56849442ae42f25dbaaba1c6c3f501d58761c619c7836642ec \\\n--hash=sha256:f65e5120863c2b266dbcc927b306c5b78e502c71edf3295dfcb9501ec96e5fc7 \\\n--hash=sha256:f7d4a670107d75dfe5ad080bed6c341d18c4442f9378c9f58e5851e86eb79965 \\\n--hash=sha256:f914c03e6a31deb632e2daa881fe198461f4d06e57ac3d0e05bbcab8eae01945 \\\n--hash=sha256:fb66442c2546446944437df74379e9cf9e9db353e61301d1a0e26482f43f0dd8\n# via\n#   python3-saml\n#   xmlsec\nmarkdown==3.7 \\\n--hash=sha256:2ae2471477cfd02dbbf038d5d9bc226d40def84b4fe2986e49b59b6b472bbed2 \\\n--hash=sha256:7eb6df5690b81a1d7942992c97fad2938e956e79df20cbc6186e9c3a77b1c803\n# via django-markdownify\nmarkupsafe==3.0.2 \\\n--hash=sha256:0bff5e0ae4ef2e1ae4fdf2dfd5b76c75e5c2fa4132d05fc1b0dabcd20c7e28c4 \\\n--hash=sha256:0f4ca02bea9a23221c0182836703cbf8930c5e9454bacce27e767509fa286a30 \\\n--hash=sha256:1225beacc926f536dc82e45f8a4d68502949dc67eea90eab715dea3a21c1b5f0 \\\n--hash=sha256:131a3c7689c85f5ad20f9f6fb1b866f402c445b220c19fe4308c0b147ccd2ad9 \\\n--hash=sha256:15ab75ef81add55874e7ab7055e9c397312385bd9ced94920f2802310c930396 \\\n--hash=sha256:1a9d3f5f0901fdec14d8d2f66ef7d035f2157240a433441719ac9a3fba440b13 \\\n--hash=sha256:1c99d261bd2d5f6b59325c92c73df481e05e57f19837bdca8413b9eac4bd8028 \\\n--hash=sha256:1e084f686b92e5b83186b07e8a17fc09e38fff551f3602b249881fec658d3eca \\\n--hash=sha256:2181e67807fc2fa785d0592dc2d6206c019b9502410671cc905d132a92866557 \\\n--hash=sha256:2cb8438c3cbb25e220c2ab33bb226559e7afb3baec11c4f218ffa7308603c832 \\\n--hash=sha256:3169b1eefae027567d1ce6ee7cae382c57fe26e82775f460f0b2778beaad66c0 \\\n--hash=sha256:3809ede931876f5b2ec92eef964286840ed3540dadf803dd570c3b7e13141a3b \\\n--hash=sha256:38a9ef736c01fccdd6600705b09dc574584b89bea478200c5fbf112a6b0d5579 \\\n--hash=sha256:3d79d162e7be8f996986c064d1c7c817f6df3a77fe3d6859f6f9e7be4b8c213a \\\n--hash=sha256:444dcda765c8a838eaae23112db52f1efaf750daddb2d9ca300bcae1039adc5c \\\n--hash=sha256:48032821bbdf20f5799ff537c7ac3d1fba0ba032cfc06194faffa8cda8b560ff \\\n--hash=sha256:4aa4e5faecf353ed117801a068ebab7b7e09ffb6e1d5e412dc852e0da018126c \\\n--hash=sha256:52305740fe773d09cffb16f8ed0427942901f00adedac82ec8b67752f58a1b22 \\\n--hash=sha256:569511d3b58c8791ab4c2e1285575265991e6d8f8700c7be0e88f86cb0672094 \\\n--hash=sha256:57cb5a3cf367aeb1d316576250f65edec5bb3be939e9247ae594b4bcbc317dfb \\\n--hash=sha256:5b02fb34468b6aaa40dfc198d813a641e3a63b98c2b05a16b9f80b7ec314185e \\\n--hash=sha256:6381026f158fdb7c72a168278597a5e3a5222e83ea18f543112b2662a9b699c5 \\\n--hash=sha256:6af100e168aa82a50e186c82875a5893c5597a0c1ccdb0d8b40240b1f28b969a \\\n--hash=sha256:6c89876f41da747c8d3677a2b540fb32ef5715f97b66eeb0c6b66f5e3ef6f59d \\\n--hash=sha256:6e296a513ca3d94054c2c881cc913116e90fd030ad1c656b3869762b754f5f8a \\\n--hash=sha256:70a87b411535ccad5ef2f1df5136506a10775d267e197e4cf531ced10537bd6b \\\n--hash=sha256:7e94c425039cde14257288fd61dcfb01963e658efbc0ff54f5306b06054700f8 \\\n--hash=sha256:846ade7b71e3536c4e56b386c2a47adf5741d2d8b94ec9dc3e92e5e1ee1e2225 \\\n--hash=sha256:88416bd1e65dcea10bc7569faacb2c20ce071dd1f87539ca2ab364bf6231393c \\\n--hash=sha256:88b49a3b9ff31e19998750c38e030fc7bb937398b1f78cfa599aaef92d693144 \\\n--hash=sha256:8c4e8c3ce11e1f92f6536ff07154f9d49677ebaaafc32db9db4620bc11ed480f \\\n```\n\n----------------------------------------\n\nTITLE: Displaying InvenTree Configuration (Bash)\nDESCRIPTION: This command displays all environment variables set for InvenTree using the CLI.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/installer.md#2025-04-22_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\ninventree config\n```\n\n----------------------------------------\n\nTITLE: Calling a Custom Action via POST Request in JSON\nDESCRIPTION: This snippet demonstrates how to call a custom action by sending a POST request to the /api/action/ endpoint. The request includes the action name and optional data.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/action.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST {\n    action: \"MyCustomAction\",\n    data: {\n        foo: \"bar\",\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Assigning Serial Numbers in InvenTree\nDESCRIPTION: This table demonstrates various methods for inputting serial numbers in InvenTree, including single numbers, lists, ranges, and dynamic assignments. It shows the syntax and resulting output for each method.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/part/trackable.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Marker | Input | Result | Description |\n| --- | --- | --- | --- |\n|  | `1` | `[1]` | single SN |\n| , | `1,3,5` | `[1, 3, 5]` | list of SNs |\n| - | `1-5` | `[1, 2, 3, 4, 5]` | stretch of SN |\n| ~ | `~` (next SN is 8) | `[8]` | represents the next SN |\n| `<start>`+ | `4+` (with 3 numbers needed) | `[4, 5, 6]` | all needed SNs from `<start>` |\n| `<start>`+`<length>` | `2+2` | `[2, 3, 4]` | `<length>` SNs added to `<start>` |\n```\n\n----------------------------------------\n\nTITLE: Creating a Dockerfile for Custom InvenTree Image\nDESCRIPTION: This snippet provides a Dockerfile configuration to build a custom InvenTree image that installs necessary dependencies such as git on top of the specified InvenTree version. The ARG directive allows specifying the InvenTree version during the build.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_10\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG INVENTREE_TAG\n\nFROM inventree/inventree:${INVENTREE_TAG} as production\n\n# Install whatever dependency is needed here (e.g. git)\nRUN apk add --no-cache git\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies with Versions and Hashes\nDESCRIPTION: This snippet shows a list of Python package dependencies, each with its version number and SHA256 hash values. It includes packages like sniffio, super-collections, termcolor, typing-extensions, urllib3, watchdog, wcmatch, and zipp.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/requirements.txt#2025-04-22_snippet_3\n\nLANGUAGE: plaintext\nCODE:\n```\nsniffio==1.3.1 \\\n    --hash=sha256:2f6da418d1f1e0fddd844478f41680e794e6051915791a034ff65e5f100525a2 \\\n    --hash=sha256:f4324edc670a0f49750a81b895f35c3adb843cca46f0530f79fc1babb23789dc\n    # via anyio\nsuper-collections==0.5.3 \\\n    --hash=sha256:907d35b25dc4070910e8254bf2f5c928348af1cf8a1f1e8259e06c666e902cff \\\n    --hash=sha256:94c1ec96c0a0d5e8e7d389ed8cde6882ac246940507c5e6b86e91945c2968d46\n    # via mkdocs-macros-plugin\ntermcolor==2.5.0 \\\n    --hash=sha256:37b17b5fc1e604945c2642c872a3764b5d547a48009871aea3edd3afa180afb8 \\\n    --hash=sha256:998d8d27da6d48442e8e1f016119076b690d962507531df4890fcd2db2ef8a6f\n    # via mkdocs-macros-plugin\ntyping-extensions==4.12.2 \\\n    --hash=sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d \\\n    --hash=sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\n    # via\n    #   anyio\n    #   mkdocstrings-python\n    #   rich\nurllib3==2.3.0 \\\n    --hash=sha256:1cee9ad369867bfdbbb48b7dd50374c0967a0bb7710050facf0dd6911440e3df \\\n    --hash=sha256:f8c5449b3cf0861679ce7e0503c7b44b5ec981bec0d1d3795a07f1ba96f0204d\n    # via requests\nwatchdog==6.0.0 \\\n    --hash=sha256:07df1fdd701c5d4c8e55ef6cf55b8f0120fe1aef7ef39a1c6fc6bc2e606d517a \\\n    --hash=sha256:20ffe5b202af80ab4266dcd3e91aae72bf2da48c0d33bdb15c66658e685e94e2 \\\n    --hash=sha256:212ac9b8bf1161dc91bd09c048048a95ca3a4c4f5e5d4a7d1b1a7d5752a7f96f \\\n    --hash=sha256:2cce7cfc2008eb51feb6aab51251fd79b85d9894e98ba847408f662b3395ca3c \\\n    --hash=sha256:490ab2ef84f11129844c23fb14ecf30ef3d8a6abafd3754a6f75ca1e6654136c \\\n    --hash=sha256:6eb11feb5a0d452ee41f824e271ca311a09e250441c262ca2fd7ebcf2461a06c \\\n    --hash=sha256:6f10cb2d5902447c7d0da897e2c6768bca89174d0c6e1e30abec5421af97a5b0 \\\n    --hash=sha256:7607498efa04a3542ae3e05e64da8202e58159aa1fa4acddf7678d34a35d4f13 \\\n    --hash=sha256:76aae96b00ae814b181bb25b1b98076d5fc84e8a53cd8885a318b42b6d3a5134 \\\n    --hash=sha256:7a0e56874cfbc4b9b05c60c8a1926fedf56324bb08cfbc188969777940aef3aa \\\n    --hash=sha256:82dc3e3143c7e38ec49d61af98d6558288c415eac98486a5c581726e0737c00e \\\n    --hash=sha256:9041567ee8953024c83343288ccc458fd0a2d811d6a0fd68c4c22609e3490379 \\\n    --hash=sha256:90c8e78f3b94014f7aaae121e6b909674df5b46ec24d6bebc45c44c56729af2a \\\n    --hash=sha256:9513f27a1a582d9808cf21a07dae516f0fab1cf2d7683a742c498b93eedabb11 \\\n    --hash=sha256:9ddf7c82fda3ae8e24decda1338ede66e1c99883db93711d8fb941eaa2d8c282 \\\n    --hash=sha256:a175f755fc2279e0b7312c0035d52e27211a5bc39719dd529625b1930917345b \\\n    --hash=sha256:a1914259fa9e1454315171103c6a30961236f508b9b623eae470268bbcc6a22f \\\n    --hash=sha256:afd0fe1b2270917c5e23c2a65ce50c2a4abb63daafb0d419fde368e272a76b7c \\\n    --hash=sha256:bc64ab3bdb6a04d69d4023b29422170b74681784ffb9463ed4870cf2f3e66112 \\\n    --hash=sha256:bdd4e6f14b8b18c334febb9c4425a878a2ac20efd1e0b231978e7b150f92a948 \\\n    --hash=sha256:c7ac31a19f4545dd92fc25d200694098f42c9a8e391bc00bdd362c5736dbf881 \\\n    --hash=sha256:c7c15dda13c4eb00d6fb6fc508b3c0ed88b9d5d374056b239c4ad1611125c860 \\\n    --hash=sha256:c897ac1b55c5a1461e16dae288d22bb2e412ba9807df8397a635d88f671d36c3 \\\n    --hash=sha256:cbafb470cf848d93b5d013e2ecb245d4aa1c8fd0504e863ccefa32445359d680 \\\n    --hash=sha256:d1cdb490583ebd691c012b3d6dae011000fe42edb7a82ece80965b42abd61f26 \\\n    --hash=sha256:e3df4cbb9a450c6d49318f6d14f4bbc80d763fa587ba46ec86f99f9e6876bb26 \\\n    --hash=sha256:e6439e374fc012255b4ec786ae3c4bc838cd7309a540e5fe0952d03687d8804e \\\n    --hash=sha256:e6f0e77c9417e7cd62af82529b10563db3423625c5fce018430b249bf977f9e8 \\\n    --hash=sha256:e7631a77ffb1f7d2eefa4445ebbee491c720a5661ddf6df3498ebecae5ed375c \\\n    --hash=sha256:ef810fbf7b781a5a593894e4f439773830bdecb885e6880d957d5b9382a960d2\n    # via mkdocs\nwcmatch==10.0 \\\n    --hash=sha256:0dd927072d03c0a6527a20d2e6ad5ba8d0380e60870c383bc533b71744df7b7a \\\n    --hash=sha256:e72f0de09bba6a04e0de70937b0cf06e55f36f37b3deb422dfaf854b867b840a\n    # via mkdocs-include-markdown-plugin\nzipp==3.21.0 \\\n    --hash=sha256:2c9958f6430a2040341a52eb608ed6dd93ef4392e02ffe219417c1b28b5dd1f4 \\\n    --hash=sha256:ac1bbe05fd2991f160ebce24ffbac5f6d11d83dc90891255885223d42b3cd931\n    # via importlib-metadata\n```\n\n----------------------------------------\n\nTITLE: Specifying Custom Port for InvenTree Development Server\nDESCRIPTION: Command to start the InvenTree development server with a custom port specified using the -a flag. This example uses port 8123.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_dev.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n(env) invoke dev.server -a 127.0.0.1:8123\n```\n\n----------------------------------------\n\nTITLE: Rendering Custom Icons in InvenTree Reports using HTML\nDESCRIPTION: Example showing how to render custom icons for models like part categories and locations using the icon template tag. Includes loading the necessary icon fonts and demonstrates how to apply custom styling classes.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_16\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n\n{% block style %}\n{% include_icon_fonts %}\n{% endblock style %}\n\n{% icon location.icon %}\n\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Handling Panel Load Event in InvenTree Plugin (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to handle the panel load event in an InvenTree plugin. It uses the onPanelLoad function to execute code when a specific panel is loaded.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/urls.md#2025-04-22_snippet_4\n\nLANGUAGE: javascript\nCODE:\n```\nonPanelLoad('loans', function() {\n    ...\n});\n```\n\n----------------------------------------\n\nTITLE: Rendering Asset Images in HTML Templates\nDESCRIPTION: Demonstrates how to include uploaded asset files like company logos in report templates using the asset template tag.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/index.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<!-- Need to include the report template tags at the start of the template file -->\n{% load report %}\n\n<!-- Simple stylesheet -->\n<head>\n  <style>\n    .company-logo {\n      height: 50px;\n    }\n  </style>\n</head>\n\n<body>\n<!-- Report template code here -->\n\n<!-- Render an uploaded asset image -->\n<img src=\"{% asset 'company_image.png' %}\" class=\"company-logo\">\n\n<!-- ... -->\n</body>\n```\n\n----------------------------------------\n\nTITLE: Listing Python Package Dependencies with Version and Hash\nDESCRIPTION: This snippet shows the format used to specify Python package dependencies. Each line includes the package name, version, and SHA256 hash for verification. Multiple hashes are provided for some packages to support different platforms or build variants.\nSOURCE: https://github.com/inventree/inventree/blob/master/contrib/container/requirements.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nsetuptools==76.0.0 \\\n    --hash=sha256:199466a166ff664970d0ee145839f5582cb9bca7a0a3a2e795b6a9cb2308e9c6 \\\n    --hash=sha256:43b4ee60e10b0d0ee98ad11918e114c70701bc6051662a9a675a0496c1a158f4\n    # via -r contrib/container/requirements.in\nsqlparse==0.5.3 \\\n    --hash=sha256:09f67787f56a0b16ecdbde1bfc7f5d9c3371ca683cfeaa8e6ff60b4807ec9272 \\\n    --hash=sha256:cf2196ed3418f3ba5de6af7e82c694a9fbdbfecccdfc72e281548517081f16ca\n    # via django\ntyping-extensions==4.12.2 \\\n    --hash=sha256:04e5ca0351e0f3f85c6853954072df659d0d13fac324d0072316b67d7794700d \\\n    --hash=sha256:1a7ead55c7e559dd4dee8856e3a88b41225abfe1ce8df57b7c13915fe121ffb8\n    # via\n    #   psycopg\n    #   psycopg-pool\n```\n\n----------------------------------------\n\nTITLE: Setting Page Size in WeasyPrint Templates\nDESCRIPTION: Demonstrates how to set custom page sizes for WeasyPrint-generated PDFs using template variables. This snippet may cause localization issues if not handled properly.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/weasyprint.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<head>\n    <style>\n        @page {\n            size: {{ width }}mm {{ height }}mm;\n            margin: 0mm;\n        }\n    </style>\n</head>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Using Mathematical Operations with Variables in HTML Template\nDESCRIPTION: Demonstrates how to use mathematical operations with variables in a template, specifically for calculating totals in an order.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_10\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n\n{% for line in order.lines %}\nTotal: {% multiply line.purchase_price line.quantity %}<br>\n{% endfor %}\n\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Database-Involved Test Implementation\nDESCRIPTION: Complex test implementation that creates test data in the database and verifies part update logic\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/test.md#2025-04-22_snippet_4\n\nLANGUAGE: python\nCODE:\n```\nfrom part.models import Part, PartCategory\n\n\ndef test_should_be_updated(self):\n        test_cat = PartCategory.objects.create(name='test_cat')\n        active_part = Part.objects.create(\n            name='Part1',\n            IPN='IPN1',\n            category=test_cat,\n            active=True,\n            purchaseable=True,\n            component=True,\n            virtual=False)\n        inactive_part = Part.objects.create(\n            name='Part2',\n            IPN='IPN2',\n            category=test_cat,\n            active=False,\n            purchaseable=True,\n            component=True,\n            virtual=False)\n        non_purchasable_part = Part.objects.create(\n            name='Part3',\n            IPN='IPN3',\n            category=test_cat,\n            active=True,\n            purchaseable=False,\n            component=True,\n            virtual=False)\n\n        self.assertEqual(MySupplier.should_be_updated(self, active_part, True, 'Active part')\n        self.assertEqual(MySupplier.should_be_updated(self, inactive_part, False, 'Inactive part')\n        self.assertEqual(MySupplier.should_be_updated(self, non_purchasable_part, False, 'Non purchasable part')\n```\n\n----------------------------------------\n\nTITLE: Rendering Part Images in InvenTree Reports using HTML\nDESCRIPTION: Example of using the part_image template tag to render an image associated with a Part instance in an InvenTree report. This snippet demonstrates the basic usage by loading the report template library and embedding the image in an HTML img tag.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_13\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<!-- Load the report helper functions -->\n{% load report %}\n<img src='{% part_image part %}'/>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Build Order Documentation Table Formatting\nDESCRIPTION: Markdown table structure defining build order global settings with columns for name, description, default value, and units.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/manufacturing/build.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n| Name | Description | Default | Units |\n| ---- | ----------- | ------- | ----- |\n```\n\n----------------------------------------\n\nTITLE: Conditional Rendering in Django Templates\nDESCRIPTION: Demonstrates the use of conditional statements in Django templates for customizing report content based on specific conditions.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/weasyprint.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% if <condition> %}\n{% do_something %}\n{% elif <other_condition> %}\n<!-- something else -->\n{% else %}\n<!-- finally -->\n{% endif %}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Stock Merge Conditions HTML Snippet\nDESCRIPTION: HTML representation of stock merge validation rules and constraints\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/stock/adjust.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% with id=\"stock_item_merge\", url=\"stock/stock_item_merge.png\", description=\"Stock Item Merge\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Serving InvenTree Documentation Locally using MkDocs\nDESCRIPTION: Command to serve the InvenTree documentation locally using MkDocs, specifying the configuration file and host address.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n$ mkdocs serve -f docs/mkdocs.yml -a localhost:8080\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with Hashes\nDESCRIPTION: Pinned Python package dependencies with SHA-256 hashes for security verification. Each package listing includes the exact version number and cryptographic hashes to ensure package integrity during installation.\nSOURCE: https://github.com/inventree/inventree/blob/master/contrib/dev_reqs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: pip\nCODE:\n```\ncertifi==2024.8.30 \\\n    --hash=sha256:922820b53db7a7257ffbda3f597266d435245903d80737e34f8a45ff3e3230d8 \\\n    --hash=sha256:bec941d2aa8195e248a60b31ff9f0558284cf01a52591ceda73ea9afffd69fd9\ncharset-normalizer==3.4.0 \\\n    --hash=sha256:0099d79bdfcf5c1f0c2c72f91516702ebf8b0b8ddd8905f97a8aecf49712c621 \\\n    --hash=sha256:0713f3adb9d03d49d365b70b84775d0a0d18e4ab08d12bc46baa6132ba78aaf6\nidna==3.10 \\\n    --hash=sha256:12f65c9b470abda6dc35cf8e63cc574b1c52b11df2c86030af0ac09b01b13ea9 \\\n    --hash=sha256:946d195a0d259cbba61165e88e65941f16e9b36ea6ddb97f00452bae8b1287d3\njc==1.25.4 \\\n    --hash=sha256:1e4f45d2e5b72cf9d300b0d9df0578c0d3b553843e3ad37a525d93bb0e94aca1 \\\n    --hash=sha256:a32eaf029c56b582dadae48895f20784d0f84f2fa28a8e2b32f377a8bffa8b39\npygments==2.18.0 \\\n    --hash=sha256:786ff802f32e91311bff3889f6e9a86e81505fe99f2735bb6d60ae0c5004f199 \\\n    --hash=sha256:b8e6aca0523f3ab76fee51799c488e38782ac06eafcf95e7ba832985c8e7b13a\npyyaml==6.0.2\n```\n\n----------------------------------------\n\nTITLE: Template Include Image for Drawer Menu\nDESCRIPTION: A template snippet for including an image showing the drawer menu with specified parameters.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/navigation.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"drawer\", url=\"app/drawer.png\", maxheight=\"240px\", description=\"Open drawer menu\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Adding InvenTree Logo to Reports using HTML\nDESCRIPTION: Example demonstrating how to include the InvenTree logo in a report using the logo_image template tag. This will automatically use the custom logo if one is configured by the system administrator.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_17\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n<img src='{% logo_image %}'/>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Referencing External Order Management API Schema in YAML\nDESCRIPTION: This code snippet references an external YAML file that contains the schema details for the External Order Management API in InvenTree. The YAML file is located in the docs/api/schema directory.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/schema/order.md#2025-04-22_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n[OAD(./docs/docs/api/schema/order.yml)]\n```\n\n----------------------------------------\n\nTITLE: Generating Documentation Requirements File with UV\nDESCRIPTION: Command to compile documentation requirements using UV pip compiler, maintaining extras and generating security hashes for dependency verification.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nuv pip compile docs/requirements.in -o docs/requirements.txt --no-strip-extras --generate-hashes\n```\n\n----------------------------------------\n\nTITLE: Generating QR Code Image for Part in HTML Template\nDESCRIPTION: This snippet demonstrates how to render a QR code image for a part instance in an HTML template using the part's barcode attribute and the qrcode template tag.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/barcodes/internal.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<img src='{% qrcode part.barcode %}'>\n```\n\n----------------------------------------\n\nTITLE: Rendering 1D Barcode Image in Django Template\nDESCRIPTION: Shows how to use the barcode template tag to generate and display a 1D barcode image within a Django template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/barcodes.md#2025-04-22_snippet_1\n\nLANGUAGE: django\nCODE:\n```\n{% raw %}\n{% load barcode %}\n<img class='custom_class' src='{% barcode \"12345678\" %}'>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Rendering Image in Markdown with Custom Template for Barcode Settings\nDESCRIPTION: This snippet demonstrates how to include an image for the Barcode Settings section using the custom template, with specific parameters for this section.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/settings.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"barcode_settings\", url=\"app/barcode_settings.png\", maxheight=\"240px\", description=\"Barcode Settings\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Template Include Image with Parameters\nDESCRIPTION: A Jekyll/Liquid template snippet that includes an image with specified parameters including ID, URL, maximum height, and description.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/navigation.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"home\", url=\"app/home.png\", maxheight=\"240px\", description=\"Home screen\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Loading Build Order Report Template\nDESCRIPTION: Template include statement for the build order report template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"report/inventree_build_order_report.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with SHA256 Verification\nDESCRIPTION: Detailed package requirements listing with version numbers and SHA256 hashes for package verification. Includes package dependencies like setuptools, sqlparse, tomli, typing-extensions, virtualenv, wheel, and zipp with their corresponding version constraints and hash values.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements-dev.txt#2025-04-22_snippet_1\n\nLANGUAGE: text\nCODE:\n```\n--hash=sha256:8b9c7197f7cb2738065c481a0461e50ad02f18c78cd75775628afb4d7137fb3b \\\n--hash=sha256:9056c1ecd25795207ad294bcf39f2db3d845767be0ea6e6a34d856f006006083 \\\n--hash=sha256:936d68689298c36b53b29f23c6dbb74de12b4ac12ca6cfe0e047bedceea56180\n```\n\n----------------------------------------\n\nTITLE: Displaying Image in Markdown (Web Interface)\nDESCRIPTION: This snippet shows how to include an image in a Markdown document using a custom template, specifically for the web interface plugin installation section.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/install.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"plugin_install\", url=\"plugin/plugin_install_web.png\", description=\"Install via web interface\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Using Multi-Stage Builds for Development Packages in Docker\nDESCRIPTION: This snippet describes a multi-stage Dockerfile that installs build dependencies in a prebuild stage and then copies necessary files to the production image. The process ensures that the alpine and python versions match the base image requirements.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_11\n\nLANGUAGE: dockerfile\nCODE:\n```\nARG INVENTREE_TAG\n\n# prebuild stage - needs a lot of build dependencies\n# make sure, the alpine and python version matches the version used in the inventree base image\nFROM python:3.11-alpine3.18 as prebuild\n\n# Install whatever development dependency is needed (e.g. cups-dev, gcc, the musl-dev build tools and the pip pycups package)\nRUN apk add --no-cache cups-dev gcc musl-dev && \\\n    pip install --user --no-cache-dir pycups\n\n# production image - only install the cups shared library\nFROM inventree/inventree:${INVENTREE_TAG} as production\n\n# Install e.g. shared library later available in the final image\nRUN apk add --no-cache cups-libs\n\n# Copy the pip wheels from the build stage in the production stage\nCOPY --from=prebuild /root/.local /root/.local\n```\n\n----------------------------------------\n\nTITLE: Loading Test Report Template\nDESCRIPTION: Template include statement for the test report template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_7\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"report/inventree_test_report.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Email Template with Dynamic Placeholders\nDESCRIPTION: Email template using Jinja2-style placeholders to dynamically insert user-specific information like username, login link, and site name\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/InvenTree/InvenTree/templates/InvenTree/user_simple_login.txt#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\nHello {{username}},\n\nYou requested that we send you a link to log in to our app:\n\n    {{link}}\n\nRegards,\n{{site_name}}\n```\n\n----------------------------------------\n\nTITLE: Customizing 1D Barcode Parameters in Django Template\nDESCRIPTION: Shows how to pass additional parameters to customize the appearance of a 1D barcode in a Django template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/barcodes.md#2025-04-22_snippet_3\n\nLANGUAGE: django\nCODE:\n```\n{% raw %}\n\n{% load barcode %}\n\n<img class='barcode' src='{% barcode part.IPN barcode_class=\"Code128\" write_text=0 background=\"red\" %}'>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Displaying Image in Markdown\nDESCRIPTION: This snippet demonstrates how to include an image in a Markdown document using a custom template. It uses variables for the image ID, URL, and description.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/install.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"check_plugins\", url=\"plugin/check_on_startup.png\", description=\"Check plugins on startup\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Adding Admonition Blocks in Markdown for InvenTree Docs\nDESCRIPTION: Example of how to add an admonition block in Markdown for the InvenTree documentation, with a title and content.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/README.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n!!! info \"This is the admonition block title\"\n    This is the admonition block content\n```\n\n----------------------------------------\n\nTITLE: Displaying Image Template in Markdown\nDESCRIPTION: Template code for displaying sales order related images using a custom include directive. Used multiple times to show different aspects of the sales order interface.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/so.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"so_list\", url=\"app/so_list.png\", maxheight=\"240px\", description=\"Sales order list\" %}\n{% include \"img.html\" %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Manufacturers Template Include\nDESCRIPTION: Template code for including manufacturers and suppliers image in the documentation using a custom include directive.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/part/views.md#2025-04-22_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"part_manufacturers_suppliers\", url=\"part/part_manufacturers_suppliers.png\", description=\"Part Suppliers and Manufacturers\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Creating a Panel in InvenTree Plugin Template (HTML)\nDESCRIPTION: This HTML snippet demonstrates how to create a panel in an InvenTree plugin template. It shows the structure of a panel with a heading and content area.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/urls.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<div class='panel panel-hidden' id='panel-loans'>\n    <div class='panel-heading'>\n        <div class='d-flex flex-wrap'>\n            <h4>{% trans \"Loaning Information\" %}</h4>\n        </div>\n    </div>\n    <div class='panel-content'>\n        ...\n    </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Loading Sales Order Shipment Report Template\nDESCRIPTION: Template include statement for the sales order shipment report template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"report/inventree_sales_order_shipment_report.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Package Dependency Specification for InvenTree Backend\nDESCRIPTION: This snippet shows how package dependencies are specified with exact versions and hash values. It includes packages like sentry-sdk, setuptools, and various other libraries required for the InvenTree backend.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements.txt#2025-04-22_snippet_6\n\nLANGUAGE: Text\nCODE:\n```\nsentry-sdk==2.26.1 \\\n    --hash=sha256:759e019c41551a21519a95e6cef6d91fb4af1054761923dadaee2e6eca9c02c7 \\\n    --hash=sha256:e99390e3f217d13ddcbaeaed08789f1ca614d663b345b9da42e35ad6b60d696a\n    # via\n    #   -r src/backend/requirements.in\n    #   django-q-sentry\nsetuptools==78.1.0 \\\n    --hash=sha256:18fd474d4a82a5f83dac888df697af65afa82dec7323d09c3e37d1f14288da54 \\\n    --hash=sha256:3e386e96793c8702ae83d17b853fb93d3e09ef82ec62722e61da5cd22376dcd8\n    # via\n    #   -r src/backend/requirements.in\n    #   django-money\n```\n\n----------------------------------------\n\nTITLE: Rendering Image in Markdown with Custom Template for App Settings\nDESCRIPTION: This snippet shows how to include an image for the App Settings section using the same custom template as before, with different parameters.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/settings.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"app_settings\", url=\"app/app_settings.png\", maxheight=\"240px\", description=\"App Settings\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Stock View Template Include\nDESCRIPTION: Template code for including part stock image in the documentation using a custom include directive.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/part/views.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"part_stock\", url=\"part/part_stock.png\", description=\"Part Stock\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: POST Request Format for Barcode Scanning in InvenTree\nDESCRIPTION: Demonstrates the JSON structure for POSTing barcode data to the InvenTree server for processing by barcode plugins.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/barcode.md#2025-04-22_snippet_0\n\nLANGUAGE: json\nCODE:\n```\nPOST {\n    barcode_data: \"[(>someBarcodeDataWhichThePluginKnowsHowToDealWith\"\n}\n```\n\n----------------------------------------\n\nTITLE: Loading Bill of Materials Report Template\nDESCRIPTION: Template include statement for the bill of materials report template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"report/inventree_bill_of_materials_report.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Package Hash Declarations\nDESCRIPTION: SHA-256 hash declarations for package dependencies including click v8.1.8 and coverage v7.8.0. Used for package verification and security.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements-dev.txt#2025-04-22_snippet_0\n\nLANGUAGE: text\nCODE:\n```\n--hash=sha256:63c132bbbed01578a06712a2d1f497bb62d9c1c0d329b7903a866228027263b2 \\\n--hash=sha256:ed53c9d8990d83c2a27deae68e4ee337473f6330c040a31d4225c9574d16096a\n```\n\n----------------------------------------\n\nTITLE: Stock Options HTML Template Tag Snippet\nDESCRIPTION: Django template tag for rendering stock options image with predefined attributes\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/stock/adjust.md#2025-04-22_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n{% with id=\"stock_options\", url=\"stock/stock_options.png\", description=\"Stock Options\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: MkDocs Package Dependencies with Hash Verification in Bash/Shell Format\nDESCRIPTION: A requirements file listing Python packages with their exact versions and SHA256 hash verification. This ensures reproducible builds for the InvenTree documentation system using MkDocs and various plugins.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/requirements.txt#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n    --hash=sha256:4b5b6235a4becb2b10425c2fa191737e415b37aa3418919db33e5d774c9db079 \\\n    --hash=sha256:9793c5ac06a6ebbe52ec0f8439256e66187badf4b5334b5fde0b128ec134df4f\n    # via\n    #   mkdocstrings\n    #   mkdocstrings-python\nmkdocs-get-deps==0.2.0 \\\n    --hash=sha256:162b3d129c7fad9b19abfdcb9c1458a651628e4b1dea628ac68790fb3061c60c \\\n    --hash=sha256:2bf11d0b133e77a0dd036abeeb06dec8775e46efa526dc70667d8863eefc6134\n    # via mkdocs\nmkdocs-git-revision-date-localized-plugin==1.4.5 \\\n    --hash=sha256:395ae0b9eec565c78a76fffc938b70f52774bf2971245482d31aba47018c5fa9 \\\n    --hash=sha256:9e37f1343d314c9cd8f9cbbf117c4bdc1d2d24a0653c5bbd7059d072f2cd0972\n    # via -r docs/requirements.in\n```\n\n----------------------------------------\n\nTITLE: Markdown Release Version Table\nDESCRIPTION: Bug fix table showing pull request numbers and descriptions.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/releases/0.7.0.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n| Pull Request | Description |\n| --- | --- |\n| [#2869](https://github.com/inventree/InvenTree/pull/2869) | Fixes Part API bug |\n```\n\n----------------------------------------\n\nTITLE: Autogenerated UV Dependency File Header\nDESCRIPTION: Comments indicating the file was automatically generated by the UV tool, suggesting a programmatically created dependency specification\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n```\n\n----------------------------------------\n\nTITLE: Loading Stock Location Report Template\nDESCRIPTION: Template include statement for the stock location report template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_6\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"report/inventree_stock_location_report.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Triggering Generic Object Deleted Event in Python\nDESCRIPTION: Illustrates how a generic 'object deleted' event is triggered when a Part object is deleted from the database. The event includes the model class and the primary key of the deleted object if available.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/event.md#2025-04-22_snippet_2\n\nLANGUAGE: python\nCODE:\n```\ntrigger_event('part_part.deleted', model='part', id=123)\n```\n\n----------------------------------------\n\nTITLE: Generating API Schema Command\nDESCRIPTION: Command to generate the API schema file with help options\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/api/index.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ninvoke dev.schema -help\n```\n\n----------------------------------------\n\nTITLE: Template Inclusion for Carousel in Markdown\nDESCRIPTION: This snippet demonstrates the use of template directives to include a carousel component in the markdown documentation. It sets the 'directory' parameter to 'indexgallery' and limits the display to one item per page.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/index.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% with directory=\"indexgallery\", per_page=1 %}\n{% include \"carousel.html\" %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Autogeneration Command Placeholder in Bash\nDESCRIPTION: This commented line indicates that the file was automatically generated by a tool called 'uv'. It appears to be a reference to the command that was used to generate the requirements file, though the actual command is not shown.\nSOURCE: https://github.com/inventree/inventree/blob/master/contrib/container/requirements.txt#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# This file was autogenerated by uv via the following command:\n```\n\n----------------------------------------\n\nTITLE: Loading Build Line Label Template\nDESCRIPTION: Template include statement for the build line label template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"label/buildline_label.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Loading Uploaded Images in HTML Template\nDESCRIPTION: Shows how to use the uploaded_image tag to include and manipulate uploaded image files in a report template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_11\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<!-- Load the report helper functions -->\n{% load report %}\n<img src='{% uploaded_image \"subdir/my_image.png\" width=480 rotate=45 %}'/>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: User Settings Table Generation Macro\nDESCRIPTION: Macro for generating user settings tables with configuration details like name, description, default value, and units\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/settings/user.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{{ usersetting(\"SETTING_NAME\") }}\n```\n\n----------------------------------------\n\nTITLE: Encoding SVG Images in HTML Template\nDESCRIPTION: Demonstrates how to use the encode_svg_image tag to embed uploaded SVG images in a report template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_12\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n<!-- Load the report helper functions -->\n{% load report %}\n<img src='{% encode_svg_image svg_image_file %}'/>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Currency Rendering in HTML Template\nDESCRIPTION: Demonstrates the use of render_currency function to format and convert currency values in a report template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_8\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n\n<em>Line Item Unit Pricing:</em>\n<ul>\n{% for line in order.lines %}\n<li>{% render_currency line.price currency=order.supplier.currency %}</li>\n{% endfor %}\n</ul>\n\nTotal Price: {% render_currency order.total_price currency='NZD' decimal_places=2 %}\n\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Filtering QuerySet in HTML Template\nDESCRIPTION: Demonstrates the use of filter_queryset function to filter a Django queryset within a report template.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/helpers.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load report %}\n\n{% filter_queryset order.lines.all received__gt=0 as received_lines %}\n\n<ul>\n  {% for line in received_lines %}\n  <li>{{ line.part.part.full_name }} - {{ line.received }} / {{ line.quantity }}</li>\n    {% endfor %}\n</ul>\n\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Updating InvenTree Database in Docker Environment\nDESCRIPTION: This command ensures that the InvenTree database is updated to match the latest version of the software.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm inventree-server invoke update\n```\n\n----------------------------------------\n\nTITLE: Installing Demo Dataset for InvenTree Docker Installation\nDESCRIPTION: This command installs the InvenTree demo dataset into the Docker instance, providing a quick start with sample data.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/docker_install.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ndocker compose run --rm inventree-server invoke dev.setup-test -i\n```\n\n----------------------------------------\n\nTITLE: Setting PostgreSQL User Permissions for Testing\nDESCRIPTION: SQL command to grant database creation permissions to a PostgreSQL user, which is necessary for running Django tests that create test databases.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/contributing.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nalter user myuser createdb;\n```\n\n----------------------------------------\n\nTITLE: Handling Localization in WeasyPrint Templates\nDESCRIPTION: Shows how to use the 'localize off' tag to prevent localization issues when setting custom page sizes or other numeric values in WeasyPrint templates.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/weasyprint.md#2025-04-22_snippet_3\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% load l10n %}\n<head>\n    <style>\n        @page {\n            {% localize off %}\n            size: {{ width }}mm {{ height }}mm;\n            {% endlocalize %}\n            margin: 0mm;\n        }\n    </style>\n</head>\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Iterating Over Lists in Django Templates\nDESCRIPTION: Shows how to use a for loop in Django templates to iterate over a list of items and display each item.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/weasyprint.md#2025-04-22_snippet_1\n\nLANGUAGE: html\nCODE:\n```\n{% raw %}\n{% for <item> in <list> %}\nItem: {{ item }}\n{% endfor %}\n{% endraw %}\n```\n\n----------------------------------------\n\nTITLE: Clearing Demo Data from InvenTree Instance\nDESCRIPTION: This command removes all demo data from an InvenTree instance to provide a clean database. It uses invoke to run the dev.delete-data task. Warning: this will delete all existing data including user-added content.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/demo.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ninvoke dev.delete-data\n```\n\n----------------------------------------\n\nTITLE: Running InvenTree Development Server on Local Network\nDESCRIPTION: Command to start the InvenTree development server on a local network, making it accessible from other computers. This example uses the IP address 192.168.120.1 and port 8000.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/start/bare_dev.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n(env) invoke dev.server -a 192.168.120.1:8000\n```\n\n----------------------------------------\n\nTITLE: MySupplier Price Formatting Class\nDESCRIPTION: Example plugin class with a price reformatting method\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/test.md#2025-04-22_snippet_1\n\nLANGUAGE: python\nCODE:\n```\nclass MySupplier():\n\n    def reformat_price(self, string_price):\n\n        ...\n        return float_price\n```\n\n----------------------------------------\n\nTITLE: Installing Plugin as Editable Package\nDESCRIPTION: Command to install an InvenTree plugin as an editable package in development mode, allowing changes to be immediately reflected without reinstallation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/develop/devcontainer.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\npip install -e /workspaces/inventree-plugin\n```\n\n----------------------------------------\n\nTITLE: Inserting Images in InvenTree Documentation using HTML Templates\nDESCRIPTION: Shows how to insert images in the InvenTree documentation using a custom HTML template with variables for image ID, URL, and description.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/README.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"image_id\", url=\"folder/image_name.png\", description=\"Text shown if image is not loaded properly\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Stock Row Snippet Template\nDESCRIPTION: Example of a reusable snippet template that renders individual rows in a stock table showing part name and quantity.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/index.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- stock_row snippet -->\n<tr>\n  <td>{{ item.part.full_name }}</td>\n  <td>{{ item.quantity }}</td>\n</tr>\n```\n\n----------------------------------------\n\nTITLE: Implementing get_ui_template_previews Method in UserInterfaceMixin\nDESCRIPTION: This method returns a list of custom template previews for InvenTree. It should be overridden to provide custom template preview functionality.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/plugins/mixins/ui.md#2025-04-22_snippet_7\n\nLANGUAGE: python\nCODE:\n```\ndef get_ui_template_previews(self, context: dict = None) -> List[UIFeature]:\n    \"\"\"Return a list of custom template previews for this plugin.\"\"\"\n    return []\n```\n\n----------------------------------------\n\nTITLE: Package Hash Verification Configuration\nDESCRIPTION: List of Python package dependencies with their versions and corresponding SHA256 hashes for security verification. Includes packages like gunicorn, icalendar, idna, and various other dependencies with specific version pins.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements.txt#2025-04-22_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\n--hash=sha256:879a61bf52ff8ccacbedf534665bb5478ec8e86ad483e76fe4f729aaef867cab \\\n--hash=sha256:880bfb43b1bb8905701b926274eafce5c70a105bc6b99e25f62e98ad59cb278e \\\n--hash=sha256:8d1584a68d5922330025881e63a6c1b54cc8117291d382e4fa69339b6d914c56 \\\n# via\n#   -r src/backend/requirements.in\n#   opentelemetry-exporter-otlp-proto-grpc\ngunicorn==23.0.0 \\\n--hash=sha256:ec400d38950de4dfd418cff8328b2c8faed0edb0d517d3394e457c317908ca4d \\\n--hash=sha256:f014447a0101dc57e294f6c18ca6b40227a4c90e9bdb586042628030cba004ec\n# via -r src/backend/requirements.in\n```\n\n----------------------------------------\n\nTITLE: Related Parts Template Include\nDESCRIPTION: Template code for including related parts image in the documentation using a custom include directive.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/part/views.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"related_parts\", url=\"part/part_related.png\", description=\"Related Parts Example View\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Setting up InvenTree Documentation Environment in Bash\nDESCRIPTION: Commands to clone the InvenTree repository and install required dependencies for the documentation.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n$ git clone https://github.com/inventree/inventree\n$ pip install --require-hashes -r docs/requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Part View Template Include\nDESCRIPTION: Template code for including part overview image in the documentation using a custom include directive.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/part/views.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"part_overview\", url=\"part/part_overview.png\", description=\"Part details\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Specifying Python dependencies with hash verification\nDESCRIPTION: This snippet shows how Python dependencies are defined with exact version constraints and SHA256 hash verification. The format includes the package name, version, hash values, and comment lines indicating which package requires this dependency.\nSOURCE: https://github.com/inventree/inventree/blob/master/src/backend/requirements.txt#2025-04-22_snippet_7\n\nLANGUAGE: text\nCODE:\n```\nwhitenoise==6.9.0 \\\n    --hash=sha256:8c4a7c9d384694990c26f3047e118c691557481d624f069b7f7752a2f735d609 \\\n    --hash=sha256:c8a489049b7ee9889617bb4c274a153f3d979e8f51d2efd0f5b403caf41c57df\n    # via -r src/backend/requirements.in\n```\n\n----------------------------------------\n\nTITLE: Python Package Requirements with Hash Verification\nDESCRIPTION: Detailed package requirements file specifying exact versions and hash verification for Python dependencies including Django, database adapters, and authentication packages. Each package includes SHA256 hashes for verification and lists its dependent packages.\nSOURCE: https://github.com/inventree/inventree/blob/master/contrib/container/requirements.txt#2025-04-22_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\n#    uv pip compile contrib/container/requirements.in -o contrib/container/requirements.txt --python-version=3.11 --no-strip-extras --generate-hashes\nasgiref==3.8.1 \\\n    --hash=sha256:3e1e3ecc849832fe52ccf2cb6686b7a55f82bb1d6aee72a58826471390335e47 \\\n    --hash=sha256:c343bd80a0bec947a9860adb4c432ffa7db769836c64238fc34bdc3fec84d590\n    # via django\ndjango==4.2.20 \\\n    --hash=sha256:213381b6e4405f5c8703fffc29cd719efdf189dec60c67c04f76272b3dc845b9 \\\n    --hash=sha256:92bac5b4432a64532abb73b2ac27203f485e40225d2640a7fbef2b62b876e789\n    # via\n    #   -r contrib/container/requirements.in\n    #   django-auth-ldap\n```\n\n----------------------------------------\n\nTITLE: Rendering Image in Markdown with Custom Template for Home Screen Settings\nDESCRIPTION: This snippet shows how to include an image for the Home Screen Settings section using the custom template, with parameters specific to this section.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/settings.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"home_settings\", url=\"app/home_settings.png\", maxheight=\"240px\", description=\"Home Screen Settings\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Template Include Image for Context Actions\nDESCRIPTION: A template snippet for including an image showing context-specific actions with specified parameters.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/navigation.md#2025-04-22_snippet_4\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"drawer\", url=\"app/context_actions.png\", maxheight=\"240px\", description=\"Context actions\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Template Include Image for App Tabs\nDESCRIPTION: A template snippet for including an image showing the app's tab interface with specified parameters.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/app/navigation.md#2025-04-22_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n{% with id=\"global_nav\", url=\"app/app_tabs.png\", maxheight=\"240px\", description=\"App tabs\" %}\n{% include 'img.html' %}\n{% endwith %}\n```\n\n----------------------------------------\n\nTITLE: Loading Sales Order Report Template\nDESCRIPTION: Template include statement for the sales order report template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_4\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"report/inventree_sales_order_report.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Loading Part Label Template\nDESCRIPTION: Template include statement for the part label template file with Code128 barcode\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_9\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"label/part_label_code128.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Loading Purchase Order Report Template\nDESCRIPTION: Template include statement for the purchase order report template file\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/docs/report/samples.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n{{ templatefile(\"report/inventree_purchase_order_report.html\") }}\n```\n\n----------------------------------------\n\nTITLE: Creating Internal Links in Markdown for InvenTree Docs\nDESCRIPTION: Demonstrates the correct way to create internal links in the InvenTree documentation using relative paths and .md suffixes.\nSOURCE: https://github.com/inventree/inventree/blob/master/docs/README.md#2025-04-22_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\nClick [here](../part/views.md)\n```\n\n----------------------------------------\n\nTITLE: Email Contact for Security Vulnerability Reporting\nDESCRIPTION: The email address to be used for reporting security vulnerabilities to the InvenTree team. This is the official contact point for responsible disclosure of security issues.\nSOURCE: https://github.com/inventree/inventree/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nsecurity@inventree.org\n```"
  }
]