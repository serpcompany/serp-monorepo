[
  {
    "owner": "opentensor",
    "repo": "subtensor",
    "content": "TITLE: Implementing Subtensor Epoch Consensus Calculation in Rust\nDESCRIPTION: This snippet shows how Subtensor blockchain nodes calculate consensus and rewards during each subnet epoch. It implements the mathematical formulas for weights, ranks, trust, bonds, and dividends that are essential to the Yuma Consensus mechanism.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/consensus.md#2025-04-22_snippet_4\n\nLANGUAGE: rust\nCODE:\n```\nlet mut weights: Vec<Vec<I32F32>> = Self::get_weights( netuid );  // Weight\nlet preranks: Vec<I32F32> = matmul( &weights, &active_stake );  // Server prerank\nlet consensus: Vec<I32F32> = weighted_median_col( &active_stake, &weights, kappa );  // Server consensus weight\ninplace_col_clip( &mut weights, &consensus );  // Consensus-clipped weight\nlet mut ranks: Vec<I32F32> = matmul( &weights, &active_stake );  // Server rank\nlet trust: Vec<I32F32> = vecdiv( &ranks, &preranks );  // Server trust\nlet validator_trust: Vec<I32F32> = row_sum( &weights );  // Validator trust\nlet incentive: Vec<I32F32> = inplace_normalize( &mut ranks );   // Server incentive\nlet mut bonds_delta: Vec<Vec<I32F32>> = inplace_col_normalize(row_hadamard( &weights, &active_stake ));  // Validator bond\nlet mut ema_bonds: Vec<Vec<I32F32>> = mat_ema( &bonds_delta, &bonds, alpha );  // Validator EMA bond\nlet mut dividends: Vec<I32F32> = inplace_normalize(matmul_transpose( &ema_bonds, &incentive ));  // Validator reward\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Subtensor Settings in Rust\nDESCRIPTION: Global settings that apply across all Subtensor networks. Includes DefaultTake for honest number percentage (18%) and TxRateLimit to control transaction frequency.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/hyperparameters.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nDefaultTake: u16 = 11_796; // 18% honest number.\nTxRateLimit: u64 = 1; // [1 @ 64,888]\n```\n\n----------------------------------------\n\nTITLE: Configuring netuid 1 (text_prompting) Network Parameters in Rust\nDESCRIPTION: Configuration parameters specific to the text_prompting subnet (netuid 1). Includes parameters for consensus, emission, validation, difficulty, and network constraints. Controls network behavior for text-based prompting services.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/hyperparameters.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nRho: u16 = 10;\nKappa: u16 = 32_767; // 0.5 = 65535/2\nMaxAllowedUids: u16 = 1024;\nIssuance: u64 = 0;\nMinAllowedWeights: u16 = 8;\nEmissionValue: u64 = 142_223_000;\nMaxWeightsLimit: 455; // 455/2^16 = 0.0069\nValidatorBatchSize: u16 = 1;\nValidatorSequenceLen: u16 = 2048; // 2048\nValidatorEpochLen: u16 = 100;\nValidatorEpochsPerReset: u16 = 60;\nValidatorExcludeQuantile: u16 = 0; // 0% of u16\nValidatorPruneLen: u64 = 1;\nValidatorLogitsDivergence: u16 = 1310; // 2% of u16\nScalingLawPower: u16 = 50; // 0.5\nSynergyScalingLawPower: u16 = 50; // 0.5\nMaxAllowedValidators: u16 = 128;\nTempo: u16 = 99;\nDifficulty: u64 = 10_000_000;\nAdjustmentInterval: u16 = 225;\nTargetRegistrationsPerInterval: u16 = 2;\nImmunityPeriod: u16 = 7200;\nActivityCutoff: u16 = 5000;\nMaxRegistrationsPerBlock: u16 = 1;\nPruningScore : u16 = u16::MAX;\nBondsMovingAverage: u64 = 900_000;\nBondsPenalty: u16 = 0;\nWeightsVersionKey: u64 = 1020;\nMinDifficulty: u64 = 10_000_000;\nMaxDifficulty: u64 = u64::MAX / 4;\nServingRateLimit: u64 = 10;\nBurn: u64 = 1_000_000_000; // 1 tao\nMinBurn: u64 = 1_000_000_000; // 1 tao\nMaxBurn: u64 = 100_000_000_000; // 100 tao\nWeightsSetRateLimit: u64 = 100;\n```\n\n----------------------------------------\n\nTITLE: Configuring netuid 3 (causallmnext) Network Parameters in Rust\nDESCRIPTION: Configuration parameters specific to the causallmnext subnet (netuid 3). Defines network behavior for causal language models with different emission rates, validation settings, and much higher difficulty and burn requirements compared to the text_prompting subnet.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/hyperparameters.md#2025-04-22_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nRho: u16 = 10;\nKappa: u16 = 32_767; // 0.5 = 65535/2\nMaxAllowedUids: u16 = 4096;\nIssuance: u64 = 0;\nMinAllowedWeights: u16 = 50;\nEmissionValue: u64 = 857_777_000;\nMaxWeightsLimit: u16 = 655; // 655/2^16 = 0.01 [655 @ 7,160]\nValidatorBatchSize: u16 = 32; // 32\nValidatorSequenceLen: u16 = 256; // 256\nValidatorEpochLen: u16 = 250; // [250 @ 7,161]\nValidatorEpochsPerReset: u16 = 60;\nValidatorExcludeQuantile: u16 = 3277; // 5% of u16 [3277 @ 65,065]\nValidatorPruneLen: u64 = 1;\nValidatorLogitsDivergence: u16 = 1310; // 2% of u16\nScalingLawPower: u16 = 50; // 0.5\nSynergyScalingLawPower: u16 = 50; // 0.5\nMaxAllowedValidators: u16 = 128;\nTempo: u16 = 99;\nDifficulty: u64 = 671_088_640_000_000; // Same as nakamoto at block = 3606775 [671T @ 26,310]\nAdjustmentInterval: u16 = 100;\nTargetRegistrationsPerInterval: u16 = 2;\nImmunityPeriod: u16 = 4096;\nActivityCutoff: u16 = 5000; // [5000 @ 7,163]\nMaxRegistrationsPerBlock: u16 = 1;\nPruningScore : u16 = u16::MAX;\nBondsMovingAverage: u64 = 900_000;\nBondsPenalty: u16 = 0;\nWeightsVersionKey: u64 = 400;\nMinDifficulty: u64 = 10_000_000;\nMaxDifficulty: u64 = u64::MAX / 4;\nServingRateLimit: u64 = 250; // [250 @ 7,166]\nBurn: u64 = 100_000_000_000; // 100 tao [100 tao @ 26,310]\nMinBurn: u64 = 1_000_000_000; // 1 tao [1 tao @ 26,310]\nMaxBurn: u64 = 21_000_000_000_000_000; // 21M tao [21M tao @ 26,310]\nWeightsSetRateLimit: u64 = 250; // [250 @ 7,168]\n```\n\n----------------------------------------\n\nTITLE: Calculating Maximum Weight Supported by κ-majority Stake in Yuma Consensus\nDESCRIPTION: Formula for determining the maximum weight supported by κ-majority stake in the Yuma Consensus mechanism. This stake-based median calculation finds the weight level supported by at least κ stake, which protects against manipulation by minority cabals.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/consensus.md#2025-04-22_snippet_0\n\nLANGUAGE: latex\nCODE:\n```\n\\overline{W_j}=\\arg \\max_w \\left( \\sum_i S_i \\cdot \\left\\lbrace W_{ij} \\ge w \\right\\rbrace \\ge \\kappa \\right)\n```\n\n----------------------------------------\n\nTITLE: Weight Correction Formula for Yuma Consensus\nDESCRIPTION: Formula for applying weight correction in Yuma Consensus. It restricts server incentives in case of selfish weighting and penalizes selfish validators by slashing their voting stake and validation rewards using a bonds penalty factor β.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/consensus.md#2025-04-22_snippet_1\n\nLANGUAGE: latex\nCODE:\n```\n\\widetilde{W_{ij}} = (1-\\beta) \\cdot W_{ij} + \\beta \\cdot \\overline{W_{ij}}\n```\n\n----------------------------------------\n\nTITLE: Managing Single-Node Development Chain\nDESCRIPTION: Commands for starting, purging, and debugging a single-node development chain with non-persistent state. These commands are useful for testing and development purposes.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/subtensor --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\n./target/release/subtensor purge-chain --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\nRUST_BACKTRACE=1 ./target/release/subtensor-ldebug --dev\n```\n\n----------------------------------------\n\nTITLE: Setting Up Persistent Chain State\nDESCRIPTION: Commands for maintaining chain state between runs by specifying a base path. This creates a folder structure to store the chain database, allowing state persistence across multiple runs.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/README.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Create a folder to use as the db base path\nmkdir my-chain-state\n\n# Use of that folder to store the chain state\n./target/release/node-template --dev --base-path ./my-chain-state/\n\n# Check the folder structure created inside the base path after running the chain\nls ./my-chain-state\n#> chains\nls ./my-chain-state/chains/\n#> dev\nls ./my-chain-state/chains/dev\n#> db keystore network\n```\n\n----------------------------------------\n\nTITLE: Querying Account Balance using Substrate Interface in Python\nDESCRIPTION: Python script to verify the local Subtensor node connection by checking the balance of the Alice account (sudo account in localnet) using the substrate-interface library.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/running-subtensor-locally.md#2025-04-22_snippet_0\n\nLANGUAGE: python\nCODE:\n```\n# pip install substrate-interface\nfrom substrateinterface import Keypair, SubstrateInterface\n\nsubstrate = SubstrateInterface(url=\"ws://127.0.0.1:9945\")\nhotkey = Keypair.create_from_uri('//Alice')\nresult = substrate.query(\"System\", \"Account\", [hotkey.ss58_address])\nprint(result.value)\n```\n\n----------------------------------------\n\nTITLE: Fetching Randomness in Pallet\nDESCRIPTION: Example of how to fetch the latest round randomness within a pallet implementation using the configured Randomness trait.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/pallets/drand/README.md#2025-04-22_snippet_1\n\nLANGUAGE: rust\nCODE:\n```\nlet latest_randomness = T::Randomness::random(b\"ctx\");\n```\n\n----------------------------------------\n\nTITLE: Cabal Objective Function in Game-Theoretic Framework\nDESCRIPTION: Formula representing the cabal's objective to maximize the required honest self-weight expense. This captures how adversarial actors try to manipulate the system to force honest participants to spend more resources to maintain their emission share.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/consensus.md#2025-04-22_snippet_2\n\nLANGUAGE: latex\nCODE:\n```\nW_C^*=\\arg\\max_{W_C}E[W_H\\ | \\ S_H=E_H(S_H,W_H,W_C)].\n```\n\n----------------------------------------\n\nTITLE: Importing Utility Module Config and Call in Rust\nDESCRIPTION: This code snippet shows how to import the Config trait and Call enum from the pallet-utility crate. These are core components of the Utility Module used for configuration and function calls.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/pallets/utility/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\n- [`utility::Config`](https://docs.rs/pallet-utility/latest/pallet_utility/pallet/trait.Config.html)\n- [`Call`](https://docs.rs/pallet-utility/latest/pallet_utility/pallet/enum.Call.html)\n```\n\n----------------------------------------\n\nTITLE: Building and Running Subtensor Node in Development Mode\nDESCRIPTION: Commands for building and running a Subtensor node in development mode using Cargo, Rust's package manager. The first command builds and launches the node, while the second only builds without launching.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncargo run --release -- --dev\n```\n\nLANGUAGE: bash\nCODE:\n```\ncargo build --release\n```\n\n----------------------------------------\n\nTITLE: Running Debug Tests with Logging\nDESCRIPTION: Commands for running tests with detailed logging enabled. The first command skips WASM build and enables runtime debug logging, while the second allows running individual named tests.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nSKIP_WASM_BUILD=1 RUST_LOG=runtime=debug -- --nocapture\n```\n\nLANGUAGE: bash\nCODE:\n```\nSKIP_WASM_BUILD=1 \\\n  RUST_LOG=runtime=debug \\\n  cargo test <your test name> \\\n  -- --nocapture --color always\n```\n\n----------------------------------------\n\nTITLE: Implementing Randomness Trait in Runtime\nDESCRIPTION: Configuration example showing how to implement the Randomness trait for a runtime using the Drand pallet.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/pallets/drand/README.md#2025-04-22_snippet_0\n\nLANGUAGE: rust\nCODE:\n```\nimpl pallet_with_randomness for Runtime {\n    type Randomness = Drand;\n}\n```\n\n----------------------------------------\n\nTITLE: Consensus Policy Nash Equilibrium Optimization\nDESCRIPTION: Formula for the Nash equilibrium that the honest majority tries to optimize with their consensus policy. It shows how the consensus mechanism aims to minimize the maximum expense required from honest participants while ensuring they maintain their emission share.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/consensus.md#2025-04-22_snippet_3\n\nLANGUAGE: latex\nCODE:\n```\n\\min_{\\pi}\\max_{W_C}E[W_H\\ | \\ S_H=E_H(S_H,\\pi(\\mathbf{W}))].\n```\n\n----------------------------------------\n\nTITLE: Executing CLI Help Command for Subtensor Node\nDESCRIPTION: This command displays the help documentation for the Subtensor node, showing its capabilities and configuration parameters. It should be run after the node has been built.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/README.md#2025-04-22_snippet_7\n\nLANGUAGE: shell\nCODE:\n```\n./target/release/node-subtensor --help\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Ubuntu/Debian\nDESCRIPTION: Commands to install required system packages for Substrate development on Ubuntu/Debian systems\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/rust-setup.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nsudo apt update\n# May prompt for location information\nsudo apt install -y git clang curl libssl-dev llvm libudev-dev make pkg-config protobuf-compiler\n```\n\n----------------------------------------\n\nTITLE: Running Package-Specific Tests\nDESCRIPTION: Command example for running tests from a specific package and test file with debug logging. This is useful when developing and debugging specific components of the subtensor project.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/README.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nskip_wasm_build=1 \\\n  rust_log=runtime=debug \\\n  cargo test \\\n  --package node-subtensor \\\n  --test chain_spec \\\n  -- --color always --nocapture\n```\n\n----------------------------------------\n\nTITLE: Running All Tests\nDESCRIPTION: Yarn command to execute all test cases in the project.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/evm-tests/README.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Rust\nDESCRIPTION: Commands to install Rust and configure the environment for Substrate development\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/rust-setup.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# Install\ncurl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh\n# Configure\nsource ~/.cargo/env\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Toolchain\nDESCRIPTION: Commands to configure Rust toolchain with stable and nightly versions for Substrate development\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/rust-setup.md#2025-04-22_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nrustup default stable\nrustup update\nrustup update nightly\nrustup target add wasm32-unknown-unknown --toolchain nightly\n```\n\n----------------------------------------\n\nTITLE: Running Consensus Guarantee Tests with Rust\nDESCRIPTION: This command runs Monte Carlo simulations to test consensus guarantees in the Subtensor blockchain under adversarial conditions. It uses the _map_consensus_guarantees function to generate retention profiles and verify the implementation's robustness.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/consensus.md#2025-04-22_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nRUST_BACKTRACE=1 SKIP_WASM_BUILD=1 cargo test -- _map_consensus_guarantees --exact --nocapture > consensus.txt\n```\n\n----------------------------------------\n\nTITLE: Running Specific Test Case\nDESCRIPTION: Yarn command demonstrating how to run a specific test case by passing a grep pattern argument.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/evm-tests/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn run test -- -g \"Can set subnet parameter\"\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for macOS\nDESCRIPTION: Commands to install Homebrew and OpenSSL for Substrate development on macOS\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/rust-setup.md#2025-04-22_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\n# Install Homebrew if necessary https://brew.sh/\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)\"\n\n# Make sure Homebrew is up-to-date, install openssl\nbrew update\nbrew install openssl\n```\n\n----------------------------------------\n\nTITLE: Building the Pallet\nDESCRIPTION: Command to build the Drand bridge pallet using Cargo.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/pallets/drand/README.md#2025-04-22_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\ncargo build\n```\n\n----------------------------------------\n\nTITLE: Running Code Coverage Analysis\nDESCRIPTION: Command for running code coverage analysis using a script. This requires cargo-tarpaulin to be installed on the host system.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/README.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nbash scripts/code-coverage.sh\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Arch Linux\nDESCRIPTION: Command to install necessary system packages for Substrate development on Arch Linux\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/rust-setup.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\npacman -Syu --needed --noconfirm curl git clang\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for Fedora\nDESCRIPTION: Commands to install required system packages for Substrate development on Fedora\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/rust-setup.md#2025-04-22_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nsudo dnf update\nsudo dnf install clang curl git openssl-devel\n```\n\n----------------------------------------\n\nTITLE: Installing Build Dependencies for OpenSUSE\nDESCRIPTION: Command to install necessary system packages for Substrate development on OpenSUSE\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/rust-setup.md#2025-04-22_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nsudo zypper install clang curl git openssl-devel llvm-devel libudev-devel\n```\n\n----------------------------------------\n\nTITLE: Running Unit Tests\nDESCRIPTION: Command to execute the pallet's unit test suite using Cargo.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/pallets/drand/README.md#2025-04-22_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\ncargo test\n```\n\n----------------------------------------\n\nTITLE: Checking Rust Configuration\nDESCRIPTION: Command to display current Rust toolchain configuration\nSOURCE: https://github.com/opentensor/subtensor/blob/main/docs/rust-setup.md#2025-04-22_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nrustup show\n```\n\nLANGUAGE: text\nCODE:\n```\nDefault host: x86_64-unknown-linux-gnu\nrustup home:  /home/user/.rustup\n\ninstalled toolchains\n--------------------\n\nstable-x86_64-unknown-linux-gnu (default)\nnightly-2020-10-06-x86_64-unknown-linux-gnu\nnightly-x86_64-unknown-linux-gnu\n\ninstalled targets for active toolchain\n--------------------------------------\n\nwasm32-unknown-unknown\nx86_64-unknown-linux-gnu\n\nactive toolchain\n----------------\n\nstable-x86_64-unknown-linux-gnu (default)\nrustc 1.50.0 (cb75ad5db 2021-02-10)\n```\n\n----------------------------------------\n\nTITLE: Running Coverage Tests\nDESCRIPTION: Command to run coverage tests using Tarpaulin with specific rust flags for optimization level.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/pallets/drand/README.md#2025-04-22_snippet_3\n\nLANGUAGE: shell\nCODE:\n```\ncargo tarpaulin --rustflags=\"-C opt-level=0\"\n```\n\n----------------------------------------\n\nTITLE: Running Benchmarks\nDESCRIPTION: Commands for building and running benchmarks on the pallet using the substrate-node-template.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/pallets/drand/README.md#2025-04-22_snippet_5\n\nLANGUAGE: shell\nCODE:\n```\ncd substrate-node-template\n# build the node with benchmarks enables\ncargo build --release --features runtime-benchmarks\n# run the pallet benchmarks\n./target/release/node-template benchmark pallet \\\n    --chain dev \\\n    --wasm-execution=compiled \\\n    --pallet pallet_drand \\\n    --extrinsic \"*\" \\\n    --steps 50 \\\n    --repeat 20 \\\n    --output ../src/new_weight.rs \\\n    --allow-missing-host-functions\n```\n\n----------------------------------------\n\nTITLE: Adding Devnet to Polkadot API\nDESCRIPTION: Command to add a devnet websocket endpoint to the Polkadot API configuration.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/evm-tests/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpx papi add devnet -w ws://10.0.0.11:9944\n```\n\n----------------------------------------\n\nTITLE: Retrieving Metadata\nDESCRIPTION: Shell command to fetch updated metadata using a predefined script.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/evm-tests/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nsh get-metadata.sh\n```\n\n----------------------------------------\n\nTITLE: Subtensor ASCII Art Logo\nDESCRIPTION: ASCII art logo for the Subtensor project displayed in the command line. This is a visual representation of the project branding.\nSOURCE: https://github.com/opentensor/subtensor/blob/main/README.md#2025-04-22_snippet_6\n\nLANGUAGE: commandline\nCODE:\n```\n             _      _\n███████╗██╗   ██╗██████╗ ████████╗███████╗███╗   ██╗███████╗ ██████╗ ██████╗\n██╔════╝██║   ██║██╔══██╗╚══██╔══╝██╔════╝████╗  ██║██╔════╝██╔═══██╗██╔══██╗\n███████╗██║   ██║██████╔╝   ██║   █████╗  ██╔██╗ ██║███████╗██║   ██║██████╔╝\n╚════██║██║   ██║██╔══██╗   ██║   ██╔══╝  ██║╚██╗██║╚════██║██║   ██║██╔══██╗\n███████║╚██████╔╝██████╔╝   ██║   ███████╗██║ ╚████║███████║╚██████╔╝██║  ██║\n╚══════╝ ╚═════╝ ╚═════╝    ╚═╝   ╚══════╝╚═╝  ╚═══╝╚══════╝ ╚═════╝ ╚═╝  ╚═╝\n```"
  }
]