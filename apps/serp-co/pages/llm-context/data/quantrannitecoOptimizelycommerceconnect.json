[
  {
    "owner": "quan-tran-niteco",
    "repo": "optimizelycommerceconnect",
    "content": "TITLE: Loading Orders in Optimizely - C#\nDESCRIPTION: This snippet demonstrates how to load various types of orders (cart, wishlist, payment plan, and purchase order) using the IOrderRepository.  It shows how to load by contact ID, order group ID, and order reference, including options for loading all orders of a specific type for a customer, and creating a cart if one doesn't exist.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    \n    //loading cart will return null if it does not exist\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    var cart = orderRepository.Load<ICart>(orderGroupId);\n    var cart = orderRepository.Load(orderReference) as ICart;\n    \n    //load all carts for customer\n    var carts = orderRepository.Load<ICart>(contactId, \"Default\");\n    \n    //load or create cart will create cart if does not exist\n    var cart = orderRepository.LoadOrCreateCart(contactId, \"Default\");\n    \n    //loading wishlist will return null if it does not exist\n    var wishlist = orderRepository.LoadCart<ICart>(contactId, \"Wishlist\");\n    var wishlist = orderRepository.Load<ICart>(orderGroupId);\n    var wishlist = orderRepository.Load(orderReference) as ICart;\n    \n    //load all whishlists for customer\n    var wishlists = orderRepository.Load<ICart>(contactId, \"Wishlist\");\n    \n    //load or create wishlist will create cart if does not exist\n    var wishlist = orderRepository.LoadOrCreateCart(contactId, \"Wishlist\");\n    \n    //loading purchase order\n    var purchaseOrder = orderRepository.Load(orderReference) as IPurchaseOrder;\n    var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderGroupId);\n    \n    //loading purchase orders for customer\n    var purchaseOrders = orderRepository.Load<IPurchaseOrder>(contactId, \"Default\");\n    \n    //loading payment plan\n    var paymentPlan = orderRepository.Load(orderReference) as IPaymentPlan;\n    var paymentPlan = orderRepository.Load<IPaymentPlan>(orderGroupId);\n    \n    //loading payment plans for customer\n    var paymentPlans = orderRepository.Load<IPaymentPlan>(contactId, \"Default\");\n    \n    //loading all order for customer\n    var orders = orderRepository.Load(contactId, \"Default\");\n```\n\n----------------------------------------\n\nTITLE: Completing Shipment using IShipmentProcessorExtensions in C#\nDESCRIPTION: This snippet shows how to complete a shipment using the CompleteShipment method of the IShipmentProcessorExtensions. It requires an IShipmentProcessor, IPurchaseOrder, and IShipment instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_26\n\nLANGUAGE: C#\nCODE:\n```\nIShipmentProcessor shipmentProcessor; \n    IPurchaseOrder purchaseOrder;\n    IShipment shipment;\n    \n    (…)\n    shipmentProcessor.CompleteShipment(purchaseOrder, shipment);\n```\n\n----------------------------------------\n\nTITLE: Process Payments for Cart - C#\nDESCRIPTION: This code snippet shows how to process payments for a cart using IPaymentProcessor. It retrieves a cart and then processes the payments using the configured payment provider and order group calculator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var paymentProcessor = ServiceLocator.Current.GetInstance<IPaymentProcessor>();\n    var orderGroupCalculator = ServiceLocator.Current.GetInstance<IOrderGroupCalculator>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart(contactId, \"Default\");\n    \n    \n    //Process payments for the cart\n    cart.ProcessPayments(paymentProcessor, orderGroupCalculator);\n```\n\n----------------------------------------\n\nTITLE: Listing All Warehouses in C#\nDESCRIPTION: Retrieves a list of all warehouses using the IWarehouseRepository. The method obtains an instance of the IWarehouseRepository from the ServiceLocator and calls the List method to fetch all warehouses.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\n// Get list Warehouse\n    public IEnumerable<IWarehouse> ListAllWarehouses()\n    {\n        var warehouseRepository = ServiceLocator.Current.GetInstance<IWarehouseRepository>();\n        return warehouseRepository.List();\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Orders in Optimizely - C#\nDESCRIPTION: This snippet demonstrates how to create a cart, purchase order, and payment plan using the IOrderRepository. It retrieves an instance of IOrderRepository from the ServiceLocator and uses it to create instances of ICart, IPurchaseOrder, and IPaymentPlan, associating them with a contact ID.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    \n    //Create cart\n    var cart = orderRepository.Create<ICart>(contactId, \"Default\");\n    \n    //Create purchase order\n    var purchaseOrder = orderRepository.Create<IPurchaseOrder>(contactId, \"Default\");\n    \n    //Create payment plan\n    var paymentPlan = orderRepository.Create<IPaymentPlan>(contactId, \"Default\");\n```\n\n----------------------------------------\n\nTITLE: Removing Items from a Cart Optimizely C#\nDESCRIPTION: This snippet demonstrates how to remove an item from a shopping cart. It finds the line item based on SKU code and removes it from the cart's first shipment. It retrieves the first shipment and removes the corresponding line item from the shipment's line items.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shopping-carts.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar lineItem = cart.GetAllLineItems().FirstOrDefault(x => x.Code == code && !x.IsGift);\n      if (lineItem != null)\n        {\n          var shipment = cart.GetFirstShipment();\n          shipment.LineItems.Remove(lineItem);\n        }\n```\n\n----------------------------------------\n\nTITLE: ProcessPayment Method Signature in C#\nDESCRIPTION: This C# code snippet shows the signature for the `ProcessPayment` method, which is used to contact the payment processing system and process payments. This method needs to be implemented in a custom payment gateway class.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/payment-gateways.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nbool ProcessPayment(Payment payment, ref string message);\n```\n\n----------------------------------------\n\nTITLE: Configuring Connection Strings in appsettings.json\nDESCRIPTION: This snippet demonstrates how to define connection strings for Commerce (EcfSqlConnection) and CMS (EPiServerDB) within the appsettings.json file for Optimizely Commerce Connect. It shows the structure required for these connection strings to be recognized by the platform. The EcfSqlConnection is crucial for the commerce functionality, while EPiServerDB is for CMS.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/configuration.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"ConnectionStrings\": {\n        \"EcfSqlConnection\": \"{commerce connection string}\",\n        \"EPiServerDB\": \"{Cms connection string}\"\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Process Payment (Customized Commerce 14) C#\nDESCRIPTION: This code snippet shows the `ProcessPayment` method signature using `IPaymentPlugin` in Customized Commerce 14. It takes an `IOrderGroup` and an `IPayment` as input and returns a `PaymentProcessingResult`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/payment-plugins.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nPaymentProcessingResult ProcessPayment(IOrderGroup orderGroup, IPayment payment)\n```\n\n----------------------------------------\n\nTITLE: Implementing SearchProvider Abstract Class in C#\nDESCRIPTION: This code snippet demonstrates the abstract SearchProvider class in C#, which serves as the base class for implementing custom search providers within Optimizely Commerce Connect. It defines abstract methods for searching, indexing, removing documents, and managing the search provider lifecycle.  The QueryBuilderType property specifies the class responsible for converting SearchCriteria to a provider-specific query.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/creating-a-search-provider.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic abstract class SearchProvider : ProviderBase\n        {\n            /// <summary>\n            /// Gets the class type of the query builder. This class will be used to dynamically convert SearchCriteria to the query\n            /// that Search Provider can understand.\n            /// </summary>\n            /// <example>\n            /// // the following type will build query for the SOLR server\n            /// \"Mediachase.Search.Providers.Solr.SolrSearchQueryBuilder, Mediachase.Search.SolrSearchProvider\"\n            /// </example>\n            /// <value>The type of the query builder.</value>\n            public abstract string QueryBuilderType { get; }\n    \n            /// <summary>\n            /// Searches the datasource using the specified criteria. Criteria is parsed by the query builder specified by <typeparamref name=\"QueryBuilderType\"/>.\n            /// </summary>\n            /// <param name=\"applicationName\">Name of the application.</param>\n            /// <param name=\"criteria\">The criteria.</param>\n            /// <returns></returns>\n            public abstract ISearchResults Search(string applicationName, ISearchCriteria criteria);\n    \n            /// <summary>\n            /// Adds the document to the index. Depending on the provider, the document will be commited only after commit is called.\n            /// </summary>\n            /// <param name=\"applicationName\">Name of the application.</param>\n            /// <param name=\"scope\">The scope.</param>\n            /// <param name=\"document\">The document.</param>\n            public abstract void Index(string applicationName, string scope, ISearchDocument document);\n    \n             /// <summary>\n             /// Removes the document by specifying scope (core in SOLR), key (a field that can be used to lookup for a document) and\n             /// value of the key.\n             /// </summary>\n             /// <param name=\"applicationName\">Name of the application.</param>\n             /// <param name=\"scope\">The scope.</param>\n             /// <param name=\"key\">The key.</param>\n             /// <param name=\"value\">The value.</param>\n             /// <returns></returns>\n             public abstract int Remove(string applicationName, string scope, string key, string value);\n    \n             /// <summary>\n             /// Removes all documents in the specified scope.\n             /// </summary>\n             /// <param name=\"applicationName\">Name of the application.</param>\n             /// <param name=\"scope\">The scope.</param>\n             public abstract void RemoveAll(string applicationName, string scope);\n    \n             /// <summary>\n             /// Closes the specified provider.\n             /// </summary>\n             /// <param name=\"applicationName\">Name of the application.</param>\n             /// <param name=\"scope\">The scope.</param>\n             public abstract void Close(string applicationName, string scope);\n    \n             /// <summary>\n             /// Commits changes made to this instance.\n             /// </summary>\n             /// <param name=\"applicationName\">Name of the application.</param>\n             public abstract void Commit(string applicationName);\n        }\n```\n\n----------------------------------------\n\nTITLE: Registering ICurrentMarket in Commerce 14+ in C#\nDESCRIPTION: This snippet shows how to register a custom ICurrentMarket implementation in the ConfigureServices method of the Startup class, which is the standard approach in Commerce 14 and higher.  The AddSingleton method ensures that only one instance of the MyCurrentMarketImplementation is created and used throughout the application's lifetime.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/markets.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic class Startup\n    {\n      public void ConfigureServices(IServiceCollection services)\n      {\n        services.AddSingleton<ICurrentMarket, MyCurrentMarketImplementation>();\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating a Cart Optimizely C#\nDESCRIPTION: This snippet demonstrates how to create a new shopping cart using the IOrderRepository.Create method. It takes a customer ID and cart name as parameters and returns a new ICart instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shopping-carts.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar  cart = orderRepository.Create<ICart>(customerId, \"Default\");\n```\n\n----------------------------------------\n\nTITLE: Custom Price Optimizer Implementation in C#\nDESCRIPTION: This C# code snippet demonstrates a custom implementation of IPriceOptimizer. It groups prices by key properties and selects the highest price based on UnitPrice.Amount. It then returns a collection of OptimizedPriceValue objects. This custom optimizer allows modification of the price selection logic, potentially saving the highest overlapped price instead of the default lowest price.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricing.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomPriceOptimizer : IPriceOptimizer\n      {\n        public IEnumerable<IOptimizedPriceValue> OptimizePrices(IEnumerable<IPriceValue> prices)\n          {\n            return prices.GroupBy(p => new { p.CatalogKey, p.MinQuantity, p.MarketId, p.ValidFrom, p.CustomerPricing, p.UnitPrice.Currency })\n              .Select(g => g.OrderByDescending(c => c.UnitPrice.Amount).First()).Select(p => new OptimizedPriceValue(p, null));\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Bolt Options in Startup (C#)\nDESCRIPTION: This C# code snippet demonstrates how to configure Bolt payment provider options within the application's startup file using `services.Configure<BoltOptions>`. It sets properties such as `EnvironmentType`, `PublishableKey`, `ApiKey`, `DivisionPublicId`, `SigningSecret`, and `AutoCapture`. These values are required for the Bolt payment provider to function correctly and are typically retrieved from configuration.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bolt-installation.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nservices.Configure<BoltOptions>(x =>\n {\n      x.EnvironmentType = EnvironmentType.Sandbox;\n      x.PublishableKey = \"Key\";\n      x.ApiKey = \"Api Key\";\n      x.DivisionPublicId = \"Public Id\";\n      x.SigningSecret = \"signing secret\";\n      x.AutoCapture = true;\n });\n```\n\n----------------------------------------\n\nTITLE: Customizing Product Content Conventions C#\nDESCRIPTION: This code snippet shows how to override the default conventions for indexing ProductContent in Optimizely. It excludes the 'Variations' field and includes 'VariationContents', 'DefaultPrice', 'Prices', and 'Inventories' fields to be indexed. This ensures that the search index contains the relevant information for products, particularly related to prices and inventories.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n        protected override void ApplyProductContentConventions(ClientConventions.TypeConventionBuilder<ProductContent> conventionBuilder)\n          {\n            base.ApplyProductContentConventions(conventionBuilder);\n            conventionBuilder\n              .ExcludeField(x => x.Variations())\n              .IncludeField(x => x.VariationContents())\n              .IncludeField(x => x.DefaultPrice())\n              .IncludeField(x => x.Prices())\n              .IncludeField(x => x.Inventories());\n          }\n    \n       public override void ApplyConventions(IClientConventions clientConventions)\n          {\n            base.ApplyConventions(clientConventions);\n            // Uncomment line below if we don't index VariationContent\n            // ContentIndexer.Instance.Conventions.ForInstancesOf<VariationContent>().ShouldIndex(x => false);\n            SearchClient.Instance.Conventions.NestedConventions.ForInstancesOf<ProductContent>().Add(x => x.VariationContents());\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Canceling Shipment using IShipmentProcessor in C#\nDESCRIPTION: This snippet shows how to cancel a shipment using the CancelShipment method of the IShipmentProcessor interface. It requires an IOrderRepository, IShipmentProcessor, and IShipment instance. The orderGroupId and shipment are used to cancel the specified shipment for a purchase order.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_21\n\nLANGUAGE: C#\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipmentProcessor shipmentProcessor;\n    IShipment shipment;\n    \n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    shipmentProcessor.CancelShipment(purchaseOrder, shipment);\n```\n\n----------------------------------------\n\nTITLE: Check If Order Can Be Cancelled C#\nDESCRIPTION: This code snippet demonstrates how to determine if a purchase order can be cancelled using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `CanBeCancelled()` extension method on the `purchaseOrder` instance.  This requires resolving dependencies for `IOrderRepository`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var canBeCancelled = purchaseOrder.CanBeCancelled();\n```\n\n----------------------------------------\n\nTITLE: Adjusting Inventory C#\nDESCRIPTION: This code snippet demonstrates how to adjust inventory for line items in a cart and shipment using the `IOrderRepository` and `IInventoryProcessor`. It retrieves the cart, adjusts inventory on cart line items, and adjusts inventory on shipment line items. It uses `ServiceLocator` to resolve dependencies.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var inventoryProcessor = ServiceLocator.Current.GetInstance<IInventoryProcessor>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart(contactId, \"Default\");\n    var validationIssues = new Dictionary<ILineItem, ValidationIssue>();\n    \n    //Adjust Inventory on cart\n    cart.AdjustInventoryOrRemoveLineItems((item, issue) => validationIssues.Add(item, issue), inventoryProcessor);\n    \n    //Adjust inventory on shipment line items\n    var shipment = cart.GetFirstShipment();\n    inventoryProcessor.AdjustInventoryOrRemoveLineItems(shipment, cart.OrderStatus, (item, issue) => validationIssues.Add(item, issue));\n```\n\n----------------------------------------\n\nTITLE: Loading or Creating a Cart Optimizely C#\nDESCRIPTION: This snippet demonstrates how to load an existing cart or create a new one if it doesn't exist, using the LoadOrCreateCart extension method.  It takes a customer ID and cart name as parameters and returns an ICart instance.  It utilizes the _customerContext to get the current contact ID.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shopping-carts.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar cart = orderRepository.LoadOrCreateCart<ICart>(_customerContext.CurrentContactId, name)\n```\n\n----------------------------------------\n\nTITLE: Creating and Updating Warehouse in C#\nDESCRIPTION: Creates a new warehouse and updates an existing warehouse using the IWarehouseRepository. It demonstrates creating a warehouse object, setting its properties, and saving it using the Save method.  It also shows how to update an existing warehouse by retrieving it, creating a writable clone, modifying the clone, and then saving the updated clone.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_22\n\nLANGUAGE: csharp\nCODE:\n```\npublic void CreateNewWarehouse()\n      {\n        var warehouseRepository = ServiceLocator.Current.GetInstance<IWarehouseRepository>();\n        var warehouse = new Warehouse\n          {\n            Code = \"NY\",\n            Name = \"New York store\",\n            IsActive = true,\n            IsPrimary = false,\n            IsFulfillmentCenter = false,\n            IsPickupLocation = true,\n            IsDeliveryLocation = true,\n            ContactInformation = new WarehouseContactInformation\n              {\n                FirstName = \"First Name\",\n                LastName = \"Last Name\",\n                Line1 = \"Address Line 1\",\n                Line2 = \"Address Line 2\",\n                City = \"City\",\n                State = \"State\",\n                CountryCode = \"Country Code\",\n                PostalCode = \"Postal Code\",\n                RegionCode = \"Region Code\",\n                DaytimePhoneNumber = \"Daytime Phone Number\",\n                EveningPhoneNumber = \"Evening Phone Number\",\n                FaxNumber = \"Fax Number\",\n                Email = \"Email\"\n              }\n          };\n        warehouseRepository.Save(warehouse);\n      }\n    \n    public void UpdateWarehouse(string warehouseCode)\n      {\n        var warehouseRepository = ServiceLocator.Current.GetInstance<IWarehouseRepository>();\n        var warehouse = warehouseRepository.Get(warehouseCode); // It's a read-only object\n        var writableCloneWarehouse = new Warehouse(warehouse); // create writable clone before updating\n        writableCloneWarehouse.IsPickupLocation = true;\n        warehouseRepository.Service.Save(writableCloneWarehouse);\n      }\n```\n\n----------------------------------------\n\nTITLE: Get a Single Inventory Record in C#\nDESCRIPTION: This snippet demonstrates how to retrieve a single inventory record using IInventoryService. It uses ServiceLocator to resolve the IInventoryService and then calls the Get() method to retrieve the inventory. This function requires the IInventoryService to be correctly configured and available via the service locator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Gets a single inventory record. \n    public InventoryRecord GetAnInventory() \n      { \n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>(); \n        return inventoryService.Get(); \n      }\n```\n\n----------------------------------------\n\nTITLE: Adding Association in Optimizely Commerce Connect (C#)\nDESCRIPTION: Adds a new related entry (Association) to an existing entry. It retrieves an instance of IAssociationRepository, creates a new Association object with specified properties (Group, SortOrder, Source, Target, Type), and uses the UpdateAssociation method to persist the new association.  The method takes two ContentReference objects as input: the reference to the main entry and the reference to the related entry.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/related-entries.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddAssociation(ContentReference referenceToEntry, ContentReference referenceToRelatedEntry)\n      {\n        var associationRepository = ServiceLocator.Current.GetInstance<IAssociationRepository>();\n        var newAssociation = new Association\n          {\n            Group = new AssociationGroup\n              {\n                Name = \"CrossSell\",\n                Description = \"\",\n                SortOrder = 100\n              },\n            SortOrder = 100,\n            Source = referenceToEntry,\n            Target = referenceToRelatedEntry,\n            Type = new AssociationType\n              {\n                Id = AssociationType.DefaultTypeId,\n                Description = \"\"\n              }\n          };\n        associationRepository.UpdateAssociation(newAssociation);\n      }\n```\n\n----------------------------------------\n\nTITLE: Releasing Shipment using IShipmentProcessorExtensions in C#\nDESCRIPTION: This snippet demonstrates how to release a shipment using the ReleaseShipment method of the IShipmentProcessorExtensions. It requires an IShipmentProcessor, IPurchaseOrder, and IShipment instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_27\n\nLANGUAGE: C#\nCODE:\n```\nIShipmentProcessor shipmentProcessor; \n    IPurchaseOrder purchaseOrder;\n    IShipment shipment;\n    \n    (…)\n    shipmentProcessor.ReleaseShipment(purchaseOrder, shipment);\n```\n\n----------------------------------------\n\nTITLE: Saving Catalog Data with DTOs in Optimizely Connect (C#)\nDESCRIPTION: This code snippet demonstrates how to save catalog data using Data Transfer Objects (DTOs) in Optimizely Commerce Connect. It retrieves the current catalog, creates a new catalog entry, sets its properties, and saves it to the database. This example uses the ICatalogSystem interface and CatalogContext.Current to interact with the catalog system.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/low-level-apis.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nICatalogSystem target = CatalogContext.Current;\n    CatalogDto catalogs = target.GetCatalogDto();\n    foreach (CatalogDto.CatalogRow catalog in catalogs.Catalog)\n      {\n        existingCatalogId = catalog.CatalogId;\n        break;\n      }\n    \n    CatalogEntryDto dto = target.GetCatalogEntriesDto(existingCatalogId, response);\n    // Catalog entry create and set properties\n    CatalogEntryDto.CatalogEntryRow catalogEntryRow = dto.CatalogEntry.NewCatalogEntryRow();\n    catalogEntryRow.ApplicationId = CatalogConfiguration.Instance.ApplicationId;\n    dto.CatalogEntry.AddCatalogEntryRow(catalogEntryRow);\n    target.SaveCatalogEntry(dto);\n```\n\n----------------------------------------\n\nTITLE: Get Available Markets in Optimizely Commerce (C#)\nDESCRIPTION: Retrieves all available markets using the IMarketService. This method demonstrates how to access and utilize the market service to obtain a collection of all available markets within the Optimizely Commerce platform. It leverages ServiceLocator to get an instance of IMarketService.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-market-examples.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable GetAvailableMarkets()\n      {\n        var marketService = ServiceLocator.Current.GetInstance<IMarketService>();\n        // Get all available markets.\n        return marketService.GetAllMarkets();\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Form Totals in C#\nDESCRIPTION: This method calculates various totals for an order form, including handling, shipping, tax, subtotal, discount, and the overall total.  It requires the order form, market, currency, and IOrderFormCalculator.  Each of the calculated components is then written to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetOrderFormTotals(IOrderForm orderForm, IMarket market, Currency currency, IOrderFormCalculator orderFormCalculator)\n          {\n            var orderFormTotals = orderFormCalculator.GetOrderFormTotals(orderForm, market, currency);\n        \n            Debug.WriteLine(\"Handling total for order form '{0}': {1}\", orderForm.OrderFormId, orderFormTotals.HandlingTotal);\n            Debug.WriteLine(\"Shipping subtotal for order form '{0}': {1}\", orderForm.OrderFormId, orderFormTotals.ShippingTotal);\n            Debug.WriteLine(\"Tax total for order form '{0}': {1}\", orderForm.OrderFormId, orderFormTotals.TaxTotal);\n            Debug.WriteLine(\"Subtotal for order form '{0}': {1}\", orderForm.OrderFormId, orderFormTotals.SubTotal);\n            Debug.WriteLine(\"Discount total for order form '{0}': {1}\", orderForm.OrderFormId, orderFormTotals.DiscountTotal);\n            Debug.WriteLine(\"Total for order form '{0}': {1}\", orderForm.OrderFormId, orderFormTotals.Total);\n          }\n```\n\n----------------------------------------\n\nTITLE: Update Inventories in C#\nDESCRIPTION: This snippet demonstrates how to update existing inventory records. It obtains an instance of IInventoryService and calls the Update() method, passing in an IEnumerable<InventoryRecord>. An exception is thrown if a record does not already exist. No explicit return.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\n// Updates the specified inventory records.\n    public void UpdateInventories(IEnumerable<InventoryRecord> records)\n      {\n```\n\n----------------------------------------\n\nTITLE: Setting Order Metadata in Optimizely Commerce (C#)\nDESCRIPTION: This code snippet illustrates how to set or update metadata properties for different order components in Optimizely Commerce. It shows how to assign values to properties of cart, order form, payment, shipment, and line items. The snippet relies on EPiServer.ServiceLocation and EPiServer.Commerce.Orders.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extending-order-classes.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    \n    cart.Propeties[\"myfield\"] = \"hello\";\n    cart.GetFirstForm().Properties[\"myFormField\"] = 23m;\n    cart.GetFirstForm().Payments.First().Properties[\"myPaymentField\"] = 11;\n    cart.GetFirstShipment().Properties[\"myShipmentField\"] = 9;\n    cart.GetAllLineItems().First().Properties[\"myLineItemField\"] = \"yes\";\n```\n\n----------------------------------------\n\nTITLE: Update Inventory for Cart - C#\nDESCRIPTION: This code snippet demonstrates how to update inventory information for a cart using IInventoryProcessor. It retrieves a cart, updates the inventory quantities for line items, and removes items if no inventory is available. It also updates inventory for shipment line items.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var inventoryProcessor = ServiceLocator.Current.GetInstance<IInventoryProcessor>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart(contactId, \"Default\");\n    var validationIssues = new Dictionary<ILineItem, ValidationIssue>();\n    \n    //Update Inventory on cart\n    cart.UpdateInventoryOrRemoveLineItems((item, issue) => validationIssues.Add(item, issue), inventoryProcessor);\n    \n    //Update inventory on shipment line items\n    var shipment = cart.GetFirstShipment();\n    inventoryProcessor.UpdateInventoryOrRemoveLineItem(shipment, (item, issue) => validationIssues.Add(item, issue));\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Promotion and Block Types in C#\nDESCRIPTION: This code defines custom promotion and block types in C# using Optimizely Commerce. It includes ContentType attributes with GUIDs and PromotionRegion attributes to connect properties to specific parts of a promotion description, enhancing UI communication of property meanings during promotion setup. The CustomPromotion class inherits from EntryPromotion, and the CustomPromotionBlock inherits from BlockData.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-promotions.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[ContentType(GUID = \"76EBFEFF-2CFB-42F2-B4A3-EA5EA5A41515\")]\n    public class CustomPromotion : EntryPromotion\n      {\n        [PromotionRegion(PromotionRegionName.Condition)]\n        public virtual CustomPromotionBlock Conditions { get; set; }\n     \n        [PromotionRegion(PromotionRegionName.Reward)]\n        public virtual int Percentage { get; set; }\n      }\n     \n    [ContentType(GUID = \"15B7BEA8-967A-4C5C-87F3-7346E71CBCC9\")]\n    public class CustomPromotionBlock : BlockData\n      {\n        public virtual int RequiredQuantity { get; set; }\n        public virtual IList<ContentReference> Targets { get; set; }\n      }\n```\n\n----------------------------------------\n\nTITLE: Check Promotion Fulfillment C#\nDESCRIPTION: This code checks if a percentage promotion can potentially be fulfilled based on the discount percentage and the cart contents. It returns `false` if the discount percentage is not positive or if the cart is empty; otherwise, it returns `true`. It requires `promotionData.PercentageDiscount`, `context.OrderForm`, and `GetLineItems`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-promotions.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nif (promotionData.PercentageDiscount <= 0)\n                  {\n                    return false;\n                  }\n                var lineItems = GetLineItems(context.OrderForm);\n                if (!lineItems.Any())\n                  {\n                    return false;\n                  }\n                return true;\n```\n\n----------------------------------------\n\nTITLE: Setting Default Index and Service URL in appsettings.json\nDESCRIPTION: This code snippet demonstrates how to configure the DefaultIndex and ServiceUrl properties within the EPiServer:Find section of the appsettings.json file.  These values are obtained from the Optimizely Find index details page and are essential for connecting the application to the correct search index. Replace the placeholder values with your actual service URL and index name.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/configuring-optimizely-find-search-provider.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"EPiServer:Find\": {\n          \"DefaultIndex\": \"(set the defaultIndex here)\",\n          \"ServiceUrl\": \"(set the serviceUrl here)\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Filtering Content with Price Greater Than in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to find items with a price greater than a specified value. It makes use of the `Filter` method and `DefaultPrice().UnitPrice.GreaterThan(2)` to filter items more expensive than 2.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<VariationContent>()\n        .Filter(x => x.DefaultPrice().UnitPrice.GreaterThan(2));\n```\n\n----------------------------------------\n\nTITLE: Triggering Inventory Update Event in C#\nDESCRIPTION: Triggers an inventory update event using the InventoryUpdated method of the CatalogKeyEventBroadcaster class. This method should be called whenever changes are made to the inventory system to notify listeners of the update. It takes the source object and an InventoryUpdateEventArgs instance as parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/events.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual void InventoryUpdated(object source, InventoryUpdateEventArgs args)\n```\n\n----------------------------------------\n\nTITLE: Deleting Inventory Data in C#\nDESCRIPTION: Deletes inventory data based on provided inventory keys using the IInventoryService. The method validates the inventoryKeys parameter and retrieves an IInventoryService instance to execute the deletion. The inventoryKeys parameter is a collection of InventoryKey objects that identify the inventory records to be deleted.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\n// Deletes all specified inventory data.\n    public void DeleteInventories(IEnumerable<InventoryKey> inventoryKeys)\n      {\n        if (inventoryKeys == null || inventoryKeys.Contains(null))\n          {\n            throw new ArgumentNullException(nameof(inventoryKeys));\n          }\n        var inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.Delete(inventoryKeys);\n      }\n```\n\n----------------------------------------\n\nTITLE: AddToCart Method in CartService (C#)\nDESCRIPTION: This C# code snippet shows the AddToCart method in the CartService. It adds a specified quantity of the product with the given code to the provided cart. It handles bundle content by recursively adding each entry in the bundle to the cart.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic AddToCartResult AddToCart(ICart cart, string code, IList<string> selectedPackageItems, decimal quantity)\n{\n    var result = new AddToCartResult();\n    var contentLink = _referenceConverter.GetContentLink(code);\n    var entryContent = _contentLoader.Get<EntryContentBase>(contentLink);\n\n    if (entryContent is BundleContent)\n    {\n        foreach (var relation in _relationRepository.GetChildren<BundleEntry>(contentLink))\n        {\n            var entry = _contentLoader.Get<EntryContentBase>(relation.Child);\n            var recursiveResult = AddToCart(cart, entry.Code, relation.Quantity ?? 1);\n            if (recursiveResult.EntriesAddedToCart)\n            {\n                result.EntriesAddedToCart = true;\n            }\n\n            foreach (var message in recursiveResult.ValidationMessages)\n            {\n                result.ValidationMessages.Add(message);\n            }\n        }\n\n        return result;\n    }\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Form Subtotal in C#\nDESCRIPTION: This method calculates the subtotal of all shipments within an order form. It requires the order form, currency, and an instance of IOrderFormCalculator.  The result is then written to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetSubTotal(IOrderForm orderForm, Currency currency, IOrderFormCalculator orderFormCalculator)\n          {\n            var subTotal = orderFormCalculator.GetSubTotal(orderForm, currency);\n            Debug.WriteLine(\"Subtotal for order form '{0}': {1}\", orderForm.OrderFormId, subTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Getting Warehouse by Code in C#\nDESCRIPTION: Retrieves a specific warehouse by its code using the IWarehouseRepository. The method gets an instance of the IWarehouseRepository from the ServiceLocator and calls the Get method with the warehouse code.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_21\n\nLANGUAGE: csharp\nCODE:\n```\n// Get a specific Warehouse by Code\n    public IWarehouse GetWarehouse(string warehouseCode)\n      {\n        var warehouseRepository = ServiceLocator.Current.GetInstance<IWarehouseRepository>();\n        return warehouseRepository.Get(warehouseCode);\n      }\n```\n\n----------------------------------------\n\nTITLE: Get Sale Price (Commerce 12.8+) (C#)\nDESCRIPTION: Retrieves the sale price for an entry in a specific market, tailored for Optimizely Commerce versions 12.8 and higher. This method calculates the sale price based on market, currency, customer pricing, and quantity. It uses IPriceService and considers customer-specific pricing.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-market-examples.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic Price GetSalePrice(Entry entry, decimal quantity)\n      {\n        var currentMarketService = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n        var currentMarket = currentMarketService.GetCurrentMarket();\n        var currency = currentMarket.DefaultCurrency;\n        List<CustomerPricing> customerPricing = new List<CustomerPricing>();\n        customerPricing.Add(CustomerPricing.AllCustomers);\n    \n        var principal = PrincipalInfo.CurrentPrincipal;\n        if (principal != null)\n          {\n            if (!string.IsNullOrEmpty(principal.Identity.Name))\n              {\n                customerPricing.Add(new CustomerPricing(CustomerPricing.PriceType.UserName, principal.Identity.Name));\n              }\n    \n            CustomerContact currentUserContact = principal.GetCustomerContact();\n            if (currentUserContact != null && !string.IsNullOrEmpty(currentUserContact.EffectiveCustomerGroup))\n              {\n                customerPricing.Add(new CustomerPricing(CustomerPricing.PriceType.PriceGroup, currentUserContact.EffectiveCustomerGroup));\n              }\n          }\n    \n        IPriceService priceService = ServiceLocator.Current.GetInstance<IPriceService>();\n        PriceFilter filter = new PriceFilter()\n          {\n            Quantity = quantity,\n            Currencies = new Currency[] { currency },\n            CustomerPricing = customerPricing\n          };\n    \n        // return less price value\n        IPriceValue priceValue = priceService.GetPrices(currentMarket.MarketId, DateTime.UtcNow, new CatalogKey(entry.ID), filter)\n            .OrderBy(pv => pv.UnitPrice)\n            .FirstOrDefault();\n    \n        if (priceValue != null)\n          {\n            return new Mediachase.Commerce.Catalog.Objects.Price(priceValue.UnitPrice);\n          }\n    \n        return null;\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding Items to a Cart Optimizely C#\nDESCRIPTION: This snippet demonstrates how to add items to a shopping cart. It first checks if an item with the same SKU already exists in the cart. If so, it increments the quantity. Otherwise, it creates a new ILineItem, sets its properties, and adds it to the cart.  It uses the _orderGroupFactory to create line items and add them to the cart.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shopping-carts.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar lineItem = cart.GetAllLineItems().FirstOrDefault(x => x.Code == code && \n    !x.IsGift);\n      if (lineItem == null)\n        {\n          lineItem = cart.CreateLineItem(code, _orderGroupFactory);\n          lineItem.DisplayName = entryContent.DisplayName;\n          lineItem.Quantity = quantity;\n          cart.AddLineItem(lineItem, _orderGroupFactory);\n        }\n      else\n        {\n          var shipment = cart.GetFirstShipment();\n          cart.UpdateLineItemQuantity(shipment, lineItem, lineItem.Quantity + quantity);\n        }\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Product Fields in C#\nDESCRIPTION: This C# snippet defines custom product fields for Optimizely Commerce using the SchemaObjectCreateField class. It creates fields for string, timestamp, integer, decimal and boolean types, setting properties like Name, DisplayName, PublicRead, and Type. The ServiceConfiguration attribute registers the class as an implementation of IProductCustomFieldsHandler.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-14.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[ServiceConfiguration(ServiceType = typeof (IProductCustomFieldsHandler))]\npublic class CustomProducts: IProductCustomFieldsHandler {\n  public IEnumerable < SchemaObjectCreateField > CreateFields() {\n    return new [] {\n      new SchemaObjectCreateField {\n        Name = \"mark_product_teststring\",\n          DisplayName = \"Mark ODP Connector string\",\n          PublicRead = true,\n          Type = \"string\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testtimestamp\",\n          DisplayName = \"Mark ODP Connector timestamp\",\n          PublicRead = true,\n          Type = \"timestamp\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testinteger\",\n          DisplayName = \"Mark ODP Connector integer\",\n          PublicRead = true,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testdecimal\",\n          DisplayName = \"Mark ODP Connector decimal\",\n          PublicRead = false,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testboolean\",\n          DisplayName = \"Mark ODP Connector boolean\",\n          PublicRead = false,\n          Type = \"boolean\"\n      }\n    };\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Import/Export Catalog Data using CatalogImportExport C#\nDESCRIPTION: This code snippet demonstrates how to import and export catalog data using the CatalogImportExport class in Optimizely Commerce Connect. It utilizes FileStream to read/write catalog data from/to a zip file. Exception handling is included to log errors during the process.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/importing-catalog-data.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//Import\n    \n    try\n     {\n         var catalogImportExport = new CatalogImportExport()\n         {\n               //Should only be true when the application does not have access to the catalog models.\n               IsModelsAvailable = true\n         };\n         catalogImportExport.Import(new FileStream(\"pathtoZip\"), true);\n     }\n     catch (Exception exception)\n     {\n         LogManager.GetLogger().Error(exception.Message, exception);\n     }\n    \n    \n    //Export \n    try\n     {\n         var catalogImportExport = new CatalogImportExport()\n         {\n               //Should only be true when the application does not have access to the catalog models.\n               IsModelsAvailable = true\n         };\n         catalogImportExport.Export(\"catalogName\", new FileStream(\"pathtoZip\"), \"\");\n     }\n     catch (Exception exception)\n     {\n         LogManager.GetLogger().Error(exception.Message, exception);\n     };\n```\n\n----------------------------------------\n\nTITLE: Filtering Promotions by Coupon Code in C#\nDESCRIPTION: This C# code snippet demonstrates how to implement the ICouponFilter interface to filter promotions based on supplied coupon codes. The Filter method checks if a promotion requires a coupon code and if a matching coupon code is present in the order. Promotions that require a missing or invalid coupon are excluded from the filter context.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/coupons.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual PromotionFilterContext Filter(PromotionFilterContext filterContext, IEnumerable<string> couponCodes)\n      {\n        foreach (var promotion in filterContext.IncludedPromotions)\n          {\n            var couponCode = promotion.Coupon.Code;\n            if (String.IsNullOrEmpty(couponCode))\n              {\n                continue;\n              }\n    \n            if (couponCodes.Contains(couponCode, StringComparer.OrdinalIgnoreCase))\n              {\n                filterContext.AddCouponCode(promotion.ContentGuid, couponCode);\n              }\n            else\n              {\n                filterContext.ExcludePromotion(\n                  promotion, \n                  FulfillmentStatus.CouponCodeRequired,\n                  filterContext.RequestedStatuses.HasFlag(RequestFulfillmentStatus.NotFulfilled));\n              }\n          }\n        return filterContext;\n      }\n```\n\n----------------------------------------\n\nTITLE: Saving Orders in Optimizely - C#\nDESCRIPTION: This snippet demonstrates how to save a cart, purchase order, and payment plan using the IOrderRepository. It also shows how to save a cart as a purchase order or a payment plan, and it's important to ensure the purchase order number is unique.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    \n    var reference = orderRepository.Save(cart);\n    var reference = orderRepository.Save(purchaseOrder);\n    var reference = orderRepository.Save(paymentPlan);\n    var reference = orderRepository.SaveAsPurchaseOrder(cart);\n    var reference = orderRepository.SaveAsPaymentPlan(cart);\n```\n\n----------------------------------------\n\nTITLE: Filtering Content with Price in Range in Optimizely\nDESCRIPTION: This code snippet shows how to filter catalog content to find items with a price within a specified range. It uses the `Filter` method along with `DefaultPrice().UnitPrice.InRange(2, 4)` to find items priced between 2 and 4.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<VariationContent>()\n        .Filter(x => x.DefaultPrice().UnitPrice.InRange(2, 4))\n```\n\n----------------------------------------\n\nTITLE: Update Inventories in C#\nDESCRIPTION: Updates a collection of inventory records using the IInventoryService. It retrieves an instance of the IInventoryService and calls its Update method with the provided records. The records parameter represents a collection of InventoryRecord objects containing the updated inventory information.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\n// Updates the specified inventory records.\n    public void UpdateInventories(IEnumerable<InventoryRecord> records)\n      {\n        var inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.Update(records);\n      }\n```\n\n----------------------------------------\n\nTITLE: Searching Orders with Complex SQL Join in C#\nDESCRIPTION: This snippet demonstrates a more complex SQL where clause that returns all orders containing SKUs whose name contains a substring by using a join with the CatalogEntry table. It uses a StringBuilder to construct the SQL query.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nStringBuilder sqlQuery = new StringBuilder();\n    sqlQuery.Append(\"OrderGroupId IN (SELECT OrderGroupId From LineItem li \");\n    sqlQuery.Append(\"INNER JOIN CatalogEntry en \");\n    sqlQuery.Append(\"ON li.CatalogEntryId = en.Code \");\n    sqlQuery.Append(\"WHERE en.Name LIKE '%Wine%')\");\n    \n    OrderSearchParameters parameters = new OrderSearchParameters();\n    searchOptions.Classes.Add(\"PurchaseOrder\"); parameters.SqlMetaWhereClause = \"\";\n    parameters.SqlWhereClause = sqlQuery.ToString();\n```\n\n----------------------------------------\n\nTITLE: Implementing ICurrentMarket Interface in C#\nDESCRIPTION: This snippet demonstrates a custom implementation of the ICurrentMarket interface. The MyCurrentMarketImplementation class provides concrete implementations for the GetCurrentMarket and SetCurrentMarket methods.  The implementation details (indicated by \"... implementation ...\") are omitted for brevity but would contain the logic for retrieving and setting the market based on the application's requirements.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/markets.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Framework;\n    using EPiServer.Framework.Initialization;\n    using EPiServer.Framework.ServiceLocation;\n    using Mediachase.Commerce;\n    \n    // The custom implementation of ICurrentMarket\n    public class MyCurrentMarketImplementation : ICurrentMarket\n      {\n        public IMarket GetCurrentMarket()\n          {\n            ... implementation ...\n          }\n    \n        public void SetCurrentMarket(MarketId marketId)\n          {\n            ... implementation ...\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Shipments for Cart in C#\nDESCRIPTION: This code snippet demonstrates how to create multiple shipments for a cart in Optimizely Commerce Connect, where each shipment corresponds to a line item in the cart. It retrieves the cart, clears existing shipments and line items within shipments, and then creates a new shipment for each line item in the cart, associating the appropriate quantity and item details.  The code relies on Optimizely's IOrderRepository, ICurrentMarket, and OrderGroupFactory, which must be available in the service locator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-shipment-examples.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var currentMarket = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n    var cart = orderRepository.LoadCart(CustomerContext.Current.CurrentContactId, DefaultCartName, currentMarket);\n    var form = cart.GetFirstForm();\n    var cartLineItems = cart.GetAllLineItems().ToList();\n    \n    // Clean up line item in shipment\n    foreach (var shipment in form.Shipments)\n      {\n        shipment.LineItems.Clear();\n      }\n    // Clean up shipments\n    form.Shipments.Clear();\n    \n    // Adding shipment for each cart line item\n    foreach (var item in cartLineItems)\n      {\n        var shipment = cart.CreateShipment(_orderGroupFactory);\n        var lineItem = cart.CreateLineItem(item.Code, _orderGroupFactory);\n        lineItem.IsGift = item.IsGift;\n        lineItem.Quantity = item.Quantity;\n        shipment.LineItems.Add(lineItem);\n        form.Shipments.Add(shipment);\n      }\n    \n    orderRepository.Save(cart);\n```\n\n----------------------------------------\n\nTITLE: Searching Purchase Orders\nDESCRIPTION: This code snippet demonstrates how to search for PurchaseOrder objects using the OrderContext.Current.Search method. It assumes that the 'parameters' and 'searchOptions' variables are already initialized with the desired search criteria. The code retrieves an array of PurchaseOrder objects that match the specified criteria.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nPurchaseOrder[] purchaseOrderCollection = OrderContext.Current.Search<PurchaseOrder>(parameters, searchOptions);\n```\n\n----------------------------------------\n\nTITLE: Modifying Application Features via appsettings.json\nDESCRIPTION: This snippet shows how to modify or add new features for the application using the appsettings.json file. The `Features` section under `ApplicationOptions` allows defining or overriding features by specifying the feature name, state (enabled/disabled), and the fully qualified type name of the feature.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/feature-specific-commerce-configurations.md#_snippet_5\n\nLANGUAGE: JSON\nCODE:\n```\n{\n       \"ApplicationOptions\":{\n          \"Features\":{\n             \"SerializedCarts\":{\n                \"Feature\":\"SerializedCarts\",\n                \"State\":1, // 0 is enabled, 1 for disabled\n                \"Type\":\"Mediachase.Commerce.Core.Features.SerializedCarts, Mediachase.Commerce\"\n             },\n             \"MyownFeature\":{\n                \"Feature\":\"CustomFeatureName\",\n                \"State\":1,\n                \"Type\":\"<CustomFeatureTypeName>, Mediachase.Commerce\"\n             }\n          }\n       }\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding a Variant to a Product in C#\nDESCRIPTION: This code snippet adds a new variant to a product using the IRelationRepository.  It first retrieves an instance of the repository. Then, it creates a new ProductVariation object, setting the Parent and Child ContentReferences and a SortOrder. Finally, it calls UpdateRelation to add the new variation to the repository. The method requires ContentReferences for both the product and the variant.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/product-variants.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddVariation(ContentReference referenceToProduct, ContentReference referenceToVariation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var newVariation = new ProductVariation\n          {\n            SortOrder = 100,\n            Parent = referenceToProduct,\n            Child = referenceToVariation\n          };\n        relationRepository.UpdateRelation(newVariation);\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating a New SKU in Optimizely Customized Commerce (C#)\nDESCRIPTION: This code snippet demonstrates how to programmatically create a new SKU (CatalogContentTypeSample) within the Optimizely Customized Commerce catalog. It retrieves an instance of IContentRepository, creates a new SKU as a child of a specified parent node, sets properties like Code, SeoUri, and Description, and then publishes the new content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-content.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic ContentReference CreateNewSku(ContentReference linkToParentNode)\n      {\n        var contentRepository = ServiceLocator.Current.GetInstance<IContentRepository>();\n        //Create a new instance of CatalogContentTypeSample that will be a child to the specified parentNode.\n        var newSku = contentRepository.GetDefault<CatalogContentTypeSample>(linkToParentNode);\n        //Set some required properties.\n        newSku.Code = \"MyNewCode\";\n        newSku.SeoUri = \"NewSku.aspx\";\n        //Set the description\n        newSku.Description = \"This new SKU is great\";\n        //Publish the new content and return its ContentReference.\n        return contentRepository.Save(newSku, SaveAction.Publish, AccessLevel.NoAccess);\n      }\n```\n\n----------------------------------------\n\nTITLE: AddToCart Action in CartController (C#)\nDESCRIPTION: This C# code snippet represents the AddToCart action in the CartController. It receives the product code and a list of selected package items. It then adds the item to the cart using the CartService, applies discounts, saves the cart, and tracks the cart changes. Finally, it returns the MiniCartDetails.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[HttpPost]\npublic async Task<ActionResult> AddToCart(string code, IList<string> selectedPackageItems)\n{\n    ModelState.Clear();\n\n    if (Cart == null)\n    {\n        _cart = _cartService.LoadOrCreateCart(_cartService.DefaultCartName);\n    }\n\n    var result = _cartService.AddToCart(Cart, code, selectedPackageItems, 1);\n    if (result.EntriesAddedToCart)\n    {\n        _cartService.ApplyDiscounts(Cart);\n        _orderRepository.Save(Cart);\n        var change = new CartChangeData(CartChangeType.ItemAdded, code);\n        await _recommendationService.TrackCartAsync(HttpContext, new List<CartChangeData> { change });\n        return MiniCartDetails();\n    }\n\n    return StatusCode(StatusCodes.Status500InternalServerError, result.GetComposedValidationMessage());\n}\n```\n\n----------------------------------------\n\nTITLE: Process Payment (Customized Commerce 10.2.2-10.x) C#\nDESCRIPTION: This code snippet shows the `ProcessPayment` method signature using `IPaymentPlugin` in Customized Commerce versions 10.2.2-10.x. It takes an `IPayment` and a `string` (passed by reference) as input and returns a `bool` indicating success.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/payment-plugins.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nbool ProcessPayment(IPayment payment, ref string message);\n```\n\n----------------------------------------\n\nTITLE: Performing a Catalog Entry Search in Optimizely (C#)\nDESCRIPTION: This code demonstrates how to perform a catalog entry search in Optimizely Commerce Connect. It creates a CatalogEntrySearchCriteria, sets the search phrase to \"canon\", and then uses a SearchManager to execute the search. The search results are returned as an ISearchResults interface.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/search.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCatalogEntrySearchCriteria criteria = new CatalogEntrySearchCriteria();\n    criteria.SearchPhrase = \"canon\";\n    SearchManager manager = new SearchManager(AppContext.Current.ApplicationName);\n    SearchResults results = manager.Search(criteria);\n```\n\n----------------------------------------\n\nTITLE: Adding Recommendation Layout to _Layout.cshtml (Razor)\nDESCRIPTION: This C# Razor code integrates the recommendation layout into the main layout file (_Layout.cshtml). It inserts the HTML markup for the upper, left, right, and bottom recommendation sections within the `site-wrapper` div, ensuring they are displayed alongside the main content. This allows recommendations to be rendered dynamically in the specified locations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/an-api-overview.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n@{ Html.RenderAction(\"Index\", \"Navigation\"); }\n    <div class=\"quicksilver site-wrapper\">\n        <div class=\"main-area\">@RenderBody()</div>\n        <div class=\"recommendations recommendations-upper\"></div>\n        <div class=\"recommendations recommendations-left\"></div>\n        <div class=\"recommendations recommendations-right\"></div>\n        <div class=\"recommendations recommendations-bottom\"></div>\n    </div>\n    @{ Html.RenderAction(\"Index\", \"Footer\"); }\n```\n\n----------------------------------------\n\nTITLE: Filtering Content with Specific Currency in Optimizely\nDESCRIPTION: This code snippet shows how to filter catalog content to find items with a specific currency.  It uses the `Filter` method with the `DefaultPrice().UnitPrice.Currency.Match(currency)` to find items matching the currency passed in the 'currency' variable.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<VariationContent>()\n        .Filter(x => x.DefaultPrice().UnitPrice.Currency.Match(currency));\n```\n\n----------------------------------------\n\nTITLE: Update Market C#\nDESCRIPTION: Updates an existing market within the market system. The `UpdateMarket` method takes an `IMarket` object as a parameter, allowing modifications to be persisted.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/markets.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// Updates an existing market in the market system.\nvoid UpdateMarket(IMarket market);\n```\n\n----------------------------------------\n\nTITLE: Loading a Cart Optimizely C#\nDESCRIPTION: This snippet demonstrates how to load an existing shopping cart using the IOrderRepository.Load method.  It takes a customer ID and cart name as parameters and returns an ICart instance or null if no cart exists.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shopping-carts.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar  cart = orderRepository.Load<ICart>(customerId, \"Default\");\n```\n\n----------------------------------------\n\nTITLE: Working with Shipments in Optimizely - C#\nDESCRIPTION: This snippet demonstrates how to add and remove shipments from order forms using the IOrderRepository and IOrderGroupFactory. It shows how to create shipments, add them to order forms (including handling multiple forms in a cart), and then remove them from the forms' Shipments collection.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var orderGroupFactory = ServiceLocator.Current.GetInstance<IOrderGroupFactory>();\n    \n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    \n    //Create and add shipment to first form\n    var shipment = orderGroupFactory.CreateShipment(cart);\n    //pass in orderGroupFactory for unit testing as a from will be created if there is none o\n    cart.AddShipment(shipment, orderGroupFactory);\n    //Set address after adding to collection because of limitation in implementation\n    shipment.ShippingAddress = orderGroupFactory.CreateOrderAddress(cart);\n    \n    //Create and add shipment to second form (b2b)\n    var secondForm = cart.Forms.Last();\n    var shipment = orderGroupFactory.CreateShipment(cart);\n    cart.AddShipment(secondForm, shipment);\n    //Set address after adding to collection becasue of limitation in implementation\n    shipment.ShippingAddress = orderGroupFactory.CreateOrderAddress(cart);\n    \n    //Remove shipment from first form\n    cart.GetFirstForm().Shipments.Remove(shipment);\n    \n    //Remove shipment from second form (b2b)\n    cart.Forms.Last().Shipments.Remove(shipment);\n```\n\n----------------------------------------\n\nTITLE: Calculating Line Item Prices C#\nDESCRIPTION: This snippet calculates both the extended price and discounted price of a line item. It takes an ILineItem, Currency, and ILineItemCalculator as input and prints both prices to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-line-item-calculator.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetLineItemPrices(ILineItem lineItem, Currency currency, ILineItemCalculator lineItemCalculator)\n          {\n            var lineItemdPrices = lineItemCalculator.GetLineItemPrices(lineItem, currency);\n            Debug.WriteLine(\"Extended price for '{0}': {1}\", lineItem.Code, lineItemdPrices.ExtendedPrice);\n            Debug.WriteLine(\"Discounted price for '{0}': {1}\", lineItem.Code, lineItemdPrices.DiscountedPrice);\n          }\n```\n\n----------------------------------------\n\nTITLE: Completing Shipment using IShipmentProcessor in C#\nDESCRIPTION: This snippet illustrates how to complete a shipment using the CompleteShipment method of the IShipmentProcessor interface. It requires an IOrderRepository, IShipmentProcessor, and a list of IShipment instances. The orderGroupId and shipments list are used to complete the shipments for a purchase order.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_22\n\nLANGUAGE: C#\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipmentProcessor shipmentProcessor;\n    IList<Ishipment> shipments;\n    \n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    shipmentProcessor.CompleteShipment(purchaseOrder, shipments);\n```\n\n----------------------------------------\n\nTITLE: Loading Purchase Order in C#\nDESCRIPTION: This snippet demonstrates how to load a PurchaseOrder using the IOrderRepository.Load method. It retrieves a purchase order based on its orderGroupId.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_20\n\nLANGUAGE: C#\nCODE:\n```\nvar purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n```\n\n----------------------------------------\n\nTITLE: Filtering Parent Node Relations in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to retrieve parent node relations based on a content reference ID. It uses the `Filter` method along with `ParentNodeRelations().MatchContained(c => c.ID, contentReference.ID)` to filter the content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<BundleContent>()\n        .Filter(x => x.ParentNodeRelations().MatchContained(c => c.ID, contentReference.ID));\n```\n\n----------------------------------------\n\nTITLE: Custom Price Optimizer Implementation in C#\nDESCRIPTION: This C# code snippet demonstrates a custom implementation of IPriceOptimizer. It groups prices by key properties and selects the highest price based on UnitPrice.Amount. It then returns a collection of OptimizedPriceValue objects. This custom optimizer allows modification of the price selection logic, potentially saving the highest overlapped price instead of the default lowest price.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricing.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n`public class CustomPriceOptimizer : IPriceOptimizer\n      {\n        public IEnumerable<IOptimizedPriceValue> OptimizePrices(IEnumerable<IPriceValue> prices)\n          {\n            return prices.GroupBy(p => new { p.CatalogKey, p.MinQuantity, p.MarketId, p.ValidFrom, p.CustomerPricing, p.UnitPrice.Currency })\n              .Select(g => g.OrderByDescending(c => c.UnitPrice.Amount).First()).Select(p => new OptimizedPriceValue(p, null));\n          }\n      }`\n```\n\n----------------------------------------\n\nTITLE: Order Group Calculator Class Definition C#\nDESCRIPTION: This code defines a class `OrderGroupCalculatorOverridingDefault` that inherits from `DefaultOrderGroupCalculator`. It overrides several `Validate` methods to enforce that monetary values like total, subtotal, handling, shipping subtotal, and tax total must be greater than 0. Each overridden method checks if the `Money.Amount` is less than or equal to 0, and if so, throws a `ValidationException`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderGroupCalculatorOverridingDefault : DefaultOrderGroupCalculator\n    {\n        public OrderGroupCalculatorOverridingDefault(\n           IOrderFormCalculator orderFormCalculator,\n           IReturnOrderFormCalculator returnOrderFormCalculator,\n           IMarketService marketService)\n           : base(orderFormCalculator, returnOrderFormCalculator, marketService)\n        { }\n    \n        protected override void ValidateTotal(Money money)\n        {\n          if (money.Amount <= 0)\n          {\n             throw new ValidationException(\"Total must be greater than 0\");\n          }\n        }\n    \n        protected override void ValidateSubTotal(Money money)\n        {\n          if (money.Amount <= 0)\n          {\n             throw new ValidationException(\"Subtotal must be greater than 0\");\n          }\n        }\n    \n        protected override void ValidateHandlingTotal(Money money)\n        {\n          if (money.Amount <= 0)\n          {\n             throw new ValidationException(\"Handling total must be greater than 0\");\n          }\n        }\n    \n        protected override void ValidateShippingSubTotal(Money money)\n        {\n          if (money.Amount <= 0)\n          {\n             throw new ValidationException(\"Shipping subtotal must be greater than 0\");\n          }\n        }\n    \n        protected override void ValidateTaxTotal(Money money)\n        {\n          if (money.Amount <= 0)\n          {\n             throw new ValidationException(\"Tax total must be greater than 0\");\n          }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipping Methods using ShippingManager in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve available shipping methods for a cart using the ShippingManager class and the GetShippingMethods method. The method requires the language name to retrieve locale-specific shipping methods.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nShippingMethodDto methods = ShippingManager.GetShippingMethods(SiteContext.Current.LanguageName);\n```\n\n----------------------------------------\n\nTITLE: Create Optimizely Commerce Project with .NET CLI\nDESCRIPTION: This snippet demonstrates creating a new Optimizely Commerce project, navigating to the project directory, creating CMS and Commerce databases, and adding an admin user using the .NET CLI and Optimizely extensions.  It requires the Optimizely templates and CLI tools to be installed. Parameters include project name, server name, database name, username, password, and email.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/creating-your-project.md#_snippet_0\n\nLANGUAGE: dotnetcli\nCODE:\n```\ndotnet new epi-commerce-empty --name ProjectName\ncd projectname\ndotnet-episerver create-cms-database ProjectName.csproj -S . -E\ndotnet-episerver create-commerce-database ProjectName.csproj -S . -E --reuse-cms-user\ndotnet-episerver add-admin-user ProjectName.csproj -u username -p password -e [email protected] -c EcfSqlConnection\n```\n\n----------------------------------------\n\nTITLE: Listen for Catalog Content Updates in Optimizely\nDESCRIPTION: This code snippet demonstrates how to listen for updates to catalog content in Optimizely. It overrides the GetIndexContentAction and GetIndexContentAndDescendantsAction methods to provide custom indexing logic when catalog content is updated. You should create POCO objects here and call the indexer.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-poco-objects-instead-of-catalogcontentbase.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SiteCatalogKeyEventListener : CatalogContentEventListener\n      {\n        public SiteCatalogKeyEventListener(\n          ReferenceConverter referenceConverter,\n          IContentRepository contentRepository,\n          IClient client,\n          CatalogEventIndexer indexer,\n          CatalogContentClientConventions clientConventions)\n          : base(referenceConverter, contentRepository, client, indexer, clientConventions)\n            {\n            }\n    \n        protected override Action<IContent> GetIndexContentAction()\n          {\n            return (content) =>\n              {\n                // Create the POCO class here, and call the indexer\n              };\n          }\n    \n        protected override Action<IContent> GetIndexContentAndDescendantsAction()\n          {\n            return (content) =>\n              {\n                // Create the POCO class here, and call the indexer\n              };\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding/Removing Payments from Order Form C#\nDESCRIPTION: This snippet demonstrates how to add and remove payments from an order form in Optimizely Commerce Connect. It utilizes IOrderRepository and IOrderGroupFactory to create payments, associate them with order forms, and remove them as needed.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var orderGroupFactory = ServiceLocator.Current.GetInstance<IOrderGroupFactory>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    \n    //Create and add payment to first form\n    var creditCard = orderGroupFactory.CreateCardPayment(cart);\n    var invoice = orderGroupFactory.CreatePayment(cart);\n    //pass in orderGroupFactory for unit testing as a from will be created if there is none on the cart.\n    cart.AddPayment(creditCard, orderGroupFactory);\n    cart.AddPayment(invoice, orderGroupFactory);\n    //Set address after adding to collection becasue of limitation in implementation\n    creditCard.BillingAddress = orderGroupFactory.CreateOrderAddress(cart);\n    \n    //Create and add payment to second form (b2b)\n    var secondForm = cart.Forms.Last();\n    var creditCard = orderGroupFactory.CreateCardPayment(cart);\n    var invoice = orderGroupFactory.CreatePayment(cart);\n    cart.AddPayment(secondForm, creditCard);\n    cart.AddPayment(secondForm, invoice);\n    //Set address after adding to collection becasue of limitation in implementation\n    creditCard.BillingAddress = orderGroupFactory.CreateOrderAddress(cart);\n    \n    //Remove payment from first form\ncart.GetFirstForm().Payments.Remove(payment);\n    \n    //Remove payment from second form (b2b)\ncart.Forms.Last().Payments.Remove(payment);\n```\n\n----------------------------------------\n\nTITLE: Percentage Promotion Processor Sample C#\nDESCRIPTION: This code demonstrates a sample percentage-based promotion processor for EPiServer Commerce. It inherits from `EntryPromotionProcessorBase<PercentagePromotionSample>` and uses `CollectionTargetEvaluator`, `FulfillmentEvaluator`, and `LocalizationService` to evaluate the promotion. The processor evaluates the promotion against an order form, checks fulfillment status, and applies the percentage discount.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-promotions.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Commerce.Extensions;\n    using EPiServer.Commerce.Marketing;\n    using EPiServer.Framework.Localization;\n    using EPiServer.ServiceLocation;\n    using System.Collections.Generic;\n    using System.Linq;\n    \n    namespace CodeSamples.EPiServer.Commerce.Marketing\n      {\n        #region PercentagePromotionProcessorSample\n    \n        /// <summary>\n        /// Sample of a promotion processor for <see cref=\"PercentagePromotionSample\"/>.\n        /// </summary>\n        [ServiceConfiguration(Lifecycle = ServiceInstanceScope.Singleton)]\n        public class PercentagePromotionProcessorSample : EntryPromotionProcessorBase<PercentagePromotionSample>\n          {\n            private readonly CollectionTargetEvaluator _targetEvaluator;\n            private readonly FulfillmentEvaluator _fulfillmentEvaluator;\n            private readonly LocalizationService _localizationService;\n    \n            /// <summary>\n            /// Creates a new instance of a <see cref=\"PercentagePromotionProcessorSample\"/>.\n            /// </summary>\n            /// <param name=\"targetEvaluator\">The service that is used to evaluate an order against a promotion's target properties.</param>\n            /// <param name=\"fulfillmentEvaluator\">The service that is used to evaluate the fulfillment status of the promotion.</param>\n            /// <param name=\"localizationService\">The service that is used to get localized strings.</param>\n            public PercentagePromotionProcessorSample(\n                CollectionTargetEvaluator targetEvaluator, \n                FulfillmentEvaluator fulfillmentEvaluator,\n                LocalizationService localizationService)\n              {\n                _targetEvaluator = targetEvaluator;\n                _fulfillmentEvaluator = fulfillmentEvaluator;\n                _localizationService = localizationService;\n              }\n    \n            /// <summary>\n            /// Evaluates a promotion against an order form.\n            /// </summary>\n            /// <param name=\"promotionData\">The promotion to evaluate.</param>\n            /// <param name=\"context\">The promotion processor context.</param>\n            /// <returns>\n            /// A <see cref=\"RewardDescription\" /> telling whether the promotion was fulfilled,\n            /// which items the promotion was applied to and to which discount percentage.\n            /// </returns>\n            protected override RewardDescription Evaluate(PercentagePromotionSample promotionData, PromotionProcessorContext context)\n              {\n                var lineItems = GetLineItems(context.OrderForm);\n                var condition = promotionData.Condition;\n                var applicableCodes = _targetEvaluator.GetApplicableCodes(lineItems, condition.Items, condition.MatchRecursive);\n                var fulfillmentStatus = _fulfillmentEvaluator.GetStatusForBuyQuantityPromotion(\n                    applicableCodes, \n                    lineItems,\n                    condition.RequiredQuantity,\n                    condition.PartiallyFulfilledThreshold);\n                var affectedEntries = context.EntryPrices.ExtractEntries(applicableCodes, condition.RequiredQuantity);\n                return RewardDescription.CreatePercentageReward(\n                    fulfillmentStatus,\n                    GetRedemptions(applicableCodes, promotionData, context),\n                    promotionData,\n                    promotionData.PercentageDiscount,\n                    fulfillmentStatus.GetRewardDescriptionText(_localizationService));\n              }\n    \n            /// <summary>\n            /// Gets the items related to a promotion.   \n            /// </summary>\n            /// <param name=\"promotionData\">The promotion data to get items for.</param>\n            /// <returns>\n            /// The promotion condition and reward items.\n            /// </returns>\n            protected override PromotionItems GetPromotionItems(PercentagePromotionSample promotionData)\n              {\n                var specificItems = new CatalogItemSelection(\n                    promotionData.Condition.Items, \n                    CatalogItemSelectionType.Specific,\n                    promotionData.Condition.MatchRecursive);\n                return new PromotionItems(promotionData, specificItems, specificItems);\n              }\n    \n            /// <summary>\n            /// Verify that the current promotion can potentially be fulfilled.\n            /// </summary>\n            /// <remarks>\n            /// This method is intended to be a very quick pre-check to avoid doing more expensive operations.\n            /// In this case that a positive discount percentage has been set, and that the cart is not empty.\n            /// </remarks>\n            /// <param name=\"promotionData\">The promotion to evaluate.</param>\n            /// <param name=\"context\">The context for the promotion processor evaluation.</param>\n            /// <returns>\n            /// <c>true</c> if the current promotion can potentially be fulfilled; otherwise, <c>false</c>.\n            /// </returns>\n            protected override bool CanBeFulfilled(PercentagePromotionSample promotionData, PromotionProcessorContext context)\n              {\n                if (promotionData.PercentageDiscount <= 0)\n                  {\n                    return false;\n                  }\n                var lineItems = GetLineItems(context.OrderForm);\n                if (!lineItems.Any())\n                  {\n                    return false;\n                  }\n                return true;\n              }\n    \n            /// <summary>\n            /// Gets all <see cref=\"AffectedItem\"/>s affected by a given promotion.\n            /// </summary>\n            /// <param name=\"affectedItems\">A collection of <see cref=\"PriceEntry\"/>s to be checked against a promotion.</param>\n            /// <param name=\"promotion\">The promotion used to evaluate the line items.</param>\n            /// <returns>A list of applicable <see cref=\"RedemptionDescription\"/>s</returns>\n            private IEnumerable<RedemptionDescription> GetRedemptions(IEnumerable<string> applicableCodes, PercentagePromotionSample promotionData, PromotionProcessorContext context)\n              {\n                var redemptions = new List<RedemptionDescription>();\n                var requiredQuantity = promotionData.Condition.RequiredQuantity;\n                var maxRedemptions = GetMaxRedemptions(promotionData.RedemptionLimits);\n                for (int i = 0; i < maxRedemptions; i++)\n                  {\n                    var affectedEntries = context.EntryPrices.ExtractEntries(applicableCodes, requiredQuantity);\n                    if (affectedEntries == null)\n                      {\n                        break;\n                      }\n                    redemptions.Add(CreateRedemptionDescription(affectedEntries));\n                  }\n                return redemptions;\n              }\n          }\n        #endregion\n      }\n```\n\n----------------------------------------\n\nTITLE: Storing Shipping Method Information in Line Items (C#)\nDESCRIPTION: This code snippet shows how to store information about a selected shipping method in the line items of a cart. It retrieves the shipping method based on its ID, then iterates through the line items to set the `ShippingMethodName` and `ShippingMethodId` properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping-methods.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nShippingMethodDto methods = ShippingManager.GetShippingMethods(SiteContext.Current.LanguageName); \n    \n    ShippingMethodDto.ShippingMethodRow row = methods.ShippingMethod.FindByShippingMethodId(new Guid(ShippingRatesList.SelectedValue)); \n    foreach (LineItem lineItem in CartHelper.LineItems) \n      { \n        lineItem.ShippingMethodName = row.DisplayName; \n        lineItem.ShippingMethodId = row.ShippingMethodId; \n      }\n```\n\n----------------------------------------\n\nTITLE: Filtering Child Node Relations in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to retrieve child node relations based on a content reference ID. It uses the `Filter` method along with `ChildNodeRelations().MatchContained(c => c.ID, contentReference.ID)` to filter the content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<BundleContent>()\n        .Filter(x => x.ChildNodeRelations().MatchContained(c => c.ID, contentReference.ID));\n```\n\n----------------------------------------\n\nTITLE: Defining Inventory Update Event Handler in C#\nDESCRIPTION: Defines an event handler for inventory updates using the EventHandler delegate and InventoryUpdateEventArgs. This allows subscribing methods to be notified when inventory updates occur.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/events.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic event EventHandler<InventoryUpdateEventArgs> InventoryUpdateEvent;\n```\n\n----------------------------------------\n\nTITLE: Implementing ICustomerCustomFieldsHandler (C#)\nDESCRIPTION: This C# code demonstrates how to implement `ICustomerCustomFieldsHandler` to create and populate custom fields for customers in ODP. It includes creating fields of different types (string, timestamp, integer, decimal, boolean) and retrieving their values from a `ContactEntity`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customized-commerce-odp.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[ServiceConfiguration(ServiceType = typeof (ICustomerCustomFieldsHandler))]\npublic class CustomCustomers: ICustomerCustomFieldsHandler {\n  public IEnumerable < SchemaObjectCreateField > CreateFields() {\n    return new [] {\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_teststring\",\n          DisplayName = \"Mark ODP Connector string\",\n          PublicRead = true,\n          Type = \"string\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_testtimestamp\",\n          DisplayName = \"Mark ODP Connector timestamp\",\n          PublicRead = true,\n          Type = \"timestamp\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_testinteger\",\n          DisplayName = \"Mark ODP Connector integer\",\n          PublicRead = true,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_testdecimal\",\n          DisplayName = \"Mark ODP Connector decimal\",\n          PublicRead = false,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_testboolean\",\n          DisplayName = \"Mark ODP Connector boolean\",\n          PublicRead = false,\n          Type = \"boolean\"\n      }\n    };\n  }\n\n  public Dictionary < string, object > GetFieldValues(ContactEntity contact) {\n    var values = new Dictionary < string,\n      object > ();\n    var testString = contact.Properties.GetValue < string > (\"mark_customers_teststring\", null);\n    if (!string.IsNullOrEmpty(testString)) {\n      values.Add(\"mark_customers_teststring\", testString);\n    }\n\n    var testTimestamp = contact.Properties.GetValue < DateTime ? > (\"mark_customers_testtimestamp\", null);\n    if (testTimestamp != null) {\n      values.Add(\"mark_customers_testtimestamp\", testTimestamp.Value.ToString(\"s\"));\n    }\n\n    var testInteger = contact.Properties.GetValue < int ? > (\"mark_customers_testinteger\", null);\n    if (testInteger != null) {\n      values.Add(\"mark_customers_testinteger\", testInteger.Value);\n    }\n\n    var testDecimal = contact.Properties.GetValue < decimal ? > (\"mark_customers_testdecimal\", null);\n    if (testDecimal != null) {\n      values.Add(\"mark_customers_testdecimal\", testDecimal.Value);\n    }\n\n    var testBoolean = contact.Properties.GetValue(\"mark_customers_testboolean\", false);\n    values.Add(\"mark_customers_testboolean\", testBoolean);\n\n    return values;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Warehouse in Optimizely Commerce (C#)\nDESCRIPTION: This code snippet demonstrates how to update a warehouse to mark it as a pickup location in Optimizely Commerce 12 or higher. It uses the IWarehouseRepository to retrieve the warehouse, create a writable clone, set the IsPickupLocation property to true, and save the changes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\npublic void UpdateWarehouse(string warehouseCode)\n      {\n        var warehouseRepository = ServiceLocator.Current.GetInstance<IWarehouseRepository>();\n        var warehouse = warehouseRepository.Get(warehouseCode); // It's a read-only object\n        var writableCloneWarehouse = warehouse.CreateWritableClone();\n        writableCloneWarehouse.IsPickupLocation = true;\n        warehouseRepository.Service.Save(writableCloneWarehouse);\n      }\n```\n\n----------------------------------------\n\nTITLE: Applying Product Content Conventions in Optimizely (C#)\nDESCRIPTION: Applies custom conventions to ProductContent for indexing purposes. This example excludes the 'Variations' field and includes 'VariationContents', 'DefaultPrice', and 'Prices' fields during the indexing process, modifying which fields are exposed for indexing. The convention builder is used to configure these settings.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n        protected override void ApplyProductContentConventions(TypeConventionBuilder<ProductContent> conventionBuilder)\n          {\n            base.ApplyProductContentConventions(conventionBuilder);\n            conventionBuilder\n              .ExcludeField(x => x.Variations())\n              .IncludeField(x => x.VariationContents())\n              .IncludeField(x => x.DefaultPrice())\n              .IncludeField(x => x.Prices());\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for Catalog Key Events (Prices) in C#\nDESCRIPTION: Registers a method to listen for catalog key events specifically related to price updates from the Events engine. It retrieves the event based on the CatalogKeyEventGuid, subscribes a handler method (CatalogKeyEventUpdated) to it, and deserializes the event arguments before processing. This includes handling PriceUpdateEventArgs to trigger RemotePriceUpdated.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/events.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic void AddEvent()\n      {\n        Event ev = Event.Get(CatalogKeyEventBroadcaster.CatalogKeyEventGuid);\n        ev.Raised += CatalogKeyEventUpdated;\n      }\n    \n    private void CatalogKeyEventUpdated(object sender, EventNotificationEventArgs e)\n      {\n        var eventArgs = (CatalogKeyEventArgs)DeSerialize((byte[])e.Param);\n        var priceUpdateEventArgs = eventArgs as PriceUpdateEventArgs;\n        if (priceUpdateEventArgs != null)\n          {\n             RemotePriceUpdated(sender, priceUpdateEventArgs);\n          }\n      }\n    \n    private void RemotePriceUpdated(object sender, PriceUpdateEventArgs priceUpdatedEventArgs)\n      {\n         //Your action when prices are updated remotely.\n      }\n    \n    protected virtual CatalogKeyEventArgs DeSerialize(byte[] buffer)\n      {\n         var formatter = new BinaryFormatter();\n         var stream = new MemoryStream(buffer);\n         return formatter.Deserialize(stream) as CatalogKeyEventArgs;\n      }\n```\n\n----------------------------------------\n\nTITLE: Find Orders with OrderSearchFilter in C#\nDESCRIPTION: This C# code snippet defines a method to find orders with a specific OrderSearchFilter for a specific type of IOrderGroup. It takes an OrderSearchFilter as input and returns OrderSearchResults. The method is generic, allowing for different types of IOrderGroup to be searched.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-abstractions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n     /// Finds orders with a specific <see cref=\"OrderSearchFilter\"/> for a specific <typeparamref name=\"TOrderGroup\"/>.\n     /// </summary>\n     /// <typeparam name=\"TOrderGroup\">The given order type for filter.</typeparam>\n     /// <param name=\"filter\">The search filter.</param>\n     /// <returns>The order search results.</returns>\n            OrderSearchResults Find(OrderSearchFilter filter) where TOrderGroup : class, IOrderGroup;\n```\n\n----------------------------------------\n\nTITLE: Connecting Content Type to Meta-Class with CatalogContentTypeAttribute (C#)\nDESCRIPTION: This code snippet demonstrates how to connect a content type to an existing meta-class in Optimizely Customized Commerce using the CatalogContentTypeAttribute. The MetaClassName property of the attribute is used to specify the name of the meta-class that should be connected to the content type.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-content.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Commerce.Catalog.ContentTypes;\n        using EPiServer.Commerce.Catalog.DataAnnotations;\n        \n        namespace CodeSamples.EPiServer.Commerce.Catalog.Provider\n          {\n            [CatalogContentType(MetaClassName = \"WineSKU\")]\n            public class CatalogContentTypeAttributeSample : VariationContent\n              {\n              }\n          }\n```\n\n----------------------------------------\n\nTITLE: Listing Prices with Paging in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve price details for a catalog entry with paging support using the IPriceDetailService.List() method. It takes a ContentReference, offset, and numberOfItems as input, and outputs the totalCount. It retrieves an instance of the IPriceDetailService and then calls the List method with the provided parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricing-examples.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic IList<IPriceDetailValue> ListPriceDetailValueWithPaging(ContentReference catalogContentReference, int offset, int numberOfItems, out int totalCount)\n      {\n        var priceDetailService = ServiceLocator.Current.GetInstance<IPriceDetailService>();\n    \n        // Gets price details for the CatalogEntry with paging\n        return priceDetailService.List(catalogContentReference, offset, numberOfItems, out totalCount);\n      }\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Return Line Item Calculation in C#\nDESCRIPTION: This code demonstrates how to override the default return line item calculation by inheriting from DefaultReturnLineItemCalculator.  This allows for custom implementations of extended price, discounted price, and sales tax calculations.  It overrides the CalculateExtendedPrice, CalculateDiscountedPrice and CalculateSalesTax methods.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-line-item-calculator.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReturnLineItemCalculatorOverridingDefault : DefaultReturnLineItemCalculator\n      {\n        public ReturnLineItemCalculatorOverridingDefault(ITaxCalculator taxCalculator) : base(taxCalculator)\n          { }\n        protected override Money CalculateExtendedPrice(IReturnLineItem lineItem, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateDiscountedPrice(IReturnLineItem returnLineItem, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateSalesTax(IReturnLineItem returnLineItem, IMarket market, Currency currency, IOrderAddress shippingAddress)\n          {\n            return new Money(0, currency);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Adjusting Inventory Values in C#\nDESCRIPTION: Increments or decrements inventory values using the IInventoryService. This code retrieves an instance of IInventoryService and calls the Adjust method with a collection of InventoryChange objects. The changes parameter is an IEnumerable<InventoryChange> that specifies the adjustments to be made to the inventory.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\n// Incerements or decrements matching values in the inventory provider.\n    public void AdjustInventory(IEnumerable<InventoryChange> changes)\n      {\n        var inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.Adjust(changes);\n      }\n```\n\n----------------------------------------\n\nTITLE: Query Inventories by Partial Key with Range in C#\nDESCRIPTION: This snippet shows how to query inventory records by partial key using pagination (offset and count). The method obtains an IInventoryService instance and calls the QueryByPartialKey method, providing partialKeys (IEnumerable<InventoryKey>), offset, count, and totalCount (out parameter). It returns an IEnumerable<InventoryRecord> of the matching records.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\n// List all inventory records matching an item in inventory key in specified range.\n    public IEnumerable<InventoryRecord> QueryInventoriesInRangeByPartialKey(IEnumerable<InventoryKey> partialKeys, int offset, int count, out int totalCount)\n    {\n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.QueryByPartialKey(partialKeys, offset, count, out totalCount);\n    }\n```\n\n----------------------------------------\n\nTITLE: Get Promotion Prices for Entries (C#)\nDESCRIPTION: This code demonstrates how to get promotion prices for a collection of entries. It retrieves instances of IPromotionEngine and ICurrentMarket, gets the current market, and then calls GetDiscountPrices with the entry links, market, and default currency. It requires Optimizely.Commerce.Marketing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotions-engine.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar promotionEngine = ServiceLocator.Current.GetInstance<IPromotionEngine>();\n    var currentMarket = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n    var market = currentMarket.GetCurrentMarket();\n    IEnumerable<DiscountedEntry> discountedEntries = promotionEngine.GetDiscountPrices(entryLinks, market, market.DefaultCurrency);\n```\n\n----------------------------------------\n\nTITLE: Create Interval Filter in C#\nDESCRIPTION: This snippet demonstrates how to create an interval filter that returns elements where the 'StartDate' property falls between two given dates (`from` and `to`). It utilizes the IntervalFilterElement constructor.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-and-sorting.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nFilterElement filter = new IntervalFilterElement(\"StartDate\", from, to)\n```\n\n----------------------------------------\n\nTITLE: Loading a Product using Commerce Connect in Optimizely CMS (C#)\nDESCRIPTION: This code snippet demonstrates how to load a product from Optimizely Commerce Connect into the Optimizely CMS using the `IContentLoader` and `ReferenceConverter`. It retrieves instances of these services from the service locator, converts a product ID from Commerce Connect to a content link, and then retrieves the product content using the CMS API. The example uses an arbitrary product ID of 1.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-content-provider.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//Get the currently configured content loader and reference converter from the service locator\n    var contentLoader = ServiceLocator.Current.GetInstance<IContentLoader>();\n    var referenceConverter = ServiceLocator.Current.GetInstance<ReferenceConverter>();\n    \n    //Get the correct product id as it's represented in EPiServer Commerce\n    //In this example we arbitrarily use the integer 1\n    var productIdFromCommerce = 1;\n    \n    //We use the content link builder to get the contentlink to our product\n    var productLink = referenceConverter.GetContentLink(productIdFromCommerce, CatalogContentType.CatalogEntry, 0);\n    \n    //Get the product using CMS API\n    var productContent = contentLoader.Get<CatalogContentBase>(productLink);\n    \n    //The commerce content name represents the name of the product\n    var productName = productContent.Name;\n```\n\n----------------------------------------\n\nTITLE: Accessing Shipping Methods and Rates in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve and filter available shipping methods based on the current language, and then calculates the shipping rates for each method based on the cart's shipping address. It uses the `ShippingManager` to retrieve shipping methods and `IShippingGateway` to get the rates.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping-methods.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//Get the list of all shipping methods to be filtered \n    ShippingMethodDto methods = ShippingManager.GetShippingMethods(SiteContext.Current.LanguageName);  \n    \n    // filter the list for only methods that apply to this particular cart's shipping address \n    List<ShippingMethodDto.ShippingMethodRow> shippingRows = new List<ShippingMethodDto.ShippingMethodRow>(); \n    \n    foreach (ShippingMethodDto.ShippingMethodRow method in methods.ShippingMethod.Rows) \n      {\n        shippingRows.Add(method); \n      }\n    \n    List<ShippingRate> list = new List<ShippingRate>(); \n    \n    foreach (ShippingMethodDto.ShippingMethodRow row in shippingRows) \n      { \n        Type type = Type.GetType(row.ShippingOptionRow.ClassName); \n        string message = String.Empty; \n        IShippingGateway provider = (IShippingGateway)Activator.CreateInstance(type); \n    \n        List<LineItem> items = new List<LineItem>(); \n    \n        foreach(LineItem lineItem in CartHelper.LineItems) \n          {\n            items.Add(lineItem); \n          }\n    \n        if (items.Count > 0) \n          {\n            list.Add(provider.GetRate(row.ShippingMethodId, items.ToArray(), ref message)); \n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Configure Simplified Catalog Listing Threshold in Optimizely Commerce (Alternative Syntax)\nDESCRIPTION: This code snippet shows an alternative syntax for configuring the `SimplifiedCatalogListingThreshold` in Optimizely Commerce. The functionality remains the same as the previous snippet; it configures the threshold for activating the simplified UI mode in catalog listings.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/user-interface-configuration.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n`\"Commerce\": {\n  \"CatalogOptions\": {\n    \"SimplifiedCatalogListingThreshold \": 2000`\n```\n\n----------------------------------------\n\nTITLE: Extending CatalogIndexer in Optimizely Connect (C#)\nDESCRIPTION: This code snippet demonstrates how to extend the `CatalogIndexer` class to add custom fields to the catalog index in Optimizely Commerce Connect. It overrides the `OnCatalogEntryIndex` method to add a 'featured' field to products containing the word 'apple'.  It requires `Mediachase.Search` and `Mediachase.Search.Extensions.Indexers` namespaces.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customizing-search.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCatalogIndexer : Mediachase.Search.Extensions.Indexers.CatalogIndexBuilder\n      {\n        /// <summary>\n        /// Called when catalog entry is indexed. Override this method to add some extra fields.\n        /// </summary>\n        /// <param name=\"document\">The document.</param>\n        /// <param name=\"entry\">The entry.</param>\n        /// <param name=\"language\"></param>\n        protected override void OnCatalogEntryIndex(ref SearchDocument document, \n        CatalogEntryDto.CatalogEntryRow entry, string language)\n          {\n            // Example, add all apple products as featured\n            if(entry.Name.Contains(\"apple\")) document.Add(new SearchField(\"featured\", true));\n            base.OnCatalogEntryIndex(ref document, entry, language);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Migrating Inventory Data (CC 10-)\nDESCRIPTION: This SQL script migrates data from the WarehouseInventory table to the InventoryService table for Customized Commerce versions 10 and lower. It includes ApplicationId in the insert statement and join condition. The data is transformed to fit the new schema, calculating quantities and handling date conversions.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/database-changes-for-inventory-service.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\ninsert into [dbo].[InventoryService]\n     (\n        [ApplicationId],\n        [CatalogEntryCode],\n        [WarehouseCode],\n        [IsTracked],\n        [PurchaseAvailableQuantity],\n        [PreorderAvailableQuantity],\n        [BackorderAvailableQuantity],\n        [PurchaseRequestedQuantity],\n        [PreorderRequestedQuantity],\n        [BackorderRequestedQuantity],\n        [PurchaseAvailableUtc],\n        [PreorderAvailableUtc],\n        [BackorderAvailableUtc],\n        [AdditionalQuantity],\n        [ReorderMinQuantity]\n      )\n    select\n      wi.[ApplicationId],\n      wi.[CatalogEntryCode],\n      wi.[WarehouseCode],\n      cast(case wi.[InventoryStatus] when 1 then 1 else 0 end as bit) as [IsTracked],\n      wi.[InStockQuantity] - wi.[ReservedQuantity] as [PurchaseAvailableQuantity],\n      wi.[PreorderQuantity] as [PreorderAvailableQuantity],\n      wi.[BackorderQuantity] as [BackorderAvailableQuantity],\n      0 as [PurchaseRequestedQuantity],\n      0 as [PreorderRequestedQuantity],\n      0 as [BackorderRequestedQuantity],\n      ce.[StartDate] as [PurchaseAvailableDate],\n      case\n        when wi.[AllowPreorder] = 1 and wi.[PreorderAvailabilityDate] < ce.[StartDate] then \n        wi.[PreorderAvailabilityDate]\n      else ce.[StartDate]\n    end as [PreorderAvailableUtc],\n      wi.[BackorderAvailabilityDate] as [BackorderAvailableUtc],\n      wi.[ReservedQuantity] as [AdditionalQuantity],\n      wi.[ReorderMinQuantity]\n    from [dbo].[WarehouseInventory] wi\n    join [dbo].[CatalogEntry] ce on wi.[ApplicationId] = ce.[ApplicationId] and wi.[CatalogEntryCode] = ce.[Code]\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Discount in C#\nDESCRIPTION: This method calculates the total discount for an order form. It includes order-level discounts, line item discounts, and shipment discounts for all line items and shipments. The order form, currency, and IOrderFormCalculator are required, and the total discount is written to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetDiscountTotal(IOrderForm orderForm, Currency currency, IOrderFormCalculator orderFormCalculator)\n          {\n            var discountTotal = orderFormCalculator.GetDiscountTotal(orderForm, currency);\n            Debug.WriteLine(\"Discount total for order form '{0}': {1}\", orderForm.OrderFormId, discountTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Update Placed Price in Cart - C#\nDESCRIPTION: This code snippet illustrates how to update the placed price of line items in a cart using IPlacedPriceProcessor. It retrieves a cart, and then updates the placed price for all line items in the cart and for an individual line item, reflecting any price changes that may have occurred since the item was added.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var placedPriceProcessor = ServiceLocator.Current.GetInstance<IPlacedPriceProcessor>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart(contactId, \"Default\");\n    var validationIssues = new Dictionary<ILineItem, ValidationIssue>();\n    \n    //Update all placed prices on the cart\n    cart.UpdatePlacedPriceOrRemoveLineItems(PrincipalInfo.CurrentPrincipal.GetCustomerContact(),\n      (item, issue) => validationIssues.Add(item, issue), placedPriceProcessor);\n    \n    //Update line item placed price\n    var lineItem = cart.GetAllLineItems().First();\n    lineItem.UpdatePlacedPrice(PrincipalInfo.CurrentPrincipal.GetCustomerContact(), cart.Market,\n      cart.Currency,(item, issue) => validationIssues.Add(item, issue), placedPriceProcessor);\n    \n    //Update line item placed price\n    var lineItem = cart.GetAllLineItems().First();\n    placedPriceProcessor.UpdatePlacedPrice(lineItem, PrincipalInfo.CurrentPrincipal.GetCustomerContact(),\n      cart.Market, cart.Currency,(item, issue) => validationIssues.Add(item, issue));\n```\n\n----------------------------------------\n\nTITLE: Browsing Catalogs and Categories with ICatalogSystem in C#\nDESCRIPTION: This code snippet demonstrates how to browse catalogs and categories using the `ICatalogSystem` methods. It retrieves catalog lists and nodes, then uses `CatalogContext.Current.FindItemsDto` to find entries within specific catalogs and nodes. The code utilizes SQL internally.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-product-search.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Get catalog lists\n    CatalogDto catalogs = system.GetCatalogDto();\n    foreach (CatalogDto.CatalogRow catalog in catalogs.Catalog)\n      {\n        string catalogName = catalog.Name;\n        // Get Catalog Nodes\n        CatalogNodeDto nodes = system.GetCatalogNodesDto(catalogName);\n        foreach (CatalogNodeDto.CatalogNodeRow node in nodes.CatalogNode)\n          {\n            CatalogSearchParameters pars = new CatalogSearchParameters();\n            CatalogSearchOptions options = new CatalogSearchOptions();\n            options.CacheResults = true;\n            pars.CatalogNames.Add(catalogName);\n            pars.CatalogNodes.Add(node.Code);\n            var entries = CatalogContext.Current.FindItemsDto(pars,\n            options);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Price Update in SetCatalogEntryPrices Method (C#)\nDESCRIPTION: Demonstrates how to trigger the OnPriceUpdated event within a SetCatalogEntryPrices method responsible for updating catalog entry prices. It uses the _broadcaster object (an instance of CatalogKeyEventBroadcaster) to call the OnPriceUpdated method, passing the current object (this) as the source and constructing a PriceUpdateEventArgs with the catalog keys for which prices have been updated.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/events.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n_broadcaster.OnPriceUpdated(this, new PriceUpdateEventArgs(catalogKeys.ToList()));\n```\n\n----------------------------------------\n\nTITLE: Check If Order Is Paid C#\nDESCRIPTION: This code snippet demonstrates how to determine if a purchase order is paid using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `IsPaid()` extension method on the `purchaseOrder` instance.  This requires resolving dependencies for `IOrderRepository`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var isPaid = purchaseOrder.IsPaid();\n```\n\n----------------------------------------\n\nTITLE: Evaluate Single Entry (C#)\nDESCRIPTION: This snippet shows how to evaluate a single entry using the Promotion Engine to get reward descriptions.  Requires an entryLink of type ContentReference. Requires Optimizely.Commerce.Marketing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotions-engine.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nIEnumerable<RewardDescription> rewardDescriptions = ServiceLocator.Current.GetInstance<IPromotionEngine>().Evaluate(entryLink);\n```\n\n----------------------------------------\n\nTITLE: Managing Billing/Shipping Addresses C#\nDESCRIPTION: This snippet shows how to get and reuse billing and shipping addresses within an Optimizely Commerce Connect cart. It utilizes IOrderGroupFactory to create and assign addresses, demonstrating address reuse and handling region information.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var orderGroupFactory = ServiceLocator.Current.GetInstance<IOrderGroupFactory>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    \n    var address = orderGroupFactory.CreateOrderAddress(cart);\n    \n    //Use Id to reuse\n    address.Id = \"Billing\";\ncart.GetFirstForm().Payments.First().BillingAddress = address;\n    \n    //Since there is already an address with \"Billing\" it will use that address instead of creating another one on the order.\n    var reuseOtherAddress = orderGroupFactory.CreateOrderAddress(cart);\n    reuseOtherAddress.Id = \"Billing\";\ncart.GetFirstShipment().ShippingAddress = reuseOtherAddress;\n    \n    //Region Name and Region Code should be used when dealing with states\n    address.RegionName = \"California\";\n    address.RegionCode = \"CA\";\n    address.CountryCode = \"US\";\n    address.CountryName = \"United States\";\n```\n\n----------------------------------------\n\nTITLE: Delete Market by ID C#\nDESCRIPTION: Deletes a market from the market system based on its unique ID. The `DeleteMarket` method accepts a `MarketId` as input, identifying the market to be removed.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/markets.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// Deletes a market by ID.\nvoid DeleteMarket(MarketId marketId);\n```\n\n----------------------------------------\n\nTITLE: Send Tracking Request - JavaScript\nDESCRIPTION: This snippet sends a tracking request to Optimizely Recommendations using the `epiRecommendations.track()` function. It passes the `packageTrackingData`, along with rendering configurations defined in `Recommendations.render`. The configuration uses `sectionMappings` which map areas on the page with selectors to render recommended items, and define the number of items to render in a specific widget.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_7\n\nLANGUAGE: JavaScript\nCODE:\n```\nepiRecommendations.track(\n      packageTrackingData, \n      null, \n      Recommendations.render, \n      { sectionMappings: \n        [\n          { area: \"productAlternativesWidget\", selector: \".recommendations-right\", numberOfItemsToRender: 2 }, \n          { area: \"productCrossSellsWidget\", selector: \".recommendations-bottom\" }\n        ]\n      });\n```\n\n----------------------------------------\n\nTITLE: Using CommerceTracking Attribute in Controller (C#)\nDESCRIPTION: This code demonstrates how to use the CommerceTrackingAttribute to retrieve product recommendations within a controller action. The GetRecommendationGroups extension method retrieves the recommendations for the current context. The TrackingType is set to 'Home' for the start page.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[CommerceTracking(TrackingType.Home)]\n    public ViewResult Index(StartPage currentPage)\n      {\n        var recommendations = this.GetRecommendationGroups(); \n        ... \n      }\n```\n\n----------------------------------------\n\nTITLE: Broadcasting Inventory Update in Save Method (C#)\nDESCRIPTION: Shows how to trigger the InventoryUpdated event within a Save method responsible for persisting inventory records. It uses the _broadcaster object (an instance of CatalogKeyEventBroadcaster) to call the InventoryUpdated method, passing the current object (this) as the source and constructing an InventoryUpdateEventArgs with the catalog keys that have been updated.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/events.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n_broadcaster.InventoryUpdated(this, new InventoryUpdateEventArgs(catalogKeys.ToList()));\n```\n\n----------------------------------------\n\nTITLE: Filtering Content with Price Less Than in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to find items with a price less than a specified value. It employs the `Filter` method along with `DefaultPrice().UnitPrice.LessThan(2)` to filter items cheaper than 2.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<VariationContent>()\n        .Filter(x => x.DefaultPrice().UnitPrice.LessThan(2));\n```\n\n----------------------------------------\n\nTITLE: Creating a Currency in Optimizely using C#\nDESCRIPTION: This snippet demonstrates how to create a new currency (e.g., Bitcoin) in Optimizely Commerce Connect using the CurrencyManager. It creates a new CurrencyDto, adds a currency row, and defines an exchange rate relative to USD.  The namespaces Mediachase.Commerce.Catalog.Dto and Mediachase.Commerce.Catalog.Managers are required.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/currencies.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar existingCurrencies = CurrencyManager.GetCurrencyDto();\n    var dto = new CurrencyDto();\n    var currencyRow = dto.Currency.NewCurrencyRow();\n    currencyRow.Name = \"Bitcoin\";\n    currencyRow.CurrencyCode = \"BTC\";\n    currencyRow.ModifiedDate = DateTime.UtcNow;\n    \n    if (currencyRow.RowState == DataRowState.Detached)\n        dto.Currency.Rows.Add(currencyRow);\n    \n    var rateRow = dto.CurrencyRate.NewCurrencyRateRow();\n    rateRow.FromCurrencyId = dto.Currency[0].CurrencyId;\n    rateRow.ToCurrencyId = existingCurrencies.Currency.First(x => x.CurrencyCode.Equals(\"USD\")).CurrencyId;\n    rateRow.EndOfDayRate = 50000;\n    rateRow.AverageRate = 50000;\n    rateRow.CurrencyRateDate = DateTime.Now.Date;\n    rateRow.ModifiedDate = DateTime.UtcNow;\n    \n    if (rateRow.RowState == DataRowState.Detached)\n        dto.CurrencyRate.AddCurrencyRateRow(rateRow);\n    \n    CurrencyManager.SaveCurrency(dto);\n```\n\n----------------------------------------\n\nTITLE: Adding Item to Cart\nDESCRIPTION: This method adds an item to the cart, handling both bundle content and individual items. It checks if the item already exists in the cart and either updates the quantity or adds a new line item. It also handles dynamic packages, recursively adding items from bundles and using `AddNewLineItem` to create new line items with additional package options.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic AddToCartResult AddToCart(ICart cart, string code, IList<string> selectedPackageItems, decimal quantity)\n{\n    var result = new AddToCartResult();\n    var contentLink = _referenceConverter.GetContentLink(code);\n    var entryContent = _contentLoader.Get<EntryContentBase>(contentLink);\n\n    if (entryContent is BundleContent)\n    {\n        foreach (var relation in _relationRepository.GetChildren<BundleEntry>(contentLink))\n        {\n            var entry = _contentLoader.Get<EntryContentBase>(relation.Child);\n            var recursiveResult = AddToCart(cart, entry.Code, relation.Quantity ?? 1);\n            if (recursiveResult.EntriesAddedToCart)\n            {\n                result.EntriesAddedToCart = true;\n            }\n\n            foreach (var message in recursiveResult.ValidationMessages)\n            {\n                result.ValidationMessages.Add(message);\n            }\n        }\n\n        return result;\n    }\n\n    var lineItem = cart.GetAllLineItems().FirstOrDefault(x => x.Code == code && !x.IsGift);\n\n    if (lineItem == null)\n    {\n        if (entryContent is DynamicPackageContent)\n        {\n            lineItem = AddNewLineItem(cart, code, quantity, entryContent.DisplayName, selectedPackageItems);\n        }\n        else\n        {\n            lineItem = AddNewLineItem(cart, code, quantity, entryContent.DisplayName);\n        }\n    }\n    else\n    {\n        var shipment = cart.GetFirstShipment();\n        cart.UpdateLineItemQuantity(shipment, lineItem, lineItem.Quantity + quantity);\n    }\n\n    var validationIssues = ValidateCart(cart);\n\n    AddValidationMessagesToResult(result, lineItem, validationIssues);\n\n    return result;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable Order Data Localization in Startup.cs\nDESCRIPTION: This C# code snippet demonstrates how to disable order data localization by configuring the `OrderOptions` within the `ConfigureServices` method of `Startup.cs`. By setting `o.DisableOrderDataLocalization` to `true`, the application will not localize order data. This approach uses the `services.Configure` method to apply the setting.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/globalization.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<OrderOptions>(o =>\n        {\n            o.DisableOrderDataLocalization = true;\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Overriding Catalog Content Client Conventions in C#\nDESCRIPTION: This code snippet demonstrates how to override the default `CatalogContentClientConventions` by creating a new class inheriting from it and registering it in a Commerce Initialization Module. This allows for customization of catalog content client behavior.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/overriding-default-conventions.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class MyCatalogContentClientConventions : CatalogContentClientConventions \n      {\n      }\n    [ModuleDependency(FindCommerceInitializationModule)]\n    public class MyCommerceInitializationModule : IConfigurableModule\n      {\n        public void ConfigureContainer(ServiceConfigurationContext context)\n          {\n            context.Services.AddSingleton<CatalogContentClientConventions, MyCatalogContentClientConventions>();\n          }\n        public void Initialize(InitializationEngine context)\n          {\n          }\n        public void Uninitialize(InitializationEngine context)\n          {\n          }\n    }\n```\n\n----------------------------------------\n\nTITLE: Calculating Return Tax Total for Return Order Form in C#\nDESCRIPTION: This snippet calculates the total tax amount for a return order form. It makes use of the IReturnOrderFormCalculator interface and writes the result to the debug output. It uses IReturnOrderForm, IMarket, Currency, and IReturnOrderFormCalculator as input.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetReturnTaxTotal(IReturnOrderForm returnOrderForm, IMarket market, Currency currency, IReturnOrderFormCalculator returnOrderFormCalculator)\n          {\n            var returnTaxTotal = returnOrderFormCalculator.GetReturnTaxTotal(returnOrderForm, market, currency);\n            Debug.WriteLine(\"Tax total for return order form '{0}': {1}\", returnOrderForm.OrderFormId, returnTaxTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Query Inventories by Warehouse Code with Range in C#\nDESCRIPTION: This snippet shows how to retrieve inventory records by warehouse code in a specified range. The method accepts warehouseCodes as an IEnumerable<string>, offset, count and totalCount as parameters. It obtains IInventoryService through ServiceLocator, calls QueryByWarehouse, and returns an IEnumerable<InventoryRecord>.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// List all inventory records by warehouse code in specified range.\n    public IEnumerable<InventoryRecord> QueryInventoriesInRangeByWarehouse(IEnumerable<string> warehouseCodes, int offset, int count, out int totalCount)\n      {\n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.QueryByWarehouse(warehouseCodes, offset, count, out totalCount);\n      }\n```\n\n----------------------------------------\n\nTITLE: Enable Event-Driven Order Reporting in Startup.cs (C#)\nDESCRIPTION: This code snippet shows how to enable event-driven order reporting within the `ConfigureServices` method of `Startup.cs`. By setting `EnableEventDrivenOrderReporting` to `true` within the `ReportingOptions` configuration, data will be collected when order events occur, such as order placement or modification. This configuration ensures that report data is updated in real-time.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/collect-data-for-reports.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services) { \n      services.Configure<ReportingOptions>(o => { \n         o.EnableEventDrivenOrderReporting = true; \n      }); \n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Search Service in C#\nDESCRIPTION: This code snippet demonstrates the implementation of the `DefaultOrderSearchService` which searches for orders based on the provided `OrderSearchFilter`.  It uses the `ICartSearchService` to find carts and the `OrderContext` to find purchase orders and payment plans. The implementation is registered as a singleton service.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-abstractions.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Framework;\n    using EPiServer.ServiceLocation;\n    using Mediachase.Commerce.Orders;\n    using Mediachase.Commerce.Orders.Search;\n    using Mediachase.MetaDataPlus.Extensions;\n    using System;\n    using System.Linq;\n    \n    namespace EPiServer.Commerce.Order.Internal\n      {\n        /// <summary>\n        /// This class is intended to be used internally by EPiServer.\n        /// We do not support any backward compatibility on this.\n        /// \n        /// Default implementation of .\n        /// </summary>\n        [ServiceConfiguration(ServiceType = typeof(IOrderSearchService), Lifecycle = ServiceInstanceScope.Singleton)]\n        public class DefaultOrderSearchService : IOrderSearchService\n          {\n            private readonly ICartSearchService _cartSearch;\n    \n            public DefaultOrderSearchService(ICartSearchService cartSearch)\n              {\n                Validator.ThrowIfNull(nameof(cartSearch), cartSearch);\n                _cartSearch = cartSearch;\n              }\n    \n            public virtual OrderSearchResults Find(OrderSearchFilter filter) where TOrderGroup : class, IOrderGroup\n              {\n                Validator.ThrowIfNull(nameof(filter), filter);\n                var type = typeof(TOrderGroup);\n                if (IsCart(type))\n                  {\n                    var carts = _cartSearch.FindCarts(filter.CreatedFrom, filter.CreatedTo,\n                                filter.MarketId, filter.StartingIndex ?? 0,\n                                filter.RecordsToRetrieve ?? int.MaxValue,\n                                out int totalRecords).OfType<ICart>();\n                    return new OrderSearchResults(carts, totalRecords);\n                  }\n    \n                string sqlMetaWhereClause = $@\"(META.Created BETWEEN '{(filter.CreatedFrom ?? DateTime.MinValue.TruncateToSqlDateTimeRange()).ToString(\"s\")}' \n                                                                 AND '{(filter.CreatedTo ?? DateTime.MaxValue.TruncateToSqlDateTimeRange()).ToString(\"s\")}')\";\n    \n                sqlMetaWhereClause += $@\" AND (META.Modified BETWEEN '{(filter.ModifiedFrom ?? DateTime.MinValue.TruncateToSqlDateTimeRange()).ToString(\"s\")}' \n                                                                 AND '{(filter.ModifiedTo ?? DateTime.MaxValue.TruncateToSqlDateTimeRange()).ToString(\"s\")}')\";\n    \n                var parameters = new OrderSearchParameters() { SqlMetaWhereClause = sqlMetaWhereClause};\n    \n                if (!string.IsNullOrEmpty(filter.MarketId))\n                  {\n                    parameters.SqlWhereClause = $\"MarketId = '{filter.MarketId}'\";\n                  }\n    \n                var options = new OrderSearchOptions\n                  {\n                    StartingRecord = filter.StartingIndex ?? 0,\n                    RecordsToRetrieve = filter.RecordsToRetrieve ?? int.MaxValue\n                  };\n    \n                if (IsPurchaseOrder(type))\n                  {\n                    options.Classes.Add(OrderContext.Current.PurchaseOrderMetaClass.Name);\n                    var orders = OrderContext.Current.FindPurchaseOrders(parameters, options, out int totalRecords).OfType<IPurchaseOrder>();\n                    return new OrderSearchResults(orders, totalRecords);\n                  }\n    \n                if (IsPaymentPlan(type))\n                  {\n                    options.Classes.Add(OrderContext.Current.PaymentPlanMetaClass.Name);\n                    var paymentplans = OrderContext.Current.FindPaymentPlans(parameters, options, out int totalRecords).OfType<IPaymentPlan>();\n                    return new OrderSearchResults(paymentplans, totalRecords);\n                  }\n    \n                throw new InvalidOperationException($\"The type {typeof(TOrderGroup)} is not supported.\");\n              }\n    \n            private static bool IsCart(Type type)\n              {\n                return typeof(ICart).IsAssignableFrom(type);\n              }\n    \n            private static bool IsPurchaseOrder(Type type)\n              {\n                return typeof(IPurchaseOrder).IsAssignableFrom(type);\n              }\n    \n            private static bool IsPaymentPlan(Type type)\n              {\n                return typeof(IPaymentPlan).IsAssignableFrom(type);\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Getting Product by Variant in C#\nDESCRIPTION: This code snippet retrieves the parent products for a given variant using the IRelationRepository. The snippet obtains an instance of the repository and calls GetParents to retrieve the parent products. It requires a ContentReference to the variant as input and returns an IEnumerable of ProductVariation objects representing the parent products.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/product-variants.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<ProductVariation> GetProductByVariant(ContentReference variation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var products = relationRepository.GetParents<ProductVariation>(variation);\n        return products;\n      }\n```\n\n----------------------------------------\n\nTITLE: Add Custom Price Types to appsettings.json (JSON)\nDESCRIPTION: This snippet demonstrates how to add custom price types to the `SalePriceTypes` section within the `CatalogOptions` of the `appsettings.json` file.  It requires modifying the JSON configuration file for the Optimizely Commerce platform. The 'Key' represents the identifier for the price type, 'Value' is a unique integer greater or equal to 3, and 'Description' is a human-readable description.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricetype-examples.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n\"EPiServer\": {\n      \"Commerce\": {\n        \"CatalogOptions\": {\n          \"SalePriceTypes\": [\n            {\n              \"Key\": \"NewCustomPriceType\",\n              \"Value\": \"3\",\n              \"Description\": \"New Custom Price Type\"\n            },\n            {\n              \"Key\": \"JurisdictionGroup\",\n              \"Value\": \"4\",\n              \"Description\": \"Jurisdiction Group\"\n            }\n          ]\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Indexing Inventories from Product Variants in Optimizely (C#)\nDESCRIPTION: Indexes the inventories associated with variants of a ProductContent. It uses IContentLoader, InventoryLoader, and IRelationRepository to retrieve variations and their corresponding stock placements, utilizing the ServiceLocator to resolve default instances when not provided.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IEnumerable Inventories(this ProductContent productContent)\n          {\n            return Inventories(\n              productContent,\n              ServiceLocator.Current.GetInstance<IContentLoader>(),\n              ServiceLocator.Current.GetInstance<InventoryLoader>(),\n              ServiceLocator.Current.GetInstance<IRelationRepository>());\n          }\n    \n        public static IEnumerable<Inventory> Inventories(this ProductContent productContent, IContentLoader contentLoader, InventoryLoader inventoryLoader, IRelationRepository relationRepository)\n          {\n            var variations = contentLoader.GetItems(productContent.GetVariants(relationRepository), productContent.Language).OfType<VariationContent>();\n            return variations.SelectMany(x => x.GetStockPlacement(inventoryLoader));\n          }\n```\n\n----------------------------------------\n\nTITLE: Calculating Shipping Subtotal Return Order in Optimizely Commerce (C#)\nDESCRIPTION: This code snippet demonstrates how to calculate the shipping subtotal of all return order forms within a purchase order using the IReturnPurchaseOrderCalculator interface. It takes an IPurchaseOrder and an IReturnPurchaseOrderCalculator as input and prints the shipping subtotal to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-purchase-order-calculator.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingSubTotal(IPurchaseOrder purchaseOrder, IReturnPurchaseOrderCalculator returnPurchaseOrderCalculator)\n          {\n            var shippingSubTotal = returnPurchaseOrderCalculator.GetShippingSubTotal(purchaseOrder);\n            Debug.WriteLine(\"Shipping subtotal for return order '{0}': {1}\", purchaseOrder.OrderLink.OrderGroupId, shippingSubTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Saving Price Detail Value in C#\nDESCRIPTION: This code snippet demonstrates how to save a price detail value for a catalog entry using the IPriceDetailService.Save() method.  It creates a PriceDetailValue object with properties like CatalogKey, MarketId, CustomerPricing, ValidFrom, ValidUntil, MinQuantity, and UnitPrice. The catalogEntry parameter is required.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricing-examples.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic IPriceDetailValue SavePriceDetailValue(Entry catalogEntry)\n      {\n        var priceDetailService = ServiceLocator.Current.GetInstance<IPriceDetailService>();\n    \n        // Set Price Detail value for Catalog Entry.\n        var priceDetailValue = new PriceDetailValue\n          {\n            CatalogKey = new CatalogKey(catalogEntry),\n            MarketId = new MarketId(\"US\"),\n            CustomerPricing = CustomerPricing.AllCustomers,\n            ValidFrom = DateTime.UtcNow.AddDays(-7),\n            ValidUntil = DateTime.UtcNow.AddDays(7),\n            MinQuantity = 0m,\n            UnitPrice = new Money(100m, Currency.USD)\n          };\n    \n        return priceDetailService.Save(priceDetailValue);\n      }\n```\n\n----------------------------------------\n\nTITLE: Add Custom Properties to Order Data (C#)\nDESCRIPTION: This code snippet demonstrates how to add custom properties to the order data by overriding the `GetAdditionalData` method of `ReportingAdditionalDataHandler`.  This allows for including additional information, such as `MarketId`, `OrderStatus`, and `InventoryTrackingStatus`, in the exported CSV file.  The method receives an `ILineItem` and an `IPurchaseOrder` as parameters, and returns an `IEnumerable<string>` representing the additional data to include.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/collect-data-for-reports.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic override IEnumerable<string> GetAdditionalData(ILineItem lineItem, IPurchaseOrder order)\n        {\n           return new string[] { order.MarketId.Value, order.OrderStatus.ToString(), lineItem.InventoryTrackingStatus.ToString() };\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Bolt Payment (C#)\nDESCRIPTION: This C# code snippet demonstrates how to implement a Bolt payment within an Optimizely Commerce context.  It involves creating a `BoltPayment` instance, setting necessary properties like `Token`, `CreateAccount`, `CardId`, and `AccessToken`. The `AccessToken` is obtained using the `_apiService` and requires a code and scope from the Bolt authorization component. Finally, the payment is added to the cart.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bolt-installation.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar total = cart.GetTotal(_orderGroupCalculator);\nvar payment = viewModel.Payment.CreatePayment(total.Amount, cart);\n\nif (payment is BoltPayment boltPayment)\n{\n    // The token should come from the Bolt javascript tokenize function.  This is only needed on new card payments\n    boltPayment.Token = \"token\"\n    \n    // The create account value should come from the Bolt flag on createAccount widget from the Bolt javascrpt api  \n    boltPayment.CreateAccount = true;\n  \n    // You only neeed to set the card id for saved cards.  The gateway will set this field automatically for Auth or Capture on non saved cards.\n    boltPayment.CardId = \"cardId\";\n    \n    // The api service is in the EPiServer.Commerce.Bolt namespace, code and scope come from the response of the authorization component in the Bolt javascript sdk\n    var token = await _apiService.GetTokenAsync(code, scope);\n  \n    // This field is not saved in DB but is needed to make request on behalf of user\n    boltPayment.AccessToken = token.AccessToken;\n \n}\ncart.AddPayment(payment, _orderGroupFactory);\npayment.BillingAddress = _addressBookService.ConvertToAddress(viewModel.BillingAddress, cart);\n```\n\n----------------------------------------\n\nTITLE: Apply Discounts to Cart - C#\nDESCRIPTION: This code snippet demonstrates how to apply discounts to a cart using IPromotionEngine. It retrieves a cart and then runs the promotion engine to evaluate and apply any applicable discounts, generating reward descriptions that detail the applied discounts.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var promotionEngine = ServiceLocator.Current.GetInstance<IPromotionEngine>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart(contactId, \"Default\");\n    \n    //run apply discounts on the cart\n    var rewardDescriptions = cart.ApplyDiscounts(promotionEngine, new PromotionEngineSettings());\n    \n    //run apply discounts on the cart\n    var rewardDescriptions = promotionEngine.Run(cart, new PromotionEngineSettings());\n```\n\n----------------------------------------\n\nTITLE: Catalog Entry Object Definition C#\nDESCRIPTION: This C# code defines the `Entry` class within the `Mediachase.Commerce.Catalog.Objects` namespace. The class serves as a container for catalog entries (e.g., Product, Variant, Bundle).  It is marked as `Serializable` allowing for object serialization. While the entry *objects* are not cached, the underlying DTOs used to construct them *are* cached.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-dto-and-object-models.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nnamespace Mediachase.Commerce.Catalog.Objects\n{\n  /// <summary>\n  /// The Entry parameter serves as a container element that is a child of the Entries element, and\n  /// represents the Catalog Entry element, which can be Product, Variant, Bundle or any other type of product.\n  /// </summary>\n  [Serializable]\n  public class Entry\n  {\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Widgets (C#)\nDESCRIPTION: This code snippet shows how to update and filter widgets using the widget service. It retrieves recommended items for a specific area (\"someWidget\") from the updated widgets. It uses LINQ to filter based on the area and select the recommended product items.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar productRefs = widgetService.UpdateWidget().Where(x => x.Area == \"someWidget\").SelectMany(x => x.RecommendedItems);\n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Entry Node Relation in C#\nDESCRIPTION: This snippet illustrates how to create and save a catalog entry node relation using CatalogRelationDto. It creates a new NodeEntryRelationRow, sets its properties like CatalogId, CatalogEntryId, and CatalogNodeId, and then saves the relation using CatalogContext.Current.SaveCatalogRelationDto. The code assumes the existence of CatalogContext and necessary DTOs.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-dto-and-object-models.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nCatalogRelationDto relation = new CatalogRelationDto();\nCatalogRelationDto.NodeEntryRelationRow nodeRelation = relation.NodeEntryRelation.NewNodeEntryRelationRow();\nnodeRelation.CatalogId = 2;\nnodeRelation.CatalogEntryId = entry.CatalogEntry[0].CatalogEntryId;\nnodeRelation.CatalogNodeId = 62;\nnodeRelation.SortOrder = 0;\nif (nodeRelation.RowState == DataRowState.Detached)\n  relation.NodeEntryRelation.AddNodeEntryRelationRow(nodeRelation);\n\n// Save the relation.\nCatalogContext.Current.SaveCatalogRelationDto(relation);\n```\n\n----------------------------------------\n\nTITLE: Deleting Warehouse in Optimizely Commerce (C#)\nDESCRIPTION: This code snippet demonstrates how to delete a warehouse using its ID in Optimizely Commerce. It uses the IWarehouseRepository to delete the warehouse based on the provided warehouse ID.  It requires access to the `IWarehouseRepository` service.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\npublic void DeleteWarehouse(int warehouseId)\n      {\n        var warehouseRepository = ServiceLocator.Current.GetInstance<IWarehouseRepository>();\n        warehouseRepository.Delete(warehouseId);\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding MetaObject Extension C#\nDESCRIPTION: This code snippet demonstrates how to add a MetaObject extension to a meta-class. It uses the MetaObjectExtensionInfo class to specify the extension's module name, type, and activation type (in this case, OnSave).  The AssemblyUtil is used to get the string representation of the extension type.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// Add MetaObject Extension\n       metaClass.Extensions.Add(new MetaObjectExtensionInfo(HistoryManager.ModuleName,\n                                    AssemblyUtil.GetTypeString(typeof (HistoryExtension)),\n                                    MetaObjectExtensionActivationType.OnSave));\n```\n\n----------------------------------------\n\nTITLE: Working with Order Forms in Optimizely - C#\nDESCRIPTION: This snippet demonstrates how to create and delete an order form within a cart using the IOrderRepository and IOrderGroupFactory. It shows how to load a cart, create an order form, add it to the cart's Forms collection, name it, and then remove it.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var orderGroupFactory = ServiceLocator.Current.GetInstance<IOrderGroupFactory>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    \n    //create and add new order form (b2b)\n    var orderForm = orderGroupFactory.CreateOrderForm(cart);\n    cart.Forms.Add(orderForm);\n    orderForm.Name = \"Default\";\n    \n    //delete order form\n    cart.Forms.Remove(orderForm);\n```\n\n----------------------------------------\n\nTITLE: Getting the Return Subtotal in C#\nDESCRIPTION: This code demonstrates how to calculate the subtotal of returns for a purchase order. It retrieves an instance of IReturnOrderCalculator and IOrderRepository, loads a purchase order and then calculates the return subtotal.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar returnOrderCalculator = ServiceLocator.Current.GetInstance<IReturnOrderCalculator>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n```\n\n----------------------------------------\n\nTITLE: Adding Shipment to Picklist in C#\nDESCRIPTION: This snippet demonstrates how to add a shipment to a picklist using the AddShipmentToPicklist method of the IShipmentProcessor interface. It requires an IOrderRepository, IShipmentProcessor, and IShipment instance. The orderGroupId, pickListId, and shipment are used to add the shipment to the specified picklist for a purchase order.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_24\n\nLANGUAGE: C#\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipmentProcessor shipmentProcessor;\n    IShipment shipment;\n    \n    (…)\n    var orderGroupId = 123;\n    var pickListId = 1;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    shipmentProcessor.AddShipmentToPicklist(purchaseOrder, shipment, pickListId);\n```\n\n----------------------------------------\n\nTITLE: Updating Bundle Entry Quantity in C#\nDESCRIPTION: This code snippet updates the quantity of a specific BundleEntry. It retrieves the BundleEntry using the provided ContentReferences and updates the Quantity property. It requires access to the IRelationRepository and uses CompareToIgnoreWorkID to find the matching entry, ignoring version differences.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic void UpdateBundleEntry(ContentReference referenceToBundle, ContentReference referenceToProductOrVariation, decimal newQuantity)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var bundleEntries = relationRepository.GetChildren<BundleEntry>(referenceToBundle);\n    \n        // Find the matching BundleEntry by comparing the child, ignoring versions since relations are not version specific\n        var matchingEntry = bundleEntries.FirstOrDefault(r => r.Child.CompareToIgnoreWorkID(referenceToProductOrVariation));\n    \n        // Update if there was a matching entry\n        if (matchingEntry != null)\n          {\n            // Set new data\n            matchingEntry.Quantity = newQuantity;\n    \n            relationRepository.UpdateRelation(matchingEntry);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Editing Meta-Class Object in Optimizely Commerce\nDESCRIPTION: This snippet shows how to edit an existing meta-class object, specifically the 'Contact' meta-class. It retrieves the 'Contact' meta-class, adds new fields (UserRole, UserLocation, Points, etc.) using MetaFieldBuilder, and then deletes the 'MiddleName' field.  It depends on the Mediachase.BusinessFoundation.Data namespace and the existence of ContactEntity.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/object-configuration.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nDataContext.Current = new DataContext(ServiceLocator.Current.GetInstance<IConnectionStringHandler>().Commerce.ConnectionString);\n    ModuleManager.InitializeActiveModules();\n    using (var scope = DataContext.Current.MetaModel.BeginEdit(MetaClassManagerEditScope.SystemOwner, AccessLevel.System))\n    {\n        var manager = DataContext.Current.MetaModel;\n        var contactMetaClass = manager.MetaClasses[ContactEntity.ClassName];\n        var changeTrackingManifest = ChangeTrackingManager.CreateModuleManifest();\n        var recentReferenceManifest = RecentReferenceManager.CreateModuleManifest();\n        using (var builder = new MetaFieldBuilder(contactMetaClass))\n        {\n            builder.CreateText(\"UserRole\", \"{Customer:UserRole}\", true, 50, false);\n            builder.CreateText(\"UserLocation\", \"{Customer:UserLocation}\", true, 50, false);\n            builder.CreateInteger(\"Points\", \"{Customer:Points}\", true, 0);\n            builder.CreateInteger(\"NumberOfOrders\", \"{Customer:NumberOfOrders}\", true, 0);\n            builder.CreateInteger(\"NumberOfReviews\", \"{Customer:NumberOfReviews}\", true, 0);\n            builder.CreateText(\"Tier\", \"{Customer:Tier}\", true, 100, false);\n            builder.CreateText(\"ElevatedRole\", \"{Customer:ElevatedRole}\", true, 100, false);\n            builder.CreateHtml(\"Bookmarks\", \"{Customer:Bookmarks}\", true);\n            builder.SaveChanges();\n        }\n        contactMetaClass.DeleteMetaField(\"MiddleName\");\n        scope.SaveChanges();\n    }\n```\n\n----------------------------------------\n\nTITLE: Set Current Market in Optimizely Commerce (C#)\nDESCRIPTION: Sets the current market using the ICurrentMarket interface and a MarketId. This method demonstrates how to programmatically set the currently active market in the Optimizely Commerce platform.  It takes a MarketId as a parameter and uses ServiceLocator and ICurrentMarket to perform the setting action.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-market-examples.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void SetCurrentMarket(MarketId marketId)\n      {\n        var currentMarketService = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n        // Get current markets.\n        currentMarketService.SetCurrentMarket(marketId);\n      }\n```\n\n----------------------------------------\n\nTITLE: Process Purchase Order C#\nDESCRIPTION: This code snippet demonstrates how to start processing a purchase order using the `IPurchaseOrderProcessor`. It loads a purchase order by its ID and then calls the `ProcessOrder()` method on the `purchaseOrderProcessor` instance. This requires resolving dependencies for `IOrderRepository` and `IPurchaseOrderProcessor`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    IPurchaseOrderProcessor purchaseOrderProcessor;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    purchaseOrderProcessor.ProcessOrder(purchaseOrder);\n```\n\n----------------------------------------\n\nTITLE: Calculate Sales Tax for Single Line Item C#\nDESCRIPTION: Calculates the sales tax for a single line item based on the provided market, shipping address, and base price. It utilizes the ITaxCalculator interface to retrieve the sales tax amount. Requires ILineItem, IMarket, IOrderAddress, Money, and ITaxCalculator as input. Returns a Money object representing the calculated sales tax.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-tax-calculator.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic Money CalculateSalesTax(ILineItem lineItem, IMarket market, IOrderAddress shippingAddress, Money basePrice, ITaxcalculator taxCalculator)\n          {\n            return taxCalculator.GetSalesTax(lineItem, market, shippingAddress, basePrice);\n          }\n```\n\n----------------------------------------\n\nTITLE: Filtering Content on Current Market in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to retrieve items available in the current market. It uses the `FilterOnCurrentMarket()` method of the `SearchClient` to achieve this.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar results = SearchClient.Instance.Search<VariationContent>()\n    .FilterOnCurrentMarket().GetContentResult();\n```\n\n----------------------------------------\n\nTITLE: Query Inventories by Entry Code in C#\nDESCRIPTION: This snippet demonstrates how to retrieve inventory records based on a collection of catalog entry codes. It gets an instance of IInventoryService and calls the QueryByEntry() method, passing in an IEnumerable<string> of catalog entry codes. The function returns an IEnumerable<InventoryRecord> of matching inventories.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// List all inventory records by entry code.\n    public IEnumerable<InventoryRecord> QueryInventoriesByEntry(IEnumerable<string> catalogEntryCodes)\n      {\n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.QueryByEntry(catalogEntryCodes);\n      }\n```\n\n----------------------------------------\n\nTITLE: Install Optimizely Templates using dotnet CLI\nDESCRIPTION: This command installs the Optimizely templates using the dotnet command-line interface. It allows you to create new Optimizely projects from these templates. Requires .NET SDK to be installed.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/setting-up-your-development-environment.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\ndotnet new -i EPiServer.Templates\n```\n\n----------------------------------------\n\nTITLE: ReturnOrderFormCalculator Class with Validation Overrides C#\nDESCRIPTION: This C# code defines a class `ReturnOrderFormCalculatorOverridingDefault` inheriting from `DefaultReturnOrderFormCalculator`. It overrides several validation methods (`ValidateTotal`, `ValidateSubtotal`, `ValidateHandlingTotal`, `ValidateShippingSubTotal`, `ValidateReturnTaxTotal`) to ensure that the corresponding money amounts are greater than zero. If a money amount is not greater than zero, a `ValidationException` is thrown. The constructor takes `IShippingCalculator` and `ITaxCalculator` as dependencies.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReturnOrderFormCalculatorOverridingDefault : DefaultReturnOrderFormCalculator\n      {\n        public ReturnOrderFormCalculatorOverridingDefault(IShippingCalculator shippingCalculator, ITaxCalculator taxCalculator)\n          : base(shippingCalculator, taxCalculator)\n          { }\n        protected override void ValidateTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Total must be greater than 0\");\n              }\n          }\n        protected override void ValidateSubtotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Subtotal must be greater than 0\");\n              }\n          }\n        protected override void ValidateHandlingTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Handling total must be greater than 0\");\n              }\n          }\n        protected override void ValidateShippingSubTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Shipping subtotal must be greater than 0\");\n              }\n          }\n        protected override void ValidateReturnTaxTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Return tax total must be greater than 0\");\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Converting Catalog Content IDs and Content References (C#)\nDESCRIPTION: This code snippet demonstrates how to convert between ContentReference and catalog object ID using the `ReferenceConverter` within an Optimizely Commerce Connect environment. It checks if the content is an `EntryContentBase`, then converts the `ContentReference` to a catalog object ID, retrieves the catalog entry, and then converts the catalog object ID back to a `ContentReference`. Requires a CatalogContext and ReferenceConverter instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-content-provider.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConversionSampleCode(CatalogContentBase content)\n      {\n        var catalogContext = CatalogContext.Current;\n        var referenceConverter = ServiceLocator.Current.GetInstance<ReferenceConverter>();\n        if (content is EntryContentBase)\n          {\n            //convert from ContentReference to catalog object id\n            var entryId = referenceConverter.GetObjectId(content.ContentLink);\n            var entry = catalogContext.GetCatalogEntryDto(entryId, \n                new CatalogEntryResponseGroup(CatalogEntryResponseGroup.ResponseGroup.CatalogEntryFull));\n    \n            //do something with the entry\n    \n            //Covert from catalog object id to ContentReference\n            var contentType = referenceConverter.GetContentType(content.ContentLink);\n            var contentLink = referenceConverter.GetContentLink(entryId, contentType, 0);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Query Inventories by Entry Code with Range in C#\nDESCRIPTION: This snippet shows how to retrieve inventory records by entry code, but with pagination using offset and count parameters.  An out parameter, totalCount, is also specified to get the total number of entries. It retrieves an IInventoryService instance and calls QueryByEntry() with the catalogEntryCodes, offset, count, and totalCount.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// List all inventory records by entry code in a specified range.\n    public IEnumerable<InventoryRecord> QueryInventoriesInRangeByEntry(IEnumerable<string> catalogEntryCodes, int offset, int count, out int totalCount)\n      {\n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.QueryByEntry(catalogEntryCodes, offset, count, out totalCount);\n      }\n```\n\n----------------------------------------\n\nTITLE: Create Percentage Reward C#\nDESCRIPTION: This code snippet creates a percentage-based reward description based on promotion data, fulfillment status, redemptions, and a percentage discount. It extracts applicable entries from the context and utilizes localization services to generate reward description text.  It depends on `RewardDescription`, `GetRedemptions`, `PromotionData`, `fulfillmentStatus`, `_localizationService`, `applicableCodes`, `lineItems`, `condition.RequiredQuantity`, and `condition.PartiallyFulfilledThreshold`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-promotions.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nRewardDescription.CreatePercentageReward(\n                    fulfillmentStatus,\n                    GetRedemptions(applicableCodes, promotionData, context),\n                    promotionData,\n                    promotionData.PercentageDiscount,\n                    fulfillmentStatus.GetRewardDescriptionText(_localizationService));\n```\n\n----------------------------------------\n\nTITLE: Searching Catalog Entries with Preorder Support - C#\nDESCRIPTION: This code snippet demonstrates how to search for catalog entries, including or excluding preorder entries, by setting the `IncludePreorderEntry` property of the `CatalogEntrySearchCriteria`. The `SearchManager` is used to execute the search. This is important when needing to filter out pre-order entries from normal search results. The `SearchFilterHelper` is used to assist in the generation of search criteria.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/inventory-requests.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSearchFilterHelper helper = SearchFilterHelper.Current;\n    CatalogEntrySearchCriteria criteria = helper.CreateSearchCriteria(\"\", sortObject);\n    criteria.RecordsToRetrieve = 25;\n    criteria.StartingRecord = _startRowIndex;\n    criteria.IncludePreorderEntry = false;\n    \n    var searchManager = new SearchManager(AppContext.Current.ApplicationName);\n    var results = searchManager.Search(criteria);\n```\n\n----------------------------------------\n\nTITLE: Updating Inventory Records in C#\nDESCRIPTION: Updates the specified inventory records using the IInventoryService. The method retrieves an instance of IInventoryService from the ServiceLocator and calls the Update method to persist the changes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nvar inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.Update(records);\n```\n\n----------------------------------------\n\nTITLE: Fuzzy Search Results with Lucene in C#\nDESCRIPTION: This code snippet demonstrates fuzzy search functionality using `LuceneSearchProvider`. If the initial search returns no results, it enables fuzzy search by setting `IsFuzzySearch` to true and `FuzzyMinSimilarity` to 0.7f.  This allows for approximate matches based on Levenshtein distance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-product-search.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCatalogEntrySearchCriteria criteria = new CatalogEntrySearchCriteria();\n      criteria.SearchPhrase = \"fanon\";\n      SearchManager manager = new SearchManager(AppContext.Current.ApplicationName);\n      SearchResults results = manager.Search(criteria);\n      if (results.TotalCount == 0)\n        {\n          criteria.IsFuzzySearch = true;\n          criteria.FuzzyMinSimilarity = 0.7f;\n          results = manager.Search(criteria);\n        }\n      Console.Write(\"Total Results: \" + results.TotalCount.ToString();\n```\n\n----------------------------------------\n\nTITLE: Disable Event-Driven Catalog Indexing in .NET Framework\nDESCRIPTION: This snippet demonstrates how to disable event-driven catalog indexing in a .NET Framework application by adding a key to the appSettings section of the configuration file. This configuration prevents automatic updates to the search index upon catalog data changes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/event-driven-catalog-indexing.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"episerver:DisableCatalogEventDrivenIndexing\" value=\"true\" />\n```\n\n----------------------------------------\n\nTITLE: Create 1-N Reference between Meta-Classes in C#\nDESCRIPTION: This code snippet demonstrates how to create a 1-N reference between two meta-classes (Project and Task) using the `CreateReference` method within an Optimizely meta-model edit scope. It adds a reference ID and a read-only reference title field to the target meta-class. Requires access to `DataContext` and `MetaClassManagerEditScope`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/meta-class-references.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Open the meta-model edit scope\n    using (MetaClassManagerEditScope scope = DataContext.Current.MetaModel.BeginEdit())\n      {\n        // Create reference\n        DataContext.Current.GetMetaClass(\"Task\").CreateReference(DataContext.Current.GetMetaClass(\"Project\"), \"Project\", \"Project\", true)):\n        // Save Changes\n        scope.SaveChanges();\n      }\n```\n\n----------------------------------------\n\nTITLE: Filtering Bundle Entries in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to retrieve bundle entries based on a content reference ID. It uses the `Filter` method along with `BundleEntries().MatchContained(c => c.ID, contentReference.ID)` to filter the content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<BundleContent>()\n        .Filter(x => x.BundleEntries().MatchContained(c => c.ID, contentReference.ID));\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Group Totals in C#\nDESCRIPTION: This method calculates various totals for an order group (handling, shipping, tax, subtotal, and total) using the IOrderGroupCalculator. It then logs each of these totals to the debug output. The method accepts an IOrderGroup and an IOrderGroupCalculator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetOrderGroupTotals(IOrderGroup orderGroup, IOrderGroupCalculator orderGroupCalculator)\n          {\n            var orderGroupTotals = orderGroupCalculator.GetOrderGroupTotals(orderGroup);\n            \n            Debug.WriteLine(\"Handling total for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, orderGroupTotals.HandlingTotal);\n            Debug.WriteLine(\"Shipping subtotal for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, orderGroupTotals.ShippingTotal);\n            Debug.WriteLine(\"Tax total for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, orderGroupTotals.TaxTotal);\n            Debug.WriteLine(\"Subtotal for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, orderGroupTotals.SubTotal);\n            Debug.WriteLine(\"Total for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, orderGroupTotals.Total);\n          }\n```\n\n----------------------------------------\n\nTITLE: Removing Shipment from Picklist in C#\nDESCRIPTION: This snippet demonstrates how to remove a shipment from a picklist using the RemoveShipmentFromPicklist method of the IShipmentProcessor interface. It requires an IOrderRepository, IShipmentProcessor, and IShipment instance. The orderGroupId and shipment are used to remove the shipment from the picklist for a purchase order.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_25\n\nLANGUAGE: C#\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipmentProcessor shipmentProcessor;\n    IShipment shipment;\n    \n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    shipmentProcessor.RemoveShipmentFromPicklist(purchaseOrder, shipment);\n```\n\n----------------------------------------\n\nTITLE: Configure Subscription Time Ranges in Startup.cs\nDESCRIPTION: This code snippet demonstrates how to configure the subscription time ranges within the `ConfigureServices` method of `Startup.cs`. It uses the `Configure` extension method on `IServiceCollection` to set the `SubscriptionTimeRangesInDays` property of the `ReportingTimeRangeOptions` class. The time ranges are specified as a `HashSet<int>`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/collecting-subscription-data.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<ReportingTimeRangeOptions>(o =>\n        {\n            o.SubscriptionTimeRangesInDays= new HashSet<int>() { 30, 60, 90, 180 };\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Meta-Class Object in Optimizely Commerce\nDESCRIPTION: This snippet demonstrates how to create a new meta-class object named 'Budget' in Optimizely Commerce Connect. It initializes the DataContext and MetaModel, defines the 'Budget' meta-class with several fields (StartDate, EndDate, Amount, etc.), and activates the module.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/object-configuration.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nDataContext.Current = new DataContext(ServiceLocator.Current.GetInstance<IConnectionStringHandler>().Commerce.ConnectionString);\n    ModuleManager.InitializeActiveModules();\n    using (var scope = DataContext.Current.MetaModel.BeginEdit(MetaClassManagerEditScope.SystemOwner, AccessLevel.System))\n    {\n        var manager = DataContext.Current.MetaModel;\n        var changeTrackingManifest = ChangeTrackingManager.CreateModuleManifest();\n        var recentReferenceManifest = RecentReferenceManager.CreateModuleManifest();\n        var budgetClass = manager.CreateMetaClass(\"Budget\", \"Budget\", \"Budgets\", \"cls_Budget\", PrimaryKeyIdValueType.Integer);\n        ModuleManager.Activate(budgetClass, changeTrackingManifest);\n        using (var builder = new MetaFieldBuilder(budgetClass))\n        {\n            builder.CreateDateTime(\"StartDate\", \"StartDate\", true, false);\n            builder.CreateDateTime(\"EndDate\", \"EndDate\", true, false);\n            builder.CreateCurrency(\"Amount\", \"Amount\", true, 0, true);\n            builder.CreateText(\"Currency\", \"Currency\", true, 50, false);\n            builder.CreateText(\"Status\", \"Status\", true, 50, false);\n            builder.CreateCurrency(\"SpentBudget\", \"SpentBudget\", true, 0, true);\n            builder.CreateText(\"PurchaserName\", \"PurchaserName\", true, 50, false);\n            builder.CreateCurrency(\"LockOrganizationAmount\", \"LockOrganizationAmount\", true, 0, true);\n            var contactReference = builder.CreateReference(\"Contact\", \"CreditCard_mf_Contact\", true, \"Contact\", false);\n            var orgReference = builder.CreateReference(\"Organization\", \"CreditCard_mf_Organization\", true, \"Organization\", false);\n            builder.SaveChanges();\n        }\n    \n        budgetClass.AddPermissions();\n        scope.SaveChanges();\n    }\n```\n\n----------------------------------------\n\nTITLE: Removing Association in Optimizely Commerce Connect (C#)\nDESCRIPTION: Removes a related entry (Association) from an existing entry. It retrieves an instance of IAssociationRepository, creates an Association object matching the association to be removed, and then uses the RemoveAssociation method of the IAssociationRepository. The function takes two ContentReference objects as input, representing the main entry and the related entry.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/related-entries.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void RemoveAssociation(ContentReference referenceToEntry, ContentReference referenceToRelatedEntry)\n      {\n        var associationRepository = ServiceLocator.Current.GetInstance<IAssociationRepository>();\n        // Define an association matching the one to remove, or use\n        // GetAssociations to find the one you want to remove and pass that to\n        // RemoveAssociation\n        var relationToRemove = new Association\n          {\n            // Group with name is required to match the correct association\n            Group = new AssociationGroup\n              {\n                Name = \"CrossSell\"\n              },\n            // Source is required here to match the correct association\n            Source = referenceToEntry,\n            Target = referenceToRelatedEntry,\n            // Type with id is required to match the correct association\n            Type = new AssociationType\n              {\n                Id = AssociationType.DefaultTypeId\n              }\n          };\n        // Removes matching Association, or no action if no match exists\n        associationRepository.RemoveAssociation(relationToRemove);\n      }\n```\n\n----------------------------------------\n\nTITLE: Configure Services for Optimizely Graph in C#\nDESCRIPTION: This code snippet demonstrates how to configure services for Optimizely Graph within the ConfigureServices method in Startup.cs. It adds Content Delivery API, configures Content Graph settings, and integrates Commerce Graph functionality. This is a crucial step for enabling Optimizely Graph in your application.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/optimizely-graph-for-commerce-connect.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.AddContentDeliveryApi();\nservices.AddContentGraph(x =>\n{\n    x.IncludeInheritanceInContentType = true;\n    x.PreventFieldCollision = true;\n});\nservices.AddCommerceGraph();\n```\n\n----------------------------------------\n\nTITLE: Consuming Home Page Recommendations (C#)\nDESCRIPTION: This snippet shows how to retrieve home page recommendations using GetHomeRecommendations() within the Index action of the StartController. The recommendations are then passed to the view via the StartPageViewModel.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[CommerceTracking(TrackingType.Home)]\n    public ViewResult Index(StartPage currentPage)\n      {\n        var viewModel = new StartPageViewModel()\n          {\n            StartPage = currentPage,\n            Recommendations = this.GetHomeRecommendations(),\n            Promotions = GetActivePromotions()\n          };\n        return View(viewModel);\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring FindSearchProvider in SearchOptions\nDESCRIPTION: This snippet shows the JSON configuration required to define the FindSearchProvider within the SearchProviders list in SearchOptions. It specifies the provider's Name, Type, and Parameters, including the queryBuilderType and simulateFaceting settings. This configuration ensures that the FindSearchProvider is correctly integrated into the search infrastructure.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/configuring-optimizely-find-search-provider.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n          \"Name\": \"FindSearchProvider\",\n          \"Type\": \"EPiServer.Commerce.FindSearchProvider.FindSearchProvider, EPiServer.Commerce.FindSearchProvider\",\n          \"Parameters\": {\n            \"queryBuilderType\": \"EPiServer.Commerce.FindSearchProvider.FindSearchQueryBuilder, EPiServer.Commerce.FindSearchProvider\",\n            \"simulateFaceting\": \"true\"\n          }\n        }\n```\n\n----------------------------------------\n\nTITLE: Implementing Catalog Content Event Listener C#\nDESCRIPTION: This code snippet implements a custom event listener for catalog content changes in Optimizely Commerce Connect. It extends the CatalogContentEventListener to handle price and inventory updates by indexing the parent product when a variation is updated. This ensures that changes to prices and inventory on variations are reflected in the search index for the parent product.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\n[InitializableModule]\n    [ModuleDependency(typeof(FindCommerceInitializationModule))]\n    public class InitializationModule : IConfigurableModule\n      {\n        public void Initialize(InitializationEngine context)\n          {\n            context.Locate.Advanced.GetInstance<PriceIndexing>().IsIndexingIIndexedPrices = true;\n          }\n        public void Uninitialize(InitializationEngine context)\n          {\n          }\n        public void ConfigureContainer(ServiceConfigurationContext context)\n          {\n            context.Services.AddSingleton<CatalogContentClientConventions, \n              SiteCatalogContentClientConventions>();\n          }\n      }\n    \n    public class SiteCatalogContentEventListener : CatalogContentEventListener\n      {\n        private ReferenceConverter _referenceConverter;\n        private readonly IContentRepository _contentRepository;\n        private readonly IRelationRepository _relationRepository;\n    \n        public SiteCatalogContentEventListener(\n          ReferenceConverter referenceConverter,\n          IContentRepository contentRepository,\n          IClient client,\n          CatalogEventIndexer indexer,\n          CatalogContentClientConventions catalogContentClientConventions,\n          PriceIndexing priceIndexing, \n          IRelationRepository relationRepository)\n          : base(\n                  referenceConverter,\n                  contentRepository,\n                  client,\n                  indexer, \n                  catalogContentClientConventions,\n                  priceIndexing)\n          {\n            _referenceConverter = referenceConverter;\n            _contentRepository = contentRepository;\n            _relationRepository = relationRepository;\n          }\n        protected override void IndexContentsIfNeeded(IEnumerable<ContentRefenrence> contentLinks, IDictionary<Type, bool> cachedReindexContentOnEventForType, Func<bool> isReindexingContentOnUpdates)\n          {\n            // Update parent contents\n            var contents = _contentRepository.GetItems(contentLinks, CultureInfo.InvariantCulture).ToList();\n            var parentContentLinks = new List<ContentReference>();\n            foreach (var parents in contents.OfType().Select(content => _contentRepository.GetItems(content.GetParentProducts(_relationRepository), CultureInfo.InvariantCulture).Select(c => c.ContentLink).ToList()))\n              {\n                parentContentLinks.AddRange(parents);\n              }\n              // If index variants still needed, keep the line below\n              // IndexContentsIfNeeded(contentLinks, GetIndexContentAction(), cachedReindexContentOnEventForType, isReindexingContentOnUpdates);\n    \n              IndexContentsIfNeeded(parentContentLinks, GetIndexContentAction(), cachedReindexContentOnEventForType, isReindexingContentOnUpdates);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding Line Items to Shipments C#\nDESCRIPTION: This snippet illustrates how to add line items to shipments within a cart using Optimizely Commerce Connect. It retrieves the cart, creates line items using IOrderGroupFactory, and adds them to specific shipments in different order forms, including handling B2B scenarios.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var orderGroupFactory = ServiceLocator.Current.GetInstance<IOrderGroupFactory>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    \n    //add line item to first shipment on first form\n    var lineItem = orderGroupFactory.CreateLineItem(\"code\", cart);\n    \n    //use orderFactory for unit testing\ncart.AddLineItem(lineItem, orderGroupFactory);\n    \n    //add line item to second shipment on first form\n    var shipment = cart.GetFirstForm().Shipments.Last();\n    var lineItem = orderGroupFactory.CreateLineItem(\"code\", cart);\ncart.AddLineItem(shipment, lineItem);\n    \n    //add line item to second form first shipment\n    var orderForm = cart.Forms.Last();\n    var lineItem = orderGroupFactory.CreateLineItem(\"code\", cart);\n    \n    //add orderFactory for unit testing \ncart.AddLineItem(orderForm, lineItem, orderGroupFactory);\n    \n    //remove line item from first form first shipment \ncart.GetFirstShipment().LineItems.Remove(lineItem);\n    \n    //remove line item from first form second shipment\ncart.GetFirstForm().Shipments.Last().LineItems.Remove(lineItem);\n    \n    //remove line item from second form first shipment (b2b)\ncart.Forms.Last().Shipments.First().LineItems.Remove(lineItem);\n```\n\n----------------------------------------\n\nTITLE: Check If Shipment Can Be Completed C#\nDESCRIPTION: This code snippet demonstrates how to determine if a shipment can be completed using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `CanCompleteShipment()` extension method on the `purchaseOrder` instance, passing a shipment object.  This requires resolving dependencies for `IOrderRepository` and an `IShipment` object.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_19\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipment shipment;\n    \n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var canCompleteShipment = purchaseOrder.CanCompleteShipment(shipment);\n```\n\n----------------------------------------\n\nTITLE: Accessing Order Metadata in Optimizely Commerce (C#)\nDESCRIPTION: This snippet demonstrates how to access existing metadata properties associated with different parts of an order in Optimizely Commerce. It retrieves data from cart, order form, payment, shipment, and line item properties. It requires references to EPiServer.ServiceLocation, EPiServer.Commerce.Orders, and Mediachase.Commerce.Customers.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extending-order-classes.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    \n    var cartField = cart.Propeties[\"myfield\"].ToString();\n    var formField = cart.GetFirstForm().Properties[\"myFormField\"].ToString();\n    var paymentField = cart.GetFirstForm().Payments.First().Properties[\"myPaymentField\"].ToString();\n    var shipmentField = cart.GetFirstShipment().Properties[\"myShipmentField\"].ToString();\n    var lineItemField = cart.GetAllLineItems().First().Properties[\"myLineItemField\"].ToString();\n```\n\n----------------------------------------\n\nTITLE: Calculating Discounted Price C#\nDESCRIPTION: This snippet calculates the discounted price of a line item, considering only the line item discount. It takes an ILineItem, Currency, and ILineItemCalculator as input and prints the result to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-line-item-calculator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetDiscountedPrice(ILineItem lineItem, Currency currency, ILineItemCalculator lineItemCalculator)\n          {\n            var discoutedPrice = lineItemCalculator.GetDiscountedPrice(lineItem, currency);\n            Debug.WriteLine(\"Discounted price for '{0}': {1}\", lineItem.Code, discountedPrice);\n          }\n```\n\n----------------------------------------\n\nTITLE: Saving Dynamic Package Info\nDESCRIPTION: This extension method saves the selected dynamic package items (selected entries) to the properties of the line item.  It joins the selected options into a semicolon-separated string and stores it in the `DynamicPackageField.FieldName` property of the line item.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic static void SaveDynamicPackageInfo(this ILineItem lineItem, IEnumerable<string> selectedOptions)\n{\n    var properties = lineItem.Properties;\n    if (properties != null)\n    {\n        properties[DynamicPackageField.FieldName] = string.Join(\";\", selectedOptions);\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Promotion Prices for Entry (C#)\nDESCRIPTION: This snippet shows how to retrieve promotion prices for a specific entry using the promotion engine. It gets instances of IPromotionEngine and ICurrentMarket, then calls GetDiscountPrices to get the discounted entries. It requires Optimizely.Commerce.Marketing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotions-engine.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar promotionEngine = ServiceLocator.Current.GetInstance<IPromotionEngine>();\n    var currentMarket = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n    IEnumerable<DiscountedEntry> discountedEntries = promotionEngine.GetDiscountPrices(entryLink, currentMarket);\n```\n\n----------------------------------------\n\nTITLE: Cancel Purchase Order C#\nDESCRIPTION: This code snippet demonstrates how to cancel a purchase order using the `IPurchaseOrderProcessor`. It loads a purchase order by its ID and then calls the `CancelOrder()` method on the `purchaseOrderProcessor` instance. This requires resolving dependencies for `IOrderRepository` and `IPurchaseOrderProcessor`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    IPurchaseOrderProcessor purchaseOrderProcessor;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    purchaseOrderProcessor.CancelOrder(purchaseOrder);\n```\n\n----------------------------------------\n\nTITLE: Filtering Catalogs with Find (C#)\nDESCRIPTION: This snippet demonstrates how to filter catalogs by site using Optimizely Find. It retrieves the catalog IDs associated with the current site and filters the search query to include only entries belonging to those catalogs. It requires access to `ServiceLocator`, `IClient`, `ICatalogSystem`, and uses the `EntryContentBase` model.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-site-for-catalogs.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n//Using Find\nvar query = ServiceLocator.Current.GetInstance<IClient>().Search<EntryContentBase>();\nvar ids = ServiceLocator.Current.GetInstance<ICatalogSystem>().GetCatalogsBySite(SiteDefinition.Current?.Id ?? Guid.Empty);\nif (ids?.Any() ?? false)\n{\n   query = query.Filter(x => x.CatalogId.In(ids));\n}\nvar result = query.GetContentResult();\n```\n\n----------------------------------------\n\nTITLE: Get Sale Price (Commerce 10-12.7) (C#)\nDESCRIPTION: Retrieves the sale price for an entry in a specific market, tailored for Optimizely Commerce versions 10-12.7. The method retrieves the price based on market, currency, customer pricing, and quantity. Uses IPriceService and considers customer-specific pricing. The primary difference compared to the 12.8+ version is the DateTime parameter passed to `priceService.GetPrices`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-market-examples.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic Price GetSalePrice(Entry entry, decimal quantity)\n      {\n        var currentMarketService = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n        var currentMarket = currentMarketService.GetCurrentMarket();\n        var currency = currentMarket.DefaultCurrency;\n        List<CustomerPricing> customerPricing = new List<CustomerPricing>();\n        customerPricing.Add(CustomerPricing.AllCustomers);\n    \n        var principal = PrincipalInfo.CurrentPrincipal;\n        if (principal != null)\n          {\n            if (!string.IsNullOrEmpty(principal.Identity.Name))\n              {\n                customerPricing.Add(new CustomerPricing(CustomerPricing.PriceType.UserName, principal.Identity.Name));\n              }\n    \n            CustomerContact currentUserContact = principal.GetCustomerContact();\n            if (currentUserContact != null && !string.IsNullOrEmpty(currentUserContact.EffectiveCustomerGroup))\n              {\n                customerPricing.Add(new CustomerPricing(CustomerPricing.PriceType.PriceGroup, currentUserContact.EffectiveCustomerGroup));\n              }\n          }\n    \n        IPriceService priceService = ServiceLocator.Current.GetInstance<IPriceService>();\n        PriceFilter filter = new PriceFilter()\n          {\n            Quantity = quantity,\n            Currencies = new Currency[] { currency },\n            CustomerPricing = customerPricing\n          };\n    \n        // return less price value\n        IPriceValue priceValue = priceService.GetPrices(currentMarket.MarketId, FrameworkContext.Current.CurrentDateTime, new CatalogKey(entry.ID), filter)\n            .OrderBy(pv => pv.UnitPrice)\n            .FirstOrDefault();\n    \n        if (priceValue != null)\n          {\n           return new Mediachase.Commerce.Catalog.Objects.Price(priceValue.UnitPrice);\n          }\n    \n        return null;\n      }\n```\n\n----------------------------------------\n\nTITLE: Get Current Market in Optimizely Commerce (C#)\nDESCRIPTION: Retrieves the current market using the ICurrentMarket interface. This method shows how to obtain the currently active market from the Optimizely Commerce platform using the current market service. It uses ServiceLocator to resolve the ICurrentMarket instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-market-examples.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic IMarket GetCurrentMarket()\n      {\n        var currentMarketService = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n        // Get current markets.\n        return currentMarketService.GetCurrentMarket();\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing a Database Backup Validator in C#\nDESCRIPTION: This C# code snippet implements an `ISchemaValidator` that performs a database backup before an automatic schema update. The `IsDatabaseUpdateAllowed` method always returns `true`, allowing the update, while the `BeforeUpdating` method creates a backup of the database to a specified folder.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/automatic-schema-updates.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class BackupDatabaseValidator : ISchemaValidator\n      {\n        private readonly string _backupFolder;\n        public BackupDatabaseValidator(string backupFolder)\n          {\n            _backupFolder = backupFolder;\n          }\n    \n        public bool IsDatabaseUpdateAllowed(ConnectionStringOptions connectionStringSettings)\n          {\n            return true;\n          }\n    \n        public void BeforeUpdating(ConnectionStringOptions connectionStringSettings)\n          {\n            var sqlConStrBuilder = new SqlConnectionStringBuilder(connectionStringSettings.ConnectionString);\n            var backupFileName = String.Format(CultureInfo.InvariantCulture, \"{0}-{1}.bak\", sqlConStrBuilder.InitialCatalog, DateTime.Now.ToString(\"yyyy-MM-dd\"));\n            var backupFilePath = Path.Combine(_backupFolder, backupFileName);\n    \n            using (var connection = new SqlConnection(sqlConStrBuilder.ConnectionString))\n              {\n                var query = String.Format(\"BACKUP DATABASE {0} TO DISK='{1}'\",\n                sqlConStrBuilder.InitialCatalog, backupFilePath);\n    \n                using (var command = new SqlCommand(query, connection))\n                  {\n                    connection.Open();\n                    command.ExecuteNonQuery();\n                  }\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Implementing IProductCustomFieldsHandler (C#)\nDESCRIPTION: This C# code demonstrates how to implement `IProductCustomFieldsHandler` to create and populate custom fields for products in ODP. It includes creating fields of different types (string, timestamp, integer, decimal, boolean).\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customized-commerce-odp.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n[ServiceConfiguration(ServiceType = typeof (IProductCustomFieldsHandler))]\npublic class CustomProducts: IProductCustomFieldsHandler {\n  public IEnumerable < SchemaObjectCreateField > CreateFields() {\n    return new [] {\n      new SchemaObjectCreateField {\n        Name = \"mark_product_teststring\",\n          DisplayName = \"Mark ODP Connector string\",\n          PublicRead = true,\n          Type = \"string\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testtimestamp\",\n          DisplayName = \"Mark ODP Connector timestamp\",\n          PublicRead = true,\n          Type = \"timestamp\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testinteger\",\n          DisplayName = \"Mark ODP Connector integer\",\n          PublicRead = true,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testdecimal\",\n          DisplayName = \"Mark ODP Connector decimal\",\n          PublicRead = false,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testboolean\",\n          DisplayName = \"Mark ODP Connector boolean\"\n      }\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Searching Shopping Carts by Expiration Date in C#\nDESCRIPTION: This snippet retrieves shopping carts where line items have an expiration date (a meta-field) greater than a specified value. It uses SqlMetaWhereClause to filter by expiration date and SqlWhereClause to ensure only ShoppingCarts are returned.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nOrderSearchParameters parameters = new OrderSearchParameters();\n    searchOptions.Classes.Add(\"LineItemEx\");\n    parameters.SqlMetaWhereClause = \"META.ExpirationDate > '1/1/2012'\";\n    parameters.SqlWhereClause = \"OrderGroupId IN (Select ObjectId FROM OrderGroup_ShoppingCart)\";\n    Cart[] cartCollection = OrderContext.Current.Search<Cart>(parameters, searchOptions);\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Return Order Form Calculation in C#\nDESCRIPTION: This example demonstrates how to override the default return order form calculations by inheriting from DefaultReturnOrderFormCalculator. It overrides the CalculateTotal, CalculateSubtotal, CalculateHandlingTotal, CalculateShippingSubTotal, and CalculateReturnTaxTotal methods to return a zero value. It requires IShippingCalculator and ITaxCalculator to be injected into the constructor.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReturnOrderFormCalculatorOverridingDefault : DefaultReturnOrderFormCalculator\n      {\n        public ReturnOrderFormCalculatorOverridingDefault(IShippingCalculator shippingCalculator, ITaxCalculator taxCalculator)\n          : base(shippingCalculator, taxCalculator)\n          { }\n        protected override Money CalculateTotal(IReturnOrderForm returnOrderForm, IMarket market, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateSubtotal(IReturnOrderForm returnOrderForm, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateHandlingTotal(IReturnOrderForm returnOrderForm, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateShippingSubTotal(IReturnOrderForm returnOrderForm, IMarket market, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateReturnTaxTotal(IReturnOrderForm returnOrderForm, IMarket market, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Overriding Price & Tax Validation C#\nDESCRIPTION: This snippet shows how to override the default validation logic for extended price and sales tax by inheriting from DefaultLineItemCalculator. It overrides the ValidateExtendedPrice and ValidateSalesTax methods to throw a ValidationException if the money amount is less than or equal to 0.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-line-item-calculator.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic class LineItemCalculatorSample : DefaultLineItemCalculator\n      {\n        protected override void ValidateExtendedPrice(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Extended price must be greater than 0\");\n              }\n          }\n    \n        protected override void ValidateSalesTax(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Sales tax must be greater than 0\");\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Discount Total in C#\nDESCRIPTION: This method calculates the order discount total for an order group using the IOrderGroupCalculator and outputs the result to the debug console. It takes an IOrderGroup and IOrderGroupCalculator as parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetOrderDiscountTotal(IOrderGroup orderGroup, IOrderGroupCalculator orderGroupCalculator)\n          {\n            var orderDiscountTotal = orderGroupCalculator.GetOrderDiscountTotal(orderGroup);\n            Debug.WriteLine(\"Order discount total for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, orderDiscountTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Searching Purchase Orders using Extension Methods in C#\nDESCRIPTION: This code snippet demonstrates how to use the `IOrderSearchServiceExtensions` to find purchase orders using an `OrderSearchFilter`. It retrieves an instance of the `IOrderSearchService` from the service locator and uses the `FindPurchaseOrders` extension method to search for orders based on the filter.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-abstractions.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar orderFilter = new OrderSearchFilter\n      {\n        CreatedFrom = DateTime.UtcNow.AddDays(-365),\n        CreatedTo = DateTime.UtcNow\n      };\n    var orderSearchService = ServiceLocator.Current.GetInstance<IOrderSearchService>();\n    var searchResult = orderSearchService.FindPurchaseOrders(orderFilter);\n    var orders = searchResult.Orders;\n    var totalRecords = searchResult.TotalRecords;\n```\n\n----------------------------------------\n\nTITLE: Registering Catalog Routes in Optimizely Commerce (C#)\nDESCRIPTION: This C# code snippet demonstrates how to create an initialization module that registers catalog content routes in Optimizely Commerce. It depends on the EPiServer.Commerce.Initialization.InitializationModule and uses the CatalogRouteHelper to map default hierarchical routes. The module implements the IInitializableModule interface and utilizes the EPiServer.Framework and EPiServer.Commerce.Routing namespaces.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/initialization.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Web.Routing;\nusing EPiServer.Framework;\nusing EPiServer.Commerce.Routing;\nusing EPiServer.Framework.Initialization;\n\nnamespace CodeSamples.EPiServer.Commerce.Catalog\n  {\n    [ModuleDependency(typeof(global::EPiServer.Commerce.Initialization.InitializationModule))]\n    public class RegisterRoutingModuleSample : IInitializableModule\n      {\n        public void Initialize(InitializationEngine context)\n          {\n            MapRoutes(RouteTable.Routes);\n          }\n        private static void MapRoutes(RouteCollection routes)\n          {\n            CatalogRouteHelper.MapDefaultHierarchialRouter(routes, true);\n          }\n        public void Uninitialize(InitializationEngine context) { /*uninitialize*/}\n        public void Preload(string[] parameters) { }\n      }\n  }\n```\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Web.Routing;\nusing EPiServer.Framework;\nusing EPiServer.Commerce.Routing;\nusing EPiServer.Framework.Initialization;\n\nnamespace CodeSamples.EPiServer.Commerce.Catalog\n  {\n    [ModuleDependency(typeof(global::EPiServer.Commerce.Initialization.InitializationModule))]\n    public class RegisterRoutingModuleSample : IInitializableModule\n      {\n        public void Initialize(InitializationEngine context)\n          {\n            MapRoutes(RouteTable.Routes);\n          }\n        private static void MapRoutes(RouteCollection routes)\n          {\n            CatalogRouteHelper.MapDefaultHierarchialRouter(routes, true);\n          }\n        public void Uninitialize(InitializationEngine context) { /*uninitialize*/}\n        public void Preload(string[] parameters) { }\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Adding Association Group in Optimizely Commerce Connect (C#)\nDESCRIPTION: Adds a new association group definition to the Optimizely system. It retrieves an instance of GroupDefinitionRepository<AssociationGroupDefinition>, creates a new AssociationGroupDefinition, and adds it to the repository.  The method takes an InitializationEngine context as input.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/related-entries.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddAssociationGroup(InitializationEngine context)\n      {\n        // Add predefined selections CrossSell\n        // If they already exist nothing will be added\n        var associationDefinitionRepository = context.Locate.Advanced.GetInstance<GroupDefinitionRepository<AssociationGroupDefinition>>();\n        associationDefinitionRepository.Add(new AssociationGroupDefinition { Name = \"CrossSell\" });\n      }\n```\n\n----------------------------------------\n\nTITLE: Releasing Shipment using IShipmentProcessor in C#\nDESCRIPTION: This snippet demonstrates how to release a shipment using the ReleaseShipment method of the IShipmentProcessor interface. It requires an IOrderRepository, IShipmentProcessor, and a list of IShipment instances. The orderGroupId and shipments list are used to release the shipments for a purchase order.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_23\n\nLANGUAGE: C#\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipmentProcessor shipmentProcessor;\n    IList<Ishipment> shipments;\n    \n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    shipmentProcessor.ReleaseShipment(purchaseOrder, shipments);\n```\n\n----------------------------------------\n\nTITLE: Calculate Promotions with Order API (C#)\nDESCRIPTION: This code snippet demonstrates how to use the Optimizely Promotion Engine to calculate promotions using the order API. It loads or creates a cart and then runs the promotion engine against it to get reward descriptions. Requires Optimizely.Commerce.Marketing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotions-engine.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar cart = ServiceLocator.Current.GetInstance<IOrderRepository>().LoadOrCreateCart<Cart>(PrincipalInfo.CurrentPrincipal.GetContactId(), Cart.DefaultName);\n    IEnumerable<RewardDescription> rewardDescriptions = ServiceLocator.Current.GetInstance<IPromotionEngine>().Run(cart);\n```\n\n----------------------------------------\n\nTITLE: Update Orders with Site ID - SQL\nDESCRIPTION: This SQL script updates the SiteId column in the OrderGroup table for Purchase Orders. It selects OrderGroup records where the OrderGroupId exists in the OrderGroup_PurchaseOrder table and sets the SiteId to an empty string. You'll need to replace the empty string with the actual SiteId based on your custom logic.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-site-for-orders.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\n--Update orders\n  Update OrderGroup set SiteId = ''\n  where OrderGroupId in (Select ObjectId from OrderGroup_PurchaseOrder)\n```\n\n----------------------------------------\n\nTITLE: Adding New Line Item\nDESCRIPTION: This method creates a new line item in the cart with specified code, quantity, display name, and selected options for dynamic packages. It sets the line item's quantity, display name, saves the dynamic package information using the `SaveDynamicPackageInfo` extension method, adds the line item to the cart, and sets the placed price based on the pricing service. The method requires `ICart`, `code`, `quantity`, `displayName` and collection of `selectedOptions` as parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprivate ILineItem AddNewLineItem(\n    ICart cart, string code, decimal quantity, string displayName,\n    IEnumerable<string> selectedOptions)\n{\n    var newLineItem = cart.CreateLineItem(code, _orderGroupFactory);\n    newLineItem.Quantity = quantity;\n    newLineItem.DisplayName = displayName;\n\n    newLineItem.SaveDynamicPackageInfo(selectedOptions);\n\n    cart.AddLineItem(newLineItem, _orderGroupFactory);\n\n    var price = _pricingService.GetPrice(code);\n    if (price != null)\n    {\n        newLineItem.PlacedPrice = price.UnitPrice.Amount;\n    }\n\n    return newLineItem;\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Parent Bundles/Packages with Content Extensions (C#)\nDESCRIPTION: Retrieves the parent bundles or packages of an entry using content extensions. This approach leverages the GetParentBundles() and GetParentPackages() methods available on EntryContentBase objects.  It returns an IEnumerable of ContentReference objects representing the bundles or packages. The methods rely on content extensions so no dependency on IRelationRepository is required directly.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<ContentReference> GetParentBundles(EntryContentBase entryContent)\n      {\n        var bundleLinks = entryContent.GetParentBundles();\n        return bundleLinks;\n      }\n    \n    public IEnumerable<ContentReference> GetParentPackages(EntryContentBase entryContent)\n      {\n        var packageLinks = entryContent.GetParentPackages();\n        return packageLinks;\n      }\n```\n\n----------------------------------------\n\nTITLE: Excluding Inventories from Indexing in C#\nDESCRIPTION: This code snippet shows how to prevent inventory data from being indexed for variants. By excluding the `Inventories()` field, updates to inventory will not trigger re-indexing of the variant content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/overriding-default-conventions.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ApplyIStockPlacementConventions(TypeConventionBuilder<IStockPlacement> conventionBuilder)\n      {\n        base.ApplyIStockPlacementConventions(conventionBuilder);\n        conventionBuilder\n            .ExcludeField(x => x.Inventories());\n      }\n```\n\n----------------------------------------\n\nTITLE: Get All Price Type Definitions (C#)\nDESCRIPTION: This C# code snippet retrieves all price type definitions, including both predefined types and those defined in the configuration file. It uses the `PriceTypeConfiguration.Instance.PriceTypeDefinitions` property. The `PriceTypeConfiguration` class is assumed to be part of the Mediachase.Commerce.Pricing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricetype-examples.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nnamespace CodeSamples.Mediachase.Commerce.Pricing\n      {\n        public class PriceTypeConfigurationSample\n          {\n            #region GetPriceTypeFromEnumAndConfiguration\n            public IDictionary<CustomerPricing.PriceType, PriceTypeDefinition> GetAllPriceTypeDefinitions()\n              {\n                 // Get all price types - included predefined and price types from configuration file.\n                 var priceTypeDefinitions = PriceTypeConfiguration.Instance.PriceTypeDefinitions;\n                 return priceTypeDefinitions;\n              }\n            #endregion\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Saved Bolt Cards (C#)\nDESCRIPTION: This C# code snippet shows how to retrieve a list of saved Bolt cards using the Bolt API. It defines an HTTP GET endpoint (`GetBoltCards`) that takes a code and scope as query parameters. It then uses an `_apiService` to obtain an access token and retrieve the user's Bolt account information, including the saved cards.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bolt-installation.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[HttpGet]\npublic async Task<IActionResult> GetBoltCards([FromQuery] string code, [FromQuery] string scope)\n{\n    var token = await _apiService.GetTokenAsync(code, scope);\n    if (token == null)\n    {\n        return new JsonResult(null);\n    }\n\n    var account = await _apiService.GetAccountAsync(token.AccessToken);\n    if (account == null)\n    {\n        return new JsonResult(null);\n    }\n\n    account.Token = token.AccessToken;\n    return new JsonResult(account);\n}\n```\n\n----------------------------------------\n\nTITLE: Validate Line Items in Cart - C#\nDESCRIPTION: This code snippet demonstrates how to validate line items in a cart and check for validation issues using ILineItemValidator. It retrieves a cart, iterates through its line items, and validates each item. Any validation issues are stored in a dictionary for later inspection.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var lineItemValidator = ServiceLocator.Current.GetInstance<ILineItemValidator>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart(contactId, \"Default\");\n    var validationIssues = new Dictionary<ILineItem, ValidationIssue>();\n    \n    //Check all line items on cart\n    cart.ValidateOrRemoveLineItems((item, issue) => validationIssues.Add(item, issue), lineItemValidator);\n    \n    //Check one lineitem\n    var lineItem = cart.GetAllLineItems().First();\n    if (!lineItemValidator.Validate(lineItem, cart.Market, (item, issue) => validationIssues.Add(item, issue)))\n      {\n        //Check validationIssues for problems\n      }\n```\n\n----------------------------------------\n\nTITLE: Create Simple Filter (Contains) in C#\nDESCRIPTION: This snippet demonstrates how to create a simple filter that returns elements where the 'Key' property contains a specified keyword. It utilizes the FilterElement constructor with FilterElementType.Contains.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-and-sorting.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nFilterElement filter = new FilterElement(\"Key\", FilterElementType.Contains, keyword)\n```\n\n----------------------------------------\n\nTITLE: Get Cache-Skipping Instance of IInventoryService in C#\nDESCRIPTION: This snippet demonstrates how to obtain an instance of IInventoryService that bypasses the cache during read operations. It utilizes the ServiceLocator to retrieve the default IInventoryService and then calls GetCacheSkippingInstance() to return the cache-skipping instance.  No specific dependencies beyond Optimizely's service location.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Gets an instance of IInventoryService that will skip the cache on reads. \n    public IInventoryService GetCacheSkippingInstance() \n      {  \n        var inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>(); \n        return inventoryService.GetCacheSkippingInstance(); \n      }\n```\n\n----------------------------------------\n\nTITLE: Including Related Variant Content Items in Product Content\nDESCRIPTION: Extends `ProductContent` with a `VariationContents` method to retrieve related `VariationContent` items, which are then included for indexing.  The `ApplyProductContentConventions` method is overridden to use `IncludeField` to include the `VariationContents()` property, making it searchable. Requires dependencies on `IContentLoader` and `IRelationRepository`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ProductContentExtensions\n      {\n        public static IEnumerable<VariationContent> VariationContents(this ProductContent productContent)\n          {\n            return VariationContents(productContent, ServiceLocator.Current.GetInstance<IContentLoader>(), ServiceLocator.Current.GetInstance<IRelationRepository>());\n          }\n        public static IEnumerable<VariationContent> VariationContents(this ProductContent productContent, IContentLoader contentLoader, IRelationRepository relationRepository)\n          {\n            return contentLoader.GetItems(productContent.GetVariants(relationRepository), productContent.Language).OfType<VariationContent>();\n          }\n      }\n    \n    public class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n        protected override void ApplyProductContentConventions(TypeConventionBuilder<ProductContent> conventionBuilder)\n          {\n            base.ApplyProductContentConventions(conventionBuilder);\n            conventionBuilder\n              .ExcludeField(x => x.Variations())\n              .IncludeField(x => x.VariationContents());\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Discount Total for Return Order Form in C#\nDESCRIPTION: This snippet calculates the total discount amount for a return order form. This includes order-level discounts, line item discounts, and shipment discounts.  It leverages the IReturnOrderFormCalculator and logs the result.  It requires IReturnOrderForm, Currency, and IReturnOrderFormCalculator as parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetDiscountTotal(IReturnOrderForm returnOrderForm, Currency currency, IReturnOrderFormCalculator returnOrderFormCalculator)\n          {\n            var discountTotal = returnOrderFormCalculator.GetDiscountTotal(returnOrderForm, currency);\n            Debug.WriteLine(\"Discount total for return order form '{0}': {1}\", returnOrderForm.OrderFormId, discountTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Cart Validation with OrderValidationService (Commerce Connect 14+)\nDESCRIPTION: This C# code snippet demonstrates how to validate a cart using the OrderValidationService in Optimizely Commerce Connect version 14 and higher.  It creates a CartBuilder, adds entries to the cart, sets the provider ID, validates the order using OrderValidationService, and accepts the changes.  Dependencies include EPiServer.Commerce.Order and objects like VariationContent and OrderValidationService.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/workflows-and-activities.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nCartBuilder ch = new CartBuilder();\n    foreach (VariationContent entry in entries)\n    {\n       ch.AddEntry(entry, quantity, false);\n    }\n    ch.Cart.ProviderId = \"FrontEnd\";\n    OrderValidationService.ValidateOrder(ch.Cart);\n    ch.Cart.AcceptChanges();\n```\n\n----------------------------------------\n\nTITLE: Creating a New Enumerator C#\nDESCRIPTION: This code snippet demonstrates how to create a new enumerator using the MetaEnum.Create method. It takes the enumerator's type name, friendly name, and a boolean value indicating whether it's a multi-value enumerator as parameters. The newly created MetaFieldType object is then returned.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metaenum-class.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nMetaFieldType newEnum = MetaEnum.Create(enumName, enumFriendlyName, bMultyValue);\n```\n\n----------------------------------------\n\nTITLE: Save Inventories in C#\nDESCRIPTION: This snippet shows how to save (insert or update) inventory records. It retrieves the IInventoryService instance and calls the Save() method with an IEnumerable<InventoryRecord>. Records are updated if they exist, otherwise inserted. No explicit return.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// Saves the specified inventory records.\n    public void SaveInventories(IEnumerable<InventoryRecord> records)\n      {\n        var inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.Save(records);\n      }\n```\n\n----------------------------------------\n\nTITLE: Initializing SqlContext in C#\nDESCRIPTION: Initializes the SqlContext, which is the entry point to the SQL meta-model. It sets the connection string and assigns the context to the current thread. The SqlContext.Current property is thread-safe and needs to be initialized in each thread. The context should be disposed of explicitly using the Dispose method when it goes out of scope.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Step 0. Connection String\n    string connectionString = \"Data Source=(local);Initial Catalog=TestDatabase;User ID=sa;Password=;\";\n    // Step 1. Initiaze Sql Meta Model\n    SqlContext.Current = new SqlContext(connectionString);\n```\n\n----------------------------------------\n\nTITLE: Transaction Management with SqlTransactionScope in C#\nDESCRIPTION: This code snippet demonstrates how to use SqlTransactionScope to manage transactions when interacting with SQL data. It shows how to create a transaction scope, perform operations within the transaction, and commit the transaction. Requires Mediachase.BusinessFoundation.Data.Sql namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-sql-records.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing (SqlContext.Current = new SqlContext(connectionString))\n      {\n        using (SqlTransactionScope tran = SqlContext.Current.BeginTransaction())\n          {\n            // Step 1. Get Book table\n            Table bookTable = SqlContext.Current.Database.Tables[\"Book\"];\n    \n            // Step 2. Create a new book\n            CustomTableRow newBook = new CustomTableRow(bookTable);\n            newBook[\"Title\"] = \"Programming Windows Phone 7\";\n            newBook.Update();\n    \n            PrimaryKeyId newBookPk = newBook.PrimaryKeyId.Value;\n    \n            // Step N. Call Commit to commit transaction\n            tran.Commit();\n          }\n      }\n\n```\n\n----------------------------------------\n\nTITLE: Deleting a Currency in Optimizely using C#\nDESCRIPTION: This snippet demonstrates how to delete an existing currency (e.g., USD) in Optimizely Commerce Connect using the CurrencyManager. It retrieves the CurrencyDto, finds the target currency row, marks it for deletion, and saves the changes.  The namespaces Mediachase.Commerce.Catalog.Dto and Mediachase.Commerce.Catalog.Managers are required.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/currencies.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar dto = CurrencyManager.GetCurrencyDto();\n    var currencyRow = dto.Currency.FirstOrDefault(x => x.CurrencyCode.Equals(\"USD\"));\n    currencyRow.Delete();\n    CurrencyManager.SaveCurrency(dto);\n```\n\n----------------------------------------\n\nTITLE: Creating a Return Order Form in C#\nDESCRIPTION: This snippet demonstrates how to create a return order form for a purchase order using the IPurchaseOrderFactory interface. It retrieves instances of IPurchaseOrderFactory and IOrderRepository from the service locator, loads a purchase order, and then creates the return order form.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar purchaseOrderFactory = ServiceLocator.Current.GetInstance<IPurchaseOrderFactory>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\t\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n            var returnOrderForm = purchaseOrderFactory.CreateReturnOrderForm(purchaseOrder);\n```\n\n----------------------------------------\n\nTITLE: Create Aggregation Reference in C#\nDESCRIPTION: This code snippet showcases the creation of an aggregation reference between meta-classes, enabling a parent entity to have a collection of child entities with a default element. It uses the `CreateAggregation` method and returns a MetaField object. Requires parameters like name, friendlyName, childMetaClassName, elementContainerRefFieldFriendlyName, and defaultElementFieldFriendlyName.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/meta-class-references.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic MetaField CreateAggregation(string name, \n                                       string friendlyName, \n                                       string childMetaClassName,\n                                       string elementContainerRefFieldFriendlyName,\n                                       string defaultElementFieldFriendlyName)\n      {\n        MetaField retVal = this.MetaClass.CreateAggregation(childMetaClassName, \n                           name, \n                           friendlyName,\n                           elementContainerRefFieldFriendlyName,\n                           defaultElementFieldFriendlyName);\n        return retVal;\n      }\n```\n\n----------------------------------------\n\nTITLE: Listing Associations in Optimizely Commerce Connect (C#)\nDESCRIPTION: Retrieves all related entries (Associations) for a given entry's ContentReference using the IAssociationRepository service.  The method takes a ContentReference as input and returns an IEnumerable of Association objects. It uses ServiceLocator to get an instance of the IAssociationRepository.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/related-entries.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<Association> ListAssociations(ContentReference referenceToEntry)\n      {\n        var associationRepository = ServiceLocator.Current.GetInstance<IAssociationRepository>();\n        var associations = associationRepository.GetAssociations(referenceToEntry);\n        return associations;\n      }\n```\n\n----------------------------------------\n\nTITLE: Iterating MetaFields Collection C#\nDESCRIPTION: This code snippet iterates through a MetaFieldCollection object (mc.Fields) and writes the name of each MetaField to the trace. It assumes that 'mc' is a MetaClass object and that System.Diagnostics is imported.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metafield-class.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nforeach (MetaField field in mc.Fields)\n      {\n        System.Diagnostics.Trace.WriteLine(field.Name);\n      }\n```\n\n----------------------------------------\n\nTITLE: Retrieve Shipping Provider Information C#\nDESCRIPTION: Demonstrates how to retrieve shipping provider information using the ShippingManager class. This example retrieves shipping method cases based on method ID, shipping address details, and weight, returning a DataTable with the results. The methodId is passed into the GetRate method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping-gateways-and-providers.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// The methodId is passed into the GetRate method\n    DataTable casesTable = ShippingManager.GetShippingMethodCases(\n      methodId,\n      shippingAddress.CountryCode,\n      shippingAddress.State,\n      shippingAddress.PostalCode,\n      shippingAddress.RegionCode,\n      null,\n      shippingAddress.City,\n      weight);\n```\n\n----------------------------------------\n\nTITLE: Configure Catalog Cache (Commerce Connect 10-13) XML\nDESCRIPTION: This XML snippet illustrates how to configure catalog caching in Commerce Connect versions 10-13, using the `ecf.catalog.config` file.  It specifies the connection string, enables caching, and sets timeouts for collections, entries, nodes, and schema.  The attributes `collectionTimeout`, `entryTimeout`, `nodeTimeout`, and `schemaTimeout` define the duration for which different catalog elements are cached.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-dto-and-object-models.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<?xml version=\"1.0\"?>\n<Catalog autoConfigure=\"true\">\n  <Connection connectionStringName=\"EcfSqlConnection\" />\n  <Cache enabled=\"true\" \n         collectionTimeout=\"0:1:0\" \n         entryTimeout=\"0:1:0\" \n         nodeTimeout=\"0:1:0\" \n         schemaTimeout=\"0:2:0\" />\n```\n\n----------------------------------------\n\nTITLE: Cart Validation with Workflow (Commerce Connect 10-13)\nDESCRIPTION: This C# code snippet shows how to validate a cart using the CartValidateWorkflowName in Optimizely Commerce Connect versions 10-13. It initializes a CartBuilder, adds entries to the cart, sets the provider ID, runs the workflow, and accepts the changes. The OrderGroupWorkflowManager is a key dependency here.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/workflows-and-activities.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCartBuilder ch = new CartBuilder();\n    foreach (VariationContent entry in entries)\n    {\n       ch.AddEntry(entry, quantity, false);\n    }\n    ch.Cart.ProviderId = \"FrontEnd\";\n    ch.RunWorkflow(OrderGroupWorkflowManager.CartValidateWorkflowName);\n    ch.Cart.AcceptChanges();\n```\n\n----------------------------------------\n\nTITLE: Filtering Content on a Specific Market in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to retrieve items available in a specific market. It utilizes the `Filter` method along with `AvailableMarkets()` and `MatchContained()` to filter based on the market value.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<VariationContent>()\n        .Filter(x => x.AvailableMarkets().MatchContained(v => v.Value, \"market\"));\n```\n\n----------------------------------------\n\nTITLE: Cloning Order Addresses for Exchange Order in C#\nDESCRIPTION: This snippet demonstrates how to clone order addresses from the original purchase order to the exchange order in Optimizely Commerce. It retrieves the purchase order and creates the exchange order. Then, it clears the existing addresses on the exchange order and clones all addresses from the original purchase order and adds them to the purchase order. This is important if you are using `PurchaseOrder` and `OrderAddress`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_13\n\nLANGUAGE: C#\nCODE:\n```\nvar purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId) as PurchaseOrder;\n        var exchangeOrder = returnOrderService.CreateExchangeOrder(purchaseOrder, purchaseOrder.GetFirstShipment()) as PurchaseOrder;\n        exchangeOrder.OrderAddresses.Clear();\n        \n        foreach (var orderAddress in purchaseOrder.OrderAddresses)\n          {\n             var clonedOrderAddress = (OrderAddress)orderAddress.Clone();\n             clonedOrderAddress.OrderGroupId = purchaseOrder.OrderGroupId;\n             purchaseOrder.OrderAddresses.Add(clonedOrderAddress);\n          }\n```\n\n----------------------------------------\n\nTITLE: Configure Optimizely Graph Settings in JSON\nDESCRIPTION: This code snippet demonstrates how to configure Optimizely Graph settings in the appsetting.json file. It includes the gateway address, app key, secret key, single key, and allow sending log settings. These settings are required for the application to connect to the Optimizely Graph service.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/optimizely-graph-for-commerce-connect.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"Optimizely\": {\n  \"ContentGraph\": {\n    \"GatewayAddress\": \"https://cg.optimizely.com\",\n    \"AppKey\": \"{your-app-key}\",\n    \"Secret\": \"{your-secret}\",\n    \"SingleKey\": \"{your-single-key}\",\n    \"AllowSendingLog\": \"true\"\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Shipping Tax C#\nDESCRIPTION: Calculates the shipping tax for a given shipment using the provided shipping calculator. It takes IShipment, IMarket, Currency and IShippingCalculator as parameters. The shipping tax is then printed to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingTax(IShipment shipment, IMarket market, Currency currency, IShippingCalculator shippingCalculator)\n          {\n            var shippingTax = shippingCalculator.GetShippingTax(shipment, market, currency);\n            Debug.WriteLine(\"Shipping tax for shipment '{0}': {1}\", shipment.ShipmentId, shippingTax);\n          }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Organizations with CustomerContext in C#\nDESCRIPTION: This C# snippet demonstrates how to retrieve a list of child organizations for a given parent organization using the EntityObject and CustomerContext.Current.GetOrganizationById() methods.  It iterates through the children of a PartnerOrganization, casts each child to an EntityObject, and then retrieves the corresponding Organization object using its PrimaryKeyId. The resulting list of organizations is stored in PartnerOrganizations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customers.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nList<Organization> PartnerOrganizations = new List<Organization>();\n    foreach (object child in PartnerOrganization.GetChildren())\n      {\n        EntityObject obj = child as EntityObject;\n        Organization org = CustomerContext.Current.GetOrganizationById(obj.PrimaryKeyId.Value);\n    \n        if (org != null)\n          {\n            PartnerOrganizations.Add(org);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Order Validation in C#\nDESCRIPTION: This class demonstrates how to override the default order validation behavior by inheriting from DefaultOrderGroupCalculator. It overrides the ValidateTotal, ValidateSubTotal, and ValidateHandlingTotal methods to throw a ValidationException if the money amount is less than or equal to 0.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderGroupCalculatorOverridingDefault : DefaultOrderGroupCalculator\n    {\n        public OrderGroupCalculatorOverridingDefault(\n           IOrderFormCalculator orderFormCalculator,\n           IReturnOrderFormCalculator returnOrderFormCalculator,\n           IMarketService marketService)\n           : base(orderFormCalculator, returnOrderFormCalculator, marketService)\n        { }\n    \n        protected override void ValidateTotal(Money money)\n        {\n          if (money.Amount <= 0)\n          {\n             throw new ValidationException(\"Total must be greater than 0\");\n          }\n        }\n    \n        protected override void ValidateSubTotal(Money money)\n        {\n          if (money.Amount <= 0)\n          {\n             throw new ValidationException(\"Subtotal must be greater than 0\");\n          }\n        }\n    \n        protected override void ValidateHandlingTotal(Money money)\n        {\n          if (money.Amount <= 0\n```\n\n----------------------------------------\n\nTITLE: Adding Meta-fields to Meta-classes in Optimizely Commerce Connect\nDESCRIPTION: This code snippet demonstrates how to add meta-fields to meta-classes using the Mediachase.MetaDataPlus.Configurator.MetaClass.Load, Mediachase.MetaDataPlus.Configurator.MetaField.Load and MetaClass.AddField methods. It also includes logic to create a meta field if it doesn't exist, and to recreate it if the datatype has changed.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metadata-plus.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"WorkOrder\");\n    var metaField = Mediachase.MetaDataPlus.Configurator.MetaField.Load(OrderContext.MetaDataContext, \"BidPrice\") ?? Mediachase.MetaDataPlus.Configurator.MetaField.Create(\n        context: OrderContext.MetaDataContext,\n        metaNamespace: metaClass.Namespace,\n        name: \"BidPrice\",\n        friendlyName: \"Bid Price\",\n        description: \"Bid Price\",\n        dataType: MetaDataType.Decimal,\n        length: 17,\n        allowNulls: true,\n        multiLanguageValue: false,\n        allowSearch: false,\n        isEncrypted: false);\n    \n    if (metaClass.MetaFields.All(x => x.Id != metaField.Id))\n    {\n        metaClass.AddField(metaField);\n    }\n    else if (!metaField.DataType.Equals(MetaDataType.Decimal))\n    {\n        metaClass.DeleteField(metaField.Name);\n        Mediachase.MetaDataPlus.Configurator.MetaField.Delete(OrderContext.MetaDataContext, metaField.Id);\n        metaField = Mediachase.MetaDataPlus.Configurator.MetaField.Create(context: OrderContext.MetaDataContext,\n            metaNamespace: metaClass.Namespace,\n            name: \"BidPrice\",\n            friendlyName: \"Bid Price\",\n            description: \"Bid Price\",\n            dataType: MetaDataType.Decimal,\n            length: 17,\n            allowNulls: true,\n            multiLanguageValue: false,\n            allowSearch: false,\n            isEncrypted: false);\n        metaClass.AddField(metaField);\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"WorkOrder\");\n    var metaField = Mediachase.MetaDataPlus.Configurator.MetaField.Load(OrderContext.MetaDataContext, \"BidPrice\") ?? Mediachase.MetaDataPlus.Configurator.MetaField.Create(\n        context: OrderContext.MetaDataContext,\n        metaNamespace: metaClass.Namespace,\n        name: \"BidPrice\",\n        friendlyName: \"Bid Price\",\n        description: \"Bid Price\",\n        dataType: MetaDataType.Decimal,\n        length: 17,\n        allowNulls: true,\n        multiLanguageValue: false,\n        allowSearch: false,\n        isEncrypted: false);\n    \n    if (metaClass.MetaFields.All(x => x.Id != metaField.Id))\n    {\n        metaClass.AddField(metaField);\n    }\n    else if (!metaField.DataType.Equals(MetaDataType.Decimal))\n    {\n        metaClass.DeleteField(metaField.Name);\n        Mediachase.MetaDataPlus.Configurator.MetaField.Delete(OrderContext.MetaDataContext, metaField.Id);\n        metaField = Mediachase.MetaDataPlus.Configurator.MetaField.Create(context: OrderContext.MetaDataContext,\n            metaNamespace: metaClass.Namespace,\n            name: \"BidPrice\",\n            friendlyName: \"Bid Price\",\n            description: \"Bid Price\",\n            dataType: MetaDataType.Decimal,\n            length: 17,\n            allowNulls: true,\n            multiLanguageValue: false,\n            allowSearch: false,\n            isEncrypted: false);\n        metaClass.AddField(metaField);\n```\n\n----------------------------------------\n\nTITLE: Defining Price Update Event Handler in C#\nDESCRIPTION: Defines an event handler for price updates using the EventHandler delegate and PriceUpdateEventArgs. This event allows subscribing methods to be notified when price updates occur within the system.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/events.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic event EventHandler<PriceUpdateEventArgs> PriceUpdated;\n```\n\n----------------------------------------\n\nTITLE: Configure Reporting Time Range in Startup.cs (C#)\nDESCRIPTION: This snippet shows how to configure the reporting time range options within the `ConfigureServices` method of `Startup.cs`. It configures `ReportingTimeRangeOptions` using the `services.Configure` method, setting the `TimeRangesInDays` property to a new `HashSet<int>` containing the desired time ranges.  These values determine the timeframes for which order data is collected.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/collect-data-for-reports.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<ReportingTimeRangeOptions>(o =>\n        {\n            o.TimeRangesInDays = new HashSet<int>() { 30, 60, 90, 180 };\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Insert Inventories in C#\nDESCRIPTION: This snippet illustrates how to insert new inventory records. It retrieves the IInventoryService instance and calls the Insert() method passing in an IEnumerable<InventoryRecord>. The insert operation throws an exception if any of the provided records already exist.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n// Inserts the specified inventory records.\n    public void InsertInventories(IEnumerable<InventoryRecord> records)\n      {\n        var inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.Insert(records);\n      }\n```\n\n----------------------------------------\n\nTITLE: Updating a Currency in Optimizely using C#\nDESCRIPTION: This snippet demonstrates how to update an existing currency (e.g., USD) in Optimizely Commerce Connect using the CurrencyManager. It retrieves the CurrencyDto, finds the target currency row, updates its properties, and updates the exchange rate.  The namespaces Mediachase.Commerce.Catalog.Dto and Mediachase.Commerce.Catalog.Managers are required.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/currencies.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar dto = CurrencyManager.GetCurrencyDto();\n    var currencyRow = dto.Currency.FirstOrDefault(x => x.CurrencyCode.Equals(\"USD\"));\n    currencyRow.Name = \"USA Dollar\";\n    currencyRow.ModifiedDate = DateTime.UtcNow;\n    var rateRow = currencyRow.GetCurrencyRateRows().FirstOrDefault(x => x.FromCurrencyId == dto.Currency.FirstOrDefault(x => x.CurrencyCode.Equals(\"BTC\")).CurrencyId);\n    rateRow.EndOfDayRate = 55000;\n    rateRow.AverageRate = 49000;\n    rateRow.CurrencyRateDate = DateTime.Now.Date;\n    rateRow.ModifiedDate = DateTime.UtcNow;\n    CurrencyManager.SaveCurrency(dto);\n```\n\n----------------------------------------\n\nTITLE: Create Sorting Element in C#\nDESCRIPTION: This snippet demonstrates how to create a sorting element to sort a collection by the 'IsProject' column in ascending order. It uses the SortingElement class with SortingElementType.Asc.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-and-sorting.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nSortingElement sorting = new SortingElement(\"IsProject\", SortingElementType.Asc);\n```\n\n----------------------------------------\n\nTITLE: Get Shipping Rate Method Signature C#\nDESCRIPTION: Shows the signature for the GetRate method that needs to be implemented when creating a custom shipping provider using IShippingPlugin. This method is responsible for calculating the shipping rate.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping-gateways-and-providers.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic ShippingRate GetRate(Guid methodId, IShipment shipment, ref string message)\n```\n\n----------------------------------------\n\nTITLE: Create Logical OR Block Filter in C#\nDESCRIPTION: This snippet shows how to create a logical OR block filter that returns elements where the 'Extension' property is either 'txt' or an empty string. It uses the OrBlockFilterElement class, combining two FilterElement.EqualElement filters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-and-sorting.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nOrBlockFilterElement orBlock = new OrBlockFilterElement(\n                FilterElement.EqualElement(\"Extension\", \"txt\"),\n                FilterElement.EqualElement(\"Extension\", string.Empty));\n```\n\n----------------------------------------\n\nTITLE: Create a New CustomTableRow Record in C#\nDESCRIPTION: This code snippet demonstrates how to create a new record in a SQL table using the CustomTableRow object. It creates a new CustomTableRow, sets the value of the 'Title' column, updates the record in the database, and retrieves the primary key ID.  Requires Mediachase.BusinessFoundation.Data.Sql namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-sql-records.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Create a new book{\n    CustomTableRow newBook = CustomTableRow (bookTable);\n    newBook[\"Title\"] = \"Programming Windows Phone 7\";\n    newBook.Update();\n    PrimaryKeyId newBookPk = newBook.PrimaryKeyId.Value;\n\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Schema Updates in appsettings.json\nDESCRIPTION: This JSON snippet demonstrates how to enable automatic schema updates by setting the `UpdateDatabaseSchema` property to `true` within the `appsettings.json` configuration file. This configuration allows the site to automatically apply SQL schema updates during site initialization if the database version is lower than the assembly version.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/automatic-schema-updates.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        \"EpiServer\": {\n            \"Cms\": {\n                \"DataAccess\": {\n                    \"UpdateDatabaseSchema\": \"true\"\n                }\n            }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipping Rate with IShippingGateway in C#\nDESCRIPTION: This code snippet demonstrates retrieving the shipping rate for each available shipment method using the IShippingGateway interface. It retrieves the shipping provider's class name, instantiates the provider, retrieves line items associated with the shipment address, and calls the GetRate method to determine the shipping rate.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nforeach (ShippingMethodDto.ShippingMethodRow row in shippingRows)\n      {\n        //The ShippingMethodDto maintains relationships between rows. This means that a ShippingMethodRow contains\n        //a reference to the parent shipping option/provider row. This allows us to retrieve the class name\n        //for the shipping provider so that we can instantiate an instance of the provider and execute the\n        //GetRate method for a particular cart.\n        Type type = Type.GetType(row.ShippingOptionRow.ClassName);\n        if (type == null)\n          {\n            throw new TypeInitializationException(row.ShippingOptionRow.ClassName, null);\n          }\n    \n        string message = String.Empty;\n        IShippingGateway provider = (IShippingGateway)Activator.CreateInstance(type);\n    \n        //now we retrieve all of the line items in the cart which are associated with the same shipping address\n        List<LineItem> items = new List<LineItem>();\n        foreach(LineItem lineItem in CartHelper.LineItems)\n          {\n            if(lineItem.ShippingAddressId == shipmentAddress.Name.ToString())\n              {\n                items.Add(lineItem);\n              }\n          } \n    \n        //now call the GetRate method to retrieve the rate for this shipment\n        if (items.Count > 0)\n          {\n            ShippingRate rate = provider.GetRate(row.ShippingMethodId, items.ToArray(), ref message);  \n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Sales Tax for Line Items C#\nDESCRIPTION: This snippet calculates the sales tax for a collection of line items. It takes an IEnumerable<ILineItem>, IMarket, Currency, IOrderAddress (shipping address), and ILineItemCalculator as input and returns the total sales tax as a Money object.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-line-item-calculator.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic Money GetSalesTax(IEnumerable<ILineItem> lineitems, IMarket market, Currency currency, IOrderAddress shippingAddress, ILineItemCalculator lineItemCalculator)\n          {\n            return lineItemCalculator.GetSalesTax(lineitems, market, shippingAddress, currency);\n          }\n```\n\n----------------------------------------\n\nTITLE: Creating Meta-classes in Optimizely Commerce Connect\nDESCRIPTION: This code snippet demonstrates how to create a meta-class using the Mediachase.MetaDataPlus.Configurator.MetaClass.Create method. It requires an OrderContext, name, friendlyName, table Name, parent metaClass and flags to create the metaClass.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metadata-plus.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar orderGroupClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"OrderGroup\");\n    var metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Create(OrderContext.MetaDataContext, \"WorkOrder\", \"Work Order\", \"WorkOrder\", orderGroupClass, false, \"Work Order\" );\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar orderGroupClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"OrderGroup\");\n    var metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Create(OrderContext.MetaDataContext, \"WorkOrder\", \"Work Order\", \"WorkOrder\", orderGroupClass, false, \"Work Order\" );\n```\n\n----------------------------------------\n\nTITLE: Getting Dynamic Package Info\nDESCRIPTION: This extension method retrieves the selected dynamic package information from the line item's properties. It checks if the `DynamicPackageField.FieldName` property exists and returns the value as a string array after splitting it by the semicolon delimiter. It returns null if no dynamic package information is found.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic static IEnumerable<string> GetDynamicPackageInfo(this ILineItem lineItem)\n{\n    var properties = lineItem.Properties;\n    if (properties != null && properties.ContainsKey(DynamicPackageField.FieldName))\n    {\n        var options = properties[DynamicPackageField.FieldName] as string;\n        return options.Split(\";\");\n    }\n\n    return null;\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Layout Sections in _Layout.cshtml (Razor)\nDESCRIPTION: This snippet defines recommendation sections (UpperRecommendations, LeftMarginRecommendations, RightMarginRecommendations, and BottomRecommendations) within the Views/Shared/_Layout.cshtml file. These sections are used to inject recommended products into specific areas of the website layout.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_0\n\nLANGUAGE: cshtml\nCODE:\n```\n...\n    <div class=\"recommendations recommendations-upper\">@RenderSection(\"UpperRecommendations\", false)</div>\n    <div class=\"recommendations recommendations-left\">@RenderSection(\"LeftMarginRecommendations\", false)</div>\n    <div class=\"recommendations recommendations-right\">@RenderSection(\"RightMarginRecommendations\", false)</div>\n    <div class=\"recommendations recommendations-bottom\">@RenderSection(\"BottomRecommendations\", false)</div>\n    ...\n```\n\n----------------------------------------\n\nTITLE: Get Shipping Cost C#\nDESCRIPTION: Calculates the shipping cost for a given shipment using the provided shipping calculator. It takes IShipment, IMarket, Currency and IShippingCalculator as parameters. The shipping cost is then printed to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingCost(IShipment shipment, IMarket market, Currency currency, IShippingCalculator shippingCalculator)\n          {\n            var shippingCost = shippingCalculator.GetShippingCost(shipment, market, currency);\n            Debug.WriteLine(\"Shipping cost for shipment '{0}': {1}\", shipment.ShipmentId, shippingCost);\n          }\n```\n\n----------------------------------------\n\nTITLE: Updating Countries and Regions in Optimizely (C#)\nDESCRIPTION: This code snippet demonstrates how to update existing countries and regions using the CountryManager and CountryDto classes. It retrieves a country using CountryManager.GetCountry(), modifies its properties (Ordering, Visible), and then retrieves a specific region (California) and updates its ordering. Finally, it saves the changes using CountryManager.SaveCountry().\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/countries-and-regions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar dto = CountryManager.GetCountry(\"USA\", true); \nvar countryRow = dto.Country[0]; \n  countryRow.Ordering = 20; \n  countryRow.Visible = false;  \nvar ca = countryRow.GetStateProvinceRows().FirstOrDefault(x => x.Name.Equals(\"California\")); \n  ca.Ordering = 5; \n  CountryManager.SaveCountry(dto);\n```\n\n----------------------------------------\n\nTITLE: Configure LuceneSearchProvider in appsettings.json\nDESCRIPTION: This JSON snippet shows how to configure the LuceneSearchProvider within the SearchOptions in the appsettings.json file. It sets the default search provider, maximum hits, indexer base path, and defines search providers with their types and parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/option-configuration-classes.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n\"Commerce\": {\n        \"SearchOptions\": {\n            \"DefaultSearchProvider\": \"LuceneSearchProvider\",\n            \"MaxHitsForSearchResults\": 1000,\n            \"IndexerBasePath\": \"[appDataPath]\\\\Quicksilver\\\\SearchIndex\",\n            \"IndexerConnectionString\": \"\",\n            \"SearchProviders\": [{\n                    \"Name\": \"LuceneSearchProvider\",\n                    \"Type\": \"Mediachase.Search.Providers.Lucene.LuceneSearchProvider, Mediachase.Search.LuceneSearchProvider\",\n                    \"Parameters\": {\n                        \"queryBuilderType\": \"Mediachase.Search.Providers.Lucene.LuceneSearchQueryBuilder, Mediachase.Search.LuceneSearchProvider\",\n                        \"storage\": \"[appDataPath]\\\\Quicksilver\\\\SearchIndex\",\n                        \"simulateFaceting\": \"true\"\n                    }\n                }\n            ],\n            \"Indexers\": [{\n                    \"Name\": \"catalog\",\n                    \"Type\": \"EPiServer.Reference.Commerce.Site.Infrastructure.Indexing.CatalogIndexer, EPiServer.Reference.Commerce.Site\"\n                }\n            ]\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Building Search Index in Optimizely Commerce Connect (C#)\nDESCRIPTION: This code snippet demonstrates how to build a search index in Optimizely Commerce Connect. It initializes a SearchManager with the application name and then calls the BuildIndex method with a boolean value indicating whether to rebuild the entire index or only add indexes that have changed since the last index was created. The `false` value implies an incremental build.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/search.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nSearchManager searchManager = new SearchManager(applicationName);\n    searchManager.BuildIndex(false);\n```\n\n----------------------------------------\n\nTITLE: Listing Entity Objects C#\nDESCRIPTION: This snippet illustrates how to retrieve a collection of entity objects from the persistent storage based on specified filters and sorting criteria. It uses BusinessManager.Execute with a ListRequest, taking the metaClassName, filters, and sorting parameters as input. The response contains an array of EntityObject instances.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nListResponse response = (ListResponse)BusinessManager.Execute(new ListRequest(metaClassName, filters, sorting));\n    EntityObject[] objs = response.EntityObjects;\n```\n\n----------------------------------------\n\nTITLE: Creating a Catalog Entry with the Catalog API in C#\nDESCRIPTION: This code snippet demonstrates how to create a new catalog entry using the Catalog API in Optimizely Commerce. It sets various properties, including catalog information, variation details, inventory, SEO data, metadata attributes, and node relations. It requires access to CatalogContext, MetaDataContext, and related DTOs.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-dto-and-object-models.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nprivate void SampleEntryAdd()\n    {\n      int catalogId = 2;\n     \n      // Get a CatalogDto object.\n      CatalogDto catalogDto = CatalogContext.Current.GetCatalogDto(catalogId, new CatalogResponseGroup(CatalogResponseGroup.ResponseGroup.CatalogInfo));\n     \n      if (catalogDto.Catalog.Count > 0)\n      {\n        // Get a CatalogEntryDto object.\n        CatalogEntryDto entry = CatalogContext.Current.GetCatalogEntryDto(\"PRODUCT_CODE\",\n          new CatalogEntryResponseGroup(CatalogEntryResponseGroup.ResponseGroup.CatalogEntryInfo));\n     \n        if (entry.CatalogEntry.Count == 0)\n        {\n          // Get a new entry row for your catalog entry.\n          CatalogEntryDto.CatalogEntryRow newEntryRow = entry.CatalogEntry.NewCatalogEntryRow();\n     \n          // Set entry properties.\n          newEntryRow.ApplicationId = AppContext.Current.ApplicationId;\n          newEntryRow.CatalogId = catalogDto.Catalog[0].CatalogId;\n          newEntryRow.ClassTypeId = \"Variation\";\n          newEntryRow.Code = \"PRODUCT_CODE\";\n          newEntryRow.EndDate = DateTime.Now.AddYears(2).ToUniversalTime();\n          newEntryRow.IsActive = true;\n          newEntryRow.MetaClassId = 32;\n          newEntryRow.Name = \"PRODUCT_NAME\";\n          newEntryRow.StartDate = DateTime.UtcNow;\n          newEntryRow.TemplateName = \"DigitalCameras\"; // system-defined template of type 'entry'\n          newEntryRow.SetSerializedDataNull();\n          if (newEntryRow.RowState == DataRowState.Detached)\n            entry.CatalogEntry.AddCatalogEntryRow(newEntryRow);\n     \n          // Set variation properties.\n          CatalogEntryDto.VariationRow newVariationRow = entry.Variation.NewVariationRow();\n          newVariationRow.ListPrice = Convert.ToDecimal(1000.00);\n          newVariationRow.MaxQuantity = 50;\n          newVariationRow.SetMerchantIdNull();\n          newVariationRow.MinQuantity = 5;\n          newVariationRow.PackageId = 0;\n          newVariationRow.TaxCategoryId = 0;\n          newVariationRow.TrackInventory = true;\n          newVariationRow.WarehouseId = 0;\n          newVariationRow.Weight = Convert.ToDouble(4);\n          newVariationRow.CatalogEntryId = entry.CatalogEntry[0].CatalogEntryId;\n          if (newVariationRow.RowState == DataRowState.Detached)\n            entry.Variation.AddVariationRow(newVariationRow);\n     \n          // Set inventory properties.\n          CatalogEntryDto.InventoryRow newInventoryRow = entry.Inventory.NewInventoryRow();\n          newInventoryRow.AllowBackorder = false;\n          newInventoryRow.AllowPreorder = false;\n          newInventoryRow.ApplicationId = AppContext.Current.ApplicationId;\n          newInventoryRow.BackorderAvailabilityDate = DateTime.UtcNow;\n          newInventoryRow.BackorderQuantity = 0;\n          newInventoryRow.InStockQuantity = Convert.ToDecimal(75);\n          newInventoryRow.InventoryStatus = 1;\n          newInventoryRow.PreorderAvailabilityDate = DateTime.UtcNow;\n          newInventoryRow.PreorderQuantity = 0;\n          newInventoryRow.ReorderMinQuantity = 15;\n          newInventoryRow.ReservedQuantity = 10;\n          newInventoryRow.SkuId = \"mark_test7\";\n          if (newInventoryRow.RowState == DataRowState.Detached)\n            entry.Inventory.AddInventoryRow(newInventoryRow);\n     \n          // Set seo properties.\n          CatalogEntryDto.CatalogItemSeoRow newSeoRow = entry.CatalogItemSeo.NewCatalogItemSeoRow();\n          newSeoRow.ApplicationId = AppContext.Current.ApplicationId;\n          newSeoRow.CatalogEntryId = entry.CatalogEntry[0].CatalogEntryId;\n          newSeoRow.CatalogNodeId = 62;\n          newSeoRow.Description = \"DESCRIPTION\";\n          newSeoRow.LanguageCode = \"en-us\";\n          newSeoRow.Uri = \"SEO-FRIENDLY-URL.aspx\";\n          if (newSeoRow.RowState == DataRowState.Detached)\n            entry.CatalogItemSeo.AddCatalogItemSeoRow(newSeoRow);\n     \n          // Save the entry.\n          CatalogContext.Current.SaveCatalogEntry(entry);\n     \n          // Save the metadata attributes associated with the catalog entry.\n          MetaDataContext metaContext = new MetaDataContext();\n          MetaClass metaClass = MetaClass.Load(metaContext, \"Publications\");\n          MetaObject metaObj = MetaObject.NewObject(metaContext, entry.CatalogEntry[0].CatalogEntryId, metaClass.Id, \"name\");\n          MetaHelper.SetMetaFieldValue(metaContext, metaObj, \"Title\", new object[] { \"New Book Title\" });\n          MetaHelper.SetMetaFieldValue(metaContext, metaObj, \"ID\", new object[] { \"New Id\" });\n          MetaHelper.SetMetaFieldValue(metaContext, metaObj, \"Description\", new object[] { \"New Description\" });\n          MetaHelper.SetMetaFieldValue(metaContext, metaObj, \"Theme\", new object[] { \"New Book Title\" });\n          MetaHelper.SetMetaFieldValue(metaContext, metaObj, \"Highlight\", new object[] { false });\n          metaObj.AcceptChanges(metaContext);\n     \n          // Set the entry node relation.\n          CatalogRelationDto relation = new CatalogRelationDto();\n          CatalogRelationDto.NodeEntryRelationRow nodeRelation = relation.NodeEntryRelation.NewNodeEntryRelationRow();\n          nodeRelation.CatalogId = 2;\n          nodeRelation.CatalogEntryId = entry.CatalogEntry[0].CatalogEntryId;\n          nodeRelation.CatalogNodeId = 62;\n          nodeRelation.SortOrder = 0;\n          if (nodeRelation.RowState == DataRowState.Detached)\n            relation.NodeEntryRelation.AddNodeEntryRelationRow(nodeRelation);\n     \n          // Save the relation.\n          CatalogContext.Current.SaveCatalogRelationDto(relation);\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Triggering Price Update Event in C#\nDESCRIPTION: Triggers a price update event using the OnPriceUpdated method of the CatalogKeyEventBroadcaster class. This method should be called whenever changes are made to the pricing system to notify listeners of the update. It takes the source object and a PriceUpdateEventArgs instance as parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/events.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic virtual void OnPriceUpdated(object source, PriceUpdateEventArgs args)\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange Order in C#\nDESCRIPTION: This snippet demonstrates how to create an exchange order from a purchase order using the `IReturnOrderService` interface in Optimizely Commerce. It retrieves instances of `IReturnOrderService` and `IOrderRepository` from the service locator, loads a purchase order, and creates an exchange order based on the purchase order and its first shipment. The order group ID is hardcoded as '1'.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\nvar returnOrderService = ServiceLocator.Current.GetInstance<IReturnOrderService>();\n        var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n        var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n        var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n        var exchangeOrder = returnOrderService.CreateExchangeOrder(purchaseOrder, purchaseOrder.GetFirstShipment());\n```\n\n----------------------------------------\n\nTITLE: Configure Catalog Cache via Startup.cs (C#)\nDESCRIPTION: This snippet demonstrates how to configure caching settings for the Catalogs subsystem within the Startup.cs file using C#. It configures the CatalogOptions with specified cache expiration times using the ConfigureServices method. It sets cache expiration for content version, collection, entry, and node caches.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/caching.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<CatalogOptions>(o =>\n        {\n            o.Cache.UseCache = true;\n            o.Cache.ContentVersionCacheExpiration = TimeSpan.FromMinutes(05);\n            o.Cache.CollectionCacheExpiration = TimeSpan.FromMinutes(05);\n            o.Cache.EntryCacheExpiration = TimeSpan.FromMinutes(05);\n            o.Cache.NodeCacheExpiration = TimeSpan.FromMinutes(05);\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Prices for ProductContent in Optimizely (C#)\nDESCRIPTION: Retrieves all prices associated with a ProductContent by iterating through its variations and fetching prices using ReadOnlyPricingLoader. It requires ProductContent, ReadOnlyPricingLoader, and IRelationRepository instances. This method uses LINQ's SelectMany to flatten the collection of prices.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IEnumerable<Price> Prices(this ProductContent productContent, ReadOnlyPricingLoader pricingLoader, IRelationRepository relationRepository)\n          {\n            var variationLinks = productContent.GetVariants(relationRepository);\n            return variationLinks.SelectMany(variationLink => pricingLoader.GetPrices(variationLink, null, Enumerable.Empty<CustomerPricing>()));\n          }\n```\n\n----------------------------------------\n\nTITLE: Load a CustomTableRow Record in C#\nDESCRIPTION: This code snippet shows how to load an existing record from a SQL table using the CustomTableRow object, given its primary key ID. If the record does not exist, an ObjectNotFoundException will be thrown. Requires Mediachase.BusinessFoundation.Data.Sql namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-sql-records.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Load book\n    PrimaryKeyId bookPk = 1;\n    CustomTableRow book = new CustomTableRow (bookTable, bookPk);\n    String title = (String)book[\"Title\"];\n\n```\n\n----------------------------------------\n\nTITLE: Getting the Database Object in C#\nDESCRIPTION: Demonstrates how to retrieve the Database object from the SqlContext, representing the SQL database. It initializes the SqlContext within a using statement for automatic disposal, then accesses the Database property to get the current database object. This object allows for operations like creating or dropping tables and relationships.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Step 0. Connection String\n    string connectionString = \"Data Source=(local);Initial Catalog=TestDatabase;User ID=sa;Password=;\";\n    // Step 1. Initiaze Sql Meta Model\n    using (SqlContext.Current = newSqlContext(connectionString))\n      {\n        // Step 2. Get Database\n        Database database = SqlContext.Current.Database;\n      }\n```\n\n----------------------------------------\n\nTITLE: Enable Event-Driven Order Reporting in appsettings.json\nDESCRIPTION: This snippet demonstrates how to enable event-driven order reporting in the `appsettings.json` file. Setting `EnableEventDrivenOrderReporting` to `true` under the `Commerce:ReportingOptions` section will trigger data collection whenever an order is placed or modified. This provides real-time updates to the report data.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/collect-data-for-reports.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Commerce\":{\n        \"ReportingOptions\":{\n            \"EnableEventDrivenOrderReporting\": true\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing Order Event Listener in C#\nDESCRIPTION: This code snippet demonstrates how to create an order event listener that subscribes to the SavedOrder and DeletingOrder events. It uses IOrderRepository, IOrderEvents, and a logger to track order modifications. The AddEvents method subscribes to the events, while the event handlers log information about saved and deleted orders. The RemoveEvents method unsubscribes from the events.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-events.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderEventListener\n      {\n        private readonly IOrderRepository _orderRepository;\n        private readonly IOrderEvents _orderEvents;\n        private readonly ILogger _logger = LogManager.GetLogger(typeof(OrderEventListener));\n    \n        public OrderEventListener(IOrderRepository orderRepository, IOrderEvents orderEvents)\n          {\n            _orderRepository = orderRepository;\n            _orderEvents = orderEvents;\n          }\n    \n        public void AddEvents()\n          {\n            _orderEvents.SavedOrder += OrderEventsOnSavedOrder;\n            _orderEvents.DeletingOrder += OrderEventsOnDeletingOrder;\n          }\n    \n        private void OrderEventsOnSavedOrder(object sender, OrderEventArgs orderEventArgs)\n          {\n            var po = orderEventArgs.OrderGroup as IPurchaseOrder;\n            if (po != null)\n              {\n                _logger.Information($\"Order {po.OrderNumber} was saved\");\n              }\n          }\n    \n        private void OrderEventsOnDeletingOrder(object sender, OrderEventArgs orderEventArgs)\n          {\n            var po = _orderRepository.Load<IPurchaseOrder>(orderEventArgs.OrderLink.OrderGroupId);\n            _logger.Information($\"Order {po.OrderNumber} is being deleted.\");\n          }\n    \n        public void RemoveEvents()\n          {\n            _orderEvents.DeletingOrder -= OrderEventsOnDeletingOrder;\n            _orderEvents.SavedOrder -= OrderEventsOnSavedOrder;\n          }\n      }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderEventListener\n      {\n        private readonly IOrderRepository _orderRepository;\n        private readonly IOrderEvents _orderEvents;\n        private readonly ILogger _logger = LogManager.GetLogger(typeof(OrderEventListener));\n    \n        public OrderEventListener(IOrderRepository orderRepository, IOrderEvents orderEvents)\n          {\n            _orderRepository = orderRepository;\n            _orderEvents = orderEvents;\n          }\n    \n        public void AddEvents()\n          {\n            _orderEvents.SavedOrder += OrderEventsOnSavedOrder;\n            _orderEvents.DeletingOrder += OrderEventsOnDeletingOrder;\n          }\n    \n        private void OrderEventsOnSavedOrder(object sender, OrderEventArgs orderEventArgs)\n          {\n            var po = orderEventArgs.OrderGroup as IPurchaseOrder;\n            if (po != null)\n              {\n                _logger.Information($\"Order {po.OrderNumber} was saved\");\n              }\n          }\n    \n        private void OrderEventsOnDeletingOrder(object sender, OrderEventArgs orderEventArgs)\n          {\n            var po = _orderRepository.Load<IPurchaseOrder>(orderEventArgs.OrderLink.OrderGroupId);\n            _logger.Information($\"Order {po.OrderNumber} is being deleted.\");\n          }\n    \n        public void RemoveEvents()\n          {\n            _orderEvents.DeletingOrder -= OrderEventsOnDeletingOrder;\n            _orderEvents.SavedOrder -= OrderEventsOnSavedOrder;\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Get Redemptions C#\nDESCRIPTION: This snippet retrieves a collection of redemption descriptions based on the applicable codes, promotion data, and promotion processor context. It iterates up to the maximum number of redemptions, extracting entries based on the required quantity and creating a redemption description for each set of affected entries.  It utilizes `applicableCodes`, `promotionData`, `context`, `promotionData.Condition.RequiredQuantity`, `promotionData.RedemptionLimits`, `context.EntryPrices.ExtractEntries`, and `CreateRedemptionDescription`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-promotions.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar redemptions = new List<RedemptionDescription>();\n                var requiredQuantity = promotionData.Condition.RequiredQuantity;\n                var maxRedemptions = GetMaxRedemptions(promotionData.RedemptionLimits);\n                for (int i = 0; i < maxRedemptions; i++)\n                  {\n                    var affectedEntries = context.EntryPrices.ExtractEntries(applicableCodes, requiredQuantity);\n                    if (affectedEntries == null\n                      {\n                        break;\n                      }\n                    redemptions.Add(CreateRedemptionDescription(affectedEntries));\n                  }\n                return redemptions;\n```\n\n----------------------------------------\n\nTITLE: Deleting Inventory by Catalog Entry in C#\nDESCRIPTION: Deletes all inventory data associated with specified catalog entries using the IInventoryService. The method fetches an instance of the IInventoryService and then calls the DeleteByEntry method, passing in a collection of catalog entry codes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\n// Deletes all inventory data for the specified catalog entries.\n    public void DeleteInventoriesByEntry(IEnumerable<string> catalogEntryCodes)\n      {\n        var inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.DeleteByEntry(catalogEntryCodes);\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Filters in XML for Optimizely\nDESCRIPTION: This XML snippet demonstrates how to configure search filters for an Optimizely Commerce Connect implementation. It defines filters based on fields like 'brand', 'color', 'size', and 'top_category_name', each containing localized descriptions and possible values. Each filter value has a key and a value along with descriptions for different locales.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/configuring-facets-and-filters.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<SearchConfig version=\"1.0\">\n      <SearchFilters>\n        <Filter field=\"brand\">\n          <Descriptions defaultLocale=\"en\">\n            <Description locale=\"en\">Brand</Description>\n            <Description locale=\"sv\">Märke</Description>\n          </Descriptions>\n          <Values>\n            <SimpleValue key=\"Brand 0\" value=\"Brand 0\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brand 0</Description>\n                <Description locale=\"sv\">Märke 0</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"Brand 1\" value=\"Brand 1\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brand 1</Description>\n                <Description locale=\"sv\">Märke 1</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"Brand 2\" value=\"Brand 2\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brand 2</Description>\n                <Description locale=\"sv\">Märke 2</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"Brand 3\" value=\"Brand 3\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brand 3</Description>\n                <Description locale=\"sv\">Märke 3</Description>\n              </Descriptions>\n            </SimpleValue>\n          </Values>\n        </Filter>\n        <Filter field=\"color\">\n          <Descriptions defaultLocale=\"en\">\n            <Description locale=\"en\">Color</Description>\n            <Description locale=\"sv\">Färg</Description>\n          </Descriptions>\n          <Values>\n            <SimpleValue key=\"black\" value=\"black\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Black</Description>\n                <Description locale=\"sv\">Svart</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"white\" value=\"white\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">White</Description>\n                <Description locale=\"sv\">Vit</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"red\" value=\"red\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Red</Description>\n                <Description locale=\"sv\">Röd</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"blue\" value=\"blue\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Blue</Description>\n                <Description locale=\"sv\">Blå</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"multi\" value=\"multi\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Multi</Description>\n                <Description locale=\"sv\">Multi</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"brown\" value=\"brown\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brown</Description>\n                <Description locale=\"sv\">Brun</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"navy\" value=\"navy\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Navy</Description>\n                <Description locale=\"sv\">Marin</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"yellow\" value=\"yellow\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Yellow</Description>\n                <Description locale=\"sv\">Gul</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"green\" value=\"green\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Green</Description>\n                <Description locale=\"sv\">Grön</Description>\n              </Descriptions>\n            </SimpleValue>\n          </Values>\n        </Filter>\n        <Filter field=\"size\">\n          <Descriptions defaultLocale=\"en\">\n            <Description locale=\"en\">Size</Description>\n            <Description locale=\"sv\">Storlek</Description>\n          </Descriptions>\n          <Values>\n            <SimpleValue key=\"s\" value=\"s\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">S</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"m\" value=\"m\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">M</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"l\" value=\"l\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">L</Description>\n              </Descriptions>\n            </SimpleValue>\n          </Values>\n        </Filter>\n        <Filter field=\"top_category_name\">\n          <Descriptions defaultLocale=\"en\">\n            <Description locale=\"en\">Top category</Description>\n            <Description locale=\"sv\">Toppkategori</Description>\n          </Descriptions>\n          <Values>\n            <SimpleValue key=\"Mens\" value=\"Mens\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Mens</Description>\n                <Description locale=\"sv\">Män</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"Womens\" value=\"Womens\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Womens</Description>\n                <Description locale=\"sv\">Kvinnor</Description>\n              </Descriptions>\n            </SimpleValue>\n          </Values>\n        </Filter>\n      </SearchFilters>\n    </SearchConfig>\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Return Line Item Validation in C#\nDESCRIPTION: This code shows how to override the default validation logic within the DefaultReturnLineItemCalculator. It focuses on overriding the validation of the calculated money values. The example validates that the extended price, discounted price, and sales tax are greater than 0, throwing a ValidationException if not.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-line-item-calculator.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReturnLineItemCalculatorOverridingDefault : DefaultReturnLineItemCalculator\n      {\n        public ReturnLineItemCalculatorOverridingDefault(ITaxCalculator taxCalculator) : base(taxCalculator)\n          { }\n        protected override void ValidateExtendedPrice(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Extended price must be greater than 0\");\n              }\n          }\n        protected override void ValidateDiscountedPrice(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Discounted price must be greater than 0\");\n              }\n          }\n        protected override void ValidateSalesTax(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Sales tax must be greater than 0\");\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Define Routable SeasonalCampaign C#\nDESCRIPTION: This code snippet modifies the `SeasonalCampaign` to implement the `IRoutable` interface, adding a `RouteSegment` property. This allows campaigns to be routed as pages.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/marketing.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Commerce.Marketing;\n    using EPiServer.Core;\n    using EPiServer.DataAbstraction;\n    using EPiServer.DataAnnotations;\n    using EPiServer.Web.Routing;\n    using System.ComponentModel.DataAnnotations;\n    \n    namespace EPiServer.Commerce.Sample.Models.Campaigns\n      {\n        [ContentType(GUID = \"530a7f07-8d12-4625-bda3-8e135a10b74d\")]\n        [AvailableContentTypes(Include = new[] { typeof (PromotionData) })] \n        public class SeasonalCampaign : SalesCampaign, IRoutable\n          {\n            [Display(Order = 12, GroupName = SystemTabNames.PageHeader, Prompt = \"Hero Image\")]\n            public virtual ContentReference HeroImage { get; set; }\n    \n            [Display(Order = 13, GroupName = SystemTabNames.PageHeader, Prompt = \"Banner Image\")]\n            public virtual ContentReference BannerImage { get; set; }\n    \n            public virtual string RouteSegment { get; set; }    \n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Consuming Recommendations on a Product Page (C#)\nDESCRIPTION: This snippet showcases how to retrieve alternative and cross-sell product recommendations within the Index action of the PackageController. The recommendations are retrieved using GetAlternativeProductsRecommendations and GetCrossSellProductsRecommendations, and then assigned to the view model.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpGet]\n    public async Task<ActionResult> Index(FashionPackage currentContent, bool useQuickview = false)\n      {\n        var viewModel = _viewModelFactory.Create(currentContent);\n        ...\n        await _recommendationService.TrackProduct(HttpContext, currentContent.Code, useQuickview);\n        ...\n        viewModel.AlternativeProducts = this.GetAlternativeProductsRecommendations().Take(3);\n        viewModel.CrossSellProducts = this.GetCrossSellProductsRecommendations();\n        ...\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating an Exchange Payment in C#\nDESCRIPTION: This snippet illustrates how to create an exchange payment using the IPurchaseOrderFactory. It obtains instances of IPurchaseOrderFactory and IOrderRepository, loads a purchase order, retrieves a shipment, and creates an exchange payment.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nvar purchaseOrderFactory = ServiceLocator.Current.GetInstance<IPurchaseOrderFactory>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n            var shipment = purchaseOrder.GetFirstShipment();\n            var exchangePayment = purchaseOrderFactory.CreateExchangePayment();\n```\n\n----------------------------------------\n\nTITLE: Setting FindSearchIndexBuilder for Catalog Indexer\nDESCRIPTION: This code configures the catalog indexer to use the FindSearchIndexBuilder. This is necessary for indexing catalog data using the Optimizely Find search service. The 'Type' property specifies the fully qualified name of the FindSearchIndexBuilder class, ensuring that the correct index builder is used.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/configuring-optimizely-find-search-provider.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"Indexers\" : [\n          {\n            \"Name\" : \"catalog\",\n            \"Type\" : \"EPiServer.Commerce.FindSearchProvider.FindSearchIndexBuilder, EPiServer.Commerce.FindSearchProvider\"\n          }\n        ]\n```\n\n----------------------------------------\n\nTITLE: Request Transactional Inventory Operation in C#\nDESCRIPTION: This snippet shows how to request a transactional inventory operation. It retrieves IInventoryService instance through ServiceLocator and calls the Request() method using an InventoryRequest. The function returns an InventoryResponse indicating the status of the operation.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// Requests a transactional inventory operation.\n    public InventoryResponse RequestInventory(InventoryRequest request)\n      {\n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.Request(request);\n      }\n```\n\n----------------------------------------\n\nTITLE: Deleting Orders in Optimizely - C#\nDESCRIPTION: This snippet demonstrates how to delete an order using the IOrderRepository, specifically using an order reference.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    orderRespository.Delete(orderReference);\n```\n\n----------------------------------------\n\nTITLE: Deleting Inventory by Warehouse in C#\nDESCRIPTION: Deletes all inventory data associated with specified warehouses using IInventoryService. The method retrieves an instance of the IInventoryService and calls the DeleteByWarehouse method, providing a collection of warehouse codes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\n// Deletes all inventory data for the specified warehouses.\n    public void DeleteInventoriesByWarehouse(IEnumerable<string> warehouseCode)\n      {\n        var inventoryService= ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.DeleteByWarehouse(warehouseCode);\n      }​\n```\n\n----------------------------------------\n\nTITLE: Overriding FacetFunctions Property in C#\nDESCRIPTION: This C# code snippet shows how to override the `FacetFunctions` property. The override returns a collection containing a custom implementation `GetCampaignsByLastModified`. This allows fetching contents by a specific facet, in this case, campaigns filtered or sorted by their last modified date.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_14\n\nLANGUAGE: C#\nCODE:\n```\nprotected override IEnumerable<GetContentsByFacet> FacetFunctions\n{\n  get\n  {\n    return new GetContentsByFacet[] \n    {\n      new GetCampaignsByLastModified()\n    };\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Order Calculation in C#\nDESCRIPTION: This class demonstrates how to override the default order calculation behavior by inheriting from DefaultOrderGroupCalculator.  It overrides the CalculateTotal, CalculateSubTotal, CalculateHandlingTotal, CalculateShippingSubTotal, and CalculateTaxTotal methods to return a Money object with an amount of 0 for each.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderGroupCalculatorOverridingDefault : DefaultOrderGroupCalculator\n    {\n        public OrderGroupCalculatorOverridingDefault(\n           IOrderFormCalculator orderFormCalculator,\n           IReturnOrderFormCalculator returnOrderFormCalculator,\n           IMarketService marketService)\n           : base(orderFormCalculator, returnOrderFormCalculator, marketService)\n        { }\n        \n        protected override Money CalculateTotal(IOrderGroup orderGroup)\n        {\n          return new Money(0, orderGroup.Currency);\n        }\n    \n        protected override Money CalculateSubTotal(IOrderGroup orderGroup)\n        {\n          return new Money(0, orderGroup.Currency);\n        }\n    \n        protected override Money CalculateHandlingTotal(IOrderGroup orderGroup)\n        {\n          return new Money(0, orderGroup.Currency);\n        }\n    \n        protected override Money CalculateShippingSubTotal(IOrderGroup orderGroup)\n        {\n          return new Money(0, orderGroup.Currency);\n        }\n    \n        protected override Money CalculateTaxTotal(IOrderGroup orderGroup)\n        {\n          return new Money(0, orderGroup.Currency);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Create Product Tracking Data - JavaScript\nDESCRIPTION: This snippet creates product tracking data using the `TrackingDataFactory` object and the package code from the model. It retrieves the package code and uses it to initialize the `packageTrackingData` variable. This data is used to track user interactions with specific products on the site.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_5\n\nLANGUAGE: JavaScript\nCODE:\n```\nvar refCode = '@Model.Package.Code';\nvar packageTrackingData = TrackingDataFactory.createProductTrackingData(refCode);\n```\n\n----------------------------------------\n\nTITLE: Listing Product Variations in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve a list of product variations for a given product using the IRelationRepository.  It retrieves the instance of the repository using ServiceLocator and calls GetChildren to retrieve product variations. The method requires a ContentReference to the product as input and returns an IEnumerable of ProductVariation objects.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/product-variants.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<ProductVariation> ListVariations(ContentReference referenceToProduct)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var variations = relationRepository.GetChildren<ProductVariation>(referenceToProduct);\n        return variations;\n      }\n```\n\n----------------------------------------\n\nTITLE: Configure CatalogOptions in appsettings.json\nDESCRIPTION: This JSON snippet shows how to configure the CatalogOptions, specifically the cache settings and sale price types, within the appsettings.json file.  It demonstrates setting the cache usage and expiration, and defines sale price types with key, value, description, and control URL properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/option-configuration-classes.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        \"Commerce\": {\n            \"CatalogOptions\": {\n                \"Cache\": {\n                    \"UseCache\": false,\n                    \"ContentVersionCacheExpiration\": \"1.02:03:04\" //1 day, 2 hours, 3 mins, 4 seconds\n                },\n                \"SalePriceTypes\": [{\n                        \"Key\": \"AllCustomers\",\n                        \"Value\": 0,\n                        \"Description\": \"Description\",\n                        \"ControlUrl\": \"ControlUrl\"\n                    }\n                ]\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Iterating Through Restricted Countries in C#\nDESCRIPTION: This code snippet shows how to iterate through the restricted countries associated with a shipping method. It checks if a country from a shipping address matches any of the restricted countries for a given shipping method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n//first check the restricted countries\n    ShippingMethodDto.ShippingCountryRow[] paymentCountryRestrictions = method.GetShippingCountryRows();\n    if (paymentCountryRestrictions != null && paymentCountryRestrictions.Length > 0)\n      {\n        foreach (ShippingMethodDto.ShippingCountryRow restrictedCountryRow in paymentCountryRestrictions)\n          {\n            if (restrictedCountryRow.CountryId == shippingCountryId)\n              {\n                isRestricted = true;\n                break;\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining a Catalog Content Type Model in Optimizely (C#)\nDESCRIPTION: This code snippet defines a content type (CatalogContentTypeSample) in Optimizely Customized Commerce by inheriting from VariationContent and using the CatalogContentTypeAttribute. It specifies the GUID, MetaClassName, DisplayName, and Description for the content type. It also defines properties with attributes such as CultureSpecific, Tokenize, Encrypted, and DecimalSettings.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-content.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Commerce.Catalog.ContentTypes;\n    using EPiServer.Commerce.Catalog.DataAnnotations;\n    using EPiServer.Core;\n    using EPiServer.DataAnnotations;\n    \n    namespace CodeSamples.EPiServer.Commerce.Catalog.Provider\n      {\n        [CatalogContentType(\n          GUID = \"7B6B3E60-BFD8-4AD6-BA94-C9728F727988\",\n        \tMetaClassName = \"CatalogContentTypeSample\",\n        \tDisplayName = \"Content Type Sample\",\n        \tDescription = \"A customize for variation content\"\n        )]\n        public class CatalogContentTypeSample : VariationContent\n          {\n            [CultureSpecific]\n            [Tokenize]\n            [Encrypted]\n            [UseInComparison]\n            [IncludeValuesInSearchResults]\n            [IncludeInDefaultSearch]\n            [SortableInSearchResults]\n            public virtual string Description { get; set; }\n    \n            public virtual int Size { get; set; }\n    \n            [DecimalSettings(18, 0)]\n            public virtual decimal Discount { get; set; }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Customizing Entry Information with IEntryInformation in C#\nDESCRIPTION: This code demonstrates how to implement the IEntryInformation interface in Optimizely Commerce to customize the properties displayed in search results. It retrieves custom properties like Size and Color for a variant and constructs a product URL with a variation code parameter. Requires IRelationRepository and IUrlResolver for retrieving product relations and generating URLs respectively.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extend-search-result-display.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomEntryInformation : IEntryInformation\n    {\n        IRelationRepository _relationRepository = ServiceLocation.ServiceLocator.Current.GetInstance<IRelationRepository>();\n        IUrlResolver _urlResolver = ServiceLocation.ServiceLocator.Current.GetInstance<IUrlResolver>();\n    \n        IEntryInformation _defaultImplementation;\n        public CustomEntryInformation(IEntryInformation defaultImplementation)\n        {\n            _defaultImplementation = defaultImplementation;\n        }\n    \n        public IDictionary<string, string> GetCustomProperties(EntryContentBase entry)\n        {\n            var myVariant = entry as MyVariant;\n            if (myVariant == null)\n            {\n                return _defaultImplementation.GetCustomProperties(entry);\n            }\n    \n            return new Dictionary<string, string>() {\n                { nameof(myVariant.Size), myVariant.Size.ToString() },\n                { nameof(myVariant.Color), myVariant.Color } };\n         }\n    \n         public string GetProductUrl(EntryContentBase entry)\n         {\n             var productLink = entry is VariationContent ?  \n             entry.GetParentProducts(_relationRepository).FirstOrDefault() : entry.ContentLink;\n             if (productLink == null)\n             {\n                return string.Empty;\n             }\n    \n             var urlBuilder = new UrlBuilder(_urlResolver.GetUrl(productLink));\n             if (entry.Code != null)\n             {\n                urlBuilder.QueryCollection.Add(\"variationCode\", entry.Code);\n             }\n    \n             return urlBuilder.ToString();\n         }\n    }\n    \n    public class MyVariant : VariationContent\n    {\n        public virtual int Size { get; set; }\n        public virtual string Color { get; set; }\n        public virtual int IntegrationCode { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Customize SEO URL Generation\nDESCRIPTION: This code shows how to override the default SEO URL generation logic by inheriting from `UniqueSeoGenerator` and overriding the `GenerateSeoUri` and `GenerateUriSegment` methods.  It demonstrates how to customize the URL extension and generate random tokens for uniqueness.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/routing.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class ExntedUniqueSeoGenerator : UniqueSeoGenerator\n{\n  protected override string UriExtension\n  {\n    get\n    {\n      return \".html\";\n    }\n  }\n\n  public override string GenerateSeoUri(string name, string languageCode, bool includeRandomToken)\n  {\n    return includeRandomToken\n      ? String.Format(\"{0}_{1}_{2}{3}\", CommerceHelper.CleanUrlField(name), languageCode, GetRandomToken(), UriExtension)\n      : String.Format(\"{0}_{1}{2}\", CommerceHelper.CleanUrlField(name), languageCode, UriExtension);\n  }\n\n  public override string GenerateUriSegment(string name, bool includeRandomToken)\n  {\n    return includeRandomToken\n      ? String.Format(\"{0}_{1}\", UrlSegment.GetUrlFriendlySegment(name), GetRandomToken())\n      : UrlSegment.GetUrlFriendlySegment(name);\n  }\n\n  protected override string GetRandomToken()\n  {\n    var chars = \"abcdefghijklmnopqrstuvwzyz1234567890\";\n    var random = new Random();\n    var result = new string(Enumerable.Repeat(chars, 8) .Select(s => s[random.Next(s.Length)]) .ToArray());\n    return result;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Release Purchase Order C#\nDESCRIPTION: This code snippet demonstrates how to release a purchase order from hold using the `IPurchaseOrderProcessor`. It loads a purchase order by its ID and then calls the `ReleaseOrder()` method on the `purchaseOrderProcessor` instance.  This requires resolving dependencies for `IOrderRepository` and `IPurchaseOrderProcessor`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    IPurchaseOrderProcessor purchaseOrderProcessor;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    purchaseOrderProcessor.ReleaseOrder(purchaseOrder);\n```\n\n----------------------------------------\n\nTITLE: ODPJob Configuration Before 14.20.0 (JSON)\nDESCRIPTION: This JSON snippet shows the configuration structure for the ODP integration before version 14.20.0 using a configuration file. It includes settings for `MarketKeys`, `MarketId`, `AccessKey`, and `EndpointUrl`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-14.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EPiServer\" : {\n    \"Commerce\" : {\n       \"ODPJob\": {\n        \"MarketKeys\": [\n          {\n            \"MarketId\": \"US\",\n            \"AccessKey\": \"key\",\n            \"EndpointUrl\": \"https://api.zaius.com/\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Field Values from Entry in C#\nDESCRIPTION: This method, `GetFieldValues`, retrieves the values of custom fields from an `EntryContentBase` object.  It extracts values for string, timestamp, integer, decimal and boolean types, converting them to appropriate formats for ODP.  It returns a dictionary containing the field names and their corresponding values. Nullable types and null checks are used to handle potentially missing values. The timestamp is converted to a string using the \"s\" standard format.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customized-commerce-odp.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n  public Dictionary < string, object > GetFieldValues(EntryContentBase entry) {\n    var values = new Dictionary < string,\n      object > ();\n    var testString = entry.GetValue(\"mark_product_teststring\")?.ToString();\n    if (!string.IsNullOrEmpty(testString)) {\n      values.Add(\"mark_product_teststring\", testString);\n    }\n\n    var testTimestamp = entry.GetValue(\"mark_product_testtimestamp\") as DateTime ? ;\n    if (testTimestamp != null) {\n      values.Add(\"mark_product_testtimestamp\", testTimestamp.Value.ToString(\"s\"));\n    }\n\n    var testInteger = entry.GetValue(\"mark_product_testinteger\") as int ? ;\n    if (testInteger != null) {\n      values.Add(\"mark_product_testinteger\", testInteger.Value);\n    }\n\n    var testDecimal = entry.GetValue(\"mark_product_testdecimal\") as decimal ? ;\n    if (testDecimal != null) {\n      values.Add(\"mark_product_testdecimal\", testDecimal.Value);\n    }\n\n    var testBoolean = entry.GetValue(\"mark_product_testboolean\") as bool ? ;\n    if (testBoolean != null) {\n      values.Add(\"mark_product_testboolean\", testBoolean);\n    }\n    return values;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Adding Notes to Orders C#\nDESCRIPTION: This snippet demonstrates how to add notes to orders using Optimizely Commerce Connect. It retrieves the cart, creates a note using IOrderGroupFactory, sets the note's properties, adds it to the cart's notes collection, and saves the cart using IOrderRepository.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var orderGroupFactory = ServiceLocator.Current.GetInstance<IOrderGroupFactory>();\n    var contactId = PrincipalInfo.CurrentPrincipal.GetContactId();\n    var cart = orderRepository.LoadCart<ICart>(contactId, \"Default\");\n    \n    var notes = cart.Notes;\n    \n    var note = orderGroupFactory.CreateOrderNote(cart);\n    note.CustomerId = contactId;\n    note.Type = OrderNoteTypes.Custom.ToString();\n    note.Title = \"Noted\";\n    note.Detail = \"Something should be noted.\";\n    note.Created = DateTime.UtcNow;\n    notes.Add(note);\n    \n    orderRepository.Save(cart);\n```\n\n----------------------------------------\n\nTITLE: Define Content Type for Product Variant in Optimizely\nDESCRIPTION: This snippet defines a simple content type for a product variant, `MyVariation`, which inherits from `VariationContent`. It uses attributes like `CatalogContentType` to define the GUID and MetaClassName for the content type within the Optimizely Commerce Connect catalog.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-rendering-templates.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing System;\nusing System.ComponentModel.DataAnnotations;\nusing EPiServer.Commerce.Catalog.ContentTypes;\nusing EPiServer.Commerce.Catalog.DataAnnotations;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing EPiServer.SpecializedProperties;\n\nnamespace MyCommerceSite.Models.Catalog\n  {\n    [CatalogContentType(GUID = \"8d664789-3e96-409e-b418-baf807241f7c\", MetaClassName = \"My_Variation\")]\n    public class MyVariation : VariationContent\n      {\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Create Simple Filter (Equal) in C#\nDESCRIPTION: This snippet demonstrates how to create a simple filter that returns elements where the 'Key' property is equal to '1'. It utilizes the FilterElement.EqualElement method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-and-sorting.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nFilterElement filter = FilterElement.EqualElement(\"Key\", \"1\");\n```\n\n----------------------------------------\n\nTITLE: Registering a Request Handler and Plugin in C#\nDESCRIPTION: This snippet demonstrates how to register a custom request handler and a request plugin using the `ConfigureServices` method in `Startup.cs`. It configures the `BusinessManagerOptions` to add a handler for the 'Insert' method on an unspecified meta-class and a plugin for 'Update' and 'Create' methods across all meta-classes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nservices.Configure<BusinessManagerOptions>(x =>\n                {\n                    x.Handlers.Add(new RequestHandler()\n                    {\n                        MetaClass = \"\",\n                        Method = \"Insert\",\n                        TypeName = \"TypeName\"\n                    });\n                });\n    \n                services.Configure<BusinessManagerOptions>(x =>\n                {\n                    x.Plugins.Add(new RequestPlugin()\n                    {\n                        MetaClass = \"*\",\n                        Method = \"Update;Create\",\n                        EventStage = EventPipeLineStage.PreMainOperationInsideTranasaction,\n                        TypeName = \"SampleRequestPlugin, SampleHandlerAssembly\"\n                    });\n                });\n```\n\n----------------------------------------\n\nTITLE: Listing Categories for an Entry/Category in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the categories associated with a specific entry or category using the IRelationRepository.GetChildren method. It retrieves an instance of IRelationRepository using ServiceLocator and then calls GetChildren to retrieve NodeRelation objects representing the categories. The method takes a ContentReference to the entry or category as input and returns an IEnumerable of NodeRelation objects.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/categorizations.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<NodeRelation> ListCategories(ContentReference referenceToEntryOrCategory)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var categories = relationRepository.GetChildren<NodeRelation>(referenceToEntryOrCategory);\n        return categories;\n      }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<NodeRelation> ListCategories(ContentReference referenceToEntryOrCategory)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var categories = relationRepository.GetChildren<NodeRelation>(referenceToEntryOrCategory);\n        return categories;\n      }\n```\n\n----------------------------------------\n\nTITLE: Updating Entity Object C#\nDESCRIPTION: This snippet shows how to update an existing entity object in the persistent storage. It utilizes BusinessManager.Execute with an UpdateRequest, taking the target EntityObject to be updated as input.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nBusinessManager.Execute(new UpdateRequest(target));\n```\n\n----------------------------------------\n\nTITLE: Disabling Multi-Warehouse Lockout in OrderGroupActivityBase (C#)\nDESCRIPTION: This code snippet disables the default lockout that prevents multiple warehouses from being flagged as fulfillment centers. It replaces the CheckMultiWarehouse() method in the OrderGroupActivityBase workflow with an empty method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-warehouse-implementations.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nprotected virtual void CheckMultiWarehouse(){}\n```\n\n----------------------------------------\n\nTITLE: Enabling a Promotion Type in Optimizely Commerce (C#)\nDESCRIPTION: This code snippet re-enables the BuyQuantityGetFreeItems promotion type using the PromotionTypeHandler. It calls EnablePromotions, passing an array containing the type to enable. Requires EPiServer.Commerce.Marketing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/hiding-promotion-types.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npromotionTypeHandler.EnablePromotions(new[] { typeof(BuyQuantityGetFreeItems) });\n```\n\n----------------------------------------\n\nTITLE: Calculating Extended Price C#\nDESCRIPTION: This snippet calculates the extended price of a line item, including order-level discounts and line item discounts. It takes an ILineItem, Currency, and ILineItemCalculator as input and prints the result to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-line-item-calculator.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetExtendedPrice(ILineItem lineItem, Currency currency, ILineItemCalculator lineItemCalculator)\n          {\n            var extendedPrice = lineItemCalculator.GetExtendedPrice(lineItem, currency);\n            Debug.WriteLine(\"Extended price for '{0}': {1}\", lineItem.Code, extendedPrice);\n          }\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Return Order Calculation (C#)\nDESCRIPTION: This code snippet shows how to override the default return order calculation by inheriting from the DefaultReturnPurchaseOrderCalculator class. It overrides methods like GetOrderDiscountTotal, CalculateTotal, CalculateSubTotal, CalculateShippingSubTotal, and GetActiveReturnForms to provide custom calculation logic.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-purchase-order-calculator.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReturnPurchaseOrderCalculatorOverridingDefault : DefaultReturnPurchaseOrderCalculator\n      {\n        public ReturnPurchaseOrderCalculatorOverridingDefault(IReturnOrderFormCalculator returnOrderFormCalculator)\n          : base(returnOrderFormCalculator)\n          { }\n        protected override Money GetOrderDiscountTotal(IPurchaseOrder purchaseOrder)\n          {\n            return new Money(0, purchaseOrder.Currency);\n          }\n        protected override Money CalculateTotal(IPurchaseOrder purchaseOrder)\n          {\n            return new Money(0, purchaseOrder.Currency);\n          }\n        protected override Money CalculateSubTotal(IPurchaseOrder purchaseOrder)\n          {\n            return new Money(0, purchaseOrder.Currency);\n          }\n        protected override Money CalculateShippingSubTotal(IPurchaseOrder purchaseOrder)\n          {\n            return new Money(0, purchaseOrder.Currency);\n          }\n        protected override IEnumerable<IReturnOrderForm> GetActiveReturnForms(IPurchaseOrder purchaseOrder)\n          {\n            return new List<IReturnOrderForm>();\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Sales Tax for Line Item C#\nDESCRIPTION: This snippet calculates the sales tax for a single line item. It takes an ILineItem, IMarket, Currency, IOrderAddress (shipping address), and ILineItemCalculator as input and prints the result to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-line-item-calculator.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetSalesTax(ILineItem lineItem, IMarket market, Currency currency, IOrderAddress shippingAddress, ILineItemCalculator lineItemCalculator)\n          {\n            var salesTax = lineItemCalculator.GetSalesTax(lineItem, market, currency, shippingAddress);\n            Debug.WriteLine(\"Sales tax for '{0}': {1}\", lineItem.Code, salesTax);\n          }\n```\n\n----------------------------------------\n\nTITLE: Enabling Automatic Schema Updates via C# Code\nDESCRIPTION: This C# code snippet shows how to enable automatic schema updates programmatically using the `ConfigureServices` method in the `Startup` class. It configures the `DataAccessOptions` to set the `UpdateDatabaseSchema` property to `true`, which enables automatic schema updates during application startup.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/automatic-schema-updates.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class Startup\n    {\n            public void ConfigureServices(IServiceCollection services)\n            {\n                services.Configure<DataAccessOptions>(o =>\n                {\n                    o.UpdateDatabaseSchema= true;\n                });\n             }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configure Subscription Time Ranges in appsettings.json\nDESCRIPTION: This code snippet shows how to configure the time ranges for subscription data collection in the appsettings.json file.  The `SubscriptionTimeRangesInDays` property defines the number of days prior to the current date for which subscription data should be collected. The example sets the time ranges to 30, 60, 90, and 180 days.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/collecting-subscription-data.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Commerce\":{\n        \"ReportingTimeRangeOptions\":{\n            \"SubscriptionTimeRangesInDays\": [30, 60, 90, 180]\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Custom Render Template Controller for Promotion - C#\nDESCRIPTION: This code defines a custom partial content controller for the extended `MyCompanyBuyQuantityGetItemDiscount` promotion. It inherits from `PartialContentController` and implements an `Index` action that renders a view for the given promotion. This allows customizing how the promotion is displayed on the website.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/new_promotions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Web.Mvc;\nusing EPiServer.Framework.DataAnnotations;\nusing EPiServer.Web.Mvc;\n\nnamespace MyOptimizelySite.Controllers\n  {\n    [TemplateDescriptor(Default = true)]\n    public class MyCompanyBuyQuantityGetItemDiscountPartialController : PartialContentController<MyCompanyBuyQuantityGetItemDiscount>\n      {\n        public ActionResult Index(MyCompanyBuyQuantityGetItemDiscount currentDiscount)\n          {\n            // Implementation of action view the page. \n            return View(currentDiscount);\n          }\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Applying Price Conventions in C#\nDESCRIPTION: This code snippet shows how to apply conventions for the `Price` object, specifically excluding the `EntryContent` field during indexing. This ensures that the `EntryContent` field is not indexed when indexing prices.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/overriding-default-conventions.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ApplyPriceConventions(TypeConventionBuilder<Price> conventionBuilder)\n      {\n        conventionBuilder\n            .ExcludeField(x => x.EntryContent);\n      }\n```\n\n----------------------------------------\n\nTITLE: Deleting Price Detail Value in C#\nDESCRIPTION: This code snippet shows how to delete all price details associated with a given catalog entry by using the IPriceDetailService.Delete() method. It retrieves all price details for the entry using IPriceDetailService.List(), extracts the PriceValueId for each price detail, and then deletes the prices using the Delete method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricing-examples.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void DeletePriceDetailValue(ContentReference catalogContentReference)\n      {\n        var priceDetailService = ServiceLocator.Current.GetInstance<IPriceDetailService>();\n    \n        var priceList = priceDetailService.List(catalogContentReference);\n        IEnumerable<long> priceValueIds = priceList.Select(p => p.PriceValueId).ToList(); // List price value Id\n    \n        priceDetailService.Delete(priceValueIds);\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding Default Price and Prices in Product Content\nDESCRIPTION: Adds extension methods to `ProductContent` to include the highest default price and all prices from variants in the index.  Overrides the `ApplyProductContentConventions` method and uses `IncludeField` to include `DefaultPrice()` and `Prices()`, making them available for searching and filtering. Requires dependencies on `ReadOnlyPricingLoader` and `IRelationRepository`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic static class ProductContentExtensions\n      {\n        public static Price DefaultPrice(this ProductContent productContent)\n          {\n            return DefaultPrice(productContent, ServiceLocator.Current.GetInstance<ReadOnlyPricingLoader>(), ServiceLocator.Current.GetInstance<IRelationRepository>());\n          }\n    \n        public static Price DefaultPrice(this ProductContent productContent, ReadOnlyPricingLoader pricingLoader, IRelationRepository relationRepository)\n          {\n            var maxPrice = new Price();\n            var variationLinks = productContent.GetVariants(relationRepository);\n            foreach (var variationLink in variationLinks)\n              {\n                var defaultPrice = pricingLoader.GetDefaultPrice(variationLink);\n                if (defaultPrice.UnitPrice.Amount > maxPrice.UnitPrice.Amount)\n                  {\n                    maxPrice = defaultPrice;\n                  }\n              }\n            return maxPrice;\n          }\n    \n        public static IEnumerable<Price> Prices(this ProductContent productContent)\n          {\n            return Prices(productContent, ServiceLocator.Current.GetInstance<ReadOnlyPricingLoader>(), ServiceLocator.Current.GetInstance<IRelationRepository>());\n          }\n    \n        public static IEnumerable<VariationContent> VariationContents(this ProductContent productContent)\n          {\n            return VariationContents(productContent, ServiceLocator.Current.GetInstance<IContentLoader>(), ServiceLocator.Current.GetInstance<IRelationRepository>());\n          }\n    \n        public static IEnumerable<VariationContent> VariationContents(this ProductContent productContent, IContentLoader contentLoader, IRelationRepository relationRepository)\n          {\n            return contentLoader.GetItems(productContent.GetVariants(relationRepository), productContent.Language).OfType<VariationContent>();\n          }\n      }\n    \n    public class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n        protected override void ApplyProductContentConventions(TypeConventionBuilder<ProductContent> conventionBuilder)\n          {\n            base.ApplyProductContentConventions(conventionBuilder);\n            conventionBuilder\n              .ExcludeField(x => x.Variations())\n              .IncludeField(x => x.VariationContents())\n              .IncludeField(x => x.DefaultPrice())\n              .IncludeField(x => x.Prices());\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Subtotal Return Order in Optimizely Commerce (C#)\nDESCRIPTION: This code snippet demonstrates how to calculate the subtotal of all return order forms within a purchase order using the IReturnPurchaseOrderCalculator interface. It takes an IPurchaseOrder and an IReturnPurchaseOrderCalculator as input and prints the subtotal to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-purchase-order-calculator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetSubTotal(IPurchaseOrder purchaseOrder, IReturnPurchaseOrderCalculator returnPurchaseOrderCalculator)\n          {\n            var subTotal = returnPurchaseOrderCalculator.GetSubTotal(purchaseOrder);\n            Debug.WriteLine(\"Subtotal for return order '{0}': {1}\", purchaseOrder.OrderLink.OrderGroupId, subTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Query Inventories by Partial Key in C#\nDESCRIPTION: This snippet demonstrates retrieving inventories based on a partial key. It resolves IInventoryService and calls QueryByPartialKey() to fetch all inventories matching provided InventoryKey values passed as IEnumerable<InventoryKey>. The returned value is an IEnumerable<InventoryRecord>.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// List all inventory records matching an item in inventory key.\n    public IEnumerable<InventoryRecord> QueryInventoriesByPartialKey(IEnumerable<InventoryKey> partialKeys)\n      {\n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.QueryByPartialKey(partialKeys);\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring ODPJobOptions After 14.20.0 (C#)\nDESCRIPTION: This code snippet demonstrates how to configure the ODP integration using `ODPJobOptions` after version 14.20.0.  It configures `MarketKeys` with `SiteId`, `MarketIds`, `AccessKey`, `EndpointUrl`, `TrackingId`, and `S3Options`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-14.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure<ODPJobOptions>(o =>\n{\n    o.MarketKeys = new List<MarketKey>\n    {\n        new()\n        {\n            SiteId = \"siteId\",\n            MarketIds = new List<string> { \"US\" },\n            AccessKey = \"key\",\n            EndpointUrl = \"https://api.zaius.com/\",\n            TrackingId = \"tracking id\",\n            S3Options = new S3Options\n            {\n                BucketName = \"\",\n                AccessKeyId = \"\",\n                SecretAccessKey = \"\",\n                Region = \"\"\n            }\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Implementing a LocalDB Database Validator in C#\nDESCRIPTION: This C# code snippet implements an `ISchemaValidator` that allows automatic schema updates only when running on LocalDB. The `BeforeUpdating` method is empty, and the `IsDatabaseUpdateAllowed` method checks if the database connection string's data source starts with `(LocalDB)`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/automatic-schema-updates.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic class LocalDBDatabaseValidator : ISchemaValidator\n        {\n            public void BeforeUpdating(ConnectionStringOptions connectionStringSettings)\n            {}\n    \n            public bool IsDatabaseUpdateAllowed(ConnectionStringOptions connectionStringSettings)\n              { var sqlConStrBuilder = new SqlConnectionStringBuilder(connectionStringSettings.ConnectionString); \n                return sqlConStrBuilder.DataSource.StartsWith(\"(LocalDB)\", StringComparison.OrdinalIgnoreCase);\n              }\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting MetaClass in Optimizely (C#)\nDESCRIPTION: This code snippet shows how to delete a MetaClass in Optimizely. It uses a MetaClassManagerEditScope to ensure changes are made in Design mode. It finds the MetaClass by name and then calls DeleteMetaClass to remove it. The changes are then saved using scope.SaveChanges().\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metaclass-class.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Open Meta-model edit scope\n    using (MetaClassManagerEditScope scope = DataContext.Current.MetaModel.BeginEdit())\n      {\n        // Find table\n        MetaClass mc = DataContext.Current.MetaModel.MetaClasses [\"Class_1\"];\n        // Drop table\n        DataContext.Current.MetaModel.DeleteMetaClass (table);\n        // Save Changes\n        scope.SaveChanges();\n      }\n```\n\n----------------------------------------\n\nTITLE: Configure Catalog Cache via AppSettings.json\nDESCRIPTION: This snippet demonstrates how to configure caching settings for the Catalogs subsystem using AppSettings.json. It enables caching and sets expiration times for content version, collection, entry, and node caches. The configuration is within the \"EPiServer\" -> \"Commerce\" -> \"CatalogOptions\" -> \"Cache\" section.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/caching.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n   \"EPiServer\": {\n       \"Commerce\": {\n          \"CatalogOptions\": {\n            \"Cache\": {\n              \"UseCache\": true,\n              \"ContentVersionCacheExpiration\": \"00:05:00\",\n              \"CollectionCacheExpiration\": \"00:05:00\",\n              \"EntryCacheExpiration\": \"00:05:00\",\n              \"NodeCacheExpiration\": \"00:05:00\"\n            }\n          }\n       }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Loading an Entity Object in C#\nDESCRIPTION: This snippet illustrates how to load an existing entity object using the request-response system. It creates a LoadRequest with the meta-class name and primary key ID, executes the request using BusinessManager, and retrieves the EntityObject from the response.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nLoadRequest request = new LoadRequest(new EntityObject(metaClassName, primaryKeyId));\n    LoadResponse response = (LoadResponse)BusinessManager.Execute(request);\n    EntityObject entityObject = response.EntityObject;\n```\n\n----------------------------------------\n\nTITLE: Custom Product Fields Implementation (C#)\nDESCRIPTION: This C# code snippet shows how to create custom fields for products within the ODP integration by implementing the `IProductCustomFieldsHandler` interface. It defines the fields and their types.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-14.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[ServiceConfiguration(ServiceType = typeof (IProductCustomFieldsHandler))]\npublic class CustomProducts: IProductCustomFieldsHandler {\n  public IEnumerable < SchemaObjectCreateField > CreateFields() {\n    return new [] {\n      new SchemaObjectCreateField {\n        Name = \"mark_product_teststring\",\n          DisplayName = \"Mark ODP Connector string\",\n          PublicRead = true,\n          Type = \"string\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testtimestamp\",\n          DisplayName = \"Mark ODP Connector timestamp\",\n          PublicRead = true,\n          Type = \"timestamp\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testinteger\",\n          DisplayName = \"Mark ODP Connector integer\",\n          PublicRead = true,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testdecimal\",\n          DisplayName = \"Mark ODP Connector decimal\",\n          PublicRead = false,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testboolean\",\n\n```\n\n----------------------------------------\n\nTITLE: Adding Bundle/Package Entry (C#)\nDESCRIPTION: Adds a new entry to a bundle or package using the IRelationRepository.UpdateRelation method. It creates a new BundleEntry or PackageEntry object, populates its properties (GroupName, Quantity, SortOrder, Parent, Child), and then calls UpdateRelation to persist the change. The ServiceLocator is used to resolve the IRelationRepository instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddBundleEntry(ContentReference referenceToBundle, ContentReference referenceToProductOrVariation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        var newBundleEntry = new BundleEntry\n          {\n            GroupName = \"GroupX\",\n            Quantity = 1.0m,\n            SortOrder = 100,\n            Parent = referenceToBundle,\n            Child = referenceToProductOrVariation\n          };\n    \n        relationRepository.UpdateRelation(newBundleEntry);\n      }\n    \n    public void AddPackageEntry(ContentReference referenceToPackage, ContentReference referenceToPackageOrVariation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        var newPackageEntry = new PackageEntry\n          {\n            GroupName = \"GroupX\",\n            Quantity = 1.0m,\n            SortOrder = 100,\n            Parent = referenceToPackage,\n            Child = referenceToPackageOrVariation\n          };\n    \n        relationRepository.UpdateRelation(newPackageEntry);\n      }\n```\n\n----------------------------------------\n\nTITLE: Applying Stock Placement Conventions in C#\nDESCRIPTION: This code snippet shows how to apply conventions for indexing `IStockPlacement` data, including the `Inventories()` field. This means inventory records are indexed with the associated content. Override this to change which fields are indexed.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/overriding-default-conventions.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ApplyIStockPlacementConventions(TypeConventionBuilder<IStockPlacement> conventionBuilder)\n      {\n        conventionBuilder.IncludeField(x => x.Inventories());\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating an Enum Meta-Field C#\nDESCRIPTION: This code snippet shows how to create an enum meta-field using the MetaClass.CreateMetaField method. It takes parameters such as name, friendly name, enum name, whether the field is nullable, a default value, and whether the enum is editable. It constructs AttributeCollection and add McDataTypeAttribute.EnumEditable, then creates the meta field with these attributes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metaenum-class.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic MetaField CreateEnumField(string name, string friendlyName, string enumName, bool isNullable, string defaultValue, bool enumEditable)\n      {\n        if (name == null)\n        throw new ArgumentNullException(\"name\");\n    \n        if (friendlyName == null)\n        throw new ArgumentNullException(\"friendlyName\");\n    \n        AttributeCollection attr = new AttributeCollection();\n        attr.Add(McDataTypeAttribute.EnumEditable, enumEditable);\n        MetaField retVal = this.MetaClass.CreateMetaField(name, friendlyName, enumName, isNullable, defaultValue, attr);\n        return retVal;\n      }\n```\n\n----------------------------------------\n\nTITLE: Checking if Payment Plan can be Cancelled in C#\nDESCRIPTION: This snippet demonstrates how to determine if a payment plan can be cancelled using the CanBeCancelled method. It requires an IOrderRepository. The orderGroupId is used to load the PaymentPlan, and then the CanBeCancelled method is called on the payment plan.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_31\n\nLANGUAGE: C#\nCODE:\n```\nIOrderRepository orderRepository;\n    (…)\n    var orderGroupId = 123;\n    var paymentPlan = orderRepository.Load<PaymentPlan>(orderGroupId);\n    var canBeCancelled = paymentPlan.CanBeCancelled();\n```\n\n----------------------------------------\n\nTITLE: Creating Countries and Regions in Optimizely (C#)\nDESCRIPTION: This code snippet demonstrates how to create new countries and regions using the CountryDto and related classes. It initializes a new CountryDto, creates a new country row, sets its properties (Name, Code, Ordering, Visible), and adds it to the DTO.  It then creates a new region and associates it with the country. Finally, it saves the changes using CountryManager.SaveCountry().\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/countries-and-regions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar dto = new CountryDto(); \nvar countryRow = dto.Country.NewCountryRow(); \n  countryRow.Name = \"Country Name\"; \n  countryRow.Code = \"AAA\"; \n//Three digit country code. \n  countryRow.Ordering = 0;   \n  countryRow.Visible = true;  \nif (countryRow.RowState == DataRowState.Detached)     \n  dto.Country.Rows.Add(countryRow);  \n  dto.EnforceConstraints = false; \nvar region = dto.StateProvince.NewStateProvinceRow(); \n  region.Name = \"My Region\"; \n  region.Ordering = 0; \n  region.Visible = true; \n  region.CountryId = dto.Country[0].CountryId;  \nif (region.RowState == DataRowState.Detached)     \n  dto.StateProvince.Rows.Add(region);  \n  dto.EnforceConstraints = true;  \n  CountryManager.SaveCountry(dto);\n```\n\n----------------------------------------\n\nTITLE: Configuring ODPJobOptions After 14.20.0 (Code)\nDESCRIPTION: This code snippet demonstrates how to configure the ODP integration through C# code after version 14.20.0. It includes properties such as `SiteId`, `MarketIds`, `TrackingId`, and `S3Options` for configuring S3 integration. Requires `ODPJobOptions`, `MarketKey`, and `S3Options` classes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customized-commerce-odp.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nservices.Configure<ODPJobOptions>(o =>\n{\n    o.MarketKeys = new List<MarketKey>\n    {\n        new()\n        {\n            SiteId = \"siteId\",\n            MarketIds = new List<string> { \"US\" },\n            AccessKey = \"key\",\n            EndpointUrl = \"https://api.zaius.com/\",\n            TrackingId = \"tracking id\",\n            S3Options = new S3Options\n            {\n                BucketName = \"\",\n                AccessKeyId = \"\",\n                SecretAccessKey = \"\",\n                Region = \"\"\n            }\n        }\n    };\n});\n```\n\n----------------------------------------\n\nTITLE: Check If Order Has Awaiting Return Completable C#\nDESCRIPTION: This code snippet demonstrates how to determine if a purchase order has any awaiting return completable using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `HasAwaitingReturnCompletable()` extension method on the `purchaseOrder` instance.  This requires resolving dependencies for `IOrderRepository`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_14\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var awaitingReturnCompletable = purchaseOrder.HasAwaitingReturnCompletable();\n```\n\n----------------------------------------\n\nTITLE: Applying Product Content Conventions - Adding Inventories (C#)\nDESCRIPTION: Extends the indexing conventions for ProductContent by including the 'Inventories' field.  This allows inventory information to be indexed along with other product details, using the TypeConventionBuilder. This requires a base class of CatalogContentClientConventions.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n        protected override void ApplyProductContentConventions(TypeConventionBuilder<ProductContent> conventionBuilder)\n          {\n            base.ApplyProductContentConventions(conventionBuilder);\n            conventionBuilder\n              .ExcludeField(x => x.Variations())\n              .IncludeField(x => x.VariationContents())\n              .IncludeField(x => x.DefaultPrice())\n              .IncludeField(x => x.Prices())\n              .IncludeField(x => x.Inventories());\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Subtotal in C#\nDESCRIPTION: This method calculates the subtotal for an order group using the IOrderGroupCalculator and logs the result using Debug.WriteLine. It accepts an IOrderGroup and an IOrderGroupCalculator as arguments.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetSubTotal(IOrderGroup orderGroup, IOrderGroupCalculator orderGroupCalculator)\n          {\n            var subTotal = orderGroupCalculator.GetSubTotal(orderGroup);\n            Debug.WriteLine(\"Subtotal for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, subTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Configuring Search Options in JSON\nDESCRIPTION: This snippet configures search options, including the default search provider, indexer settings, and maximum search result hits. It defines how the search functionality is implemented and optimized within the Optimizely Commerce platform.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/feature-specific-commerce-configurations.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Commerce\": {\n    \"SearchOptions\": {\n      \"DefaultSearchProvider\": \"LuceneSearchProvider\",\n      \"MaxHitsForSearchResults\": 1000,\n      \"IndexerBasePath\": \"[appDataPath]/Foundation/SearchIndex\",\n      \"IndexerConnectionString\": \"\",\n      \"SearchProviders\": [\n        {\n          \"Name\": \"LuceneSearchProvider\",\n          \"Type\": \"Mediachase.Search.Providers.Lucene.LuceneSearchProvider, Mediachase.Search.LuceneSearchProvider\",\n          \"Parameters\": {\n            \"queryBuilderType\": \"Mediachase.Search.Providers.Lucene.LuceneSearchQueryBuilder, Mediachase.Search.LuceneSearchProvider\",\n            \"storage\": \"[appDataPath]/SearchIndex\",\n            \"simulateFaceting\": \"true\"\n          }\n        }\n      ],\n      \"Indexers\": [\n        {\n          \"Name\": \"catalog\",\n          \"Type\": \"Mediachase.Search.Extensions.Indexers.CatalogIndexBuilder, Mediachase.Search.Extensions\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Listing Prices with PriceFilter in C#\nDESCRIPTION: This code snippet shows how to retrieve price details for a catalog entry using filtering and paging, using the IPriceDetailService.List() method. It creates a MarketId and a PriceFilter to filter the prices. It takes a ContentReference, offset, and numberOfItems as input and outputs the totalCount.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricing-examples.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic IList<IPriceDetailValue> ListPriceDetailWithPriceFilter(ContentReference catalogContentReference, int offset, int numberOfItems, out int totalCount)\n      {\n        var priceDetailService = ServiceLocator.Current.GetInstance<IPriceDetailService>();\n    \n        // Gets price details for the CatalogEntry with paging support and filter for market, currencies and customer pricings.\n        MarketId marketId = new MarketId(\"ER\");\n        PriceFilter filter = new PriceFilter();\n        filter.Currencies = new List<Currency> { Currency.EUR, Currency.GBP };\n        return priceDetailService.List(catalogContentReference, marketId, filter, offset, numberOfItems, out totalCount);\n      }\n```\n\n----------------------------------------\n\nTITLE: Defining Recommendation Layout in Razor View\nDESCRIPTION: This snippet defines the layout for displaying product recommendations within a Razor view. It adds four div elements with specific CSS classes to represent the upper, left, right, and bottom recommendation sections on a page. These sections are used to render recommendations based on their respective CSS classes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/an-api-overview.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"recommendations recommendations-upper\"></div>\n    <div class=\"recommendations recommendations-left\"></div>\n    <div class=\"recommendations recommendations-right\"></div>\n    <div class=\"recommendations recommendations-bottom\"></div>\n```\n\n----------------------------------------\n\nTITLE: Check If Order Can Be Put On Hold C#\nDESCRIPTION: This code snippet demonstrates how to determine if a purchase order can be put on hold using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `CanBePutOnHold()` extension method on the `purchaseOrder` instance.  This requires resolving dependencies for `IOrderRepository`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var canBeHold = purchaseOrder.CanBePutOnHold();\n```\n\n----------------------------------------\n\nTITLE: Configure BusinessManagerOptions in C#\nDESCRIPTION: This code snippet demonstrates how to configure the BusinessManagerOptions using the ConfigureServices method in Startup.cs. It adds custom request handlers and plugins to the BusinessManagerOptions.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/option-configuration-classes.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.Configure<BusinessManagerOptions>(o =>\n    {\n        o.Handlers.Add(new CustomRequestHandler(){});\n        o.Plugins.Add(new CustomRequestPlugin(){});\n    });\n```\n\n----------------------------------------\n\nTITLE: Configure Opal AI for Product Properties C#\nDESCRIPTION: This code snippet demonstrates how to configure the TinyMCE editor to use Opal AI for specific properties of product models in Optimizely Commerce Connect. It uses the `ConfigureServices` method within the `Startup.cs` file to specify the properties of `FashionProduct` and `FashionBundle` models for AI-powered text generation. It leverages the `UseOpalAIForProperties` and `UseOpalAIForProperty` extension methods to link the specified properties to Opal AI.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/set-up-opal-ai.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.Configure<TinyMceConfiguration>(config => \n{\n    config.UseOpalAIForProperties<FashionProduct>(x => x.Description, x => x.LongDescription);\n    config.UseOpalAIForProperty<FashionBundle>(x => x.Description);\n});\n```\n\n----------------------------------------\n\nTITLE: Catalog Entry Search with Paging in C#\nDESCRIPTION: This snippet demonstrates catalog entry search with paging, retrieving a subset of results and binding them to web controls. It retrieves catalog lists, defines search criteria, sets a sort parameter, and performs the search. It then retrieves entry objects based on the search results, with added padding to account for potential deletions.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-product-search.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Get catalog lists\n    CatalogDto catalogs = system.GetCatalogDto();\n    \n    // Create Entry Criteria\n    CatalogEntrySearchCriteria criteria = new CatalogEntrySearchCriteria();\n    \n    // Bind default catalogs if none found\n    if (criteria.CatalogNames.Count == 0)\n      {\n        if (catalogs.Catalog.Count > 0)\n          {\n            foreach (CatalogDto.CatalogRow row in catalogs.Catalog)\n              {\n                if (row.IsActive &&\n                  row.StartDate <= FrameworkContext.Current.CurrentDateTime &&\n                  row.EndDate >= FrameworkContext.Current.CurrentDateTime)\n                    {\n                      criteria.CatalogNames.Add(row.Name);\n                    }\n              }\n          }\n      }\n    \n    // Define phrase we want to search\n    criteria.SearchPhrase = \"canon\";\n    \n    // Create a manager\n    SearchManager manager = new SearchManager(AppContext.Current.ApplicationName);\n    \n    SearchResults results = null;\n    \n    // Define sort parameter\n    criteria.Sort = new SearchSort(\"DisplayName\");\n    \n    // Perform search\n    results = manager.Search(criteria);\n    \n    Assert.IsTrue(results.TotalCount > 0, \"No hits were found in Lucene index.\");\n    \n    // Get IDs we need\n    int[] resultIndexes = results.GetIntResults(0, 10 + 5); \n    // padding added to accomodate entries that might have been deleted since last indexing\n    \n    // Retrieve actual entry objects, with no caching\n    Entries entries = CatalogContext.Current.GetCatalogEntries(resultIndexes, false, new TimeSpan(), new CatalogEntryResponseGroup(CatalogEntryResponseGroup.ResponseGroup.CatalogEntryFull));\n    entries.TotalResults = results.TotalCount;\n    Assert.IsTrue(entries.TotalResults > 0, \"No entries were returned from the database.\");\n```\n\n----------------------------------------\n\nTITLE: Checking if Payment Plan is Paid in C#\nDESCRIPTION: This snippet demonstrates how to determine if a payment plan is paid using the IsPaid method. It requires an IOrderRepository. The orderGroupId is used to load the PaymentPlan, and then the IsPaid method is called on the payment plan.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_30\n\nLANGUAGE: C#\nCODE:\n```\nIOrderRepository orderRepository;\n    (…)\n    var orderGroupId = 123;\n    var paymentPlan = orderRepository.Load<PaymentPlan>(orderGroupId);\n    var isPaid = paymentPlan.IsPaid();\n```\n\n----------------------------------------\n\nTITLE: Calculating Handling Total in C#\nDESCRIPTION: This method calculates the handling total for an order group using the IOrderGroupCalculator and logs the result. It requires an IOrderGroup and an IOrderGroupCalculator instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetHandlingTotal(IOrderGroup orderGroup, IOrderGroupCalculator orderGroupCalculator)\n          {\n            var handlingTotal = orderGroupCalculator.GetHandlingTotal(orderGroup);\n            Debug.WriteLine(\"Handling total for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, handlingTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Disabling a Promotion Type in Optimizely Commerce (C#)\nDESCRIPTION: This code snippet disables the BuyQuantityGetFreeItems promotion type using the PromotionTypeHandler.  It retrieves an instance of PromotionTypeHandler from the ServiceLocator and calls DisablePromotions, passing an array containing the type to disable. Requires EPiServer.Commerce.Marketing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/hiding-promotion-types.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar promotionTypeHandler = ServiceLocator.Current.GetInstance<PromotionTypeHandler>();\n    promotionTypeHandler.DisablePromotions(new[] { typeof(BuyQuantityGetFreeItems) });\n```\n\n----------------------------------------\n\nTITLE: Configuring ODPJobOptions Before 14.20.0 (C#)\nDESCRIPTION: This code snippet demonstrates how to configure the ODP integration through code using `ODPJobOptions` before version 14.20.0. It sets up the `MarketKeys` with `MarketId`, `AccessKey`, and `EndpointUrl`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-14.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nservices.Configure < ODPJobOptions > (o => {\n  o.MarketKeys = new List < MarketKey > {\n    new() {\n      MarketId = \"US\",\n        AccessKey = \"key\",\n        EndpointUrl = \"<https://api.zaius.com/>\"\n    }\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Defining Custom Product Schema Fields in C#\nDESCRIPTION: This code snippet defines custom product schema fields using the `SchemaObjectCreateField` class. It specifies properties such as name, display name, public read access, and data type for each field. These fields are intended to be used for product attributes within Optimizely Commerce and integrated with Optimizely Data Platform (ODP).\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customized-commerce-odp.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n[ServiceConfiguration(ServiceType = typeof (IProductCustomFieldsHandler))]\npublic class CustomProducts: IProductCustomFieldsHandler {\n  public IEnumerable < SchemaObjectCreateField > CreateFields() {\n    return new [] {\n      new SchemaObjectCreateField {\n        Name = \"mark_product_teststring\",\n          DisplayName = \"Mark ODP Connector string\",\n          PublicRead = true,\n          Type = \"string\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testtimestamp\",\n          DisplayName = \"Mark ODP Connector timestamp\",\n          PublicRead = true,\n          Type = \"timestamp\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testinteger\",\n          DisplayName = \"Mark ODP Connector integer\",\n          PublicRead = true,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testdecimal\",\n          DisplayName = \"Mark ODP Connector decimal\",\n          PublicRead = false,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_product_testboolean\",\n          DisplayName = \"Mark ODP Connector boolean\",\n          PublicRead = false,\n          Type = \"boolean\"\n      }\n    };\n  }\n\n```\n\n----------------------------------------\n\nTITLE: Migrating Inventory Data (CC 11+)\nDESCRIPTION: This SQL script migrates data from the WarehouseInventory table to the InventoryService table for Customized Commerce versions 11 and higher. It inserts data, transforming InventoryStatus to IsTracked and calculating PurchaseAvailableQuantity. It joins WarehouseInventory with CatalogEntry on CatalogEntryCode and Code columns.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/database-changes-for-inventory-service.md#_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\ninsert into [dbo].[InventoryService]\n      (\n        [CatalogEntryCode],\n        [WarehouseCode],\n        [IsTracked],\n        [PurchaseAvailableQuantity],\n        [PreorderAvailableQuantity],\n        [BackorderAvailableQuantity],\n        [PurchaseRequestedQuantity],\n        [PreorderRequestedQuantity],\n        [BackorderRequestedQuantity],\n        [PurchaseAvailableUtc],\n        [PreorderAvailableUtc],\n        [BackorderAvailableUtc],\n        [AdditionalQuantity],\n        [ReorderMinQuantity]\n      ) \n    select\n      wi.[CatalogEntryCode],\n      wi.[WarehouseCode],\n      cast(case wi.[InventoryStatus] when 1 then 1 else 0 end as bit) as [IsTracked],\n      wi.[InStockQuantity] - wi.[ReservedQuantity] as [PurchaseAvailableQuantity],\n      wi.[PreorderQuantity] as [PreorderAvailableQuantity],\n      wi.[BackorderQuantity] as [BackorderAvailableQuantity],\n      0 as [PurchaseRequestedQuantity],\n      0 as [PreorderRequestedQuantity],\n      0 as [BackorderRequestedQuantity],\n      ce.[StartDate] as [PurchaseAvailableDate],\n      case\n        when wi.[AllowPreorder] = 1 and wi.[PreorderAvailabilityDate] < ce.[StartDate] then wi.[PreorderAvailabilityDate]\n      else ce.[StartDate]\n    end as [PreorderAvailableUtc],\n      wi.[BackorderAvailabilityDate] as [BackorderAvailableUtc],\n      wi.[ReservedQuantity] as [AdditionalQuantity],\n      wi.[ReorderMinQuantity]\n    from [dbo].[WarehouseInventory] wi\n    join [dbo].[CatalogEntry] ce on wi.[CatalogEntryCode] = ce.[Code]\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Total in C#\nDESCRIPTION: This method calculates the total for an order group using the IOrderGroupCalculator and logs the result using Debug.WriteLine. It takes an IOrderGroup and an IOrderGroupCalculator as input parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetTotal(IOrderGroup orderGroup, IOrderGroupCalculator orderGroupCalculator)\n          {\n            var total = orderGroupCalculator.GetTotal(orderGroup);\n            Debug.WriteLine(\"Total for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, total);\n          }\n```\n\n----------------------------------------\n\nTITLE: Getting the Return Total in C#\nDESCRIPTION: This snippet shows how to calculate the total return amount for a purchase order using the IReturnOrderCalculator interface. It gets instances of IReturnOrderCalculator and IOrderRepository, loads the purchase order, and then calculates the total return amount.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar returnOrderCalculator = ServiceLocator.Current.GetInstance<IReturnOrderCalculator>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n            var returnTotal = returnOrderCalculator.GetTotal(purchaseOrder);\n```\n\n----------------------------------------\n\nTITLE: Removing Package Entry in C#\nDESCRIPTION: This code snippet removes a PackageEntry using provided ContentReferences. It creates a PackageEntry object with the specified Parent and Child ContentReferences, then uses the IRelationRepository to remove the matching relation. No action is taken if no match is found.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic void RemovePackageEntry(ContentReference referenceToPackage, ContentReference referenceToPackageOrVariation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Define a relation matching the one to remove, or use\n        // GetRelations to find the one you want to remove and pass that to\n        // RemoveRelation\n        var relationToRemove = new PackageEntry\n          {\n            Parent = referenceToPackage,\n            Child = referenceToPackageOrVariation\n          };\n    \n        // Removes matching PackageEntry, or no action if no match exists\n        relationRepository.RemoveRelation(relationToRemove);\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding MetaObject Extension Example C#\nDESCRIPTION: This example shows how to add a MetaObject extension to MetaClass. Extensions collection. Extension name, extension type and activation type are provided as parameters. Activation type specifies when extension is loaded.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n//Add MetaObject Extension\n      metaClass.Extensions.Add(new MetaObjectExtensionInfo(HistoryManager.ModuleName,\n                                   AssemblyUtil.GetTypeString(typeof (HistoryExtension)),\n                                   MetaObjectExtensionActivationType.OnSave));\n```\n\n----------------------------------------\n\nTITLE: Get Discounted Shipping Amount C#\nDESCRIPTION: Calculates the discounted shipping amount for a shipment using the provided shipping calculator.  It takes IShipment, IMarket, Currency and IShippingCalculator as parameters. The discounted shipping amount is then printed to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetDiscountedShippingAmount(IShipment shipment, IMarket market, Currency currency, IShippingCalculator shippingCalculator)\n          {\n            var shippingDiscountedAmount = shippingCalculator.GetDiscountedShippingAmount(shipment, market, currency);\n            Debug.WriteLine(\"Shipping discounted amount for shipment '{0}': {1}\", shipment.ShipmentId, shippingDiscountedAmount);\n          }\n```\n\n----------------------------------------\n\nTITLE: Updating Package Entry Quantity in C#\nDESCRIPTION: This code snippet updates the quantity of a specific PackageEntry. It retrieves the PackageEntry using the provided ContentReferences and updates the Quantity property. It requires access to the IRelationRepository and uses CompareToIgnoreWorkID to find the matching entry, ignoring version differences.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic void UpdatePackageEntry(ContentReference referenceToPackage, ContentReference referenceToPackageOrVariation, decimal newQuantity)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var packageEntries = relationRepository.GetChildren<PackageEntry>(referenceToPackage);\n    \n        // Find the matching PackageEntry by comparing the child, ignoring versions since relations are not version specific\n        var matchingEntry = packageEntries.FirstOrDefault(r => r.Child.CompareToIgnoreWorkID(referenceToPackageOrVariation));\n    \n        // Update if there was a matching entry\n        if (matchingEntry != null)\n          {\n            // Set new data\n            matchingEntry.Quantity = newQuantity;\n    \n            relationRepository.UpdateRelation(matchingEntry);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Entity Object C#\nDESCRIPTION: This snippet explains how to create and store a new entity object in the persistent storage. It calls BusinessManager.Execute with a CreateRequest, accepting the target EntityObject as input. The response returns the PrimaryKeyId of the newly created object.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nCreateResponse response = (CreateResponse)BusinessManager.Execute(new CreateRequest(target));\n    PrimaryKeyId newPk = response.PrimaryKeyId;\n```\n\n----------------------------------------\n\nTITLE: Filtering Parent Bundles in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to retrieve parent bundles based on a content reference ID. It uses the `Filter` method along with `ParentBundles().MatchContained(c => c.ID, contentReference.ID)` to filter the content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<EntryContentBase>() \n    .Filter(x => x.ParentBundles().MatchContained(c => c.ID, contentReference.ID));\n```\n\n----------------------------------------\n\nTITLE: Calculating Shipping SubTotal for Return Order Form in C#\nDESCRIPTION: This snippet calculates the shipping subtotal for a return order form, utilizing the provided market, currency, and return order form calculator. The calculated shipping subtotal is then written to the debug output. It needs IReturnOrderForm, IMarket, Currency, and IReturnOrderFormCalculator as parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingSubTotal(IReturnOrderForm returnOrderForm, \n                                        IMarket market, \n                                        Currency currency, \n                                        IReturnOrderFormCalculator returnOrderFormCalculator)\n          {\n            var shippingSubTotal = returnOrderFormCalculator.GetShippingSubTotal(returnOrderForm, market, currency);\n            Debug.WriteLine(\"Shipping subtotal for return order form '{0}': {1}\", returnOrderForm.OrderFormId, shippingSubTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Check If Shipment Can Be Cancelled C#\nDESCRIPTION: This code snippet demonstrates how to determine if a shipment can be cancelled using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `CanCancelShipment()` extension method on the `purchaseOrder` instance, passing a shipment object.  This requires resolving dependencies for `IOrderRepository` and an `IShipment` object.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_17\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipment shipment;\n    \n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var canCancelShipment = purchaseOrder.CanCancelShipment(shipment);\n```\n\n----------------------------------------\n\nTITLE: Creating Cart Item View Model\nDESCRIPTION: This method creates a view model for the cart item, including information such as the code, display name, image URL, prices, quantity, URL, entry, availability, and whether it's a gift.  It also retrieves and sets the selected options for dynamic packages, if any, by calling the `GetDynamicPackageInfo` extension method and then mapping these to displayable strings from `FashionVariant` entities.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic virtual CartItemViewModel CreateCartItemViewModel(ICart cart, ILineItem lineItem, EntryContentBase entry)\n{\n    var viewModel = new CartItemViewModel\n    {\n        Code = lineItem.Code,\n        DisplayName = entry.DisplayName,\n        ImageUrl = entry.GetAssets<IContentImage>(_contentLoader, _urlResolver).FirstOrDefault() ?? \"\",\n        DiscountedPrice = GetDiscountedPrice(cart, lineItem),\n        PlacedPrice = _pricingService.GetMoney(lineItem.PlacedPrice),\n        Quantity = lineItem.Quantity,\n        Url = entry.GetUrl(_relationRepository, _urlResolver),\n        Entry = entry,\n        IsAvailable = _pricingService.GetPrice(entry.Code) != null,\n        DiscountedUnitPrice = GetDiscountedUnitPrice(cart, lineItem),\n        IsGift = lineItem.IsGift\n    };\n\n    var selectedVariants = lineItem.GetDynamicPackageInfo();\n    if (selectedVariants != null)\n    {\n        var variants = _catalogContentService.GetItems<FashionVariant>(selectedVariants);\n        var selectedOptions = variants.Select(v => $\"{v.DisplayName} Size: {v.Size} Color: {v.Color} Code: {v.Code}\");\n        viewModel.SelectedOptions = selectedOptions;\n    }\n\n    var productLink = entry is VariationContent ?\n        entry.GetParentProducts(_relationRepository).FirstOrDefault() :\n        entry.ContentLink;\n\n    FashionProduct product;\n    if (_contentLoader.TryGet(productLink, out product))\n    {\n        viewModel.Brand = GetBrand(product);\n    }\n\n    var variant = entry as FashionVariant;\n    if (variant != null)\n    {\n        viewModel.AvailableSizes = GetAvailableSizes(product, variant);\n    }\n\n    return viewModel;\n}\n```\n\n----------------------------------------\n\nTITLE: Updating Bundle/Package Entry (C#)\nDESCRIPTION: Updates an existing entry in a bundle or package using the IRelationRepository.UpdateRelation method. The code retrieves the existing entries, finds the matching entry based on its child ContentReference, updates the desired property (e.g., Quantity), and then calls UpdateRelation to persist the changes. CompareToIgnoreWorkID is used for comparison to disregard version differences.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic void UpdateBundleEntry(ContentReference referenceToBundle, ContentReference referenceToProductOrVariation, decimal newQuantity)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var bundleEntries = relationRepository.GetChildren<BundleEntry>(referenceToBundle);\n    \n        // Find the matching BundleEntry by comparing the child, ignoring versions since relations are not version specific\n        var matchingEntry = bundleEntries.FirstOrDefault(r => r.Child.CompareToIgnoreWorkID(referenceToProductOrVariation));\n    \n        // Update if there was a matching entry\n        if (matchingEntry != null)\n          {\n            // Set new data\n            matchingEntry.Quantity = newQuantity;\n    \n            relationRepository.UpdateRelation(matchingEntry);\n          }\n      }\n    \n    public void UpdatePackageEntry(ContentReference referenceToPackage, ContentReference referenceToPackageOrVariation, decimal newQuantity)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var packageEntries = relationRepository.GetChildren<PackageEntry>(referenceToPackage);\n    \n        // Find the matching PackageEntry by comparing the child, ignoring versions since relations are not version specific\n        var matchingEntry = packageEntries.FirstOrDefault(r => r.Child.CompareToIgnoreWorkID(referenceToPackageOrVariation));\n    \n        // Update if there was a matching entry\n```\n\n----------------------------------------\n\nTITLE: Get Shipping Totals C#\nDESCRIPTION: Calculates the shipping totals for a given shipment using the provided shipping calculator. It takes IShipment, IMarket, Currency and IShippingCalculator as parameters. The subtotal, shipping cost, and shipping tax are then printed to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingTotals(IShipment shipment, IMarket market, Currency currency, IShippingCalculator shippingCalculator)\n          {\n            var shippingTotals = shippingCalculator.GetShippingTotals(shipment, market, currency);\n            Debug.WriteLine(\"Subtotal for shipment '{0}': {1}\", shipment.ShipmentId, shippingTotals.ItemsTotal);\n            Debug.WriteLine(\"Shipping cost for shipment '{0}': {1}\", shipment.ShipmentId, shippingTotals.ShippingCost);\n            Debug.WriteLine(\"Shipping tax for shipment '{0}': {1}\", shipment.ShipmentId, shippingTotals.ShippingTax);\n          }\n```\n\n----------------------------------------\n\nTITLE: Render Campaign with Partial View C#\nDESCRIPTION: This code snippet demonstrates how to create a partial controller for rendering `SalesCampaign` content.  It uses the `TemplateDescriptor` attribute to make it the default controller.  The `InvokeComponent` method returns a view for the provided campaign.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/marketing.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Commerce.Marketing;\nusing EPiServer.Framework.DataAnnotations;\nusing EPiServer.Web.Mvc;\n\nnamespace MyOptimizelySite.Controllers\n{\n    [TemplateDescriptor(Default = true)]\n    public class CampaignPartialController : PartialContentComponent<SalesCampaign>\n    {\n        protected override IViewComponentResult InvokeComponent(SalesCampaign currentCampaign)\n        {\n            // Implementation of action view the page\n            return View(currentCampaign);\n        }\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Get Shipping Items Total C#\nDESCRIPTION: Calculates the subtotal for all line items in the shipment using the provided shipping calculator. It takes IShipment, Currency and IShippingCalculator as parameters. The shipment subtotal is then printed to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingItemsTotal(IShipment shipment, Currency currency, IShippingCalculator shippingCalculator)\n          {\n            var shipmentSubtotal = shippingCalculator.GetShippingItemsTotal(shipment, currency);\n            Debug.WriteLine(\"Subtotal for shipment '{0}': {1}\", shipment.ShipmentId, shipmentSubtotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Register Catalog Routes in EPiServer\nDESCRIPTION: This code snippet demonstrates how to register the catalog partial router in an EPiServer initialization module to enable routing to catalog content. It utilizes the `CatalogRouteHelper.MapDefaultHierarchialRouter` method to map routes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/routing.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Web.Routing;\nusing EPiServer.Framework;\nusing EPiServer.Commerce.Routing;\nusing EPiServer.Framework.Initialization;\n\nnamespace CodeSamples.EPiServer.Commerce.Catalog\n{\n  [ModuleDependency(typeof(global::EPiServer.Commerce.Initialization.InitializationModule))]\n  public class RegisterRoutingModuleSample : IInitializableModule\n  {\n    public void Initialize(InitializationEngine context)\n    {\n      MapRoutes(RouteTable.Routes);\n    }\n    private static void MapRoutes(RouteCollection routes)\n    {\n      CatalogRouteHelper.MapDefaultHierarchialRouter(routes, true);\n    }\n    public void Uninitialize(InitializationEngine context) { /*uninitialize*/}\n    public void Preload(string[] parameters) { }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Getting Variation Contents for ProductContent in Optimizely (C#)\nDESCRIPTION: Retrieves all VariationContent instances associated with a ProductContent. This method uses the IContentLoader and IRelationRepository to fetch the variation links and convert them to VariationContent objects, filtering by language. It uses the ServiceLocator to resolve dependencies when no arguments are provided.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic static IEnumerable<VariationContent> VariationContents(this ProductContent productContent)\n          {\n            return VariationContents(productContent, ServiceLocator.Current.GetInstance<IContentLoader>(), ServiceLocator.Current.GetInstance<IRelationRepository>());\n          }\n    \n        public static IEnumerable<VariationContent> VariationContents(this ProductContent productContent, IContentLoader contentLoader, IRelationRepository relationRepository)\n          {\n            return contentLoader.GetItems(productContent.GetVariants(relationRepository), productContent.Language).OfType<VariationContent>();\n          }\n```\n\n----------------------------------------\n\nTITLE: Get Active Return Forms C#\nDESCRIPTION: This code snippet demonstrates how to get a purchase order's active return forms using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `GetActiveReturnForms()` extension method on the `purchaseOrder` instance.  This requires resolving dependencies for `IOrderRepository`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_15\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var activeReturnForms = purchaseOrder.GetActiveReturnForms();\n```\n\n----------------------------------------\n\nTITLE: Getting Custom Field Values from EntryContentBase in C#\nDESCRIPTION: This C# snippet retrieves custom field values from an EntryContentBase object and stores them in a dictionary. It retrieves values for string, timestamp, integer, decimal and boolean fields using the GetValue method. It handles null values and converts the timestamp to a string representation with the \"s\" format. Returns a Dictionary<string, object> with the custom field values.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-14.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n  public Dictionary < string, object > GetFieldValues(EntryContentBase entry) {\n    var values = new Dictionary < string,\n      object > ();\n    var testString = entry.GetValue(\"mark_product_teststring\")?.ToString();\n    if (!string.IsNullOrEmpty(testString)) {\n      values.Add(\"mark_product_teststring\", testString);\n    }\n\n    var testTimestamp = entry.GetValue(\"mark_product_testtimestamp\") as DateTime ? ;\n    if (testTimestamp != null) {\n      values.Add(\"mark_product_testtimestamp\", testTimestamp.Value.ToString(\"s\"));\n    }\n\n    var testInteger = entry.GetValue(\"mark_product_testinteger\") as int ? ;\n    if (testInteger != null) {\n      values.Add(\"mark_product_testinteger\", testInteger.Value);\n    }\n\n    var testDecimal = entry.GetValue(\"mark_product_testdecimal\") as decimal ? ;\n    if (testDecimal != null) {\n      values.Add(\"mark_product_testdecimal\", testDecimal.Value);\n    }\n\n    var testBoolean = entry.GetValue(\"mark_product_testboolean\") as bool ? ;\n    if (testBoolean != null) {\n      values.Add(\"mark_product_testboolean\", testBoolean);\n    }\n    return values;\n  }\n}\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Bolt Options in appsettings.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure Bolt payment provider options within the `appsettings.json` file.  It defines settings like the publishable key, API key, division public ID, signing secret, auto-capture setting, and environment type (Sandbox or Production). These values are provided by your Bolt merchant account.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bolt-installation.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"EpiServer\" : {\n    \"Commerce\" : {\n      \"Bolt\" : {\n        \"PublishableKey\" : \"key\",\n        \"ApiKey\" : \"Api Key\",\n        \"DivisionPublicId\" : \"Public Id\",\n        \"SigningSecret\" : \"Signing Secret\",\n        \"AutoCapture\" : true,\n        \"EnvironmentType\" : \"Sandbox\"\n      }\n    }\n  }  \n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Guid MetaField C#\nDESCRIPTION: This C# code snippet creates a new MetaField of type Guid. It takes the name, friendlyName and isNullable flag as parameters.  It throws ArgumentNullException if name or friendlyName is null.  It constructs attributes and calls CreateMetaField method with the provided parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metafield-class.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic MetaField CreateGuid(string name, string friendlyName, bool isNullable)\n    {\n    if (name == null)\n    throw new ArgumentNullException(\"name\");\n    if (friendlyName == null)\n    throw new ArgumentNullException(\"friendlyName\");\n    AttributeCollection attr = new AttributeCollection();\n    string defaultValue = isNullable ? string.Empty : \"newid()\";\n    MetaField retVal = this.MetaClass.CreateMetaField(name, friendlyName, MetaFieldType.Guid, isNullable, defaultValue, attr);\n    return retVal;\n    }\n```\n\n----------------------------------------\n\nTITLE: Adding Client-Side Tracking Script - C#\nDESCRIPTION: This snippet adds the client-side tracking script using the EPiServer.Personalization.Commerce.Extensions namespace and the @Html.LoadTrackingAPI() helper. It requires the EPiServer.Personalization.Commerce NuGet package. This code should be placed within the <head> section of the Views/Shared/_Layout.cshtml file.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n@using EPiServer.Personalization.Commerce.Extensions\n```\n\nLANGUAGE: C#\nCODE:\n```\n...\n<head>\n  ...\n  @Html.LoadTrackingAPI()\n</head>\n...\n```\n\n----------------------------------------\n\nTITLE: Define Rendering Template Controller for Product Variant in Optimizely\nDESCRIPTION: This snippet defines a controller, `MyVariationController`, for rendering the `MyVariation` content type. It inherits from `ContentController<MyVariation>` and includes an `Index` action that returns a view with the current content, enabling the display of product variant information on the website.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-rendering-templates.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Web.Mvc;\nusing EPiServer;\nusing EPiServer.Core;\nusing EPiServer.Framework.DataAnnotations;\nusing EPiServer.Web.Mvc;\nusing MyCommerceSite.Models.Catalog;\n\nnamespace MyCommerceSite.Controllers\n  {\n    public class MyVariationController : ContentController<MyVariation>\n      {\n        public ActionResult Index(MyVariation currentContent)\n          {\n            return View(currentContent);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Canceling a Return Order in C#\nDESCRIPTION: This snippet demonstrates how to cancel a return order using the `IReturnOrderService` interface in Optimizely Commerce. It retrieves instances of `IReturnOrderService` and `IOrderRepository` from the service locator, loads a purchase order, retrieves the first return form associated with the purchase order, and cancels the return form. The order group ID is hardcoded as '1'.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nvar returnOrderService = ServiceLocator.Current.GetInstance<IReturnOrderService>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n            var returnOrderForm = purchaseOrder.ReturnForms.First();\n            returnOrderService.CancelReturn(returnOrderForm);\n```\n\n----------------------------------------\n\nTITLE: Configuring ODPJob via Configuration File After 14.20.0 (JSON)\nDESCRIPTION: This JSON snippet shows the configuration structure for ODP after version 14.20.0, including `SiteId`, `MarketIds`, `TrackingId`, and `S3Options` with details like `BucketName`, `AccessKeyId`, `SecretAccessKey`, and `Region`. This configuration is applied through the configuration file of the application.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customized-commerce-odp.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"EPiServer\": {\n    \"Commerce\": {\n      \"ODPJob\": {\n        \"MarketKeys\": [\n          {\n            \"SiteId\": \"siteId\",\n            \"MarketIds\": [\"US\", \"SWE\"],\n            \"AccessKey\": \"key\",\n            \"EndpointUrl\": \"https://api.zaius.com/\",\n            \"TrackingId\": \"\",\n            \"S3Options\": {\n              \"BucketName\": \"\",\n              \"AccessKeyId\": \"\",\n              \"SecretAccessKey\": \"\",\n              \"Region\": \"ADD_REGION, SEE THE FOLLOWING NOTE\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Return Order Form Validation in C#\nDESCRIPTION: This example shows how to override the default validation methods in DefaultReturnOrderFormCalculator, such as ValidateTotal, ValidateSubtotal, ValidateHandlingTotal, ValidateShippingSubTotal, and ValidateTaxTotal. By overriding these methods, the default validation logic can be customized.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReturnOrderFormCalculatorOverridingDefault : DefaultReturnOrderFormCalculator\n      {\n        public ReturnOrderFormCalculatorOverridingDefault(IShippingCalculator shippingCalculator, ITaxCalculator taxCalculator)\n          : base(shippingCalculator, taxCalculator)\n          { }\n        protected override void ValidateTotal(Money money)\n          {\n```\n\n----------------------------------------\n\nTITLE: Hold Purchase Order C#\nDESCRIPTION: This code snippet demonstrates how to put a purchase order on hold using the `IPurchaseOrderProcessor`. It loads a purchase order by its ID and then calls the `HoldOrder()` method on the `purchaseOrderProcessor` instance. This requires resolving dependencies for `IOrderRepository` and `IPurchaseOrderProcessor`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    IPurchaseOrderProcessor purchaseOrderProcessor;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    purchaseOrderProcessor.HoldOrder(purchaseOrder);\n```\n\n----------------------------------------\n\nTITLE: Configuring Personalization Options in appsettings.json (Optimizely)\nDESCRIPTION: This JSON snippet configures personalization options for Optimizely Product Recommendations, including base API URL, site, client token, admin token, channel, request timeout, tracking mode, and other settings.  The 'Scopes' array allows defining specific configurations for different scopes within the application. It utilizes 'PersonalizationOptions' class properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/installing-and-configuring-the-native-integration-package.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"EPiServer\": {\n        \"Personalization\": {\n          \"PersonalizationOptions\": {\n            \"BaseApiUrl\": \"https://defaultbaseurl.com\",\n            \"Site\": \"defaultsite\",\n            \"ClientToken\": \"defaultclienttoken\",\n            \"AdminToken\": \"defaultadmin\",\n            \"Channel\": \"test\",\n            \"RequestTimeout\": 30,\n            \"TrackingMode\": \"ClientSide\",\n            \"SkipUserHostTracking\": true,\n            \"UsePseudonymousUserId\": true,\n            \"FeedCatalogName\": \"Test\",\n            \"FeedSkipProductLevel\": true,\n            \"Scopes\": [\n              {\n                \"AdminToken\": \"scopeadmin\",\n                \"BaseApiUrl\": \"https://scopebaseurl.com\",\n                \"ClientToken\": \"scopeclienttoken\",\n                \"Site\": \"scopesite\",\n                \"Channel\": \"scopetest\",\n                \"FeedCatalogName\": \"ScopeTest\",\n                \"FeedSkipProductLevel\": false,\n                \"ScopeId\": \"scopeid\",\n                \"Name\": \"Scope Test\"\n              }\n            ] \n          }\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Implementing TrackProduct Method (C#)\nDESCRIPTION: This snippet presents the implementation of the TrackProduct method. This method creates tracking data using _trackingDataFactory, optionally skips recommendations, and then uses _trackingService.TrackAsync to send the tracking data.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\npublic async Task<TrackingResponseData> TrackProduct(HttpContextBase httpContext, string productCode, bool skipRecommendations)\n      {\n        ...\n        var trackingData = _trackingDataFactory.CreateProductTrackingData(productCode, httpContext);\n        if (skipRecommendations)\n          {\n            trackingData.SkipRecommendations();\n          }\n        return await _trackingService.TrackAsync(trackingData, httpContext, _contentRouteHelperAccessor().Content);\n      }\n```\n\n----------------------------------------\n\nTITLE: Listing Bundle/Package Entries with Content Extensions (C#)\nDESCRIPTION: Retrieves entries from a bundle or package using content extensions. This approach leverages the GetEntries() method available on BundleContent and PackageContent objects, returning an IEnumerable of ContentReference objects representing the entries. The methods use content extensions so no dependency on IRelationRepository is required directly.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<ContentReference> ListBundleEntries(BundleContent bundleContent)\n      {\n        var bundleEntryLinks = bundleContent.GetEntries();\n        return bundleEntryLinks;\n      }\n    \n    public IEnumerable<ContentReference> ListPackageEntries(PackageContent packageContent)\n      {\n        var packageEntryLinks = packageContent.GetEntries();\n        return packageEntryLinks;\n      }\n```\n\n----------------------------------------\n\nTITLE: Process Payment (Customized Commerce 11-13) C#\nDESCRIPTION: This code snippet shows the `ProcessPayment` method signature using `IPaymentPlugin` in Customized Commerce versions 11-13. It takes an `IOrderGroup` and an `IPayment` as input and returns a `PaymentProcessingResult`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/payment-plugins.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nPaymentProcessingResult ProcessPayment(IOrderGroup orderGroup, IPayment payment)\n```\n\n----------------------------------------\n\nTITLE: Use Template Value in Filter (Interval) in C#\nDESCRIPTION: This snippet demonstrates how to use template values to create an interval filter for 'StartDate' between the start and end of the current day. It utilizes string formatting with DateTime templates and sets ValueIsTemplate to true.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-and-sorting.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIntervalFilterElement filter = new IntervalFilterElement(\"StartDate\",\n                string.Format(\"{{DateTime:{0}Start}}\", \"Today\"),\n                string.Format(\"{{DateTime:{0}End}}\", \"Today\"));\n                filter.ValueIsTemplate = true;\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Return Order Validation (C#)\nDESCRIPTION: This code snippet demonstrates how to override the default return order validation by inheriting from the DefaultReturnPurchaseOrderCalculator class. It overrides the ValidateTotal, ValidateSubTotal, and ValidateShippingSubTotal methods to provide custom validation logic, throwing a ValidationException if the amount is not greater than 0.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-purchase-order-calculator.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic class ReturnPurchaseOrderCalculatorOverridingDefault : DefaultReturnPurchaseOrderCalculator\n      {\n        public ReturnPurchaseOrderCalculatorOverridingDefault(IReturnOrderFormCalculator returnOrderFormCalculator)\n          : base(returnOrderFormCalculator)\n          { }\n        protected override void ValidateTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Order total must be greater than 0\");\n              }\n          }\n        protected override void ValidateSubTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Order subtotal must be greater than 0\");\n              }\n          }\n        protected override void ValidateShippingSubTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Shipping subtotal must be greater than 0\");\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Configure Catalog Options Cache (Commerce Connect 14) JSON\nDESCRIPTION: This JSON snippet demonstrates how to configure catalog caching options in Commerce Connect 14. It defines settings for enabling the cache and setting expiration times for different types of catalog data, including content versions, collections, entries, and nodes. These settings control how long catalog data is stored in the cache.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-dto-and-object-models.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"EPiServer\" : {\n    \"Commerce\" : {\n      \"CatalogOptions\" : {\n        \"Cache\" : {\n          \"UseCache\"                      : true,\n          \"ContentVersionCacheExpiration\" : \"00:15:00\",\n          \"CollectionCacheExpiration\"     : \"00:15:00\",\n          \"EntryCacheExpiration\"          : \"00:15:00\",\n          \"NodeCacheExpiration\"           : \"00:15:00\"\n        }\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define FabricBlock for Optimizely Commerce Connect\nDESCRIPTION: This C# code defines a FabricBlock class inheriting from BlockData. It includes properties for FabricName (String) and Image (ContentReference). The ContentType attribute specifies the DisplayName and GUID for the block.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/properties.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n[ContentType(DisplayName = \"FabricBlock\", GUID = \"119EE80A-525B-479D-A838-6B4E0A903147\")]\n     public class FabricBlock : BlockData\n       {\n         public virtual String FabricName {get; set;}\n         public virtual ContentReference Image {get; set;} \n       }\n```\n\n----------------------------------------\n\nTITLE: Registering a New Order Status in Optimizely Commerce\nDESCRIPTION: This snippet demonstrates how to register a new OrderStatus in Optimizely Commerce.  It uses the `OrderStatus.RegisterStatus` method to add a new status with a specified ID (128) and name (\"WaitingForFeedback\"). This is applicable for versions 13+.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extending-order-status.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nOrderStatus.RegisterStatus(new OrderStatus(128, \"WaitingForFeedback\"));\n```\n\n----------------------------------------\n\nTITLE: Get Promotion Items C#\nDESCRIPTION: This snippet retrieves promotion items based on the provided promotion data. It constructs a `CatalogItemSelection` object using item data from the promotion condition, specifying the selection type and recursive matching.  It requires `promotionData.Condition.Items`, `CatalogItemSelectionType.Specific`, and `promotionData.Condition.MatchRecursive`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-promotions.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar specificItems = new CatalogItemSelection(\n                    promotionData.Condition.Items, \n                    CatalogItemSelectionType.Specific,\n                    promotionData.Condition.MatchRecursive);\n                return new PromotionItems(promotionData, specificItems, specificItems);\n```\n\n----------------------------------------\n\nTITLE: Calculating Shipping Subtotal in C#\nDESCRIPTION: This method calculates the shipping subtotal for an order form, considering the market and currency. It takes the order form, market, currency, and IOrderFormCalculator as inputs. The shipping subtotal is then written to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingSubTotal(IOrderForm orderForm, IMarket market, Currency currency, IOrderFormCalculator orderFormCalculator)\n          {\n            var shippingSubTotal = orderFormCalculator.GetShippingSubTotal(orderForm, market, currency);\n            Debug.WriteLine(\"Shipping subtotal for order form '{0}': {1}\", orderForm.OrderFormId, shippingSubTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Creating a Cancel and Purchase Request (JSON)\nDESCRIPTION: This JSON snippet shows an example of how to combine a Cancel request with a Purchase request in a single inventory request. This pattern can be used to efficiently replace existing operations with new ones, avoiding the need for a Split operation followed by another request.  It requires an existing 'OperationKey' to cancel and uses catalog entry code and warehouse code.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/inventory-requests.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"ApplicationId\"  : \"...\",\n        \"RequestDateUtc\" : \"...\", \"Items\": \n          [\n            {\n              \"ItemIndex\"        : 1,\n              \"RequestType\"      : \"Cancel\",\n              \"OperationKey\"     : \"...\"\n            },\n            {\n              \"ItemIndex\"        : 2,\n              \"RequestType\"      : \"Purchase\",\n              \"CatalogEntryCode\" : \"item\",\n              \"WarehouseCode\"    : \"warehouse\",\n              \"Quantity\"         : 8\n            }\n          ]\n      }\n```\n\n----------------------------------------\n\nTITLE: Opening Meta-Model Edit Scope in C#\nDESCRIPTION: This C# code snippet demonstrates how to open a meta-model edit scope using MetaClassManagerEditScope and the BeginEdit method. It emphasizes the importance of the SaveChanges method to commit the changes made within the scope. The snippet also utilizes a using statement to ensure proper disposal of the scope.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metaclassmanager-class.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Open Meta-model edit scope\n    using (MetaClassManagerEditScope scope =\n    DataContext.Current.MetaModel.BeginEdit())\n    {\n    // Modify meta-model here\n    // Save Changes\n    scope.SaveChanges();\n    }\n```\n\n----------------------------------------\n\nTITLE: Getting Children of a Category in Commerce Connect (C#)\nDESCRIPTION: This code snippet demonstrates how to retrieve the children of a category in Optimizely Commerce Connect using the `IContentLoader` and `ReferenceConverter`. It retrieves instances of these services from the service locator, converts a category ID from Commerce Connect to a content link, and then retrieves the children of that category using the CMS API. The example uses an arbitrary node ID of 1.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-content-provider.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n//Get the currently configured content loader and reference converter from the service locator\n    var contentLoader = ServiceLocator.Current.GetInstance<IContentLoader>();\n    var referenceConverter = ServiceLocator.Current.GetInstance<ReferenceConverter>();\n    \n    //Get the correct category id as it's represented in EPiServer Commerce\n    //In this example we arbitrarily use the integer 1\n    var nodeIdFromCommerce = 1;\n    \n    //We use the content link builder to get the contentlink to our product\n    var productLink = referenceConverter.GetContentLink(nodeIdFromCommerce, CatalogContentType.CatalogNode, 0);\n    \n    //Get the children using CMS API\n    var children = contentLoader.GetChildren<CatalogContentBase>(productLink);\n```\n\n----------------------------------------\n\nTITLE: Applying Discounts with Unit-Level Exclusion using Extension Method in C#\nDESCRIPTION: This snippet demonstrates how to apply discounts to a cart using the ApplyDiscounts extension method, with unit-level exclusion enabled. It retrieves a cart, then calls the ApplyDiscounts method, passing in the promotion engine and a PromotionEngineSettings object with ExclusionLevel set to Unit.  This approach utilizes an extension method to streamline the discount application process.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotion-exclusions.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar cart = ServiceLocator.Current.GetInstance<IOrderRepository>().LoadOrCreateCart<ICart>(PrincipalInfo.CurrentPrincipal.GetContactId(), Cart.DefaultName);\ncart.ApplyDiscounts(_promotionEngine, new PromotionEngineSettings() { ExclusionLevel = ExclusionLevel.Unit });\n```\n\n----------------------------------------\n\nTITLE: Calculate Matching Numbers - C#\nDESCRIPTION: This code snippet retrieves a custom facet result and calculates matching numbers based on the provided parameters.  It retrieves child contents using contentLoader and uses the FacetQueryHandler to calculate matching numbers for custom facet groups.  Dependencies include _facetFactory, _marketService, _localizationService, ServiceLocator.Current, FacetQueryHandler, GetContentsByFacet.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic RestResult Get(string id, string facetString, ContentReference parentLink)\n          {\n            var customFacet = new CustomFacet(_facetFactory, _marketService, _localizationService);\n            var contentLoader = ServiceLocator.Current.GetInstance();\n            var facetQueryHandler = new FacetQueryHandler();\n            facetQueryHandler.CalculateMatchingNumbers(\n              contentLoader.GetChildren(parentLink), \n              customFacet.Groups, \n              facetString, \n              new GetContentsByFacet[] { new GetCampaignsByLastModified() });\n            return Rest(customFacet);\n          }\n```\n\n----------------------------------------\n\nTITLE: Configuring MetaObject Options in JSON\nDESCRIPTION: This snippet configures MetaObject options, including cache settings, list object limits, and type definitions. It controls how meta objects are handled and cached within the Optimizely Commerce platform, affecting performance and data consistency.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/feature-specific-commerce-configurations.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Commerce\": {\n    \"MetaObjectOptions\": {\n      \"MaxListObject\": 1000,\n      \"UseCache\": false,\n      \"CacheItemExpiration\": 30,\n      \"UseSPOptimization\": false,\n      \"SPItemExpiration\": 10080,\n      \"Instances\": [\n        {\n          \"MetaClass\": \"\",\n          \"Type\": \"Mediachase.BusinessFoundation.Data.Meta.MetaObject, Mediachase.BusinessFoundation.Data\"\n        }\n      ],\n      \"Types\": [\n        {\n          \"Name\": \"Name\",\n          \"Installer\": \"Mediachase.BusinessFoundation.Data.Meta.Management.DefaultMetaFieldInstaller, Mediachase.BusinessFoundation.Data\",\n          \"Binder\": \"Mediachase.BusinessFoundation.Data.Meta.DefaultMetaObjectPropertyBinder, Mediachase.BusinessFoundation.Data\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Applying Pricing Conventions in C#\nDESCRIPTION: This code snippet demonstrates how to apply conventions for indexing `IPricing` data, including the `DefaultPrice()` and `Prices()` fields. Override this method to customize which pricing fields are indexed.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/overriding-default-conventions.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ApplyPricingConventions(TypeConventionBuilder<IPricing> conventionBuilder)\n      {\n        conventionBuilder\n            .IncludeField(x => x.DefaultPrice())\n            .IncludeField(x => x.Prices());\n      }\n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Feed Properties in C#\nDESCRIPTION: This code snippet demonstrates how to set properties on the default CatalogFeedSettings instance, such as DescriptionPropertyName, using the ServiceLocator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customizing-exported-product-information.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar catalogFeedSettings = ServiceLocator.Current.GetInstance<CatalogFeedSettings>();\n    catalogFeedSettings.DescriptionPropertyName = \"...\";\n```\n\n----------------------------------------\n\nTITLE: Retrieving All Registered Order Statuses in Optimizely Commerce\nDESCRIPTION: This snippet demonstrates how to retrieve all registered OrderStatuses, including built-in ones, in Optimizely Commerce. It uses the `OrderStatus.RegisteredStatuses` property to get a collection of all registered statuses.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extending-order-status.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar statuses = OrderStatus.RegisteredStatuses;\n```\n\n----------------------------------------\n\nTITLE: Disable WorkflowsVNext Feature (C#)\nDESCRIPTION: This C# snippet demonstrates how to disable the new promotion system by using the ServiceLocator and IFeatureSwitch. This programmatically disables the 'WorkflowsVNext' feature. Requires Mediachase.Commerce namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotions-engine.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar featureSwitch = ServiceLocator.Current.GetInstance<IFeatureSwitch>();\n        featureSwitch.Features.Add(new WorkflowsVNext());\n        featureSwitch.DisableFeature(WorkflowsVNext.FeatureWorkflowsVNext);\n```\n\n----------------------------------------\n\nTITLE: Configure ExtendedComponentOptions in Web App - C#\nDESCRIPTION: This C# code snippet demonstrates configuring extended components directly within the web app using the `ExtendedComponentOptions` class in an `InitializableModule`. It's similar to the module configuration but uses a relative script URL, assuming the JavaScript file is hosted within the web app.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extend-components.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Services.Configure<ExtendedComponentOptions>(x =>\n    {\n        x.ExtendedComponents.AddRange(new[]\n        {\n            Name = \"CartOrderSubscriptionTab3\",\n            ScriptUrl = \"/js/CartOrderSubscriptionTab3/CartOrderSubscriptionTab3.js\",\n            Order = 3,\n            ComponentLocation = ComponentLocation.Tab,\n            OrderTypes = OrderTypes.Cart | OrderTypes.PurchaseOrder | OrderTypes.Subscription\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Initializing Entity Object C#\nDESCRIPTION: This snippet shows how to initialize a new entity object using the BusinessManager.Execute method with an InitializeEntityRequest. It takes the metaClassName as input and returns an EntityObject.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nInitializeEntityResponse response = (InitializeEntityResponse)BusinessManager.Execute(new InitializeEntityRequest(metaClassName));\n    EntityObject obj = response.EntityObject;\n```\n\n----------------------------------------\n\nTITLE: Retrieving Country Shipping ID using CountryManager in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve the shipping ID of a country using the CountryManager class and the GetCountry method. It checks if the country exists and extracts the CountryId.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCountryDto country = CountryManager.GetCountry(OrderAddress.CountryCode, true);\n    if (country.Country != null && country.Country.Rows.Count > 0)\n      {\n        shippingCountryId = country.Country[0].CountryId;\n        countryFound = true;\n      }\n```\n\n----------------------------------------\n\nTITLE: Getting Discount Prices with Promotion Engine in Optimizely (C#)\nDESCRIPTION: This snippet demonstrates retrieving the lowest discount price for a content item within an Optimizely Commerce Connect project. It utilizes the `IPromotionEngine` to calculate discounts based on the current market and currency. It depends on `ServiceLocator`, `IPromotionEngine`, `ICurrentMarketService`, `ContentReference`, `Market`, and `Currency`. It returns the lowest discounted price for the specified content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-market-examples.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar promotionEngine = ServiceLocator.Current.GetInstance<IPromotionEngine>();\n        var market = currentMarketService.GetCurrentMarket();\n        return promotionEngine.GetDiscountPrices(contentLink, market, currency).First().DiscountPrices.OrderBy(p=>p.Price).First().Price;\n```\n\n----------------------------------------\n\nTITLE: Check If Shipment Can Be Returned C#\nDESCRIPTION: This code snippet demonstrates how to determine if a shipment can be returned using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `CanReturnShipment()` extension method on the `purchaseOrder` instance, passing a shipment object.  This requires resolving dependencies for `IOrderRepository` and an `IShipment` object.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_18\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipment shipment;\n    \n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var canReturnShipment = purchaseOrder.CanReturnShipment(shipment);\n```\n\n----------------------------------------\n\nTITLE: Check If Shipment Can Be Released C#\nDESCRIPTION: This code snippet demonstrates how to determine if a shipment can be released using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `CanReleaseShipment()` extension method on the `purchaseOrder` instance, passing a shipment object.  This requires resolving dependencies for `IOrderRepository` and an `IShipment` object.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_16\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    IShipment shipment;\n    \n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var canReleaseShipment = purchaseOrder.CanReleaseShipment(shipment);\n```\n\n----------------------------------------\n\nTITLE: Find Orders with OrderSearchFilter (duplicate) in C#\nDESCRIPTION: This is a duplicate of the previous snippet. This C# code snippet defines a method to find orders with a specific OrderSearchFilter for a specific type of IOrderGroup. It takes an OrderSearchFilter as input and returns OrderSearchResults. The method is generic, allowing for different types of IOrderGroup to be searched.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-abstractions.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n/// <summary>\n     /// Finds orders with a specific <see cref=\"OrderSearchFilter\"/> for a specific <typeparamref name=\"TOrderGroup\"/>.\n     /// </summary>\n     /// <typeparam name=\"TOrderGroup\">The given order type for filter.</typeparam>\n     /// <param name=\"filter\">The search filter.</param>\n     /// <returns>The order search results.</returns>\n            OrderSearchResults Find(OrderSearchFilter filter) where TOrderGroup : class, IOrderGroup;\n```\n\n----------------------------------------\n\nTITLE: Configure Simplified Catalog Listing Threshold in Optimizely Commerce\nDESCRIPTION: This code snippet shows how to configure the `SimplifiedCatalogListingThreshold` in the Optimizely Commerce configuration file. This threshold determines when the simplified UI mode is activated for catalog listings with a large number of items. The simplified mode disables sorting, grouping, and bundling features to improve performance. The default value is 2000 items.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/user-interface-configuration.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"Commerce\": {\n    \"CatalogOptions\": {\n      \"SimplifiedCatalogListingThreshold \": 2000\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Register Campaign Routes C#\nDESCRIPTION: This initialization module registers custom routes for campaigns. It uses `ContentRootService` and `IUrlSegmentRouter` to resolve the campaign root and create routes for editing campaign content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/marketing.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Core;\n    using EPiServer.DataAbstraction;\n    using EPiServer.Framework;\n    using EPiServer.Framework.Initialization;\n    using EPiServer.ServiceLocation;\n    using EPiServer.Web.Routing;\n    using EPiServer.Web.Routing.Segments;\n    using System.Linq;\n    using System.Web.Routing;\n    \n    namespace EPiServer.Commerce.Sample.Business.Initialization\n      {\n        /// <summary>\n        /// Initialization module to handle the initialization of Commerce.\n        /// </summary>\n        [ModuleDependency(typeof(EPiServer.Commerce.Initialization.InitializationModule))]\n        [InitializableModule]\n        public class CampaignInitalization : IConfigurableModule\n          {\n            /// <summary>\n            /// Initializes Commerce using the specified context.\n            /// </summary>\n            /// <param name=\"context\">The context.</param>\n            public void Initialize(InitializationEngine context)\n              {\n                EPiServer.Global.RoutesRegistered += Global_RoutesRegistered;\n              }\n    \n            private void Global_RoutesRegistered(object sender, RouteRegistrationEventArgs e)\n              {\n                RegisterRoutes(RouteTable.Routes);\n              }\n    \n            private static void RegisterRoutes(RouteCollection routes)\n              {\n                // Route for editing commerce content (which has a root not connected to the global root)\n                MapCampaignRoute(routes,\n                    name: \"campaignroot\",\n                    url: \"Campaigns/{language}/{nodeedit}/{partial}/{action}\",\n                    defaults: new { action = \"index\" });\n              }\n    \n            private static void MapCampaignRoute(RouteCollection routes, string name, string url, object defaults, object constraints = null)\n              {\n                var contentRootService = ServiceLocator.Current.GetInstance<ContentRootService>();\n                var root = ServiceLocator.Current.GetInstance<IContentLoader>()\n                    .GetItems(contentRootService.List(), new LoaderOptions())\n                    .SingleOrDefault(x => x.Name.Equals(\"SysCampaignRoot\"));\n                var segmentRouter = ServiceLocator.Current.GetInstance<IUrlSegmentRouter>();\n                segmentRouter.RootResolver = (sd) => root.ContentLink;\n    \n                var parameters =\n                    new MapContentRouteParameters\n                      {\n                        UrlSegmentRouter = segmentRouter,\n                        BasePathResolver = null,//Use Cms default\n                        Direction = SupportedDirection.Both,\n```\n\n----------------------------------------\n\nTITLE: Adding a New Column in C#\nDESCRIPTION: Illustrates how to add a new column to a table using the AddColumn method of the Table class. It creates a new Column object, specifying the column name, data type, nullability, length, default value, and identity properties, then adds the column to the table. Requires the table 'newTable' to be created before adding the column.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\n// Step 4. Create a new NVARCHAR\\[150\\] columnsColumn newColumn = new Column(\"Title\", System.Data.SqlDbType.NVarChar, false,\n    150,\"N''\", false, false, 0, 0);\n    newTable.AddColumn(newColumn);\n```\n\n----------------------------------------\n\nTITLE: Configuring LuceneAzureSearchProvider in appsettings.json\nDESCRIPTION: This JSON snippet demonstrates how to configure the LuceneAzureSearchProvider in the appsettings.json file for an Optimizely Commerce Connect application. It includes settings for the default search provider, indexer base path, connection string, and search provider parameters, such as the storage container and query builder type. This configuration allows the application to use Lucene for search functionality within Azure.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/deploying-commerce-to-azure-web-apps.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"SearchOptions\": {\n    \"DefaultSearchProvider\": \"LuceneAzureSearchProvider\",\n    \"IndexerBasePath\": \"indexcontainer\",\n    \"IndexerConnectionString\": \"EPiServerAzureBlobs\",\n    \"SearchProviders\": [\n      {\n        \"Name\": \"LuceneAzureSearchProvider\",\n        \"Type\": \"Mediachase.Search.Providers.Lucene.LuceneAzureSearchProvider, Mediachase.Search.LuceneSearchProvider\",\n        \"Parameters\": {\n          \"queryBuilderType\": \"Mediachase.Search.Providers.Lucene.LuceneSearchQueryBuilder, Mediachase.Search.LuceneSearchProvider\",\n          \"storage\": \"indexcontainer\",\n          \"simulateFaceting\": \"true\",\t\t  \"connectionStringName\": \"EPiServerAzureBlobs\"\n        }\n      }\n    ],\n    \"Indexers\": [\n      {\n        \"Name\": \"catalog\",\n        \"Type\": \"Mediachase.Search.Extensions.Indexers.CatalogIndexBuilder, Mediachase.Search.Extensions\"\n      }\n    ]\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: AssetImporter for CMS Content\nDESCRIPTION: This command imports assets as CMS-based content within Optimizely's asset system. It associates assets with catalog nodes or entries using the specified mapping file, asset folder, and commerce site path.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/asset-importer.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nAssetImporter <mapping_asset_file> <asset_folder> <commerce_core_site_path> [asset_root]\n```\n\n----------------------------------------\n\nTITLE: Reporting Coupon Usage in C#\nDESCRIPTION: This C# code snippet demonstrates a basic implementation of the ICouponUsage interface to track used coupon codes. The Report method is called when a cart is saved as a purchase order and receives a list of applied promotions. This example provides a stub implementation where custom logic can be added to store coupon usage information.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/coupons.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomCouponUsage : ICouponUsage\n      {\n        public void Report(IEnumerable<PromotionInformation> appliedPromotions)\n          {\n            // Store any information needed about the coupon codes that were used.\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Deleting Meta-classes in Optimizely Commerce Connect\nDESCRIPTION: This code snippet demonstrates how to delete a meta-class using the Mediachase.MetaDataPlus.Configurator.MetaClass.Delete method. It loads the meta-class by name using Mediachase.MetaDataPlus.Configurator.MetaClass.Load and then deletes it using its ID.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metadata-plus.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nvar metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"WorkOrder\");\n    Mediachase.MetaDataPlus.Configurator.MetaClass.Delete(OrderContext.MetaDataContext, metaClass.Id);\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"WorkOrder\");\n    Mediachase.MetaDataPlus.Configurator.MetaClass.Delete(OrderContext.MetaDataContext, metaClass.Id);\n```\n\n----------------------------------------\n\nTITLE: Overriding Extended Price & Sales Tax Calculation C#\nDESCRIPTION: This snippet demonstrates how to override the default extended price and sales tax calculation logic by inheriting from DefaultLineItemCalculator. It overrides the CalculateExtendedPrice and CalculateSalesTax methods to return a Money object with a value of 0.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-line-item-calculator.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic class LineItemCalculatorSample : DefaultLineItemCalculator\n      {\n        protected override Money CalculateExtendedPrice(ILineItem lineItem, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n    \n        protected override Money CalculateSalesTax(ILineItem lineItem, IMarket market, Currency currency, IOrderAddress shippingAddress)\n          {\n            return new Money(0, currency);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Searching Purchase Orders by RMANumber in C#\nDESCRIPTION: This snippet retrieves purchase orders containing line items that have an RMANumber (a meta-field) associated with them. It utilizes SqlMetaWhereClause to filter for line items with a non-null RMANumber and SqlWhereClause to ensure only PurchaseOrders are returned.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nOrderSearchParameters parameters = new OrderSearchParameters();\n    searchOptions.Classes.Add(\"LineItemEx\");\n    parameters.SqlMetaWhereClause = \"NOT META.RMANumber IS NULL\";\n    parameters.SqlWhereClause = \"OrderGroupId IN (Select ObjectId FROM OrderGroup_PurchaseOrder)\";\n    PurchaseOrder[] purchaseOrderCollection = OrderContext.Current.Search<PurchaseOrder>(parameters, searchOptions);\n```\n\n----------------------------------------\n\nTITLE: Creating a Relationship in C#\nDESCRIPTION: Shows how to create a new relationship between two tables using the CreateRelation method of the Database class. It requires the primary table, foreign table, and foreign column name. The bCascadeDelete parameter specifies whether cascading deletes are enabled.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\nSqlContext.Current.Database.CreateRelation(refPTable, srcTable, columnName, bCascadeDelete);\n```\n\n----------------------------------------\n\nTITLE: Searching Catalog Content using Optimizely Search & Navigation\nDESCRIPTION: This code snippet demonstrates how to perform a free text search within catalog content using the Optimizely Search & Navigation API. The client.Search<T>().For(q).GetContentResult() method initiates a search for the query 'q' within the catalog content type 'T' and returns the search results.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-catalog-content.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nclient.Search<T>().For(q).GetContentResult()\n```\n\n----------------------------------------\n\nTITLE: Simple Catalog Entry Search with Lucene in C#\nDESCRIPTION: This code snippet demonstrates a simple catalog entry search using the `LuceneSearchProvider`. It initializes a `CatalogEntrySearchCriteria` object, sets the `SearchPhrase`, and then uses the `SearchManager` to perform the search. The `SearchPhrase` property supports full Lucene syntax.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-product-search.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nCatalogEntrySearchCriteria criteria = new CatalogEntrySearchCriteria();\n      criteria.SearchPhrase = \"canon\";\n      SearchManager manager = new SearchManager(AppContext.Current.ApplicationName);\n      SearchResults results = manager.Search(criteria);\n```\n\n----------------------------------------\n\nTITLE: Render Template View for Promotion - HTML\nDESCRIPTION: This HTML snippet shows an example of a rendering view for the `MyCompanyBuyQuantityGetItemDiscount` promotion. It uses EPiServer's HTML helpers to display the promotion's name, description, and the custom `OtherInfo` property. The model is set to the extended promotion class.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/new_promotions.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n@using EPiServer.Core\n@using EPiServer.Web.Mvc.Html\n\n@model EPiServer.Commerce.Sample.Models.Discounts.MyCompanyBuyQuantityGetItemDiscount \n\n<h1>\n    @Html.DisplayFor(m => m.Name)\n</h1>\n<h3>\n    @Html.PropertyFor(m => m.Description)\n</h3>\n<p>\n    @Html.PropertyFor(m => m.OtherInfo)\n</p>\n```\n\n----------------------------------------\n\nTITLE: Defining SeasonalCampaign Content Type in EPiServer\nDESCRIPTION: Defines a custom content type 'SeasonalCampaign' that inherits from 'SalesCampaign' and implements 'IRoutable'. It includes properties for HeroImage, BannerImage (both ContentReference), and RouteSegment. The ContentType attribute specifies the GUID, and AvailableContentTypes allows including PromotionData.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/marketing.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Commerce.Marketing;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing EPiServer.Web.Routing;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace EPiServer.Commerce.Sample.Models.Campaigns\n{\n  [ContentType(GUID = \"530a7f07-8d12-4625-bda3-8e135a10b74d\")]\n  [AvailableContentTypes(Include = new[] { typeof (PromotionData) })] \n  public class SeasonalCampaign : SalesCampaign, IRoutable\n  {\n    [Display(Order = 12, GroupName = SystemTabNames.PageHeader, Prompt = \"Hero Image\")]\n    public virtual ContentReference HeroImage { get; set; }\n\n    [Display(Order = 13, GroupName = SystemTabNames.PageHeader, Prompt = \"Banner Image\")]\n    public virtual ContentReference BannerImage { get; set; }\n\n    public virtual string RouteSegment { get; set; }    \n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Alternative and Cross-Sell Products (Razor)\nDESCRIPTION: This snippet shows how to render alternative and cross-sell product recommendations in the Views/Package/Index.cshtml view.  It renders the AlternativeProducts in the RightMarginRecommendations section and CrossSellProducts in the BottomRecommendations section, using the Recommendations controller.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_8\n\nLANGUAGE: cshtml\nCODE:\n```\n@section RightMarginRecommendations \n      {\n        @{\n           Html.RenderAction(\"Index\", \"Recommendations\", new\n             {\n               recommendations = Model.AlternativeProducts});\n             }\n         }\n    @section BottomRecommendations \n      {\n        @{\n           Html.RenderAction(\"Index\", \"Recommendations\", new \n             {\n               recommendations = Model.CrossSellProducts\n             });\n         }\n      }\n```\n\n----------------------------------------\n\nTITLE: Define CustomerContact Model\nDESCRIPTION: This C# code defines a CustomerContact class with properties for Name, Email, Age, and PhoneNumber. These properties represent contact information for a customer.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/properties.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomerContact\n      {\n        public string Name { get; set; }\n        public string Email {get; set; }\n        public int Age { get; set; }\n        public int PhoneNumber { get; set; }\n      }\n```\n\n----------------------------------------\n\nTITLE: Getting Warehouse by ID in C#\nDESCRIPTION: Retrieves a specific warehouse by its ID using the IWarehouseRepository. The method fetches an instance of IWarehouseRepository from the ServiceLocator and then calls the Get method, passing in the warehouse ID.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_20\n\nLANGUAGE: csharp\nCODE:\n```\n// Get a specific Warehouse by ID\n    public IWarehouse GetWarehouse(int warehouseId)\n      {\n        var warehouseRepository = ServiceLocator.Current.GetInstance<IWarehouseRepository>();\n        return warehouseRepository.Get(warehouseId);\n      }\n```\n\n----------------------------------------\n\nTITLE: Registering ICurrentMarket in Commerce 10-13 in C#\nDESCRIPTION: This snippet illustrates how to register a custom ICurrentMarket implementation using IConfigurableModule in Commerce versions 10-13. The MyCurrentMarketModule class implements the IConfigurableModule interface and registers MyCurrentMarketImplementation as a singleton for ICurrentMarket within the ConfigureContainer method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/markets.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\n[ModuleDependency(typeof(Mediachase.Commerce.Initialization.CommerceInitialization))]\n    [InitializableModule]\n    public class MyCurrentMarketModule : IConfigurableModule\n      {\n        public void ConfigureContainer(ServiceConfigurationContext context)\n          {\n            context.Container.Configure(ce =>\n              {\n                ce.For<ICurrentMarket>().Singleton().Use<MyCurrentMarketImplementation>();                \n              });\n          }\n    \n        public void Initialize(InitializationEngine context) { }\n        public void Preload(string[] parameters) { }\n        public void Uninitialize(InitializationEngine context) { }\n      }\n```\n\n----------------------------------------\n\nTITLE: Filtering Package Entries in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to retrieve package entries based on a content reference ID. It uses the `Filter` method along with `PackageEntries().MatchContained(c => c.ID, contentReference.ID)` to filter the content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<PackageContent>()\n        .Filter(x => x.PackageEntries().MatchContained(c => c.ID, contentReference.ID));\n```\n\n----------------------------------------\n\nTITLE: Excluding Prices from Indexing in C#\nDESCRIPTION: This code snippet demonstrates how to exclude price data from being indexed for variants. By excluding the `DefaultPrice()` and `Prices()` fields, price updates will not trigger re-indexing of the variant content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/overriding-default-conventions.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ApplyPricingConventions(TypeConventionBuilder<IPricing> conventionBuilder)\n      {\n        base.ApplyPricingConventions(conventionBuilder);\n        conventionBuilder\n            .ExcludeField(x => x.DefaultPrice())\n            .ExcludeField(x => x.Prices());\n      }\n```\n\n----------------------------------------\n\nTITLE: Add CustomerContactList to NodeContent\nDESCRIPTION: This C# code adds a CustomerContactList property to a NodeContent class. The BackingType attribute specifies that a PropertyCustomerContactList should be used to store the list.  This provides a list of customer contacts to a node.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/properties.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[CatalogContentType(MetaClassName = \"NodeContentWithPropertyList\")]\n    public class NodeContentWithPropertyList : NodeContent\n      {\n       [BackingType(typeof(PropertyCustomerContactList))]\n        public virtual IList<CustomerContact> CustomerContactList { get; set; }\n      }\n```\n\n----------------------------------------\n\nTITLE: Extending BuyQuantityGetItemDiscount Promotion - C#\nDESCRIPTION: This code extends the `BuyQuantityGetItemDiscount` promotion in Optimizely Commerce Connect. It adds a custom property `OtherInfo` to the promotion, allowing marketers to include additional information. The `ContentType` attribute defines the GUID and available content types for the new promotion.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/new_promotions.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Commerce.Marketing;\nusing EPiServer.Commerce.Marketing.Promotions;\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.DataAnnotations;\nusing System.ComponentModel.DataAnnotations;\n\nnamespace EPiServer.Commerce.Sample.Models.Discounts\n  {\n    [ContentType(GUID = \"530a7f07-8d12-4625-bda3-8e135a10b74d\")]\n    [AvailableContentTypes(Include = new[] { typeof (PromotionData) })] \n    public class MyCompanyBuyQuantityGetItemDiscount: BuyQuantityGetItemDiscount\n      {\n        [Display(Order = 13, GroupName = SystemTabNames.PageHeader, Prompt = \"Other Info\")]\n        public virtual string OtherInfo { get; set; }\n      }\n  }\n```\n\n----------------------------------------\n\nTITLE: Acknowledging Receipt Items in C#\nDESCRIPTION: This snippet demonstrates how to acknowledge the receipt of items on a return form using the `IReturnOrderService` interface in Optimizely Commerce. It retrieves instances of `IReturnOrderService` and `IOrderRepository` from the service locator, loads a purchase order, retrieves the first return form associated with the purchase order and acknowledges the receipt items.  The order group ID is hardcoded as '1'.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar returnOrderService = ServiceLocator.Current.GetInstance<IReturnOrderService>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n            var returnOrderForm = purchaseOrder.ReturnForms.First();\n            returnOrderService.AcknowledgeReceiptItems(returnOrderForm);\n```\n\n----------------------------------------\n\nTITLE: Modifying Application Features via appsettings.json (Duplicate)\nDESCRIPTION: This snippet shows how to modify or add new features for the application using the appsettings.json file. The `Features` section under `ApplicationOptions` allows defining or overriding features by specifying the feature name, state (enabled/disabled), and the fully qualified type name of the feature.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/feature-specific-commerce-configurations.md#_snippet_6\n\nLANGUAGE: JSON\nCODE:\n```\n{\n       \"ApplicationOptions\":{\n          \"Features\":{\n             \"SerializedCarts\":{\n                \"Feature\":\"SerializedCarts\",\n                \"State\":1, // 0 is enabled, 1 for disabled\n                \"Type\":\"Mediachase.Commerce.Core.Features.SerializedCarts, Mediachase.Commerce\"\n             },\n             \"MyownFeature\":{\n                \"Feature\":\"CustomFeatureName\",\n                \"State\":1,\n                \"Type\":\"<CustomFeatureTypeName>, Mediachase.Commerce\"\n             }\n          }\n       }\n    }\n```\n\n----------------------------------------\n\nTITLE: Canceling Payment Plan using IPaymentPlanProcessor in C#\nDESCRIPTION: This snippet demonstrates how to cancel a payment plan using the CancelPaymentPlan method of the IPaymentPlanProcessor interface. It requires an IOrderRepository and IPaymentPlanProcessor instance. The orderGroupId is used to load the PaymentPlan, which is then passed to the CancelPaymentPlan method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_29\n\nLANGUAGE: C#\nCODE:\n```\nIOrderRepository orderRepository;\n    IPaymentPlanProcessor paymentPlanProcessor;\n    (…)\n    var orderGroupId = 123;\n    var paymentPlan = orderRepository.Load<PaymentPlan>(orderGroupId);\n    paymentPlanProcessor.CancelPaymentPlan(paymentPlan);\n```\n\n----------------------------------------\n\nTITLE: Customizing Shipping Calculator Validation in C#\nDESCRIPTION: This snippet shows how to override the validation methods within the DefaultShippingCalculator to customize validation behavior.  It overrides ValidateShippingCostForShipment, ValidateShippingItemTotal, ValidateShippingTax, and ValidateSalesTax. Each overridden method now throws a ValidationException if the money amount is less than or equal to 0, enforcing a minimum value.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic class ShippingCalculatorOverridingDefault : DefaultShippingCalculator\n    {\n        public ShippingCalculatorOverridingDefault(\n            ILineItemCalculator lineItemCalculator,\n            IReturnLineItemCalculator returnLineItemCalculator,\n            ITaxCalculator taxCalculator)\n            : base(lineItemCalculator, returnLineItemCalculator, taxCalculator)\n        { }\n    \n        protected override void ValidateShippingCostForShipment(Money money)\n        {\n            if (money.Amount <= 0)\n            {\n                throw new ValidationException(\"Shipping cost must be greater than 0\");\n            }\n        }\n    \n        protected override void ValidateShippingItemTotal(Money money)\n        {\n            if (money.Amount <= 0)\n            {\n                throw new ValidationException(\"Shipping item total must be greater than 0\");\n            }\n        }\n    \n        protected override void ValidateShippingTax(Money money)\n        {\n            if (money.Amount <= 0)\n            {\n                throw new ValidationException(\"Shipping tax must be greater than 0\");\n            }\n        }\n    \n        protected override void ValidateSalesTax(Money money)\n        {\n            if (money.Amount <= 0)\n            {\n                throw new ValidationException(\"Sales tax must be greater than 0\");\n            }\n        }\n    }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic class ShippingCalculatorOverridingDefault : DefaultShippingCalculator\n    {\n        public ShippingCalculatorOverridingDefault(\n            ILineItemCalculator lineItemCalculator,\n            IReturnLineItemCalculator returnLineItemCalculator,\n            ITaxCalculator taxCalculator)\n            : base(lineItemItemCalculator, returnLineItemCalculator, taxCalculator)\n        { }\n    \n        protected override void ValidateShippingCostForShipment(Money money)\n        {\n            if (money.Amount <= 0)\n            {\n                throw new ValidationException(\"Shipping cost must be greater than 0\");\n            }\n        }\n    \n        protected override void ValidateShippingItemTotal(Money money)\n        {\n            if (money.Amount <= 0)\n            {\n                throw new ValidationException(\"Shipping item total must be greater than 0\");\n            }\n        }\n    \n        protected override void ValidateShippingTax(Money money)\n        {\n            if (money.Amount <= 0)\n            {\n                throw new ValidationException(\"Shipping tax must be greater than 0\");\n            }\n        }\n    \n        protected override void ValidateSalesTax(Money money)\n        {\n            if (money.Amount <= 0)\n            {\n                throw new ValidationException(\"Sales tax must be greater than 0\");\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Define SeasonalCampaign Content Type C#\nDESCRIPTION: This code snippet defines a `SeasonalCampaign` content type that inherits from `SalesCampaign` and adds properties for hero and banner images. It also defines the GUID and available content types for the `SeasonalCampaign`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/marketing.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing EPiServer.Commerce.Catalog.ContentTypes;\n    using EPiServer.Commerce.Marketing;\n    using EPiServer.Commerce.Marketing.DataAnnotations;\n    using EPiServer.Core;\n    using EPiServer.DataAbstraction;\n    using EPiServer.DataAnnotations;\n    using System.Collections.Generic;\n    using System.ComponentModel.DataAnnotations;\n    \n    namespace EPiServer.Commerce.Sample.Models.Campaigns\n      {\n        [ContentType(GUID = \"530a7f07-8d12-4625-bda3-8e135a10b74d\")]\n        [AvailableContentTypes(Include = new[] { typeof (PromotionData) })] \n        public class SeasonalCampaign : SalesCampaign\n        {\n          [Display(Order = 12, GroupName = SystemTabNames.PageHeader, Prompt = \"Hero Image\")]\n          public virtual ContentReference HeroImage { get; set; }\n    \n          [Display(Order = 13, GroupName = SystemTabNames.PageHeader, Prompt = \"Banner Image\")]\n          public virtual ContentReference BannerImage { get; set; }\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Render Recommendations Section - HTML/JavaScript\nDESCRIPTION: This snippet demonstrates how to render Optimizely Recommendations within a view using a `@section` in a Razor view (`Views/Packages/Index.cshtml`). It includes JavaScript code wrapped in a `<script>` tag within the `Tracking` section. The script initializes product tracking data, adds a custom attribute for the market ID, and sends a tracking request to Optimizely Recommendations with specific section mappings to control how recommendations are rendered in different areas of the page.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_8\n\nLANGUAGE: HTML\nCODE:\n```\n@section Tracking\n      {\n        <script>\n          $(document).ready(function () {\n            var refCode = '@Model.Package.Code';\n            var packageTrackingData = TrackingDataFactory.createProductTrackingData(refCode);\n            packageTrackingData[\"customAttributes\"] = { 'marketId': Market.getSelectedMarketId() };\n            epiRecommendations.track(\n              packageTrackingData, \n              null, \n              Recommendations.render, \n              { sectionMappings: [\n                { area: \"productAlternativesWidget\", selector: \".recommendations-right\", numberOfItemsToRender: 2 }, \n                { area: \"productCrossSellsWidget\", selector: \".recommendations-bottom\" }\n              ]});\n          });\n        </script>\n      }\n```\n\n----------------------------------------\n\nTITLE: Excluding Variant Reference Indexing for Product Content\nDESCRIPTION: Overrides the `ApplyProductContentConventions` method to exclude variant references from being indexed for `ProductContent`. It uses `conventionBuilder.ExcludeField` to prevent the `Variations()` property from being included in the index, improving search performance and relevance when variant references are not needed.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n        protected override void ApplyProductContentConventions(TypeConventionBuilder<ProductContent> conventionBuilder)\n          {\n            base.ApplyProductContentConventions(conventionBuilder);\n            conventionBuilder\n              .ExcludeField(x => x.Variations());\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Filtering Parent Packages in Optimizely\nDESCRIPTION: This code snippet demonstrates how to filter catalog content to retrieve parent packages based on a content reference ID. It uses the `Filter` method along with `ParentPackages().MatchContained(c => c.ID, contentReference.ID)` to filter the content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/filtering-catalog-content.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\nvar result = SearchClient.Instance.Search<EntryContentBase>()\n        .Filter(x => x.ParentPackages().MatchContained(c => c.ID, contentReference.ID));\n```\n\n----------------------------------------\n\nTITLE: Adding a Category to an Entry/Category in C#\nDESCRIPTION: This code snippet shows how to add a new category to an existing entry or category using the IRelationRepository.UpdateRelation method. It creates a new NodeRelation object, sets its SortOrder, Child (referencing the entry/category), and Parent (referencing the category) properties, and then calls UpdateRelation to persist the new categorization. The method takes ContentReferences to both the entry/category and the category to be added as input.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/categorizations.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddCategory(ContentReference referenceToEntryOrCategory, ContentReference referenceToCategory)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var newCategory = new NodeRelation\n          {\n            SortOrder = 100,\n            Child = referenceToEntryOrCategory,\n            Parent = referenceToCategory\n          };\n        relationRepository.UpdateRelation(newCategory);\n      }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic void AddCategory(ContentReference referenceToEntryOrCategory, ContentReference referenceToCategory)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        var newCategory = new NodeRelation\n          {\n            SortOrder = 100,\n            Child = referenceToEntryOrCategory,\n            Parent = referenceToCategory\n          };\n        relationRepository.UpdateRelation(newCategory);\n      }\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Meta Object Types in JSON (Commerce 14+)\nDESCRIPTION: This JSON configuration snippet shows how to register custom meta-object types, including specifying the Installer and Binder classes, within the appsettings.json file for Commerce 14 and later versions.  The Installer handles the creation of SQL columns and the Binder handles the conversion of SQL values to Meta-field values. This section is within the Commerce section.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metatype-class.md#_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"Commerce\":{      \n    \"MetaObjectTypeOptions\": {\n            \"Types\": [\n              {\n                \"Name\": \"CustomType\",\n                \"Installer\": \"\",\n                \"Binder\": \"\"\n              }\n            ]\n          }\n    }\n```\n\n----------------------------------------\n\nTITLE: Creating Meta-fields in Optimizely Commerce Connect\nDESCRIPTION: This code snippet demonstrates how to create a meta-field using the Mediachase.MetaDataPlus.Configurator.MetaField.Create method. It requires an OrderContext, metaNamespace, name, friendlyName, description, dataType, length, and other boolean properties to define the meta-field.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metadata-plus.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nMediachase.MetaDataPlus.Configurator.MetaField.Create(context: OrderContext.MetaDataContext,\n        metaNamespace: \"Mediachase.Commerce.Orders.User\",\n        name: \"BidPrice\",\n        friendlyName: \"Bid price\",\n        description: \"Bid Price\",\n        dataType: MetaDataType.Decimal,\n        length: 17,\n        allowNulls: true,\n        multiLanguageValue: false,\n        allowSearch: false,\n        isEncrypted: false)\n```\n\nLANGUAGE: C#\nCODE:\n```\nMediachase.MetaDataPlus.Configurator.MetaField.Create(context: OrderContext.MetaDataContext,\n        metaNamespace: \"Mediachase.Commerce.Orders.User\",\n        name: \"BidPrice\",\n        friendlyName: \"Bid price\",\n        description: \"Bid Price\",\n        dataType: MetaDataType.Decimal,\n        length: 17,\n        allowNulls: true,\n        multiLanguageValue: false,\n        allowSearch: false,\n        isEncrypted: false)\n```\n\n----------------------------------------\n\nTITLE: Applying Default Conventions in C#\nDESCRIPTION: This code snippet shows the `ApplyConventions` method, which applies the default conventions for various content types like Price, IPricing, IStockPlacement, ProductContent, etc. Override this method to add, remove, or modify default conventions.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/overriding-default-conventions.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic override void ApplyConventions(IClientConventions clientConventions)\n      {\n        ApplyPriceConventions(clientConventions.ForInstancesOf<Price>());\n        ApplyPricingConventions(clientConventions.ForInstancesOf<IPricing>());\n        ApplyIStockPlacementConventions(clientConventions.ForInstancesOf<IStockPlacement>());\n        ApplyProductContentConventions(clientConventions.ForInstancesOf<ProductContent>());\n        ApplyAssociationConventions(clientConventions.ForInstancesOf<IAssociating>());\n        ApplyCustomerPricingConventions(clientConventions.ForInstancesOf<CustomerPricing>());\n        ApplyNodeRelationsConventions(clientConventions.ForInstancesOf<CatalogContentBase>());\n        ApplyEntryContentConventions(clientConventions.ForInstancesOf<EntryContentBase>());\n        ApplyBundleContentConventions(clientConventions.ForInstancesOf<BundleContent>());\n        ApplyPackageContentConventions(clientConventions.ForInstancesOf<PackageContent>());\n    \n        ChangeConverterForInstancesOf<Money>(clientConventions, new Json.MoneyConverter());\n        ChangeConverterForInstancesOf<MarketId>(clientConventions, new Json.MarketIdConverter());\n      }\n```\n\n----------------------------------------\n\nTITLE: Removing Bundle Entry in C#\nDESCRIPTION: This code snippet removes a BundleEntry using provided ContentReferences. It creates a BundleEntry object with the specified Parent and Child ContentReferences, then uses the IRelationRepository to remove the matching relation. No action is taken if no match is found.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic void RemoveBundleEntry(ContentReference referenceToBundle, ContentReference referenceToProductOrVariation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Define a relation matching the one to remove, or use\n        // GetRelations to find the one you want to remove and pass that to\n        // RemoveRelation\n        var relationToRemove = new BundleEntry\n          {\n            Parent = referenceToBundle,\n            Child = referenceToProductOrVariation\n          };\n    \n        // Removes matching BundleEntry, or no action if no match exists\n        relationRepository.RemoveRelation(relationToRemove);\n      }\n```\n\n----------------------------------------\n\nTITLE: Configure ExtendedComponentOptions in InitializableModule - C#\nDESCRIPTION: This C# code snippet demonstrates how to configure extended components using the `ExtendedComponentOptions` class within an `InitializableModule`. It adds an extended component named `CartOrderSubscriptionTab3` with a specified script URL, order, component location (Tab), and order types (Cart, PurchaseOrder, Subscription). This configuration informs the CSR UI about the existence and properties of the extended component.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extend-components.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\ncontext.Services.Configure<ExtendedComponentOptions>(x =>\n    {\n        x.ExtendedComponents.AddRange(new[]\n        {\n            Name = \"CartOrderSubscriptionTab3\",\n            ScriptUrl = Paths.ToClientResource(GetType().Assembly, \"clientResources/dist/CartOrderSubscriptionTab3/CartOrderSubscriptionTab3.js\"),\n            Order = 3,\n            ComponentLocation = ComponentLocation.Tab,\n            OrderTypes = OrderTypes.Cart | OrderTypes.PurchaseOrder | OrderTypes.Subscription\n        });\n    });\n```\n\n----------------------------------------\n\nTITLE: Custom Customer Fields Implementation (C#)\nDESCRIPTION: This C# code snippet demonstrates how to create custom fields for customers in the ODP integration by implementing the `ICustomerCustomFieldsHandler` interface.  It defines the fields to be created and retrieves their values from the `ContactEntity`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-14.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\n[ServiceConfiguration(ServiceType = typeof (ICustomerCustomFieldsHandler))]\npublic class CustomCustomers: ICustomerCustomFieldsHandler {\n  public IEnumerable < SchemaObjectCreateField > CreateFields() {\n    return new [] {\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_teststring\",\n          DisplayName = \"Mark ODP Connector string\",\n          PublicRead = true,\n          Type = \"string\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_testtimestamp\",\n          DisplayName = \"Mark ODP Connector timestamp\",\n          PublicRead = true,\n          Type = \"timestamp\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_testinteger\",\n          DisplayName = \"Mark ODP Connector integer\",\n          PublicRead = true,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_testdecimal\",\n          DisplayName = \"Mark ODP Connector decimal\",\n          PublicRead = false,\n          Type = \"number\"\n      },\n      new SchemaObjectCreateField {\n        Name = \"mark_customers_testboolean\",\n          DisplayName = \"Mark ODP Connector boolean\",\n          PublicRead = false,\n          Type = \"boolean\"\n      }\n    };\n  }\n\n  public Dictionary < string, object > GetFieldValues(ContactEntity contact) {\n    var values = new Dictionary < string,\n      object > ();\n    var testString = contact.Properties.GetValue < string > (\"mark_customers_teststring\", null);\n    if (!string.IsNullOrEmpty(testString)) {\n      values.Add(\"mark_customers_teststring\", testString);\n    }\n\n    var testTimestamp = contact.Properties.GetValue < DateTime ? > (\"mark_customers_testtimestamp\", null);\n    if (testTimestamp != null) {\n      values.Add(\"mark_customers_testtimestamp\", testTimestamp.Value.ToString(\"s\"));\n    }\n\n    var testInteger = contact.Properties.GetValue < int ? > (\"mark_customers_testinteger\", null);\n    if (testInteger != null) {\n      values.Add(\"mark_customers_testinteger\", testInteger.Value);\n    }\n\n    var testDecimal = contact.Properties.GetValue < decimal ? > (\"mark_customers_testdecimal\", null);\n    if (testDecimal != null) {\n      values.Add(\"mark_customers_testdecimal\", testDecimal.Value);\n    }\n\n    var testBoolean = contact.Properties.GetValue(\"mark_customers_testboolean\", false);\n    values.Add(\"mark_customers_testboolean\", testBoolean);\n\n    return values;\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Define FabricProduct with FabricBlock property\nDESCRIPTION: This C# code defines a FabricProduct class inheriting from ProductContent. It includes a property FabricProductBlock of type FabricBlock. The CatalogContentType attribute specifies the MetaClassName, DisplayName, and GUID for the product content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/properties.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nCatalogContentType( GUID = \"485DFA88-E6D3-4CEF-9257-4A6346C1EE29\",\n                        MetaClassName = \"FabricProduct\",\n                        DisplayName = \"Fabric product\")]\n    public class FabricProduct : ProductContent\n      {\n        public virtual FabricBlock FabricProductBlock { get; set; }\n      }\n```\n\n----------------------------------------\n\nTITLE: Delete a CustomTableRow Record (Static Method) in C#\nDESCRIPTION: This code snippet shows an alternative way to delete a record from a SQL table, without loading the record first, using the static Delete method of the CustomTableRow class. Requires Mediachase.BusinessFoundation.Data.Sql namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-sql-records.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nCustomTableRow.Delete(new TableConfig(bookTable), bookPk);\n\n```\n\n----------------------------------------\n\nTITLE: Using UIRoleProvider for Role Management in C#\nDESCRIPTION: This C# snippet showcases how to use the UIRoleProvider to manage roles, including creating new roles, adding users to roles, and retrieving a user's roles.  The UIRoleProvider is part of the EPiServer.CMS.UI.AspNetIdentity and is used for managing users and roles within the Optimizely CMS and Commerce Connect environment. Requires access to an instance of `_roleProvider`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/authorization-and-authentication.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n_roleProvider.CreateRoleAsync(roleName);\n    _roleProvider.AddUserToRoleAsync(username, roleName);\n    var userRoles = _roleProvider.GetRolesForUserAsync(userName);\n```\n\n----------------------------------------\n\nTITLE: Removing Meta-fields from Meta-classes in Optimizely Commerce Connect\nDESCRIPTION: This code snippet demonstrates how to remove a meta-field from a meta-class using the MetaClass.DeleteField method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metadata-plus.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nvar metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"WorkOrder\");\n    metaClass.DeleteField(\"BidPrice\");\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"WorkOrder\");\n    metaClass.DeleteField(\"BidPrice\");\n```\n\n----------------------------------------\n\nTITLE: Aggregate Color for Product Content in C#\nDESCRIPTION: This code snippet demonstrates how to aggregate the Color property from VariationContent to Colors for ProductContent using the ProductAggregationContentApiModelBase class. It defines a ColorContentApiModel class that inherits from ProductAggregationContentApiModelBase and overrides the Name and VariationProperty properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/optimizely-graph-for-commerce-connect.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n[ServiceConfiguration(typeof(IContentApiModelProperty), Lifecycle = ServiceInstanceScope.Singleton)]\npublic class ColorContentApiModel : ProductAggregationContentApiModelBase<string, GenericProduct, GenericVariant>\n{\n    public ColorContentApiModel(ContentTypeModelRepository contentTypeModelRepository, IContentLoader contentLoader)\n        : base(contentTypeModelRepository, contentLoader)\n    {\n    }\n\n    public override string Name => \"Colors\";\n\n    protected override Expression<Func<GenericVariant, string>> VariationProperty => (x) => x.Color;\n}\n```\n\n----------------------------------------\n\nTITLE: Rendering Recommendations in the View (Razor)\nDESCRIPTION: This snippet demonstrates how to render recommendations within the RightMarginRecommendations section of the Views/Start/Index.cshtml view using Html.RenderAction. It calls the Index action of the Recommendations controller, passing the recommendations from the model.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_4\n\nLANGUAGE: cshtml\nCODE:\n```\n@section RightMarginRecommendations\n      {\n        @{\n            Html.RenderAction(\"Index\", \"Recommendations\", new \n              {\n                recommendations = Model.Recommendations\n              });\n         }\n      }\n```\n\n----------------------------------------\n\nTITLE: Filter Campaigns By Last Modified - C#\nDESCRIPTION: This C# code snippet defines a class `GetCampaignsByLastModified` that filters campaigns based on the last modified date. It inherits from `GetContentsByFacet` and overrides the `GetItems` method to filter items based on the provided facets (day, week, month) and compare the campaign's Changed date to DateTime.UtcNow.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\npublic class GetCampaignsByLastModified : GetContentsByFacet\n          {\n            public override string Key { get { return \"lastmodified\"; } }\n            public override IEnumerable<IContent> GetItems(IEnumerable<IContent> items, IEnumerable<string> facets)\n              {\n                return items.Where(item => !(item is SalesCampaign) || AvailableFor((SalesCampaign)item, facets));\n              }\n            private bool AvailableFor(SalesCampaign item, IEnumerable<string> facets)\n              {\n                var changed = DateTime.UtcNow - item.Changed;\n                var filterString = facets.FirstOrDefault();\n                var isAvailable = false;\n                switch (filterString)\n                  {\n                    case \"day\":\n                      isAvailable = changed.Days < 1;\n                      break;\n                    case \"week\":\n                      isAvailable = changed.Days < 7;\n                      break;\n                    case \"month\":\n                      isAvailable = changed.Days < 30;\n                      break;\n                  }\n                return isAvailable;\n              }\n          }\n```\n\n----------------------------------------\n\nTITLE: Searching Catalog Entries with Preorder Support - C# (Duplicated)\nDESCRIPTION: This code snippet demonstrates how to search for catalog entries, including or excluding preorder entries, by setting the `IncludePreorderEntry` property of the `CatalogEntrySearchCriteria`. The `SearchManager` is used to execute the search. This is important when needing to filter out pre-order entries from normal search results. The `SearchFilterHelper` is used to assist in the generation of search criteria. This is a duplicate example of the first one.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/inventory-requests.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nSearchFilterHelper helper = SearchFilterHelper.Current;\n    CatalogEntrySearchCriteria criteria = helper.CreateSearchCriteria(\"\", sortObject);\n    criteria.RecordsToRetrieve = 25;\n    criteria.StartingRecord = _startRowIndex;\n    criteria.IncludePreorderEntry = false;\n    \n    var searchManager = new SearchManager(AppContext.Current.ApplicationName);\n    var results = searchManager.Search(criteria);\n```\n\n----------------------------------------\n\nTITLE: Initializing Campaign Routes in EPiServer Commerce\nDESCRIPTION: The 'CampaignInitalization' module registers custom routes for campaigns when the EPiServer application starts. It implements 'IConfigurableModule' and registers a handler for the 'Global.RoutesRegistered' event, which then calls 'RegisterRoutes' to map the campaign route. The route is defined with a specific URL structure ('Campaigns/{language}/{nodeedit}/{partial}/{action}') and default values.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/marketing.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Core;\nusing EPiServer.DataAbstraction;\nusing EPiServer.Framework;\nusing EPiServer.Framework.Initialization;\nusing EPiServer.ServiceLocation;\nusing EPiServer.Web.Routing;\nusing EPiServer.Web.Routing.Segments;\nusing System.Linq;\nusing System.Web.Routing;\n\nnamespace EPiServer.Commerce.Sample.Business.Initialization\n{\n  /// <summary>\n  /// Initialization module to handle the initialization of Commerce.\n  /// </summary>\n  [ModuleDependency(typeof(EPiServer.Commerce.Initialization.InitializationModule))]\n  [InitializableModule]\n  public class CampaignInitalization : IConfigurableModule\n  {\n    /// <summary>\n    /// Initializes Commerce using the specified context.\n    /// </summary>\n    /// <param name=\"context\">The context.</param>\n    public void Initialize(InitializationEngine context)\n    {\n      EPiServer.Global.RoutesRegistered += Global_RoutesRegistered;\n    }\n\n    private void Global_RoutesRegistered(object sender, RouteRegistrationEventArgs e)\n    {\n      RegisterRoutes(RouteTable.Routes);\n    }\n\n    private static void RegisterRoutes(RouteCollection routes)\n    {\n      // Route for editing commerce content (which has a root not connected to the global root)\n      MapCampaignRoute(routes,\n          name: \"campaignroot\",\n          url: \"Campaigns/{language}/{nodeedit}/{partial}/{action}\",\n          defaults: new { action = \"index\" });\n    }\n\n    private static void MapCampaignRoute(RouteCollection routes, string name, string url, object defaults, object constraints = null)\n    {\n      var contentRootService = ServiceLocator.Current.GetInstance<ContentRootService>();\n      var root = ServiceLocator.Current.GetInstance<IContentLoader>()\n          .GetItems(contentRootService.List(), new LoaderOptions())\n          .SingleOrDefault(x => x.Name.Equals(\"SysCampaignRoot\"));\n      var segmentRouter = ServiceLocator.Current.GetInstance<IUrlSegmentRouter>();\n      segmentRouter.RootResolver = (sd) => root.ContentLink;\n\n      var parameters =\n          new MapContentRouteParameters\n            {\n              UrlSegmentRouter = segmentRouter,\n              BasePathResolver = null,//Use Cms default\n              Direction = SupportedDirection.Both,\n              Constraints = constraints\n            };\n\n      routes.MapContentRoute(\n          name,\n          url,\n          defaults,\n          parameters);\n    }\n\n    public void Uninitialize(InitializationEngine context)\n    {\n      // Uninitialize catalog content version\n   }\n\n    public void ConfigureContainer(ServiceConfigurationContext context)\n    {\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Sales Tax for Return Line Item in C#\nDESCRIPTION: This snippet shows how to calculate sales tax for a return line item. It uses the IReturnLineItemCalculator to get the sales tax. The method requires the IReturnLineItem, IMarket, Currency, IOrderAddress (shipping address), and IReturnLineItemCalculator. The calculated sales tax is then written to the debug console.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-line-item-calculator.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetSalesTax(IReturnLineItem returnLineItem, IMarket market, Currency currency, IOrderAddress shippingAddress, IReturnLineItemCalculator returnLineItemCalculator)\n          {\n            var salesTax = returnLineItemCalculator.GetSalesTax(returnLineItem, market, currency, shippingAddress);\n            Debug.WriteLine(\"Sales tax for '{0}': {1}\", returnLineItem.Code, salesTax);\n          }\n```\n\n----------------------------------------\n\nTITLE: Add Display attribute to a property C#\nDESCRIPTION: This code snippet demonstrates how to add the Display attribute with the GroupName property to a custom group on a campaign or promotion form. The GroupName is set to the name of a specific node within the <groups> section in the resource files.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-promotions.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n[Display(GroupName = \"MyNewGroup\")]\n    public virtual decimal Money { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Getting Bundle/Package by Entry with IRelationRepository (C#)\nDESCRIPTION: Retrieves the bundles or packages that contain a specific entry using the IRelationRepository.GetParents method. This returns an IEnumerable of BundleEntry or PackageEntry objects. The ContentReference of the entry is required as input. The ServiceLocator is used to resolve the IRelationRepository instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<BundleEntry> GetBundleByEntry(ContentReference entry)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Relations between bundle and bundle entry is BundleEntry\n        var bundleRelations = relationRepository.GetParents<BundleEntry>(entry);\n    \n        return bundleRelations;\n      }\n    \n    public IEnumerable<PackageEntry> GetPackageByEntry(ContentReference entry)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Relations between package and package entry is PackageEntry\n        var packageRelations = relationRepository.GetParents<PackageEntry>(entry);\n    \n        return packageRelations;\n      }\n```\n\n----------------------------------------\n\nTITLE: CatalogNode Constructor with CatalogNodeRow (C#)\nDESCRIPTION: This code snippet showcases the constructor for the CatalogNode class that accepts a CatalogNodeRow as input.  This allows for creating a CatalogNode object directly from a DTO row. It is useful when working with data retrieved using DTOs and needing to convert it into a CatalogNode object.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/low-level-apis.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic CatalogNode(CatalogNodeDto.CatalogNodeRow input)\n```\n\n----------------------------------------\n\nTITLE: Creating Multiple Shipments for Cart in C# (Duplicate)\nDESCRIPTION: This code snippet demonstrates how to create multiple shipments for a cart in Optimizely Commerce Connect, where each shipment corresponds to a line item in the cart. It retrieves the cart, clears existing shipments and line items within shipments, and then creates a new shipment for each line item in the cart, associating the appropriate quantity and item details.  The code relies on Optimizely's IOrderRepository, ICurrentMarket, and OrderGroupFactory, which must be available in the service locator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-shipment-examples.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n    var currentMarket = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n    var cart = orderRepository.LoadCart(CustomerContext.Current.CurrentContactId, DefaultCartName, currentMarket);\n    var form = cart.GetFirstForm();\n    var cartLineItems = cart.GetAllLineItems().ToList();\n    \n    // Clean up line item in shipment\n    foreach (var shipment in form.Shipments)\n      {\n        shipment.LineItems.Clear();\n      }\n    // Clean up shipments\n    form.Shipments.Clear();\n    \n    // Adding shipment for each cart line item\n    foreach (var item in cartLineItems)\n      {\n        var shipment = cart.CreateShipment(_orderGroupFactory);\n        var lineItem = cart.CreateLineItem(item.Code, _orderGroupFactory);\n        lineItem.IsGift = item.IsGift;\n        lineItem.Quantity = item.Quantity;\n        shipment.LineItems.Add(lineItem);\n        form.Shipments.Add(shipment);\n      }\n    \n    orderRepository.Save(cart);\n```\n\n----------------------------------------\n\nTITLE: Deleting a MetaField C#\nDESCRIPTION: This code snippet deletes a MetaField from a MetaClass. It retrieves the MetaField by name from the MetaClass's Fields collection and then calls the DeleteMetaField method of the MetaClass to remove it.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metafield-class.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Delete field\n    mc. DeleteMetaField(mc.Fields[\"Book Title\"]);\n```\n\n----------------------------------------\n\nTITLE: Rendering Dynamic Package Items in CSHTML\nDESCRIPTION: This snippet renders a product name label and a dropdown list for displaying product entries with options for dynamic package items. It iterates through the entries, creates SelectListItems with display name, size, color, and stock information, and renders a dropdown list using Html.DropDownList.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-xs-12\">\n    @Html.PropertyFor(x => x.Package.Name)\n    <p>\n        @{\n            var dic = Model.Package.GetEntries();\n        }\n        @foreach (var group in Model.Entries)\n        {\n            var quantity = dic.Keys.FirstOrDefault(k => k.Child == group.Key.ContentLink).Quantity;\n            @for (var i = 0; i < quantity; i++)\n            {\n                <label>@group.Key.DisplayName</label>\n                var items = new List<SelectListItem>();\n                @foreach (var entry in group.Value)\n                {\n                    var inStock = Model.EntriesAvailability[entry.Code];\n                    var item = new SelectListItem(\n                        $\"{entry.DisplayName} Size: {entry.Size} Color: {entry.Color} Stock: {inStock}\",\n                        entry.Code,\n                        false,\n                        inStock <= 0);\n                    items.Add(item);\n                }\n                <div>\n                    @Html.DropDownList(\"DynamicPackageListItems\", items, new {@class = \"form-control address-region-input\"})\n                </div>\n            }\n        }\n    </p>\n    <p>\n        <strong>SKU:</strong> @Html.PropertyFor(x => x.Package.Code)\n    </p>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Rendering Recommendation Templates - C#\nDESCRIPTION: This snippet renders the recommendation templates defined in the _RecommendationsTemplates.cshtml partial view. It uses the @Html.Partial helper method. This code should be placed within the <body> section of the Views/Shared/_Layout.cshtml file after the main content.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n<body>\n  ...\n  @Html.Partial(\"_RecommendationsTemplates\")\n  ...\n</body>\n```\n\n----------------------------------------\n\nTITLE: Tracking Product View Without CommerceTracking (C#)\nDESCRIPTION: This snippet shows how to track a product view using _recommendationService.TrackProduct within the Index action of the PackageController. It passes the HttpContext and product code to the TrackProduct method.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\n[HttpGet]\n    public async Task<ActionResult> Index(FashionPackage currentContent, bool useQuickview = false)\n      {\n        ...\n        await _recommendationService.TrackProduct(HttpContext, currentContent.Code, useQuickview);\n        ...\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding Asset to Product Variation in Optimizely Commerce Connect (C#)\nDESCRIPTION: This code snippet demonstrates how to add an asset to a product variation within Optimizely Commerce Connect. It retrieves a MediaData type, creates a new media item, and adds it to the CommerceMediaCollection of a VariationContent instance.  It requires references to EPiServer.Commerce.Catalog, EPiServer.Commerce.SpecializedProperties, EPiServer.Core, EPiServer.DataAbstraction, EPiServer.DataAccess, EPiServer.Security, EPiServer.Web, System.ComponentModel, and System.Globalization.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/assets-and-media.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing EPiServer.Commerce.Catalog.ContentTypes;\n    using EPiServer.Commerce.SpecializedProperties;\n    using EPiServer.Core;\n    using EPiServer.DataAbstraction;\n    using EPiServer.DataAccess;\n    using EPiServer.Security;\n    using EPiServer.Web;\n    using System.ComponentModel;\n    using System.Globalization;\n    \n    namespace EPiServer.Commerce.Catalog\n    {\n        public class AddAssetSample\n        {\n            private AssetUrlResolver assetUrlResolver;\n            private ReferenceConverter referenceConverter;\n            private IContentLoader contentLoader;\n            private AssetUrlConventions assetUrlConventions;\n            private IContentRepository contentRepository;\n            private ContentMediaResolver mediaDataResolver;\n            private ContentTypeRepository contentTypeRepository;\n    \n            public void AddAssetToVariation()\n            {\n                ContentReference rootCatalogLink;\n                //Get a suitable MediaData type from extension\n                  var mediaType = mediaDataResolver.GetFirstMatching(\"jpg\");\n                  var contentType = contentTypeRepository.Load(mediaType);\n                //Get a new empty file data\n                  var media = contentRepository.GetDefault<IContentMedia>(SiteDefinition.Current.GlobalAssetsRoot, contentType.ID);\n                  media.Name = \"MyImages\";\n                  var contentLink = contentRepository.Save(media, SaveAction.Publish, AccessLevel.NoAccess);\n                // Add  asset to variation\n                  var variation = contentRepository.GetDefault<VariationContent>(rootCatalogLink, CultureInfo.GetCultureInfo(\"en-US\"));\n                  variation.Name = \"Variation name\";\n                  contentRepository.Save(variation, SaveAction.Save, AccessLevel.NoAccess);\n                  var commerceMedia = new CommerceMedia() { AssetLink = contentLink };\n                  variation.CommerceMediaCollection.Add(commerceMedia);\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: Export Product File Name\nDESCRIPTION: This setting specifies the name of the CSV file that will be generated with the product data for export to Optimizely Campaign.  It should be added to the <appSettings> element in the Commerce web.config file. The example shows the file name 'OptimizelyFoundationDemoCatalog.csv'.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-campaign.md#_snippet_0\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"episerver:campaign.ExportProductFileName\" value=\"OptimizelyFoundationDemoCatalog.csv\" />\n```\n\n----------------------------------------\n\nTITLE: Calculate Sales Tax for Multiple Line Items C#\nDESCRIPTION: Calculates the sales tax for a collection of line items based on the provided market, shipping address, and currency. It uses the ITaxCalculator interface to retrieve the sales tax amount. Requires IEnumerable<ILineItem>, IMarket, IOrderAddress, Currency, and ITaxCalculator as input. Returns a Money object representing the calculated sales tax.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-tax-calculator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic Money CalculateSalesTax(IEnumerable<ILineItem> lineItems, \n                                       IMarket market, \n                                       IOrderAddress shippingAddress, \n                                       Currency currency, \n                                       ITaxCalculator taxCalculator)\n          {\n            return taxCalculator.GetSalesTax(lineItems, market, shippingAddress, currency);\n          }\n```\n\n----------------------------------------\n\nTITLE: Finding All Enumerators C#\nDESCRIPTION: This code snippet demonstrates how to iterate through the registered meta-types in the DataContext's MetaModel to identify and locate all enumerators. It checks if the McDataType property of each MetaFieldType is equal to McDataType.Enum, indicating that it is an enumerator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metaenum-class.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nforeach(MetaFieldType type in DataContext.Current.MetaModel.RegisteredTypes)\n      {\n        if (type.McDataType == McDataType.Enum)\n          {\n            // The enumerator is found\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding Excluded Items to a Promotion in C#\nDESCRIPTION: This code shows how to exclude other promotions from a given promotion by adding ContentReferences to the ExcludedItems property of the PromotionData object.  It adds a campaign link and another promotion link to the list of excluded items, preventing them from being combined with the current promotion.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotion-exclusions.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npromotionData.ExcludedItems.Add(campaignLink);\npromotionData.ExcludedItems.Add(anotherPromotionLink);\n```\n\n----------------------------------------\n\nTITLE: Creating a Cancel and Multiple Purchase Requests (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to split a purchase into multiple separate purchases by using a Cancel request combined with multiple Purchase requests.  This approach can be used to replace a single item with multiple items in the inventory system, offering more flexibility than the Split request type.  It requires an 'OperationKey' for cancel operation and includes catalog entry code and warehouse code.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/inventory-requests.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"ApplicationId\"  : \"...\",\n        \"RequestDateUtc\" : \"...\",\n        \"Items\" : [\n                    {\n                      \"ItemIndex\"        : 1,\n                      \"RequestType\"      : \"Cancel\",\n                      \"OperationKey\"     : \"...\"\n                    },\n                    {\n                      \"ItemIndex\"        : 2,\n                      \"RequestType\"      : \"Purchase\",\n                      \"CatlaogEntryCode\" : \"item\",\n                      \"WarehouseCode\"    : \"warehouse\",\n                      \"Quantity\"         : 1\n                    },\n                    {\n                      \"ItemIndex\"        : 3,\n                      \"RequestType\"      : \"Purchase\",\n                      \"CatalogEntryCode\" : \"item\",\n                      \"WarehouseCode\"    : \"warehouse\",\n                      \"Quantity\"         : 1\n                    },\n                    {\n                      \"ItemIndex\"        : 4,\n                      \"RequestType\"      : \"Purchase\",\n                      \"CatalogEntryCode\" : \"item\",\n                      \"WarehouseCode\"    : \"warehouse\",\n                      \"Quantity\"         : 1\n                    }\n                  ]\n      }\n```\n\n----------------------------------------\n\nTITLE: Configure Optimizely Find Search Filters\nDESCRIPTION: This XML snippet configures search filters for Optimizely Find. It defines filter fields (brand, color, size, top_category_name) with associated descriptions and values. Each value is provided with localized descriptions for English and Swedish.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/configuring-facets-and-filters.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<SearchConfig version=\"1.0\">\n      <SearchFilters>\n        <Filter field=\"brand\">\n          <Descriptions defaultLocale=\"en\">\n            <Description locale=\"en\">Brand</Description>\n            <Description locale=\"sv\">Märke</Description>\n          </Descriptions>\n          <Values>\n            <SimpleValue key=\"Brand 0\" value=\"Brand 0\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brand 0</Description>\n                <Description locale=\"sv\">Märke 0</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"Brand 1\" value=\"Brand 1\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brand 1</Description>\n                <Description locale=\"sv\">Märke 1</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"Brand 2\" value=\"Brand 2\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brand 2</Description>\n                <Description locale=\"sv\">Märke 2</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"Brand 3\" value=\"Brand 3\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brand 3</Description>\n                <Description locale=\"sv\">Märke 3</Description>\n              </Descriptions>\n            </SimpleValue>\n          </Values>\n        </Filter>\n        <Filter field=\"color\">\n          <Descriptions defaultLocale=\"en\">\n            <Description locale=\"en\">Color</Description>\n            <Description locale=\"sv\">Färg</Description>\n          </Descriptions>\n          <Values>\n            <SimpleValue key=\"black\" value=\"black\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Black</Description>\n                <Description locale=\"sv\">Svart</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"white\" value=\"white\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">White</Description>\n                <Description locale=\"sv\">Vit</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"red\" value=\"red\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Red</Description>\n                <Description locale=\"sv\">Röd</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"blue\" value=\"blue\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Blue</Description>\n                <Description locale=\"sv\">Blå</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"multi\" value=\"multi\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Multi</Description>\n                <Description locale=\"sv\">Multi</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"brown\" value=\"brown\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Brown</Description>\n                <Description locale=\"sv\">Brun</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"navy\" value=\"navy\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Navy</Description>\n                <Description locale=\"sv\">Marin</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"yellow\" value=\"yellow\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Yellow</Description>\n                <Description locale=\"sv\">Gul</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"green\" value=\"green\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Green</Description>\n                <Description locale=\"sv\">Grön</Description>\n              </Descriptions>\n            </SimpleValue>\n          </Values>\n        </Filter>\n        <Filter field=\"size\">\n          <Descriptions defaultLocale=\"en\">\n            <Description locale=\"en\">Size</Description>\n            <Description locale=\"sv\">Storlek</Description>\n          </Descriptions>\n          <Values>\n            <SimpleValue key=\"s\" value=\"s\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">S</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"m\" value=\"m\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">M</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"l\" value=\"l\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">L</Description>\n              </Descriptions>\n            </SimpleValue>\n          </Values>\n        </Filter>\n        <Filter field=\"top_category_name\">\n          <Descriptions defaultLocale=\"en\">\n            <Description locale=\"en\">Top category</Description>\n            <Description locale=\"sv\">Toppkategori</Description>\n          </Descriptions>\n          <Values>\n            <SimpleValue key=\"Mens\" value=\"Mens\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Mens</Description>\n                <Description locale=\"sv\">Män</Description>\n              </Descriptions>\n            </SimpleValue>\n            <SimpleValue key=\"Womens\" value=\"Womens\">\n              <Descriptions defaultLocale=\"en\">\n                <Description locale=\"en\">Womens</Description>\n                <Description locale=\"sv\">Kvinnor</Description>\n              </Descriptions>\n            </SimpleValue>\n          </Values>\n        </Filter>\n      </SearchFilters>\n    </SearchConfig>\n```\n\n----------------------------------------\n\nTITLE: Install EPiServer.Commerce.Core NuGet Package\nDESCRIPTION: This command installs the EPiServer.Commerce.Core NuGet package using the Package Manager Console. It's a required dependency for the AuthorizeTokenEx payment provider.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/authorizetokenex-installation-and-configuration.md#_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package EPiServer.Commerce.Core\n```\n\n----------------------------------------\n\nTITLE: Exporting Meta-Model to File in C#\nDESCRIPTION: This code snippet demonstrates how to export a meta-model to a file using the MetaModelGenerator class in C#. It initializes the MetaModelGenerator, loads a SchemaDocument, generates the XML output, and saves it to the specified file path. A connection string is required for accessing the DataContext, and the filepath parameter specifies the output file.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/exporting-and-importing-meta-models.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Create MetaModelGenerator\nMetaModelGenerator generator = new MetaModelGenerator();\n// Use generator.SelectedElements to export custom elements\ntry\n  {\n    // Open DataContext\n    DataContext.Current = new DataContext(connectionString);\n    // Load Save Commands\n    SchemaDocument schema = new SchemaDocument();\n    schema.LoadDefault();\n    generator.Schema = schema;\n    // Load Save Commands\n    XmlDocument xmlOutput = generator.Generate();\n    xmlOutput.Save(filePath);\n  }\ncatch (Exception ex)\n  {\n  }\n```\n\n----------------------------------------\n\nTITLE: Get Custom Facet Result - C#\nDESCRIPTION: This code snippet retrieves a custom facet result using the provided ID, facet string, and parent link. It instantiates a `CustomFacet` object and uses it to perform the facet retrieval using the `Rest` method. The dependencies needed include _facetFactory, _marketService, _localizationService.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_8\n\nLANGUAGE: csharp\nCODE:\n```\npublic RestResult Get(string id, string facetString, ContentReference parentLink)\n              {\n                return Rest(new CustomFacet(_facetFactory, _marketService, _localizationService));\n              }\n```\n\n----------------------------------------\n\nTITLE: Creating a Table within a SQL Transaction Scope in C#\nDESCRIPTION: This C# snippet demonstrates how to create a new table within a SQL transaction scope using SqlTransactionScope. It initializes the SqlContext, begins a transaction, gets the database, creates a table named 'Book', and commits the transaction. Requires a valid connection string.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\n// Step 1. Initiaze Sql Meta Model\n    using (SqlContext.Current = new SqlContext(connectionString))\n      {\n        using (SqlTransactionScope tran = SqlContext.Current.BeginTransaction())\n          {\n            // Step 2. Get Database\n            Database database = SqlContext.Current.Database;\n            // Step 3. Create a new table - Book\n            Table bookTable = database.CreateTable(\"Book\", Column.CreatePrimaryKey(\"Id\", System.Data.SqlDbType.Int, true));\n            // Step N. Call Commit to commit transaction\n            tran.Commit();\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Removing a Variant from a Product in C#\nDESCRIPTION: This code snippet removes a variant from a product using the IRelationRepository.  It obtains an instance of the repository.  It constructs a ProductVariation object matching the one to be removed, specifying the Parent and Child ContentReferences. Finally, it calls RemoveRelation to remove the matching variation.  It takes ContentReferences for both the product and the variant as input.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/product-variants.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void RemoveVariation(ContentReference referenceToProduct, ContentReference referenceToVariation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Define a relation matching the one to remove, or use\n        // GetRelations to find the one you want to remove and pass that to\n        // RemoveRelation\n        var relationToRemove = new ProductVariation\n          {\n            Parent = referenceToProduct,\n            Child = referenceToVariation\n          };\n    \n        // Removes matching ProductVariation, or no action if no match exists\n        relationRepository.RemoveRelation(relationToRemove);\n      }\n```\n\n----------------------------------------\n\nTITLE: Searching Purchase Orders by Shipping Status in C#\nDESCRIPTION: This snippet retrieves purchase orders that have shipments with a particular shipping status (a meta-field). It uses SqlMetaWhereClause to filter by the 'PrevStatus' metafield and SqlWhereClause to ensure only PurchaseOrders are returned.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nOrderSearchParameters parameters = new OrderSearchParameters();\n    searchOptions.Classes.Add(\"ShipmentEx\");\n    parameters.SqlMetaWhereClause = \"NOT META.PrevStatus IS NULL\";\n    parameters.SqlWhereClause = \"OrderGroupId IN (Select ObjectId FROM OrderGroup_PurchaseOrder)\";\n    PurchaseOrder[] purchaseOrderCollection = OrderContext.Current.Search<PurchaseOrder>(parameters, searchOptions);\n```\n\n----------------------------------------\n\nTITLE: Configure ExtendedComponentOptions in appsettings.json - JSON\nDESCRIPTION: This JSON snippet shows how to configure extended components within the `appsettings.json` file.  It defines the same properties as the C# configuration (Name, ScriptUrl, Order, ComponentLocation, OrderTypes) but uses JSON syntax.  The `OrderTypes` value (7) is a flag enum representing Cart, PurchaseOrder, and Subscription.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extend-components.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  ...\n  \"EPiServer\": {\n    ...\n    \"Commerce\": {\n      ...\n      \"ExtendedComponentOptions\": {\n        \"ExtendedComponents\": [\n          {\n            \"Name\": \"CartOrderSubscriptionTab3\",\n            \"ScriptUrl\": \"/js/CartOrderSubscriptionTab3/CartOrderSubscriptionTab3.js\",\n            \"Order\": 2,\n            \"ComponentLocation\": 2,\n            \"OrderTypes\": 7\n          }\n        ]\n      }\n    },\n    ...\n}\n```\n\n----------------------------------------\n\nTITLE: List All Inventories in C#\nDESCRIPTION: This snippet shows how to retrieve all inventory records using the List() method of IInventoryService. It obtains an instance of IInventoryService through ServiceLocator and then calls List() to fetch all inventory records.  The method returns an IEnumerable<InventoryRecord> containing all inventories.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// List all inventory records. \n    public IEnumerable<InventoryRecord> ListAllInventories() \n      { \n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>();  \n        return inventoryService.List(); \n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Rest Store for Custom Facet C#\nDESCRIPTION: This snippet demonstrates how to create a REST store for a custom facet. It defines a CustomFacetStore class that inherits from RestControllerBase and returns a CustomFacet instance when accessed.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_7\n\nLANGUAGE: csharp\nCODE:\n```\n[RestStore(\"customfacet\")]\n        public class CustomFacetStore : RestControllerBase\n          {\n            FacetFactory _facetFactory;\n            IMarketService _marketService;\n            LocalizationService _localizationService;\n            public CustomFacetStore(\n              FacetFactory facetFactory, \n              LocalizationService localizationService, \n              IMarketService marketService)\n              {\n                _facetFactory = facetFactory;\n                _marketService = marketService;\n                _localizationService = localizationService;\n              }\n```\n\n----------------------------------------\n\nTITLE: Overriding Shipping Calculator Methods in C#\nDESCRIPTION: This snippet demonstrates overriding the DefaultShippingCalculator methods to customize shipping calculations. It overrides methods for retrieving shipping methods, calculating shipping costs, converting currencies, calculating totals for shipping items and returns, and calculating shipping and return shipping taxes.  All overridden methods return default or zero values, effectively disabling default calculations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\npublic class ShippingCalculatorOverridingDefault : DefaultShippingCalculator\n      {\n        public ShippingCalculatorOverridingDefault(ILineItemCalculator lineItemCalculator,\n                                                   IReturnLineItemCalculator returnLineItemCalculator,\n                                                   ITaxCalculator taxCalculator)\n          : base(lineItemCalculator, returnLineItemCalculator, taxCalculator)\n          { }\n        protected override ShippingMethodDto GetShippingMethods()\n          {\n            return new ShippingMethodDto();\n          }\n        protected override Money CalculateShippingCost(IShipment shipment, IMarket market, Currency currency)\n          {\n            return new Money(0m, currency);\n          }\n        protected override bool CanBeConverted(Money moneyFrom, Currency currencyTo)\n          {\n            return true;\n          }\n        protected override Money CalculateShippingItemsTotal(IShipment shipment, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateShippingReturnItemsTotal(IShipment shipment, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateShippingTax(IShipment shipment, IMarket market, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateReturnShippingTax(IShipment shipment, IMarket market, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Registering Facet Modifier C#\nDESCRIPTION: This code shows how to register a custom FacetGroupModifier in the service container. This allows the modifier to be used to alter facet groups during runtime.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureContainer(ServiceConfigurationContext context)\n      {\n        var services = context.Services;\n        services.AddSingleton<FacetGroupModifier, CustomFacetGroupModifier>();\n      }\n```\n\n----------------------------------------\n\nTITLE: Searching Purchase Orders by Tracking Number in C#\nDESCRIPTION: This snippet retrieves purchase orders with a tracking number that matches a specific pattern and ensures a tracking number (a meta-field) is assigned to at least one shipment within the purchase order. It uses SqlMetaWhereClause to filter by tracking number and SqlWhereClause to ensure the order has shipments with tracking numbers.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nOrderSearchParameters parameters = new OrderSearchParameters();\n    searchOptions.Classes.Add(\"PurchaseOrder\");\n    parameters.SqlMetaWhereClause = \"META.TrackingNumber LIKE '%PO%'\";\n    parameters.SqlWhereClause = \"OrderGroupId IN (SELECT OrdergroupId FROM Shipment WHERE NOT ShipmentTrackingNumber IS NULL)\";\n    PurchaseOrder[] purchaseOrderCollection = OrderContext.Current.Search<PurchaseOrder>(parameters, searchOptions);\n```\n\n----------------------------------------\n\nTITLE: Removing a Category from an Entry/Category in C#\nDESCRIPTION: This code snippet demonstrates how to remove an existing category from an entry or category using the IRelationRepository.RemoveRelation method. It creates a NodeRelation object that matches the existing categorization to be removed, setting its Child and Parent properties accordingly.  Then, it calls RemoveRelation to delete the categorization. The method takes ContentReferences to both the entry/category and the category to be removed as input.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/categorizations.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void RemoveCategory(ContentReference referenceToEntryOrCategory, ContentReference referenceToCategory)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        // Define a relation matching the one to remove, or use\n        // GetRelations to find the one you want to remove and pass that to\n        // RemoveRelation\n        var relationToRemove = new NodeRelation\n          {\n            Child = referenceToEntryOrCategory,\n            Parent = referenceToCategory\n          };\n        // Removes matching NodeRelation, or no action if no match exists\n        relationRepository.RemoveRelation(relationToRemove);\n      }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic void RemoveCategory(ContentReference referenceToEntryOrCategory, ContentReference referenceToCategory)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n        // Define a relation matching the one to remove, or use\n        // GetRelations to find the one you want to remove and pass that to\n        // RemoveRelation\n        var relationToRemove = new NodeRelation\n          {\n            Child = referenceToEntryOrCategory,\n            Parent = referenceToCategory\n          };\n        // Removes matching NodeRelation, or no action if no match exists\n        relationRepository.RemoveRelation(relationToRemove);\n      }\n```\n\n----------------------------------------\n\nTITLE: Get Asset URL using AssetUrlResolver in Optimizely Commerce (C#)\nDESCRIPTION: Demonstrates how to get the asset URL for a content item using the AssetUrlResolver in Optimizely Commerce Connect. It involves creating a media item, associating it with a variation, and then retrieving the asset URL. Dependencies: EPiServer, EPiServer.Commerce, Mediachase.Commerce.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/asset-url-resolver.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Globalization;\n    using EPiServer;\n    using EPiServer.Commerce.Catalog;\n    using EPiServer.Commerce.Catalog.ContentTypes;\n    using EPiServer.Commerce.SpecializedProperties;\n    using EPiServer.Core;\n    using EPiServer.DataAbstraction;\n    using EPiServer.DataAccess;\n    using EPiServer.Security;\n    using EPiServer.Web;\n    using Mediachase.Commerce.Catalog;\n    \n    public class UrlResolverSample\n    {\n        private AssetUrlResolver assetUrlResolver;\n        private ReferenceConverter referenceConverter;\n        private IContentLoader contentLoader;\n        private AssetUrlConventions assetUrlConventions;\n        private IContentRepository contentRepository;\n        private ContentMediaResolver mediaDataResolver;\n        private ContentTypeRepository contentTypeRepository;\n    \n        public string GetAssetUrl()\n        {\n            ContentReference rootCatalogLink;\n            //Get a suitable MediaData type from extension\n              var mediaType = mediaDataResolver.GetFirstMatching(\"jpg\");\n              var contentType = contentTypeRepository.Load(mediaType);\n            //Get a new empty file data\n              var media = contentRepository.GetDefault<IContentMedia>(SiteDefinition.Current.GlobalAssetsRoot, contentType.ID);\n              media.Name = \"MyImages\";\n              var contentLink = contentRepository.Save(media, SaveAction.Publish, AccessLevel.NoAccess);\n            // Add variation\n              var variation = contentRepository.GetDefault<VariationContent>(rootCatalogLink, CultureInfo.GetCultureInfo(\"en-US\"));\n              variation.Name = \"Variation name\";\n              contentRepository.Save(variation, SaveAction.Save, AccessLevel.NoAccess);\n              var commerceMedia = new CommerceMedia() {AssetLink = contentLink};\n              variation.CommerceMediaCollection.Add(commerceMedia);\n    \n            return assetUrlResolver.GetAssetUrl<IContentImage>(variation);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Query Inventories by Warehouse Code in C#\nDESCRIPTION: This snippet illustrates how to retrieve inventory records based on warehouse codes. It retrieves IInventoryService from ServiceLocator and calls QueryByWarehouse() with warehouseCodes as a parameter, returning matching InventoryRecord objects. Warehouse codes are passed as an IEnumerable<string>.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/warehouses-and-inventories-examples.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\n// List all inventory records by warehouse codes.\n    public IEnumerable<InventoryRecord> QueryInventoriesByWarehouse(IEnumerable<string> warehouseCodes)\n      {\n        var inventoryService = ServiceLocator.Current.GetInstance<IInventoryService>();\n        return inventoryService.QueryByWarehouse(warehouseCodes);\n      }\n```\n\n----------------------------------------\n\nTITLE: Applying Customer Pricing Conventions in C#\nDESCRIPTION: This code snippet demonstrates how to apply conventions for indexing `CustomerPricing` objects. This method provides a base implementation that can be extended or overridden for custom behavior related to customer pricing indexing.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/overriding-default-conventions.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nprotected override void ApplyCustomerPricingConventions(TypeConventionBuilder<CustomerPricing> conventionBuilder)\n      {\n        base.ApplyCustomerPricingConventions(conventionBuilder);\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating a Meta Type Based on System Type in C#\nDESCRIPTION: This C# code snippet demonstrates how to create a new MetaType, specifically a 'Geolocation' type based on the built-in String system type (McDataType.String). It opens a Meta model edit scope, adds the new MetaFieldType to the RegisteredTypes collection, and saves the changes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metatype-class.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Open Meta model edit scope\n    using (MetaClassManagerEditScope scope = DataContext.Current.MetaModel.BeginEdit())\n      {\n        // Add a new meta type\n        MetaFieldType geoLocation = new MetaFieldType(\"Geolocation\", \"Geolocation\", McDataType.String);\n        DataContext.Current.MetaModel.RegisteredTypes.Add(geoLocation);\n        // Save Changes\n        scope.SaveChanges();\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Handling Total in C#\nDESCRIPTION: This method calculates the total handling costs for an order form. It requires the order form, currency, and an instance of IOrderFormCalculator. The calculated handling total is then logged to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetHandlingTotal(IOrderForm orderForm, Currency currency, IOrderFormCalculator orderFormCalculator)\n          {\n            var handlingTotal = orderFormCalculator.GetHandlingTotal(orderForm, currency);\n            Debug.WriteLine(\"Handling total for order form '{0}': {1}\", orderForm.OrderFormId, handlingTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Defining IMarket Interface in C#\nDESCRIPTION: This snippet defines the IMarket interface, which represents a market within the system.  The interface provides properties for accessing market identifiers, enablement status, names, descriptions, default and available languages and currencies, associated countries, and whether prices include tax.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/markets.md#_snippet_4\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMarket\n      {\n        // Gets the market's unique identifier.\n        MarketId MarketId { get; }\n    \n        // Gets a value indicating if the the market is enabled.\n        bool IsEnabled { get; }\n    \n        // Gets the market's name.\n        string MarketName { get; }\n    \n        // Gets the market's description.\n        string MarketDescription { get; }\n    \n        // Gets the default language for the market.\n        CultureInfo DefaultLanguage { get; }\n    \n        // Gets the available languages for the market.\n        IEnumerable<CultureInfo> Languages { get; }\n    \n        // Gets the default currency for the market.\n        Currency DefaultCurrency { get; }\n    \n        // Gets the available currencies for the market.\n        IEnumerable<Currency> Currencies { get; }\n    \n        // Gets the countries associated with the market.\n        IEnumerable<string> Countries { get; }\n    \n        // Gets the value indicating if the price of the market includes tax or not.\n        bool PricesIncludeTax { get; }\n      }\n```\n\n----------------------------------------\n\nTITLE: AssetImporter for Legacy ECF Assets\nDESCRIPTION: This command imports assets using the legacy Asset Management system in Optimizely Commerce Connect. It uses the ECF BLOB Provider to manage asset files and adds them to the Catalog Node/Entry through the Asset tab in Catalog Management.  The uselegacy parameter specifies that the legacy system should be used.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/asset-importer.md#_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nAssetImporter <mapping_asset_file> <asset_folder> <commerce_core_site_path> [asset_root] uselegacy\n```\n\n----------------------------------------\n\nTITLE: Configuration Setting: SSH File Path\nDESCRIPTION: This setting specifies the path to the SSH key file, which is used to authenticate the file transfer to the Optimizely Campaign server.  It's essential for secure data transfer. There are two possible values shown here.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-campaign.md#_snippet_1\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"episerver:campaign.SSHFilePath\" value=\"/campaign_ssh.key\" />\n```\n\nLANGUAGE: xml\nCODE:\n```\n<add key=\"episerver:campaign.SSHFilePath\" value=\"/App_Data/campaign_ssh.key\" />\n```\n\n----------------------------------------\n\nTITLE: Render Campaign as Page C#\nDESCRIPTION: This snippet shows how to create a `ContentController` to render a `SalesCampaign` as a full page.  The `Index` action takes the current campaign and returns a view.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/marketing.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Collections.Generic;\n    using System.Linq;\n    using System.Web.Mvc;\n    using EPiServer;\n    using EPiServer.Commerce.Marketing;\n    using EPiServer.Core;\n    using EPiServer.Framework.DataAnnotations;\n    using EPiServer.Web.Mvc;\n    using MyOptimizelySite.Models.Pages;\n    using System.Web.Security;\n    \n    namespace MyOptimizelySite.Controllers\n      {\n        [TemplateDescriptor(Default = true)]\n        public class CampaignPageController : ContentController<SalesCampaign>\n          {\n            public ActionResult Index(SalesCampaign currentCampaign)\n              {\n                // Implementation of action view the page. \n                return View(currentCampaign);\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Searching Orders with SQL Query\nDESCRIPTION: This snippet builds a SQL query using StringBuilder to filter orders based on LineItem, LineItemEx, Shipment, and ShipmentEx tables. It then uses OrderContext.Current.Search to retrieve PurchaseOrder objects matching the SQL query. The 'ExpirationDate' and 'PrevStatus' fields are used to filter the results. Note the use of SqlWhereClause and the addition of the PurchaseOrder class to the search options.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\nStringBuilder sqlQuery = new StringBuilder();\n    sqlQuery.Append(\"OrderGroupId IN (SELECT li.OrderGroupId From LineItem li \");\n    sqlQuery.Append(\"INNER JOIN LineItemEx ex \");\n    sqlQuery.Append(\"ON li.LineItemId = ex.ObjectId \");\n    sqlQuery.Append(\"INNER JOIN Shipment sh \");\n    sqlQuery.Append(\"ON li.OrderGroupId = sh.OrderGroupId \");\n    sqlQuery.Append(\"INNER JOIN ShipmentEx shex \");\n    sqlQuery.Append(\"ON sh.ShipmentId = shex.ObjectId \");\n    sqlQuery.Append(\"WHERE ex.ExpirationDate > '1/1/2011'\");\n    sqlQuery.Append(\"AND NOT shex.PrevStatus IS NULL)\");\n    \n    OrderSearchParameters parameters = new OrderSearchParameters();\n    searchOptions.Classes.Add(\"PurchaseOrder\");\n    parameters.SqlMetaWhereClause = \"\";\n    parameters.SqlWhereClause = sqlQuery.ToString();\n    PurchaseOrder[] purchaseOrderCollection = OrderContext.Current.Search<PurchaseOrder>(parameters, searchOptions);\n```\n\n----------------------------------------\n\nTITLE: Completing a Return Order in C#\nDESCRIPTION: This snippet demonstrates how to complete a return order using the `IReturnOrderService` interface in Optimizely Commerce. It retrieves instances of `IReturnOrderService` and `IOrderRepository` from the service locator, loads a purchase order, retrieves the first return form associated with the purchase order, and completes the return form. The order group ID is hardcoded as '1'.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nvar returnOrderService = ServiceLocator.Current.GetInstance<IReturnOrderService>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n            var returnOrderForm = purchaseOrder.ReturnForms.First();\n            returnOrderService.CompleteReturn(returnOrderForm);\n```\n\n----------------------------------------\n\nTITLE: Update Subscriptions with Site ID - SQL\nDESCRIPTION: This SQL script updates the SiteId column in the OrderGroup table for Payment Plans (subscriptions). It selects OrderGroup records where the OrderGroupId exists in the OrderGroup_PaymentPlan table and sets the SiteId to an empty string.  You'll need to replace the empty string with the appropriate SiteId based on custom logic to map subscriptions to the correct site.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-site-for-orders.md#_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\n--Update subscriptions\n  Update OrderGroup set SiteId = ''\n  where OrderGroupId in (Select ObjectId from OrderGroup_PaymentPlan)\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Discount Total for Return Order Form in C#\nDESCRIPTION: This C# snippet calculates the total order-level discounts applied to all line items within a return order form. It utilizes the IReturnOrderFormCalculator to retrieve this value and outputs it to the debug console. It requires IReturnOrderForm, Currency, and IReturnOrderFormCalculator parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetOrderDiscountTotal(IReturnOrderForm returnOrderForm, Currency currency, IReturnOrderFormCalculator returnOrderFormCalculator)\n          {\n            var orderDiscountTotal = returnOrderFormCalculator.GetOrderDiscountTotal(returnOrderForm, currency);\n            Debug.WriteLine(\"Order discount total for return order form '{0}': {1}\", returnOrderForm.OrderFormId, orderDiscountTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Enabling SerializedCarts Programmatically using IFeatureSwitch\nDESCRIPTION: This code snippet demonstrates how to enable the SerializedCarts feature programmatically using the `IFeatureSwitch` interface. It requires the `Mediachase.Commerce` assembly and assumes that the service locator is properly configured.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/serializable-carts.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nServiceLocator.Current.GetInstance<IFeatureSwitch>().EnableFeature(SerializedCarts.FeatureSerializedCarts);\n```\n\n----------------------------------------\n\nTITLE: Configuring Commerce Business Manager Options in JSON\nDESCRIPTION: This snippet configures the Business Manager options within the Commerce settings. It defines handlers and plugins for managing meta classes and customization events. It is used to extend and customize the behavior of the Optimizely Commerce platform.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/feature-specific-commerce-configurations.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Commerce\": {\n    \"BusinessManagerOptions\": {\n      \"Handlers\": [\n        {\n          \"MetaClass\": \"Contact\",\n          \"Method\": \"*\",\n          \"TypeName\": \"Mediachase.Commerce.Customers.Handlers.ContactRequestHandler, Mediachase.Commerce\"\n        }\n      ],\n      \"Plugins\": [\n        {\n          \"MetaClass\": \"List\",\n          \"Method\": \"CustomPage\",\n          \"EventStage\": \"EventPipeLineStage.PostMainOperationInsideTranasaction\",\n          \"TypeName\": \"Mediachase.Commerce.Customization.Plugins.CustomPageNormalizationPlugin, Mediachase.Commerce\"\n        }\n      ]\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: FacetGroupSettings Configuration C#\nDESCRIPTION: This example demonstrates configuring FacetGroupSettings for a single-selection facet group with specific options for 'last modified' filtering, enabling the display of matching item counts.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\nnew FacetGroupSettings(FacetSelectionType.Single, 0, true, true, true /*showMatchingItems*/, Enumerable.Empty<string>())\n```\n\n----------------------------------------\n\nTITLE: Enumerating Columns in C#\nDESCRIPTION: Shows how to iterate through the columns of a table using the Table.Columns property. It retrieves the ColumnCollection from the Table object and then loops through the collection, writing the name of each column to the trace. This assumes that 'newTable' object is already initialized and populated with columns.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nforeach (Column column in newTable.Columns)\n      {\n        System.Diagnostics.Trace.WriteLine(column.Name);\n      }\n```\n\n----------------------------------------\n\nTITLE: Run React Development Server - Bash\nDESCRIPTION: This command starts the webpack-dev-server for developing React components. It uses a specific configuration file based on the component's folder name. The development server runs on localhost port 9090, allowing for local development and testing of the React component before building for deployment.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extend-components.md#_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev:server --config-name config-{folder name of the component}\n```\n\n----------------------------------------\n\nTITLE: Calculating Total Return Order in Optimizely Commerce (C#)\nDESCRIPTION: This code snippet demonstrates how to calculate the total of all return order forms within a purchase order using the IReturnPurchaseOrderCalculator interface. It takes an IPurchaseOrder and an IReturnPurchaseOrderCalculator as input and prints the total to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-purchase-order-calculator.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetTotal(IPurchaseOrder purchaseOrder, IReturnPurchaseOrderCalculator returnPurchaseOrderCalculator)\n          {\n            var total = returnPurchaseOrderCalculator.GetTotal(purchaseOrder);\n            Debug.WriteLine(\"Total for return order '{0}': {1}\", purchaseOrder.OrderLink.OrderGroupId, total);\n          }\n```\n\n----------------------------------------\n\nTITLE: Override Shipping Calculator C#\nDESCRIPTION: This class demonstrates how to override the default shipping calculator to customize calculation methods.  It inherits from DefaultShippingCalculator and overrides methods such as CalculateShippingCost, CalculateShippingItemsTotal, and CalculateShippingTax to provide custom implementations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class ShippingCalculatorOverridingDefault : DefaultShippingCalculator\n      {\n        public ShippingCalculatorOverridingDefault(ILineItemCalculator lineItemCalculator,\n                                                   IReturnLineItemCalculator returnLineItemCalculator,\n                                                   ITaxCalculator taxCalculator)\n          : base(lineItemCalculator, returnLineItemCalculator, taxCalculator)\n          { }\n        protected override ShippingMethodDto GetShippingMethods()\n          {\n            return new ShippingMethodDto();\n          }\n        protected override Money CalculateShippingCost(IShipment shipment, IMarket market, Currency currency)\n          {\n            return new Money(0m, currency);\n          }\n        protected override bool CanBeConverted(Money moneyFrom, Currency currencyTo)\n          {\n            return true;\n          }\n        protected override Money CalculateShippingItemsTotal(IShipment shipment, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateShippingReturnItemsTotal(IShipment shipment, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateShippingTax(IShipment shipment, IMarket market, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n        protected override Money CalculateReturnShippingTax(IShipment shipment, IMarket market, Currency currency)\n          {\n            return new Money(0, currency);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Initializing FacetGroup C#\nDESCRIPTION: This code snippet demonstrates the constructor for the FacetGroup class, which is used to group facet items for filtering campaigns. It takes an ID, name, a collection of FacetItem objects, and FacetGroupSettings as parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic FacetGroup(string id, string name, IEnumerable<FacetItem> items, FacetGroupSettings settings)\n      {\n        Id = id; // the id of facet group\n        Name = name; // the name of facet group\n        Items = new List<FacetItem>(items); // the list facet item \n        Settings = settings; // settings to configuration a facet group\n      }\n```\n\n----------------------------------------\n\nTITLE: AssetImporter for CMS Mapping Only\nDESCRIPTION: This command is used when the CMS already contains asset-based content. It associates existing asset content with Catalog Node/Entry using the -mappingonly parameter. It requires the mapping file and commerce site path.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/asset-importer.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nAssetImporter <mapping_asset_file> '' <commerce_core_site_path> -mappingonly\n```\n\n----------------------------------------\n\nTITLE: Recommendation Templates using Mustache.js - HTML\nDESCRIPTION: This snippet defines two Mustache.js templates, epiRecommendationListTemplate and epiRecommendationItemTemplate, to render recommendation data. These templates use data attributes like 'id', 'url', 'img', 'title', 'unitPrice', and 'salePrice' to dynamically display product information and handle discount scenarios. The templates assume that the mustache.js library is included and the _RecommendationsTemplates.cshtml partial view is being used.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<script id=\"epiRecommendationListTemplate\" type=\"x-tmpl-mustache\">\n  {{#recs}}\n    <div class=\"jsProductTile product-row__tile\" data-recommendation-id=\"{{id}}\">\n      {{> epiRecommendationItemTemplate}}\n    </div>\n  {{/recs}}\n</script>\n\n<script id=\"epiRecommendationItemTemplate\" type=\"x-tmpl-mustache\"> \n  {{#hasDiscount}}\n    <div class=\"product has-discount\">\n  {{/hasDiscount}} \n    {{^hasDiscount}}\n      <div class=\"product\">\n    {{/hasDiscount}} \n      <a href=\"{{#attributes}}{{url}}{{/attributes}}&recommendationId={{id}}\" class=\"link--black\"> \n        <div class=\"view-details\"></div> \n        <img src=\"{{#attributes}}{{img}}{{/attributes}}\" alt=\"{{refCode}}\" class=\"img-responsive\" /> \n        <h3 class=\"product-title\">{{#attributes}}{{title}}{{/attributes}}</h3> \n        <div> \n          {{#hasDiscount}}\n            <h4 class=\"product-price\">{{#attributes}}{{unitPrice}}{{/attributes}}</h4> \n            <h4 class=\"product-price product-price--discount\">{{#attributes}}{{salePrice}}{{/attributes}}</h4>\n          {{/hasDiscount}} \n          {{^hasDiscount}}\n            <h4 class=\"product-price\">{{#attributes}}{{salePrice}}{{/attributes}}</h4>\n          {{/hasDiscount}}\n        </div>\n      </a>\n    </div>\n  </div>\n  <div class=\"quick-view-btn-container\">\n    <button type=\"button\" \n            data-toggle=\"modal\" \n            data-target=\"#ModalDialog\"\n            data-url=\"{{#attributes}}{{url}}{{/attributes}}&recommendationId={{id}}\"\n            class=\"btn btn-block btn-sm quickview-button\">@Html.Translate(\"/Product/Quickview\")\n    </button>\n  </div>\n</script>\n```\n\n----------------------------------------\n\nTITLE: Calculating Shipping Subtotal in Order Form - C#\nDESCRIPTION: This code snippet overrides the `CalculateShippingSubTotal` method in an order form calculator. It sets the shipping subtotal to zero, regardless of the order form, market, or currency.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nprotected override Money CalculateShippingSubTotal(IOrderForm orderForm, IMarket market, Currency currency)\n              {\n                return new Money(0, currency);\n              }\n```\n\n----------------------------------------\n\nTITLE: Configuring OptiGPT Options in JSON\nDESCRIPTION: This snippet configures OptiGPT (AI) options, including API keys, secrets, and default model settings. It is used to integrate AI capabilities within the Optimizely Commerce platform for enhanced features and personalized experiences. The values shown are placeholders and would need to be populated with actual keys.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/feature-specific-commerce-configurations.md#_snippet_4\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Commerce\": {\n    \"OptiGPTOptions\": {\n      \"OptiAIKey\": \"\",\n      \"OptiAISecret\": \"\",\n      \"OptiAIUrl\": \"\",\n      \"OptiAIDefaultModel\": \"\"\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Calculating Tax Total in C#\nDESCRIPTION: This method calculates the tax total for a given order form within a specific market and currency. It takes the order form, market, currency, and IOrderFormCalculator as inputs.  The calculated tax amount is then logged to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetTaxTotal(IOrderForm orderForm, IMarket market, Currency currency, IOrderFormCalculator orderFormCalculator)\n          {\n            var taxTotal = orderFormCalculator.GetTaxTotal(orderForm, market, currency);\n            Debug.WriteLine(\"Tax total for order form '{0}': {1}\", orderForm.OrderFormId, taxTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Filtering Catalogs with Commerce Search Provider (C#)\nDESCRIPTION: This code snippet demonstrates how to filter catalogs based on the current site using the Commerce Search Provider.  It retrieves the catalog names associated with the current site and uses them to filter search results. Requires access to `ServiceLocator`, `SearchManager`, `CatalogEntrySearchCriteria`, and `ICatalogSystem`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-site-for-catalogs.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//Using commerce search prvoider,\nServiceLocator.Current.GetInstance<SearchManager>().Search(new CatalogEntrySearchCriteria\n{\n    CatalogNames = GetCatalogNames(),\n});\n\n \n\n private StringCollection GetCatalogNames()\n{\n    var catalogNames = new StringCollection();\n    var ids = ServiceLocator.Current.GetInstance<ICatalogSystem>().GetCatalogsBySite(SiteDefinition.Current?.Id ?? Guid.Empty);\n    if (ids == null || !ids.Any())\n    {\n        return catalogNames;\n    }\n    var catalogs = _catalogSystem.GetCatalogDto().Catalog.Where(x => ids.Contains(x.CatalogId));\n    catalogNames.AddRange(catalogs.Select(x => x.Name).ToArray());\n    return catalogNames;\n}\n```\n\n----------------------------------------\n\nTITLE: Aggregate Size for Product Content in C#\nDESCRIPTION: This code snippet demonstrates how to aggregate the Size property from VariationContent to Sizes for ProductContent using the ProductAggregationContentApiModelBase class. It defines a SizeContentApiModel class that inherits from ProductAggregationContentApiModelBase and overrides the Name and VariationProperty properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/optimizely-graph-for-commerce-connect.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[ServiceConfiguration(typeof(IContentApiModelProperty), Lifecycle = ServiceInstanceScope.Singleton)]\npublic class SizeContentApiModel : ProductAggregationContentApiModelBase<string, GenericProduct, GenericVariant>\n{\n    public SizeContentApiModel(ContentTypeModelRepository contentTypeModelRepository, IContentLoader contentLoader)\n        : base(contentTypeModelRepository, contentLoader)\n    {\n    }\n\n    public override string Name => \"Sizes\";\n\n    protected override Expression<Func<GenericVariant, string>> VariationProperty => (x) => x.Size;\n}\n```\n\n----------------------------------------\n\nTITLE: Disable WorkflowsVNext Feature (XML)\nDESCRIPTION: This XML snippet shows how to disable the 'WorkflowsVNext' feature in the ecf.app.config file. This disables the new promotion system within workflows, reverting to the legacy system.  This requires editing the application configuration file.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotions-engine.md#_snippet_6\n\nLANGUAGE: XML\nCODE:\n```\n<Application defaultApplicationName=\"ECApplication\">\n          <Features>\n            <add feature=\"WorkflowsVNext\" \n                 state=\"Disabled\" \n                 type=\"Mediachase.Commerce.Core.Features.WorkflowsVNext, Mediachase.Commerce\" />\n          </Features>\n        </Application>\n```\n\n----------------------------------------\n\nTITLE: Disabling Built-in Promotions on Site Initialization (C#)\nDESCRIPTION: This code snippet disables all built-in promotion types during site initialization. It defines an InitializationModule that implements IConfigurableModule. Inside the Initialize method, it calls a private method DisablePromotionTypes, which retrieves a PromotionTypeHandler instance and calls DisableBuiltinPromotions. Requires EPiServer.Commerce.Initialization and EPiServer.Commerce.Marketing namespaces.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/hiding-promotion-types.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nnamespace EPiServer.Commerce.Sample.Business.Initialization\n      {\n        [ModuleDependency(typeof(EPiServer.Commerce.Initialization.InitializationModule))]\n        public class InitializationModule : IConfigurableModule\n          {\n            public void Initialize(InitializationEngine context)\n              {\n                DisablePromotionTypes(context);\n              }\n     \n            public void Uninitialize(InitializationEngine context)\n              {\n              }\n    \n            public void ConfigureContainer(ServiceConfigurationContext context)\n              {\n              }\n\n            private void DisablePromotionTypes(InitializationEngine context)\n              {\n                var promotionTypeHandler = context.Locate.Advanced.GetInstance<PromotionTypeHandler>();\n\n                // To disable all built-in promotion types\n                promotionTypeHandler.DisableBuiltinPromotions();\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Removing Shipments from Cart Forms C#\nDESCRIPTION: This snippet demonstrates how to remove a shipment from both the first and the last (typically B2B) forms of a cart. It assumes that a 'cart' object and a 'shipment' object are available in the current context.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-manipulation.md#_snippet_6\n\nLANGUAGE: csharp\nCODE:\n```\n//Remove shipment from first form\ncart.GetFirstForm().Shipments.Remove(shipment);\n\n//Remove shipment from second form (b2b)\ncart.Forms.Last().Shipments.Remove(shipment);\n```\n\n----------------------------------------\n\nTITLE: Calculating Discounted Price for Return Line Item in C#\nDESCRIPTION: This code snippet demonstrates calculating the discounted price for a return line item. The discounted price only considers the line item specific discount amount. It takes an IReturnLineItem, Currency, and IReturnLineItemCalculator as input, calculates the discounted price, and logs it to the debug console.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-line-item-calculator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetDiscountedPrice(IReturnLineItem returnLineItem, Currency currency, IReturnLineItemCalculator returnLineItemCalculator)\n          {\n            var discountedPrice = returnLineItemCalculator.GetDiscountedPrice(returnLineItem, currency);\n            Debug.WriteLine(\"Discounted price for '{0}': {1}\", returnLineItem.Code, discountedPrice);\n          }\n```\n\n----------------------------------------\n\nTITLE: Disable Automatic Indexing using appsettings.json - JSON\nDESCRIPTION: This snippet shows how to disable automatic indexing of content changes in Optimizely Search & Navigation by setting the `DisableEventedIndexing` property to `true` within the `appsettings.json` file. This prevents individual content changes from triggering immediate indexing, which can be useful during large content imports or updates. Requires Optimizely Find and Find.CMS packages.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/controlling-automatic-indexing-when-content-changes.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n// sample appsettings.json\n        \"EPiServer\": {\n          \"Find\": {\n            \"Cms\": {\n              \"DisableEventedIndexing\": true\n            }\n          }\n        }\n```\n\n----------------------------------------\n\nTITLE: Verifying Click Tracking Response - SmartRecs\nDESCRIPTION: This code snippet shows the structure of the click tracking information within the smartRecs object in the response. It demonstrates how the click is logged along with the recommendation ID.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n\"info\":{\"smartRecs\":[{\"click\":\"ok\",\"id\":60088462}]}\n```\n\n----------------------------------------\n\nTITLE: Comparing Meta-Models in C#\nDESCRIPTION: This code snippet compares two meta-models to identify differences and create a synchronization script. It loads both the source and destination meta-models as XML documents, retrieves module manifests, creates a SchemaDocument, and then uses MetaModelSync.FindModifications to compare the models. The resulting synchronization commands are then saved to a file.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/exporting-and-importing-meta-models.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n  {\n    // Load Imported Meta-Model\n    List<ModuleManifest> installedModules = new List<ModuleManifest>();\n    XmlDocument xmlSrcMetaModel = new XmlDocument();\n    xmlSrcMetaModel.Load(srcMetaModelPath);\n\n    // Load Modules From Source Meta-Model\n    foreach (XmlNode xmlManifestNode in\n      xmlSrcMetaModel.SelectNode(\"//mediachase.businessFoundation.data.meta/description/moduleManifests/moduleManifest\"))\n      {\n        ModuleManifest manifest = McXmlSerializer.GetObject<ModuleManifest>(xmlManifestNode.OuterXml);\n        installedModules.Add(manifest);\n      }\n\n    // Load SchemaDocument\n    SchemaDocument schema = new SchemaDocument();\n    schema.LoadDefault(installedModules.ToArray());\n\n    // Load Original Meta-model\n    XmlDocument xmlDestMetaModel = new XmlDocument();\n    xmlDestMetaModel.Load(destMetaModelPath);\n\n    // Compare two Meta-models\n    SyncCommand[] syncCommands = MetaModelSync.FindModifications(schema, xmlSrcMetaModel, xmlDestMetaModel);\n\n    // Save sync commands to file\n    McXmlSerializer.SaveObjectToFile<SyncCommand[]>(outputSyncFilePath, syncCommands);\n  }\ncatch (Exception ex)\n  {\n  }\n```\n\n----------------------------------------\n\nTITLE: Enumerating User Tables in C#\nDESCRIPTION: Shows how to iterate through the user tables within a database using the Database.Tables property. It retrieves the Database object from the SqlContext and then loops through the TableCollection, checking the TableType property to identify user tables and writing their names to the trace. This example requires the Mediachase.BusinessFoundation.Data.Sql namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\n// Step 2. Get Database\n    Database database = SqlContext.Current.Database;\n    // Step 3. Enum User Tables\n    foreach (Table table in database.Tables)\n      {\n        if (table.Type == TableType.Table)\n          {\n            Trace.WriteLine(table.Name);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating Custom Facet C#\nDESCRIPTION: This snippet shows the creation of a custom facet by inheriting from the CampaignFacet class. It clears the built-in facet groups and adds a new group for filtering by the last modified date.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomFacet : CampaignFacet\n      {\n        public CustomFacet(\n                            FacetFactory facetFactory, \n                            IMarketService marketService, \n                            LocalizationService localizationService\n                          ) : base(facetFactory, marketService, localizationService)\n          {\n            // Clear all built-in facet groups\n            Groups.Clear();\n            Groups.Add(facetFactory.CreateFacetGroup(\n              \"lastmodified\",\n              \"Last Modified\",\n              new List() \n                {\n                  facetFactory.CreateFacetItem(\"day\", \"Today\"),\n                  facetFactory.CreateFacetItem(\"week\", \"A Week Ago\"),\n                  facetFactory.CreateFacetItem(\"month\", \"A Month Ago\")\n                },\n              new FacetGroupSettings(FacetSelectionType.Single, 0, true, true, false, Enumerable.Empty<string>())));\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Getting IWarehouseRepository and IInventoryService Instances (C#)\nDESCRIPTION: This code snippet shows how to obtain instances of IWarehouseRepository and IInventoryService using the ServiceLocator. These services are used to access warehouse definitions and manage warehouse information and inventory levels.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-warehouse-implementations.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nServiceLocator.Current.GetInstance<IWarehouseRepository>()\nServiceLocator.Current.GetInstance<IInventoryService>()\n```\n\n----------------------------------------\n\nTITLE: Calculating Tax Total in C#\nDESCRIPTION: This method calculates the tax total for an order group using the IOrderGroupCalculator and logs the result using Debug.WriteLine. It requires an IOrderGroup and an IOrderGroupCalculator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetTaxTotal(IOrderGroup orderGroup, IOrderGroupCalculator orderGroupCalculator)\n          {\n            var taxTotal = orderGroupCalculator.GetTaxTotal(orderGroup);\n            Debug.WriteLine(\"Tax total for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, taxTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Add Customer Price Group (C#)\nDESCRIPTION: This C# snippet adds a new customer price group named \"VIP\" to the list of available options.  It interacts with the Meta API, specifically modifying the \"ContactGroup\" meta field type. It checks if the \"VIP\" group already exists before adding it to ensure uniqueness.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricetype-examples.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nprivate void AddVIPCustomerPriceGroup()\n      {\n        var metaFieldType = DataContext.Current.MetaModel.RegisteredTypes[\"ContactGroup\"];\n        var metaEnumItems = MetaEnum.GetItems(metaFieldType);\n        var hasVIPGroup = metaEnumItems.Any(item => string.Equals(item.Name, \"VIP\", StringComparison.InvariantCultureIgnoreCase));\n        if (!hasVIPGroup)\n          {\n            var lastIndex = metaEnumItems.Count();\n            MetaEnum.AddItem(metaFieldType, \"VIP\", ++lastIndex);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring Catalog Options in JSON\nDESCRIPTION: This snippet configures catalog options, including sale price types, import settings, and event-driven indexing. It defines how the catalog is managed and updated within the Optimizely Commerce platform, impacting data integrity and performance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/feature-specific-commerce-configurations.md#_snippet_3\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"Commerce\": {\n    \"CatalogOptions\": {\n      \"AutoConfigure\": true,\n      \"SalePriceTypes\": [\n        {\n          \"Key\": \"Subscription\",\n          \"Value\": \"3\",\n          \"Description\": \"Subscription\"\n        },\n        {\n          \"Key\": \"MSRP\",\n          \"Value\": \"4\",\n          \"Description\": \"MSRP\"\n        }\n      ],\n      \"ShowVariationListPrice\": false,\n      \"CatalogImportBatchSize\": 200,\n      \"CommandTimeout\": -1,\n      \"CatalogEventLevel\": 0,\n      \"DisableCatalogEventDrivenIndexing\": false,\n      \"DisableQueueForIncrementalIndexing\": false,\n      \"SkipCatalogContentModelCheck\": false,\n      \"IgnorePropertyAndMetafieldMisMatch\": false,\n      \"SimplifiedCatalogListingThreshold\": 2000,\n      \"DraftMigrationBatchSize\": 5000,\n      \"DraftMigrationTimeSpan\": 1,\n      \"EnableFeatureGetReferencesInCatalog\": false,\n      \"EnsurePublishedVersionInAllLanguages\": true,\n      \"ArchivedThreshold\": 30\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Order Form Calculation in C#\nDESCRIPTION: This class demonstrates how to override the default order form calculations by inheriting from DefaultOrderFormCalculator.  It overrides several methods to return 0 for total, subtotal, handling total, shipping subtotal, and tax total. The class requires IShippingCalculator and ITaxCalculator instances for its constructor.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_8\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderFormCalculatorOverridingDefault : DefaultOrderFormCalculator\n          {\n            public OrderFormCalculatorOverridingDefault(IShippingCalculator shippingCalculator, ITaxCalculator taxCalculator)\n              : base(shippingCalculator, taxCalculator)\n              { }\n            protected override Money CalculateTotal(IOrderForm orderForm, IMarket market, Currency currency)\n              {\n                return new Money(0, currency);\n              }\n            protected override Money CalculateSubtotal(IOrderForm orderForm, Currency currency)\n              {\n                return new Money(0, currency);\n              }\n            protected override Money CalculateHandlingTotal(IOrderForm orderForm, Currency currency)\n              {\n                return new Money(0, currency);\n              }\n            protected override Money CalculateShippingSubTotal(IOrderForm orderForm, IMarket market, Currency currency)\n              {\n                return new Money(0, currency);\n              }\n            protected override Money CalculateTaxTotal(IOrderForm orderForm, IMarket market, Currency currency)\n              {\n                return new Money(0, currency);\n              }\n          }\n```\n\n----------------------------------------\n\nTITLE: Configuring ODPJobOptions Before 14.20.0 (Code)\nDESCRIPTION: This code snippet demonstrates how to configure the ODP integration through C# code before version 14.20.0. It sets the `MarketKeys` property with details like `MarketId`, `AccessKey`, and `EndpointUrl`. Requires `ODPJobOptions` and `MarketKey` classes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customized-commerce-odp.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nservices.Configure < ODPJobOptions > (o => {\n  o.MarketKeys = new List < MarketKey > {\n    new() {\n      MarketId = \"US\",\n        AccessKey = \"key\",\n        EndpointUrl = \"<https://api.zaius.com/>\"\n    }\n  };\n});\n```\n\n----------------------------------------\n\nTITLE: Getting Default Price for ProductContent in Optimizely (C#)\nDESCRIPTION: Retrieves the highest UnitPrice of the default prices for a ProductContent. It iterates through variations, using ReadOnlyPricingLoader and IRelationRepository. The ServiceLocator is used to resolve default instances of these when no other arguments are provided.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_9\n\nLANGUAGE: csharp\nCODE:\n```\npublic static Price DefaultPrice(this ProductContent productContent)\n          {\n            return DefaultPrice(productContent, ServiceLocator.Current.GetInstance<ReadOnlyPricingLoader>(), ServiceLocator.Current.GetInstance<IRelationRepository>());\n          }\n    \n        public static Price DefaultPrice(this ProductContent productContent, ReadOnlyPricingLoader pricingLoader, IRelationRepository relationRepository)\n          {\n            var maxPrice = new Price();\n            var variationLinks = productContent.GetVariants(relationRepository);\n            foreach (var variationLink in variationLinks)\n              {\n                var defaultPrice = pricingLoader.GetDefaultPrice(variationLink);\n                if (defaultPrice.UnitPrice.Amount > maxPrice.UnitPrice.Amount)\n                  {\n                    maxPrice = defaultPrice;\n                  }\n              }\n            return maxPrice;\n          }\n```\n\n----------------------------------------\n\nTITLE: Calculating Extended Price for Return Line Item in C#\nDESCRIPTION: This code snippet demonstrates how to calculate the extended price for a return line item using the IReturnLineItemCalculator. The extended price includes order-level discounts spread over all return line items and any return line item specific discounts. The method takes an IReturnLineItem, Currency, and IReturnLineItemCalculator as input and outputs the extended price to the debug console.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-line-item-calculator.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetExtendedPrice(IReturnLineItem returnLineItem, Currency currency, IReturnLineItemCalculator returnLineItemCalculator)\n          {\n            var extendedPrice = returnLineItemCalculator.GetExtendedPrice(returnLineItem, currency);\n            Debug.WriteLine(\"Extended price for '{0}': {1}\", returnLineItem.Code, extendedPrice);\n          }\n```\n\n----------------------------------------\n\nTITLE: Updating Meta-fields in Optimizely Commerce Connect\nDESCRIPTION: This code snippet demonstrates how to update an existing meta-field using the Mediachase.MetaDataPlus.Configurator.MetaField.Load method to load the meta-field, then modifying its properties and calling OnUpdated().\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metadata-plus.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar metaField = Mediachase.MetaDataPlus.Configurator.MetaField.Load(OrderContext.MetaDataContext, \"BidPrice\");\n    metaField.Description = \"Better desciption\";\n    metaField.OnUpdated();\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar metaField = Mediachase.MetaDataPlus.Configurator.MetaField.Load(OrderContext.MetaDataContext, \"BidPrice\");\n    metaField.Description = \"Better desciption\";\n    metaField.OnUpdated();\n```\n\n----------------------------------------\n\nTITLE: Calculating Shipping Subtotal in C#\nDESCRIPTION: This method calculates the shipping subtotal for an order group using the IOrderGroupCalculator. It then writes the result to the debug output. The method requires an IOrderGroup and an IOrderGroupCalculator.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-group-calculator.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingSubTotal(IOrderGroup orderGroup, IOrderGroupCalculator orderGroupCalculator)\n          {\n            var shippingSubTotal = orderGroupCalculator.GetShippingSubTotal(orderGroup);\n            Debug.WriteLine(\"Shipping subtotal for order group '{0}': {1}\", orderGroup.OrderLink.OrderGroupId, shippingSubTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Registering CatalogContentClientConventions in Startup.cs (Commerce 14)\nDESCRIPTION: Registers a custom implementation of `CatalogContentClientConventions` named `SiteCatalogContentClientConventions` in the `ConfigureServices` method of the `Startup` class using dependency injection. This replaces the default conventions with the custom ones in Commerce version 14.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n//Startup class\n    public void ConfigureServices(IServiceCollection services)\n    {\n            services.AddTransient<CatalogContentClientConventions, SiteCatalogContentClientConventions>();\n    }\n```\n\n----------------------------------------\n\nTITLE: Importing Meta-Model by Executing Sync Commands in C#\nDESCRIPTION: This code snippet loads and executes synchronization commands to import a meta-model. It opens a DataContext, loads a SchemaDocument, retrieves synchronization commands from a file, and then executes these commands within a transaction scope using MetaModelSync.Execute.  The filePath parameter specifies the location of the synchronization commands file.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/exporting-and-importing-meta-models.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\ntry\n  {\n    // Open DataContext\n    DataContext.Current = new DataContext(connectionString);\n\n    // Load Sync Commands\n    SchemaDocument schema = new SchemaDocument();\n    schema.LoadDefault();\n\n    // Load Sync Commands\n    SyncCommand[] syncCommands =\n    McXmlSerializer.GetObjectFromFile<SyncCommand[]>(filePath);\n\n    // Apply Sync Command\n    using (TransactionScope tran = DataContext.Current.BeginTransaction())\n      {\n        MetaModelSync.Execute(schema, syncCommands);\n        tran.Commit();\n      }\n  }\ncatch (Exception ex)\n  {\n  }\n```\n\n----------------------------------------\n\nTITLE: Initializing FacetGroupSettings C#\nDESCRIPTION: This snippet shows the constructor for FacetGroupSettings, which configures a facet group. It takes parameters such as SelectionType, ItemsToShow, Collapsible, HasIcons, ShowMatchingItems, and DependsOn to define the behavior and appearance of the facet group.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic FacetGroupSettings(\n      FacetSelectionType selectionType,\n      int itemsToShow,\n      bool collapsible,\n      bool hasIcons,\n      bool showMatchingItems,\n      IEnumerable<string> dependsOn)\n      {\n        SelectionType = selectionType; // Determine the selection type of facet group, single or multiple through FacetSelectionType enum\n        ItemsToShow = itemsToShow; // The number to determine how many facet items will be show as default. If there are more than facet items, show more option will be available\n        Collapsible = collapsible; // Determine the facet group is collapsible or not\n        HasIcons = hasIcons; // Determine the icon of facet items are displayed or not\n        ShowMatchingItems = showMatchingItems; // Determine the number of matching filtered items are shown or not\n        DependsOn = dependsOn; // List of facet group that current group depends on. That mean changes the list facet group could affect the number of matching filterd items in the current group\n      }\n```\n\n----------------------------------------\n\nTITLE: Initializing Order Search Options in C#\nDESCRIPTION: This snippet initializes the OrderSearchOptions object, setting the starting record, the number of records to retrieve, and the namespace. This is a common starting point for all the search examples provided.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nOrderSearchOptions searchOptions = new OrderSearchOptions();\n    searchOptions.StartingRecord = 0;\n    searchOptions.RecordsToRetrieve = 10000;\n    searchOptions.Namespace = \"Mediachase.Commerce.Orders\";\n```\n\n----------------------------------------\n\nTITLE: Activating Widgets using WidgetService in C#\nDESCRIPTION: This code snippet retrieves all widgets using the WidgetService, then iterates through them to set the Active property to true and updates each widget using the UpdateWidget method. This activation is necessary to enable tracking and receive recommendations in Optimizely.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/activating-widgets.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar widgetService = context.Locate.Advanced.GetInstance<WidgetService>();\n    var response = widgetService.GetWidgets();\n    \n    foreach (var widget in response.EpiPerPage.Pages.SelectMany(x => x.Widgets))\n      {\n        widget.Active = true;\n        widgetService.UpdateWidget(widget);\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating a new Entity Object in C#\nDESCRIPTION: This snippet demonstrates how to create a new entity object using the BusinessManager class. It initializes an entity of type 'Class_1', sets the 'Title' and 'Description' properties, and then persists the new entity to the database.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nEntityObject page = BusinessManager.InitializeEntity(\"Class_1\");\n    page[\"Title\"] = \"Title Text\";\n    page[\"Description\"] = \"Description Text\";\n    PrimaryKeyId pageId = BusinessManager.Create(page);\n```\n\n----------------------------------------\n\nTITLE: Verifying Click Tracking Info - SmartRecs\nDESCRIPTION: This code snippet shows the structure of the click tracking information within the smartRecs object in the request. It demonstrates how the click ID is logged.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"info\":{\"smartRecs\":{\"click\":60088462}}\n```\n\n----------------------------------------\n\nTITLE: Retrieve Shipping Method ID C#\nDESCRIPTION: Illustrates how to retrieve the shipping method ID and name using the ShippingManager class. This example demonstrates looking up shipping method information using the current culture and method ID. It returns the shipping method name if found.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping-gateways-and-providers.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\n// Look up payment method\n    ShippingMethodDto methods = ShippingManager.GetShippingMethods(Thread.CurrentThread.CurrentCulture.Name); \n    // the methodId was passed into the method as one of the method parameters\n    ShippingMethodDto.ShippingMethodRow row = methods.ShippingMethod.FindByShippingMethodId(methodId);\n    \n    string name; \n    if (row != null) \n      { \n       name = row.Name; \n      } \n    else \n      { \n       name = \"\"; \n      }\n```\n\n----------------------------------------\n\nTITLE: Get Promotions for Campaign (C#)\nDESCRIPTION: This code snippet shows how to retrieve promotions and items associated with a specific campaign using the promotion engine.  Requires a campaignLink of type ContentReference. Requires Optimizely.Commerce.Marketing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotions-engine.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\nIEnumerable<PromotionsItems> promotionItemsList = ServiceLocator.Current.GetInstance<IPromotionEngine>().GetPromotionItemsForCampaign(campaignLink);\n```\n\n----------------------------------------\n\nTITLE: Enabling Tracking in appsettings.json (Optimizely)\nDESCRIPTION: This JSON snippet demonstrates how to enable tracking for Optimizely Product Recommendations by setting the 'TrackingEnabled' property to true within the 'TrackingOptions' section of the appsettings.json file. This configuration is crucial for capturing user behavior and sending data to the Optimizely platform.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/installing-and-configuring-the-native-integration-package.md#_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n      \"EPiServer\": {\n        \"Tracking\": {\n          \"TrackingOptions\": {\n            \"TrackingEnabled\": true\n          }\n        }\n      }\n    }\n```\n\n----------------------------------------\n\nTITLE: Re-registering IFilterForVisitor instances C# (duplicate)\nDESCRIPTION: This code snippet re-registers all instances that implement the IFilterForVisitor interface, except for the FilterCurrentMarketForVisitor instance.  It uses the ServiceConfigurationContext to get all instances of IFilterForVisitor, filters out the FilterCurrentMarketForVisitor, ejects all instances, and then re-injects the filtered instances. This is done to override the default behavior of immediately indexing EntryContentBase types.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/exclude-market-filter-from-filter-for-visitor.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureContainer(ServiceConfigurationContext context)\n      {\n        SetupFilterForVisitor(context);\n        context.Services.Configure(c => c.For<ICurrentMarket>().Singleton().Use<MarketStorage>());\n      }\n    \n    private void SetupFilterForVisitor(ServiceConfigurationContext context)\n      {\n        var customFilterForVisitors = context.Container.GetAllInstances<IFilterForVisitor>().Where(x => !(x is FilterCurrentMarketForVisitor));\n        context.Container.EjectAllInstancesOf<IFilterForVisitor>();\n        foreach (var instance in customFilterForVisitors)\n          {\n            context.Container.Inject(instance);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipping Package Information using ShippingMethodDto C#\nDESCRIPTION: This code snippet retrieves package information for a given shipping provider using the ShippingMethodDto. It iterates through shipping options (providers), retrieves associated package rows, and then retrieves individual package details such as length, height, width, and description.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping-gateways-and-providers.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\nMediachase.Commerce.Orders.Dto.ShippingMethodDto shippingMethods =\n      Mediachase.Commerce.Orders.Managers.ShippingManager.GetShippingMethods(\"en-us\");\n    \n    foreach(System.Data.DataRow row in shippingMethods.ShippingOption.Rows)\n      {\n        // A shipping option is a shipping provider\n        Mediachase.Commerce.Orders.Dto.ShippingMethodDto.ShippingOptionRow shippingProviderRow =\n          (Mediachase.Commerce.Orders.Dto.ShippingMethodDto.ShippingOptionRow)row;\n    \n        // now you have access to packages associated with the shipping provider\n        Mediachase.Commerce.Orders.Dto.ShippingMethodDto.ShippingPackageRow[] packageRows =\n          shippingProviderRow.GetShippingPackageRows();\n    \n        //now you have access to the packages' names and id's\n        //packageRows[0].ShippingPackageId\n        //packageRows[0].PackageName\n    \n        //now you can retrieve the individual Package row with additional information\n        Mediachase.Commerce.Orders.Dto.ShippingMethodDto method =Mediachase.Commerce.Orders.Managers.ShippingManager.GetShippingPackage(packageRows[0].PackageId);\n    \n        //the GetShippingPackage method just populates the Package table with the applicable shipping package\n        if (method.Package.Rows.Count > 0)\n          {\n            Mediachase.Commerce.Orders.Dto.ShippingMethodDto.PackageRow packageRow =\n              (Mediachase.Commerce.Orders.Dto.ShippingMethodDto.PackageRow)method.Package.Rows[0];\n    \n            //here we can retrieve the package properties\n            //packageRow.Length\n            //packageRow.Height\n            //packageRow.Width\n            //packageRow.Description\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Form Total in C#\nDESCRIPTION: This method calculates the total amount for a given order form using the IOrderFormCalculator. It takes the order form, market, currency, and the calculator as input. The calculated total is then logged to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetTotal(IOrderForm orderForm, IMarket market, Currency currency, IOrderFormCalculator orderFormCalculator)\n          {\n            var total = orderFormCalculator.GetTotal(orderForm, market, currency);\n            Debug.WriteLine(\"Total for order form '{0}': {1}\", orderForm.OrderFormId, total);\n          }\n```\n\n----------------------------------------\n\nTITLE: Duplicate: Configure Subscription Time Ranges in appsettings.json and Startup.cs\nDESCRIPTION: This code snippet shows how to configure the time ranges for subscription data collection in the appsettings.json file AND in the ConfigureServices method of Startup.cs.  The `SubscriptionTimeRangesInDays` property defines the number of days prior to the current date for which subscription data should be collected. The example sets the time ranges to 30, 60, 90, and 180 days.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/collecting-subscription-data.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Commerce\":{\n        \"ReportingTimeRangeOptions\":{\n            \"SubscriptionTimeRangesInDays\": [30, 60, 90, 180]\n            }\n        }\n    }\n```\n\nLANGUAGE: C#\nCODE:\n```\npublic void ConfigureServices(IServiceCollection services)\n    {\n        services.Configure<ReportingTimeRangeOptions>(o =>\n        {\n            o.SubscriptionTimeRangesInDays= new HashSet<int>() { 30, 60, 90, 180 };\n        });\n    }\n```\n\n----------------------------------------\n\nTITLE: Generating Return Order Numbers in C#\nDESCRIPTION: This code snippet demonstrates how to generate exchange order numbers and return order form numbers using the `IReturnOrderNumberGenerator` interface in Optimizely Commerce. It retrieves instances of `IPurchaseOrderFactory`, `IOrderRepository`, and `IReturnOrderNumberGenerator` from the service locator, loads a purchase order, and then generates the exchange and return order numbers. The order group ID is hardcoded as '1'.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nvar purchaseOrderFactory = ServiceLocator.Current.GetInstance<IPurchaseOrderFactory>();\n        var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n        var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n        var order = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n        var returnOrderNumberGenerator = ServiceLocator.Current.GetInstance<IReturnOrderNumberGenerator>();\n        var exchangeOrderNumber = returnOrderNumberGenerator.GenerateExchangeOrderNumber(order);\n        var returnOrderFormNumber = returnOrderNumberGenerator.GenerateReturnOrderFormNumber(order);\n```\n\n----------------------------------------\n\nTITLE: Translation XML for Custom Promotion Description\nDESCRIPTION: This XML snippet defines the translation for a custom promotion, including its name, creation instructions, a general description, and a form description that links properties to specific UI regions using color-coded region names. The formdescription element connects properties with the description. The {condition} and {reward} placeholders correspond to properties marked with PromotionRegion attributes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-promotions.md#_snippet_1\n\nLANGUAGE: XML\nCODE:\n```\n<custompromotion>\n      <name>My custom promotion</name>\n      <create see=\"/contenttypes/custompromotion/name\" />\n      <description>Buy at least X items from categories/entries and get a % discount on the cheapest item.</description>\n      <formdescription>Buy {condition} at least X items from categories/entries{/} and get {reward}a % discount{/} on the cheapest item.</formdescription>\n    </custompromotion>\n```\n\n----------------------------------------\n\nTITLE: Setting Metadata Field Value for Multiple Languages in C#\nDESCRIPTION: This code snippet shows how to set metadata field values for multiple languages. It iterates through a list of languages, sets the MetaDataContext's language, uses MetaHelper.SetMetaFieldValue to update the metadata for each language, and then saves the changes. The UseCurrentUICulture flag is toggled to ensure explicit language setting.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-dto-and-object-models.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\nMetaDataContext MDContext = CatalogContext.MetaDataContext;\n    \nMDContext.UseCurrentUICulture = false;\n//string \nforeach (string language in Languages)\n{\nMDContext.Language = language;\nMetaHelper.SetMetaFieldValue(metaobj)...\nmetaObj.AcceptChanges(MDContext);\n}\nMDContext.UseCurrentUICulture = true;\n```\n\nLANGUAGE: C#\nCODE:\n```\nMetaDataContext MDContext = CatalogContext.MetaDataContext;\n    \nMDContext.UseCurrentUICulture = false;\n//string \nforeach (string language in Languages)\n{\nMDContext.Language = language;\nMetaHelper.SetMetaFieldValue(metaobj)...\nmetaObj.AcceptChanges(MDContext);\n}\nMDContext.UseCurrentUICulture = true;\n```\n\n----------------------------------------\n\nTITLE: Disable SerializedCarts Feature in appsettings.json\nDESCRIPTION: This JSON snippet demonstrates how to disable the SerializedCarts feature using the ApplicationOptions in the appsettings.json file. It sets the \"State\" to 1 to disable the feature. A value of 0 enables it.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/option-configuration-classes.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n        \"Commerce\": {\n            \"ApplicationOptions\": {\n                \"Features\": {\n                    \"SerializedCarts\": {\n                        \"Feature\": \"SerializedCarts\",\n                        \"State\": 1, // 0 is enabled, 1 for disabled\n                        \"Type\": \"Mediachase.Commerce.Core.Features.SerializedCarts, Mediachase.Commerce\"\n                    }\n                }\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Recommendations - Missing SmartRecs Object\nDESCRIPTION: This JSON snippet represents a response where the smartRecs object is missing, indicating that no widgets are enabled for that page type within Recommendations. This suggests the configuration needs review.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n          \"session\"        : {\n                               \"session\" : \"122289928212|jVsQ4-z8Shoq9p-Ufs905rzXtsfq6984fkbdEnfokEY\",\n                               \"cuid\"    : \"76872594962|oLDX68UmK-zsvRYWWsXkND1W3Nofo9fFILiCv4KvwpQ\"\n                             },\n          \"pageTrackingId\" : \"876615918262|uAjKdc4kr1KBRwwSiK1_Rw\",\n          \"status\"         : \"OK\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Creating MetaObject and Setting Field Values C#\nDESCRIPTION: This code snippet demonstrates how to create a MetaObject and set its field values using MetaHelper.SetMetaFieldValue. It creates a new MetaObject based on a catalog entry and meta class, then sets values for properties like Title, ID, Description, Theme, and Highlight. The changes are then saved to the MetaContext.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-dto-and-object-models.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMetaObject metaObj = MetaObject.NewObject(metaContext, entry.CatalogEntry[0].CatalogEntryId, metaClass.Id, \"name\");\nMetaHelper.SetMetaFieldValue(metaContext, metaObj, \"Title\", new object[] { \"New Book Title\" });\nMetaHelper.SetMetaFieldValue(metaContext, metaObj, \"ID\", new object[] { \"New Id\" });\nMetaHelper.SetMetaFieldValue(metaContext, metaObj, \"Description\", new object[] { \"New Description\" });\nMetaHelper.SetMetaFieldValue(metaContext, metaObj, \"Theme\", new object[] { \"New Book Title\" });\nMetaHelper.SetMetaFieldValue(metaContext, metaObj, \"Highlight\", new object[] { false });\nmetaObj.AcceptChanges(metaContext);\n```\n\n----------------------------------------\n\nTITLE: Re-registering IFilterForVisitor instances C#\nDESCRIPTION: This code snippet re-registers all instances that implement the IFilterForVisitor interface, except for the FilterCurrentMarketForVisitor instance.  It uses the ServiceConfigurationContext to get all instances of IFilterForVisitor, filters out the FilterCurrentMarketForVisitor, ejects all instances, and then re-injects the filtered instances. This is done to override the default behavior of immediately indexing EntryContentBase types.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/exclude-market-filter-from-filter-for-visitor.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic void ConfigureContainer(ServiceConfigurationContext context)\n      {\n        SetupFilterForVisitor(context);\n        context.Services.Configure(c => c.For<ICurrentMarket>().Singleton().Use<MarketStorage>());\n      }\n    \n    private void SetupFilterForVisitor(ServiceConfigurationContext context)\n      {\n        var customFilterForVisitors = context.Container.GetAllInstances<IFilterForVisitor>().Where(x => !(x is FilterCurrentMarketForVisitor));\n        context.Container.EjectAllInstancesOf<IFilterForVisitor>();\n        foreach (var instance in customFilterForVisitors)\n          {\n            context.Container.Inject(instance);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Get Asset URL using AssetUrlResolver in Optimizely Commerce (C#) - Duplicated Code\nDESCRIPTION: This is a duplicate of the code snippet above, showing how to get the asset URL for a content item using the AssetUrlResolver in Optimizely Commerce Connect. It involves creating a media item, associating it with a variation, and then retrieving the asset URL. Dependencies: EPiServer, EPiServer.Commerce, Mediachase.Commerce.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/asset-url-resolver.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nusing System.Globalization;\n    using EPiServer;\n    using EPiServer.Commerce.Catalog;\n    using EPiServer.Commerce.Catalog.ContentTypes;\n    using EPiServer.Commerce.SpecializedProperties;\n    using EPiServer.Core;\n    using EPiServer.DataAbstraction;\n    using EPiServer.DataAccess;\n    using EPiServer.Security;\n    using EPiServer.Web;\n    using Mediachase.Commerce.Catalog;\n    \n    public class UrlResolverSample\n    {\n        private AssetUrlResolver assetUrlResolver;\n        private ReferenceConverter referenceConverter;\n        private IContentLoader contentLoader;\n        private AssetUrlConventions assetUrlConventions;\n        private IContentRepository contentRepository;\n        private ContentMediaResolver mediaDataResolver;\n        private ContentTypeRepository contentTypeRepository;\n    \n        public string GetAssetUrl()\n        {\n            ContentReference rootCatalogLink;\n            //Get a suitable MediaData type from extension\n              var mediaType = mediaDataResolver.GetFirstMatching(\"jpg\");\n              var contentType = contentTypeRepository.Load(mediaType);\n            //Get a new empty file data\n              var media = contentRepository.GetDefault<IContentMedia>(SiteDefinition.Current.GlobalAssetsRoot, contentType.ID);\n              media.Name = \"MyImages\";\n              var contentLink = contentRepository.Save(media, SaveAction.Publish, AccessLevel.NoAccess);\n            // Add variation\n              var variation = contentRepository.GetDefault<VariationContent>(rootCatalogLink, CultureInfo.GetCultureInfo(\"en-US\"));\n              variation.Name = \"Variation name\";\n              contentRepository.Save(variation, SaveAction.Save, AccessLevel.NoAccess);\n              var commerceMedia = new CommerceMedia() {AssetLink = contentLink};\n              variation.CommerceMediaCollection.Add(commerceMedia);\n    \n            return assetUrlResolver.GetAssetUrl<IContentImage>(variation);\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Deleting Entity Object C#\nDESCRIPTION: This snippet demonstrates how to delete an entity object from the persistent storage. It invokes BusinessManager.Execute with a DeleteRequest, accepting the target EntityObject to be deleted as input.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\nBusinessManager.Execute(new DeleteRequest(target));\n```\n\n----------------------------------------\n\nTITLE: Build React Component in Debug Mode - Bash\nDESCRIPTION: These commands provide alternative build options for React components.  `yarn build:debug` builds the component in debug mode, generating a mapping file for debugging purposes. `yarn build:watch` builds in debug mode and watches for changes, automatically re-building the component whenever changes are detected.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extend-components.md#_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn build: debug => build in debug mode, mapping file will be generated for debugging.\nyarn build: watch => build in debug mode, watch changes and re-build each changes.\n```\n\n----------------------------------------\n\nTITLE: Configure Reporting Time Range in appsettings.json\nDESCRIPTION: This snippet demonstrates how to configure the reporting time range options in the `appsettings.json` file.  It sets the `TimeRangesInDays` property under the `Commerce:ReportingTimeRangeOptions` section to an array of integer values representing the number of days for which to collect report data. This affects the CSV files generated by the Collect Report Data scheduled job.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/collect-data-for-reports.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Commerce\":{\n        \"ReportingTimeRangeOptions\":{\n            \"TimeRangesInDays\": [30, 60, 90, 180]\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Delete a CustomTableRow Record in C#\nDESCRIPTION: This code snippet demonstrates how to delete a record from a SQL table using the CustomTableRow object. It first loads the record using its primary key and then calls the Delete() method to remove it. Requires Mediachase.BusinessFoundation.Data.Sql namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-sql-records.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n// Step 1. Load book{color}\n    PrimaryKeyId bookPk = 1;\n    CustomTableRow book = new CustomTableRow(bookTable, bookPk);\n    \n    // Step 2. Delete book{color}\n    book.Delete();\n\n```\n\n----------------------------------------\n\nTITLE: Creating a New Table in C#\nDESCRIPTION: Illustrates how to create a new table with an integer primary key using the CreateTable method of the Database class. It defines the table name and creates a primary key column using Column.CreatePrimaryKey, specifying the data type and auto-increment option. This requires an initialized SqlContext.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n// Create table\n    Table newTable = SqlContext.Current.Database.CreateTable(\"Table_1\", Column.CreatePrimaryKey(\"Id\", System.Data.SqlDbType.Int, true));\n```\n\n----------------------------------------\n\nTITLE: Add Custom Attribute - JavaScript\nDESCRIPTION: This snippet adds a custom attribute, specifically the market ID, to the `packageTrackingData` object. The `Market.getSelectedMarketId()` function is used to retrieve the currently selected market ID, which is then added to the `customAttributes` property of the tracking data. This allows for segmenting recommendations based on the user's market.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_6\n\nLANGUAGE: JavaScript\nCODE:\n```\npackageTrackingData[\"customAttributes\"] = { 'marketId': Market.getSelectedMarketId() };\n```\n\n----------------------------------------\n\nTITLE: Removing Bundle Entry (Duplicated) in C#\nDESCRIPTION: This is a duplicate of the Remove Bundle Entry snippet, demonstrating the removal of a BundleEntry using provided ContentReferences and the IRelationRepository.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\npublic void RemoveBundleEntry(ContentReference referenceToBundle, ContentReference referenceToProductOrVariation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Define a relation matching the one to remove, or use\n        // GetRelations to find the one you want to remove and pass that to\n        // RemoveRelation\n        var relationToRemove = new BundleEntry\n          {\n            Parent = referenceToBundle,\n            Child = referenceToProductOrVariation\n          };\n    \n        // Removes matching BundleEntry, or no action if no match exists\n        relationRepository.RemoveRelation(relationToRemove);\n      }\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Recommendations - Empty Recs Array in SmartRecs\nDESCRIPTION: This JSON snippet represents a response where the smartRecs array contains a widget, but the recs array within the widget is empty, indicating that no specific recommendations are being returned. Possible causes include locale mismatches, out-of-stock products, or merchandising campaign configuration issues.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n              \"session\"        : {\n                                   \"session\" : \"122289928212|jVsQ4-z8Shoq9p-Ufs905rzXtsfq6984fkbdEnfokEY\",\n                                   \"cuid\"    : \"76872594962|oLDX68UmK-zsvRYWWsXkND1W3Nofo9fFILiCv4KvwpQ\"\n                                 },\n              \"pageTrackingId\" : \"876615918262|uAjKdc4kr1KBRwwSiK1_Rw\",\n              \"smartRecs\"      : [\n                                   {\n                                     \"widget\"   : \"homeWidget\",\n                                     \"alias\"    : \"\",\n                                     \"position\" : \"homeWidget\",\n                                     \"recs\"     : []\n                                   }\n                                 ],\n              \"status\"         : \"OK\"\n            }\n```\n\n----------------------------------------\n\nTITLE: Register CustomerContactListProperty\nDESCRIPTION: This C# code registers a PropertyList for CustomerContact objects using the PropertyDefinitionTypePlugIn attribute. This allows the creation of editable lists of CustomerContact objects in Optimizely.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/properties.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[PropertyDefinitionTypePlugIn]\n    public class CustomerContactListProperty : PropertyList<CustomerContact>\n      {\n      }\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting PeeriusCallbacks.smartRecs JavaScript API\nDESCRIPTION: This snippet refers to the callback function PeeriusCallbacks.smartRecs used in JavaScript API integrations for Optimizely Recommendations. It's used to verify if recommendations are being returned. If recommendations are not returned, contacting Optimizely support is suggested.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_9\n\nLANGUAGE: javascript\nCODE:\n```\n`PeeriusCallbacks.smartRecs`\n```\n\n----------------------------------------\n\nTITLE: Retrieving Shipping Package Information using ShippingMethodDto C# (Duplicated)\nDESCRIPTION: This is a duplicate code snippet that retrieves package information for a given shipping provider using the ShippingMethodDto. It iterates through shipping options (providers), retrieves associated package rows, and then retrieves individual package details such as length, height, width, and description.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shipping-gateways-and-providers.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nMediachase.Commerce.Orders.Dto.ShippingMethodDto shippingMethods =\n      Mediachase.Commerce.Orders.Managers.ShippingManager.GetShippingMethods(\"en-us\");\n    \n    foreach(System.Data.DataRow row in shippingMethods.ShippingOption.Rows)\n      {\n        // A shipping option is a shipping provider\n        Mediachase.Commerce.Orders.Dto.ShippingMethodDto.ShippingOptionRow shippingProviderRow =\n          (Mediachase.Commerce.Orders.Dto.ShippingMethodDto.ShippingOptionRow)row;\n    \n        // now you have access to packages associated with the shipping provider\n        Mediachase.Commerce.Orders.Dto.ShippingMethodDto.ShippingPackageRow[] packageRows =\n          shippingProviderRow.GetShippingPackageRows();\n    \n        //now you have access to the packages' names and id's\n        //packageRows[0].ShippingPackageId\n        //packageRows[0].PackageName\n    \n        //now you can retrieve the individual Package row with additional information\n        Mediachase.Commerce.Orders.Dto.ShippingMethodDto method =Mediachase.Commerce.Orders.Managers.ShippingManager.GetShippingPackage(packageRows[0].PackageId);\n    \n        //the GetShippingPackage method just populates the Package table with the applicable shipping package\n        if (method.Package.Rows.Count > 0)\n          {\n            Mediachase.Commerce.Orders.Dto.ShippingMethodDto.PackageRow packageRow =\n              (Mediachase.Commerce.Orders.Dto.ShippingMethodDto.PackageRow)method.Package.Rows[0];\n    \n            //here we can retrieve the package properties\n            //packageRow.Length\n            //packageRow.Height\n            //packageRow.Width\n            //packageRow.Description\n        }\n      }\n```\n\n----------------------------------------\n\nTITLE: Incorrect Currency Rounding\nDESCRIPTION: This code snippet demonstrates the incorrect way to round currency values using Math.Round() in Optimizely Commerce Connect.  It assigns the rounded value to a Money object, which may lead to incorrect precision based on the currency. The currentCurrency variable represents the currency being used.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/rounding-totals-for-currencies.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\nvar currentCurrency = “JPY” \n    Money itemPrice = new Money(Math.Round(lineItem.ListPrice, 2), currentCurrency);\n```\n\n----------------------------------------\n\nTITLE: Dropping a Table in C#\nDESCRIPTION: Demonstrates how to drop a table using the DropTable method of the Database class. It first retrieves the table object by name from the Database.Tables collection and then calls DropTable, passing the table object. The method removes the table definition, data, indexes, and constraints. You cannot drop a table referenced by a FOREIGN KEY constraint or a system table.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n// Find table\n    Table table = SqlContext.Current.Database.Tables[\"Table_1\"];\n    // Drop table\n    SqlContext.Current.Database.DropTable(table);\n```\n\n----------------------------------------\n\nTITLE: Modifying Facet Groups C#\nDESCRIPTION: This snippet demonstrates how to modify existing facet groups using a custom FacetGroupModifier class. It overrides the ModifyFacetGroups method to adjust the ItemsToShow property of a specific facet group.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\npublic class CustomFacetGroupModifier : FacetGroupModifier\n      {\n        public override IEnumerable<FacetGroup> ModifyFacetGroups(IEnumerable<FacetGroup> facetGroups)\n          {\n            var marketFacetGroup = facetGroups.FirstOrDefault(f => f.Id == CampaignFacetConstants.MarketGroupId);\n            if (marketFacetGroup != null)\n              {\n                marketFacetGroup.Settings.ItemsToShow = 4;\n              }\n            return facetGroups;\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Check If Order Has Awaiting Stock Returns C#\nDESCRIPTION: This code snippet demonstrates how to determine if a purchase order has any awaiting stock returns using the `IPurchaseOrderExtensions`. It loads a purchase order by its ID and then calls the `HasAwaitingStockReturns()` extension method on the `purchaseOrder` instance.  This requires resolving dependencies for `IOrderRepository`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\nIOrderRepository orderRepository;\n    (…)\n    var orderGroupId = 123;\n    var purchaseOrder = orderRepository.Load<PurchaseOrder>(orderGroupId);\n    var awaitingStockReturns = purchaseOrder.HasAwaitingStockReturns();\n```\n\n----------------------------------------\n\nTITLE: Troubleshooting Recommendations - Empty SmartRecs Array\nDESCRIPTION: This JSON snippet represents a response where recommendations are disabled, indicated by an empty smartRecs array. This might be due to the \"smartProducts\" : [] flag being used or the CommerceTrackingData.SkipRecommendations() function being called in native integrations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n          \"session\"        : {\n                               \"session\" : \"122289928212|jVsQ4-z8Shoq9p-Ufs905rzXtsfq6984fkbdEnfokEY\",\n                               \"cuid\"    : \"76872594962|oLDX68UmK-zsvRYWWsXkND1W3Nofo9fFILiCv4KvwpQ\"\n                             },\n          \"pageTrackingId\" : \"876615918262|uAjKdc4kr1KBRwwSiK1_Rw\",\n          \"smartRecs\"      : [],\n          \"status\"         : \"OK\"\n        }\n```\n\n----------------------------------------\n\nTITLE: Applying CommerceTracking Attribute (C#)\nDESCRIPTION: This snippet demonstrates how to apply the CommerceTracking attribute to an action (Index) in the StartController. This attribute automatically handles the tracking of user activity on the home page (TrackingType.Home). The ellipsis indicates that other code exists within the action.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\n[CommerceTracking(TrackingType.Home)]\n    public ViewResult Index(StartPage currentPage)\n      {\n        ...\n      }\n```\n\n----------------------------------------\n\nTITLE: Deleting Meta-fields in Optimizely Commerce Connect\nDESCRIPTION: This code snippet demonstrates how to delete a meta-field using the Mediachase.MetaDataPlus.Configurator.MetaField.Delete method. It loads the meta-field by name using Mediachase.MetaDataPlus.Configurator.MetaField.Load and then deletes it using its ID.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metadata-plus.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar metaField = Mediachase.MetaDataPlus.Configurator.MetaField.Load(OrderContext.MetaDataContext, \"BidPrice\");\n    Mediachase.MetaDataPlus.Configurator.MetaField.Delete(OrderContext.MetaDataContext, metaField.Id);\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar metaField = Mediachase.MetaDataPlus.Configurator.MetaField.Load(OrderContext.MetaDataContext, \"BidPrice\");\n    Mediachase.MetaDataPlus.Configurator.MetaField.Delete(OrderContext.MetaDataContext, metaField.Id);\n```\n\n----------------------------------------\n\nTITLE: Calculating Taxes\nDESCRIPTION: This code snippet illustrates the correct way to calculate sales taxes using the Currency.Percentage() method in Optimizely Commerce Connect. It filters taxes based on TaxType.SalesTax and then sums the tax amount for each item by applying the currency's percentage calculation, ensuring a correctly rounded tax amount for the order. The billingCurrency variable determines the currency used for the percentage calculation.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/rounding-totals-for-currencies.md#_snippet_3\n\nLANGUAGE: csharp\nCODE:\n```\nvar billingCurrency = order.Currency;\n    var saleTaxesAmount = taxes\n      .Where(x => x.TaxType == TaxType.SalesTax)\n      .Sum(x => billingCurrency.Percentage(itemPriceWithoutTax, x.Percentage));\n```\n\n----------------------------------------\n\nTITLE: Removing Package Entry (Duplicated) in C#\nDESCRIPTION: This is a duplicate of the Remove Package Entry snippet, demonstrating the removal of a PackageEntry using provided ContentReferences and the IRelationRepository.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic void RemovePackageEntry(ContentReference referenceToPackage, ContentReference referenceToPackageOrVariation)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Define a relation matching the one to remove, or use\n        // GetRelations to find the one you want to remove and pass that to\n        // RemoveRelation\n        var relationToRemove = new PackageEntry\n          {\n            Parent = referenceToPackage,\n            Child = referenceToPackageOrVariation\n          };\n    \n        // Removes matching PackageEntry, or no action if no match exists\n        relationRepository.RemoveRelation(relationToRemove);\n      }\n```\n\n----------------------------------------\n\nTITLE: Customizing Entry Information with IEntryInformation in C# (Duplicated)\nDESCRIPTION: This code demonstrates how to implement the IEntryInformation interface in Optimizely Commerce to customize the properties displayed in search results. It retrieves custom properties like Size and Color for a variant and constructs a product URL with a variation code parameter. Requires IRelationRepository and IUrlResolver for retrieving product relations and generating URLs respectively. This is a duplicated code snippet.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extend-search-result-display.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic class CustomEntryInformation : IEntryInformation\n    {\n        IRelationRepository _relationRepository = ServiceLocation.ServiceLocator.Current.GetInstance<IRelationRepository>();\n        IUrlResolver _urlResolver = ServiceLocation.ServiceLocator.Current.GetInstance<IUrlResolver>();\n    \n        IEntryInformation _defaultImplementation;\n        public CustomEntryInformation(IEntryInformation defaultImplementation)\n        {\n            _defaultImplementation = defaultImplementation;\n        }\n    \n        public IDictionary<string, string> GetCustomProperties(EntryContentBase entry)\n        {\n            var myVariant = entry as MyVariant;\n            if (myVariant == null)\n            {\n                return _defaultImplementation.GetCustomProperties(entry);\n            }\n    \n            return new Dictionary<string, string>() {\n                { nameof(myVariant.Size), myVariant.Size.ToString() },\n                { nameof(myVariant.Color), myVariant.Color } };\n         }\n    \n         public string GetProductUrl(EntryContentBase entry)\n         {\n             var productLink = entry is VariationContent ?  \n             entry.GetParentProducts(_relationRepository).FirstOrDefault() : entry.ContentLink;\n             if (productLink == null)\n             {\n                return string.Empty;\n             }\n    \n             var urlBuilder = new UrlBuilder(_urlResolver.GetUrl(productLink));\n             if (entry.Code != null)\n             {\n                urlBuilder.QueryCollection.Add(\"variationCode\", entry.Code);\n             }\n    \n             return urlBuilder.ToString();\n         }\n    }\n    \n    public class MyVariant : VariationContent\n    {\n        public virtual int Size { get; set; }\n        public virtual string Color { get; set; }\n        public virtual int IntegrationCode { get; set; }\n    }\n```\n\n----------------------------------------\n\nTITLE: Referencing EPiServer.Personalization.Commerce for Output Caching\nDESCRIPTION: This snippet references the EPiServer.Personalization.Commerce package, specifically in the context of output caching for pages displaying recommendations. Version 2.1.0 or later of this package is required to use the client-side tracking API when output caching is enabled.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_10\n\nLANGUAGE: csharp\nCODE:\n```\n`EPiServer.Personalization.Commerce`\n```\n\n----------------------------------------\n\nTITLE: Configuring ODPJob via Configuration File Before 14.20.0 (JSON)\nDESCRIPTION: This JSON snippet shows the configuration structure for ODP before version 14.20.0, focusing on `MarketKeys` which includes `MarketId`, `AccessKey`, and `EndpointUrl`.  This configuration is applied through the configuration file of the application.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customized-commerce-odp.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"EPiServer\" : {\n    \"Commerce\" : {\n       \"ODPJob\": {\n        \"MarketKeys\": [\n          {\n            \"MarketId\": \"US\",\n            \"AccessKey\": \"key\",\n            \"EndpointUrl\": \"https://api.zaius.com/\"\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Implementing Search Index Builder Interface (C#)\nDESCRIPTION: This code defines the `ISearchIndexBuilder` interface for creating custom search indexers in Optimizely Commerce Connect.  It specifies methods for building and updating the search index, as well as properties for accessing the `SearchManager` and `Indexer`.  The interface allows for full or incremental index rebuilds.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customizing-search.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n/// <summary>\n    /// Search Index Builder Interface.\n    /// </summary>\n    public interface ISearchIndexBuilder\n      {\n        /// <summary>\n        /// An event handler for progress message events.\n        /// </summary>\n        event SearchIndexHandler SearchIndexMessage;\n    \n        /// <summary>\n        /// Gets or sets the manager.\n        /// </summary>\n        /// <value>The manager.</value>\n        SearchManager Manager { get; set; }\n    \n        /// <summary>\n        /// Gets or sets the build indexer.\n        /// </summary>\n        /// <value>The build indexer.</value>\n        IndexBuilder Indexer { get; set; }\n    \n        /// <summary>\n        /// Builds the index.\n        /// </summary>\n        /// <param name=\"rebuild\">if set to <c>true</c> the full rebuild will be done, if not. The last build date will be used.</param>\n        void BuildIndex(bool rebuild);\n    \n        /// <summary>\n        /// Updates the specified items in the index.\n        /// </summary>\n        /// <param name=\"itemIds\">The ids of the items to update.</param>\n        /// <returns>True if successful; otherwise, false.</returns>        \n        bool UpdateIndex(IEnumerable<int> itemIds);\n      }\n```\n\n----------------------------------------\n\nTITLE: Calculating Tax Total in Order Form - C#\nDESCRIPTION: This code snippet overrides the `CalculateTaxTotal` method in an order form calculator. It sets the tax total to zero, regardless of the order form, market, or currency.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_10\n\nLANGUAGE: C#\nCODE:\n```\nprotected override Money CalculateTaxTotal(IOrderForm orderForm, IMarket market, Currency currency)\n              {\n                return new Money(0, currency);\n              }\n```\n\n----------------------------------------\n\nTITLE: Listing Bundle/Package Entries with IRelationRepository (C#)\nDESCRIPTION: Retrieves entries from a bundle or package using the IRelationRepository.GetChildren method.  The method returns an IEnumerable of BundleEntry or PackageEntry objects. The ContentReference of the bundle or package is required as input. The ServiceLocator is used to resolve the IRelationRepository instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/bundles-and-packages.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\n// Retrieve entries from a bundle \n    public IEnumerable<BundleEntry> ListBundleEntries(ContentReference referenceToBundle)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Relations to bundle entries are of type BundleEntry\n        var bundleEntries = relationRepository.GetChildren<BundleEntry>(referenceToBundle);\n        return bundleEntries;\n      }\n    \n    // Retrieve entries from a package\n    public IEnumerable<PackageEntry> ListPackageEntries(ContentReference referenceToPackage)\n      {\n        var relationRepository = ServiceLocator.Current.GetInstance<IRelationRepository>();\n    \n        // Relations to package entries are of type PackageEntry\n        var packageEntries = relationRepository.GetChildren<PackageEntry>(referenceToPackage);\n        return packageEntries;\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating a Recommendations View (_Recommendations.cshtml)\nDESCRIPTION: This code snippet defines a partial view, Views/Recommendations/_Recommendations.cshtml, which iterates through a collection of product recommendations (passed in through the Model) and renders them.  Each product is displayed using the _Product partial view, passing in the product's TileViewModel.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/server-side-api-integration.md#_snippet_1\n\nLANGUAGE: cshtml\nCODE:\n```\n@model EPiServer.Reference.Commerce.Site.Features.Recommendations.ViewModels.RecommendationsViewModel\n    @foreach (var product in Model.Products)\n      {\n        <div class=\"jsProductTile product-row__tile\" data-recommendation-id=\"@product.RecommendationId\">\n            @Html.Partial(\"_Product\", product.TileViewModel)\n        </div>\n      }\n```\n\n----------------------------------------\n\nTITLE: Install Episerver CLI Tool globally\nDESCRIPTION: This command installs the Episerver CLI Tool globally using the dotnet tool install command. It adds a specific NuGet source for Optimizely packages. Requires .NET SDK to be installed and configured to access NuGet packages.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/setting-up-your-development-environment.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\ndotnet tool install EPiServer.Net.Cli --global --add-source https://nuget.optimizely.com/feed/packages.svc/\n```\n\n----------------------------------------\n\nTITLE: Using SqlBlobStream to Read BLOB Data in C#\nDESCRIPTION: This code snippet demonstrates how to use the SqlBlobStream class to read Binary Large Object (BLOB) data from a SQL table. It creates a SqlBlobStream object, reads data from the stream in chunks, and handles any exceptions that occur. Requires System.Data.SqlClient namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-sql-records.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\nstrConnectionString = \"Data source=(local);Initial catalog=TestDB;User Id=sa;Password=\";\n    string strSqlTable = \"Files\";\n    string strBLOBColumn = \"Data\";\n    \n    try\n      {\n        using(SqlBlobStream stream = new SqlBlobStream(strConnectionString,\n        strSqlTable,\n        strBLOBColumn,\n        SqlBlobAccess.Read, new SqlParameter(\"@FileId\", 12345)))\n          {\n            byte[] tmpBuffer = new byte[1024];\n            int Length = 0;\n            while ((Length = stream.Read(buffer, 0, 1024)) == 1024)\n              {\n                //Save tmpBuffer\n              }\n          }\n      }\n    catch (Exception ex)\n      {\n        System.Diagnostics.Trace.WriteLine(ex);\n        throw;\n      }\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Output Caching in applicationSettings\nDESCRIPTION: This snippet mentions the 'applicationSettings' element, specifically 'httpCache'-prefixed settings, for controlling output caching.  This caching mechanism does not apply to authenticated users. Using output caching impacts the server-side tracking API which can affect displaying personalized recommendations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n`applicationSettings`\n```\n\n----------------------------------------\n\nTITLE: Configuring EnsurePublishedVersionInAllLanguages in appsettings.json (JSON)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `EnsurePublishedVersionInAllLanguages` setting within the `CatalogOptions` section of the `appsettings.json` file.  Setting it to `false` requires users to manually publish content; setting it to `true` automatically generates published versions in all languages if one version is already published.  This setting affects how content publishing is handled within Optimizely Commerce Connect.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/publish-content-version-setting.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"CatalogOptions\": {\n    \"EnsurePublishedVersionInAllLanguages\": false\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Cart Item with AJAX in JavaScript\nDESCRIPTION: This JavaScript snippet handles the AJAX request to add an item to the cart, including the selected dynamic package items. It retrieves the SKU code and the values from the DynamicPackageListItems dropdowns, then sends a POST request to the server with the product code and selected items.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\naddCartItem: function (e) {\n\n    e.preventDefault();\n    var form = $(this).closest(\"form\");\n    var formContainer = $(\"#\" + form.data(\"container\"));\n    var skuCode = $(\"#code\", form).val();\n\n    $(\"#CartWarningMessage\").hide()\n    $(\".warning-message\", $(\"#CartWarningMessage\")).html(\"\");\n\n    var selectedItems = new Array();\n    $('select[name=\"DynamicPackageListItems\"]').each(function () {\n        selectedItems.push($(this).val());\n    });\n\n    $.ajax({\n        type: \"POST\",\n        url: form[0].action,\n        data: { code: skuCode, selectedPackageItems: selectedItems },\n        traditional: true,\n        success: function (result) {\n\n            formContainer.html($(result));\n            $('.cartItemCountLabel', formContainer.parent()).text($('#CartItemCount', formContainer).val());\n            $('.cartTotalAmountLabel', formContainer.parent()).text($('#CartTotalAmount', formContainer).val());\n\n            formContainer.change();\n        },\n        error: function (xhr, status, error) {\n            $(\".warning-message\", $(\"#CartWarningMessage\")).html(xhr.statusText);\n            $(\"#CartWarningMessage\").show();\n        }\n    });\n},\n```\n\n----------------------------------------\n\nTITLE: Overriding Default Validation (Duplicate) - C#\nDESCRIPTION: A duplicate of the previous C# code snippet demonstrating how to extend the `DefaultOrderFormCalculator` and override validation methods to implement custom validation logic for order form calculations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_12\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderFormCalculatorOverridingDefault : DefaultOrderFormCalculator\n      {\n        public OrderFormCalculatorOverridingDefault(IShippingCalculator shippingCalculator, ITaxCalculator taxCalculator)\n          : base(shippingCalculator, taxCalculator)\n          { }\n        protected override void ValidateTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Order total must be greater than 0\");\n              }\n          }\n        protected override void ValidateSubtotal(Money money)\n          {\n        \tif (money.Amount <= 0)\n              {\n        \t    throw new ValidationException(\"Subtotal must be greater than 0\");\n        \t  }\n          }\n        protected override void ValidateHandlingTotal(Money money)\n          {\n        \tif (money.Amount <= 0)\n              {\n        \t    throw new ValidationException(\"Handling total must be greater than 0\");\n        \t  }\n          }\n        protected override void ValidateShippingSubTotal(Money money)\n          {\n        \tif (money.Amount <= 0)\n              {\n        \t    throw new ValidationException(\"Shipping subtotal must be greater than 0\");\n        \t  }\n          }\n        protected override void ValidateTaxTotal(Money money)\n          {\n        \tif (money.Amount <= 0)\n           \t  {\n         \t    throw new ValidationException(\"Tax total must be greater than 0\");\n        \t  }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Getting MetaClass Collection in Optimizely (C#)\nDESCRIPTION: This code snippet demonstrates how to retrieve a collection of MetaClass objects from the MetaClassManager in Optimizely. It iterates through the MetaClasses collection and writes each MetaClass name to the trace. It requires access to the DataContext to retrieve the MetaModel.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metaclass-class.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\n// Get MetaModel\n    MetaClassManager metaModel = DataContext.Current.MetaModel;\n    // Step 3. Enum meta-classes\n    foreach (MetaClass mc in metaModel.MetaClasses)\n      {\n        Trace.WriteLine(mc.Name);\n      }\n```\n\n----------------------------------------\n\nTITLE: Removing a Column in C#\nDESCRIPTION: Demonstrates how to drop a column from a table using the DropColumn method of the Table class. It retrieves the column object by name from the Table.Columns collection and then calls DropColumn, passing the column object. Assumes 'newTable' is properly initialized and the column 'Title' exists.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\n// Step 5. Drop Columns\n    newTable.DropColumn(newTable.Columns[\"Title\"]);\n```\n\n----------------------------------------\n\nTITLE: Running Promotion Engine with Unit-Level Exclusion in C#\nDESCRIPTION: This code snippet shows how to call the PromotionEngine directly with unit-level exclusion enabled. It retrieves a cart, then runs the promotion engine with a PromotionEngineSettings object that sets the ExclusionLevel to Unit. This prevents conflicting promotions from being applied at the item level.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotion-exclusions.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nvar cart = ServiceLocator.Current.GetInstance<IOrderRepository>().LoadOrCreateCart<Cart>(PrincipalInfo.CurrentPrincipal.GetContactId(), Cart.DefaultName);\nServiceLocator.Current.GetInstance<IPromotionEngine>().Run(cart, new PromotionEngineSettings() { ExclusionLevel = ExclusionLevel.Unit });\n```\n\n----------------------------------------\n\nTITLE: Retrieving Child Organizations with CustomerContext in C# (Duplicated)\nDESCRIPTION: This C# snippet demonstrates how to retrieve a list of child organizations for a given parent organization using the EntityObject and CustomerContext.Current.GetOrganizationById() methods.  It iterates through the children of a PartnerOrganization, casts each child to an EntityObject, and then retrieves the corresponding Organization object using its PrimaryKeyId. The resulting list of organizations is stored in PartnerOrganizations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/customers.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nList<Organization> PartnerOrganizations = new List<Organization>();\n    foreach (object child in PartnerOrganization.GetChildren())\n      {\n        EntityObject obj = child as EntityObject;\n        Organization org = CustomerContext.Current.GetOrganizationById(obj.PrimaryKeyId.Value);\n    \n        if (org != null)\n          {\n            PartnerOrganizations.Add(org);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Exclude CatalogContentBase from Indexing in Optimizely\nDESCRIPTION: This code snippet demonstrates how to prevent objects inheriting from CatalogContentBase from being indexed in Optimizely Search & Navigation. It overrides the ApplyConventions method to set the ShouldIndex property to false for instances of CatalogContentBase.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-poco-objects-instead-of-catalogcontentbase.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n        public override void ApplyConventions(IClientConventions clientConventions)\n          {\n            base.ApplyConventions(clientConventions);\n            ContentIndexer.Instance.Conventions.ForInstancesOf<CatalogContentBase>().ShouldIndex(x => false);\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Creating a Table within a SQL Transaction Scope in C# (duplicate)\nDESCRIPTION: This C# snippet demonstrates how to create a new table within a SQL transaction scope using SqlTransactionScope. It initializes the SqlContext, begins a transaction, gets the database, creates a table named 'Book', and commits the transaction. Requires a valid connection string.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\n// Step 1. Initiaze Sql Meta Model\n    using (SqlContext.Current = new SqlContext(connectionString))\n      {\n        using (SqlTransactionScope tran = SqlContext.Current.BeginTransaction())\n          {\n            // Step 2. Get Database\n            Database database = SqlContext.Current.Database;\n            // Step 3. Create a new table - Book\n            Table bookTable = database.CreateTable(\"Book\", Column.CreatePrimaryKey(\"Id\", System.Data.SqlDbType.Int, true));\n            // Step N. Call Commit to commit transaction\n            tran.Commit();\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Configuring EnsurePublishedVersionInAllLanguages in appsettings.json (CatalogOptions)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `EnsurePublishedVersionInAllLanguages` setting within the `CatalogOptions` section of the `appsettings.json` file.  Setting it to `false` requires users to manually publish content; setting it to `true` automatically generates published versions in all languages if one version is already published.  This setting affects how content publishing is handled within Optimizely Commerce Connect.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/publish-content-version-setting.md#_snippet_2\n\nLANGUAGE: JSON\nCODE:\n```\n\"CatalogOptions\": {\n  \"EnsurePublishedVersionInAllLanguages\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Registering CatalogContentClientConventions in Initialization Module (Commerce 10-13)\nDESCRIPTION: Registers a custom implementation of `CatalogContentClientConventions` named `SiteCatalogContentClientConventions` in an initialization module by overriding the default conventions. This snippet is applicable for Commerce versions 10-13 and ensures the custom conventions are used when the application initializes. Requires `FindCommerceInitializationModule` dependency.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[InitializableModule]\n    [ModuleDependency(typeof(FindCommerceInitializationModule))]\n    public class InitializationModule : IConfigurableModule\n      {\n        public void Initialize(InitializationEngine context)\n          {\n          }\n        public void Uninitialize(InitializationEngine context)\n          {\n          }\n        public void ConfigureContainer(ServiceConfigurationContext context)\n          {\n            context.Services.AddTransient<CatalogContentClientConventions, SiteCatalogContentClientConventions>();\n          }\n      }\n    public class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n      }\n```\n\n----------------------------------------\n\nTITLE: Removing a Relationship in C#\nDESCRIPTION: Demonstrates how to drop a relationship using the DropRelation method of the Database class. It takes the relationship object as a parameter. Requires an initialized SqlContext and a valid relationship object.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/sql-meta-model.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\n// Step 5. Drop RelationShip\n    SqlContext.Current.Database.DropRelation(relationship);\n```\n\n----------------------------------------\n\nTITLE: Currency Field Validator in Optimizely (C#)\nDESCRIPTION: This C# code defines a custom validator class, CurrencyFieldValidator, inheriting from BaseFieldValidator. It checks if a field value is a valid currency, allowing or disallowing null values based on the AllowNull property. If the value is not a decimal and AllowNull is false, an error message is generated.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metaclass-class.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nusing System;\n    using System.Collections.Generic;\n    using System.Text;\n    using System.Text.RegularExpressions;\n    using System.Reflection;\n    using System.Globalization;\n    \n    namespace Mediachase.BusinessFoundation.Data\n      {\n        /// <summary>\n        /// Represents a currency field validator.\n        /// </summary>\n    \n        public class CurrencyFieldValidator : BaseFieldValidator\n          {\n            private bool _allowNull = true;\n            public CurrencyFieldValidator()\n              {\n              }\n            public bool AllowNull\n              {\n                get { return _allowNull; }\n                set { _allowNull = value; }\n              }\n    \n            protected override bool EvaluateIsValid()\n              {\n                object fieldValue = base.GetValue();\n                // Check Null\n                if (fieldValue == null && !this.AllowNull)\n                  {\n                    base.ErrorMessage = string.Format(CultureInfo.InvariantCulture, \"The '{0}' field doesn't allow null.\", this.FieldName);\n                    return false;\n                  }\n    \n                if (fieldValue == null)\n                return true;\n    \n                // Check Type\n                if (fieldValue.GetType() != typeof(Decimal))\n                  {\n                    base.ErrorMessage = string.Format(CultureInfo.InvariantCulture, \"Wrong type '{1}'. '{0}' field expects decimal.\", this.FieldName, \n                    fieldValue.GetType().GetType());\n                    return false;\n                  }\n                return true;\n              }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Tracking Product with RecommendationId (JavaScript)\nDESCRIPTION: This JavaScript code snippet tracks product views and includes the RecommendationId if available in the query string. It extracts the refCode and productName, creates a product tracking data object, and sets the RecommendationId. It then calls the epiRecommendations.track function to send the tracking data.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\n<script>\n      $(document).ready(function ()\n        {\n          var refCode = '@Model.Product.Code';\n          var productName = '@Model.Product.Name';\n          var productTrackingData = TrackingDataFactory.createProductTrackingData(refCode, productName);\n          productTrackingData[\"SkipRecommendations\"] = true;\n          var recommendationId =  parseInt(isNaN('@Request.QueryString[\"recommendationId\"]')? '0': '@Request.QueryString[\"recommendationId\"]');\n          if (recommendationId > 0) \n            {\n              productTrackingData[\"recommendationId\"] = recommendationId;\n            }\n          productTrackingData[\"customAttributes\"] = { 'marketId': Market.getSelectedMarketId() };\n          epiRecommendations.track(productTrackingData);\n        });\n    </script>\n```\n\n----------------------------------------\n\nTITLE: Accessing Order Metadata (Legacy) in Optimizely Commerce (C#)\nDESCRIPTION: This legacy snippet demonstrates how to access order metadata using the older `OrderContext` API in Optimizely Commerce. It retrieves data from cart, order form, payment, and shipment meta-fields. Note that this example might not be compatible with newer versions of Optimizely Commerce that have deprecated `OrderContext`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extending-order-classes.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nCart newCart = OrderContext.Current.GetCart(\"myname\", newCustomer);\n    //This is the meta field data access\n    string myCartField = newCart[\"myField\"].ToString();\n    string orderformField = newCart.OrderForms[0][\"myOrderFormField\"].ToString();\n    string paymentField = newCart.OrderForms[0].Payments[0][\"myPaymentField\"].ToString();\n    string shipmentField = newCart.OrderForms[0].Shipments[0][\"myShipmentField\"].ToString();\n```\n\n----------------------------------------\n\nTITLE: Initializing FacetItem C#\nDESCRIPTION: This code illustrates the constructor for the FacetItem class, representing a single filterable item within a facet group. It takes an ID, a name, and an optional icon class to define the item's properties and appearance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\npublic FacetItem(string id, string name, string iconClass = \"\")\n      {\n        Id = id; // the id of facet item that display in the url as a value\n        Name = name; // the name of facet item that shown in the facets widget\n        IconClass = iconClass; // the css class that determining the icon of facet item. Default it's empty\n      }\n```\n\n----------------------------------------\n\nTITLE: Generating Classes with McCodeGen Tool\nDESCRIPTION: This snippet demonstrates how to use the McCodeGen.exe tool to generate a new class based on the specified template and .mcgen file.\nIt is executed from the command line and takes the .mcgen file as input and outputs a .cs file.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/generating-typed-business-foundation-classes.md#_snippet_0\n\nLANGUAGE: CommandLine\nCODE:\n```\nmccodegen -mcgen:<mcgen_file> -out:<output_file>\nFor example: mccodegen -mcgen:GiftCard.mcgen -out:GiftCardAccess.cs\n```\n\n----------------------------------------\n\nTITLE: Campaign Partial View Razor\nDESCRIPTION: This code defines a Razor view to display a `SalesCampaign`. It renders the campaign name as a heading and the description as a subheading using HTML helpers.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/marketing.md#_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n@using EPiServer.Core\n    @using EPiServer.Web.Mvc.Html\n    \n    @model EPiServer.Commerce.Marketing.SalesCampaign\n    \n    <h1>\n        @Html.DisplayFor(m => m.Name)\n    </h1>\n    <h3>\n        @Html.PropertyFor(m => m.Description)\n    </h3>\n```\n\n----------------------------------------\n\nTITLE: Registering Custom Meta Object Types in XML (Commerce 10-13)\nDESCRIPTION: This XML configuration snippet demonstrates how to register custom meta-object types by specifying the Installer and Binder classes within the mediachase.businessFoundation.data/metaObject/types section of the application's config file for versions 10-13.  The Installer handles the creation of SQL columns and the Binder handles the conversion of SQL values to Meta-field values.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metatype-class.md#_snippet_3\n\nLANGUAGE: xml\nCODE:\n```\n<mediachase.businessFoundation.data>\n    <metaObject>\n      <types>\n        <add name=\"CustomType\" installer=\"\" binder=\"\" />*\n      </types>\n```\n\n----------------------------------------\n\nTITLE: Register Custom Facet Store - JavaScript\nDESCRIPTION: This JavaScript code snippet registers a custom facet store and overrides the existing \"epi.commerce.facet\" store using a module initializer. It defines a module that removes the existing facet store and registers a custom facet store using the `epi.storeregistry` service.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_10\n\nLANGUAGE: javascript\nCODE:\n```\ndefine(\n          [\n            \"dojo/_base/declare\",\n            \"epi/_Module\",\n            \"epi/routes\"\n          ], \n          function (declare, _Module, routes) \n            {\n              return declare([_Module], \n                              {\n                                initialize: function () \n                                  {\n                                    this.inherited(arguments);\n                                    var registry = this.resolveDependency(\"epi.storeregistry\");\n                                    // remove existing facet store\n                                    if (registry.get(\"epi.commerce.facet\")) \n                                      {\n                                        delete registry._stores[\"epi.commerce.facet\"];\n                                      }\n                                    // register the custom facet\n                                    registry.create(\"epi.commerce.facet\", routes.getRestPath(\n                                      { moduleArea: \"app\", storeName: \"customfacet\" } ));\n                                  }\n                              }\n                            );\n            }\n              );\n```\n\n----------------------------------------\n\nTITLE: Initializing Order Context Events in C#\nDESCRIPTION: This code snippet demonstrates how to create an initialization module that subscribes to the OrderGroupUpdated and OrderGroupDeleted events in the OrderContext. The Initialize method subscribes to these events, and the Current_OrderGroupUpdated event handler executes the DoSomething method asynchronously using Task.Run to prevent blocking the main thread. This ensures that long-running operations do not impact the performance of the application.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-events.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleDependency(typeof(EPiServer.Commerce.Initialization.InitializationModule))] \n    public class OrderEventInitialization : IConfigurableModule \n      { \n        public void Initialize(InitializationEngine context) \n          {\n            OrderContext.Current.OrderGroupUpdated += Current_OrderGroupUpdated;\n            OrderContext.Current.OrderGroupDeleted += Current_OrderGroupUpdated; \n          }\n    \n        private void Current_OrderGroupUpdated(object sender, OrderGroupEventArgs e) \n          { \n             Task.Run(()=> DoSomething(sender as OrderGroup, e)); \n          } \n    \n        private void DoSomething(OrderGroup order, OrderGroupEventArgs e)\n          { \n          } \n      }\n```\n\nLANGUAGE: C#\nCODE:\n```\n[ModuleDependency(typeof(EPiServer.Commerce.Initialization.InitializationModule))] \n    public class OrderEventInitialization : IConfigurableModule \n      { \n        public void Initialize(InitializationEngine context) \n          {\n            OrderContext.Current.OrderGroupUpdated += Current_OrderGroupUpdated;\n            OrderContext.Current.OrderGroupDeleted += Current_OrderGroupUpdated; \n          }\n    \n        private void Current_OrderGroupUpdated(object sender, OrderGroupEventArgs e) \n          { \n             Task.Run(()=> DoSomething(sender as OrderGroup, e)); \n          } \n    \n        private void DoSomething(OrderGroup order, OrderGroupEventArgs e)\n          { \n          } \n      }\n```\n\n----------------------------------------\n\nTITLE: Initializing DataContext in C#\nDESCRIPTION: This code snippet demonstrates how to initialize the DataContext in the current thread using a connection string. It creates a new DataContext instance and sets it as the current context for the thread.  Ensure the connection string is accurate and the database is properly configured beforehand.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/business-meta-model.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\n// Step 0. Connection String\n string connectionString = \"Data Source=(local);Initial Catalog=TestDatabase;User ID=sa;Password=;\";\n // Step 1. Initiaze Sql Metamodel\n DataContext.Current = new DataContext(connectionString);\n```\n\n----------------------------------------\n\nTITLE: ODPJob Configuration After 14.20.0 (JSON)\nDESCRIPTION: This JSON snippet shows the configuration structure for the ODP integration after version 14.20.0 using a configuration file. It includes `SiteId`, `MarketIds`, `AccessKey`, `EndpointUrl`, `TrackingId`, and `S3Options` with fields such as `BucketName`, `AccessKeyId`, `SecretAccessKey`, and `Region`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/commerce-connect-14.md#_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"EPiServer\": {\n    \"Commerce\": {\n      \"ODPJob\": {\n        \"MarketKeys\": [\n          {\n            \"SiteId\": \"siteId\",\n            \"MarketIds\": [\"US\", \"SWE\"],\n            \"AccessKey\": \"key\",\n            \"EndpointUrl\": \"https://api.zaius.com/\",\n            \"TrackingId\": \"\",\n            \"S3Options\": {\n              \"BucketName\": \"\",\n              \"AccessKeyId\": \"\",\n              \"SecretAccessKey\": \"\",\n              \"Region\": \"ADD_REGION, SEE THE FOLLOWING NOTE\"\n            }\n          }\n        ]\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating Meta-Fields with MetaFieldBuilder in C#\nDESCRIPTION: This code snippet demonstrates how to use the MetaFieldBuilder class to create DateTime, Text, Guid, and Integer meta-fields. It uses a using statement to ensure proper disposal of the builder and calls SaveChanges to persist the changes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metafieldbuilder-class.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nusing (MetaFieldBuilder builder = new MetaFieldBuilder(metaClass))\n      {\n        builder.CreateDateTime(CreatedFieldName, CreatedFriendlyName, false, true);\n        builder.CreateText(CreatorFieldNameText, CreatorFriendlyName, false, 50, false);\n        builder.CreateGuid(CreatorFieldNameGuid, CreatorFriendlyName, false);\n        builder.CreateInteger(CreatorFieldNameInteger, CreatorFriendlyName, false, -1);\n        builder.SaveChanges();\n      }\n```\n\n----------------------------------------\n\nTITLE: Initializing OrderSearchOptions in C#\nDESCRIPTION: This snippet initializes the OrderSearchOptions class, setting properties for starting record, records to retrieve, and the namespace. These options are used to configure the order search.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\nOrderSearchOptions searchOptions = new OrderSearchOptions();\n    searchOptions.StartingRecord = 0; //or whatever you want to specify for paging purposes\n    searchOptions.RecordsToRetrieve = 10000; //or whatever you want to specify for paging purposes searchOptions.Namespace = \"Mediachase.Commerce.Orders\";\n```\n\n----------------------------------------\n\nTITLE: Recalculating Purchase and Exchange Orders in C#\nDESCRIPTION: This snippet shows how to recalculate both the purchase order and its associated exchange order (if one exists) using `OrderStatusManager` and `IOrderRepository`.  It first recalculates and saves the purchase order. Then, it checks if an exchange order exists, and if so, recalculates and saves the exchange order as well.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\nOrderStatusManager.RecalculatePurchaseOrder(purchaseOrder);\n            orderRepository.Service.Save(purchaseOrder);\n            var exchangeOrder = orderRepository.Service.Load<IPurchaseOrder>(purchaseOrder.ExchangeOrderGroupId.Value);\n            if (exchangeOrder != null)\n              {\n                OrderStatusManager.RecalculatePurchaseOrder((PurchaseOrder)exchangeOrder);\n                orderRepository.Service.Save(exchangeOrder);\n              }\n```\n\n----------------------------------------\n\nTITLE: CSV Asset File Example\nDESCRIPTION: This is an example of the CSV file structure required for mapping products/variants to assets. The first row defines column headers and subsequent rows define the mappings. The third column is optional and dictates asset sort order.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/asset-importer.md#_snippet_1\n\nLANGUAGE: CSV\nCODE:\n```\nVariation Code,Image ID\n    Jackets-Peacoats-Hooded,Jackets-Peacoats-Hooded.jpg\n    Jackets-Peacoats-Ruffle,Jackets-Peacoats-Ruffle.jpg\n    Jackets-Peacoats-Asymmetrical,Jackets-Peacoats-Asymmetrical.jpg\n    65990B,400x300.png\n    72008B,400x300.png\n    24215B,400x300.png\n    Fashion,400x300.png,0\n    Fashion,980x150.png,2\n    Fashion,980x300.png,1\n```\n\n----------------------------------------\n\nTITLE: AssetImporter Command Syntax\nDESCRIPTION: This is the general syntax for the AssetImporter command.  It specifies the order and optional parameters for importing assets into Optimizely Commerce Connect.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/asset-importer.md#_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nAssetImporter <mapping_asset_file> <asset_folder> <commerce_core_site_path> [asset_root] [-uselegacy] [-byasset] [-verbose]\n```\n\n----------------------------------------\n\nTITLE: Configure Catalog Feed Options in JSON\nDESCRIPTION: This JSON snippet configures catalog feed options within the web.config.  It includes settings for enabling event-driven catalog feed, setting the catalog feed batch size, calculating discounted prices, and setting the maximum number of products to process for incremental catalog feed.  These settings control the behavior of the catalog export job.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/exporting-your-catalog-to-episerver-perform.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"EPiServer\": {\n    \"Commerce\": {\n      \"CatalogFeedOptions\": {\n        \"EnableEventDrivenCatalogFeed\": true,\n        \"CatalogFeedBatchSize\": 50,\n        \"CalculateDiscountPrices\": true,\n        \"MaxEntryProcessForIncrementalCatalogFeed\": 10000\n      }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Creating a Return Shipment in C#\nDESCRIPTION: This code snippet shows how to create a return shipment for a purchase order's shipment using the IPurchaseOrderFactory. It retrieves instances of IPurchaseOrderFactory and IOrderRepository, loads a purchase order, gets the first shipment, and then creates the return shipment.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nvar purchaseOrderFactory = ServiceLocator.Current.GetInstance<IPurchaseOrderFactory>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n            var shipment = purchaseOrder.GetFirstShipment();\n            var returnShipment = purchaseOrderFactory.CreateReturnShipment(shipment);\n```\n\n----------------------------------------\n\nTITLE: Calculating Handling Total for Return Order Form in C#\nDESCRIPTION: This code snippet calculates the handling total for a given return order form using the IReturnOrderFormCalculator. The calculated handling total is then logged to the debug output. It requires IReturnOrderForm, Currency, and IReturnOrderFormCalculator parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetHandlingTotal(IReturnOrderForm returnOrderForm, Currency currency, IReturnOrderFormCalculator returnOrderFormCalculator)\n          {\n            var handlingTotal = returnOrderFormCalculator.GetHandlingTotal(returnOrderForm, currency);\n            Debug.WriteLine(\"Handling total for return order form '{0}': {1}\", returnOrderForm.OrderFormId, handlingTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: SQL Query Example for Order Search\nDESCRIPTION: This is an example of an SQL query used in the order search to filter results based on the OrderGroupId. It's used within the SqlWhereClause of the OrderSearchParameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nOrderGroupId IN (SELECT OrderGroupId FROM .)\n```\n\n----------------------------------------\n\nTITLE: Exclude Variant Content Indexing via Conventions (C#)\nDESCRIPTION: Demonstrates how to exclude variant content from indexing by using the ShouldIndex method. This provides fine-grained control over which content types are indexed, leveraging the conventions API. This requires ClientConventions.TypeConventionBuilder for configuration.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/indexing-variants-in-a-product-document.md#_snippet_11\n\nLANGUAGE: csharp\nCODE:\n```\npublic class SiteCatalogContentClientConventions : CatalogContentClientConventions\n      {\n        protected override void ApplyProductContentConventions(ClientConventions.TypeConventionBuilder<ProductContent> conventionBuilder)\n          {\n            base.ApplyProductContentConventions(conventionBuilder);\n            conventionBuilder\n              .ExcludeField(x => x.Variations())\n              .IncludeField(x => x.VariationContents())\n              .IncludeField(x => x.DefaultPrice());\n```\n\n----------------------------------------\n\nTITLE: Creating a Return Line Item in C#\nDESCRIPTION: This snippet demonstrates how to create a return line item from an existing line item using the IPurchaseOrderFactory. The snippet retrieves necessary services, loads a purchase order, retrieves a shipment, and creates a return line item specifying the quantity and reason.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nvar purchaseOrderFactory = ServiceLocator.Current.GetInstance<IPurchaseOrderFactory>();\n            var orderRepository = ServiceLocator.Current.GetInstance<IOrderRepository>();\n            var orderLink = new OrderReference(1, \"Default\", Guid.NewGuid(), typeof(IPurchaseOrder));\n            var purchaseOrder = orderRepository.Load<IPurchaseOrder>(orderLink.OrderGroupId);\n            var shipment = purchaseOrder.GetFirstShipment();\n            var returnLineItem = purchaseOrderFactory.CreateReturnLineItem(shipment.LineItems.First(), 1, \"broken\");\n```\n\n----------------------------------------\n\nTITLE: Listing Parent Products from Entry Content in C#\nDESCRIPTION: This code snippet retrieves a list of parent products from an EntryContentBase object using the GetParentProducts() extension method. This method provides an alternative way to find the parent products of a variant.  The method takes an EntryContentBase object as input and returns an IEnumerable of ContentReference objects representing the parent products.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/product-variants.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic IEnumerable<ContentReference> ListParentProduct(EntryContentBase entryContent)\n    {\n        var parentProductLinks = entryContent.GetParentProducts();\n        return parentProductLinks;\n    }\n```\n\n----------------------------------------\n\nTITLE: Calculating SubTotal for Return Order Form in C#\nDESCRIPTION: This snippet calculates the subtotal for a return order form using the IReturnOrderFormCalculator interface. The subtotal represents the sum of all shipments within the order form. The method then logs the subtotal amount. It accepts IReturnOrderForm, Currency, and IReturnOrderFormCalculator as parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetSubTotal(IReturnOrderForm returnOrderForm, Currency currency, IReturnOrderFormCalculator returnOrderFormCalculator)\n          {\n            var subTotal = returnOrderFormCalculator.GetSubTotal(returnOrderForm, currency);\n            Debug.WriteLine(\"Subtotal for return order form '{0}': {1}\", returnOrderForm.OrderFormId, subTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Calculating Total for a Return Order Form in C#\nDESCRIPTION: This snippet demonstrates how to calculate the total amount for a return order form. It utilizes the IReturnOrderFormCalculator interface to perform the calculation and logs the result using Debug.WriteLine. It takes IReturnOrderForm, IMarket, Currency, and IReturnOrderFormCalculator as input.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-return-order-form-calculator.md#_snippet_0\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetTotal(IReturnOrderForm returnOrderForm, IMarket market, Currency currency, IReturnOrderFormCalculator returnOrderFormCalculator)\n          { \n            var total = returnOrderFormCalculator.GetTotal(returnOrderForm, market, currency);\n            Debug.WriteLine(\"Total for return order form '{0}': {1}\", returnOrderForm.OrderFormId, total);\n          }\n```\n\n----------------------------------------\n\nTITLE: Override Default Tax Calculator C#\nDESCRIPTION: Demonstrates how to override the default tax calculation by inheriting from the DefaultTaxCalculator class. It shows how to override the GetTaxCategoryNameById and GetTaxValues methods to customize the tax calculation logic. Requires IContentRepository and ReferenceConverter for instantiation.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-tax-calculator.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\npublic class TaxCalculatorOverridingDefault : DefaultTaxCalculator\n      {\n        public TaxCalculatorOverridingDefault(IContentRepository contentRepository, ReferenceConverter referenceConverter)\n          : base(contentRepository, referenceConverter)\n          { }\n        protected override string GetTaxCategoryNameById(int taxCategoryId)\n          {\n            return string.Empty;\n          }\n        protected override IEnumerable<ITaxValue> GetTaxValues(string taxCategory, string languageCode, IOrderAddress orderAddress)\n          {\n            return new List<ITaxValue>() { new TaxValue(10, \"SalesTax\", \"clothing\", TaxType.SalesTax) };\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Tracking with Scope using epiRecommendations (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to use `epiRecommendations` to send tracking data with a specified scope. The `track` function is called with `trackingData`, `scope`, `onSuccess`, and `callbackOptions` as parameters. This allows for more granular control over tracking data within the Optimizely Commerce Connect framework.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/improvements-with-tracking.md#_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\ntrack(trackingData, scope, onSuccess, callbackOptions)\n```\n\n----------------------------------------\n\nTITLE: Defining ICurrentMarket Interface in C#\nDESCRIPTION: This snippet defines the ICurrentMarket interface, which is essential for sites implementing multi-market functionality. The interface includes methods for getting and setting the current market. GetCurrentMarket retrieves the current market, while SetCurrentMarket sets the current market based on the provided MarketId.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/markets.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface ICurrentMarket\n      {\n        // Gets the current market.\n        IMarket GetCurrentMarket();\n    \n        // Sets the current market.\n        void SetCurrentMarket(MarketId marketId);\n      }\n```\n\n----------------------------------------\n\nTITLE: Customize Sales Campaign Query - C#\nDESCRIPTION: This C# code snippet customizes the query to return `GetCampaignsByLastModified` facets, by overriding `GetSalesCampaignChildrenQuery`. It uses `ServiceConfiguration` to register the custom query and overrides the FacetFunctions property to return an array containing an instance of `GetCampaignsByLastModified`.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_13\n\nLANGUAGE: csharp\nCODE:\n```\n[ServiceConfiguration(typeof(IContentQuery))]\n        public class CustomGetSalesCampaignChildrenQuery : GetSalesCampaignChildrenQuery\n          {\n            public CustomGetSalesCampaignChildrenQuery(\n              IContentQueryHelper queryHelper, \n              IContentRepository contentRepository, \n              LanguageSelectorFactory languageSelectorFactory, \n              CampaignInfoExtractor campaignInfoExtractor, \n              FacetQueryHandler facetQueryHandler) \n              : base(queryHelper, contentRepository, languageSelectorFactory, campaignInfoExtractor, facetQueryHandler){}\n        \n            public override int Rank\n              {\n                // need set rank to higher\n                get { return 1000; }\n              }\n        \n          \n```\n\n----------------------------------------\n\nTITLE: Setting Catalog Feed Description Property (Optimizely, C#)\nDESCRIPTION: This C# code snippet demonstrates how to set the description property name for the catalog feed using the CatalogFeedSettings class. It retrieves an instance of CatalogFeedSettings from the ServiceLocator and assigns a value to the DescriptionPropertyName property.  This is used when exporting the catalog to Product Recommendations.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/installing-and-configuring-the-native-integration-package.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar catalogFeedSettings = ServiceLocator.Current.GetInstance<CatalogFeedSettings>(); \n    catalogFeedSettings.DescriptionPropertyName = \"...\";\n```\n\n----------------------------------------\n\nTITLE: Configure Logging for Commerce Personalization in XML\nDESCRIPTION: This XML snippet configures logging for the EPiServer.Personalization.Commerce namespace.  It sets the additivity to false, preventing duplicate log entries, and sets the logging level to Info, capturing informational messages and above.  This helps in debugging catalog export and other commerce-related personalization issues.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/exporting-your-catalog-to-episerver-perform.md#_snippet_0\n\nLANGUAGE: XML\nCODE:\n```\n<logger name=\"EPiServer.Personalization.Commerce \" additivity=\"false\">\n      <level value=\"Info \" />\n    </logger>\n```\n\n----------------------------------------\n\nTITLE: Calculating Order Discount Total in C#\nDESCRIPTION: This method calculates the total order-level discount amount for an order form. It is the sum of all order-level discounts applied to line items across all shipments.  The order form, currency, and calculator are required.  The discount total is then outputted to the debug stream.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetOrderDiscountTotal(IOrderForm orderForm, Currency currency, IOrderFormCalculator orderFormCalculator)\n          {\n            var orderDiscountTotal = orderFormCalculator.GetOrderDiscountTotal(orderForm, currency);\n            Debug.WriteLine(\"Order discount total for order form '{0}': {1}\", orderForm.OrderFormId, orderDiscountTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Recalculating and Saving Purchase Order in C#\nDESCRIPTION: This snippet shows how to recalculate a purchase order using the `OrderStatusManager` and save it using the `IOrderRepository`. This is often needed after operations such as canceling a return order, to ensure the order totals and statuses are up-to-date. It relies on the `OrderStatusManager` static class and the `IOrderRepository` instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/using-the-return-order-form.md#_snippet_9\n\nLANGUAGE: C#\nCODE:\n```\nOrderStatusManager.RecalculatePurchaseOrder(purchaseOrder);\n             orderRepository.Service.Save(purchaseOrder);\n```\n\n----------------------------------------\n\nTITLE: Adding a Meta Type to the Database using SQL\nDESCRIPTION: This SQL script demonstrates how to add a new MetaType record (Geolocation) directly to the 'mcmd_MetaFieldType' table in the database. This achieves the same result as the C# code snippet by inserting the MetaType information directly into the database. Requires a database restart to take effect.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metatype-class.md#_snippet_1\n\nLANGUAGE: sql\nCODE:\n```\n*INSERT INTO mcmd_MetaFieldType ([Name], [FriendlyName], [McDataType]) VALUES ('Geolocation', 'Geolocation ', 6\n```\n\n----------------------------------------\n\nTITLE: Get Discount Price (C#)\nDESCRIPTION: Retrieves the discount price for content in a specific market and currency. This method uses the IPromotionEngine to calculate the discount price based on the content link, market, and currency provided.  It returns the lowest discount price available.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/multi-market-examples.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic Price GetDiscountPrice(ContentReference contentLink, Curreny currency)\n      {\n        var currentMarketService = ServiceLocator.Current.GetInstance<ICurrentMarket>();\n        var promotionEngine = ServiceLocator.Current.GetInstance<IPromotionEngine>();\n        var market = currentMarketService.GetCurrentMarket();\n        return promotionEngine.GetDiscountPrices(contentLink, market, currency).First().DiscountPrices.OrderBy(p=>p.Price).First().Price;\n      }\n```\n\n----------------------------------------\n\nTITLE: Disable Order Data Localization in appsettings.json\nDESCRIPTION: This JSON snippet shows how to disable order data localization by setting the `DisableOrderDataLocalization` option to `true` within the `appsettings.json` file. This configuration prevents the system from localizing order data, saving storage and improving performance. This setting is within the Commerce section of the configuration.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/globalization.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n    \"Commerce\":{\n        \"OrderOptions\":{\n            \"DisableOrderDataLocalization\": true\n            }\n        }\n    }\n```\n\n----------------------------------------\n\nTITLE: Get Shipping Return Items Total C#\nDESCRIPTION: Calculates the subtotal for all return line items in the shipment using the provided shipping calculator. It takes IShipment, Currency and IShippingCalculator as parameters. The total price of all return line items is then printed to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetShippingReturnItemsTotal(IShipment shipment, Currency currency, IShippingCalculator shippingCalculator)\n          {\n            var shippingItemTotal = shippingCalculator.GetShippingReturnItemsTotal(shipment, currency);\n            Debug.WriteLine(\"Total prices of all return line items for shipment '{0}': {1}\", shipment.ShipmentId, shippingItemTotal);\n          }\n```\n\n----------------------------------------\n\nTITLE: Listing All Prices with IPriceDetailService in C#\nDESCRIPTION: This code snippet demonstrates how to retrieve all price details for a given catalog entry using the IPriceDetailService.List() method. It retrieves an instance of the IPriceDetailService from the ServiceLocator and then calls the List method with the ContentReference of the catalog entry.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/pricing-examples.md#_snippet_0\n\nLANGUAGE: csharp\nCODE:\n```\npublic IList<IPriceDetailValue> ListAllPriceDetailValue(ContentReference catalogContentReference)\n      {\n        var priceDetailService = ServiceLocator.Current.GetInstance<IPriceDetailService>();\n    \n        // Gets the price details of a CatalogEntry\n        return priceDetailService.List(catalogContentReference);\n      }\n```\n\n----------------------------------------\n\nTITLE: Get Sales Tax C#\nDESCRIPTION: Calculates the sales tax for a shipment based on the shipping address using the provided shipping calculator. It takes IShipment, IMarket, Currency and IShippingCalculator as parameters. The sales tax is then printed to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_6\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetSalesTax(IShipment shipment, IMarket market, Currency currency, IShippingCalculator shippingCalculator)\n          {\n            var salesTax = shippingCalculator.GetSalesTax(shipment, market, currency);\n            Debug.WriteLine(\"Sales tax for shipment '{0}': {1}\", shipment.ShipmentId, salesTax);\n          }\n```\n\n----------------------------------------\n\nTITLE: Using ContentOutputCache Attribute for Output Caching\nDESCRIPTION: This snippet references the ContentOutputCache attribute, which is used to enable caching of content. Output caching breaks the server-side tracking because the request often does not reach the page's controller, so user behavior will not be tracked.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_12\n\nLANGUAGE: csharp\nCODE:\n```\n`ContentOutputCache`\n```\n\n----------------------------------------\n\nTITLE: Get Return Shipping Tax C#\nDESCRIPTION: Calculates the return shipping tax for a given shipment using the provided shipping calculator. It takes IShipment, IMarket, Currency and IShippingCalculator as parameters. The return shipping tax is then printed to the debug output.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-shipping-calculator.md#_snippet_7\n\nLANGUAGE: C#\nCODE:\n```\npublic void GetReturnShippingTax(IShipment shipment, IMarket market, Currency currency, IShippingCalculator shippingCalculator)\n          {\n            var returnShippingTax = shippingCalculator.GetReturnShippingTax(shipment, market, currency);\n            Debug.WriteLine(\"Shipping tax for return shipment '{0}': {1}\", shipment.ShipmentId, returnShippingTax);\n          }\n```\n\n----------------------------------------\n\nTITLE: Disable Event-Driven Catalog Indexing in .NET Core\nDESCRIPTION: This JSON snippet demonstrates how to disable event-driven catalog indexing in a .NET Core application. It configures the Commerce:CatalogOptions:DisableCatalogEventDrivenIndexing setting to \"true\" in the appsettings.json file, preventing automatic updates to the search index when catalog data changes.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/event-driven-catalog-indexing.md#_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n        \"Commerce\": {\n            \"CatalogOptions\": {\n                \"DisableCatalogEventDrivenIndexing\" : \"true\"\n                    }\n           \n            }\n}\n```\n\n----------------------------------------\n\nTITLE: Enabling/Disabling SerializedCarts Feature using JSON Configuration\nDESCRIPTION: This JSON snippet shows how to enable or disable the SerializedCarts feature using the ApplicationOptions configuration. The `State` property controls whether the feature is enabled (0) or disabled (1).\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/serializable-carts.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n       \"ApplicationOptions\":{\n          \"Features\":{\n             \"SerializedCarts\":{\n                \"Feature\":\"SerializedCarts\",\n                \"State\":1, // 0 is enabled, 1 for disabled\n                \"Type\":\"Mediachase.Commerce.Core.Features.SerializedCarts, Mediachase.Commerce\"\n             }\n          }\n       }\n    }\n```\n\n----------------------------------------\n\nTITLE: Correct Currency Rounding\nDESCRIPTION: This code snippet shows the correct way to round currency values using the Money.Round() method in Optimizely Commerce Connect. The Money object is first created with the full, unrounded value, and then the Round() method is called, ensuring correct precision based on the specified currency. The currentCurrency variable specifies the currency.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/rounding-totals-for-currencies.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\nvar currentCurrency = “JPY”\n    Money itemPrice = new Money(lineItem.ListPrice, currentCurrency).Round();\n```\n\n----------------------------------------\n\nTITLE: Build React Component for Release - Bash\nDESCRIPTION: This command builds the React component for release, generating a CommonJS file suitable for deployment. This process bundles the React code and its dependencies into a single file that can be loaded by the CSR UI at runtime.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/extend-components.md#_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nyarn build:release\n```\n\n----------------------------------------\n\nTITLE: Running SQL scripts for database setup\nDESCRIPTION: These SQL scripts are used to manually prepare the SQL Server database for the Business Meta Model. They create the necessary tables, stored procedures, and initial data for the meta-model data storage.  The scripts must be executed in the order specified.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/business-meta-model.md#_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nSqlTables.sql\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSqlSp.sql\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSqlInitialData.sql\n```\n\n----------------------------------------\n\nTITLE: Calculating and Rounding Order Total\nDESCRIPTION: This code snippet demonstrates how to correctly calculate and round the cost of items in an order using the Currency.Round() method in Optimizely Commerce Connect. It iterates through each line item in the order, calculates the cost without discount, and then rounds the value using the billing currency's Round() method before assigning it to an item property. The billingCurrency variable determines the currency to use for rounding.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/rounding-totals-for-currencies.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar billingCurrency = order.Currency;\n    foreach (var item in order.GetAllLineItems())\n      {\n        var costWithoutDiscount = billingCurrency.Round(item.PlacedPrice * item.Quantity);\n        item.Properties[\"costWithoutDiscount\"] = costWithoutDiscount;\n      }\n```\n\n----------------------------------------\n\nTITLE: Validating a Cart Optimizely C#\nDESCRIPTION: This snippet demonstrates how to validate a shopping cart using an OrderValidationService. It takes an ICart instance as input and returns a dictionary of validation issues, keyed by line item.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/shopping-carts.md#_snippet_5\n\nLANGUAGE: C#\nCODE:\n```\npublic IDictionary<ILineItem, IList<ValidationIssue>> ValidateCart(ICart cart)\n            {\n                return _orderValidationService.ValidateOrder(cart); // orderValidationService is an instance of the class OrderValidationService\n            }\n```\n\n----------------------------------------\n\nTITLE: Install AuthorizeNet NuGet Package (version 1.9.4)\nDESCRIPTION: This command installs the AuthorizeNet NuGet package, version 1.9.4, using the Package Manager Console. It's a required dependency for the AuthorizeTokenEx payment provider.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/authorizetokenex-installation-and-configuration.md#_snippet_0\n\nLANGUAGE: powershell\nCODE:\n```\nInstall-Package AuthorizeNet -version 1.9.4\n```\n\n----------------------------------------\n\nTITLE: Deleting Countries and Regions in Optimizely (C#)\nDESCRIPTION: This code snippet demonstrates how to delete countries and regions using the CountryManager and CountryDto classes. It retrieves a country using CountryManager.GetCountry(), deletes the country row using countryRow.Delete(), and then saves the changes using CountryManager.SaveCountry().\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/countries-and-regions.md#_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nvar dto = CountryManager.GetCountry(\"USA\", true); var countryRow = dto.Country[0]; \n  countryRow.Delete(); \n  CountryManager.SaveCountry(dto);\n```\n\n----------------------------------------\n\nTITLE: Add Optimizely Graph Namespace in C#\nDESCRIPTION: This code snippet shows how to include the Optimizely.Graph.Commerce namespace in a C# file. This allows you to use classes and methods from the Optimizely Graph Commerce library.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/optimizely-graph-for-commerce-connect.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nusing Optimizely.Graph.Commerce;\n```\n\n----------------------------------------\n\nTITLE: Evaluate Collection of Entries (C#)\nDESCRIPTION: This snippet shows how to evaluate a collection of entries using the Promotion Engine to get reward descriptions. Requires an entryLinks of type IEnumerable<ContentReference>. Requires Optimizely.Commerce.Marketing namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/promotions-engine.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nIEnumerable<RewardDescription> rewardDescriptions = ServiceLocator.Current.GetInstance<IPromotionEngine>().Evaluate(entryLinks);\n```\n\n----------------------------------------\n\nTITLE: Module Configuration - XML\nDESCRIPTION: This XML configuration snippet shows an example of a module.config file, configuring a client module with a module initializer and dependencies.  The module loads from the bin folder and defines dependencies on the Commerce module.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/custom-facets-in-the-marketing-overview.md#_snippet_11\n\nLANGUAGE: xml\nCODE:\n```\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n        <module loadFromBin=\"false\">\n          <assemblies>\n            <add assembly=\"OptimizelySite5\" />\n          </assemblies>\n          <dojo>\n            <paths>\n              <add name=\"app\" path=\"Scripts\" />\n            </paths>\n          </dojo>\n          <clientModule initializer=\"app.ModuleInitializer\">\n            <moduleDependencies>\n              <add dependency=\"Commerce\" type=\"RunAfter\" />\n            </moduleDependencies>\n          </clientModule>\n        </module>\n```\n\n----------------------------------------\n\nTITLE: Adding to Cart Form in CSHTML\nDESCRIPTION: This snippet generates a form for adding a product to the cart. It uses Html.BeginForm to create the form, including a hidden field for the product code and a submit button.  It also includes logic to add the item to the WishList if the user is authenticated and not read-only.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/dynamic-packages.md#_snippet_1\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"col-md-7\">\n    @if (Model.IsAvailable)\n    {\n        using (Html.BeginForm(\"AddToCart\", \"Cart\", FormMethod.Post, new { @class = \"form-inline\", data_container = \"MiniCart\" }))\n        {\n            @Html.Hidden(\"code\", Model.Package.Code)\n            <button type=\"submit\" role=\"button\" class=\"btn btn-primary jsAddToCart\" data-container=\"MiniCart\"><span class=\"glyphicon glyphicon-shopping-cart\"></span> @Html.Translate(\"/Product/Button/AddToCart\")</button>\n        }\n        if (User.Identity.IsAuthenticated && !(bool)ViewData[\"IsReadOnly\"])\n        {\n            using (Html.BeginForm(\"AddToCart\", \"WishList\", FormMethod.Post, new { @class = \"form-inline jsAddToWishList\", data_container = \"WishListMiniCart\" }))\n            {\n                @Html.Hidden(\"code\", Model.Package.Code)\n                <button type=\"submit\" role=\"button\" class=\"btn btn-default btn--blue jsAddToCart\" data-container=\"WishListMiniCart\"><span class=\"glyphicon glyphicon-heart\"></span> @Html.Translate(\"/Product/Button/AddToWishList\")</button>\n            }\n        }\n    }\n</div>\n```\n\n----------------------------------------\n\nTITLE: Checking if Shipment can be Packed in C#\nDESCRIPTION: This snippet shows how to determine if a shipment can be packed using the CanBePacked method in IShipmentExtensions. It requires an IShipment instance.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/order-processing.md#_snippet_28\n\nLANGUAGE: C#\nCODE:\n```\nIShipment shipment;\n    \n    (…)\n    var canBePacked = shipment.CanBePacked();\n```\n\n----------------------------------------\n\nTITLE: Defining List Properties in CMS 11 (C#)\nDESCRIPTION: This code snippet demonstrates how to define list properties within a model using C# for Customized Commerce in CMS 11. It uses the `BackingType` attribute to specify the underlying `PropertyValueList` type for each property (Int, DateTime, String, Double).\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/catalog-content.md#_snippet_3\n\nLANGUAGE: C#\nCODE:\n```\n[BackingType(typeof(PropertyIntegerList)]\n    [Display(Name = \"List of int\", Order = 5)]\n    public virtual IList<int> IntList { get; set; }\n    \n    [BackingType(typeof(PropertyDateTimeList))]\n    [Display(Name = \"List of date time\", Order = 8)]\n    public virtual IList<DateTime> DateTimeList { get; set; }\n    \n    [BackingType(typeof(PropertyStringList))]\n    [Display(Name = \"List of string\", Order = 6)]\n    public virtual IList<string> StringList { get; set; }\n    \n    [BackingType(typeof(PropertyDoubleList))]\n    [Display(Name = \"List of double\", Order = 7)]\n    public virtual IList<double> DoubleList { get; set; }\n```\n\n----------------------------------------\n\nTITLE: Loading Entity Object by Primary Key C#\nDESCRIPTION: This snippet demonstrates how to load an existing entity object from persistent storage using its primary key. It uses BusinessManager.Execute with a LoadRequest, requiring the metaClassName and primaryKeyId to retrieve the EntityObject.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/working-with-entity-objects.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nLoadResponse response = (LoadResponse)BusinessManager.Execute(new LoadRequest(new EntityObject(metaClassName, primaryKeyId)));\n    EntityObject obj = response.EntityObject;\n```\n\n----------------------------------------\n\nTITLE: Defining IMarketService Interface in C#\nDESCRIPTION: This snippet defines the IMarketService interface, which provides methods for interacting with market data.  It includes operations for retrieving all markets, getting a specific market by ID, creating new markets, updating existing markets, and deleting markets by ID.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/markets.md#_snippet_5\n\nLANGUAGE: csharp\nCODE:\n```\npublic interface IMarketService\n      {\n        // Gets all markets in the system.\n        IEnumerable<IMarket> GetAllMarkets();\n    \n        // Get a single market by ID, or null if the market ID is not found.\n        IMarket GetMarket(MarketId marketId);\n    \n        // Adds a new market to the market system.\n        void CreateMarket(IMarket market);\n    \n```\n\n----------------------------------------\n\nTITLE: Overriding Default Validation in Order Form Calculator - C#\nDESCRIPTION: This C# code demonstrates how to extend the `DefaultOrderFormCalculator` and override the validation methods (`ValidateTotal`, `ValidateSubtotal`, `ValidateHandlingTotal`, `ValidateShippingSubtotal`, `ValidateTaxTotal`) to implement custom validation logic. Each method checks if the money amount is less than or equal to 0 and throws a `ValidationException` if it is.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/calculating-orders-order-form-calculator.md#_snippet_11\n\nLANGUAGE: C#\nCODE:\n```\npublic class OrderFormCalculatorOverridingDefault : DefaultOrderFormCalculator\n      {\n        public OrderFormCalculatorOverridingDefault(IShippingCalculator shippingCalculator, ITaxCalculator taxCalculator)\n          : base(shippingCalculator, taxCalculator)\n          { }\n        protected override void ValidateTotal(Money money)\n          {\n            if (money.Amount <= 0)\n              {\n                throw new ValidationException(\"Order total must be greater than 0\");\n              }\n          }\n        protected override void ValidateSubtotal(Money money)\n          {\n        \tif (money.Amount <= 0)\n              {\n        \t    throw new ValidationException(\"Subtotal must be greater than 0\");\n        \t  }\n          }\n        protected override void ValidateHandlingTotal(Money money)\n          {\n        \tif (money.Amount <= 0)\n              {\n        \t    throw new ValidationException(\"Handling total must be greater than 0\");\n        \t  }\n          }\n        protected override void ValidateShippingSubTotal(Money money)\n          {\n        \tif (money.Amount <= 0)\n              {\n        \t    throw new ValidationException(\"Shipping subtotal must be greater than 0\");\n        \t  }\n          }\n        protected override void ValidateTaxTotal(Money money)\n          {\n        \tif (money.Amount <= 0)\n           \t  {\n         \t    throw new ValidationException(\"Tax total must be greater than 0\");\n        \t  }\n          }\n      }\n```\n\n----------------------------------------\n\nTITLE: Adding Event Listener for Catalog Key Events in C#\nDESCRIPTION: Registers a method to listen for catalog key events from the Events engine. It retrieves the event based on the CatalogKeyEventGuid, subscribes a handler method (CatalogKeyEventUpdated) to it, and deserializes the event arguments before processing. This includes handling InventoryUpdateEventArgs to trigger RemoteInventoryUpdated.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/events.md#_snippet_1\n\nLANGUAGE: csharp\nCODE:\n```\npublic void AddEvent()\n      {\n        Event ev = Event.Get(CatalogKeyEventBroadcaster.CatalogKeyEventGuid);\n        ev.Raised += CatalogKeyEventUpdated;\n      }\n    \n    private void CatalogKeyEventUpdated(object sender, EventNotificationEventArgs e)\n      {\n        var eventArgs = (CatalogKeyEventArgs)DeSerialize((byte[])e.Param);\n        var inventoryUpdatedEventArgs = eventArgs as InventoryUpdateEventArgs;\n        if (inventoryUpdatedEventArgs != null)\n          {\n            RemoteInventoryUpdated(sender, inventoryUpdatedEventArgs);\n          }\n      }\n    \n    private void RemoteInventoryUpdated(object sender, InventoryUpdateEventArgs inventoryUpdatedEventArgs)\n      {\n        //Your action when inventories are updated remotely.\n      }\n    \n    protected virtual CatalogKeyEventArgs DeSerialize(byte[] buffer)\n      {\n        var formatter = new BinaryFormatter();\n        var stream = new MemoryStream(buffer);\n        return formatter.Deserialize(stream) as CatalogKeyEventArgs;\n      }\n```\n\n----------------------------------------\n\nTITLE: Rendering Page Tracking Script - C#\nDESCRIPTION: This snippet renders the page tracking script using the @RenderSection(\"Tracking\", false) helper. It allows pages to include specific tracking scripts within a section named \"Tracking\". This code should be placed within the <body> section of the Views/Shared/_Layout.cshtml file after rendering recommendation templates.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\n@RenderSection(\"Tracking\", false)\n```\n\nLANGUAGE: C#\nCODE:\n```\n<body>\n  ...\n  @Html.Partial(\"_RecommendationsTemplates\")\n  @RenderSection(\"Tracking\", false)\n</body>\n```\n\n----------------------------------------\n\nTITLE: Updating Meta-classes in Optimizely Commerce Connect\nDESCRIPTION: This code snippet demonstrates how to update an existing meta-class using the Mediachase.MetaDataPlus.Configurator.MetaClass.Load method to load the meta-class, then modifying its properties.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/metadata-plus.md#_snippet_4\n\nLANGUAGE: C#\nCODE:\n```\nvar metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"WorkOrder\");\n    metaClass.FriendlyName = \"Work order change\";\n```\n\nLANGUAGE: C#\nCODE:\n```\nvar metaClass = Mediachase.MetaDataPlus.Configurator.MetaClass.Load(OrderContext.MetaDataContext, \"WorkOrder\");\n    metaClass.FriendlyName = \"Work order change\";\n```\n\n----------------------------------------\n\nTITLE: Configure Virtual Roles in appsettings.json\nDESCRIPTION: This JSON snippet demonstrates how to define virtual roles like CatalogManagers and CustomerManagers within the appsettings.json file for Optimizely Commerce Connect.  These roles are used to control access and visibility to different parts of the user interface.  This configuration is necessary for enabling the specific functionalities associated with each role.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/authorization-and-authentication.md#_snippet_0\n\nLANGUAGE: JSON\nCODE:\n```\n{\n  \"EPiServer\": {\n    \"Cms\": {\n   \t \"VirtualRole\": {\n      \"Roles\": {\n        \"CatalogManagers\": {},\n        \"CustomerManagers\": {}\n      }\n   \t }\n    }\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: HTML Button with RecommendationId (HTML)\nDESCRIPTION: This HTML code defines a button that, when clicked, opens a modal dialog and passes a RecommendationId in the data-url attribute. The RecommendationId is dynamically inserted using templating.  The data-url attribute is utilized for passing information to Javascript for handling a \"Quickview\" action on a product.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/tracking-and-recommendations.md#_snippet_2\n\nLANGUAGE: HTML\nCODE:\n```\n<button type=\"button\"\n            data-toggle=\"modal\"\n            data-target=\"#ModalDialog\"\n            data-url=\"{{#attributes}}{{url}}{{/attributes}}&recommendationId={{id}}\"\n            class=\"btn btn-block btn-sm quickview-button\">\n      @Html.Translate(\"/Product/Quickview\")\n    </button>\n```\n\n----------------------------------------\n\nTITLE: Defining Recommendation Sections in Layout - HTML\nDESCRIPTION: This snippet defines the HTML structure for displaying recommendations in different sections (upper, left, right, bottom) within the main layout of the application. It uses divs with the class 'recommendations' followed by the section name. This code should be placed within the Views/Shared/_Layout.cshtml file.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/client-side-api-integration.md#_snippet_0\n\nLANGUAGE: HTML\nCODE:\n```\n<div class=\"main-area\">@RenderBody()</div>\n<div class=\"recommendations recommendations-upper\"></div>\n<div class=\"recommendations recommendations-left\"></div>\n<div class=\"recommendations recommendations-right\"></div>\n<div class=\"recommendations recommendations-bottom\"></div>\n```\n\n----------------------------------------\n\nTITLE: Setting OrderSearchParameters in C#\nDESCRIPTION: This snippet sets up the OrderSearchParameters, specifying the class to search (PurchaseOrder) and the SQL where clause. It then executes the search using OrderContext and retrieves a collection of PurchaseOrder objects.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_1\n\nLANGUAGE: C#\nCODE:\n```\nOrderSearchParameters parameters = new OrderSearchParameters();\n    \n    //the following is for returns-only purchase orders... for shopping carts, specify ShoppingCart parameters.SqlMetaWhereClause = \"\";\n    searchOptions.Classes.Add(\"PurchaseOrder\"); \n    \n    parameters.SqlWhereClause = sqlQuery.ToString();\n    \n    //If you are searching for shopping carts (non serializable cart system), you can call the Search<Cart> method and return an array of Cart objects\n    PurchaseOrder[] purchaseOrderCollection = OrderContext.Current.Search<PurchaseOrder>(parameters, searchOptions);\n```\n\n----------------------------------------\n\nTITLE: Deleting Meta-Class Object in Optimizely Commerce\nDESCRIPTION: This snippet demonstrates how to delete a meta-class object in Optimizely Commerce Connect. It initializes the DataContext, retrieves the MetaModel, and then deletes the meta-class named 'CreditCard'.  It depends on Mediachase.BusinessFoundation.Data namespace.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/object-configuration.md#_snippet_2\n\nLANGUAGE: C#\nCODE:\n```\nDataContext.Current = new DataContext(ServiceLocator.Current.GetInstance<IConnectionStringHandler>().Commerce.ConnectionString);\n    ModuleManager.InitializeActiveModules();\n    using (var scope = DataContext.Current.MetaModel.BeginEdit(MetaClassManagerEditScope.SystemOwner, AccessLevel.System))\n    {\n        var manager = DataContext.Current.MetaModel;\n        manager.DeleteMetaClass(\"CreditCard\");\n        scope.SaveChanges();\n    }\n```\n\n----------------------------------------\n\nTITLE: Stored Procedure for Order Search\nDESCRIPTION: This snippet represents the SQL code for the ecf_OrderSearch stored procedure. It uses temporary tables and common table expressions (CTEs) to perform a dynamic search for orders. It joins the OrderGroup table with metadata tables based on the order metaclass and applies WHERE clauses specified through SQLMetaWhereClause and SQLWhereClause. The query uses pagination based on RecordsToRetrieve and StartingRecord parameters.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/searching-for-orders-using-ordercontext.md#_snippet_11\n\nLANGUAGE: sql\nCODE:\n```\ndeclare @Page_temp table (TotalRecords int, OrderGroupId int);\n    with OrderedResults as\n    (SELECT count([OrderGroup].OrderGroupId)\n      OVER() TotalRecords, [OrderGroup].OrderGroupId, Rank, ROW_NUMBER()\n      OVER(ORDER BY ) RowNumber\n      FROM [OrderGroup] OrderGroup\n      INNER JOIN (select distinct U.[KEY], U.Rank from \n       (select 100 as 'Rank', META.ObjectId as 'Key',\n        * from <database table associated with the order metaclass in the options Classes property> \n        META WHERE <SQLMetaWhereClause>) \n      U) META\n      ON OrderGroup.[OrderGroupId] = META.[KEY]\n      (<SQLWhereClause>))\n    INSERT INTO @Page_temp (TotalRecords, OrderGroupId)\n    SELECT top(<RecordsToRetrieve>) TotalRecords, OrderGroupId FROM OrderedResults\n    WHERE RowNumber > <StartingRecord>;;\n    \n    select @RecordCount = TotalRecords from @Page_temp;\n    \n    INSERT INTO OrderSearchResults (SearchSetId, OrderGroupId)\n    SELECT [SearchSetId], OrderGroupId from @Page_temp;\n```\n\n----------------------------------------\n\nTITLE: Configuring EnsurePublishedVersionInAllLanguages in appsettings.json (appsetting.json)\nDESCRIPTION: This JSON snippet demonstrates how to configure the `EnsurePublishedVersionInAllLanguages` setting within the `CatalogOptions` section of the `appsettings.json` file.  Setting it to `false` requires users to manually publish content; setting it to `true` automatically generates published versions in all languages if one version is already published.  This setting affects how content publishing is handled within Optimizely Commerce Connect.\nSOURCE: https://github.com/quan-tran-niteco/optimizelycommerceconnect/blob/main/docs/publish-content-version-setting.md#_snippet_1\n\nLANGUAGE: JSON\nCODE:\n```\n\"CatalogOptions\": {\n  \"EnsurePublishedVersionInAllLanguages\": false\n}\n```"
  }
]