[
  {
    "owner": "zeropsio",
    "repo": "docs",
    "content": "TITLE: Comprehensive Runtime Variables Configuration in zerops.yaml for Laravel\nDESCRIPTION: A complete example of runtime environment variables configuration in zerops.yaml for a Laravel application. This includes settings for the app, database, storage, logging, mail, and Redis services.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  envVariables:\n    APP_LOCALE: en\n    APP_FAKER_LOCALE: en_US\n    APP_FALLBACK_LOCALE: en\n    APP_MAINTENANCE_DRIVER: file\n    APP_MAINTENANCE_STORE: database\n    APP_TIMEZONE: UTC\n    APP_URL: ${zeropsSubdomain}\n    ASSET_URL: ${APP_URL}\n    VITE_APP_NAME: ${APP_NAME}\n\n    DB_CONNECTION: pgsql\n    DB_DATABASE: db\n    DB_HOST: db\n    DB_PASSWORD: ${db_password}\n    DB_PORT: 5432\n    DB_USERNAME: ${db_user}\n\n    AWS_ACCESS_KEY_ID: ${storage_accessKeyId}\n    AWS_REGION: us-east-1\n    AWS_BUCKET: ${storage_bucketName}\n    AWS_ENDPOINT: ${storage_apiUrl}\n    AWS_SECRET_ACCESS_KEY: ${storage_secretAccessKey}\n    AWS_URL: ${storage_apiUrl}/${storage_bucketName}\n    AWS_USE_PATH_STYLE_ENDPOINT: true\n    FILESYSTEM_DISK: s3\n\n    LOG_CHANNEL: syslog\n    LOG_LEVEL: debug\n    LOG_STACK: single\n\n    MAIL_FROM_ADDRESS: hello@example.com\n    MAIL_FROM_NAME: ZeropsLaravel\n    MAIL_HOST: mailpit\n    MAIL_MAILER: smtp\n    MAIL_PORT: 1025\n\n    BROADCAST_CONNECTION: redis\n    CACHE_PREFIX: cache\n    CACHE_STORE: redis\n    QUEUE_CONNECTION: redis\n    REDIS_CLIENT: phpredis\n    REDIS_HOST: valkey\n    REDIS_PORT: 6379\n    SESSION_DRIVER: redis\n    SESSION_ENCRYPT: false\n    SESSION_LIFETIME: 120\n    SESSION_PATH: /\n\n    BCRYPT_ROUNDS: 12\n    TRUSTED_PROXIES: \"*\"\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Configuration for Deno Application\nDESCRIPTION: This snippet shows the basic structure of a zerops.yaml file for a Deno application, including build and run configurations.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: deno@latest\n      buildCommands:\n        - deno task build\n      deployFiles:\n        - dist\n        - deno.jsonc\n    run:\n      base: deno@latest\n      ports:\n        - port: 3000\n      start: deno task start\n```\n\n----------------------------------------\n\nTITLE: Multiple Services Configuration in Zerops YAML\nDESCRIPTION: Shows how to define multiple services within a single zerops.yaml file, useful for monorepo setups.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/specification.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    run: ...\n\n  - setup: api\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Complex Project and Service Configuration in YAML\nDESCRIPTION: Comprehensive example showing how to define a project with multiple services, including environment variables, autoscaling, storage settings, and deployment configurations. Demonstrates full range of available configuration options.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# ==== Define a project to import ====\nproject:\n  # REQUIRED. Name of your project\n  name: project0\n  # Project description\n  description: \"This project is an example only\"\n  # Project core package - LIGHT/SERIOUS\n  corePackage: SERIOUS\n  # List of project tags for filtering\n  tags:\n    - test\n    - dev\n  # Project-level environment variables\n  envVariables:\n    LOG_LEVEL: info\n    API_VERSION: v1\n# ==== Define a list of services to import into the project ====\nservices:\n  # REQUIRED. Name of your service\n  - hostname: app\n    # REQUIRED. Choose from list of supported technologies and their versions\n    type: nodejs@22\n    # HA or NON_HA mode\n    mode: HA\n    # Map of secret environment variables\n    envSecrets:\n      SECRET_KEY: <@generateRandomString(<32>)>\n    # Environment variables defined in .env format (automatically creates secret envs)\n    dotEnvSecrets: |\n      APP_KEY=<@generateRandomString(<32>)>\n      DB_PASSWORD=secure123\n    # Object storage size in GB\n    objectStorageSize: 2\n    # Choose object storage policy from a predefined list\n    objectStoragePolicy: public-read-write\n    # Define additional policy\n    objectStorageRawPolicy:\n    # One time build git repository\n    buildFromGit: https://github.com/myorg/myapp\n    # true or false\n    enableSubdomainAccess: true\n    # The higher the sooner the service is created\n    priority: 1\n    # Vertical autoscaling configuration object\n    verticalAutoscaling:\n      minCpu: 1\n      maxCpu: 3\n      # Choose SHARED or DEDICATED\n      cpuMode: DEDICATED\n      minRam: 1\n      maxRam: 4\n      minDisk: 1\n      maxDisk: 10\n      startCpuCoreCount: 2\n      minFreeCpuCores: 0.5\n      minFreeCpuPercent: 20\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # Minimum number of containers\n    minContainers: 2\n    # Maximum number of containers\n    maxContainers: 6\n    # List of shared storage services to connect to\n    mount:\n      - teststorage1\n    # Full nginx config\n    nginxConfig: |-\n      server {\n          listen 80 default_server;\n          listen [::]:80 default_server;\n\n          server_name _;\n          root /var/www;\n\n          location / {\n              try_files $uri $uri/ /index.html;\n          }\n\n          access_log syslog:server=unix:/dev/log,facility=local1 default_short;\n          error_log syslog:server=unix:/dev/log,facility=local1;\n      }\n    # Zerops.yaml configuration\n    zeropsSetup: backendapi\n    zeropsYaml:\n      zerops:\n        - setup: backendapi\n          build:\n            base: nodejs@22\n            buildCommands:\n              - npm ci\n              - npm run build\n            deployFiles: ./\n            cache: node_modules\n          run:\n            initCommands:\n              - npm run db:migrate\n            start: npm start\n    # When set to true, enables overriding an existing runtime service with the same hostname and triggers a redeploy\n    override: false\n  # REQUIRED. Name of your other service\n  - hostname: teststorage1\n    type: shared-storage\n    ...\n```\n\n----------------------------------------\n\nTITLE: Basic Zerops YAML Structure\nDESCRIPTION: Demonstrates the basic structure of a zerops.yaml file, including the setup, build, and run sections for a single service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/specification.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: <service_name>\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Configuring zerops.yaml for Go Application Build and Deploy\nDESCRIPTION: This YAML configuration defines the build and runtime environment for a Go application in Zerops. It specifies the build process, deployment files, and runtime settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: go@latest\n      buildCommands:\n        - go build -o app main.go\n      deployFiles: app\n    run:\n      base: go@latest\n      ports:\n        - port: 8080\n      start: ./app\n```\n\n----------------------------------------\n\nTITLE: Defining Project Services with YAML Configuration\nDESCRIPTION: This YAML configuration defines a project infrastructure with PHP-nginx and PostgreSQL services. It includes vertical and horizontal auto-scaling settings and secret environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in php-apache@{version} or php-nginx@{version} format\n    type: php-nginx@latest\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n    # optional: create secret env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - # second service hostname\n    hostname: db\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Pushing Code to Zerops Service\nDESCRIPTION: Command to build and deploy your application in Zerops. Includes various flags for customization and deployment options.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\nzcli service push [serviceIdOrName] [flags]\n```\n\n----------------------------------------\n\nTITLE: Basic zerops.yaml Structure for a Python Application\nDESCRIPTION: Provides a foundational example of the `zerops.yaml` configuration file placed at the root of a repository for a Python application named 'app'. It outlines the necessary `build` and `run` sections, demonstrating key options like setting the base Python image, specifying deployment files (`app.py`), defining runtime ports (8000), and configuring the application start command (`python3 app.py`). Optional settings like OS selection, build/runtime preparation commands (`prepareCommands`), caching (`cache`), copying files to runtime (`addToRunPrepare`), and initialization commands (`initCommands`) are shown commented out.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: python@latest\n\n      # OPTIONAL. Set the operating system for the build environment.\n      # os: ubuntu\n\n      # OPTIONAL. Customize the build environment by installing additional packages\n      # or tools to the base build environment.\n      # prepareCommands:\n      #   - apt-get something\n      #   - curl something else\n\n      # REQUIRED. Select which files / folders to deploy after\n      # the build has successfully finished\n      deployFiles:\n        - app.py\n\n      # OPTIONAL. Copy files from build container to runtime container.\n      addToRunPrepare:\n        - requirements.txt\n\n      # OPTIONAL. Which files / folders you want to cache for the next build.\n      # Next builds will be faster when the cache is used.\n      # cache: file.txt\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n      base: python@latest\n\n      # OPTIONAL. Sets the internal port(s) your app listens on:\n      ports:\n        # port number\n        - port: 8000\n\n      # OPTIONAL. Customize the runtime Python environment by installing additional\n      # dependencies to the base Python runtime environment.\n      # prepareCommands:\n      #   - python3 -m pip install --ignore-installed -r requirements.txt\n\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Python application is started.\n      # initCommands:\n      #  - rm -rf ./cache\n\n      # REQUIRED. Your Python application start command\n      start: python3 app.py\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check for Nginx in Zerops YAML\nDESCRIPTION: Demonstrates how to set up a health check for the Nginx service using the healthCheck attribute with an HTTP GET request in the Zerops configuration YAML.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the folder that will be used as the root of the publicly\n      # accessible web server content. Enter the path relative to the /var/www folder.\n      documentRoot: public\n\n      # OPTIONAL. Define a health check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Build Environment Variables in zerops.yaml for Python\nDESCRIPTION: This YAML snippet demonstrates how to set basic environment variables for the build environment in the zerops.yaml file. It includes example variables for database configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Defining PHP Service Infrastructure in Zerops Using YAML - YAML\nDESCRIPTION: This YAML snippet outlines how to define a basic Zerops project infrastructure with a PHP service (nginx flavor), including service hostname, type, container scaling limits, and secret environment variables. Dependencies include Zerops platform and its zCLI tool. Key parameters are 'project.name', 'services[].hostname', 'services[].type', 'minContainers', 'maxContainers', and 'envSecrets'. Inputs are textual YAML, outputs are an initial project setup interpreted by Zerops. Max values for scaling (maxContainers) are constrained by platform defaults.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\\nproject:\\n  # project name\\n  name: my-project\\n# array of project services\\nservices:\\n  - # service name\\n    hostname: app\\n    # service type and version number in php-apache@{version} or php-nginx@{version} format\\n    type: php-nginx@latest\\n    # defines the minimum number of containers for horizontal autoscaling\\n    minContainers: 1\\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\\n    maxContainers: 6\\n    # optional: create env variables\\n    envSecrets:\\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\\n\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Project Configuration in YAML\nDESCRIPTION: This YAML file defines the Zerops project configuration, including services for PHP with Apache and PostgreSQL. It uses YAML preprocessing to generate a random APP_KEY.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nproject:\n  name: laravel-zerops\n  tags:\n    - zerops-tutorial # tag for easy filtering (optional)\n\nservices:\n  - hostname: app\n    type: php-apache@8.4\n    envSecrets:\n      # yamlPreprocessor feat: generates a random 32 char and stores it\n      APP_KEY: <@generateRandomString(<32>)>\n\n  - hostname: db\n    type: postgresql@16\n    mode: HA  # High Availability mode for robust production setup\n```\n\n----------------------------------------\n\nTITLE: Basic Zerops Rust Configuration\nDESCRIPTION: Complete example of zerops.yaml configuration file for building and deploying a Rust application, including build settings, runtime configuration, and deployment options.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: rust@latest\n      buildCommands:\n        - cargo b --release\n      deployFiles:\n        - target/release/~app\n    run:\n      base: rust@latest\n      ports:\n        - port: 8080\n      start: ./app\n```\n\n----------------------------------------\n\nTITLE: Defining Build and Run Pipeline for Node.js Project - YAML\nDESCRIPTION: This YAML snippet provides a full example of a zerops.yaml file that configures both build and runtime settings for a Node.js application in the Zerops platform. It specifies the service hostname, essential build and run sections, required and optional parameters such as base version, commands to customize environments, and files to deploy. Key dependencies are Node.js, npm, and Zerops tools. Parameters include service setup, base image, build/build/run commands, deployment files, and cache folders. The input is the YAML config; outputs are the deployment and runtime environments as orchestrated by Zerops. Limitations: some options are commented as optional and must be uncommented/configured as needed.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: nodejs@latest\n\n      # OPTIONAL. Set the operating system for the build environment.\n      # os: ubuntu\n\n      # OPTIONAL. Customize the build environment by installing additional packages\n      # or tools to the base build environment.\n      # prepareCommands:\n      #   - apt-get something\n      #   - curl something else\n\n      # REQUIRED. Build your application\n      buildCommands:\n        - npm i\n        - npm run build\n\n      # REQUIRED. Select which files / folders to deploy after\n      # the build has successfully finished\n      deployFiles:\n        - dist\n        - package.json\n        - node_modules\n\n      # OPTIONAL. Which files / folders you want to cache for the next build.\n      # Next builds will be faster when the cache is used.\n      cache: node_modules\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n      base: nodejs@latest\n\n      # OPTIONAL. Sets the internal port(s) your app listens on:\n      ports:\n        # port number\n        - port: 3000\n\n      # OPTIONAL. Customize the runtime Node.js environment by installing additional\n      # dependencies to the base Node.js runtime environment.\n      # prepareCommands:\n      #   - apt-get something\n      #   - curl something else\n\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Node.js application is started.\n      # initCommands:\n      #  - rm -rf ./cache\n\n      # REQUIRED. Your Node.js application start command\n      start: npm start\n\n```\n\n----------------------------------------\n\nTITLE: Overriding PHP ini Settings using Environment Variables in zerops.yaml\nDESCRIPTION: This YAML configuration demonstrates how to override PHP configuration directives, such as `post_max_size`, by defining environment variables prefixed with `PHP_INI_` within the `run.envVariables` section of the `zerops.yaml` file. This allows for specific PHP runtime tuning within the Zerops platform.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-runtime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    run:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: php-nginx@8.3\n\n      # OPTIONAL. Defines the env variables for the build environment:\n      envVariables:\n        PHP_INI_post_max_size: 10M\n```\n\n----------------------------------------\n\nTITLE: Configuring Build & Deploy Pipeline for Node.js in zerops.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure a basic build and deploy pipeline for a Node.js application in Zerops. It specifies the build environment, commands, deployment files, caching, and runtime configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: api\n    build:\n      base: nodejs@20\n      buildCommands:\n        - npm i\n        - npm run build\n      deployFiles: ./dist\n      cache: node_modules\n    run:\n      base: nodejs@20\n      start: npm start\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Project and Java Service Infrastructure - YAML\nDESCRIPTION: This YAML snippet demonstrates a basic project infrastructure definition for Zerops, specifying project name, a Java service with type versioning, scaling configuration, and secret environment variables. It requires knowledge of Zerops service naming and YAML syntax. Key parameters include 'hostname' for the service identifier, 'type' to select the Java runtime version, and 'minContainers'/'maxContainers' for scaling. The 'envSecrets' section lists sensitive environment variables to be injected securely at runtime. Inputs are the project and service configurations, with the output being the established infrastructure as per Zerops conventions. The snippet is suitable for new projects or quick starts, but only supports one Java service per this example.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\\nproject:\\n  # project name\\n  name: my-project\\n# array of project services\\nservices:\\n  - # service name\\n    hostname: app\\n    # service type and version number in java@{version} format\\n    type: java@latest\\n    # defines the minimum number of containers for horizontal autoscaling\\n    minContainers: 1\\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\\n    maxContainers: 6\\n    # optional: create env variables\\n    envSecrets:\\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Check in Zerops Deployment\nDESCRIPTION: Shows how to configure readiness checks for application deployment using either HTTP endpoints or command execution. Includes options for HTTP port, path, host, and scheme configuration, as well as custom command execution.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/specification.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndeploy:\n  readinessCheck:\n    httpGet:\n      port: 80\n      path: /status\n      host: 127.0.0.1\n      scheme: https\n\n    # Or use commands\n    exec:\n      command: |\n        touch grass\n        rm -rf life\n        mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Node.js (JavaScript)\nDESCRIPTION: This code snippet demonstrates the standard method for accessing environment variables within a Node.js application. The `process.env` object contains all environment variables available to the running Node.js process. To retrieve the value of a specific variable defined for the service (either via `zerops.yaml` or the Zerops GUI), access it as a property of `process.env` using its key, replacing `YOUR_VARIABLE_KEY_HERE` with the actual variable name.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nprocess.env.YOUR_VARIABLE_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec-Based Readiness Check in YAML\nDESCRIPTION: This snippet shows how to configure a readiness check in Zerops using an 'exec' command in YAML. The readiness check runs a shell script sequence using the 'command' parameter, which in this example touches a file, removes a directory, and moves a user folder. The command has access to the same environment variables as the .NET application. This setup is useful when application health can't be confirmed via HTTP and can be fully customized as needed. No additional dependencies are required apart from shell access within the container and Zerops using the YAML definition.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Defining a Node.js Project and Services in Zerops YAML\nDESCRIPTION: This YAML configuration defines a Zerops project named `recipe-nodejs`. It specifies two services: `api`, a Node.js v20 service built from the `zeropsio/recipe-nodejs` GitHub repository with public subdomain access enabled, and `db`, a non-highly available PostgreSQL v16 database service. This configuration is used for importing the project into Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: recipe-nodejs\n  tags:\n    - zerops-recipe\n\nservices:\n  - hostname: api\n    type: nodejs@20\n    enableSubdomainAccess: true\n    buildFromGit: https://github.com/zeropsio/recipe-nodejs\n\n  - hostname: db\n    type: postgresql@16\n    mode: NON_HA\n    priority: 1\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Go Service Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates a basic configuration for creating a Go service in Zerops. It includes project name, service hostname, Go version, container scaling, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in go@{version} format\n    type: go@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Project with Java and PostgreSQL Services - YAML\nDESCRIPTION: This YAML snippet provides an advanced infrastructure definition for a Zerops project containing both Java and PostgreSQL services, showcasing custom vertical and horizontal auto-scaling settings, project metadata, tags, and secure environment variables. Dependencies include Zerops service definitions for 'java@latest' and 'postgresql@12', and familiarity with available scaling keys. Notable parameters include 'verticalAutoscaling' for resource customization, 'minContainers'/'maxContainers' for scaling, and PostgreSQL 'mode' for high-availability determination. Input is comprehensive multi-service YAML, output is a fully configured, scalable project. Limitations include maximum container values and YAML formatting requirements. This setup supports both production and demo environments.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\\nproject:\\n  # project name\\n  name: my-project\\n  # optional: project description\\n  description: A project with a Java and PostgreSQL database\\n  # optional: project tags\\n  tags:\\n    - DEMO\\n    - ZEROPS\\n# array of project services\\nservices:\\n  - # service name\\n    hostname: app\\n    # service type and version number in java@{version} format\\n    type: java@latest\\n    # optional: vertical auto scaling customization\\n    verticalAutoscaling:\\n      cpuMode: DEDICATED\\n      minCpu: 2\\n      maxCpu: 5\\n      minRam: 2\\n      maxRam: 24\\n      minDisk: 6\\n      maxDisk: 50\\n      startCpuCoreCount: 3\\n      minFreeRamGB: 0.5\\n      minFreeRamPercent: 20\\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\\n    minContainers: 2\\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\\n    maxContainers: 4\\n    # optional: create secret env variables\\n    envSecrets:\\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\\n  - # second service hostname\\n    hostname: db\\n    # service type and version number in postgresql@{version} format\\n    type: postgresql@12\\n    # mode of operation \"HA\"/\"non_HA\"\\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced PostgreSQL Services with zCLI\nDESCRIPTION: A comprehensive YAML configuration for creating a project with multiple PostgreSQL services. This example includes custom auto-scaling settings, dedicated CPU resources, and both highly available and non-highly available service modes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a PostgreSQL database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n# array of project services\nservices:\n  - # first service hostname\n    hostname: postgresql1\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: HA\n    # optional: vertical auto-scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n  - # second service hostname\n    hostname: postgresql2\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Basic Python Service Configuration in YAML\nDESCRIPTION: Basic YAML configuration for creating a Python service in Zerops with environment variables and auto-scaling settings. Defines project name, service hostname, Python version, and container scaling parameters.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in python@{version} format\n    type: python@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Deployment in zerops.yaml\nDESCRIPTION: This YAML file defines the deployment configuration for the Laravel application, including build and run commands, environment variables, and health checks.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - php@8.4\n      buildCommands:\n        - composer install --ignore-platform-reqs\n      deployFiles: ./\n      cache:\n        - vendor\n        - composer.lock\n    deploy:\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /up\n    run:\n      base: php-apache@8.4\n      envVariables:\n        APP_NAME: \"Laravel Zerops Demo\"\n        APP_DEBUG: false\n        APP_ENV: production\n        APP_URL: ${zeropsSubdomain}\n        DB_CONNECTION: pgsql\n        DB_HOST: db\n        DB_PORT: 5432\n        DB_DATABASE: db\n        DB_USERNAME: ${db_user}\n        DB_PASSWORD: ${db_password}\n        LOG_CHANNEL: stack\n        LOG_LEVEL: debug\n        SESSION_DRIVER: database\n\n      initCommands:\n        - php artisan config:cache\n        - php artisan route:cache\n        - php artisan migrate --force --isolated\n        - php artisan optimize\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /up\n```\n\n----------------------------------------\n\nTITLE: Runtime Configuration in Zerops YAML\nDESCRIPTION: Shows runtime configuration options including base technology, ports, prepare commands, init commands, start command, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/specification.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  base: nodejs@latest\n  ports:\n    - port: 8080\n      protocol: TCP\n      httpSupport: true\n  prepareCommands:\n    - some-command\n  initCommands:\n    - rm -rf ./cache\n  start: npm start\n  envVariables:\n    DB_NAME: db\n    DB_HOST: db\n    DB_USER: db\n    DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Check in YAML for Bun Application on Zerops\nDESCRIPTION: Example of how to configure a readiness check in the zerops.yaml file for a Bun application. This includes options for both HTTP GET and exec command checks to ensure the application is ready to handle requests before becoming active.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/deploy-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessCheck:\n  httpGet:\n    path: /health\n    port: 3000\n  # or\n  exec:\n    command: [\"node\", \"healthcheck.js\"]\n```\n\n----------------------------------------\n\nTITLE: HTTP Health Check Configuration\nDESCRIPTION: Configuration for HTTP GET-based health check implementation including port, path, and optional parameters\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Python application start command\n      start: app.py\n\n      # OPTIONAL. Define a health check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n\n----------------------------------------\n\nTITLE: Zero-Downtime Deployment Configuration\nDESCRIPTION: Zerops deployment pipeline configuration including build steps, caching, and deployment commands\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: php@8.3\n      buildCommands:\n        - composer install --no-dev --optimize-autoloader\n      deployFiles: ./\n      cache: vendor\n    run:\n      base: php-nginx@8.3\n      initCommands:\n        - php artisan config:cache\n        - php artisan route:cache\n        - php artisan migrate --force --isolated\n```\n\n----------------------------------------\n\nTITLE: Configuring Secret Environment Variables for a PHP Service - Env\nDESCRIPTION: This snippet demonstrates the format for providing secret environment variables for a PHP service on Zerops, typically used alongside YAML infrastructure configuration. No additional dependencies are required; environment keys and values (such as S3 credentials) are declared plainly. Variables should match service requirements, and their values are securely stored and injected at runtime. This method is best suited for sensitive runtime configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\\\"P8cX1vVVb\\\"\\nS3_ACCESS_SECRET=\\\"ogFthuiLYki8XoL73opSCQ\\\"\\n\n```\n\n----------------------------------------\n\nTITLE: Complete Zerops Service Configuration Example\nDESCRIPTION: A comprehensive example showing all possible configuration options for Zerops services, including a fully configured Node.js API service and a simple static frontend service. Demonstrates environment variables, storage settings, autoscaling, nginx configuration and deployment options.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n  - hostname: app           # REQUIRED: Unique service identifier\n    type: nodejs@22                 # REQUIRED: Service type and version\n    mode: HA                        # HA or NON_HA mode (default: NON_HA)\n\n    # Environment variables\n    envSecrets:                     # Secret environment variables (blurred in GUI)\n      SECRET_KEY: <@generateRandomString(<32>)>  # Generated random string\n    dotEnvSecrets: |                # Environment vars in .env format\n      APP_KEY=<@generateRandomString(<32>)>\n\n    # Storage configuration\n    objectStorageSize: 2            # Object storage size in GB\n    objectStoragePolicy: public-read-write  # Predefined S3 bucket policy\n    # Note: Typically you would use either objectStoragePolicy OR objectStorageRawPolicy, not both\n    objectStorageRawPolicy: |       # Custom S3 bucket policy\n      {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n          {\n            \"Effect\": \"Allow\",\n            \"Principal\": \"*\",\n            \"Action\": [\"s3:GetObject\"],\n            \"Resource\": [\"arn:aws:s3:::{{ .BucketName }}/*\"]\n          }\n        ]\n      }\n\n    # Build and deployment\n    buildFromGit: https://github.com/myorg/myapp  # Git repo for one-time build\n    enableSubdomainAccess: true     # Enable public access via Zerops subdomain\n    priority: 1                     # Higher priority services are created sooner\n    override: true                  # When true, triggers redeploy of existing service\n\n    # Vertical autoscaling\n    verticalAutoscaling:\n      minCpu: 1                     # Minimum number of virtual CPUs\n      maxCpu: 3                     # Maximum number of virtual CPUs\n      cpuMode: DEDICATED            # SHARED or DEDICATED CPU mode\n      minRam: 1                     # Minimum RAM in GB\n      maxRam: 4                     # Maximum RAM in GB\n      minDisk: 1                    # Minimum disk space in GB\n      maxDisk: 10                   # Maximum disk space in GB\n      startCpuCoreCount: 2          # Initial CPU core count\n      minFreeCpuCores: 0.5          # Min free CPU cores before scaling\n      minFreeCpuPercent: 20         # Min free CPU percentage before scaling\n      minFreeRamGB: 0.5             # Min free RAM in GB before scaling\n      minFreeRamPercent: 20         # Min free RAM percentage before scaling\n\n    # Horizontal autoscaling\n    minContainers: 2                # Minimum number of containers (default: 1, max: 10)\n    maxContainers: 6                # Maximum number of containers (max: 10)\n\n    # Shared storage\n    mount:                          # List of shared storage services to mount\n      - teststorage1\n\n    # Nginx configuration\n    nginxConfig: |-                 # Custom nginx configuration\n      server {\n          listen 80 default_server;\n          listen [::]:80 default_server;\n          server_name _;\n          root /var/www/public;\n\n          location / {\n              try_files $uri $uri/ /index.html;\n          }\n\n          access_log syslog:server=unix:/dev/log,facility=local1 default_short;\n          error_log syslog:server=unix:/dev/log,facility=local1;\n      }\n\n    # Zerops.yaml configuration\n    zeropsSetup: backendapi          # Service setup name from zeropsYaml or repo\n    zeropsYaml:                     # Full zerops.yaml configuration\n      zerops:\n        - setup: backendapi\n          build:\n            base: nodejs@22\n            buildCommands:\n              - npm ci\n              - npm run build\n            deployFiles: ./\n            cache: node_modules\n          run:\n            initCommands:\n              - npm run db:migrate\n            start: npm start\n\n  # A second, simpler service example\n  - hostname: teststorage1\n    type: shared-storage\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced .NET and PostgreSQL Service Configuration in YAML\nDESCRIPTION: This YAML snippet shows a more complex configuration for creating a project with both a .NET service and a PostgreSQL service in Zerops. It includes detailed auto-scaling settings, multiple services, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-project\n  description: A project with a .NET and PostgreSQL database\n  tags:\n    - DEMO\n    - ZEROPS\nservices:\n  - hostname: app\n    type: dotnet@6\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    minContainers: 2\n    maxContainers: 4\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - hostname: db\n    type: postgresql@12\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Project in Zerops YAML\nDESCRIPTION: YAML configuration for importing a Python project into Zerops, specifying service details like hostname, container scaling, and Git repository source.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: python@latest\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-python-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Connecting to MariaDB via mysql CLI (Shell)\nDESCRIPTION: Connects to a MariaDB database instance hosted on Zerops using the `mysql` command-line client after establishing a Zerops VPN connection. Replace placeholders `[hostname]`, `[user]`, `[password]`, and `[database_name]` with actual connection details obtained from the Zerops GUI. Note that SSL/TLS should not be used as the connection is secured by the VPN.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/export-import-data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nmysql -h [hostname] -u [user] -p [password] [database_name]\n```\n\n----------------------------------------\n\nTITLE: Logging into Zerops using Access Token\nDESCRIPTION: This command authenticates with Zerops using a personal access token that you've previously generated in the Zerops GUI. The token allows secure access to Zerops services and resources.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nzcli login <token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables for Redis in Laravel on Zerops\nDESCRIPTION: This YAML snippet sets up environment variables for Redis connection, caching, session management, and queue configuration in a Laravel application on Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - php@8.4\n      os: alpine\n    run:\n      base: php-nginx@8.4\n      os: alpine\n      siteConfigPath: site.conf.tmpl\n      envVariables:\n        # Redis Connection Settings\n        REDIS_CLIENT: phpredis    # PHP Redis client for better performance\n        REDIS_HOST: valkey        # Internal hostname of Valkey service\n        REDIS_PORT: 6379         # Standard Redis port number\n\n        # Cache Configuration\n        CACHE_PREFIX: cache      # Namespace for cache keys\n        CACHE_STORE: redis       # Use Redis as primary cache\n\n        # Session Configuration\n        SESSION_DRIVER: redis    # Store sessions in Redis\n        SESSION_ENCRYPT: false   # Disable session encryption\n        SESSION_LIFETIME: 120    # Session timeout in minutes\n        SESSION_PATH: /          # Cookie path setting\n\n        # Queue Configuration\n        QUEUE_CONNECTION: redis  # Use Redis for job queues\n        BROADCAST_CONNECTION: redis  # Redis for event broadcasting\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Health Checks in Zerops YAML\nDESCRIPTION: This YAML example demonstrates configuring an application health check using an HTTP GET request within the `run` section of `zerops.yml`. The `healthCheck` object uses `httpGet` to specify the `port` (80) and `path` (/status) for the check, targeting `http://127.0.0.1:80/status` within the container. Optional `host` and `scheme` attributes can also be set.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Deno application start command\n      start: deno task start\n\n      # OPTIONAL. Define a health check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Deno Service Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates a basic configuration for creating a Deno service in Zerops. It includes project name, service hostname, Deno version, container scaling settings, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in deno@{version} format\n    type: deno@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Environment Variables in zerops.yaml (YAML)\nDESCRIPTION: This YAML snippet illustrates how to define basic environment variables accessible during the runtime of an Nginx service in Zerops. Variables are specified under the `envVariables` key within the `run` section of the `zerops.yaml` configuration file. Similar to build variables, it shows database examples and variable referencing (`${db_password}`). Updating these variables requires modifying `zerops.yaml` and redeploying the application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    run:\n       …\n\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment Variables in Zerops YAML\nDESCRIPTION: This snippet illustrates how to define environment variables for the Go application's runtime environment using the `envVariables` map under the `run` section in `zerops.yaml`. It shows setting simple key-value pairs and referencing Zerops-managed secrets like `${db_password}`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        GO_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Environment Variables\nDESCRIPTION: Command syntax for securely updating environment variables containing sensitive information using the setSecretEnv command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nzsc setSecretEnv <key> <content>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Build Environment Variables in zerops.yaml (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define basic environment variables specifically for the build environment within a `zerops.yaml` file. Variables like `NODE_ENV`, `DB_NAME`, `DB_HOST`, `DB_USER`, and `DB_PASS` (which references another variable `db_password`) are set under the `envVariables` key within the `build` section of a service setup (named 'app'). These variables are available only during the application build process on Zerops. Updates require modifying this file and redeploying the application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n       …\n\n      # OPTIONAL. Defines the env variables for the build environment:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Project Infrastructure in YAML\nDESCRIPTION: This YAML snippet defines a Zerops project infrastructure with a Rust service and a PostgreSQL service. It includes configuration for vertical and horizontal scaling, as well as environment secrets.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in rust@{version} format\n    type: rust@latest\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n    # optional: create secret env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - # second service hostname\n    hostname: db\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Using Zerops CLI for Manual Pipeline Trigger\nDESCRIPTION: This Shell snippet shows the usage of the 'zcli service push' command to manually trigger the build & deploy pipeline in Zerops. It includes various flags for customizing the push process, such as specifying project and service IDs, working directory, and version name.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Project Deployment in Zerops\nDESCRIPTION: YAML configuration for deploying a Go application on Zerops. Defines project name, service type, container scaling, Git source, and subdomain access settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: go@latest\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-go-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Health Check for Java in Zerops YAML\nDESCRIPTION: This snippet demonstrates how to set up an HTTP GET health check for a Java application in Zerops, specifying the port and path for the check.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: java -jar target/app.jar\n\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Variables in YAML\nDESCRIPTION: This snippet demonstrates how to create secret variables for a service using the envSecrets attribute in the import.yaml file. These variables are used for storing sensitive data that shouldn't be in the source repository.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  ...\n  envSecrets:\n    S3_ACCESS_KEY_ID: 'your-secret-s3-key'\n    S3_ACCESS_SECRET: 'your-s3-access-secret'\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Check in YAML for Go Deployment\nDESCRIPTION: Example of how to configure a readiness check in the zerops.yaml file for a Go application deployment. This snippet shows the structure for both httpGet and exec.command readiness checks.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/deploy-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  # Other build configurations...\n  deploy:\n    # Deployment configurations...\n    readinessCheck:\n      httpGet:\n        path: /health\n        port: 8080\n      # Or\n      exec:\n        command: [\"./health-check.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Installing PostgreSQL Extensions as Superuser\nDESCRIPTION: SQL commands to install common PostgreSQL extensions including pg_stat_statements for query statistics, vector for vector operations, and postgis for geospatial functionality. Requires superuser privileges to execute.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/manage.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sql\nCODE:\n```\nCREATE EXTENSION pg_stat_statements;\nCREATE EXTENSION vector;\nCREATE EXTENSION postgis;\n```\n\n----------------------------------------\n\nTITLE: Implementing Meilisearch Search in React (JavaScript)\nDESCRIPTION: This code snippet demonstrates how to perform a search query against a Meilisearch instance from a React application using JavaScript. It uses environment variables to dynamically inject the Meilisearch service endpoint and search API key, sends a POST request with the query and optional limit, and processes the returned result hits. Required dependencies are React and a runtime environment capable of resolving environment variables for connection details. The input is the search string, and output is a dynamically rendered list of product names. Sensitive API keys must not be exposed in production frontend code; only use public search tokens.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/meilisearch/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { useState } from 'react';\n\nconst MEILISEARCH_URL = process.env.zeropsSubdomain;\nconst SEARCH_KEY = process.env.defaultSearchKey;\n\nfunction SearchComponent() {\n  const [results, setResults] = useState([]);\n\n  const handleSearch = async (query) => {\n    const response = await fetch(`${MEILISEARCH_URL}/indexes/products/search`, {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${SEARCH_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        q: query,\n        limit: 10\n      })\n    });\n\n    const data = await response.json();\n    setResults(data.hits);\n  };\n\n  return (\n    <div>\n      <input\n        type=\"search\"\n        onChange={(e) => handleSearch(e.target.value)}\n        placeholder=\"Search products...\"\n      />\n      <ul>\n        {results.map(hit => (\n          <li key={hit.id}>{hit.name}</li>\n        ))}\n      </ul>\n    </div>\n  );\n}\n\n```\n\n----------------------------------------\n\nTITLE: Manual Build & Deploy using Zerops CLI `push` command (Shell)\nDESCRIPTION: Displays the usage and available flags for the `zcli push` command. This command uploads application code from the working directory (respecting `.gitignore`), initiates the build process defined in `zerops.yaml`, and deploys the resulting application to Zerops. Key flags allow specifying project/service IDs, archive paths, custom version names, working directories, and the `zerops.yaml` path.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Defining Build & Runtime Variables in YAML\nDESCRIPTION: This snippet shows how to define service-level environment variables for both build and runtime containers in the zerops.yaml file. These variables are accessible within their respective containers.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n  build:\n    envVariables:\n      DB_NAME: db\n      DB_HOST: 127.0.0.1\n      DB_USER: db\n      DB_PASS: password\n    ...\n  run:\n    envVariables:\n      DB_NAME: db\n      DB_HOST: 127.0.0.1\n      DB_USER: db\n      DB_PASS: password\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in zerops.yaml for Laravel\nDESCRIPTION: This snippet demonstrates how to set environment variables for a Laravel application using the zerops.yaml configuration file. It includes examples for setting the app key, database connection, and host.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        APP_KEY: \"base64:your-key-here\"\n        DB_CONNECTION: \"pgsql\"\n        DB_HOST: ${db_host}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Runtime\nDESCRIPTION: Configuration for defining environment variables in the Python runtime environment\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        PYTHON_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Basic Elixir Service Configuration in YAML\nDESCRIPTION: Basic YAML configuration for creating a Elixir service with auto-scaling and environment variables. Defines project structure, service type, container scaling limits, and secret environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-project\nservices:\n  - hostname: app\n    type: elixir@latest\n    minContainers: 1\n    maxContainers: 6\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Health Checks in Zerops YAML\nDESCRIPTION: This example demonstrates configuring an optional health check using an HTTP GET request within the `zerops.yaml` file. The `healthCheck.httpGet` object under the `run` section specifies the `port` (80) and `path` (/status) to check on `http://127.0.0.1`. Optional `host` and `scheme` attributes can also be defined.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Go application start command\n      start: ./app\n\n      # OPTIONAL. Define a health check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n\n----------------------------------------\n\nTITLE: Configuring Environment Variables in Zerops YAML for Deno\nDESCRIPTION: Defines environment variables for the build environment, including database connection details and application settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: deno@latest\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Enabling YAML Preprocessor and Generating Random String in Zerops YAML\nDESCRIPTION: This YAML snippet shows how to enable the Zerops YAML preprocessor by adding `#yamlPreprocessor=on` at the beginning of the file. It then defines a project and two services (`app` and `db`). For the `app` service, it uses the `generateRandomString` function within the `envSecrets` section to generate a 64-character random string for the `SECRET_KEY` environment variable.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nproject:\n  name: project\nservices:\n  - hostname: app\n    type: nodejs@latest\n    buildFromGit: https://github.com/example/app\n    enableSubdomainAccess: true\n    envSecrets:\n      # yamlPreprocessor feat: generates a random 64 char and stores it\n      SECRET_KEY: <@generateRandomString(<64>)> # yamlPreprocessor=on\n    \n  - hostname: db\n    type: postgresql@16\n    mode: HA\n```\n\n----------------------------------------\n\nTITLE: Generating Random String and Hash Outputs in Zerops\nDESCRIPTION: Examples of generating a random string and applying various hash algorithms (sha256, sha512, bcrypt, argon2id) to it in Zerops configuration. These examples demonstrate how to generate secure passwords and their corresponding hash values.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\n7a14c8e74bc98a0d74253b1d1a4ef6\n```\n\nLANGUAGE: yaml\nCODE:\n```\n081b91d6dff5036229a92e2442fb65d7c8124571d4e70a2ac4729aeb86957407\n```\n\nLANGUAGE: yaml\nCODE:\n```\n89c05547de0aa4926512a958f95ab8bf4096ceec63ad5aad4266890bfa059e0cc98917c54276ba4cd61f1dde4c8efda948fc967885c9dd50558ed939722ca10c\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$2a$10$CxKZX0yIxdc7ts6eI5aBu.g.heAsFcePdMDEpnlViTlo3vGc//PXe\n```\n\nLANGUAGE: yaml\nCODE:\n```\n$argon2id$v=19$m=98304,t=1,p=3$uWBpmoUT3sfckXHyRF9hlg$8bGtNffuHxaRIgN99zCmJeGEYJF5BY2J9TwzqmezP28\n```\n\n----------------------------------------\n\nTITLE: Complete Zerops Service Configuration\nDESCRIPTION: Full example of zerops.yaml configuration including build and deployFiles settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      deployFiles: ./\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Service Import in YAML\nDESCRIPTION: This YAML snippet defines a service to be added to an existing Zerops project. It includes configuration for a Bun service with autoscaling and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in Bun@{version} format\n    type: bun@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Scheduling Cron Jobs with crontab in Zerops YAML - YAML\nDESCRIPTION: This YAML example demonstrates how to define scheduled (cron) jobs in the Zerops runtime using the 'crontab' attribute inside the 'run' section. Each job specifies a 'command' to execute and a 'timing' string using standard cron syntax. Both the cron timing and the referenced command must be correct and valid for the environment. Used for background processing or maintenance tasks.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n\n    # ==== how to run your application ====\n    run:\n      crontab:\n        # REQUIRED. Sets the command to execute:\n        - command: \"\"\n        # REQUIRED. Sets the interval time to execute:\n          timing: \"0 * * * *\"\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Kafka Seed Broker (Plaintext)\nDESCRIPTION: Demonstrates the connection string format for accessing the Kafka cluster via the seed (bootstrap) broker hostname and the standard Kafka port (9092). This is the typical method for clients to discover the cluster topology.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/kafka/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n<hostname>:9092\n```\n\n----------------------------------------\n\nTITLE: Defining Build and Deployment Configuration - Zerops YAML - yaml\nDESCRIPTION: Specifies the necessity of the zerops.yaml configuration file in the root of your repository. This YAML file determines the build, deploy, and run processes for Zerops CI/CD. Users should follow the Zerops YAML specification for valid syntax and structure. Required for initiating any integration with Zerops; without this file, automated pipelines will not function.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/gitlab-integration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops.yaml\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Runtime for Java Service (Zerops YAML) - YAML\nDESCRIPTION: Defines both build and run phases for a Java application in Zerops using zerops.yaml. Specifies technology base, build commands (e.g., Maven wrapper for building), deployment files, and runtime startup commands. Customization through OS, prepare/build commands, and deployment/caching options is supported. Expects this YAML at the repository root; functions within Zerops CI/CD pipeline with required attributes like 'base', 'buildCommands', and 'start'.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\\n  # define hostname of your service\\n  - setup: app\\n    # ==== how to build your application ====\\n    build:\\n      # REQUIRED. Set the base technology for the build environment:\\n      base: java@latest\\n\\n      # OPTIONAL. Set the operating system for the build environment.\\n      # os: ubuntu\\n\\n      # OPTIONAL. Customize the build environment by installing additional packages\\n      # or tools to the base build environment.\\n      # prepareCommands:\\n      #   - apt-get something\\n      #   - curl something else\\n\\n      # REQUIRED. Build your application\\n      buildCommands:\\n        - ./mvnw clean install\\n      # REQUIRED. Select which files / folders to deploy after\\n      # the build has successfully finished\\n      deployFiles: target/app.jar\\n\\n      # OPTIONAL. Which files / folders you want to cache for the next build.\\n      # Next builds will be faster when the cache is used.\\n      # cache: some_file\\n\\n    # ==== how to run your application ====\\n    run:\\n      # OPTIONAL. Sets the base technology for the runtime environment:\\n      base: java@latest\\n\\n      # OPTIONAL. Sets the internal port(s) your app listens on:\\n      ports:\\n        # port number\\n        - port: 8080\\n\\n      # OPTIONAL. Customize the runtime Java environment by installing additional\\n      # dependencies to the base Java runtime environment.\\n      # prepareCommands:\\n      #   - apt-get something\\n      #   - curl something else\\n\\n      # OPTIONAL. Run one or more commands each time a new runtime container\\n      # is started or restarted. These commands are triggered before\\n      # your Java application is started.\\n      # initCommands:\\n      #  - rm -rf ./cache\\n\\n      # REQUIRED. Your Java application start command\\n      start: java -jar target/app.jar\n```\n\n----------------------------------------\n\nTITLE: Defining Application Build Steps with buildCommands in zerops.yaml\nDESCRIPTION: Demonstrates setting the required `buildCommands` attribute within the `build` section. This example uses `composer install` to install PHP application dependencies after the environment is prepared and before files are selected for deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: php-apache@latest\n\n      # REQUIRED. Build your application\n      buildCommands:\n        - composer install\n      ...\n```\n\n----------------------------------------\n\nTITLE: Running Zerops CLI Push Command\nDESCRIPTION: The 'zcli push' command uploads application code, builds, and deploys the application in Zerops. It triggers the build pipeline defined in zerops.yaml.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple MariaDB Services with Advanced Configuration in YAML for zCLI\nDESCRIPTION: This YAML snippet showcases a more comprehensive `description.yaml` file for Zerops zCLI. It defines a project with optional metadata (description, tags) and two MariaDB 10.4 services. The first service (`mariadb1`) is configured for High Availability (`HA`), uses dedicated CPU cores, has custom vertical auto-scaling parameters, and sets the `lower_case_table_names` environment variable. The second service (`mariadb2`) is a standard Non-HA (`NON_HA`) instance with default settings. This file allows for detailed infrastructure definition via zCLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a MariaDB database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n# array of project services\nservices:\n  - # first service hostname\n    hostname: mariadb1\n    # service type and version number in mariadb@{version} format\n    type: mariadb@10.4\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: HA\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # optional: system variables configuration\n    envSecrets:\n      lower_case_table_names: \"1\"\n  - # second service hostname\n    hostname: mariadb2\n    # service type and version number in mariadb@{version} format\n    type: mariadb@10.4\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Creating Advanced Go Service Configuration with PostgreSQL in YAML\nDESCRIPTION: This YAML snippet shows an advanced configuration for creating a Go service with custom scaling options and a PostgreSQL database in Zerops. It includes detailed project information, service configurations, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a Go and PostgreSQL database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in go@{version} format\n    type: go@latest\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n    # optional: create secret env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - # second service hostname\n    hostname: db\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Runtime Environment Variables in zerops.yaml (YAML)\nDESCRIPTION: This YAML configuration snippet shows how to set basic environment variables for the runtime environment of a Node.js service using the `zerops.yaml` file. These variables are defined under the `envVariables` key within the `run` section of the service setup ('app'). Examples include `NODE_ENV` and database connection details like `DB_NAME`, `DB_HOST`, `DB_USER`, and `DB_PASS` (referencing `db_password`). These variables are accessible to the Node.js application when it is running on Zerops. Modifying these variables requires updating `zerops.yaml` and redeploying.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    run:\n       …\n\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Basic zerops.yaml Configuration for Gleam\nDESCRIPTION: Complete example of zerops.yaml configuration file showing build and runtime settings for a Gleam application, including build commands, deployment files, and runtime configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: gleam@latest\n      buildCommands:\n        - npm i\n        - npm run build\n      deployFiles:\n        - dist\n        - package.json\n        - node_modules\n      cache: node_modules\n    run:\n      base: gleam@latest\n      ports:\n        - port: 3000\n      start: npm start\n```\n\n----------------------------------------\n\nTITLE: Copying Files and Preparing Runtime with Zerops YAML - YAML\nDESCRIPTION: This YAML snippet demonstrates how to copy a configuration file and install additional packages or tools during the prepare runtime container phase in Zerops. It uses the 'addToRunPrepare' attribute to specify files to be copied from the build container, and the 'prepareCommands' attribute in the 'run' section to install dependencies. Requires a properly defined Zerops service with 'build' and 'run' keys; the 'prepareCommands' array runs in the runtime container before application start. All commands and file paths must be accessible and valid within the build and runtime environments.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Gleam runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration in YAML\nDESCRIPTION: Example of defining and passing environment variables to Docker containers using zerops.yaml configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/docker/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        DB_HOST: ${db_hostname}\n        DB_PORT: ${db_port}\n```\n\n----------------------------------------\n\nTITLE: Defining Build Commands for Bun Application\nDESCRIPTION: This snippet shows how to define build commands for a Bun application. It includes commands for installing dependencies and running the build script.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: bun@latest\n      buildCommands:\n        - bun i\n        - bun run build\n      ...\n```\n\n----------------------------------------\n\nTITLE: Defining Basic zerops.yaml Structure for .NET Application\nDESCRIPTION: This snippet shows the basic structure of a zerops.yaml file for a .NET application, including setup, build, and run configurations.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: dotnet@6\n      buildCommands:\n        - npm i\n        - npm run build\n      deployFiles:\n        - dist\n        - package.json\n        - node_modules\n      cache: node_modules\n    run:\n      base: dotnet@latest\n      ports:\n        - port: 5000\n      start: npm start\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for PHP Runtime in Zerops\nDESCRIPTION: This snippet shows how to define environment variables for the PHP runtime environment in Zerops. It demonstrates setting multiple variables, including using references to other variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        PHP_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Node.js Services Using zerops.yaml - YAML\nDESCRIPTION: This YAML snippet demonstrates how to define multiple runtime services (e.g., 'app' and 'api') within a single zerops.yaml file for monorepo or microservice-style deployments. Each service has independent build and run sections, facilitating configuration of multiple applications under the same repository. Dependencies include proper service hostnames defined for each setup entry. Requires Zerops build and runtime environments. Input is the structured YAML; output is multi-service orchestration. Limitations: build and run sections are represented as ellipses and must be completed as required.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # definition for app service\n  - setup: app\n    build: ...\n    run: ...\n\n  # definition for api service\n  - setup: api\n    build: ...\n    run: ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Cron Jobs in YAML for Zerops\nDESCRIPTION: This snippet shows the structure for defining multiple cron jobs in the zerops.yaml file. It illustrates how to list multiple jobs under the crontab key.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/cron.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  crontab:\n    - command: ...\n      ...\n    - command: ...\n      ...\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Runtime Environment Variables in zerops.yaml\nDESCRIPTION: This YAML snippet shows how to configure basic environment variables for the runtime environment using the `zerops.yaml` file. Variables are defined under the `envVariables` key within the `run` section. Similar to build variables, it supports static values and references to other variables like `${db_password}`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    run:\n       …\n\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Customize Build Environment with prepareCommands (apt-get, curl) - YAML\nDESCRIPTION: Demonstrates use of 'prepareCommands' in build configuration to install additional OS packages or dependencies before actual build commands are executed. Suitable for projects needing custom tooling or scripts available in the build container; ensure the commands are compatible with the selected OS (e.g., use 'apt-get' for Ubuntu). Failing commands abort the build; placement is in zerops.yaml build section.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\\n  # hostname of your service\\n  - setup: app\\n    # ==== how to build your application ====\\n    build:\\n      # REQUIRED. Set the base technology for the build environment:\\n      base: java@latest\\n\\n      # OPTIONAL. Customize the build environment by installing additional packages\\n      # or tools to the base build environment.\\n      prepareCommands:\\n        - apt-get something\\n        - curl something else\\n      ...\n```\n\n----------------------------------------\n\nTITLE: Direct PostgreSQL Connection Parameters in Zerops\nDESCRIPTION: This snippet shows the basic connection parameters needed to directly connect to a PostgreSQL database within the same Zerops project. It includes the host, port, username, and reference to the password location.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/connect.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nhost = database1\nport = 5432\nuser = database1\npassword = ********** (find under Access Details)\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Project Infrastructure in YAML\nDESCRIPTION: This YAML snippet defines a Zerops project infrastructure with a Bun service and a PostgreSQL service. It includes configuration for vertical and horizontal autoscaling, as well as environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in Bun@{version} format\n    type: bun@latest\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - # second service hostname\n    hostname: db\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables Within Same Service in YAML\nDESCRIPTION: This snippet demonstrates how to reference other variables within the same service using the ${variable_name} syntax in the zerops.yaml file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/env-variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nenvVariables:\n  id: 42069\n  hostname: app\n  name: ${id}-${hostname}  # Results in: 42069-app\n```\n\n----------------------------------------\n\nTITLE: Comprehensive Zerops Project Configuration with Rust and PostgreSQL\nDESCRIPTION: This YAML configuration defines a more complex Zerops project setup including a Rust service and a PostgreSQL database. It demonstrates advanced configuration options such as project metadata, multiple services, and detailed resource allocation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a Rust and PostgreSQL database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n```\n\n----------------------------------------\n\nTITLE: Defining Project Infrastructure with Node.js and PostgreSQL Services in YAML\nDESCRIPTION: This YAML configuration defines the services for a new Zerops project within a `description.yaml` file. It specifies a Node.js service ('app') using the latest version, with custom vertical (CPU mode, min/max CPU/RAM/Disk) and horizontal (min/max containers) autoscaling settings, along with secret environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`). It also defines a PostgreSQL service ('db') using version 12 in non-highly-available (`NON_HA`) mode. This file is used with the `zcli project project-import` command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in nodejs@{version} format\n    type: nodejs@latest\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - # second service hostname\n    hostname: db\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Running Zerops CLI Deploy Command\nDESCRIPTION: The 'zcli service deploy' command uploads the application and deploys it in Zerops. It's used when you have your own build process and want to deploy directly.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/trigger-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nzcli service deploy\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple KeyDB Services with Custom Scaling in Zerops Project YAML\nDESCRIPTION: This YAML configuration describes a Zerops project named 'my-project' with optional description and tags. It includes two KeyDB version 6 services: 'keydb1' configured for high availability (HA) with specific custom vertical auto-scaling parameters (dedicated CPU, defined resource limits), and 'keydb2' configured in non-HA (single container) mode using default auto-scaling. This file is used with the zCLI to provision the described infrastructure.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a KeyDB database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n# array of project services\nservices:\n  - # first service hostname\n    hostname: keydb1\n    # service type and version number in keydb@6 format\n    type: keydb@6\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: HA\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n  - # second service hostname\n    hostname: keydb2\n    # service type and version number in keydb@6 format\n    type: keydb@6\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Runtime Environment for .NET on Zerops\nDESCRIPTION: This YAML snippet demonstrates how to configure the build pipeline and runtime environment for a .NET application on Zerops. It includes copying files from the build container and setting up prepare commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    run:\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Runtime Environment Variables in YAML\nDESCRIPTION: This YAML snippet shows how to set basic environment variables for the runtime environment in the zerops.yaml file. It includes examples of setting database-related variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Jobs for Laravel Scheduled Tasks in zerops.yaml\nDESCRIPTION: This snippet demonstrates how to set up cron jobs in Zerops to run Laravel scheduled tasks. It configures a cron job to run 'php artisan schedule:run' every minute.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      crontab:\n        - command: \"php artisan schedule:run\"\n          timing: \"* * * * *\"\n          workingDir: /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Commands for Java Runtime in Zerops YAML\nDESCRIPTION: This snippet shows how to set up init commands that run each time a new runtime container is started or restarted for a Java application in Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      initCommands:\n        - rm -rf ./cache\n```\n\n----------------------------------------\n\nTITLE: Defining Build Commands for Node.js Application - YAML\nDESCRIPTION: This YAML snippet defines buildCommands to automate dependency installation and the build process for a Node.js application as part of the Zerops build pipeline. The commands 'npm i' (install) and 'npm run build' are executed sequentially in a dedicated build container. Dependencies: application must include package.json and build script. Inputs: YAML configuration; outputs: built project artifacts. Limitation: commands must be valid shell commands; errors terminate build.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: nodejs@latest\n\n      # REQUIRED. Build your application\n      buildCommands:\n        - npm i\n        - npm run build\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Customizing Runtime Environment with prepareCommands in zerops.yaml (YAML)\nDESCRIPTION: Demonstrates using the `run.prepareCommands` directive to execute custom shell commands during the prepare phase of deployment. This allows installation of additional packages (`apt-get`) or execution of other setup tasks (`curl`) within the runtime container before the application starts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Go runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Environment Variables in zerops.yaml for Java\nDESCRIPTION: Specifies basic environment variables available during the runtime of a Java service using the `envVariables` key within the `run` section of the `zerops.yaml` configuration file. These variables configure the running application, such as database connection details (DB_NAME, DB_HOST, etc.). Variable referencing (e.g., `${db_password}`) is also supported here.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    run:\n       …\n\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Importing Deno Project Configuration in YAML\nDESCRIPTION: This YAML configuration defines a Zerops project named 'recipe-deno' with two services: a Deno API service and a PostgreSQL database. The Deno service is built from a Git repository and has subdomain access enabled.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: recipe-deno\n  tags:\n    - zerops-recipe\n\nservices:\n  - hostname: api\n    type: deno@1\n    buildFromGit: https://github.com/zeropsio/recipe-deno\n    enableSubdomainAccess: true\n\n  - hostname: db\n    type: postgresql@16\n    mode: NON_HA\n    priority: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Services with zeropsSetup and zeropsYaml in YAML\nDESCRIPTION: This YAML configuration demonstrates how to define a NodeJS service with both zeropsSetup and zeropsYaml parameters. It specifies using a \"backendapi\" setup from the zerops.yaml configuration, which defines build and runtime configurations for the service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    type: nodejs@22\n    buildFromGit: https://github.com/myorg/myapp\n    # Specify which setup to use from zerops.yaml\n    zeropsSetup: backendapi\n    # Full zerops.yaml configuration\n    zeropsYaml:\n      zerops:\n        - setup: backendapi\n          build:\n            base: nodejs@18\n            buildCommands:\n              - npm ci\n              - npm run build\n            deployFiles: ./dist\n            cache: node_modules\n          run:\n            initCommands:\n              - npm run db:migrate\n            start: npm start\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Application with zerops.yaml\nDESCRIPTION: The zerops.yaml file manages the deployment process for the Laravel application. It handles database migrations, cache management, file cleanup, health check implementation, and service orchestration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/minimal-prod.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# No specific code snippet provided, but zerops.yaml is mentioned as handling:\n# - Database migrations\n# - Cache management\n# - File cleanup\n# - Health check implementation\n# - Service orchestration\n```\n\n----------------------------------------\n\nTITLE: Defining Java Build Commands (Maven Wrapper) - YAML\nDESCRIPTION: Specifies how to use 'buildCommands' for Java projects in the build phase, here using './mvnw clean install' to build the application with Maven Wrapper. All commands run in the order listed; build aborts if any command fails. Snippet expects to be inside the build section of zerops.yaml; at least one build command is required.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\\n  # hostname of your service\\n  - setup: app\\n    # ==== how to build your application ====\\n    build:\\n      # REQUIRED. Set the base technology for the build environment:\\n      base: java@latest\\n\\n      # REQUIRED. Build your application\\n      buildCommands:\\n        - ./mvnw clean install\\n      ...\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands as Separate Shell Instances - YAML\nDESCRIPTION: This YAML snippet demonstrates executing each command listed under buildCommands in its own shell session, providing isolation between commands. Each command starts from the default environment, so state does not persist. This approach isolates side effects of individual commands. Suitable for stateless build steps. Limitation: environment variables and directory changes are not preserved between commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i\n  - npm run build\n\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops PHP Build and Run Configuration in YAML\nDESCRIPTION: Provides a complete example of a `zerops.yaml` file defining the build and run configurations for a PHP application named 'app'. It specifies the base image (`php-apache@latest`), build commands (`composer install`), files to deploy (`vendor`, `public`), runtime base image, optional runtime customizations (`prepareCommands`, `initCommands`), document root (`public`), and custom web server configuration (`siteConfigPath`).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: php-apache@latest\n\n      # OPTIONAL. Set the operating system for the build environment.\n      # os: ubuntu\n\n      # OPTIONAL. Customize the build environment by installing additional packages\n      # or tools to the base build environment.\n      # prepareCommands:\n      #   - apt-get something\n      #   - curl something else\n\n      # OPTIONAL. Build your application\n      buildCommands:\n        - composer install\n\n      # REQUIRED. Select which files / folders to deploy after\n      # the build has successfully finished\n      deployFiles:\n        - vendor\n        - public\n\n      # OPTIONAL. Which files / folders you want to cache for the next build.\n      # Next builds will be faster when the cache is used.\n      # cache: vendor\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n      base: php-apache@latest\n\n      # OPTIONAL. Customize the runtime PHP environment by installing additional\n      # dependencies to the base PHP runtime environment.\n      # prepareCommands:\n      #   - apt-get something\n      #   - curl something else\n\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your PHP application is started.\n      # initCommands:\n      #  - rm -rf ./cache\n\n      # OPTIONAL. Customize the folder that will be used as the root of the publicly\n      # accessible web server content. Enter the path relative to the /var/www folder.\n      documentRoot: public\n\n      # OPTIONAL. Sets the custom Nginx or Apache configuration. The file must be deployed in\n      # the runtime container. Enter the path to the file relative to the /var/www folder\n      siteConfigPath: site_config.tmpl\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Project for Bun Application\nDESCRIPTION: YAML configuration for setting up a Bun project with PostgreSQL database on Zerops. Defines project name, services configuration including Bun runtime and database settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: recipe-bun\n  tags:\n    - zerops-recipe\n\nservices:\n  - hostname: api\n    type: bun@1.1\n    enableSubdomainAccess: true\n    buildFromGit: https://github.com/zeropsio/recipe-bun\n\n  - hostname: db\n    type: postgresql@16\n    mode: NON_HA\n    priority: 1\n```\n\n----------------------------------------\n\nTITLE: Starting VPN Connection with Specific Project ID\nDESCRIPTION: This command starts a VPN connection to a specific Zerops project using its ID. It bypasses the interactive project selection process, allowing for direct connection to the desired project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/vpn.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzcli vpn up Evs8Je4NTvKeIkUqoUXp2w\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Go\nDESCRIPTION: Example of how to access environment variables within a Go application using the os.Getenv function.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nos.Getenv(\"YOUR_VARIABLE_KEY_HERE\")\n```\n\n----------------------------------------\n\nTITLE: Full Project Configuration with Python and PostgreSQL\nDESCRIPTION: Extended YAML configuration example showing a complete project setup with Python service and additional project metadata including description and tags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a Python and PostgreSQL database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n```\n\n----------------------------------------\n\nTITLE: Run Build Commands in Separate Shell Instances - YAML\nDESCRIPTION: Shows splitting build commands into separate shell invocations. Each command is isolated; no shared working directory or environment variables between lines. Use when commands must run independently or order doesn't require shell context persistence. Place within 'buildCommands' in the build section of zerops.yaml.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\\n  - cd cmd\\n  - ./cmd/mvnw clean install\\n\n```\n\n----------------------------------------\n\nTITLE: Deploying phpMyAdmin via YAML Service Definition - Zerops - YAML\nDESCRIPTION: Provides a YAML configuration for single-click deployment of phpMyAdmin as a PHP-Apache service in Zerops. Includes settings for hostname, service type and version, container count, document root, and a build link for the phpMyAdmin source. This requires a Zerops project with import services enabled, and after deployment, phpMyAdmin is accessible over VPN at the 'phpmyadmin' hostname.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/manage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - # Service will be accessible through zCLI VPN under: http://phpmyadmin\n    hostname: phpmyadmin\n    # Type and version of service used.\n    type: php-apache@8.1+2.4\n    # Whether the service will be run on one or multiple containers.\n    # Since this is a utility service, using a single container is fine.\n    minContainers: 1\n    maxContainers: 1\n    # Folder name used as the root of the publicly accessible web server content.\n    documentRoot: public\n    # Link to Zerops repository that contains Adminer code with Zerops build and deploy instructions.\n    buildFromGit: https://github.com/zeropsio/recipe-phpmyadmin@main\n```\n\n----------------------------------------\n\nTITLE: Configuring Command-Based Health Checks in Zerops YAML\nDESCRIPTION: This YAML snippet shows how to configure an application health check by executing a local command within the `run` section of `zerops.yml`. The `healthCheck` object uses `exec` with a `command` attribute. The example demonstrates a multi-line command string to execute multiple shell commands (`touch`, `rm`, `mv`) to determine the application's health status.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Deno application start command\n      start: deno task start\n\n      # OPTIONAL. Define a health check with a shell command.\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Zerops Project Definition with Nginx Service (YAML)\nDESCRIPTION: This YAML configuration defines a basic Zerops project named `my-project` containing a single Nginx static service named `app`. It specifies the latest Nginx version, default horizontal scaling (1 to 6 containers), and sets two secret environment variables (`S3_ACCESS_KEY_ID` and `S3_ACCESS_SECRET`). This file (`description.yaml`) is used with zCLI to provision the infrastructure.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in nginx@{version} format\n    type: nginx@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Rust\nDESCRIPTION: Code example showing how to read environment variables in a Rust application using the std::env module.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: rust\nCODE:\n```\nenv::var(\"YOUR_VARIABLE_KEY_HERE\")\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Service with Shared Storage using YAML\nDESCRIPTION: YAML configuration file that defines a project with a Rust service and shared storage. The configuration includes project metadata, storage service settings, and Rust service configuration with storage mounting.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a Rust and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in rust@{version} format\n    type: rust@latest\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the Rust service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Importing .NET Project Configuration in YAML for Zerops\nDESCRIPTION: This YAML configuration defines a project named 'my-first-project' with a .NET service. It specifies the service hostname, type, container scaling, Git repository for building, and enables subdomain access.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: dotnet@latest\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-dotnet-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Project Deployment YAML\nDESCRIPTION: YAML configuration for importing and deploying a Go web application project in Zerops. Specifies project name, service type, container scaling, Git source, and subdomain access settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/tutorial/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: go@latest\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-go-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Build Environment Variables in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set basic environment variables for the build environment in the zerops.yaml file. It includes examples of setting database-related variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Resetting VPN Connection using Zerops CLI\nDESCRIPTION: This snippet demonstrates how to reset the VPN connection when encountering the 'Interface Already Exists' error. It involves bringing down the existing VPN connection and then re-establishing it.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/vpn/troubleshooting.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzcli vpn down\nzcli vpn up\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Queues in Laravel\nDESCRIPTION: This PHP snippet configures Redis as the queue driver in Laravel's queue configuration file. It sets up the Redis connection, retry policy, and other queue-related settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('QUEUE_CONNECTION', 'redis'),\n\n'connections' => [\n    'redis' => [\n        'driver' => 'redis',\n        'connection' => 'default',\n        'queue' => 'default',\n        'retry_after' => 90,     // Retry failed jobs after 90 seconds\n        'block_for' => null,     // Don't block when no jobs available\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Defining Elixir Service with Shared Storage in YAML\nDESCRIPTION: This YAML configuration defines a Zerops project with an Elixir service and a shared storage service. It specifies project details, service configurations, and mounts the shared storage to the Elixir service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a Elixir and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in elixir@{version} format\n    type: elixir@latest\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the Elixir service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for .NET Runtime on Zerops\nDESCRIPTION: This YAML snippet demonstrates how to define environment variables for the .NET runtime environment on Zerops. It includes examples of setting static values and using variable substitution.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        DOTNET_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Using Redis Cache in Laravel\nDESCRIPTION: This PHP snippet demonstrates how to use Redis cache in Laravel for storing and retrieving cached items with optional expiration times.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\n// Store items in cache with expiration time\nCache::put('key', 'value', $seconds);\n\n// Retrieve cached items with optional default value\n$value = Cache::get('key');\n\n// Store items indefinitely until manually removed\nCache::forever('key', 'value');\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Services in zerops.yaml (Monorepo Support) - YAML\nDESCRIPTION: Illustrates how zerops.yaml can define multiple build/run service configurations in a single file to support monorepo architectures. Each 'setup' entry specifies a different service (e.g., 'app', 'api'), enabling simultaneous deployment of multiple Java or other services. Dependencies and requirements are identical to individual service definitions, but the values for 'build' and 'run' should be customized per service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\\n  # definition for app service\\n  - setup: app\\n    build: ...\\n    run: ...\\n\\n  # definition for api service\\n  - setup: api\\n    build: ...\\n    run: ...\\n\n```\n\n----------------------------------------\n\nTITLE: Creating Full Deno and PostgreSQL Service Configuration in YAML\nDESCRIPTION: This YAML snippet shows a more comprehensive configuration for creating a project with both Deno and PostgreSQL services in Zerops. It includes project metadata, service configurations, and detailed auto-scaling settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a Deno and PostgreSQL database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n```\n\n----------------------------------------\n\nTITLE: Detailed Zerops Project Definition with Custom Nginx Scaling (YAML)\nDESCRIPTION: This YAML configuration defines a Zerops project named `my-project` with metadata (description, tags) and a single Nginx static service named `app`. It specifies the latest Nginx version, customizes vertical auto-scaling (Dedicated CPU, specific min/max CPU/RAM/Disk), sets horizontal scaling limits (2 to 4 containers), and defines secret environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`). This file (`description.yaml`) is used with zCLI for detailed infrastructure provisioning.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a Nginx static service\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in nginx@{version} format\n    type: nginx@latest\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n    # optional: create secret env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Basic Docker Service Configuration in YAML\nDESCRIPTION: Basic structure for configuring a Docker service in Zerops using zerops.yaml. Shows how to pull and run a Docker image with port configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/docker/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      prepareCommands:\n        - docker image pull <your-image>\n      start: docker run --network=host <your-image>\n      ports:\n        - port: <port-number>\n          httpSupport: true\n```\n\n----------------------------------------\n\nTITLE: Creating Basic Bun Service Project Description in YAML\nDESCRIPTION: This YAML snippet defines a basic project structure for a Bun service in Zerops. It includes project name, service configuration with hostname, Bun version, container scaling settings, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in Bun@{version} format\n    type: bun@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL via psql CLI on Zerops (Shell Script)\nDESCRIPTION: This snippet demonstrates how to connect to a PostgreSQL database hosted on Zerops using the psql command-line client over a secure Zerops VPN connection. The user must manually provide the hostname, username, password, and database name, as environment variables are unavailable in the VPN context. Ensure that no SSL/TLS flags are used, as connections must be established solely through the VPN's security.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/export-import-data.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\npsql -h [hostname] -U [user] -p [password] -d [database_name]\n```\n\n----------------------------------------\n\nTITLE: Custom Build Environment Configuration\nDESCRIPTION: Example showing how to customize the build environment by adding multiple base technologies and prepare commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - rust@latest\n      prepareCommands:\n        - zsc add go@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Importing Zerops Project with YAML Configuration - YAML\nDESCRIPTION: This YAML snippet defines a Zerops project configuration for importing a PHP-Apache-based web app from a given GitHub repository. The 'project' key sets the project name, while 'services' defines how the application is to be built, deployed, and exposed. Dependencies include having access to Zerops GUI and a valid GitHub repo link. Keys such as 'type', 'buildFromGit', and 'enableSubdomainAccess' describe service image, source repository, and external access setup. Users must supply this YAML when prompted by the Zerops interface; input expects no modification unless customization is required. Output is a deployed app accessible via subdomain with default settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/tutorial/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: php-apache@8.1+2.4\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-php-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific Files and Folders using deployFiles\nDESCRIPTION: Demonstrates how to specify multiple, specific paths in the `deployFiles` section of `zerops.yaml`. This example targets a specific file (`./path/to/file.txt`) and an entire directory (`./path/to/dir/`) for deployment. Paths are relative to the project root.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Elixir Version in zerops.yaml\nDESCRIPTION: Set build.base and run.base parameters in zerops.yaml to specify Elixir versions for build and runtime environments. The build.base parameter is required, while run.base is optional and defaults to the current version if not specified.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  base: elixir@1.14\nrun:\n  base: elixir@1.14\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Execution Readiness Check in Zerops Deployment File\nDESCRIPTION: Shows how to configure a readiness check using the exec method to run shell commands. This example demonstrates a multi-line command execution to verify application readiness during deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Deployment for Laravel Filament\nDESCRIPTION: The zerops.yaml file manages the deployment process for the Laravel Filament application. It handles database migrations, cache management, file cleanup, health checks, service orchestration, and Filament assets compilation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/filament-devel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n- database migrations\n- cache management\n- file cleanup\n- health check implementation\n- service orchestration\n- Filament assets compilation\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment Variables in Zerops YAML\nDESCRIPTION: This YAML configuration demonstrates how to define environment variables for the Deno runtime environment using the `envVariables` key within the `run` section of `zerops.yml`. It allows setting key-value pairs, such as `NODE_ENV: production`, and referencing Zerops-managed secrets like `${db_password}` for sensitive data like database passwords.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Rust Service in Zerops YAML Configuration\nDESCRIPTION: This YAML snippet defines a basic Rust service configuration for Zerops, including project name, service type, scaling parameters, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in rust@{version} format\n    type: rust@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Importing Gleam Project Configuration in YAML for Zerops\nDESCRIPTION: This YAML configuration defines a Zerops project named 'recipe-gleam' with two services: a Gleam API service and a PostgreSQL database. It specifies the project name, tags, service types, and build configurations.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: recipe-gleam\n  tags:\n    - zerops-recipe\n\nservices:\n  - hostname: api\n    type: gleam@1.5\n    enableSubdomainAccess: true\n    buildFromGit: https://github.com/zeropsio/recipe-gleam\n\n  - hostname: db\n    type: postgresql@16\n    mode: NON_HA\n    priority: 1\n```\n\n----------------------------------------\n\nTITLE: Example Nginx Static Service import.yaml Configuration\nDESCRIPTION: Sample YAML configuration for adding an Nginx static service to an existing Zerops project. Defines the project name, service hostname, type, container scaling parameters, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in nginx@{version} format\n    type: nginx@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Setting Build Environment Base for Node.js Service - YAML\nDESCRIPTION: This YAML snippet shows the minimal configuration required to set the base technology for a Node.js service in the build section of zerops.yaml. The 'base' key determines the Node.js version/environment used for building the application. This setting is mandatory and must match the application's Node.js version compatibility. Dependencies: Zerops platform and nodejs available version. Limitations: The snippet is illustrative and must be extended with other mandatory build/run parameters for production use.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: nodejs@latest\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Single Container Docker Configuration\nDESCRIPTION: Complete example of configuring a single Docker container service using hello-world image.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/docker/overview.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      prepareCommands:\n        - docker image pull crccheck/hello-world\n      start: docker run --network=host crccheck/hello-world\n      ports:\n        - port: 8000\n          httpSupport: true\n```\n\n----------------------------------------\n\nTITLE: High Availability Service Configuration\nDESCRIPTION: YAML configuration for setting up high-availability PostgreSQL and Redis services\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: db\n    type: postgresql@16\n    mode: HA  # Automatic primary-replica setup\n\n  - hostname: cache\n    type: valkey@7.2\n    mode: HA  # Redis cluster configuration\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in PHP\nDESCRIPTION: This snippet demonstrates how to read the value of an environment variable within a PHP application using the standard `getenv()` function. Replace 'YOUR_VARIABLE_KEY_HERE' with the actual key of the environment variable you want to access. This function retrieves variables available to the PHP process at runtime.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\ngetenv('YOUR_VARIABLE_KEY_HERE');\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Sessions in Laravel\nDESCRIPTION: This PHP snippet configures Redis as the session driver in Laravel's session configuration file. It sets the driver, lifetime, and encryption settings for sessions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n'driver' => env('SESSION_DRIVER', 'redis'),\n'lifetime' => env('SESSION_LIFETIME', 120),\n'encrypt' => env('SESSION_ENCRYPT', false),\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops YAML\nDESCRIPTION: This snippet demonstrates how to configure a readiness check using the httpGet method to verify application health by making an HTTP GET request to a specific endpoint. The example checks http://127.0.0.1:80/status during deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Importing a Java Project with YAML Configuration in Zerops\nDESCRIPTION: This YAML configuration defines a Zerops project named 'my-first-project' containing a single Java service called 'helloworld'. The service uses the latest Java runtime, scales between 1 and 3 containers, builds from the 'main' branch of the specified GitHub repository ('zeropsio/recipe-java-hello-world'), and is made accessible via an automatically generated subdomain. This configuration is intended to be pasted into the Zerops GUI 'Import a project' feature.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: java@latest\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-java-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Environment for Filament Development\nDESCRIPTION: Commands to set up the local development environment, including copying the environment file, installing dependencies, generating application key, and starting the development server.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/filament-local.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create and configure environment file\ncp .env.example .env\n\ncomposer install\nphp artisan key:generate\nnpm install\nnpm run dev\n\n# Start Development Server\nphp artisan serve # or use your preferred setup (Valet, Herd, Sail)\n```\n\n----------------------------------------\n\nTITLE: Defining Project Infrastructure with Shared Storage in Zerops YAML\nDESCRIPTION: This YAML snippet defines a Zerops project containing a Java runtime service and a shared storage service. It specifies project metadata, a storage service of type shared-storage, and a Java service that mounts the shared storage using the mount property. Dependencies include the Zerops platform and zCLI, and the YAML must be placed in the project's root directory as description.yaml. Key parameters are the project name, service hostnames, types, and mount configuration. Inputs are the service definitions; outputs are the corresponding services upon project creation. The format must adhere strictly to Zerops' expected structure for project provisioning.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\\nproject:\\n  # project name\\n  name: my-project\\n\\n  # optional: project description\\n  description: A project with a Java and a shared storage\\n\\n  # optional: project tags\\n  tags:\\n    - DEMO\\n    - ZEROPS\\n\\n# array of project services\\nservices:\\n  - # service name\\n    hostname: teststorage\\n\\n    # shared storage service has no version\\n    type: shared-storage\\n\\n    # mode: HA / NON_HA\\n    mode: NON_HA\\n\\n  - # service name\\n    hostname: app\\n\\n    # service type and version number in java@{version} format\\n    type: java@latest\\n\\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\\n    minContainers: 2\\n\\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\\n    maxContainers: 4\\n\\n    # Mount the shared storage to the Java service\\n    mount:\\n      - teststorage\\n\n```\n\n----------------------------------------\n\nTITLE: Importing a Zerops Project from YAML using zCLI\nDESCRIPTION: This command (`zcli project project-import`) is used to create a new Zerops project based on the infrastructure defined in a specified YAML file (e.g., `description.yaml`). It requires the path to the YAML file (`importYamlPath`) as an argument. Optional flags allow specifying the organization ID (`--orgId`) if the user belongs to multiple organizations and setting a custom working directory (`--workingDie`).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Configuring S3-Compatible Storage for Laravel in zerops.yaml\nDESCRIPTION: This snippet shows how to configure S3-compatible storage for Laravel file handling on Zerops. It sets up the necessary environment variables for connecting to an S3-compatible storage service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        FILESYSTEM_DISK: s3\n        AWS_ACCESS_KEY_ID: ${storage_accessKeyId}\n        AWS_SECRET_ACCESS_KEY: ${storage_secretAccessKey}\n        AWS_BUCKET: ${storage_bucketName}\n        AWS_ENDPOINT: ${storage_apiUrl}\n        AWS_URL: ${storage_apiUrl}/${storage_bucketName}\n        AWS_USE_PATH_STYLE_ENDPOINT: true\n```\n\n----------------------------------------\n\nTITLE: Basic CRON Job Configuration in Zerops YAML\nDESCRIPTION: Basic example of configuring a CRON job in zerops.yaml that logs timestamp hourly.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/cron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrun: \n  crontab:\n    - command: \"date >> /var/log/cron.log\"\n      timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Services in a Single zerops.yaml (Monorepo)\nDESCRIPTION: Demonstrates how to define configurations for multiple services (e.g., 'app' and 'api') within a single `zerops.yaml` file, suitable for monorepo structures. Each service has its own `setup` block containing distinct `build` and `run` configurations.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # definition for app service\n  - setup: app\n    build: ...\n    run: ...\n\n  # definition for api service\n  - setup: api\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Jobs in Zerops YAML\nDESCRIPTION: This YAML configuration demonstrates how to define scheduled tasks (cron jobs) within the `run` section of `zerops.yml`. The `crontab` attribute takes a list of jobs, each requiring a `command` to be executed and a `timing` string specifying the schedule in standard cron format (e.g., `\"0 * * * *\"` for hourly execution).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # define hostname of your service\n  - setup: app\n\n    # ==== how to run your application ====\n    run:\n      crontab:\n        # REQUIRED. Sets the command to execute:\n        - command: \"\"\n        # REQUIRED. Sets the interval time to execute:\n          timing: \"0 * * * *\"\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Bun Service with Shared Storage using YAML\nDESCRIPTION: YAML configuration file that defines a project with a Bun service and shared storage. Includes project metadata, shared storage service configuration, and Bun service settings with storage mounting.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a Bun and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in Bun@{version} format\n    type: bun@latest\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the Bun service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Importing Python Project Configuration in Zerops\nDESCRIPTION: YAML configuration for importing a simple Python Hello World project into Zerops. It defines a project with a Python service that builds from a GitHub repository and enables subdomain access.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/tutorial/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: python@latest\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-python-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Examples of Valid Function Expressions and Escaping in Zerops YAML Preprocessor\nDESCRIPTION: This collection demonstrates various valid syntax examples for Zerops YAML preprocessor functions. It includes basic function calls with string parameters (`generateRandomString`, `generateRandomInt`), nested function calls, using `setVar` to store a string containing commas, retrieving the variable with `getVar`, and examples of escaping special characters (`<`, `>`, `\\`) to output them literally.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# Function will receive one parameter as the string constant value of: 30\n<@generateRandomString(<30>)> # Function will receive two parameters as the string constant values of: 200 and 1000\n<@generateRandomInt(<200>, <1000>)> # It's possible to nest functions one into the other.\n<@generateRandomString(<@generateRandomInt(<200>, <1000>)>)> # Using commas inside a string constant passed as the parameter is possible.\n# The passed value is stored as internal variable under the name: commentValue\n<@setVar(<commentValue>, <By the way, this is the text passed over as a value.>)> # Function will receive one parameter as the internal variable reference: commentValue\n# Its value is returned as a string if such an internal variable exists. If not, an error returns.\n<@getVar(commentValue)> # Examples of function expressions with escaped characters:\n\\<@generateRandomString(30)\\>               # Output: <@generateRandomString(30)>\n\\<@generateRandomString(\\<30\\>)\\>           # Output: <@generateRandomString(<30>)> # yamlPreprocessor=on\n\\<@generateRandomInt(\\<30\\>, \\<80\\>)\\>      # Output: <@generateRandomInt(<30>, <80>)> # yamlPreprocessor=on\n\\<@generateRandomInt(\\<30\\>\\, \\<80\\>)\\>     # Output: <@generateRandomInt(<30>, <80>)> # yamlPreprocessor=on\n\\<@generateRandomInt(<30>, <80>)\\>          # Output: <@generateRandomInt(30, 80)> # yamlPreprocessor=on\n```\n\n----------------------------------------\n\nTITLE: Creating Basic .NET Service Configuration in YAML\nDESCRIPTION: This YAML snippet demonstrates a basic configuration for creating a .NET service in Zerops. It includes project name, service hostname, .NET version, container scaling settings, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-project\nservices:\n  - hostname: app\n    type: dotnet@6\n    minContainers: 1\n    maxContainers: 6\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Commands in YAML\nDESCRIPTION: Demonstrates how to define commands that run when a runtime container starts or restarts. Used for cleaning cache or initialization tasks.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      initCommands:\n        - rm -rf ./cache\n```\n\n----------------------------------------\n\nTITLE: Deploying All Content in YAML\nDESCRIPTION: Configuration to deploy the entire content of the build container to the runtime service containers.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: Run Build Commands in Single Shell Instance - YAML\nDESCRIPTION: Shows the use of multiline ('|') buildCommands so all commands execute in the same shell context. Useful when path or environment variables should persist across all commands (e.g., changing directories before build). Inserted under 'buildCommands' in the build section of zerops.yaml. Suitable for more complex setups or chained commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\\n  - |\\n    cd cmd\\n    ./mvnw clean install\\n\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in C# .NET Application\nDESCRIPTION: This C# code snippet demonstrates how to read an environment variable in a .NET application using the Environment.GetEnvironmentVariable method.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: csharp\nCODE:\n```\nEnvironment.GetEnvironmentVariable(\"YOUR_VARIABLE_KEY_HERE\");\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Services in zerops.yaml\nDESCRIPTION: This YAML snippet demonstrates how to configure multiple services (app and api) in a single zerops.yaml file, useful for monorepo setups.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    run: ...\n\n  - setup: api\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Importing a PHP Project with YAML Configuration in Zerops\nDESCRIPTION: YAML configuration for importing a simple PHP Hello World project to Zerops. It defines a project named 'my-first-project' with a PHP-Apache service that builds from a GitHub repository and enables subdomain access.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: php-apache@8.1+2.4\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-php-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Multiple Services Docker Compose Configuration\nDESCRIPTION: Configuration for running multiple services using Docker Compose, showing how to handle multiple containers.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/docker/overview.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: apps\n    build:\n      deployFiles: ./docker-compose.yaml\n      addToRunPrepare: ./docker-compose.yaml\n    run:\n      prepareCommands:\n        - docker compose pull\n      start: docker compose up --force-recreate\n      ports:\n        - port: 8000\n          httpSupport: true\n```\n\n----------------------------------------\n\nTITLE: Go Project Cache Configuration\nDESCRIPTION: Cache configuration example for a Go project, demonstrating system-wide caching for Go modules and build dependencies.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/build-cache.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  base: go@1\n  prepareCommands:\n    - sudo apk add build-base\n  buildCommands:\n    - go mod download\n    - go build -o bin/app cmd/main.go\n  cache: true  # Caches entire Go modules directory\n```\n\n----------------------------------------\n\nTITLE: Exporting MariaDB Database using mysqldump (Shell)\nDESCRIPTION: Exports the structure and data of a specified MariaDB database on Zerops to a local `.sql` file using the `mysqldump` command. This command should be run after establishing a Zerops VPN connection. Replace placeholders with actual connection details; the output is saved to `dumpfilename.sql`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/export-import-data.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nmysqldump -h [hostname] -u [user] –p [password] [database_name] > dumpfilename.sql\n```\n\n----------------------------------------\n\nTITLE: Defining Python Service with Shared Storage in YAML\nDESCRIPTION: This YAML snippet defines a project structure with a Python service and a shared storage service. It specifies project details, service configurations, and mounts the shared storage to the Python service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a Python and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in python@{version} format\n    type: python@latest\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the Python service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic KeyDB Service in Zerops Project YAML\nDESCRIPTION: This YAML snippet defines the structure for a Zerops project named 'my-project' containing a single KeyDB service. The service, named 'keydb1', uses KeyDB version 6 and operates in the non-highly available (single container) mode. It relies on default auto-scaling settings and is intended for use with the Zerops zCLI tool for project creation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: keydb1\n    # service type and version number in keydb@6 format\n    type: keydb@6\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Creating a PostgreSQL Service with zCLI Project Import Command\nDESCRIPTION: Command usage for importing a project description file to create a new project with PostgreSQL services. The command requires an importYamlPath parameter and supports various flags including organization ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project will be created.\n      --workingDie string   Sets a custom working directory. The default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Logging into Zerops CLI\nDESCRIPTION: Command to log into Zerops using a generated token or login credentials.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli login <token>\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Build Environment Variables in zerops.yaml\nDESCRIPTION: This YAML snippet demonstrates how to define basic environment variables specifically for the build environment within the `zerops.yaml` configuration file. Variables are listed under the `envVariables` key within the `build` section. It shows setting static values and referencing other variables using `${variable_key}` syntax.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n       …\n\n      # OPTIONAL. Defines the env variables for the build environment:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Basic Gleam Service Configuration in YAML\nDESCRIPTION: Basic YAML configuration for creating a Gleam service in Zerops, including project name, service type, container scaling, and environment variables setup.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in gleam@{version} format\n    type: gleam@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Defining Project and Node.js Service Configuration (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define a Zerops project infrastructure, with a single Node.js service and custom environment secrets. It requires Zerops platform access and supports specifying project name, service hostname, type (including Node.js version), container scaling limits, and secret environment variables. Inputs include project metadata and service configuration; the output is a ready-to-deploy infrastructure description used by zCLI. All fields are required except envSecrets, which is optional. Limitations include a maximum of 6 containers for scaling and strict hostname constraints.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\\nproject:\\n  # project name\\n  name: my-project\\n# array of project services\\nservices:\\n  - # service name\\n    hostname: app\\n    # service type and version number in nodejs@{version} format\\n    type: nodejs@latest\\n    # defines the minimum number of containers for horizontal autoscaling\\n    minContainers: 1\\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\\n    maxContainers: 6\\n    # optional: create env variables\\n    envSecrets:\\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Setting Build Environment Variables in zerops.yaml\nDESCRIPTION: Configuration example showing how to define build environment variables in zerops.yaml file including basic settings and variable references.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Job for Multiple Containers in YAML\nDESCRIPTION: This example shows how to configure a cron job to run on all containers of a service. It sets up a daily task to remove temporary files at midnight.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/cron.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrun: \n  crontab:\n    - command: \"rm -rf /tmp/*\"\n      timing: \"0 0 * * *\"\n      allContainers: true\n```\n\n----------------------------------------\n\nTITLE: Single Service Docker Compose Configuration\nDESCRIPTION: Configuration for running a single service using Docker Compose, including file deployment and service startup.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/docker/overview.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: api\n    build:\n      deployFiles: ./docker-compose.yaml\n      addToRunPrepare: ./docker-compose.yaml\n    run:\n      prepareCommands:\n        - docker compose pull api\n      start: docker compose up api --force-recreate\n      ports:\n        - port: 8000\n          httpSupport: true\n```\n\n----------------------------------------\n\nTITLE: Defining Initialization Commands in Zerops YAML\nDESCRIPTION: This YAML configuration snippet shows the usage of `initCommands` within the `run` section of `zerops.yaml`. These commands, like `rm -rf ./cache`, are executed each time a new runtime container starts or restarts, occurring before the application's main `start` command is triggered. They are useful for tasks like cache clearing but do not cancel deployment if they fail.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Go application is started.\n      initCommands:\n        - rm -rf ./cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Cron Jobs in Zerops YAML\nDESCRIPTION: Example showing how to define cron jobs with timing and commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n\n    run:\n      crontab:\n        - command: \"\"\n          timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Runtime Environment Variables in YAML\nDESCRIPTION: Example of setting basic environment variables for the runtime environment in zerops.yaml configuration file. Shows how to define database connection parameters for the runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Defining Deno Service with Shared Storage in YAML\nDESCRIPTION: This YAML configuration defines a project with a Deno service and a shared storage. It specifies project details, service configurations, and mounts the shared storage to the Deno service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a Deno and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in deno@{version} format\n    type: deno@latest\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the Deno service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP Health Check in Zerops YAML\nDESCRIPTION: Example demonstrating how to configure a health check using HTTP GET requests.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: ./app\n\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Services in zerops.yaml\nDESCRIPTION: This example demonstrates how to define multiple runtime services in a single zerops.yaml file, which is useful for monorepo setups. It shows configurations for both 'app' and 'api' services.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    run: ...\n\n  - setup: api\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Basic Cache Configuration in YAML\nDESCRIPTION: Simple example of cache configuration that specifies which files to preserve between builds for faster subsequent builds.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n# OPTIONAL. Which files / folders you want to cache for the next build.\n# Next builds will be faster when the cache is used.\ncache: file.txt\n```\n\n----------------------------------------\n\nTITLE: Example SSH Connection to 'app' Service\nDESCRIPTION: An example of connecting to a service named 'app' via SSH. This is a practical application of the general SSH connection command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/ssh.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nssh app\n```\n\n----------------------------------------\n\nTITLE: Setting .NET Version in Zerops YAML Configuration\nDESCRIPTION: Demonstrates how to configure .NET version for both runtime and build environments using build.base and run.base parameters in zerops.yaml. The build.base parameter is required while run.base is optional and defaults to current version if not specified.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild.base: <version>\\nrun.base: <version>\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Runtime Bases and Dependencies in zerops.yaml (YAML)\nDESCRIPTION: This YAML snippet shows how to define multiple base technologies (Nginx and Go) for the runtime environment using a YAML array under `run.base`. It also demonstrates using `prepareCommands` along with the Zerops service CLI (`zsc add go@latest`) to install additional dependencies like Go into the runtime container. The build uses Node.js.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: nodejs@latest\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n      base:\n        - nginx@latest\n      prepareCommands:\n        - zsc add go@latest\n      ...\n```\n```\n\n----------------------------------------\n\nTITLE: Running Laravel Database Migrations in zerops.yaml\nDESCRIPTION: This snippet shows how to configure Zerops to run Laravel database migrations during the initialization process. It uses the 'php artisan migrate' command with the --isolated and --force flags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      initCommands:\n        - php artisan migrate --isolated --force\n```\n\n----------------------------------------\n\nTITLE: Exporting PostgreSQL Data using pg_dump (Shell Script)\nDESCRIPTION: This snippet shows how to export a PostgreSQL database's schema and data into an SQL dump file using the pg_dump utility. The command should be executed with appropriate access over Zerops VPN. Replace [database_name] with the actual database identifier and specify the desired output filename. Ensure pg_dump is installed and accessible on your local system.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/export-import-data.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\npg_dump [database_name] > dumpfilename.sql\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands as a Single Shell Instance - YAML\nDESCRIPTION: This YAML snippet demonstrates running all build commands in a single shell context within the buildCommands list by using the '|' block scalar. This allows state (e.g., current directory, environment variables) to persist across commands. Useful when commands depend on shared context changes. Dependencies: shell environment supports multi-line execution. Limitation: All commands in the block share the same shell session.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - |\n    npm i\n    npm run build\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Nginx or Apache Paths in Zerops Build Pipeline - YAML\nDESCRIPTION: This yaml config shows how to define a custom configuration file for Nginx or Apache in Zerops pipeline. It sets base technology, specifies which files to deploy, and assigns documentRoot and optionally siteConfigPath to a template file (e.g., site_config.tmpl). Ensure the config file resides in a deployed folder. Key inputs include build.base, build.deployFiles, run.documentRoot, and run.siteConfigPath.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-web-server.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: php-nginx@latest\n\n      # REQUIRED. Select which files / folders to deploy after\n      # the build has successfully finished\n      deployFiles:\n        - vendor\n        - public\n\n    # ==== how to run your application ====\n    run:\n      documentRoot: public\n\n      # OPTIONAL. Sets the custom Nginx or Apache configuration. The file must be deployed in the runtime container. Enter the path to the file relative to the /var/www folder\n      siteConfigPath: site_config.tmpl\n```\n\n----------------------------------------\n\nTITLE: Starting .NET Service Using zCLI\nDESCRIPTION: This command starts a .NET service using Zerops CLI. It allows specifying the service name or ID, with optional flags for project and service identification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Customizing Build Environment with Multiple Base Technologies\nDESCRIPTION: This YAML configuration shows how to set multiple base technologies for the build environment and add custom prepare commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - go@latest\n      prepareCommands:\n        - zsc add nodejs@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Importing MariaDB Database using mysql CLI (Shell)\nDESCRIPTION: Imports database structure and data from a local `.sql` file into a specified MariaDB database hosted on Zerops using the `mysql` command-line client. This command requires an active Zerops VPN connection. Replace placeholders with actual connection details; input is read from `dumpfilename.sql`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/export-import-data.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmysql -h [hostname] -u [user] –p [password] [database_name] < dumpfilename.sql\n```\n\n----------------------------------------\n\nTITLE: Customizing Build Environment with prepareCommands\nDESCRIPTION: Illustrates the usage of the optional `build.prepareCommands` attribute in `zerops.yaml` to install additional dependencies or tools into the base build environment. This example shows how to add a command, `apt install python3-pip`, although it notes this specific package is already included in Python base images. These commands run after cloning the repository and before the main build process starts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: python@latest\n\n      # OPTIONAL. Customize the build environment by installing additional packages\n      # or tools to the base build environment.\n      prepareCommands:\n        - apt install python3-pip # already installed for Python services\n      ...\n```\n```\n\n----------------------------------------\n\nTITLE: Full Zerops YAML Configuration\nDESCRIPTION: Complete example with deploy configuration and ignore patterns\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      deployFiles: ./\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Jobs in Zerops YAML\nDESCRIPTION: This YAML example illustrates configuring scheduled tasks (cron jobs) using the optional `crontab` list under the `run` section in `zerops.yaml`. Each entry in the list requires a `command` to be executed and a `timing` string specifying the schedule in standard cron format (e.g., '0 * * * *' for hourly execution).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n\n    # ==== how to run your application ====\n    run:\n      crontab:\n        # REQUIRED. Sets the command to execute:\n        - command: \"\"\n        # REQUIRED. Sets the interval time to execute:\n          timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Jobs in Zerops YAML\nDESCRIPTION: Example demonstrating how to configure cron jobs in Zerops with command and timing specifications.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n\n    # ==== how to run your application ====\n    run:\n      crontab:\n        # REQUIRED. Sets the command to execute:\n        - command: \"\"\n        # REQUIRED. Sets the interval time to execute:\n          timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Install Additional Technologies in Build Environment (prepareCommands, array base) - YAML\nDESCRIPTION: Demonstrates customizing the build environment with an array for 'base' (multiple technologies) and using 'prepareCommands' for extra setup. Here, 'zsc add nodejs@latest' installs the latest Node.js alongside Java in the build container. This is essential for applications requiring additional runtimes or tools for building, and must be set in zerops.yaml's build section.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\\n  # hostname of your service\\n  - setup: app\\n    # ==== how to build your application ====\\n    build:\\n      # REQUIRED. Sets the base technology for the build environment:\\n      base:\\n        - java@latest\\n      prepareCommands:\\n        - zsc add nodejs@latest\\n      ...\n```\n\n----------------------------------------\n\nTITLE: Creating Full Bun Service Project Description in YAML\nDESCRIPTION: This YAML snippet provides a more comprehensive project description for a Bun service in Zerops. It includes project metadata, tags, and the beginning of a multi-service configuration including Bun and PostgreSQL.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a Bun and PostgreSQL database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n```\n\n----------------------------------------\n\nTITLE: Running buildCommands in Separate Shell Instances (YAML)\nDESCRIPTION: Illustrates the default syntax where each command listed as a separate item under `buildCommands` (`composer install --optimize-autoloader --no-dev` and `php artisan env`) runs in a distinct, separate shell instance. Each command starts with a fresh environment context.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - composer install --optimize-autoloader --no-dev\n  - php artisan env\n```\n\n----------------------------------------\n\nTITLE: Defining Default Nginx Configuration for PHP Services - Nginx\nDESCRIPTION: This snippet shows the default Nginx server configuration for PHP on Zerops, with placeholders (e.g., {{.DocumentRoot}}, {{.PhpSocket}}) replaced by corresponding build/run attributes or environment variables at deployment. It enables PHP routing, static content serving, and socket communication with PHP. No external dependencies are required, but variables must be set in zerops.yaml or provided by Zerops. The config should not include direct IPs in listen and should avoid using port 443; all HTTPS is internally handled by Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-web-server.mdx#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80;\n    listen [::]:80;\n\n    server_name _;\n\n    # Be sure that you set up the correct document root!\n    root {{.DocumentRoot}};\n\n    location ~ \\.php {\n        try_files _ @backend;\n    }\n\n    location / {\n        # use this for pretty url\n        try_files $uri /$uri /index.html /index.php$is_args$args;\n    }\n\n    location @backend {\n        fastcgi_pass unix:{{.PhpSocket}};\n        fastcgi_split_path_info ^(.+\\.php)(/.*)$;\n        include fastcgi_params;\n\n        fastcgi_param SCRIPT_FILENAME $realpath_root$fastcgi_script_name;\n        fastcgi_param DOCUMENT_ROOT $realpath_root;\n        internal;\n    }\n\n    access_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=info default_short;\n    error_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=error;\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check with Exec Command in Zerops YAML\nDESCRIPTION: Example showing how to configure a health check using exec command in Zerops configuration. The health check executes multiple shell commands with access to the same environment variables as the PHP application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the folder that will be used as the root of the publicly\n      # accessible web server content. Enter the path relative to the /var/www folder.\n      documentRoot: public\n\n      # OPTIONAL. Define a health check with a shell command.\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables Between Build and Runtime in YAML\nDESCRIPTION: This snippet illustrates how to reference runtime variables during build and build variables during runtime using specific prefixes in the zerops.yaml file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/env-variables.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  envVariables:\n    API_KEY: ${RUNTIME_API_KEY}  # Using runtime variable during build\nrun:\n  envVariables:\n    API_KEY: \"12345-abcde\"      # Referenced in build with RUNTIME_ prefix\n```\n\n----------------------------------------\n\nTITLE: Running prepareCommands in a Single Shell Instance\nDESCRIPTION: Demonstrates the YAML block scalar syntax (`|`) for `prepareCommands` in `zerops.yaml`. This approach executes all listed commands within the same shell instance, preserving environment context (like current directory changes or environment variables) between commands. The example shows updating package lists and installing `python3-pip` sequentially in one context.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nprepareCommands:\n  - |\n    apt update\n    apt install python3-pip # already installed for Python services\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via zCLI in Zerops\nDESCRIPTION: These commands use the Zerops CLI to access runtime logs. The first command retrieves logs for the first runtime container, while the second retrieves aggregate logs from all service's runtime containers.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: Setting Build Environment Variables in zerops.yaml (YAML)\nDESCRIPTION: Defines environment variables available during the build process. This example sets several variables, including `GO_ENV`, database connection details (`DB_NAME`, `DB_HOST`, `DB_USER`), and uses Zerops' internal variable interpolation `${db_password}` for the database password.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      base: go@latest\n        …\n\n      # OPTIONAL. Defines the env variables for the build environment:\n      envVariables:\n        GO_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Runtime Environment Variables in zerops.yaml for Python\nDESCRIPTION: This YAML snippet shows how to set basic environment variables for the runtime environment in the zerops.yaml file. It includes example variables for database configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Build Base Technologies with prepareCommands - YAML\nDESCRIPTION: This YAML example demonstrates how to configure the build environment to use multiple base technologies and customize the environment using prepareCommands. The 'base' attribute is set as a YAML array (here, only nodejs@latest, but more can be added), and prepareCommands are used to install additional technologies, such as Go. Requirements include having the necessary tools available in the Zerops build container. Parameters: service setup, build section with base and prepareCommands list. Inputs: YAML configuration; outputs: customized container setup. Limitations: The list of supported base technologies depends on Zerops platform documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base:\n        - nodejs@latest\n      prepareCommands:\n        - zsc add go@latest\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Zerops YAML\nDESCRIPTION: Example demonstrating how to define environment variables for the runtime environment, including static values and variable references.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        RUST_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Environment Variables in zerops.yaml for Java\nDESCRIPTION: Defines basic environment variables available during the build process of a Java service using the `envVariables` key within the `build` section of the `zerops.yaml` configuration file. These variables, like database credentials (DB_NAME, DB_HOST, etc.), are accessible to the build tools. Note the use of `${db_password}` which demonstrates referencing another variable's value.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n       …\n\n      # OPTIONAL. Defines the env variables for the build environment:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring Command-Based Health Checks in Zerops YAML\nDESCRIPTION: This snippet shows how to define an optional health check by executing a command within the runtime container. The `healthCheck.exec` object under the `run` section contains a `command` attribute, which can be a single command string or a multiline script (as shown) that determines the application's health status based on its exit code.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Go application start command\n      start: ./app\n\n      # OPTIONAL. Define a health check with a shell command.\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check for PHP Application in Zerops\nDESCRIPTION: This snippet demonstrates how to configure a health check for a PHP application using the httpGet method. It specifies the port and path for the health check request, which is used to determine the application's status.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the folder that will be used as the root of the publicly\n      # accessible web server content. Enter the path relative to the /var/www folder.\n      documentRoot: public\n\n      # OPTIONAL. Define a health check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n\n----------------------------------------\n\nTITLE: Adding Prepare Commands for Elixir Runtime in YAML\nDESCRIPTION: This YAML snippet demonstrates how to add prepare commands to customize the Elixir runtime environment in Zerops, such as installing additional packages or tools.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/customize-runtime.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  prepareCommands:\n    - # command to install additional packages or tools\n```\n\n----------------------------------------\n\nTITLE: Verifying lower_case_table_names Settings in MariaDB\nDESCRIPTION: SQL query to check the current configuration of lower_case_file_system and lower_case_table_names variables in MariaDB. This command helps verify that the correct case sensitivity settings have been applied after deploying your MariaDB service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sql\nCODE:\n```\nSELECT @@lower_case_file_system, @@lower_case_table_names;\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Commands for PHP Runtime in Zerops\nDESCRIPTION: This snippet shows how to define init commands that run each time a new runtime container is started or restarted. These commands are executed before the PHP application starts and can be used for tasks like cleaning caches.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your PHP application is started.\n      initCommands:\n        - rm -rf ./cache\n```\n\n----------------------------------------\n\nTITLE: Connecting to MariaDB Using mysql CLI over VPN - Zerops - Shell\nDESCRIPTION: Demonstrates the shell command needed to connect to a Zerops-hosted MariaDB instance using the mysql CLI. Requires an active Zerops VPN session and manual retrieval of database access credentials from the Zerops GUI. Key parameters include hostname, username, password, and database name; the command establishes a direct client-to-database connection on the private network.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/manage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmysql -h [hostname] -u [user] -p [password] [database_name]\n```\n\n----------------------------------------\n\nTITLE: Using Multiple Base Technologies in Build Environment\nDESCRIPTION: Shows how to configure the `build.base` section in `zerops.yaml` to use multiple base technologies. This example initializes the environment with `python@latest` and then uses `prepareCommands` with the Zerops CLI (`zsc`) to add `go@latest`, enabling a build process that utilizes both Python and Go tools.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base:\n        - python@latest\n      prepareCommands:\n        - zsc add go@latest\n      ...\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Command for .NET Application on Zerops\nDESCRIPTION: This YAML snippet shows how to define the start command for a .NET application on Zerops. The start command is required and specifies how to run the application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: cd app && dotnet dnet.dll\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Jobs for .NET Application on Zerops\nDESCRIPTION: This YAML snippet demonstrates how to configure cron jobs for a .NET application on Zerops. It specifies the command to execute and the timing interval.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n\n    run:\n      crontab:\n        - command: \"\"\n          timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Defining Runtime Base Technology in zerops.yaml (YAML)\nDESCRIPTION: Specifies the base technology (Go, latest version) for both the build and runtime environments. If `run.base` is omitted, the runtime often defaults to the build's base technology or a pre-existing version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: go@latest\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n        base: go@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Implementing Health Checks for Laravel in zerops.yaml\nDESCRIPTION: This snippet demonstrates how to implement health checks for a Laravel application in Zerops. It includes both readiness and health checks using HTTP GET requests to a specified endpoint.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    deploy:\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /up\n    run:\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /up\n```\n\n----------------------------------------\n\nTITLE: Build Cache Configuration\nDESCRIPTION: Configuration for caching files between builds to optimize build times.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\ncache: file.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment Variables in zerops.yaml\nDESCRIPTION: Configuration example demonstrating how to define runtime environment variables in zerops.yaml file for Elixir service deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Running Shell Commands as Health Check for Zerops Runtime - yaml\nDESCRIPTION: This YAML snippet sets up a health check in the runtime container using a shell command via healthCheck: exec: in the Zerops YAML. The command section contains multiple commands (e.g., touch, rm -rf, mv), using YAML's multiline format. This lets you check arbitrary runtime conditions or perform custom validation for service health. The exec approach requires the commands to be present and executable in the runtime shell. Output is determined by the exit code and optional command side effects.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Bun application start command\n      start: bun start\n\n      # OPTIONAL. Define a health check with a shell command.\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n\n```\n\n----------------------------------------\n\nTITLE: Multiple Runtime Base Technologies in YAML\nDESCRIPTION: Example of configuring multiple technologies for the runtime environment by using an array and prepare commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: java@latest\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n      base:\n        - java@latest\n      prepareCommands:\n        - zsc add nodejs@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Basic Cron Job Configuration in YAML for Zerops\nDESCRIPTION: This snippet demonstrates a basic cron job configuration in the zerops.yaml file. It sets up a job to log the current date to a file every hour.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/cron.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrun: \n  crontab:\n    - command: \"date >> /var/log/cron.log\"\n      timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom Apache Paths in Zerops Build Pipeline - YAML\nDESCRIPTION: This yaml fragment configures Zerops to use a custom Apache config template in your PHP+Apache service. It specifies the image, deployment folders, and run directives, including documentRoot and siteConfigPath. Ensure site_config.tmpl is included in deployFiles for proper deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-web-server.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: php-apache@latest\n\n      # REQUIRED. Select which files / folders to deploy after\n      # the build has successfully finished\n      deployFiles:\n        - vendor\n        - public\n\n    # ==== how to run your application ====\n    run:\n      documentRoot: public\n\n      # OPTIONAL. Sets the custom Nginx or Apache configuration. The file must be deployed in the runtime container. Enter the path to the file relative to the /var/www folder\n      siteConfigPath: site_config.tmpl\n```\n\n----------------------------------------\n\nTITLE: Making the Download Script Executable in Bash\nDESCRIPTION: This command uses the 'chmod' utility to add execute permissions ('+x') to the 'download-storage.sh' script file. This is a necessary step before the script can be run directly from the command line.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/curl-file.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nchmod +x download-storage.sh\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Severity with log4j in Java\nDESCRIPTION: This Java code snippet demonstrates how to use the Apache log4j library for logging. It specifically shows how to prefix log messages with '<N>' (where N is an integer from 0 to 7) to assign a specific severity level recognized by the Zerops logging system. This practice allows for effective filtering and monitoring based on severity. Requires the `org.apache.log4j` package dependency.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: java\nCODE:\n```\nimport org.apache.log4j.*;\n\npublic class LogClass {\n   private static org.apache.log4j.Logger log = Logger.getLogger(LogClass.class);\n   public static void main(String[] args) {\n        log.info(\"A message with the informational severity ...\")\n        log.info(\"<0>Emergency (0) severity > system is unusable.\")\n        log.info(\"<1>Alert (1) severity > action must be taken immediately.\")\n        log.info(\"<2>Critical (2) severity > critical conditions.\")\n        log.info(\"<3>Error (3) severity > error conditions.\")\n        log.info(\"<4>Warning (4) severity > warning conditions.\")\n        log.info(\"<5>Notice (5) severity > normal, but significant, condition.\")\n        log.info(\"<6>Informational (6) severity > informational message.\")\n        log.info(\"<7>Debug (7) severity > debug-level message.\")\n   }\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Go Service in import.yaml for Zerops\nDESCRIPTION: Provides an example `import.yaml` configuration for adding a Go service to an existing Zerops project. It defines the project structure under `project` (though the surrounding text notes this section is omitted when adding to an *existing* project using `import.yaml`), and details a service under `services` with hostname `app`, type `go@latest`, horizontal scaling limits (`minContainers`, `maxContainers`), and secret environment variables (`envSecrets`) for S3 credentials. This file is used with the `zcli project service-import` command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in go@{version} format\n    type: go@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Project with PHP and Shared Storage using YAML\nDESCRIPTION: This YAML configuration file (`description.yaml`) defines the infrastructure for a Zerops project named 'my-project'. It specifies two services: a non-HA shared storage service named 'teststorage' and a PHP-Apache service named 'app' (version 8.1+2.4) configured for autoscaling between 2 and 4 containers. Crucially, it uses the 'mount' attribute to connect the 'teststorage' shared storage to the 'app' PHP service. This file is intended to be used with the zCLI tool to provision the project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a PHP and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in php-apache@8.1+2.4 format\n    type: php-apache@8.1+2.4\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the PHP service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Project Deployment in YAML\nDESCRIPTION: YAML configuration for importing a Rust project into Zerops. Defines project name, service type, container scaling, Git source, and subdomain access settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-first-project\nservices:\n  - hostname: helloworld\n    type: rust@latest\n    minContainers: 1\n    maxContainers: 3\n    buildFromGit: https://github.com/zeropsio/recipe-rust-hello-world@main\n    enableSubdomainAccess: true\n```\n\n----------------------------------------\n\nTITLE: Resetting Migration State in Laravel\nDESCRIPTION: This bash snippet shows commands to reset and re-run all migrations in Laravel, useful for troubleshooting migration issues.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_12\n\nLANGUAGE: bash\nCODE:\n```\n# Reset all migrations\nphp artisan migrate:reset\n\n# Re-run all migrations\nphp artisan migrate\n```\n\n----------------------------------------\n\nTITLE: Creating a New Laravel Project with Composer\nDESCRIPTION: These commands create a new Laravel project named 'zerops-laravel' using Composer and start the Laravel development server.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncomposer create-project laravel/laravel zerops-laravel\ncd zerops-laravel\nphp artisan serve\n```\n\n----------------------------------------\n\nTITLE: Deploying Laravel Jetstream Application to Zerops\nDESCRIPTION: Command to deploy the Laravel Jetstream application to Zerops using the Zerops CLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/jetstream-local.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Example .NET Service Import YAML Configuration\nDESCRIPTION: YAML configuration example for adding a .NET service to an existing project, including service type, scaling parameters, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in dotnet@6 format\n    type: dotnet@6\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Setting Up Cron Jobs for Java Application in Zerops YAML\nDESCRIPTION: This snippet demonstrates how to define cron jobs for a Java application in Zerops, specifying the command to execute and the timing interval.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_30\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n\n    run:\n      crontab:\n        - command: \"\"\n          timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Execution Readiness Check in Zerops YAML\nDESCRIPTION: This snippet shows how to configure a readiness check using the exec method to run shell commands that verify application readiness. The commands have access to the same environment variables as the Deno application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Initializing VPN Connection with Zerops CLI\nDESCRIPTION: Commands to set up VPN connection using Zerops CLI for local development. It shows how to connect using a project ID or interactively select a project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/minimal-local.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize VPN connection using project ID\nzcli vpn up <project-id>\n\n# Or use interactive mode to select your project\nzcli vpn up\n```\n\n----------------------------------------\n\nTITLE: Copying Files from Build to Runtime Container in Zerops YAML\nDESCRIPTION: Demonstrates how to copy files or folders from the build container to the runtime container using the addToRunPrepare attribute in the Zerops configuration YAML.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Nginx runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Defining the Deno Application Start Command in Zerops YAML\nDESCRIPTION: This snippet illustrates the required `start` attribute within the `run` section of the `zerops.yml` file. It specifies the command used to launch the Deno application within the runtime container. The example uses `deno task start`, which is the recommended approach.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Deno application start command\n      start: deno task start\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Runtime for Java in Zerops YAML\nDESCRIPTION: This snippet demonstrates how to configure the build and runtime sections for a Java application in Zerops, including copying files from build to runtime containers and setting up prepare commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    run:\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Runtime Bases and Dependencies in zerops.yaml (YAML)\nDESCRIPTION: Illustrates how to define multiple base technologies (Go latest) for the runtime and use `prepareCommands` to install additional dependencies (Node.js latest) using the Zerops Service Control (`zsc`) tool within the prepare phase.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: go@latest\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n      base:\n        - go@latest\n      prepareCommands:\n        - zsc add nodejs@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Health Check for .NET on Zerops\nDESCRIPTION: This YAML snippet shows how to configure an exec health check for a .NET application on Zerops. It defines a series of shell commands to be executed as part of the health check.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: cd app && dotnet dnet.dll\n\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Health Checks for Zerops Runtime - yaml\nDESCRIPTION: This YAML snippet configures a health check for the runtime container using an HTTP GET request via the healthCheck: httpGet: section. The configuration checks that the endpoint (e.g., http://127.0.0.1:80/status) is reachable and healthy. This is an optional step, helping Zerops monitor application readiness and health. Key parameters include the port and path to request. Dependencies include the application exposing an HTTP server endpoint locally. The output is the health status as checked by Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Bun application start command\n      start: bun start\n\n      # OPTIONAL. Define a health check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Asset Compilation for Laravel in zerops.yaml\nDESCRIPTION: This snippet shows how to set up asset compilation for a Laravel application in the build phase of Zerops deployment. It includes steps for installing dependencies, running npm commands, and caching.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - php@8.4\n        - nodejs@18\n      buildCommands:\n        - composer install --optimize-autoloader --no-dev\n        - npm install\n        - npm run build\n      cache:\n        - vendor\n        - node_modules\n```\n\n----------------------------------------\n\nTITLE: Complex Redirect Configuration in YAML\nDESCRIPTION: Advanced routing configuration showing various types of redirects including masked redirects and path preservation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/static/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrouting:\n  redirects:\n    # Masked redirect - URL stays the same but shows content from index.html\n    - from: /*\n      to: /index.html\n\n    # Standard redirect with status code\n    - from: /old-page\n      to: /new-page\n      status: 301\n\n    # Preserve the path when redirecting between directories\n    - from: /blog/*\n      to: /articles/\n      preservePath: true\n      status: 302\n\n    # Preserve both path and query parameters\n    - from: /posts/*\n      to: /blog/\n      preservePath: true\n      preserveQuery: true\n      status: 302\n```\n\n----------------------------------------\n\nTITLE: Shared Storage Mount Configuration\nDESCRIPTION: Configures mounting of shared storage services to an application. Requires buildFromGit to be specified.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    type: nodejs@22\n    buildFromGit: https://github.com/myorg/myapp\n    enableSubdomainAccess: true\n    mount:\n      - teststorage1\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Build & Deploy Pipeline using Zerops CLI (zcli push)\nDESCRIPTION: Shows the command usage and available flags for `zcli push`. This command uploads the application code from the specified working directory (respecting `.gitignore` unless `--deployGitFolder` is used), then triggers the build and deploy process defined in `zerops.yaml`. Requires Zerops CLI installation and a `zerops.yaml` file in the working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: DeployIgnore Configuration\nDESCRIPTION: Example of .deployignore file configuration to exclude specific files from deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\nLANGUAGE: text\nCODE:\n```\nsrc/file.txt\n```\n\n----------------------------------------\n\nTITLE: Build Configuration in Zerops YAML\nDESCRIPTION: Demonstrates various build configuration options including base technology, operating system, prepare commands, build commands, and file deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/specification.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  base: nodejs@latest\n  os: ubuntu\n  prepareCommands:\n    - apt-get update\n    - apt-get install -y some-package\n  buildCommands:\n    - npm install\n    - npm run build\n  deployFiles:\n    - dist\n    - package.json\n    - node_modules\n```\n\n----------------------------------------\n\nTITLE: Forcing Synchronous Reads in MariaDB Asynchronous Cluster (SQL)\nDESCRIPTION: Demonstrates how to force a read node in an asynchronously replicated MariaDB cluster to synchronize with the write node before executing a critical SELECT query. This is achieved by setting the session variable `wsrep_sync_wait` to 1. This ensures the query waits for and retrieves the most up-to-date data, mitigating potential stale reads at the cost of performance for that specific query. The variable is typically reset to 0 afterwards to revert to the default asynchronous behavior for subsequent queries in the session.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/tech-details/cluster.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sql\nCODE:\n```\n```sql\nSET SESSION wsrep_sync_wait=1;\nSELECT ...;\nSET SESSION wsrep_sync_wait=0;\n```\n```\n\n----------------------------------------\n\nTITLE: Adding a Gleam Service to an Existing Project in import.yaml (YAML)\nDESCRIPTION: This YAML snippet defines a Gleam service ('app') to be added to an existing Zerops project using an `import.yaml` file. It specifies the service hostname, type (latest Gleam), basic horizontal scaling settings (min/max containers), and environment variables. This file format is used with the `zcli project service-import` command and only contains the `services` section, omitting the `project` section.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in gleam@{version} format\n    type: gleam@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Defining Nginx Service with Shared Storage in Zerops - YAML\nDESCRIPTION: This YAML snippet demonstrates how to define a Zerops project with both a shared storage service and an Nginx static service, including mounting the shared storage into the Nginx containers. The 'mount' attribute specifies which shared storage resources are attached to a given runtime service. Key parameters include 'name', 'type', 'hostname', and scaling options like 'minContainers' and 'maxContainers'. The file requires Zerops CLI (zCLI) for deployment, and all referenced services (e.g., teststorage) should be defined within 'services'. Outputs are the deployed project resources on Zerops, with shared folders available at /mnt/[shared storage name] in each container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\\nproject:\\n  # project name\\n  name: my-project\\n\\n  # optional: project description\\n  description: A project with a Nginx and a shared storage\\n\\n  # optional: project tags\\n  tags:\\n    - DEMO\\n    - ZEROPS\\n\\n# array of project services\\nservices:\\n  - # service name\\n    hostname: teststorage\\n\\n    # shared storage service has no version\\n    type: shared-storage\\n\\n    # mode: HA / NON_HA\\n    mode: NON_HA\\n\\n  - # service name\\n    hostname: app\\n\\n    # service type and version number in nginx@{version} or nginx@latest format\\n    type: nginx@latest\\n\\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\\n    minContainers: 2\\n\\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\\n    maxContainers: 4\\n\\n    # Mount the shared storage to the Nginx static service\\n    mount:\\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Copying Files from Build to Runtime Container in PHP Zerops Configuration\nDESCRIPTION: This snippet demonstrates how to copy files or folders from the build container to the runtime container using the addToRunPrepare attribute in the build section. It also shows how to customize the runtime environment with prepare commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base PHP runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Health Check Configuration in Zerops YAML\nDESCRIPTION: Demonstrates how to define a health check for your application in the runtime configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/specification.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  healthCheck:\n    httpGet:\n      port: 80\n      path: /status\n```\n\n----------------------------------------\n\nTITLE: Optimizing Redis Connection Pool in Laravel\nDESCRIPTION: This PHP snippet configures the Redis connection pool for optimal performance in Laravel. It sets the client, cluster options, prefix, and pool settings like max connections and timeout.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\n'redis' => [\n    'client' => env('REDIS_CLIENT', 'phpredis'),\n    'options' => [\n        'cluster' => env('REDIS_CLUSTER', 'redis'),\n        'prefix' => env('REDIS_PREFIX', ''),\n        'pool' => [\n            'max_connections' => 50,\n            'timeout' => 30,\n        ],\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops YAML\nDESCRIPTION: Example configuration for setting up a readiness check using HTTP GET request. The check is configured to make a request to http://127.0.0.1:80/status to verify service availability.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Stopping a Zerops Service using zCLI (Shell)\nDESCRIPTION: Displays the usage instructions and available flags for the `zcli service stop` command. This command is used to stop a running Zerops service. It can identify the target service by its ID or name passed as an argument, or interactively if no argument is provided. Flags allow specifying the project ID or service ID directly.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Referencing Variables Across Services in YAML\nDESCRIPTION: This snippet shows how to reference variables from other services by prefixing them with their respective service name in the zerops.yaml file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/env-variables.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nsetup: dbtest\n  run:\n    envVariables:\n      connectionString: 127.0.0.1\n\nsetup: app\n  run:\n    envVariables:\n      dbConnection: ${dbtest_connectionString}\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Start Command in Zerops YAML\nDESCRIPTION: Example showing how to define the start command for a Rust application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: ./app\n```\n\n----------------------------------------\n\nTITLE: Defining Exec-Based Health Check with healthCheck.exec in Zerops YAML - YAML\nDESCRIPTION: This config demonstrates a shell-command-based health check in Zerops YAML using 'healthCheck.exec.command', supporting multi-line commands. The specified shell script is executed inside the running container for readiness checks. Commands have access to environment variables, and the application must handle exit codes accordingly. Suitable for advanced health checks, but invalid commands may mark the container unhealthy.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Gleam application start command\n      start: npm start\n\n      # OPTIONAL. Define a health check with a shell command.\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n\n```\n\n----------------------------------------\n\nTITLE: Skipping Automatic Pipeline in Git Commit Message\nDESCRIPTION: To prevent triggering a pipeline on the next push, add '[ci skip]' or '[skip ci]' to the commit message. This is case insensitive.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[ci skip]\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n[skip ci]\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Commands in Zerops YAML\nDESCRIPTION: Example showing how to configure initialization commands that run when a runtime container starts or restarts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      initCommands:\n        - rm -rf ./cache\n```\n\n----------------------------------------\n\nTITLE: Copying Files and Customizing Runtime with Zerops Build and Run - yaml\nDESCRIPTION: This YAML snippet configures the Zerops deployment for an application, demonstrating how to copy files from the build container to the runtime container using the addToRunPrepare attribute in the build section. It also shows how to customize the runtime environment with prepareCommands executed before the application starts, such as installing extra packages or tools via shell commands (e.g., apt-get, curl). Dependencies include having Zerops CLI, Bun, and supporting tools (npm, yarn, git, npx) available in the prepare runtime container. The build section expects additional attributes (not shown), and the prepareCommands should be valid shell commands. The input and output involve copying specified files and executing commands within the runtime setup.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Bun runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Deno Version in zerops.yaml\nDESCRIPTION: Set the 'run.base' parameter in zerops.yaml to specify the Deno version for the runtime environment. Use 'build.base' to set the Deno version for the build environment. These settings are applied when triggering a new pipeline.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  base: \"deno:x.y.z\"\n\nbuild:\n  base: \"deno:x.y.z\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops YAML\nDESCRIPTION: This example demonstrates how to set up a readiness check using the HTTP GET method in a Zerops configuration file. The check will make a request to http://127.0.0.1:80/status to determine if the service is ready.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Defining HTTP Health Check with healthCheck.httpGet in Zerops YAML - YAML\nDESCRIPTION: This YAML sample configures a health check in Zerops using an HTTP GET request by specifying the 'healthCheck' key and an 'httpGet' object with 'port' and 'path' attributes. Zerops will periodically send a GET request to the configured local URL to determine application readiness. The endpoint must respond appropriately; misconfiguration may cause failed health checks and affect deployment status.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Gleam application start command\n      start: npm start\n\n      # OPTIONAL. Define a health check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Check in YAML for Gleam Application\nDESCRIPTION: Example of how to configure a readiness check in the zerops.yaml file for a Gleam application. This snippet shows both httpGet and exec command options for readiness checks.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/deploy-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nreadinessCheck:\n  httpGet:\n    path: /health\n    port: 8080\n  # or\n  exec:\n    command: [\"./check-db-connection.sh\"]\n```\n\n----------------------------------------\n\nTITLE: Defining a Node.js Service for Import into an Existing Zerops Project in YAML\nDESCRIPTION: This YAML configuration, typically saved as `import.yaml`, defines a Node.js service ('app') to be added to an existing Zerops project. It specifies the project name, service type (`nodejs@latest`), horizontal scaling limits (`minContainers`, `maxContainers`), and secret environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`). This structure is used with the `zcli project service-import` command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in nodejs@{version} format\n    type: nodejs@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Nginx Configuration Settings\nDESCRIPTION: Defines custom nginx server configuration including listening ports, server name, root directory, and logging settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n  - hostname: app\n    type: php-nginx@8.4\n    enableSubdomainAccess: true\n    nginxConfig: |-\n      server {\n          listen 80 default_server;\n          listen [::]:80 default_server;\n\n          server_name _;\n          root /var/www;\n\n          location / {\n              try_files $uri $uri/ /index.html;\n          }\n\n          access_log syslog:server=unix:/dev/log,facility=local1 default_short;\n          error_log syslog:server=unix:/dev/log,facility=local1;\n      }\n```\n\n----------------------------------------\n\nTITLE: Importing a New Zerops Project using zCLI (Shell)\nDESCRIPTION: This command (`zcli project project-import`) is used to create a new Zerops project based on the infrastructure defined in a specified YAML file (`importYamlPath`, typically `description.yaml`). It requires the path to the YAML file and optionally accepts flags for specifying the organization ID (`--orgId`) and working directory (`--workingDir`). The project name itself is defined within the YAML file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Adding Rust Service to Existing Project in YAML\nDESCRIPTION: This YAML snippet shows how to define a Rust service to be added to an existing Zerops project, including service configuration and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in rust@{version} format\n    type: rust@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Jetstream Deployment in zerops.yaml\nDESCRIPTION: The zerops.yaml file manages the deployment process for the Laravel Jetstream application. It handles database migrations, cache management, file cleanup, health checks, service orchestration, and Jetstream assets compilation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/jetstream-prod.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Content of zerops.yaml file (implied, not shown in the text)\n```\n\n----------------------------------------\n\nTITLE: Docker Compose Environment Configuration in YAML\nDESCRIPTION: Configuration example for Docker Compose showing environment variable setup in the docker-compose.yaml file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/docker/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  api:\n    image: my-application:latest\n    network_mode: host\n    environment:\n      - DB_HOST\n      - DB_PORT\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via zCLI (Shell)\nDESCRIPTION: This shell command utilizes the Zerops CLI (`zcli`) to access the runtime logs for a specified service. Running this command will stream or display the logs generated by the application containers during runtime. This is essential for debugging and monitoring the live application state and requires the zCLI to be installed and authenticated.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: Base URL Configuration for Zerops API\nDESCRIPTION: The base URL endpoint for all Zerops REST API requests.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/api.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttps://api.app-prg1.zerops.io/api/rest/public\n```\n\n----------------------------------------\n\nTITLE: Configuring IPv6 DNS Records with Proxy\nDESCRIPTION: DNS configuration for IPv6-only setup with proxy enabled. This configuration works for both IPv4 and IPv6 users when proxy service supports IPv4 to IPv6 translation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/dns.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nType    Name              Content                Proxy status   TTL\nAAAA    <your-domain>     <your-project-ipv6>    Proxied        Auto\n```\n\n----------------------------------------\n\nTITLE: Example Secret Environment Variables for an Imported Zerops Service\nDESCRIPTION: This snippet shows the format of secret environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`) configured for a service being added via `import.yaml`. These values correspond to the `envSecrets` defined in the YAML file used with the `zcli project service-import` command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Basic Project Configuration in YAML\nDESCRIPTION: Simple example showing the minimum required configuration for creating a project with basic settings including name, description, core package, tags, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# ==== Define a project to import ====\nproject:\n  # REQUIRED. Name of your project\n  name: project0\n  # Project description\n  description: \"This project is an example only\"\n  # Project core package\n  corePackage: LIGHT\n  # List of project tags for filtering\n  tags:\n    - test\n    - dev\n  # Project-level environment variables\n  envVariables:\n    LOG_LEVEL: info\n    API_VERSION: v1\n```\n\n----------------------------------------\n\nTITLE: Customizing Build Environment with prepareCommands in zerops.yaml\nDESCRIPTION: Example of using the optional `prepareCommands` attribute within the `build` section to install additional system packages or tools (e.g., using `apt-get` or `curl`) into the base build environment before the build process starts. These commands run only on the first build or when the cache is invalidated.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: php-apache@latest\n\n      # OPTIONAL. Customise the build environment by installing additional packages\n      # or tools to the base build environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Defining Project Variables in YAML\nDESCRIPTION: This snippet shows how to set project-wide variables using the envVariables attribute in the import.yaml file. These variables apply across all services within a project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  ...\n  envVariables:\n    LOG_LEVEL: info\n    API_VERSION: v1\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Execution Readiness Check in Zerops YAML\nDESCRIPTION: Example configuration for setting up a readiness check using command execution. The check runs multiple shell commands to verify service readiness.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_32\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Running Multiple buildCommands in a Single Shell Instance (YAML)\nDESCRIPTION: Shows the syntax using `|` (YAML literal block scalar) to run multiple commands (`composer install --optimize-autoloader --no-dev` and `php artisan env`) within a single shell instance under `buildCommands`. This ensures commands share the same environment context, like current directory and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - |\n    composer install --optimize-autoloader --no-dev\n    php artisan env\n```\n\n----------------------------------------\n\nTITLE: Environment Variables for PHP Service\nDESCRIPTION: Secret environment variables configuration for the PHP service. These variables are defined in the YAML configuration and will be available to the service at runtime.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Build Commands with Verbose Output Configuration\nDESCRIPTION: YAML configuration for build commands with verbose logging enabled to help troubleshoot build failures. Shows how to configure npm install with verbose output followed by build command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i --verbose\n  - npm run build\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example showing how to define environment variables for the build environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: php-apache@latest\n      envVariables:\n        PHP_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops Deployment File\nDESCRIPTION: Demonstrates how to set up a readiness check using the httpGet method to verify application health. This example configures a check that sends a GET request to http://127.0.0.1:80/status during deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment Variables in YAML\nDESCRIPTION: Example configuration for setting basic environment variables in the runtime section of zerops.yaml file. Demonstrates how to define runtime variables for database connections.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Bun Applications with Zerops - yaml\nDESCRIPTION: This YAML example shows how to declare runtime environment variables in the envVariables section for a Bun application using Zerops. Variables like NODE_ENV, database credentials, and hostnames can be set, with support for referencing secrets via placeholders (e.g., ${db_password}). This enables secure and flexible configuration of the app's runtime environment. There are no explicit dependencies besides a properly structured Zerops YAML and required secret variables. The input consists of key-value pairs, and the output affects the application's shell environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n\n```\n\n----------------------------------------\n\nTITLE: Complete Elasticsearch Service Configuration in Zerops\nDESCRIPTION: Comprehensive example for configuring an Elasticsearch service in a Zerops project. This includes setting the hostname, version, high-availability mode, and environment secrets for plugins and heap allocation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elasticsearch/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: elasticsearch\n    type: elasticsearch@8.16\n    mode: HA\n    envSecrets:\n      PLUGINS: \"analysis-icu,ingest-attachment\"\n      HEAP_PERCENT: \"75\"\n```\n\n----------------------------------------\n\nTITLE: Importing Python Service from YAML Description File\nDESCRIPTION: This code refers to a YAML configuration file that defines a Python service to be imported into Zerops. The file includes a 'buildFromGit' directive to perform a one-time build from a Git repository source.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/tutorial/step-by-step.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nyaml file\n```\n\n----------------------------------------\n\nTITLE: Customizing Build Environment Dependencies with prepareCommands - YAML\nDESCRIPTION: This YAML snippet details how to add custom prepareCommands in zerops.yaml for installing additional dependencies (such as packages or tools) in the build environment. The prepareCommands section allows you to run arbitrary shell commands using supported tools (e.g., apt-get, curl). Designed for advanced customization of build containers beyond the default runtime. Important parameters: base for environment, prepareCommands for each desired operation. Limitations: Commands are OS-dependent and may require suitable permissions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: nodejs@latest\n\n      # OPTIONAL. Customize the build environment by installing additional packages\n      # or tools to the base build environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Configuration for Bun Application\nDESCRIPTION: This YAML snippet shows the basic structure of a zerops.yaml file for configuring a Bun application's build and runtime environment. It includes settings for the build process, file deployment, and runtime execution.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: bun@latest\n      buildCommands:\n        - bun i\n        - bun run build\n      deployFiles:\n        - dist\n        - package.json\n        - node_modules\n      cache: node_modules\n    run:\n      base: bun@latest\n      ports:\n        - port: 3000\n      start: bun start\n```\n\n----------------------------------------\n\nTITLE: Configuring Ports in Zerops YAML for Deno\nDESCRIPTION: Specifies internal ports on which the application will listen, including protocol and HTTP support settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n# Example port configuration (not provided in the original text)\nports:\n  - port: 3000\n    protocol: TCP\n    httpSupport: true\n```\n\n----------------------------------------\n\nTITLE: Installing zCLI on Linux/MacOS using Curl Script\nDESCRIPTION: This command downloads and executes the zCLI installation script for Linux and MacOS systems. After execution, zCLI will be installed in either the /usr/bin or /usr/local/bin directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\ncurl -L https://zerops.io/zcli/install.sh | sh\n```\n\n----------------------------------------\n\nTITLE: Project and Services Configuration YAML\nDESCRIPTION: Example YAML configuration defining a project with Python and PostgreSQL services, including auto-scaling settings and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    type: python@latest\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    minContainers: 2\n    maxContainers: 4\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - hostname: db\n    type: postgresql@12\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Configuring Health Check with Command Execution in Zerops\nDESCRIPTION: Example configuration showing how to set up a health check using shell commands in Zerops. The health check runs multiple commands to verify the application's health status.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    run:\n      documentRoot: public\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Queue with Redis in zerops.yaml\nDESCRIPTION: This snippet demonstrates how to set up Laravel Queue using Redis as the queue driver in the Zerops environment. It includes the necessary environment variables for Redis connection.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        QUEUE_CONNECTION: redis\n        REDIS_HOST: redis\n        REDIS_PORT: 6379\n```\n\n----------------------------------------\n\nTITLE: Copying Files and Running Prepare Commands in Zerops YAML\nDESCRIPTION: This YAML snippet demonstrates configuring the Zerops build and run pipeline. The `addToRunPrepare` key under `build` specifies a file (`./runtime-config.yaml`) to be copied from the build container to the prepare runtime container after the build finishes. The `prepareCommands` key under `run` lists commands (`apt-get something`, `curl something else`) to be executed in the prepare runtime container to customize the environment before the application code is deployed.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Deno runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n```\n\n----------------------------------------\n\nTITLE: Defining a Basic MariaDB Service Configuration in YAML for zCLI\nDESCRIPTION: This YAML snippet demonstrates a basic project description file (`description.yaml`) for Zerops zCLI. It defines a project named `my-project` containing a single MariaDB service (`mariadb1`, version 10.4) configured in `NON_HA` (single container) mode with default auto-scaling settings. This file is used by zCLI to provision the specified infrastructure.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: mariadb1\n    # service type and version number in mariadb@{version} format\n    type: mariadb@10.4\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Running Initialization Commands Before Application Start with Zerops - yaml\nDESCRIPTION: This YAML snippet demonstrates the use of initCommands within the Zerops run section to execute specified commands (e.g., cleaning cache folders with rm -rf ./cache) each time a runtime container is started or restarted. These commands run before the Bun application starts, allowing setup or clean-up tasks (such as clearing cache) to be automated. Dependencies include the presence of a shell in the runtime container. The commands must succeed or fail gracefully; the application always starts afterward, regardless of exit code. Input is a list of shell commands; output consists of their side effects on the runtime filesystem.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Bun application is started.\n      initCommands:\n        - rm -rf ./cache\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to Zerops KeyDB using keydb-cli (Shell)\nDESCRIPTION: This command uses the `keydb-cli` tool to establish a connection to a KeyDB database hosted on Zerops. It requires an active Zerops VPN connection, which is established using the zCLI tool. Replace `[hostname]` with the specific hostname provided in the Zerops GUI for your KeyDB service. Note that SSL/TLS should not be used over the VPN.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/manage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nkeydb-cli -h [hostname]\n```\n\n----------------------------------------\n\nTITLE: Downloading a File from Zerops Storage via Bash Script\nDESCRIPTION: This Bash script downloads a specified file from a given Zerops Object Storage bucket. It constructs an S3-compatible V2 authentication signature using OpenSSL (HMAC-SHA1) based on the request details (method, content type, date) and storage credentials (ACCESS_KEY_ID, SECRET_ACCESS_KEY read from environment variables). It then uses cURL to perform the GET request with the necessary headers (Date, Content-Type, Authorization) to download the file. The script accepts the bucket name and file path as mandatory arguments and an optional server address (defaults to 'storage-prg1.zerops.io').\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/curl-file.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n#!/bin/bash\n\nserver=\"${3:-storage-prg1.zerops.io}\"\nfile_path=$2\nbucket=$1\nset -eu pipefail\n\ncontentType=\"application/octet-stream\"\ndateValue=`date -R`\nsignature_string=\"GET\\n\\n${contentType}\\n${dateValue}\\n/${bucket}/${file_path}\"\n\nsignature_hash=`echo -en ${signature_string} | openssl sha1 -hmac ${SECRET_ACCESS_KEY} -binary | base64`\n\ncurl -sSo ${file_path} \\\n  -H \"Date: ${dateValue}\" \\\n  -H \"Content-Type: ${contentType}\" \\\n  -H \"Authorization: AWS ${ACCESS_KEY_ID}:${signature_hash}\" \\\n  \"https://${server}/${bucket}/${file_path}\"\n\n```\n\n----------------------------------------\n\nTITLE: Using zcli service deploy Command for Python Deployment\nDESCRIPTION: The 'zcli service deploy' command is used for deployment-only pipelines when you have your own build process. It uploads pre-built application files to Zerops according to the zerops.yaml configuration, with various options for customizing the deployment process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Setting Build Environment Variables in YAML\nDESCRIPTION: Configuration for setting basic environment variables in the build environment using zerops.yaml. Demonstrates how to define variables like NODE_ENV, DB_NAME, and reference other variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Mail Settings\nDESCRIPTION: Default Laravel mail configuration that supports multiple mailer types and reads settings from environment variables. Includes various transport options and basic SMTP configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nreturn [\n    'default' => env('MAIL_MAILER', 'smtp'),\n\n    'mailers' => [\n        'smtp' => [\n            'transport' => 'smtp',\n            'url' => env('MAIL_URL'),\n            'host' => env('MAIL_HOST', '127.0.0.1'),\n            'port' => env('MAIL_PORT', 587),\n            'encryption' => env('MAIL_ENCRYPTION', 'tls'),\n            'username' => env('MAIL_USERNAME'),\n            'password' => env('MAIL_PASSWORD'),\n            'timeout' => null,\n            'local_domain' => env('MAIL_EHLO_DOMAIN'),\n        ],\n        'ses' => [\n            'transport' => 'ses',\n        ],\n        'postmark' => [\n            'transport' => 'postmark',\n        ],\n        'failover' => [\n            'transport' => 'failover',\n            'mailers' => [\n                'smtp',\n                'log',\n            ],\n        ],\n    ],\n    'from' => [\n        'address' => env('MAIL_FROM_ADDRESS', 'hello@example.com'),\n        'name' => env('MAIL_FROM_NAME', 'Example'),\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops YAML\nDESCRIPTION: Example showing how to configure a readiness check using HTTP GET request with port and path specifications.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Push Command Usage for Zerops CLI\nDESCRIPTION: Command line parameters and flags for the zcli push command, used to trigger manual builds and deploys. Includes options for archive creation, git folder handling, and version naming.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Configuring Path-Specific Caching in Zerops\nDESCRIPTION: Examples of path-specific cache configurations, showing both single path and multiple path patterns for selective caching of build artifacts and dependencies.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/build-cache.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Single path\nbuild:\n  cache: node_modules\n\n# Multiple paths\nbuild:\n  cache:\n    - node_modules\n    - package-lock.json\n    - .build\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image with Light/Dark Modes using React in JavaScript\nDESCRIPTION: This snippet illustrates how to render a responsive Image component that adapts to both light and dark themes, displaying a screenshot relevant to scaling configuration. The component expects properties such as lightImage, darkImage (image URLs), alt for accessibility, and style for inline CSS. Dependencies include a correctly implemented Image component and presence of given image assets in the project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/scale.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling7.png\"\n  darkImage=\"/img/screenshots/scaling7.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Rust Service\nDESCRIPTION: This snippet shows the environment variables that will be configured for the Rust service in the Zerops project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in YAML\nDESCRIPTION: This snippet demonstrates how to configure a readiness check in Zerops using the HTTP GET method within a YAML file. The readiness check is set up on port 80 for the /status path, making a request to http://127.0.0.1:80/status from inside the runtime container. Required parameters include 'port' and 'path', while 'host' and 'scheme' are optional. The readiness check helps ensure the application is responsive before the service is marked ready. No external dependencies are necessary aside from Zerops using this YAML for orchestration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Prerender Host Configuration in YAML\nDESCRIPTION: Configuration for setting up a custom Prerender host using environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/static/overview.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  envVariables:\n  - PRERENDER_HOST=your.prerender.host\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Readiness Check in Zerops YAML\nDESCRIPTION: Example configuration for setting up a readiness check using command execution. The check executes multiple shell commands in sequence to verify service readiness.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_28\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Defining GitHub Actions Workflow for Zerops Deployment (YAML)\nDESCRIPTION: This YAML configuration defines a GitHub Actions workflow triggered on pushes to the 'main' branch. It checks out the repository code and then utilizes the 'zeropsio/actions' action to deploy the application to a specified Zerops service. It requires a Zerops access token stored as a GitHub secret (`ZEROPS_TOKEN`) and the target Zerops `service-id`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/github-integration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nname: Deploy to Zerops\n\non:\n  push:\n    branches:\n      - main\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout code\n        uses: actions/checkout@v3\n\n      - name: Deploy with Zerops\n        uses: zeropsio/actions@main\n        with:\n          access-token: ${{ secrets.ZEROPS_TOKEN }}\n          service-id: your-service-id\n```\n\n----------------------------------------\n\nTITLE: Customizing Rust Build Commands in YAML\nDESCRIPTION: This YAML snippet shows how to add verbose output to the Rust build command in the Zerops configuration file. It demonstrates the use of the buildCommands section to specify custom build instructions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - cargo build --release -v\n```\n\n----------------------------------------\n\nTITLE: Deploying Entire Build Container Content in zerops.yaml (YAML)\nDESCRIPTION: Configures the deployment to include all files and folders from the root of the build container. The '.' signifies the current directory (build container root).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: Defining Build Environment Variables in zerops.yaml (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to define basic environment variables available during the build process of an Nginx service in Zerops. Variables are specified under the `envVariables` key within the `build` section of the `zerops.yaml` configuration file. It shows example variables like database credentials, including referencing another variable (`${db_password}`). Changes require updating `zerops.yaml` and redeploying.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n       …\n\n      # OPTIONAL. Defines the env variables for the build environment:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Specifying Build Cache File in zerops.yaml (YAML)\nDESCRIPTION: Configures the Zerops build process to cache the specified file ('file.txt') located at the project root. This cached file will be available in subsequent builds to potentially speed up the process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n# OPTIONAL. Which files / folders you want to cache for the next build.\n# Next builds will be faster when the cache is used.\ncache: file.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Project-Specific Settings in YAML for Zerops CLI\nDESCRIPTION: This YAML snippet shows how to configure project-specific settings and override global settings in a local .zcli.yaml file. It sets the project ID, service ID, and overrides the workspace state.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/configuration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# Set project-specific settings\nprojectId: \"your-project-id\"\nserviceId: \"your-service-id\"\n\n# Override global workspace state for this project\nworkspaceState: \"clean\"\n```\n\n----------------------------------------\n\nTITLE: Installing phpMyAdmin Database Tool in Zerops with YAML\nDESCRIPTION: YAML configuration for importing the phpMyAdmin database management tool into a Zerops project. This creates a PHP-Apache service with specified container constraints and document root that builds from the phpMyAdmin recipe GitHub repository.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/manage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: phpmyadmin\n    type: php-apache@8.1+2.4\n    minContainers: 1\n    maxContainers: 1\n    documentRoot: public\n    buildFromGit: https://github.com/zeropsio/recipe-phpmyadmin@main\n```\n\n----------------------------------------\n\nTITLE: Adding Foreign Key Constraints in Laravel Migrations\nDESCRIPTION: This PHP snippet demonstrates how to add foreign key constraints in Laravel migrations, creating a relationship between tables with cascading delete functionality.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_6\n\nLANGUAGE: php\nCODE:\n```\npublic function up()\n{\n    Schema::table('posts', function (Blueprint $table) {\n        // Create relationship with cascading delete\n        $table->foreignId('user_id')\n              ->constrained()\n              ->onDelete('cascade');\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Commands for .NET Runtime on Zerops\nDESCRIPTION: This YAML snippet shows how to set up init commands that run each time a new runtime container is started or restarted. These commands are executed before the .NET application starts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      initCommands:\n        - rm -rf ./cache\n```\n\n----------------------------------------\n\nTITLE: Defining Document Root Variable in Nginx Template (nginx configuration)\nDESCRIPTION: A minimal template snippet defining the web server's document root using Zerops' {{.DocumentRoot}} variable. This variable is replaced at deploy time by the value set in zerops.yaml (defaulting to /var/www if unspecified). Used for creating customized Nginx configurations that align with Zerops deployment contexts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/customize-web-server.mdx#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nroot {{.DocumentRoot}};\n```\n\n----------------------------------------\n\nTITLE: Minimal Object Storage Service Configuration\nDESCRIPTION: A minimal YAML configuration example for adding a basic Object Storage service to an existing project. This creates a service named 'storage' with default settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\n# array of project services\nservices:\n  -\n    # service name\n    hostname: storage\n    # service type\n    type: objectstorage\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Health Check for Java in Zerops YAML\nDESCRIPTION: This snippet shows how to configure an exec health check for a Java application in Zerops, using shell commands to verify the application's health.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: java -jar target/app.jar\n\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Services in zerops.yaml (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to configure multiple services (like 'app' and 'api') within a single `zerops.yaml` file by adding multiple 'setup' entries under the top-level 'zerops' key. This structure is useful for monorepo projects where different parts of the application require separate build and run configurations defined in one place.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # definition for app service\n  - setup: app\n    build: ...\n    run: ...\n\n  # definition for api service\n  - setup: api\n    build: ...\n    run: ...\n```\n```\n\n----------------------------------------\n\nTITLE: Deploying Application to Zerops\nDESCRIPTION: Command to deploy your application to Zerops, similar to push but focuses on deployment only. Uses the same flags as the service push command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nzcli service deploy [serviceIdOrName]\n```\n\n----------------------------------------\n\nTITLE: Laravel Logging Configuration File\nDESCRIPTION: Complete PHP configuration file for Laravel logging system, defining various logging channels and their settings including stack, single, daily, stderr, syslog, and errorlog channels.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Monolog\\Handler\\NullHandler;\nuse Monolog\\Handler\\StreamHandler;\nuse Monolog\\Handler\\SyslogUdpHandler;\nuse Monolog\\Processor\\PsrLogMessageProcessor;\n\nreturn [\n    'default' => env('LOG_CHANNEL', 'stack'),\n\n    'deprecations' => [\n        'channel' => env('LOG_DEPRECATIONS_CHANNEL', 'null'),\n        'trace' => env('LOG_DEPRECATIONS_TRACE', false),\n    ],\n\n    'channels' => [\n        'stack' => [\n            'driver' => 'stack',\n            'channels' => explode(',', env('LOG_STACK', 'single')),\n            'ignore_exceptions' => false,\n        ],\n\n        'single' => [\n            'driver' => 'single',\n            'path' => storage_path('logs/laravel.log'),\n            'level' => env('LOG_LEVEL', 'debug'),\n            'replace_placeholders' => true,\n        ],\n\n        'daily' => [\n            'driver' => 'daily',\n            'path' => storage_path('logs/laravel.log'),\n            'level' => env('LOG_LEVEL', 'debug'),\n            'days' => env('LOG_DAILY_DAYS', 14),\n            'replace_placeholders' => true,\n        ],\n\n        'stderr' => [\n            'driver' => 'monolog',\n            'handler' => StreamHandler::class,\n            'with' => [\n                'stream' => 'php://stderr',\n            ],\n            'level' => env('LOG_LEVEL', 'debug'),\n        ],\n\n        'syslog' => [\n            'driver' => 'syslog',\n            'level' => env('LOG_LEVEL', 'debug'),\n        ],\n\n        'errorlog' => [\n            'driver' => 'errorlog',\n            'level' => env('LOG_LEVEL', 'debug'),\n        ],\n    ],\n];\n```\n\n----------------------------------------\n\nTITLE: Priority-Based Routing Configuration in YAML\nDESCRIPTION: Example showing routing configuration with priority handling for different types of matches.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/static/overview.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nrouting:\n  redirects:\n    # Exact match for homepage - standard redirect\n    - from: /\n      to: /home\n      status: 302\n\n    # Simple path match - masked redirect\n    - from: /about\n      to: /about-us\n\n    # Pattern match with path preservation\n    - from: /blog/*\n      to: /articles/\n      preservePath: true\n      status: 302\n\n    # Catch-all pattern - masked redirect for SPA\n    - from: /*\n      to: /index.html\n```\n\n----------------------------------------\n\nTITLE: HTTP Health Check Configuration in YAML\nDESCRIPTION: Shows how to configure HTTP GET health checks with port, path, and optional parameters.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: npm start\n\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n\n----------------------------------------\n\nTITLE: Deno Log Severity Level Examples\nDESCRIPTION: Examples showing how to set different severity levels for log messages in Deno using the <N> prefix format. Demonstrates all severity levels from Emergency (0) to Debug (7).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconsole.log('A message with the informational severity ...');\nconsole.log('<0>Emergency (0) severity > system is unusable.');\nconsole.log('<1>Alert (1) severity > action must be taken immediately.');\nconsole.log('<2>Critical (2) severity > critical conditions.');\nconsole.log('<3>Error (3) severity > error conditions.');\nconsole.log('<4>Warning (4) severity > warning conditions.');\nconsole.log('<5>Notice (5) severity > normal, but significant, condition.');\nconsole.log('<6>Informational (6) severity > informational message.');\nconsole.log('<7>Debug (7) severity > debug-level message.');\n```\n\n----------------------------------------\n\nTITLE: Customizing Nginx Runtime with prepareCommands in zerops.yaml (YAML)\nDESCRIPTION: This YAML snippet illustrates how to customize the Nginx runtime environment by using the optional `run.prepareCommands` section in `zerops.yaml`. These commands (e.g., `apt-get something`, `curl something else`) are executed during the deployment preparation phase to install additional system packages or tools into the base Nginx runtime environment before the application starts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Nginx runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs via zCLI\nDESCRIPTION: Command to access build logs using Zerops CLI\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Path Segments in YAML\nDESCRIPTION: Example of using the ~ wildcard to deploy all folders located in paths that start with /path/ and end with /to/.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Check with Command Execution in Zerops\nDESCRIPTION: Example configuration showing how to set up a readiness check using shell commands. The check executes multiple commands to verify if the deployment is ready.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    deploy:\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Commands in Single Shell Instance\nDESCRIPTION: This YAML snippet demonstrates how to run build commands in a single shell instance, allowing for shared context between commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - |\n    cd src\n    go build -o app main.go\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific Paths in Zerops YAML for Deno\nDESCRIPTION: Deploys a file and a directory from specific paths within the project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Configuring Migration Timeout in Zerops YAML\nDESCRIPTION: This YAML snippet shows how to configure a longer timeout for migrations in the zerops.yaml file to address migration timeout issues.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      initCommands:\n        - php artisan migrate --force --isolated --timeout=1000\n```\n\n----------------------------------------\n\nTITLE: Configuring Start Command for Java Application in Zerops YAML\nDESCRIPTION: This snippet shows how to define the start command for a Java application in Zerops, typically using java -jar to run the compiled JAR file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: java -jar target/app.jar\n```\n\n----------------------------------------\n\nTITLE: Basic File Deployment Configuration in YAML\nDESCRIPTION: Example of basic file deployment configuration that specifies which files and folders should be deployed to runtime containers.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - app\n  - file.txt\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Zerops Configuration for Nginx Service (YAML)\nDESCRIPTION: This YAML snippet shows the fundamental structure of a `zerops.yaml` file for configuring a single Nginx service named 'app'. It defines both the build environment (using Node.js) with build commands and deployment artifacts, and the runtime environment (using Nginx) with optional configurations like `documentRoot` and `siteConfigPath`. Comments explain optional and required fields.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: nodejs@latest\n\n      # OPTIONAL. Set the operating system for the build environment.\n      # os: ubuntu\n\n      # OPTIONAL. Customize the build environment by installing additional packages\n      # or tools to the base build environment.\n      # prepareCommands:\n      #   - apt-get something\n      #   - curl something else\n\n      # REQUIRED. Build your application\n      buildCommands:\n        - npm i\n        - npm run build\n\n      # REQUIRED. Select which files / folders to deploy after\n      # the build has successfully finished\n      deployFiles:\n        - dist\n        - package.json\n        - node_modules\n\n      # OPTIONAL. Which files / folders you want to cache for the next build.\n      # Next builds will be faster when the cache is used.\n      cache: node_modules\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n      base: nginx@latest\n\n      # OPTIONAL. Customize the runtime Nginx environment by installing additional\n      # dependencies to the base Nginx runtime environment.\n      # prepareCommands:\n      #   - apt-get something\n      #   - curl something else\n\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Nginx application is started.\n      # initCommands:\n      #  - rm -rf ./cache\n\n      # OPTIONAL. Customize the folder that will be used as the root of the publicly\n      # accessible web server content. Enter the path relative to the /var/www folder.\n      documentRoot: public\n\n      # OPTIONAL. Sets the custom Nginx configuration. The file must be deployed in\n      # the runtime container. Enter the path to the file relative to the /var/www folder\n      siteConfigPath: site_config.tmpl\n```\n```\n\n----------------------------------------\n\nTITLE: DeployIgnore Root Path Pattern\nDESCRIPTION: Example of ignoring a specific file in the root src directory using .deployignore.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment Variables in YAML\nDESCRIPTION: Configuration example for setting basic environment variables in the runtime section of zerops.yaml file. Demonstrates database connection parameter configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in Zerops\nDESCRIPTION: YAML configuration for setting up mail-related environment variables in Zerops deployment\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        MAIL_MAILER: smtp\n        MAIL_FROM_ADDRESS: noreply@yourdomain.com\n        MAIL_FROM_NAME: YourApp\n        MAIL_HOST: your-smtp-host\n        MAIL_PORT: 587\n        MAIL_USERNAME: your-username\n        MAIL_PASSWORD: your-password\n        MAIL_ENCRYPTION: tls\n```\n\n----------------------------------------\n\nTITLE: Installing Additional Packages in Zerops YAML Configuration\nDESCRIPTION: This YAML snippet demonstrates how to use the prepareCommands attribute to install additional packages and tools in the Zerops runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/customize-runtime.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  prepareCommands:\n    - apt-get update\n    - apt-get install -y your-package\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Build Environment Variables in YAML for Gleam Service\nDESCRIPTION: This YAML snippet shows how to set basic environment variables for the build environment in the zerops.yaml file. It includes examples of setting static values and referencing other variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Using Zerops CLI for Manual Deploy\nDESCRIPTION: The zcli service deploy command uploads and deploys the application in Zerops without building. It's useful for projects with their own build process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/trigger-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nzcli service deploy\n```\n\n----------------------------------------\n\nTITLE: PHP/Laravel Project Cache Configuration\nDESCRIPTION: Cache configuration for a PHP/Laravel project, showing selective caching of vendor directory and composer lock file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/build-cache.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  base: php@8.3\n  buildCommands:\n    - composer install --no-dev\n    - php artisan optimize\n  cache:\n    - vendor\n    - composer.lock\n```\n\n----------------------------------------\n\nTITLE: Secret Environment Variable Examples\nDESCRIPTION: Various examples of setting secret environment variables using direct input, stdin, and file contents. Demonstrates different methods of providing sensitive data.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_12\n\nLANGUAGE: sh\nCODE:\n```\n# Set a secret environment variable directly\nzsc setSecretEnv SECRET_KEY \"new_value\"\n\n# Set a secret environment variable from stdin (useful for multi-line values or piping)\necho \"new_value\" | zsc setSecretEnv SECRET_KEY -\n\n# Set a secret API key from a file\ncat api_key.txt | zsc setSecretEnv API_KEY -\n```\n\n----------------------------------------\n\nTITLE: Defining Services for Existing Zerops Project in YAML\nDESCRIPTION: This YAML snippet shows how to define services to be added to an existing Zerops project. It includes project name and a Deno service configuration with scaling and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-project\nservices:\n  - hostname: app\n    type: deno@latest\n    minContainers: 1\n    maxContainers: 6\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Deleting Node.js Service Using Zerops zCLI - Shell\nDESCRIPTION: This shell snippet presents the syntax and available flags for the 'zcli service delete' command, which is used to delete a service via Zerops command-line interface. Dependencies include the zCLI tool, which must be installed and set up beforehand; see linked references. Key parameters include the target service (by ID or name), the project ID, and a confirmation flag. This command is interactive by default, requesting input for project and service selection unless relevant flags are provided. Running this command will prompt for confirmation unless the --confirm flag is used, providing safe protection for destructive actions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Database Connection in Zerops Environment\nDESCRIPTION: This YAML snippet shows how to set up database connection environment variables in Zerops, including the connection type, host, port, database name, username, and password.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        DB_CONNECTION: pgsql\n        DB_HOST: ${db_hostname}\n        DB_PORT: 5432\n        DB_DATABASE: myapp\n        DB_USERNAME: ${db_user}\n        DB_PASSWORD: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Vertical Autoscaling Configuration\nDESCRIPTION: Configures vertical autoscaling parameters for CPU, RAM, and disk resources. Defines scaling thresholds and resource limits for optimal performance management.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    type: nodejs@22\n    buildFromGit: https://github.com/myorg/myapp\n    enableSubdomainAccess: true\n    verticalAutoscaling:\n      minCpu: 1\n      maxCpu: 3\n      cpuMode: DEDICATED\n      minRam: 1\n      maxRam: 4\n      minDisk: 1\n      maxDisk: 10\n      startCpuCoreCount: 2\n      minFreeCpuCores: 0.5\n      minFreeCpuPercent: 20\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n```\n\n----------------------------------------\n\nTITLE: HTTP API Connection Configuration\nDESCRIPTION: HTTP API connection configuration for Qdrant vector database with port specification\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/qdrant/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nhttp://${hostname}:${port}\n```\n\n----------------------------------------\n\nTITLE: Defining Cron Jobs for Bun Applications with Zerops Crontab - yaml\nDESCRIPTION: This YAML example illustrates configuring scheduled tasks using the crontab section within the Zerops run block. Each entry in crontab specifies a command to execute and a timing string in standard cron syntax (e.g., '0 * * * *'). This requires the shell environment in the runtime container and correct command paths. The configuration enables automated, recurring operations (e.g., maintenance, reporting) for the application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n\n    # ==== how to run your application ====\n    run:\n      crontab:\n        # REQUIRED. Sets the command to execute:\n        - command: \"\"\n        # REQUIRED. Sets the interval time to execute:\n          timing: \"0 * * * *\"\n\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to Stop a Bun Service\nDESCRIPTION: Command syntax for stopping a Bun service using the Zerops CLI tool. The command supports selecting service by ID or name and includes optional flags for specifying project and service IDs when working with multiple projects.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Project Import Command Usage\nDESCRIPTION: CLI command syntax for importing a project configuration using zcli.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Defining Build Commands for .NET Application\nDESCRIPTION: This example shows how to define build commands for a .NET application in the zerops.yaml file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: dotnet@6\n      buildCommands:\n        - dotnet build -o app\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring CRON Expressions for Backup Scheduling\nDESCRIPTION: Example CRON expressions for scheduling automated backups at different intervals. Shows patterns for daily, weekly, and monthly backup schedules.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/backup.mdx#2025-04-23_snippet_0\n\nLANGUAGE: cron\nCODE:\n```\n0 2 * * * # Every day at 2:00 AM\n```\n\nLANGUAGE: cron\nCODE:\n```\n0 4 * * 0 # Every Sunday at 4:00 AM\n```\n\nLANGUAGE: cron\nCODE:\n```\n0 0 1 * * # First day of every month at midnight\n```\n\n----------------------------------------\n\nTITLE: Configuring Typesense Service in YAML\nDESCRIPTION: YAML configuration for Typesense service on Zerops, showing custom thread pool size and parallel collection loading settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/typesense/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nthread-pool-size: 16\nnum-collections-parallel-load: 8\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Configuration\nDESCRIPTION: Example using the tilde (~) wildcard character for flexible path matching in deployments.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure a readiness check in Zerops using the `httpGet` method within the `deploy` section. It specifies the `port` (80) and `path` (`/status`) for the check, which targets `http://127.0.0.1:80/status` inside the container. Optional parameters like `host` and `scheme` can also be defined.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n```\n\n----------------------------------------\n\nTITLE: Multiple Base Technologies Configuration\nDESCRIPTION: Example showing how to configure multiple base technologies for the runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: gleam@latest\n    run:\n      base:\n        - gleam@latest\n      prepareCommands:\n        - zsc add go@latest\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops YAML\nDESCRIPTION: Example configuration for HTTP GET readiness check in Zerops. Demonstrates setting up a health check endpoint on port 80 with a specific path. The configuration is part of the service deployment configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Basic Service Configuration in YAML\nDESCRIPTION: Defines a basic NodeJS service configuration with environment variables, object storage, and git repository settings. Includes essential parameters for service creation and deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n- hostname: app\n  type: nodejs@22\n  mode: HA\n  envSecrets:\n    SECRET_KEY: <@generateRandomString(<32>)>\n  dotEnvSecrets: |\n    APP_KEY=<@generateRandomString(<32>)>\n  objectStorageSize: 2\n  objectStoragePolicy: public-read-write\n  objectStorageRawPolicy:\n  buildFromGit: https://github.com/myorg/myapp\n  enableSubdomainAccess: true\n  priority: 1\n  override: false\n```\n\n----------------------------------------\n\nTITLE: Zerops Service Scaling Configuration\nDESCRIPTION: YAML configuration for defining service scaling parameters including container count, CPU, and RAM limits\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    minContainers: 2\n    maxContainers: 6\n    cpu:\n      min: 1\n      max: 4\n    ram:\n      min: 0.25\n      max: 4\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration in YAML\nDESCRIPTION: Example of setting environment variables for the build environment, including using variable references.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      base: java@latest\n        …\n\n      # OPTIONAL. Defines the env variables for the build environment:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: String Case Modification in Zerops using Upper, Lower and Title Modifiers\nDESCRIPTION: Examples of using string case modifiers (upper, lower, title) in Zerops configuration. These examples show how to transform strings, chain multiple modifiers together, and use modifiers with functions for consistent text formatting.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nInput:  <sTATic StrINg wiTH a mOdifIER| upper>\nOutput: STATIC STRING WITH A MODIFIER\n```\n\nLANGUAGE: yaml\nCODE:\n```\nInput:  <sTATic StrINg wiTH a mOdifIER| lower>\nOutput: static string with a modifier\n```\n\nLANGUAGE: yaml\nCODE:\n```\nInput:  <sTATic StrINg wiTH a mOdifIER| title>\nOutput: Static String With A Modifier\n```\n\nLANGUAGE: yaml\nCODE:\n```\nInput:  <sTATic StrINg wiTH a mOdifIER| upper | lower>\nOutput: static string with a modifier\n```\n\nLANGUAGE: yaml\nCODE:\n```\nInput:  <@generateRandomString(<30>) | upper>\nOutput: 7A14C8E74BC98A0D74253B1D1A4EF6\n\nInput:  <@setVar(<bucketName>, <@generateRandomString(<10>) | lower>)>\nOutput: h73ep149sd\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops YAML\nDESCRIPTION: Example configuration for setting up a readiness check using HTTP GET request. The check is configured to test http://127.0.0.1:80/status endpoint within the runtime container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Accessing Local Environment Variables in Nginx Application (Shell)\nDESCRIPTION: This snippet shows the command format provided by Zerops documentation for accessing a locally defined environment variable within an Nginx application. Replace 'YOUR_VARIABLE_KEY_HERE' with the actual key of the environment variable you wish to retrieve. This mechanism allows the Nginx application to utilize configuration values passed as environment variables by the Zerops platform.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\ngetenv('YOUR_VARIABLE_KEY_HERE');\n```\n\n----------------------------------------\n\nTITLE: Skipping Automatic Pipeline in Git Commit\nDESCRIPTION: To prevent triggering a pipeline on the next push, add [ci skip] or [skip ci] to the commit message. This is case insensitive and will still result in a successful webhook delivery but with no action.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[ci skip]\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n[skip ci]\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Commands for Nginx Runtime in Zerops YAML\nDESCRIPTION: Shows how to define init commands that run each time a new runtime container is started or restarted, using the initCommands attribute in the Zerops configuration YAML.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Nginx application is started.\n      initCommands:\n        - rm -rf ./cache\n```\n\n----------------------------------------\n\nTITLE: Manually Triggering Deploy-Only Pipeline using Zerops CLI (zcli service deploy)\nDESCRIPTION: Displays the command usage and flags for `zcli service deploy`. This command uploads specified files or directories (`pathToFileOrDir`) and triggers only the deployment part of the pipeline defined in `zerops.yaml` (which should omit the build section). Useful for deploying pre-built artifacts. Requires Zerops CLI, a suitable `zerops.yaml`, and the path to the artifact(s) to deploy.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Working Directory for Cron Job in YAML\nDESCRIPTION: This configuration demonstrates how to set a custom working directory for a cron job. It runs a PHP Artisan command every minute in the specified directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/cron.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrun: \n  crontab:\n    - command: \"php artisan schedule:run\"\n      timing: \"* * * * *\"\n      workingDir: /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Laravel Artisan Commands in Zerops YAML for Caching\nDESCRIPTION: Example of adding Laravel Artisan commands to the initCommands section of zerops.yaml for automatic execution with each deploy. These commands cache views, configurations, and routes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/env-variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\ninitCommands:\n  - php artisan view:cache\n  - php artisan config:cache\n  - php artisan route:cache\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to Start a Bun Service\nDESCRIPTION: Command syntax for starting a previously stopped Bun service using the Zerops CLI tool. The command supports interactive service selection and includes flags for specifying project and service IDs when working with multiple projects.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Defining Build Commands for Deno Application\nDESCRIPTION: This snippet shows how to define build commands for a Deno application, including testing and building tasks.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - |\n    deno test\n    deno task build\n```\n\n----------------------------------------\n\nTITLE: Defining Project Infrastructure with Gleam and PostgreSQL in description.yaml (YAML)\nDESCRIPTION: This YAML snippet defines the infrastructure for a new Zerops project using a `description.yaml` file. It specifies two services: 'app' running the latest Gleam version with custom vertical/horizontal autoscaling and specific environment variables, and 'db' running PostgreSQL version 12 in NON_HA mode. This file is intended to be used with the `zcli project project-import` command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in gleam@{version} format\n    type: gleam@latest\n    # optional: vertical auto scaling customization\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - # second service hostname\n    hostname: db\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"non_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Optimizing Laravel Application in zerops.yaml\nDESCRIPTION: This snippet demonstrates how to add Laravel optimization commands to the initialization process in Zerops. It includes commands for caching views, config, routes, and general optimization.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      initCommands:\n        - php artisan view:cache\n        - php artisan config:cache\n        - php artisan route:cache\n        - php artisan optimize\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration in YAML\nDESCRIPTION: Example showing how to configure cron jobs with timing and commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n\n    run:\n      crontab:\n        - command: \"\"\n          timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Backup Creation Command\nDESCRIPTION: Demonstrates how to create backups of specific stacks.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nzsc backup-create <stackName>\n```\n\n----------------------------------------\n\nTITLE: Deploy Files with Paths Configuration\nDESCRIPTION: Example showing how to deploy files and directories with specific paths.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Node.js Project Cache Configuration\nDESCRIPTION: Example cache configuration for a Node.js project with TypeScript, showing caching of node_modules, build artifacts, and lock files.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/build-cache.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  base: node@22\n  buildCommands:\n    - npm ci\n    - npm run build\n  cache:\n    - node_modules\n    - .next\n    - .turbo\n    - package-lock.json\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example showing how to configure environment variables for the build environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: gleam@latest\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Deploy Files with Wildcard Path\nDESCRIPTION: Example using wildcard (~) to deploy files matching a pattern.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\n----------------------------------------\n\nTITLE: Deploy Files with Specific Paths\nDESCRIPTION: Configuration for deploying files and directories with explicit paths\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Defining Environment Variables for Nginx Runtime in Zerops YAML\nDESCRIPTION: Shows how to set environment variables for the Nginx runtime environment using the envVariables attribute in the Zerops configuration YAML.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands in Separate Shell Instances\nDESCRIPTION: This snippet demonstrates how to run build commands in separate shell instances, useful when commands need isolated environments.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - deno task build\n```\n\n----------------------------------------\n\nTITLE: Configuring Init Commands for Runtime Container\nDESCRIPTION: YAML configuration for defining commands to be executed when runtime container starts or restarts\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_22\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Python application is started.\n      initCommands:\n        - rm -rf ./cache\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx Version via 'run.base' in zerops.yaml - YAML\nDESCRIPTION: This snippet demonstrates how to specify the Nginx version using the run.base parameter in the zerops.yaml file. By editing this attribute and then triggering a new pipeline, Zerops deploys the required Nginx runtime container with the selected major version. The run.base key expects a valid Nginx base version identifier, and omitting it keeps the current version unchanged. Ensure Zerops pipeline execution capabilities and correct Nginx version strings are available before deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  base: <nginx-version>\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables in YAML\nDESCRIPTION: Shows how to define environment variables for the runtime environment, including support for variable references.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Using generateRandomString in YAML Configuration\nDESCRIPTION: Example showing how to generate a random 10-character string in a Zerops service configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    RANDOM_STRING: <@generateRandomString(<10>)>\n```\n\n----------------------------------------\n\nTITLE: Command-based Health Check Configuration\nDESCRIPTION: Configuration for executing command-based health checks in the runtime container\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Python application start command\n      start: app.py\n\n      # OPTIONAL. Define a health check with a shell command.\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Configuring Prepare Commands for Build Environment\nDESCRIPTION: This example demonstrates how to use prepareCommands to customize the build environment by installing additional packages or tools. It shows the syntax for adding multiple prepare commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: bun@latest\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Adding Debug Option to Maven Build (buildCommands) - YAML\nDESCRIPTION: Demonstrates use of '-X' (debug) option in Maven build command for troubleshooting build failures. Should be used when more verbose output is needed for diagnosing errors in the CI/CD pipeline. Inserted into buildCommands list under zerops.yaml build section.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\\n  - ./mvnw -X clean install\\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Readiness Check with HTTP GET in Zerops\nDESCRIPTION: Example configuration demonstrating how to set up a readiness check using HTTP GET requests. The check will make requests to a specified port and path to verify deployment readiness.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    deploy:\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Project with Node.js and Shared Storage in YAML\nDESCRIPTION: This YAML configuration file defines a Zerops project named 'my-project'. It includes definitions for a non-highly-available shared storage service named 'teststorage' and a Node.js service named 'app' using the latest version. The 'mount' attribute within the Node.js service definition connects the 'teststorage' shared storage, making its content accessible within the Node.js service containers at `/mnt/teststorage`. The Node.js service is configured for horizontal autoscaling between 2 and 4 containers. This file is intended to be used with the Zerops zCLI to provision the defined infrastructure.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a Node.js and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in nodejs@{version} format\n    type: nodejs@latest\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the Node.js service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Manual Deploy using Zerops CLI `service deploy` command (Shell)\nDESCRIPTION: Shows the usage and flags for the `zcli service deploy` command, used for deploying pre-built applications. It uploads specified files or directories and deploys them according to the `zerops.yaml` (which should omit the build section for this command). Key flags include specifying project/service IDs, archive paths, custom version names, working directories, the `zerops.yaml` path, and whether to include the `.git` folder.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Java Runtime in Zerops YAML\nDESCRIPTION: This snippet demonstrates how to define environment variables for the Java runtime environment in Zerops, including referencing secret values.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of setting environment variables for the build environment including database connections.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: python@latest\n      envVariables:\n        PYTHON_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Defining Public Read Policy for MinIO Object Storage (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to set a public read access policy for a bucket in MinIO-compatible Object Storage using the IAM Policy JSON format. Dependencies include a MinIO or S3-compatible API endpoint that interprets IAM policy JSON structure. The policy grants any principal permission to read the bucket's location and list its objects, as well as to get any object under the bucket. Variable substitution is used for the bucket name ({{ .BucketName }}). Inputs include the bucket name; outputs are policy-enforced bucket permissions. Embedded placeholders must be replaced before applying.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  'Version': '2012-10-17',\n  'Statement':\n    [\n      {\n        'Effect': 'Allow',\n        'Principal': { 'AWS': ['*'] },\n        'Action': ['s3:GetBucketLocation', 's3:ListBucket'],\n        'Resource': ['arn:aws:s3:::{{.BucketName}}'],\n      },\n      {\n        'Effect': 'Allow',\n        'Principal': { 'AWS': ['*'] },\n        'Action': ['s3:GetObject'],\n        'Resource': ['arn:aws:s3:::{{.BucketName}}/*'],\n      },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: JWT Token Generation in YAML Configuration\nDESCRIPTION: Demonstrates various ways to generate JWT tokens using different secret configurations including fixed strings, empty payloads, random secrets, and stored secrets.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    # Using a fixed secret string\n    JWT_FIXED: <@generateJWT(<fixedSecretString>, <{\"role\":\"admin\",\"exp\":1798761600}>)>\n    \n    # Using an empty payload\n    JWT_EMPTY: <@generateJWT(<fixedSecretString>, <{}>)>\n    \n    # Generate and store a random secret, then use it\n    JWT_RANDOM: <@generateJWT(<@generateRandomStringVar(<jwtSecretKey>, <32>)>, <{\"role\":\"admin\",\"exp\":1798761600}>)>\n    \n    # Use a previously stored secret\n    JWT_STORED: <@generateJWT(<@getVar(jwtSecretKeyVar)>, <{\"role\":\"admin\",\"exp\":1798761600}>)>\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Services in zerops.yaml\nDESCRIPTION: This snippet demonstrates how to configure multiple services (app and api) in a single zerops.yaml file, useful for monorepo setups.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    run: ...\n\n  - setup: api\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Application Start Command for Bun with Zerops - yaml\nDESCRIPTION: This YAML snippet defines the mandatory start command for a Bun application within the Zerops run section, using the start: bun start line. This instructs Zerops on how to launch the application at runtime. Dependencies include a working build and presence of Bun in the runtime environment. The snippet assumes the preceding build step is correctly specified. The effect of this configuration is that 'bun start' will be executed to run the application in the container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Bun application start command\n      start: bun start\n\n```\n\n----------------------------------------\n\nTITLE: Checking Zerops CLI Version\nDESCRIPTION: Command to show the current version of the Zerops CLI (zCLI).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_19\n\nLANGUAGE: sh\nCODE:\n```\nzcli version\n```\n\n----------------------------------------\n\nTITLE: Internal Service Access URL Example\nDESCRIPTION: Demonstrates the internal URL format for accessing an Elixir service within the same project using hostname and port.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://app:3000\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Deployment Example\nDESCRIPTION: Example showing how to use wildcards in deployment paths.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\n----------------------------------------\n\nTITLE: Adding Multiple Base Technologies to Build Environment in zerops.yaml\nDESCRIPTION: Illustrates how to specify multiple base technologies for the build environment using a YAML array under the `base` key and adding required installation commands using `prepareCommands` (e.g., adding Go alongside PHP/Apache using `zsc add go@latest`). This allows combining technologies within the same build process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base:\n        - php-apache@latest\n      prepareCommands:\n        - zsc add go@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Deploy All Content Configuration\nDESCRIPTION: Configuration to deploy the entire content of the build container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: ED25519 Key Generation in YAML Configuration\nDESCRIPTION: Demonstrates how to generate and use ED25519 key pairs including public and private keys in both standard and SSH formats.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    GENERATED_PUBLIC_KEY: |\n      <@generateED25519Key(<Key>)>\n    APP_PUBLIC_KEY: |\n      <@getVar(KeyPublic)>\n    APP_PUBLIC_KEY_SSH: <@getVar(KeyPublicSsh)>\n    APP_PRIVATE_KEY: |\n      <@getVar(KeyPrivate)>\n    APP_PRIVATE_KEY_SSH: |\n      <@getVar(KeyPrivateSsh)>\n```\n\n----------------------------------------\n\nTITLE: Setting Build Environment Variables in YAML\nDESCRIPTION: Configuration example for setting basic environment variables in the build section of zerops.yaml file. Shows how to define database connection parameters and reference other variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Basic deployFiles Configuration in YAML\nDESCRIPTION: Simple example of deployFiles configuration that specifies which files to deploy to runtime containers. The path starts from the project root directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - app.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Readiness Check in Zerops YAML\nDESCRIPTION: Example configuration for setting up a readiness check using HTTP GET request. The check is configured to poll http://127.0.0.1:80/status to verify service availability.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_31\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        httpGet:\n          port: 80\n          path: /status\n\n    # ==== how to run your application ====\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Specifying Ubuntu OS in Zerops YAML Configuration\nDESCRIPTION: This YAML snippet shows how to set the operating system to Ubuntu instead of the default Alpine in the Zerops configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/customize-runtime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  os: ubuntu\n```\n\n----------------------------------------\n\nTITLE: Customizing Runtime Environment in Zerops YAML for Deno\nDESCRIPTION: Uses prepareCommands to customize the Deno runtime environment by installing additional dependencies or tools.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      # Build configuration...\n    run:\n      prepareCommands:\n        - apt-get something\n        - curl something else\n```\n\n----------------------------------------\n\nTITLE: Using pickRandom in YAML Configuration\nDESCRIPTION: Example demonstrating how to randomly select one value from a list of options in a service configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    PICK_RANDOM: <@pickRandom(<640>, <800>, <1024>, <1280>, <1440>, <1920>)>\n```\n\n----------------------------------------\n\nTITLE: Starting Gleam Application with start Command in Zerops YAML - YAML\nDESCRIPTION: This snippet illustrates the required definition of a start command for a Zerops-deployed Gleam application. The 'start' attribute in the 'run' section specifies the shell command to launch the application—here using 'npm start'. A valid start command must exist and any dependencies (such as npm scripts) must be installed in the runtime environment. The command is triggered during container start and must successfully launch the application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Gleam application start command\n      start: npm start\n\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Command Readiness Check in Zerops YAML\nDESCRIPTION: Example configuration for setting up a readiness check using executable commands. The check executes multiple shell commands in sequence using multiline format.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_26\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Setting Document Root for Nginx in Zerops YAML\nDESCRIPTION: Demonstrates how to customize the document root folder for the Nginx web server using the documentRoot attribute in the Zerops configuration YAML.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the folder that will be used as the root of the publicly\n      # accessible web server content. Enter the path relative to the /var/www folder.\n      documentRoot: public\n```\n\n----------------------------------------\n\nTITLE: Project Services Configuration YAML\nDESCRIPTION: YAML configuration defining project services including an Elixir application and PostgreSQL database with custom scaling settings and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    type: elixir@latest\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    minContainers: 2\n    maxContainers: 4\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - hostname: db\n    type: postgresql@12\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables with envVariables in Zerops YAML - YAML\nDESCRIPTION: This Zerops YAML example specifies how to define environment variables within the application runtime via the 'envVariables' attribute. Variables like NODE_ENV, DB_NAME, and DB_PASS can be set, with support for secret substitution (e.g., using placeholders like ${db_password}). All keys and values must be valid environment variable names and values; these variables are accessible to the application process at runtime.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Defines the env variables for the runtime environment:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Zerops CLI Configuration\nDESCRIPTION: This shell snippet demonstrates how to set environment variables to configure Zerops CLI. It sets the workspace state and project ID using the ZEROPS_ prefix and uppercase flag names.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/configuration.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nexport ZEROPS_WORKSPACESTATE=clean\nexport ZEROPS_PROJECTID=your-project-id\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Runtime Environment in YAML\nDESCRIPTION: Example showing how to copy files from build container to runtime container and configure prepare commands. Uses addToRunPrepare attribute to copy configuration files.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    run:\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Zerops CLI Version\nDESCRIPTION: Command to display the current version of the Zerops CLI tool.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_13\n\nLANGUAGE: sh\nCODE:\n```\nzsc version\n```\n\n----------------------------------------\n\nTITLE: Implementing Reversible Changes in Laravel Migrations\nDESCRIPTION: This PHP snippet shows how to implement reversible changes in Laravel migrations, specifically demonstrating how to drop a column in the 'down' method to undo migration changes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\npublic function down()\n{\n    // Always provide a way to undo migration changes\n    Schema::table('users', function (Blueprint $table) {\n        $table->dropColumn('new_column');\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Setting Build Environment Variables in YAML\nDESCRIPTION: Example configuration for setting basic environment variables in the build section of zerops.yaml file. Shows how to define variables like NODE_ENV, DB_NAME, and reference other variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Deployment with zerops.yaml\nDESCRIPTION: The zerops.yaml file manages the Laravel application's deployment process, including database migrations, cache management, file cleanup, health checks, and service orchestration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/minimal-devel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# No specific code snippet provided, but zerops.yaml is mentioned as handling:\n# - Database migrations\n# - Cache management\n# - File cleanup\n# - Health check implementation\n# - Service orchestration\n```\n\n----------------------------------------\n\nTITLE: Help Command Usage\nDESCRIPTION: Demonstrates different ways to access the help documentation for ZSC commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzsc help\n# or\nzsc --help\n# or\nzsc -h\n```\n\n----------------------------------------\n\nTITLE: DateTime Formatting in YAML Configuration\nDESCRIPTION: Shows how to use the getDateTime function to format current date and time with specific timezone settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    GET_DATETIME: <@getDatetime(<DD.MM.YYYY HH:mm:ss>, <CET>)>\n```\n\n----------------------------------------\n\nTITLE: Resetting Zerops Project and Service Scope\nDESCRIPTION: Command to reset the default project and service scope in Zerops CLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\nzcli scope reset\n```\n\n----------------------------------------\n\nTITLE: Basic Service Configuration Example\nDESCRIPTION: Minimal example showing the basic structure of Zerops service configuration with the required services array declaration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n\n```\n\n----------------------------------------\n\nTITLE: Setting Ubuntu OS for Elixir Runtime in YAML\nDESCRIPTION: This YAML snippet shows how to set the build OS to Ubuntu instead of the default Alpine for the Elixir runtime environment in Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/customize-runtime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  os: ubuntu\n```\n\n----------------------------------------\n\nTITLE: Specific Path Deployment Configuration\nDESCRIPTION: Example showing how to deploy specific files and directories from defined paths.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Command Readiness Check in Zerops YAML\nDESCRIPTION: Example configuration for command execution readiness check in Zerops. Shows how to set up multiple shell commands using multiline format. The commands run with access to the same environment variables as the main application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Python\nDESCRIPTION: This Python code snippet demonstrates how to access environment variables in a Python application using the os.environ dictionary.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nos.environ['YOUR_VARIABLE_KEY_HERE']\n```\n\n----------------------------------------\n\nTITLE: Deploying Multiple Items in YAML\nDESCRIPTION: Example of deploying both a folder and a file from the project root directory to the runtime service containers.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - api\n  - app.jar\n```\n\n----------------------------------------\n\nTITLE: Configuring zerops.yaml to Deploy All Build Files (YAML)\nDESCRIPTION: Shows a minimal `zerops.yaml` configuration where the `deployFiles` directive under the `build` section is set to '.', indicating that all contents from the build output should be deployed.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      deployFiles: ./\n```\n\n----------------------------------------\n\nTITLE: Configuring Log Severity Levels in Node.js (JavaScript)\nDESCRIPTION: This JavaScript snippet demonstrates how to set specific severity levels for log messages generated using `console.log` in a Node.js application running on Zerops. By prefixing the log message string with `<N>`, where N is an integer from 0 to 7, developers can assign a severity level (Emergency to Debug) that Zerops recognizes and uses for filtering. Note that aliases like `console.warn` or `console.error` do not automatically set severity; the prefix method is required.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('A message with the informational severity ...');\nconsole.log('<0>Emergency (0) severity > system is unusable.');\nconsole.log('<1>Alert (1) severity > action must be taken immediately.');\nconsole.log('<2>Critical (2) severity > critical conditions.');\nconsole.log('<3>Error (3) severity > error conditions.');\nconsole.log('<4>Warning (4) severity > warning conditions.');\nconsole.log('<5>Notice (5) severity > normal, but significant, condition.');\nconsole.log('<6>Informational (6) severity > informational message.');\nconsole.log('<7>Debug (7) severity > debug-level message.');\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Example of setting environment variables for the build environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: dotnet@6\n      envVariables:\n        DOTNET_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Using String Expressions as Parameters in Zerops YAML Preprocessor Functions\nDESCRIPTION: This snippet showcases how string expressions, enclosed in `<` and `>`, are used as parameters for Zerops YAML preprocessor functions. It demonstrates `generateRandomString` taking a string `<16>`, `generateRandomInt` taking two strings `<1>` and `<100>`, and `pickRandom` taking multiple string parameters (`<red>`, `<green>`, `<blue>`).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# String expression: <16>\nSECRET_KEY: <@generateRandomString(<16>)> # String expressions: <1> and <100>\nRANDOM_RANGE: <@generateRandomInt(<1>, <100>)> # String expressions: <red>, <green>, <blue>\nPICK_VALUE: <@pickRandom(<red>, <green>, <blue>)> # yamlPreprocessor=on\n```\n\n----------------------------------------\n\nTITLE: Customizing Document Root for PHP Web Server in Zerops\nDESCRIPTION: This snippet demonstrates how to customize the document root for the PHP web server. It allows specifying a custom folder as the root of publicly accessible web server content, relative to the /var/www directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the folder that will be used as the root of the publicly\n      # accessible web server content. Enter the path relative to the /var/www folder.\n      documentRoot: public\n```\n\n----------------------------------------\n\nTITLE: Setting Java Build Base Technology in zerops.yaml - YAML\nDESCRIPTION: Shows how to set the build base technology for a service. The 'base' attribute specifies the Java environment version to use in the build container (e.g., 'java@latest'). This snippet must be included for the build pipeline and may be combined with other build customizations. The base environment comes with Java, Zerops CLI, git, and wget.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\\n  # hostname of your service\\n  - setup: app\\n    # ==== how to build your application ====\\n    build:\\n      # REQUIRED. Sets the base technology for the build environment:\\n      base: java@latest\\n      ...\n```\n\n----------------------------------------\n\nTITLE: Deploy All Content Configuration\nDESCRIPTION: YAML configuration to deploy the entire content of the build container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: DNS Validation Commands\nDESCRIPTION: Command-line instructions for testing DNS resolution and connectivity using dig and curl commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/dns.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\n# Check DNS resolution\ndig AAAA <your-domain>\n\n# Verify connectivity\ncurl -vI https://<your-domain>\n\n# Test IPv4 access\ncurl -4 -v https://<your-domain>\n\n# Test IPv6 access\ncurl -6 -v https://<your-domain>\n```\n\n----------------------------------------\n\nTITLE: Automatic Secret Generation in Zerops YAML for Laravel\nDESCRIPTION: Example of using the Zerops YAML preprocessor to automatically generate a secret APP_KEY during project import. This method is optional and only available during the import process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n  - hostname: app\n    type: php-nginx@8.4\n    envSecrets:\n      APP_KEY: <@generateRandomString(<32>)>\n```\n\n----------------------------------------\n\nTITLE: Starting/Stopping Zerops Service\nDESCRIPTION: Commands to start or stop a Zerops service. Both commands use the same flags for project and service ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_14\n\nLANGUAGE: sh\nCODE:\n```\nzcli service start [serviceIdOrName] [flags]\nzcli service stop [serviceIdOrName] [flags]\n```\n\n----------------------------------------\n\nTITLE: zcli service deploy Command Usage and Parameters\nDESCRIPTION: Detailed usage instructions and available parameters for the 'zcli service deploy' command, including flags for specifying project ID, service ID, version name, and custom working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/trigger-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Exec Health Check Configuration in YAML\nDESCRIPTION: Demonstrates how to configure command-based health checks using shell commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: npm start\n\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Using the Custom ResourceTable Component in JSX/MDX\nDESCRIPTION: Renders a predefined table containing default vertical auto-scaling resource configurations using the custom `ResourceTable` component. This component likely encapsulates the data and structure for displaying the minimum and maximum CPU, RAM, and Disk settings. Assumes the `ResourceTable` component is imported and available.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/scaling.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<ResourceTable />\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Domain DNS Records\nDESCRIPTION: DNS configuration for wildcard domains using direct A and AAAA records. Allows routing all subdomains to the project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/dns.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nType   Name              Content               Proxy status       TTL\nA      *.<your-domain>   <your-ipv4-address>   DNS only/Proxied   Auto\nAAAA   *.<your-domain>   <your-ipv6-address>   DNS only/Proxied   Auto\n```\n\n----------------------------------------\n\nTITLE: Using Zerops CLI Push Command - Shell\nDESCRIPTION: This shell snippet documents the usage and flags available for the 'zcli push' command, which uploads application code, triggers a build, and deploys the application on Zerops. Dependencies include the Zerops CLI (zcli) installed and properly configured in your environment, and the presence of a 'zerops.yaml' in the working directory or specified path. The main parameters allow specification of the working directory, service/project IDs, custom version names, and whether to include .git data or create a code archive. The command is interactive and prompts if parameters are omitted. Default behaviors and optional flags are clearly explained. Outputs are managed directly by the CLI tool, and only files not excluded by .gitignore are uploaded.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Base Technologies for Build Environment\nDESCRIPTION: This example shows how to set multiple base technologies for the build environment and add additional tools using prepareCommands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - dotnet@6\n      prepareCommands:\n        - zsc add go@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Multiple Base Runtime Configuration\nDESCRIPTION: Example showing how to configure multiple base technologies for the runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: rust@latest\n    run:\n      base:\n        - rust@latest\n      prepareCommands:\n        - zsc add go@latest\n```\n\n----------------------------------------\n\nTITLE: Queue Configuration Settings\nDESCRIPTION: Custom queue configuration for Redis connection in Laravel\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('QUEUE_CONNECTION', 'redis'),\n\n'connections' => [\n    'redis' => [\n        'driver' => 'redis',\n        'connection' => 'default',\n        'queue' => 'default',\n        'retry_after' => 90,     // Retry failed jobs after 90 seconds\n        'block_for' => null,     // Don't block when no jobs available\n    ],\n],\n```\n\n----------------------------------------\n\nTITLE: Configuring Go Service with Shared Storage using YAML\nDESCRIPTION: YAML configuration file that defines a project with a Go service and shared storage. The configuration includes project metadata, shared storage settings, and Go service specifications with storage mounting.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a Go and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in go@{version} format\n    type: go@latest\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the Go service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Specifying Nginx Runtime Base Version in zerops.yaml (YAML)\nDESCRIPTION: This YAML snippet demonstrates how to explicitly set the base technology and version (e.g., `nginx@latest`) for the Nginx runtime environment using the optional `run.base` attribute within the `zerops.yaml` configuration. The build section specifies Node.js as its base. If `run.base` is omitted, Zerops retains the current Nginx version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: nodejs@latest\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n        base: nginx@latest\n      ...\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Commands in Separate Shell Instances\nDESCRIPTION: This YAML configuration shows how to run build commands in separate shell instances, where each command starts in a fresh environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - cd src\n  - go build -o app src/main.go\n```\n\n----------------------------------------\n\nTITLE: PostgreSQL Service YAML Configuration Example\nDESCRIPTION: Example YAML configuration for adding a PostgreSQL service to an existing project. The configuration specifies a non-HA PostgreSQL 12 service named 'postgresql1'.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# array of project services\nservices:\n  -\n    # service name\n    hostname: postgresql1\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Executing Manual Build & Deploy with Zerops CLI (zcli push)\nDESCRIPTION: Provides the command-line usage and flags for the `zcli push` command. This command uploads the application code from the specified working directory (respecting `.gitignore`), triggers the build and deploy pipeline defined in `zerops.yaml`, and deploys the application to Zerops. Key flags allow specifying project/service IDs, custom version names, archive paths, working directory, `zerops.yaml` location, and inclusion of the `.git` folder.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Importing Elixir Project Configuration in YAML for Zerops\nDESCRIPTION: This YAML configuration defines a Zerops project named 'recipe-elixir' with two services: an Elixir API service built from a Git repository and a PostgreSQL database. It specifies the service types, versions, and build sources.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: recipe-elixir\n  tags:\n    - zerops-recipe\n\nservices:\n  - hostname: api\n    type: elixir@1.16\n    enableSubdomainAccess: true\n    buildFromGit: https://github.com/zeropsio/recipe-elixir\n\n  - hostname: db\n    type: postgresql@16\n    mode: NON_HA\n    priority: 1\n```\n\n----------------------------------------\n\nTITLE: Configuring Prepare Commands for Build Environment\nDESCRIPTION: This snippet demonstrates how to use prepareCommands to customize the build environment by installing additional packages or tools.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: deno@latest\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Basic Usage of Zerops CLI\nDESCRIPTION: The basic syntax for using the Zerops CLI (zcli) command line tool. All commands support the -h or --help flag for displaying help information.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli <command> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Prerender.io Environment Variables in zerops.yaml\nDESCRIPTION: Example configuration for setting up custom prerender.io host in a Zerops application using zerops.yaml. This snippet shows how to define environment variables for prerender.io integration within the app service configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/env-variables.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        PRERENDER_HOST: \"custom.prerender.host\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis Cache in Laravel\nDESCRIPTION: This PHP snippet configures Redis as the primary cache store in Laravel's cache configuration file. It sets up the Redis driver, connection, and prefix for cache keys.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n'default' => env('CACHE_STORE', 'database'),\n\n'stores' => [\n    'redis' => [\n        'driver' => 'redis',\n        'connection' => env('REDIS_CACHE_CONNECTION', 'cache'),\n        'lock_connection' => env('REDIS_CACHE_LOCK_CONNECTION', 'default'),\n    ],\n],\n\n'prefix' => env('CACHE_PREFIX', Str::slug(env('APP_NAME', 'laravel'), '_').'_cache_'),\n```\n\n----------------------------------------\n\nTITLE: Configuring Redis for Laravel Caching and Sessions in zerops.yaml\nDESCRIPTION: This snippet shows how to configure Redis for Laravel caching, sessions, and queues in the Zerops environment. It sets the necessary environment variables for Redis connection and usage.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/faq.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        CACHE_STORE: redis\n        SESSION_DRIVER: redis\n        REDIS_HOST: redis\n        REDIS_PORT: 6379\n        REDIS_CLIENT: phpredis\n```\n\n----------------------------------------\n\nTITLE: Executing Manual Deploy Only with Zerops CLI (zcli service deploy)\nDESCRIPTION: Shows the command-line usage and flags for the `zcli service deploy` command. This command is used to upload pre-built application artifacts (specified by `pathToFileOrDir`) and deploy them to Zerops, skipping the build step defined in `zerops.yaml` (which should omit the `build` section for this use case). Flags allow specifying project/service IDs, custom version names, archive paths, working directory, `zerops.yaml` location, and deployment of the `.git` folder.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Basic RSA Key Generation YAML Configuration\nDESCRIPTION: Example showing how to generate and use RSA keys in a service configuration, including public, private, and SSH formatted keys.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@16\n  minContainers: 1\n  envSecrets:\n    GENERATED_PUBLIC_KEY: |\n      <@generateRSA2048Key(<Key>)>\n    APP_PUBLIC_KEY: |\n      <@getVar(KeyPublic)>\n    APP_PUBLIC_KEY_SSH: <@getVar(KeyPublicSsh)>\n    APP_PRIVATE_KEY: |\n      <@getVar(KeyPrivate)>\n```\n\n----------------------------------------\n\nTITLE: Setting Log Severity in PHP Output for Zerops (PHP)\nDESCRIPTION: Demonstrates how to prefix messages sent to standard output or standard error in PHP (e.g., via `echo`, `print`, `error_log` to stderr, or `var_dump`) with a severity level identifier (`<N>`) for Zerops logging. Zerops interprets these prefixes (e.g., `<0>` for Emergency, `<7>` for Debug) to categorize log entries. Note that `console.log` syntax is used illustratively; the key is the `<N>` prefix on the output string captured by Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// FIXME\n\n```php\nconsole.log('A message with the informational severity ...');\nconsole.log('<0>Emergency (0) severity > system is unusable.');\nconsole.log('<1>Alert (1) severity > action must be taken immediately.');\nconsole.log('<2>Critical (2) severity > critical conditions.');\nconsole.log('<3>Error (3) severity > error conditions.');\nconsole.log('<4>Warning (4) severity > warning conditions.');\nconsole.log('<5>Notice (5) severity > normal, but significant, condition.');\nconsole.log('<6>Informational (6) severity > informational message.');\nconsole.log('<7>Debug (7) severity > debug-level message.');\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Elasticsearch Plugins in Zerops\nDESCRIPTION: Sets up Elasticsearch plugins using environment secrets. The PLUGINS variable accepts a comma-separated list of plugin names to be installed during service startup.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elasticsearch/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nenvSecrets:\n  PLUGINS: \"analysis-icu,ingest-attachment\"\n```\n\n----------------------------------------\n\nTITLE: Importing Services to Existing Zerops Project\nDESCRIPTION: Command to create one or more services in an existing project from a YAML definition. Includes a flag for project ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_8\n\nLANGUAGE: sh\nCODE:\n```\nzcli project service-import <importYamlPath> [flags]\n```\n\n----------------------------------------\n\nTITLE: Referencing Project Variables in YAML\nDESCRIPTION: This snippet demonstrates how to reference project variables in the zerops.yaml file without needing any prefix.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/env-variables.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nenvVariables:\n  id: 42069\n  hostname: app\n  name: ${projectName}-${hostname}  # Results in: devel-app\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL with Zerops Hostname\nDESCRIPTION: This snippet shows how to modify the PostgreSQL connection command to resolve hostname issues. It appends '.zerops' to the hostname, which can help resolve DNS lookup failures even when the VPN appears connected.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/vpn/troubleshooting.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Instead of\npsql -h [hostname] -U [user]\n\n# Use\npsql -h [hostname].zerops -U [user]\n```\n\n----------------------------------------\n\nTITLE: Configuring Nginx to Log to Syslog - Nginx\nDESCRIPTION: These Nginx configuration directives send both access and error log entries to syslog, targeting the unix:/dev/log socket with custom facility, tag, and severity settings. Dependencies: Nginx with syslog support enabled and access to /dev/log. Key parameters: syslog server URI, facility, tag, severity (info for access_log, error for error_log). Input: HTTP request and error events. Output: log entries to syslog for centralized log collection. Only suitable for environments where syslog is available.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\n    access_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=info default_short;\n    error_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=error;\n```\n\n----------------------------------------\n\nTITLE: Resulting Environment Variables from YAML Configuration\nDESCRIPTION: Illustrates the secret environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`) and their corresponding values that will be configured within the Go service's runtime environment. These variables are derived directly from the `envSecrets` section specified in the preceding `import.yaml` example.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: env\nCODE:\n```\n```env\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n```\n\n----------------------------------------\n\nTITLE: Expected Output from Deployed Node.js Application\nDESCRIPTION: This text represents the expected output displayed in a browser when accessing the public subdomain of the successfully deployed Node.js sample application. It confirms that the basic web server is running correctly.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: React Pricing Calculator Component Usage\nDESCRIPTION: JSX markup showing the implementation of the PricingCalculator component in the pricing page.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/company/pricing.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<PricingCalculator />\n```\n\n----------------------------------------\n\nTITLE: Basic Routing Configuration in YAML\nDESCRIPTION: Example of configuring basic URL routing with redirects in the Static service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/static/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  routing:\n    redirects:\n      - from: /*\n        to: /index.html\n        status: 302\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTP GET Health Check for .NET on Zerops\nDESCRIPTION: This YAML snippet demonstrates how to set up an HTTP GET health check for a .NET application on Zerops. It defines the port and path for the health check request.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: cd app && dotnet dnet.dll\n\n      healthCheck:\n        httpGet:\n          port: 80\n          path: /status\n```\n\n----------------------------------------\n\nTITLE: Zerops CLI Service Deploy Command Usage\nDESCRIPTION: Command-line interface usage for deploying services in Zerops, including available flags for customizing deployment behavior. Supports features like custom working directories, version naming, and project/service specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Build Commands Configuration\nDESCRIPTION: Examples showing different ways to configure build commands, including single shell instance and separate shell instances approaches.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - |\n    cargo b --release\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - cargo b --release\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Logging with Custom Severity Levels in Zerops\nDESCRIPTION: This Python code snippet demonstrates how to configure logging with custom severity levels in Zerops. It uses the logging module and shows how to set different severity levels using the <N> prefix format.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: python\nCODE:\n```\nimport logging\nlogger = logging.getLogger(__name__)\nlogger.Info('A message with the informational severity ...')\nlogger.Info('<0>Emergency (0) severity > system is unusable.')\nlogger.Info('<1>Alert (1) severity > action must be taken immediately.')\nlogger.Info('<2>Critical (2) severity > critical conditions.')\nlogger.Info('<3>Error (3) severity > error conditions.')\nlogger.Info('<4>Warning (4) severity > warning conditions.')\nlogger.Info('<5>Notice (5) severity > normal, but significant, condition.')\nlogger.Info('<6>Informational (6) severity > informational message.')\nlogger.Info('<7>Debug (7) severity > debug-level message.')\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Environment Variables for an Added Gleam Service (Env)\nDESCRIPTION: This snippet demonstrates the environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`) configured for a Gleam service being added via `import.yaml`. It shows the key-value pairs that will be set as secrets within the newly added service, as defined in the `envSecrets` map in the YAML.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Defining Basic Deployment Files in zerops.yaml (YAML)\nDESCRIPTION: Specifies a folder named 'app' and a file named 'file.txt', both located in the project's root directory, to be deployed to the '/var/www' directory in the runtime container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - app\n  - file.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring File Deployment in Zerops YAML for Deno\nDESCRIPTION: Specifies which files or folders should be deployed to runtime service containers after a successful build. Paths are relative to the project root directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - dist\n  - package.json\n  - node_modules\n```\n\n----------------------------------------\n\nTITLE: Nesting Expressions and Functions in Zerops YAML Preprocessor\nDESCRIPTION: This YAML snippet illustrates the nesting capabilities of the Zerops preprocessor within the `envSecrets` section of a service definition. It shows nested string expressions (`<Base and <Nested> content>`), nested function calls (`generateRandomString` using the output of `generateRandomInt`), and multi-level nesting combining `setVar`, `generateRandomString`, and `generateRandomInt`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    NESTED_STRINGS: <Base and <Nested> content>\n    NESTED_FUNCTIONS: <@generateRandomString(<@generateRandomInt(<20>, <50>)>)>\n    EVEN_MORE_NESTING: <@setVar(<refVarName>, <@generateRandomString(<@generateRandomInt(<20>, <30>)>)>)> # yamlPreprocessor=on\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops YAML for Laravel Twill Deployment\nDESCRIPTION: The zerops.yaml file manages the deployment process for the Laravel Twill application. It handles database migrations, cache management, file cleanup, health checks, service orchestration, Twill asset compilation, and media storage configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/twill-devel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Content of zerops.yaml file\n# This is a placeholder as the actual content is not provided in the input text\n```\n\n----------------------------------------\n\nTITLE: Querying Zerops Build Logs Using zCLI - Shell\nDESCRIPTION: This shell command retrieves build logs for a specific service in Zerops using the zCLI tool. It requires the zCLI to be installed and properly configured with the user's Zerops account. The --showBuildLogs flag indicates that only build logs should be shown. Input: service identifier in the Zerops context. Output: build logs as text. The command must be run in a shell environment with network access to Zerops services.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Runtime Base Configuration\nDESCRIPTION: Configuration for setting up the runtime environment with Python and additional technologies.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: python@latest\n    run:\n      base:\n        - python@latest\n      prepareCommands:\n        - zsc add go@latest\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard for File Paths in zerops.yaml (YAML)\nDESCRIPTION: Demonstrates using the '~' wildcard to match any intermediate directory structure. This example deploys all 'file.txt' files found within any path starting with './path/' and ending with '/to/'.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Build and Runtime File Copy in Zerops YAML\nDESCRIPTION: Example showing how to copy files from build to runtime container and configure runtime preparation commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    run:\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands as Separate Shell Instances\nDESCRIPTION: This example shows how to run build commands as separate shell instances, where each command has its own environment context.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - apt-get -y install dotnet-runtime-6.0 aspnetcore-runtime-6.0 dotnet-sdk-6.0 # already installed for .NET service\n  - dotnet build -o app\n```\n\n----------------------------------------\n\nTITLE: Copying Files to Prepare Runtime in Zerops YAML\nDESCRIPTION: This YAML snippet demonstrates using the `addToRunPrepare` attribute within the `build` section of a `zerops.yaml` file. It specifies that the `runtime-config.yaml` file should be copied from the build container, after the build process completes, into the prepare runtime container before the `prepareCommands` are executed.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n      addToRunPrepare: ./runtime-config.yaml\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Go runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Command Readiness Check in Zerops YAML\nDESCRIPTION: This YAML snippet illustrates configuring a readiness check in Zerops using the `exec` method under the `deploy` section. It defines a multi-line `command` that will be executed within the container's environment to determine readiness. The specified command has access to the application's environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n```\n\n----------------------------------------\n\nTITLE: Using zcli push Command to Trigger Python Build Pipeline\nDESCRIPTION: The 'zcli push' command uploads application code, then builds and deploys it in Zerops according to the zerops.yaml configuration. Various flags can customize the upload process, including archive creation, git folder handling, and version naming.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs via zCLI (Shell)\nDESCRIPTION: This shell command uses the Zerops CLI (`zcli`) to retrieve the build logs associated with a service. The `--showBuildLogs` flag specifically instructs the command to fetch and display the logs generated during the build process. This requires having the zCLI installed and authenticated.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Sample Go Application Output\nDESCRIPTION: Expected output from the deployed Go web application when accessed through the generated subdomain URL.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/tutorial/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Path-Specific Deployment Configuration\nDESCRIPTION: Example showing how to deploy specific files and directories with defined paths.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Installing AdminerEvo Database Tool in Zerops with YAML\nDESCRIPTION: YAML configuration for importing the AdminerEvo database management tool into a Zerops project. This creates a PHP-Apache service with subdomain access enabled that builds from the AdminerEvo recipe GitHub repository.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/manage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: adminerevo\n    type: php-apache@8.3\n    enableSubdomainAccess: true\n    buildFromGit: https://github.com/zeropsio/recipe-adminerevo\n```\n\n----------------------------------------\n\nTITLE: Verifying Zerops Deployed App Output - Plaintext\nDESCRIPTION: This plaintext snippet demonstrates the expected output from the example Zerops Nginx web application after successful deployment. When navigating to the provided subdomain URL, users should see 'Hello, World!' displayed in the browser. No dependencies are required to interpret this output; it serves solely as an indicator of correct deployment. The string is literal and should match exactly. No user parameters are necessary, and the output is fixed.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/tutorial/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Listing Zerops Documentation Links in Markdown\nDESCRIPTION: A markdown snippet that provides links to both the full and condensed versions of Zerops documentation, including brief descriptions of each.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/static/llms.txt#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n- [Full Docs](https://docs.zerops.io/llms-full.txt) Full documentation of Zerops. (without examples)\n- [Tiny Docs](https://docs.zerops.io/llms-small.txt): Tiny documentation of Zerops. (includes only description of core)\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Environment Variables for Zerops Service - ENV\nDESCRIPTION: This .env snippet shows the definition of secret environment variables used in Zerops service YAMLs. It is required as part of a complete infrastructure configuration and provides sensitive data such as access keys. Input is key-value pairs representing secrets, output is securely injected environment variables at container runtime. No dependencies beyond standard .env file format. Limitations include necessity to keep this file secure and not commit secrets to public repositories.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\\\"P8cX1vVVb\\\"\\nS3_ACCESS_SECRET=\\\"ogFthuiLYki8XoL73opSCQ\\\"\n```\n\n----------------------------------------\n\nTITLE: Defining Initialization Commands in Zerops YAML\nDESCRIPTION: This snippet shows the `initCommands` configuration within the `run` section of a `zerops.yml` file. These commands, like `rm -rf ./cache`, are executed each time a new runtime container starts or restarts, occurring before the main application `start` command is triggered. They are suitable for tasks like cache clearing or initialization but can delay application startup.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Deno application is started.\n      initCommands:\n        - rm -rf ./cache\n```\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Build Output for Debugging\nDESCRIPTION: This YAML snippet shows how to enable verbose output for the Go build command to aid in debugging build issues.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - go build -v -o app main.go\n```\n\n----------------------------------------\n\nTITLE: Deploying Specific Paths in zerops.yaml (YAML)\nDESCRIPTION: Specifies exact paths for a file ('./path/to/file.txt') and a directory ('./path/to/dir/') to be deployed. These paths are relative to the project root and will be mirrored under '/var/www' in the runtime container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Configuring Bun Version in zerops.yaml\nDESCRIPTION: Configuration settings in zerops.yaml to specify Bun version for both runtime and build environments. The run.base parameter controls the runtime version while build.base parameter determines the build environment version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  base: # Bun version for build environment\nrun:\n  base: # Bun version for runtime environment\n```\n\n----------------------------------------\n\nTITLE: Using Zerops CLI Service Deploy Command - Shell\nDESCRIPTION: This shell snippet documents the usage and available flags for the 'zcli service deploy' command, which uploads application files or directories and deploys them on Zerops. The command assumes the user has their own build process and requires the 'zerops.yaml' in the working directory. It shares similar flags and behaviors with 'zcli push', including options for specifying working directory, service/project IDs, version naming, and archive creation. Required input is the path to the file or directory to deploy, and outputs are handled by the Zerops platform. Proper Zerops CLI setup is required.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n\n```\n\n----------------------------------------\n\nTITLE: Deploy All Content Configuration\nDESCRIPTION: Configuration to deploy the entire content of the build container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: Generating and Using RSA 4096-bit Keys in YAML Configuration\nDESCRIPTION: This snippet demonstrates how to generate RSA 4096-bit key pairs and use them in a YAML configuration file. It shows the syntax for creating public and private keys, including SSH-formatted public keys, and how to properly format them as multiline strings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@16\n  envSecrets:\n    GENERATED_PUBLIC_KEY: |\n      <@generateRSA4096Key(<Key>)>\n    APP_PUBLIC_KEY: |\n      <@getVar(KeyPublic)>\n    APP_PUBLIC_KEY_SSH: <@getVar(KeyPublicSsh)>\n    APP_PRIVATE_KEY: |\n      <@getVar(KeyPrivate)>\n```\n\n----------------------------------------\n\nTITLE: Configuring Command Execution Readiness Check in Zerops YAML\nDESCRIPTION: This example shows how to configure a readiness check using the exec method to run shell commands. The multiline command will execute three operations to verify the service's readiness, with access to the same environment variables as the application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_29\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs via zCLI in Zerops\nDESCRIPTION: This command uses the Zerops CLI to access build logs for a service. It includes the --showBuildLogs flag to specifically display build logs.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Setting Runtime Environment Variables in YAML\nDESCRIPTION: Configuration for setting basic environment variables in the runtime environment using zerops.yaml. Shows how to define runtime-specific variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Example of Setting Up Zerops CLI Autocompletion for Bash\nDESCRIPTION: Example commands to generate and set up Zerops CLI autocompletion for Bash shell.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_23\n\nLANGUAGE: sh\nCODE:\n```\nzcli completion bash > ~/.zerops-completion.bash\necho 'source ~/.zerops-completion.bash' >> ~/.bashrc\n```\n\n----------------------------------------\n\nTITLE: Initializing Runtime with initCommands in Zerops YAML - YAML\nDESCRIPTION: This configuration shows how to leverage 'initCommands' in the 'run' section of Zerops YAML to execute commands when a runtime container starts or restarts. The provided command clears the './cache' directory each time, prior to the application's launch. Dependencies are a defined Zerops service and valid shell commands; use for cache cleaning or initialization tasks only. Note that failure in these commands does not abort deployment, but may delay application startup.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Run one or more commands each time a new runtime container\n      # is started or restarted. These commands are triggered before\n      # your Gleam application is started.\n      initCommands:\n        - rm -rf ./cache\n\n```\n\n----------------------------------------\n\nTITLE: Stopping a Zerops Service using zCLI (Shell)\nDESCRIPTION: Shows the usage and flags for the `zcli service stop` command. This command is used to stop a specified Zerops service (like PostgreSQL) via the command line. Requires zCLI to be installed and configured. The command is interactive if service/project IDs are not provided as arguments or flags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/control.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Setting the Base Build Environment in zerops.yaml (PHP)\nDESCRIPTION: Shows how to set the required `base` attribute within the `build` section of `zerops.yaml` to specify the base technology (e.g., `php-apache@latest`) for the PHP application's build environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: php-apache@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Deploy Command Usage for Zerops CLI\nDESCRIPTION: CLI command parameters for deploying applications to Zerops. Includes options for archive creation, git folder handling, project/service selection, version naming, and working directory settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Writing Migration Tests in Laravel\nDESCRIPTION: This PHP snippet demonstrates how to write a unit test for Laravel migrations, including executing migrations and verifying the creation of tables and columns.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_9\n\nLANGUAGE: php\nCODE:\n```\n/**\n * Test migration execution and schema verification\n */\npublic function test_migrations_can_be_run()\n{\n    // Execute all migrations\n    Artisan::call('migrate');\n\n    // Verify table creation\n    $this->assertTrue(Schema::hasTable('users'));\n\n    // Verify column structure\n    $this->assertTrue(Schema::hasColumns('users', [\n        'id', 'name', 'email', 'password'\n    ]));\n}\n```\n\n----------------------------------------\n\nTITLE: Creating an HTML Table for Horizontal Scaling Defaults\nDESCRIPTION: Defines an HTML `<table>` to show the default minimum (1) and maximum (6) container settings for horizontal auto-scaling. Uses CSS classes (`w-full`, `my-1.5`) for styling, likely from a framework like Tailwind CSS, to control table width and margins.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/scaling.mdx#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<table className=\"w-full my-1.5\">\n  <tbody>\n    <tr>\n      <td className=\"w-fit\">\n        <b>minimum containers</b>\n      </td>\n      <td className=\"w-fit\">1</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit\">\n        <b>maximum containers</b>\n      </td>\n      <td className=\"w-fit\">6</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard for Directory Paths (End) in zerops.yaml (YAML)\nDESCRIPTION: Uses the '~' wildcard to deploy all folders located within any path that starts with './path/to/'. The trailing slash indicates directories.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/to/~/\n```\n\n----------------------------------------\n\nTITLE: Importing Services into an Existing Zerops Project using zCLI\nDESCRIPTION: This command (`zcli project service-import`) adds one or more services defined in a specified YAML file (e.g., `import.yaml`) to an existing Zerops project. It requires the path to the YAML file (`importYamlPath`). An optional flag (`--projectId`) can be used to specify the target project ID if the user has access to multiple projects; otherwise, the CLI interactively prompts for project selection.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/create.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via zCLI\nDESCRIPTION: Command to access runtime container logs using Zerops CLI\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: SSH Public Key Format Example\nDESCRIPTION: Example of a public key in SSH format for use in authorized keys files.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_19\n\nLANGUAGE: yaml\nCODE:\n```\nAPP_PUBLIC_KEY_SSH: ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDJYwrH690Rv9bDX22tX0OiDvHp3gwIvi7nvp9V0OMEWFeNdisrRjSai+9g17vaq2mCBbwWcCIpsU1YwuvuZXXa7QkR0/NqpI5f9cpEpararvDJmMZTS5UsndF3ZjjIXKODrNu8DQeHkdGBufvGhExRtPea3WUE/4N4ciL17FO+2I1+k7RnVuJ2Ysu/MudqSDV6LxhacQAUmLzf8y5EyEhY4DfaHXhZVu+DhIDv75JMcXe4cv6Qcns/8p6oAIME9uBxz1LPtaxJMA7o92vLeysoI/rQAxpPY97AHnUC268VHyc/TlayQyB3zzsoddmOT02ENTkTTq/Pid/tre36K3RT\n```\n\n----------------------------------------\n\nTITLE: Defining KeyDB Service in import.yaml (YAML)\nDESCRIPTION: Shows an example `import.yaml` file structure for adding a KeyDB service to an existing Zerops project. This specific example defines a service named `keydb1`, using KeyDB version 6 (`keydb@6`), operating in non-high-availability mode (`NON_HA`). This file is used with the `zcli project service-import` command and only contains the `services` section.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# array of project services\nservices:\n  -\n    # service name\n    hostname: keydb1\n    # service type and version number in keydb@6 format\n    type: keydb@6\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Zerops CLI Deploy Command Usage\nDESCRIPTION: Detailed usage instructions for the zcli service deploy command, including available flags for customizing the deploy process such as specifying project ID, service ID, and working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/trigger-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Authentication Header Format\nDESCRIPTION: Format for the Authorization header using Bearer token authentication. The token can be obtained from the Access Token management section in Zerops GUI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/api.mdx#2025-04-23_snippet_1\n\nLANGUAGE: http\nCODE:\n```\nAuthorization: Bearer <your-token>\n```\n\n----------------------------------------\n\nTITLE: Configuring Local Environment for PostgreSQL Access (INI)\nDESCRIPTION: This .env file snippet configures local environment variables needed to connect a Laravel application to the PostgreSQL service on Zerops. You must first obtain the credentials (hostname, port, user, password) from your Zerops project dashboard. Place these entries in the root of your Laravel project. Required parameters are 'DB_HOST', 'DB_PORT', 'DB_DATABASE', 'DB_USERNAME', and 'DB_PASSWORD'. This setup enables local commands and database management as if working directly on production, without needing a local PostgreSQL install.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_8\n\nLANGUAGE: ini\nCODE:\n```\nDB_CONNECTION=pgsql\\nDB_HOST=db.zerops\\nDB_PORT=5432\\nDB_DATABASE=db\\nDB_USERNAME=db\\nDB_PASSWORD=[password from Access details]\n```\n\n----------------------------------------\n\nTITLE: Configuring Python Version in zerops.yaml\nDESCRIPTION: To change the Python version for runtime and build environments, modify the 'run.base' and 'build.base' parameters in the zerops.yaml file. The 'run.base' parameter is optional and controls the runtime version, while 'build.base' is required and sets the build environment version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  base: python:3.x  # Optional: Change runtime Python version\n\nbuild:\n  base: python:3.x  # Required: Set build environment Python version\n```\n\n----------------------------------------\n\nTITLE: Displaying Default Nginx Horizontal Scaling Limits in HTML\nDESCRIPTION: This HTML snippet defines a table to visually present the default minimum (1) and maximum (6) container counts for horizontal auto-scaling of an Nginx static service within Zerops. It uses CSS classes (likely Tailwind CSS based on naming) for styling within the documentation page.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/scaling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table className=\"w-full my-1.5\">\n  <tbody>\n    <tr>\n      <td className=\"w-fit\">\n        <b>minimum containers</b>\n      </td>\n      <td className=\"w-fit\">1</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit\">\n        <b>maximum containers</b>\n      </td>\n      <td className=\"w-fit\">6</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Defining Multiple Services in zerops.yaml (Monorepo)\nDESCRIPTION: Illustrates how to define configurations for multiple services (e.g., 'app' and 'api') within a single `zerops.yaml` file. This is useful for monorepo structures where different components need distinct build and run configurations. Each service is defined under its own `setup` block containing specific `build` and `run` instructions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # definition for app service\n  - setup: app\n    build: ...\n    run: ...\n\n  # definition for api service\n  - setup: api\n    build: ...\n    run: ...\n```\n```\n\n----------------------------------------\n\nTITLE: Basic Static Service Configuration in YAML\nDESCRIPTION: Initial setup configuration for a Static service in Zerops using Alpine OS.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/static/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      os: alpine\n      base: static\n```\n\n----------------------------------------\n\nTITLE: Deploying Filament Application to Zerops\nDESCRIPTION: Command to deploy the Filament application to Zerops using the Zerops CLI. This initiates the build and deploy pipeline defined in zerops.yaml.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/filament-local.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Using Prefixed Environment Variables\nDESCRIPTION: Example of how to access an environment variable from one service in another service within the same Zerops project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\nTo access the `API_TOKEN` env variable of the `app` service, use `app_API_TOKEN` as the env variable key.\n```\n\n----------------------------------------\n\nTITLE: Go Logging with Custom Severity Levels\nDESCRIPTION: Example demonstrating how to use slog.Info with different severity level prefixes for logging in Go applications\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: go\nCODE:\n```\nslog.Info(\"A message with the informational severity ...\")\nslog.Info(\"<0>Emergency (0) severity > system is unusable.\")\nslog.Info(\"<1>Alert (1) severity > action must be taken immediately.\")\nslog.Info(\"<2>Critical (2) severity > critical conditions.\")\nslog.Info(\"<3>Error (3) severity > error conditions.\")\nslog.Info(\"<4>Warning (4) severity > warning conditions.\")\nslog.Info(\"<5>Notice (5) severity > normal, but significant, condition.\")\nslog.Info(\"<6>Informational (6) severity > informational message.\")\nslog.Info(\"<7>Debug (7) severity > debug-level message.\")\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs Using Zerops CLI - Shell\nDESCRIPTION: This shell snippet displays the zCLI command to access runtime logs for Zerops services. Requires that Zerops CLI (zcli) is installed and set up. The command 'zcli service log' fetches logs from all runtime containers in a service, displaying standard output and error messages. Input is contextual and output is redirected to the terminal; log filtering options can be found in the referenced documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: Deploying a File from Project Root using deployFiles\nDESCRIPTION: Example of the `deployFiles` configuration in `zerops.yaml` specifying a single file (`app.py`) located at the project root (where `zerops.yaml` resides) to be deployed to the runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndeployFiles:\n  - app.py\n```\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands in a Single Shell Instance\nDESCRIPTION: This snippet demonstrates how to run all build commands in the same environment context using a single shell instance.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - |\n    apt-get -y install dotnet-runtime-6.0 aspnetcore-runtime-6.0 dotnet-sdk-6.0 # already installed for .NET service\n    dotnet build -o app\n```\n\n----------------------------------------\n\nTITLE: Deleting Zerops Service via zCLI (Shell)\nDESCRIPTION: This shell command shows the usage instructions for the `zcli service delete` command, which is used to remove a service within a Zerops project. The command can target a service by its ID or name. Key flags include `--confirm` to skip confirmation prompts, `--projectId` to specify the project if multiple exist, and `--serviceId` to specify the service if needed. Running the command without arguments initiates an interactive selection process. Requires zCLI to be installed and configured.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Verbose Build Commands for Debugging Node.js Builds - YAML\nDESCRIPTION: This YAML snippet includes the '--verbose' flag for 'npm i' in the buildCommands, enabling detailed logging and easier troubleshooting of build issues. When a build fails or more information is needed, this configuration provides more comprehensive output to aid in debugging. Dependencies: valid npm project and Zerops build pipeline. Limitation: verbose logs can be large.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i --verbose\n  - npm run build\n\n```\n\n----------------------------------------\n\nTITLE: Crontab Configuration in YAML\nDESCRIPTION: Configuration for setting up cron jobs with command and timing specifications\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_27\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n\n    # ==== how to run your application ====\n    run:\n      crontab:\n        # REQUIRED. Sets the command to execute:\n        - command: \"\"\n        # REQUIRED. Sets the interval time to execute:\n          timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Gleam Version in zerops.yaml\nDESCRIPTION: To change the Gleam version for runtime and build environments, modify the 'run.base' and 'build.base' parameters in the zerops.yaml file. The 'run.base' parameter is optional and affects the runtime containers, while 'build.base' is required and determines the build environment version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  base: <gleam_version>\n\nbuild:\n  base: <gleam_version>\n```\n\n----------------------------------------\n\nTITLE: Cleanup Tasks Configuration\nDESCRIPTION: Example of a maintenance task running on all containers daily at midnight.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/cron.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nrun: \n  crontab:\n    - command: \"rm -rf /tmp/*\"\n      timing: \"0 0 * * *\"\n      allContainers: true\n```\n\n----------------------------------------\n\nTITLE: Private Key Example\nDESCRIPTION: Example of a generated RSA private key in PEM format.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nAPP_PRIVATE_KEY: |\n  -----BEGIN PRIVATE KEY-----\n  MIIEvwIBADANBgkqhkiG9w0BAQEFAASCCS4wggkqAgEAAoICAQDWRgQntuMGJfME\n  wj9wLrBqNyUd13k1nRuzHZ3x5VJodRrPjX19M9gFXuY95zTJti6VOG+pZftzuTkf\n  +MlW9NwFEe/g0OomY6UwfKfPj4/ib3MPiASg2o4Ixqu0mv3IrLOsGmU25J38gAVQ\n  I3oohW4+B7Vp+2+RnLQCx1FsweWpa8wR0ffQwl0LsWSEWyutfSxi+5pbYwWORBOK\n  yESmGFqGBhMfl0KutBqNAGLt9IYS61bYIqnvfzHqE1uIH3/+ViNzMAr56xt8Lr5a\n  +Y84Mmer1h1wnh6OHnOE6y2sw+876RO8OjMTnHq6v1HDnKHQyCNHxDvpqihy7hly\n  RtCpC9fuCJC94lB0Gf65xgJC55Jx7gGRSbdLUhN2XZdQeAGPtdidz5KqC8S02fhi\n  DKe0C78hpUGD8MZU4GqvqlyiHoouBhKugkba7F0NeSOLVC9GPLdKNjt5AyCi72pQ\n  z8vXaBk8TIb7F+WeQ3NtLw8sgZj0XjXRtx/S6SSoTIOkIKB6hKsPV0k+Z7VaVJ+F\n  pXPsr2CbwcH0iyCJC6A6hLQWnDnts26PLcFck7hE6UjE4BsBhXQhcyMTe5Yai3y4\n  V5NWoHinkLO9NX2N2hBcpQWSSCbr0wSg33xAHROzcG1w5/n1fq46723CbWW3Gcsf\n  naL/hPIt3MSsiz28RqjHlB7qXiWEBQIDAQAB\n  -----END PRIVATE KEY-----\n```\n\n----------------------------------------\n\nTITLE: Configuring Terminal Mode for Zerops CLI\nDESCRIPTION: This shell command shows how to set the ZEROPS_CLI_TERMINAL_MODE environment variable to control the interactive mode of Zerops CLI. The available modes are auto, enabled, and disabled.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/configuration.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nexport ZEROPS_CLI_TERMINAL_MODE=<mode>\n```\n\n----------------------------------------\n\nTITLE: Extended Gleam Project Configuration in YAML\nDESCRIPTION: Extended YAML configuration example showing project metadata setup including description and tags for a Gleam and PostgreSQL service deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n  # optional: project description\n  description: A project with a Gleam and PostgreSQL database\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n```\n\n----------------------------------------\n\nTITLE: Displaying Feature Highlight Links using DocCardList (JSX)\nDESCRIPTION: This JSX snippet uses the `DocCardList` component to showcase key features of Nginx on Zerops. It displays four cards linking to documentation on creating services, using `zerops.yaml`, configuring scaling, and SEO optimization, each with an icon and description, arranged in a grid.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/overview.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={4}\n  items={[\n    {\n      type: 'link',\n      href: '/nginx/how-to/create',\n      label: 'Create Nginx static service',\n      customProps: {\n        icon: Icons['php'],\n        description:\n          'Start with creating a Nginx static service using GUI or zCLI.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/nginx/how-to/build-pipeline#add-zeropsyaml-to-your-repository',\n      label: 'zerops.yaml',\n      customProps: {\n        icon: Icons['puzzle'],\n        description:\n          'See a full example of zerops.yaml file to create your own app.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/nginx/how-to/scaling',\n      label: 'Scaling configuration',\n      customProps: {\n        icon: Icons['adjustments'],\n        description:\n          'Set up scaling of your Nginx application so that it runs smoothly while using only necessary resources.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/nginx/how-to/env-variables#prerenderio-support',\n      label: 'SEO Optimization',\n      customProps: {\n        icon: Icons['magnifying-glass'],\n        description: 'Built-in prerender.io support for better SEO.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Bun Application Internally\nDESCRIPTION: Example of how to access a Bun application within the same Zerops project using the service hostname and internal port.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nTo connect to your application with `app` hostname running on [internal port](bun/how-to/build-pipeline#ports) `3000`, simply use `http://app:3000`\n```\n\n----------------------------------------\n\nTITLE: CLI Push Command Usage Parameters\nDESCRIPTION: Command line parameters for the zcli push command used to trigger build and deploy pipelines. Includes options for archive creation, git folder handling, project/service selection, and working directory configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Setting Custom Severity Levels in Bun Logging\nDESCRIPTION: This JavaScript snippet demonstrates how to set custom severity levels for log messages in Bun applications using Zerops. It shows examples for all severity levels from Emergency (0) to Debug (7).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('A message with the informational severity ...');\nconsole.log('<0>Emergency (0) severity > system is unusable.');\nconsole.log('<1>Alert (1) severity > action must be taken immediately.');\nconsole.log('<2>Critical (2) severity > critical conditions.');\nconsole.log('<3>Error (3) severity > error conditions.');\nconsole.log('<4>Warning (4) severity > warning conditions.');\nconsole.log('<5>Notice (5) severity > normal, but significant, condition.');\nconsole.log('<6>Informational (6) severity > informational message.');\nconsole.log('<7>Debug (7) severity > debug-level message.');\n```\n\n----------------------------------------\n\nTITLE: Zerops CLI Deploy Command Usage and Parameters\nDESCRIPTION: Detailed usage instructions and available parameters for the 'zcli service deploy' command in Zerops CLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/trigger-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access Example\nDESCRIPTION: Example demonstrating how to reference an environment variable from another service within the same project using service hostname prefix.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napp_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Using zcli push Command for Manual Build and Deploy\nDESCRIPTION: The 'zcli push' command uploads application code, builds, and deploys the application in Zerops. It uses the build pipeline defined in zerops.yaml.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Build Environment Configuration with Multiple Base Technologies\nDESCRIPTION: Example showing how to set up multiple base technologies in the build environment and add additional tools using prepareCommands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - gleam@latest\n      prepareCommands:\n        - zsc add go@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Deploying Changes to Zerops\nDESCRIPTION: This command deploys the latest changes to the Zerops environment using the Zerops CLI tool.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Setting environment variables for the build environment\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: nodejs@latest\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Essential Laravel Migration Commands\nDESCRIPTION: This bash snippet lists essential Laravel Artisan commands for managing migrations, including creating new migrations, executing pending migrations, rolling back migrations, resetting all migrations, and checking migration status.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n# Create a new migration file with timestamp\nphp artisan make:migration create_users_table\n\n# Execute all pending migrations\nphp artisan migrate\n\n# Revert the most recent migration operation\nphp artisan migrate:rollback\n\n# Reset and rerun all migrations (warning: destroys existing data)\nphp artisan migrate:fresh\n\n# Display current migration status\nphp artisan migrate:status\n```\n\n----------------------------------------\n\nTITLE: Logging with Custom Severity Using console.log - JavaScript\nDESCRIPTION: This JavaScript code demonstrates logging messages with different severity levels using 'console.log' in Gleam applications. Dependencies include a JavaScript runtime (e.g., Node.js) and use of the Zerops platform for log collection. Each call logs a message to standard output, with an optional severity prefix (e.g., '<0>' through '<7>') that designates log importance, classified from Emergency (0) to Debug (7). Inputs are message strings; outputs are log records. Using the '<N>' prefix is required for custom severity, as console.info/warn/error/debug are aliases for console.log and do not set severity.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: js\nCODE:\n```\nconsole.log('A message with the informational severity ...');\nconsole.log('<0>Emergency (0) severity > system is unusable.');\nconsole.log('<1>Alert (1) severity > action must be taken immediately.');\nconsole.log('<2>Critical (2) severity > critical conditions.');\nconsole.log('<3>Error (3) severity > error conditions.');\nconsole.log('<4>Warning (4) severity > warning conditions.');\nconsole.log('<5>Notice (5) severity > normal, but significant, condition.');\nconsole.log('<6>Informational (6) severity > informational message.');\nconsole.log('<7>Debug (7) severity > debug-level message.');\n```\n\n----------------------------------------\n\nTITLE: Pattern Examples for Cache Path Matching\nDESCRIPTION: Demonstrates various path pattern configurations using Go's filepath.Match syntax for selective caching of files and directories.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/build-cache.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  cache:\n    - \"subdir/*.txt\"      # Matches: subdir/file1.txt, subdir/file2.txt\n    - \"package*\"          # Matches: package.json, package-lock.json\n    - \"node_modules\"      # Matches: entire node_modules directory recursively\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Output for buildCommands for Debugging (YAML)\nDESCRIPTION: Example showing how to add verbose flags (e.g., `-v` for `composer install`) to commands within `buildCommands` to get more detailed output in the build log, aiding in troubleshooting build failures.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - composer install -v\n```\n\n----------------------------------------\n\nTITLE: Creating Custom PostgreSQL Connection String Environment Variable in Zerops\nDESCRIPTION: Shows how to format a custom PostgreSQL connection string that uses 'postgres://' protocol prefix instead of 'postgresql://' for compatibility with third-party software that requires the shorter format. This uses environment variables references to maintain connection details.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/faq.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\npostgres://${db_user}:${db_password}@${db_hostname}:${db_port}\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Logging Environment Variables in Zerops\nDESCRIPTION: YAML configuration for setting up Laravel logging environment variables in Zerops, including channel selection, log level, and stack configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        LOG_CHANNEL: syslog\n        LOG_LEVEL: debug\n        LOG_STACK: single\n```\n\n----------------------------------------\n\nTITLE: Laravel Scheduler CRON Configuration\nDESCRIPTION: Configuration for running Laravel's scheduler every minute with a specified working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/cron.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nrun: \n  crontab:\n    - command: \"php artisan schedule:run\"\n      timing: \"* * * * *\"\n      workingDir: /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands with Verbose Logging\nDESCRIPTION: This snippet shows how to run build commands with verbose logging for troubleshooting build issues.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i --verbose\n  - npm run build\n```\n\n----------------------------------------\n\nTITLE: Rendering Recipe Cards using DocCardList Component in JSX\nDESCRIPTION: JSX code for rendering a list of recipe cards using the DocCardList component. Each card links to GitHub repositories with more complex Bun application examples.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-bun',\n      label: 'Bun + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=Bun&type=all&language=&sort=',\n      label: 'All Bun recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspired.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: zcli push Command Usage and Parameters\nDESCRIPTION: Detailed usage instructions and available parameters for the 'zcli push' command, including flags for specifying project ID, service ID, version name, and custom working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/trigger-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Running Composer Install Verbose in Zerops Build (YAML)\nDESCRIPTION: Configure the Zerops build process via `zerops.yaml` to execute `composer install` with the verbose (`-v`) option. This setting, placed under `buildCommands`, aids in debugging build failures by increasing the detail level of log output during the build phase. Requires Composer to be available in the build environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - composer install -v\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation UI (JSX/JavaScript)\nDESCRIPTION: This JavaScript/JSX snippet imports necessary React components used to build the documentation page layout. It includes components for displaying lists of cards (`DocCardList`, `LargeCardList`, `LargeCard`) and icons (`Icons`) from the documentation theme and site-specific components.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Using Zerops CLI to Import a Project - Shell\nDESCRIPTION: Demonstrates the usage of the zcli command to import a project and its services into Zerops via a YAML file. The snippet documents required and optional flags, such as specifying organization ID and working directory, and outlines the expected workflow for project creation based on description.yaml content via the CLI. The syntax and parameter names must be followed precisely; the project name is not provided through the command but is defined in the YAML file instead.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access Example\nDESCRIPTION: Example showing how to reference an environment variable from another service using the service hostname prefix pattern.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napp_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Basic Deployment Files Configuration in YAML\nDESCRIPTION: Demonstrates how to specify which files and folders should be deployed after a successful build.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - vendor\n  - public\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs via Zerops CLI\nDESCRIPTION: Command to access build logs using the Zerops CLI tool\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Zerops CLI Push Command Usage and Parameters\nDESCRIPTION: Detailed usage instructions and available parameters for the 'zcli push' command in Zerops CLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/trigger-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Using Redis Sessions in Laravel\nDESCRIPTION: This PHP snippet demonstrates how to store and retrieve data in Redis sessions in Laravel.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n// Store data in the Redis session\nsession(['key' => 'value']);\n\n// Retrieve data from the session with optional default\n$value = session('key');\n```\n\n----------------------------------------\n\nTITLE: Add PHP Service to Existing Project YAML Example\nDESCRIPTION: YAML configuration example for adding a PHP service to an existing project. This configuration includes service type, container scaling, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in php-apache@{version} or php-nginx@{version} format\n    type: php-nginx@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Multiple Base Runtime Configuration\nDESCRIPTION: Configuration for setting multiple base technologies in the runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: bun@latest\n    run:\n      base:\n        - bun@latest\n      prepareCommands:\n        - zsc add go@latest\n```\n\n----------------------------------------\n\nTITLE: Executing Manual Migrations via SSH in Zerops\nDESCRIPTION: This bash snippet shows the commands to connect to a Zerops project via VPN and SSH, allowing for manual execution of migrations for development and troubleshooting purposes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\n# Connect to your zerops project\nzcli vpn up\n\n# SSH into your service using it's hostname (app)\nssh app\n\n# For MacOS users\nssh app.zerops\n```\n\n----------------------------------------\n\nTITLE: Customizing Bun Build Commands in YAML\nDESCRIPTION: Example of how to add verbose logging to npm install command in the Zerops YAML configuration file. This can help with troubleshooting build issues by providing more detailed output.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i --verbose\n  - npm run build\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to Import Zerops Project\nDESCRIPTION: This shell command demonstrates how to use the Zerops CLI (zCLI) to import a project based on a description.yaml file. It includes usage instructions and available flags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Runtime Prepare Commands\nDESCRIPTION: Example of customizing the Python runtime environment by installing additional dependencies.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_20\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      prepareCommands:\n        - python3 -m pip install --ignore-installed -r requirements.txt\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard in deployFiles for Folder Paths (Middle)\nDESCRIPTION: Demonstrates using the `~` wildcard in the middle of a path for `deployFiles` in `zerops.yaml`. The example (`./path/~/to/`) targets all folders named `to` that exist within any subdirectory under the `/path/` directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndeployFiles: ./path/~/to/\n```\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Environment Variables for Node.js Service (ENV)\nDESCRIPTION: This environment variable file snippet provides an example of defining secrets for use within a Node.js service on Zerops. These environment variables require secure handling and should be referenced in application code. To apply them, insert as key-value pairs via the Zerops GUI or in YAML configs under envSecrets. The snippet expects variable names and their secret values, and outputs them securely to the container's runtime environment. Secrets must be kept confidential and follow Zerops naming conventions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\\\"P8cX1vVVb\\\"\\nS3_ACCESS_SECRET=\\\"ogFthuiLYki8XoL73opSCQ\\\"\n```\n\n----------------------------------------\n\nTITLE: Structuring the FAQ Section with FAQ and FAQItem - JSX\nDESCRIPTION: This snippet demonstrates the usage of the FAQ and FAQItem React components to assemble a frequently asked questions section. It encapsulates an individual question-answer pair as a child of the FAQ component for structured rendering. The input is static JSX content, and the output is a rendered interactive FAQ block; it assumes the presence of React and that the imported components are correctly implemented.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/faq.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FAQ>\n  <FAQItem question=\"How do I enable SEO optimization with prerender.io?\">\n    Zerops provides built-in prerender.io support. Simply set the `PRERENDER_TOKEN` environment variable with your prerender.io service token. See our [prerender.io documentation](/nginx/how-to/env-variables#prerenderio-support) for details.\n  </FAQItem>\n</FAQ>\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Project Services in YAML\nDESCRIPTION: This YAML snippet defines the services for a Zerops project, including a Deno service and a PostgreSQL service. It specifies service types, hostnames, scaling configurations, and environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    type: deno@latest\n    verticalAutoscaling:\n      cpuMode: DEDICATED\n      minCpu: 2\n      maxCpu: 5\n      minRam: 2\n      maxRam: 24\n      minDisk: 6\n      maxDisk: 50\n      startCpuCoreCount: 3\n      minFreeRamGB: 0.5\n      minFreeRamPercent: 20\n    minContainers: 2\n    maxContainers: 4\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n  - hostname: db\n    type: postgresql@12\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: Domain Redirect Configuration in YAML\nDESCRIPTION: Configuration for handling domain-level redirects with wildcard matching and path preservation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/static/overview.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrouting:\n  redirects:\n    # Redirect a specific domain to an article\n    - from: https://promo-domain.com/*\n      to: https://main-site.com/special-offer\n      status: 302\n\n    # Redirect all subdomains to main site\n    - from: https://*.old-domain.com/*\n      to: https://main-site.com\n      status: 302\n```\n\n----------------------------------------\n\nTITLE: Connecting to Specific Kafka Brokers (Plaintext)\nDESCRIPTION: Illustrates the connection string format for accessing specific Kafka broker nodes directly, potentially bypassing the seed broker discovery. This involves listing the individual node hostnames (e.g., `node-stable-1.db.<hostname>.zerops`) and their port (9092), separated by commas.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/kafka/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nnode-stable-1.db.<hostname>.zerops:9092,node-stable-2.db.<hostname>.zerops:9092,...\n```\n\n----------------------------------------\n\nTITLE: Path-Specific Deployment Configuration\nDESCRIPTION: Deploys specific files and directories from defined paths.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Rendering a Selectable Card List with React and Docusaurus - JSX\nDESCRIPTION: This snippet renders a DocCardList React component displaying technology guide options as interactive cards. Each card links to a different runtime+database tutorial, shows the corresponding technology icon, and is configured through a list of objects. Dependencies include the Docusaurus '@theme/DocCardList', a custom Icon component, and other visual layout components from the local project. Cards are rendered in four columns, and each has a technology label, icon, and URL.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/tutorial/step-by-step.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={4}\n  items={[\n    {\n      type: 'link',\n      href: '/nodejs/tutorial/runtime-sql',\n      label: 'Node.js + PostgreSQL',\n      customProps: {\n        icon: Icons['nodejs'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/go/tutorial/runtime-sql',\n      label: 'Go + PostgreSQL',\n      customProps: {\n        icon: Icons['go'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/php/tutorial/runtime-sql',\n      label: 'PHP + PostgreSQL',\n      customProps: {\n        icon: Icons['php'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/python/tutorial/runtime-sql',\n      label: 'Python + PostgreSQL',\n      customProps: {\n        icon: Icons['python'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/dotnet/tutorial/runtime-sql',\n      label: '.NET + PostgreSQL',\n      customProps: {\n        icon: Icons['dotnet'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/rust/tutorial/runtime-sql',\n      label: 'Rust + PostgreSQL',\n      customProps: {\n        icon: Icons['rust'],\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to Import Zerops Services\nDESCRIPTION: This shell command demonstrates how to use the Zerops CLI (zCLI) to import services to an existing project based on an import.yaml file. It includes usage instructions and available flags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared IPv4 DNS Records with Proxy\nDESCRIPTION: DNS configuration for shared IPv4 setup with IPv6 record. Not recommended as it exposes IPv6 address while proxying shared IPv4.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/dns.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nType    Name              Content                Proxy status  TTL\nAAAA    <your-domain>     <your-project-ipv6>    DNS only      Auto\nA       <your-domain>     <zerops-shared-ipv4>   Proxied       Auto\n```\n\n----------------------------------------\n\nTITLE: Simple Files and Folders Deployment Example\nDESCRIPTION: Shows how to deploy a folder and file from the project root directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - public\n  - file.txt\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to Import Services to Existing Project\nDESCRIPTION: This shell command shows how to use the Zerops CLI (zCLI) to import services into an existing project based on an import.yaml file. It includes usage instructions and available flags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Configuration example showing how to define environment variables for the build environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: rust@latest\n      envVariables:\n        RUST_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Configuration for setting environment variables in the build environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: bun@latest\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Importing a New Zerops Project\nDESCRIPTION: Command to create a new project with one or more services from a YAML definition. Includes flags for organization ID and working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nzcli project project-import <importYamlPath> [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Java Service Addition in import.yaml (YAML)\nDESCRIPTION: Example `import.yaml` configuration for adding a Java service named 'app' to an existing Zerops project. It specifies the service type (`java@latest`), minimum/maximum containers for horizontal autoscaling, and sets secret environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`). This file structure is used with the `zcli project service-import` command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: app\n    # service type and version number in java@{version} format\n    type: java@latest\n    # defines the minimum number of containers for horizontal autoscaling\n    minContainers: 1\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 6\n    # optional: create env variables\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Setting the Base Build Environment in zerops.yaml\nDESCRIPTION: Demonstrates the required `build.base` configuration within `zerops.yaml` to specify the primary technology for the build environment. This example sets the latest Python version (`python@latest`) as the base. This determines the core tools and language version available during the build process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: python@latest\n      ...\n```\n```\n\n----------------------------------------\n\nTITLE: Initializing VPN Connection for Zerops Project\nDESCRIPTION: Commands to set up VPN connection using Zerops CLI for local development. This allows seamless integration with remote resources.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/filament-local.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize VPN connection using project ID\nzcli vpn up <project-id>\n\n# Or use interactive mode to select your project\nzcli vpn up\n```\n\n----------------------------------------\n\nTITLE: Complete zerops.yaml Example with deployFiles\nDESCRIPTION: A complete example of a zerops.yaml file configuring deployFiles for an application.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      deployFiles: ./\n```\n\n----------------------------------------\n\nTITLE: Deleting Services Using Zerops CLI\nDESCRIPTION: Command line syntax and options for deleting services using the Zerops CLI tool. Includes various flags for confirmation, project selection, and service identification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to start a Python service\nDESCRIPTION: Command-line usage for starting a Python service in Zerops using zCLI. The command includes options for specifying project ID and service ID when working with multiple projects or services.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Reading Environment Variables in Java Service Context (Shell Example)\nDESCRIPTION: Illustrates the conceptual method for accessing the value of a locally defined environment variable within the context of a running Java service on Zerops. Replace 'YOUR_VARIABLE_KEY_HERE' with the actual key of the environment variable you need to retrieve. Although the syntax resembles shell commands (specifically Go's os package), it represents how environment variables passed by Zerops can be read by the application process; the standard Java method is `System.getenv(\"YOUR_VARIABLE_KEY_HERE\")`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nos.Getenv(\"YOUR_VARIABLE_KEY_HERE\")\n```\n\n----------------------------------------\n\nTITLE: Basic Deploy Files Configuration in YAML\nDESCRIPTION: Simple example showing how to specify files and folders to deploy from project root directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - dist\n  - package.json\n```\n\n----------------------------------------\n\nTITLE: Configuring System-Wide Cache Control in Zerops\nDESCRIPTION: Basic configuration examples for enabling or disabling system-wide caching behavior. Shows boolean options for controlling the entire build container state.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/build-cache.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  cache: true   # Cache everything\n  # OR\n  cache: false  # Intended to disable all caching\n```\n\n----------------------------------------\n\nTITLE: Adding Valkey (Redis) Service in Zerops YAML Configuration\nDESCRIPTION: This YAML snippet shows how to add a Valkey (Redis) service to your Zerops project configuration. It specifies the hostname, service type, and mode.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: valkey\n    type: valkey@7.2\n    mode: NON_HA  # use HA in production\n```\n\n----------------------------------------\n\nTITLE: Building zCLI Binary on NixOS\nDESCRIPTION: This command builds the zCLI binary using Nix. After successful execution, the binary can be found in the result/bin directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nnix build\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Deployment Example\nDESCRIPTION: Demonstrates using wildcards in deployment paths for flexible file selection.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\n----------------------------------------\n\nTITLE: Service Import Command Usage\nDESCRIPTION: CLI command syntax for importing services to an existing project using zcli.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Importing Services into an Existing Zerops Project using zCLI (Shell)\nDESCRIPTION: This command (`zcli project service-import`) adds one or more services defined in a YAML file (`importYamlPath`, typically `import.yaml`) to an existing Zerops project. It requires the path to the YAML file and optionally accepts a flag (`--projectId`) to specify the target project if the user has access to multiple projects. If `projectId` is omitted, the command interactively prompts the user to select a project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/create.mdx#2025-04-23_snippet_7\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Zerops Configuration Base References\nDESCRIPTION: Code references for build.base and run.base configuration in zerops.yaml showing supported OS options - ubuntu and alpine\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/base-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\nbuild.base\\nrun.base\\nubuntu\\nalpine\n```\n\n----------------------------------------\n\nTITLE: Full Content Deployment Configuration\nDESCRIPTION: Configuration to deploy the entire content of the build container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: Ignoring File Name in Any Directory with .deployignore (Text)\nDESCRIPTION: Example `.deployignore` entry that prevents any file named 'file.txt' residing within any directory named 'src' from being deployed. The absence of a leading '/' makes the pattern match anywhere in the directory structure.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\nsrc/file.txt\n```\n\n----------------------------------------\n\nTITLE: Customizing Deno Build Commands in YAML\nDESCRIPTION: This YAML snippet demonstrates how to configure build commands for a Deno application in Zerops, including a verbose npm install for troubleshooting purposes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i --verbose\n  - npm run build\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to Import Services to Existing Project\nDESCRIPTION: This shell command shows how to use the Zerops CLI (zCLI) to import services to an existing project using a YAML configuration file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Setting Base Technology for Runtime in Zerops YAML for Deno\nDESCRIPTION: Specifies the base technology for the runtime environment, including options for multiple technologies and customization.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: deno@latest\n    run:\n      base: deno@latest\n```\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: deno@latest\n    run:\n      base:\n        - deno@latest\n      prepareCommands:\n        - zsc add go@latest\n```\n\n----------------------------------------\n\nTITLE: Running prepareCommands in Separate Shell Instances\nDESCRIPTION: Shows the standard YAML list syntax for `prepareCommands` in `zerops.yaml`. Using this format, each command runs in a separate, isolated shell instance. This means context like the current working directory or environment variables set in one command are not carried over to the next. The example lists `apt update` and `apt install python3-pip` as distinct commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\nprepareCommands:\n  - apt update\n  - apt install python3-pip # already installed for Python services\n```\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Development Server\nDESCRIPTION: Command to start the Laravel development server locally. It also mentions alternative setups like Valet, Herd, or Sail.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/minimal-local.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan serve # or use your preferred setup (Valet, Herd, Sail)\n```\n\n----------------------------------------\n\nTITLE: Configuring Rust Version in Zerops YAML\nDESCRIPTION: Shows how to configure Rust version settings in zerops.yaml through build.base and run.base parameters. The build.base parameter is required to specify the Rust version for building, while run.base determines the runtime container version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/upgrade.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  base: rust@x.y # required\nrun:\n  base: rust@x.y # optional\n```\n\n----------------------------------------\n\nTITLE: Deleting Python Service using zCLI Command\nDESCRIPTION: Command line usage for deleting a Python service using Zerops CLI tool. The command supports flags for confirmation, project selection, and service identification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Multiple Base Technologies Configuration\nDESCRIPTION: Configuration for multiple base technologies in runtime environment\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: nodejs@latest\n    run:\n      base:\n        - nodejs@latest\n      prepareCommands:\n        - zsc add go@latest\n```\n\n----------------------------------------\n\nTITLE: Continuing Execution with Debug Command in Zerops\nDESCRIPTION: Command used to proceed with the normal deployment process after a debug pause. This will continue execution based on the current pause point, either starting the command execution, skipping a failed command, or moving to the next phase.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/debug-mode.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzsc debug continue\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Elixir\nDESCRIPTION: Example showing how to access environment variables from within an Elixir application using process.env.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nprocess.env.YOUR_VARIABLE_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Deploy Files with Specific Paths\nDESCRIPTION: Configuration example showing how to deploy files and directories from specific paths.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Specifying Deployment Files with build.deployFiles\nDESCRIPTION: Illustrates the required `build.deployFiles` section in `zerops.yaml`. This configuration specifies which files or folders, generated during the build process, should be deployed to the runtime container's `/var/www` directory. This example designates the single file `app.py` located in the project root for deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\n# REQUIRED. Select which files / folders to deploy after\n# the build has successfully finished\ndeployFiles:\n  - app.py\n```\n```\n\n----------------------------------------\n\nTITLE: Testing TCP Connections with Zerops CLI\nDESCRIPTION: Examples of using the zsc test tcp command to test TCP connections to hosts with specified ports. Shows basic usage and using timeout parameter.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_10\n\nLANGUAGE: sh\nCODE:\n```\n# Test TCP connection to a host\nzsc test tcp api.zerops:80\nzsc test tcp database:5432 --timeout 1m\n```\n\n----------------------------------------\n\nTITLE: Enabling Verbose Logging for Zerops CLI Service Push\nDESCRIPTION: These shell commands demonstrate how to enable verbose logging for the Zerops CLI service push command using either the long-form --verbose flag or its shorthand -v.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/configuration.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nzcli service push --verbose\nzcli service push -v\n```\n\n----------------------------------------\n\nTITLE: Accessing Bun Application via VPN\nDESCRIPTION: Example of how to access a Bun application in Zerops after establishing a VPN connection.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/access.mdx#2025-04-23_snippet_2\n\nLANGUAGE: markdown\nCODE:\n```\nTo connect to your Bun application in Zerops set the hostname and [internal port](bun/how-to/build-pipeline#ports) e.g. http://app:3000\n```\n\n----------------------------------------\n\nTITLE: Importing Services to Zerops Project with zcli (Shell)\nDESCRIPTION: Explains how to use the `zcli project service-import` command to add services defined in an `import.yaml` file (specified by `importYamlPath`) to an existing Zerops project. Requires `zcli` and the path to the YAML file. A project ID (`--projectId`) might be needed if the user has access to multiple projects. The command is interactive if the project ID is not provided.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Listing Zerops Projects\nDESCRIPTION: Command to list all projects you have access to in Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nzcli project list\n```\n\n----------------------------------------\n\nTITLE: Deploy Ignore Configuration Example\nDESCRIPTION: Example zerops.yaml with deployFiles configuration and corresponding .deployignore patterns.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      deployFiles: ./\n```\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\n----------------------------------------\n\nTITLE: Stopping a Zerops Nginx Static Service using zCLI - Shell\nDESCRIPTION: This code snippet shows the usage output for the `zcli service stop` command, which stops a specific Zerops Nginx static service via the command-line interface. It details available flags such as `--projectId` and `--serviceId` to target services in multi-project or multi-service environments. Inputs include either the service name or ID, and the command is interactive, guiding users through project and service selection when necessary.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\\n  zcli service stop [serviceIdOrName] [flags]\\n\\nFlags:\\n  -h, --help               the enable Zerops subdomain command.\\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\\n                           command is to be executed.\\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\\n                           command is to be executed.\\n\n```\n\n----------------------------------------\n\nTITLE: Zerops CLI Deploy Command Usage\nDESCRIPTION: Command line interface options for deploying applications to Zerops, including flags for archive creation, project/service selection, and configuration of deployment parameters.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards in Zerops YAML for Deno Deployments\nDESCRIPTION: Demonstrates the use of the '~' wildcard character to match multiple folders in deployment paths.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/to/~/\n```\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/\n```\n\n----------------------------------------\n\nTITLE: Accessing Internal Deno Service Example\nDESCRIPTION: Example showing how to access a Deno service within the same project using internal hostname and port.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://app:3000\n```\n\n----------------------------------------\n\nTITLE: Adding Verbose Logging to npm Build Commands in zerops.yaml (YAML)\nDESCRIPTION: This zerops.yaml configuration snippet demonstrates how to modify the build commands for a Node.js service to enhance troubleshooting. By adding the '--verbose' flag to the 'npm install' command ('npm i'), more detailed output is generated during the build process, which can help diagnose issues if the build fails. This snippet should be placed within the 'build' section of your service definition in the 'zerops.yaml' file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\\n  - npm i --verbose\\n  - npm run build\n```\n\n----------------------------------------\n\nTITLE: Deleting a Zerops Project\nDESCRIPTION: Command to delete a project and all its services in Zerops. Includes flags for confirmation and project ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nzcli project delete [projectId] [flags]\n```\n\n----------------------------------------\n\nTITLE: Object Storage Service Import YAML\nDESCRIPTION: Example YAML configuration for adding an Object Storage service to an existing project. This configuration creates a storage service with 73GB capacity and public-write access policy.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# array of project services\nservices:\n  - # service name\n    hostname: upload\n\n    # service type\n    type: objectstorage\n\n    # Object storage size in GB\n    objectStorageSize: 73\n\n    # Choose object storage policy from a predefined list\n    objectStoragePolicy: public-write\n\n    # Or define a custom policy\n    objectStorageRawPolicy:\n```\n\n----------------------------------------\n\nTITLE: Using Document Root Variable in Nginx Configuration - Nginx\nDESCRIPTION: A minimal Nginx configuration statement demonstrating how to dynamically assign the root directory using Zerops deployment variables. The {{.DocumentRoot}} placeholder is populated by the run.documentRoot attribute or defaults to /var/www if unspecified. This line must be placed within the appropriate server or location context of the Nginx config file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-web-server.mdx#2025-04-23_snippet_1\n\nLANGUAGE: nginx\nCODE:\n```\nroot {{.DocumentRoot}};\n```\n\n----------------------------------------\n\nTITLE: Using Redis Queues in Laravel\nDESCRIPTION: This PHP snippet shows how to dispatch jobs to Redis queues in Laravel and how to start the queue worker process for Redis.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/redis.mdx#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\n// Dispatch a job to the Redis queue with specific connection\nProcessPodcast::dispatch($podcast)->onConnection('redis');\n\n// Start the queue worker process for Redis\nphp artisan queue:work redis\n```\n\n----------------------------------------\n\nTITLE: Setting Basic Runtime Environment Variables in YAML for Gleam Service\nDESCRIPTION: This YAML snippet demonstrates how to set basic environment variables for the runtime environment in the zerops.yaml file. It includes examples of setting static values and referencing other variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/env-variables.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        NODE_ENV: production\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Deleting a MariaDB Service with Zerops CLI (Shell)\nDESCRIPTION: This shell code block details the usage of the 'zcli service delete' command for removing a MariaDB service via Zerops CLI. It lists available options, such as specifying the service/project ID and enabling no-confirm mode for destructive actions, along with a short description for each flag. The command is interactive by default and requires the user to have zCLI installed and configured, as referenced in the prerequisites. Service name or ID and (optionally) project ID are required parameters, and the command can be run with specific flags to adjust its behavior. Outputs are interactive prompts, with limitations on required user permissions and access.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Zerops YAML with DeployIgnore Example\nDESCRIPTION: Example showing zerops.yaml configuration with deploy files and corresponding .deployignore patterns.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      deployFiles: ./\n```\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\n----------------------------------------\n\nTITLE: Deleting Services Using Zerops CLI Command\nDESCRIPTION: Command syntax and flags for deleting a Deno service using the Zerops CLI tool. The command supports interactive selection of projects and services, with options for automatic confirmation and specific project/service targeting.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: VPN Access Pattern\nDESCRIPTION: Example of accessing .NET application through VPN connection using hostname and port.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/access.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://app:5000\n```\n\n----------------------------------------\n\nTITLE: DeployIgnore File Configuration\nDESCRIPTION: Example of .deployignore file configuration to exclude specific files and paths from deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\n----------------------------------------\n\nTITLE: Runtime Base Configuration in YAML\nDESCRIPTION: Example setting the base technology for runtime environment, which determines what Java version will be used.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Sets the base technology for the build environment:\n      base: java@latest\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Sets the base technology for the runtime environment:\n        base: java@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Using generateRandomStringVar in YAML Configuration\nDESCRIPTION: Example showing how to generate and store a random string in one operation using generateRandomStringVar.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    GENERATE_RANDOM_STRING_VAR: <@generateRandomStringVar(<plainPassword>, <10>)>\n```\n\n----------------------------------------\n\nTITLE: Deploy Ignore Patterns\nDESCRIPTION: Examples of ignore patterns for deployment\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\nLANGUAGE: text\nCODE:\n```\nsrc/file.txt\n```\n\n----------------------------------------\n\nTITLE: DeployIgnore Relative Path Pattern\nDESCRIPTION: Example of ignoring a file in any src directory using .deployignore.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: text\nCODE:\n```\nsrc/file.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via zCLI (Shell)\nDESCRIPTION: This command uses the Zerops Command Line Interface (zCLI) to access the logs generated by the runtime containers of a service. Running `zcli service log` without additional flags defaults to showing the runtime logs.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: Using Verbose Build Command for Troubleshooting\nDESCRIPTION: This snippet shows how to use the --verbosity option in the build command for detailed output, useful for troubleshooting build issues.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - dotnet build --verbosity detailed\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs via zCLI (Shell)\nDESCRIPTION: This command utilizes the Zerops Command Line Interface (zCLI) to retrieve the build logs associated with a specific service. The `--showBuildLogs` flag directs the command to fetch and display the logs generated during the build process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Adding a Database Test Route in Laravel\nDESCRIPTION: This PHP code adds a new route to the Laravel application to test database connectivity by counting active sessions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nRoute::get('/db-test', function () {\n    session()->save();\n    return 'Current number of active sessions in database: ' . Illuminate\\Support\\Facades\\DB::table('sessions')->count();\n});\n```\n\n----------------------------------------\n\nTITLE: Horizontal Autoscaling Configuration\nDESCRIPTION: Defines horizontal scaling parameters to automatically adjust the number of service containers based on demand. Specifies minimum and maximum container counts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    type: nodejs@22\n    buildFromGit: https://github.com/zeropsio/recipe-php\n    enableSubdomainAccess: true\n    minContainers: 2\n    maxContainers: 6\n```\n\n----------------------------------------\n\nTITLE: Stopping Go Service with zCLI\nDESCRIPTION: This command stops a Go service using the Zerops CLI. It allows specifying the service by ID or name, with options for project and service identification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Build Commands Configuration Examples\nDESCRIPTION: Different ways to configure build commands - either as separate shell instances or as a single shell instance for maintaining environment context.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - |\n    npm i\n    npm run build\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i\n  - npm run build\n```\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i --verbose\n  - npm run build\n```\n\n----------------------------------------\n\nTITLE: Deleting PHP Service via Zerops zCLI – Shell\nDESCRIPTION: This code snippet demonstrates the usage and available flags for the 'zcli service delete' command, which deletes a service in Zerops via the command line. It lists all command options, including flags for confirming deletions and specifying project or service IDs. Expected input is the service ID or name, with output being the removal of the specified service; if the '--confirm' flag is not set, zCLI interactively asks for confirmation. Requires zCLI to be installed and configured before use.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\\n  zcli service delete [serviceIdOrName] [flags]\\n\\nFlags:\\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\\n  -h, --help               the service delete command.\\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\\n                           command is to be executed.\\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\\n                           command is to be executed.\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs via Zerops CLI\nDESCRIPTION: This command uses the Zerops CLI to access build logs for a service. It requires the zcli tool to be installed and configured.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Deleting Zerops Service using zCLI Command\nDESCRIPTION: Shows the command-line usage for deleting a Zerops service (like Nginx static) using the `zcli service delete` command. It displays the command syntax and explains optional flags like `--confirm` for non-interactive deletion, `--projectId` to specify the target project, and `--serviceId` to specify the target service. Requires prior installation and setup of zCLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Stopping Elixir Service Using zCLI\nDESCRIPTION: Command syntax for stopping an Elixir service using Zerops CLI tool. Includes usage pattern and available flags for project and service specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Gleam Service with Shared Storage using YAML\nDESCRIPTION: YAML configuration file that defines a Zerops project with a Gleam service and shared storage. The configuration includes project metadata, shared storage setup, and Gleam service configuration with storage mounting.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a Gleam and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in gleam@{version} format\n    type: gleam@latest\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the Gleam service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Jetstream Deployment in zerops.yaml\nDESCRIPTION: The zerops.yaml file manages the deployment process for the Laravel Jetstream application. It handles database migrations, cache management, file cleanup, health checks, service orchestration, and Jetstream assets compilation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/jetstream-devel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# zerops.yaml content mentioned but not provided in the text\n```\n\n----------------------------------------\n\nTITLE: Internal Service Access Pattern\nDESCRIPTION: Example of how to access a .NET service internally using hostname and port.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://app:5000\n```\n\n----------------------------------------\n\nTITLE: Runtime Base Configuration with Multiple Technologies\nDESCRIPTION: Configuration example showing how to set up multiple base technologies in the runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: dotnet@6\n    run:\n      base:\n        - dotnet@6\n      prepareCommands:\n        - zsc add go@latest\n```\n\n----------------------------------------\n\nTITLE: Customizing Build Environment with Prepare Commands\nDESCRIPTION: This snippet illustrates how to use prepareCommands to customize the build environment by installing additional packages or tools.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: dotnet@6\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Deploying with Specific Paths in YAML\nDESCRIPTION: Example showing how to deploy a file and a directory from specific paths within the project structure.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - ./path/to/file.txt\n  - ./path/to/dir/\n```\n\n----------------------------------------\n\nTITLE: Using setVar in YAML Configuration\nDESCRIPTION: Example showing how to store a generated random string for later use using setVar function.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    SET_VAR: <@setVar(<plainPassword>, <@generateRandomString(<16>)>)>\n```\n\n----------------------------------------\n\nTITLE: Retrieving Zerops Service Logs\nDESCRIPTION: Command to get service runtime or build logs to stdout. Includes various flags for customizing log output and filtering.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_17\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log [serviceIdOrName] [flags]\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs via Zerops CLI (sh)\nDESCRIPTION: This command uses the Zerops CLI (`zcli`) to retrieve the build logs for a specific service. The `--showBuildLogs` flag specifically targets the logs generated during the build pipeline process. This requires the Zerops CLI to be installed and authenticated.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Starting a Java Service Using Zerops zCLI - Shell\nDESCRIPTION: This snippet provides the usage instructions for the command 'zcli service start' within the Zerops command-line interface (zCLI). The command can be supplied with either a service name or service ID, and includes flags to specify the corresponding project and service for users who have access to multiple entities. Prerequisites include having zCLI installed and configured. The command is interactive if no arguments are supplied and initiates the start process for a selected Java service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\\n  zcli service start [{serviceName | serviceId}] [flags]\\n\\nFlags:\\n  -h, --help               the service start command.\\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\\n                           command is to be executed.\\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\\n                           command is to be executed.\\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via zCLI - All Containers\nDESCRIPTION: Command to access aggregate runtime logs from all containers using Zerops CLI\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: HTML CDN Implementation Examples\nDESCRIPTION: Examples showing how to implement CDN URLs in HTML for both Object Storage and Static modes, including environment variable usage\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/cdn.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!-- Compare: Direct Object Storage vs. CDN-accelerated Storage -->\n<!-- Direct from Object Storage -->\n<img src=\"https://storage-prg1.zerops.io/my-bucket/logo.png\"/>\n\n<!-- Via CDN for faster global delivery -->\n<img src=\"https://storage.cdn.zerops.app/my-bucket/logo.png\"/>\n\n<!-- Using environment variables in templates -->\n<img src=\"{{ osGetEnv \"storageCdnUrl\" }}/assets/hero-image.jpg\"/>\n\n<!-- Compare: Direct Domain vs. CDN-accelerated Domain -->\n<!-- Direct from your domain -->\n<script src=\"/static/js/main.js\"></script>\n\n<!-- Via CDN for faster global delivery -->\n<script src=\"https://static.cdn.zerops.app/your-domain.com/static/js/main.js\"></script>\n```\n\n----------------------------------------\n\nTITLE: Configuring Laravel Environment Variables\nDESCRIPTION: Example of environment variable configuration using Zerops service discovery system for database and Redis connections\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel.mdx#2025-04-23_snippet_0\n\nLANGUAGE: php\nCODE:\n```\nDB_HOST=${db_hostname}\nREDIS_HOST=${cache_hostname}\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Commands for Java Deployment (YAML)\nDESCRIPTION: This YAML snippet defines custom build commands for a Java application using Zerops' build pipeline. It specifies that the Maven Wrapper (`./mvnw`) should be executed with the `-X` debug flag to perform a clean install, providing verbose diagnostic output in case of build errors. The only required dependency is the Maven Wrapper script (`mvnw`) present in the project source directory; additional environment configuration is handled by Zerops per the documentation above. The input is the YAML configuration file, and the output is the execution of the listed command(s) during the build phase.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: YAML\nCODE:\n```\nbuild:\\n  - ./mvnw -X clean install\\n\n```\n\n----------------------------------------\n\nTITLE: Deleting Services Using Zerops CLI Command\nDESCRIPTION: Command syntax and flags for deleting services using the Zerops CLI tool. The command supports interactive mode and includes options for confirmation, project selection, and service identification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Base Technologies for Build Environment\nDESCRIPTION: This snippet shows how to set multiple base technologies for the build environment using a YAML array. It includes adding Go to the Bun environment using a prepare command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - bun@latest\n      prepareCommands:\n        - zsc add go@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Querying Zerops Runtime Logs Using zCLI - Shell\nDESCRIPTION: This shell command displays the runtime logs of service containers on Zerops through the command line. Prerequisites include installation and authentication of zCLI. The command fetches the latest runtime logs for the currently targeted service. Input: optional parameters for filtering logs. Output: streaming or static log text from containers. Runs from any shell with network access to Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: Start Service Command Usage with zCLI\nDESCRIPTION: Command syntax and flags for starting a Rust service using Zerops CLI. Includes options for specifying project and service IDs when working with multiple instances.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Command Readiness Check in Zerops YAML\nDESCRIPTION: Example demonstrating how to configure a readiness check using exec command with multiple shell commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_25\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to deploy your application ====\n    deploy:\n      # OPTIONAL. Define a readiness check with a HTTP GET request option.\n      # Configures the check on http://127.0.0.1:80/status\n      readinessCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Setting Default Zerops Project\nDESCRIPTION: Command to set the default project for commands that require a project ID.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nzcli scope project [projectId]\n```\n\n----------------------------------------\n\nTITLE: Laravel Scheduler Logging Configuration\nDESCRIPTION: Environment configuration for enabling detailed scheduler logging in Laravel.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/cron.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nLOG_CHANNEL=daily\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose Go Build Command in YAML\nDESCRIPTION: This YAML snippet demonstrates how to set a verbose Go build command in the Zerops configuration file. The -v flag is added to the go build command to provide more detailed output during the build process, which can be helpful for troubleshooting build failures.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuild:\n  - go build -v\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Deno Service\nDESCRIPTION: This snippet shows the environment variables that will be configured for the Deno service in the Zerops project. These are secret variables for S3 access.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Image Component for Advanced RAM Settings UI in JSX/MDX\nDESCRIPTION: Displays the 'Advanced RAM Settings' UI screenshot using the custom `Image` component. It utilizes light/dark mode image sources (`scaling6.png`), provides 'Scaling' as alt text, and sets specific sizing styles (95% width, auto height). Assumes the `Image` component is imported and available.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/scaling.mdx#2025-04-23_snippet_7\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling6.png\"\n  darkImage=\"/img/screenshots/scaling6.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Queue and Redis Configuration\nDESCRIPTION: Environment configuration for Redis queue system in Laravel application\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        # Queue Configuration\n        QUEUE_CONNECTION: redis\n        REDIS_HOST: redis\n        REDIS_PORT: 6379\n        REDIS_CLIENT: phpredis\n\n        # Mail Configuration\n        MAIL_MAILER: smtp\n        MAIL_HOST: your-smtp-host.com\n        MAIL_PORT: 587\n        MAIL_USERNAME: your-username\n        MAIL_PASSWORD: your-password\n        MAIL_ENCRYPTION: tls\n        MAIL_FROM_ADDRESS: noreply@yourdomain.com\n        MAIL_FROM_NAME: YourApp\n```\n\n----------------------------------------\n\nTITLE: Presenting Horizontal Scaling Configuration with HTML Table - HTML/JSX\nDESCRIPTION: Displays a basic HTML table for minimum and maximum containers within the horizontal auto-scaling documentation section. This snippet employs a styled table in JSX/Markdown, using className for styling, and lays out two configuration parameters. Expected to render as part of the documentation page, with no external dependencies.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/scaling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<table className=\"w-full my-1.5\">\n  <tbody>\n    <tr>\n      <td className=\"w-fit\">\n        <b>minimum containers</b>\n      </td>\n      <td className=\"w-fit\">1</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit\">\n        <b>maximum containers</b>\n      </td>\n      <td className=\"w-fit\">6</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Deleting Zerops Service\nDESCRIPTION: Command to delete a Zerops service. Includes flags for confirmation and project/service ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_15\n\nLANGUAGE: sh\nCODE:\n```\nzcli service delete [serviceIdOrName] [flags]\n```\n\n----------------------------------------\n\nTITLE: Deleting Service Using zCLI Command\nDESCRIPTION: Command-line syntax for deleting a Gleam service using zCLI. Includes usage pattern and available flags for customizing the deletion process. The command supports interactive mode and various options for specifying project and service identifiers.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Starting VPN Connection with Zerops CLI\nDESCRIPTION: This command initiates a VPN connection to a Zerops project. It prompts the user to select a project if not specified. The command supports flags for auto-disconnecting existing connections and specifying a project ID.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/vpn.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nzcli vpn up\n```\n\n----------------------------------------\n\nTITLE: Accessing Object Storage CDN Content\nDESCRIPTION: Example URL pattern for accessing content through Zerops Object Storage CDN\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/cdn.mdx#2025-04-23_snippet_0\n\nLANGUAGE: txt\nCODE:\n```\nhttps://storage.cdn.zerops.app/your-bucket/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Configuring Automatic Migrations in Zerops YAML\nDESCRIPTION: This YAML snippet demonstrates how to set up automatic migration execution in the Zerops deployment pipeline using the zerops.yaml file. It includes the command to run Laravel migrations with necessary flags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      initCommands:\n        - php artisan migrate --force --isolated\n```\n\n----------------------------------------\n\nTITLE: Customizing .NET Build Verbosity in YAML\nDESCRIPTION: This YAML snippet demonstrates how to increase the verbosity of the .NET build process for troubleshooting purposes. It uses the '--verbosity' flag with the 'detailed' level in the build command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - dotnet build --verbosity detailed\n```\n\n----------------------------------------\n\nTITLE: Adjusting PDO Settings for Database Lock Timeout in Laravel\nDESCRIPTION: This PHP snippet demonstrates how to adjust PDO settings in the Laravel config/database.php file to handle database lock timeout issues, specifically for PostgreSQL connections.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_11\n\nLANGUAGE: php\nCODE:\n```\n'pgsql' => [\n    // ...\n    'options' => [\n        PDO::ATTR_LOCK_TIMEOUT => 1000 // Milliseconds\n    ]\n],\n```\n\n----------------------------------------\n\nTITLE: Zerops CLI Push Command Usage\nDESCRIPTION: Command line interface options for pushing code to Zerops, including flags for archive creation, git folder deployment, project/service selection, and working directory configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Using Zerops CLI for Manual Push\nDESCRIPTION: The zcli push command uploads application code, builds, and deploys the application in Zerops. It uses the build pipeline defined in zerops.yaml and respects .gitignore if present.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Starting a Zerops Service using zCLI (Shell)\nDESCRIPTION: Provides the command-line usage for starting a stopped Zerops service (like MariaDB) using the `zcli service start` command. It includes flags like `-h` or `--help`, `--projectId` for project specification, and `--serviceId` for service specification. Similar to the stop command, it can be interactive if the service name or ID (`{serviceName | serviceId}`) is not provided.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/control.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Configuring Crontab in Zerops Service\nDESCRIPTION: Demonstrates how to define scheduled cron jobs in a Zerops service. The example shows setting up a command to append the current date to a log file every hour.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/specification.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  crontab:\n    - command: \"date >> /var/log/cron.log\"\n      timing: \"0 * * * *\"\n```\n\n----------------------------------------\n\nTITLE: ExecOnce Command Usage\nDESCRIPTION: Examples of using execOnce to run commands exactly once across all containers in a service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\n# Execute a command once for the entire service stack\nzsc execOnce someStaticKey -- /var/www/myBinary some initial command --flag=\"value\" --flag2=\"value2\"\n\n# Run migrations for each new app version deployed to Zerops\nzsc execOnce ${ZEROPS_appVersionId} -- php /var/bin/console migrations:continue\n```\n\n----------------------------------------\n\nTITLE: Multi-service Configuration in zerops.yaml\nDESCRIPTION: Example showing how to configure multiple services in a single zerops.yaml file for monorepo setups.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    run: ...\n\n  - setup: api\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Stop Service Command Usage with zCLI\nDESCRIPTION: Command syntax and flags for stopping a Rust service using Zerops CLI. Includes options for specifying project and service IDs when working with multiple instances.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Setting Secret Environment Variables for a Gleam Service (Env)\nDESCRIPTION: This snippet shows the format for defining secret environment variables (`S3_ACCESS_KEY_ID` and `S3_ACCESS_SECRET`) that will be configured for the 'app' Gleam service defined in the accompanying `description.yaml` or `import.yaml`. These variables are referenced within the `envSecrets` section of the YAML configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Image Component for Advanced CPU Settings UI in JSX/MDX\nDESCRIPTION: Displays the 'Advanced CPU Settings' UI screenshot using the custom `Image` component. It leverages light/dark mode sources (`scaling5.png`), includes 'Scaling' as alt text, and applies sizing styles (95% width, auto height). Assumes the `Image` component is imported and available.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/scaling.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling5.png\"\n  darkImage=\"/img/screenshots/scaling5.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Shared Storage Management\nDESCRIPTION: Commands for managing shared storage volumes including mounting, unmounting, and status checking.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# View shared-storage help\nzsc shared-storage --help\n\n# Mount a shared storage volume\nzsc shared-storage mount <storage-name>\n\n# Unmount a shared storage volume\nzsc shared-storage unmount <storage-name>\n\n# Wait for a storage mount to be ready\nzsc shared-storage wait <storage-name>\n```\n\n----------------------------------------\n\nTITLE: Configuring Exec Health Check in Zerops YAML\nDESCRIPTION: Example showing how to configure a health check using shell commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: ./app\n\n      healthCheck:\n        exec:\n          command: |\n            touch grass\n            rm -rf life\n            mv /outside/user /home/user\n```\n\n----------------------------------------\n\nTITLE: Initializing Git and Deploying to Zerops\nDESCRIPTION: These commands initialize a Git repository in the project directory and deploy the code to Zerops using the Zerops CLI tool.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit init\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Importing Zerops Services using zCLI and import.yaml (Shell)\nDESCRIPTION: Demonstrates the `zcli project service-import` command syntax for adding services defined in an `import.yaml` file to an existing Zerops project. It requires the path to the YAML file and offers the optional `--projectId` flag if access to multiple projects exists. The command prompts for project selection if the ID is not provided.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Disconnecting from Zerops VPN\nDESCRIPTION: Command to disconnect from the Zerops VPN.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nzcli vpn down\n```\n\n----------------------------------------\n\nTITLE: Unsupported Explicit Locks in MariaDB Cluster (SQL)\nDESCRIPTION: Explicit locking commands like `LOCK TABLES`, specific `FLUSH TABLES {explicit table list} WITH READ LOCK`, `GET_LOCK`, and `RELEASE_LOCK` are not supported in highly available MariaDB clusters. Transactions are recommended as an alternative approach for managing concurrency.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/tech-details/limitations.mdx#2025-04-23_snippet_1\n\nLANGUAGE: SQL\nCODE:\n```\nLOCK TABLES\n```\n\nLANGUAGE: SQL\nCODE:\n```\nFLUSH TABLES {explicit table list} WITH READ LOCK\n```\n\nLANGUAGE: SQL\nCODE:\n```\nGET_LOCK\n```\n\nLANGUAGE: SQL\nCODE:\n```\nRELEASE_LOCK\n```\n\n----------------------------------------\n\nTITLE: Sending Emails Example\nDESCRIPTION: Code examples for sending emails immediately or using queue in Laravel\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_5\n\nLANGUAGE: php\nCODE:\n```\nuse Illuminate\\Support\\Facades\\Mail;\nuse App\\Mail\\WelcomeEmail;\n\n// Send immediately\nMail::to($user->email)->send(new WelcomeEmail($user));\n\n// Send using queue\nMail::to($user->email)->queue(new WelcomeEmail($user));\n```\n\n----------------------------------------\n\nTITLE: Displaying Zerops Environment Variables\nDESCRIPTION: Command to display global environment variables and their paths in Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_18\n\nLANGUAGE: sh\nCODE:\n```\nzcli env\n```\n\n----------------------------------------\n\nTITLE: DeployIgnore Configuration for All Matching Paths\nDESCRIPTION: Example of a .deployignore file that ignores file.txt in ANY directory named src, at any level of nesting.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_18\n\nLANGUAGE: text\nCODE:\n```\nsrc/file.txt\n```\n\n----------------------------------------\n\nTITLE: Push Command Usage for Zerops CLI\nDESCRIPTION: CLI command parameters for pushing code to Zerops. Includes flags for archive creation, git folder deployment, project/service selection, version naming, and working directory configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Stopping Gleam Service Using zCLI\nDESCRIPTION: This command is used to stop a Gleam service via the Zerops CLI. It allows specifying the service by ID or name and includes options for project and service selection.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Connecting to PostgreSQL from Command Line with psql\nDESCRIPTION: Command for connecting to a PostgreSQL database in Zerops using the standard PostgreSQL command-line client (psql). Requires hostname, username, and database name parameters obtained from the Zerops connection details.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/manage.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\npsql -h [hostname] -U [user] -d [database_name]\n```\n\n----------------------------------------\n\nTITLE: Deploy Command Usage for Zerops CLI\nDESCRIPTION: Command line parameters and flags for the zcli service deploy command, used for manual deployments without build process. Includes options for archive creation, working directory configuration, and version naming.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Using Document Root Variable in Apache Configuration - Apache\nDESCRIPTION: This directive assigns the document root for an Apache virtual host, with {{.DocumentRoot}} dynamically set by Zerops. Place it either at the <VirtualHost> or <Directory> level as needed. It expects the variable to be provided via zerops.yaml run.documentRoot or defaults to /var/www if not set.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-web-server.mdx#2025-04-23_snippet_5\n\nLANGUAGE: apache\nCODE:\n```\nDocumentRoot {{.DocumentRoot}};\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Secret environment variables configuration for the Python service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Files in YAML\nDESCRIPTION: Example of using the ~ wildcard to deploy all file.txt files in paths that start with /path/ and end with /to/.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\n----------------------------------------\n\nTITLE: Starting Elixir Service Using zCLI\nDESCRIPTION: Command syntax for starting an Elixir service using Zerops CLI tool. Includes usage pattern and available flags for project and service specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: React Image Component Style Properties\nDESCRIPTION: JSX styling properties for image component with specific width, height, and margin settings\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/infrastructure.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nstyle={{\n  width: '44%',\n  height: 'auto',\n  display: 'block',\n  margin: '0 auto 0 0' /* top right bottom left */\n}}\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Deployment Configuration\nDESCRIPTION: Uses wildcard paths to deploy files matching specific patterns.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\n----------------------------------------\n\nTITLE: Starting Laravel Development Server\nDESCRIPTION: Command to start the local Laravel development server with alternative options noted in comments.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/twill-local.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan serve # or use your preferred setup (Valet, Herd, Sail)\n```\n\n----------------------------------------\n\nTITLE: Importing Zerops Project using zCLI and description.yaml (Shell)\nDESCRIPTION: Demonstrates the `zcli project project-import` command syntax for creating a new Zerops project based on a `description.yaml` file. It requires the path to the YAML file and offers optional flags like `--orgId` for specifying the organization and `--workingDie` for setting the working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Internal Service Access URL Example\nDESCRIPTION: Example of how to access a Rust service internally using hostname and port within the same project network.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://app:8080\n```\n\n----------------------------------------\n\nTITLE: Stopping a Zerops Service using zCLI (Shell)\nDESCRIPTION: Displays the command-line usage for stopping a Zerops service (like MariaDB) using the `zcli service stop` command. It shows optional flags such as `-h` or `--help` for assistance, `--projectId` to specify the target project, and `--serviceId` to target a specific service if multiple exist. The command is interactive if `serviceIdOrName` is omitted, prompting the user to select the project and service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/control.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Unsupported DELETE on Tables Without Primary Keys in MariaDB Cluster (SQL)\nDESCRIPTION: In highly available MariaDB clusters, executing `DELETE` commands on tables that lack a primary key is unsupported. Ensure all tables have a primary key (single or multi-column) for `DELETE` functionality and predictable row ordering across nodes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/tech-details/limitations.mdx#2025-04-23_snippet_0\n\nLANGUAGE: SQL\nCODE:\n```\nDELETE\n```\n\n----------------------------------------\n\nTITLE: Deploying Adminer via YAML Service Definition - Zerops - YAML\nDESCRIPTION: Defines a PHP-Apache based Adminer service for Zerops using YAML syntax for single-click installation. The code specifies hostname, service type and version, container count, public web root, and links to a Git repository that provides build instructions. Dependencies include a Zerops project with import services capability, and the service becomes available via VPN at the 'adminer' hostname.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/manage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - # Service will be accessible through zCLI VPN under: http://adminer\n    hostname: adminer\n    # Type and version of service used.\n    type: php-apache@8.0+2.4\n    # Whether the service will be run on one or multiple containers.\n    # Since this is a utility service, using a single container is fine.\n    minContainers: 1\n    maxContainers: 1\n    # Folder name used as the root of the publicly accessible web server content.\n    documentRoot: public\n    # Link to Zerops repository that contains Adminer code with Zerops build and deploy instructions.\n    buildFromGit: https://github.com/zeropsio/recipe-adminer@main\n```\n\n----------------------------------------\n\nTITLE: Example SSH Connection to Specific Container\nDESCRIPTION: An example of connecting to a specific container named 'node-id-1' within the 'app' service via SSH. This illustrates the practical use of the container-specific SSH connection command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/ssh.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nssh node-id-1.runtime.app.zerops\n```\n\n----------------------------------------\n\nTITLE: Setting Up Laravel Environment for Local Development\nDESCRIPTION: Commands to set up the Laravel environment locally, including copying the environment file, installing dependencies, and generating an application key.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/minimal-local.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create and configure environment file\ncp .env.example .env\n\ncomposer install\nphp artisan key:generate\n```\n\n----------------------------------------\n\nTITLE: Starting Deno Service via zCLI\nDESCRIPTION: Command syntax for starting a Deno service using Zerops CLI tool. Includes usage pattern and available flags for project and service specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Starting a Zerops Service using zCLI (Shell)\nDESCRIPTION: Displays the usage instructions for the `zcli service start` command. This command starts a stopped Zerops service using the zCLI. It accepts an optional service name or ID. Flags like `--projectId` and `--serviceId` allow specifying the target service if multiple are available. The command supports interactive selection if arguments are omitted.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/control.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: CDN Cache Purging via API\nDESCRIPTION: Curl examples for purging CDN cache programmatically using REST API endpoints\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/cdn.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Static mode: Purge all content for a domain\ncurl --location --request PUT \"https://api.app-prg1.zerops.io/api/rest/public/project/$PROJECT_ID/purge-cdn/static/$DOMAIN/*\" \\\n--header \"Authorization: Bearer $USER_OR_ACCESS_TOKEN\"\n```\n\nLANGUAGE: sh\nCODE:\n```\n# Storage mode: Purge all content for object storage\ncurl --location --request PUT \"https://api.app-prg1.zerops.io/api/rest/public/service-stack/$OBJECT_STORAGE_SERVICE_ID/purge-cdn/*\" \\\n--header \"Authorization: Bearer $USER_OR_ACCESS_TOKEN\"\n```\n\n----------------------------------------\n\nTITLE: Specifying the Application Start Command in Zerops YAML\nDESCRIPTION: This required YAML configuration defines the command used to launch the Go application within the runtime container. The `start` attribute under the `run` section specifies the executable path, commonly `./app`, which Zerops will invoke.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Go application start command\n      start: ./app\n```\n\n----------------------------------------\n\nTITLE: Defining Default Apache Configuration for PHP Services - Apache\nDESCRIPTION: This snippet presents the default Apache vhost configuration used for PHP services in Zerops, utilizing {{.DocumentRoot}} and {{.PhpSocket}} placeholders. The template controls document root, index files, directory options, and PHP processing over fastcgi. It should not contain direct static IPs in <VirtualHost> and should not serve on port 443. All dynamic tokens are resolved during deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-web-server.mdx#2025-04-23_snippet_4\n\nLANGUAGE: apache\nCODE:\n```\n<VirtualHost *:80>\n    ServerName localhost\n    DocumentRoot {{.DocumentRoot}}\n    DirectoryIndex index.htm index.html index.shtml index.php index.phtml\n\n    <Directory {{.DocumentRoot}}>\n        Options -Indexes\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n\n    <FilesMatch \".php$\">\n        <If \"-f %{REQUEST_FILENAME}\">\n            SetHandler \"proxy:unix:{{.PhpSocket}}|fcgi://localhost/\"\n        </If>\n    </FilesMatch>\n\n    ErrorLog  \"| /usr/bin/logger -tapache -plocal1.err\"\n    CustomLog \"| /usr/bin/logger -tapache -plocal1.notice\" combined\n</VirtualHost>\n```\n\n----------------------------------------\n\nTITLE: Example Secret Environment Variables for a Zerops Service\nDESCRIPTION: This snippet illustrates the format of secret environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`) as they would be made available within the 'app' service defined in the preceding YAML example. These variables are configured using the `envSecrets` map within the service definition in the YAML file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Basic Zerops Deployment Configuration\nDESCRIPTION: Simple zerops.yaml configuration showing basic app setup with deploy files path specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      deployFiles: ./\n```\n\n----------------------------------------\n\nTITLE: Deleting Elixir Service using zCLI in Shell\nDESCRIPTION: This code snippet shows the usage of the 'zcli service delete' command for deleting an Elixir service via the command-line. It includes the command syntax and available flags for customizing the deletion process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Using Zerops CLI to Import a MariaDB Service - Shell\nDESCRIPTION: Documents the zcli command invocation required to import additional services (like MariaDB) into an existing Zerops project using an import.yaml file. The snippet outlines available command-line flags, such as specifying the project ID, and interactive selection if the flag is omitted. The importYamlPath argument is used to point to the YAML file containing service definitions, enforcing a maximum file size; the service hostname and parameters must comply with restrictions described elsewhere in the documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: shell\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: CDN Management Commands\nDESCRIPTION: Examples of managing CDN operations including cache purging for different scenarios.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\n# Purge all CDN cache for a specific domain\nzsc cdn purge example.com\n# Purge all content using wildcard pattern\nzsc cdn purge example.com \"/*\"\n# Purge CDN cache for a specific file (note the $ suffix)\nzsc cdn purge example.com \"/path/to/my-file$\"\n# Purge CDN cache for a specific directory\nzsc cdn purge example.com \"/images/\"\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands in Separate Shell Instances\nDESCRIPTION: This snippet demonstrates how to run each build command in a separate environment context, where each command starts in the home directory and environment variables are not shared between commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - bun i\n  - bun run build\n```\n\n----------------------------------------\n\nTITLE: Ignoring Specific File Path in .deployignore (Text)\nDESCRIPTION: Example `.deployignore` entry that prevents the specific file '/src/file.txt' (relative to the project root) from being deployed. The leading '/' ensures it only matches at the root of the 'src' directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_13\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Build Environment Variables in YAML\nDESCRIPTION: Example of setting basic environment variables for the build environment in zerops.yaml configuration file. Shows how to define database connection parameters and reference other variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      envVariables:\n        DB_NAME: db\n        DB_HOST: db\n        DB_USER: db\n        DB_PASS: ${db_password}\n```\n\n----------------------------------------\n\nTITLE: Deleting a Zerops Service using zCLI (Shell)\nDESCRIPTION: Shows the usage syntax and available flags for the `zcli service delete` command. This command is used to remove a service (like KeyDB) from a Zerops project. Requires prior installation and setup of zCLI. Flags allow specifying the target service/project ID if multiple exist and bypassing confirmation prompts for destructive operations.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Example API Response from Bun Application\nDESCRIPTION: JSON response example showing the output from a deployed Bun application endpoint, demonstrating database interaction and request counting functionality.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"This is a simple, basic Bun application running on Zerops.io,\\n          each request adds an entry to the PostgreSQL database and returns a count.\\n          See the source repository (https://github.com/zeropsio/recipe-bun) for more information.\",\"newEntry\":\"dfd1e873-bfc8-4f36-af07-e32561820b93\",\"count\":\"1\"}\n```\n\n----------------------------------------\n\nTITLE: Specifying Zerops Project Infrastructure with Object Storage Service (YAML)\nDESCRIPTION: This YAML example defines the structure and metadata for a Zerops project that includes an Object Storage service. It covers project-level attributes (name, description, tags) and fully specifies a single service with its hostname, type (objectstorage), quota size in GB, and a selected or custom policy. Requires Zerops platform and zCLI tools to apply. Inputs include project and service details; outputs are the creation of a new Zerops project and a configured Object Storage bucket based on the provided specifications.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with an Object storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: upload\n\n    # service type\n    type: objectstorage\n\n    # Object storage size in GB\n    objectStorageSize: 73\n\n    # Choose object storage policy from a predefined list\n    objectStoragePolicy: public-write\n\n    # Or define a custom policy\n    objectStorageRawPolicy:\n```\n\n----------------------------------------\n\nTITLE: Listing Zerops Services\nDESCRIPTION: Command to list all services in a Zerops project. Includes a flag for project ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_11\n\nLANGUAGE: sh\nCODE:\n```\nzcli service list [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring VPN Access with Zerops CLI\nDESCRIPTION: Commands for initializing VPN connection to Zerops project using CLI tool. Provides options for both direct project ID specification and interactive mode.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/twill-local.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize VPN connection using project ID\nzcli vpn up <project-id>\n\n# Or use interactive mode to select your project\nzcli vpn up\n```\n\n----------------------------------------\n\nTITLE: Starting Go Service with zCLI\nDESCRIPTION: This command starts a Go service using the Zerops CLI. It allows specifying the service by ID or name, with options for project and service identification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Connecting to Zerops VPN\nDESCRIPTION: Command to connect to the Zerops VPN. Includes optional flags for auto-disconnect, custom MTU, and project ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nzcli vpn up [projectId] [flags]\n```\n\n----------------------------------------\n\nTITLE: Configuring Dedicated IPv4 DNS Records with Proxy\nDESCRIPTION: DNS configuration for dedicated IPv4 setup with optional IPv6 record. Beneficial for visitors with IPv6 support to connect directly.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/dns.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nType    Name              Content                Proxy status   TTL\nA       <your-domain>     <your-dedicated-ipv4>  Proxied        Auto\n# Optional\nAAAA    <your-domain>     <your-project-ipv6>    Proxied        Auto\n```\n\n----------------------------------------\n\nTITLE: Configuring .NET Service with Shared Storage using YAML\nDESCRIPTION: Example YAML configuration for creating a project with a .NET service and shared storage. Defines project metadata, storage settings, and service configuration including container scaling and storage mounting.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/shared-storage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# basic project data\nproject:\n  # project name\n  name: my-project\n\n  # optional: project description\n  description: A project with a .NET and a shared storage\n\n  # optional: project tags\n  tags:\n    - DEMO\n    - ZEROPS\n\n# array of project services\nservices:\n  - # service name\n    hostname: teststorage\n\n    # shared storage service has no version\n    type: shared-storage\n\n    # mode: HA / NON_HA\n    mode: NON_HA\n\n  - # service name\n    hostname: app\n\n    # service type and version number in dotnet@6 format\n    type: dotnet@6\n\n    # defines the minimum number of containers for horizontal autoscaling. Max value = 6.\n    minContainers: 2\n\n    # defines the maximum number of containers for horizontal autoscaling. Max value = 6.\n    maxContainers: 4\n\n    # Mount the shared storage to the .NET service\n    mount:\n      - teststorage\n```\n\n----------------------------------------\n\nTITLE: Using PHP Socket Variable in Nginx Configuration - Nginx\nDESCRIPTION: This config line demonstrates integrating the PHP socket path dynamically in Nginx configs using Zerops' {{.PhpSocket}} variable. It should be used within fastcgi_pass directives to connect Nginx to the correct PHP runtime. The value is automatically set by Zerops based on the deployed PHP version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-web-server.mdx#2025-04-23_snippet_2\n\nLANGUAGE: nginx\nCODE:\n```\nfastcgi_pass unix:{{.PhpSocket}};\n```\n\n----------------------------------------\n\nTITLE: Adjusting JVM Heap Allocation for Elasticsearch in Zerops\nDESCRIPTION: Controls the JVM heap size as a percentage of the container's memory allocation. This configuration allows fine-tuning of memory resources allocated to the Elasticsearch JVM.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elasticsearch/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nenvSecrets:\n  HEAP_PERCENT: \"75\"\n```\n\n----------------------------------------\n\nTITLE: Technology Installation in Zerops YAML\nDESCRIPTION: Example of using the install command within a Zerops YAML configuration file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: nodejsapp\n    build:\n      os: ubuntu\n      base:\n        - nodejs@22\n        - python@3.11\n    run:\n      os: ubuntu\n      base: nodejs@22\n      prepareCommands:\n        - zsc install python@3.11\n```\n\n----------------------------------------\n\nTITLE: Multi-Service Monorepo Configuration\nDESCRIPTION: Example showing how to configure multiple services in a single zerops.yaml file for monorepo setups.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    run: ...\n\n  - setup: api\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Quick Start Guide Links using DocCardList in MDX\nDESCRIPTION: This MDX snippet utilizes the Docusaurus `DocCardList` component to render a two-column grid (`colSize={6}`) of links to introductory Node.js guides on Zerops. It depends on the `@theme/DocCardList` and `@theme/Icon` components. Each card displays a label, description, icon, and links to either a 'one-click' quickstart or a step-by-step tutorial.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics with one-service app.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Enabling Subdomain for Zerops Service\nDESCRIPTION: Command to enable access to your service through a Zerops subdomain. Includes flags for project and service ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_16\n\nLANGUAGE: sh\nCODE:\n```\nzcli service enable-subdomain [serviceIdOrName] [flags]\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard for Directory Paths (Middle) in zerops.yaml (YAML)\nDESCRIPTION: Employs the '~' wildcard to deploy all folders located within any path starting with './path/' and ending with '/to/'. The wildcard matches one or more intermediate directories.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/\n```\n\n----------------------------------------\n\nTITLE: Configuring Shared IPv4 DNS Records without Proxy\nDESCRIPTION: Direct DNS configuration for shared IPv4 setup. Both A and AAAA records are required for security measures.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/dns.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nType    Name              Content                Proxy status   TTL\nAAAA    <your-domain>     <your-project-ipv6>    DNS only       Auto\nA       <your-domain>     <zerops-shared-ipv4>   DNS only       Auto\n```\n\n----------------------------------------\n\nTITLE: Establishing SSH Connection to Zerops Service\nDESCRIPTION: This snippet demonstrates how to connect to a Zerops service using SSH. It requires an active VPN connection and uses the service's hostname.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/ssh.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nssh <service hostname>\n```\n\n----------------------------------------\n\nTITLE: Displaying Application Output Example - Markdown\nDESCRIPTION: This snippet presents a sample application output message to verify successful deployment on Zerops. There are no dependencies, as the snippet is a static message used to compare what appears in the browser after importing and running a project. The input is the application’s subdomain page, and the expected output is a confirmation message showing a UUID and entry count. It acts as a quick check for new users to validate their deployment, with no parameters or runtime inputs needed.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/tutorial/quickstart.mdx#2025-04-23_snippet_0\n\nLANGUAGE: Markdown\nCODE:\n```\nEntry added successfully with random data: f47ac10b-58cc-0372-8567-0e02b2c3d479. Total count: 1\n```\n\n----------------------------------------\n\nTITLE: Importing Zerops Project with zcli (Shell)\nDESCRIPTION: Explains how to use the `zcli project project-import` command to create a new Zerops project and its associated services from a `description.yaml` file (specified by `importYamlPath`). Requires `zcli` and the path to the YAML file. An organization ID (`--orgId`) might be needed if the user belongs to multiple organizations. The working directory can be set using `--workingDie`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to Import Zerops Project\nDESCRIPTION: This shell command demonstrates how to use the Zerops CLI (zCLI) to import a project based on a description.yaml file. It includes usage instructions and available flags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Skipping CI/CD Build - Git Commit Message Convention - text\nDESCRIPTION: Allows developers to prevent a CI/CD build from being triggered for a specific commit in their GitLab repository integrated with Zerops. To use, include either 'ci skip' or 'skip ci' (case insensitive) in the commit message. No build action is taken for such commits, though the webhook is still sent to GitLab. There are no dependencies, but proper message formatting is required.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/gitlab-integration.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nci skip\n```\n\nLANGUAGE: text\nCODE:\n```\nskip ci\n```\n\n----------------------------------------\n\nTITLE: Configuring Multiple Services in zerops.yaml\nDESCRIPTION: This snippet demonstrates how to define multiple runtime services in a single zerops.yaml file, useful for monorepo setups.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/build-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n    run: ...\n\n  - setup: api\n    build: ...\n    run: ...\n```\n\n----------------------------------------\n\nTITLE: Using zcli for Project Import\nDESCRIPTION: Command syntax for creating a new project using the zcli project-import command. This imports a project definition from a description.yaml file with options for organizational ID and working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Defining Zerops Platform Description in Markdown\nDESCRIPTION: A markdown snippet that provides a concise description of Zerops, emphasizing its key features and benefits as a Platform-as-a-Service solution.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/static/llms.txt#2025-04-23_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n> Zerops is a developer-first Platform-as-a-Service, running on bare metal, with every part built from scratch. Zerops aims to be the perfect mix of developer experience, flexibility, scalability and affordability, making it a great fit for applications of any size, complexity and traffic.\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard in deployFiles for File Paths\nDESCRIPTION: Illustrates the use of the `~` wildcard within the `deployFiles` configuration in `zerops.yaml`. This example (`./path/~/to/file.txt`) targets any `file.txt` located within a directory structure that starts with `/path/` and ends with `/to/`, regardless of the intermediate directories.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_11\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndeployFiles: ./path/~/to/file.txt\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Zerops Service Deployment and Nginx Customization (YAML)\nDESCRIPTION: Presents an example zerops.yaml file for defining a service with application build and custom Nginx configuration. The 'siteConfigPath' key points to the custom .tmpl file, and 'deployFiles' specifies which files/folders should be included in the runtime container. This YAML snippet enables deployment of both the application and its Nginx configuration, ensuring Zerops can render the template variables at runtime. Required for full integration of Nginx customization on Zerops static services.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/customize-web-server.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # define hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      # REQUIRED. Set the base technology for the build environment:\n      base: nodejs@latest\n\n      # REQUIRED. Select which files / folders to deploy after\n      # the build has successfully finished\n      deployFiles:\n        - vendor\n        - public\n\n    # ==== how to run your application ====\n    run:\n      documentRoot: public\n\n      # OPTIONAL. Sets the custom Nginx or Apache configuration. The file must be deployed in the runtime container. Enter the path to the file relative to the /var/www folder\n      siteConfigPath: site_config.tmpl\n```\n\n----------------------------------------\n\nTITLE: gRPC API Connection Configuration\nDESCRIPTION: gRPC API connection string configuration for Qdrant vector database\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/qdrant/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\ntcp://${hostname}:${grpcPort}\n```\n\n----------------------------------------\n\nTITLE: Configuring Valkey Service\nDESCRIPTION: YAML configuration for adding Valkey (Redis-compatible) service to Zerops project\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: redis\n    type: valkey@7.2\n    mode: NON_HA  # use HA for high availability in production\n```\n\n----------------------------------------\n\nTITLE: Wildcard Path Configuration\nDESCRIPTION: Example of using wildcards in deployment paths\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/~/to/file.txt\n```\n\n----------------------------------------\n\nTITLE: Displaying Popular Guide Links using DocCardList (JSX)\nDESCRIPTION: This JSX snippet uses the `DocCardList` component to direct users to popular related guides within the Zerops documentation. It displays two cards linking to documentation for the zCLI command-line tool and the Zerops VPN service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/overview.mdx#2025-04-23_snippet_6\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: '/references/cli',\n      label: 'zCLI',\n      customProps: {\n        icon: Icons['command-line'],\n        description:\n          'Get even more out of Zerops with the zCLI command line tool.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/references/vpn',\n      label: 'Zerops VPN',\n      customProps: {\n        icon: Icons['globe-europe'],\n        description: 'Connect to your services easily with Zerops VPN.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Listing Available PostgreSQL Plugins in Zerops\nDESCRIPTION: SQL query to list all available PostgreSQL extensions/plugins that can be installed. This query returns all entries from pg_available_extensions sorted by name and doesn't require superuser privileges.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/manage.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sql\nCODE:\n```\nSELECT * FROM pg_available_extensions ORDER BY name;\n```\n\n----------------------------------------\n\nTITLE: Basic ZSC Usage Command Structure\nDESCRIPTION: Shows the basic command structure for using the Zerops Setup Control CLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzsc <command> [flags]\n```\n\n----------------------------------------\n\nTITLE: CLI Deployment Command\nDESCRIPTION: Command for deploying applications using Zerops CLI\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel.mdx#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nzcli push\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration Example\nDESCRIPTION: Example of environment variables configuration for S3 access credentials in a .NET service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Configuring Global Settings in YAML for Zerops CLI\nDESCRIPTION: This YAML snippet demonstrates how to set organization-wide defaults in the global configuration file for Zerops CLI. It sets the workspace state to 'all'.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/configuration.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Set organization-wide defaults\nworkspaceState: \"all\"\n```\n\n----------------------------------------\n\nTITLE: Importing Service to Existing Project with zcli\nDESCRIPTION: Command-line usage for importing a service configuration to an existing project using the Zerops CLI tool. This command adds new services based on the import.yaml file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Importing Zerops Project using zcli and description.yaml\nDESCRIPTION: Shows the command-line usage for the `zcli project project-import` command. This command creates a new Zerops project based on the structure defined in a specified YAML file (`importYamlPath`). It requires the path to the YAML configuration file and optionally accepts flags for specifying the organization ID (`--orgId`) if needed, and setting a custom working directory (`--workingDie`).\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n```\n\n----------------------------------------\n\nTITLE: Stopping a Java Service Using Zerops zCLI - Shell\nDESCRIPTION: This snippet documents the usage instructions for the command 'zcli service stop' in the Zerops command-line interface (zCLI). The command requires either the service ID or service name to properly target a service, and includes flags for specifying project and service context. Intended for users who have already installed and set up zCLI, it enables interactive selection or direct identification for stopping a Java service. Outputs are displayed interactively and are meant to change the service's operational state to 'stopped', with the service consuming only disk space.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\\n  zcli service stop [serviceIdOrName] [flags]\\n\\nFlags:\\n  -h, --help               the enable Zerops subdomain command.\\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\\n                           command is to be executed.\\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\\n                           command is to be executed.\\n\n```\n\n----------------------------------------\n\nTITLE: Viewing Zerops CLI Log Files\nDESCRIPTION: These shell commands show how to view the contents of Zerops CLI log files using the cat command to display the entire file or the tail command to stream new log entries.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/configuration.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n# View the entire log file\ncat ~/.config/zerops/zerops.log\n\n# Stream new log entries\ntail -f ~/.config/zerops/zerops.log\n```\n\n----------------------------------------\n\nTITLE: Cache Configuration\nDESCRIPTION: Example of cache configuration for build optimization\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_15\n\nLANGUAGE: yaml\nCODE:\n```\ncache: file.txt\n```\n\n----------------------------------------\n\nTITLE: Accessing Zerops Support Information\nDESCRIPTION: Command to display information about how to contact Zerops support.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_21\n\nLANGUAGE: sh\nCODE:\n```\nzcli support\n```\n\n----------------------------------------\n\nTITLE: Displaying Scaling Configuration Screenshot using React Image Component\nDESCRIPTION: This JSX snippet utilizes a custom `Image` React component to display a screenshot illustrating the Zerops PostgreSQL automatic scaling configuration interface. It specifies different images for light and dark themes (though identical in this case), provides alternative text for accessibility, and applies inline styles to control the image size.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/scale.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n    lightImage=\"/img/screenshots/scaling7.png\"\n    darkImage=\"/img/screenshots/scaling7.png\"\n    alt=\"Scaling\"\n    style={{ width: '95%', height: 'auto' }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Displaying Zerops Debug Logs\nDESCRIPTION: Command to display debug logs for troubleshooting Zerops CLI issues.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_20\n\nLANGUAGE: sh\nCODE:\n```\nzcli show-debug-logs\n```\n\n----------------------------------------\n\nTITLE: Configuring KeyDB Client Connection - Generic Configuration File Example\nDESCRIPTION: This snippet demonstrates setting the KeyDB host parameter in a configuration file for connecting to a KeyDB instance named 'database1' running in the same Zerops project. It assumes the application or library will read the host and other parameters from the configuration. The 'host' parameter must be set to the internal service hostname, and credentials like password should be retrieved as described elsewhere in the guide. No dependencies are required for this snippet, and it is language-agnostic.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/connect.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhost = database1\n\n```\n\n----------------------------------------\n\nTITLE: Connecting Internally to a Gleam Service via HTTP URL\nDESCRIPTION: Demonstrates the format for connecting to a Gleam service (hostname `app`, internal port `3000`) from another service within the same Zerops project over the dedicated private network. Note that `http` should be used for internal communication as it's isolated.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://app:3000\n```\n\n----------------------------------------\n\nTITLE: Analog App Deployment Configuration in YAML\nDESCRIPTION: Complete configuration for deploying an Analog application including build and deployment settings.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/static/overview.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: nodejs@20\n      buildCommands:\n        - pnpm i\n        - pnpm build\n      deployFiles:\n        - dist/analog/public/~\n    run:\n      base: static\n```\n\n----------------------------------------\n\nTITLE: Embedding UI Components for Resource Table in Documentation (MDX/JavaScript)\nDESCRIPTION: The <ResourceTable /> component is used to display a preset or dynamically filled table containing the default configuration for vertical auto scaling. This approach ensures up-to-date, consistently styled resource configuration information in documentation. The snippet assumes that ResourceTable is a valid exported React component and that MDX parsing/runtime is present to handle JSX. No external parameters are passed in this usage.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/scale.mdx#2025-04-23_snippet_1\n\nLANGUAGE: MDX\nCODE:\n```\n<ResourceTable />\n```\n\n----------------------------------------\n\nTITLE: Rendering Images and Tables in JSX - JavaScript\nDESCRIPTION: These code snippets utilize JSX syntactic sugar within markdown to embed UI elements such as '<Image />' and standard '<img />' tags in a React environment. The components, e.g., 'Image', accept props for alternate images, alt text, and inline styles, primarily to present resource and scaling UI screenshots and illustrations. '<ResourceTable />' is utilized to showcase default resource configurations. These snippets depend on React and the respective components. Inputs include image paths, alt text, and style props. Outputs are rendered UI components in a web documentation page. Constraints include context compatibility with MDX or React-based static site generators.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/scaling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/gui/resources.webp\"\n  darkImage=\"/img/gui/resources.webp\"\n  alt=\"Resources of a Zerops service\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  src=\"/img/screenshots/scaling2.png\"\n  alt=\"image\"\n  width=\"100%\"\n  height=\"auto\"\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/gui/automatic-scaling.webp\"\n  darkImage=\"/img/gui/automatic-scaling.webp\"\n  alt=\"Automatic Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ResourceTable />\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling5.png\"\n  darkImage=\"/img/screenshots/scaling5.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling6.png\"\n  darkImage=\"/img/screenshots/scaling6.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Stopping VPN Connection with Zerops CLI\nDESCRIPTION: This command terminates the active VPN connection to a Zerops project. It doesn't require any additional parameters and provides a simple way to disconnect from the project's private network.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/vpn.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzcli vpn down\n```\n\n----------------------------------------\n\nTITLE: VPN Connection Command\nDESCRIPTION: CLI command to establish VPN connection to Zerops infrastructure\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel.mdx#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\nzcli vpn up\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Deno\nDESCRIPTION: Example showing how to read environment variables from within a Deno application using process.env.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nprocess.env.YOUR_VARIABLE_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Service Import Command Usage\nDESCRIPTION: Command syntax for importing services into an existing project, including project ID specification flag.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Starting a Zerops Service using zCLI (Shell)\nDESCRIPTION: Shows the usage instructions and flags for the `zcli service start` command. This command initiates a stopped Zerops service. The service can be specified by its name or ID as an argument, or chosen interactively if omitted. Flags `--projectId` and `--serviceId` can be used for non-interactive execution.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access Example\nDESCRIPTION: Example showing how to reference an environment variable from another service using service hostname prefix.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napp_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Configuring Wildcard Domain with CNAME\nDESCRIPTION: Alternative DNS configuration for wildcard domains using CNAME record. Requires main domain A and AAAA records to be configured first.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/dns.mdx#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nType    Name              Content         Proxy status       TTL\nCNAME   *.<your-domain>   <your-domain>   DNS only/Proxied   Auto\n```\n\n----------------------------------------\n\nTITLE: Creating Basic PostgreSQL Service with zCLI\nDESCRIPTION: A basic YAML configuration example for creating a project with a single PostgreSQL service in non-highly available mode. This defines the minimum required configuration including project name, service hostname, PostgreSQL version, and operation mode.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/create.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n# Basic project data\nproject:\n  # project name\n  name: my-project\n# array of project services\nservices:\n  - # service name\n    hostname: postgresql1\n    # service type and version number in postgresql@{version} format\n    type: postgresql@12\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: NON_HA\n```\n\n----------------------------------------\n\nTITLE: zCLI Project Import Command Usage\nDESCRIPTION: Command line interface usage for importing project configuration with available flags and options.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Hello World Output Example\nDESCRIPTION: Example output from the deployed Rust application showing a simple Hello World message.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Rendering Guide Cards using DocCardList Component in JSX\nDESCRIPTION: JSX code for rendering a list of guide cards using the DocCardList component. Each card has a link, label, icon, and description for different quickstart options.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics with one-service app.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Discouraged Local File Exports in MariaDB Cluster (SQL)\nDESCRIPTION: Using `SELECT INTO OUTFILE` or `SELECT INTO DUMPFILE` is discouraged in highly available MariaDB clusters on Zerops. These commands create files within the database container filesystem, which is inaccessible to users. Utilize the recommended Zerops methods for data export and import procedures.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/tech-details/limitations.mdx#2025-04-23_snippet_3\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT INTO OUTFILE\n```\n\nLANGUAGE: SQL\nCODE:\n```\nSELECT INTO DUMPFILE\n```\n\n----------------------------------------\n\nTITLE: Rust Logging with Severity Levels\nDESCRIPTION: Example of logging messages with different severity levels in Rust using console.log\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/logs.mdx#2025-04-23_snippet_3\n\nLANGUAGE: rust\nCODE:\n```\nconsole.log(\"A message with the informational severity ...\");\nconsole.log('<0>Emergency (0) severity > system is unusable.');\nconsole.log('<1>Alert (1) severity > action must be taken immediately.');\nconsole.log('<2>Critical (2) severity > critical conditions.');\nconsole.log('<3>Error (3) severity > error conditions.');\nconsole.log('<4>Warning (4) severity > warning conditions.');\nconsole.log('<5>Notice (5) severity > normal, but significant, condition.');\nconsole.log('<6>Informational (6) severity > informational message.');\nconsole.log('<7>Debug (7) severity > debug-level message.');\n```\n\n----------------------------------------\n\nTITLE: Forcing Failure with Debug Command in Zerops\nDESCRIPTION: Command used to terminate the deployment with a failure status. This will mark the current phase as failed and end the deployment process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/debug-mode.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzsc debug fail\n```\n\n----------------------------------------\n\nTITLE: Resource Table HTML Structure\nDESCRIPTION: HTML table structure showing minimum and maximum container configuration for horizontal scaling in Zerops\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/scaling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table className=\"w-full my-1.5\">\n  <tbody>\n    <tr>\n      <td className=\"w-fit\">\n        <b>minimum containers</b>\n      </td>\n      <td className=\"w-fit\">1</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit\">\n        <b>maximum containers</b>\n      </td>\n      <td className=\"w-fit\">6</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Zerops CLI Push Command Usage\nDESCRIPTION: Detailed usage instructions for the zcli push command, including available flags for customizing the push process such as specifying project ID, service ID, and working directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/trigger-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli push [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          If set, zCLI the .git folder is also uploaded. By default, the .git folder is ignored.\n  -h, --help                     the service push command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Using generateRandomInt in YAML Configuration\nDESCRIPTION: Example showing how to generate a random integer between 200 and 1000 in a service configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    RANDOM_INT: <@generateRandomInt(<200>, <1000>)>\n```\n\n----------------------------------------\n\nTITLE: Service Import YAML Configuration\nDESCRIPTION: Example YAML configuration for adding a Python service to an existing project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-project\nservices:\n  - hostname: app\n    type: python@latest\n    minContainers: 1\n    maxContainers: 6\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Configuring Verbose NPM Install in Zerops Build Pipeline\nDESCRIPTION: Example configuration showing how to enable verbose logging for npm install command during the build process to help with troubleshooting build failures.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/build-process.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - npm i --verbose\n  - npm run build\n```\n\n----------------------------------------\n\nTITLE: Local Database Configuration\nDESCRIPTION: Example PostgreSQL database configuration for local development using Zerops VPN\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nDB_CONNECTION=pgsql\nDB_HOST=db.zerops  # References the service's hostname\nDB_PORT=5432\nDB_DATABASE=db\nDB_USERNAME=db\nDB_PASSWORD=[password from Access details]\n```\n\n----------------------------------------\n\nTITLE: Cloning the Repository using Git\nDESCRIPTION: Command to clone the forked repository to your local machine. This is the first step after forking the repository to start contributing to the project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ngit clone https://github.com/your-username/repo-name.git\n```\n\n----------------------------------------\n\nTITLE: zCLI Service Import Command Usage\nDESCRIPTION: Command line interface usage for importing services to an existing project with available flags.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Connecting to Specific Container via SSH\nDESCRIPTION: This snippet demonstrates how to connect to a specific container within a service using SSH. It uses the container's unique hostname.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/ssh.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nssh <container hostname>\n```\n\n----------------------------------------\n\nTITLE: Deploy Ignore Configuration\nDESCRIPTION: Example .deployignore file configuration for excluding files from deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\n----------------------------------------\n\nTITLE: Configuring Custom IAM Policy for Object Storage Bucket in YAML\nDESCRIPTION: Demonstrates how to define a custom IAM Policy JSON (written in YAML syntax for example purposes) for a Zerops object storage bucket. The policy allows public users to get the bucket location and list its contents, and also allows retrieval of objects. This can be used in the Zerops GUI to implement fine-grained bucket access control. The {{ .BucketName }} placeholder is replaced with the bucket's actual name in Zerops. Input must follow IAM policy JSON format, adapted as needed for Zerops. No external dependencies are required.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/update-bucket.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n{\n  'Version': '2012-10-17',\n  'Statement':\n    [\n      {\n        'Effect': 'Allow',\n        'Principal': { 'AWS': ['*'] },\n        'Action': ['s3:GetBucketLocation', 's3:ListBucket'],\n        'Resource': ['arn:aws:s3:::{{.BucketName}}'],\n      },\n      {\n        'Effect': 'Allow',\n        'Principal': { 'AWS': ['*'] },\n        'Action': ['s3:GetObject'],\n        'Resource': ['arn:aws:s3:::{{.BucketName}}/*'],\n      },\n    ],\n}\n```\n\n----------------------------------------\n\nTITLE: Installing zCLI using Yarn Package Manager\nDESCRIPTION: This command installs zCLI globally using the Yarn package manager. This provides another option for developers who prefer Yarn over NPM.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nyarn global add @zerops/zcli\n```\n\n----------------------------------------\n\nTITLE: Using zcli service-import Command for Adding Services\nDESCRIPTION: Command syntax for adding services to an existing project using an import.yaml file. Includes the project ID flag for selecting the target project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/create.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: SSH Security Prompt for New Connections\nDESCRIPTION: This snippet shows the security prompt that appears when connecting to a new host via SSH for the first time. It includes the RSA key fingerprint and asks for confirmation to continue.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/ssh.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nThe authenticity of host 'app (x.x.x.x)' can't be established.\nRSA key fingerprint is SHA256:5wdgRcp/...\nThis key is not known by any other names\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs Using Zerops CLI - Shell\nDESCRIPTION: This shell snippet shows the zCLI command to retrieve build logs for a service on Zerops. Dependencies include the Zerops CLI (zcli) installed and authentication configured. The command 'zcli service log --showBuildLogs' fetches build logs generated during the CI pipeline. It expects appropriate service context; outputs the build log in the CLI. Only available if a build pipeline has run for the selected deploy.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies and Starting Development Server for Zerops Docs\nDESCRIPTION: This snippet shows how to install project dependencies and start the development server for the Zerops documentation. It uses Yarn as the package manager and runs the server on localhost:3001.\nSOURCE: https://github.com/zeropsio/docs/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Installs dependencies\nyarn\n\n# Starts the development server at localhost:3001\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Setting Storage Credentials as Environment Variables in Bash\nDESCRIPTION: These commands use the 'export' built-in to set the 'ACCESS_KEY_ID' and 'SECRET_ACCESS_KEY' environment variables within the current shell session. The download script relies on these variables being set for authentication with Zerops Object Storage. Replace 'your-access-key' and 'your-secret-key' with actual credentials.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/curl-file.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nexport ACCESS_KEY_ID=your-access-key\nexport SECRET_ACCESS_KEY=your-secret-key\n```\n\n----------------------------------------\n\nTITLE: Stopping a Zerops Service using zCLI (Shell)\nDESCRIPTION: Displays the usage instructions for the `zcli service stop` command. This command is used to stop a running Zerops service via the command line. It accepts an optional service ID or name. Flags like `--projectId` and `--serviceId` can be used to specify the target if multiple projects or services exist. The command can be run interactively.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/control.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Deploying All Content in Zerops YAML for Deno\nDESCRIPTION: Deploys the entire content of the build container to the runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: Defining Secret Variables in Zerops YAML for Laravel\nDESCRIPTION: Example of defining secret variables in the Zerops import configuration file for a Laravel application. This snippet shows how to set the APP_KEY as a secret variable.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/env-variables.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: app\n    type: php-nginx@8.4\n    envSecrets:\n      APP_KEY: your-secret-key\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Bun\nDESCRIPTION: Command to install project dependencies using Bun package manager. This provides a faster alternative to the standard yarn installation process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nbun install\n```\n\n----------------------------------------\n\nTITLE: Stopping .NET Service Using zCLI\nDESCRIPTION: This command stops a .NET service using Zerops CLI. It requires specifying the service ID or name, with optional flags for project and service identification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Displaying Default RAM Minimum using React ResourceTable Component\nDESCRIPTION: This JSX snippet uses a custom `ResourceTable` React component to render a table displaying default resource configurations. It passes a `resources` prop containing an object that specifies the minimum RAM (`ram.min`) as '0.25 GB' for the default vertical auto-scaling configuration of a PostgreSQL service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/scale.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<ResourceTable resources={{\n  ram: {\n    min: '0.25 GB',\n  }\n}} />\n```\n\n----------------------------------------\n\nTITLE: Implementing Welcome Email Class\nDESCRIPTION: Example implementation of a Laravel mail class for sending welcome emails\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_3\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nnamespace App\\Mail;\n\nuse Illuminate\\Mail\\Mailable;\nuse Illuminate\\Queue\\SerializesModels;\n\nclass WelcomeEmail extends Mailable\n{\n    use SerializesModels;\n\n    public function __construct(\n        public $user\n    ) {}\n\n    public function build()\n    {\n        return $this->view('emails.welcome')\n                    ->subject('Welcome to ' . config('app.name'));\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Declaring a MariaDB Service in import.yaml - YAML\nDESCRIPTION: This YAML snippet provides an example configuration of a MariaDB service (hostname: mariadb1) to be added to an existing Zerops project. It specifies required parameters such as 'type' and 'mode,' and demonstrates how to set secret environment variables under envSecrets. This file is used in conjunction with the zcli service-import command to declare new project services. Only the services section is included for existing projects; no 'project:' section is present.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\n# array of project services\nservices:\n  -\n    # service name\n    hostname: mariadb1\n    # service type and version number in mariadb@{version} format\n    type: mariadb@10.4\n    # mode of operation \"HA\"/\"NON_HA\"\n    mode: NON_HA\n    # optional: system variables configuration\n    envSecrets:\n      lower_case_table_names: \"1\"\n```\n\n----------------------------------------\n\nTITLE: Installing zCLI on NixOS by Cloning Repository\nDESCRIPTION: This command clones the zCLI repository from GitHub, which is the first step in the NixOS installation process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\ngit clone https://github.com/zeropsio/zcli\n```\n\n----------------------------------------\n\nTITLE: Adding Services to Existing Project with zCLI Service Import Command\nDESCRIPTION: Command usage for importing services into an existing project. The command requires an importYamlPath parameter and supports a projectId flag for specifying which project to modify.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command will be executed.\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to stop a Python service\nDESCRIPTION: Command-line usage for stopping a Python service in Zerops using zCLI. The command includes options for specifying project ID and service ID when working with multiple projects or services.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Pushing Changes to Fork\nDESCRIPTION: Git command to push your committed changes to your forked repository. This makes your changes available on GitHub for creating a pull request.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_8\n\nLANGUAGE: bash\nCODE:\n```\ngit push origin your-branch-name\n```\n\n----------------------------------------\n\nTITLE: CDN Cache Purging via Command Line\nDESCRIPTION: Examples of using zsc command line tool to purge CDN cache for different scenarios\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/cdn.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\n# Purge all content for a domain\nzsc cdn purge example.com\n# Purge all content (wildcard)\nzsc cdn purge example.com \"/*\"\n# Purge specific file\nzsc cdn purge example.com \"/path/to/my-file$\"\n```\n\n----------------------------------------\n\nTITLE: Starting the Development Server\nDESCRIPTION: Command to start the local development server using Yarn. This runs the dev script configured in Turborepo to launch the documentation workspace.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_5\n\nLANGUAGE: bash\nCODE:\n```\nyarn dev\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Start Command in YAML\nDESCRIPTION: Example showing how to define the start command for a Node.js application using npm start.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build: ...\n\n    run:\n      start: npm start\n```\n\n----------------------------------------\n\nTITLE: Using generateRandomBytes in YAML Configuration\nDESCRIPTION: Example demonstrating the generation of random bytes in a Zerops service configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    RANDOM_STRING: <@generateRandomString(<10>)>\n```\n\n----------------------------------------\n\nTITLE: Using zcli service deploy Command for Manual Deploy\nDESCRIPTION: The 'zcli service deploy' command uploads and deploys the application in Zerops without building. It's used when you have your own build process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/trigger-pipeline.mdx#2025-04-23_snippet_3\n\nLANGUAGE: sh\nCODE:\n```\nzcli service deploy pathToFileOrDir\n```\n\n----------------------------------------\n\nTITLE: Stopping Deno Service via zCLI\nDESCRIPTION: Command syntax for stopping a Deno service using Zerops CLI tool. Includes usage pattern and available flags for project and service specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service stop [serviceIdOrName] [flags]\n\nFlags:\n  -h, --help               the enable Zerops subdomain command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: DeployIgnore Configuration for Specific Path\nDESCRIPTION: Example of a .deployignore file that ignores a specific file only in the root src directory.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_17\n\nLANGUAGE: text\nCODE:\n```\n/src/file.txt\n```\n\n----------------------------------------\n\nTITLE: Initializing and Using Typesense Client in JavaScript\nDESCRIPTION: JavaScript code demonstrating how to initialize a Typesense client, create a collection, and perform a search query using the Zerops-hosted Typesense service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/typesense/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport TypesenseClient from 'typesense'\n\nconst client = new TypesenseClient({\n  nodes: [{\n    host: 'your-service.zerops.dev', // Your Zerops subdomain\n    port: '443',\n    protocol: 'https'\n  }],\n  apiKey: process.env.TYPESENSE_API_KEY,\n  connectionTimeoutSeconds: 2\n})\n\n// Create a collection\nawait client.collections().create({\n  name: 'companies',\n  fields: [\n    { name: 'company_name', type: 'string' },\n    { name: 'num_employees', type: 'int32' },\n    { name: 'country', type: 'string', facet: true }\n  ],\n  default_sorting_field: 'num_employees'\n})\n\n// Example search query\nconst searchResults = await client.collections('companies')\n  .documents()\n  .search({\n    q: 'tech',\n    query_by: 'company_name',\n    filter_by: 'country:=USA',\n    sort_by: 'num_employees:desc'\n  })\n```\n\n----------------------------------------\n\nTITLE: Starting a Zerops Service using zCLI (Shell)\nDESCRIPTION: Displays the usage and flags for the `zcli service start` command. This command starts a stopped Zerops service (e.g., PostgreSQL) using the command line. Requires zCLI installation and setup. It's interactive, prompting for project and service selection if specific IDs aren't supplied.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/control.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Hello World Output Example\nDESCRIPTION: Example output from the deployed Go application showing a simple Hello World message.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via zCLI - Single Container\nDESCRIPTION: Command to access runtime logs for the first container using Zerops CLI\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: React DocCardList Component Usage\nDESCRIPTION: JSX implementation of a documentation card list component showing quick start guide options with icons and descriptions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics on the way.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access Example\nDESCRIPTION: Shows how to reference an environment variable from another service by prefixing with the service hostname.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napp_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Navigating to zCLI Directory on NixOS\nDESCRIPTION: This command changes the current directory to the cloned zCLI repository, preparing for the next steps in the NixOS installation process.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\ncd zcli\n```\n\n----------------------------------------\n\nTITLE: Using zcli for Service Import\nDESCRIPTION: Command syntax for adding services to an existing project using the zcli service-import command. This imports service definitions from an import.yaml file with an option to specify the target project ID.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Components for Documentation UI in JavaScript/React\nDESCRIPTION: This code snippet imports the Image and ResourceTable components from their respective paths. These dependencies must exist in the /src/components directory and are used to add media and resource tables into the documentation. The imports enable rich, interactive UI elements in the documentation page.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/scale.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from '/src/components/Image';\nimport ResourceTable from '/src/components/ResourceTable';\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies with Yarn\nDESCRIPTION: Command to install all project dependencies using Yarn package manager. This is required before running the development server or making changes to the codebase.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\nyarn\n```\n\n----------------------------------------\n\nTITLE: File Structure Reference\nDESCRIPTION: Shows the import statement for data from a JSON file, demonstrating how static data is incorporated into the documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/customize-runtime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport data from '@site/static/data.json';\n```\n\n----------------------------------------\n\nTITLE: Processed Output of Nested Expressions in Zerops YAML\nDESCRIPTION: This YAML snippet displays the resulting values after the Zerops preprocessor evaluates the nested expressions shown in the previous example. `NESTED_STRINGS` shows the combined string, `NESTED_FUNCTIONS` shows the randomly generated string whose length was determined by another random function, and `EVEN_MORE_NESTING` shows the result stored by the nested `setVar` call.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    NESTED_STRINGS: \"Base and Nested content\"\n    NESTED_FUNCTIONS: \"58580f0ad377a8e4c0dccc1622e2d3812b90\"\n    EVEN_MORE_NESTING: \"73bcd2b647293dd04674cdecc\" # yamlPreprocessor=on\n```\n\n----------------------------------------\n\nTITLE: Configuring Test Database Connection in Laravel\nDESCRIPTION: This PHP snippet shows how to add a testing database connection to the Laravel config/database.php file, specifying the driver, host, database name, username, and password for PostgreSQL.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_8\n\nLANGUAGE: php\nCODE:\n```\n'testing' => [\n    'driver' => 'pgsql',\n    'host' => env('DB_TEST_HOST', '127.0.0.1'),\n    'database' => env('DB_TEST_DATABASE', 'testing'),\n    'username' => env('DB_TEST_USERNAME', 'postgres'),\n    'password' => env('DB_TEST_PASSWORD', ''),\n],\n```\n\n----------------------------------------\n\nTITLE: Skipping Automatic Pipeline in Git Commit Message\nDESCRIPTION: To prevent triggering a pipeline on the next push, add '[ci skip]' or '[skip ci]' to the commit message. This is case insensitive.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/trigger-pipeline.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\n[ci skip]\n```\n\nLANGUAGE: plaintext\nCODE:\n```\n[skip ci]\n```\n\n----------------------------------------\n\nTITLE: Deleting a Zerops Service using zCLI (Shell)\nDESCRIPTION: This snippet shows the usage syntax for the `zcli service delete` command, which removes a specified service from a Zerops project. It lists available flags like `--confirm` to bypass confirmation prompts, `--projectId` to specify the target project, and `--serviceId` to specify the target service directly. The command can be run interactively if the service ID or name is omitted.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Deploy All Content Configuration\nDESCRIPTION: Configuration to deploy the entire content of the build container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_8\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image for Advanced RAM Settings using React in JavaScript\nDESCRIPTION: This code renders another instance of the Image component, focused on advanced RAM configuration settings, maintaining the design and accessibility practices established elsewhere in the file. It takes the standard set of image and styling properties and is used to enhance visual instruction within the technical documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/scale.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling6.png\"\n  darkImage=\"/img/screenshots/scaling6.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting a PHP Service Using Zerops zCLI - Shell\nDESCRIPTION: This snippet details the shell command usage for starting a PHP service with Zerops zCLI. Users may provide either the service ID or name, along with optional flags for projectId and serviceId, enabling precise activation of targeted services. The command operates interactively if explicit arguments are omitted, assisting users in selecting the desired resources. Prerequisites include an installed and set up zCLI; inputs are serviceName or serviceId and optional flags, and outputs are presented via the CLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\\n  zcli service start [{serviceName | serviceId}] [flags]\\n\\nFlags:\\n  -h, --help               the service start command.\\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\\n                           command is to be executed.\\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\\n                           command is to be executed.\\n\n```\n\n----------------------------------------\n\nTITLE: Embedding a Standard HTML Image for Scaling Illustration\nDESCRIPTION: Inserts an image illustrating scaling using the standard HTML `<img>` tag. The `src` attribute points to the image file ('/img/screenshots/scaling2.png'), `alt` provides basic alternative text ('image'), and `width` and `height` attributes control its dimensions relative to its container.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/scaling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<img\n  src=\"/img/screenshots/scaling2.png\"\n  alt=\"image\"\n  width=\"100%\"\n  height=\"auto\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Marking Success with Debug Command in Zerops\nDESCRIPTION: Command used to force a successful deployment status. This will end the current phase with a success status, though it requires valid deployFiles to work properly.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/debug-mode.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nzsc debug success\n```\n\n----------------------------------------\n\nTITLE: Using PHP Socket Variable in Apache FilesMatch - Apache\nDESCRIPTION: This FilesMatch block demonstrates how to use Zerops' {{.PhpSocket}} variable to route PHP requests through the correct FastCGI socket in Apache. Place it within the appropriate context in your virtual host template. {{.PhpSocket}} is resolved to the correct socket file for the chosen PHP version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/customize-web-server.mdx#2025-04-23_snippet_6\n\nLANGUAGE: apache\nCODE:\n```\n<FilesMatch \".php$\">\n    SetHandler \"proxy:unix:{{.PhpSocket}}|fcgi://localhost/\"\n</FilesMatch>\n```\n\n----------------------------------------\n\nTITLE: Mailpit Development Setup\nDESCRIPTION: Configuration for setting up Mailpit service for local email testing\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\nservices:\n  - hostname: mailpit\n    type: go@1\n    buildFromGit: https://github.com/zeropsio/recipe-mailpit\n    enableSubdomainAccess: true\n```\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    run:\n      envVariables:\n        MAIL_MAILER: smtp\n        MAIL_HOST: mailpit\n        MAIL_PORT: 1025\n        MAIL_FROM_ADDRESS: hello@example.com\n        MAIL_FROM_NAME: ZeropsLaravel\n```\n\n----------------------------------------\n\nTITLE: Using zCLI to Import Project Configuration\nDESCRIPTION: This shell command demonstrates how to use the Zerops CLI (zCLI) to import a project configuration from a YAML file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Importing Database SQL Dump using mysql CLI (Shell Script)\nDESCRIPTION: This snippet describes using the mysql command-line tool to import an SQL dump file into a specified database. Although this command is typically used for MySQL/MariaDB databases, the included sample demonstrates the usage in a generic context referencing the SQL dump. Users should replace [database_name] and dumpfilename.sql accordingly. Ensure that the SQL dump format and destination server are compatible.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/export-import-data.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nmysql [database_name] < dumpfilename.sql\n```\n\n----------------------------------------\n\nTITLE: Running Linting\nDESCRIPTION: Command to run linting checks across all workspaces in the monorepo. This ensures code quality and consistency in the codebase.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_9\n\nLANGUAGE: bash\nCODE:\n```\nyarn lint\n```\n\n----------------------------------------\n\nTITLE: Importing Data from JSON in JSX\nDESCRIPTION: This snippet imports data from a JSON file located at '@site/static/data.json'. The imported data contains configuration information that is used within the page content, specifically for displaying the default Alpine version.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/customize-runtime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport data from '@site/static/data.json';\n```\n\n----------------------------------------\n\nTITLE: Displaying Advanced RAM Settings Screenshot using React Image Component\nDESCRIPTION: This JSX snippet utilizes the `Image` React component to render a screenshot depicting the advanced RAM auto-scaling configuration options in the Zerops UI. It specifies image paths for light/dark themes, provides alt text, and uses inline styles to manage the image dimensions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/scale.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n    lightImage=\"/img/screenshots/scaling6.png\"\n    darkImage=\"/img/screenshots/scaling6.png\"\n    alt=\"Scaling\"\n    style={{ width: '95%', height: 'auto' }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Environment for Twill CMS\nDESCRIPTION: Commands for initializing the local development environment including copying environment file, installing dependencies, generating application key, and setting up frontend assets.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/twill-local.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create and configure environment file\ncp .env.example .env\n\ncomposer install\nphp artisan key:generate\nnpm install\nnpm run dev\n```\n\n----------------------------------------\n\nTITLE: Displaying Purge Pattern Examples Table in HTML/Markdown\nDESCRIPTION: This snippet shows a table with purge pattern examples for CDN cache management. It includes patterns, descriptions, and example use cases for different purging scenarios.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/cdn.mdx#2025-04-23_snippet_5\n\nLANGUAGE: html\nCODE:\n```\n<table className=\"w-full my-1.5 whitespace-nowrap\">\n  <thead>\n    <tr>\n      <th className=\"w-fit\">Pattern</th>\n      <th className=\"w-fit\">Description</th>\n      <th className=\"w-fit\">Example</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td className=\"w-fit font-semibold\">`/*`</td>\n      <td className=\"w-fit\">Purges all content</td>\n      <td className=\"w-full\">Useful after major updates</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit font-semibold\">`/images/*`</td>\n      <td className=\"w-fit\">Purges all content in a directory</td>\n      <td className=\"w-full\">Clear all cached images</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit font-semibold\">`/css/main.css$`</td>\n      <td className=\"w-fit\">Purges a specific file</td>\n      <td className=\"w-full\">Update a single CSS file</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit font-semibold\">`/2023*`</td>\n      <td className=\"w-fit\">Purges content starting with pattern</td>\n      <td className=\"w-full\">Clear content with date prefix</td>\n    </tr>\n   </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Internal Service Access Example\nDESCRIPTION: Example of accessing a Go service internally using hostname and port within the same project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://app:8080\n```\n\n----------------------------------------\n\nTITLE: Deleting a .NET Service Using zCLI Command in Shell\nDESCRIPTION: This code snippet shows the usage and flags for the 'zcli service delete' command. It allows users to delete a .NET service via the command-line interface. The command supports various flags for confirmation, help, project ID, and service ID specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Basic Deployment Files Configuration\nDESCRIPTION: Configures which files and folders should be deployed to runtime service containers from the build output.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_7\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - dist\n  - package.json\n```\n\n----------------------------------------\n\nTITLE: Starting Gleam Service Using zCLI\nDESCRIPTION: This command is used to start a Gleam service via the Zerops CLI. It allows specifying the service by ID or name and includes options for project and service selection.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service start [{serviceName | serviceId}] [flags]\n\nFlags:\n  -h, --help               the service start command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Setting Up Local Environment for Laravel Jetstream\nDESCRIPTION: Steps to configure the local development environment, including copying the environment file, installing dependencies, generating application key, and running the development server.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/jetstream-local.mdx#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\n# Create and configure environment file\ncp .env.example .env\n\ncomposer install\nphp artisan key:generate\nnpm install\nnpm run dev\n\n# Start Development Server\nphp artisan serve # or use your preferred setup (Valet, Herd, Sail)\n```\n\n----------------------------------------\n\nTITLE: Deleting Services Using zCLI Command\nDESCRIPTION: Command-line syntax for deleting a Bun service using zCLI. Includes usage pattern and available flags for customizing the deletion process. The command supports interactive mode and can be configured to skip confirmation prompts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: Displaying Customization Links using DocCardList (JSX)\nDESCRIPTION: This JSX snippet employs the `DocCardList` component to present links related to customizing the Nginx environment on Zerops. It shows two cards for customizing the build and runtime environments, each featuring an icon.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/overview.mdx#2025-04-23_snippet_4\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: '/nginx/how-to/create',\n      label: 'Customize build environment',\n      customProps: {\n        icon: Icons['sparkles'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/nginx/how-to/customize-runtime',\n      label: 'Customize runtime environment',\n      customProps: {\n        icon: Icons['sparkles-solid'],\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Laravel Mail Class\nDESCRIPTION: Artisan command to create a new mail class in Laravel\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nphp artisan make:mail WelcomeEmail\n```\n\n----------------------------------------\n\nTITLE: Configuring Default Nginx Static Service (nginx configuration)\nDESCRIPTION: Provides the default Nginx configuration used in Zerops for static web services. This configuration includes template variables such as {{.DocumentRoot}} which are dynamically replaced based on Zerops deployment settings. It configures logging, document root, generic server listeners, and serves static files or redirects to index.html for unknown routes. Required for initial deployments; must not be edited directly unless customizing.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/customize-web-server.mdx#2025-04-23_snippet_0\n\nLANGUAGE: nginx\nCODE:\n```\nserver {\n    listen 80 default_server;\n    listen [::]:80 default_server;\n\n    server_name _;\n    root {{.DocumentRoot}};\n\n    location / {\n        try_files $uri $uri/ /index.html;\n    }\n\n    access_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=info default_short;\n    error_log syslog:server=unix:/dev/log,facility=local1,tag=nginx,severity=error;\n}\n```\n\n----------------------------------------\n\nTITLE: Laravel Logging Usage Examples\nDESCRIPTION: PHP code examples demonstrating different ways to write log messages in Laravel, including using facades, helper functions, and context data.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/logs.mdx#2025-04-23_snippet_2\n\nLANGUAGE: php\nCODE:\n```\n// Using facade\nuse Illuminate\\Support\\Facades\\Log;\n\nLog::emergency($message);\nLog::alert($message);\nLog::critical($message);\nLog::error($message);\nLog::warning($message);\nLog::notice($message);\nLog::info($message);\nLog::debug($message);\n\n// Using helper function\nlogger()->info($message);\nlogger($message); // defaults to info level\n\n// With context data\nLog::info('User failed to login.', ['id' => $user->id]);\n```\n\n----------------------------------------\n\nTITLE: Example Secret Environment Variables for Nginx Service (Env)\nDESCRIPTION: Illustrates the secret environment variables (`S3_ACCESS_KEY_ID` and `S3_ACCESS_SECRET`) as they would be configured within the Nginx service runtime environment, based on the full `description.yaml` example provided for zCLI, which includes custom scaling.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Image Rendering Using HTML img Tag in Markdown - HTML/JSX\nDESCRIPTION: Shows how to embed a raster image within Markdown using the native img HTML tag within a centered paragraph. The snippet specifies src, alt, width, and height attributes to control image display and maintain documentation styling consistency. No external dependencies; relies on standard HTML interpreted by JSX/MDX.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/scaling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<img\n  src=\"/img/screenshots/scaling2.png\"\n  alt=\"image\"\n  width=\"100%\"\n  height=\"auto\"\n/>\n```\n\n----------------------------------------\n\nTITLE: JSX Documentation Navigation Component\nDESCRIPTION: React/JSX component implementation using DocCardList to create a navigation menu for Shared Storage documentation sections. Includes links to various documentation pages with icons and descriptions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/shared-storage/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={4}\n  items={[\n    {\n      type: 'link',\n      href: '/shared-storage/how-to/connect',\n      label: 'Connect to Services',\n      customProps: {\n        icon: Icons['link'],\n        description: 'Connect your Shared Storage to runtime services.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/shared-storage/how-to/use',\n      label: 'Usage & Limitations',\n      customProps: {\n        icon: Icons['chart-bar'],\n        description: 'Learn how to save and access data, along with use cases and technical limits.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/shared-storage/how-to/manage',\n      label: 'Management & Access',\n      customProps: {\n        icon: Icons['tools'],\n        description: 'Access UI components and troubleshoot common issues.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/shared-storage/how-to/backup',\n      label: 'Backups',\n      customProps: {\n        icon: Icons['archive-box'],\n        description: 'Configure automatic backups of your data.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/shared-storage/tech-details',\n      label: 'Technical Details',\n      customProps: {\n        icon: Icons['document-text'],\n        description: 'Explore the technical architecture and deployment options.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: React Image Component Import and Usage\nDESCRIPTION: Import statements and JSX component usage for images and icons in the documentation\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/infrastructure.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from '/src/components/Image';\nimport { CheckCircleSolid } from \"@medusajs/icons\";\nimport { Dropdown, DropdownItem } from '/src/components/Dropdown';\n```\n\n----------------------------------------\n\nTITLE: Exporting Service Arrays with Icon Components - React/JSX - JavaScript\nDESCRIPTION: This code defines and exports arrays representing different Zerops-supported service categories (runtimes, containers, databases, storages), where each item references a React Icon component and (optionally) an overview documentation link. These arrays are used throughout the homepage for dynamic rendering in custom components. Dependencies include React, Docusaurus, and a set of custom icon components imported at the top of the file. Expected input is an array of service objects; output is for use by UI layering components.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/homepage.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nexport const runtimes = [\n    { name: \"Node.js\", link: \"/nodejs/overview\", icon: <Icons.nodejs/> },\n    { name: \"PHP\", link: \"/php/overview\", icon: <Icons.php/> },\n    { name: \"Python\", link: \"/python/overview\", icon: <Icons.python/> },\n    { name: \"Go\", link: \"/go/overview\", icon: <Icons.go/> },\n    { name: \".NET\", link: \"/dotnet/overview\", icon: <Icons.dotnet/> },\n    { name: \"Rust\", link: \"/rust/overview\", icon: <Icons.rust/> },\n    { name: \"Java\", link: \"/java/overview\", icon: <Icons.java/> },\n    { name: \"Deno\", link: \"/deno/overview\", icon: <Icons.deno/> },\n    { name: \"Bun\", link: \"/bun/overview\", icon: <Icons.bun/> },\n    { name: \"Elixir\", link: \"/elixir/overview\", icon: <Icons.elixir/> },\n    { name: \"Gleam\", link: \"/gleam/overview\", icon: <Icons.gleam/> },\n    { name: \"Nginx\", link: \"/nginx/overview\", icon: <Icons.nginx/> },\n    { name: \"Static\", link: \"/static/overview\", icon: <Icons.computer-desktop/> },\n]\n\nexport const containers = [\n    { name: \"Docker\", link: \"/docker/overview\", icon: <Icons.docker/> },\n    { name: \"Alpine\", icon: <Icons.alpine/> },\n    { name: \"Ubuntu\", icon: <Icons.ubuntu/> },\n]\n\nexport const databases = [\n    { name: \"PostgreSQL\", link: \"/postgresql/overview\", icon: <Icons.postgresql/> },\n    { name: \"MariaDB\", link: \"/mariadb/overview\", icon: <Icons.mariadb/> },\n    { name: \"Valkey\", link: \"/valkey/overview\", icon: <Icons.valkey/> },\n    { name: \"Elasticsearch\", link: \"/elasticsearch/overview\", icon: <Icons.elasticsearch/> },\n    { name: \"Typesense\", link: \"/typesense/overview\", icon: <Icons.typesense/> },\n    { name: \"Meilisearch\", link: \"/meilisearch/overview\", icon: <Icons.meilisearch/> },\n    { name: \"Qdrant\", link: \"/qdrant/overview\", icon: <Icons.qdrant/> },\n    { name: \"NATS\", link: \"/nats/overview\", icon: <Icons.nats/> },\n    { name: \"Kafka\", link: \"/kafka/overview\", icon: <Icons.kafka/> },\n    { name: \"KeyDB\", link: \"/keydb/overview\", icon: <Icons.keydb/> },\n]\n\nexport const storages = [\n    { name: \"Object storage\", link: \"/object-storage/overview\", icon: <Icons.cube-solid/> },\n    { name: \"Shared storage\", link: \"/shared-storage/overview\", icon: <Icons.server/> },\n]\n\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via Zerops CLI\nDESCRIPTION: This command uses the Zerops CLI to access runtime logs for a service. It requires the zcli tool to be installed and configured.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: Simple .NET Hello World Output\nDESCRIPTION: This snippet shows the expected output from the deployed .NET application, which is a basic 'Hello, World!' message.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Gleam Application\nDESCRIPTION: This shell script snippet shows how to access local environment variables in a Gleam application using the process.env object.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nprocess.env.YOUR_VARIABLE_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Hello World Output Example from PHP Application\nDESCRIPTION: Simple text output from the deployed PHP application, showing the expected result when accessing the application through the generated subdomain.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Logging out from Zerops CLI\nDESCRIPTION: Command to disconnect from VPN and log out from your Zerops account.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nzcli logout\n```\n\n----------------------------------------\n\nTITLE: Setting Environment Variables for Zerops Bun Service\nDESCRIPTION: This snippet shows the environment variables that will be configured for the Bun service in the Zerops project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Displaying Node.js Recipe Links using DocCardList in MDX\nDESCRIPTION: This MDX snippet uses the Docusaurus `DocCardList` component to display links to additional Node.js 'recipes' (example projects) hosted on GitHub. It depends on `@theme/DocCardList` and `@theme/Icon`. The snippet renders two cards in a two-column layout, linking to a specific multi-service example and a broader search for all zeropsio Node.js recipes on GitHub.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: mdx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-nodejs',\n      label: 'Node.js + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=nodejs&type=all&language=&sort=',\n      label: 'All Node.js recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspired.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Static CDN Content\nDESCRIPTION: Example URL pattern for accessing content through Zerops Static CDN mode\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/cdn.mdx#2025-04-23_snippet_1\n\nLANGUAGE: txt\nCODE:\n```\nhttps://static.cdn.zerops.app/your-domain.com/path/to/file\n```\n\n----------------------------------------\n\nTITLE: Example Secret Environment Variables for Nginx Service (Env)\nDESCRIPTION: Illustrates the secret environment variables (`S3_ACCESS_KEY_ID` and `S3_ACCESS_SECRET`) as they would be configured within the Nginx service runtime environment, based on the basic `description.yaml` example provided for zCLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: CRON Job Logging Configuration\nDESCRIPTION: Example of implementing comprehensive logging for CRON jobs.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/cron.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ncommand: \"php artisan schedule:run >> /var/log/scheduler.log 2>&1\"\n```\n\n----------------------------------------\n\nTITLE: Navigating to Project Directory\nDESCRIPTION: Command to change into the project directory after cloning the repository. This is necessary before installing dependencies and making changes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncd repo-name\n```\n\n----------------------------------------\n\nTITLE: JSX Popular Guides Navigation Component\nDESCRIPTION: React/JSX component implementation using DocCardList to create a navigation menu for popular guides section, featuring links to zCLI and Zerops VPN documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/shared-storage/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: '/references/cli',\n      label: 'zCLI',\n      customProps: {\n        icon: Icons['command-line'],\n        description:\n          'Get even more out of Zerops with the zCLI command line tool.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/references/vpn',\n      label: 'Zerops VPN',\n      customProps: {\n        icon: Icons['globe-europe'],\n        description: 'Connect to your services easily with Zerops VPN.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Link to All MariaDB Recipes using DocCardList (JSX)\nDESCRIPTION: Uses the `DocCardList` React component to display a card linking to a GitHub search query showing all Zerops repositories tagged with 'mariadb'. It's configured for a two-column layout (`colSize={6}`) but contains only one item. The card includes a link (`href`), label, a GitHub icon (`Icons['github']`), and a description encouraging users to browse for inspiration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=mariadb&type=all&language=&sort=',\n      label: 'All MariaDB recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspired.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Support and Community Links using DocCardList (JSX)\nDESCRIPTION: This JSX snippet utilizes the `DocCardList` component to provide links for user support and community interaction. It displays a card linking to the Zerops Discord server, encouraging users to ask questions and share tips. An FAQ link is present but commented out in the source.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/overview.mdx#2025-04-23_snippet_5\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    /* {\n      type: 'link',\n      href: '/nginx/faq',\n      label: 'FAQ',\n      customProps: {\n        icon: Icons['chat-bubble-left-right'],\n        description: 'Most common questions in one place.',\n      },\n    }, */\n    {\n      type: 'link',\n      href: 'https://discord.com/invite/WDvCZ54',\n      label: 'Discord',\n      customProps: {\n        icon: Icons['discord'],\n        description:\n          'Join our core team and Zerops community on Discord. Ask questions and share your tips with other members.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList for .NET Recipes in JSX\nDESCRIPTION: This code snippet renders another DocCardList component with two cards, linking to more complex .NET application examples and a GitHub repository search for all .NET recipes on Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-dotnet',\n      label: '.NET + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=dotnet&type=all&language=&sort=',\n      label: 'All .NET recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspiration.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Recipe Links with DocCardList (React, JavaScript)\nDESCRIPTION: Uses the DocCardList React component to display links to advanced Java recipes and repositories on GitHub. Depends on '@theme/DocCardList' and '@theme/Icon'. Each card includes an icon, descriptive label, and a section-specific link for users seeking more robust Java-Zerops integrations.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\n<DocCardList\\n  colSize={6}\\n  items={[\\n    {\\n      type: 'link',\\n      href: 'https://github.com/zeropsio/recipe-onboarding-java',\\n      label: 'Java + SQL database',\\n      customProps: {\\n        icon: Icons['github'],\\n        description: 'A more complex, multi-service application example.',\\n      },\\n    },\\n    {\\n      type: 'link',\\n      href: 'https://github.com/zeropsio?q=java&type=all&language=&sort=',\\n      label: 'All Java recipes',\\n      customProps: {\\n        icon: Icons['github'],\\n        description: 'Browse our Github repositories to get inspired.',\\n      },\\n    },\\n  ]}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Starting a Zerops Nginx Static Service using zCLI - Shell\nDESCRIPTION: This code snippet displays the usage syntax for the `zcli service start` command, which initiates a stopped Zerops Nginx static service from the command-line. Essential flags include `--projectId` and `--serviceId`, allowing granular selection in environments with multiple projects or services. The command is interactive if parameters are omitted, supporting both direct and guided service starting workflows.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/controls.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\\n  zcli service start [{serviceName | serviceId}] [flags]\\n\\nFlags:\\n  -h, --help               the service start command.\\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\\n                           command is to be executed.\\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\\n                           command is to be executed.\\n\n```\n\n----------------------------------------\n\nTITLE: Connecting to a Gleam Service via VPN using HTTP URL\nDESCRIPTION: Shows the URL format used to connect to a Gleam service (hostname `app`, internal port `3000`) from a local machine when a Zerops VPN connection to the project is active. The connection uses `http` because security is provided by the VPN tunnel over the private network.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/access.mdx#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nhttp://app:3000\n```\n\n----------------------------------------\n\nTITLE: Accessing Environment Variables in Bun\nDESCRIPTION: Code example showing how to read environment variables in a Bun application using process.env.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/env-variables.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nprocess.env.YOUR_VARIABLE_KEY_HERE\n```\n\n----------------------------------------\n\nTITLE: Executing the Download Script in Bash\nDESCRIPTION: This command executes the 'download-storage.sh' script, passing 'my-bucket' as the first argument (bucket name) and 'file.pdf' as the second argument (file path). The script must have execute permissions, and the ACCESS_KEY_ID and SECRET_ACCESS_KEY environment variables must be set prior to running this command.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/object-storage/how-to/curl-file.mdx#2025-04-23_snippet_3\n\nLANGUAGE: bash\nCODE:\n```\n./download-storage.sh my-bucket file.pdf\n```\n\n----------------------------------------\n\nTITLE: Service Inheritance with 'extends' in Zerops YAML\nDESCRIPTION: Illustrates how to use the 'extends' key to inherit configuration from another service, allowing for environment-specific configurations while maintaining a common base.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/zerops-yaml/specification.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: base\n    build:\n      buildCommands:\n        - echo \"hello\"\n      deployFiles: ./\n    run:\n      start: server run\n\n  - setup: prod\n    extends: base\n    run:\n      crontab:\n        - command: xyz\n          allContainers: false\n          timing: \"* * * * *\"\n\n  - setup: dev\n    extends: base\n    run:\n      crontab:\n        - command: different command\n          allContainers: false\n          timing: \"* * * * *\"\n```\n\n----------------------------------------\n\nTITLE: React Pricing Calculator Component Import\nDESCRIPTION: Import statement for the PricingCalculator React component used to estimate monthly costs based on resource usage.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/company/pricing.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport PricingCalculator from \"@site/src/components/PricingCalculator\"\n```\n\n----------------------------------------\n\nTITLE: Hello World Output Example\nDESCRIPTION: Simple output displayed when accessing the deployed Python application endpoint.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Displaying Advanced CPU Settings Screenshot using React Image Component\nDESCRIPTION: This JSX snippet employs the `Image` React component to show a screenshot of the advanced CPU auto-scaling settings within the Zerops interface. It uses the same image for both light and dark modes, includes alt text, and sets the display width and height via inline styles.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/scale.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n    lightImage=\"/img/screenshots/scaling5.png\"\n    darkImage=\"/img/screenshots/scaling5.png\"\n    alt=\"Scaling\"\n    style={{ width: '95%', height: 'auto' }}\n  />\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Documentation Layout (JavaScript/JSX)\nDESCRIPTION: Imports necessary React components for structuring the documentation page using Docusaurus. `DocCardList` creates lists of cards, `Icons` provides access to theme icons, and `LargeCardList`/`LargeCard` are custom components for displaying larger card elements. These components are used to render links to tutorials and recipes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Displaying Getting Started Links using DocCardList (JSX)\nDESCRIPTION: This JSX snippet utilizes the `DocCardList` component to display two introductory links for users starting with Nginx on Zerops. Each card includes a label, link (`href`), custom icon, and description, arranged in a grid layout.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/overview.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: '/nginx/getting-started',\n      label: 'New to Zerops?',\n      customProps: {\n        icon: Icons['rocket-launch'],\n        description: 'Learn the basics by following a simple example.',\n      },\n    },\n    {\n      type: 'link',\n      href: '/nginx/how-to/create',\n      label: 'Care for details?',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description:\n          'Dive in all Zerops has to offer for your Nginx application.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Verifying Java Application Deployment Output\nDESCRIPTION: This snippet shows the expected plain text output \"Hello, World!\" when accessing the deployed Java application via its public subdomain URL. This confirms that the application built from the `recipe-java-hello-world` repository (configured via the previous YAML snippet) is running correctly on Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: text\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Supported Global Lock in MariaDB Cluster (SQL)\nDESCRIPTION: While explicit table locks are limited, global locking operators such as the general `FLUSH TABLES WITH READ LOCK` are supported in highly available MariaDB clusters.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/tech-details/limitations.mdx#2025-04-23_snippet_2\n\nLANGUAGE: SQL\nCODE:\n```\nFLUSH TABLES WITH READ LOCK\n```\n\n----------------------------------------\n\nTITLE: Running Tests\nDESCRIPTION: Command to run tests across all workspaces in the monorepo if configured. This verifies that your changes don't break existing functionality.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_10\n\nLANGUAGE: bash\nCODE:\n```\nyarn test\n```\n\n----------------------------------------\n\nTITLE: Resource Table Structure in HTML\nDESCRIPTION: HTML table structure showing the minimum containers and maximum containers configuration for horizontal auto-scaling in Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/scaling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table className=\"w-full my-1.5\">\n  <tbody>\n    <tr>\n      <td className=\"w-fit\">\n        <b>minimum containers</b>\n      </td>\n      <td className=\"w-fit\">1</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit\">\n        <b>maximum containers</b>\n      </td>\n      <td className=\"w-fit\">6</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Embedding Screenshots via Custom Image Component (MDX/JavaScript)\nDESCRIPTION: Custom <Image /> components are embedded within MDX content to visually document auto-scaling settings and advanced tuning options. These use properties for dark/light images, alt text, and inline style for responsive scaling. Assumes the Image component handles theming and accessibility as required. No dynamic logic—simply displays static screenshots aligned in the documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/scale.mdx#2025-04-23_snippet_2\n\nLANGUAGE: MDX\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling5.png\"\n  darkImage=\"/img/screenshots/scaling5.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\nLANGUAGE: MDX\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling6.png\"\n  darkImage=\"/img/screenshots/scaling6.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Runtime and Container Links in JSX\nDESCRIPTION: This code snippet uses the DocCardList component to render a grid of links for various runtimes, web servers, and Linux containers supported by Zerops. It includes icons and labels for each technology.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={4}\n  items={[\n    {\n      type: 'link',\n      href: '/nodejs/getting-started',\n      label: 'Node.js',\n      customProps: {\n        icon: Icons['nodejs'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/go/getting-started',\n      label: 'Go',\n      customProps: {\n        icon: Icons['go'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/php/getting-started',\n      label: 'PHP',\n      customProps: {\n        icon: Icons['php'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/python/getting-started',\n      label: 'Python',\n      customProps: {\n        icon: Icons['python'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/dotnet/getting-started',\n      label: '.NET',\n      customProps: {\n        icon: Icons['dotnet'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/rust/getting-started',\n      label: 'Rust',\n      customProps: {\n        icon: Icons['rust'],\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Guide Navigation Using DocCardList (React, JavaScript)\nDESCRIPTION: Renders a vertically spaced React component (DocCardList) with two documentation links for quick navigation. Requires dependencies '@theme/DocCardList' and '@theme/Icon' to render cards, each featuring an icon, label, and description. Inputs include props for layout (colSize), link properties, and related icon components; outputs are interactive link cards within the page.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\n<DocCardList\\n  colSize={6}\\n  items={[\\n    {\\n      type: 'link',\\n      href: 'tutorial/quickstart',\\n      label: 'No-Fuss one click guide (well, almost)',\\n      customProps: {\\n        icon: Icons['cursor-arrow-rays'],\\n        description:\\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\\n      },\\n    },\\n    {\\n      type: 'link',\\n      href: 'tutorial/step-by-step',\\n      label: 'Simple tutorial in few easy steps',\\n      customProps: {\\n        icon: Icons['academic-cap-solid'],\\n        description: 'Learn the basics with one-service app.',\\n      },\\n    },\\n  ]}\\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Project Configuration with zcli\nDESCRIPTION: Command-line usage for importing a project configuration using the Zerops CLI tool. This command creates a new project based on the description.yaml file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Simple Python Output Example\nDESCRIPTION: Example output from a basic Python application showing a successful database entry with UUID.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/tutorial/runtime-sql.mdx#2025-04-23_snippet_0\n\nLANGUAGE: text\nCODE:\n```\nEntry added successfully with random data: f47ac10b-58cc-0372-8567-0e02b2c3d479. Total count: 1\n```\n\n----------------------------------------\n\nTITLE: Using Wildcards for Subpaths in YAML\nDESCRIPTION: Example of using the ~ wildcard to deploy all folders that are located in paths starting with /path/to/.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_14\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: ./path/to/~/\n```\n\n----------------------------------------\n\nTITLE: Importing Valkey Configuration Versions\nDESCRIPTION: Code list for importing Valkey version configurations in Zerops platform. Referenced through a data import from static JSON file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/valkey/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<UnorderedCodeList data={data.valkey.import}/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Quick Start Guide Links using DocCardList in JSX\nDESCRIPTION: Utilizes the `DocCardList` React component to display two interactive cards linking to different Nginx quick start tutorials on Zerops. Each card is configured with a link (`href`), `label`, `icon`, and `description` using the `items` prop. The `colSize` prop suggests a layout where cards might take up half the width.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics on the way.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing and Rendering ResourceTable Component - React JSX\nDESCRIPTION: Demonstrates importing and employing the ResourceTable React component to display the default configuration of vertical auto scaling for Java services. The component is inserted in Markdown for easy embedding of predefined table data, likely rendering as a styled table. Usage assumes React environment and access to the specific component.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/scaling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport ResourceTable from '/src/components/ResourceTable';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<ResourceTable />\n```\n\n----------------------------------------\n\nTITLE: Displaying JSON Response from Deno Application\nDESCRIPTION: This JSON snippet represents the expected output when accessing the deployed Deno application through its subdomain. It includes a message about the application, a new entry UUID, and a count of database entries.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\"message\":\"This is a simple, basic Deno / Oak application running on Zerops.io,\\n      each request adds an entry to the PostgreSQL database and returns a count.\\n      See the source repository (https://github.com/zeropsio/recipe-deno) for more information.\",\"newEntry\":\"274b0cc1-5b6d-4351-b8ec-53cf82bd9d0f\",\"count\":1}\n```\n\n----------------------------------------\n\nTITLE: Handling Environment Variable Syntax During Zerops YAML Preprocessing\nDESCRIPTION: This YAML snippet clarifies how standard environment variable references (like `${ITEM_VALUE}`) are handled during the Zerops YAML *preprocessing* phase. It shows that when such syntax is included within a string passed to `setVar`, it is treated as literal text. The subsequent `getVar` call retrieves the string unchanged, demonstrating that environment variable substitution happens in a later processing phase, not during preprocessing.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_6\n\nLANGUAGE: yaml\nCODE:\n```\n\n# The part ` {ITEM_VALUE` is taken as a regular text when storing a string value as an internal variable.\n<@setVar(<commentValue>, <By the way, this ${ITEM_VALUE} is text passed over as a value.>)> # The returned value will be exactly the same when retrieving the previously stored value.\n<@getVar(<commentValue>)> # The returned value will be: By the way, this  {ITEM_VALUE} is text passed over as a value. # yamlPreprocessor=on\n\n```\n\n----------------------------------------\n\nTITLE: Importing Required React Components in MDX\nDESCRIPTION: This snippet imports necessary React components for the FAQ page. `Accordion` might be used elsewhere or planned for future use. `FAQ` and `FAQItem` are used to structure the question-answer list. `Image` is used to display images within the FAQ answers.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/help/faq.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Accordion from '/src/components/Accordion';\nimport { FAQ, FAQItem } from '/src/components/Faq';\nimport Image from '/src/components/Image';\n```\n\n----------------------------------------\n\nTITLE: Creating a Laravel Migration for Users Table\nDESCRIPTION: This PHP snippet demonstrates a Laravel migration file structure for creating a users table. It includes methods for both creating (up) and dropping (down) the table, with comments explaining each field.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<?php\n\nuse Illuminate\\Database\\Migrations\\Migration;\nuse Illuminate\\Database\\Schema\\Blueprint;\nuse Illuminate\\Support\\Facades\\Schema;\n\nreturn new class extends Migration\n{\n    /**\n     * Run the migrations.\n     * Creates the users table with essential fields.\n     */\n    public function up()\n    {\n        Schema::create('users', function (Blueprint $table) {\n            $table->id();                    // Auto-incrementing primary key\n            $table->string('name');          // User's full name\n            $table->string('email')->unique(); // Unique email address\n            $table->timestamp('email_verified_at')->nullable(); // Email verification timestamp\n            $table->string('password');      // Hashed password\n            $table->rememberToken();         // Remember me token\n            $table->timestamps();            // Created_at and updated_at timestamps\n        });\n    }\n\n    /**\n     * Reverse the migrations.\n     * Removes the users table completely.\n     */\n    public function down()\n    {\n        Schema::dropIfExists('users');\n    }\n};\n```\n\n----------------------------------------\n\nTITLE: Displaying an Image for Advanced CPU Settings using React in JavaScript\nDESCRIPTION: This snippet showcases usage of the Image component to visually support documentation for advanced CPU configuration, using the same structure as previous image snippets. It demonstrates consistent application of media across the documentation UI, again requiring the Image component implementation and referenced image.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/scale.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling5.png\"\n  darkImage=\"/img/screenshots/scaling5.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing DocCardList and Other Components in JSX\nDESCRIPTION: Import statements for React components used to structure the documentation page, including DocCardList, Icons, LargeCardList, and LargeCard components.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Importing Documentation Components in JSX\nDESCRIPTION: Imports React components required for rendering structured documentation layouts within an MDX file. It imports components for displaying lists of cards (`DocCardList`, `LargeCardList`), individual large cards (`LargeCard`), and icons (`Icons`) from the Docusaurus theme and local site source.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Stopping a PHP Service Using Zerops zCLI - Shell\nDESCRIPTION: This snippet provides the command-line usage details for stopping a PHP service with Zerops zCLI. It outlines possible parameters such as projectId and serviceId, allowing users to target specific services within multiple projects. The command is interactive by default, presenting a list of services and projects if no specific identifier is provided. Dependencies include an installed and configured zCLI tool; inputs are the service ID or name, optional project/service IDs, and the command outputs status messages or prompts within the CLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/controls.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\\n  zcli service stop [serviceIdOrName] [flags]\\n\\nFlags:\\n  -h, --help               the enable Zerops subdomain command.\\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\\n                           command is to be executed.\\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\\n                           command is to be executed.\\n\n```\n\n----------------------------------------\n\nTITLE: Using Wildcard in deployFiles for Folder Paths (End)\nDESCRIPTION: Shows how to use the `~` wildcard at the end of a path in `deployFiles` within `zerops.yaml`. The example (`./path/to/~/`) targets all folders located anywhere under the `/path/to/` directory for deployment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndeployFiles: ./path/to/~/\n```\n```\n\n----------------------------------------\n\nTITLE: Expected Output of Deployed Python Application\nDESCRIPTION: The expected output when accessing the deployed Python application through its subdomain URL, showing a simple 'Hello, World!' message.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/tutorial/quickstart.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nHello, World!\n```\n\n----------------------------------------\n\nTITLE: Referencing Cross-Service Environment Variables in Zerops\nDESCRIPTION: Illustrates the convention for accessing an environment variable (`API_TOKEN`) defined in one service (named `app`) from another service within the same Zerops project. This is achieved by prefixing the environment variable key with the source service's hostname followed by an underscore.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/how-to/access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napp_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Copying Files from Build to Runtime Container in YAML\nDESCRIPTION: Configuration for copying files from build container to runtime container using addToRunPrepare attribute and setting up prepare commands\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_21\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n      addToRunPrepare:\n        - requirements.txt\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Python runtime environment.\n      prepareCommands:\n        - python3 -m pip install --ignore-installed -r requirements.txt\n      ...\n```\n\n----------------------------------------\n\nTITLE: Displaying Resource Table for Auto Scaling Limits using React in JavaScript\nDESCRIPTION: This snippet uses the ResourceTable component to render a table of hardware resource minimums, here specifying a minimum RAM of 0.25 GB. The resources prop takes an object describing resource constraints to display. Dependency is the custom ResourceTable component, which must properly interpret and render the input object.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/how-to/scale.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<ResourceTable resources={{\n  ram: {\n    min: '0.25 GB',\n  }\n}} />\n```\n\n----------------------------------------\n\nTITLE: JSX DocCardList Recipe Links Implementation\nDESCRIPTION: React component implementation for displaying additional Elixir recipe links using DocCardList.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: JSX\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-elixir',\n      label: 'Elixir + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=elixir&type=all&language=&sort=',\n      label: 'All Elixir recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspired.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Service Type Tables with JSX\nDESCRIPTION: This code snippet demonstrates how to create a table in JSX to display service types and their versions. It uses the imported UnorderedCodeList component to render version lists.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/type-list.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<table className=\"w-full my-1.5 whitespace-nowrap\">\n  <thead>\n    <tr>\n      <th className=\"\">Service Type</th>\n      <th className=\"w-full\">Versions</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <td className=\"w-fit\">Nginx</td>\n      <td className=\"w-fit\"><UnorderedCodeList data={data.nginx.import} /></td>\n    </tr>\n    <tr>\n      <td className=\"w-fit\">Static</td>\n      <td className=\"w-fit\"><UnorderedCodeList data={data.static.import} /></td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Initializing VPN Connection for Laravel Jetstream Development\nDESCRIPTION: Commands to set up VPN access using Zerops CLI for connecting local development environment to remote resources.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/jetstream-local.mdx#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\n# Initialize VPN connection using project ID\nzcli vpn up <project-id>\n\n# Or use interactive mode to select your project\nzcli vpn up\n```\n\n----------------------------------------\n\nTITLE: Setting and Retrieving Variables in Zerops YAML Preprocessor\nDESCRIPTION: This YAML example demonstrates variable usage within the Zerops preprocessor. The `setVar` function is used to store the result of `generateRandomString(<30>)` in a variable named `myPassword`. Subsequently, `getVar(myPassword)` retrieves this stored value, once applying a `sha256` modifier and once directly.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\n# Stores a value in myPassword variable\nPASSWORD: <@setVar(<myPassword>, <@generateRandomString(<30>)>)>\n\n# Retrieves the stored value (myPassword)\nHASHED_PASSWORD: <@getVar(myPassword)|sha256>\n# Reuses the stored value (myPassword)\nSAME_PASSWORD_AGAIN: <@getVar(myPassword)> # yamlPreprocessor=on\n```\n\n----------------------------------------\n\nTITLE: Importing Component in JSX\nDESCRIPTION: Imports a custom comparison component for displaying development environment differences.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/container-vs-vm.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DevelopmentEnvironmentComparison from '/src/components/ComparisonBlock';\n```\n\n----------------------------------------\n\nTITLE: Importing UI Components in React/JSX - JavaScript\nDESCRIPTION: These import statements bring in custom React UI components ('Image' and 'ResourceTable') from local paths for use within the doc's JSX/MDX content. These dependencies must be defined elsewhere in the codebase and are expected to handle image rendering and render tables of resource allocation data, respectively. There are no parameters for the import statements. These are typical ES6 imports required for composing the documentation's dynamic UI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/scaling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport Image from '/src/components/Image';\nimport ResourceTable from '/src/components/ResourceTable';\n```\n\n----------------------------------------\n\nTITLE: Creating a New Branch\nDESCRIPTION: Git command to create and switch to a new branch for your contribution. This keeps your changes separate from the main branch for easier review.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ngit checkout -b your-branch-name\n```\n\n----------------------------------------\n\nTITLE: Rendering Guide Links using DocCardList Component (JSX)\nDESCRIPTION: Uses the `DocCardList` React component (from Docusaurus theme) to display a two-column grid (`colSize={6}`) of links to quick start guides. Each card is defined within the `items` array, specifying its type (`link`), target URL (`href`), display text (`label`), and custom properties like an `icon` (using the imported `Icons`) and a `description`. This allows users to choose between a minimal-effort guide and a step-by-step tutorial.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics with one-service app.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Configuring Application Start Command\nDESCRIPTION: YAML configuration for defining the start command for Python application\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_24\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build: ...\n\n    # ==== how to run your application ====\n    run:\n      # REQUIRED. Your Python application start command\n      start: app.py\n```\n\n----------------------------------------\n\nTITLE: Importing React FAQ Components for Nginx Docs - JavaScript\nDESCRIPTION: This snippet imports the FAQ and FAQItem components from a local path to be used within a React application. It requires the project to be set up with a compatible React environment and the '/src/components/Faq' module to be available. The imported components will be utilized to build the FAQ section in the documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/faq.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport { FAQ, FAQItem } from '/src/components/Faq';\n```\n\n----------------------------------------\n\nTITLE: Displaying Additional Gleam Recipes with DocCardList in JSX\nDESCRIPTION: This JSX code renders a list of additional Gleam recipes and resources using the DocCardList component, linking to GitHub repositories for more complex examples and all Gleam-related recipes.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-gleam',\n      label: 'Gleam + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=gleam&type=all&language=&sort=',\n      label: 'All Gleam recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspired.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Rendering Nginx Recipe Links using DocCardList in JSX\nDESCRIPTION: Employs the `DocCardList` React component to present links to external GitHub repositories containing Nginx application recipes. It displays two cards: one linking to a specific PHP/Nginx recipe and another linking to a GitHub search query for all Zerops Nginx recipes. Cards include icons and descriptions defined in `customProps`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-php',\n      label: 'Nginx + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=php&type=all&language=&sort=',\n      label: 'All Nginx recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspired.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Docusaurus Theme Components in JSX\nDESCRIPTION: This snippet imports necessary React components for rendering documentation elements within a Docusaurus site. `DocCardList` is used to display lists of cards linking to other documents, `Icons` provides access to theme icons, and `LargeCardList`/`LargeCard` are custom components for displaying featured content.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Importing and Utilizing Image Component - React JSX\nDESCRIPTION: Illustrates how to import and render a custom Image React component to visually represent resources in the documentation. The Image component is used multiple times, receiving props such as lightImage, darkImage, alt, and style for correct rendering based on theme and layout requirements. No external dependencies are required beyond the React environment and the specified component file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/scaling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from '/src/components/Image';\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/gui/resources.webp\"\n  darkImage=\"/img/gui/resources.webp\"\n  alt=\"Resources of a Zerops service\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/gui/automatic-scaling.webp\"\n  darkImage=\"/img/gui/automatic-scaling.webp\"\n  alt=\"Automatic Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling5.png\"\n  darkImage=\"/img/screenshots/scaling5.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/screenshots/scaling6.png\"\n  darkImage=\"/img/screenshots/scaling6.png\"\n  alt=\"Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Data and Custom Component in JSX\nDESCRIPTION: This code snippet imports data from a JSON file and a custom React component. It's used to render lists of service versions throughout the document.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/type-list.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport data from '@site/static/data.json';\nimport UnorderedCodeList from '@site/src/components/UnorderedCodeList';\n```\n\n----------------------------------------\n\nTITLE: Starting VPN Connection with Zerops CLI (Bash)\nDESCRIPTION: This snippet demonstrates how to start a VPN connection to your Zerops project services from your local machine using the Zerops CLI. Prerequisites include installing the Zerops CLI ('zcli') and having an active Zerops account. This command ('zcli vpn up') prompts you to select your project and establishes VPN connectivity, allowing direct access to project resources such as databases. Ensure you follow any authentication or project selection prompts displayed by zcli.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\nzcli vpn up\n```\n\n----------------------------------------\n\nTITLE: Using getVar in YAML Configuration\nDESCRIPTION: Example demonstrating how to retrieve a previously stored value using getVar function.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_12\n\nLANGUAGE: yaml\nCODE:\n```\n#yamlPreprocessor=on\nservices:\n- hostname: app\n  type: nodejs@20\n  envSecrets:\n    GET_VAR: <@getVar(plainPassword)>\n```\n\n----------------------------------------\n\nTITLE: Rendering BrandAssets Component in JSX\nDESCRIPTION: This JSX code renders the imported BrandAssets component. The component is self-closing, indicating it doesn't have any child elements or props passed to it in this usage.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/company/branding.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<BrandAssets />\n```\n\n----------------------------------------\n\nTITLE: Rendering DocCardList Component in JSX\nDESCRIPTION: This code snippet renders a DocCardList component with two cards, each linking to different .NET tutorials on Zerops. It uses custom icons and descriptions for each card.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics on the way.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Multiple Base Technologies Configuration\nDESCRIPTION: Configuration example showing how to set multiple base technologies for the runtime environment.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/build-pipeline.mdx#2025-04-23_snippet_16\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base: php-apache@latest\n    run:\n      base:\n        - php-apache@latest\n      prepareCommands:\n        - zsc add go@latest\n```\n\n----------------------------------------\n\nTITLE: Resource Scaling Examples\nDESCRIPTION: Various examples of scaling CPU and RAM resources with different durations and values.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_9\n\nLANGUAGE: sh\nCODE:\n```\nzsc scale cpu auto\nzsc scale cpu 5 1h\nzsc scale cpu +2 30m\nzsc scale cpu min 10m\nzsc scale ram auto\nzsc scale ram 5GB 1h\nzsc scale ram +2.5GB 600s\nzsc scale ram max 10m\n```\n\n----------------------------------------\n\nTITLE: Responsive Grid Layout in JSX/HTML\nDESCRIPTION: Implements a responsive grid layout using Tailwind CSS classes to display comparison lists between containers and VMs usage scenarios.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/container-vs-vm.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<div className=\"grid grid-cols-1 md:grid-cols-2 gap-1 mt-1\">\n  <div className=\"flex-1\">\n  <h4 className=\"flex items-center gap-1 mb-0\">\n    Go with Containers when:\n  </h4>\n  <ul className=\"list-none p-0 m-0 flex flex-col gap-0.5\">\n      <li className=\"flex items-center gap-0.5\">\n        <div className=\"w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75\" />\n        <span>Building modern web applications</span>\n      </li>\n      <li className=\"flex items-center gap-0.5\">\n        <div className=\"w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75\" />\n        <span>Working with microservices</span>\n      </li>\n      <li className=\"flex items-center gap-0.5\">\n        <div className=\"w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75\" />\n        <span>Need quick deployment and vertical scaling</span>\n      </li>\n      <li className=\"flex items-center gap-0.5\">\n        <div className=\"w-0.5 min-w-0.5 shrink-0 aspect-square rounded-full bg-gray-400 flex items-center justify-center scale-75\" />\n        <span>Want efficient resource usage</span>\n      </li>\n  </ul>\n  </div>\n</div>\n```\n\n----------------------------------------\n\nTITLE: Video Component Import in JSX\nDESCRIPTION: Import statements for Video and Image components used in the documentation page\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/scaling-ha.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from '/src/components/Image';\nimport Video from '/src/components/Video';\n```\n\n----------------------------------------\n\nTITLE: Basic Deploy Files Configuration in YAML\nDESCRIPTION: Specifies files and folders to be deployed from build to runtime containers\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - dist\n  - package.json\n```\n\n----------------------------------------\n\nTITLE: Setting Up Development Environment on NixOS\nDESCRIPTION: This command enters a development shell in the Nix environment, providing the necessary tools and dependencies for building zCLI.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_6\n\nLANGUAGE: sh\nCODE:\n```\nnix develop\n```\n\n----------------------------------------\n\nTITLE: Initializing Languages Export Configuration in JSX\nDESCRIPTION: Exports a configuration object defining supported programming languages with their corresponding build pipeline documentation links.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/access.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nexport const languages = [\n    { name: \"Bun\", link: \"/java/how-to/build-pipeline#ports\" },\n    { name: \"Deno\", link: \"/go/how-to/build-pipeline#ports\" },\n    { name: \".NET\", link: \"/dotnet/how-to/build-pipeline#ports\" },\n    { name: \"Elixir\", link: \"/php/how-to/build-pipeline#ports\" },\n    { name: \"Gleam\", link: \"/dotnet/how-to/build-pipeline#ports\" },\n    { name: \"Go\", link: \"/go/how-to/build-pipeline#ports\" },\n    { name: \"Java\", link: \"/java/how-to/build-pipeline#ports\" },\n    { name: \"Node.js\", link: \"/nodejs/how-to/build-pipeline#ports\" },\n    { name: \"PHP\", link: \"/php/how-to/build-pipeline#ports\" },\n    { name: \"Python\", link: \"/python/how-to/build-pipeline#ports\" },\n    { name: \"Rust\", link: \"/rust/how-to/build-pipeline#ports\" },\n]\n```\n\n----------------------------------------\n\nTITLE: Building the Project\nDESCRIPTION: Command to build all workspaces in the monorepo. This verifies that your changes don't cause build errors across the project.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\nyarn build\n```\n\n----------------------------------------\n\nTITLE: Importing and Using React Components in MDX Documentation (JavaScript/MDX)\nDESCRIPTION: Imports React components (Image, ResourceTable) for embedding within MDX-based documentation. These components are used to display screenshots and tabular resource scaling parameters in the rendered page. Prerequisites include the respective React components existing at the specified paths, and the environment must support React-based MDX rendering. Inputs are imported paths, outputs are enhanced MDX content via custom UI components. This approach allows mixing documentation with dynamic or UI-driven embeds.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/keydb/how-to/scale.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\nimport Image from '/src/components/Image';\nimport ResourceTable from '/src/components/ResourceTable';\n```\n\n----------------------------------------\n\nTITLE: JSON Data Import\nDESCRIPTION: Import statement for loading data from a static JSON file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/customize-runtime.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\nimport data from '@site/static/data.json';\n```\n\n----------------------------------------\n\nTITLE: Full Project Configuration with Elixir Service\nDESCRIPTION: Extended YAML configuration example showing project metadata including name, description, and tags. Demonstrates the structure for a more complete project setup.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/create.mdx#2025-04-23_snippet_1\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-project\n  description: A project with a Elixir and PostgreSQL database\n  tags:\n    - DEMO\n    - ZEROPS\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Image Component for Automatic Scaling UI in JSX/MDX\nDESCRIPTION: Displays the 'Automatic Scaling' UI screenshot using the custom `Image` component. It utilizes light/dark mode image sources, provides descriptive alternative text via `alt`, and sets specific width and height styles using the `style` prop. Assumes the `Image` component is imported and available.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/scaling.mdx#2025-04-23_snippet_3\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/gui/automatic-scaling.webp\"\n  darkImage=\"/img/gui/automatic-scaling.webp\"\n  alt=\"Automatic Scaling\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Environment Variable Access Pattern\nDESCRIPTION: Example showing how to reference environment variables from other services using service hostname prefix.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/access.mdx#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\napp_API_TOKEN\n```\n\n----------------------------------------\n\nTITLE: Rendering Database and Message Broker Links in JSX\nDESCRIPTION: This code snippet uses the DocCardList component to render a grid of links for databases, search engines, and message brokers supported by Zerops. It includes icons and labels for each technology.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={4}\n  items={[\n    {\n      type: 'link',\n      href: '/postgresql/getting-started',\n      label: 'PostgreSQL',\n      customProps: {\n        icon: Icons['postgresql'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/mariadb/getting-started',\n      label: 'MariaDB (MySQL)',\n      customProps: {\n        icon: Icons['mariadb'],\n      },\n    },\n    {\n      type: 'link',\n      href: '/keydb/getting-started',\n      label: 'KeyDB (Redis)',\n      customProps: {\n        icon: Icons['keydb'],\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Image Import and Display in JSX\nDESCRIPTION: React component implementation for displaying responsive images with light/dark mode support using the Image component from local source.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/customize-runtime.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from '/src/components/Image';\n\n<p align=\"center\">\n  <Image\n    lightImage=\"/img/screenshots/build_deploy_pipeline_custom_runtime.png\"\n    darkImage=\"/img/screenshots/build_deploy_pipeline_custom_runtime.png\"\n    alt=\"Build Deploy pipeline\"\n    style={{ width: '95%', height: 'auto' }}\n  />\n</p>\n```\n\n----------------------------------------\n\nTITLE: Importing BrandAssets Component in JSX\nDESCRIPTION: This code imports a custom React component called BrandAssets from a specific file path. The component is likely used to display and manage the downloadable brand assets.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/company/branding.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport BrandAssets from '@site/src/components/BrandAssets';\n```\n\n----------------------------------------\n\nTITLE: Implementing FAQ Section with Custom JSX Components\nDESCRIPTION: This snippet demonstrates the usage of custom `FAQ` and `FAQItem` React components within an MDX file to create an interactive frequently asked questions section. Each `FAQItem` takes a `question` prop and displays the answer content nested within it, which can include standard HTML tags (`<a>`, `<p>`) and other custom components like `<Image>`.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/help/faq.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<FAQ>\n  <FAQItem question=\"Where can I find the Zerops Dashboard GUI?\">\n    You can access the Zerops Dashboard GUI directly at <a href=\"https://app.zerops.io\">app.zerops.io</a>.\n  </FAQItem>\n  <FAQItem question=\"How much does it cost to get started?\">\n    It's free to get started, and no credit card is required! However, we\n    recommend visiting our <a href=\"/features/pricing\">pricing page</a> to explore the options that best suit your needs.\n\n    We also have a calculator on our pricing page that can help you estimate the cost of your project.\n  </FAQItem>\n  <FAQItem question=\"Where are your servers located?\">\n    Our infrastructure is hosted in our own high-tier data center in Prague,\n    Czech Republic, running on bare metal servers managed by vshosting's senior\n    admin team. The project was originally started in <a href=\"https://vshosting.eu/\"\n    target=\"_blank\">vshosting.eu</a>, one of the largest providers of managed hosting\n    in Europe.\n    \n    We are actively working on expanding to multiple regions to provide better\n    global coverage - stay tuned for updates on our <a href=\"https://docs.zerops.io/discord\"\n    target=\"_blank\">Discord server</a> and checkout our <a href=\"https://zerops.io/#about\"\n    target=\"_blank\">roadmap</a>!\n  </FAQItem>\n  <FAQItem question=\"Why should I use Zerops over Self-Hosted PaaS?\">\n    We have a detailed article discussing whether you should go for a Self-hosted PaaS → [The rise of self-hosted PaaS — is $5 VPS all you need?](https://zerops.io/article/the-rise-of-self-hosted-paa-s-is-5-vps-all-you-need).\n  </FAQItem>\n  <FAQItem question=\"How do I change my email?\">\n    Navigate to the main menu in the Zerop GUI (with your icon) and add a new user with the selected email to your team.\n    <p align=\"center\">\n        <Image\n        lightImage=\"/img/screenshots/add_user.png\"\n        darkImage=\"/img/screenshots/add_user.png\"\n        alt=\"Runtime Secret Variables\"\n        />\n    </p>\n  </FAQItem>\n  <FAQItem question=\"I have more questions. Where can I reach out to get help?\">\n    You can reach us on our <a href=\"https://docs.zerops.io/discord\" target=\"_blank\">Discord server</a> for support. For additional contact options, please visit our <a href=\"http://localhost:3001/help/contacts\">contacts page</a>.\n  </FAQItem>\n</FAQ>\n```\n\n----------------------------------------\n\nTITLE: Rendering Horizontal Scaling Parameters Table - JSX\nDESCRIPTION: This snippet renders a static HTML table using JSX to visually communicate the minimum and maximum number of containers for horizontal auto scaling of PHP services in Zerops. Dependencies include React, JSX support, and optional className CSS for style control. All parameters and outputs are hardcoded for visual documentation purposes. Intended to be embedded in a React or MDX-powered documentation page.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/scaling.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<table className=\"w-full my-1.5\">\n  <tbody>\n    <tr>\n      <td className=\"w-fit\">\n        <b>minimum containers</b>\n      </td>\n      <td className=\"w-fit\">1</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit\">\n        <b>maximum containers</b>\n      </td>\n      <td className=\"w-fit\">6</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Service Import YAML Configuration\nDESCRIPTION: YAML configuration for adding new services to an existing project, specifically an Elixir service with environment variables.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nproject:\n  name: my-project\nservices:\n  - hostname: app\n    type: elixir@latest\n    minContainers: 1\n    maxContainers: 6\n    envSecrets:\n      S3_ACCESS_KEY_ID: 'P8cX1vVVb'\n      S3_ACCESS_SECRET: 'ogFthuiLYki8XoL73opSCQ'\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via Zerops CLI (sh)\nDESCRIPTION: This command utilizes the Zerops CLI (`zcli`) to fetch the runtime logs for a service's active containers. It displays logs sent to stdout or stderr by the running application. The Zerops CLI must be installed and configured.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: Displaying Recipe Links using DocCardList in JSX\nDESCRIPTION: This JSX snippet uses the `DocCardList` component to display links to external GitHub repositories containing PHP application recipes. It shows a two-column layout, linking to a specific PHP+SQL recipe and a broader search results page for all PHP recipes on the zeropsio GitHub organization.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-php',\n      label: 'PHP + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=php&type=all&language=&sort=',\n      label: 'All PHP recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspired.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Generating Zerops CLI Autocompletion Scripts\nDESCRIPTION: Command to generate shell autocompletion scripts for Zerops CLI. Supports Bash, Fish, PowerShell, and Zsh shells.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli/commands.mdx#2025-04-23_snippet_22\n\nLANGUAGE: sh\nCODE:\n```\nzcli completion {bash|fish|powershell|zsh}\n```\n\n----------------------------------------\n\nTITLE: Importing React Components for Zerops Documentation\nDESCRIPTION: This code snippet imports various React components used for structuring and displaying the documentation page, including card lists and icons.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Documentation Components - Docusaurus - JavaScript/JSX\nDESCRIPTION: This snippet demonstrates the import of various custom components (DocCardList, Icons, LargeCardList, and LargeCard) used to structure and display content within the documentation. These components are dependencies managed by the Docusaurus theme and/or site-level React components. They enable reusable, stylized blocks for organizing cards, icons, and advanced layouts in the tutorial. There are no explicit parameters or configurable inputs in the import statements; instead, these imports enable the subsequent use of these UI building blocks elsewhere in the file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/tutorial/step-by-step.mdx#2025-04-23_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Generated Public Key Example\nDESCRIPTION: Example of a generated RSA public key in PEM format.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/import-yaml/pre-processor.mdx#2025-04-23_snippet_18\n\nLANGUAGE: yaml\nCODE:\n```\nGENERATED_PUBLIC_KEY: |\n  -----BEGIN PUBLIC KEY-----\n  MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAyWMKx+vdEb/Ww19trV9D\n  og7x6d4MCL4u576fVdDjBFhXjXYrK0Y0movvYNe72qtpggW8FnAiKbFNWMLr7mV1\n  2u0JEdPzaqSOX/XKRKWq2q7wyZjGU0uVLJ3Rd2Y4yFyjg6zbvA0Hh5HRgbn7xoRM\n  UbT3mt1lBP+DeHIi9exTvtiNfpO0Z1bidmLLvzLnakg1ei8YWnEAFJi83/MuRMhI\n  WOA32h14WVbvg4SA7++STHF3uHL+kHJ7P/KeqACDBPbgcc9Sz7WsSTAO6Pdry3sr\n  KCP60AMaT2PewB51AtuvFR8nP05WskMgd887KHXZjk9NhDU5E06vz4nf7a3t+it0\n  UwIDAQAB\n  -----END PUBLIC KEY-----\n```\n\n----------------------------------------\n\nTITLE: React JSX Component Import Declarations\nDESCRIPTION: Import statements for React/JSX components used in the documentation page layout, including DocCardList, Icons, and custom card components.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: React DocCardList for Recipes\nDESCRIPTION: JSX implementation showing additional Rust recipes and examples using the DocCardList component with GitHub links.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-rust',\n      label: 'Rust + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=rust&type=all&language=&sort=',\n      label: 'All Rust recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspiration.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Installing zCLI on Windows using PowerShell\nDESCRIPTION: This PowerShell command downloads and executes the zCLI installation script for Windows systems. After execution, zCLI will be installed in either C:\\Program Files\\ or C:\\Program Files (x86)\\.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_1\n\nLANGUAGE: powershell\nCODE:\n```\nirm https://zerops.io/zcli/install.ps1 | iex\n```\n\n----------------------------------------\n\nTITLE: React JSX DocCardList Component Usage\nDESCRIPTION: JSX implementation of a documentation card list component showing quick start guide options with icons and descriptions.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics with one-service app.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Runtime Logs via Zerops CLI\nDESCRIPTION: Command to access runtime container logs using the Zerops CLI tool\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/logs.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log\n```\n\n----------------------------------------\n\nTITLE: Displaying Guide Links using DocCardList in JSX\nDESCRIPTION: This JSX snippet utilizes the `DocCardList` component from Docusaurus to render a two-column list of cards. Each card links to a specific tutorial (`quickstart` or `step-by-step`) and includes a label, a custom icon, and a description, guiding users to the appropriate starting point.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/php/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics on the way.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: JSX DocCardList Component Implementation\nDESCRIPTION: React component implementation for displaying documentation cards with quick start options using DocCardList.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: JSX\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics with one-service app.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Displaying Supported Valkey Versions\nDESCRIPTION: Component usage for displaying supported Valkey versions list. References data from a static JSON file.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/valkey/overview.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<UnorderedList data={data.valkey.readable}/>\n```\n\n----------------------------------------\n\nTITLE: Configuring a Card List for Zerops Support Channels in JSX\nDESCRIPTION: This JSX snippet utilizes the `DocCardList` component, likely within a Docusaurus theme environment, to render a grid of clickable cards. It configures the grid to have two columns (`colSize={6}`) and defines four items, each representing a contact method (Discord, GitHub Issues, Email, Twitter). Each item specifies its type as 'link', provides the target URL (`href`), a display label (`label`), and custom properties (`customProps`) including an icon (referenced from the imported `Icons` object) and a descriptive text.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/help/contacts.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://discord.com/invite/WDvCZ54',\n      label: 'Discord (recommended)',\n      customProps: {\n        icon: Icons['discord'],\n        description:\n          'The fastest way to get help from our team and other community members.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/docs/issues/new/choose',\n      label: 'Report an issue',\n      customProps: {\n        icon: Icons['github'],\n        description:\n          'If you want to report an issue, please click here.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'mailto:support@zerops.io',\n      label: 'Email',\n      customProps: {\n        icon: Icons['envelope'],\n        description:\n          \"Reach the team directly, this might take longer as the community won't be included.\",\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://x.com/zeropsio',\n      label: 'Twitter',\n      customProps: {\n        icon: Icons['twitter'],\n        description:\n          'Reach out to us by direct messagining or by tagging @zeropsio in your tweets for a response.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Accessing Build Logs via zCLI\nDESCRIPTION: Command to access build logs using Zerops CLI\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/logs.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nzcli service log --showBuildLogs\n```\n\n----------------------------------------\n\nTITLE: Video Component Usage Example\nDESCRIPTION: JSX code showing how to implement a video component with auto-play and loop functionality\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/features/scaling-ha.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Video\n  width=\"90%\"\n  autoplay=\"true\"\n  loop=\"loop\"\n  muted=\"muted\"\n  preload=\"none\"\n  src=\"/vids/containers.webm\"\n  plays-inline=\"true\"\n/>\n```\n\n----------------------------------------\n\nTITLE: Creating Email Blade Template\nDESCRIPTION: Blade template for welcome email content using Laravel's mail components\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/smtp.mdx#2025-04-23_snippet_4\n\nLANGUAGE: php\nCODE:\n```\n<x-mail::message>\n# Welcome {{ $user->name }}\n\nThanks for joining our application!\n\n<x-mail::button :url=\"config('app.url')\">\nVisit Dashboard\n</x-mail::button>\n\nThanks,<br>\n{{ config('app.name') }}\n</x-mail::message>\n```\n\n----------------------------------------\n\nTITLE: React JSX DocCardList Component for Recipes\nDESCRIPTION: JSX implementation of a documentation card list component showing additional Deno recipe examples with GitHub links.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/getting-started.mdx#2025-04-23_snippet_2\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio/recipe-onboarding-deno',\n      label: 'Deno + SQL database',\n      customProps: {\n        icon: Icons['github'],\n        description: 'A more complex, multi-service application example.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'https://github.com/zeropsio?q=deno&type=all&language=&sort=',\n      label: 'All Deno recipes',\n      customProps: {\n        icon: Icons['github'],\n        description: 'Browse our Github repositories to get inspired.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: CLI Deploy Command Usage Parameters\nDESCRIPTION: Command line parameters for the zcli service deploy command used for direct deployment without build pipeline. Includes options for archive creation, git folder handling, project/service selection, and working directory configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/trigger-pipeline.mdx#2025-04-23_snippet_1\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service deploy pathToFileOrDir [flags]\n\nFlags:\n      --archiveFilePath string   If set, zCLI creates a tar.gz archive with the application code in the required path relative\n                                 to the working directory. By default, no archive is created.\n      --deployGitFolder          Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n  -h, --help                     the service deploy command.\n      --projectId string         If you have access to more than one project, you must specify the project ID for which the\n                                 command is to be executed.\n      --serviceId string         If you have access to more than one service, you must specify the service ID for which the\n                                 command is to be executed.\n      --versionName string       Adds a custom version name. Automatically filled if the VERSIONNAME environment variable exists.\n      --workingDir string        Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n      --zeropsYamlPath string    Sets a custom path to the zerops.yaml file relative to the working directory. By default zCLI\n                                 looks for zerops.yaml in the working directory.\n```\n\n----------------------------------------\n\nTITLE: Displaying a Tip Block using Markdown Extension\nDESCRIPTION: Uses Docusaurus's admonition syntax (`:::tip ... :::`) to create a styled tip block. This block contains text encouraging users to join the Zerops Discord community for help, including a hyperlink to the Discord invitation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/mariadb/getting-started.mdx#2025-04-23_snippet_3\n\nLANGUAGE: markdown\nCODE:\n```\n:::tip\nDid none of these Guides fit your needs? Join our **[Discord](https://discord.com/invite/WDvCZ54)** community to get help from our team and other members.\n:::\n```\n\n----------------------------------------\n\nTITLE: Deploying Entire Build Container Content using deployFiles\nDESCRIPTION: Shows how to configure `deployFiles` in `zerops.yaml` to deploy the entire content of the build container's working directory (`/var/www`) to the runtime environment. Using `.` as the value achieves this.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/python/how-to/build-pipeline.mdx#2025-04-23_snippet_9\n\nLANGUAGE: yaml\nCODE:\n```\n```yaml\ndeployFiles: .\n```\n```\n\n----------------------------------------\n\nTITLE: React Component Import Declarations\nDESCRIPTION: Import statements for React components used in the documentation page, including DocCardList, Icons, and custom card components.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Deploy All Content Configuration\nDESCRIPTION: Configuration to deploy entire content of build container\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/build-pipeline.mdx#2025-04-23_snippet_10\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles: .\n```\n\n----------------------------------------\n\nTITLE: JSX Import Statements for Documentation Components\nDESCRIPTION: Import statements for React components used in the documentation page, including DocCardList, Icons, and custom card components.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Basic deployFiles Configuration in YAML\nDESCRIPTION: Shows how to specify files and folders to be deployed to runtime service containers from the build output.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/rust/how-to/build-pipeline.mdx#2025-04-23_snippet_4\n\nLANGUAGE: yaml\nCODE:\n```\ndeployFiles:\n  - target/release/~app\n```\n\n----------------------------------------\n\nTITLE: Resulting Environment Variables from import.yaml envSecrets (Env)\nDESCRIPTION: Illustrates the environment variables (`S3_ACCESS_KEY_ID`, `S3_ACCESS_SECRET`) that will be available within the Java service container, as defined in the preceding `import.yaml` example's `envSecrets` section.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration\nDESCRIPTION: Environment variables configuration for S3 access credentials used in the Elixir service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/how-to/create.mdx#2025-04-23_snippet_3\n\nLANGUAGE: env\nCODE:\n```\nS3_ACCESS_KEY_ID=\"P8cX1vVVb\"\nS3_ACCESS_SECRET=\"ogFthuiLYki8XoL73opSCQ\"\n```\n\n----------------------------------------\n\nTITLE: Efficiently Handling Large Tables in Laravel Migrations\nDESCRIPTION: This PHP snippet shows a strategy for handling large tables in Laravel migrations by adding a nullable column and updating data in manageable chunks to prevent blocking operations.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/migrations.mdx#2025-04-23_snippet_7\n\nLANGUAGE: php\nCODE:\n```\npublic function up()\n{\n    // Step 1: Add nullable column to prevent blocking operations\n    Schema::table('large_table', function (Blueprint $table) {\n        $table->string('new_column')->nullable();\n    });\n\n    // Step 2: Update data in manageable chunks\n    DB::table('large_table')\n        ->orderBy('id')\n        ->chunk(1000, function ($records) {\n            foreach ($records as $record) {\n                DB::table('large_table')\n                    ->where('id', $record->id)\n                    ->update(['new_column' => 'default_value']);\n            }\n    });\n}\n```\n\n----------------------------------------\n\nTITLE: Installing zCLI using NPM Package Manager\nDESCRIPTION: This command installs zCLI globally using the NPM package manager. This is an alternative method to the platform-specific installation scripts.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/cli.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nnpm i -g @zerops/zcli\n```\n\n----------------------------------------\n\nTITLE: PrepareCommands Configuration in YAML\nDESCRIPTION: Example showing how to customize the Java runtime environment by installing additional dependencies or tools using prepare commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/java/how-to/build-pipeline.mdx#2025-04-23_snippet_23\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  # hostname of your service\n  - setup: app\n    # ==== how to build your application ====\n    build:\n      ...\n\n    # ==== how to run your application ====\n    run:\n      # OPTIONAL. Customise the runtime environment by installing additional packages\n      # or tools to the base Java runtime environment.\n      prepareCommands:\n        - apt-get something\n        - curl something else\n      ...\n```\n\n----------------------------------------\n\nTITLE: Importing Zerops Project Configuration via CLI\nDESCRIPTION: This command imports the Zerops project configuration from the YAML file using the Zerops CLI tool.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/introduction.mdx#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\nzcli project project-import zerops-project-import.yaml\n```\n\n----------------------------------------\n\nTITLE: Installing and Configuring Twill CMS with Laravel\nDESCRIPTION: The page provides instructions for setting up a Twill CMS production environment, but does not contain actual code snippets. The content describes the infrastructure setup, deployment process, and configuration steps.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/recipes/twill-prod.mdx#2025-04-23_snippet_0\n\n\n\n----------------------------------------\n\nTITLE: Importing Zerops Services using zcli and import.yaml\nDESCRIPTION: Shows the command-line usage for the `zcli project service-import` command. This command adds one or more services defined in an `import.yaml` file (`importYamlPath`) to an existing Zerops project. It requires the path to the YAML configuration file and optionally accepts the `--projectId` flag to specify the target project if the user has access to multiple projects.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/how-to/create.mdx#2025-04-23_snippet_5\n\nLANGUAGE: sh\nCODE:\n```\n```sh\nUsage:\n  zcli project service-import importYamlPath [flags]\n\nFlags:\n  -h, --help               the project service import command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n```\n```\n\n----------------------------------------\n\nTITLE: Configuring Robots.txt Rules for Zerops Documentation\nDESCRIPTION: Standard robots.txt configuration that allows all web crawlers full access to the site and declares the XML sitemap location. This helps search engines properly index the documentation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/static/robots.txt#2025-04-23_snippet_0\n\nLANGUAGE: robots.txt\nCODE:\n```\nUser-agent: *\nAllow: /\n\nSitemap: https://docs.zerops.io/sitemap-docs.xml\n```\n\n----------------------------------------\n\nTITLE: Resource Table Definition in Markdown\nDESCRIPTION: HTML table structure showing the minimum and maximum container configuration for horizontal auto-scaling\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/scaling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: html\nCODE:\n```\n<table className=\"w-full my-1.5\">\n  <tbody>\n    <tr>\n      <td className=\"w-fit\">\n        <b>minimum containers</b>\n      </td>\n      <td className=\"w-fit\">1</td>\n    </tr>\n    <tr>\n      <td className=\"w-fit\">\n        <b>maximum containers</b>\n      </td>\n      <td className=\"w-fit\">6</td>\n    </tr>\n  </tbody>\n</table>\n```\n\n----------------------------------------\n\nTITLE: Using zcli project-import Command for Project Creation\nDESCRIPTION: Command syntax for creating a project based on a description.yaml file. Includes available flags for organization selection and working directory configuration.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/how-to/create.mdx#2025-04-23_snippet_4\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Running Build Commands in a Single Shell Instance\nDESCRIPTION: This example shows how to run all build commands in the same environment context, allowing shared environment variables and directory changes between commands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/bun/how-to/build-pipeline.mdx#2025-04-23_snippet_5\n\nLANGUAGE: yaml\nCODE:\n```\nbuildCommands:\n  - |\n    bun i\n    bun run build\n```\n\n----------------------------------------\n\nTITLE: Setting Multiple Base Technologies for Build Environment\nDESCRIPTION: This snippet shows how to set multiple base technologies for the build environment and add additional tools using prepareCommands.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/deno/how-to/build-pipeline.mdx#2025-04-23_snippet_2\n\nLANGUAGE: yaml\nCODE:\n```\nzerops:\n  - setup: app\n    build:\n      base:\n        - deno@latest\n      prepareCommands:\n        - zsc add go@latest\n      ...\n```\n\n----------------------------------------\n\nTITLE: Multiple CRON Jobs Configuration\nDESCRIPTION: Configuration of multiple scheduled tasks including scheduler, cache clearing, and queue restart jobs.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/frameworks/laravel/cron.mdx#2025-04-23_snippet_3\n\nLANGUAGE: yaml\nCODE:\n```\nrun:\n  crontab:\n    - command: \"php artisan schedule:run\"\n      timing: \"* * * * *\"\n      workingDir: /var/www/html\n    \n    - command: \"php artisan cache:clear\"\n      timing: \"0 0 * * *\"\n      workingDir: /var/www/html\n      \n    - command: \"php artisan queue:restart\"\n      timing: \"0 */6 * * *\"\n      workingDir: /var/www/html\n```\n\n----------------------------------------\n\nTITLE: Using zcli project-import Command\nDESCRIPTION: Command usage syntax for importing a project configuration from a YAML file. Includes available flags for organization ID and working directory specification.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/dotnet/how-to/create.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli project project-import importYamlPath [flags]\n\nFlags:\n  -h, --help                the project import command.\n      --orgId string        If you have access to more than one organization, you must specify the org ID for which the\n                            project is to be created.\n      --workingDie string   Sets a custom working directory. Default working directory is the current directory. (default \"./\")\n```\n\n----------------------------------------\n\nTITLE: Deleting a Zerops Service using zCLI (Shell)\nDESCRIPTION: Displays the command-line usage syntax and options for the `zcli service delete` command. This command is used to remove a service (such as PostgreSQL) from a Zerops project. It requires the service ID or name as an argument and offers flags like `--confirm` to bypass confirmation prompts, `--projectId` to specify the target project when multiple exist, and `--serviceId` as an alternative way to specify the service.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/postgresql/how-to/delete.mdx#2025-04-23_snippet_0\n\nLANGUAGE: sh\nCODE:\n```\nUsage:\n  zcli service delete [serviceIdOrName] [flags]\n\nFlags:\n      --confirm            If set, zCLI will not ask for confirmation of destructive operations.\n  -h, --help               the service delete command.\n      --projectId string   If you have access to more than one project, you must specify the project ID for which the\n                           command is to be executed.\n      --serviceId string   If you have access to more than one service, you must specify the service ID for which the\n                           command is to be executed.\n```\n\n----------------------------------------\n\nTITLE: JSX Component Import Declarations\nDESCRIPTION: Import statements for React/JSX components used in the documentation page layout.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/elixir/getting-started.mdx#2025-04-23_snippet_0\n\nLANGUAGE: JSX\nCODE:\n```\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport LargeCardList from '@site/src/components/LargeCardList';\nimport LargeCard from '@site/src/components/LargeCard';\n```\n\n----------------------------------------\n\nTITLE: Importing Dropdown Components in JSX\nDESCRIPTION: Import statement for Dropdown and DropdownItem components from the src/components directory used for creating expandable content sections.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/company/payment.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport { Dropdown, DropdownItem } from '/src/components/Dropdown';\n```\n\n----------------------------------------\n\nTITLE: Resource Information Output\nDESCRIPTION: Example JSON output from the resources command showing container resource allocation.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"cpuCoreCount\": 1,\n    \"memoryGBytes\": 0.25,\n    \"diskGBytes\": 1\n}\n```\n\n----------------------------------------\n\nTITLE: Completion Command Structure\nDESCRIPTION: Shows how to generate shell autocompletion scripts for ZSC.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/references/zsc.mdx#2025-04-23_snippet_2\n\nLANGUAGE: sh\nCODE:\n```\nzsc completion [command]\n```\n\n----------------------------------------\n\nTITLE: Importing and Using Custom UI Components - React/JSX - JavaScript\nDESCRIPTION: This section imports various React/Docusaurus components such as DocCard, DocCardList, and custom-designed components (TechCard, BackgroundPattern, Icons) and then uses them in JSX layout. These imports enable the construction of rich documentation content and navigation. Prerequisites include the existence of these components within the codebase or as dependencies. Their properties are configured as props, such as arrays and configuration objects.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/homepage.mdx#2025-04-23_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nimport DocCard from '@theme/DocCard';\nimport DocCardList from '@theme/DocCardList';\nimport Icons from '@theme/Icon';\nimport { Button } from 'docs-ui';\nimport Link from '@docusaurus/Link';\nimport IconArrow from '@theme/Icon/Arrow';\nimport TechCard from '../src/components/TechCard'\nimport BackgroundPattern from '../src/components/BackgroundPattern'\n\n```\n\n----------------------------------------\n\nTITLE: Using the Custom Image Component in JSX/MDX\nDESCRIPTION: Displays an image showing Zerops service resources using the custom `Image` component. It supports light/dark mode variations via `lightImage` and `darkImage` props, includes accessibility text via `alt`, and applies specific sizing styles using the `style` prop. Assumes the `Image` component is imported and available in the scope.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/scaling.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<Image\n  lightImage=\"/img/gui/resources.webp\"\n  darkImage=\"/img/gui/resources.webp\"\n  alt=\"Resources of a Zerops service\"\n  style={{ width: '95%', height: 'auto' }}\n/>\n```\n\n----------------------------------------\n\nTITLE: Importing Custom Documentation Components in JavaScript/JSX\nDESCRIPTION: Imports the `Image` and `ResourceTable` React components from the project's source directory. These components are likely used to render images and resource tables consistently within the documentation pages. Requires a build system that handles JSX and module imports.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nodejs/how-to/scaling.mdx#2025-04-23_snippet_0\n\nLANGUAGE: jsx\nCODE:\n```\nimport Image from '/src/components/Image';\nimport ResourceTable from '/src/components/ResourceTable';\n```\n\n----------------------------------------\n\nTITLE: Rendering Guide Options with DocCardList in JSX\nDESCRIPTION: This JSX code creates a list of guide options using the DocCardList component, providing links to quick start and step-by-step tutorials for Gleam on Zerops.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/gleam/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: jsx\nCODE:\n```\n<DocCardList\n  colSize={6}\n  items={[\n    {\n      type: 'link',\n      href: 'tutorial/quickstart',\n      label: 'No-Fuss one click guide (well, almost)',\n      customProps: {\n        icon: Icons['cursor-arrow-rays'],\n        description:\n          'Get the application running in no time. Best if you only want to see how Zerops works.',\n      },\n    },\n    {\n      type: 'link',\n      href: 'tutorial/step-by-step',\n      label: 'Simple tutorial in few easy steps',\n      customProps: {\n        icon: Icons['academic-cap-solid'],\n        description: 'Learn the basics with one-service app.',\n      },\n    },\n  ]}\n/>\n```\n\n----------------------------------------\n\nTITLE: Markdown Frontmatter Configuration\nDESCRIPTION: YAML frontmatter configuration for the documentation page, defining the title and description.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/go/getting-started.mdx#2025-04-23_snippet_1\n\nLANGUAGE: markdown\nCODE:\n```\n---\ntitle: Dive In\ndescription: Get started with go with ease on Zerops.\n---\n```\n\n----------------------------------------\n\nTITLE: Defining Page Metadata using YAML Frontmatter\nDESCRIPTION: This YAML block defines the metadata for the documentation page, including the title and description that are often used for SEO and display purposes within the documentation site.\nSOURCE: https://github.com/zeropsio/docs/blob/main/apps/docs/content/nginx/overview.mdx#2025-04-23_snippet_0\n\nLANGUAGE: yaml\nCODE:\n```\n---\ntitle: Nginx Overview\ndescription: Learn about working with Nginx with ease on Zerops.\n---\n```\n\n----------------------------------------\n\nTITLE: Committing Changes\nDESCRIPTION: Git command to commit your changes with a descriptive message. This provides a record of what modifications were made and why.\nSOURCE: https://github.com/zeropsio/docs/blob/main/CONTRIBUTING.md#2025-04-23_snippet_7\n\nLANGUAGE: bash\nCODE:\n```\ngit commit -m \"Your descriptive commit message\"\n```"
  }
]