[
  {
    "owner": "getstream",
    "repo": "stream-chat-js",
    "content": "TITLE: Initializing Stream Chat Client in JavaScript\nDESCRIPTION: Basic example of initializing the Stream Chat client and creating a channel using JavaScript. This snippet demonstrates the core functionality of connecting to the Stream Chat service.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/README.md#2025-04-22_snippet_3\n\nLANGUAGE: javascript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n// Or if you are on commonjs\nconst StreamChat = require('stream-chat').StreamChat;\n\nconst client = StreamChat.getInstance('YOUR_API_KEY', 'API_KEY_SECRET');\n\nconst channel = client.channel('messaging', 'TestChannel');\nawait channel.create();\n```\n\n----------------------------------------\n\nTITLE: Customizing Stream Chat Client with TypeScript Generics\nDESCRIPTION: Advanced example of initializing the Stream Chat client with custom types using TypeScript generics. This snippet shows how to extend the base types for channels, users, messages, and other entities in the Stream Chat ecosystem.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/README.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\ntype ChatChannel = { image: string; category?: string };\ntype ChatUser1 = { nickname: string; age: number; admin?: boolean };\ntype ChatUser2 = { nickname: string; avatar?: string };\ntype UserMessage = { country?: string };\ntype AdminMessage = { priorityLevel: number };\ntype ChatAttachment = { originalURL?: string };\ntype CustomReaction = { size?: number };\ntype ChatEvent = { quitChannel?: boolean };\ntype CustomCommands = 'giphy';\n\ntype StreamType = {\n  attachmentType: ChatAttachment;\n  channelType: ChatChannel;\n  commandType: CustomCommands;\n  eventType: ChatEvent;\n  messageType: UserMessage | AdminMessage;\n  reactionType: CustomReaction;\n  userType: ChatUser1 | ChatUser2;\n};\n\nconst client = StreamChat.getInstance<StreamType>('YOUR_API_KEY', 'API_KEY_SECRET');\n\n// Create channel\nconst channel = client.channel('messaging', 'TestChannel');\nawait channel.create();\n\n// Create user\nawait client.upsertUser({\n  id: 'vishal-1',\n  name: 'Vishal',\n});\n\n// Send message\nconst { message } = await channel.sendMessage({ text: `Test message` });\n\n// Send reaction\nawait channel.sendReaction(message.id, { type: 'love', user: { id: 'vishal-1' } });\n```\n\n----------------------------------------\n\nTITLE: Initializing StreamChat Client with Custom Types\nDESCRIPTION: Demonstrates how to import the StreamChat client and initialize it with custom type definitions. Shows both server-side and client-side instantiation patterns.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/typescript.md#2025-04-22_snippet_1\n\nLANGUAGE: typescript\nCODE:\n```\nimport { StreamChat } from 'stream-chat';\n// or if you are on commonjs\nconst StreamChat = require('stream-chat').StreamChat;\n\ntype ChatChannel = { image: string; category?: string };\ntype ChatUser1 = { nickname: string; age: number; admin?: boolean };\ntype ChatUser2 = { nickname: string; avatar?: string };\ntype UserMessage = { country?: string };\ntype AdminMessage = { priorityLevel: number };\ntype ChatAttachment = { originalURL?: string };\ntype CustomReaction = { size?: number };\ntype ChatEvent = { quitChannel?: boolean };\ntype CustomCommands = 'giphy';\n\ntype StreamType = {\n  attachmentType: ChatAttachment;\n  channelType: ChatChannel;\n  commandType: CustomCommands;\n  eventType: ChatEvent;\n  messageType: UserMessage | AdminMessage;\n  reactionType: CustomReaction;\n  userType: ChatUser1 | ChatUser2;\n};\n\n// Instantiate a new client (server side)\n// you can also use `new StreamChat<T,T,...>()`\nconst client = StreamChat.getInstance<StreamType>('YOUR_API_KEY', 'API_KEY_SECRET');\n\n/**\n * Instantiate a new client (client side)\n * Unused generics default to Record<string, unknown>\n * with the exception of Command which defaults to string & {}\n */\nconst client = StreamChat.getInstance<StreamType>('YOUR_API_KEY');\n```\n\n----------------------------------------\n\nTITLE: Querying Messages with Type Safety\nDESCRIPTION: Shows examples of valid and invalid message search queries on a channel, demonstrating how intellisense, type checking, and return types are provided for all queries.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/typescript.md#2025-04-22_snippet_4\n\nLANGUAGE: typescript\nCODE:\n```\nconst channel = client.channel('messaging', 'TestChannel');\nawait channel.create();\n\n// Valid queries\n// messages: SearchAPIResponse<ChatAttachment, ChatChannel, CommandTypes, UserMessage | AdminMessage, CustomReaction, ChatUser1 | ChatUser2>\nconst messages = await channel.search({ country: 'NL' });\nconst messages = await channel.search({ priorityLevel: { $gt: 5 } });\nconst messages = await channel.search({\n  $and: [{ priorityLevel: { $gt: 5 } }, { deleted_at: { $exists: false } }],\n});\n\n// Invalid queries\nconst messages = await channel.search({ country: { $eq: 5 } }); // country must be a string\nconst messages = await channel.search({\n  $or: [{ id: '2' }, { reaction_counts: { $eq: 'hello' } }],\n}); // reaction_counts must be a number\n```\n\n----------------------------------------\n\nTITLE: Querying Users with Type Checking\nDESCRIPTION: Shows examples of valid and invalid user queries, demonstrating how the query filters are type-checked to ensure accurate use based on the custom types defined through generics.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/typescript.md#2025-04-22_snippet_2\n\nLANGUAGE: typescript\nCODE:\n```\n// Valid queries\n// users: { duration: string; users: UserResponse<ChatUser1 | ChatUser2>[]; }\nconst users = await client.queryUsers({ id: '1080' });\nconst users = await client.queryUsers({ nickname: 'streamUser' });\nconst users = await client.queryUsers({ nickname: { $eq: 'streamUser' } });\n\n// Invalid queries\nconst users = await client.queryUsers({ nickname: { $contains: ['stream'] } }); // $contains is only an operator on arrays\nconst users = await client.queryUsers({ nickname: 1080 }); // nickname must be a string\nconst users = await client.queryUsers({ name: { $eq: 1080 } }); // name must be a string\n```\n\n----------------------------------------\n\nTITLE: Implementing Type Guards for Union Types\nDESCRIPTION: Demonstrates how to use TypeScript type guards to maintain type safety when working with union types like ChatUser1 | ChatUser2 or UserMessage | AdminMessage.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/typescript.md#2025-04-22_snippet_3\n\nLANGUAGE: typescript\nCODE:\n```\nfunction isChatUser1(user: ChatUser1 | ChatUser2): user is ChatUser1 {\n  return (user as ChatUser1).age !== undefined;\n}\n\nfunction isAdminMessage(msg: UserMessage | AdminMessage): msg is AdminMessage {\n  return (msg as AdminMessage).priorityLevel !== undefined;\n}\n```\n\n----------------------------------------\n\nTITLE: Connecting Users with Type Checking\nDESCRIPTION: Demonstrates how custom types are carried into user creation functions, showing valid and invalid examples of connecting users with the proper type constraints.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/typescript.md#2025-04-22_snippet_5\n\nLANGUAGE: typescript\nCODE:\n```\n// Valid\nclient.connectUser({ id: 'testId', nickname: 'testUser', age: 3 }, 'TestToken');\nclient.connectUser({ id: 'testId', nickname: 'testUser', avatar: 'testAvatar' }, 'TestToken');\n\n// Invalid\nclient.connectUser({ id: 'testId' }, 'TestToken'); // Type ChatUser1 | ChatUser2 requires nickname for both types\nclient.connectUser({ id: 'testId', nickname: true }, 'TestToken'); // nickname must be a string\nclient.connectUser({ id: 'testId', nickname: 'testUser', country: 'NL' }, 'TestToken'); // country does not exist on type ChatUser1 | ChatUser2\n```\n\n----------------------------------------\n\nTITLE: Implementing Retry Logic for Token Provider\nDESCRIPTION: Demonstrates how to implement a robust token provider with retry logic using the async-retry package. This ensures reliable token fetching even during network issues.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/userToken.md#2025-04-22_snippet_2\n\nLANGUAGE: javascript\nCODE:\n```\nconst retry = require('async-retry');\n\nconst fetchTokenFromApi = async () => {\n  const response = await fetch('https://my-api.com/token');\n  const data = await response.json();\n  return data.token;\n};\n\nconst retryableTokenProvider = () => retry(fetchTokenFromApi, { minTimeout: 1000 });\n\nclient.connectUser({ id: 'vishal' }, retryableTokenProvider);\n```\n\n----------------------------------------\n\nTITLE: Implementing Token Provider for Dynamic Authentication\nDESCRIPTION: Shows how to connect a user using a token provider function that dynamically fetches authentication tokens. This approach is recommended for handling token expiration and renewal.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/userToken.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance('api_key');\nclient.connectUser({ id: 'vishal' }, async () => await fetchTokenFromApi());\n```\n\n----------------------------------------\n\nTITLE: Connecting User with Static Token in Stream Chat JS\nDESCRIPTION: Demonstrates how to initialize a Stream Chat client and connect a user using a static token. This approach is simpler but less secure for production environments.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/userToken.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance('api_key');\nclient.connectUser({ id: 'vishal' }, 'user_token_string');\n```\n\n----------------------------------------\n\nTITLE: File Upload Implementation in Node.js\nDESCRIPTION: Node.js implementation for uploading files to Stream Chat, including client initialization, channel creation, and file upload using the file system\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/fileUpload.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst fs = require('fs');\nconst { StreamChat } = require('stream-chat');\n\nconst user = { id: 'user_id' };\nconst apiKey = 'swde2zgm3549'; // use your app key\nconst apiSecret = 'YOUR_SUPER_SECRET_TOKEN'; // use your app secret\nconst client = StreamChat.getInstance(apiKey, apiSecret);\n\nconst channel = client.channel('messaging', 'channel_id', { created_by: user });\nawait channel.create(); // if channel does not exist yet\n\nconst file = fs.createReadStream('./helloworld.txt');\nconst response = await channel.sendFile(file, 'helloworld.txt', 'text/plain', user);\nconsole.log('file url: ', response.file);\n```\n\n----------------------------------------\n\nTITLE: Browser-based File Upload Implementation\nDESCRIPTION: HTML and JavaScript implementation for file uploads in the browser environment, including client initialization, user connection, and file upload handling through HTML input\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/fileUpload.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<!DOCTYPE html>\n<html lang=\"en\">\n  <body>\n    <input id=\"input\" type=\"file\" />\n    <a id=\"link\" href=\"\"></a>\n\n    <script src=\"https://cdn.jsdelivr.net/npm/stream-chat\"></script>\n\n    <script>\n      const apiKey = 'swde2zgm3549'; // use your app key\n      const userId = 'dawn-union-6';\n      const userToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiZGF3bi11bmlvbi02In0.mpf8pgxn5r02EqsChMaw6SdCFCyBBl7VJhyleTqEwho';\n\n      const chatClient = StreamChat.getInstance(apiKey);\n      chatClient.connectUser({ id: userId }, userToken);\n      const channel = chatClient.channel('messaging', userId, { members: [userId] });\n      channel.create();\n\n      const handleFiles = (e) => {\n        channel.sendFile(e.target.files[0]).then((file) => {\n          const link = document.getElementById('link');\n          link.setAttribute('href', file.file);\n          link.text = file.file;\n        });\n      };\n\n      document.getElementById('input').addEventListener('change', handleFiles, false);\n    </script>\n  </body>\n</html>\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging for Server-Side Client in Stream Chat JS SDK\nDESCRIPTION: This snippet shows how to configure logging for a server-side client using the Stream Chat JavaScript SDK. It creates a client instance with an API key, secret, and a custom logger function.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/logging.md#2025-04-22_snippet_1\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance(\n  'api_key',\n  'secret'\n  {\n    logger: (logLevel, message, extraData) => {\n      console.log(message);\n    }\n  }\n)\n```\n\n----------------------------------------\n\nTITLE: Implementing Logging for Non-Server Client in Stream Chat JS SDK\nDESCRIPTION: This snippet demonstrates how to set up logging for a non-server client using the Stream Chat JavaScript SDK. It initializes a client instance with a custom logger function that logs messages to the console.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/logging.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance('api_key', {\n  logger: (logLevel, message, extraData) => {\n    console.log(message); // or any logging tool that you are using e.g. reactotron\n  },\n});\n```\n\n----------------------------------------\n\nTITLE: Handling Event Listeners with Unsubscribe in Stream Chat JS\nDESCRIPTION: Example demonstrating how to subscribe to channel events and later unsubscribe from them using the returned unsubscribe handler.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CHANGELOG.md#2025-04-22_snippet_6\n\nLANGUAGE: javascript\nCODE:\n```\nconst eventHandler = (e) => {\n  /** handle event here */\n};\nconst { unsubscribe } = channel.on(eventHandler);\n\n// When you want to remove listener:\nunsubscribe();\n```\n\n----------------------------------------\n\nTITLE: Shadow Ban User Implementation - JavaScript\nDESCRIPTION: Code examples showing how to implement global and channel-specific shadow banning functionality using the Stream Chat JS client.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CHANGELOG.md#2025-04-22_snippet_7\n\nLANGUAGE: javascript\nCODE:\n```\n// global shadow ban on all channels\nclient.shadowBan(target_user_id);\nclient.removeShadowBan(target_user_id);\n\n// channel speceifc shadow ban\nchannel.shadowBan(target_user_id);\nchannel.removeShadowBan(target_user_id);\n```\n\n----------------------------------------\n\nTITLE: Configuring HTTPS Agent for StreamChat Client in JavaScript\nDESCRIPTION: Example showing how to override the default HTTPS agent when instantiating a StreamChat client. This allows customization of connection settings like keepAlive.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CHANGELOG.md#2025-04-22_snippet_5\n\nLANGUAGE: javascript\nCODE:\n```\nconst client = StreamChat.getInstance(apiKey, {\n  httpsAgent: new https.Agent({\n    keepAlive: true,\n    keepAliveMsecs: 6000,\n  });\n})\n```\n\n----------------------------------------\n\nTITLE: Enabling WebSocket Connection Insights in StreamChat Client\nDESCRIPTION: Example of how to initialize StreamChat client with the insights feature enabled to send data about websocket failures. This helps with debugging connection issues and monitoring client performance.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CHANGELOG.md#2025-04-22_snippet_4\n\nLANGUAGE: TypeScript\nCODE:\n```\nconst client = StreamChat.getInstance('apikey', { enableInsights: true })\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat SDK using NPM\nDESCRIPTION: Command to install the Stream Chat SDK using NPM package manager.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/README.md#2025-04-22_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nnpm install stream-chat\n```\n\n----------------------------------------\n\nTITLE: Installing Stream Chat SDK using Yarn\nDESCRIPTION: Command to install the Stream Chat SDK using Yarn package manager.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/README.md#2025-04-22_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\nyarn add stream-chat\n```\n\n----------------------------------------\n\nTITLE: Including Stream Chat SDK via CDN\nDESCRIPTION: HTML script tag to include the Stream Chat SDK from a CDN for browser-based applications.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/README.md#2025-04-22_snippet_2\n\nLANGUAGE: html\nCODE:\n```\n<script src=\"https://cdn.jsdelivr.net/npm/stream-chat\"></script>\n```\n\n----------------------------------------\n\nTITLE: StreamChat TypeScript Generic Structure Overview\nDESCRIPTION: Shows the generic structure of the StreamChat client, which allows extension of base types through generics with defaults set to Record<string, unknown>.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/typescript.md#2025-04-22_snippet_0\n\nLANGUAGE: typescript\nCODE:\n```\nStreamChat<{\n  attachmentType: AttachmentType;\n  channelType: ChannelType;\n  commandType: CommandType;\n  eventType: EventType;\n  messageType: MessageType;\n  reactionType: ReactionType;\n  userType: UserType;\n}>\n```\n\n----------------------------------------\n\nTITLE: Initializing Stream Chat API Credentials\nDESCRIPTION: Setup of API credentials and user token configuration for Stream Chat authentication\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/fileUpload.md#2025-04-22_snippet_0\n\nLANGUAGE: javascript\nCODE:\n```\nconst apiKey = 'swde2zgm3549';\nconst apiSecret = 'YOUR_SUPER_SECRET_TOKEN';\nconst userId = 'dawn-union-6';\nconst userToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiZGF3bi11bmlvbi02In0.mpf8pgxn5r02EqsChMaw6SdCFCyBBl7VJhyleTqEwho';\n```\n\n----------------------------------------\n\nTITLE: Example of API Request Log Data in Stream Chat JS SDK\nDESCRIPTION: This snippet illustrates the structure of the extraData object for an API request log. It includes tags, URL, payload, and configuration information.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/logging.md#2025-04-22_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"api\", \"api_request\", \"client\"],\n  \"url\": \"https://chat.stream-io-api.com/channels\",\n  \"payload\": { /** payload */ },\n  \"config\": { /** conig object */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of API Response Log Data in Stream Chat JS SDK\nDESCRIPTION: This snippet shows the structure of the extraData object for an API response log. It contains tags, URL, and the response object.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/logging.md#2025-04-22_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"api\", \"api_response\", \"client\"],\n  \"url\": \"https://chat.stream-io-api.com/channels\",\n  \"response\": { /** object */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of API Error Log Data in Stream Chat JS SDK\nDESCRIPTION: This snippet demonstrates the structure of the extraData object for an API error log. It includes tags, URL, and the error object.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/logging.md#2025-04-22_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"api\", \"api_response\", \"client\"],\n  \"url\": \"https://chat.stream-io-api.com/channels\",\n  \"error\": { /** error object */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Event Log Data in Stream Chat JS SDK\nDESCRIPTION: This snippet shows the structure of the extraData object for an event log. It contains tags and the event object.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/logging.md#2025-04-22_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"event\", \"client\"],\n  \"event\": { /** event object */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Example of Channel Log Data in Stream Chat JS SDK\nDESCRIPTION: This snippet illustrates the structure of the extraData object for a channel log. It includes tags and the channel object.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/docs/logging.md#2025-04-22_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"tags\": [\"channel\"],\n  \"channel\": { /** channel object */ }\n}\n```\n\n----------------------------------------\n\nTITLE: Adding Jump to Message Feature in JavaScript\nDESCRIPTION: This code implements a 'Jump to message' feature in the stream-chat-js library.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CHANGELOG.md#2025-04-22_snippet_3\n\nLANGUAGE: JavaScript\nCODE:\n```\nJump to message ([#851](https://github.com/GetStream/stream-chat-js/issues/851)) ([6eca258](https://github.com/GetStream/stream-chat-js/commit/6eca2583a6392f9aa9fab13f12fbf026ce887c36))\n```\n\n----------------------------------------\n\nTITLE: Fixing Token Provider Rejection in JavaScript\nDESCRIPTION: This code snippet fixes an issue with token provider rejection handling in the stream-chat-js library.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CHANGELOG.md#2025-04-22_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\ncatch tokenProvider rejection ([#934](https://github.com/GetStream/stream-chat-js/issues/934)) ([250aea6](https://github.com/GetStream/stream-chat-js/commit/250aea61d028a66999a4870d6617dfaed847b10b))\n```\n\n----------------------------------------\n\nTITLE: Adding Provider Management in JavaScript\nDESCRIPTION: This code adds provider management functionality to the stream-chat-js library.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CHANGELOG.md#2025-04-22_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\nadd provider management ([#930](https://github.com/GetStream/stream-chat-js/issues/930)) ([2d35b81](https://github.com/GetStream/stream-chat-js/commit/2d35b81e18dba5d8f66c8b4ecac3753ed425ced9))\n```\n\n----------------------------------------\n\nTITLE: Running Tests for Stream Chat JS\nDESCRIPTION: Commands to run type checking and unit tests for the project using yarn.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CONTRIBUTING.md#2025-04-22_snippet_1\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn test-types\n$ yarn run test-unit\n```\n\n----------------------------------------\n\nTITLE: Installing Dependencies for Stream Chat JS\nDESCRIPTION: Command to install project dependencies using yarn with specific flags to ensure consistent installations.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CONTRIBUTING.md#2025-04-22_snippet_0\n\nLANGUAGE: shell\nCODE:\n```\n$ yarn install --frozen-lockfile --ignore-engines\n```\n\n----------------------------------------\n\nTITLE: Providing Email Address for Security Vulnerability Reports in Markdown\nDESCRIPTION: This code snippet provides the email address for reporting security vulnerabilities to Stream. It uses Markdown syntax to create a clickable mailto link.\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/SECURITY.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n[security@getstream.io](mailto:security@getstream.io)\n```\n\n----------------------------------------\n\nTITLE: Version Headers and Change Types in Markdown\nDESCRIPTION: Markdown formatted changelog entries showing version numbers, dates, links to compare views, and categorized changes (Features, Bug Fixes)\nSOURCE: https://github.com/getstream/stream-chat-js/blob/master/CHANGELOG.md#2025-04-22_snippet_0\n\nLANGUAGE: markdown\nCODE:\n```\n### [8.12.4](https://github.com/GetStream/stream-chat-js/compare/v8.12.3...v8.12.4) (2023-10-06)\n\n### Bug Fixes\n\n* evaluate channel.lastRead when channel is not initialized ([#1183](https://github.com/GetStream/stream-chat-js/issues/1183)) ([13fa28a](https://github.com/GetStream/stream-chat-js/commit/13fa28a75ca623fc5b7b328aaa9edb3e87f99f1c))\n```"
  }
]