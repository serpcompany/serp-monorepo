[
  {
    "owner": "stephengpope",
    "repo": "no-code-architects-toolkit",
    "content": "TITLE: Making Authentication Request with cURL\nDESCRIPTION: Example of how to make an authentication request to the endpoint using cURL, demonstrating the required X-API-Key header.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/toolkit/authenticate.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET -H \"X-API-Key: YOUR_API_KEY\" http://localhost:8080/v1/toolkit/authenticate\n```\n\n----------------------------------------\n\nTITLE: Initializing Next.js Application Structure in JavaScript\nDESCRIPTION: This snippet defines the core structure of a Next.js application, including HTML setup, body classes, and error handling components. It sets up the main layout and includes placeholders for dynamic content.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/services/v1/media/feedback/static/index.txt#2025-04-23_snippet_0\n\nLANGUAGE: JavaScript\nCODE:\n```\n{\n  \"P\": null,\n  \"b\": \"IKZmjEopX3I__YqoGlhxM\",\n  \"p\": \"\",\n  \"c\": [\"\", \"\"],\n  \"i\": false,\n  \"f\": [\n    [\n      [\"\", {\"children\": [\"__PAGE__\", {}]}, \"$undefined\", \"$undefined\", true],\n      [\n        \"\",\n        [\n          \"$\",\n          \"$1\",\n          \"c\",\n          {\n            \"children\": [\n              [\n                [\"$\", \"link\", \"0\", {\"rel\": \"stylesheet\", \"href\": \"/_next/static/css/6c55a5ad1761972b.css\", \"precedence\": \"next\", \"crossOrigin\": \"$undefined\", \"nonce\": \"$undefined\"}]\n              ],\n              [\"$\", \"html\", null, {\"lang\": \"en\", \"children\": [\"$\", \"body\", null, {\"className\": \"__variable_4d318d __variable_ea5f4b antialiased\", \"children\": [\"$\", \"$L2\", null, {\"parallelRouterKey\": \"children\", \"error\": \"$undefined\", \"errorStyles\": \"$undefined\", \"errorScripts\": \"$undefined\", \"template\": [\"$\", \"$L3\", null, {}], \"templateStyles\": \"$undefined\", \"templateScripts\": \"$undefined\", \"notFound\": [[[\n                \"$\", \"title\", null, {\"children\": \"404: This page could not be found.\"}\n              ], [\n                \"$\", \"div\", null, {\"style\": {\"fontFamily\": \"system-ui,\\\"Segoe UI\\\",Roboto,Helvetica,Arial,sans-serif,\\\"Apple Color Emoji\\\",\\\"Segoe UI Emoji\\\"\", \"height\": \"100vh\", \"textAlign\": \"center\", \"display\": \"flex\", \"flexDirection\": \"column\", \"alignItems\": \"center\", \"justifyContent\": \"center\"}, \"children\": [\"$\", \"div\", null, {\"children\": [[\"$\", \"style\", null, {\"dangerouslySetInnerHTML\": {\"__html\": \"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}\"}}], [\"$\", \"h1\", null, {\"className\": \"next-error-h1\", \"style\": {\"display\": \"inline-block\", \"margin\": \"0 20px 0 0\", \"padding\": \"0 23px 0 0\", \"fontSize\": 24, \"fontWeight\": 500, \"verticalAlign\": \"top\", \"lineHeight\": \"49px\"}, \"children\": 404}], [\"$\", \"div\", null, {\"style\": {\"display\": \"inline-block\"}, \"children\": [\"$\", \"h2\", null, {\"style\": {\"fontSize\": 14, \"fontWeight\": 400, \"lineHeight\": \"49px\", \"margin\": 0}, \"children\": \"This page could not be found.\"}]}]]}]}]\n              ]], \"$undefined\", []]}, \"forbidden\": \"$undefined\", \"unauthorized\": \"$undefined\"}]}]}]\n            ]\n          }\n        ]\n      ]\n    ]\n  ],\n  \"m\": \"$undefined\",\n  \"G\": [\"$f\", \"$undefined\"],\n  \"s\": false,\n  \"S\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request for Media Conversion\nDESCRIPTION: A sample JSON request body for the media convert endpoint, specifying the source media URL, target format, and various encoding parameters for both video and audio.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/convert/media_convert.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"media_url\": \"https://example.com/video.mp4\",\n  \"format\": \"avi\",\n  \"video_codec\": \"libx264\",\n  \"video_preset\": \"medium\",\n  \"video_crf\": 23,\n  \"audio_codec\": \"aac\",\n  \"audio_bitrate\": \"128k\",\n  \"webhook_url\": \"https://example.com/webhook\",\n  \"id\": \"unique-request-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Running Docker Container for No-Code Architects Toolkit\nDESCRIPTION: Command to run the Docker container for the No-Code Architects Toolkit API. It includes environment variable configurations for authentication, cloud storage, and performance tuning.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/README.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ndocker run -d -p 8080:8080 \\\n  # Authentication (required)\n  -e API_KEY=your_api_key \\\n  \n  # Cloud storage provider (choose one)\n  -e GCP_SA_CREDENTIALS='{\"your\":\"service_account_json\"}' \\\n  -e GCP_BUCKET_NAME=your_gcs_bucket_name \\\n\n  # Or\n  -e S3_ENDPOINT_URL=https://nyc3.digitaloceanspaces.com \\\n  -e S3_ACCESS_KEY=your_access_key \\\n  -e S3_SECRET_KEY=your_secret_key \\\n  -e S3_BUCKET_NAME=your_bucket_name \\\n  -e S3_REGION=nyc3 \\\n  \n  # Local storage configuration (optional)\n  -e LOCAL_STORAGE_PATH=/tmp \\\n  \n  # Performance tuning (optional)\n  -e MAX_QUEUE_LENGTH=10 \\\n  -e GUNICORN_WORKERS=4 \\\n  -e GUNICORN_TIMEOUT=300 \\\n  \n  no-code-architects-toolkit\n```\n\n----------------------------------------\n\nTITLE: Building Docker Image for No-Code Architects Toolkit\nDESCRIPTION: Command to build the Docker image for the No-Code Architects Toolkit API. This step is necessary before running the container.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/README.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ndocker build -t no-code-architects-toolkit .\n```\n\n----------------------------------------\n\nTITLE: Environment Variables Configuration for Digital Ocean App Platform\nDESCRIPTION: Required environment variables that must be configured for the No-Code Architects Toolkit to function properly on Digital Ocean. These variables handle API authentication and S3-compatible storage configuration.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/cloud-installation/do.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nAPI_KEY=test123\nS3_ENDPOINT_URL=[your-space-url]\nS3_ACCESS_KEY=[access-key]\nS3_SECRET_KEY=[secret-key]\nS3_BUCKET_NAME=nca-toolkit-bucket\nS3_REGION=NYC3\n```\n\n----------------------------------------\n\nTITLE: Loading Next.js Resources in JavaScript\nDESCRIPTION: This snippet defines resource loading instructions for a Next.js application, including fonts and stylesheets. It specifies the URLs and types of resources to be loaded, ensuring proper styling and font rendering.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/services/v1/media/feedback/static/index.txt#2025-04-23_snippet_2\n\nLANGUAGE: JavaScript\nCODE:\n```\n:HL[\"/_next/static/media/569ce4b8f30dc480-s.p.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\n:HL[\"/_next/static/media/93f479601ee12b01-s.p.woff2\",\"font\",{\"crossOrigin\":\"\",\"type\":\"font/woff2\"}]\n:HL[\"/_next/static/css/6c55a5ad1761972b.css\",\"style\"]\n:HL[\"/_next/static/css/998a630a136a8118.css\",\"style\"]\n```\n\n----------------------------------------\n\nTITLE: Successful Media Metadata Response in JSON\nDESCRIPTION: This snippet demonstrates the JSON structure of a successful response from the Media Metadata API. It includes detailed metadata about the media file, such as filesize, duration, format, bitrate, and codec information for both video and audio.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/metadata.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 200,\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"id\": \"custom-id\",\n  \"response\": {\n    \"filesize\": 15679283,\n    \"filesize_mb\": 14.95,\n    \"duration\": 87.46,\n    \"duration_formatted\": \"00:01:27.46\",\n    \"format\": \"mp4,mov,m4a,3gp,3g2,mj2\",\n    \"overall_bitrate\": 1438692,\n    \"overall_bitrate_mbps\": 1.44,\n    \"has_video\": true,\n    \"video_codec\": \"h264\",\n    \"video_codec_long\": \"H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10\",\n    \"width\": 1920,\n    \"height\": 1080,\n    \"resolution\": \"1920x1080\",\n    \"fps\": 30.0,\n    \"video_bitrate\": 1300000,\n    \"video_bitrate_mbps\": 1.3,\n    \"pixel_format\": \"yuv420p\",\n    \"has_audio\": true,\n    \"audio_codec\": \"aac\",\n    \"audio_codec_long\": \"AAC (Advanced Audio Coding)\",\n    \"audio_channels\": 2,\n    \"audio_sample_rate\": 48000,\n    \"audio_sample_rate_khz\": 48.0,\n    \"audio_bitrate\": 128000,\n    \"audio_bitrate_kbps\": 128\n  },\n  \"message\": \"success\",\n  \"run_time\": 0.542,\n  \"queue_time\": 0,\n  \"total_time\": 0.542,\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 0,\n  \"build_number\": \"123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Configuring Next.js Metadata and Links in JavaScript\nDESCRIPTION: This snippet defines metadata and link configurations for a Next.js application, including character set, viewport settings, favicon, and page title. It sets up essential HTML head elements for SEO and browser compatibility.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/services/v1/media/feedback/static/index.txt#2025-04-23_snippet_1\n\nLANGUAGE: JavaScript\nCODE:\n```\nc:[[\"$\",\"meta\",\"0\",{\"charSet\":\"utf-8\"}],[\"$\",\"meta\",\"1\",{\"name\":\"viewport\",\"content\":\"width=device-width, initial-scale=1\"}]]\n9:null\na:null\ne:[[\"$\",\"title\",\"0\",{\"children\":\"Feedback Magic v1.0\"}],[\"$\",\"meta\",\"1\",{\"name\":\"description\",\"content\":\"Generated by create next app\"}],[\"$\",\"link\",\"2\",{\"rel\":\"icon\",\"href\":\"/favicon.ico\",\"type\":\"image/x-icon\",\"sizes\":\"1483x1204\"}]]\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for Video Concatenation Request in JSON\nDESCRIPTION: This JSON schema defines the structure and validation rules for the request body of the /v1/video/concatenate endpoint. It specifies required properties, data types, and formats for video URLs, webhook URL, and request ID.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/concatenate.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"video_urls\": {\n            \"type\": \"array\",\n            \"items\": {\n                \"type\": \"object\",\n                \"properties\": {\n                    \"video_url\": {\"type\": \"string\", \"format\": \"uri\"}\n                },\n                \"required\": [\"video_url\"]\n            },\n            \"minItems\": 1\n        },\n        \"webhook_url\": {\"type\": \"string\", \"format\": \"uri\"},\n        \"id\": {\"type\": \"string\"}\n    },\n    \"required\": [\"video_urls\"],\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Authentication Response Format\nDESCRIPTION: JSON response structure returned when authentication is successful with a 200 OK status code. Includes metadata like job ID, processing times, and build number.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/toolkit/authenticate.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 200,\n  \"endpoint\": \"/authenticate\",\n  \"id\": null,\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 1234567890,\n  \"queue_length\": 0,\n  \"response\": \"Authorized\",\n  \"run_time\": 0.001,\n  \"total_time\": 0.001,\n  \"queue_time\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request Body Schema Validation in JSON\nDESCRIPTION: JSON schema that defines the structure and validation rules for the API request body. Specifies required and optional fields with their types and constraints.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/code/execute/execute_python.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"code\": {\"type\": \"string\"},\n        \"timeout\": {\"type\": \"integer\", \"minimum\": 1, \"maximum\": 300},\n        \"webhook_url\": {\"type\": \"string\", \"format\": \"uri\"},\n        \"id\": {\"type\": \"string\"}\n    },\n    \"required\": [\"code\"],\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: FFmpeg Compose API Request Structure in JSON\nDESCRIPTION: Example JSON payload for the /v1/ffmpeg/compose endpoint, demonstrating how to structure a request with multiple inputs, filters, outputs, and metadata options.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/ffmpeg/ffmpeg_compose.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"inputs\": [\n    {\n      \"file_url\": \"https://example.com/video1.mp4\",\n      \"options\": [\n        {\n          \"option\": \"-ss\",\n          \"argument\": 10\n        },\n        {\n          \"option\": \"-t\",\n          \"argument\": 20\n        }\n      ]\n    },\n    {\n      \"file_url\": \"https://example.com/video2.mp4\"\n    }\n  ],\n  \"filters\": [\n    {\n      \"filter\": \"hflip\"\n    }\n  ],\n  \"outputs\": [\n    {\n      \"options\": [\n        {\n          \"option\": \"-c:v\",\n          \"argument\": \"libx264\"\n        },\n        {\n          \"option\": \"-crf\",\n          \"argument\": 23\n        }\n      ]\n    }\n  ],\n  \"global_options\": [\n    {\n      \"option\": \"-y\"\n    }\n  ],\n  \"metadata\": {\n    \"thumbnail\": true,\n    \"filesize\": true,\n    \"duration\": true,\n    \"bitrate\": true,\n    \"encoder\": true\n  },\n  \"webhook_url\": \"https://example.com/webhook\",\n  \"id\": \"unique-request-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending POST Request to Media Transcription API using cURL\nDESCRIPTION: This cURL command demonstrates how to send a POST request to the Media Transcription API endpoint. It includes the necessary headers and a JSON payload with various optional parameters.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/media_transcribe.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \"https://api.example.com/v1/media/transcribe\" \\\n  -H \"x-api-key: your_api_key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"media_url\": \"https://example.com/media/file.mp3\",\n    \"task\": \"transcribe\",\n    \"include_text\": true,\n    \"include_srt\": true,\n    \"include_segments\": true,\n    \"response_type\": \"cloud\",\n    \"webhook_url\": \"https://your-webhook.com/callback\",\n    \"id\": \"custom-job-123\",\n    \"max_words_per_line\": 5\n  }'\n```\n\n----------------------------------------\n\nTITLE: Defining Caption Settings Schema - JSON\nDESCRIPTION: JSON schema defining all available caption styling options including colors, positioning, font properties, and special effects like karaoke mode.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/caption_video.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"line_color\": {\"type\": \"string\"},\n        \"word_color\": {\"type\": \"string\"},\n        \"outline_color\": {\"type\": \"string\"},\n        \"all_caps\": {\"type\": \"boolean\"},\n        \"max_words_per_line\": {\"type\": \"integer\"},\n        \"x\": {\"type\": \"integer\"},\n        \"y\": {\"type\": \"integer\"},\n        \"position\": {\n            \"type\": \"string\",\n            \"enum\": [\n                \"bottom_left\", \"bottom_center\", \"bottom_right\",\n                \"middle_left\", \"middle_center\", \"middle_right\",\n                \"top_left\", \"top_center\", \"top_right\"\n            ]\n        },\n        \"alignment\": {\n            \"type\": \"string\",\n            \"enum\": [\"left\", \"center\", \"right\"]\n        },\n        \"font_family\": {\"type\": \"string\"},\n        \"font_size\": {\"type\": \"integer\"},\n        \"bold\": {\"type\": \"boolean\"},\n        \"italic\": {\"type\": \"boolean\"},\n        \"underline\": {\"type\": \"boolean\"},\n        \"strikeout\": {\"type\": \"boolean\"},\n        \"style\": {\n            \"type\": \"string\",\n            \"enum\": [\n                \"classic\",\n                \"karaoke\",\n                \"highlight\",\n                \"underline\",\n                \"word_by_word\"\n            ]\n        },\n        \"outline_width\": {\"type\": \"integer\"},\n        \"spacing\": {\"type\": \"integer\"},\n        \"angle\": {\"type\": \"integer\"},\n        \"shadow_offset\": {\"type\": \"integer\"}\n    },\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request for Video Thumbnail Generation\nDESCRIPTION: Sample JSON payload for the /v1/video/thumbnail API endpoint, demonstrating how to specify the video URL, timestamp, webhook URL, and custom ID.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/thumbnail.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"video_url\": \"https://example.com/video.mp4\",\n  \"second\": 30,\n  \"webhook_url\": \"https://your-service.com/webhook\",\n  \"id\": \"custom-request-123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format for Media Conversion\nDESCRIPTION: The JSON response structure returned upon successful media conversion, containing the URL of the converted file, job metadata, and performance statistics.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/convert/media_convert.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 200,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"response\": \"https://cloud.example.com/converted-video.avi\",\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 1234567890,\n  \"run_time\": 10.234,\n  \"queue_time\": 0.123,\n  \"total_time\": 10.357,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Request Body for Audio Concatenation API\nDESCRIPTION: JSON request body showing the structure for concatenating multiple audio files with optional webhook URL and custom ID.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/audio/concatenate.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"audio_urls\": [\n    { \"audio_url\": \"https://example.com/audio1.mp3\" },\n    { \"audio_url\": \"https://example.com/audio2.mp3\" },\n    { \"audio_url\": \"https://example.com/audio3.mp3\" }\n  ],\n  \"webhook_url\": \"https://your-webhook-endpoint.com/callback\",\n  \"id\": \"custom-request-id-123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Success JSON Response for Media Download API\nDESCRIPTION: Example JSON response for a successful media download. Includes detailed information about the downloaded media, thumbnails, and processing statistics.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_8\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 200,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"response\": {\n    \"media\": {\n      \"media_url\": \"https://storage.example.com/media/video-123.mp4\",\n      \"title\": \"Never Gonna Give You Up\",\n      \"format_id\": \"22\",\n      \"ext\": \"mp4\",\n      \"resolution\": \"720p\",\n      \"filesize\": 12345678,\n      \"width\": 1280,\n      \"height\": 720,\n      \"fps\": 30,\n      \"video_codec\": \"avc1.4d401f\",\n      \"audio_codec\": \"mp4a.40.2\",\n      \"upload_date\": \"20090325\",\n      \"duration\": 212,\n      \"view_count\": 1234567890,\n      \"uploader\": \"Rick Astley\",\n      \"uploader_id\": \"RickAstleyVEVO\",\n      \"description\": \"Official music video for Rick Astley - Never Gonna Give You Up\"\n    },\n    \"thumbnails\": [\n      {\n        \"id\": \"default\",\n        \"image_url\": \"https://storage.example.com/media/thumbnail-123.jpg\",\n        \"width\": 1280,\n        \"height\": 720,\n        \"original_format\": \"jpg\",\n        \"converted\": false\n      }\n    ]\n  },\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"run_time\": 5.123,\n  \"queue_time\": 0.456,\n  \"total_time\": 5.579,\n  \"queue_length\": 2,\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Request Body for Video Cut API\nDESCRIPTION: Demonstrates the structure of the JSON request body for the video cut endpoint, including required and optional parameters for video cutting and encoding.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/cut.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"video_url\": \"https://example.com/video.mp4\",\n  \"cuts\": [\n    {\n      \"start\": \"00:00:10.000\",\n      \"end\": \"00:00:20.000\"\n    },\n    {\n      \"start\": \"00:00:30.000\",\n      \"end\": \"00:00:40.000\"\n    }\n  ],\n  \"video_codec\": \"libx264\",\n  \"video_preset\": \"medium\",\n  \"video_crf\": 23,\n  \"audio_codec\": \"aac\",\n  \"audio_bitrate\": \"128k\",\n  \"webhook_url\": \"https://example.com/webhook\",\n  \"id\": \"unique-request-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Request Payload Schema JSON\nDESCRIPTION: JSON schema definition for validating the request payload. Defines required and optional parameters with their types and constraints.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/image/convert/image_to_video.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"image_url\": {\"type\": \"string\", \"format\": \"uri\"},\n        \"length\": {\"type\": \"number\", \"minimum\": 1, \"maximum\": 60},\n        \"frame_rate\": {\"type\": \"integer\", \"minimum\": 15, \"maximum\": 60},\n        \"zoom_speed\": {\"type\": \"number\", \"minimum\": 0, \"maximum\": 100},\n        \"webhook_url\": {\"type\": \"string\", \"format\": \"uri\"},\n        \"id\": {\"type\": \"string\"}\n    },\n    \"required\": [\"image_url\"],\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Example Media Metadata Response in JSON\nDESCRIPTION: This snippet shows an example of a successful response from the Media Metadata API, including detailed metadata about a video file such as filesize, duration, format, and codec information.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/metadata.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 200,\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"response\": {\n    \"filesize\": 15679283,\n    \"filesize_mb\": 14.95,\n    \"duration\": 87.46,\n    \"duration_formatted\": \"00:01:27.46\",\n    \"format\": \"mp4\",\n    \"overall_bitrate\": 1438692,\n    \"overall_bitrate_mbps\": 1.44,\n    \"has_video\": true,\n    \"video_codec\": \"h264\",\n    \"width\": 1920,\n    \"height\": 1080,\n    \"resolution\": \"1920x1080\",\n    \"fps\": 30.0,\n    \"video_bitrate\": 1300000,\n    \"video_bitrate_mbps\": 1.3,\n    \"has_audio\": true,\n    \"audio_codec\": \"aac\",\n    \"audio_channels\": 2,\n    \"audio_sample_rate\": 48000,\n    \"audio_bitrate\": 128000,\n    \"audio_bitrate_kbps\": 128\n  },\n  \"message\": \"success\",\n  \"run_time\": 0.542,\n  \"total_time\": 0.542\n}\n```\n\n----------------------------------------\n\nTITLE: Example Video Split Request JSON\nDESCRIPTION: Sample JSON request body showing all available parameters for the video split endpoint, including video URL, split timestamps, and encoding options.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/split.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"video_url\": \"https://example.com/video.mp4\",\n  \"splits\": [\n    {\n      \"start\": \"00:00:10.000\",\n      \"end\": \"00:00:20.000\"\n    },\n    {\n      \"start\": \"00:00:30.000\",\n      \"end\": \"00:00:40.000\"\n    }\n  ],\n  \"video_codec\": \"libx264\",\n  \"video_preset\": \"medium\",\n  \"video_crf\": 23,\n  \"audio_codec\": \"aac\",\n  \"audio_bitrate\": \"128k\",\n  \"webhook_url\": \"https://example.com/webhook\",\n  \"id\": \"unique-request-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining JSON Schema for MP3 Conversion Request in Flask API\nDESCRIPTION: JSON schema used to validate the request payload for the MP3 conversion endpoint. It specifies required and optional parameters with their types and formats.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/convert/media_to_mp3.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"media_url\": {\"type\": \"string\", \"format\": \"uri\"},\n        \"webhook_url\": {\"type\": \"string\", \"format\": \"uri\"},\n        \"id\": {\"type\": \"string\"},\n        \"bitrate\": {\"type\": \"string\", \"pattern\": \"^[0-9]+k$\"}\n    },\n    \"required\": [\"media_url\"],\n    \"additionalProperties\": false\n}\n```\n\n----------------------------------------\n\nTITLE: Constructing Silence Detection API Request in JSON\nDESCRIPTION: This JSON object demonstrates how to structure a request to the silence detection endpoint. It includes all possible parameters with example values.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/silence.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"media_url\": \"https://example.com/audio.mp3\",\n    \"start\": \"00:00:10.0\",\n    \"end\": \"00:01:00.0\",\n    \"noise\": \"-25dB\",\n    \"duration\": 0.5,\n    \"mono\": false,\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Video Trim Request with JSON Payload\nDESCRIPTION: This snippet demonstrates how to structure the JSON payload for a video trim request. It includes all possible parameters such as video URL, start and end times, encoding settings, and webhook URL.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/trim.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"video_url\": \"https://example.com/video.mp4\",\n  \"start\": \"00:01:00\",\n  \"end\": \"00:03:00\",\n  \"video_codec\": \"libx264\",\n  \"video_preset\": \"faster\",\n  \"video_crf\": 28,\n  \"audio_codec\": \"aac\",\n  \"audio_bitrate\": \"128k\",\n  \"webhook_url\": \"https://example.com/webhook\",\n  \"id\": \"unique-request-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Requests - JSON\nDESCRIPTION: Sample JSON request bodies demonstrating different captioning scenarios including basic auto-captioning, custom styling, karaoke mode, and external subtitle file usage.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/caption_video.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"video_url\": \"https://example.com/video.mp4\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"video_url\": \"https://example.com/video.mp4\",\n    \"captions\": \"This is a sample caption text.\",\n    \"settings\": {\n        \"style\": \"classic\",\n        \"line_color\": \"#FFFFFF\",\n        \"outline_color\": \"#000000\",\n        \"position\": \"bottom_center\",\n        \"alignment\": \"center\",\n        \"font_family\": \"Arial\",\n        \"font_size\": 24,\n        \"bold\": true\n    }\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"video_url\": \"https://example.com/video.mp4\",\n    \"settings\": {\n        \"line_color\": \"#FFFFFF\",\n        \"word_color\": \"#FFFF00\",\n        \"outline_color\": \"#000000\",\n        \"all_caps\": false,\n        \"max_words_per_line\": 10,\n        \"position\": \"bottom_center\",\n        \"alignment\": \"center\",\n        \"font_family\": \"Arial\",\n        \"font_size\": 24,\n        \"bold\": false,\n        \"italic\": false,\n        \"style\": \"karaoke\",\n        \"outline_width\": 2,\n        \"shadow_offset\": 2\n    },\n    \"replace\": [\n        {\n            \"find\": \"um\",\n            \"replace\": \"\"\n        },\n        {\n            \"find\": \"like\",\n            \"replace\": \"\"\n        }\n    ],\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"request-123\",\n    \"language\": \"en\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"video_url\": \"https://example.com/video.mp4\",\n    \"captions\": \"https://example.com/subtitles.srt\",\n    \"settings\": {\n        \"line_color\": \"#FFFFFF\",\n        \"outline_color\": \"#000000\",\n        \"position\": \"bottom_center\",\n        \"font_family\": \"Arial\",\n        \"font_size\": 24\n    }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Media Metadata Request in JSON\nDESCRIPTION: This snippet shows the JSON structure for sending a request to the Media Metadata API. It includes the media_url, an optional webhook_url for receiving results, and an optional custom id.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/metadata.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"media_url\": \"https://example.com/media.mp4\",\n  \"webhook_url\": \"https://example.com/webhook\",  // Optional\n  \"id\": \"custom-id\"  // Optional\n}\n```\n\n----------------------------------------\n\nTITLE: Request Body Schema for Media Cut API\nDESCRIPTION: JSON schema showing the structure of a media cut request with all possible parameters including media URL, cut segments, and encoding options.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/cut.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"media_url\": \"https://example.com/video.mp4\",\n  \"cuts\": [\n    {\n      \"start\": \"00:00:10.000\",\n      \"end\": \"00:00:20.000\"\n    },\n    {\n      \"start\": \"00:00:30.000\",\n      \"end\": \"00:00:40.000\"\n    }\n  ],\n  \"video_codec\": \"libx264\",\n  \"video_preset\": \"medium\",\n  \"video_crf\": 23,\n  \"audio_codec\": \"aac\",\n  \"audio_bitrate\": \"128k\",\n  \"webhook_url\": \"https://example.com/webhook\",\n  \"id\": \"unique-request-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example Video Concatenation Request in JSON\nDESCRIPTION: This JSON object demonstrates a sample request body for the /v1/video/concatenate endpoint. It includes an array of video URLs to be concatenated, a webhook URL for receiving the response, and a request ID.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/concatenate.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"video_urls\": [\n        {\"video_url\": \"https://example.com/video1.mp4\"},\n        {\"video_url\": \"https://example.com/video2.mp4\"},\n        {\"video_url\": \"https://example.com/video3.mp4\"}\n    ],\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"request-123\"\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Media Conversion Request\nDESCRIPTION: A cURL command example demonstrating how to make a POST request to the media convert endpoint, including the required API key header and JSON payload with conversion parameters.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/convert/media_convert.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/media/convert \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"media_url\": \"https://example.com/video.mp4\",\n    \"format\": \"avi\",\n    \"video_codec\": \"libx264\",\n    \"video_preset\": \"medium\",\n    \"video_crf\": 23,\n    \"audio_codec\": \"aac\",\n    \"audio_bitrate\": \"128k\",\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Sending Media Metadata Request using cURL\nDESCRIPTION: This snippet demonstrates how to send a request to the Media Metadata API using cURL. It includes setting the Content-Type header, adding authentication, and sending the request payload.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/metadata.md#2025-04-23_snippet_4\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST https://api.example.com/v1/media/metadata \\\n  -H \"Content-Type: application/json\" \\\n  -H \"Authorization: Bearer your_api_key\" \\\n  -d '{\n    \"media_url\": \"https://example.com/sample-video.mp4\",\n    \"webhook_url\": \"https://your-server.com/webhook\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Example JSON Request for Media Download API\nDESCRIPTION: Sample JSON request body for the media download API. Includes media URL, webhook URL, custom ID, and various download options.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"media_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n  \"webhook_url\": \"https://example.com/webhook\",\n  \"id\": \"custom-request-123\",\n  \"format\": {\n    \"quality\": \"best\",\n    \"resolution\": \"720p\"\n  },\n  \"audio\": {\n    \"extract\": true,\n    \"format\": \"mp3\"\n  },\n  \"thumbnails\": {\n    \"download\": true\n  }\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Video Concatenation Request with cURL in Bash\nDESCRIPTION: This cURL command demonstrates how to send a POST request to the /v1/video/concatenate endpoint. It includes the necessary headers and a JSON payload with video URLs, webhook URL, and request ID.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/concatenate.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n     -H \"x-api-key: YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n        \"video_urls\": [\n            {\"video_url\": \"https://example.com/video1.mp4\"},\n            {\"video_url\": \"https://example.com/video2.mp4\"},\n            {\"video_url\": \"https://example.com/video3.mp4\"}\n        ],\n        \"webhook_url\": \"https://example.com/webhook\",\n        \"id\": \"request-123\"\n     }' \\\n     https://your-api-endpoint.com/v1/video/concatenate\n```\n\n----------------------------------------\n\nTITLE: Example Request JSON\nDESCRIPTION: Sample JSON request payload showing how to structure the request with all available parameters.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/image/convert/image_to_video.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"image_url\": \"https://example.com/image.jpg\",\n    \"length\": 10,\n    \"frame_rate\": 24,\n    \"zoom_speed\": 5,\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"request-123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending cURL Request to Video Cut API\nDESCRIPTION: Illustrates how to send a POST request to the video cut endpoint using cURL, including the necessary headers and JSON payload.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/cut.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/video/cut \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"video_url\": \"https://example.com/video.mp4\",\n    \"cuts\": [\n      {\n        \"start\": \"00:00:10.000\",\n        \"end\": \"00:00:20.000\"\n      },\n      {\n        \"start\": \"00:00:30.000\",\n        \"end\": \"00:00:40.000\"\n      }\n    ],\n    \"video_codec\": \"libx264\",\n    \"video_preset\": \"medium\",\n    \"video_crf\": 23,\n    \"audio_codec\": \"aac\",\n    \"audio_bitrate\": \"128k\",\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Structuring Success Response for MP3 Conversion in JSON\nDESCRIPTION: Example of a successful response from the MP3 conversion endpoint. It includes various metadata about the request and conversion process, as well as the URL of the converted file.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/convert/media_to_mp3.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"endpoint\": \"/v1/media/convert/mp3\",\n    \"code\": 200,\n    \"id\": \"unique-request-id\",\n    \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n    \"response\": \"https://cloud-storage.example.com/converted-file.mp3\",\n    \"message\": \"success\",\n    \"pid\": 12345,\n    \"queue_id\": 6789,\n    \"run_time\": 5.234,\n    \"queue_time\": 0.123,\n    \"total_time\": 5.357,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending Video Trim Request with cURL\nDESCRIPTION: This bash snippet shows how to send a POST request to the /v1/video/trim endpoint using cURL. It includes the necessary headers and the JSON payload for the video trim operation.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/trim.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/video/trim \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"video_url\": \"https://example.com/video.mp4\",\n    \"start\": \"00:01:00\",\n    \"end\": \"00:03:00\",\n    \"video_codec\": \"libx264\",\n    \"video_preset\": \"faster\",\n    \"video_crf\": 28,\n    \"audio_codec\": \"aac\",\n    \"audio_bitrate\": \"128k\",\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Example Response from S3 Upload API in JSON\nDESCRIPTION: Sample JSON response from the S3 upload API endpoint containing the URL of the uploaded file, filename, bucket name, and public access status.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/s3/upload.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"url\": \"https://bucket-name.s3.region.amazonaws.com/custom-name.mp4\",\n  \"filename\": \"custom-name.mp4\",\n  \"bucket\": \"bucket-name\",\n  \"public\": true\n}\n```\n\n----------------------------------------\n\nTITLE: Example Request for S3 Upload API in JSON\nDESCRIPTION: Sample JSON request body for the S3 upload API endpoint specifying a remote file URL, custom filename, and public access setting.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/s3/upload.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"file_url\": \"https://example.com/path/to/file.mp4\",\n  \"filename\": \"custom-name.mp4\",\n  \"public\": true\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Video Split Request\nDESCRIPTION: Example cURL command demonstrating how to make a POST request to the video split endpoint with all required headers and request body parameters.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/split.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/video/split \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"video_url\": \"https://example.com/video.mp4\",\n    \"splits\": [\n      {\n        \"start\": \"00:00:10.000\",\n        \"end\": \"00:00:20.000\"\n      },\n      {\n        \"start\": \"00:00:30.000\",\n        \"end\": \"00:00:40.000\"\n      }\n    ],\n    \"video_codec\": \"libx264\",\n    \"video_preset\": \"medium\",\n    \"video_crf\": 23,\n    \"audio_codec\": \"aac\",\n    \"audio_bitrate\": \"128k\",\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: API Success Response with Thumbnail URL\nDESCRIPTION: Example JSON response for a successful thumbnail generation request, containing the URL of the generated thumbnail and processing statistics.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/thumbnail.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 200,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"response\": \"https://storage.example.com/thumbnails/video-thumbnail-123.jpg\",\n  \"message\": \"success\",\n  \"run_time\": 1.234,\n  \"queue_time\": 0.567,\n  \"total_time\": 1.801,\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response JSON for Direct Response Type\nDESCRIPTION: This JSON snippet illustrates the success response format when the response_type is set to 'direct'. It includes the transcribed text, SRT content, and segmented data directly in the response.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/media_transcribe.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"/v1/transcribe/media\",\n  \"code\": 200,\n  \"id\": \"custom-job-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"response\": {\n    \"text\": \"Transcribed text content...\",\n    \"srt\": \"SRT formatted content...\",\n    \"segments\": [...],\n    \"text_url\": null,\n    \"srt_url\": null,\n    \"segments_url\": null\n  },\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"run_time\": 5.234,\n  \"queue_time\": 0.123,\n  \"total_time\": 5.357,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example API Request Payload in JSON\nDESCRIPTION: Sample JSON request body showing how to format a request to execute Python code with optional parameters for timeout, webhook URL, and request ID.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/code/execute/execute_python.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": \"print('Hello, World!')\",\n    \"timeout\": 10,\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response JSON for Cloud Response Type\nDESCRIPTION: This JSON snippet shows the success response format when the response_type is set to 'cloud'. It provides URLs to access the transcription results stored in cloud storage.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/media_transcribe.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"/v1/transcribe/media\",\n  \"code\": 200,\n  \"id\": \"custom-job-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"response\": {\n    \"text\": null,\n    \"srt\": null,\n    \"segments\": null,\n    \"text_url\": \"https://storage.example.com/text.txt\",\n    \"srt_url\": \"https://storage.example.com/subtitles.srt\",\n    \"segments_url\": \"https://storage.example.com/segments.json\"\n  },\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"run_time\": 5.234,\n  \"queue_time\": 0.123,\n  \"total_time\": 5.357,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending MP3 Conversion Request Using cURL in Bash\nDESCRIPTION: Example cURL command to send a POST request to the MP3 conversion endpoint. It includes headers for API key and content type, along with a JSON payload containing all possible parameters.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/convert/media_to_mp3.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n     -H \"x-api-key: YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"media_url\": \"https://example.com/video.mp4\", \"webhook_url\": \"https://example.com/webhook\", \"id\": \"unique-request-id\", \"bitrate\": \"192k\"}' \\\n     https://your-api-endpoint.com/v1/media/convert/mp3\n```\n\n----------------------------------------\n\nTITLE: API Asynchronous Response with Webhook\nDESCRIPTION: Example JSON response when a webhook URL is provided, returning a 202 Accepted status with job tracking information.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/thumbnail.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 202,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"processing\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"max_queue_length\": \"unlimited\",\n  \"queue_length\": 1,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: CURL Request Example\nDESCRIPTION: Example CURL command showing how to make an API request with headers and payload.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/image/convert/image_to_video.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n     -H \"x-api-key: YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"image_url\": \"https://example.com/image.jpg\", \"length\": 10, \"frame_rate\": 24, \"zoom_speed\": 5, \"webhook_url\": \"https://example.com/webhook\", \"id\": \"request-123\"}' \\\n     http://your-api-endpoint/v1/image/convert/video\n```\n\n----------------------------------------\n\nTITLE: Sending Silence Detection API Request with cURL\nDESCRIPTION: This cURL command demonstrates how to send a POST request to the silence detection endpoint. It includes the necessary headers and a JSON payload with all possible parameters.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/silence.md#2025-04-23_snippet_3\n\nLANGUAGE: curl\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/media/silence \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"media_url\": \"https://example.com/audio.mp3\",\n    \"start\": \"00:00:10.0\",\n    \"end\": \"00:01:00.0\",\n    \"noise\": \"-25dB\",\n    \"duration\": 0.5,\n    \"mono\": false,\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n}'\n```\n\n----------------------------------------\n\nTITLE: Synchronous Response Format\nDESCRIPTION: Example JSON response when no webhook_url is provided, showing immediate processing results.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/audio/concatenate.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 200,\n  \"id\": \"custom-request-id-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"response\": \"https://storage.example.com/combined-audio-file.mp3\",\n  \"message\": \"success\",\n  \"run_time\": 2.345,\n  \"queue_time\": 0,\n  \"total_time\": 2.345,\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Command Example for Media Cut API\nDESCRIPTION: Example cURL command demonstrating how to make a POST request to the media cut endpoint with all required headers and body parameters.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/cut.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/media/cut \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"media_url\": \"https://example.com/video.mp4\",\n    \"cuts\": [\n      {\n        \"start\": \"00:00:10.000\",\n        \"end\": \"00:00:20.000\"\n      },\n      {\n        \"start\": \"00:00:30.000\",\n        \"end\": \"00:00:40.000\"\n      }\n    ],\n    \"video_codec\": \"libx264\",\n    \"video_preset\": \"medium\",\n    \"video_crf\": 23,\n    \"audio_codec\": \"aac\",\n    \"audio_bitrate\": \"128k\",\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Formatting Silence Detection API Success Response in JSON\nDESCRIPTION: This JSON object illustrates the structure of a successful response from the silence detection endpoint. It includes metadata about the request and an array of detected silence intervals.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/silence.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"endpoint\": \"/v1/media/silence\",\n    \"code\": 200,\n    \"id\": \"unique-request-id\",\n    \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n    \"response\": [\n        {\n            \"start\": 10.5,\n            \"end\": 15.2\n        },\n        {\n            \"start\": 20.0,\n            \"end\": 25.7\n        }\n    ],\n    \"message\": \"success\",\n    \"pid\": 12345,\n    \"queue_id\": 1234567890,\n    \"run_time\": 1.234,\n    \"queue_time\": 0.123,\n    \"total_time\": 1.357,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Command for Audio Concatenation API\nDESCRIPTION: Example cURL command demonstrating how to make a POST request to the audio concatenation endpoint with required headers and payload.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/audio/concatenate.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/audio/concatenate \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: your-api-key-here' \\\n  -d '{\n    \"audio_urls\": [\n      { \"audio_url\": \"https://example.com/audio1.mp3\" },\n      { \"audio_url\": \"https://example.com/audio2.mp3\" }\n    ],\n    \"webhook_url\": \"https://your-webhook-endpoint.com/callback\",\n    \"id\": \"custom-request-id-123\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Successful Video Trim Response\nDESCRIPTION: This JSON snippet illustrates the structure of a successful response from the /v1/video/trim endpoint. It includes details such as the job ID, response URL, processing times, and build number.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/trim.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"/v1/video/trim\",\n  \"code\": 200,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"response\": \"https://example.com/trimmed-video.mp4\",\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 6789,\n  \"run_time\": 5.234,\n  \"queue_time\": 0.123,\n  \"total_time\": 5.357,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Command Example for API Request\nDESCRIPTION: Example cURL command demonstrating how to make a POST request to the Python code execution endpoint with the required headers and request body.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/code/execute/execute_python.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n     -H \"x-api-key: YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"code\": \"print('Hello, World!')\", \"timeout\": 10, \"webhook_url\": \"https://example.com/webhook\", \"id\": \"unique-request-id\"}' \\\n     http://your-api-endpoint/v1/code/execute/python\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format\nDESCRIPTION: Example JSON response showing the structure of a successful video split operation, including processing times and output file URLs.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/split.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"/v1/video/split\",\n  \"code\": 200,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"response\": [\n    {\n      \"file_url\": \"https://example.com/split-1.mp4\"\n    },\n    {\n      \"file_url\": \"https://example.com/split-2.mp4\"\n    }\n  ],\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 6789,\n  \"run_time\": 5.234,\n  \"queue_time\": 0.123,\n  \"total_time\": 5.357,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Audio Options JSON Structure for Media Download API\nDESCRIPTION: JSON structure for specifying audio options in the API request. Includes fields for audio extraction, format, and quality.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n\"audio\": {\n  \"extract\": boolean,      // Whether to extract audio\n  \"format\": \"string\",      // Audio format (e.g., \"mp3\", \"m4a\")\n  \"quality\": \"string\"      // Audio quality specification\n}\n```\n\n----------------------------------------\n\nTITLE: Format Options JSON Structure for Media Download API\nDESCRIPTION: JSON structure for specifying format options in the API request. Includes fields for quality, format_id, resolution, and codec preferences.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_0\n\nLANGUAGE: json\nCODE:\n```\n\"format\": {\n  \"quality\": \"string\",     // Quality specification (e.g., \"best\")\n  \"format_id\": \"string\",   // Specific format ID\n  \"resolution\": \"string\",  // Resolution specification (e.g., \"720p\")\n  \"video_codec\": \"string\", // Video codec preference\n  \"audio_codec\": \"string\"  // Audio codec preference\n}\n```\n\n----------------------------------------\n\nTITLE: Queued Media Metadata Response in JSON\nDESCRIPTION: This snippet shows the JSON structure of a response when the Media Metadata request is queued for processing. It includes a 202 status code and information about the job and queue.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/metadata.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 202,\n  \"id\": \"custom-id\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"processing\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"max_queue_length\": \"unlimited\",\n  \"queue_length\": 0,\n  \"build_number\": \"123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Subtitle Options JSON Structure for Media Download API\nDESCRIPTION: JSON structure for specifying subtitle options in the API request. Includes fields for downloading subtitles, specifying languages, and formats.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n\"subtitles\": {\n  \"download\": boolean,     // Whether to download subtitles\n  \"languages\": [\"string\"], // Array of language codes for subtitles\n  \"formats\": [\"string\"]    // Array of subtitle formats to download\n}\n```\n\n----------------------------------------\n\nTITLE: API Response Examples - JSON\nDESCRIPTION: Sample JSON responses for successful operations and various error scenarios including parameter validation, font errors, and server errors.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/caption_video.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 200,\n    \"id\": \"request-123\",\n    \"job_id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"response\": \"https://cloud.example.com/captioned-video.mp4\",\n    \"message\": \"success\",\n    \"pid\": 12345,\n    \"queue_id\": 140682639937472,\n    \"run_time\": 5.234,\n    \"queue_time\": 0.012,\n    \"total_time\": 5.246,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 400,\n    \"id\": \"request-123\",\n    \"job_id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"message\": \"Missing or invalid parameters\",\n    \"pid\": 12345,\n    \"queue_id\": 140682639937472,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 400,\n    \"error\": \"The requested font 'InvalidFont' is not available. Please choose from the available fonts.\",\n    \"available_fonts\": [\"Arial\", \"Times New Roman\", \"Courier New\", ...],\n    \"pid\": 12345,\n    \"queue_id\": 140682639937472,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 500,\n    \"id\": \"request-123\",\n    \"job_id\": \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"error\": \"An unexpected error occurred during the captioning process.\",\n    \"pid\": 12345,\n    \"queue_id\": 140682639937472,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Download Options JSON Structure for Media Download API\nDESCRIPTION: JSON structure for specifying download options in the API request. Includes fields for maximum file size, rate limit, and retry attempts.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n\"download\": {\n  \"max_filesize\": integer, // Maximum file size in bytes\n  \"rate_limit\": \"string\",  // Download rate limit (e.g., \"50K\")\n  \"retries\": integer       // Number of download retry attempts\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response from NCA Toolkit Test Endpoint\nDESCRIPTION: The JSON response returned when the test endpoint successfully creates and uploads a file. Contains metadata such as job_id, response URL, and execution times.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/toolkit/test.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"/v1/toolkit/test\",\n  \"code\": 200,\n  \"id\": null,\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"response\": \"https://cloud-storage.com/success.txt\",\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"run_time\": 0.123,\n  \"queue_time\": 0.0,\n  \"total_time\": 0.123,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example cURL Command for Media Download API\nDESCRIPTION: Sample cURL command demonstrating how to make a POST request to the media download API endpoint with the required headers and JSON body.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_6\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/BETA/media/download \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: your-api-key-here' \\\n  -d '{\n    \"media_url\": \"https://www.youtube.com/watch?v=dQw4w9WgXcQ\",\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"custom-request-123\",\n    \"format\": {\n      \"quality\": \"best\",\n      \"resolution\": \"720p\"\n    },\n    \"audio\": {\n      \"extract\": true,\n      \"format\": \"mp3\"\n    },\n    \"thumbnails\": {\n      \"download\": true\n    }\n  }'\n```\n\n----------------------------------------\n\nTITLE: Webhook Callback Response\nDESCRIPTION: Example JSON payload sent to the webhook URL upon completion of asynchronous processing.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/audio/concatenate.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"/v1/audio/concatenate\",\n  \"code\": 200,\n  \"id\": \"custom-request-id-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"response\": \"https://storage.example.com/combined-audio-file.mp3\",\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"run_time\": 3.456,\n  \"queue_time\": 1.234,\n  \"total_time\": 4.690,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Success Response for Video Cut API\nDESCRIPTION: Shows the structure of a successful JSON response from the video cut endpoint, including job details and processing information.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/cut.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"/v1/video/cut\",\n  \"code\": 200,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"response\": \"https://example.com/processed-video.mp4\",\n  \"message\": \"success\",\n  \"pid\": 12345,\n  \"queue_id\": 6789,\n  \"run_time\": 5.234,\n  \"queue_time\": 0.123,\n  \"total_time\": 5.357,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate JSON Response for Media Download API with Webhook\nDESCRIPTION: Example JSON response when a webhook URL is provided. Includes status code, job ID, queue information, and build number.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 202,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"processing\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"max_queue_length\": \"unlimited\",\n  \"queue_length\": 3,\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Asynchronous Response Format\nDESCRIPTION: Example JSON response when webhook_url is provided, showing initial acknowledgment of the queued request.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/audio/concatenate.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 202,\n  \"id\": \"custom-request-id-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"processing\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"max_queue_length\": \"unlimited\",\n  \"queue_length\": 1,\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Sending a Test Request to the NCA Toolkit API in Bash\nDESCRIPTION: A curl command example that demonstrates how to make a GET request to the test endpoint with the required API key header.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/toolkit/test.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X GET \\\n  https://your-api-url.com/v1/toolkit/test \\\n  -H 'x-api-key: your-api-key'\n```\n\n----------------------------------------\n\nTITLE: Error Response Formats in JSON\nDESCRIPTION: Collection of possible error response formats for different error scenarios including invalid parameters, execution errors, timeouts, and server errors.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/code/execute/execute_python.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Missing or invalid parameters\",\n    \"stdout\": \"\",\n    \"exit_code\": 400\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Error message from the executed code\",\n    \"stdout\": \"Output from the executed code\",\n    \"exit_code\": 400\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"Execution timed out after 10 seconds\"\n}\n```\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"error\": \"An internal server error occurred\",\n    \"stdout\": \"\",\n    \"stderr\": \"\",\n    \"exit_code\": 500\n}\n```\n\n----------------------------------------\n\nTITLE: cURL Command for FFmpeg Compose API Request\nDESCRIPTION: Example cURL command to call the /v1/ffmpeg/compose endpoint with a complete request payload including authentication header and JSON body.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/ffmpeg/ffmpeg_compose.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/ffmpeg/compose \\\n  -H 'x-api-key: YOUR_API_KEY' \\\n  -H 'Content-Type: application/json' \\\n  -d '{\n    \"inputs\": [\n      {\n        \"file_url\": \"https://example.com/video1.mp4\",\n        \"options\": [\n          {\n            \"option\": \"-ss\",\n            \"argument\": 10\n          },\n          {\n            \"option\": \"-t\",\n            \"argument\": 20\n          }\n        ]\n      },\n      {\n        \"file_url\": \"https://example.com/video2.mp4\"\n      }\n    ],\n    \"filters\": [\n      {\n        \"filter\": \"hflip\"\n      }\n    ],\n    \"outputs\": [\n      {\n        \"options\": [\n          {\n            \"option\": \"-c:v\",\n            \"argument\": \"libx264\"\n          },\n          {\n            \"option\": \"-crf\",\n            \"argument\": 23\n          }\n        ]\n      }\n    ],\n    \"global_options\": [\n      {\n        \"option\": \"-y\"\n      }\n    ],\n    \"metadata\": {\n      \"thumbnail\": true,\n      \"filesize\": true,\n      \"duration\": true,\n      \"bitrate\": true,\n      \"encoder\": true\n    },\n    \"webhook_url\": \"https://example.com/webhook\",\n    \"id\": \"unique-request-id\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Error Response Format for Media Conversion\nDESCRIPTION: The JSON structure returned when an error occurs during the media conversion process, including error code, message, and request identification details.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/convert/media_convert.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"message\": \"Invalid request payload\",\n  \"pid\": 12345,\n  \"queue_id\": 1234567890,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: CURL Request Example - Bash\nDESCRIPTION: Example of making an API request using curl, demonstrating header setup and complex JSON payload formatting.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/caption_video.md#2025-04-23_snippet_2\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n     -H \"x-api-key: YOUR_API_KEY\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\n        \"video_url\": \"https://example.com/video.mp4\",\n        \"settings\": {\n            \"line_color\": \"#FFFFFF\",\n            \"word_color\": \"#FFFF00\",\n            \"outline_color\": \"#000000\",\n            \"all_caps\": false,\n            \"max_words_per_line\": 10,\n            \"position\": \"bottom_center\",\n            \"alignment\": \"center\",\n            \"font_family\": \"Arial\",\n            \"font_size\": 24,\n            \"style\": \"karaoke\",\n            \"outline_width\": 2\n        },\n        \"replace\": [\n            {\n                \"find\": \"um\",\n                \"replace\": \"\"\n            }\n        ],\n        \"id\": \"custom-request-id\"\n    }' \\\n    https://your-api-endpoint.com/v1/video/caption\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Error Response for Bad Request in Video Cut API\nDESCRIPTION: Demonstrates the JSON structure for a 400 Bad Request error response from the video cut endpoint.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/cut.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"message\": \"Invalid request payload\"\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response for Video Concatenation in JSON\nDESCRIPTION: This JSON object represents a successful response from the /v1/video/concatenate endpoint. It includes details such as the endpoint, response code, request ID, job ID, response URL, processing times, and build number.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/concatenate.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"endpoint\": \"/v1/video/concatenate\",\n    \"code\": 200,\n    \"id\": \"request-123\",\n    \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n    \"response\": \"https://cloud-storage.example.com/combined-video.mp4\",\n    \"message\": \"success\",\n    \"pid\": 12345,\n    \"queue_id\": 6789,\n    \"run_time\": 10.234,\n    \"queue_time\": 2.345,\n    \"total_time\": 12.579,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Validating Request Payload Schema in Python\nDESCRIPTION: This code defines the JSON schema for validating the request payload of the silence detection endpoint. It specifies required and optional parameters, their types, and constraints.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/silence.md#2025-04-23_snippet_1\n\nLANGUAGE: python\nCODE:\n```\n{\n    \"type\": \"object\",\n    \"properties\": {\n        \"media_url\": {\"type\": \"string\", \"format\": \"uri\"},\n        \"start\": {\"type\": \"string\"},\n        \"end\": {\"type\": \"string\"},\n        \"noise\": {\"type\": \"string\"},\n        \"duration\": {\"type\": \"number\", \"minimum\": 0.1},\n        \"mono\": {\"type\": \"boolean\"},\n        \"webhook_url\": {\"type\": \"string\", \"format\": \"uri\"},\n        \"id\": {\"type\": \"string\"}\n    },\n    \"required\": [\"media_url\", \"duration\"],\n    \"additionalProperties\": False\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Media Metadata in JSON\nDESCRIPTION: This snippet illustrates the JSON structure of an error response from the Media Metadata API. It includes an error code, message, and details about the job and queue.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/metadata.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 500,\n  \"id\": \"custom-id\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"Error extracting metadata: [error details]\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 0,\n  \"build_number\": \"123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Media Feedback Endpoint\nDESCRIPTION: Main endpoint that serves the static feedback form page. This endpoint is publicly accessible and requires no authentication.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/feedback.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /v1/media/feedback\n```\n\n----------------------------------------\n\nTITLE: Error Response for Unauthorized Access\nDESCRIPTION: This JSON snippet demonstrates the error response structure when the API key is missing or invalid. It returns a 401 Unauthorized status code.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/trim.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 401,\n  \"message\": \"Unauthorized\"\n}\n```\n\n----------------------------------------\n\nTITLE: Accessing Static Resources Endpoint\nDESCRIPTION: Endpoint pattern for accessing static resources like CSS, JavaScript, and images. The filename parameter should be the relative path to the resource.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/feedback.md#2025-04-23_snippet_1\n\nLANGUAGE: plaintext\nCODE:\n```\nGET /v1/media/feedback/<filename>\n```\n\n----------------------------------------\n\nTITLE: API Invalid Request Error Response\nDESCRIPTION: Example JSON error response for an invalid request, typically occurring when required parameters are missing or formatted incorrectly.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/thumbnail.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"message\": \"Invalid request: 'video_url' is a required property\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\"\n}\n```\n\n----------------------------------------\n\nTITLE: Failed Authentication Response Format\nDESCRIPTION: JSON response structure returned when authentication fails with a 401 Unauthorized status code. Shows error response format with null response field.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/toolkit/authenticate.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 401,\n  \"endpoint\": \"/authenticate\",\n  \"id\": null,\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"message\": \"Unauthorized\",\n  \"pid\": 12345,\n  \"queue_id\": 1234567890,\n  \"queue_length\": 0,\n  \"response\": null,\n  \"run_time\": 0.001,\n  \"total_time\": 0.001,\n  \"queue_time\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Error Response for Unauthorized Access in Video Cut API\nDESCRIPTION: Shows the JSON structure for a 401 Unauthorized error response when an invalid API key is provided to the video cut endpoint.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/cut.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 401,\n  \"message\": \"Invalid API key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Example for Media Cut API\nDESCRIPTION: Example of a successful response from the media cut endpoint showing the job details, timing information, and output file URL.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/cut.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 200,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"response\": {\n    \"file_url\": \"https://example.com/output.mp4\"\n  },\n  \"message\": \"success\",\n  \"run_time\": 5.234,\n  \"queue_time\": 0.012,\n  \"total_time\": 5.246,\n  \"pid\": 12345,\n  \"queue_id\": 1234567890,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON for Queue Full\nDESCRIPTION: This JSON snippet demonstrates the error response when the processing queue is full. It includes the queue length and maximum queue size information.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/media_transcribe.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 429,\n  \"id\": \"custom-job-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"MAX_QUEUE_LENGTH (100) reached\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 100,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting Error Response for MP3 Conversion API in JSON\nDESCRIPTION: Example of an error response from the MP3 conversion endpoint. It includes an error code, message, and various metadata about the request and API state.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/convert/media_to_mp3.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 400,\n    \"id\": \"unique-request-id\",\n    \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n    \"message\": \"Invalid request payload: 'media_url' is a required property\",\n    \"pid\": 12345,\n    \"queue_id\": 6789,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Bad Request\nDESCRIPTION: This JSON snippet shows the structure of an error response when the request payload is invalid or missing required parameters. It returns a 400 Bad Request status code.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/trim.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"message\": \"Invalid request payload\"\n}\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Error Response for Video Concatenation in JSON\nDESCRIPTION: This JSON object represents an error response for an unauthorized request to the /v1/video/concatenate endpoint. It includes an error code and message indicating missing or invalid authentication.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/concatenate.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 401,\n  \"message\": \"Unauthorized\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Format\nDESCRIPTION: Example JSON response demonstrating the error response structure when invalid parameters are provided or processing fails.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/split.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"message\": \"Invalid request payload: 'splits' is a required property\",\n  \"pid\": 12345,\n  \"queue_id\": 6789,\n  \"queue_length\": 2,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Error Response for Internal Server Error in Video Cut API\nDESCRIPTION: Shows the JSON structure for a 500 Internal Server Error response when an unexpected error occurs during video processing in the video cut endpoint.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/cut.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 500,\n  \"message\": \"An error occurred during video processing\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Server Error Response\nDESCRIPTION: Example JSON error response for server-side processing failures, such as when the video cannot be downloaded or processed.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/thumbnail.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 500,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"Failed to download video from provided URL\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: FFmpeg Compose API Error Response Example\nDESCRIPTION: Example JSON response for an error scenario when calling the /v1/ffmpeg/compose endpoint, showing the structure of error information returned.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/ffmpeg/ffmpeg_compose.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"job-id\",\n  \"message\": \"Invalid request payload: 'inputs' is a required property\",\n  \"pid\": 123,\n  \"queue_id\": 456,\n  \"queue_length\": 0,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Thumbnail Options JSON Structure for Media Download API\nDESCRIPTION: JSON structure for specifying thumbnail options in the API request. Includes fields for downloading, converting, and embedding thumbnails.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n\"thumbnails\": {\n  \"download\": boolean,     // Whether to download thumbnails\n  \"download_all\": boolean, // Whether to download all available thumbnails\n  \"formats\": [\"string\"],   // Array of thumbnail formats to download\n  \"convert\": boolean,      // Whether to convert thumbnails\n  \"embed_in_audio\": boolean // Whether to embed thumbnails in audio files\n}\n```\n\n----------------------------------------\n\nTITLE: Too Many Requests Error Response for Video Concatenation in JSON\nDESCRIPTION: This JSON object represents an error response when the maximum queue length is reached for the /v1/video/concatenate endpoint. It includes details such as the error code, request ID, job ID, and queue information.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/concatenate.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 429,\n  \"id\": \"request-123\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"message\": \"MAX_QUEUE_LENGTH (100) reached\",\n  \"pid\": 12345,\n  \"queue_id\": 6789,\n  \"queue_length\": 100,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: API Queue Full Error Response\nDESCRIPTION: Example JSON error response when the processing queue is at maximum capacity, preventing new requests from being processed.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/thumbnail.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 429,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"MAX_QUEUE_LENGTH (100) reached\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 100,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response for NCA Toolkit API\nDESCRIPTION: The JSON error response returned when an unexpected error occurs during test endpoint processing.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/toolkit/test.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 500,\n  \"message\": \"An error occurred while processing the request\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response for Internal Server Error\nDESCRIPTION: This JSON snippet shows the error response structure when an unexpected error occurs during the video trimming process. It returns a 500 Internal Server Error status code.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/trim.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 500,\n  \"message\": \"An error occurred during the video trimming process\"\n}\n```\n\n----------------------------------------\n\nTITLE: Authentication Error JSON Response for Media Download API\nDESCRIPTION: Example JSON response for an authentication error with a 401 status code. Includes error message and build number.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_10\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 401,\n  \"message\": \"Invalid API key\",\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response for Video Concatenation in JSON\nDESCRIPTION: This JSON object represents an error response for an internal server error during the video concatenation process. It includes an error code and a generic error message.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/concatenate.md#2025-04-23_snippet_7\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 500,\n  \"message\": \"An error occurred during video concatenation\"\n}\n```\n\n----------------------------------------\n\nTITLE: Server Error JSON Response for Media Download API\nDESCRIPTION: Example JSON response for a server error with a 500 status code. Includes error details and request information.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_12\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 500,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"Error during download process - HTTP Error 403: Forbidden\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 2,\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Invalid Request JSON Response for Media Download API\nDESCRIPTION: Example JSON response for an invalid request with a 400 status code. Includes error message and request details.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_9\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"Invalid request: 'media_url' is a required property\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 2,\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Immediate Response JSON for Asynchronous Processing\nDESCRIPTION: This JSON snippet shows the immediate response returned by the API when a webhook URL is provided for asynchronous processing. It includes job details and queue information.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/media_transcribe.md#2025-04-23_snippet_1\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 202,\n  \"id\": \"custom-job-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"processing\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"max_queue_length\": \"unlimited\",\n  \"queue_length\": 1,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Success Response JSON\nDESCRIPTION: Example success response showing all fields returned by the API upon successful processing.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/image/convert/image_to_video.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 200,\n    \"id\": \"request-123\",\n    \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n    \"response\": \"https://cloud-storage.example.com/converted-video.mp4\",\n    \"message\": \"success\",\n    \"run_time\": 2.345,\n    \"queue_time\": 0.123,\n    \"total_time\": 2.468,\n    \"pid\": 12345,\n    \"queue_id\": 1234567890,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Queue Full JSON Response for Media Download API\nDESCRIPTION: Example JSON response when the processing queue is full, with a 429 status code. Includes queue information and request details.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/download.md#2025-04-23_snippet_11\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 429,\n  \"id\": \"custom-request-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"message\": \"MAX_QUEUE_LENGTH (100) reached\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"queue_length\": 100,\n  \"build_number\": \"1.0.123\"\n}\n```\n\n----------------------------------------\n\nTITLE: Internal Server Error Response JSON\nDESCRIPTION: Example error response when an internal server error occurs during processing.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/image/convert/image_to_video.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 500,\n    \"id\": \"request-123\",\n    \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n    \"message\": \"Error message describing the exception\",\n    \"pid\": 12345,\n    \"queue_id\": 1234567890,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Rate Limit Error Response JSON\nDESCRIPTION: Example error response when the maximum queue length is reached.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/image/convert/image_to_video.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"code\": 429,\n    \"id\": \"request-123\",\n    \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n    \"message\": \"MAX_QUEUE_LENGTH (10) reached\",\n    \"pid\": 12345,\n    \"queue_id\": 1234567890,\n    \"queue_length\": 10,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Error Response Examples for Media Cut API\nDESCRIPTION: Examples of various error responses including bad request, unauthorized access, and internal server errors.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/cut.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"message\": \"Invalid request payload\"\n}\n\n{\n  \"code\": 401,\n  \"message\": \"Unauthorized\"\n}\n\n{\n  \"code\": 500,\n  \"message\": \"Internal Server Error\"\n}\n```\n\n----------------------------------------\n\nTITLE: Defining Video Cut Endpoint in API\nDESCRIPTION: Specifies the HTTP method and path for the video cut endpoint in the API.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/cut.md#2025-04-23_snippet_0\n\nLANGUAGE: plaintext\nCODE:\n```\nPOST /v1/video/cut\n```\n\n----------------------------------------\n\nTITLE: Unauthorized Error Response for NCA Toolkit API\nDESCRIPTION: The JSON error response returned when an invalid or missing API key is provided in the request header.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/toolkit/test.md#2025-04-23_snippet_2\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 401,\n  \"message\": \"Unauthorized: Invalid or missing API key\"\n}\n```\n\n----------------------------------------\n\nTITLE: Specifying Docker Image for NCA Toolkit Deployment on GCP\nDESCRIPTION: This snippet provides the Docker image to be used when deploying the No-Code Architects Toolkit on Google Cloud Platform. It specifies the latest version of the toolkit from the stephengpope Docker Hub repository.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/cloud-installation/gcp.md#2025-04-23_snippet_0\n\nLANGUAGE: bash\nCODE:\n```\nstephengpope/no-code-architects-toolkit:latest\n```\n\n----------------------------------------\n\nTITLE: Static Files Directory Structure\nDESCRIPTION: Directory path and structure containing the static website files including HTML, CSS, JavaScript and image assets.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/feedback.md#2025-04-23_snippet_2\n\nLANGUAGE: plaintext\nCODE:\n```\nservices/v1/media/feedback/static/\n```\n\n----------------------------------------\n\nTITLE: Error Response JSON for Server Error\nDESCRIPTION: This JSON snippet shows the error response format for a server error. It includes details about the error, processing times, and queue information.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/media_transcribe.md#2025-04-23_snippet_5\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"endpoint\": \"/v1/transcribe/media\",\n  \"code\": 500,\n  \"id\": \"custom-job-123\",\n  \"job_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n  \"response\": null,\n  \"message\": \"Error message details\",\n  \"pid\": 12345,\n  \"queue_id\": 67890,\n  \"run_time\": 0.123,\n  \"queue_time\": 0.056,\n  \"total_time\": 0.179,\n  \"queue_length\": 1,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Bad Request Error Response for Video Concatenation in JSON\nDESCRIPTION: This JSON object represents an error response for a bad request to the /v1/video/concatenate endpoint. It includes an error code and message indicating an invalid request payload.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/concatenate.md#2025-04-23_snippet_4\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 400,\n  \"message\": \"Invalid request payload\"\n}\n```\n\n----------------------------------------\n\nTITLE: Formatting JSON Error Response for Too Many Requests in Video Cut API\nDESCRIPTION: Illustrates the JSON structure for a 429 Too Many Requests error response when the maximum queue length is reached in the video cut endpoint.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/cut.md#2025-04-23_snippet_6\n\nLANGUAGE: json\nCODE:\n```\n{\n  \"code\": 429,\n  \"id\": \"unique-request-id\",\n  \"job_id\": \"a1b2c3d4-e5f6-g7h8-i9j0-k1l2m3n4o5p6\",\n  \"message\": \"MAX_QUEUE_LENGTH (100) reached\",\n  \"pid\": 12345,\n  \"queue_id\": 6789,\n  \"queue_length\": 100,\n  \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Successful Response Format in JSON\nDESCRIPTION: Example of a successful API response showing the complete response structure including execution results, timing information, and process details.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/code/execute/execute_python.md#2025-04-23_snippet_3\n\nLANGUAGE: json\nCODE:\n```\n{\n    \"endpoint\": \"/v1/code/execute/python\",\n    \"code\": 200,\n    \"id\": \"unique-request-id\",\n    \"job_id\": \"generated-job-id\",\n    \"response\": {\n        \"result\": null,\n        \"stdout\": \"Hello, World!\\n\",\n        \"stderr\": \"\",\n        \"exit_code\": 0\n    },\n    \"message\": \"success\",\n    \"pid\": 12345,\n    \"queue_id\": 1234567890,\n    \"run_time\": 0.123,\n    \"queue_time\": 0.0,\n    \"total_time\": 0.123,\n    \"queue_length\": 0,\n    \"build_number\": \"1.0.0\"\n}\n```\n\n----------------------------------------\n\nTITLE: Example cURL Command for Video Thumbnail API Request\nDESCRIPTION: Sample cURL command demonstrating how to make a POST request to the thumbnail generation API with the required headers and JSON payload.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/video/thumbnail.md#2025-04-23_snippet_1\n\nLANGUAGE: bash\nCODE:\n```\ncurl -X POST \\\n  https://api.example.com/v1/video/thumbnail \\\n  -H 'Content-Type: application/json' \\\n  -H 'x-api-key: your-api-key' \\\n  -d '{\n    \"video_url\": \"https://example.com/video.mp4\",\n    \"second\": 30,\n    \"webhook_url\": \"https://your-service.com/webhook\",\n    \"id\": \"custom-request-123\"\n  }'\n```\n\n----------------------------------------\n\nTITLE: Defining Silence Detection Endpoint in Python\nDESCRIPTION: This code snippet defines the route and HTTP method for the silence detection endpoint. It uses the POST method and includes a validate_payload directive to enforce the request body schema.\nSOURCE: https://github.com/stephengpope/no-code-architects-toolkit/blob/main/docs/media/silence.md#2025-04-23_snippet_0\n\nLANGUAGE: python\nCODE:\n```\nPOST /v1/media/silence\n```"
  }
]